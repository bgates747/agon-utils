import os

# Directories
tgt_dir = "examples/fonts/tgt/ttf"
output_file = "examples/fonts/src/asm/fonts_list.inc"

# Find and sort all .font files in the target directory
font_files = []
for root, _, files in os.walk(tgt_dir):
    for file in files:
        if file.endswith(".font"):
            full_path = os.path.join(root, file)
            rel_path = os.path.relpath(full_path, tgt_dir)
            font_files.append(rel_path)

# Sort font files
font_files.sort()

# Helper function to parse font filename into components
def parse_font_file(font_filename):
    base_name = os.path.splitext(os.path.basename(font_filename))[0]
    parts = base_name.split('_')
    font_name = "_".join(parts[:-2])
    variant = parts[-2]
    dimensions = parts[-1]
    width, height = map(int, dimensions.split('x'))
    return font_name, variant, width, height, font_filename

# Parse font files into structured data
parsed_fonts = [parse_font_file(font_file) for font_file in font_files]

# Write assembly file
with open(output_file, "w") as asm_file:
    asm_file.write("; Generated by build_91c_asm_font.py\n")
    asm_file.write(f"num_fonts: equ {len(parsed_fonts)}\n\n")

    # Write Index list
    asm_file.write("; Index list:\n")
    for idx, (font_name, variant, width, height, filename) in enumerate(parsed_fonts):
        font_identifier = f"{font_name}_{variant}_{width}x{height}"
        asm_file.write(f"{font_identifier}: equ {idx}\n")
    asm_file.write("\n")

    # Write font_list section
    asm_file.write("font_list: ; width; height; filesize; filename;:\n")
    for font_name, variant, width, height, filename in parsed_fonts:
        font_identifier = f"fn_{font_name}_{variant}_{width}x{height}"
        asm_file.write(f"\tdl {width}, {height}, 0, {font_identifier}\n")
    asm_file.write("\n")

    # Write files_list section
    asm_file.write("; files_list: ; filename:\n")
    for font_name, variant, width, height, filename in parsed_fonts:
        font_identifier = f"fn_{font_name}_{variant}_{width}x{height}"
        font_path = f"ttf/{filename}"
        asm_file.write(f"{font_identifier}: db \"{font_path}\",0\n")
