import os

def build_font_asm(tgt_dir, output_file):
    """
    Generates an assembly file listing fonts from .font files in the target directory.

    :param tgt_dir: Directory containing .font files
    :param output_file: Output file path for the generated assembly code
    """
    # Find and sort all .font files in the target directory
    font_files = []
    for root, _, files in os.walk(tgt_dir):
        for file in files:
            if file.endswith(".font"):
                full_path = os.path.join(root, file)
                rel_path = os.path.relpath(full_path, tgt_dir)
                font_files.append(rel_path)

    # Sort font files
    font_files.sort()

    # Helper function to parse font filename into components
    def parse_font_file(font_filename):
        base_name = os.path.splitext(os.path.basename(font_filename))[0]
        parts = base_name.split('_')
        font_name = "_".join(parts[:-2])
        variant = parts[-2]
        dimensions = parts[-1]
        width, height = map(int, dimensions.split('x'))
        return font_name, variant, width, height, font_filename

    # Parse font files into structured data
    parsed_fonts = [parse_font_file(font_file) for font_file in font_files]

    # Write assembly file
    with open(output_file, "w") as asm_file:
        asm_file.write("; Generated by build_font_asm\n")
        asm_file.write(f"num_fonts: equ {len(parsed_fonts)}\n\n")

        # Write Index list
        asm_file.write("; Index list:\n")
        for idx, (font_name, variant, width, height, filename) in enumerate(parsed_fonts):
            font_identifier = f"{font_name}_{variant}_{width}x{height}".replace(' ', '_')
            asm_file.write(f"{font_identifier}: equ {idx}\n")
        asm_file.write("\n")

        # Write font_list section
        asm_file.write("font_list: ; width; height; filesize; filename;:\n")
        for font_name, variant, width, height, filename in parsed_fonts:
            font_identifier = f"fn_{font_name}_{variant}_{width}x{height}".replace(' ', '_')
            asm_file.write(f"\tdl {width}, {height}, 0, {font_identifier}\n")
        asm_file.write("\n")

        # Write files_list section
        asm_file.write("; files_list: ; filename:\n")
        for font_name, variant, width, height, filename in parsed_fonts:
            font_identifier = f"fn_{font_name}_{variant}_{width}x{height}".replace(' ', '_')
            font_path = f"ttf/{filename}"
            asm_file.write(f"{font_identifier}: db \"{font_path}\",0\n")

if __name__ == '__main__':
    # Directories and files (currently hardcoded)
    tgt_dir = "examples/font_editor/tgt"
    output_file = "examples/font_editor/src/asm/fonts_list.inc"

    # Call the function with the hardcoded variables
    build_font_asm(tgt_dir, output_file)
