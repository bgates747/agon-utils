import os
import re

# Helper function to parse font filename into components
def parse_font_file(font_filename):
    base_name = os.path.splitext(os.path.basename(font_filename))[0]
    parts = base_name.split('_')
    font_name = "_".join(parts[:-2])
    variant = parts[-2]
    dimensions = parts[-1]
    width, height = map(int, dimensions.split('x'))
    return font_name, variant, width, height, font_filename

# Helper function to sanitize label names
def sanitize_label(label):
    # Replace non-alphanumeric characters except underscores with underscores
    return re.sub(r'[^A-Za-z0-9_]', '_', label)

def build_fonts_asm(src_dir, tgt_dir):
    """
    Generates an assembly file listing fonts from .font files in the target directory.

    :param tgt_dir: Directory containing .font files
    :param output_file: Output file path for the generated assembly code
    """
    # Find and sort all .font files in the target directory
    font_files = []
    for root, _, files in os.walk(tgt_dir):
        for file in files:
            if file.endswith(".font"):
                full_path = os.path.join(root, file)
                rel_path = os.path.relpath(full_path, tgt_dir)
                font_files.append(rel_path)

    # Sort font files
    font_files.sort()

    # Parse font files into structured data
    parsed_fonts = [parse_font_file(font_file) for font_file in font_files]

    # Write assembly file
    output_file = os.path.join(src_dir, "fonts_list.inc")
    with open(output_file, "w") as asm_file:
        asm_file.write("; Generated by build_91c_asm_font.py\n")
        asm_file.write(f"num_fonts: equ {len(parsed_fonts)}\n\n")

        # Write Index list
        asm_file.write("; Index list:\n")
        for idx, (font_name, variant, width, height, filename) in enumerate(parsed_fonts):
            font_identifier = sanitize_label(f"{font_name}_{variant}_{width}x{height}")
            asm_file.write(f"{font_identifier}: equ {idx}\n")
        asm_file.write("\n")

        # Write font_list section
        asm_file.write("font_list: ; width; height; filesize; filename;:\n")
        for font_name, variant, width, height, filename in parsed_fonts:
            font_identifier = sanitize_label(f"fn_{font_name}_{variant}_{width}x{height}")
            asm_file.write(f"\tdl {width}, {height}, 0, {font_identifier}\n")
        asm_file.write("\n")

        # Write files_list section
        asm_file.write("; files_list: ; filename:\n")
        for font_name, variant, width, height, filename in parsed_fonts:
            font_identifier = sanitize_label(f"fn_{font_name}_{variant}_{width}x{height}")
            font_path = f"{filename}"
            asm_file.write(f"{font_identifier}: db \"{font_path}\",0\n")

def make_cfg(font_filename, screen_mode, src_dir):
    """
    Generates a configuration file with the given screen mode and font name.

    :param font_filename: The font file name (used to generate the font label)
    :param screen_mode: The screen mode value to be set in the config file
    :param src_dir: The directory where the config file will be saved
    """
    # Sanitize the font label
    font_label = sanitize_label(os.path.splitext(font_filename)[0])
    
    # Define the config file path
    cfg_file = os.path.join(src_dir, "cfg.inc")

    # Write to the config file
    with open(cfg_file, 'w') as f:
        f.write(f"screen_mode: equ {screen_mode}\n")
        f.write(f"font_name: equ {font_label}\n")

    print(f"Configuration file created at: {cfg_file}")

if __name__ == '__main__':
    src_dir = "examples/font_editor/src/asm"
    tgt_dir = "examples/font_editor/tgt"

    # Call the function with the hardcoded variables
    build_fonts_asm(src_dir, tgt_dir)