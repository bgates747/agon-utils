PC     Output      Line
040000             0001    	.assume adl=1
040000             0002        .org 0x040000
040000             0003    
040000 C3 45 00 04 0004        jp start
040004             0005    
040004 FF FF FF FF 0006        .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0007        .db "MOS"
040043 00          0008        .db 00h
040044 01          0009        .db 01h
040045             0010    
040045             0011    start:
040045 F5          0012        push af
040046 C5          0013        push bc
040047 D5          0014        push de
040048 DD E5       0015        push ix
04004A FD E5       0016        push iy
04004C             0017    
04004C CD D5 0D 04 0018    	call main
040050             0019    
040050             0020    exit:
040050 FD E1       0021        pop iy
040052 DD E1       0022        pop ix
040054 D1          0023        pop de
040055 C1          0024        pop bc
040056 F1          0025        pop af
040057 21 00 00 00 0026        ld hl,0
04005B C9          0027        ret
04005C             0028    
04005C             0029    ; API includes
04005C             0030    ; API INCLUDES
04005C             0031        include "mos_api.inc"
04005C             0001*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
04005C             0002*   ;
04005C             0003*   ; Title:	AGON MOS - API for user projects
04005C             0004*   ; Author:	Dean Belfield
04005C             0005*   ;			Adapted for agon-ez80asm by Jeroen Venema
04005C             0006*   ;			Added MOS error codes for return in HL
04005C             0007*   ; Created:	03/08/2022
04005C             0008*   ; Last Updated:	10/08/2023
04005C             0009*   ;
04005C             0010*   ; Modinfo:
04005C             0011*   ; 05/08/2022:	Added mos_feof
04005C             0012*   ; 09/08/2022:	Added system variables: cursorX, cursorY
04005C             0013*   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
04005C             0014*   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
04005C             0015*   ; 24/09/2022:	Added mos_getError, mos_mkdir
04005C             0016*   ; 13/10/2022:	Added mos_oscli
04005C             0017*   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
04005C             0018*   ; 04/03/2023:	Added sysvar_scrpixelIndex
04005C             0019*   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
04005C             0020*   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
04005C             0021*   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
04005C             0022*   ; 22/03/2023:	The VDP commands are now indexed from 0x80
04005C             0023*   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
04005C             0024*   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
04005C             0025*   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
04005C             0026*   ; 19/05/2023:	Added sysvar_scrMode
04005C             0027*   ; 05/06/2023:	Added sysvar_rtcEnable
04005C             0028*   ; 03/08/2023:	Added mos_setkbvector
04005C             0029*   ; 10/08/2023:	Added mos_getkbmap
04005C             0030*   
04005C             0031*   ; VDP control (VDU 23, 0, n)
04005C             0032*   ;
04005C             0033*   vdp_gp:				EQU 80h
04005C             0034*   vdp_keycode:		EQU 81h
04005C             0035*   vdp_cursor:			EQU	82h
04005C             0036*   vdp_scrchar:		EQU	83h
04005C             0037*   vdp_scrpixel:		EQU	84h
04005C             0038*   vdp_audio:			EQU	85h
04005C             0039*   vdp_mode:			EQU	86h
04005C             0040*   vdp_rtc:			EQU	87h
04005C             0041*   vdp_keystate:		EQU	88h
04005C             0042*   vdp_logicalcoords:	EQU	C0h
04005C             0043*   vdp_terminalmode:	EQU	FFh
04005C             0044*   
04005C             0045*   ;
04005C             0046*   ; Macro for calling the API
04005C             0047*   ; Parameters:
04005C             0048*   ; - function: One of the function numbers listed below
04005C             0049*   ;
04005C             0050*   	MACRO	MOSCALL	function
04005C             0051*   			LD	A, function
04005C             0052*   			RST.LIL	08h
04005C             0053*   	ENDMACRO
04005C             0054*   
04005C             0055*   ; MOS high level functions
04005C             0056*   ;
04005C             0057*   ; Get keycode
04005C             0058*   ; Returns:
04005C             0059*   ;  A: ASCII code of key pressed, or 0 if no key pressed
04005C             0060*   mos_getkey:			EQU	00h
04005C             0061*   
04005C             0062*   ; Load an area of memory from a file.
04005C             0063*   ; HLU: Address of filename (zero terminated)
04005C             0064*   ; DEU: Address at which to load
04005C             0065*   ; BCU: Maximum allowed size (bytes)
04005C             0066*   ; Returns:
04005C             0067*   ; - A: File error, or 0 if OK
04005C             0068*   ; - F: Carry reset indicates no room for file.
04005C             0069*   mos_load:			EQU	01h
04005C             0070*   
04005C             0071*   ; Save a file to the SD card from RAM
04005C             0072*   ; HLU: Address of filename (zero terminated)
04005C             0073*   ; DEU: Address to save from
04005C             0074*   ; BCU: Number of bytes to save
04005C             0075*   ; Returns:
04005C             0076*   ; - A: File error, or 0 if OK
04005C             0077*   ; - F: Carry reset indicates no room for file
04005C             0078*   mos_save:			EQU	02h
04005C             0079*   
04005C             0080*   ; Change directory
04005C             0081*   ; HLU: Address of path (zero terminated)
04005C             0082*   ; Returns:
04005C             0083*   ; - A: File error, or 0 if OK
04005C             0084*   mos_cd:				EQU	03h
04005C             0085*   
04005C             0086*   ; Directory listing
04005C             0087*   ; HLU: Address of path (zero terminated)
04005C             0088*   ; Returns:
04005C             0089*   ; - A: File error, or 0 if OK
04005C             0090*   mos_dir:			EQU	04h
04005C             0091*   
04005C             0092*   ; Delete a file from the SD card
04005C             0093*   ; HLU: Address of filename (zero terminated)
04005C             0094*   ; Returns:
04005C             0095*   ; - A: File error, or 0 if OK
04005C             0096*   mos_del:			EQU	05h
04005C             0097*   
04005C             0098*   ; Rename a file on the SD card
04005C             0099*   ; HLU: Address of filename1 (zero terminated)
04005C             0100*   ; DEU: Address of filename2 (zero terminated)
04005C             0101*   ; Returns:
04005C             0102*   ; - A: File error, or 0 if OK
04005C             0103*   mos_ren:			EQU	06h
04005C             0104*   
04005C             0105*   ; Make a folder on the SD card
04005C             0106*   ; HLU: Address of filename (zero terminated)
04005C             0107*   ; Returns:
04005C             0108*   ; - A: File error, or 0 if OK
04005C             0109*   mos_mkdir:			EQU	07h
04005C             0110*   
04005C             0111*   ; Get a pointer to a system variable
04005C             0112*   ; Returns:
04005C             0113*   ; IXU: Pointer to system variables (see mos_api.asm for more details)
04005C             0114*   mos_sysvars:		EQU	08h
04005C             0115*   
04005C             0116*   ; Invoke the line editor
04005C             0117*   ; HLU: Address of the buffer
04005C             0118*   ; BCU: Buffer length
04005C             0119*   ;   E: 0 to not clear buffer, 1 to clear
04005C             0120*   ; Returns:
04005C             0121*   ;   A: Key that was used to exit the input loop (CR=13, ESC=27)
04005C             0122*   mos_editline:		EQU	09h
04005C             0123*   
04005C             0124*   ; Open a file
04005C             0125*   ; HLU: Filename
04005C             0126*   ;   C: Mode
04005C             0127*   ; Returns:
04005C             0128*   ;   A: Filehandle, or 0 if couldn't open
04005C             0129*   mos_fopen:			EQU	0Ah
04005C             0130*   
04005C             0131*   ; Close a file
04005C             0132*   ;   C: Filehandle
04005C             0133*   ; Returns
04005C             0134*   ;   A: Number of files still open
04005C             0135*   mos_fclose:			EQU	0Bh
04005C             0136*   
04005C             0137*   ; Get a character from a file
04005C             0138*   ;   C: Filehandle
04005C             0139*   ; Returns:
04005C             0140*   ;   A: Character read
04005C             0141*   ;   F: C set if last character in file, otherwise NC
04005C             0142*   mos_fgetc:			EQU	0Ch
04005C             0143*   
04005C             0144*   ; Write a character to a file
04005C             0145*   ;   C: Filehandle
04005C             0146*   ;   B: Character to write
04005C             0147*   mos_fputc:			EQU	0Dh
04005C             0148*   
04005C             0149*   ; Check whether we're at the end of the file
04005C             0150*   ;   C: Filehandle
04005C             0151*   ; Returns:
04005C             0152*   ;   A: 1 if at end of file, otherwise 0
04005C             0153*   mos_feof:			EQU	0Eh
04005C             0154*   
04005C             0155*   ; Copy an error message
04005C             0156*   ;   E: The error code
04005C             0157*   ; HLU: Address of buffer to copy message into
04005C             0158*   ; BCU: Size of buffer
04005C             0159*   mos_getError:		EQU	0Fh
04005C             0160*   
04005C             0161*   ; Execute a MOS command
04005C             0162*   ; HLU: Pointer the the MOS command string
04005C             0163*   ; DEU: Pointer to additional command structure
04005C             0164*   ; BCU: Number of additional commands
04005C             0165*   ; Returns:
04005C             0166*   ;   A: MOS error code
04005C             0167*   mos_oscli:			EQU	10h
04005C             0168*   
04005C             0169*   ; Copy a file on the SD card
04005C             0170*   ; HLU: Address of filename1 (zero terminated)
04005C             0171*   ; DEU: Address of filename2 (zero terminated)
04005C             0172*   ; Returns:
04005C             0173*   ; - A: File error, or 0 if OK
04005C             0174*   mos_copy:			EQU	11h
04005C             0175*   
04005C             0176*   ; Fetch a RTC string
04005C             0177*   ; HLU: Pointer to a buffer to copy the string to
04005C             0178*   ; Returns:
04005C             0179*   ;   A: Length of time
04005C             0180*   mos_getrtc:			EQU	12h
04005C             0181*   
04005C             0182*   ; Set the RTC
04005C             0183*   ; HLU: Pointer to a buffer with the time data in
04005C             0184*   mos_setrtc:			EQU	13h
04005C             0185*   
04005C             0186*   ; Set an interrupt vector
04005C             0187*   ; HLU: Pointer to the interrupt vector (24-bit pointer)
04005C             0188*   ;   E: Vector # to set
04005C             0189*   ; Returns:
04005C             0190*   ; HLU: Pointer to the previous vector
04005C             0191*   mos_setintvector:	EQU	14h
04005C             0192*   
04005C             0193*   ; Open UART1
04005C             0194*   ; IXU: Pointer to UART struct
04005C             0195*   ;	+0: Baud rate (24-bit, little endian)
04005C             0196*   ;	+3: Data bits
04005C             0197*   ;	+4: Stop bits
04005C             0198*   ;	+5: Parity bits
04005C             0199*   ;	+6: Flow control (0: None, 1: Hardware)
04005C             0200*   ;	+7: Enabled interrupts
04005C             0201*   ; Returns:
04005C             0202*   ;   A: Error code (0 = no error)
04005C             0203*   mos_uopen:			EQU	15h
04005C             0204*   
04005C             0205*   ; Close UART1
04005C             0206*   mos_uclose:			EQU	16h
04005C             0207*   
04005C             0208*   ; Get a character from UART1
04005C             0209*   ; Returns:
04005C             0210*   ;   A: Character read
04005C             0211*   ;   F: C if successful
04005C             0212*   ;   F: NC if the UART is not open
04005C             0213*   mos_ugetc:			EQU	17h
04005C             0214*   
04005C             0215*   ; Write a character to UART1
04005C             0216*   ;   C: Character to write
04005C             0217*   ; Returns:
04005C             0218*   ;   F: C if successful
04005C             0219*   ;   F: NC if the UART is not open
04005C             0220*   mos_uputc:			EQU	18h
04005C             0221*   
04005C             0222*   ; Convert a file handle to a FIL structure pointer
04005C             0223*   ;   C: Filehandle
04005C             0224*   ; Returns:
04005C             0225*   ; HLU: Pointer to a FIL struct
04005C             0226*   mos_getfil:			EQU	19h
04005C             0227*   
04005C             0228*   ; Read a block of data from a file
04005C             0229*   ;   C: Filehandle
04005C             0230*   ; HLU: Pointer to where to write the data to
04005C             0231*   ; DEU: Number of bytes to read
04005C             0232*   ; Returns:
04005C             0233*   ; DEU: Number of bytes read
04005C             0234*   mos_fread:			EQU	1Ah
04005C             0235*   
04005C             0236*   ; Write a block of data to a file
04005C             0237*   ;  C: Filehandle
04005C             0238*   ; HLU: Pointer to where the data is
04005C             0239*   ; DEU: Number of bytes to write
04005C             0240*   ; Returns:
04005C             0241*   ; DEU: Number of bytes read
04005C             0242*   mos_fwrite:			EQU	1Bh
04005C             0243*   
04005C             0244*   ; Move the read/write pointer in a file
04005C             0245*   ;   C: Filehandle
04005C             0246*   ; HLU: Least significant 3 bytes of the offset from the start of the file (DWORD)
04005C             0247*   ;   E: Most significant byte of the offset
04005C             0248*   ; Returns:
04005C             0249*   ;   A: FRESULT
04005C             0250*   mos_flseek:			EQU	1Ch
04005C             0251*   
04005C             0252*   ; Move the read/write pointer in a file relative to the current position
04005C             0253*   ;   C: Filehandle
04005C             0254*   ; DEU: Signed 24-bit offset
04005C             0255*   ; Returns:
04005C             0256*   ;   A: FRESULT
04005C             0257*   mos_api_flseek_rel:
04005C C5          0258*   	push bc ; back up file handle in c
04005D D5          0259*   	push de ; save offset
04005E             0260*   	MOSCALL mos_getfil
04005E 3E 19       0001*M1 			LD	A, function
040060 5B CF       0002*M1 			RST.LIL	08h
040062 E5          0261*   	push hl
040063 FD E1       0262*   	pop iy ; iy points to FIL struct
040065 FD 27 11    0263*   	ld hl,(iy+fil_fptr) ; get lowest 3 bytes of current position
040068 AF          0264*   	xor a ; clear carry
040069 D1          0265*   	pop de ; restore offset
04006A ED 5A       0266*   	adc hl,de ; adc the offset because we need sign flag
04006C F2 74 00 04 0267*   	jp p,@not_neg
040070 21 00 00 00 0268*   	ld hl,0 ; seek to beginning of file
040074             0269*   @not_neg:
040074 C1          0270*   	pop bc ; restore file handle to c
040075 1E 00       0271*   	ld e,0 ; highest byte of offset
040077             0272*   	MOSCALL mos_flseek
040077 3E 1C       0001*M1 			LD	A, function
040079 5B CF       0002*M1 			RST.LIL	08h
04007B C9          0273*   	ret
04007C             0274*   
04007C             0275*   ; Set a VDP keyboard packet receiver callback
04007C             0276*   ;   C: If non-zero then set the top byte of HLU(callback address)  to MB (for ADL=0 callers)
04007C             0277*   ; HLU: Pointer to callback
04007C             0278*   mos_setkbvector:	EQU	1Dh
04007C             0279*   
04007C             0280*   ; Get the address of the keyboard map
04007C             0281*   ; Returns:
04007C             0282*   ; IXU: Base address of the keymap
04007C             0283*   mos_getkbmap:		EQU	1Eh
04007C             0284*   
04007C             0285*   ; MOS program exit codes
04007C             0286*   ;
04007C             0287*   EXIT_OK:				EQU  0;	"OK",
04007C             0288*   EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
04007C             0289*   EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
04007C             0290*   EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
04007C             0291*   EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
04007C             0292*   EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
04007C             0293*   EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
04007C             0294*   EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
04007C             0295*   EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
04007C             0296*   EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
04007C             0297*   EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
04007C             0298*   EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
04007C             0299*   EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
04007C             0300*   EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
04007C             0301*   EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
04007C             0302*   EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
04007C             0303*   EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
04007C             0304*   EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
04007C             0305*   EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
04007C             0306*   EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
04007C             0307*   EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
04007C             0308*   EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
04007C             0309*   
04007C             0310*   ; FatFS file access functions
04007C             0311*   ;
04007C             0312*   ; Open a file
04007C             0313*   ; HLU: Pointer to a blank FIL struct
04007C             0314*   ; DEU: Pointer to the filename (0 terminated)
04007C             0315*   ;   C: File mode
04007C             0316*   ; Returns:
04007C             0317*   ;   A: FRESULT
04007C             0318*   ffs_fopen:			EQU	80h
04007C             0319*   
04007C             0320*   ; Close a file
04007C             0321*   ; HLU: Pointer to a blank FIL struct
04007C             0322*   ; Returns:
04007C             0323*   ;   A: FRESULT
04007C             0324*   ffs_fclose:			EQU	81h
04007C             0325*   
04007C             0326*   ; Read data from a file
04007C             0327*   ; HLU: Pointer to a FIL struct
04007C             0328*   ; DEU: Pointer to where to write the file out
04007C             0329*   ; BCU: Number of bytes to read
04007C             0330*   ; Returns:
04007C             0331*   ;   A: FRESULT
04007C             0332*   ; BCU: Number of bytes read
04007C             0333*   ffs_fread:			EQU	82h
04007C             0334*   
04007C             0335*   ; Write data to a file
04007C             0336*   ; HLU: Pointer to a FIL struct
04007C             0337*   ; DEU: Pointer to the data to write out
04007C             0338*   ; BCU: Number of bytes to write
04007C             0339*   ; Returns:
04007C             0340*   ;   A: FRESULT
04007C             0341*   ; BCU: Number of bytes written
04007C             0342*   ffs_fwrite:			EQU	83h
04007C             0343*   
04007C             0344*   ; Move the read/write pointer in a file
04007C             0345*   ; HLU: Pointer to a FIL struct
04007C             0346*   ; DEU: Least significant 3 bytes of the offset from the start of the file (DWORD)
04007C             0347*   ;   C: Most significant byte of the offset
04007C             0348*   ; Returns:
04007C             0349*   ;   A: FRESULT
04007C             0350*   ffs_flseek:			EQU	84h
04007C             0351*   
04007C             0352*   ; not implemented
04007C             0353*   ffs_ftruncate:		EQU	85h
04007C             0354*   
04007C             0355*   ; not implemented
04007C             0356*   ffs_fsync:			EQU	86h
04007C             0357*   
04007C             0358*   ; not implemented
04007C             0359*   ffs_fforward:		EQU	87h
04007C             0360*   
04007C             0361*   ; not implemented
04007C             0362*   ffs_fexpand:		EQU	88h
04007C             0363*   
04007C             0364*   ; not implemented
04007C             0365*   ffs_fgets:			EQU	89h
04007C             0366*   
04007C             0367*   ; not implemented
04007C             0368*   ffs_fputc:			EQU	8Ah
04007C             0369*   
04007C             0370*   ; not implemented
04007C             0371*   ffs_fputs:			EQU	8Bh
04007C             0372*   
04007C             0373*   ; not implemented
04007C             0374*   ffs_fprintf:		EQU	8Ch
04007C             0375*   
04007C             0376*   ; not implemented
04007C             0377*   ffs_ftell:			EQU	8Dh
04007C             0378*   
04007C             0379*   ; Check for EOF
04007C             0380*   ; HLU: Pointer to a FILINFO struct
04007C             0381*   ; Returns:
04007C             0382*   ;   A: 1 if end of file, otherwise 0
04007C             0383*   ffs_feof:			EQU	8Eh
04007C             0384*   
04007C             0385*   ; not implemented
04007C             0386*   ffs_fsize:			EQU	8Fh
04007C             0387*   
04007C             0388*   ; not implemented
04007C             0389*   ffs_ferror:			EQU	90h
04007C             0390*   
04007C             0391*   ; FatFS directory access functions
04007C             0392*   ;
04007C             0393*   ; Open a directory
04007C             0394*   ; HLU: Pointer to a blank DIR struct
04007C             0395*   ; DEU: Pointer to the directory path
04007C             0396*   ; Returns:
04007C             0397*   ; A: FRESULT
04007C             0398*   ffs_dopen:			EQU	91h
04007C             0399*   
04007C             0400*   ; Close a directory
04007C             0401*   ; HLU: Pointer to an open DIR struct
04007C             0402*   ; Returns:
04007C             0403*   ; A: FRESULT
04007C             0404*   ffs_dclose:			EQU	92h
04007C             0405*   
04007C             0406*   ; Read the next FILINFO from an open DIR
04007C             0407*   ; HLU: Pointer to an open DIR struct
04007C             0408*   ; DEU: Pointer to an empty FILINFO struct
04007C             0409*   ; Returns:
04007C             0410*   ; A: FRESULT
04007C             0411*   ffs_dread:			EQU	93h
04007C             0412*   
04007C             0413*   ; not implemented
04007C             0414*   ffs_dfindfirst:		EQU	94h
04007C             0415*   
04007C             0416*   ; not implemented
04007C             0417*   ffs_dfindnext:		EQU	95h
04007C             0418*   
04007C             0419*   ; FatFS file and directory management functions
04007C             0420*   ;
04007C             0421*   ; Check file exists
04007C             0422*   ; HLU: Pointer to a FILINFO struct
04007C             0423*   ; DEU: Pointer to the filename (0 terminated)
04007C             0424*   ; Returns:
04007C             0425*   ;   A: FRESULT
04007C             0426*   ffs_stat:			EQU	96h
04007C             0427*   
04007C             0428*   ; not implemented
04007C             0429*   ffs_unlink:			EQU	97h
04007C             0430*   
04007C             0431*   ; not implemented
04007C             0432*   ffs_rename:			EQU	98h
04007C             0433*   
04007C             0434*   ; not implemented
04007C             0435*   ffs_chmod:			EQU	99h
04007C             0436*   
04007C             0437*   ; not implemented
04007C             0438*   ffs_utime:			EQU	9Ah
04007C             0439*   
04007C             0440*   ; not implemented
04007C             0441*   ffs_mkdir:			EQU	9Bh
04007C             0442*   
04007C             0443*   ; not implemented
04007C             0444*   ffs_chdir:			EQU	9Ch
04007C             0445*   
04007C             0446*   ; not implemented
04007C             0447*   ffs_chdrive:		EQU	9Dh
04007C             0448*   
04007C             0449*   ; Copy the current directory (string) into buffer (hl)
04007C             0450*   ; HLU: Pointer to a buffer
04007C             0451*   ; BCU: Maximum length of buffer
04007C             0452*   ; Returns:
04007C             0453*   ; A: FRESULT
04007C             0454*   ffs_getcwd:			EQU	9Eh
04007C             0455*   
04007C             0456*   ; FatFS volume management and system configuration functions
04007C             0457*   ;
04007C             0458*   ; not implemented
04007C             0459*   ffs_mount:			EQU	9Fh
04007C             0460*   
04007C             0461*   ; not implemented
04007C             0462*   ffs_mkfs:			EQU	A0h
04007C             0463*   
04007C             0464*   ; not implemented
04007C             0465*   ffs_fdisk:			EQU	A1h
04007C             0466*   
04007C             0467*   ; not implemented
04007C             0468*   ffs_getfree:		EQU	A2h
04007C             0469*   
04007C             0470*   ; not implemented
04007C             0471*   ffs_getlabel:		EQU	A3h
04007C             0472*   
04007C             0473*   ; not implemented
04007C             0474*   ffs_setlabel:		EQU	A4h
04007C             0475*   
04007C             0476*   ; not implemented
04007C             0477*   ffs_setcp:			EQU	A5h
04007C             0478*   
04007C             0479*   ; File access modes
04007C             0480*   ;
04007C             0481*   fa_read:			EQU	01h
04007C             0482*   fa_write:			EQU	02h
04007C             0483*   fa_open_existing:	EQU	00h
04007C             0484*   fa_create_new:		EQU	04h
04007C             0485*   fa_create_always:	EQU	08h
04007C             0486*   fa_open_always:		EQU	10h
04007C             0487*   fa_open_append:		EQU	30h
04007C             0488*   
04007C             0489*   ; System variable indexes for api_sysvars
04007C             0490*   ; Index into _sysvars in globals.asm
04007C             0491*   ;
04007C             0492*   sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
04007C             0493*   sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
04007C             0494*   sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
04007C             0495*   sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
04007C             0496*   sysvar_cursorX:			EQU	07h	; 1: Cursor X position
04007C             0497*   sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
04007C             0498*   sysvar_scrchar:			EQU	09h	; 1: Character read from screen
04007C             0499*   sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
04007C             0500*   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
04007C             0501*   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
04007C             0502*   sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
04007C             0503*   sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
04007C             0504*   sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
04007C             0505*   sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
04007C             0506*   sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
04007C             0507*   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
04007C             0508*   sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
04007C             0509*   sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
04007C             0510*   sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
04007C             0511*   sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
04007C             0512*   sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
04007C             0513*   sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
04007C             0514*   sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
04007C             0515*   sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
04007C             0516*   sysvar_scrMode:			EQU	27h	; 1: Screen mode
04007C             0517*   sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
04007C             0518*   
04007C             0519*   ; Flags for the VPD protocol
04007C             0520*   ;
04007C             0521*   vdp_pflag_cursor:		EQU	00000001b
04007C             0522*   vdp_pflag_scrchar:		EQU	00000010b
04007C             0523*   vdp_pflag_point:		EQU	00000100b
04007C             0524*   vdp_pflag_audio:		EQU	00001000b
04007C             0525*   vdp_pflag_mode:			EQU	00010000b
04007C             0526*   vdp_pflag_rtc:			EQU	00100000b
04007C             0527*   
04007C             0528*   ;
04007C             0529*   ; FatFS structures
04007C             0530*   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
04007C             0531*   ;
04007C             0532*   ; Object ID and allocation information (FFOBJID)
04007C             0533*   ;
04007C             0534*   ; Indexes into FFOBJID structure
04007C             0535*   ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
04007C             0536*   ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
04007C             0537*   ffobjid_attr:		EQU	5	; 1: Object attribute
04007C             0538*   ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
04007C             0539*   ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
04007C             0540*   ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
04007C             0541*   ;
04007C             0542*   ; File object structure (FIL)
04007C             0543*   ;
04007C             0544*   ; Indexes into FIL structure
04007C             0545*   fil_obj:		EQU 0	; 15: Object identifier
04007C             0546*   fil_flag:		EQU	15 	;  1: File status flags
04007C             0547*   fil_err:		EQU	16	;  1: Abort flag (error code)
04007C             0548*   fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
04007C             0549*   fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
04007C             0550*   fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
04007C             0551*   fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
04007C             0552*   fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
04007C             0553*   ;
04007C             0554*   ; Directory object structure (DIR)
04007C             0555*   ; Indexes into DIR structure
04007C             0556*   dir_obj:		EQU  0	; 15: Object identifier
04007C             0557*   dir_dptr:		EQU	15	;  4: Current read/write offset
04007C             0558*   dir_clust:		EQU	19	;  4: Current cluster
04007C             0559*   dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
04007C             0560*   dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
04007C             0561*   dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
04007C             0562*   dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
04007C             0563*   ;
04007C             0564*   ; File information structure (FILINFO)
04007C             0565*   ;
04007C             0566*   ; Indexes into FILINFO structure
04007C             0567*   filinfo_fsize:		EQU 0	;   4: File size
04007C             0568*   filinfo_fdate:		EQU	4	;   2: Modified date
04007C             0569*   filinfo_ftime:		EQU	6	;   2: Modified time
04007C             0570*   filinfo_fattrib:	EQU	8	;   1: File attribute
04007C             0571*   filinfo_altname:	EQU	9	;  13: Alternative file name
04007C             0572*   filinfo_fname:		EQU	22	; 256: Primary file name
04007C             0032        include "macros.inc"
04007C             0001*   
04007C             0002*   ; test the sign of HL
04007C             0003*   ; inputs: HL obviously
04007C             0004*   ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
04007C             0005*   ; destroys: flags
04007C             0006*       MACRO SIGN_HLU
04007C             0007*       add hl,de ; 1 cycle
04007C             0008*       or a ; clear flags ; 1 cycle
04007C             0009*       sbc hl,de ; 2 cycles
04007C             0010*       ; 4 cycles total
04007C             0011*       ENDMACRO
04007C             0012*   
04007C             0013*   ; put the value in A into HLU
04007C             0014*   ; affects: HLU
04007C             0015*   ; destroys: nothing
04007C             0016*   ; note: $ instead of @@ b/c anon labels deprecated in ez80asm
04007C             0017*       MACRO A_TO_HLU
04007C             0018*       xor a ; 1 cycle
04007C             0019*       ld ($+8+1),hl ; 7 cycles
04007C             0020*       ld ($+4+3),a ; 5 cycles
04007C             0021*       ld hl,0x000000 ; 4 cycles
04007C             0022*       ; 17 cycles total
04007C             0023*       ENDMACRO
04007C             0024*   
04007C             0025*   ; alternative: https://discord.com/channels/1158535358624039014/1282290921815408681/1318315567102300220
04007C             0026*   ; one cycle less but burns flags
04007C             0027*       MACRO A_TO_HLU_ALT
04007C             0028*       push hl ; 4 cycles
04007C             0029*       ld hl,2 ; 4 cycles
04007C             0030*       add hl,sp ; 1 cycle
04007C             0031*       ld (hl),a ; 2 cycles
04007C             0032*       pop hl ; 4 cycles
04007C             0033*       ; 15 cycles total
04007C             0034*       ENDMACRO
04007C             0035*   
04007C             0036*       MACRO hlu_mul256
04007C             0037*       add hl,hl ; * 2
04007C             0038*       add hl,hl ; * 4
04007C             0039*       add hl,hl ; * 8
04007C             0040*       add hl,hl ; * 16
04007C             0041*       add hl,hl ; * 32
04007C             0042*       add hl,hl ; * 64
04007C             0043*       add hl,hl ; * 128
04007C             0044*       add hl,hl ; * 256
04007C             0045*       ENDMACRO
04007C             0046*   
04007C             0047*   ; https://discord.com/channels/1158535358624039014/1282290921815408681/1317793870070812715
04007C             0048*       MACRO SRL_UHL
04007C             0049*       dec sp ; 1 cycle
04007C             0050*       push hl ; 4 cycles
04007C             0051*       inc sp ; 1 cycle
04007C             0052*       pop hl ; 4 cycles
04007C             0053*       inc hl ; 1 cycle
04007C             0054*       dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
04007C             0055*       ; 13 cycles total
04007C             0056*       ENDMACRO
04007C             0057*   
04007C             0058*       MACRO printChar char
04007C             0059*       LD A, char
04007C             0060*       RST.LIL 10h
04007C             0061*       ENDMACRO
04007C             0062*   
04007C             0063*   ; Simulated call to subroutine at HL
04007C             0064*   ; inputs: HL pointing to the subroutine address plus whatever the called function expects
04007C             0065*   ; outputs: whatever the subroutine does, including HL and BC
04007C             0066*   ; destroys: only what the subroutine does, but always BC
04007C             0067*       MACRO CALL_HL
04007C             0068*       ld bc,$+6 ; Address of first instruction after the jump
04007C             0069*       push bc ; which constitutes the return address
04007C             0070*       jp (hl) ; Jump to the address in HL
04007C             0071*       ENDMACRO
04007C             0072*   
04007C             0073*   ; Simulated call to subroutine at IX
04007C             0074*   ; inputs: IX pointing to the subroutine address plus whatever the called function expects
04007C             0075*   ; outputs: whatever the subroutine does, including IX and BC
04007C             0076*   ; destroys: only what the subroutine does, but always BC
04007C             0077*       MACRO CALL_IX
04007C             0078*       ld bc,$+6 ; Address of first instruction after the jump
04007C             0079*       push bc ; which constitutes the return address
04007C             0080*       jp (ix) ; Jump to the address in IX
04007C             0081*       ENDMACRO
04007C             0082*   
04007C             0083*   ; Simulated call to soubroutinte at IY
04007C             0084*   ; inputs: IY pointing to the subroutine address plus whatever the called function expects
04007C             0085*   ; outputs: whatever the subroutine does, including IY and BC
04007C             0086*   ; destroys: only what the subroutine does, but always BC
04007C             0087*       MACRO CALL_IY
04007C             0088*       ld bc,$+6 ; Address of first instruction after the jump
04007C             0089*       push bc ; which constitutes the return address
04007C             0090*       jp (iy) ; Jump to the address in IY
04007C             0091*       ENDMACRO
04007C             0092*   
04007C             0093*   ; put the value in HLU into A
04007C             0094*   ; destroys: af
04007C             0095*       MACRO HLU_TO_A
04007C             0096*       dec sp ; 1 cycle
04007C             0097*       push hl ; 4 cycles
04007C             0098*       inc sp ; 1 cycle
04007C             0099*       pop af ; 4 cycles
04007C             0100*       ; 10 cycles total
04007C             0101*       ENDMACRO
04007C             0102*   
04007C             0103*       MACRO PUSH_ALL
04007C             0104*       ex af,af'
04007C             0105*       exx
04007C             0106*       push af
04007C             0107*       push hl
04007C             0108*       push bc
04007C             0109*       push de
04007C             0110*   
04007C             0111*       ex af,af'
04007C             0112*       exx
04007C             0113*       push af
04007C             0114*       push hl
04007C             0115*       push bc
04007C             0116*       push de
04007C             0117*       push ix
04007C             0118*       push iy
04007C             0119*       ENDMACRO
04007C             0120*   
04007C             0121*       MACRO POP_ALL
04007C             0122*       pop iy
04007C             0123*       pop ix
04007C             0124*       pop de
04007C             0125*       pop bc
04007C             0126*       pop hl
04007C             0127*       pop af
04007C             0128*       ex af,af'
04007C             0129*       exx
04007C             0130*   
04007C             0131*       pop de
04007C             0132*       pop bc
04007C             0133*       pop hl
04007C             0134*       pop af
04007C             0135*       ex af,af'
04007C             0136*       exx
04007C             0137*       ENDMACRO
04007C             0033        include "functions.inc"
04007C FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040100             0002*   
040100             0003*   ; Print a zero-terminated string inline with code, e.g.:
040100             0004*   ;
040100             0005*   ;    call printInline
040100             0006*   ;    ASCIZ "Hello, world!\r\n"
040100             0007*   ;
040100             0008*   ; Destroys: HL,AF
040100             0009*   printInline:
040100 E1          0010*       pop hl ; get the return address = pointer to start of string
040101 CD 07 01 04 0011*       call printString ; HL advances to end of string
040105 E5          0012*       push hl ; restore the return address = pointer to end of string
040106 C9          0013*       ret
040107             0014*   
040107             0015*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040107             0016*   ; Print a zero-terminated string
040107             0017*   ; HL: Pointer to string
040107             0018*   printString:
040107 C5          0019*       PUSH BC
040108 01 00 00 00 0020*       LD BC,0
04010C 3E 00       0021*       LD A,0
04010E 5B DF       0022*       RST.LIL 18h
040110 C1          0023*       POP BC
040111 C9          0024*       RET
040112             0025*   ; print a VDU sequence
040112             0026*   ; HL: Pointer to VDU sequence - <1 byte length> <data>
040112             0027*   sendVDUsequence:
040112 C5          0028*       PUSH BC
040113 01 00 00 00 0029*       LD BC, 0
040117 4E          0030*       LD C, (HL)
040118 5B DF       0031*       RST.LIL 18h
04011A C1          0032*       POP BC
04011B C9          0033*       RET
04011C             0034*   ; Print Newline sequence to VDP
04011C             0035*   ; destroys bc
04011C             0036*   printNewLine:
04011C F5          0037*       push af ; for some reason rst.lil 10h sets carry flag
04011D 3E 0D       0038*       LD A, '\r'
04011F 5B D7       0039*       RST.LIL 10h
040121 3E 0A       0040*       LD A, '\n'
040123 5B D7       0041*       RST.LIL 10h
040125 F1          0042*       pop af
040126 C9          0043*       RET
040127             0044*   
040127             0045*   ; Print a 24-bit HEX number
040127             0046*   ; HLU: Number to print
040127             0047*   printHex24:
040127             0048*       HLU_TO_A
040127 3B          0001*M1     dec sp ; 1 cycle
040128 E5          0002*M1     push hl ; 4 cycles
040129 33          0003*M1     inc sp ; 1 cycle
04012A F1          0004*M1     pop af ; 4 cycles
04012B             0005*M1     ; 10 cycles total
04012B CD 35 01 04 0049*       CALL printHex8
04012F             0050*   ; Print a 16-bit HEX number
04012F             0051*   ; HL: Number to print
04012F             0052*   printHex16:
04012F 7C          0053*       LD A,H
040130 CD 35 01 04 0054*       CALL printHex8
040134 7D          0055*       LD A,L
040135             0056*   ; Print an 8-bit HEX number
040135             0057*   ; A: Number to print
040135             0058*   printHex8:
040135 4F          0059*       LD C,A
040136 1F          0060*       RRA
040137 1F          0061*       RRA
040138 1F          0062*       RRA
040139 1F          0063*       RRA
04013A CD 3F 01 04 0064*       CALL @F
04013E 79          0065*       LD A,C
04013F             0066*   @@:
04013F E6 0F       0067*       AND 0Fh
040141 C6 90       0068*       ADD A,90h
040143 27          0069*       DAA
040144 CE 40       0070*       ADC A,40h
040146 27          0071*       DAA
040147 5B D7       0072*       RST.LIL 10h
040149 C9          0073*       RET
04014A             0074*   
04014A             0075*   ; Print a 0x HEX prefix
04014A             0076*   DisplayHexPrefix:
04014A 3E 30       0077*       LD A, '0'
04014C 5B D7       0078*       RST.LIL 10h
04014E 3E 78       0079*       LD A, 'x'
040150 5B D7       0080*       RST.LIL 10h
040152 C9          0081*       RET
040153             0082*   
040153             0083*       MACRO printDecBC
040153             0084*       push hl
040153             0085*       push bc
040153             0086*       pop hl
040153             0087*       call printDec
040153             0088*       pop hl
040153             0089*       ENDMACRO
040153             0090*   
040153             0091*       MACRO printDecDE
040153             0092*       push hl
040153             0093*       push de
040153             0094*       pop hl
040153             0095*       call printDec
040153             0096*       pop hl
040153             0097*       ENDMACRO
040153             0098*   
040153             0099*       MACRO printDecHL
040153             0100*       call printDec
040153             0101*       ENDMACRO
040153             0102*   
040153             0103*       MACRO printDecIX
040153             0104*       push hl
040153             0105*       push ix
040153             0106*       pop hl
040153             0107*       call printDec
040153             0108*       pop hl
040153             0109*       ENDMACRO
040153             0110*   
040153             0111*       MACRO printDecIY
040153             0112*       push hl
040153             0113*       push iy
040153             0114*       pop hl
040153             0115*       call printDec
040153             0116*       pop hl
040153             0117*       ENDMACRO
040153             0118*   
040153             0119*   
040153             0120*   ; Prints the right justified decimal value in HL without leading zeroes
040153             0121*   ; HL : Value to print
040153             0122*   ; preserves all registers and flags
040153             0123*   printDec:
040153             0124*   ; BEGIN MY CODE
040153             0125*   ; back up all the things
040153 F5          0126*       push af
040154 C5          0127*       push bc
040155 D5          0128*       push de
040156 E5          0129*       push hl
040157             0130*   ; END MY CODE
040157 11 7F 01 04 0131*       LD DE, _printDecBuffer
04015B CD 8F 01 04 0132*       CALL u24_to_ascii
04015F             0133*   ; BEGIN MY CODE
04015F             0134*   ; replace leading zeroes with spaces
04015F 21 7F 01 04 0135*       LD HL, _printDecBuffer
040163 06 07       0136*       ld B, 7 ; if HL was 0, we want to keep the final zero
040165             0137*   @loop:
040165 7E          0138*       LD A, (HL)
040166 FE 30       0139*       CP '0'
040168 C2 72 01 04 0140*       JP NZ, @done
04016C 3E 20       0141*       LD A, ' '
04016E 77          0142*       LD (HL), A
04016F 23          0143*       INC HL
040170             0144*       ; CALL vdu_cursor_forward
040170 10 F3       0145*       DJNZ @loop
040172             0146*   @done:
040172             0147*   ; END MY CODE
040172 21 7F 01 04 0148*       LD HL, _printDecBuffer
040176 CD 07 01 04 0149*       CALL printString
04017A             0150*   ; BEGIN MY CODE
04017A             0151*   ; restore all the things
04017A E1          0152*       pop hl
04017B D1          0153*       pop de
04017C C1          0154*       pop bc
04017D F1          0155*       pop af
04017E             0156*   ; END MY CODE
04017E C9          0157*       RET
04017F 00 00 00 00 0158*   _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04018F             0159*   
04018F             0160*   ; This routine converts the unsigned 24-bit value in HLU into its ASCII representation,
04018F             0161*   ; starting to memory location pointing by DE, in decimal form and with leading zeroes
04018F             0162*   ; so it will allways be 8 characters length
04018F             0163*   ; HL : Value to convert to string
04018F             0164*   ; DE : pointer to buffer, at least 8 byte + 0
04018F             0165*   u24_to_ascii:
04018F 01 80 69 67 0166*       LD BC,-10000000
040193 CD C6 01 04 0167*       CALL @one_digit
040197 01 C0 BD F0 0168*       LD BC,-1000000
04019B CD C6 01 04 0169*       CALL @one_digit
04019F 01 60 79 FE 0170*       LD BC,-100000
0401A3 CD C6 01 04 0171*       CALL @one_digit
0401A7 01 F0 D8 FF 0172*       LD BC,-10000
0401AB CD C6 01 04 0173*       CALL @one_digit
0401AF 01 18 FC FF 0174*       LD BC,-1000
0401B3 CD C6 01 04 0175*       CALL @one_digit
0401B7 01 9C FF FF 0176*       LD BC,-100
0401BB CD C6 01 04 0177*       CALL @one_digit
0401BF 0E F6       0178*       LD C,-10
0401C1 CD C6 01 04 0179*       CALL @one_digit
0401C5 48          0180*       LD C,B
0401C6             0181*   @one_digit:
0401C6 3E 2F       0182*       LD A,'0'-1
0401C8             0183*   @divide_me:
0401C8 3C          0184*       INC A
0401C9 09          0185*       ADD HL,BC
0401CA 38 FC       0186*       JR C,@divide_me
0401CC ED 42       0187*       SBC HL,BC
0401CE 12          0188*       LD (DE),A
0401CF 13          0189*       INC DE
0401D0 C9          0190*       RET
0401D1             0191*   
0401D1             0192*   print_u24:
0401D1 D5          0193*       push de
0401D2 E5          0194*       push hl
0401D3 11 7F 01 04 0195*       ld de,_printDecBuffer
0401D7 CD 8F 01 04 0196*       call u24_to_ascii
0401DB 21 7F 01 04 0197*       ld hl,_printDecBuffer
0401DF CD 07 01 04 0198*       call printString
0401E3 3E 20       0199*       ld a,' '
0401E5 5B D7       0200*       rst.lil 10h
0401E7 E1          0201*       pop hl
0401E8 D1          0202*       pop de
0401E9 C9          0203*       ret
0401EA             0204*   
0401EA             0205*   ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
0401EA             0206*   ; HL : Value to convert to string (integer part in H, fractional part in L)
0401EA             0207*   ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
0401EA             0208*   u168_to_ascii:
0401EA             0209*   ; add a leading space to make room for sign flag if needed
0401EA 3E 20       0210*       ld a,' '
0401EC 12          0211*       ld (de),a
0401ED 13          0212*       inc de
0401EE             0213*   ; Convert integer part
0401EE E5          0214*       push hl ; Save HL (we’ll need the fractional part later)
0401EF             0215*       ; call hlu_udiv256 ; Shift to get integer portion in HL
0401EF             0216*       SRL_UHL ; Shift to get integer portion in HL
0401EF 3B          0001*M1     dec sp ; 1 cycle
0401F0 E5          0002*M1     push hl ; 4 cycles
0401F1 33          0003*M1     inc sp ; 1 cycle
0401F2 E1          0004*M1     pop hl ; 4 cycles
0401F3 23          0005*M1     inc hl ; 1 cycle
0401F4 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
0401F6             0007*M1     ; 13 cycles total
0401F6 01 F0 D8 FF 0217*       ld bc, -10000
0401FA CD 1D 02 04 0218*       call @one_int
0401FE 01 18 FC FF 0219*       ld bc, -1000
040202 CD 1D 02 04 0220*       call @one_int
040206 01 9C FF FF 0221*       ld bc, -100
04020A CD 1D 02 04 0222*       call @one_int
04020E 0E F6       0223*       ld c, -10
040210 CD 1D 02 04 0224*       call @one_int
040214 48          0225*       ld c, b
040215 CD 1D 02 04 0226*       call @one_int
040219 C3 28 02 04 0227*       jp @frac ; Jump to fractional part conversion
04021D             0228*   @one_int:
04021D 3E 2F       0229*       ld a, '0' - 1 ; Start ASCII character at '0'
04021F             0230*   @divide_me:
04021F 3C          0231*       inc a
040220 09          0232*       add hl, bc ; Accumulate until overflow
040221 38 FC       0233*       jr c, @divide_me
040223 ED 42       0234*       sbc hl, bc ; Remove excess after overflow
040225 12          0235*       ld (de), a ; Store ASCII digit
040226 13          0236*       inc de
040227 C9          0237*       ret
040228             0238*   ; Convert fractional part
040228             0239*   @frac:
040228 3E 2E       0240*       ld a, '.' ; Decimal point
04022A 12          0241*       ld (de), a
04022B 13          0242*       inc de
04022C E1          0243*       pop hl ; Restore HL with original fraction
04022D 06 03       0244*       ld b, 3 ; Loop counter for 3 fractional digits
04022F             0245*   @frac_loop:
04022F 26 0A       0246*       ld h, 10 ; Load multiplier for fractional part
040231 ED 6C       0247*       mlt hl ; Multiply by 10, result in HL (H holds the integer part)
040233 3E 30       0248*       ld a, '0'
040235 84          0249*       add a, h ; Convert integer part to ASCII
040236 12          0250*       ld (de), a
040237 13          0251*       inc de
040238 10 F5       0252*       djnz @frac_loop ; Repeat for each fractional digit
04023A             0253*   ; Add null terminator
04023A AF          0254*       xor a ; Null terminator
04023B 12          0255*       ld (de), a
04023C C9          0256*       ret
04023D             0257*   
04023D             0258*   print_u168:
04023D D5          0259*       push de
04023E E5          0260*       push hl
04023F 11 7F 01 04 0261*       ld de,_printDecBuffer
040243 CD EA 01 04 0262*       call u168_to_ascii
040247 21 7F 01 04 0263*       ld hl,_printDecBuffer
04024B CD 07 01 04 0264*       call printString
04024F E1          0265*       pop hl
040250 D1          0266*       pop de
040251 C9          0267*       ret
040252             0268*   
040252             0269*   ; signed version of u168_to_ascii
040252             0270*   s168_to_ascii:
040252 D5          0271*       push de ; save starting address of buffer
040253 CD 06 04 04 0272*       call hlu_abs
040257 F5          0273*       push af ; save sign flag
040258 CD EA 01 04 0274*       call u168_to_ascii
04025C F1          0275*       pop af ; restore sign flag
04025D D1          0276*       pop de ; restore starting address of buffer
04025E F0          0277*       ret p ; hlu was positive so nothing to do
04025F 3E 2D       0278*       ld a,'-'
040261 12          0279*       ld (de),a
040262 C9          0280*       ret
040263             0281*   
040263             0282*   print_s168:
040263 D5          0283*       push de
040264 E5          0284*       push hl
040265 11 7F 01 04 0285*       ld de,_printDecBuffer
040269 CD 52 02 04 0286*       call s168_to_ascii
04026D 21 7F 01 04 0287*       ld hl,_printDecBuffer
040271 CD 07 01 04 0288*       call printString
040275 E1          0289*       pop hl
040276 D1          0290*       pop de
040277 C9          0291*       ret
040278             0292*   
040278             0293*   print_s168_hl:
040278 F5          0294*       push af
040279 E5          0295*       push hl
04027A CD 63 02 04 0296*       call print_s168
04027E 3E 20       0297*       ld a,' '
040280 5B D7       0298*       rst.lil 10h
040282 E1          0299*       pop hl
040283 F1          0300*       pop af
040284 C9          0301*       ret
040285             0302*   
040285             0303*   print_s168_bc:
040285 F5          0304*       push af
040286 C5          0305*       push bc
040287 E5          0306*       push hl
040288 C5          0307*       push bc
040289 E1          0308*       pop hl
04028A CD 63 02 04 0309*       call print_s168
04028E 3E 20       0310*       ld a,' '
040290 5B D7       0311*       rst.lil 10h
040292 E1          0312*       pop hl
040293 C1          0313*       pop bc
040294 F1          0314*       pop af
040295 C9          0315*       ret
040296             0316*   
040296             0317*   print_s168_de:
040296 F5          0318*       push af
040297 D5          0319*       push de
040298 E5          0320*       push hl
040299 EB          0321*       ex de,hl
04029A CD 63 02 04 0322*       call print_s168
04029E 3E 20       0323*       ld a,' '
0402A0 5B D7       0324*       rst.lil 10h
0402A2 E1          0325*       pop hl
0402A3 D1          0326*       pop de
0402A4 F1          0327*       pop af
0402A5 C9          0328*       ret
0402A6             0329*   
0402A6             0330*   print_s168_hl_bc_de:
0402A6 F5          0331*       push af
0402A7 C5          0332*       push bc
0402A8 D5          0333*       push de
0402A9 E5          0334*       push hl
0402AA CD 63 02 04 0335*       call print_s168
0402AE 3E 20       0336*       ld a,' '
0402B0 5B D7       0337*       rst.lil 10h
0402B2 C5          0338*       push bc
0402B3 E1          0339*       pop hl
0402B4 CD 63 02 04 0340*       call print_s168
0402B8 3E 20       0341*       ld a,' '
0402BA 5B D7       0342*       rst.lil 10h
0402BC EB          0343*       ex de,hl
0402BD CD 63 02 04 0344*       call print_s168
0402C1 3E 20       0345*       ld a,' '
0402C3 5B D7       0346*       rst.lil 10h
0402C5 E1          0347*       pop hl
0402C6 D1          0348*       pop de
0402C7 C1          0349*       pop bc
0402C8 F1          0350*       pop af
0402C9 C9          0351*       ret
0402CA             0352*   
0402CA             0353*   print_s168_bc_de:
0402CA F5          0354*       push af
0402CB C5          0355*       push bc
0402CC D5          0356*       push de
0402CD C5          0357*       push bc
0402CE E1          0358*       pop hl
0402CF CD 63 02 04 0359*       call print_s168
0402D3 3E 20       0360*       ld a,' '
0402D5 5B D7       0361*       rst.lil 10h
0402D7 EB          0362*       ex de,hl
0402D8 CD 63 02 04 0363*       call print_s168
0402DC 3E 20       0364*       ld a,' '
0402DE 5B D7       0365*       rst.lil 10h
0402E0 E1          0366*       pop hl
0402E1 D1          0367*       pop de
0402E2 C1          0368*       pop bc
0402E3 F1          0369*       pop af
0402E4 C9          0370*       ret
0402E5             0371*   
0402E5             0372*   print_s168_a:
0402E5 F5          0373*       push af
0402E6 C5          0374*       push bc
0402E7 E5          0375*       push hl
0402E8 21 00 00 00 0376*       ld hl,0
0402EC 6F          0377*       ld l,a
0402ED CD 78 02 04 0378*       call print_s168_hl
0402F1 E1          0379*       pop hl
0402F2 C1          0380*       pop bc
0402F3 F1          0381*       pop af
0402F4 C9          0382*       ret
0402F5             0383*   
0402F5             0384*   ; #### new functions added by Brandon R. Gates ####
0402F5             0385*   
0402F5             0386*   ; print the binary representation of the 8-bit value in a
0402F5             0387*   ; destroys a, hl, bc
0402F5             0388*   printBin8:
0402F5 06 08       0389*       ld b,8 ; loop counter for 8 bits
0402F7 21 12 03 04 0390*       ld hl,@cmd ; set hl to the low byte of the output string
0402FB             0391*       ; (which will be the high bit of the value in a)
0402FB             0392*   @loop:
0402FB 07          0393*       rlca ; put the next highest bit into carry
0402FC 38 04       0394*       jr c,@one
0402FE 36 30       0395*       ld (hl),'0'
040300 18 02       0396*       jr @next_bit
040302             0397*   @one:
040302 36 31       0398*       ld (hl),'1'
040304             0399*   @next_bit:
040304 23          0400*       inc hl
040305 10 F4       0401*       djnz @loop
040307             0402*   ; print it
040307 21 12 03 04 0403*       ld hl,@cmd
04030B 01 08 00 00 0404*       ld bc,@end-@cmd
04030F 5B DF       0405*       rst.lil $18
040311 C9          0406*       ret
040312             0407*   @cmd: ds 8 ; eight bytes for eight bits
04031A             0408*   @end:
04031A             0409*   
04031A             0410*   ; print the binary representation of the 8-bit value in a
04031A             0411*   ; in reverse order (lsb first)
04031A             0412*   ; destroys a, hl, bc
04031A             0413*   printBin8Rev:
       FF FF FF FF 
       FF FF FF FF 
04031A 06 08       0414*       ld b,8 ; loop counter for 8 bits
04031C 21 37 03 04 0415*       ld hl,@cmd ; set hl to the low byte of the output string
040320             0416*       ; (which will be the high bit of the value in a)
040320             0417*   @loop:
040320 0F          0418*       rrca ; put the next lowest bit into carry
040321 38 04       0419*       jr c,@one
040323 36 30       0420*       ld (hl),'0'
040325 18 02       0421*       jr @next_bit
040327             0422*   @one:
040327 36 31       0423*       ld (hl),'1'
040329             0424*   @next_bit:
040329 23          0425*       inc hl
04032A 10 F4       0426*       djnz @loop
04032C             0427*   ; print it
04032C 21 37 03 04 0428*       ld hl,@cmd
040330 01 08 00 00 0429*       ld bc,@end-@cmd
040334 5B DF       0430*       rst.lil $18
040336 C9          0431*       ret
040337             0432*   @cmd: ds 8 ; eight bytes for eight bits
04033F             0433*   @end:
04033F             0434*   
       FF FF FF FF 
       FF FF FF FF 
04033F 20 61 66 3D 0435*   str_afu: db " af=",0
       00          
040344 20 68 6C 3D 0436*   str_hlu: db " hl=",0
       00          
040349 20 62 63 3D 0437*   str_bcu: db " bc=",0
       00          
04034E 20 64 65 3D 0438*   str_deu: db " de=",0
       00          
040353 20 69 78 3D 0439*   str_ixu: db " ix=",0
       00          
040358 20 69 79 3D 0440*   str_iyu: db " iy=",0
       00          
04035D             0441*   
04035D             0442*   ; print udeuhl to screen in hexidecimal format
04035D             0443*   ; inputs: none
04035D             0444*   ; outputs: concatenated hexidecimal udeuhl
04035D             0445*   ; destroys: nothing
04035D             0446*   dumpUDEUHLHex:
04035D             0447*   ; store everything in scratch
04035D 22 BC 03 04 0448*       ld (uhl),hl
040361 ED 43 BF 03 0449*       ld (ubc),bc
       04          
040366 ED 53 C2 03 0450*       ld (ude),de
       04          
04036B DD 22 C5 03 0451*       ld (uix),ix
       04          
040370 FD 22 C8 03 0452*       ld (uiy),iy
       04          
040375 F5          0453*       push af
040376             0454*   
040376             0455*   ; print each register
040376             0456*   
040376 21 B0 03 04 0457*       ld hl,str_udeuhl
04037A CD 07 01 04 0458*       call printString
04037E 2A C2 03 04 0459*       ld hl,(ude)
040382 CD 27 01 04 0460*       call printHex24
040386 3E 2E       0461*       ld a,'.' ; print a dot to separate the values
040388 5B D7       0462*       rst.lil 10h
04038A 2A BC 03 04 0463*       ld hl,(uhl)
04038E CD 27 01 04 0464*       call printHex24
040392 CD 1C 01 04 0465*       call printNewLine
040396             0466*   
040396             0467*   ; restore everything
040396 2A BC 03 04 0468*       ld hl, (uhl)
04039A ED 4B BF 03 0469*       ld bc, (ubc)
       04          
04039F ED 5B C2 03 0470*       ld de, (ude)
       04          
0403A4 DD 2A C5 03 0471*       ld ix, (uix)
       04          
0403A9 FD 2A C8 03 0472*       ld iy, (uiy)
       04          
0403AE F1          0473*       pop af
0403AF             0474*   ; all done
0403AF C9          0475*       ret
0403B0             0476*   
0403B0 75 64 65 2E 0477*   str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
0403B9             0478*   
0403B9             0479*   ; global scratch memory for registers
0403B9 00 00 00    0480*   uaf: dl 0
0403BC 00 00 00    0481*   uhl: dl 0
0403BF 00 00 00    0482*   ubc: dl 0
0403C2 00 00 00    0483*   ude: dl 0
0403C5 00 00 00    0484*   uix: dl 0
0403C8 00 00 00    0485*   uiy: dl 0
0403CB 00 00 00    0486*   usp: dl 0
0403CE 00 00 00    0487*   upc: dl 0
0403D1             0488*   
0403D1             0489*   
0403D1             0490*   ; set all the bits in the flag register
0403D1             0491*   ; more of an academic exercise than anything useful
0403D1             0492*   ; inputs; none
0403D1             0493*   ; outputs; a=0,f=255
0403D1             0494*   ; destroys: flags, hl
0403D1             0495*   ; preserves: a, because why not
0403D1             0496*   setAllFlags:
0403D1 21 FF 00 00 0497*       ld hl,255
0403D5 67          0498*       ld h,a ; four cycles to preserve a is cheap
0403D6 E5          0499*       push hl
0403D7 F1          0500*       pop af
0403D8 C9          0501*       ret
0403D9             0502*   
0403D9             0503*   ; reset all the bits in the flag register
0403D9             0504*   ; unlike its inverse counterpart, this may actually be useful
0403D9             0505*   ; inputs; none
0403D9             0506*   ; outputs; a=0,f=0
0403D9             0507*   ; destroys: flags, hl
0403D9             0508*   ; preserves: a, because why not
0403D9             0509*   resetAllFlags:
0403D9 21 00 00 00 0510*       ld hl,0
0403DD 67          0511*       ld h,a ; four cycles to preserve a is cheap
0403DE E5          0512*       push hl
0403DF F1          0513*       pop af
0403E0 C9          0514*       ret
0403E1             0515*   
0403E1             0516*   ; wait until user presses a key
0403E1             0517*   ; inputs: none
0403E1             0518*   ; outputs: ascii code of key pressed in a
0403E1             0519*   ; destroys: af,ix
0403E1             0520*   waitKeypress:
0403E1             0521*       MOSCALL mos_getkey
0403E1 3E 00       0001*M1 			LD	A, function
0403E3 5B CF       0002*M1 			RST.LIL	08h
0403E5 C9          0522*       ret
0403E6             0523*   
0403E6             0524*   ; clear a block of memory by writing a prescribed value to each byte in the range
0403E6             0525*   ; inputs: a = value to write, hl = address of first byte, bc = number of bytes
0403E6             0526*   ; outputs: memory block is cleared
0403E6             0527*   ; destroys: hl, de
0403E6             0528*   clear_mem:
0403E6 0B          0529*       dec bc ; we do this because we will increment de before writing the first byte
0403E7 77          0530*       ld (hl),a
0403E8 E5          0531*       push hl
0403E9 D1          0532*       pop de
0403EA 13          0533*       inc de ; target address
0403EB ED B0       0534*       ldir
0403ED C9          0535*       ret
0403EE             0034        include "maths.inc"
0403EE FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
040400             0002*   
040400             0003*   ;------------------------------------------------------------------------
040400             0004*   ; Scratch area for calculations
040400             0005*   ;------------------------------------------------------------------------
040400 00 00 00    0006*   scratch1: dw24 0 ;bit manipulation buffer 1
040403 00 00 00    0007*   scratch2: dw24 0 ;bit manipulation buffer 2
040406             0008*   
040406             0009*   ; absolute value of hlu
040406             0010*   ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040406             0011*   ;         s1,z0,pv0,n1,c0 if hlu was negative
040406             0012*   ;         s0,z1,pv0,n1,c0 if hlu was zero
040406             0013*   ;         s0,z0,pv0,n1,c0 if hlu was positive
040406             0014*   ; destroys: a
040406             0015*   hlu_abs:
040406 19          0016*       add hl,de
040407 B7          0017*       or a
040408 ED 52       0018*       sbc hl,de
04040A FA 0F 04 04 0019*       jp m,@is_neg
04040E C9          0020*       ret ; hlu is positive or zero so we're done
04040F             0021*   @is_neg:
04040F F5          0022*       push af ; otherwise, save current flags for return
040410 CD 16 04 04 0023*       call neg_hlu ; negate hlu
040414 F1          0024*       pop af ; get back flags
040415 C9          0025*       ret
040416             0026*   
040416             0027*   ; flip the sign of hlu
040416             0028*   ; inputs: hlu
040416             0029*   ; returns: 0-hlu, flags set appropriately for the result:
040416             0030*   ;         s1,z0,pv0,n1,c1 if result is negative
040416             0031*   ;         s0,z1,pv0,n1,c0 if result is zero
040416             0032*   ;         s0,z0,pv0,n1,c1 if result is positive
040416             0033*   ; destroys a
040416             0034*   neg_hlu:
040416 D5          0035*       push de ; save de
040417 EB          0036*       ex de,hl ; put hl into de
040418 21 00 00 00 0037*       ld hl,0 ; clear hl
04041C AF          0038*       xor a ; clear carry
04041D ED 52       0039*       sbc hl,de ; 0-hlu = -hlu
04041F D1          0040*       pop de ; get de back
040420 C9          0041*       ret ; easy peasy
040421             0042*   
040421             0043*   ;------------------------------------------------------------------------
040421             0044*   ; divide hlu by 2, inspired by above
040421             0045*   ;------------------------------------------------------------------------
040421             0046*   hlu_div2:
040421 22 00 04 04 0047*       ld (scratch1),hl
040425 21 02 04 04 0048*       ld hl,scratch1+2
040429 CB 1E       0049*       rr (hl)
04042B 2B          0050*       dec hl
04042C CB 1E       0051*       rr (hl)
04042E 2B          0052*       dec hl
04042F CB 1E       0053*       rr (hl)
040431 23          0054*       inc hl
040432 23          0055*       inc hl
040433 2A 00 04 04 0056*       ld hl,(scratch1)
040437 C9          0057*       ret
040438             0058*   
040438             0059*   ; this is my little hack to divide by 16
040438             0060*   hlu_div16:
040438 AF          0061*       xor a
040439 29          0062*       add hl,hl
04043A 17          0063*       rla
04043B 29          0064*       add hl,hl
04043C 17          0065*       rla
04043D 29          0066*       add hl,hl
04043E 17          0067*       rla
04043F 29          0068*       add hl,hl
040440 17          0069*       rla
040441 22 4E 04 04 0070*       ld (@scratch),hl
040445 32 51 04 04 0071*       ld (@scratch+3),a
040449 2A 4F 04 04 0072*       ld hl,(@scratch+1)
04044D C9          0073*       ret
04044E             0074*   @scratch: ds 4
040452             0075*   
040452             0076*   ; hlu signed division by 256
040452             0077*   ; returns: hlu / 256
040452             0078*   ; destroys: af
040452             0079*   hlu_sdiv256:
       FF FF FF FF 
040452 AF          0080*       xor a ; assume hl is positive
040453 22 69 04 04 0081*       ld (@buffer),hl
040457             0082*       SIGN_HLU
040457 19          0001*M1     add hl,de ; 1 cycle
040458 B7          0002*M1     or a ; clear flags ; 1 cycle
040459 ED 52       0003*M1     sbc hl,de ; 2 cycles
04045B             0004*M1     ; 4 cycles total
04045B F2 60 04 04 0083*       jp p,@hl_pos
04045F 3D          0084*       dec a
040460             0085*   @hl_pos:
040460 32 6C 04 04 0086*       ld (@buffer+3),a
040464 2A 6A 04 04 0087*       ld hl,(@buffer+1)
040468 C9          0088*       ret
040469             0089*   @buffer: ds 4
04046D             0090*   
04046D             0091*   ; hlu 1 byte right shift, unsigned
04046D             0092*   ; returns: hlu / 256, fractional portion in a
04046D             0093*   ; destroys: af
04046D             0094*   hlu_udiv256:
       FF FF FF FF 
04046D AF          0095*       xor a
04046E 32 7F 04 04 0096*       ld (@buffer+3),a
040472 7D          0097*       ld a,l ; save the fractional portion
040473 22 7C 04 04 0098*       ld (@buffer),hl
040477 2A 7D 04 04 0099*       ld hl,(@buffer+1)
04047B C9          0100*       ret
04047C             0101*   @buffer: ds 4
040480             0102*   
       FF FF FF FF 
040480 00 00 00 00 0103*   add_bcd_arg1: db #00,#00,#00,#00
040484 00 00 00 00 0104*   add_bcd_arg2: db #00,#00,#00,#00
040488             0105*   
040488             0106*   ; set bcd values in a scratch memory address from registers bcde
040488             0107*   ; input: hl; scratch address,bcde; 8-place bcd number
040488             0108*   ; destroys ; hl
040488             0109*   set_bcd:
040488 73          0110*       ld (hl),e
040489 23          0111*       inc hl
04048A 72          0112*       ld (hl),d
04048B 23          0113*       inc hl
04048C 71          0114*       ld (hl),c
04048D 23          0115*       inc hl
04048E 70          0116*       ld (hl),b
04048F C9          0117*       ret
040490             0118*   
040490             0119*   ; load bcd values from a scratch memory address to bcde
040490             0120*   ; input: hl; scratch address
040490             0121*   ; output: bcde; 8-place bcd number
040490             0122*   ; destroys: hl
040490             0123*   get_bcd:
040490 5E          0124*       ld e,(hl)
040491 23          0125*       inc hl
040492 56          0126*       ld d,(hl)
040493 23          0127*       inc hl
040494 4E          0128*       ld c,(hl)
040495 23          0129*       inc hl
040496 46          0130*       ld b,(hl)
040497 C9          0131*       ret
040498             0132*   
040498             0133*   ; BCD addition
040498             0134*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040498             0135*   ;       a is the number of bytes holding each number (number of places/2)
040498             0136*   ; outputs: (hl) + (de) --> (hl)
040498             0137*   ; destroys: a,b,de,hl
040498             0138*   add_bcd:
040498 47          0139*       ld b,a ; loop counter
040499 AF          0140*       xor a ; reset a, clear carry flag
04049A             0141*   adcec:
04049A 1A          0142*       ld a,(de) ; addend to acc
04049B 8E          0143*       adc a,(hl) ; add (hl) to acc
04049C 27          0144*       daa ; adjust result to bcd
04049D 77          0145*       ld (hl),a ; store result
04049E 23          0146*       inc hl ; advance memory pointers
04049F 13          0147*       inc de
0404A0 10 F8       0148*       djnz adcec ; loop until b == 0
0404A2 C9          0149*       ret
0404A3             0150*   
0404A3             0151*   ; BCD subtraction
0404A3             0152*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0404A3             0153*   ;       a is the number of bytes holding each number (number of places/2)
0404A3             0154*   ; outputs: (hl) - (de) --> (hl)
0404A3             0155*   ; destroys: a,b,de,hl
0404A3             0156*   sub_bcd:
0404A3 47          0157*       ld b,a ; loop counter
0404A4 AF          0158*       xor a ; reset a,clear carry flag
0404A5             0159*   subdec:
0404A5 1A          0160*       ld a,(de) ; subtrahend to acc
0404A6 9E          0161*       sbc a,(hl) ; subtract (hl) from acc
0404A7 27          0162*       daa ; adjust result to bcd
0404A8 77          0163*       ld (hl),a ; store result
0404A9 23          0164*       inc hl ; advance memory pointers
0404AA 13          0165*       inc de
0404AB 10 F8       0166*       djnz subdec ; loop until b == 0
0404AD C9          0167*       ret
0404AE             0168*   
0404AE             0169*   ; http://www.z80.info/pseudo-random.txt
0404AE             0170*   rand_8:
0404AE C5          0171*       push bc
0404AF 3A C2 04 04 0172*       ld a,(r_seed)
0404B3 4F          0173*       ld c,a
0404B4             0174*   
0404B4 0F          0175*       rrca ; multiply by 32
0404B5 0F          0176*       rrca
0404B6 0F          0177*       rrca
0404B7 EE 1F       0178*       xor 0x1f
0404B9             0179*   
0404B9 81          0180*       add a,c
0404BA DE FF       0181*       sbc a,255 ; carry
0404BC             0182*   
0404BC 32 C2 04 04 0183*       ld (r_seed),a
0404C0 C1          0184*       pop bc
0404C1 C9          0185*       ret
0404C2 50          0186*   r_seed: defb $50
0404C3             0187*   
0404C3             0188*   ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
0404C3             0189*   prng24:
0404C3             0190*   ;;Expects ADL mode.
0404C3             0191*   ;;Output: HL
0404C3             0192*   ;;50cc
0404C3             0193*   ;;33 bytes
0404C3             0194*   ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
0404C3 ED 5B E4 04 0195*       ld de,(seed1)
       04          
0404C8 B7          0196*       or a
0404C9 ED 62       0197*       sbc hl,hl
0404CB 19          0198*       add hl,de
0404CC 29          0199*       add hl,hl
0404CD 29          0200*       add hl,hl
0404CE 2C          0201*       inc l
0404CF 19          0202*       add hl,de
0404D0 22 E4 04 04 0203*       ld (seed1),hl
0404D4 2A E7 04 04 0204*       ld hl,(seed2)
0404D8 29          0205*       add hl,hl
0404D9 9F          0206*       sbc a,a
0404DA E6 1B       0207*       and %00011011
0404DC AD          0208*       xor l
0404DD 6F          0209*       ld l,a
0404DE 22 E7 04 04 0210*       ld (seed2),hl
0404E2 19          0211*       add hl,de
0404E3 C9          0212*       ret
0404E4 00 00 00    0213*   seed1: dl 0
0404E7 00 00 00    0214*   seed2: dl 0
0404EA             0035        include "files.inc"
0404EA             0001*   ; load to onboard 8k sram
0404EA             0002*   filedata: equ 0xB7E000; Directory object structure (DIR)
0404EA             0036        include "fonts.inc"
0404EA FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
040500             0002*   
040500             0003*   fonts_load:
040500 DD 21 93 0C 0004*       ld ix,font_list ; pointer to font list lookup
       04          
040505 06 07       0005*       ld b,num_fonts ; loop counter
040507             0006*   
040507             0007*   @load_loop:
040507 C5          0008*       push bc ; save loop counter
040508             0009*   
040508             0010*   ; load font into a buffer
040508 DD 27 06    0011*       ld hl,(ix+font_list_bufferId)
04050B DD 31 09    0012*       ld iy,(ix+font_list_filename)
04050E CD 78 0A 04 0013*       call vdu_load_buffer_from_file
040512             0014*   
040512             0015*   ; create font from buffer
040512 DD 27 06    0016*       ld hl,(ix+font_list_bufferId)
040515 DD 5E 00    0017*       ld e,(ix+font_list_width)
040518 DD 56 03    0018*       ld d,(ix+font_list_height)
04051B 3E 00       0019*       ld a,0 ; flags
04051D CD 1A 0C 04 0020*       call vdu_font_create
040521             0021*   
040521             0022*   ; select font
040521 DD 27 06    0023*       ld hl,(ix+font_list_bufferId)
040524 3E 01       0024*       ld a,1 ; flags
040526 CD 00 0C 04 0025*       call vdu_font_select
04052A             0026*   
04052A             0027*   ; ; debug print filename
04052A             0028*   ;     call printNewLine
04052A             0029*   ;     ld hl,(ix+font_list_filename)
04052A             0030*   ;     call printString
04052A             0031*   
04052A             0032*   ; advance font_list pointer to next record
04052A ED 32 0C    0033*       lea ix,ix+font_list_record_size
04052D             0034*   
04052D             0035*   ; restore loop counter
04052D C1          0036*       pop bc
04052E 10 D7       0037*       djnz @load_loop
040530             0038*   
040530             0039*   ; all done
040530 C9          0040*       ret
040531             0037        include "timer.inc"
040531 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
040600             0002*   
040600             0003*   ; Table 32. Timer Control Registers
040600             0004*   ; this constant is the base address of the timer control registers
040600             0005*   ; each timer takes three bytes:
040600             0006*   ;   0: control register
040600             0007*   ;   1: low byte of timer reset value
040600             0008*   ;   2: high byte of timer reset value
040600             0009*   ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
040600             0010*   ; which correctly force the high and upper bytes of the address bus to zero
040600             0011*   TMR_CTL:     equ 80h
040600             0012*   
040600             0013*   ; Timer Control Register Bit Definitions
040600             0014*   PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
040600             0015*                               ; This bit is reset to 0 every time the TMRx_CTL register is read.
040600             0016*   PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
040600             0017*                               ; an interrupt signal is sent to the CPU. This bit remains 1 until
040600             0018*                               ; the TMRx_CTL register is read.
040600             0019*   
040600             0020*   IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
040600             0021*   IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
040600             0022*   
040600             0023*   PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
040600             0024*                               ;  0,and counting stops when the end-of-count value is reached.
040600             0025*   PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
040600             0026*                               ; written to the counter when the end-of-count value is reached.
040600             0027*   
040600             0028*   ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
040600             0029*   CLK_DIV_256:  equ %00001100 ;
040600             0030*   CLK_DIV_64:   equ %00001000 ;
040600             0031*   CLK_DIV_16:   equ %00000100 ;
040600             0032*   CLK_DIV_4:    equ %00000000 ;
040600             0033*   
040600             0034*   RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
040600             0035*   RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
040600             0036*                               ; When a 1 is written to this bit,the values in the reload registers
040600             0037*                               ;  are loaded into the downcounter when the timer restarts. The
040600             0038*                               ; programmer must ensure that this bit is set to 1 each time
040600             0039*                               ; SINGLE-PASS mode is used.
040600             0040*   
040600             0041*   ; disable/enable the programmable reload timer
040600             0042*   PRT_EN_0:     equ %00000000 ;
040600             0043*   PRT_EN_1:     equ %00000001 ;
040600             0044*   
040600             0045*   ; Table 37. Timer Input Source Select Register
040600             0046*   ; Each of the 4 timers are allocated two bits of the 8-bit register
040600             0047*   ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
040600             0048*   ;   00: System clock / CLK_DIV
040600             0049*   ;   01: RTC / CLK_DIV
040600             0050*   ;   NOTE: these are the values given in the manual,but it may be a typo
040600             0051*   ;   10: GPIO port B pin 1.
040600             0052*   ;   11: GPIO port B pin 1.
040600             0053*   TMR_ISS:   equ 92h ; register address
040600             0054*   
040600             0055*   ; Table 51. Real-Time Clock Control Register
040600             0056*   RTC_CTRL: equ EDh ; register address
040600             0057*   
040600             0058*   ; alarm interrupt disable/enable
040600             0059*   RTC_ALARM_0:    equ %00000000
040600             0060*   RTC_ALARM_1:    equ %10000000
040600             0061*   
040600             0062*   ; interrupt on alarm disable/enable
040600             0063*   RTC_INT_ENT_0:  equ %00000000
040600             0064*   RTC_INT_ENT_1:  equ %01000000
040600             0065*   
040600             0066*   RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
040600             0067*   RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
040600             0068*   
040600             0069*   RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
040600             0070*                                   ; On-chip 32768 Hz oscillator is enabled.
040600             0071*   RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
040600             0072*                                   ; On-chip 32768 Hz oscillator is disabled.
040600             0073*   
040600             0074*   RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
040600             0075*   RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
040600             0076*   
040600             0077*   RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
040600             0078*   RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
040600             0079*   
040600             0080*   RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
040600             0081*                                   ; RTC counter is enabled.
040600             0082*   RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
040600             0083*                                   ; RTC counter is disabled.
040600             0084*   
040600             0085*   ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
040600             0086*   
040600             0087*   prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
040600             0088*   prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
040600 00 00 00    0089*   prt_reload: dl 0x000000
040603             0090*   
040603             0091*   ; set PRT timer
040603             0092*   prt_set:
040603 21 00 00 00 0093*       ld hl,0
040607 22 51 06 04 0094*       ld (prt_irq_counter),hl
04060B 2A 00 06 04 0095*       ld hl,(prt_reload)
04060F ED 29 84    0096*       out0 ($84),l
040612 ED 21 85    0097*   	out0 ($85),h
040615             0098*   ; disable timer
040615 3E 06       0099*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
040617 ED 39 83    0100*   	out0 ($83),a
04061A             0101*   ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04061A 3E 57       0102*       ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04061C ED 39 83    0103*   	out0 ($83),a
04061F C9          0104*       ret
040620             0105*   
040620             0106*   ; ===============================================
040620             0107*   ; PRT Timer Interrupt Handling
040620             0108*   ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
040620             0109*   ; -----------------------------------------------
040620             0110*   prt_irq_init:
040620             0111*       ; set up interrupt vector table 2
040620 21 00 00 00 0112*   	ld hl,0
040624 3A 0C 01 00 0113*   	ld a,($10c)
040628 6F          0114*   	ld l,a
040629 3A 0D 01 00 0115*   	ld a,($10d)
04062D 67          0116*   	ld h,a
04062E             0117*   
04062E             0118*   	; skip over CALL ($c3)
04062E 23          0119*   	inc hl
04062F             0120*   	; load address of jump into vector table 2 (in ram)
04062F ED 27       0121*   	ld hl,(hl)
040631             0122*   
040631             0123*   	; write CALL prt_irq_handler to vector table 2
040631 3E C3       0124*   	ld a,$c3
040633 77          0125*   	ld (hl),a
040634 23          0126*   	inc hl
040635 11 3C 06 04 0127*   	ld de,prt_irq_handler
040639 ED 1F       0128*   	ld (hl),de
04063B             0129*   
04063B C9          0130*       ret
04063C             0131*   
04063C             0132*   prt_irq_handler:
04063C F3          0133*   	di
04063D F5          0134*   	push af
04063E E5          0135*       push hl
04063F ED 38 83    0136*   	in0 a,($83)
040642 2A 51 06 04 0137*   	ld hl,(prt_irq_counter)
040646 23          0138*   	inc hl
040647 22 51 06 04 0139*   	ld (prt_irq_counter),hl
04064B E1          0140*       pop hl
04064C F1          0141*   	pop af
04064D FB          0142*   	ei
04064E 5B ED 4D    0143*   	reti.l
040651             0144*   
040651             0145*   prt_irq_counter:
040651 00 00 00    0146*   	.dl 0
040654             0147*   prt_irq_counter_saved:
040654 00 00 00    0148*       .dl 0
040657             0149*   
040657             0150*   prt_loop_reset:
040657 E5          0151*       push hl
040658 21 00 00 00 0152*   	ld hl,0
04065C 22 51 06 04 0153*   	ld (prt_irq_counter),hl
040660 22 C2 06 04 0154*       ld (prt_loop_counter),hl
040664 22 C5 06 04 0155*       ld (prt_loops),hl
040668 CD 03 06 04 0156*       call prt_set
04066C E1          0157*       pop hl
04066D C9          0158*       ret
04066E             0159*   
04066E             0160*   prt_loop_start:
04066E E5          0161*       push hl
04066F 21 00 00 00 0162*   	ld hl,0
040673 22 51 06 04 0163*   	ld (prt_irq_counter),hl
040677 E1          0164*       pop hl
040678 C9          0165*       ret
040679             0166*   
040679             0167*   prt_loop_stop:
040679 E5          0168*       push hl
04067A D5          0169*       push de
04067B 2A 51 06 04 0170*       ld hl,(prt_irq_counter)
04067F ED 5B C2 06 0171*       ld de,(prt_loop_counter)
       04          
040684 19          0172*       add hl,de
040685 22 C2 06 04 0173*       ld (prt_loop_counter),hl
040689 21 00 00 00 0174*       ld hl,0
04068D 22 51 06 04 0175*       ld (prt_irq_counter),hl
040691 2A C5 06 04 0176*       ld hl,(prt_loops)
040695 23          0177*       inc hl
040696 22 C5 06 04 0178*       ld (prt_loops),hl
04069A D1          0179*       pop de
04069B E1          0180*       pop hl
04069C C9          0181*       ret
04069D             0182*   
04069D             0183*   ; inputs: bc = y,x text coordinates to print
04069D             0184*   prt_loop_print:
04069D F5          0185*       push af
04069E E5          0186*       push hl
04069F C5          0187*       push bc
0406A0 D5          0188*       push de
0406A1 DD E5       0189*       push ix
0406A3 FD E5       0190*       push iy
0406A5 CD 37 08 04 0191*       call vdu_move_cursor
0406A9             0192*   
0406A9 2A C2 06 04 0193*       ld hl,(prt_loop_counter)
0406AD CD 53 01 04 0194*       call printDec
0406B1             0195*   
0406B1 2A C5 06 04 0196*       ld hl,(prt_loops)
0406B5 CD 53 01 04 0197*       call printDec
0406B9             0198*   
0406B9 FD E1       0199*       pop iy
0406BB DD E1       0200*       pop ix
0406BD D1          0201*       pop de
0406BE C1          0202*       pop bc
0406BF E1          0203*       pop hl
0406C0 F1          0204*       pop af
0406C1 C9          0205*       ret
0406C2             0206*   
0406C2             0207*   prt_loop_counter:
0406C2 00 00 00    0208*       .dl 0
0406C5             0209*   prt_loops:
0406C5 00 00 00    0210*       .dl 0
0406C8             0211*   
0406C8             0212*   ; ===============================================
0406C8             0213*   ; Timer functions
0406C8             0214*   ; -----------------------------------------------
0406C8             0215*   ; set a countdown timer
0406C8             0216*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0406C8             0217*   ; returns: hl = current time
0406C8             0218*   tmr_set:
0406C8 FD 2F 03    0219*       ld (iy+3),hl            ; set time remaining
0406CB             0220*       MOSCALL mos_sysvars     ; ix points to syvars table
0406CB 3E 08       0001*M1 			LD	A, function
0406CD 5B CF       0002*M1 			RST.LIL	08h
0406CF DD 27 00    0221*       ld hl,(ix+sysvar_time)  ; get current time
0406D2 FD 2F 00    0222*       ld (iy+0),hl            ; set start time
0406D5 C9          0223*       ret
0406D6             0224*   
0406D6             0225*   ; gets time remaining on a countdown timer
0406D6             0226*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0406D6             0227*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0406D6             0228*   ;          sign flags: pos = time not expired,zero or neg = time expired
0406D6             0229*   tmr_get:
0406D6             0230*       MOSCALL mos_sysvars     ; ix points to syvars table
0406D6 3E 08       0001*M1 			LD	A, function
0406D8 5B CF       0002*M1 			RST.LIL	08h
0406DA DD 17 00    0231*       ld de,(ix+sysvar_time)  ; get current time
0406DD FD 27 00    0232*       ld hl,(iy+0)            ; get start time
0406E0 AF          0233*       xor a                   ; clear carry
0406E1 ED 52       0234*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0406E3 FD 17 03    0235*       ld de,(iy+3)            ; get timer set value
0406E6 AF          0236*       xor a                   ; clear carry
0406E7 ED 5A       0237*       adc hl,de               ; hl = time remaining
0406E9             0238*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
0406E9 C9          0239*       ret
0406EA             0240*   
0406EA             0241*   tmr_test: ds 6 ; example of a buffer to hold timer data
0406F0             0242*   
       FF FF FF FF 
       FF FF 
0406F0 00 00 00    0243*   timestamp_now: dl 0
0406F3 00 00 00    0244*   timestamp_old: dl 0
0406F6 00 00 00    0245*   timestamp_chg: dl 0
0406F9             0246*   
0406F9             0247*   ; update the global timestamp from the system clock
0406F9             0248*   ; inputs: none
0406F9             0249*   ; returns: hl = time elapsed in 1/120ths of a second
0406F9             0250*   ;          ix = pointer to syvars table
0406F9             0251*   ; destroys: af,hl,de,ix
0406F9             0252*   timestamp_tick:
0406F9 ED 5B F0 06 0253*       ld de,(timestamp_now)   ; get previous time
       04          
0406FE ED 53 F3 06 0254*       ld (timestamp_old),de   ; save previous time
       04          
040703             0255*       MOSCALL mos_sysvars     ; ix points to syvars table
040703 3E 08       0001*M1 			LD	A, function
040705 5B CF       0002*M1 			RST.LIL	08h
040707 DD 27 00    0256*       ld hl,(ix+sysvar_time)  ; get current time
04070A 22 F0 06 04 0257*       ld (timestamp_now),hl   ; save current time
04070E AF          0258*       xor a                   ; clear carry
04070F ED 52       0259*       sbc hl,de               ; hl = time elapsed
040711 22 F6 06 04 0260*       ld (timestamp_chg),hl   ; save elapsed time
040715 C9          0261*       ret
040716             0262*   
040716             0263*   ; set a countdown timer
040716             0264*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
040716             0265*   ; requires: timestamp_tick to be called at least once before this function
040716             0266*   ; returns: hl = current time
040716             0267*   ; destroys: hl
040716             0268*   timestamp_tmr_set:
040716 FD 2F 03    0269*       ld (iy+3),hl            ; set time remaining
040719 2A F0 06 04 0270*       ld hl,(timestamp_now)   ; get current timestamp
04071D FD 2F 00    0271*       ld (iy+0),hl            ; set start time
040720 C9          0272*       ret
040721             0273*   
040721             0274*   ; gets time remaining on a countdown timer following the global timestamp
040721             0275*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
040721             0276*   ; requires: timestamp_tick to be called at least once before this function
040721             0277*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
040721             0278*   ;          sign flags: pos = time not expired,zero or neg = time expired
040721             0279*   ; destroys: af,hl,de
040721             0280*   timestamp_tmr_get:
040721 ED 5B F0 06 0281*       ld de,(timestamp_now)   ; get current timestamp
       04          
040726 FD 27 00    0282*       ld hl,(iy+0)            ; get start time
040729 AF          0283*       xor a                   ; clear carry
04072A ED 52       0284*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04072C FD 17 03    0285*       ld de,(iy+3)            ; get timer set value
04072F AF          0286*       xor a                   ; clear carry
040730 ED 5A       0287*       adc hl,de               ; hl = time remaining
040732             0288*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
040732 C9          0289*       ret
040733             0290*   
040733             0291*   ; set a stopwatch
040733             0292*   ; returns: hl = start time
040733             0293*   ; destroys: hl,ix
040733             0294*   stopwatch_set:
040733             0295*       MOSCALL mos_sysvars     ; ix points to syvars table
040733 3E 08       0001*M1 			LD	A, function
040735 5B CF       0002*M1 			RST.LIL	08h
040737 DD 27 00    0296*       ld hl,(ix+sysvar_time)  ; get current time
04073A 22 4F 07 04 0297*       ld (stopwatch_started),hl            ; set start time
04073E C9          0298*       ret
04073F             0299*   
04073F             0300*   ; gets time elapsed on a stopwatch
04073F             0301*   ; returns: hl = time elapsed in 1/120ths of a second
04073F             0302*   ; destroys: af,hl,de,ix
04073F             0303*   stopwatch_get:
04073F             0304*       MOSCALL mos_sysvars     ; ix points to syvars table
04073F 3E 08       0001*M1 			LD	A, function
040741 5B CF       0002*M1 			RST.LIL	08h
040743 DD 27 00    0305*       ld hl,(ix+sysvar_time)  ; get current time
040746 ED 5B 4F 07 0306*       ld de,(stopwatch_started)            ; get start time
       04          
04074B AF          0307*       xor a                   ; clear carry
04074C ED 52       0308*       sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04074E C9          0309*       ret
04074F             0310*   
04074F             0311*   stopwatch_started: ds 3 ; buffer to hold stopwatch start time
040752             0312*   
040752             0313*   ; ------------------
040752             0314*   ; delay routine
040752             0315*   ; Author: Richard Turrnidge
040752             0316*   ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
040752             0317*   ; routine waits a fixed time,then returns
040752             0318*   ; arrive with A =  the delay byte. One bit to be set only.
040752             0319*   ; eg. ld A,00000100b
040752             0320*   
040752             0321*   multiPurposeDelay:
       FF FF FF 
040752 F5          0322*       push af
040753 C5          0323*       push bc
040754 DD E5       0324*       push ix
040756 47          0325*       ld b,a
040757 3E 08       0326*       ld a,$08
040759 5B CF       0327*       RST.LIL	08h                 ; get IX pointer to sysvars
04075B             0328*   
04075B             0329*   waitLoop:
04075B             0330*   
04075B DD 7E 00    0331*       ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04075E             0332*   
04075E             0333*                                   ;   we check if bit set is same as last time we checked.
04075E             0334*                                   ;   bit 0 - don't use
04075E             0335*                                   ;   bit 1 - changes 64 times per second
04075E             0336*                                   ;   bit 2 - changes 32 times per second
04075E             0337*                                   ;   bit 3 - changes 16 times per second
04075E             0338*   
04075E             0339*                                   ;   bit 4 - changes 8 times per second
04075E             0340*                                   ;   bit 5 - changes 4 times per second
04075E             0341*                                   ;   bit 6 - changes 2 times per second
04075E             0342*                                   ;   bit 7 - changes 1 times per second
04075E A0          0343*       and b
04075F 4F          0344*       ld c,a
040760 3A 71 07 04 0345*       ld a,(oldTimeStamp)
040764 B9          0346*       cp c                        ; is A same as last value?
040765 28 F4       0347*       jr z,waitLoop              ; loop here if it is
040767 79          0348*       ld a,c
040768 32 71 07 04 0349*       ld (oldTimeStamp),a        ; set new value
04076C             0350*   
04076C DD E1       0351*       pop ix
04076E C1          0352*       pop bc
04076F F1          0353*       pop af
040770 C9          0354*       ret
040771             0355*   
040771 00          0356*   oldTimeStamp:   .db 00h
040772             0038        include "vdu.inc"
040772 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF       
040800             0002*   
040800             0003*   ; VDU 30: Home cursor
040800             0004*   vdu_home_cursor:
040800 3E 1E       0005*       ld a,30
040802 5B D7       0006*   	rst.lil $10
040804 C9          0007*   	ret
040805             0008*   
040805             0009*   vdu_cursor_on:
040805 21 10 08 04 0010*   	ld hl,@cmd
040809 01 03 00 00 0011*   	ld bc,@end-@cmd
04080D 5B DF       0012*   	rst.lil $18
04080F C9          0013*   	ret
040810             0014*   @cmd:
040810 17 01 01    0015*   	db 23,1,1
040813             0016*   @end:
040813             0017*   
040813             0018*   vdu_cursor_off:
040813 21 1E 08 04 0019*   	ld hl,@cmd
040817 01 03 00 00 0020*   	ld bc,@end-@cmd
04081B 5B DF       0021*   	rst.lil $18
04081D C9          0022*   	ret
04081E             0023*   @cmd:
04081E 17 01 00    0024*   	db 23,1,0
040821             0025*   @end:
040821             0026*   
040821             0027*   ; VDU 5: Write text at graphics cursor
040821             0028*   ; inputs: a is the character to write to the screen
040821             0029*   ; prerequisites: the graphics cursor at the intended position on screen
040821             0030*   ; outputs: see the name of the function
040821             0031*   ; destroys: a, hl, bc
040821             0032*   vdu_char_to_gfx_cursor:
040821 32 31 08 04 0033*   	ld (@arg),a
040825 21 30 08 04 0034*   	ld hl,@cmd
040829 01 02 00 00 0035*   	ld bc,@end-@cmd
04082D 5B DF       0036*   	rst.lil $18
04082F C9          0037*   	ret
040830 05          0038*   @cmd: db 5
040831 00          0039*   @arg: db 0
040832             0040*   @end:
040832             0041*   ; VDU 9: Move cursor forward one character
040832             0042*   vdu_cursor_forward:
040832 3E 09       0043*       ld a,9
040834 5B D7       0044*   	rst.lil $10
040836 C9          0045*   	ret
040837             0046*   
040837             0047*   ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
040837             0048*   ; inputs: c=x, b=y 8-bit unsigned integers
040837             0049*   vdu_move_cursor:
040837 ED 43 48 08 0050*       ld (@x0),bc
       04          
04083C 21 47 08 04 0051*   	ld hl,@cmd
040840 01 03 00 00 0052*   	ld bc,@end-@cmd
040844 5B DF       0053*   	rst.lil $18
040846 C9          0054*   	ret
040847 1F          0055*   @cmd: 	db 31
040848 00          0056*   @x0:	db 0
040849 00          0057*   @y0: 	db 0
04084A 00          0058*   @end: 	db 0 ; padding
04084B             0059*   
04084B             0060*   ; VDU 12: Clear text area (CLS)
04084B             0061*   vdu_cls:
04084B 3E 0C       0062*       ld a,12
04084D 5B D7       0063*   	rst.lil $10
04084F C9          0064*   	ret
040850             0065*   
040850             0066*   vdu_flip:
040850 21 5B 08 04 0067*   	ld hl,@cmd
040854 01 03 00 00 0068*   	ld bc,@end-@cmd
040858 5B DF       0069*   	rst.lil $18
04085A C9          0070*   	ret
04085B 17 00 C3    0071*   @cmd: db 23,0,0xC3
04085E             0072*   @end:
04085E             0073*   
04085E             0074*   ; VDU 16: Clear graphics area (CLG)
04085E             0075*   vdu_clg:
04085E 3E 10       0076*       ld a,16
040860 5B D7       0077*   	rst.lil $10
040862 C9          0078*   	ret
040863             0079*   
040863             0080*   ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
040863             0081*   ; VDU 23, 7: Scrolling
040863             0082*   ;     VDU 23, 7, extent, direction, speed: Scroll the screen
040863             0083*   ; inputs: a, extent; l, direction; h; speed
040863             0084*   vdu_scroll_down:
040863 32 78 08 04 0085*   	ld (@extent),a
040867 22 79 08 04 0086*   	ld (@dir),hl ; implicitly populates @speed
04086B 21 76 08 04 0087*   	ld hl,@cmd
04086F 01 05 00 00 0088*   	ld bc,@end-@cmd
040873 5B DF       0089*   	rst.lil $18     ;; Sending command to VDP
040875 C9          0090*   	ret
040876 17 07       0091*   @cmd:       db 23,7
040878 00          0092*   @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
040879 00          0093*   @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
04087A 00          0094*   @speed:     db 0x00 ; pixels
04087B 00          0095*   @end:		db 0x00 ; padding
04087C             0096*   
04087C             0097*   ; COLOUR MODES
04087C             0098*   ; Mode	Effect
04087C             0099*   ; 0	Set on-screen pixel to target colour value
04087C             0100*   ; 1	OR value with the on-screen pixel
04087C             0101*   ; 2	AND value with the on-screen pixel
04087C             0102*   ; 3	XOR value with the on-screen pixel
04087C             0103*   ; 4	Invert the on-screen pixel
04087C             0104*   ; 5	No operation
04087C             0105*   ; 6	AND the inverse of the specified colour with the on-screen pixel
04087C             0106*   ; 7	OR the inverse of the specified colour with the on-screen pixel
04087C             0107*   
04087C             0108*   ; VDU 17, colour: Define text colour (COLOUR)
04087C             0109*   vdu_colour_text:
04087C 32 8C 08 04 0110*   	ld (@arg),a
040880 21 8B 08 04 0111*   	ld hl,@cmd
040884 01 02 00 00 0112*   	ld bc,@end-@cmd
040888 5B DF       0113*   	rst.lil $18
04088A C9          0114*   	ret
04088B 11          0115*   @cmd: db 17
04088C 00          0116*   @arg: db 0
04088D             0117*   @end:
04088D             0118*   
04088D             0119*   ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
04088D             0120*   ; inputs: a=mode, c=colour (add 128 to set background colour)
04088D             0121*   vdu_gcol:
04088D 32 A2 08 04 0122*   	ld (@mode),a
040891 79          0123*       ld a,c
040892 32 A3 08 04 0124*       ld (@col),a
040896 21 A1 08 04 0125*   	ld hl,@cmd
04089A 01 03 00 00 0126*   	ld bc,@end-@cmd
04089E 5B DF       0127*   	rst.lil $18
0408A0 C9          0128*   	ret
0408A1 12          0129*   @cmd:  db 18
0408A2 00          0130*   @mode: db 0
0408A3 00          0131*   @col:  db 0
0408A4             0132*   @end:
0408A4             0133*   
0408A4             0134*   
0408A4             0135*   ; VDU 28, left, bottom, right, top: Set text viewport **
0408A4             0136*   ; MIND THE LITTLE-ENDIANESS
0408A4             0137*   ; inputs: c=left,b=bottom,e=right,d=top
0408A4             0138*   ; outputs; nothing
0408A4             0139*   ; destroys: a might make it out alive
0408A4             0140*   vdu_set_txt_viewport:
0408A4 ED 43 BA 08 0141*       ld (@lb),bc
       04          
0408A9 ED 53 BC 08 0142*   	ld (@rt),de
       04          
0408AE 21 B9 08 04 0143*   	ld hl,@cmd
0408B2 01 05 00 00 0144*   	ld bc,@end-@cmd
0408B6 5B DF       0145*   	rst.lil $18
0408B8 C9          0146*   	ret
0408B9 1C          0147*   @cmd:   db 28 ; set text viewport command
0408BA 00 00       0148*   @lb: 	dw 0x0000 ; set by bc
0408BC 00 00       0149*   @rt: 	dw 0x0000 ; set by de
0408BE 00          0150*   @end:   db 0x00	  ; padding
0408BF             0151*   
0408BF             0152*   ; Wait for VBLANK interrupt
0408BF             0153*   vdu_vblank:
0408BF DD E5       0154*       PUSH 	IX
0408C1             0155*   	MOSCALL	mos_sysvars
0408C1 3E 08       0001*M1 			LD	A, function
0408C3 5B CF       0002*M1 			RST.LIL	08h
0408C5 DD 7E 00    0156*   	LD	A, (IX + sysvar_time + 0)
0408C8             0157*   @wait:
0408C8 DD BE 00    0158*       CP 	A, (IX + sysvar_time + 0)
0408CB 28 FB       0159*       JR	Z, @wait
0408CD DD E1       0160*       POP	IX
0408CF C9          0161*       RET
0408D0             0162*   
0408D0             0163*   ; VDU 29, x; y;: Set graphics origin
0408D0             0164*   ; This command sets the graphics origin.
0408D0             0165*   ; The origin is the point on the screen where the coordinates (0,0) are located.
0408D0             0166*   ; inputs: bc=x0,de=y0
0408D0             0167*   ; outputs; nothing
0408D0             0168*   ; destroys: a might make it out alive
0408D0             0169*   vdu_set_gfx_origin:
0408D0 ED 43 E6 08 0170*       ld (@x0),bc
       04          
0408D5 ED 53 E8 08 0171*       ld (@y0),de
       04          
0408DA 21 E5 08 04 0172*       ld hl,@cmd
0408DE 01 05 00 00 0173*       ld bc,@end-@cmd
0408E2 5B DF       0174*       rst.lil $18
0408E4 C9          0175*       ret
0408E5 1D          0176*   @cmd:   db 29 ; set graphics origin command
0408E6 00 00       0177*   @x0: 	dw 0x0000 ; set by bc
0408E8 00 00       0178*   @y0: 	dw 0x0000 ; set by de
0408EA 00          0179*   @end:   db 0x00	  ; padding
0408EB             0180*   
0408EB             0181*   ; VDU 24, left; bottom; right; top;: Set graphics viewport
0408EB             0182*   ; NOTE: the order of the y-coordinate parameters are inverted
0408EB             0183*   ; 	because we have turned off logical screen scaling
0408EB             0184*   ; inputs: bc=x0,de=y0,ix=x1,iy=y1
0408EB             0185*   ; outputs; nothing
0408EB             0186*   ; destroys: a might make it out alive
0408EB             0187*   vdu_set_gfx_viewport:
0408EB ED 43 0B 09 0188*       ld (@x0),bc
       04          
0408F0 FD 22 0D 09 0189*       ld (@y1),iy
       04          
0408F5 DD 22 0F 09 0190*   	ld (@x1),ix
       04          
0408FA ED 53 11 09 0191*   	ld (@y0),de
       04          
0408FF 21 0A 09 04 0192*   	ld hl,@cmd
040903 01 09 00 00 0193*   	ld bc,@end-@cmd
040907 5B DF       0194*   	rst.lil $18
040909 C9          0195*   	ret
04090A 18          0196*   @cmd:   db 24 ; set graphics viewport command
04090B 00 00       0197*   @x0: 	dw 0x0000 ; set by bc
04090D 00 00       0198*   @y1: 	dw 0x0000 ; set by iy
04090F 00 00       0199*   @x1: 	dw 0x0000 ; set by ix
040911 00 00       0200*   @y0: 	dw 0x0000 ; set by de
040913 00          0201*   @end:   db 0x00	  ; padding
040914             0202*   
040914             0203*   ; SCREEN MODES
040914             0204*   ; ===============================
040914             0205*   ; Mode  Horz  Vert  Cols  Refresh
040914             0206*   ; ---   ----  ----  ----  -------
040914             0207*   ; 11    320   240   2     60hz
040914             0208*   ; 139   320   240   2     60hz
040914             0209*   ; 23    512   384   2     60hz
040914             0210*   ; 151   512   384   2     60hz
040914             0211*   ; 6     640   240   2     60hz
040914             0212*   ; 134   640   240   2     60hz
040914             0213*   ; 2     640   480   2     60hz
040914             0214*   ; 130   640   480   2     60hz
040914             0215*   ; 17    800   600   2     60hz
040914             0216*   ; 145   800   600   2     60hz
040914             0217*   ; 18    1024  768   2     60hz
040914             0218*   ; 146   1024  768   2     60hz
040914             0219*   ; ---   ----  ----  ----  -------
040914             0220*   ; 10    320   240   4     60hz
040914             0221*   ; 138   320   240   4     60hz
040914             0222*   ; 22    512   384   4     60hz
040914             0223*   ; 150   512   384   4     60hz
040914             0224*   ; 5     640   240   4     60hz
040914             0225*   ; 133   640   240   4     60hz
040914             0226*   ; 1     640   480   4     60hz
040914             0227*   ; 129   640   480   4     60hz
040914             0228*   ; 16    800   600   4     60hz
040914             0229*   ; 19    1024  768   4     60hz
040914             0230*   ; ---   ----  ----  ----  -------
040914             0231*   ; 9     320   240   16    60hz
040914             0232*   ; 137   320   240   16    60hz
040914             0233*   ; 21    512   384   16    60hz
040914             0234*   ; 149   512   384   16    60hz
040914             0235*   ; 4     640   240   16    60hz
040914             0236*   ; 132   640   240   16    60hz
040914             0237*   ; 0     640   480   16    60hz
040914             0238*   ; 7     n/a   n/a   16    60hz
040914             0239*   ; ---   ----  ----  ----  -------
040914             0240*   ; 8     320   240   64    60hz
040914             0241*   ; 136   320   240   64    60hz
040914             0242*   ; 20    512   384   64    60hz
040914             0243*   ; 3     640   240   64    60hz
040914             0244*   ; ---   ----  ----  ----  -------
040914             0245*   vdu_set_screen_mode:
040914 32 24 09 04 0246*   	ld (@arg),a
040918 21 23 09 04 0247*   	ld hl,@cmd
04091C 01 02 00 00 0248*   	ld bc,@end-@cmd
040920 5B DF       0249*   	rst.lil $18
040922 C9          0250*   	ret
040923 16          0251*   @cmd: db 22 ; set screen mode
040924 00          0252*   @arg: db 0  ; screen mode parameter
040925             0253*   @end:
040925             0254*   
040925             0255*   ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
040925             0256*   ; inputs: a is scaling mode, 1=on, 0=off
040925             0257*   ; note: default setting on boot is scaling ON
040925             0258*   vdu_set_scaling:
040925 32 37 09 04 0259*   	ld (@arg),a
040929 21 34 09 04 0260*   	ld hl,@cmd
04092D 01 04 00 00 0261*   	ld bc,@end-@cmd
040931 5B DF       0262*   	rst.lil $18
040933 C9          0263*   	ret
040934 17 00 C0    0264*   @cmd: db 23,0,0xC0
040937 00          0265*   @arg: db 0  ; scaling on/off
040938             0266*   @end:
040938             0267*   
040938             0268*   ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
040938             0269*   ; inputs: hl=bufferId
040938             0270*   vdu_buff_select:
040938 22 4A 09 04 0271*   	ld (@bufferId),hl
04093C 21 47 09 04 0272*   	ld hl,@cmd
040940 01 05 00 00 0273*   	ld bc,@end-@cmd
040944 5B DF       0274*   	rst.lil $18
040946 C9          0275*   	ret
040947 17 1B 20    0276*   @cmd: db 23,27,0x20
04094A 00 00       0277*   @bufferId: dw 0x0000
04094C 00          0278*   @end: db 0x00 ; padding
04094D             0279*   
04094D             0280*   ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04094D             0281*   ; inputs: a=format; bc=width; de=height
04094D             0282*   ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04094D             0283*   ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04094D             0284*   ; 0 	RGBA8888 (4-bytes per pixel)
04094D             0285*   ; 1 	RGBA2222 (1-bytes per pixel)
04094D             0286*   ; 2 	Mono/Mask (1-bit per pixel)
04094D             0287*   ; 3 	Reserved for internal use by VDP (“native” format)
04094D             0288*   vdu_bmp_create:
04094D ED 43 69 09 0289*       ld (@width),bc
       04          
040952 ED 53 6B 09 0290*       ld (@height),de
       04          
040957 32 6D 09 04 0291*       ld (@fmt),a
04095B 21 66 09 04 0292*   	ld hl,@cmd
04095F 01 08 00 00 0293*   	ld bc,@end-@cmd
040963 5B DF       0294*   	rst.lil $18
040965 C9          0295*   	ret
040966 17 1B 21    0296*   @cmd:       db 23,27,0x21
040969 00 00       0297*   @width:     dw 0x0000
04096B 00 00       0298*   @height:    dw 0x0000
04096D 00          0299*   @fmt:       db 0x00
04096E             0300*   @end:
04096E             0301*   
04096E             0302*   ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
04096E             0303*   ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
04096E             0304*   vdu_load_img_rgba2_to_8:
04096E             0305*   ; backup the target buffer id and image dimensions
04096E E5          0306*       push hl
04096F D5          0307*       push de
040970 C5          0308*       push bc
040971             0309*   ; load the rgba2 image to working buffer 65534
040971 21 FE FF 00 0310*       ld hl,65534 ; temporary working buffer id
040975 CD 78 0A 04 0311*   	call vdu_load_buffer_from_file
040979             0312*   ; restore the image dimensions and target buffer id
040979 C1          0313*       pop bc
04097A D1          0314*       pop de
04097B E1          0315*       pop hl
04097C             0316*   ; fall through to vdu_rgba2_to_8
04097C             0317*   
04097C             0318*   ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
04097C             0319*   ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
04097C             0320*   ; the "expand bitmap" command is:
04097C             0321*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
04097C             0322*   ; and then to reverse the byte order to fix endian-ness:
04097C             0323*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
04097C             0324*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
04097C             0325*   ; VDU 23,27,&20,targetBufferID%;
04097C             0326*   ; VDU 23,27,&21,width%;height%;0
04097C             0327*   ; -------------------------------------------------------------------
04097C             0328*   ; inputs: bc,de image width,height ; hl = targetBufferId
04097C             0329*   ; prerequisites: rgba2 image data loaded into workingBufferId 65534
04097C             0330*   vdu_rgba2_to_8:
04097C             0331*   ; load the image dimensions and buffer id parameters
04097C ED 43 D8 09 0332*       ld (@width),bc
       04          
040981 ED 53 DA 09 0333*       ld (@height),de
       04          
040986 22 BD 09 04 0334*       ld (@bufferId0),hl
04098A 22 CA 09 04 0335*       ld (@bufferId2),hl
04098E 22 D3 09 04 0336*       ld (@bufferId1),hl
040992             0337*   ; clean up bytes that got stomped on by the ID loads
040992 3E 48       0338*       ld a,0x48
040994 32 BF 09 04 0339*       ld (@bufferId0+2),a
040998 3E 17       0340*       ld a,23
04099A 32 D5 09 04 0341*       ld (@bufferId1+2),a
04099E 3E 18       0342*       ld a,24
0409A0 32 CC 09 04 0343*       ld (@bufferId2+2),a
0409A4 AF          0344*       xor a
0409A5 32 DC 09 04 0345*       ld (@height+2),a
0409A9             0346*   ; send the vdu command strings
0409A9 21 B4 09 04 0347*       ld hl,@beg
0409AD 01 29 00 00 0348*       ld bc,@end-@beg
0409B1 5B DF       0349*       rst.lil $18
0409B3 C9          0350*       ret
0409B4             0351*   @beg:
0409B4             0352*   ; Command 14: Consolidate blocks in a buffer
0409B4             0353*   ; VDU 23, 0, &A0, bufferId; 14
0409B4 17 00 A0    0354*       db 23,0,0xA0
0409B7 FE FF       0355*       dw 65534 ; workingBufferId
0409B9 0E          0356*       db 14 ; consolidate blocks
0409BA             0357*   ; the "expand bitmap" command is:
0409BA             0358*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0409BA 17 00 A0    0359*       db 23,0,0xA0
0409BD 00 00       0360*   @bufferId0: dw 0x0000 ; targetBufferId
0409BF 48          0361*       db 0x48 ; given as decimal command 72 in the docs
0409C0 02          0362*       db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
0409C1 FE FF       0363*       dw 65534 ; sourceBufferId
0409C3 00 7F BF FF 0364*       db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
0409C7             0365*   ; reverse the byte order to fix endian-ness:
0409C7             0366*   ; Command 24: Reverse the order of data of blocks within a buffer
0409C7             0367*   ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
0409C7             0368*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0409C7 17 00 A0    0369*       db 23,0,0xA0
0409CA 00 00       0370*   @bufferId2:    dw 0x0000 ; targetBufferId
0409CC 18          0371*       db 24 ; reverse byte order
0409CD 04          0372*       db 4 ; option: Reverse data of the value size within chunk of data of the specified size
0409CE 04 00       0373*       dw 4 ; size (4 bytes)
0409D0             0374*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0409D0             0375*   ; VDU 23,27,&20,targetBufferID%;
0409D0 17 1B 20    0376*       db 23,27,0x20 ; select bitmap
0409D3 00 00       0377*   @bufferId1: dw 0x0000 ; targetBufferId
0409D5             0378*   ; VDU 23,27,&21,width%;height%;0
0409D5 17 1B 21    0379*       db 23,27,0x21 ; create bitmap from buffer
0409D8 00 00       0380*   @width: dw 0x0000
0409DA 00 00       0381*   @height: dw 0x0000
0409DC 00          0382*       db 0x00 ; rgba8888 format
0409DD             0383*   @end:
0409DD             0384*   
0409DD             0385*   ; scratch variables
0409DD 00 00 00    0386*   bufferId0: dl 0x000000
0409E0 00 00 00    0387*   bufferId1: dl 0x000000
0409E3             0388*   
0409E3             0389*   ; load a vdu buffer from local memory
0409E3             0390*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0409E3             0391*   vdu_load_buffer:
0409E3 ED 43 0C 0A 0392*       ld (@length),bc
       04          
0409E8 D5          0393*       push de ; save data pointer
0409E9             0394*   ; send the vdu command string
0409E9 7D          0395*       ld a,l
0409EA 32 09 0A 04 0396*       ld (@bufferId),a
0409EE 7C          0397*       ld a,h
0409EF 32 0A 0A 04 0398*       ld (@bufferId+1),a
0409F3 21 06 0A 04 0399*       ld hl,@cmd
0409F7 01 08 00 00 0400*       ld bc,@end-@cmd
0409FB 5B DF       0401*       rst.lil $18
0409FD             0402*   ; send the buffer data
0409FD E1          0403*       pop hl ; pointer to data
0409FE ED 4B 0C 0A 0404*       ld bc,(@length)
       04          
040A03 5B DF       0405*       rst.lil $18 ; send it
040A05 C9          0406*       ret
040A06             0407*   ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
040A06 17 00 A0    0408*   @cmd:       db 23,0,0xA0
040A09 00 00       0409*   @bufferId:	dw 0x0000
040A0B 00          0410*   		    db 0 ; load buffer
040A0C 00 00       0411*   @length:	dw 0x0000
040A0E 00          0412*   @end: db 0 ; padding
040A0F             0413*   
040A0F             0414*   ; clear a buffer
040A0F             0415*   ; inputs: hl = bufferId
040A0F             0416*   vdu_clear_buffer:
040A0F 7D          0417*       ld a,l
040A10 32 27 0A 04 0418*       ld (@bufferId),a
040A14 7C          0419*       ld a,h
040A15 32 28 0A 04 0420*       ld (@bufferId+1),a
040A19 21 24 0A 04 0421*       ld hl,@cmd
040A1D 01 06 00 00 0422*       ld bc,@end-@cmd
040A21 5B DF       0423*       rst.lil $18
040A23 C9          0424*       ret
040A24 17 00 A0    0425*   @cmd:       db 23,0,0xA0
040A27 00 00       0426*   @bufferId:	dw 0x0000
040A29 02          0427*   		    db 2 ; clear buffer
040A2A             0428*   @end:
040A2A             0429*   
040A2A             0430*   vdu_clear_all_buffers:
040A2A             0431*   ; clear all buffers
040A2A 21 35 0A 04 0432*       ld hl,@beg
040A2E 01 06 00 00 0433*       ld bc,@end-@beg
040A32 5B DF       0434*       rst.lil $18
040A34 C9          0435*       ret
040A35 17 00 A0    0436*   @beg: db 23,0,$A0
040A38 FF FF       0437*         dw -1 ; clear all buffers
040A3A 02          0438*         db 2  ; command 2: clear a buffer
040A3B             0439*   @end:
040A3B             0440*   
040A3B             0441*   ; Command 14: Consolidate blocks in a buffer
040A3B             0442*   vdu_consolidate_buffer:
040A3B             0443*   ; set parameters for vdu call
040A3B 7D          0444*       ld a,l
040A3C 32 53 0A 04 0445*       ld (@bufferId),a
040A40 7C          0446*       ld a,h
040A41 32 54 0A 04 0447*       ld (@bufferId+1),a
040A45 21 50 0A 04 0448*       ld hl,@beg
040A49 01 06 00 00 0449*       ld bc,@end-@beg
040A4D 5B DF       0450*       rst.lil $18
040A4F C9          0451*       ret
040A50             0452*   ; VDU 23, 0, &A0, bufferId; 14
040A50 17 00 A0    0453*   @beg: db 23,0,0xA0
040A53 00 00       0454*   @bufferId: dw 0x0000
040A55 0E          0455*              db 14
040A56             0456*   @end:
040A56             0457*   
040A56             0458*   ; load an image file to a buffer and make it a bitmap
040A56             0459*   ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
040A56             0460*   vdu_load_img:
040A56             0461*   ; back up image type and dimension parameters
040A56 22 DD 09 04 0462*       ld (bufferId0),hl
040A5A F5          0463*       push af
040A5B C5          0464*   	push bc
040A5C D5          0465*   	push de
040A5D             0466*   ; load the image
040A5D CD 78 0A 04 0467*   	call vdu_load_buffer_from_file
040A61             0468*   ; now make it a bitmap
040A61 2A DD 09 04 0469*       ld hl,(bufferId0)
040A65 CD 3B 0A 04 0470*       call vdu_consolidate_buffer
040A69 2A DD 09 04 0471*       ld hl,(bufferId0)
040A6D CD 38 09 04 0472*       call vdu_buff_select
040A71 D1          0473*   	pop de ; image height
040A72 C1          0474*   	pop bc ; image width
040A73 F1          0475*   	pop af ; image type
040A74 C3 4D 09 04 0476*   	jp vdu_bmp_create ; will return to caller from there
040A78             0477*   
040A78             0478*   ; inputs: hl = bufferId; iy = pointer to filename
040A78             0479*   vdu_load_buffer_from_file:
040A78 22 DD 09 04 0480*       ld (bufferId0),hl
040A7C             0481*   
040A7C             0482*   ; clear target buffer
040A7C CD 0F 0A 04 0483*       call vdu_clear_buffer
040A80             0484*   
040A80             0485*   ; open the file in read mode
040A80             0486*   ; Open a file
040A80             0487*   ; HLU: Filename
040A80             0488*   ;   C: Mode
040A80             0489*   ; Returns:
040A80             0490*   ;   A: Filehandle, or 0 if couldn't open
040A80 FD E5       0491*   	push iy ; pointer to filename
040A82 E1          0492*   	pop hl
040A83 0E 01       0493*   	ld c,fa_read
040A85             0494*       MOSCALL mos_fopen
040A85 3E 0A       0001*M1 			LD	A, function
040A87 5B CF       0002*M1 			RST.LIL	08h
040A89 32 C4 0A 04 0495*       ld (@filehandle),a
040A8D             0496*   
040A8D             0497*   @read_file:
040A8D             0498*   ; Read a block of data from a file
040A8D             0499*   ;   C: Filehandle
040A8D             0500*   ; HLU: Pointer to where to write the data to
040A8D             0501*   ; DEU: Number of bytes to read
040A8D             0502*   ; Returns:
040A8D             0503*   ; DEU: Number of bytes read
040A8D 3A C4 0A 04 0504*       ld a,(@filehandle)
040A91 4F          0505*       ld c,a
040A92 21 00 E0 B7 0506*       ld hl,filedata
040A96 11 00 20 00 0507*       ld de,8192 ; max we can read into onboard sram at one time
040A9A             0508*       MOSCALL mos_fread
040A9A 3E 1A       0001*M1 			LD	A, function
040A9C 5B CF       0002*M1 			RST.LIL	08h
040A9E             0509*   
040A9E             0510*   ; test de for zero bytes read
040A9E 21 00 00 00 0511*       ld hl,0
040AA2 AF          0512*       xor a ; clear carry
040AA3 ED 52       0513*       sbc hl,de
040AA5 CA BB 0A 04 0514*       jp z,@close_file
040AA9             0515*   
040AA9             0516*   ; load a vdu buffer from local memory
040AA9             0517*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
040AA9 2A DD 09 04 0518*       ld hl,(bufferId0)
040AAD D5          0519*       push de ; chunksize
040AAE C1          0520*       pop bc
040AAF 11 00 E0 B7 0521*       ld de,filedata
040AB3 CD E3 09 04 0522*       call vdu_load_buffer
040AB7             0523*   
040AB7             0524*   ; read the next block
040AB7 C3 8D 0A 04 0525*       jp @read_file
040ABB             0526*   
040ABB             0527*   ; close the file
040ABB             0528*   @close_file:
040ABB 3A C4 0A 04 0529*       ld a,(@filehandle)
040ABF             0530*       MOSCALL mos_fclose
040ABF 3E 0B       0001*M1 			LD	A, function
040AC1 5B CF       0002*M1 			RST.LIL	08h
040AC3 C9          0531*       ret ; vdu_load_buffer_from_file
040AC4             0532*   
040AC4 00          0533*   @filehandle: db 0 ; file handle
040AC5 00 00 00    0534*   @fil: dl 0 ; pointer to FIL struct
040AC8             0535*   
040AC8 00 00 00    0536*   @chunkpointer: dl 0 ; pointer to current chunk
040ACB             0537*   
040ACB             0538*   ; File information structure (FILINFO)
040ACB             0539*   @filinfo:
040ACB 00 00 00 00 0540*   @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
040ACF 00 00       0541*   @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
040AD1 00 00       0542*   @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
040AD3 00          0543*   @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
040AD4 00 00 00 00 0544*   @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
040AE1 00 00 00 00 0545*   @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040BE1             0039        include "vdu_fonts.inc"
040BE1 FF FF FF FF 0001*       align 256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
040C00             0002*   ; select font
040C00             0003*   ; inputs: hl = bufferId, a = font flags
040C00             0004*   ; Flags:
040C00             0005*   ; Bit	Description
040C00             0006*   ; 0	Adjust cursor position to ensure text baseline is aligned
040C00             0007*   ;   0: Do not adjust cursor position (best for changing font on a new line)
040C00             0008*   ;   1: Adjust cursor position (best for changing font in the middle of a line)
040C00             0009*   ; 1-7	Reserved for future use
040C00             0010*   ; VDU 23, 0, &95, 0, bufferId; flags: Select font
040C00             0011*   vdu_font_select:
040C00 22 17 0C 04 0012*       ld (@bufferId),hl
040C04 32 19 0C 04 0013*       ld (@flags),a
040C08 21 13 0C 04 0014*       ld hl,@cmd
040C0C 01 07 00 00 0015*       ld bc,@end-@cmd
040C10 5B DF       0016*       rst.lil $18
040C12 C9          0017*       ret
040C13 17 00 95 00 0018*   @cmd: db 23, 0, 0x95, 0
040C17 00 00       0019*   @bufferId: dw 0x0000
040C19 00          0020*   @flags: db 0x00
040C1A             0021*   @end:
040C1A             0022*   
040C1A             0023*   ; create font from buffer
040C1A             0024*   ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
040C1A             0025*   ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
040C1A             0026*   vdu_font_create:
040C1A 22 3F 0C 04 0027*       ld (@bufferId),hl
040C1E ED 53 41 0C 0028*       ld (@width),de ; also loads height
       04          
040C23 32 44 0C 04 0029*       ld (@flags),a
040C27 7A          0030*       ld a,d ; height
040C28 32 43 0C 04 0031*       ld (@ascent),a ; ascent = height
040C2C             0032*   ; consolidate buffer
040C2C CD 3B 0A 04 0033*       call vdu_consolidate_buffer
040C30             0034*   ; create font
040C30 21 3B 0C 04 0035*       ld hl,@cmd
040C34 01 0A 00 00 0036*       ld bc,@end-@cmd
040C38 5B DF       0037*       rst.lil $18
040C3A C9          0038*       ret
040C3B 17 00 95 01 0039*   @cmd: db 23, 0, 0x95, 1
040C3F 00 00       0040*   @bufferId: dw 0x0000
040C41 00          0041*   @width: db 0x00
040C42 00          0042*   @height: db 0x00
040C43 00          0043*   @ascent: db 0x00
040C44 00          0044*   @flags: db 0x00
040C45             0045*   @end:
040C45             0046*   
040C45             0047*   ; set or adjust font property
040C45             0048*   ; inputs: hl = bufferId, a = field, de = value
040C45             0049*   ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
040C45             0050*   vdu_font_property:
040C45 22 61 0C 04 0051*       ld (@bufferId),hl
040C49 32 63 0C 04 0052*       ld (@field),a
040C4D ED 53 64 0C 0053*       ld (@value),de
       04          
040C52 21 5D 0C 04 0054*       ld hl,@cmd
040C56 01 09 00 00 0055*       ld bc,@end-@cmd
040C5A 5B DF       0056*       rst.lil $18
040C5C C9          0057*       ret
040C5D 17 00 95 02 0058*   @cmd: db 23, 0, 0x95, 2
040C61 00 00       0059*   @bufferId: dw 0x0000
040C63 00          0060*   @field: db 0x00
040C64 00 00       0061*   @value: dw 0x0000
040C66 00          0062*   @end: db 0x00 ; padding
040C67             0063*   
040C67             0064*   ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
040C67             0065*   
040C67             0066*   ; Clear/Delete font
040C67             0067*   ; inputs: hl = bufferId
040C67             0068*   ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
040C67             0069*   vdu_font_clear:
040C67 22 7A 0C 04 0070*       ld (@bufferId),hl
040C6B 21 76 0C 04 0071*       ld hl,@cmd
040C6F 01 06 00 00 0072*       ld bc,@end-@cmd
040C73 5B DF       0073*       rst.lil $18
040C75 C9          0074*       ret
040C76 17 00 95 04 0075*   @cmd: db 23, 0, 0x95, 4
040C7A 00 00       0076*   @bufferId: dw 0x0000
040C7C 00          0077*   @end: db 0x00 ; padding
040C7D             0078*   
040C7D             0079*   ; Copy system font to buffer
040C7D             0080*   ; inputs: hl = bufferId
040C7D             0081*   ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
040C7D             0082*   vdu_font_copy_system:
040C7D 22 90 0C 04 0083*       ld (@bufferId),hl
040C81 21 8C 0C 04 0084*       ld hl,@cmd
040C85 01 06 00 00 0085*       ld bc,@end-@cmd
040C89 5B DF       0086*       rst.lil $18
040C8B C9          0087*       ret
040C8C 17 00 95 05 0088*   @cmd: db 23, 0, 0x95, 5
040C90 00 00       0089*   @bufferId: dw 0x0000
040C92 00          0090*   @end: db 0x00 ; padding
040C93             0040    
040C93             0041    ; Application includes
040C93             0042        include "fonts_list.inc"
040C93             0001*   ; Generated by asm_config_editor.py
040C93             0002*   font_list_record_size: equ 12
040C93             0003*   font_list_width: equ 0
040C93             0004*   font_list_height: equ 3
040C93             0005*   font_list_bufferId: equ 6
040C93             0006*   font_list_filename: equ 9
040C93             0007*   
040C93             0008*   num_fonts: equ 7
040C93             0009*   
040C93             0010*   ; Index list:
040C93             0011*   amiga_forever_8x8: equ 0
040C93             0012*   computer_pixel_7_8x12: equ 1
040C93             0013*   computer_pixel_7_8x16: equ 2
040C93             0014*   Lat2_VGA8_8x8: equ 3
040C93             0015*   Lat7_VGA8_8x8: equ 4
040C93             0016*   Squarewave_Bold_8x12: equ 5
040C93             0017*   wendy_neue_6x6: equ 6
040C93             0018*   
040C93             0019*   font_list: ; width; height; bufferId; filename;:
040C93 08 00 00 08 0020*   	dl 8, 8, 64000, fn_amiga_forever_8x8
       00 00 00 FA 
       00 E7 0C 04 
040C9F 08 00 00 0C 0021*   	dl 8, 12, 64001, fn_computer_pixel_7_8x12
       00 00 01 FA 
       00 09 0D 04 
040CAB 08 00 00 10 0022*   	dl 8, 16, 64002, fn_computer_pixel_7_8x16
       00 00 02 FA 
       00 2F 0D 04 
040CB7 08 00 00 08 0023*   	dl 8, 8, 64003, fn_Lat2_VGA8_8x8
       00 00 03 FA 
       00 55 0D 04 
040CC3 08 00 00 08 0024*   	dl 8, 8, 64004, fn_Lat7_VGA8_8x8
       00 00 04 FA 
       00 73 0D 04 
040CCF 08 00 00 0C 0025*   	dl 8, 12, 64005, fn_Squarewave_Bold_8x12
       00 00 05 FA 
       00 91 0D 04 
040CDB 06 00 00 06 0026*   	dl 6, 6, 64006, fn_wendy_neue_6x6
       00 00 06 FA 
       00 B6 0D 04 
040CE7             0027*   
040CE7             0028*   ; files_list: ; filename:
040CE7 2F 6D 6F 73 0029*   fn_amiga_forever_8x8: db "/mos/fonts/amiga_forever_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 61 
       6D 69 67 61 
       5F 66 6F 72 
       65 76 65 72 
       5F 38 78 38 
       2E 66 6F 6E 
       74 00       
040D09 2F 6D 6F 73 0030*   fn_computer_pixel_7_8x12: db "/mos/fonts/computer_pixel_7_8x12.font",0
       2F 66 6F 6E 
       74 73 2F 63 
       6F 6D 70 75 
       74 65 72 5F 
       70 69 78 65 
       6C 5F 37 5F 
       38 78 31 32 
       2E 66 6F 6E 
       74 00       
040D2F 2F 6D 6F 73 0031*   fn_computer_pixel_7_8x16: db "/mos/fonts/computer_pixel_7_8x16.font",0
       2F 66 6F 6E 
       74 73 2F 63 
       6F 6D 70 75 
       74 65 72 5F 
       70 69 78 65 
       6C 5F 37 5F 
       38 78 31 36 
       2E 66 6F 6E 
       74 00       
040D55 2F 6D 6F 73 0032*   fn_Lat2_VGA8_8x8: db "/mos/fonts/Lat2-VGA8_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 4C 
       61 74 32 2D 
       56 47 41 38 
       5F 38 78 38 
       2E 66 6F 6E 
       74 00       
040D73 2F 6D 6F 73 0033*   fn_Lat7_VGA8_8x8: db "/mos/fonts/Lat7-VGA8_8x8.font",0
       2F 66 6F 6E 
       74 73 2F 4C 
       61 74 37 2D 
       56 47 41 38 
       5F 38 78 38 
       2E 66 6F 6E 
       74 00       
040D91 2F 6D 6F 73 0034*   fn_Squarewave_Bold_8x12: db "/mos/fonts/Squarewave_Bold_8x12.font",0
       2F 66 6F 6E 
       74 73 2F 53 
       71 75 61 72 
       65 77 61 76 
       65 5F 42 6F 
       6C 64 5F 38 
       78 31 32 2E 
       66 6F 6E 74 
       00          
040DB6 2F 6D 6F 73 0035*   fn_wendy_neue_6x6: db "/mos/fonts/wendy_neue_6x6.font",0
       2F 66 6F 6E 
       74 73 2F 77 
       65 6E 64 79 
       5F 6E 65 75 
       65 5F 36 78 
       36 2E 66 6F 
       6E 74 00    
040DD5             0043        include "cfg.inc"
040DD5             0001*   screen_mode: equ 20
040DD5             0002*   font_name: equ computer_pixel_7_8x12
040DD5             0044    
040DD5             0045    main:
040DD5 3E 14       0046        ld a,screen_mode
040DD7 CD 14 09 04 0047        call vdu_set_screen_mode
040DDB             0048    
040DDB             0049    ; ; print test string
040DDB             0050    ;     call printNewLine
040DDB             0051    ;     ld hl,uxor_balnea
040DDB             0052    ;     call printString
040DDB             0053    ;     call printNewLine
040DDB             0054    
040DDB             0055    ; inputs: hl = bufferId; iy = pointer to filename
040DDB 1E 01       0056        ld e,font_name
040DDD 16 0C       0057        ld d,12 ; bytes per font list record
040DDF ED 5C       0058        mlt de
040DE1 FD 21 93 0C 0059        ld iy,font_list
       04          
040DE6 FD 19       0060        add iy,de
040DE8 FD E5       0061        push iy
040DEA             0062    
040DEA FD 37 09    0063        ld iy,(iy+9)
040DED             0064    
040DED             0065    ; debug print filename at iy
040DED CD 1C 01 04 0066        call printNewLine
040DF1 FD E5       0067        push iy
040DF3 E1          0068        pop hl
040DF4 CD 07 01 04 0069        call printString
040DF8 CD 1C 01 04 0070        call printNewLine
040DFC             0071    
040DFC 21 00 40 00 0072        ld hl,0x4000 ; bufferId
040E00 E5          0073        push hl
040E01 CD 78 0A 04 0074        call vdu_load_buffer_from_file
040E05             0075    
040E05             0076    ; create font from buffer
040E05             0077    ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
040E05             0078    ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
040E05 E1          0079        pop hl ; bufferId
040E06 FD E1       0080        pop iy ; pointer to font list record
040E08 E5          0081        push hl
040E09 FD 7E 00    0082        ld a,(iy+0)
040E0C 5F          0083        ld e,a  ; width
040E0D FD 7E 03    0084        ld a,(iy+3)
040E10 57          0085        ld d,a  ; height / ascent
040E11 3E 00       0086        ld a,0 ; flags
040E13 CD 1A 0C 04 0087        call vdu_font_create
040E17             0088    
040E17             0089    ; select font
040E17             0090    ; inputs: hl = bufferId, a = font flags
040E17             0091    ; Flags:
040E17             0092    ; Bit	Description
040E17             0093    ; 0	Adjust cursor position to ensure text baseline is aligned
040E17             0094    ;   0: Do not adjust cursor position (best for changing font on a new line)
040E17             0095    ;   1: Adjust cursor position (best for changing font in the middle of a line)
040E17             0096    ; 1-7	Reserved for future use
040E17             0097    ; VDU 23, 0, &95, 0, bufferId; flags: Select font
040E17 E1          0098        pop hl
040E18 3E 00       0099        ld a,0
040E1A CD 00 0C 04 0100        call vdu_font_select
040E1E             0101    
040E1E             0102    ; print test string
040E1E CD 1C 01 04 0103        call printNewLine
040E22 21 1E 0F 04 0104        ld hl,lorem_ipsum
040E26 CD 07 01 04 0105        call printString
040E2A CD 1C 01 04 0106        call printNewLine
040E2E             0107    
040E2E             0108    ; print test string
040E2E 21 3B 0E 04 0109        ld hl,test_string
040E32 CD 07 01 04 0110        call printString
040E36 CD 1C 01 04 0111        call printNewLine
040E3A             0112    
040E3A             0113    ; all done
040E3A C9          0114        ret
040E3B             0115    
040E3B             0116    test_string:
040E3B 20 21 22 23 0117        db 0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F
       24 25 26 27 
       28 29 2A 2B 
       2C 2D 2E 2F 
040E4B 30 31 32 33 0118        db 0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F
       34 35 36 37 
       38 39 3A 3B 
       3C 3D 3E 3F 
040E5B 40 41 42 43 0119        db 0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F
       44 45 46 47 
       48 49 4A 4B 
       4C 4D 4E 4F 
040E6B 50 51 52 53 0120        db 0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F
       54 55 56 57 
       58 59 5A 5B 
       5C 5D 5E 5F 
040E7B 60 61 62 63 0121        db 0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F
       64 65 66 67 
       68 69 6A 6B 
       6C 6D 6E 6F 
040E8B 70 71 72 73 0122        db 0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F
       74 75 76 77 
       78 79 7A 7B 
       7C 7D 7E 7F 
040E9B 80 81 82 83 0123        db 0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
       84 85 86 87 
       88 89 8A 8B 
       8C 8D 8E 8F 
040EAB 90 91 92 93 0124        db 0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F
       94 95 96 97 
       98 99 9A 9B 
       9C 9D 9E 9F 
040EBB A0 A1 A2 A3 0125        db 0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF
       A4 A5 A6 A7 
       A8 A9 AA AB 
       AC AD AE AF 
040ECB B0 B1 B2 B3 0126        db 0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF
       B4 B5 B6 B7 
       B8 B9 BA BB 
       BC BD BE BF 
040EDB C0 C1 C2 C3 0127        db 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF
       C4 C5 C6 C7 
       C8 C9 CA CB 
       CC CD CE CF 
040EEB D0 D1 D2 D3 0128        db 0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF
       D4 D5 D6 D7 
       D8 D9 DA DB 
       DC DD DE DF 
040EFB E0 E1 E2 E3 0129        db 0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF
       E4 E5 E6 E7 
       E8 E9 EA EB 
       EC ED EE EF 
040F0B F0 F1 F2 F3 0130        db 0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF,13,10
       F4 F5 F6 F7 
       F8 F9 FA FB 
       FC FD FE FF 
       0D 0A       
040F1D 00          0131        db 0x00
040F1E             0132    
040F1E             0133    lorem_ipsum:
040F1E 4C 6F 72 65 0134        db "Lorem ipsum dolor sit amet, consectetur adipiscing elit. "
       6D 20 69 70 
       73 75 6D 20 
       64 6F 6C 6F 
       72 20 73 69 
       74 20 61 6D 
       65 74 2C 20 
       63 6F 6E 73 
       65 63 74 65 
       74 75 72 20 
       61 64 69 70 
       69 73 63 69 
       6E 67 20 65 
       6C 69 74 2E 
       20          
040F57 4E 75 6C 6C 0135        db "Nulla autem virtuosa tristitia, sed gloria virtutis in ipso est. "
       61 20 61 75 
       74 65 6D 20 
       76 69 72 74 
       75 6F 73 61 
       20 74 72 69 
       73 74 69 74 
       69 61 2C 20 
       73 65 64 20 
       67 6C 6F 72 
       69 61 20 76 
       69 72 74 75 
       74 69 73 20 
       69 6E 20 69 
       70 73 6F 20 
       65 73 74 2E 
       20          
040F98 4E 61 6D 20 0136        db "Nam sapientis animum fluctibus movet; in vita, res novae, "
       73 61 70 69 
       65 6E 74 69 
       73 20 61 6E 
       69 6D 75 6D 
       20 66 6C 75 
       63 74 69 62 
       75 73 20 6D 
       6F 76 65 74 
       3B 20 69 6E 
       20 76 69 74 
       61 2C 20 72 
       65 73 20 6E 
       6F 76 61 65 
       2C 20       
040FD2 6E 6F 76 61 0137        db "novas tempestates ferunt. Fortis enim est, qui dolorem, cum "
       73 20 74 65 
       6D 70 65 73 
       74 61 74 65 
       73 20 66 65 
       72 75 6E 74 
       2E 20 46 6F 
       72 74 69 73 
       20 65 6E 69 
       6D 20 65 73 
       74 2C 20 71 
       75 69 20 64 
       6F 6C 6F 72 
       65 6D 2C 20 
       63 75 6D 20 
04100E 70 6F 74 65 0138        db "potest, arcet. Nemo tam divitiis abundat, qui, si desit libertas, "
       73 74 2C 20 
       61 72 63 65 
       74 2E 20 4E 
       65 6D 6F 20 
       74 61 6D 20 
       64 69 76 69 
       74 69 69 73 
       20 61 62 75 
       6E 64 61 74 
       2C 20 71 75 
       69 2C 20 73 
       69 20 64 65 
       73 69 74 20 
       6C 69 62 65 
       72 74 61 73 
       2C 20       
041050 62 65 61 74 0139        db "beatus. Hic igitur ratio victum etiam sine voluptas quaerit. "
       75 73 2E 20 
       48 69 63 20 
       69 67 69 74 
       75 72 20 72 
       61 74 69 6F 
       20 76 69 63 
       74 75 6D 20 
       65 74 69 61 
       6D 20 73 69 
       6E 65 20 76 
       6F 6C 75 70 
       74 61 73 20 
       71 75 61 65 
       72 69 74 2E 
       20          
04108D 4E 61 6D 20 0140        db "Nam in medio stat virtus: tam paupertas quam divitiae vitandae. "
       69 6E 20 6D 
       65 64 69 6F 
       20 73 74 61 
       74 20 76 69 
       72 74 75 73 
       3A 20 74 61 
       6D 20 70 61 
       75 70 65 72 
       74 61 73 20 
       71 75 61 6D 
       20 64 69 76 
       69 74 69 61 
       65 20 76 69 
       74 61 6E 64 
       61 65 2E 20 
0410CD 4D 65 6E 73 0141        db "Mens sibi conscia recti, semper aditum ad libertatem invocat. "
       20 73 69 62 
       69 20 63 6F 
       6E 73 63 69 
       61 20 72 65 
       63 74 69 2C 
       20 73 65 6D 
       70 65 72 20 
       61 64 69 74 
       75 6D 20 61 
       64 20 6C 69 
       62 65 72 74 
       61 74 65 6D 
       20 69 6E 76 
       6F 63 61 74 
       2E 20       
04110B 51 75 69 64 0142        db "Quid est enim aliud esse versutum? Quod si ita se habeat, "
       20 65 73 74 
       20 65 6E 69 
       6D 20 61 6C 
       69 75 64 20 
       65 73 73 65 
       20 76 65 72 
       73 75 74 75 
       6D 3F 20 51 
       75 6F 64 20 
       73 69 20 69 
       74 61 20 73 
       65 20 68 61 
       62 65 61 74 
       2C 20       
041145 6E 6F 6E 20 0143        db "non possit beatam praestare vitam sapientia. Quamquam tu hanc "
       70 6F 73 73 
       69 74 20 62 
       65 61 74 61 
       6D 20 70 72 
       61 65 73 74 
       61 72 65 20 
       76 69 74 61 
       6D 20 73 61 
       70 69 65 6E 
       74 69 61 2E 
       20 51 75 61 
       6D 71 75 61 
       6D 20 74 75 
       20 68 61 6E 
       63 20       
041183 63 6F 67 6E 0144        db "cognitionem, Quirine, si tibi probatur, repudiandam non esse "
       69 74 69 6F 
       6E 65 6D 2C 
       20 51 75 69 
       72 69 6E 65 
       2C 20 73 69 
       20 74 69 62 
       69 20 70 72 
       6F 62 61 74 
       75 72 2C 20 
       72 65 70 75 
       64 69 61 6E 
       64 61 6D 20 
       6E 6F 6E 20 
       65 73 73 65 
       20          
0411C0 64 69 63 65 0145        db "dices. Quae cum dixisset paulumque institisset, Quid est?"
       73 2E 20 51 
       75 61 65 20 
       63 75 6D 20 
       64 69 78 69 
       73 73 65 74 
       20 70 61 75 
       6C 75 6D 71 
       75 65 20 69 
       6E 73 74 69 
       74 69 73 73 
       65 74 2C 20 
       51 75 69 64 
       20 65 73 74 
       3F          
0411F9 0D 0A 0D 0A 0146        db "\r\n\r\n"
0411FD             0147    
0411FD             0148    pullo_vorenus:
0411FD 45 72 61 6E 0149        db "Erant in ea legione fortissimi viri, centuriones, qui primis "
       74 20 69 6E 
       20 65 61 20 
       6C 65 67 69 
       6F 6E 65 20 
       66 6F 72 74 
       69 73 73 69 
       6D 69 20 76 
       69 72 69 2C 
       20 63 65 6E 
       74 75 72 69 
       6F 6E 65 73 
       2C 20 71 75 
       69 20 70 72 
       69 6D 69 73 
       20          
04123A 6F 72 64 69 0150        db "ordinibus appropinquarent, Titus Pullo et Lucius Vorenus. "
       6E 69 62 75 
       73 20 61 70 
       70 72 6F 70 
       69 6E 71 75 
       61 72 65 6E 
       74 2C 20 54 
       69 74 75 73 
       20 50 75 6C 
       6C 6F 20 65 
       74 20 4C 75 
       63 69 75 73 
       20 56 6F 72 
       65 6E 75 73 
       2E 20       
041274 48 69 20 70 0151        db "Hi perpetuas inter se controversias habebant, quinam "
       65 72 70 65 
       74 75 61 73 
       20 69 6E 74 
       65 72 20 73 
       65 20 63 6F 
       6E 74 72 6F 
       76 65 72 73 
       69 61 73 20 
       68 61 62 65 
       62 61 6E 74 
       2C 20 71 75 
       69 6E 61 6D 
       20          
0412A9 61 6E 74 65 0152        db "anteferretur, omnibusque annis de locis summis "
       66 65 72 72 
       65 74 75 72 
       2C 20 6F 6D 
       6E 69 62 75 
       73 71 75 65 
       20 61 6E 6E 
       69 73 20 64 
       65 20 6C 6F 
       63 69 73 20 
       73 75 6D 6D 
       69 73 20    
0412D8 73 69 6D 75 0153        db "simultatibus contendebant."
       6C 74 61 74 
       69 62 75 73 
       20 63 6F 6E 
       74 65 6E 64 
       65 62 61 6E 
       74 2E       
0412F2 0D 0A 0D 0A 0154        db "\r\n\r\n"
0412F6 43 75 6D 20 0155        db "Cum acerrime ad munitiones pugnaretur, Pullo exclamat: "
       61 63 65 72 
       72 69 6D 65 
       20 61 64 20 
       6D 75 6E 69 
       74 69 6F 6E 
       65 73 20 70 
       75 67 6E 61 
       72 65 74 75 
       72 2C 20 50 
       75 6C 6C 6F 
       20 65 78 63 
       6C 61 6D 61 
       74 3A 20    
04132D 27 51 75 69 0156        db "'Quid dubitas, Vorene? Aut quem locum tuae virtutis "
       64 20 64 75 
       62 69 74 61 
       73 2C 20 56 
       6F 72 65 6E 
       65 3F 20 41 
       75 74 20 71 
       75 65 6D 20 
       6C 6F 63 75 
       6D 20 74 75 
       61 65 20 76 
       69 72 74 75 
       74 69 73 20 
041361 65 78 73 70 0157        db "exspectas?' Statim extra munitiones procedit, et ubi "
       65 63 74 61 
       73 3F 27 20 
       53 74 61 74 
       69 6D 20 65 
       78 74 72 61 
       20 6D 75 6E 
       69 74 69 6F 
       6E 65 73 20 
       70 72 6F 63 
       65 64 69 74 
       2C 20 65 74 
       20 75 62 69 
       20          
041396 68 6F 73 74 0158        db "hostes confertissimi sunt, irrumpit. Vorenus, "
       65 73 20 63 
       6F 6E 66 65 
       72 74 69 73 
       73 69 6D 69 
       20 73 75 6E 
       74 2C 20 69 
       72 72 75 6D 
       70 69 74 2E 
       20 56 6F 72 
       65 6E 75 73 
       2C 20       
0413C4 65 78 69 73 0159        db "existimationem veritus, eum sequitur et tela conicit."
       74 69 6D 61 
       74 69 6F 6E 
       65 6D 20 76 
       65 72 69 74 
       75 73 2C 20 
       65 75 6D 20 
       73 65 71 75 
       69 74 75 72 
       20 65 74 20 
       74 65 6C 61 
       20 63 6F 6E 
       69 63 69 74 
       2E          
0413F9 0D 0A 0D 0A 0160        db "\r\n\r\n"
0413FD 50 75 6C 6C 0161        db "Pullo gladio impeditus circumvenitur; Vorenus auxilium "
       6F 20 67 6C 
       61 64 69 6F 
       20 69 6D 70 
       65 64 69 74 
       75 73 20 63 
       69 72 63 75 
       6D 76 65 6E 
       69 74 75 72 
       3B 20 56 6F 
       72 65 6E 75 
       73 20 61 75 
       78 69 6C 69 
       75 6D 20    
041434 66 65 72 74 0162        db "fert et hostes propellit. Ambo, compluribus interfectis, "
       20 65 74 20 
       68 6F 73 74 
       65 73 20 70 
       72 6F 70 65 
       6C 6C 69 74 
       2E 20 41 6D 
       62 6F 2C 20 
       63 6F 6D 70 
       6C 75 72 69 
       62 75 73 20 
       69 6E 74 65 
       72 66 65 63 
       74 69 73 2C 
       20          
04146D 63 75 6D 20 0163        db "cum summa laude intra munitiones redeunt. Sic fortuna "
       73 75 6D 6D 
       61 20 6C 61 
       75 64 65 20 
       69 6E 74 72 
       61 20 6D 75 
       6E 69 74 69 
       6F 6E 65 73 
       20 72 65 64 
       65 75 6E 74 
       2E 20 53 69 
       63 20 66 6F 
       72 74 75 6E 
       61 20       
0414A3 69 6E 20 63 0164        db "in contentione utrumque versavit, ut uter utri auxilio "
       6F 6E 74 65 
       6E 74 69 6F 
       6E 65 20 75 
       74 72 75 6D 
       71 75 65 20 
       76 65 72 73 
       61 76 69 74 
       2C 20 75 74 
       20 75 74 65 
       72 20 75 74 
       72 69 20 61 
       75 78 69 6C 
       69 6F 20    
0414DA 66 75 65 72 0165        db "fuerit nec diiudicari posset, uter virtute anteferendus "
       69 74 20 6E 
       65 63 20 64 
       69 69 75 64 
       69 63 61 72 
       69 20 70 6F 
       73 73 65 74 
       2C 20 75 74 
       65 72 20 76 
       69 72 74 75 
       74 65 20 61 
       6E 74 65 66 
       65 72 65 6E 
       64 75 73 20 
041512 76 69 64 65 0166        db "videretur."
       72 65 74 75 
       72 2E       
04151C 0D 0A 0D 0A 0167        db "\r\n\r\n", 0
       00          
041521             0168    
041521             0169    uxor_balnea:
041521 45 72 61 74 0170        db "Erat mulier, uxor Balnea, quae quinque viros tenuit sub vinculo "
       20 6D 75 6C 
       69 65 72 2C 
       20 75 78 6F 
       72 20 42 61 
       6C 6E 65 61 
       2C 20 71 75 
       61 65 20 71 
       75 69 6E 71 
       75 65 20 76 
       69 72 6F 73 
       20 74 65 6E 
       75 69 74 20 
       73 75 62 20 
       76 69 6E 63 
       75 6C 6F 20 
041561 6D 61 74 72 0171        db "matrimonii, una post alterum, et omnis vitam per amorem egit. "
       69 6D 6F 6E 
       69 69 2C 20 
       75 6E 61 20 
       70 6F 73 74 
       20 61 6C 74 
       65 72 75 6D 
       2C 20 65 74 
       20 6F 6D 6E 
       69 73 20 76 
       69 74 61 6D 
       20 70 65 72 
       20 61 6D 6F 
       72 65 6D 20 
       65 67 69 74 
       2E 20       
04159F 4E 75 6C 6C 0172        db "Nulla mors amoris ipsam superavit. Cui rogatus est, vir novus, "
       61 20 6D 6F 
       72 73 20 61 
       6D 6F 72 69 
       73 20 69 70 
       73 61 6D 20 
       73 75 70 65 
       72 61 76 69 
       74 2E 20 43 
       75 69 20 72 
       6F 67 61 74 
       75 73 20 65 
       73 74 2C 20 
       76 69 72 20 
       6E 6F 76 75 
       73 2C 20    
0415DE 64 65 20 6D 0173        db "de matrimonio. At narravit fabulam miram, magna et risum."
       61 74 72 69 
       6D 6F 6E 69 
       6F 2E 20 41 
       74 20 6E 61 
       72 72 61 76 
       69 74 20 66 
       61 62 75 6C 
       61 6D 20 6D 
       69 72 61 6D 
       2C 20 6D 61 
       67 6E 61 20 
       65 74 20 72 
       69 73 75 6D 
       2E          
041617 0D 0A 0D 0A 0174        db "\r\n\r\n"
04161B 41 64 65 6F 0175        db "Adeo fabula incepit: Vir nobilis, eques, in diebus Arthuri, errans "
       20 66 61 62 
       75 6C 61 20 
       69 6E 63 65 
       70 69 74 3A 
       20 56 69 72 
       20 6E 6F 62 
       69 6C 69 73 
       2C 20 65 71 
       75 65 73 2C 
       20 69 6E 20 
       64 69 65 62 
       75 73 20 41 
       72 74 68 75 
       72 69 2C 20 
       65 72 72 61 
       6E 73 20    
04165E 70 65 72 20 0176        db "per silvas obscuras, invenit puellam pulcherrimam. Sed, ah, homo "
       73 69 6C 76 
       61 73 20 6F 
       62 73 63 75 
       72 61 73 2C 
       20 69 6E 76 
       65 6E 69 74 
       20 70 75 65 
       6C 6C 61 6D 
       20 70 75 6C 
       63 68 65 72 
       72 69 6D 61 
       6D 2E 20 53 
       65 64 2C 20 
       61 68 2C 20 
       68 6F 6D 6F 
       20          
04169F 6C 75 78 75 0177        db "luxuriae succubuit; deliquit eam contra voluntatem. Rex dedit "
       72 69 61 65 
       20 73 75 63 
       63 75 62 75 
       69 74 3B 20 
       64 65 6C 69 
       71 75 69 74 
       20 65 61 6D 
       20 63 6F 6E 
       74 72 61 20 
       76 6F 6C 75 
       6E 74 61 74 
       65 6D 2E 20 
       52 65 78 20 
       64 65 64 69 
       74 20       
0416DD 65 75 6D 20 0178        db "eum damnum multum, et iussit mortem. Regina tamen eius vitam "
       64 61 6D 6E 
       75 6D 20 6D 
       75 6C 74 75 
       6D 2C 20 65 
       74 20 69 75 
       73 73 69 74 
       20 6D 6F 72 
       74 65 6D 2E 
       20 52 65 67 
       69 6E 61 20 
       74 61 6D 65 
       6E 20 65 69 
       75 73 20 76 
       69 74 61 6D 
       20          
04171A 73 65 72 76 0179        db "servavit, sed tantum si responsum verum ad quaestionem sciret: "
       61 76 69 74 
       2C 20 73 65 
       64 20 74 61 
       6E 74 75 6D 
       20 73 69 20 
       72 65 73 70 
       6F 6E 73 75 
       6D 20 76 65 
       72 75 6D 20 
       61 64 20 71 
       75 61 65 73 
       74 69 6F 6E 
       65 6D 20 73 
       63 69 72 65 
       74 3A 20    
041759 27 51 75 69 0180        db "'Quid volunt mulieres vere?'. Ita iter periculosum cepit."
       64 20 76 6F 
       6C 75 6E 74 
       20 6D 75 6C 
       69 65 72 65 
       73 20 76 65 
       72 65 3F 27 
       2E 20 49 74 
       61 20 69 74 
       65 72 20 70 
       65 72 69 63 
       75 6C 6F 73 
       75 6D 20 63 
       65 70 69 74 
       2E          
041792 0D 0A 0D 0A 0181        db "\r\n\r\n"
041796 00          0182        db 0
041797 45 71 75 65 0183        db "Eques per terras erravit, quaerens responsum ab omnibus: damas "
       73 20 70 65 
       72 20 74 65 
       72 72 61 73 
       20 65 72 72 
       61 76 69 74 
       2C 20 71 75 
       61 65 72 65 
       6E 73 20 72 
       65 73 70 6F 
       6E 73 75 6D 
       20 61 62 20 
       6F 6D 6E 69 
       62 75 73 3A 
       20 64 61 6D 
       61 73 20    
0417D6 64 69 76 61 0184        db "divas, ancillas, et vetulas. Quis rogavit, varia respondit; nescivit "
       73 2C 20 61 
       6E 63 69 6C 
       6C 61 73 2C 
       20 65 74 20 
       76 65 74 75 
       6C 61 73 2E 
       20 51 75 69 
       73 20 72 6F 
       67 61 76 69 
       74 2C 20 76 
       61 72 69 61 
       20 72 65 73 
       70 6F 6E 64 
       69 74 3B 20 
       6E 65 73 63 
       69 76 69 74 
       20          
04181B 76 65 72 65 0185        db "vere, quid volunt mulieres, donec foemina vetus decrepita, sed "
       2C 20 71 75 
       69 64 20 76 
       6F 6C 75 6E 
       74 20 6D 75 
       6C 69 65 72 
       65 73 2C 20 
       64 6F 6E 65 
       63 20 66 6F 
       65 6D 69 6E 
       61 20 76 65 
       74 75 73 20 
       64 65 63 72 
       65 70 69 74 
       61 2C 20 73 
       65 64 20    
04185A 73 61 70 69 0186        db "sapientia abundans, obtulit ei responsum rectum. Pretium erat "
       65 6E 74 69 
       61 20 61 62 
       75 6E 64 61 
       6E 73 2C 20 
       6F 62 74 75 
       6C 69 74 20 
       65 69 20 72 
       65 73 70 6F 
       6E 73 75 6D 
       20 72 65 63 
       74 75 6D 2E 
       20 50 72 65 
       74 69 75 6D 
       20 65 72 61 
       74 20       
041898 70 61 72 76 0187        db "parvulum, vel, sic putavit ille. Nam vetula rogavit quod ipse "
       75 6C 75 6D 
       2C 20 76 65 
       6C 2C 20 73 
       69 63 20 70 
       75 74 61 76 
       69 74 20 69 
       6C 6C 65 2E 
       20 4E 61 6D 
       20 76 65 74 
       75 6C 61 20 
       72 6F 67 61 
       76 69 74 20 
       71 75 6F 64 
       20 69 70 73 
       65 20       
0418D6 65 61 6D 20 0188        db "eam uxoraret. Illum hoc taeduit, sed voto facto, promissum tenuit."
       75 78 6F 72 
       61 72 65 74 
       2E 20 49 6C 
       6C 75 6D 20 
       68 6F 63 20 
       74 61 65 64 
       75 69 74 2C 
       20 73 65 64 
       20 76 6F 74 
       6F 20 66 61 
       63 74 6F 2C 
       20 70 72 6F 
       6D 69 73 73 
       75 6D 20 74 
       65 6E 75 69 
       74 2E       
041918 0D 0A 0D 0A 0189        db "\r\n\r\n"
04191C 49 6E 20 6E 0190        db "In nuptiali die, vetula dixit: 'Mulieres volunt dominari in vita; "
       75 70 74 69 
       61 6C 69 20 
       64 69 65 2C 
       20 76 65 74 
       75 6C 61 20 
       64 69 78 69 
       74 3A 20 27 
       4D 75 6C 69 
       65 72 65 73 
       20 76 6F 6C 
       75 6E 74 20 
       64 6F 6D 69 
       6E 61 72 69 
       20 69 6E 20 
       76 69 74 61 
       3B 20       
04195E 76 65 6C 69 0191        db "velint regnum suum tenere, dominam esse in domo et anima "
       6E 74 20 72 
       65 67 6E 75 
       6D 20 73 75 
       75 6D 20 74 
       65 6E 65 72 
       65 2C 20 64 
       6F 6D 69 6E 
       61 6D 20 65 
       73 73 65 20 
       69 6E 20 64 
       6F 6D 6F 20 
       65 74 20 61 
       6E 69 6D 61 
       20          
041997 73 75 61 20 0192        db "sua libere vivere.' Hoc scivit verum esse, et licentiam in vitam "
       6C 69 62 65 
       72 65 20 76 
       69 76 65 72 
       65 2E 27 20 
       48 6F 63 20 
       73 63 69 76 
       69 74 20 76 
       65 72 75 6D 
       20 65 73 73 
       65 2C 20 65 
       74 20 6C 69 
       63 65 6E 74 
       69 61 6D 20 
       69 6E 20 76 
       69 74 61 6D 
       20          
0419D8 69 70 73 61 0193        db "ipsam dedit ut ipsa dominaretur. Tunc mutatio mirabilis facta!"
       6D 20 64 65 
       64 69 74 20 
       75 74 20 69 
       70 73 61 20 
       64 6F 6D 69 
       6E 61 72 65 
       74 75 72 2E 
       20 54 75 6E 
       63 20 6D 75 
       74 61 74 69 
       6F 20 6D 69 
       72 61 62 69 
       6C 69 73 20 
       66 61 63 74 
       61 21       
041A16 0D 0A 0D 0A 0194        db "\r\n\r\n"
041A1A 56 65 74 75 0195        db "Vetula ipsa repente pulcherrima facta est, iuvenis mulier dulcis "
       6C 61 20 69 
       70 73 61 20 
       72 65 70 65 
       6E 74 65 20 
       70 75 6C 63 
       68 65 72 72 
       69 6D 61 20 
       66 61 63 74 
       61 20 65 73 
       74 2C 20 69 
       75 76 65 6E 
       69 73 20 6D 
       75 6C 69 65 
       72 20 64 75 
       6C 63 69 73 
       20          
041A5B 61 74 71 75 0196        db "atque praeclara. Et eques tandem laetus fuit; ex illo die beatus, "
       65 20 70 72 
       61 65 63 6C 
       61 72 61 2E 
       20 45 74 20 
       65 71 75 65 
       73 20 74 61 
       6E 64 65 6D 
       20 6C 61 65 
       74 75 73 20 
       66 75 69 74 
       3B 20 65 78 
       20 69 6C 6C 
       6F 20 64 69 
       65 20 62 65 
       61 74 75 73 
       2C 20       
041A9D 71 75 6F 64 0197        db "quod sibi consortem novam benigneque passus est dominam. "
       20 73 69 62 
       69 20 63 6F 
       6E 73 6F 72 
       74 65 6D 20 
       6E 6F 76 61 
       6D 20 62 65 
       6E 69 67 6E 
       65 71 75 65 
       20 70 61 73 
       73 75 73 20 
       65 73 74 20 
       64 6F 6D 69 
       6E 61 6D 2E 
       20          
041AD6 41 6D 6F 72 0198        db "Amorem suum vera vidit: non tantum pulchritudinem quaesivit "
       65 6D 20 73 
       75 75 6D 20 
       76 65 72 61 
       20 76 69 64 
       69 74 3A 20 
       6E 6F 6E 20 
       74 61 6E 74 
       75 6D 20 70 
       75 6C 63 68 
       72 69 74 75 
       64 69 6E 65 
       6D 20 71 75 
       61 65 73 69 
       76 69 74 20 
041B12 73 65 64 20 0199        db "sed libertatem suam ac respectum quae amica vere debet."
       6C 69 62 65 
       72 74 61 74 
       65 6D 20 73 
       75 61 6D 20 
       61 63 20 72 
       65 73 70 65 
       63 74 75 6D 
       20 71 75 61 
       65 20 61 6D 
       69 63 61 20 
       76 65 72 65 
       20 64 65 62 
       65 74 2E    
041B49 0D 0A 0D 0A 0200        db "\r\n\r\n"
041B4D 53 69 63 20 0201        db "Sic uxor Balnea, fabulam finiens, risit amice, exemplo vitae suae. "
       75 78 6F 72 
       20 42 61 6C 
       6E 65 61 2C 
       20 66 61 62 
       75 6C 61 6D 
       20 66 69 6E 
       69 65 6E 73 
       2C 20 72 69 
       73 69 74 20 
       61 6D 69 63 
       65 2C 20 65 
       78 65 6D 70 
       6C 6F 20 76 
       69 74 61 65 
       20 73 75 61 
       65 2E 20    
041B90 49 70 73 61 0202        db "Ipsa, quinque viris domitam, vel audaciam habuit de vita docere. "
       2C 20 71 75 
       69 6E 71 75 
       65 20 76 69 
       72 69 73 20 
       64 6F 6D 69 
       74 61 6D 2C 
       20 76 65 6C 
       20 61 75 64 
       61 63 69 61 
       6D 20 68 61 
       62 75 69 74 
       20 64 65 20 
       76 69 74 61 
       20 64 6F 63 
       65 72 65 2E 
       20          
041BD1 4C 69 63 65 0203        db "Licet risum multum ferre, fabula ipsa veritatem sapientem tenet: "
       74 20 72 69 
       73 75 6D 20 
       6D 75 6C 74 
       75 6D 20 66 
       65 72 72 65 
       2C 20 66 61 
       62 75 6C 61 
       20 69 70 73 
       61 20 76 65 
       72 69 74 61 
       74 65 6D 20 
       73 61 70 69 
       65 6E 74 65 
       6D 20 74 65 
       6E 65 74 3A 
       20          
041C12 69 70 73 61 0204        db "ipsa vita est dulcis, et in amore pari dominatio verum gaudium."
       20 76 69 74 
       61 20 65 73 
       74 20 64 75 
       6C 63 69 73 
       2C 20 65 74 
       20 69 6E 20 
       61 6D 6F 72 
       65 20 70 61 
       72 69 20 64 
       6F 6D 69 6E 
       61 74 69 6F 
       20 76 65 72 
       75 6D 20 67 
       61 75 64 69 
       75 6D 2E    
041C51 0D 0A 0D 0A 0205        db "\r\n\r\n"
041C55 00          0206        db 0
041C56             0207    
041C56             0208    wife_of_bath:
041C56 53 68 65 20 0209        db "She was a woman, wife of Bath, who held five husbands in her "
       77 61 73 20 
       61 20 77 6F 
       6D 61 6E 2C 
       20 77 69 66 
       65 20 6F 66 
       20 42 61 74 
       68 2C 20 77 
       68 6F 20 68 
       65 6C 64 20 
       66 69 76 65 
       20 68 75 73 
       62 61 6E 64 
       73 20 69 6E 
       20 68 65 72 
       20          
041C93 6D 61 74 72 0210        db "matrimonial chains, one after another, and lived all through love. "
       69 6D 6F 6E 
       69 61 6C 20 
       63 68 61 69 
       6E 73 2C 20 
       6F 6E 65 20 
       61 66 74 65 
       72 20 61 6E 
       6F 74 68 65 
       72 2C 20 61 
       6E 64 20 6C 
       69 76 65 64 
       20 61 6C 6C 
       20 74 68 72 
       6F 75 67 68 
       20 6C 6F 76 
       65 2E 20    
041CD6 4E 6F 20 66 0211        db "No fear of loss could conquer her. When a new man asked her "
       65 61 72 20 
       6F 66 20 6C 
       6F 73 73 20 
       63 6F 75 6C 
       64 20 63 6F 
       6E 71 75 65 
       72 20 68 65 
       72 2E 20 57 
       68 65 6E 20 
       61 20 6E 65 
       77 20 6D 61 
       6E 20 61 73 
       6B 65 64 20 
       68 65 72 20 
041D12 66 6F 72 20 0212        db "for marriage, she told him a marvelous tale, great and merry."
       6D 61 72 72 
       69 61 67 65 
       2C 20 73 68 
       65 20 74 6F 
       6C 64 20 68 
       69 6D 20 61 
       20 6D 61 72 
       76 65 6C 6F 
       75 73 20 74 
       61 6C 65 2C 
       20 67 72 65 
       61 74 20 61 
       6E 64 20 6D 
       65 72 72 79 
       2E          
041D4F 0D 0A 0D 0A 0213        db "\r\n\r\n"
041D53 53 6F 20 74 0214        db "So the tale begins: A noble knight, in Arthur's days, wandered "
       68 65 20 74 
       61 6C 65 20 
       62 65 67 69 
       6E 73 3A 20 
       41 20 6E 6F 
       62 6C 65 20 
       6B 6E 69 67 
       68 74 2C 20 
       69 6E 20 41 
       72 74 68 75 
       72 27 73 20 
       64 61 79 73 
       2C 20 77 61 
       6E 64 65 72 
       65 64 20    
041D92 74 68 72 6F 0215        db "through shadowed woods and found a lovely young maiden. Alas, "
       75 67 68 20 
       73 68 61 64 
       6F 77 65 64 
       20 77 6F 6F 
       64 73 20 61 
       6E 64 20 66 
       6F 75 6E 64 
       20 61 20 6C 
       6F 76 65 6C 
       79 20 79 6F 
       75 6E 67 20 
       6D 61 69 64 
       65 6E 2E 20 
       41 6C 61 73 
       2C 20       
041DD0 74 68 65 20 0216        db "the man fell to his lust and wronged her against her will. The king "
       6D 61 6E 20 
       66 65 6C 6C 
       20 74 6F 20 
       68 69 73 20 
       6C 75 73 74 
       20 61 6E 64 
       20 77 72 6F 
       6E 67 65 64 
       20 68 65 72 
       20 61 67 61 
       69 6E 73 74 
       20 68 65 72 
       20 77 69 6C 
       6C 2E 20 54 
       68 65 20 6B 
       69 6E 67 20 
041E14 73 65 6E 74 0217        db "sentenced him to death, but the queen spared his life, if only he "
       65 6E 63 65 
       64 20 68 69 
       6D 20 74 6F 
       20 64 65 61 
       74 68 2C 20 
       62 75 74 20 
       74 68 65 20 
       71 75 65 65 
       6E 20 73 70 
       61 72 65 64 
       20 68 69 73 
       20 6C 69 66 
       65 2C 20 69 
       66 20 6F 6E 
       6C 79 20 68 
       65 20       
041E56 63 6F 75 6C 0218        db "could answer one true question: 'What do women truly want?' So, "
       64 20 61 6E 
       73 77 65 72 
       20 6F 6E 65 
       20 74 72 75 
       65 20 71 75 
       65 73 74 69 
       6F 6E 3A 20 
       27 57 68 61 
       74 20 64 6F 
       20 77 6F 6D 
       65 6E 20 74 
       72 75 6C 79 
       20 77 61 6E 
       74 3F 27 20 
       53 6F 2C 20 
041E96 68 65 20 62 0219        db "he began a perilous quest."
       65 67 61 6E 
       20 61 20 70 
       65 72 69 6C 
       6F 75 73 20 
       71 75 65 73 
       74 2E       
041EB0 0D 0A 0D 0A 0220        db "\r\n\r\n"
041EB4 54 68 65 20 0221        db "The knight roamed far, seeking answers from all: fine ladies, "
       6B 6E 69 67 
       68 74 20 72 
       6F 61 6D 65 
       64 20 66 61 
       72 2C 20 73 
       65 65 6B 69 
       6E 67 20 61 
       6E 73 77 65 
       72 73 20 66 
       72 6F 6D 20 
       61 6C 6C 3A 
       20 66 69 6E 
       65 20 6C 61 
       64 69 65 73 
       2C 20       
041EF2 6D 61 69 64 0222        db "maids, even old women. Each gave him something different; he "
       73 2C 20 65 
       76 65 6E 20 
       6F 6C 64 20 
       77 6F 6D 65 
       6E 2E 20 45 
       61 63 68 20 
       67 61 76 65 
       20 68 69 6D 
       20 73 6F 6D 
       65 74 68 69 
       6E 67 20 64 
       69 66 66 65 
       72 65 6E 74 
       3B 20 68 65 
       20          
041F2F 68 61 64 20 0223        db "had no true answer, until a shriveled crone, wise in knowledge, "
       6E 6F 20 74 
       72 75 65 20 
       61 6E 73 77 
       65 72 2C 20 
       75 6E 74 69 
       6C 20 61 20 
       73 68 72 69 
       76 65 6C 65 
       64 20 63 72 
       6F 6E 65 2C 
       20 77 69 73 
       65 20 69 6E 
       20 6B 6E 6F 
       77 6C 65 64 
       67 65 2C 20 
041F6F 6F 66 66 65 0224        db "offered him the right response. But her price was small, or so he "
       72 65 64 20 
       68 69 6D 20 
       74 68 65 20 
       72 69 67 68 
       74 20 72 65 
       73 70 6F 6E 
       73 65 2E 20 
       42 75 74 20 
       68 65 72 20 
       70 72 69 63 
       65 20 77 61 
       73 20 73 6D 
       61 6C 6C 2C 
       20 6F 72 20 
       73 6F 20 68 
       65 20       
041FB1 74 68 6F 75 0225        db "thought--for the old woman demanded he wed her. Loath, but "
       67 68 74 2D 
       2D 66 6F 72 
       20 74 68 65 
       20 6F 6C 64 
       20 77 6F 6D 
       61 6E 20 64 
       65 6D 61 6E 
       64 65 64 20 
       68 65 20 77 
       65 64 20 68 
       65 72 2E 20 
       4C 6F 61 74 
       68 2C 20 62 
       75 74 20    
041FEC 62 6F 75 6E 0226        db "bound by his vow, he kept his word."
       64 20 62 79 
       20 68 69 73 
       20 76 6F 77 
       2C 20 68 65 
       20 6B 65 70 
       74 20 68 69 
       73 20 77 6F 
       72 64 2E    
04200F 0D 0A 0D 0A 0227        db "\r\n\r\n"
042013 4F 6E 20 74 0228        db "On their wedding day, the crone said: 'Women wish for mastery, "
       68 65 69 72 
       20 77 65 64 
       64 69 6E 67 
       20 64 61 79 
       2C 20 74 68 
       65 20 63 72 
       6F 6E 65 20 
       73 61 69 64 
       3A 20 27 57 
       6F 6D 65 6E 
       20 77 69 73 
       68 20 66 6F 
       72 20 6D 61 
       73 74 65 72 
       79 2C 20    
042052 74 6F 20 68 0229        db "to hold their realm, to be the lady at home and in heart, and "
       6F 6C 64 20 
       74 68 65 69 
       72 20 72 65 
       61 6C 6D 2C 
       20 74 6F 20 
       62 65 20 74 
       68 65 20 6C 
       61 64 79 20 
       61 74 20 68 
       6F 6D 65 20 
       61 6E 64 20 
       69 6E 20 68 
       65 61 72 74 
       2C 20 61 6E 
       64 20       
042090 74 6F 20 6C 0230        db "to live free in spirit.' He knew this to be true, so he gave her "
       69 76 65 20 
       66 72 65 65 
       20 69 6E 20 
       73 70 69 72 
       69 74 2E 27 
       20 48 65 20 
       6B 6E 65 77 
       20 74 68 69 
       73 20 74 6F 
       20 62 65 20 
       74 72 75 65 
       2C 20 73 6F 
       20 68 65 20 
       67 61 76 65 
       20 68 65 72 
       20          
0420D1 66 72 65 65 0231        db "freedom in their life together. Then, a wondrous change took place!"
       64 6F 6D 20 
       69 6E 20 74 
       68 65 69 72 
       20 6C 69 66 
       65 20 74 6F 
       67 65 74 68 
       65 72 2E 20 
       54 68 65 6E 
       2C 20 61 20 
       77 6F 6E 64 
       72 6F 75 73 
       20 63 68 61 
       6E 67 65 20 
       74 6F 6F 6B 
       20 70 6C 61 
       63 65 21    
042114 0D 0A 0D 0A 0232        db "\r\n\r\n"
042118 54 68 65 20 0233        db "The old crone transformed, becoming young, sweet, and fair. "
       6F 6C 64 20 
       63 72 6F 6E 
       65 20 74 72 
       61 6E 73 66 
       6F 72 6D 65 
       64 2C 20 62 
       65 63 6F 6D 
       69 6E 67 20 
       79 6F 75 6E 
       67 2C 20 73 
       77 65 65 74 
       2C 20 61 6E 
       64 20 66 61 
       69 72 2E 20 
042154 54 68 65 20 0234        db "The knight was overjoyed; from that day forth he was blessed, "
       6B 6E 69 67 
       68 74 20 77 
       61 73 20 6F 
       76 65 72 6A 
       6F 79 65 64 
       3B 20 66 72 
       6F 6D 20 74 
       68 61 74 20 
       64 61 79 20 
       66 6F 72 74 
       68 20 68 65 
       20 77 61 73 
       20 62 6C 65 
       73 73 65 64 
       2C 20       
042192 66 6F 72 20 0235        db "for his new bride was both noble and gentle. In her, he saw real "
       68 69 73 20 
       6E 65 77 20 
       62 72 69 64 
       65 20 77 61 
       73 20 62 6F 
       74 68 20 6E 
       6F 62 6C 65 
       20 61 6E 64 
       20 67 65 6E 
       74 6C 65 2E 
       20 49 6E 20 
       68 65 72 2C 
       20 68 65 20 
       73 61 77 20 
       72 65 61 6C 
       20          
0421D3 6C 6F 76 65 0236        db "love: not just beauty, but the freedom and respect a true partner "
       3A 20 6E 6F 
       74 20 6A 75 
       73 74 20 62 
       65 61 75 74 
       79 2C 20 62 
       75 74 20 74 
       68 65 20 66 
       72 65 65 64 
       6F 6D 20 61 
       6E 64 20 72 
       65 73 70 65 
       63 74 20 61 
       20 74 72 75 
       65 20 70 61 
       72 74 6E 65 
       72 20       
042215 64 65 73 65 0237        db "deserves."
       72 76 65 73 
       2E          
04221E 0D 0A 0D 0A 0238        db "\r\n\r\n"
042222 54 68 75 73 0239        db "Thus, the wife of Bath, ending her tale, laughed fondly, with "
       2C 20 74 68 
       65 20 77 69 
       66 65 20 6F 
       66 20 42 61 
       74 68 2C 20 
       65 6E 64 69 
       6E 67 20 68 
       65 72 20 74 
       61 6C 65 2C 
       20 6C 61 75 
       67 68 65 64 
       20 66 6F 6E 
       64 6C 79 2C 
       20 77 69 74 
       68 20       
042260 61 20 6C 65 0240        db "a lesson from her own life. With five husbands tamed, she had "
       73 73 6F 6E 
       20 66 72 6F 
       6D 20 68 65 
       72 20 6F 77 
       6E 20 6C 69 
       66 65 2E 20 
       57 69 74 68 
       20 66 69 76 
       65 20 68 75 
       73 62 61 6E 
       64 73 20 74 
       61 6D 65 64 
       2C 20 73 68 
       65 20 68 61 
       64 20       
04229E 64 61 72 65 0241        db "dared to teach on life and love. Though jesting, her tale held "
       64 20 74 6F 
       20 74 65 61 
       63 68 20 6F 
       6E 20 6C 69 
       66 65 20 61 
       6E 64 20 6C 
       6F 76 65 2E 
       20 54 68 6F 
       75 67 68 20 
       6A 65 73 74 
       69 6E 67 2C 
       20 68 65 72 
       20 74 61 6C 
       65 20 68 65 
       6C 64 20    
0422DD 77 69 73 64 0242        db "wisdom: life is sweet, and in equal love, true joy is shared."
       6F 6D 3A 20 
       6C 69 66 65 
       20 69 73 20 
       73 77 65 65 
       74 2C 20 61 
       6E 64 20 69 
       6E 20 65 71 
       75 61 6C 20 
       6C 6F 76 65 
       2C 20 74 72 
       75 65 20 6A 
       6F 79 20 69 
       73 20 73 68 
       61 72 65 64 
       2E          
04231A 0D 0A 0D 0A 0243        db "\r\n\r\n"
04231E 00          0244        db 0
