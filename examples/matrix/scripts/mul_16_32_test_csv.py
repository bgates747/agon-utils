#!/usr/bin/env python3
"""
Convert binary test results from EZ80 multiplication test to CSV format.

This script reads the binary output file generated by the EZ80 assembly test,
which contains 12-byte records (2 bytes op1, 2 bytes op2, 4 bytes Python result,
4 bytes assembly result) and converts it to a CSV file with columns:
op1, op2, python, asm - all formatted as hexadecimal with 0x prefix.
"""

import struct
import csv

def bin_to_csv(infile, outfile):
    """Convert binary test results to CSV format with hex representation."""
    records = []
    
    # Read binary data
    with open(infile, 'rb') as f:
        while True:
            # Read a 12-byte record
            record_data = f.read(12)
            if not record_data or len(record_data) < 12:
                break
                
            # Unpack the record: op1(2), op2(2), python(4), asm(4)
            op1, op2, python_result, asm_result = struct.unpack('<HHII', record_data)
            
            # Add to records list with hex formatting (0x prefix)
            records.append({
                'op1': f'0x{op1:04x}',
                'op2': f'0x{op2:04x}',
                'python': f'0x{python_result:08x}',
                'asm': f'0x{asm_result:08x}'
            })
    
    # Write CSV
    with open(outfile, 'w', newline='') as f:
        writer = csv.DictWriter(f, fieldnames=['op1', 'op2', 'python', 'asm'])
        writer.writeheader()
        writer.writerows(records)
    
    print(f"Converted {len(records)} records from {infile} to {outfile}")
    print(f"All values formatted in hexadecimal with 0x prefix")

if __name__ == "__main__":
    CONVERT_INFILE = '/home/smith/Agon/mystuff/agon-utils/examples/matrix/tgt/mul_16_32_test_out.bin'
    CONVERT_OUTFILE = '/home/smith/Agon/mystuff/agon-utils/examples/matrix/tgt/mul_16_32_test_out.csv'
    
    bin_to_csv(CONVERT_INFILE, CONVERT_OUTFILE)