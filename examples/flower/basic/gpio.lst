PC     Output      Line
040000             0001   ;
040000             0002   ; Title:	BBC Basic for AGON - GPIO functions
040000             0003   ; Author:	Dean Belfield
040000             0004   ; Created:	12/05/2023
040000             0005   ; Last Updated:	12/05/2023
040000             0006   ;
040000             0007   ; Modinfo:
040000             0008   
040000             0009   			INCLUDE "mos_api.inc"
040000             0001*  ;
040000             0002*  ; Title:	AGON MOS - API for user projects
040000             0003*  ; Author:	Dean Belfield
040000             0004*  ; Created:	03/08/2022
040000             0005*  ; Last Updated:	11/11/2023
040000             0006*  ;
040000             0007*  ; Modinfo:
040000             0008*  ; 05/08/2022:	Added mos_feof
040000             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040000             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040000             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040000             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040000             0013*  ; 13/10/2022:	Added mos_oscli
040000             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040000             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040000             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040000             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040000             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040000             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040000             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040000             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040000             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040000             0023*  ; 19/05/2023:	Added sysvar_scrMode
040000             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040000             0025*  ; 03/08/2023:	Added mos_setkbvector
040000             0026*  ; 10/08/2023:	Added mos_getkbmap
040000             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040000             0028*  
040000             0029*  ; VDP control (VDU 23, 0, n)
040000             0030*  ;
040000             0031*  vdp_gp:			EQU 	80h
040000             0032*  vdp_keycode:		EQU 	81h
040000             0033*  vdp_cursor:		EQU	82h
040000             0034*  vdp_scrchar:		EQU	83h
040000             0035*  vdp_scrpixel:		EQU	84h
040000             0036*  vdp_audio:		EQU	85h
040000             0037*  vdp_mode:		EQU	86h
040000             0038*  vdp_rtc:		EQU	87h
040000             0039*  vdp_keystate:		EQU	88h
040000             0040*  vdp_logicalcoords:	EQU	C0h
040000             0041*  vdp_terminalmode:	EQU	FFh
040000             0042*  
040000             0043*  ; MOS high level functions
040000             0044*  ;
040000             0045*  mos_getkey:		EQU	00h
040000             0046*  mos_load:		EQU	01h
040000             0047*  mos_save:		EQU	02h
040000             0048*  mos_cd:			EQU	03h
040000             0049*  mos_dir:		EQU	04h
040000             0050*  mos_del:		EQU	05h
040000             0051*  mos_ren:		EQU	06h
040000             0052*  mos_mkdir:		EQU	07h
040000             0053*  mos_sysvars:		EQU	08h
040000             0054*  mos_editline:		EQU	09h
040000             0055*  mos_fopen:		EQU	0Ah
040000             0056*  mos_fclose:		EQU	0Bh
040000             0057*  mos_fgetc:		EQU	0Ch
040000             0058*  mos_fputc:		EQU	0Dh
040000             0059*  mos_feof:		EQU	0Eh
040000             0060*  mos_getError:		EQU	0Fh
040000             0061*  mos_oscli:		EQU	10h
040000             0062*  mos_copy:		EQU	11h
040000             0063*  mos_getrtc:		EQU	12h
040000             0064*  mos_setrtc:		EQU	13h
040000             0065*  mos_setintvector:	EQU	14h
040000             0066*  mos_uopen:		EQU	15h
040000             0067*  mos_uclose:		EQU	16h
040000             0068*  mos_ugetc:		EQU	17h
040000             0069*  mos_uputc:		EQU 	18h
040000             0070*  mos_getfil:		EQU	19h
040000             0071*  mos_fread:		EQU	1Ah
040000             0072*  mos_fwrite:		EQU	1Bh
040000             0073*  mos_flseek:		EQU	1Ch
040000             0074*  mos_setkbvector:	EQU	1Dh
040000             0075*  mos_getkbmap:		EQU	1Eh
040000             0076*  mos_i2c_open:		EQU	1Fh
040000             0077*  mos_i2c_close:		EQU	20h
040000             0078*  mos_i2c_write:		EQU	21h
040000             0079*  mos_i2c_read:		EQU	22h
040000             0080*  
040000             0081*  
040000             0082*  ; FatFS file access functions
040000             0083*  ;
040000             0084*  ffs_fopen:		EQU	80h
040000             0085*  ffs_fclose:		EQU	81h
040000             0086*  ffs_fread:		EQU	82h
040000             0087*  ffs_fwrite:		EQU	83h
040000             0088*  ffs_flseek:		EQU	84h
040000             0089*  ffs_ftruncate:		EQU	85h
040000             0090*  ffs_fsync:		EQU	86h
040000             0091*  ffs_fforward:		EQU	87h
040000             0092*  ffs_fexpand:		EQU	88h
040000             0093*  ffs_fgets:		EQU	89h
040000             0094*  ffs_fputc:		EQU	8Ah
040000             0095*  ffs_fputs:		EQU	8Bh
040000             0096*  ffs_fprintf:		EQU	8Ch
040000             0097*  ffs_ftell:		EQU	8Dh
040000             0098*  ffs_feof:		EQU	8Eh
040000             0099*  ffs_fsize:		EQU	8Fh
040000             0100*  ffs_ferror:		EQU	90h
040000             0101*  
040000             0102*  ; FatFS directory access functions
040000             0103*  ;
040000             0104*  ffs_dopen:		EQU	91h
040000             0105*  ffs_dclose:		EQU	92h
040000             0106*  ffs_dread:		EQU	93h
040000             0107*  ffs_dfindfirst:		EQU	94h
040000             0108*  ffs_dfindnext:		EQU	95h
040000             0109*  
040000             0110*  ; FatFS file and directory management functions
040000             0111*  ;
040000             0112*  ffs_stat:		EQU	96h
040000             0113*  ffs_unlink:		EQU	97h
040000             0114*  ffs_rename:		EQU	98h
040000             0115*  ffs_chmod:		EQU	99h
040000             0116*  ffs_utime:		EQU	9Ah
040000             0117*  ffs_mkdir:		EQU	9Bh
040000             0118*  ffs_chdir:		EQU	9Ch
040000             0119*  ffs_chdrive:		EQU	9Dh
040000             0120*  ffs_getcwd:		EQU	9Eh
040000             0121*  
040000             0122*  ; FatFS volume management and system configuration functions
040000             0123*  ;
040000             0124*  ffs_mount:		EQU	9Fh
040000             0125*  ffs_mkfs:		EQU	A0h
040000             0126*  ffs_fdisk:		EQU	A1h
040000             0127*  ffs_getfree:		EQU	A2h
040000             0128*  ffs_getlabel:		EQU	A3h
040000             0129*  ffs_setlabel:		EQU	A4h
040000             0130*  ffs_setcp:		EQU	A5h
040000             0131*  
040000             0132*  ; File access modes
040000             0133*  ;
040000             0134*  fa_read:		EQU	01h
040000             0135*  fa_write:		EQU	02h
040000             0136*  fa_open_existing:	EQU	00h
040000             0137*  fa_create_new:		EQU	04h
040000             0138*  fa_create_always:	EQU	08h
040000             0139*  fa_open_always:		EQU	10h
040000             0140*  fa_open_append:		EQU	30h
040000             0141*  
040000             0142*  ; System variable indexes for api_sysvars
040000             0143*  ; Index into _sysvars in globals.asm
040000             0144*  ;
040000             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040000             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040000             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040000             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040000             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040000             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040000             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040000             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040000             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040000             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040000             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040000             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040000             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040000             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040000             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040000             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040000             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040000             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040000             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040000             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040000             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040000             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040000             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040000             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040000             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040000             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040000             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040000             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040000             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040000             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040000             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040000             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040000             0177*  
040000             0178*  ; Flags for the VPD protocol
040000             0179*  ;
040000             0180*  vdp_pflag_cursor:	EQU	00000001b
040000             0181*  vdp_pflag_scrchar:	EQU	00000010b
040000             0182*  vdp_pflag_point:	EQU	00000100b
040000             0183*  vdp_pflag_audio:	EQU	00001000b
040000             0184*  vdp_pflag_mode:		EQU	00010000b
040000             0185*  vdp_pflag_rtc:		EQU	00100000b
040000             0186*  vdp_pflag_mouse:	EQU	01000000b
040000             0187*  ; vdp_pflag_buffered:	EQU	10000000b
040000             0188*  
040000             0189*  ;
040000             0190*  ; FatFS structures
040000             0191*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040000             0192*  ;
040000             0193*  ; Object ID and allocation information (FFOBJID)
040000             0194*  ;
040000             0195*  ; FFOBJID	.STRUCT
040000             0196*  ; 	fs:		DS	3	; Pointer to the hosting volume of this object
040000             0197*  ; 	id:		DS	2	; Hosting volume mount ID
040000             0198*  ; 	attr:		DS	1	; Object attribute
040000             0199*  ; 	stat:		DS	1	; Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040000             0200*  ; 	sclust:		DS	4	; Object data start cluster (0:no cluster or root directory)
040000             0201*  ; 	objsize:	DS	4	; Object size (valid when sclust != 0)
040000             0202*  ; FFOBJID_SIZE .ENDSTRUCT FFOBJID
040000             0203*  ; ;
040000             0204*  ; ; File object structure (FIL)
040000             0205*  ; ;
040000             0206*  ; FIL .STRUCT
040000             0207*  ; 	obj:		.TAG	FFOBJID	; Object identifier
040000             0208*  ; 	flag:		DS	1	; File status flags
040000             0209*  ; 	err:		DS	1	; Abort flag (error code)
040000             0210*  ; 	fptr:		DS	4	; File read/write pointer (Zeroed on file open)
040000             0211*  ; 	clust:		DS	4	; Current cluster of fpter (invalid when fptr is 0)
040000             0212*  ; 	sect:		DS	4	; Sector number appearing in buf[] (0:invalid)
040000             0213*  ; 	dir_sect:	DS	4	; Sector number containing the directory entry
040000             0214*  ; 	dir_ptr:	DS	3	; Pointer to the directory entry in the win[]
040000             0215*  ; FIL_SIZE .ENDSTRUCT FIL
040000             0216*  ; ;
040000             0217*  ; ; Directory object structure (DIR)
040000             0218*  ; ;
040000             0219*  ; DIR .STRUCT
040000             0220*  ; 	obj:		.TAG	FFOBJID	; Object identifier
040000             0221*  ; 	dptr:		DS	4	; Current read/write offset
040000             0222*  ; 	clust:		DS	4	; Current cluster
040000             0223*  ; 	sect:		DS	4	; Current sector (0:Read operation has terminated)
040000             0224*  ; 	dir:		DS	3	; Pointer to the directory item in the win[]
040000             0225*  ; 	fn:		DS	12	; SFN (in/out) {body[8],ext[3],status[1]}
040000             0226*  ; 	blk_ofs:	DS	4	; Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040000             0227*  ; DIR_SIZE .ENDSTRUCT DIR
040000             0228*  ; ;
040000             0229*  ; ; File information structure (FILINFO)
040000             0230*  ; ;
040000             0231*  ; FILINFO .STRUCT
040000             0232*  ; 	fsize:		DS 	4	; File size
040000             0233*  ; 	fdate:		DS	2	; Modified date
040000             0234*  ; 	ftime:		DS	2	; Modified time
040000             0235*  ; 	fattrib:	DS	1	; File attribute
040000             0236*  ; 	altname:	DS	13	; Alternative file name
040000             0237*  ; 	fname:		DS	256	; Primary file name
040000             0238*  ; FILINFO_SIZE .ENDSTRUCT FILINFO
040000             0239*  
040000             0240*  ; FFOBJID offsets
040000             0241*  FFOBJID.fs:       EQU 0    ; Pointer to the hosting volume of this object
040000             0242*  FFOBJID.id:       EQU 3    ; Hosting volume mount ID
040000             0243*  FFOBJID.attr:     EQU 5    ; Object attribute
040000             0244*  FFOBJID.stat:     EQU 6    ; Object chain status
040000             0245*  FFOBJID.sclust:   EQU 7    ; Object data start cluster
040000             0246*  FFOBJID.objsize:  EQU 11   ; Object size
040000             0247*  FFOBJID_SIZE:     EQU 15   ; Total size of FFOBJID structure
040000             0248*  
040000             0249*  ; FIL offsets (including FFOBJID fields)
040000             0250*  FIL.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040000             0251*  FIL.flag:         EQU FFOBJID_SIZE       ; File status flags
040000             0252*  FIL.err:          EQU FFOBJID_SIZE + 1   ; Abort flag (error code)
040000             0253*  FIL.fptr:         EQU FFOBJID_SIZE + 2   ; File read/write pointer
040000             0254*  FIL.clust:        EQU FFOBJID_SIZE + 6   ; Current cluster of fptr
040000             0255*  FIL.sect:         EQU FFOBJID_SIZE + 10  ; Sector number appearing in buf[]
040000             0256*  FIL.dir_sect:     EQU FFOBJID_SIZE + 14  ; Sector number containing the directory entry
040000             0257*  FIL.dir_ptr:      EQU FFOBJID_SIZE + 18  ; Pointer to the directory entry in the win[]
040000             0258*  FIL_SIZE:         EQU FFOBJID_SIZE + 21  ; Total size of FIL structure
040000             0259*  
040000             0260*  ; DIR offsets (including FFOBJID fields)
040000             0261*  DIR.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040000             0262*  DIR.dptr:         EQU FFOBJID_SIZE       ; Current read/write offset
040000             0263*  DIR.clust:        EQU FFOBJID_SIZE + 4   ; Current cluster
040000             0264*  DIR.sect:         EQU FFOBJID_SIZE + 8   ; Current sector
040000             0265*  DIR.dir:          EQU FFOBJID_SIZE + 12  ; Pointer to the directory item in the win[]
040000             0266*  DIR.fn:           EQU FFOBJID_SIZE + 15  ; SFN (in/out) {body[8],ext[3],status[1]}
040000             0267*  DIR.blk_ofs:      EQU FFOBJID_SIZE + 27  ; Offset of current entry block being processed
040000             0268*  DIR_SIZE:         EQU FFOBJID_SIZE + 31  ; Total size of DIR structure
040000             0269*  
040000             0270*  ; FILINFO offsets
040000             0271*  FILINFO.fsize:    EQU 0    ; File size
040000             0272*  FILINFO.fdate:    EQU 4    ; Modified date
040000             0273*  FILINFO.ftime:    EQU 6    ; Modified time
040000             0274*  FILINFO.fattrib:  EQU 8    ; File attribute
040000             0275*  FILINFO.altname:  EQU 9    ; Alternative file name
040000             0276*  FILINFO.fname:    EQU 22   ; Primary file name
040000             0277*  FILINFO_SIZE:     EQU 278  ; Total size of FILINFO structure
040000             0278*  
040000             0279*  ;
040000             0280*  ; Macro for calling the API
040000             0281*  ; Parameters:
040000             0282*  ; - function: One of the function numbers listed above
040000             0283*  ;
040000             0284*  			MACRO MOSCALL	function
040000             0285*  			LD	A, function
040000             0286*  			RST.LIS	08h
040000             0287*  			ENDMACRO
040000             0010   			INCLUDE "macros.inc"
040000             0001*  	; Title:	BBC Basic Interpreter - Z80 version
040000             0002*  	;		Useful macros
040000             0003*  	; Author:	Dean Belfield
040000             0004*  	; Created:	12/05/2023
040000             0005*  	; Last Updated:	11/06/2023
040000             0006*  	;
040000             0007*  	; Modinfo:
040000             0008*  	; 11/06/2023:	Modified to run in ADL mode
040000             0009*  	; 11/06/2024:   Make compatible with ez80asm by Brandon R. Gates
040000             0010*  
040000             0011*  	MACRO EXREG	rp1, rp2
040000             0012*  		PUSH	rp1
040000             0013*  		POP	rp2
040000             0014*  	ENDMACRO
040000             0015*  
040000             0016*  	; MACRO ADD8U_DE	reg
040000             0017*  		MACRO ADD8U_DE
040000             0018*  		ADD	A, E
040000             0019*  		LD	E, A
040000             0020*  		ADC	A, D
040000             0021*  		SUB	E
040000             0022*  		LD	D, A
040000             0023*  	ENDMACRO
040000             0024*  
040000             0025*  	; MACRO ADD8U_HL	reg
040000             0026*  	MACRO ADD8U_HL
040000             0027*  		ADD	A, L
040000             0028*  		LD	L, A
040000             0029*  		ADC	A, H
040000             0030*  		SUB	L
040000             0031*  		LD	H, A
040000             0032*  	ENDMACRO
040000             0033*  
040000             0034*  	MACRO VDU	val
040000             0035*  		LD	A, val
040000             0036*  		CALL	OSWRCH
040000             0037*  	ENDMACRO
040000             0038*  
040000             0039*  	MACRO SET_GPIO	reg, val
040000             0040*  		IN0	A, (reg)
040000             0041*  		OR	val
040000             0042*  		OUT0	(reg), A
040000             0043*  	ENDMACRO
040000             0044*  
040000             0045*  	MACRO RES_GPIO	reg, val
040000             0046*  		PUSH	BC
040000             0047*  		LD	A, val
040000             0048*  		CPL
040000             0049*  		LD	C, A
040000             0050*  		IN0	A, (reg)
040000             0051*  		AND	C
040000             0052*  		OUT0	(reg), A
040000             0053*  		POP	BC
040000             0054*  	ENDMACRO
040000             0011   			INCLUDE "ram.asm"
040000             0001*  ;
040000             0002*  ; Title:	BBC Basic Interpreter - Z80 version
040000             0003*  ;		RAM Module for BBC Basic Interpreter
040000             0004*  ;		For use with Version 2.0 of BBC BASIC
040000             0005*  ;		Standard CP/M Distribution Version
040000             0006*  ; Author:	(C) Copyright  R.T.Russell 31-12-1983
040000             0007*  ; Modified By:	Dean Belfield
040000             0008*  ; Created:	12/05/2023
040000             0009*  ; Last Updated:	26/06/2023
040000             0010*  ;
040000             0011*  ; Modinfo:
040000             0012*  ; 06/06/2023:	Modified to run in ADL mode
040000             0013*  ; 26/06/2023:	Added temporary stores R0 and R1
040000             0014*  
040000             0015*  			.ASSUME	ADL = 1
040000             0016*  
040000             0017*  			; DEFINE	LORAM, SPACE = ROM
040000             0018*  			; SEGMENT LORAM
040000             0019*  
040000             0020*  			; XDEF	ACCS
040000             0021*  			; XDEF	BUFFER
040000             0022*  			; XDEF	STAVAR
040000             0023*  			; XDEF	DYNVAR
040000             0024*  			; XDEF	FNPTR
040000             0025*  			; XDEF	PROPTR
040000             0026*  			; XDEF	PAGE_
040000             0027*  			; XDEF	TOP
040000             0028*  			; XDEF	LOMEM
040000             0029*  			; XDEF 	FREE
040000             0030*  			; XDEF	HIMEM
040000             0031*  			; XDEF	LINENO
040000             0032*  			; XDEF	TRACEN
040000             0033*  			; XDEF	AUTONO
040000             0034*  			; XDEF	ERRTRP
040000             0035*  			; XDEF	ERRTXT
040000             0036*  			; XDEF	DATPTR
040000             0037*  			; XDEF	ERL
040000             0038*  			; XDEF	ERRLIN
040000             0039*  			; XDEF	RANDOM
040000             0040*  			; XDEF	COUNT
040000             0041*  			; XDEF	WIDTH
040000             0042*  			; XDEF	ERR
040000             0043*  			; XDEF	LISTON
040000             0044*  			; XDEF	INCREM
040000             0045*  
040000             0046*  			; XDEF	FLAGS
040000             0047*  			; XDEF	OSWRCHPT
040000             0048*  			; XDEF	OSWRCHCH
040000             0049*  			; XDEF	OSWRCHFH
040000             0050*  			; XDEF	KEYDOWN
040000             0051*  			; XDEF	KEYASCII
040000             0052*  			; XDEF	KEYCOUNT
040000             0053*  
040000             0054*  			; XDEF	R0
040000             0055*  			; XDEF	R1
040000             0056*  
040000             0057*  			; XDEF	RAM_START
040000             0058*  			; XDEF	RAM_END
040000             0059*  			; XDEF	USER
040000             0060*  
040000             0061*  			ALIGN 		256		; ACCS, BUFFER & STAVAR must be on page boundaries
040000             0062*  RAM_START:
040000             0063*  ;
040000             0064*  ACCS:			DS		256             ; String Accumulator
040100             0065*  BUFFER:			DS		256             ; String Input Buffer
040200             0066*  STAVAR:			DS	 	27*4            ; Static Variables
04026C             0067*  DYNVAR: 		DS 		54*3            ; Dynamic Variable Pointers
04030E             0068*  FNPTR:  		DS    		3               ; Dynamic Function Pointers
040311             0069*  PROPTR: 		DS		3               ; Dynamic Procedure Pointers
040314             0070*  ;
040314             0071*  PAGE_:   		DS		3               ; Start of User Program
040317             0072*  TOP:    		DS		3               ; First Location after User Program
04031A             0073*  LOMEM:  		DS		3               ; Start of Dynamic Storage
04031D             0074*  FREE:   		DS		3               ; First Free Space Byte
040320             0075*  HIMEM:  		DS		3               ; First Protected Byte
040323             0076*  ;
040323             0077*  LINENO: 		DS		3               ; Line Number
040326             0078*  TRACEN:			DS		3               ; Trace Flag
040329             0079*  AUTONO:			DS		3               ; Auto Flag
04032C             0080*  ERRTRP:			DS		3               ; Error Trap
04032F             0081*  ERRTXT:			DS		2               ; Error Message Pointer
040331             0082*  DATPTR:			DS		2               ; Data Pointer
040333             0083*  ERL:			DS		2               ; Error Line
040335             0084*  ERRLIN:			DS		3               ; The "ON ERROR" Line
040338             0085*  RANDOM:			DS		5               ; Random Number
04033D             0086*  COUNT:			DS		1               ; Print Position
04033E             0087*  WIDTH:			DS		1               ; Print Width
04033F             0088*  ERR:			DS		1               ; Error Number
040340             0089*  LISTON:			DS		1               ; LISTO (bottom nibble)
040341             0090*  							; - BIT 0: If set, output a space after the line number
040341             0091*  							; - BIT 1: If set, then indent FOR/NEXT loops
040341             0092*  							; - BIT 2: If set, then indent REPEAT/UNTIL loops
040341             0093*  							; - BIT 3: If set, then output to buffer for *EDIT
040341             0094*  							; OPT FLAG (top nibble)
040341             0095*  							; - BIT 4: If set, then list whilst assembling
040341             0096*  							; - BIT 5: If set, then assembler errors are reported
040341             0097*  							; - BIT 6: If set, then place the code starting at address pointed to by O%
040341             0098*  							; - BIT 7: If set, then assemble in ADL mode, otherwise assemble in Z80 mode
040341             0099*  INCREM:			DS		1               ; Auto-Increment Value
040342             0100*  ;
040342             0101*  ; Extra Agon-implementation specific system variables
040342             0102*  ;
040342             0103*  FLAGS:			DS		1		; Miscellaneous flags
040343             0104*  							; - BIT 7: Set if ESC pressed
040343             0105*  							; - BIT 6: Set to disable ESC
040343             0106*  OSWRCHPT:		DS		2		; Pointer for *EDIT
040345             0107*  OSWRCHCH:		DS		1		; Channel of OSWRCH
040346             0108*  							; - 0: Console
040346             0109*  							; - 1: File
040346             0110*  OSWRCHFH:		DS		1		; File handle for OSWRCHCHN
040347             0111*  KEYDOWN:		DS		1		; Keydown flag
040348             0112*  KEYASCII:		DS		1		; ASCII code of pressed key
040349             0113*  KEYCOUNT:		DS		1		; Counts every time a key is pressed
04034A             0114*  R0:			DS		3		; General purpose storage for 8/16 to 24 bit operations
04034D             0115*  R1:			DS		3		;
040350             0116*  ;
040350             0117*  ; This must be at the end
040350             0118*  ;
040350             0119*  RAM_END:
040350 FF FF FF FF 0120*  			ALIGN	256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040400             0121*  USER:							; Must be aligned on a page boundary
040400             0122*  
040400             0012   			INCLUDE	"equs.inc"
040400             0001*  ;
040400             0002*  ; Title:	BBC Basic for AGON - Equs
040400             0003*  ; Author:	Dean Belfield
040400             0004*  ; Created:	12/05/2023
040400             0005*  ; Last Updated:	08/06/2023
040400             0006*  ;
040400             0007*  ; Modinfo:
040400             0008*  ; 08/06/2023:	Added SIZEW
040400             0009*  
040400             0010*  			; XREF		STAVAR
040400             0011*  			; XREF		ACCS
040400             0012*  
040400             0013*  RAM_Top:		EQU		0B0000h	; Initial value of HIMEM
040400             0014*  ;Stack_Top:		EQU		0000h	; Stack at top
040400             0015*  SIZEW:			EQU		3	; Size of a word (3 for ADL mode)
040400             0016*  
040400             0017*  ; For GPIO
040400             0018*  ; PA not available on eZ80L92
040400             0019*  ;
040400             0020*  PA_DR:			EQU		96h
040400             0021*  PA_DDR:			EQU		97h
040400             0022*  PA_ALT1:		EQU		98h
040400             0023*  PA_ALT2:		EQU		99h
040400             0024*  PB_DR:          	EQU		9Ah
040400             0025*  PB_DDR:        	 	EQU		9Bh
040400             0026*  PB_ALT1:        	EQU		9Ch
040400             0027*  PB_ALT2:        	EQU		9Dh
040400             0028*  PC_DR:          	EQU		9Eh
040400             0029*  PC_DDR:         	EQU		9Fh
040400             0030*  PC_ALT1:        	EQU		A0h
040400             0031*  PC_ALT2:        	EQU		A1h
040400             0032*  PD_DR:          	EQU		A2h
040400             0033*  PD_DDR:			EQU		A3h
040400             0034*  PD_ALT1:		EQU		A4h
040400             0035*  PD_ALT2:		EQU		A5h
040400             0036*  
040400             0037*  GPIOMODE_OUT:		EQU		0	; Output
040400             0038*  GPIOMODE_IN:		EQU		1	; Input
040400             0039*  GPIOMODE_DIO:		EQU		2	; Open Drain IO
040400             0040*  GPIOMODE_SIO:		EQU		3	; Open Source IO
040400             0041*  GPIOMODE_INTD:		EQU		4	; Interrupt, Dual Edge
040400             0042*  GPIOMODE_ALTF:		EQU		5;	; Alt Function
040400             0043*  GPIOMODE_INTAL:		EQU		6	; Interrupt, Active Low
040400             0044*  GPIOMODE_INTAH:		EQU		7	; Interrupt, Active High
040400             0045*  GPIOMODE_INTFE:		EQU		8	; Interrupt, Falling Edge
040400             0046*  GPIOMODE_INTRE:		EQU		9	; Interrupt, Rising Edge
040400             0047*  
040400             0048*  ; Originally in ram.asm
040400             0049*  ;
040400             0050*  OC:			EQU     STAVAR+15*4     ; CODE ORIGIN (O%)
040400             0051*  PC:			EQU     STAVAR+16*4     ; PROGRAM COUNTER (P%)
040400             0052*  VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands
040400             0053*  
040400             0054*  ; Originally in main.asm
040400             0055*  ;
040400             0056*  CR:			EQU     0DH
040400             0057*  LF:			EQU     0AH
040400             0058*  ESC:			EQU     1BH
040400             0013   
040400             0014   			.ASSUME	ADL = 1
040400             0015   
040400             0016   			; SEGMENT CODE
040400             0017   
040400             0018   			; XDEF	GPIOB_SETMODE
040400             0019   
040400             0020   			; XREF	SWITCH_A
040400             0021   
040400             0022   ;  A: Mode
040400             0023   ;  B: Pins
040400             0024   ;
040400 CD 68 05 04 0025   GPIOB_SETMODE:		CALL	SWITCH_A
040404 18 04       0026   			DW	GPIOB_M0	; Output
040406 3D 04       0027   			DW	GPIOB_M1	; Input
040408 5D 04       0028   			DW	GPIOB_M2	; Open Drain IO
04040A 7D 04       0029   			DW	GPIOB_M3	; Open Source IO
04040C 98 04       0030   			DW	GPIOB_M4	; Interrupt, Dual Edge
04040E C4 04       0031   			DW	GPIOB_M5	; Alt Function
040410 DF 04       0032   			DW	GPIOB_M6	; Interrupt, Active Low
040412 06 05       0033   			DW	GPIOB_M7	; Interrupt, Active High
040414 28 05       0034   			DW	GPIOB_M8	; Interrupt, Falling Edge
040416 4A 05       0035   			DW	GPIOB_M9	; Interrupt, Rising Edge
040418             0036   
040418             0037   ; Output
040418             0038   ;
040418             0039   GPIOB_M0:		RES_GPIO PB_DDR,  B
040418 C5          0001M  		PUSH	BC
040419 78          0002M  		LD	A, val
04041A 2F          0003M  		CPL
04041B 4F          0004M  		LD	C, A
04041C ED 38 9B    0005M  		IN0	A, (reg)
04041F A1          0006M  		AND	C
040420 ED 39 9B    0007M  		OUT0	(reg), A
040423 C1          0008M  		POP	BC
040424             0040   			RES_GPIO PB_ALT1, B
040424 C5          0001M  		PUSH	BC
040425 78          0002M  		LD	A, val
040426 2F          0003M  		CPL
040427 4F          0004M  		LD	C, A
040428 ED 38 9C    0005M  		IN0	A, (reg)
04042B A1          0006M  		AND	C
04042C ED 39 9C    0007M  		OUT0	(reg), A
04042F C1          0008M  		POP	BC
040430             0041   			RES_GPIO PB_ALT2, B
040430 C5          0001M  		PUSH	BC
040431 78          0002M  		LD	A, val
040432 2F          0003M  		CPL
040433 4F          0004M  		LD	C, A
040434 ED 38 9D    0005M  		IN0	A, (reg)
040437 A1          0006M  		AND	C
040438 ED 39 9D    0007M  		OUT0	(reg), A
04043B C1          0008M  		POP	BC
04043C C9          0042   			RET
04043D             0043   
04043D             0044   ; Input
04043D             0045   ;
04043D             0046   GPIOB_M1:		SET_GPIO PB_DDR,  B
04043D ED 38 9B    0001M  		IN0	A, (reg)
040440 B0          0002M  		OR	val
040441 ED 39 9B    0003M  		OUT0	(reg), A
040444             0047   			RES_GPIO PB_ALT1, B
040444 C5          0001M  		PUSH	BC
040445 78          0002M  		LD	A, val
040446 2F          0003M  		CPL
040447 4F          0004M  		LD	C, A
040448 ED 38 9C    0005M  		IN0	A, (reg)
04044B A1          0006M  		AND	C
04044C ED 39 9C    0007M  		OUT0	(reg), A
04044F C1          0008M  		POP	BC
040450             0048   			RES_GPIO PB_ALT2, B
040450 C5          0001M  		PUSH	BC
040451 78          0002M  		LD	A, val
040452 2F          0003M  		CPL
040453 4F          0004M  		LD	C, A
040454 ED 38 9D    0005M  		IN0	A, (reg)
040457 A1          0006M  		AND	C
040458 ED 39 9D    0007M  		OUT0	(reg), A
04045B C1          0008M  		POP	BC
04045C C9          0049   			RET
04045D             0050   
04045D             0051   ; Open Drain IO
04045D             0052   ;
04045D             0053   GPIOB_M2:		RES_GPIO PB_DDR,  B
04045D C5          0001M  		PUSH	BC
04045E 78          0002M  		LD	A, val
04045F 2F          0003M  		CPL
040460 4F          0004M  		LD	C, A
040461 ED 38 9B    0005M  		IN0	A, (reg)
040464 A1          0006M  		AND	C
040465 ED 39 9B    0007M  		OUT0	(reg), A
040468 C1          0008M  		POP	BC
040469             0054   			SET_GPIO PB_ALT1, B
040469 ED 38 9C    0001M  		IN0	A, (reg)
04046C B0          0002M  		OR	val
04046D ED 39 9C    0003M  		OUT0	(reg), A
040470             0055   			RES_GPIO PB_ALT2, B
040470 C5          0001M  		PUSH	BC
040471 78          0002M  		LD	A, val
040472 2F          0003M  		CPL
040473 4F          0004M  		LD	C, A
040474 ED 38 9D    0005M  		IN0	A, (reg)
040477 A1          0006M  		AND	C
040478 ED 39 9D    0007M  		OUT0	(reg), A
04047B C1          0008M  		POP	BC
04047C C9          0056   			RET
04047D             0057   
04047D             0058   ; Open Source IO
04047D             0059   ;
04047D             0060   GPIOB_M3:		SET_GPIO PB_DDR,  B
04047D ED 38 9B    0001M  		IN0	A, (reg)
040480 B0          0002M  		OR	val
040481 ED 39 9B    0003M  		OUT0	(reg), A
040484             0061   			SET_GPIO PB_ALT1, B
040484 ED 38 9C    0001M  		IN0	A, (reg)
040487 B0          0002M  		OR	val
040488 ED 39 9C    0003M  		OUT0	(reg), A
04048B             0062   			RES_GPIO PB_ALT2, B
04048B C5          0001M  		PUSH	BC
04048C 78          0002M  		LD	A, val
04048D 2F          0003M  		CPL
04048E 4F          0004M  		LD	C, A
04048F ED 38 9D    0005M  		IN0	A, (reg)
040492 A1          0006M  		AND	C
040493 ED 39 9D    0007M  		OUT0	(reg), A
040496 C1          0008M  		POP	BC
040497 C9          0063   			RET
040498             0064   
040498             0065   ; Interrupt, Dual Edge
040498             0066   ;
040498             0067   GPIOB_M4:		SET_GPIO PB_DR,   B
040498 ED 38 9A    0001M  		IN0	A, (reg)
04049B B0          0002M  		OR	val
04049C ED 39 9A    0003M  		OUT0	(reg), A
04049F             0068   			RES_GPIO PB_DDR,  B
04049F C5          0001M  		PUSH	BC
0404A0 78          0002M  		LD	A, val
0404A1 2F          0003M  		CPL
0404A2 4F          0004M  		LD	C, A
0404A3 ED 38 9B    0005M  		IN0	A, (reg)
0404A6 A1          0006M  		AND	C
0404A7 ED 39 9B    0007M  		OUT0	(reg), A
0404AA C1          0008M  		POP	BC
0404AB             0069   			RES_GPIO PB_ALT1, B
0404AB C5          0001M  		PUSH	BC
0404AC 78          0002M  		LD	A, val
0404AD 2F          0003M  		CPL
0404AE 4F          0004M  		LD	C, A
0404AF ED 38 9C    0005M  		IN0	A, (reg)
0404B2 A1          0006M  		AND	C
0404B3 ED 39 9C    0007M  		OUT0	(reg), A
0404B6 C1          0008M  		POP	BC
0404B7             0070   			RES_GPIO PB_ALT2, B
0404B7 C5          0001M  		PUSH	BC
0404B8 78          0002M  		LD	A, val
0404B9 2F          0003M  		CPL
0404BA 4F          0004M  		LD	C, A
0404BB ED 38 9D    0005M  		IN0	A, (reg)
0404BE A1          0006M  		AND	C
0404BF ED 39 9D    0007M  		OUT0	(reg), A
0404C2 C1          0008M  		POP	BC
0404C3 C9          0071   			RET
0404C4             0072   
0404C4             0073   ; Alt Function
0404C4             0074   ;
0404C4             0075   GPIOB_M5:		SET_GPIO PB_DDR,  B
0404C4 ED 38 9B    0001M  		IN0	A, (reg)
0404C7 B0          0002M  		OR	val
0404C8 ED 39 9B    0003M  		OUT0	(reg), A
0404CB             0076   			RES_GPIO PB_ALT1, B
0404CB C5          0001M  		PUSH	BC
0404CC 78          0002M  		LD	A, val
0404CD 2F          0003M  		CPL
0404CE 4F          0004M  		LD	C, A
0404CF ED 38 9C    0005M  		IN0	A, (reg)
0404D2 A1          0006M  		AND	C
0404D3 ED 39 9C    0007M  		OUT0	(reg), A
0404D6 C1          0008M  		POP	BC
0404D7             0077   			SET_GPIO PB_ALT2, B
0404D7 ED 38 9D    0001M  		IN0	A, (reg)
0404DA B0          0002M  		OR	val
0404DB ED 39 9D    0003M  		OUT0	(reg), A
0404DE C9          0078   			RET
0404DF             0079   
0404DF             0080   ; Interrupt, Active Low
0404DF             0081   ;
0404DF             0082   GPIOB_M6:		RES_GPIO PB_DR,   B
0404DF C5          0001M  		PUSH	BC
0404E0 78          0002M  		LD	A, val
0404E1 2F          0003M  		CPL
0404E2 4F          0004M  		LD	C, A
0404E3 ED 38 9A    0005M  		IN0	A, (reg)
0404E6 A1          0006M  		AND	C
0404E7 ED 39 9A    0007M  		OUT0	(reg), A
0404EA C1          0008M  		POP	BC
0404EB             0083   			RES_GPIO PB_DDR,  B
0404EB C5          0001M  		PUSH	BC
0404EC 78          0002M  		LD	A, val
0404ED 2F          0003M  		CPL
0404EE 4F          0004M  		LD	C, A
0404EF ED 38 9B    0005M  		IN0	A, (reg)
0404F2 A1          0006M  		AND	C
0404F3 ED 39 9B    0007M  		OUT0	(reg), A
0404F6 C1          0008M  		POP	BC
0404F7             0084   			SET_GPIO PB_ALT1, B
0404F7 ED 38 9C    0001M  		IN0	A, (reg)
0404FA B0          0002M  		OR	val
0404FB ED 39 9C    0003M  		OUT0	(reg), A
0404FE             0085   			SET_GPIO PB_ALT2, B
0404FE ED 38 9D    0001M  		IN0	A, (reg)
040501 B0          0002M  		OR	val
040502 ED 39 9D    0003M  		OUT0	(reg), A
040505 C9          0086   			RET
040506             0087   
040506             0088   
040506             0089   ; Interrupt, Active High
040506             0090   ;
040506             0091   GPIOB_M7:		SET_GPIO PB_DR,   B
040506 ED 38 9A    0001M  		IN0	A, (reg)
040509 B0          0002M  		OR	val
04050A ED 39 9A    0003M  		OUT0	(reg), A
04050D             0092   			RES_GPIO PB_DDR,  B
04050D C5          0001M  		PUSH	BC
04050E 78          0002M  		LD	A, val
04050F 2F          0003M  		CPL
040510 4F          0004M  		LD	C, A
040511 ED 38 9B    0005M  		IN0	A, (reg)
040514 A1          0006M  		AND	C
040515 ED 39 9B    0007M  		OUT0	(reg), A
040518 C1          0008M  		POP	BC
040519             0093   			SET_GPIO PB_ALT1, B
040519 ED 38 9C    0001M  		IN0	A, (reg)
04051C B0          0002M  		OR	val
04051D ED 39 9C    0003M  		OUT0	(reg), A
040520             0094   			SET_GPIO PB_ALT2, B
040520 ED 38 9D    0001M  		IN0	A, (reg)
040523 B0          0002M  		OR	val
040524 ED 39 9D    0003M  		OUT0	(reg), A
040527 C9          0095   			RET
040528             0096   
040528             0097   
040528             0098   ; Interrupt, Falling Edge
040528             0099   ;
040528             0100   GPIOB_M8:		RES_GPIO PB_DR,   B
040528 C5          0001M  		PUSH	BC
040529 78          0002M  		LD	A, val
04052A 2F          0003M  		CPL
04052B 4F          0004M  		LD	C, A
04052C ED 38 9A    0005M  		IN0	A, (reg)
04052F A1          0006M  		AND	C
040530 ED 39 9A    0007M  		OUT0	(reg), A
040533 C1          0008M  		POP	BC
040534             0101   			SET_GPIO PB_DDR,  B
040534 ED 38 9B    0001M  		IN0	A, (reg)
040537 B0          0002M  		OR	val
040538 ED 39 9B    0003M  		OUT0	(reg), A
04053B             0102   			SET_GPIO PB_ALT1, B
04053B ED 38 9C    0001M  		IN0	A, (reg)
04053E B0          0002M  		OR	val
04053F ED 39 9C    0003M  		OUT0	(reg), A
040542             0103   			SET_GPIO PB_ALT2, B
040542 ED 38 9D    0001M  		IN0	A, (reg)
040545 B0          0002M  		OR	val
040546 ED 39 9D    0003M  		OUT0	(reg), A
040549 C9          0104   			RET
04054A             0105   
04054A             0106   ; Interrupt, Rising Edge
04054A             0107   ;
04054A             0108   GPIOB_M9:		SET_GPIO PB_DR,   B
04054A ED 38 9A    0001M  		IN0	A, (reg)
04054D B0          0002M  		OR	val
04054E ED 39 9A    0003M  		OUT0	(reg), A
040551             0109   			SET_GPIO PB_DDR,  B
040551 ED 38 9B    0001M  		IN0	A, (reg)
040554 B0          0002M  		OR	val
040555 ED 39 9B    0003M  		OUT0	(reg), A
040558             0110   			SET_GPIO PB_ALT1, B
040558 ED 38 9C    0001M  		IN0	A, (reg)
04055B B0          0002M  		OR	val
04055C ED 39 9C    0003M  		OUT0	(reg), A
04055F             0111   			SET_GPIO PB_ALT2, B
04055F ED 38 9D    0001M  		IN0	A, (reg)
040562 B0          0002M  		OR	val
040563 ED 39 9D    0003M  		OUT0	(reg), A
040566 C9          0112   			RET
040567             0113   
040567             0114   ; ===== STUB FUNCTIONS =====
040567             0115   printInline:
040567 C9          0116       ret
040568             0117   
040568             0118   SWITCH_A:
040568 CD 67 05 04 0119   	call printInline
04056C 67 70 69 6F 0120   	asciz "gpio.asm called SWITCH_A!"
       2E 61 73 6D 
       20 63 61 6C 
       6C 65 64 20 
       53 57 49 54 
       43 48 5F 41 
       21 00       
040586 C9          0121   	ret
