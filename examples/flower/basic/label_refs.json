{
    "ABSV": [
        {
            "ref_file": "eval.asm",
            "ref_line": 110,
            "ref_content": "DW24\tABSV\t\t\t; ABS"
        }
    ],
    "ABSV_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 124,
            "ref_content": "DW24  ABSV_FP            ;ABS"
        }
    ],
    "ACCS": [
        {
            "ref_file": "main.asm",
            "ref_line": 173,
            "ref_content": "_basic_main:\t\t\tLD\tHL, ACCS\t\t; Clear the ACCS"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 187,
            "ref_content": "LD\tDE, ACCS\t\t;  DE: Destination address"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 342,
            "ref_content": "LD\tDE, ACCS\t\t; Buffer for command string is ACCS (the string accumulator)"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 456,
            "ref_content": "LD\tIX, ACCS\t\t; Pointer to where the copy is to be stored"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 465,
            "ref_content": "LD\tHL, ACCS\t\t; HL: ACCS"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 583,
            "ref_content": "LD\tDE, ACCS\t\t; Buffer address for filename"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 585,
            "ref_content": "LD\tHL, ACCS\t\t; HL: Filename"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 603,
            "ref_content": "OSLOAD_TXT1:\t\tLD\tHL, ACCS \t\t; Where the input is going to be stored"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 663,
            "ref_content": "LD\tHL, ACCS\t\t; Address of the buffer"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 680,
            "ref_content": "LD\tDE, ACCS\t\t; Buffer address for filename"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 682,
            "ref_content": "LD\tHL, ACCS\t\t; HL: Filename"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 957,
            "ref_content": "LD\tHL, ACCS \t\t; Where to store the time string"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 959,
            "ref_content": "LD\tDE, ACCS\t\t; DE: pointer to start of string accumulator"
        },
        {
            "ref_file": "ram.asm",
            "ref_line": 109,
            "ref_content": "VDU_BUFFER:\t\tEQU\tACCS\t\t; Storage for VDU commands"
        }
    ],
    "ACLOST": [],
    "ACS": [
        {
            "ref_file": "eval.asm",
            "ref_line": 111,
            "ref_content": "DW24\tACS\t\t\t; ACS"
        }
    ],
    "ACS1": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1205,
            "ref_content": "JR      ACS1"
        }
    ],
    "ACS_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 125,
            "ref_content": "DW24  ACS_FP             ;ACS"
        }
    ],
    "ADD1": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1085,
            "ref_content": "JP      ADD1"
        }
    ],
    "ADD1_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 733,
            "ref_content": "JP      ADD1_FP            ;1"
        }
    ],
    "ADDR16": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2671,
            "ref_content": "JP\tZ, ADDR16"
        }
    ],
    "ADDR24": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2673,
            "ref_content": "JP\tZ, ADDR24"
        }
    ],
    "ADDR_": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2532,
            "ref_content": "JP\tADDR_\t\t\t; Output the address"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2540,
            "ref_content": "JP\tADDR_\t\t\t; Output the address"
        }
    ],
    "ADD_": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 283,
            "ref_content": "CALL    ADD_"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 300,
            "ref_content": "IADD:\t\t\tCALL    ADD_"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 326,
            "ref_content": "CALL    ADD_             ;HLH'L'=HLH'L'+DED'E'"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1965,
            "ref_content": "CALL    ADD_"
        }
    ],
    "ADL_": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2644,
            "ref_content": "JR\tZ, ADL_"
        }
    ],
    "ADVAL": [
        {
            "ref_file": "eval.asm",
            "ref_line": 112,
            "ref_content": "DW24\tADVAL\t\t\t; ADVAL"
        }
    ],
    "ANDK": [
        {
            "ref_file": "eval.asm",
            "ref_line": 211,
            "ref_content": "EXPR1A:\t\t\tCP      ANDK\t\t\t; Is operator AND?"
        }
    ],
    "ARGERR": [],
    "ARGUE": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1030,
            "ref_content": "CALL    ARGUE           \t; Transfer arguments"
        }
    ],
    "ARGUE1": [],
    "ARGUE2": [],
    "ARGUE4": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1854,
            "ref_content": "JR      ARGUE4"
        }
    ],
    "ARGUE5": [],
    "ARGUE6": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1895,
            "ref_content": "JR      ARGUE6"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1900,
            "ref_content": "JR      ARGUE6"
        }
    ],
    "ARGUE7": [],
    "ARRAY": [],
    "ASC": [
        {
            "ref_file": "eval.asm",
            "ref_line": 113,
            "ref_content": "DW24\tASC\t\t\t; ASC"
        }
    ],
    "ASC0": [
        {
            "ref_file": "eval.asm",
            "ref_line": 705,
            "ref_content": "JR      ASC0\t\t\t; Return a numeric value"
        }
    ],
    "ASC1": [
        {
            "ref_file": "eval.asm",
            "ref_line": 718,
            "ref_content": "JR      ASC1\t\t\t; And return the value"
        }
    ],
    "ASC_TO_NUMBER": [
        {
            "ref_file": "patch.asm",
            "ref_line": 443,
            "ref_content": "STAR_EDIT:\t\tCALL\tASC_TO_NUMBER\t\t; DE: Line number to edit"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 472,
            "ref_content": "STAR_FX:\t\tCALL\tASC_TO_NUMBER"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 474,
            "ref_content": "CALL\tASC_TO_NUMBER"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 482,
            "ref_content": "CALL\tASC_TO_NUMBER\t\t; Fetch second parameter"
        }
    ],
    "ASC_TO_NUMBER1": [
        {
            "ref_file": "misc.asm",
            "ref_line": 64,
            "ref_content": "JR      ASC_TO_NUMBER1\t\t; And loop"
        }
    ],
    "ASC_TO_NUMBER2": [],
    "ASC_TO_NUMBER3": [
        {
            "ref_file": "misc.asm",
            "ref_line": 43,
            "ref_content": "JR\tNZ, ASC_TO_NUMBER3\t; Jump to decimal parser if not"
        },
        {
            "ref_file": "misc.asm",
            "ref_line": 81,
            "ref_content": "JR\tASC_TO_NUMBER3"
        }
    ],
    "ASC_TO_NUMBER4": [
        {
            "ref_file": "misc.asm",
            "ref_line": 49,
            "ref_content": "JR \tC, ASC_TO_NUMBER4\t; Return if < ASCII '0'"
        },
        {
            "ref_file": "misc.asm",
            "ref_line": 54,
            "ref_content": "JR \tNC, ASC_TO_NUMBER4\t; Return if out of range"
        },
        {
            "ref_file": "misc.asm",
            "ref_line": 68,
            "ref_content": "JR\tC, ASC_TO_NUMBER4\t; Return if < ASCII '0'"
        },
        {
            "ref_file": "misc.asm",
            "ref_line": 70,
            "ref_content": "JR\tNC, ASC_TO_NUMBER4\t; Return if >= 10"
        }
    ],
    "ASM": [],
    "ASM0": [],
    "ASMB": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2225,
            "ref_content": "CALL    ASMB"
        }
    ],
    "ASMB1": [],
    "ASN": [
        {
            "ref_file": "eval.asm",
            "ref_line": 114,
            "ref_content": "DW24\tASN\t\t\t; ASN"
        }
    ],
    "ASN_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 126,
            "ref_content": "DW24  ASN_FP             ;ASN"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1202,
            "ref_content": "ACS_FP:\t\t\tCALL    ASN_FP"
        }
    ],
    "ASSEM": [
        {
            "ref_file": "exec.asm",
            "ref_line": 371,
            "ref_content": "CALL    ASSEM"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2289,
            "ref_content": "JP      ASSEM"
        }
    ],
    "ASSEM0": [],
    "ASSEM1": [],
    "ASSEM2": [],
    "ASSEM3": [],
    "ASSEM4": [],
    "ASSEM5": [],
    "ASSIGN": [
        {
            "ref_file": "exec.asm",
            "ref_line": 355,
            "ref_content": "LET:\t\t\tCALL    ASSIGN\t\t\t; Assign the variable"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 819,
            "ref_content": "FOR_EX:\t\t\tCALL    ASSIGN\t\t\t; Assign the START expression value to a variable"
        }
    ],
    "ATEND": [],
    "ATN": [
        {
            "ref_file": "eval.asm",
            "ref_line": 115,
            "ref_content": "DW24\tATN\t\t\t; ATN"
        }
    ],
    "ATN0": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1127,
            "ref_content": "JR      ATN0"
        }
    ],
    "ATN1": [],
    "ATN2": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1152,
            "ref_content": "JP      ATN2"
        }
    ],
    "ATN_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 127,
            "ref_content": "DW24  ATN_FP             ;ATN"
        }
    ],
    "AUTO": [
        {
            "ref_file": "exec.asm",
            "ref_line": 157,
            "ref_content": "CMDTAB:\t\t\tDW24  AUTO\t\t\t; C6H"
        }
    ],
    "AUTOLOAD": [
        {
            "ref_file": "main.asm",
            "ref_line": 177,
            "ref_content": "JR\tZ, AUTOLOAD\t\t; 2 parameters = autoload"
        }
    ],
    "AUTOLOAD_1": [
        {
            "ref_file": "main.asm",
            "ref_line": 194,
            "ref_content": "JR\tNZ, AUTOLOAD_1\t\t; Loop until we hit a 0 byte"
        }
    ],
    "AUTOLOAD_2": [
        {
            "ref_file": "main.asm",
            "ref_line": 192,
            "ref_content": "JR\tZ, AUTOLOAD_2\t\t; End if we hit the page boundary"
        }
    ],
    "AUTONO": [],
    "BAD": [
        {
            "ref_file": "main.asm",
            "ref_line": 1120,
            "ref_content": "JP      BAD\t\t\t; If anything else, then something has gone wrong - trip a Bad Program error"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 624,
            "ref_content": "JP\tZ, BAD\t\t\t; If the buffer is full (wrapped to 0) then jump to Bad Program error"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 650,
            "ref_content": "JP\tZ, BAD"
        }
    ],
    "BADBIN": [],
    "BADDIM": [],
    "BADHEX": [],
    "BADOP": [],
    "BAD_FP": [],
    "BGET": [
        {
            "ref_file": "eval.asm",
            "ref_line": 116,
            "ref_content": "DW24\tBGET\t\t\t; BGET"
        }
    ],
    "BIN": [],
    "BIN1": [],
    "BIND": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2399,
            "ref_content": "CALL    BIND"
        }
    ],
    "BIND1": [],
    "BINDIG": [
        {
            "ref_file": "eval.asm",
            "ref_line": 450,
            "ref_content": "CALL\tBINDIG\t\t\t; Fetch the character from IY"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 458,
            "ref_content": "CALL\tBINDIG\t\t\t; Fetch the next character"
        }
    ],
    "BITLOOKUP": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1235,
            "ref_content": "LD\tHL, BITLOOKUP\t\t; HL: The bit lookup table"
        }
    ],
    "BIT_": [],
    "BPUT": [
        {
            "ref_file": "exec.asm",
            "ref_line": 172,
            "ref_content": "DW24  BPUT\t\t\t; D5H"
        }
    ],
    "BRAKET": [
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 81,
            "ref_content": "CALL\tBRAKET\t\t\t; Closing bracket"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 113,
            "ref_content": "CALL\tBRAKET\t\t\t; Closing bracket"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 410,
            "ref_content": "CALL    BRAKET\t\t\t; Check for closing bracket"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1131,
            "ref_content": "CALL    BRAKET\t\t\t; Check for closing bracket"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1286,
            "ref_content": "CALL    BRAKET\t\t\t; Check for a bracket"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1299,
            "ref_content": "CALL    BRAKET\t\t\t; Check for closing bracket"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1343,
            "ref_content": "CALL    BRAKET\t\t\t; Check for closing bracket"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 482,
            "ref_content": "CALL    BRAKET          \t; Check for closing bracket"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1025,
            "ref_content": "CALL    BRAKET          \t; Closing bracket"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1875,
            "ref_content": "ARGUE5:\t\t\tCALL    BRAKET\t\t\t; Check for end bracket (throws an error if missing)"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2030,
            "ref_content": "CALL    BRAKET"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2047,
            "ref_content": "CALL    BRAKET"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1529,
            "ref_content": "CALL    BRAKET          \t; Check for closing bracket"
        }
    ],
    "BUFFER": [],
    "BYTE0": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2360,
            "ref_content": "JR      BYTE0\t\t\t; Then write the opcode byte"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2373,
            "ref_content": "JR      BYTE0"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2381,
            "ref_content": "JR      BYTE0"
        }
    ],
    "BYTE_": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2432,
            "ref_content": "JP      BYTE_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2461,
            "ref_content": "CALL\tBYTE_\t\t\t; Write out the operand"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2489,
            "ref_content": "CALL    BYTE_\t\t\t; Write out the operand"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2501,
            "ref_content": "@@:\t\t\tCALL    BYTE_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2514,
            "ref_content": "JP      BYTE_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2531,
            "ref_content": "GROUP12_1:\t\tCALL    BYTE_\t\t\t; Output the opcode (with conditions)"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2554,
            "ref_content": "JP      BYTE_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2564,
            "ref_content": "JP      BYTE_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2593,
            "ref_content": "JP      BYTE_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2610,
            "ref_content": "CALL    BYTE_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2624,
            "ref_content": "CALL\tBYTE_\t\t\t; Write out the opcode"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2636,
            "ref_content": "JP\tBYTE_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2684,
            "ref_content": "CALL    BYTE_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2743,
            "ref_content": "JP      BYTE_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2750,
            "ref_content": "JP\tBYTE_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2755,
            "ref_content": "JP      BYTE_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2786,
            "ref_content": "JR      BYTE_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2792,
            "ref_content": "CALL    BYTE_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2796,
            "ref_content": "JR      BYTE_"
        }
    ],
    "CALL1": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1590,
            "ref_content": "JR      CALL1"
        }
    ],
    "CALL2": [],
    "CALL_": [
        {
            "ref_file": "exec.asm",
            "ref_line": 173,
            "ref_content": "DW24  CALL_\t\t\t; D6H"
        }
    ],
    "CARRET": [],
    "CB": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2372,
            "ref_content": "CALL    CB"
        }
    ],
    "CHAIN": [
        {
            "ref_file": "exec.asm",
            "ref_line": 174,
            "ref_content": "DW24  CHAIN\t\t\t; D7H"
        }
    ],
    "CHAIN0": [],
    "CHANEL": [
        {
            "ref_file": "eval.asm",
            "ref_line": 690,
            "ref_content": "EOF:\t\t\tCALL    CHANEL\t\t\t; Check for EOF"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 695,
            "ref_content": "BGET:\t\t\tCALL    CHANEL          \t; Channel number"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 801,
            "ref_content": "EXT:\t\t\tCALL    CHANEL"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 805,
            "ref_content": "PTR_EV:\t\t\tCALL    CHANEL"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1387,
            "ref_content": "PTR_EX:\t\t\tCALL    CHANEL"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1535,
            "ref_content": "CLOSE:\t\t\tCALL    CHANEL\t\t\t; Fetch the channel number"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1541,
            "ref_content": "BPUT:\t\t\tCALL    CHANEL          \t; Fetch the channel number"
        }
    ],
    "CHECK": [
        {
            "ref_file": "eval.asm",
            "ref_line": 514,
            "ref_content": "ITEM:\t\t\tCALL    CHECK\t\t\t; Check there's at least a page of free memory left and Error: \"No room\" if not"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1549,
            "ref_content": "PUSHS:\t\t\tCALL    CHECK\t\t\t; Check if there is sufficient space on the stack"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1571,
            "ref_content": "CALL    CHECK\t\t\t; Final check to see if there is sufficient space on the stack"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 756,
            "ref_content": "CALL    CHECK           \t; Check there is enough room"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 780,
            "ref_content": "CALL    CHECK\t\t\t; Check if there is enough room"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 859,
            "ref_content": "CALL    CHECK"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 963,
            "ref_content": "PROC1:\t\t\tCALL    CHECK\t\t\t; Check there is space for this"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1853,
            "ref_content": "CALL    CHECK           \t; Check room"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1952,
            "ref_content": "CALL    CHECK\t\t\t; Check if there is space on the stack"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1971,
            "ref_content": "SAVLO5:\t\t\tCALL    CHECK"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1786,
            "ref_content": "CALL    CHECK\t\t\t; Check whether we are out of space"
        }
    ],
    "CHKO1": [],
    "CHKO2": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 489,
            "ref_content": "JR      CHKO2"
        }
    ],
    "CHKOVF": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 400,
            "ref_content": "JP      CHKOVF"
        }
    ],
    "CHNL": [
        {
            "ref_file": "exec.asm",
            "ref_line": 560,
            "ref_content": "CALL    CHNL            ;CHANNEL NO. = E"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1131,
            "ref_content": "INPUTN:\t\t\tCALL    CHNL            ;E = CHANNEL NUMBER"
        }
    ],
    "CHRS": [
        {
            "ref_file": "eval.asm",
            "ref_line": 151,
            "ref_content": "DW24\tCHRS\t\t\t; CHRS"
        }
    ],
    "CLEAN": [
        {
            "ref_file": "main.asm",
            "ref_line": 897,
            "ref_content": "CALL    CLEAN\t\t\t; Further checks for bad program, set TOP, write out &FFFF end of program marker"
        }
    ],
    "CLEAR": [
        {
            "ref_file": "exec.asm",
            "ref_line": 239,
            "ref_content": "CALL    CLEAR"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1362,
            "ref_content": "CLR:\t\t\tCALL    CLEAR"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1424,
            "ref_content": "CALL    CLEAR"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 713,
            "ref_content": "RENUM:\t\t\tCALL    CLEAR           \t; Uses the heap so clear all dynamic variables and function/procedure pointers"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 906,
            "ref_content": "CALL    CLEAR\t\t\t; Further checks for bad program, set TOP, write out &FFFF end of program marker"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1102,
            "ref_content": "JR      CLEAR\t\t\t; Clear all dynamic variables and function/procedure pointers"
        }
    ],
    "CLEAR1": [
        {
            "ref_file": "main.asm",
            "ref_line": 1149,
            "ref_content": "DJNZ    CLEAR1"
        }
    ],
    "CLG": [
        {
            "ref_file": "exec.asm",
            "ref_line": 177,
            "ref_content": "DW24  CLG\t\t\t; DAH"
        }
    ],
    "CLI": [
        {
            "ref_file": "exec.asm",
            "ref_line": 214,
            "ref_content": "DW24  CLI             \t\t; FFH: OSCLI"
        }
    ],
    "CLOOP": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1353,
            "ref_content": "JP      CLOOP"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 267,
            "ref_content": "JP      CLOOP\t\t\t; Jump back to immediate mode"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 591,
            "ref_content": "CLOOP1:\t\t\tJP      CLOOP"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 898,
            "ref_content": "CLOOP0:\t\t\tJP      CLOOP\t\t\t; Jump back to the command loop"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 991,
            "ref_content": "JP      CLOOP\t\t\t; Back to CLOOP"
        }
    ],
    "CLOOP0": [
        {
            "ref_file": "main.asm",
            "ref_line": 868,
            "ref_content": "JR      CLOOP0\t\t\t; Jump back indirectly to the command loop via CLOOP0 (optimisation for size)"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 881,
            "ref_content": "JR      CLOOP0\t\t\t; Jump back indirectly to the command loop via CLOOP0 (optimisation for size)"
        }
    ],
    "CLOOP1": [],
    "CLOSE": [
        {
            "ref_file": "exec.asm",
            "ref_line": 176,
            "ref_content": "DW24  CLOSE\t\t\t; D9H"
        }
    ],
    "CLR": [
        {
            "ref_file": "exec.asm",
            "ref_line": 175,
            "ref_content": "DW24  CLR\t\t\t; D8H"
        }
    ],
    "CLRSCN": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1338,
            "ref_content": "CLS:\t\tCALL    CLRSCN"
        }
    ],
    "CLS": [
        {
            "ref_file": "exec.asm",
            "ref_line": 178,
            "ref_content": "DW24  CLS\t\t\t; DBH"
        }
    ],
    "CMDTAB": [],
    "COLD": [
        {
            "ref_file": "main.asm",
            "ref_line": 178,
            "ref_content": "JR\tC, COLD\t\t\t; 1 parameter = normal start"
        }
    ],
    "COLOUR": [
        {
            "ref_file": "exec.asm",
            "ref_line": 210,
            "ref_content": "DW24  COLOUR\t\t\t; FBH"
        }
    ],
    "COLOUR_1": [
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 145,
            "ref_content": "JR\tZ, COLOUR_1\t\t; Yes, so we're doing a palette change next"
        }
    ],
    "COLOUR_2": [
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 158,
            "ref_content": "JR\tZ, COLOUR_2\t\t; Yes, so we're doing COLOUR L,R,G,B"
        }
    ],
    "COMDS": [],
    "COMMA": [
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 77,
            "ref_content": "CALL\tCOMMA"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 109,
            "ref_content": "CALL\tCOMMA"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 151,
            "ref_content": "COLOUR_1:\t\tCALL\tCOMMA"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 168,
            "ref_content": "COLOUR_2:\t\tCALL\tCOMMA"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 173,
            "ref_content": "CALL\tCOMMA"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 192,
            "ref_content": "CALL\tCOMMA"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 209,
            "ref_content": "CALL\tCOMMA"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 240,
            "ref_content": "CALL\tCOMMA"
        },
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 36,
            "ref_content": "CALL\tCOMMA"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1337,
            "ref_content": "CALL    COMMA\t\t\t; Check for comma"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1543,
            "ref_content": "CALL    COMMA\t\t\t; Skip to the next expression"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1659,
            "ref_content": "CALL    COMMA"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1503,
            "ref_content": "CALL    COMMA"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 973,
            "ref_content": "CALL\tCOMMA"
        }
    ],
    "CON": [],
    "CON0": [],
    "CON2": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1499,
            "ref_content": "JR      CON2"
        }
    ],
    "CON3": [],
    "COND_": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2522,
            "ref_content": "CALL    COND_\t\t\t; Evaluate the conditions"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2560,
            "ref_content": "GROUP15_1:\t\tCALL    COND_"
        }
    ],
    "CONS": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1202,
            "ref_content": "CALL    CONS"
        }
    ],
    "CONS1": [],
    "CONS2": [],
    "CONS3": [],
    "CON_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 741,
            "ref_content": "CALL    CON_FP"
        }
    ],
    "COPY0": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1928,
            "ref_content": "X5:\t\t\tCALL    COPY0"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1960,
            "ref_content": "X10:\t\t\tCALL    COPY0           ;DED'E'=HLH'L'"
        }
    ],
    "COPY_": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 556,
            "ref_content": "CALL    COPY_"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1114,
            "ref_content": "CALL    COPY_"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2002,
            "ref_content": "SQUARE:\t\t\tCALL    COPY_"
        }
    ],
    "CORN": [],
    "COS": [
        {
            "ref_file": "eval.asm",
            "ref_line": 117,
            "ref_content": "DW24\tCOS\t\t\t; COS"
        }
    ],
    "COS0": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 833,
            "ref_content": "CALL    COS0"
        }
    ],
    "COS_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 128,
            "ref_content": "DW24  COS_FP             ;COS"
        }
    ],
    "COUNT": [],
    "COUNT0": [
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 132,
            "ref_content": "JP\tCOUNT0"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 698,
            "ref_content": "JP      COUNT0\t\t\t; Return an 8-bit value"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 715,
            "ref_content": "JR      COUNT0\t\t\t; Return an 8-bit value"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 725,
            "ref_content": "JR      COUNT0\t\t\t; An 8-bit value"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 729,
            "ref_content": "JR      COUNT0\t\t\t; Return L"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 755,
            "ref_content": "JR      COUNT0\t\t\t; An 8-bit value"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 795,
            "ref_content": "JR      COUNT0\t\t\t; Return channel number to BASIC"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 537,
            "ref_content": "JP\tCOUNT0"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 572,
            "ref_content": "JP \tCOUNT0"
        }
    ],
    "COUNT1": [
        {
            "ref_file": "eval.asm",
            "ref_line": 685,
            "ref_content": "JP      COUNT1\t\t\t; Return an 8-bit value"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 688,
            "ref_content": "JP      COUNT1\t\t\t; Return an 8-bit value"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 752,
            "ref_content": "JR      COUNT1\t\t\t; A 16-bit value"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1132,
            "ref_content": "JP      COUNT1\t\t\t; Return a numeric integer"
        }
    ],
    "COUNT2": [
        {
            "ref_file": "eval.asm",
            "ref_line": 733,
            "ref_content": "JR      COUNT2\t\t\t; A 24-bit value"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 737,
            "ref_content": "JR      COUNT2\t\t\t; A 24-bit value"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 741,
            "ref_content": "JR      COUNT2"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 749,
            "ref_content": "JR      COUNT2"
        }
    ],
    "COUNTV": [
        {
            "ref_file": "eval.asm",
            "ref_line": 118,
            "ref_content": "DW24\tCOUNTV\t\t\t; COUNT"
        }
    ],
    "CREATE": [
        {
            "ref_file": "exec.asm",
            "ref_line": 443,
            "ref_content": "CALL    CREATE\t\t\t; Create a new entity"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1453,
            "ref_content": "PUTVAR:\t\t\tCALL    CREATE\t\t\t; Create the variable"
        }
    ],
    "CRLF": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1352,
            "ref_content": "CALL    CRLF"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2019,
            "ref_content": "CALL    CRLF"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2288,
            "ref_content": "CALL    CRLF"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 846,
            "ref_content": "CALL    CRLF"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 985,
            "ref_content": "CALL    CRLF\t\t\t; Output newline"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 990,
            "ref_content": "CALL    CRLF\t\t\t; Output newline"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1206,
            "ref_content": "JR\tZ, CRLF\t\t\t; Yes, so print a CRLF"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1294,
            "ref_content": "JR      CRLF\t\t\t; Otherwise output CRLF"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 107,
            "ref_content": "CALL\tCRLF\t\t\t; Display CRLF"
        }
    ],
    "CRTONULL": [],
    "CRTONULL0": [
        {
            "ref_file": "misc.asm",
            "ref_line": 130,
            "ref_content": "JR\tCRTONULL0"
        }
    ],
    "CRTONULL1": [
        {
            "ref_file": "misc.asm",
            "ref_line": 141,
            "ref_content": "JR\tCRTONULL1"
        }
    ],
    "CRTONULL2": [
        {
            "ref_file": "misc.asm",
            "ref_line": 139,
            "ref_content": "JR\tZ, CRTONULL2"
        }
    ],
    "CSTR_CAT": [
        {
            "ref_file": "misc.asm",
            "ref_line": 221,
            "ref_content": "JR\tCSTR_CAT"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 739,
            "ref_content": "CALL\tCSTR_CAT\t\t; Concat it to string pointed to by HL"
        }
    ],
    "CSTR_CAT_1": [
        {
            "ref_file": "misc.asm",
            "ref_line": 219,
            "ref_content": "JR\tZ, CSTR_CAT_1"
        },
        {
            "ref_file": "misc.asm",
            "ref_line": 229,
            "ref_content": "JR\tCSTR_CAT_1\t\t; Loop until finished"
        }
    ],
    "CSTR_ENDSWITH": [
        {
            "ref_file": "misc.asm",
            "ref_line": 211,
            "ref_content": "JR\tCSTR_ENDSWITH\t\t; And loop"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 754,
            "ref_content": "CALL\tCSTR_ENDSWITH\t\t; Check whether the string ends with the entry in the lookup"
        }
    ],
    "CSTR_FINDCH": [
        {
            "ref_file": "misc.asm",
            "ref_line": 193,
            "ref_content": "JR\tCSTR_FINDCH"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 735,
            "ref_content": "CALL\tCSTR_FINDCH"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 750,
            "ref_content": "CALL\tCSTR_FINDCH"
        }
    ],
    "CSTR_FNAME": [
        {
            "ref_file": "misc.asm",
            "ref_line": 159,
            "ref_content": "JR\tCSTR_FNAME\t\t; And loop"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 584,
            "ref_content": "CALL\tCSTR_FNAME\t\t; Fetch filename from MOS into buffer"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 681,
            "ref_content": "CALL\tCSTR_FNAME\t\t; Fetch filename from MOS into buffer"
        }
    ],
    "CSTR_LINE": [
        {
            "ref_file": "misc.asm",
            "ref_line": 175,
            "ref_content": "JR\tCSTR_LINE\t\t; And loop"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 344,
            "ref_content": "CALL\tCSTR_LINE\t\t; Fetch the line"
        }
    ],
    "D2": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1817,
            "ref_content": "DIV2:\t\t\tCALL    D2"
        }
    ],
    "D2C": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1929,
            "ref_content": "CALL    D2C"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1930,
            "ref_content": "CALL    D2C"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2098,
            "ref_content": "CALL    D2C"
        }
    ],
    "DATA_EX_": [],
    "DATA_MN_": [
        {
            "ref_file": "main.asm",
            "ref_line": 2020,
            "ref_content": "CP      DATA_MN_\t\t\t; If it is not DATA then"
        }
    ],
    "DATPTR": [],
    "DB_": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2669,
            "ref_content": "JP\tZ, DB_"
        }
    ],
    "DECODE": [
        {
            "ref_file": "eval.asm",
            "ref_line": 103,
            "ref_content": "FUNTBL:\t\t\tDW24\tDECODE\t\t\t; Line number"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 816,
            "ref_content": "CALL    DECODE\t\t\t; Decode the encoded line number (in HL')"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1215,
            "ref_content": "CALL    DECODE\t\t\t; Decode"
        }
    ],
    "DEFS": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2642,
            "ref_content": "JR\tNC, DEFS"
        }
    ],
    "DEF_": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2909,
            "ref_content": "CP      DEF_\t\t\t; Special case for token DEF (used in DEFB, DEFW, DEFL, DEFM)"
        }
    ],
    "DEG": [
        {
            "ref_file": "eval.asm",
            "ref_line": 119,
            "ref_content": "DW24\tDEG\t\t\t; DEG"
        }
    ],
    "DEG_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 129,
            "ref_content": "DW24  DEG_FP             ;DEG"
        }
    ],
    "DEL": [
        {
            "ref_file": "main.asm",
            "ref_line": 580,
            "ref_content": "CALL    DEL\t\t\t; Delete the line pointed to by HL"
        }
    ],
    "DELET1": [
        {
            "ref_file": "main.asm",
            "ref_line": 582,
            "ref_content": "JR      DELET1\t\t\t; And loop round to the next line"
        }
    ],
    "DELETE": [
        {
            "ref_file": "exec.asm",
            "ref_line": 158,
            "ref_content": "DW24  DELETE\t\t\t; C7H"
        }
    ],
    "DELIM": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2941,
            "ref_content": "FIND5:\t\t\tCALL    DELIM\t\t\t; Is it a delimiter?"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2952,
            "ref_content": "SKIP:\t\t\tCALL    DELIM\t\t\t; Is it a delimiter?"
        }
    ],
    "DIGITQ": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1515,
            "ref_content": "GETEX1:\t\t\tCALL    DIGITQ"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1552,
            "ref_content": "UINT:\t\t\tCALL    DIGITQ"
        }
    ],
    "DIM": [],
    "DIM1": [],
    "DIM2": [
        {
            "ref_file": "exec.asm",
            "ref_line": 508,
            "ref_content": "JR      DIM2"
        }
    ],
    "DIM3": [
        {
            "ref_file": "exec.asm",
            "ref_line": 553,
            "ref_content": "JR      DIM3\t\t\t; Continue with the DIM"
        }
    ],
    "DIM4": [],
    "DIM5": [],
    "DIM_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 181,
            "ref_content": "DW24  DIM_EX\t\t\t; DEH"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 514,
            "ref_content": "JP      DIM_EX"
        }
    ],
    "DIR_SIZE": [],
    "DISPAT": [],
    "DISPAT_FP": [],
    "DISPT0": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1688,
            "ref_content": "JR      DISPT0"
        }
    ],
    "DISPT2": [
        {
            "ref_file": "eval.asm",
            "ref_line": 263,
            "ref_content": "CALL    DISPT2"
        }
    ],
    "DIV0": [],
    "DIV1": [],
    "DIV2": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1588,
            "ref_content": "FIX1:\t\t\tCALL    DIV2"
        }
    ],
    "DIVA": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 261,
            "ref_content": "CALL    DIVA            ;DIVIDE"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 379,
            "ref_content": "CALL    DIVA            ;DIVIDE"
        }
    ],
    "DIVB": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 810,
            "ref_content": "CALL    DIVB"
        }
    ],
    "DIVBY0": [],
    "DIVC": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 2152,
            "ref_content": "JP      DIVC"
        },
        {
            "ref_file": "tmp.asm",
            "ref_line": 39,
            "ref_content": "JP      DIVC"
        }
    ],
    "DIVK": [
        {
            "ref_file": "eval.asm",
            "ref_line": 341,
            "ref_content": "CP      DIVK\t\t\t; DIV token is valid"
        }
    ],
    "DLOAD5": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 559,
            "ref_content": "CALL    DLOAD5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2055,
            "ref_content": "CALL    DLOAD5          \t\t; Load the first coefficient from (IX)"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2059,
            "ref_content": "CALL    DLOAD5          \t\t; Load the second coefficient from (IX)"
        }
    ],
    "DLOAD5_SPL": [
        {
            "ref_file": "exec.asm",
            "ref_line": 892,
            "ref_content": "CALL    DLOAD5_SPL      \t; Load the STEP value"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 906,
            "ref_content": "CALL    DLOAD5_SPL      \t; Load the LIMIT value"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2065,
            "ref_content": "CALL    DLOAD5_SPL\t\t\t; Load X from SP"
        }
    ],
    "DLP1": [],
    "DLPAIR": [
        {
            "ref_file": "main.asm",
            "ref_line": 560,
            "ref_content": "CALL    DLPAIR\t\t\t; Get the line number pair - HL: BASIC program address, BC: second number (or 0 if missing)"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 601,
            "ref_content": "CALL    DLPAIR\t\t\t; Get the line number pair - HL: BASIC program address, BC: second number (or 0 if missing)"
        }
    ],
    "DOIT": [
        {
            "ref_file": "eval.asm",
            "ref_line": 205,
            "ref_content": "CALL    DOIT            \t; Do the operation"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 215,
            "ref_content": "CALL    DOIT\t\t\t; Do the operation"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 243,
            "ref_content": "CALL    DOIT            \t; NB: Must NOT be \"JP DOIT\""
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 290,
            "ref_content": "CALL    DOIT\t\t\t; Do the operation"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 345,
            "ref_content": "CALL    DOIT"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 360,
            "ref_content": "CALL    DOIT\t\t\t; Do the operation"
        }
    ],
    "DONE": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1016,
            "ref_content": "RECIP:\t\t\tCALL    DONE"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1116,
            "ref_content": "CALL    DONE"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2032,
            "ref_content": "CALL    DONE"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2037,
            "ref_content": "CALL    DONE"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2082,
            "ref_content": "CALL    DONE"
        }
    ],
    "DOSPC": [],
    "DOT": [],
    "DOTAB": [],
    "DOTAB1": [],
    "DO_KEYBOARD": [
        {
            "ref_file": "interrupts.asm",
            "ref_line": 80,
            "ref_content": "CALL\t\tDO_KEYBOARD"
        }
    ],
    "DO_KEYBOARD_0": [
        {
            "ref_file": "interrupts.asm",
            "ref_line": 67,
            "ref_content": "JR\t\tZ, DO_KEYBOARD_0\t\t; If it is key up, then clear the keyboard values"
        }
    ],
    "DO_KEYBOARD_1": [
        {
            "ref_file": "interrupts.asm",
            "ref_line": 57,
            "ref_content": "JR\t\tNZ, DO_KEYBOARD_1\t\t; Yes it has, so jump to the next bit"
        }
    ],
    "DRAW": [
        {
            "ref_file": "exec.asm",
            "ref_line": 182,
            "ref_content": "DW24  DRAW\t\t\t; DFH"
        }
    ],
    "DTABLE": [],
    "DYNVAR": [
        {
            "ref_file": "main.asm",
            "ref_line": 1681,
            "ref_content": "LD      DE, DYNVAR       \t; The dynamic variable storage"
        }
    ],
    "ED": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2414,
            "ref_content": "CALL    ED"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2619,
            "ref_content": "CALL\tED\t\t\t; Needs to be prefixed with ED"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2764,
            "ref_content": "CALL    ED"
        }
    ],
    "ELSE_EX_": [
        {
            "ref_file": "exec.asm",
            "ref_line": 726,
            "ref_content": "CP      ELSE_EX_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1332,
            "ref_content": "CP      ELSE_EX_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1992,
            "ref_content": "CP      ELSE_EX_"
        }
    ],
    "ELSE_MN_": [
        {
            "ref_file": "main.asm",
            "ref_line": 2066,
            "ref_content": "DB\tELSE_MN_"
        }
    ],
    "ENCODE": [
        {
            "ref_file": "main.asm",
            "ref_line": 854,
            "ref_content": "CALL    ENCODE          \t; Re-write the new line number out"
        }
    ],
    "ENDPRO": [
        {
            "ref_file": "exec.asm",
            "ref_line": 184,
            "ref_content": "DW24  ENDPRO\t\t\t; E1H"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1120,
            "ref_content": "JR      ENDPRO\t\t\t; And loop back to ENDPRO"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1127,
            "ref_content": "JR      ENDPRO"
        }
    ],
    "END_": [
        {
            "ref_file": "exec.asm",
            "ref_line": 183,
            "ref_content": "DW24  END_\t\t\t; E0H"
        }
    ],
    "ENVEL": [
        {
            "ref_file": "exec.asm",
            "ref_line": 185,
            "ref_content": "DW24  ENVEL\t\t\t; E2H"
        }
    ],
    "EOF": [
        {
            "ref_file": "eval.asm",
            "ref_line": 159,
            "ref_content": "DW24\tEOF\t\t\t; EOF"
        }
    ],
    "EORK": [
        {
            "ref_file": "eval.asm",
            "ref_line": 198,
            "ref_content": "EXPR0A:\t\t\tCP      EORK            \t; Is operator EOR?"
        }
    ],
    "EQUALS": [
        {
            "ref_file": "exec.asm",
            "ref_line": 360,
            "ref_content": "CALL    EQUALS\t\t\t; Check if the variable is followed by an '=' symbol; this will throw a 'Mistake' error if not"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1388,
            "ref_content": "CALL    EQUALS"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1399,
            "ref_content": "PAGEV_EX:\t\t\tCALL    EQUALS"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1408,
            "ref_content": "CALL    EQUALS"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1417,
            "ref_content": "CALL    EQUALS"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1422,
            "ref_content": "LOMEMV_EX:\t\t\tCALL    EQUALS"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1430,
            "ref_content": "HIMEMV_EX:\t\t\tCALL    EQUALS\t\t\t; Check for '=' and throw an error if not found"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1679,
            "ref_content": "CALL    EQUALS\t\t\t; Check if the variable is followed by an '=' symbol; this will throw a 'Mistake' error if not"
        }
    ],
    "ERL": [],
    "ERLV": [
        {
            "ref_file": "eval.asm",
            "ref_line": 120,
            "ref_content": "DW24\tERLV\t\t\t; ERL"
        }
    ],
    "ERR": [],
    "ERRLIN": [],
    "ERROR0": [
        {
            "ref_file": "main.asm",
            "ref_line": 947,
            "ref_content": "DJNZ    ERROR0\t\t\t; Decrements the error number and loop until 0"
        }
    ],
    "ERROR0_EV": [],
    "ERROR0_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 386,
            "ref_content": "JR\tERROR0_EX"
        }
    ],
    "ERROR1": [],
    "ERROR1_EV": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1627,
            "ref_content": "JR      ERROR1_EV          ;\"Missing ,\""
        }
    ],
    "ERROR1_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 519,
            "ref_content": "JR\tERROR1_EX"
        }
    ],
    "ERROR2": [],
    "ERROR2_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 747,
            "ref_content": "JR      ERROR2_EX"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 772,
            "ref_content": "JR      ERROR2_EX"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 817,
            "ref_content": "JR      ERROR2_EX          \t; Throw \"FOR variable\" error"
        }
    ],
    "ERROR3": [],
    "ERROR3_EX": [],
    "ERROR4": [],
    "ERROR_": [
        {
            "ref_file": "eval.asm",
            "ref_line": 405,
            "ref_content": "JP      ERROR_"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 442,
            "ref_content": "JP      ERROR_          \t; Error: \"Bad HEX\""
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 600,
            "ref_content": "ERROR0_EV:\t\t\tJP      ERROR_           \t; Throw error \"Missing '\"'"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1233,
            "ref_content": "JP\tM, ERROR_\t\t; if the argument < - 128"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1634,
            "ref_content": "ERROR1_EV:\t\t\tJP      ERROR_           ;\"Missing )\""
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 388,
            "ref_content": "ERROR0_EX:\t\t\tJP      ERROR_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 521,
            "ref_content": "ERROR1_EX:\t\t\tJP      ERROR_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 731,
            "ref_content": "ERROR2_EX:\t\t\tJP      ERROR_           ;\"ON range\""
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 944,
            "ref_content": "ERROR3_EX:\t\t\tJP      ERROR_           \t; Throw the error \"Can't match FOR\""
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1108,
            "ref_content": "JP      ERROR_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1311,
            "ref_content": "ERROR4:\t\t\tJP      ERROR_           ;\"Out of DATA\""
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1803,
            "ref_content": "JP      ERROR_\t\t\t; Throw error \"No room\""
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1873,
            "ref_content": "JP      ERROR_           \t; Throw error \"Arguments\""
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2011,
            "ref_content": "JP      ERROR_           \t; Throw error \"Mistake\""
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1458,
            "ref_content": "ERROR3:\t\t\tJP      ERROR_"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1833,
            "ref_content": "JP      ERROR_           \t; Error: \"Too big\""
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 447,
            "ref_content": "JP\tNZ, ERROR_\t\t; Do error 41: No such line in that case"
        }
    ],
    "ERROR_FP_": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 964,
            "ref_content": "JP      ERROR_FP_           ;\"Exp range\""
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1828,
            "ref_content": "JP      ERROR_FP_           ;\"Too big\""
        }
    ],
    "ERRTRP": [],
    "ERRTXT": [],
    "ERRV": [
        {
            "ref_file": "eval.asm",
            "ref_line": 121,
            "ref_content": "DW24\tERRV\t\t\t; ERR"
        }
    ],
    "ERRWDS": [],
    "ESCAPE": [
        {
            "ref_file": "patch.asm",
            "ref_line": 275,
            "ref_content": "JP\tESCAPE\t\t\t; Jump to the ESCAPE error routine in exec.asm"
        }
    ],
    "ESCDIS": [],
    "ESCSET": [
        {
            "ref_file": "interrupts.asm",
            "ref_line": 73,
            "ref_content": "CALL\t\tZ, ESCSET\t\t\t; Yes, so set the escape flags"
        }
    ],
    "ESCTEST": [
        {
            "ref_file": "patch.asm",
            "ref_line": 268,
            "ref_content": "TRAP:\t\t\tCALL\tESCTEST\t\t\t; Read keyboard, test for ESC, set FLAGS"
        }
    ],
    "EVAL_": [
        {
            "ref_file": "eval.asm",
            "ref_line": 122,
            "ref_content": "DW24\tEVAL_\t\t\t; EVAL"
        }
    ],
    "EXIT_": [],
    "EXIT_FP_": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 66,
            "ref_content": "JR      EXIT_FP_"
        }
    ],
    "EXP": [
        {
            "ref_file": "eval.asm",
            "ref_line": 123,
            "ref_content": "DW24\tEXP\t\t\t; EXP"
        }
    ],
    "EXP0": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 600,
            "ref_content": "JP      EXP0"
        }
    ],
    "EXP1": [],
    "EXP2": [],
    "EXP3": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1008,
            "ref_content": "JR      EXP3"
        }
    ],
    "EXP3S3": [],
    "EXP4": [],
    "EXPR": [
        {
            "ref_file": "eval.asm",
            "ref_line": 365,
            "ref_content": "EXPRN:\t\t\tCALL    EXPR\t\t\t; Evaluate expression"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 372,
            "ref_content": "EXPRI:\t\t\tCALL    EXPR\t\t\t; Evaluate the expression"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 379,
            "ref_content": "EXPRS:\t\t\tCALL    EXPR\t\t\t; Evaluate the expression"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 409,
            "ref_content": "ITEM1:\t\t\tCALL    EXPR            \t; Evaluate the expression"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1013,
            "ref_content": "CALL    EXPR"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 392,
            "ref_content": "FNEND:\t\t\tCALL    EXPR            ;FUNCTION RESULT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 566,
            "ref_content": "CALL    EXPR            ;ITEM TO PRINT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 636,
            "ref_content": "CALL    EXPR            ;VARIABLE TYPE"
        }
    ],
    "EXPR0A": [
        {
            "ref_file": "eval.asm",
            "ref_line": 206,
            "ref_content": "JR      EXPR0A          \t; And continue"
        }
    ],
    "EXPR0B": [],
    "EXPR1": [
        {
            "ref_file": "eval.asm",
            "ref_line": 197,
            "ref_content": "EXPR:\t\t\tCALL    EXPR1\t\t\t; Get first operator by calling Level 6"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 204,
            "ref_content": "CALL    EXPR1           \t; Get second operand"
        }
    ],
    "EXPR1A": [
        {
            "ref_file": "eval.asm",
            "ref_line": 216,
            "ref_content": "JR      EXPR1A\t\t\t; And continue"
        }
    ],
    "EXPR2": [
        {
            "ref_file": "eval.asm",
            "ref_line": 210,
            "ref_content": "EXPR1:\t\t\tCALL    EXPR2\t\t\t; Get first operator by calling Level 5"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 214,
            "ref_content": "CALL    EXPR2\t\t\t; Get second operand"
        }
    ],
    "EXPR2B": [],
    "EXPR2C": [],
    "EXPR2S": [],
    "EXPR3": [
        {
            "ref_file": "eval.asm",
            "ref_line": 220,
            "ref_content": "EXPR2:\t\t\tCALL    EXPR3\t\t\t; Get first operator by calling Level 4"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 242,
            "ref_content": "CALL    EXPR3"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 251,
            "ref_content": "CALL    EXPR3           \t; Get the second string"
        }
    ],
    "EXPR3A": [
        {
            "ref_file": "eval.asm",
            "ref_line": 291,
            "ref_content": "JR      EXPR3A\t\t\t; And continue"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 330,
            "ref_content": "JR      EXPR3A\t\t\t; And continue"
        }
    ],
    "EXPR3B": [],
    "EXPR3S": [],
    "EXPR4": [
        {
            "ref_file": "eval.asm",
            "ref_line": 280,
            "ref_content": "EXPR3:\t\t\tCALL    EXPR4\t\t\t; Get first operator by calling Level 3"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 289,
            "ref_content": "CALL    EXPR4\t\t\t; Fetch the second operator"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 296,
            "ref_content": "CALL    EXPR4           \t; Fetch the second operator"
        }
    ],
    "EXPR4A": [
        {
            "ref_file": "eval.asm",
            "ref_line": 346,
            "ref_content": "JR      EXPR4A"
        }
    ],
    "EXPR4B": [],
    "EXPR5": [
        {
            "ref_file": "eval.asm",
            "ref_line": 334,
            "ref_content": "EXPR4:\t\t\tCALL    EXPR5\t\t\t; Get first operator by calling Level 2"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 344,
            "ref_content": "CALL    EXPR5"
        }
    ],
    "EXPR5A": [
        {
            "ref_file": "eval.asm",
            "ref_line": 361,
            "ref_content": "JR      EXPR5A\t\t\t; And continue"
        }
    ],
    "EXPRI": [
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 61,
            "ref_content": "CALL    EXPRI"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 74,
            "ref_content": "CALL    EXPRI      \t\t; Get X coordinate"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 78,
            "ref_content": "CALL\tEXPRI\t\t\t; Get Y coordinate"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 106,
            "ref_content": "POINT:\t\t\tCALL    EXPRI      \t\t; Get X coordinate"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 110,
            "ref_content": "CALL\tEXPRI\t\t\t; Get Y coordinate"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 139,
            "ref_content": "COLOUR:\t\t\tCALL\tEXPRI\t\t\t; The colour / mode"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 152,
            "ref_content": "CALL\tEXPRI\t\t\t; Parse R (OR P)"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 169,
            "ref_content": "CALL\tEXPRI\t\t\t; Parse G"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 174,
            "ref_content": "CALL\tEXPRI\t\t\t; Parse B"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 188,
            "ref_content": "GCOL:\t\t\tCALL\tEXPRI\t\t\t; Parse MODE"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 194,
            "ref_content": "CALL\tEXPRI\t\t\t; Parse Colour"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 206,
            "ref_content": "PLOT:\t\t\tCALL\tEXPRI\t\t; Parse mode"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1106,
            "ref_content": "CALL    EXPRI\t\t\t; Get the third (numeric) parameter - the starting position"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1265,
            "ref_content": "CALL    EXPRI\t\t\t; Get the second expression"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1296,
            "ref_content": "CALL    EXPRI\t\t\t; Get the second expression"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1336,
            "ref_content": "STRING_:\t\tCALL    EXPRI\t\t\t; Get number of times to replicate"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 462,
            "ref_content": "CALL    EXPRI           \t; Fetch the size of this dimension"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 548,
            "ref_content": "CALL    EXPRI\t\t\t; Get the number of bytes to store"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 680,
            "ref_content": "CALL    EXPRI"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 797,
            "ref_content": "CALL    EXPRI\t\t\t; Fetch the expression"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1317,
            "ref_content": "IF_:\t\t\tCALL    EXPRI"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1391,
            "ref_content": "CALL    EXPRI"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1400,
            "ref_content": "CALL    EXPRI"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1409,
            "ref_content": "CALL    EXPRI"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1423,
            "ref_content": "CALL    EXPRI"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1431,
            "ref_content": "CALL    EXPRI\t\t\t; Load the expression into registers"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1463,
            "ref_content": "WIDTHV:\t\t\tCALL    EXPRI"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1480,
            "ref_content": "CALL    EXPRI"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1516,
            "ref_content": "call EXPRI"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1544,
            "ref_content": "CALL    EXPRI           \t; Feth the data"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1562,
            "ref_content": "CALL_:\t\t\tCALL    EXPRI           \t; Fetch the address"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1656,
            "ref_content": "PUT:\t\t\tCALL    EXPRI           ;PORT ADDRESS"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1660,
            "ref_content": "CALL    EXPRI           ;DATA"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2024,
            "ref_content": "CALL    EXPRI"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2043,
            "ref_content": "CALL    EXPRI"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2836,
            "ref_content": "CALL    EXPRI"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 587,
            "ref_content": "CALL    EXPRI\t\t\t; Get expr"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1506,
            "ref_content": "CALL    EXPRI\t\t\t; Get the subscript"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 970,
            "ref_content": "EXPR_W2:\t\tCALL\tEXPRI\t\t\t; Get first parameter"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 974,
            "ref_content": "CALL\tEXPRI\t\t\t; Get second parameter"
        }
    ],
    "EXPRN": [
        {
            "ref_file": "exec.asm",
            "ref_line": 829,
            "ref_content": "CALL    EXPRN           \t; Fetch the LIMIT expression value"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 848,
            "ref_content": "CALL    EXPRN          \t\t; Fetch the STEP expression value"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1288,
            "ref_content": "CALL    EXPRN"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1681,
            "ref_content": "CALL    EXPRN"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1843,
            "ref_content": "CALL    EXPRN           \t; At this point it is numeric, so get the numeric expression value"
        }
    ],
    "EXPRNG": [],
    "EXPRS": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1092,
            "ref_content": "CALL    EXPRS           \t; Get the second string expression"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1342,
            "ref_content": "CALL    EXPRS\t\t\t; Get the string"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1621,
            "ref_content": "EXPRSC:\t\t\tCALL    EXPRS"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 224,
            "ref_content": "CHAIN:\t\t\tCALL    EXPRS\t\t\t; Get the filename"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 317,
            "ref_content": "CLI:\t\t\tCALL    EXPRS"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 362,
            "ref_content": "CALL    EXPRS"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1418,
            "ref_content": "CALL    EXPRS"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1856,
            "ref_content": "ARGUE2:\t\t\tCALL    EXPRS\t\t\t; At this point it is a string variable, so get the string expression value"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2676,
            "ref_content": "CALL    EXPRS"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 902,
            "ref_content": "LOAD:\t\t\tCALL    EXPRS           \t; Get the filename"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 912,
            "ref_content": "CALL    EXPRS           \t; Get the filename"
        }
    ],
    "EXPRSC": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1090,
            "ref_content": "INSTR:\t\t\tCALL    EXPRSC\t\t\t; Get the first string expression"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1263,
            "ref_content": "MIDS:\t\t\tCALL    EXPRSC\t\t\t; Get the first string expression"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1294,
            "ref_content": "LEFTS:\t\t\tCALL    EXPRSC\t\t\t; Get the first string expression"
        }
    ],
    "EXPR_W2": [
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 210,
            "ref_content": "CALL\tEXPR_W2\t\t; Parse X and Y"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 222,
            "ref_content": "MOVE:\t\t\tCALL\tEXPR_W2\t\t; Parse X and Y"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 229,
            "ref_content": "DRAW:\t\t\tCALL\tEXPR_W2\t\t; Get X1 and Y1"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 242,
            "ref_content": "CALL\tEXPR_W2\t\t; Get X2 and Y2"
        },
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 32,
            "ref_content": "SOUND:\t\t\tCALL\tEXPR_W2\t\t\t; DE: Channel/Control, HL: Volume"
        },
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 37,
            "ref_content": "CALL\tEXPR_W2\t\t\t; DE: Pitch, HL: Duration"
        }
    ],
    "EXP_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 130,
            "ref_content": "DW24  EXP_FP             ;EXP"
        }
    ],
    "EXT": [
        {
            "ref_file": "eval.asm",
            "ref_line": 124,
            "ref_content": "DW24\tEXT\t\t\t; EXT"
        }
    ],
    "EXTERR": [
        {
            "ref_file": "eval.asm",
            "ref_line": 464,
            "ref_content": "CALL\tEXTERR"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 759,
            "ref_content": "CALL    EXTERR          \t; Otherwise throw error: \"RENUMBER space'"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1857,
            "ref_content": "CALL    EXTERR\t\t\t; Throw error: \"Silly\""
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1926,
            "ref_content": "CALL    EXTERR          \t; \"LINE space\""
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 354,
            "ref_content": "CALL    EXTERR"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 670,
            "ref_content": "JP\tEXTERR\t\t\t; Trigger an external error"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 769,
            "ref_content": "CALL    EXTERR"
        },
        {
            "ref_file": "sorry.asm",
            "ref_line": 24,
            "ref_content": "CALL    EXTERR"
        }
    ],
    "EXT_DEFAULT": [
        {
            "ref_file": "patch.asm",
            "ref_line": 586,
            "ref_content": "CALL\tEXT_DEFAULT\t\t; Tack on the extension .BBC if not specified"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 683,
            "ref_content": "CALL\tEXT_DEFAULT\t\t; Tack on the extension .BBC if not specified"
        }
    ],
    "EXT_EX": [],
    "EXT_HANDLER": [
        {
            "ref_file": "patch.asm",
            "ref_line": 587,
            "ref_content": "CALL\tEXT_HANDLER\t\t; Get the default handler"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 684,
            "ref_content": "CALL\tEXT_HANDLER\t\t; Get the default handler"
        }
    ],
    "EXT_HANDLER_1": [
        {
            "ref_file": "patch.asm",
            "ref_line": 766,
            "ref_content": "JR\tNZ, EXT_HANDLER_1\t; No, so loop"
        }
    ],
    "EXT_HANDLER_2": [
        {
            "ref_file": "patch.asm",
            "ref_line": 756,
            "ref_content": "JR\tZ, EXT_HANDLER_2\t; We have a match!"
        }
    ],
    "EXT_LOOKUP": [
        {
            "ref_file": "patch.asm",
            "ref_line": 738,
            "ref_content": "LD\tDE, EXT_LOOKUP\t\t; Get the first (default extension)"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 751,
            "ref_content": "LD\tDE, EXT_LOOKUP\t\t; The lookup table"
        }
    ],
    "EZ80SFS_1": [],
    "EZ80SFS_2": [],
    "EZ80SFS_ADL0": [],
    "EZ80SFS_ADL1": [],
    "EZ80SF_FULL": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2538,
            "ref_content": "GROUP13_1:\t\tCALL\tEZ80SF_FULL\t\t; Evaluate the suffix"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2546,
            "ref_content": "CALL\tEZ80SF_FULL\t\t; Evaluate the suffix"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2570,
            "ref_content": "CALL\tEZ80SF_FULL\t\t; Evaluate the suffix"
        }
    ],
    "EZ80SF_OK": [],
    "EZ80SF_PART": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2520,
            "ref_content": "CALL\tEZ80SF_PART\t\t; Evaluate the suffix (just LIL and SIS)"
        }
    ],
    "EZ80SF_TABLE": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2714,
            "ref_content": "CALL\tEZ80SF_TABLE\t\t; Get the correct shortcut table in HL based upon the ADL mode"
        }
    ],
    "FADD": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 166,
            "ref_content": "DW24  FADD            ;+"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 288,
            "ref_content": "JR      FADD"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 295,
            "ref_content": "JR      FADD"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1092,
            "ref_content": "CALL    FADD"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2033,
            "ref_content": "CALL    FADD"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2064,
            "ref_content": "CALL    FADD\t\t\t\t; No, so add"
        }
    ],
    "FADD3": [],
    "FADD4": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 329,
            "ref_content": "JR      FADD4"
        }
    ],
    "FAND": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 155,
            "ref_content": "RTABLE:\t\t\tDW24  FAND            ;AND (FLOATING-POINT)"
        }
    ],
    "FBDIV": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 156,
            "ref_content": "DW24  FBDIV           ;DIV"
        }
    ],
    "FCOMP0": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1867,
            "ref_content": "JR      FCOMP0"
        }
    ],
    "FCOMP1": [],
    "FCOMP_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 153,
            "ref_content": "DW24  FCOMP_FP           ;COMPARE"
        }
    ],
    "FCP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 605,
            "ref_content": "FLT:\t\t\tCALL    FCP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 611,
            "ref_content": "FGT:\t\t\tCALL    FCP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 618,
            "ref_content": "FGE:\t\t\tCALL    FCP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 624,
            "ref_content": "FLE:\t\t\tCALL    FCP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 631,
            "ref_content": "FNE:\t\t\tCALL    FCP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 637,
            "ref_content": "FEQ:\t\t\tCALL    FCP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1866,
            "ref_content": "CALL    FCP"
        }
    ],
    "FCP0": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1140,
            "ref_content": "CALL    FCP0            ;COMPARE"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1148,
            "ref_content": "CALL    FCP0            ;COMPARE"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1258,
            "ref_content": "CALL    FCP0"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1910,
            "ref_content": "CALL    FCP0"
        }
    ],
    "FCP1": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1888,
            "ref_content": "FCP:\t\t\tCALL    FCP1"
        }
    ],
    "FDIV": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 170,
            "ref_content": "DW24  FDIV            ;/"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 710,
            "ref_content": "CALL    FDIV"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 839,
            "ref_content": "CALL    FDIV"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1018,
            "ref_content": "JP      FDIV            ;RECIPROCAL"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1250,
            "ref_content": "CALL    FDIV"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1490,
            "ref_content": "CALL    FDIV            ;SCALE"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1496,
            "ref_content": "CALL    FDIV"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2040,
            "ref_content": "JP      FDIV"
        }
    ],
    "FEOR": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 157,
            "ref_content": "DW24  FEOR            ;EOR"
        }
    ],
    "FEQ": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 164,
            "ref_content": "DW24  FEQ             ;="
        }
    ],
    "FETCHS": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1294,
            "ref_content": "READ1:\t\t\tCALL    FETCHS"
        }
    ],
    "FFOBJID_SIZE": [
        {
            "ref_file": "mos_api.inc",
            "ref_line": 251,
            "ref_content": "FIL.flag:         EQU FFOBJID_SIZE       ; File status flags"
        },
        {
            "ref_file": "mos_api.inc",
            "ref_line": 252,
            "ref_content": "FIL.err:          EQU FFOBJID_SIZE + 1   ; Abort flag (error code)"
        },
        {
            "ref_file": "mos_api.inc",
            "ref_line": 253,
            "ref_content": "FIL.fptr:         EQU FFOBJID_SIZE + 2   ; File read/write pointer"
        },
        {
            "ref_file": "mos_api.inc",
            "ref_line": 254,
            "ref_content": "FIL.clust:        EQU FFOBJID_SIZE + 6   ; Current cluster of fptr"
        },
        {
            "ref_file": "mos_api.inc",
            "ref_line": 255,
            "ref_content": "FIL.sect:         EQU FFOBJID_SIZE + 10  ; Sector number appearing in buf[]"
        },
        {
            "ref_file": "mos_api.inc",
            "ref_line": 256,
            "ref_content": "FIL.dir_sect:     EQU FFOBJID_SIZE + 14  ; Sector number containing the directory entry"
        },
        {
            "ref_file": "mos_api.inc",
            "ref_line": 257,
            "ref_content": "FIL.dir_ptr:      EQU FFOBJID_SIZE + 18  ; Pointer to the directory entry in the win[]"
        },
        {
            "ref_file": "mos_api.inc",
            "ref_line": 258,
            "ref_content": "FIL_SIZE:         EQU FFOBJID_SIZE + 21  ; Total size of FIL structure"
        },
        {
            "ref_file": "mos_api.inc",
            "ref_line": 262,
            "ref_content": "DIR.dptr:         EQU FFOBJID_SIZE       ; Current read/write offset"
        },
        {
            "ref_file": "mos_api.inc",
            "ref_line": 263,
            "ref_content": "DIR.clust:        EQU FFOBJID_SIZE + 4   ; Current cluster"
        },
        {
            "ref_file": "mos_api.inc",
            "ref_line": 264,
            "ref_content": "DIR.sect:         EQU FFOBJID_SIZE + 8   ; Current sector"
        },
        {
            "ref_file": "mos_api.inc",
            "ref_line": 265,
            "ref_content": "DIR.dir:          EQU FFOBJID_SIZE + 12  ; Pointer to the directory item in the win[]"
        },
        {
            "ref_file": "mos_api.inc",
            "ref_line": 266,
            "ref_content": "DIR.fn:           EQU FFOBJID_SIZE + 15  ; SFN (in/out) {body[8],ext[3],status[1]}"
        },
        {
            "ref_file": "mos_api.inc",
            "ref_line": 267,
            "ref_content": "DIR.blk_ofs:      EQU FFOBJID_SIZE + 27  ; Offset of current entry block being processed"
        },
        {
            "ref_file": "mos_api.inc",
            "ref_line": 268,
            "ref_content": "DIR_SIZE:         EQU FFOBJID_SIZE + 31  ; Total size of DIR structure"
        }
    ],
    "FFOR": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 159,
            "ref_content": "DW24  FFOR             ;OR"
        }
    ],
    "FGE": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 162,
            "ref_content": "DW24  FGE             ;>="
        }
    ],
    "FGT": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 167,
            "ref_content": "DW24  FGT             ;>"
        }
    ],
    "FILINFO_SIZE": [],
    "FILL": [
        {
            "ref_file": "exec.asm",
            "ref_line": 618,
            "ref_content": "CALL    FILL"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2039,
            "ref_content": "JR      FILL"
        }
    ],
    "FILL1": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2063,
            "ref_content": "DJNZ    FILL1"
        }
    ],
    "FIL_SIZE": [],
    "FIND": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2349,
            "ref_content": "CALL    FIND\t\t\t; Find the opcode"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2699,
            "ref_content": "CALL\tFIND\t\t\t; Look up the operand"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2712,
            "ref_content": "CALL\tFIND \t\t\t; Look up the operand"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2715,
            "ref_content": "CALL\tFIND"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2807,
            "ref_content": "CALL    FIND\t\t\t; Find the operand"
        }
    ],
    "FIND0": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2925,
            "ref_content": "JR      FIND0"
        }
    ],
    "FIND1": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2939,
            "ref_content": "JR      FIND1"
        }
    ],
    "FIND2": [],
    "FIND3": [],
    "FIND4": [],
    "FIND5": [],
    "FIND6": [],
    "FINDL": [
        {
            "ref_file": "exec.asm",
            "ref_line": 742,
            "ref_content": "CALL    FINDL\t\t\t; HL: Line number - Find the line"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1373,
            "ref_content": "CALL    FINDL           ;SEARCH FOR LINE"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 309,
            "ref_content": "CALL    FINDL\t\t\t; Find the address of the line"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1875,
            "ref_content": "CALL    FINDL\t\t\t; HL: Find the address of the line"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 445,
            "ref_content": "CALL\tFINDL\t\t\t; HL: Address in RAM of tokenised line"
        }
    ],
    "FINDL1": [
        {
            "ref_file": "main.asm",
            "ref_line": 1363,
            "ref_content": "JP      FINDL1\t\t\t; And loop"
        }
    ],
    "FIX": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 592,
            "ref_content": "CALL    FIX"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 763,
            "ref_content": "CALL    FIX"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1611,
            "ref_content": "CALL    FIX"
        }
    ],
    "FIX1": [],
    "FIX2": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 183,
            "ref_content": "FAND:\t\t\tCALL    FIX2"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 203,
            "ref_content": "FEOR:\t\t\tCALL    FIX2"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 223,
            "ref_content": "FFOR:\t\t\tCALL    FIX2"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 243,
            "ref_content": "FMOD:\t\t\tCALL    FIX2"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 270,
            "ref_content": "FBDIV:\t\t\tCALL    FIX2"
        }
    ],
    "FLAGS": [],
    "FLE": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 160,
            "ref_content": "DW24  FLE             ;<="
        }
    ],
    "FLO48": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 333,
            "ref_content": "CALL    FLO48"
        }
    ],
    "FLOAT2": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 284,
            "ref_content": "CALL    FLOAT2"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 303,
            "ref_content": "CALL    FLOAT2"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 357,
            "ref_content": "IDIV:\t\t\tCALL    FLOAT2"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1865,
            "ref_content": "FCOMP1:\t\t\tCALL    FLOAT2          ;Float both"
        }
    ],
    "FLOATA": [],
    "FLOAT_": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1083,
            "ref_content": "CALL    FLOAT_"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1477,
            "ref_content": "CALL    FLOAT_"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1766,
            "ref_content": "CALL    FLOAT_"
        }
    ],
    "FLT": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 163,
            "ref_content": "DW24  FLT             ;<"
        }
    ],
    "FMOD": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 158,
            "ref_content": "DW24  FMOD            ;MOD"
        }
    ],
    "FMUL": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 165,
            "ref_content": "DW24  FMUL            ;*"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 599,
            "ref_content": "CALL    FMUL"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 702,
            "ref_content": "CALL    FMUL"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 894,
            "ref_content": "CALL    FMUL"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1069,
            "ref_content": "CALL    FMUL"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1086,
            "ref_content": "CALL    FMUL"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1105,
            "ref_content": "CALL    FMUL"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1115,
            "ref_content": "CALL    FMUL"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1182,
            "ref_content": "CALL    FMUL"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1241,
            "ref_content": "CALL    FMUL"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1483,
            "ref_content": "CALL    FMUL            ;SCALE"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2003,
            "ref_content": "CALL    FMUL"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2056,
            "ref_content": "POLY1:\t\t\tCALL    FMUL"
        }
    ],
    "FN": [
        {
            "ref_file": "main.asm",
            "ref_line": 1609,
            "ref_content": "CP      FN\t\t\t; Is it the token FN?"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 2024,
            "ref_content": "LEXANA:\t\t\tCP      FN\t\t\t; If the token is FN"
        }
    ],
    "FNCHK": [],
    "FNE": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 161,
            "ref_content": "DW24  FNE             ;<>"
        }
    ],
    "FNEND": [],
    "FNEND0": [],
    "FNEND1": [],
    "FNEND5": [
        {
            "ref_file": "exec.asm",
            "ref_line": 427,
            "ref_content": "JR      FNEND5"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 435,
            "ref_content": "JR      FNEND5"
        }
    ],
    "FNPTR": [],
    "FN_EX": [
        {
            "ref_file": "eval.asm",
            "ref_line": 126,
            "ref_content": "DW24\tFN_EX\t\t\t; FN"
        }
    ],
    "FONE_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 142,
            "ref_content": "DW24  FONE_FP            ;FONE"
        }
    ],
    "FOR": [
        {
            "ref_file": "main.asm",
            "ref_line": 1187,
            "ref_content": "CP      FOR\t\t\t; Is it FOR?"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1252,
            "ref_content": "CP      FOR\t\t\t; If the token is FOR"
        }
    ],
    "FOR1": [],
    "FORCHK": [],
    "FORMAT": [
        {
            "ref_file": "exec.asm",
            "ref_line": 632,
            "ref_content": "CALL    FORMAT          ;SPC, TAB, '"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1206,
            "ref_content": "INPUT6:\t\t\tCALL    FORMAT          ;SPC, TAB, '"
        }
    ],
    "FORVAR": [],
    "FOR_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 186,
            "ref_content": "DW24  FOR_EX\t\t\t; E3H"
        }
    ],
    "FPI180": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 701,
            "ref_content": "DEG_FP:\t\t\tCALL    FPI180"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 709,
            "ref_content": "RAD_FP:\t\t\tCALL    FPI180"
        }
    ],
    "FPOW": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 169,
            "ref_content": "DW24  FPOW            ;^"
        }
    ],
    "FPOW0": [],
    "FPOW1": [],
    "FPP": [
        {
            "ref_file": "eval.asm",
            "ref_line": 619,
            "ref_content": "CALL    FPP"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 971,
            "ref_content": "FPP1:\t\t\tCALL    FPP"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1082,
            "ref_content": "CALL    FPP             ;MULTIPLY"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1489,
            "ref_content": "CALL    FPP"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1667,
            "ref_content": "CALL    FPP"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 899,
            "ref_content": "CALL    FPP             \t; Add the STEP"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 911,
            "ref_content": "CALL    FPP             \t; Test against the limit"
        }
    ],
    "FPP1": [
        {
            "ref_file": "eval.asm",
            "ref_line": 872,
            "ref_content": "JR      FPP1"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 979,
            "ref_content": "JR      FPP1"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 984,
            "ref_content": "JR      FPP1"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 994,
            "ref_content": "JR      FPP1"
        }
    ],
    "FPPN": [
        {
            "ref_file": "eval.asm",
            "ref_line": 878,
            "ref_content": "JR      FPPN"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 884,
            "ref_content": "JR      FPPN"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 890,
            "ref_content": "JR      FPPN"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 896,
            "ref_content": "JR      FPPN"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 902,
            "ref_content": "JR      FPPN"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 908,
            "ref_content": "JR      FPPN"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 914,
            "ref_content": "JR      FPPN"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 920,
            "ref_content": "JR      FPPN"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 926,
            "ref_content": "JR      FPPN"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 932,
            "ref_content": "JR      FPPN"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 938,
            "ref_content": "JR      FPPN"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 944,
            "ref_content": "JR      FPPN"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 950,
            "ref_content": "JR      FPPN"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 956,
            "ref_content": "JR      FPPN"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 962,
            "ref_content": "JR      FPPN"
        }
    ],
    "FREE": [],
    "FSUB": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 168,
            "ref_content": "DW24  FSUB            ;-"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2038,
            "ref_content": "CALL    FSUB"
        }
    ],
    "FTABLE": [],
    "FTEST_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 152,
            "ref_content": "DW24  FTEST_FP           ;TEST"
        }
    ],
    "FUNTBL": [],
    "FUNTBL_END": [],
    "FUNTOK": [
        {
            "ref_file": "eval.asm",
            "ref_line": 531,
            "ref_content": "CP      FUNTOK\t\t\t; If it is in range, then"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1691,
            "ref_content": "SUB     FUNTOK"
        }
    ],
    "G9": [],
    "GCOL": [
        {
            "ref_file": "exec.asm",
            "ref_line": 189,
            "ref_content": "DW24  GCOL\t\t\t; E6H"
        }
    ],
    "GET": [
        {
            "ref_file": "eval.asm",
            "ref_line": 127,
            "ref_content": "DW24\tGET\t\t\t; GET"
        }
    ],
    "GET0": [],
    "GET1": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1197,
            "ref_content": "JR      GET1"
        }
    ],
    "GETCSR": [
        {
            "ref_file": "eval.asm",
            "ref_line": 683,
            "ref_content": "POS:\t\t\tCALL    GETCSR\t\t\t; Return the horizontal cursor position"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 687,
            "ref_content": "VPOS:\t\t\tCALL    GETCSR\t\t\t; Return the vertical cursor position"
        }
    ],
    "GETDAT": [],
    "GETDEF": [
        {
            "ref_file": "exec.asm",
            "ref_line": 966,
            "ref_content": "CALL    GETDEF\t\t\t; Search for this PROC/FN entry in the dynamic area"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 985,
            "ref_content": "CALL    GETDEF\t\t\t; Search for this PROC/FN entry in the dynamic area"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1003,
            "ref_content": "CALL    GETDEF\t\t\t; Search for this PROC/FN entry in the dynamic area"
        }
    ],
    "GETEX1": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1531,
            "ref_content": "JR      GETEX1"
        }
    ],
    "GETEX2": [],
    "GETEXP": [],
    "GETEXT": [
        {
            "ref_file": "eval.asm",
            "ref_line": 802,
            "ref_content": "CALL    GETEXT"
        }
    ],
    "GETIME": [
        {
            "ref_file": "eval.asm",
            "ref_line": 815,
            "ref_content": "CALL    GETIME"
        }
    ],
    "GETIMS": [
        {
            "ref_file": "eval.asm",
            "ref_line": 827,
            "ref_content": "CALL    GETIMS"
        }
    ],
    "GETPTR": [
        {
            "ref_file": "eval.asm",
            "ref_line": 806,
            "ref_content": "CALL    GETPTR"
        }
    ],
    "GETS": [
        {
            "ref_file": "eval.asm",
            "ref_line": 152,
            "ref_content": "DW24\tGETS\t\t\t; GETS"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 717,
            "ref_content": "GET0:\t\t\tCALL    GETS\t\t\t; Read the keyboard character"
        }
    ],
    "GETSCHR": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1204,
            "ref_content": "JP\tZ, GETSCHR\t;CALL FUNCTION IN PATCH.Z80"
        }
    ],
    "GETV0": [
        {
            "ref_file": "main.asm",
            "ref_line": 1559,
            "ref_content": "JR      GETV0"
        }
    ],
    "GETV2": [],
    "GETV3": [
        {
            "ref_file": "main.asm",
            "ref_line": 1500,
            "ref_content": "JR      GETV3"
        }
    ],
    "GETV4": [],
    "GETV5": [],
    "GETV6": [],
    "GETV7": [
        {
            "ref_file": "main.asm",
            "ref_line": 1550,
            "ref_content": "JR      GETV7"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1553,
            "ref_content": "JR      GETV7"
        }
    ],
    "GETV8": [],
    "GETV9": [],
    "GETVA": [
        {
            "ref_file": "main.asm",
            "ref_line": 1562,
            "ref_content": "JR      GETVA"
        }
    ],
    "GETVAR": [
        {
            "ref_file": "eval.asm",
            "ref_line": 540,
            "ref_content": "ITEM2:\t\t\tCALL    GETVAR\t\t\t; VARIABLE"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 382,
            "ref_content": "VAR_:\t\t\tCALL    GETVAR"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 440,
            "ref_content": "DIM_EX:\t\t\tCALL    GETVAR          \t; Get the variable"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1076,
            "ref_content": "LOCAL2:\t\t\tCALL    GETVAR\t\t\t; Get the variable location"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1673,
            "ref_content": "ASSIGN:\t\t\tCALL    GETVAR          \t; Try to get the variable"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1832,
            "ref_content": "CALL    GETVAR\t\t\t; Get the location of the variable in HL/IX"
        }
    ],
    "GETVX": [],
    "GETVZ": [],
    "GOSCHK": [],
    "GOSUB": [
        {
            "ref_file": "main.asm",
            "ref_line": 2062,
            "ref_content": "DB\tGOSUB"
        }
    ],
    "GOSUB1": [
        {
            "ref_file": "exec.asm",
            "ref_line": 722,
            "ref_content": "JR      GOSUB1"
        }
    ],
    "GOSUB_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 187,
            "ref_content": "DW24  GOSUB_EX\t\t\t; E4H"
        }
    ],
    "GOTO": [
        {
            "ref_file": "main.asm",
            "ref_line": 2061,
            "ref_content": "LIST1:\t\t\tDB\tGOTO"
        }
    ],
    "GOTO1": [
        {
            "ref_file": "exec.asm",
            "ref_line": 757,
            "ref_content": "CALL    GOTO1           \t; Push the marker (address of GOSCHK) onto the execution stack and GOTO the line number"
        }
    ],
    "GOTO2": [],
    "GOTO_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 188,
            "ref_content": "DW24  GOTO_EX\t\t\t; E5H"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1327,
            "ref_content": "JP      GOTO_EX            ;LINE NO. FOLLOWS"
        }
    ],
    "GPIOB_M0": [
        {
            "ref_file": "gpio.asm",
            "ref_line": 24,
            "ref_content": "DW\tGPIOB_M0\t; Output"
        }
    ],
    "GPIOB_M1": [
        {
            "ref_file": "gpio.asm",
            "ref_line": 25,
            "ref_content": "DW\tGPIOB_M1\t; Input"
        }
    ],
    "GPIOB_M2": [
        {
            "ref_file": "gpio.asm",
            "ref_line": 26,
            "ref_content": "DW\tGPIOB_M2\t; Open Drain IO"
        }
    ],
    "GPIOB_M3": [
        {
            "ref_file": "gpio.asm",
            "ref_line": 27,
            "ref_content": "DW\tGPIOB_M3\t; Open Source IO"
        }
    ],
    "GPIOB_M4": [
        {
            "ref_file": "gpio.asm",
            "ref_line": 28,
            "ref_content": "DW\tGPIOB_M4\t; Interrupt, Dual Edge"
        }
    ],
    "GPIOB_M5": [
        {
            "ref_file": "gpio.asm",
            "ref_line": 29,
            "ref_content": "DW\tGPIOB_M5\t; Alt Function"
        }
    ],
    "GPIOB_M6": [
        {
            "ref_file": "gpio.asm",
            "ref_line": 30,
            "ref_content": "DW\tGPIOB_M6\t; Interrupt, Active Low"
        }
    ],
    "GPIOB_M7": [
        {
            "ref_file": "gpio.asm",
            "ref_line": 31,
            "ref_content": "DW\tGPIOB_M7\t; Interrupt, Active High"
        }
    ],
    "GPIOB_M8": [
        {
            "ref_file": "gpio.asm",
            "ref_line": 32,
            "ref_content": "DW\tGPIOB_M8\t; Interrupt, Falling Edge"
        }
    ],
    "GPIOB_M9": [
        {
            "ref_file": "gpio.asm",
            "ref_line": 33,
            "ref_content": "DW\tGPIOB_M9\t; Interrupt, Rising Edge"
        }
    ],
    "GPIOB_SETMODE": [],
    "GROUP02": [],
    "GROUP04": [],
    "GROUP04_1": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2415,
            "ref_content": "JR      GROUP04_1"
        }
    ],
    "GROUP05": [],
    "GROUP05_1": [],
    "GROUP05_HL": [],
    "GROUP07": [],
    "GROUP08": [],
    "GROUP09": [],
    "GROUP11": [],
    "GROUP12": [],
    "GROUP12_1": [],
    "GROUP13": [],
    "GROUP13_1": [],
    "GROUP14": [],
    "GROUP15": [],
    "GROUP15_1": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2539,
            "ref_content": "CALL    GROUP15_1\t\t; Output the opcode (with conditions)"
        }
    ],
    "GROUP16": [],
    "GROUP17": [],
    "GROUP17_1": [],
    "HEX": [],
    "HEX1": [],
    "HEX2": [
        {
            "ref_file": "eval.asm",
            "ref_line": 430,
            "ref_content": "DJNZ    HEX2\t\t\t; And loop"
        }
    ],
    "HEXDIG": [
        {
            "ref_file": "eval.asm",
            "ref_line": 420,
            "ref_content": "CALL    HEXDIG\t\t\t; Fetch the character from IY"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 436,
            "ref_content": "CALL    HEXDIG\t\t\t; Fetch the next character"
        }
    ],
    "HEXOUT": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2299,
            "ref_content": "CALL    HEXOUT"
        }
    ],
    "HEXSP": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2263,
            "ref_content": "CALL    HEXSP"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2273,
            "ref_content": "CALL    HEXSP"
        }
    ],
    "HEXST1": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1467,
            "ref_content": "JR      HEXST1"
        }
    ],
    "HEXST2": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1451,
            "ref_content": "DJNZ    HEXST2"
        }
    ],
    "HEXST3": [],
    "HEXSTR": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1436,
            "ref_content": "CALL    HEXSTR"
        }
    ],
    "HEXSTS": [],
    "HEX_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2259,
            "ref_content": "CALL\tHEX_EX"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2261,
            "ref_content": "CALL    HEX_EX"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2291,
            "ref_content": "HEXSP:\t\t\tCALL    HEX_EX"
        }
    ],
    "HIMEM": [],
    "HIMEMV": [
        {
            "ref_file": "eval.asm",
            "ref_line": 109,
            "ref_content": "DW24\tHIMEMV\t\t\t; HIMEM"
        }
    ],
    "HIMEMV_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 170,
            "ref_content": "DW24  HIMEMV_EX\t\t\t; D3H"
        }
    ],
    "HUH": [
        {
            "ref_file": "patch.asm",
            "ref_line": 503,
            "ref_content": "JP\tHUH\t\t\t; Anything else trips an error"
        }
    ],
    "IADD": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 117,
            "ref_content": "DW24  IADD            ;+"
        }
    ],
    "IAND": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 106,
            "ref_content": "DTABLE:\t\t\tDW24  IAND            ;AND (INTEGER)"
        }
    ],
    "IBDIV": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 107,
            "ref_content": "DW24  IBDIV           ;DIV"
        }
    ],
    "ICP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 607,
            "ref_content": "ILT:\t\t\tCALL    ICP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 613,
            "ref_content": "IGT:\t\t\tCALL    ICP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 620,
            "ref_content": "IGE:\t\t\tCALL    ICP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 626,
            "ref_content": "ILE:\t\t\tCALL    ICP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 633,
            "ref_content": "INE:\t\t\tCALL    ICP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 639,
            "ref_content": "IEQ:\t\t\tCALL    ICP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1858,
            "ref_content": "CALL    ICP"
        }
    ],
    "ICP0": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1041,
            "ref_content": "CALL    ICP0            ;MANTISSA>SQR(2)?"
        }
    ],
    "ICP1": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1877,
            "ref_content": "ICP:\t\t\tCALL    ICP1"
        }
    ],
    "IDIV": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 121,
            "ref_content": "DW24  IDIV            ;/"
        }
    ],
    "IEOR": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 108,
            "ref_content": "DW24  IEOR            ;EOR"
        }
    ],
    "IEQ": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 115,
            "ref_content": "DW24  IEQ             ;="
        }
    ],
    "IEQ1": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 638,
            "ref_content": "JR      IEQ1"
        }
    ],
    "IF1": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1334,
            "ref_content": "JR      IF1"
        }
    ],
    "IFNOT": [],
    "IF_": [
        {
            "ref_file": "exec.asm",
            "ref_line": 190,
            "ref_content": "DW24  IF_\t\t\t; E7H"
        }
    ],
    "IGE": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 113,
            "ref_content": "DW24  IGE             ;>="
        }
    ],
    "IGE1": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 619,
            "ref_content": "JR      IGE1"
        }
    ],
    "IGT": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 118,
            "ref_content": "DW24  IGT             ;>"
        }
    ],
    "IGT1": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 612,
            "ref_content": "JR      IGT1"
        }
    ],
    "ILE": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 111,
            "ref_content": "DW24  ILE             ;<="
        }
    ],
    "ILE1": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 625,
            "ref_content": "JR      ILE1"
        }
    ],
    "ILT": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 114,
            "ref_content": "DW24  ILT             ;<"
        }
    ],
    "ILT1": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 606,
            "ref_content": "JR      ILT1"
        }
    ],
    "IMOD": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 109,
            "ref_content": "DW24  IMOD            ;MOD"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 271,
            "ref_content": "IBDIV:\t\t\tCALL    IMOD"
        }
    ],
    "IMUL": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 116,
            "ref_content": "DW24  IMUL            ;*"
        }
    ],
    "IMUL1": [],
    "INCC": [],
    "INCREM": [],
    "IND1": [],
    "IND2_": [],
    "IND3": [],
    "IND4": [],
    "INDENT": [],
    "INE": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 112,
            "ref_content": "DW24  INE             ;<>"
        }
    ],
    "INE1": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 632,
            "ref_content": "JR      INE1"
        }
    ],
    "INKEY": [
        {
            "ref_file": "eval.asm",
            "ref_line": 128,
            "ref_content": "DW24\tINKEY\t\t\t; INKEY"
        }
    ],
    "INKEY0": [
        {
            "ref_file": "eval.asm",
            "ref_line": 704,
            "ref_content": "CALL\tINKEY0 \t\t\t; Do INKEY(n)"
        }
    ],
    "INKEY1": [
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 102,
            "ref_content": "JP\tINKEY1\t\t\t; Jump back to the GET command"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1207,
            "ref_content": "JR      INKEY1"
        }
    ],
    "INKEYM": [
        {
            "ref_file": "eval.asm",
            "ref_line": 703,
            "ref_content": "JP\tNZ, INKEYM\t\t; It's negative, so do INKEY(-n)"
        }
    ],
    "INKEYS": [
        {
            "ref_file": "eval.asm",
            "ref_line": 153,
            "ref_content": "DW24\tINKEYS\t\t\t; INKEYS"
        }
    ],
    "INPN1": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1163,
            "ref_content": "JR      INPN1"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1177,
            "ref_content": "JR      INPN1"
        }
    ],
    "INPN2": [],
    "INPN3": [],
    "INPN4": [],
    "INPUT": [
        {
            "ref_file": "exec.asm",
            "ref_line": 191,
            "ref_content": "DW24  INPUT\t\t\t; E8H"
        }
    ],
    "INPUT0": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1210,
            "ref_content": "JR      INPUT0"
        }
    ],
    "INPUT1": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1242,
            "ref_content": "JR      INPUT1"
        }
    ],
    "INPUT2": [],
    "INPUT3": [],
    "INPUT4": [],
    "INPUT5": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1237,
            "ref_content": "JR      INPUT5"
        }
    ],
    "INPUT6": [],
    "INPUT9": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1205,
            "ref_content": "JR      INPUT9"
        }
    ],
    "INPUTN": [],
    "INSTR": [
        {
            "ref_file": "eval.asm",
            "ref_line": 129,
            "ref_content": "DW24\tINSTR\t\t\t; INSTR("
        }
    ],
    "INSTR1": [],
    "INSTR2": [],
    "INT_": [
        {
            "ref_file": "eval.asm",
            "ref_line": 130,
            "ref_content": "DW24\tINT_\t\t\t; INT"
        }
    ],
    "INT_FP_": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 131,
            "ref_content": "DW24  INT_FP_            ;INT"
        }
    ],
    "IOR": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 110,
            "ref_content": "DW24  IOR             ;OR"
        }
    ],
    "IPOW": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 120,
            "ref_content": "DW24  IPOW            ;^"
        }
    ],
    "IPOW0": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 577,
            "ref_content": "JR      IPOW0"
        }
    ],
    "IPOW1": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 510,
            "ref_content": "DJNZ    IPOW1"
        }
    ],
    "IPOW2": [],
    "IPOW3": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 568,
            "ref_content": "IPOW4:\t\t\tDJNZ    IPOW3"
        }
    ],
    "IPOW4": [],
    "IPOW5": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 543,
            "ref_content": "JR      IPOW5"
        }
    ],
    "ISUB": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 119,
            "ref_content": "DW24  ISUB            ;-"
        }
    ],
    "ITEM": [
        {
            "ref_file": "eval.asm",
            "ref_line": 350,
            "ref_content": "EXPR5:\t\t\tCALL    ITEM\t\t\t; Get variable"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 357,
            "ref_content": "CALL    ITEM\t\t\t; Get second operand"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 386,
            "ref_content": "ITEMN:\t\t\tCALL    ITEM\t\t\t; Get the variable"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 393,
            "ref_content": "ITEMI:\t\t\tCALL    ITEM\t\t\t; Get the variable"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 400,
            "ref_content": "ITEMS:\t\t\tCALL    ITEM\t\t\t; Get the variable"
        }
    ],
    "ITEM1": [],
    "ITEM2": [],
    "ITEMI": [
        {
            "ref_file": "eval.asm",
            "ref_line": 700,
            "ref_content": "INKEY:\t\t\tCALL    ITEMI\t\t\t; Get the argument"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 710,
            "ref_content": "CALL    ITEMI           \t; Yes, so fetch the port address"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1048,
            "ref_content": "RND5:\t\t\tCALL    ITEMI"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1194,
            "ref_content": "CHRS:\t\t\tCALL    ITEMI"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1214,
            "ref_content": "INKEYS:\t\t\tCALL    ITEMI\t\t\t; Fetch the argument"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 716,
            "ref_content": "CALL    ITEMI           ;LINE NUMBER"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 738,
            "ref_content": "GOTO_EX:\t\t\tCALL    ITEMI           \t; Fetch the line number"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 754,
            "ref_content": "GOSUB_EX:\t\t\tCALL    ITEMI\t\t\t; Fetch the line number"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1371,
            "ref_content": "CALL    ITEMI"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1600,
            "ref_content": "USR:\t\t\tCALL    ITEMI\t\t\t; Evaluate the expression"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2053,
            "ref_content": "CALL    ITEMI"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2199,
            "ref_content": "CALL    ITEMI\t\t\t; Get the channel number"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1582,
            "ref_content": "CALL    ITEMI"
        }
    ],
    "ITEMN": [
        {
            "ref_file": "eval.asm",
            "ref_line": 472,
            "ref_content": "MINUS:\t\t\tCALL    ITEMN\t\t\t; Get the numeric argument"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 969,
            "ref_content": "CALL    ITEMN"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1435,
            "ref_content": "CALL    ITEMN"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1480,
            "ref_content": "CALL    ITEMN"
        }
    ],
    "ITEMS": [
        {
            "ref_file": "eval.asm",
            "ref_line": 720,
            "ref_content": "ASC:\t\t\tCALL    ITEMS\t\t\t; Get the string argument argument"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 727,
            "ref_content": "LEN:\t\t\tCALL    ITEMS\t\t\t; Get the string argument"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 787,
            "ref_content": "CALL    ITEMS           \t; Fetch the filename"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 989,
            "ref_content": "VAL:\t\t\tCALL    ITEMS"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 999,
            "ref_content": "EVAL_:\t\t\tCALL    ITEMS"
        }
    ],
    "KEYASCII": [],
    "KEYCOUNT": [
        {
            "ref_file": "interrupts.asm",
            "ref_line": 54,
            "ref_content": "LD\t\tHL, KEYCOUNT \t\t\t; Check whether the keycount has changed"
        }
    ],
    "KEYDOWN": [
        {
            "ref_file": "patch.asm",
            "ref_line": 229,
            "ref_content": "@@:\t\t\tLD\tHL, KEYDOWN\t\t; We have a key, so"
        }
    ],
    "KEYWDL": [],
    "KEYWDS": [],
    "LD16": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2603,
            "ref_content": "CALL    LD16"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2608,
            "ref_content": "CALL    LD16"
        }
    ],
    "LD8": [],
    "LDA": [],
    "LDIN": [],
    "LDOP": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2571,
            "ref_content": "CALL    LDOP\t\t\t; Check for accumulator loads"
        }
    ],
    "LDOPS": [],
    "LEFT1": [],
    "LEFT2": [],
    "LEFT3": [],
    "LEFTS": [
        {
            "ref_file": "eval.asm",
            "ref_line": 154,
            "ref_content": "DW24\tLEFTS\t\t\t; LEFTS("
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1313,
            "ref_content": "RIGHTS:\t\t\tCALL    LEFTS\t\t\t; Call LEFTS to get the string"
        }
    ],
    "LEN": [
        {
            "ref_file": "eval.asm",
            "ref_line": 131,
            "ref_content": "DW24\tLEN\t\t\t; LEN"
        }
    ],
    "LET": [
        {
            "ref_file": "exec.asm",
            "ref_line": 192,
            "ref_content": "DW24  LET\t\t\t; E9H"
        }
    ],
    "LET0": [],
    "LEX": [],
    "LEX0": [
        {
            "ref_file": "main.asm",
            "ref_line": 1017,
            "ref_content": "JR      LEX0\t\t\t; At this point HL is pointing to the start of the next keyword"
        }
    ],
    "LEX1": [
        {
            "ref_file": "main.asm",
            "ref_line": 1033,
            "ref_content": "JR      LEX1\t\t\t; And loop back to start again"
        }
    ],
    "LEX2": [],
    "LEX3": [],
    "LEX4": [],
    "LEX5": [],
    "LEX6": [],
    "LEXAN1": [
        {
            "ref_file": "main.asm",
            "ref_line": 2055,
            "ref_content": "LEXANG:\t\t\tJP      LEXAN1\t\t\t; And loop"
        }
    ],
    "LEXAN2": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1006,
            "ref_content": "CALL    LEXAN2          ;TOKENISE"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 288,
            "ref_content": "CALL    LEXAN2          \t; Lexical analysis on the user input"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1989,
            "ref_content": "JR      LEXAN2          \t; And loop"
        }
    ],
    "LEXAN3": [],
    "LEXAN4": [],
    "LEXAN5": [],
    "LEXAN6": [],
    "LEXAN7": [],
    "LEXAN8": [
        {
            "ref_file": "main.asm",
            "ref_line": 1997,
            "ref_content": "JR      LEXAN8\t\t\t; And skip"
        }
    ],
    "LEXAN9": [],
    "LEXANA": [],
    "LEXANB": [],
    "LEXANC": [],
    "LEXAND": [],
    "LEXANE": [],
    "LEXANF": [],
    "LEXANG": [],
    "LINE1S": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2096,
            "ref_content": "JR      LINE1S"
        }
    ],
    "LINENO": [],
    "LINES": [],
    "LINE_EX_": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1185,
            "ref_content": "CP      LINE_EX_"
        }
    ],
    "LINE_MN_": [],
    "LINNM1": [],
    "LINNUM": [
        {
            "ref_file": "main.asm",
            "ref_line": 277,
            "ref_content": "CALL    LINNUM\t\t\t; HL: The line number from the input buffer"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1841,
            "ref_content": "PAIR:\t\t\tCALL    LINNUM          \t; Parse the first line number"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1866,
            "ref_content": "DLPAIR:\t\t\tCALL    LINNUM\t\t\t; Parse the first line number"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1873,
            "ref_content": "CALL    LINNUM\t\t\t; Fetch the second line number"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1983,
            "ref_content": "CALL    LINNUM         \t\t; Parse the line number to HL"
        }
    ],
    "LINO_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1325,
            "ref_content": "CP      LINO_EX"
        }
    ],
    "LINO_MN": [
        {
            "ref_file": "main.asm",
            "ref_line": 1242,
            "ref_content": "CP      LINO_MN\t\t\t; Is it a line number (following GOTO/GOSUB etc)?"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 2088,
            "ref_content": "LD      (HL), LINO_MN\t\t; Store 8Dh first to flag next bytes as an encoded line number"
        }
    ],
    "LIST1": [],
    "LIST1L": [],
    "LIST2": [],
    "LIST2L": [],
    "LIST7": [],
    "LIST8": [
        {
            "ref_file": "main.asm",
            "ref_line": 1200,
            "ref_content": "JR      LIST8\t\t\t; And repeat"
        }
    ],
    "LISTA": [],
    "LISTB": [],
    "LISTC": [
        {
            "ref_file": "main.asm",
            "ref_line": 706,
            "ref_content": "JR      LISTC\t\t\t; Loop back to do next line"
        }
    ],
    "LISTE": [],
    "LISTIT": [
        {
            "ref_file": "patch.asm",
            "ref_line": 462,
            "ref_content": "CALL\tLISTIT"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 713,
            "ref_content": "CALL\tLISTIT\t\t\t; List the line"
        }
    ],
    "LISTO": [],
    "LISTON": [
        {
            "ref_file": "patch.asm",
            "ref_line": 178,
            "ref_content": "LD\tHL, LISTON\t\t; Fetch the LISTON variable"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 458,
            "ref_content": "LD\tIX, LISTON\t\t; Pointer to LISTON variable in RAM"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 699,
            "ref_content": "LD\tIX, LISTON\t\t; Required for LISTIT"
        }
    ],
    "LIST_": [
        {
            "ref_file": "exec.asm",
            "ref_line": 160,
            "ref_content": "DW24  LIST_\t\t\t; C9H"
        }
    ],
    "LN": [
        {
            "ref_file": "eval.asm",
            "ref_line": 132,
            "ref_content": "DW24\tLN\t\t\t; LN"
        }
    ],
    "LN0": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 596,
            "ref_content": "CALL    LN0"
        }
    ],
    "LN1": [],
    "LN2": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 951,
            "ref_content": "EXP0:\t\t\tCALL    LN2             ;LN(2)"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1085,
            "ref_content": "CALL    LN2"
        }
    ],
    "LN3": [],
    "LN4": [],
    "LNZERO": [],
    "LN_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 132,
            "ref_content": "DW24  LN_FP              ;LN"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1099,
            "ref_content": "LOG_FP:\t\t\tCALL    LN_FP"
        }
    ],
    "LOAD": [
        {
            "ref_file": "exec.asm",
            "ref_line": 159,
            "ref_content": "DW24  LOAD\t\t\t; C8H"
        }
    ],
    "LOAD0": [
        {
            "ref_file": "exec.asm",
            "ref_line": 228,
            "ref_content": "CALL    LOAD0\t\t\t; And load the file in"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 905,
            "ref_content": "CALL    LOAD0\t\t\t; Load the file in, then CLEAN"
        }
    ],
    "LOAD1": [],
    "LOAD4": [
        {
            "ref_file": "eval.asm",
            "ref_line": 579,
            "ref_content": "JR      LOAD4"
        }
    ],
    "LOAD5": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1032,
            "ref_content": "CALL    LOAD5"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1057,
            "ref_content": "CALL    LOAD5"
        }
    ],
    "LOADN": [
        {
            "ref_file": "exec.asm",
            "ref_line": 895,
            "ref_content": "CALL    LOADN           \t; Load the LOOP variable"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1932,
            "ref_content": "CALL    LOADN"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1572,
            "ref_content": "CALL    LOADN           \t; Left operand of the binary indirection (var?index or var!index)"
        }
    ],
    "LOADS": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1945,
            "ref_content": "CALL    LOADS"
        }
    ],
    "LOADS2": [],
    "LOC0": [],
    "LOC1": [],
    "LOC2": [
        {
            "ref_file": "main.asm",
            "ref_line": 1712,
            "ref_content": "JP      LOC2            \t; Loop round and try again"
        }
    ],
    "LOC3": [
        {
            "ref_file": "main.asm",
            "ref_line": 1706,
            "ref_content": "JR      Z, LOC3\t\t\t; Keep looping whilst we've got a match..."
        }
    ],
    "LOC4": [],
    "LOC5": [],
    "LOC5A": [],
    "LOC6": [
        {
            "ref_file": "main.asm",
            "ref_line": 1693,
            "ref_content": "JR\tZ, LOC6\t\t\t; If the pointer in DE is zero, the variable is undefined at this point"
        }
    ],
    "LOC7": [],
    "LOC8": [],
    "LOC9": [],
    "LOCAL1": [],
    "LOCAL2": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1092,
            "ref_content": "JR      LOCAL2\t\t\t; Then loop back and handle any further local variables"
        }
    ],
    "LOCAL_": [],
    "LOCAL_EX_": [
        {
            "ref_file": "exec.asm",
            "ref_line": 193,
            "ref_content": "DW24  LOCAL_EX_\t\t\t; EAH"
        }
    ],
    "LOCATE": [
        {
            "ref_file": "main.asm",
            "ref_line": 1479,
            "ref_content": "CALL    LOCATE\t\t\t; Locate the variable"
        }
    ],
    "LOCCHK": [],
    "LOG": [
        {
            "ref_file": "eval.asm",
            "ref_line": 133,
            "ref_content": "DW24\tLOG\t\t\t; LOG"
        }
    ],
    "LOGRNG": [],
    "LOG_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 133,
            "ref_content": "DW24  LOG_FP             ;LOG"
        }
    ],
    "LOMEM": [],
    "LOMEMV": [
        {
            "ref_file": "eval.asm",
            "ref_line": 108,
            "ref_content": "DW24\tLOMEMV\t\t\t; LOMEM"
        }
    ],
    "LOMEMV_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 169,
            "ref_content": "DW24  LOMEMV_EX\t\t\t; D2H"
        }
    ],
    "LOOP_": [],
    "LOUT": [
        {
            "ref_file": "main.asm",
            "ref_line": 1199,
            "ref_content": "LIST7:\t\t\tCALL    LOUT\t\t\t; Output the character / token"
        }
    ],
    "LTRAP": [
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 100,
            "ref_content": "CALL\tLTRAP\t\t\t; Check for ESC"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 699,
            "ref_content": "CALL    LTRAP\t\t\t; TODO: This destroys A - is this a bug I've introduced in LTRAP?"
        }
    ],
    "LTRAP1": [
        {
            "ref_file": "patch.asm",
            "ref_line": 110,
            "ref_content": "JP\tZ, LTRAP1 \t\t; Yes, so do the ESC thing"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 209,
            "ref_content": "JR\tZ, LTRAP1"
        }
    ],
    "MIDS": [
        {
            "ref_file": "eval.asm",
            "ref_line": 155,
            "ref_content": "DW24\tMIDS\t\t\t; MIDS("
        }
    ],
    "MIDS1": [],
    "MINUS": [],
    "MINUS0": [],
    "MOD48": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 957,
            "ref_content": "CALL    MOD48           ;\"MODULUS\""
        }
    ],
    "MOD481": [],
    "MOD482": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1711,
            "ref_content": "JR      MOD482"
        }
    ],
    "MOD483": [],
    "MOD484": [],
    "MOD485": [],
    "MODE": [
        {
            "ref_file": "exec.asm",
            "ref_line": 194,
            "ref_content": "DW24  MODE\t\t\t; EBH"
        }
    ],
    "MODK": [
        {
            "ref_file": "eval.asm",
            "ref_line": 339,
            "ref_content": "CP      MODK\t\t\t; MOD token is valid"
        }
    ],
    "MOVE": [
        {
            "ref_file": "exec.asm",
            "ref_line": 195,
            "ref_content": "DW24  MOVE\t\t\t; ECH"
        }
    ],
    "MUL0": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 2180,
            "ref_content": "JP      MUL0"
        },
        {
            "ref_file": "tmp.asm",
            "ref_line": 67,
            "ref_content": "JP      MUL0"
        }
    ],
    "MUL1": [],
    "MUL16": [
        {
            "ref_file": "exec.asm",
            "ref_line": 473,
            "ref_content": "CALL    MUL16           \t; HL = HL * BC (Number of Dimensions * Total size of array accumulator)"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1517,
            "ref_content": "CALL    MUL16\t\t\t; HL=HL*BC"
        }
    ],
    "MULA": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 420,
            "ref_content": "CALL    MULA            ;MULTIPLY"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 472,
            "ref_content": "CALL    MULA            ;MULTIPLY"
        }
    ],
    "MULB": [],
    "NEG0": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1643,
            "ref_content": "JR      NEG0"
        }
    ],
    "NEGATE": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 266,
            "ref_content": "JP      NEGATE"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 276,
            "ref_content": "JP      NEGATE"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 431,
            "ref_content": "JP      NEGATE"
        }
    ],
    "NEGATE_EV": [],
    "NEG_": [],
    "NEW": [
        {
            "ref_file": "exec.asm",
            "ref_line": 161,
            "ref_content": "DW24  NEW\t\t\t; CAH"
        }
    ],
    "NEWIT": [
        {
            "ref_file": "main.asm",
            "ref_line": 213,
            "ref_content": "CALL    NEWIT\t\t\t; From what I can determine, NEWIT always returns with Z flag set"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 880,
            "ref_content": "NEW:\t\t\tCALL    NEWIT\t\t\t; Call NEWIT (clears program area and variables)"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 601,
            "ref_content": "CALL\tNEWIT\t\t\t; Call NEW to clear the program space"
        }
    ],
    "NEWLIN": [
        {
            "ref_file": "exec.asm",
            "ref_line": 248,
            "ref_content": "XEQ0:\t\t\tCALL    NEWLIN"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 368,
            "ref_content": "ASM0:\t\t\tCALL    NEWLIN"
        }
    ],
    "NEXT": [
        {
            "ref_file": "main.asm",
            "ref_line": 1169,
            "ref_content": "CP      NEXT\t\t\t; Is it NEXT..."
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1254,
            "ref_content": "CP      NEXT\t\t\t; If it is NEXT"
        }
    ],
    "NEXT0": [],
    "NEXT1": [],
    "NEXT_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 196,
            "ref_content": "DW24  NEXT_EX\t\t\t; EDH"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 922,
            "ref_content": "JR      NEXT_EX\t\t\t; And continue"
        }
    ],
    "NGROOT": [],
    "NOAUTO": [],
    "NOROOM": [],
    "NOS1": [],
    "NOSUCH": [],
    "NOTICE": [],
    "NOTK": [
        {
            "ref_file": "eval.asm",
            "ref_line": 134,
            "ref_content": "DW24\tNOTK\t\t\t; NOT"
        }
    ],
    "NOTK_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 134,
            "ref_content": "DW24  NOTK_FP            ;NOT"
        }
    ],
    "NULLTOCR": [
        {
            "ref_file": "patch.asm",
            "ref_line": 106,
            "ref_content": "CALL\tNULLTOCR\t\t; Turn the 0 character to a CR"
        }
    ],
    "NUMB1": [],
    "NUMBER": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2400,
            "ref_content": "DB_:\t\t\tCALL    NUMBER"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2502,
            "ref_content": "CALL    NUMBER"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2548,
            "ref_content": "CALL    NUMBER"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2605,
            "ref_content": "CALL    NUMBER"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2625,
            "ref_content": "CALL\tNUMBER\t\t\t; Get the number"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2646,
            "ref_content": "OPT:\t\t\tCALL    NUMBER\t\t\t; Fetch the OPT value"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2656,
            "ref_content": "ADL_:\t\t\tCALL\tNUMBER\t\t\t; Fetch the ADL value"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2740,
            "ref_content": "ADDR16:\t\t\tCALL\tNUMBER\t\t\t; Fetch an address (16-bit) and fall through to VAL16"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2745,
            "ref_content": "ADDR24:\t\t\tCALL    NUMBER\t\t\t; Fetch an address (24-bit) and fall through to VAL24"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2881,
            "ref_content": "BIT_:\t\t\tCALL    NUMBER"
        }
    ],
    "NUMBIX": [],
    "NXT": [
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 143,
            "ref_content": "CALL\tNXT\t\t\t; Are there any more parameters?"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 156,
            "ref_content": "CALL\tNXT\t\t\t; Are there any more parameters?"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 230,
            "ref_content": "CALL\tNXT\t\t; Are there any more parameters?"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 225,
            "ref_content": "CALL    NXT\t\t\t;"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 353,
            "ref_content": "EXPR5A:\t\t\tCALL    NXT\t\t\t; Skip spaces"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 515,
            "ref_content": "CALL    NXT\t\t\t; Skip spaces"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 707,
            "ref_content": "GET:\t\t\tCALL    NXT\t\t\t; Skip whitespace"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1029,
            "ref_content": "CALL    NXT"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1098,
            "ref_content": "CALL    NXT\t\t\t; Skip whitespace"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1202,
            "ref_content": "GETS:\t\t\tCALL\tNXT\t\t;NEW CODE FOR GET$(X,Y)"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1281,
            "ref_content": "MIDS1:\t\t\tCALL    NXT\t\t\t; Skip whitespace"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1477,
            "ref_content": "STRS:\t\t\tCALL    NXT"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1622,
            "ref_content": "COMMA:\t\t\tCALL    NXT"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1629,
            "ref_content": "BRAKET:\t\t\tCALL    NXT"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1684,
            "ref_content": "JP      NXT\t\t\t; Loop"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 251,
            "ref_content": "XEQ1:\t\t\tCALL    NXT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 277,
            "ref_content": "CALL    NXT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 509,
            "ref_content": "DIM5:\t\t\tCALL    NXT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 513,
            "ref_content": "CALL    NXT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 561,
            "ref_content": "PRNTN1:\t\t\tCALL    NXT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 664,
            "ref_content": "CALL    NXT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 918,
            "ref_content": "CALL    NXT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 984,
            "ref_content": "CALL    NXT\t\t\t; And any whitespace"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1012,
            "ref_content": "CALL    NXT             \t; Allow space before \"(\""
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1018,
            "ref_content": "CALL    NXT             \t; Allow space before \"(\""
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1087,
            "ref_content": "CALL    NXT\t\t\t; Skip to the next character in the expression"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1091,
            "ref_content": "CALL    NXT\t\t\t; And any whitespace"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1132,
            "ref_content": "INPN1:\t\t\tCALL    NXT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1136,
            "ref_content": "CALL    NXT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1299,
            "ref_content": "CALL    NXT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1303,
            "ref_content": "CALL    NXT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1324,
            "ref_content": "IF1:\t\t\tCALL    NXT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1570,
            "ref_content": "CALL1:\t\t\tCALL    NXT\t\t\t; Skip whitespace"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1575,
            "ref_content": "CALL    NXT\t\t\t; Skip whitespace"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1831,
            "ref_content": "CALL    NXT\t\t\t; Skip any whitespace"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1865,
            "ref_content": "ARGUE4:\t\t\tCALL    NXT\t\t\t; Skip whitespace"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1912,
            "ref_content": "CALL    NXT\t\t\t; And also any whitespace"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1972,
            "ref_content": "CALL    NXT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1991,
            "ref_content": "TERMQ:\t\t\tCALL    NXT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2006,
            "ref_content": "EQUALS:\t\t\tCALL    NXT\t\t\t; Skip whitespace"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2082,
            "ref_content": "CALL    NXT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2098,
            "ref_content": "XTRACT:\t\t\tCALL    NXT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2194,
            "ref_content": "CHANEL:\t\t\tCALL    NXT\t\t\t; Skip whitespace"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 278,
            "ref_content": "CALL    NXT\t\t\t; Skip spaces"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 602,
            "ref_content": "CALL    NXT\t\t\t; Skip space"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 608,
            "ref_content": "CALL    NXT             \t; And skip any spaces"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1809,
            "ref_content": "LINNUM:\t\t\tCALL    NXT\t\t\t; Skip whitespace to the first character"
        }
    ],
    "OC": [],
    "ODD": [],
    "OFFSET": [],
    "OFFSET_EX": [],
    "OFF_": [
        {
            "ref_file": "exec.asm",
            "ref_line": 665,
            "ref_content": "CP      OFF_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1477,
            "ref_content": "CP      OFF_"
        }
    ],
    "OFLOW": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1592,
            "ref_content": "JP      OFLOW"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2104,
            "ref_content": "JP      OFLOW"
        }
    ],
    "OLD": [
        {
            "ref_file": "exec.asm",
            "ref_line": 162,
            "ref_content": "DW24  OLD\t\t\t; CBH"
        }
    ],
    "ON1": [],
    "ON2": [],
    "ON3": [],
    "ON4": [],
    "ONEDIT": [
        {
            "ref_file": "patch.asm",
            "ref_line": 468,
            "ref_content": "JP\tONEDIT\t\t\t; Jump back to the BASIC loop just after the normal line edit"
        }
    ],
    "ONEDIT1": [
        {
            "ref_file": "main.asm",
            "ref_line": 265,
            "ref_content": "ONEDIT:\t\t\tCALL\tONEDIT1\t\t\t; Enter the line into memory"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 635,
            "ref_content": "CALL\tONEDIT1\t\t\t; Enter the line in memory"
        }
    ],
    "ONERR": [],
    "ONPROC": [],
    "ON_": [],
    "ON_EX_": [
        {
            "ref_file": "exec.asm",
            "ref_line": 197,
            "ref_content": "DW24  ON_EX_\t\t\t; EEH"
        }
    ],
    "OP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 55,
            "ref_content": "CALL    OP              ;Perform operation"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 557,
            "ref_content": "CALL    OP              ;SQUARE"
        }
    ],
    "OPCODS": [],
    "OPENIN": [
        {
            "ref_file": "eval.asm",
            "ref_line": 104,
            "ref_content": "DW24\tOPENIN\t\t\t; OPENIN"
        }
    ],
    "OPENIN_1": [
        {
            "ref_file": "eval.asm",
            "ref_line": 779,
            "ref_content": "JR\tOPENIN_1"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 782,
            "ref_content": "JR\tOPENIN_1"
        }
    ],
    "OPENOT": [
        {
            "ref_file": "eval.asm",
            "ref_line": 136,
            "ref_content": "DW24\tOPENOT\t\t\t; OPENOUT"
        }
    ],
    "OPENUP": [
        {
            "ref_file": "eval.asm",
            "ref_line": 135,
            "ref_content": "DW24\tOPENUP\t\t\t; OPENUP"
        }
    ],
    "OPND": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2779,
            "ref_content": "CALL    OPND\t\t\t; Get the operand"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2845,
            "ref_content": "REG:\t\t\tCALL    OPND"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2861,
            "ref_content": "COND_:\t\t\tCALL    OPND"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2873,
            "ref_content": "PAIR_EX:\t\t\tCALL    OPND"
        }
    ],
    "OPRNDS": [],
    "OPT": [],
    "OPTS": [],
    "ORC": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2855,
            "ref_content": "JR      ORC"
        }
    ],
    "ORK": [
        {
            "ref_file": "eval.asm",
            "ref_line": 200,
            "ref_content": "CP      ORK\t\t\t; Is operator OR"
        }
    ],
    "OSBGET": [
        {
            "ref_file": "eval.asm",
            "ref_line": 696,
            "ref_content": "CALL    OSBGET"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1144,
            "ref_content": "CALL    OSBGET"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1148,
            "ref_content": "CALL    OSBGET"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1152,
            "ref_content": "CALL    OSBGET"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1154,
            "ref_content": "CALL    OSBGET"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1156,
            "ref_content": "CALL    OSBGET"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1165,
            "ref_content": "INPN3:\t\t\tCALL    OSBGET"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 607,
            "ref_content": "@@:\t\t\tCALL\tOSBGET\t\t\t; Read the byte into A"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 618,
            "ref_content": "OSLOAD_TXT2:\t\tCALL\tOSBGET\t\t\t; Read the byte into A"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 823,
            "ref_content": "DW24 \tOSBGET"
        }
    ],
    "OSBPUT": [
        {
            "ref_file": "exec.asm",
            "ref_line": 574,
            "ref_content": "CALL    OSBPUT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 578,
            "ref_content": "CALL    OSBPUT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 580,
            "ref_content": "CALL    OSBPUT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 582,
            "ref_content": "CALL    OSBPUT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 585,
            "ref_content": "CALL    OSBPUT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 596,
            "ref_content": "CALL    OSBPUT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 600,
            "ref_content": "CALL    OSBPUT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1548,
            "ref_content": "CALL    OSBPUT\t\t\t; Write the byte out"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 199,
            "ref_content": "CALL\tOSBPUT\t\t\t; Write the byte out"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 821,
            "ref_content": "DW24 \tOSBPUT"
        }
    ],
    "OSBYTE": [
        {
            "ref_file": "patch.asm",
            "ref_line": 827,
            "ref_content": "DW24 \tOSBYTE"
        }
    ],
    "OSBYTE_0B": [
        {
            "ref_file": "patch.asm",
            "ref_line": 494,
            "ref_content": "JR\tZ, OSBYTE_0B"
        }
    ],
    "OSBYTE_0C": [
        {
            "ref_file": "patch.asm",
            "ref_line": 496,
            "ref_content": "JR\tZ, OSBYTE_0C"
        }
    ],
    "OSBYTE_13": [
        {
            "ref_file": "patch.asm",
            "ref_line": 498,
            "ref_content": "JR\tZ, OSBYTE_13"
        }
    ],
    "OSBYTE_76": [
        {
            "ref_file": "patch.asm",
            "ref_line": 500,
            "ref_content": "JP\tZ, OSBYTE_76"
        }
    ],
    "OSBYTE_A0": [
        {
            "ref_file": "patch.asm",
            "ref_line": 502,
            "ref_content": "JP\tZ, OSBYTE_A0"
        }
    ],
    "OSCALL": [],
    "OSCALL_1": [
        {
            "ref_file": "patch.asm",
            "ref_line": 817,
            "ref_content": "JR\tOSCALL_1"
        }
    ],
    "OSCALL_2": [
        {
            "ref_file": "patch.asm",
            "ref_line": 812,
            "ref_content": "JR\tZ, OSCALL_2"
        }
    ],
    "OSCALL_TABLE": [
        {
            "ref_file": "patch.asm",
            "ref_line": 806,
            "ref_content": "OSCALL:\t\t\tLD\tHL, OSCALL_TABLE"
        }
    ],
    "OSCLI": [
        {
            "ref_file": "exec.asm",
            "ref_line": 321,
            "ref_content": "CALL    OSCLI"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 328,
            "ref_content": "CALL    OSCLI"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 829,
            "ref_content": "DW24\tOSCLI"
        }
    ],
    "OSCLI0": [
        {
            "ref_file": "patch.asm",
            "ref_line": 312,
            "ref_content": "JR      OSCLI0"
        }
    ],
    "OSCLI1": [
        {
            "ref_file": "patch.asm",
            "ref_line": 326,
            "ref_content": "JR      OSCLI1"
        }
    ],
    "OSCLI2": [],
    "OSCLI3": [],
    "OSCLI4": [],
    "OSCLI5": [],
    "OSCLI6": [],
    "OSERROR": [
        {
            "ref_file": "patch.asm",
            "ref_line": 351,
            "ref_content": "JP \tOSERROR\t\t\t; Otherwise it's a MOS error"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 600,
            "ref_content": "JR\tZ, OSERROR\t\t; Jump to error handler"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 727,
            "ref_content": "JR\tOSERROR\t\t\t; Trip an error"
        }
    ],
    "OSINIT": [
        {
            "ref_file": "main.asm",
            "ref_line": 206,
            "ref_content": "CALL    OSINIT\t\t\t; Call the machine specific OS initialisation routines"
        }
    ],
    "OSKEY": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1216,
            "ref_content": "INKEY0:\t\t\tCALL    OSKEY\t\t\t; This is the entry point for INKEY(n)"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 227,
            "ref_content": "JR\tOSKEY \t\t\t; And loop"
        }
    ],
    "OSLINE": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1254,
            "ref_content": "CALL    OSLINE"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 264,
            "ref_content": "CALL    OSLINE          \t; Call the line editor in MOS"
        }
    ],
    "OSLINE1": [
        {
            "ref_file": "patch.asm",
            "ref_line": 467,
            "ref_content": "CALL\tOSLINE1\t\t\t; Invoke the editor"
        }
    ],
    "OSLOAD": [
        {
            "ref_file": "main.asm",
            "ref_line": 1092,
            "ref_content": "CALL    OSLOAD          \t; Call the OSLOAD function in patch"
        }
    ],
    "OSLOAD_BBC": [
        {
            "ref_file": "patch.asm",
            "ref_line": 591,
            "ref_content": "JR \tZ, OSLOAD_BBC"
        }
    ],
    "OSLOAD_TXT": [],
    "OSLOAD_TXT1": [
        {
            "ref_file": "patch.asm",
            "ref_line": 639,
            "ref_content": "JR\tNZ, OSLOAD_TXT1\t\t; No, so loop"
        }
    ],
    "OSLOAD_TXT2": [
        {
            "ref_file": "patch.asm",
            "ref_line": 626,
            "ref_content": "JR\tNZ, OSLOAD_TXT2\t\t; If not, then loop to read the rest of the characters in"
        }
    ],
    "OSLOAD_TXT3": [
        {
            "ref_file": "patch.asm",
            "ref_line": 608,
            "ref_content": "JR\tC, OSLOAD_TXT3\t\t; Is it EOF?"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 610,
            "ref_content": "JR\tZ, OSLOAD_TXT3 \t\t; Yes, so skip to the next line"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 651,
            "ref_content": "@@:\t\t\tJR\tOSLOAD_TXT3"
        }
    ],
    "OSLOAD_TXT4": [
        {
            "ref_file": "patch.asm",
            "ref_line": 619,
            "ref_content": "JR\tC, OSLOAD_TXT4\t\t; Is it EOF?"
        }
    ],
    "OSOPEN": [
        {
            "ref_file": "eval.asm",
            "ref_line": 793,
            "ref_content": "CALL    OSOPEN\t\t\t; Call the OS specific OPEN routine in patch.asm"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 596,
            "ref_content": "CALL\tOSOPEN\t\t\t; Open the file"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 697,
            "ref_content": "CALL\tOSOPEN\t\t\t; Open the file"
        }
    ],
    "OSRDCH": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1205,
            "ref_content": "CALL    OSRDCH"
        }
    ],
    "OSSAVE": [
        {
            "ref_file": "main.asm",
            "ref_line": 922,
            "ref_content": "CALL    OSSAVE\t\t\t; Call the SAVE routine in patch.asm"
        }
    ],
    "OSSAVE_BBC": [
        {
            "ref_file": "patch.asm",
            "ref_line": 688,
            "ref_content": "JR\tZ, OSSAVE_BBC\t\t; Yes, so use that"
        }
    ],
    "OSSAVE_TXT": [],
    "OSSAVE_TXT1": [
        {
            "ref_file": "patch.asm",
            "ref_line": 714,
            "ref_content": "JR\tOSSAVE_TXT1"
        }
    ],
    "OSSAVE_TXT2": [
        {
            "ref_file": "patch.asm",
            "ref_line": 706,
            "ref_content": "JR\tZ, OSSAVE_TXT2"
        }
    ],
    "OSSHUT": [
        {
            "ref_file": "exec.asm",
            "ref_line": 287,
            "ref_content": "CALL    OSSHUT          ;CLOSE ALL FILES"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1536,
            "ref_content": "CALL    OSSHUT\t\t\t; Close the channel"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 640,
            "ref_content": "CALL\tOSSHUT\t\t\t; Close the file"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 717,
            "ref_content": "CALL\tOSSHUT\t\t\t; Close it"
        }
    ],
    "OSSTAT": [
        {
            "ref_file": "eval.asm",
            "ref_line": 691,
            "ref_content": "CALL    OSSTAT"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 638,
            "ref_content": "@@:\t\t\tCALL\tOSSTAT\t\t\t; End of file?"
        }
    ],
    "OSWRCH": [
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 54,
            "ref_content": "JP\tOSWRCH"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1519,
            "ref_content": "call OSWRCH"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1526,
            "ref_content": "call OSWRCH"
        },
        {
            "ref_file": "macros.inc",
            "ref_line": 36,
            "ref_content": "CALL\tOSWRCH"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1208,
            "ref_content": "JP\tOSWRCH"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1280,
            "ref_content": "OUTCHR:\t\t\tCALL    OSWRCH\t\t\t; Output the character in A"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 172,
            "ref_content": "JP\tOSWRCH"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 825,
            "ref_content": "DW24 \tOSWRCH"
        }
    ],
    "OSWRCHCH": [],
    "OSWRCHFH": [],
    "OSWRCHPT": [],
    "OSWRCH_BUFFER": [
        {
            "ref_file": "patch.asm",
            "ref_line": 180,
            "ref_content": "JR\tNZ, OSWRCH_BUFFER\t; Yes, so just output to buffer"
        }
    ],
    "OSWRCH_FILE": [
        {
            "ref_file": "patch.asm",
            "ref_line": 184,
            "ref_content": "JR\tZ, OSWRCH_FILE\t\t; Then we are outputting to a file"
        }
    ],
    "OUTCH1": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2293,
            "ref_content": "JR      OUTCH1"
        }
    ],
    "OUTCHR": [
        {
            "ref_file": "exec.asm",
            "ref_line": 306,
            "ref_content": "CALL    OUTCHR"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 309,
            "ref_content": "CALL    OUTCHR"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 311,
            "ref_content": "JP      OUTCHR"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1247,
            "ref_content": "CALL    OUTCHR          ;PROMPT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1249,
            "ref_content": "CALL    OUTCHR"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2062,
            "ref_content": "CALL    OUTCHR"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2074,
            "ref_content": "CALL    OUTCHR"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 259,
            "ref_content": "CALL    OUTCHR"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1232,
            "ref_content": "CALL\tOUTCHR\t\t\t; Ouput the character"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1277,
            "ref_content": "CALL    OUTCHR"
        }
    ],
    "OUT_": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2284,
            "ref_content": "CALL    OUT_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2306,
            "ref_content": "OUTCH1:\t\t\tJP      OUT_"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1228,
            "ref_content": "PRREM:\t\t\tCALL\tOUT_\t\t\t; Output the REM token"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1244,
            "ref_content": "CALL    OUT_\t\t\t; Output a character / keyword"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 2127,
            "ref_content": "CALL    OUT_\t\t\t; Output the character; note that OUT_ will detokenise tokens"
        }
    ],
    "PAGEV": [
        {
            "ref_file": "eval.asm",
            "ref_line": 106,
            "ref_content": "DW24\tPAGEV\t\t\t; PAGE"
        }
    ],
    "PAGEV_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 167,
            "ref_content": "DW24  PAGEV_EX\t\t\t; D0H"
        }
    ],
    "PAGE_": [],
    "PAIR": [
        {
            "ref_file": "main.asm",
            "ref_line": 714,
            "ref_content": "CALL    PAIR            \t; Fetch the parameters - HL: start (NEW line number), BC: increment"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 864,
            "ref_content": "AUTO:\t\t\tCALL    PAIR\t\t\t; Get the parameter pair (HL: first parameter, BC: second parameter)"
        }
    ],
    "PAIR1": [],
    "PAIR1_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2429,
            "ref_content": "CALL    PAIR1_EX"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2581,
            "ref_content": "CALL    PAIR1_EX"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2602,
            "ref_content": "CALL    PAIR1_EX"
        }
    ],
    "PAIR_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2379,
            "ref_content": "GROUP04_1:\t\tCALL    PAIR_EX"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2607,
            "ref_content": "CALL    PAIR_EX"
        }
    ],
    "PBCD": [
        {
            "ref_file": "main.asm",
            "ref_line": 248,
            "ref_content": "CALL    PBCD           \t \t; Output the line number"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1165,
            "ref_content": "CALL    PBCD\t\t\t; Print the line number"
        }
    ],
    "PBCD0": [
        {
            "ref_file": "main.asm",
            "ref_line": 1413,
            "ref_content": "JR      PBCD0\t\t\t; Output the line number; return with F:C set to 1"
        }
    ],
    "PBCD1": [
        {
            "ref_file": "main.asm",
            "ref_line": 1444,
            "ref_content": "DJNZ    PBCD1\t\t\t; Loop until done"
        }
    ],
    "PBCD2": [],
    "PBCD3": [],
    "PBCD4": [],
    "PBCDL": [
        {
            "ref_file": "exec.asm",
            "ref_line": 307,
            "ref_content": "CALL    PBCDL"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 845,
            "ref_content": "CALL    PBCDL"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1219,
            "ref_content": "CALL    PBCDL\t\t\t; Output the line number"
        }
    ],
    "PC": [],
    "PI": [
        {
            "ref_file": "eval.asm",
            "ref_line": 137,
            "ref_content": "DW24\tPI\t\t\t; PI"
        }
    ],
    "PIBY4": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 868,
            "ref_content": "CALL    PIBY4"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1184,
            "ref_content": "ACS1:\t\t\tCALL    PIBY4           ;PI/4"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1660,
            "ref_content": "CALL    PIBY4"
        }
    ],
    "PI_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 144,
            "ref_content": "DW24  PI_FP              ;PI"
        }
    ],
    "PLOT": [
        {
            "ref_file": "exec.asm",
            "ref_line": 199,
            "ref_content": "DW24  PLOT\t\t\t; F0H"
        }
    ],
    "PLOT_1": [
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 224,
            "ref_content": "JR\tPLOT_1\t\t; Plot"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 233,
            "ref_content": "JR\tNZ, PLOT_1\t; No, so just do DRAW x1,y1"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 244,
            "ref_content": "JR\tPLOT_1\t\t; Now DRAW the line to those positions"
        }
    ],
    "POINT": [
        {
            "ref_file": "eval.asm",
            "ref_line": 138,
            "ref_content": "DW24\tPOINT\t\t\t; POINT("
        }
    ],
    "POLY": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 876,
            "ref_content": "CALL    POLY"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 898,
            "ref_content": "CALL    POLY"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 971,
            "ref_content": "CALL    POLY"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1051,
            "ref_content": "CALL    POLY"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1158,
            "ref_content": "CALL    POLY"
        }
    ],
    "POLY1": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 2067,
            "ref_content": "JR      POLY1\t\t\t\t; And loop"
        }
    ],
    "POP5": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 597,
            "ref_content": "CALL    POP5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 834,
            "ref_content": "CALL    POP5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 838,
            "ref_content": "CALL    POP5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 892,
            "ref_content": "CALL    POP5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 893,
            "ref_content": "CALL    POP5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 914,
            "ref_content": "CALL    POP5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 996,
            "ref_content": "CALL    POP5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1067,
            "ref_content": "CALL    POP5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1068,
            "ref_content": "CALL    POP5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1091,
            "ref_content": "LN3:\t\t\tCALL    POP5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1119,
            "ref_content": "CALL    POP5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1180,
            "ref_content": "CALL    POP5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1181,
            "ref_content": "CALL    POP5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2034,
            "ref_content": "CALL    POP5            ;RESTORE X"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2039,
            "ref_content": "CALL    POP5            ;RESTORE X+1"
        }
    ],
    "POPS": [
        {
            "ref_file": "eval.asm",
            "ref_line": 325,
            "ref_content": "CALL    POPS            \t; Restore from stack"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1108,
            "ref_content": "CALL    POPS\t\t\t; Pop the string off the stack"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1267,
            "ref_content": "CALL    POPS\t\t\t; Pop the string back off the stack to the string accumulator"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1298,
            "ref_content": "CALL    POPS\t\t\t; Pop the string back off the stack to the string accumulator (ACCS)"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1897,
            "ref_content": "ARGUE7:\t\t\tCALL    POPS"
        }
    ],
    "POPS1": [],
    "POS": [
        {
            "ref_file": "eval.asm",
            "ref_line": 139,
            "ref_content": "DW24\tPOS\t\t\t; POS"
        }
    ],
    "POWR10": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1239,
            "ref_content": "CALL    POWR10"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1248,
            "ref_content": "CALL    POWR10"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1257,
            "ref_content": "CALL    POWR10          ;10^9"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1482,
            "ref_content": "CALL    POWR10"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1489,
            "ref_content": "CALL    POWR10"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1495,
            "ref_content": "CALL    POWR10"
        }
    ],
    "POWR11": [],
    "POWR12": [],
    "POWR13": [],
    "POWR14": [],
    "PRINT0": [],
    "PRINT3": [],
    "PRINT4": [],
    "PRINT6": [],
    "PRINT8": [],
    "PRINT9": [],
    "PRINTA": [],
    "PRINTC": [
        {
            "ref_file": "exec.asm",
            "ref_line": 604,
            "ref_content": "JR      PRINTC"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 606,
            "ref_content": "JR      PRINTC"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 653,
            "ref_content": "JR      PRINTC"
        }
    ],
    "PRINT_": [
        {
            "ref_file": "exec.asm",
            "ref_line": 200,
            "ref_content": "DW24  PRINT_\t\t\t; F1H"
        }
    ],
    "PRLINO": [],
    "PRNTN1": [
        {
            "ref_file": "exec.asm",
            "ref_line": 586,
            "ref_content": "JR      PRNTN1"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 601,
            "ref_content": "JR      PRNTN1"
        }
    ],
    "PRNTN2": [],
    "PRNTN3": [
        {
            "ref_file": "exec.asm",
            "ref_line": 598,
            "ref_content": "JR      PRNTN3"
        }
    ],
    "PRNTN4": [],
    "PROC": [
        {
            "ref_file": "main.asm",
            "ref_line": 1612,
            "ref_content": "CP      PROC\t\t\t; Is it the token PROC?"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 2026,
            "ref_content": "CP      PROC\t\t\t; Or the token is PROC"
        }
    ],
    "PROC1": [
        {
            "ref_file": "exec.asm",
            "ref_line": 950,
            "ref_content": "CALL    PROC1"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 960,
            "ref_content": "CALL    PROC1\t\t\t; and is also space reserved on the stack for the return address"
        }
    ],
    "PROC2": [
        {
            "ref_file": "exec.asm",
            "ref_line": 998,
            "ref_content": "JR      PROC2\t\t\t; Rinse, lather and repeat"
        }
    ],
    "PROC3": [],
    "PROC4": [],
    "PROC5": [],
    "PROC6": [],
    "PROCHK": [],
    "PROC_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 201,
            "ref_content": "DW24  PROC_EX\t\t\t; F2H"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 734,
            "ref_content": "JP      PROC_EX"
        }
    ],
    "PROMPT": [
        {
            "ref_file": "main.asm",
            "ref_line": 229,
            "ref_content": "CALL    PROMPT          \t; Prompt user"
        }
    ],
    "PROPTR": [],
    "PRREM": [
        {
            "ref_file": "main.asm",
            "ref_line": 1241,
            "ref_content": "JR\tZ, PRREM\t\t; DB: Yes so jump to the special case for REM"
        }
    ],
    "PTEXT": [
        {
            "ref_file": "exec.asm",
            "ref_line": 652,
            "ref_content": "CALL    PTEXT           ;PRINT"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1204,
            "ref_content": "CALL    PTEXT           ;PRINT PROMPT"
        }
    ],
    "PTEXT1": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2075,
            "ref_content": "JR      PTEXT1"
        }
    ],
    "PTR_EV": [
        {
            "ref_file": "eval.asm",
            "ref_line": 105,
            "ref_content": "DW24\tPTR_EV\t\t\t; PTR"
        }
    ],
    "PTR_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 166,
            "ref_content": "DW24  PTR_EX\t\t\t; CFH"
        }
    ],
    "PUSH5": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 584,
            "ref_content": "CALL    PUSH5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 832,
            "ref_content": "CALL    PUSH5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 835,
            "ref_content": "CALL    PUSH5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 874,
            "ref_content": "CALL    PUSH5           ;SAVE X"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 970,
            "ref_content": "CALL    PUSH5           ;PUSH X*LN(2)"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1049,
            "ref_content": "CALL    PUSH5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1071,
            "ref_content": "CALL    PUSH5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1113,
            "ref_content": "CALL    PUSH5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1156,
            "ref_content": "CALL    PUSH5"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2031,
            "ref_content": "RATIO:\t\t\tCALL    PUSH5           ;SAVE X"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2035,
            "ref_content": "CALL    PUSH5           ;SAVE X+1"
        }
    ],
    "PUSHS": [
        {
            "ref_file": "eval.asm",
            "ref_line": 249,
            "ref_content": "CALL    PUSHS           \t; Save string on the stack"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 295,
            "ref_content": "CALL    PUSHS           \t; Save the string on the stack"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1010,
            "ref_content": "CALL    PUSHS           ;PUT ON STACK"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1091,
            "ref_content": "CALL    PUSHS           \t; Push the string onto the stack"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1105,
            "ref_content": "CALL    PUSHS\t\t\t; Push the string onto the stack"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1264,
            "ref_content": "CALL    PUSHS           \t; Push the string onto the stack from the string accumulator (ACCS)"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1295,
            "ref_content": "LEFT1:\t\t\tCALL    PUSHS           \t; Push the string onto the stack from the string accumulator (ACCS)"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1862,
            "ref_content": "CALL    PUSHS"
        }
    ],
    "PUSHS1": [],
    "PUT": [
        {
            "ref_file": "exec.asm",
            "ref_line": 165,
            "ref_content": "DW24  PUT\t\t\t; CEH"
        }
    ],
    "PUTCSR": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2048,
            "ref_content": "CALL    PUTCSR"
        }
    ],
    "PUTIME": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1413,
            "ref_content": "CALL    PUTIME"
        }
    ],
    "PUTIMS": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1419,
            "ref_content": "CALL    PUTIMS"
        }
    ],
    "PUTPTR": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1396,
            "ref_content": "CALL    PUTPTR"
        }
    ],
    "PUTVAR": [],
    "R0": [],
    "R1": [],
    "RAD": [
        {
            "ref_file": "eval.asm",
            "ref_line": 140,
            "ref_content": "DW24\tRAD\t\t\t; RAD"
        }
    ],
    "RAD_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 135,
            "ref_content": "DW24  RAD_FP             ;RAD"
        }
    ],
    "RAM_END": [
        {
            "ref_file": "init.asm",
            "ref_line": 76,
            "ref_content": "LD\t\tBC, RAM_END - RAM_START - 1"
        }
    ],
    "RAM_START": [
        {
            "ref_file": "init.asm",
            "ref_line": 74,
            "ref_content": "LD\t\tHL, RAM_START"
        },
        {
            "ref_file": "init.asm",
            "ref_line": 75,
            "ref_content": "LD\t\tDE, RAM_START + 1"
        },
        {
            "ref_file": "init.asm",
            "ref_line": 76,
            "ref_content": "LD\t\tBC, RAM_END - RAM_START - 1"
        }
    ],
    "RANDOM": [],
    "RANGE": [
        {
            "ref_file": "eval.asm",
            "ref_line": 574,
            "ref_content": "CALL    RANGE"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1721,
            "ref_content": "CALL    RANGE"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1761,
            "ref_content": "CALL    RANGE           \t; END OF VARIABLE?"
        }
    ],
    "RANGE1": [
        {
            "ref_file": "main.asm",
            "ref_line": 1029,
            "ref_content": "CALL    RANGE1\t\t\t; Is it alphanumeric, '@', '_' or '`'"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1605,
            "ref_content": "CALL    RANGE1\t\t\t; Is it in range: \"0\" to \"9\", \"A\" to \"Z\", \"a' to \"z\", \"@\", \"_\" or \"`\"?"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1726,
            "ref_content": "CALL    RANGE1"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1765,
            "ref_content": "CALL    RANGE1"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1955,
            "ref_content": "CALL    RANGE1\t\t\t; Is it alphanumeric, '@', '_' or '`'"
        }
    ],
    "RANGE2": [
        {
            "ref_file": "main.asm",
            "ref_line": 2028,
            "ref_content": "CALL    RANGE2\t\t\t; Otherwise check the input is alphanumeric, \"_\" or \"`\""
        }
    ],
    "RATIO": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1048,
            "ref_content": "CALL    RATIO           ;X=(X-1)/(X+1)"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1153,
            "ref_content": "ATN1:\t\t\tCALL    RATIO           ;X=(X-1)/(X+1)"
        }
    ],
    "RDIV": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1126,
            "ref_content": "CALL    RDIV"
        }
    ],
    "READ": [
        {
            "ref_file": "exec.asm",
            "ref_line": 202,
            "ref_content": "DW24  READ\t\t\t; F3H"
        }
    ],
    "READ0": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1304,
            "ref_content": "JR      READ0"
        }
    ],
    "READ1": [],
    "READ2": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1293,
            "ref_content": "JR      READ2"
        }
    ],
    "READKEY": [
        {
            "ref_file": "patch.asm",
            "ref_line": 220,
            "ref_content": "OSKEY:\t\t\tCALL\tREADKEY\t\t\t; Read the keyboard"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 249,
            "ref_content": "ESCTEST:\t\tCALL\tREADKEY\t\t\t; Read the keyboard"
        }
    ],
    "RECIP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 535,
            "ref_content": "CALL    RECIP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1150,
            "ref_content": "CALL    RECIP           ;X=1/X"
        }
    ],
    "REFIL0": [],
    "REFIL1": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1267,
            "ref_content": "DJNZ    REFIL1"
        }
    ],
    "REFILL": [],
    "REG": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2441,
            "ref_content": "CALL    REG\t\t\t; Get the register value regardless"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2620,
            "ref_content": "CALL\tREG\t\t\t; Fetch the register"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2853,
            "ref_content": "REGLO:\t\t\tCALL    REG"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2857,
            "ref_content": "REGHI:\t\t\tCALL    REG"
        }
    ],
    "REGHI": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2421,
            "ref_content": "CALL    REGHI"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2472,
            "ref_content": "CALL    REGHI\t\t\t; Get the register value regardless"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2573,
            "ref_content": "CALL    REGHI"
        }
    ],
    "REGLO": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2370,
            "ref_content": "CALL    REGLO"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2395,
            "ref_content": "GROUP05_1:\t\tCALL    REGLO\t\t\t; Handle ADD A,?"
        }
    ],
    "REM": [
        {
            "ref_file": "main.asm",
            "ref_line": 1240,
            "ref_content": "CP\tREM\t\t\t; DB: Is it REM"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 2018,
            "ref_content": "LEXAN8:\t\t\tCP      REM\t\t\t; If the token is REM"
        }
    ],
    "REM_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 179,
            "ref_content": "DW24  REM_EX             \t\t; DCH: DATA"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 180,
            "ref_content": "DW24  REM_EX             \t\t; DDH: DEF"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 203,
            "ref_content": "DW24  REM_EX\t\t\t; F4H"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 670,
            "ref_content": "JP      REM_EX"
        }
    ],
    "REN": [
        {
            "ref_file": "main.asm",
            "ref_line": 760,
            "ref_content": "DB    \tREN"
        }
    ],
    "RENUM": [
        {
            "ref_file": "exec.asm",
            "ref_line": 163,
            "ref_content": "DW24  RENUM\t\t\t; CCH"
        }
    ],
    "RENUM1": [],
    "RENUM2": [],
    "RENUM3": [],
    "RENUM4": [],
    "RENUM5": [],
    "RENUM6": [
        {
            "ref_file": "main.asm",
            "ref_line": 847,
            "ref_content": "JR      RENUM6\t\t\t; And carry on renumbering"
        }
    ],
    "RENUM7": [
        {
            "ref_file": "main.asm",
            "ref_line": 857,
            "ref_content": "JR      RENUM7\t\t\t; Carry on checking for any more encoded line numbers in this line"
        }
    ],
    "REPCHK": [],
    "REPEAT": [
        {
            "ref_file": "main.asm",
            "ref_line": 1189,
            "ref_content": "CP      REPEAT\t\t\t; Is it REPEAT?"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1260,
            "ref_content": "IND2_:\t\t\tCP      REPEAT\t\t\t; If the token is REPEAT"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 2068,
            "ref_content": "DB\tREPEAT"
        }
    ],
    "REPEAT_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 204,
            "ref_content": "DW24  REPEAT_EX\t\t\t; F5H"
        }
    ],
    "REPOR": [
        {
            "ref_file": "exec.asm",
            "ref_line": 205,
            "ref_content": "DW24  REPOR\t\t\t; F6H"
        }
    ],
    "REPORT": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1357,
            "ref_content": "REPOR:\t\t\tCALL    REPORT"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 986,
            "ref_content": "CALL    REPORT          \t; Output the error message"
        }
    ],
    "RESET": [
        {
            "ref_file": "main.asm",
            "ref_line": 984,
            "ref_content": "CALL    RESET           \t; Reset OPSYS"
        }
    ],
    "RESTOR": [
        {
            "ref_file": "main.asm",
            "ref_line": 2063,
            "ref_content": "DB\tRESTOR"
        }
    ],
    "RESTOR_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 206,
            "ref_content": "DW24  RESTOR_EX\t\t\t; F7H"
        }
    ],
    "RESTR1": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1364,
            "ref_content": "JR      RESTR1"
        }
    ],
    "RETURN": [
        {
            "ref_file": "exec.asm",
            "ref_line": 207,
            "ref_content": "DW24  RETURN\t\t\t; F8H"
        }
    ],
    "RIGHT1": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1280,
            "ref_content": "CALL    RIGHT1\t\t\t; We can do a RIGHT$ at this point with the result"
        }
    ],
    "RIGHTS": [
        {
            "ref_file": "eval.asm",
            "ref_line": 156,
            "ref_content": "DW24\tRIGHTS\t\t\t; RIGHTS("
        }
    ],
    "RND": [
        {
            "ref_file": "eval.asm",
            "ref_line": 141,
            "ref_content": "DW24\tRND\t\t\t; RND"
        }
    ],
    "RND1": [],
    "RND2": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1042,
            "ref_content": "RND3:\t\t\tDJNZ    RND2"
        }
    ],
    "RND3": [],
    "RND4": [],
    "RND5": [],
    "RND6": [],
    "RND7": [],
    "RSUB": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1117,
            "ref_content": "CALL    RSUB"
        }
    ],
    "RTABLE": [],
    "RUN": [
        {
            "ref_file": "exec.asm",
            "ref_line": 208,
            "ref_content": "DW24  RUN\t\t\t; F9H"
        }
    ],
    "RUN0": [],
    "SAVE": [
        {
            "ref_file": "exec.asm",
            "ref_line": 164,
            "ref_content": "DW24  SAVE\t\t\t; CDH"
        }
    ],
    "SAVE1": [
        {
            "ref_file": "eval.asm",
            "ref_line": 241,
            "ref_content": "EXPR2C:\t\t\tCALL    SAVE1"
        }
    ],
    "SAVE_EV": [
        {
            "ref_file": "eval.asm",
            "ref_line": 203,
            "ref_content": "EXPR0B:\t\t\tCALL    SAVE_EV            \t; Save first operand"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 213,
            "ref_content": "CALL    SAVE_EV\t\t\t; Save first operand"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 288,
            "ref_content": "EXPR3B:\t\t\tCALL    SAVE_EV\t\t\t; Save the first operator"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 343,
            "ref_content": "EXPR4B:\t\t\tCALL    SAVE_EV"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 356,
            "ref_content": "CALL    SAVE_EV\t\t\t; Save first operand"
        }
    ],
    "SAVLO1": [],
    "SAVLO2": [],
    "SAVLO4": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1938,
            "ref_content": "JR      SAVLO4"
        }
    ],
    "SAVLO5": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1969,
            "ref_content": "CALL    SAVLO5"
        }
    ],
    "SAVLOC": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1024,
            "ref_content": "CALL    SAVLOC          \t; Save local parameters"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1071,
            "ref_content": "CALL    SAVLOC"
        }
    ],
    "SAYLN": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1351,
            "ref_content": "CALL    SAYLN"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 987,
            "ref_content": "CALL    SAYLN\t\t\t; Output \" at line nnnn\" message."
        }
    ],
    "SCALE": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 847,
            "ref_content": "COS0:\t\t\tCALL    SCALE"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 858,
            "ref_content": "CALL    SCALE"
        }
    ],
    "SCP": [
        {
            "ref_file": "eval.asm",
            "ref_line": 833,
            "ref_content": "SLT:\t\t\tCALL    SCP"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 837,
            "ref_content": "SGT:\t\t\tCALL    SCP"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 842,
            "ref_content": "SGE:\t\t\tCALL    SCP"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 846,
            "ref_content": "SLE:\t\t\tCALL    SCP"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 851,
            "ref_content": "SNE:\t\t\tCALL    SCP"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 855,
            "ref_content": "SEQ:\t\t\tCALL    SCP"
        }
    ],
    "SCP0": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1510,
            "ref_content": "SCP:\t\t\tCALL\tSCP0"
        }
    ],
    "SCP1": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1533,
            "ref_content": "JR      SCP1"
        }
    ],
    "SCP2": [],
    "SCP3": [],
    "SEARCH": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1118,
            "ref_content": "CALL    SEARCH\t\t\t; Do the search"
        }
    ],
    "SEARCH_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 244,
            "ref_content": "CALL    SEARCH_EX          \t; Search for the first DATA token in the tokenised listing"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 979,
            "ref_content": "CALL    SEARCH_EX          \t; Look for \"DEF\" as the first token in a program line"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1307,
            "ref_content": "CALL    SEARCH_EX"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1377,
            "ref_content": "CALL    SEARCH_EX"
        }
    ],
    "SEQ": [
        {
            "ref_file": "eval.asm",
            "ref_line": 175,
            "ref_content": "DW24\tSEQ\t\t\t; ="
        }
    ],
    "SET1": [
        {
            "ref_file": "main.asm",
            "ref_line": 1387,
            "ref_content": "JR      C, SET1\t\t\t; Loop whilst DE (the address to search for) is > HL (the current line)"
        }
    ],
    "SET2": [
        {
            "ref_file": "main.asm",
            "ref_line": 1399,
            "ref_content": "JR      SET2\t\t\t; Set LINENO to 0"
        }
    ],
    "SET3": [
        {
            "ref_file": "main.asm",
            "ref_line": 1378,
            "ref_content": "JR      NC, SET3\t\t; So skip, as the address is less than or equal to the top of program area"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1383,
            "ref_content": "JR      Z, SET3\t\t\t; We've reached the end of the current BASIC program, not found the line"
        }
    ],
    "SETLIN": [
        {
            "ref_file": "exec.asm",
            "ref_line": 282,
            "ref_content": "END_:\t\t\tCALL    SETLIN          ;FIND CURRENT LINE"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1350,
            "ref_content": "CALL    SETLIN          ;FIND CURRENT LINE"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 969,
            "ref_content": "CALL    SETLIN\t\t\t; Get line number"
        }
    ],
    "SETOP1": [],
    "SETOP2": [
        {
            "ref_file": "main.asm",
            "ref_line": 1137,
            "ref_content": "CALL    SETOP2\t\t\t; Skip three bytes to get to end of empty BASIC program area and set TOP sysvar"
        }
    ],
    "SETTOP": [
        {
            "ref_file": "main.asm",
            "ref_line": 307,
            "ref_content": "CALL    SETTOP          \t; Set TOP sysvar"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 559,
            "ref_content": "DELETE:\t\t\tCALL    SETTOP          \t; Set TOP sysvar (first free byte at end of BASIC program)"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 911,
            "ref_content": "SAVE:\t\t\tCALL    SETTOP          \t; Set TOP sysvar"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1097,
            "ref_content": "CLEAN:\t\t\tCALL    SETTOP\t\t\t; Set TOP sysvar"
        }
    ],
    "SFIX": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1084,
            "ref_content": "CALL    SFIX"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1440,
            "ref_content": "HEXSTR:\t\t\tCALL    SFIX"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1573,
            "ref_content": "CALL    SFIX"
        }
    ],
    "SFIX_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 149,
            "ref_content": "DW24  SFIX_FP            ;FIX"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 669,
            "ref_content": "NOTK_FP:\t\t\tCALL    SFIX_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1603,
            "ref_content": "CALL    SFIX_FP"
        }
    ],
    "SFLOAT": [],
    "SFLOAT_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 150,
            "ref_content": "DW24  SFLOAT_FP          ;FLOAT"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 534,
            "ref_content": "CALL    SFLOAT_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 716,
            "ref_content": "FPI180:\t\t\tCALL    SFLOAT_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 777,
            "ref_content": "SQR_FP:\t\t\tCALL    SFLOAT_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 831,
            "ref_content": "TAN_FP:\t\t\tCALL    SFLOAT_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 846,
            "ref_content": "COS_FP:\t\t\tCALL    SFLOAT_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 856,
            "ref_content": "SIN_FP:\t\t\tCALL    SFLOAT_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 950,
            "ref_content": "EXP_FP:\t\t\tCALL    SFLOAT_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1030,
            "ref_content": "LN_FP:\t\t\tCALL    SFLOAT_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1112,
            "ref_content": "ASN_FP:\t\t\tCALL    SFLOAT_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1132,
            "ref_content": "ATN_FP:\t\t\tCALL    SFLOAT_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1215,
            "ref_content": "STR_FP:\t\t\tCALL    SFLOAT_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1755,
            "ref_content": "CALL    SFLOAT_FP"
        }
    ],
    "SGE": [
        {
            "ref_file": "eval.asm",
            "ref_line": 173,
            "ref_content": "DW24\tSGE\t\t\t; >="
        }
    ],
    "SGN": [
        {
            "ref_file": "eval.asm",
            "ref_line": 142,
            "ref_content": "DW24\tSGN\t\t\t; SGN"
        }
    ],
    "SGN_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 136,
            "ref_content": "DW24  SGN_FP             ;SGN"
        }
    ],
    "SGT": [
        {
            "ref_file": "eval.asm",
            "ref_line": 176,
            "ref_content": "DW24\tSGT\t\t\t; >"
        }
    ],
    "SHL3": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2859,
            "ref_content": "JR      SHL3"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2871,
            "ref_content": "JR      SHL3"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2879,
            "ref_content": "JR      SHL3"
        }
    ],
    "SIGN": [],
    "SIGNQ": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 739,
            "ref_content": "VAL_FP:\t\t\tCALL    SIGNQ"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1513,
            "ref_content": "CALL    SIGNQ"
        }
    ],
    "SIN": [
        {
            "ref_file": "eval.asm",
            "ref_line": 143,
            "ref_content": "DW24\tSIN\t\t\t; SIN"
        }
    ],
    "SIN0": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 837,
            "ref_content": "CALL    SIN0"
        }
    ],
    "SIN1": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 851,
            "ref_content": "JR      SIN1"
        }
    ],
    "SIN2": [],
    "SIN3": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 895,
            "ref_content": "JP      SIN3"
        }
    ],
    "SIN_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 137,
            "ref_content": "DW24  SIN_FP             ;SIN"
        }
    ],
    "SKIP": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2209,
            "ref_content": "ASSEM:\t\t\tCALL    SKIP"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2229,
            "ref_content": "CALL    SKIP"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2341,
            "ref_content": "CALL    SKIP\t\t\t; Skip any whitespace"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2575,
            "ref_content": "CALL    SKIP"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2832,
            "ref_content": "NUMBER:\t\t\tCALL    SKIP"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2903,
            "ref_content": "FIND:\t\t\tCALL    SKIP\t\t\t; Skip delimiters"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2957,
            "ref_content": "JR      SKIP\t\t\t; And loop"
        }
    ],
    "SKIP0": [],
    "SKIPNOTSP": [
        {
            "ref_file": "misc.asm",
            "ref_line": 100,
            "ref_content": "JR\tSKIPNOTSP"
        }
    ],
    "SKIPSP": [
        {
            "ref_file": "patch.asm",
            "ref_line": 295,
            "ref_content": "OSCLI: \t\t\tCALL    SKIPSP"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 339,
            "ref_content": "JP      SKIPSP"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 362,
            "ref_content": "JR      SKIPSP"
        }
    ],
    "SKIPSPC": [
        {
            "ref_file": "misc.asm",
            "ref_line": 40,
            "ref_content": "CALL\tSKIPSPC\t\t\t; Skip whitespace"
        },
        {
            "ref_file": "misc.asm",
            "ref_line": 91,
            "ref_content": "JR      SKIPSPC"
        }
    ],
    "SLE": [
        {
            "ref_file": "eval.asm",
            "ref_line": 171,
            "ref_content": "SOPTBL:\t\t\tDW24\tSLE\t\t\t; <= (STRING)"
        }
    ],
    "SLT": [
        {
            "ref_file": "eval.asm",
            "ref_line": 174,
            "ref_content": "DW24\tSLT\t\t\t; <"
        }
    ],
    "SNE": [
        {
            "ref_file": "eval.asm",
            "ref_line": 172,
            "ref_content": "DW24\tSNE\t\t\t; <>"
        }
    ],
    "SOPTBL": [],
    "SOUND": [
        {
            "ref_file": "exec.asm",
            "ref_line": 171,
            "ref_content": "DW24  SOUND\t\t\t; D4H"
        }
    ],
    "SOUND0": [
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 103,
            "ref_content": "JR\tZ, SOUND0\t\t; No, so loop back and send again"
        }
    ],
    "SOUND_FREQ_LOOKUP": [
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 66,
            "ref_content": "LD\tDE, SOUND_FREQ_LOOKUP"
        }
    ],
    "SPACE_": [],
    "SPAN": [
        {
            "ref_file": "exec.asm",
            "ref_line": 721,
            "ref_content": "CALL    SPAN            ;SKIP REST OF LIST"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1041,
            "ref_content": "CALL    SPAN            \t; Skip rest of ON list"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2002,
            "ref_content": "JR      SPAN"
        }
    ],
    "SPC": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2015,
            "ref_content": "CP      SPC"
        }
    ],
    "SQR": [
        {
            "ref_file": "eval.asm",
            "ref_line": 144,
            "ref_content": "DW24\tSQR\t\t\t; SQR"
        }
    ],
    "SQR0": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1118,
            "ref_content": "CALL    SQR0"
        }
    ],
    "SQR1": [],
    "SQR2": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 2237,
            "ref_content": "JP      SQR2"
        }
    ],
    "SQR3": [],
    "SQRA": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 803,
            "ref_content": "CALL    SQRA            ;ROOT"
        }
    ],
    "SQRB": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 808,
            "ref_content": "CALL    SQRB"
        }
    ],
    "SQR_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 138,
            "ref_content": "DW24  SQR_FP             ;SQR"
        }
    ],
    "SQUARE": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 875,
            "ref_content": "CALL    SQUARE          ;PUSH X*X"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 897,
            "ref_content": "SIN2:\t\t\tCALL    SQUARE          ;PUSH X*X"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1050,
            "ref_content": "CALL    SQUARE          ;PUSH X*X"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1157,
            "ref_content": "CALL    SQUARE          ;PUSH X*X"
        }
    ],
    "SRCH1": [],
    "SRCH1_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2137,
            "ref_content": "JR      SRCH1_EX\t\t\t; Rinse, lather and repeat"
        }
    ],
    "SRCH2": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1180,
            "ref_content": "DJNZ    SRCH2"
        }
    ],
    "SRCH2_EX": [],
    "SRCH3": [],
    "SRCH4": [],
    "STACCS": [
        {
            "ref_file": "exec.asm",
            "ref_line": 365,
            "ref_content": "CALL    STACCS\t\t\t; Copy the string from ACCS to the variable area"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1175,
            "ref_content": "CALL    STACCS"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1238,
            "ref_content": "INPUT4:\t\t\tCALL    STACCS"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1296,
            "ref_content": "CALL    STACCS"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1899,
            "ref_content": "CALL    STACCS"
        }
    ],
    "STAR_BYE": [],
    "STAR_EDIT": [],
    "STAR_FX": [],
    "STAR_FX1": [
        {
            "ref_file": "patch.asm",
            "ref_line": 477,
            "ref_content": "JR\tZ, STAR_FX1\t\t; Yes, so skip next bit"
        }
    ],
    "STAR_FX2": [
        {
            "ref_file": "patch.asm",
            "ref_line": 479,
            "ref_content": "JR\tSTAR_FX2"
        }
    ],
    "STAR_VERSION": [
        {
            "ref_file": "main.asm",
            "ref_line": 179,
            "ref_content": "CALL\tSTAR_VERSION"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 217,
            "ref_content": "CALL\tSTAR_VERSION\t\t;"
        }
    ],
    "STAVAR": [
        {
            "ref_file": "main.asm",
            "ref_line": 201,
            "ref_content": "LD\tHL, STAVAR\t\t; Cold start"
        }
    ],
    "STEP": [
        {
            "ref_file": "exec.asm",
            "ref_line": 843,
            "ref_content": "CP      STEP\t\t\t; Compare with the token value for \"STEP\""
        }
    ],
    "STOP": [
        {
            "ref_file": "exec.asm",
            "ref_line": 209,
            "ref_content": "DW24  STOP\t\t\t; FAH"
        }
    ],
    "STORE": [
        {
            "ref_file": "exec.asm",
            "ref_line": 426,
            "ref_content": "CALL    STORE"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 547,
            "ref_content": "CALL    STORE           \t; Store the address"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 903,
            "ref_content": "CALL    STORE           \t; Update the variable"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1119,
            "ref_content": "CALL    STORE\t\t\t; TODO: Not sure why or where it is being stored at this point"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1161,
            "ref_content": "CALL    STORE"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1236,
            "ref_content": "CALL    STORE"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1291,
            "ref_content": "CALL    STORE"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1894,
            "ref_content": "CALL    STORE\t           \t; Write to dummy variable"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2335,
            "ref_content": "CALL    STORE\t\t\t; Store the program counter"
        }
    ],
    "STORE1": [],
    "STORE4": [],
    "STORE5": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1044,
            "ref_content": "CALL    STORE5          ;STORE NEW NUMBER"
        }
    ],
    "STOREI": [],
    "STORES": [
        {
            "ref_file": "exec.asm",
            "ref_line": 432,
            "ref_content": "CALL    STORES"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1125,
            "ref_content": "CALL    STORES\t\t\t; TODO: Not sure why or where it is being stored at this point"
        }
    ],
    "STORS1": [],
    "STORS3": [],
    "STORS5": [],
    "STR": [],
    "STR0": [],
    "STR02": [],
    "STR1": [],
    "STR10": [],
    "STR11": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1246,
            "ref_content": "JR      STR11"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1255,
            "ref_content": "JR      STR11"
        }
    ],
    "STR13": [],
    "STR14": [],
    "STR15": [],
    "STR2": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1502,
            "ref_content": "JR      STR2"
        }
    ],
    "STR20": [],
    "STR21": [],
    "STR22": [],
    "STR23": [],
    "STR24": [],
    "STR25": [],
    "STR26": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1311,
            "ref_content": "JR      STR26"
        }
    ],
    "STR27": [],
    "STR3": [],
    "STR30": [],
    "STR31": [],
    "STR32": [],
    "STR33": [],
    "STR34": [],
    "STR35": [],
    "STR36": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1399,
            "ref_content": "JR      STR36"
        }
    ],
    "STR37": [],
    "STR38": [],
    "STR39": [],
    "STR3A": [],
    "STR4": [],
    "STR40": [],
    "STR41": [],
    "STR42": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1428,
            "ref_content": "STR43:\t\t\tDJNZ    STR42"
        }
    ],
    "STR43": [],
    "STR44": [],
    "STR47": [],
    "STRIN1": [],
    "STRIN2": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1363,
            "ref_content": "DJNZ    STRIN2"
        }
    ],
    "STRING_": [
        {
            "ref_file": "eval.asm",
            "ref_line": 158,
            "ref_content": "DW24\tSTRING_\t\t\t; STRINGS("
        }
    ],
    "STRS": [
        {
            "ref_file": "eval.asm",
            "ref_line": 157,
            "ref_content": "DW24\tSTRS\t\t\t; STR$"
        }
    ],
    "STR_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 147,
            "ref_content": "DW24  STR_FP             ;STR$"
        }
    ],
    "SUB_": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 281,
            "ref_content": "ISUB:\t\t\tCALL    SUB_"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 302,
            "ref_content": "CALL    SUB_"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 331,
            "ref_content": "FADD3:\t\t\tCALL    SUB_             ;HLH'L'=HLH'L'-DED'E'"
        }
    ],
    "SWAP": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1055,
            "ref_content": "CALL    SWAP"
        }
    ],
    "SWAP1": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1573,
            "ref_content": "CALL    SWAP1           ;RESTORE PREVIOUS VALUE"
        }
    ],
    "SWAP_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 250,
            "ref_content": "CALL    SWAP_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 273,
            "ref_content": "CALL    SWAP_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 409,
            "ref_content": "CALL    SWAP_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 427,
            "ref_content": "CALL    SWAP_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 502,
            "ref_content": "IPOW:\t\t\tCALL    SWAP_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 583,
            "ref_content": "CALL    SWAP_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 595,
            "ref_content": "FPOW1:\t\t\tCALL    SWAP_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 836,
            "ref_content": "CALL    SWAP_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1017,
            "ref_content": "RDIV:\t\t\tCALL    SWAP_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1602,
            "ref_content": "FIX2:\t\t\tCALL    SWAP_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1604,
            "ref_content": "CALL    SWAP_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1754,
            "ref_content": "FLOAT2:\t\t\tCALL    SWAP_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1756,
            "ref_content": "CALL    SWAP_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2036,
            "ref_content": "CALL    SWAP_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2083,
            "ref_content": "CALL    SWAP_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 2105,
            "ref_content": "POWR14:\t\t\tCALL    SWAP_FP"
        }
    ],
    "SWITCH_A": [
        {
            "ref_file": "gpio.asm",
            "ref_line": 23,
            "ref_content": "GPIOB_SETMODE:\t\tCALL\tSWITCH_A"
        }
    ],
    "SYNTAX": [],
    "TAB": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2013,
            "ref_content": "FORMAT:\t\t\tCP      TAB"
        }
    ],
    "TABIT": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2279,
            "ref_content": "CALL    TABIT"
        }
    ],
    "TAN": [
        {
            "ref_file": "eval.asm",
            "ref_line": 145,
            "ref_content": "DW24\tTAN\t\t\t; TAN"
        }
    ],
    "TAND": [],
    "TAN_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 139,
            "ref_content": "DW24  TAN_FP             ;TAN"
        }
    ],
    "TCALL": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2343,
            "ref_content": "CP      TCALL\t\t\t; Check if it is the token CALL (it will have been tokenised by BASIC)"
        }
    ],
    "TCMD_EV": [
        {
            "ref_file": "eval.asm",
            "ref_line": 529,
            "ref_content": "CP      TCMD_EV\t\t\t; Is it out of range of the function table?"
        }
    ],
    "TCMD_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 257,
            "ref_content": "SUB     TCMD_EX"
        }
    ],
    "TELL": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1345,
            "ref_content": "STOP:\t\t\tCALL    TELL"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 180,
            "ref_content": "CALL\tTELL"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 218,
            "ref_content": "CALL    TELL\t\t\t; Output the welcome message"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 841,
            "ref_content": "CALL    TELL\t\t\t; Display this error if the line number is not found"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 873,
            "ref_content": "BAD:\t\t\tCALL    TELL            \t; Output \"Bad program\" error"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1410,
            "ref_content": "CALL    TELL\t\t\t; Output the error message"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 437,
            "ref_content": "STAR_VERSION:\t\tCALL    TELL\t\t\t; Output the welcome message"
        }
    ],
    "TERM": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2954,
            "ref_content": "CALL    TERM\t\t\t; Is it a terminator?"
        }
    ],
    "TERM0": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1989,
            "ref_content": "JR      TERM0"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2235,
            "ref_content": "CALL    TERM0"
        }
    ],
    "TERMQ": [
        {
            "ref_file": "exec.asm",
            "ref_line": 219,
            "ref_content": "RUN:\t\t\tCALL    TERMQ\t\t\t; Standalone RUN command?"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 622,
            "ref_content": "PRINTC:\t\t\tCALL    TERMQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 705,
            "ref_content": "ON2:\t\t\tCALL    TERMQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 739,
            "ref_content": "GOTO1:\t\t\tCALL    TERMQ\t\t\t; Check for terminator"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 878,
            "ref_content": "CALL    TERMQ\t\t\t; Check for terminator (a NEXT without a variable)"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1191,
            "ref_content": "INPUT1:\t\t\tCALL    TERMQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1369,
            "ref_content": "CALL    TERMQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1528,
            "ref_content": "call TERMQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1999,
            "ref_content": "SPAN:\t\t\tCALL    TERMQ"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1847,
            "ref_content": "PAIR1:\t\t\tCALL    TERMQ\t\t\t; Check for ELSE, : or CR"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1868,
            "ref_content": "CALL    TERMQ\t\t\t; Check for ELSE, : or CR"
        }
    ],
    "TERROR_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 678,
            "ref_content": "ON_EX_:\t\t\tCP      TERROR_EX"
        }
    ],
    "TERROR_MN": [
        {
            "ref_file": "main.asm",
            "ref_line": 2069,
            "ref_content": "DB\tTERROR_MN"
        }
    ],
    "TEST": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1053,
            "ref_content": "CALL    TEST"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 798,
            "ref_content": "CALL    TEST\t\t\t; Test if the expression evaluates to zero"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1318,
            "ref_content": "CALL    TEST"
        }
    ],
    "TEST_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 423,
            "ref_content": "CALL    TEST_FP            ;TEST RANGE"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 727,
            "ref_content": "SGN_FP:\t\t\tCALL    TEST_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1329,
            "ref_content": "CALL    TEST_FP            ;IS HLH'L' ZERO?"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1760,
            "ref_content": "CALL    TEST_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1833,
            "ref_content": "FTEST_FP:\t\t\tCALL    TEST_FP"
        }
    ],
    "TEXT_": [
        {
            "ref_file": "main.asm",
            "ref_line": 2128,
            "ref_content": "JR      TEXT_\t\t\t; And loop"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 2141,
            "ref_content": "CALL    TEXT_\t\t\t; first byte of the string that follows it. Print it, then"
        }
    ],
    "TGOSUB": [
        {
            "ref_file": "exec.asm",
            "ref_line": 686,
            "ref_content": "CP      TGOSUB"
        }
    ],
    "TGOTO": [
        {
            "ref_file": "exec.asm",
            "ref_line": 684,
            "ref_content": "CP      TGOTO"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 719,
            "ref_content": "CP      TGOTO"
        }
    ],
    "THEN_EX_": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1321,
            "ref_content": "CP      THEN_EX_"
        }
    ],
    "THEN_MN_": [
        {
            "ref_file": "main.asm",
            "ref_line": 2065,
            "ref_content": "LIST2:\t\t\tDB\tTHEN_MN_"
        }
    ],
    "TIF": [
        {
            "ref_file": "main.asm",
            "ref_line": 603,
            "ref_content": "CP      TIF             \t; Check for IF clause (token IF)"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1870,
            "ref_content": "CP      TIF\t\t\t; Is the token IF?"
        }
    ],
    "TIME0": [
        {
            "ref_file": "eval.asm",
            "ref_line": 803,
            "ref_content": "JR      TIME0"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 807,
            "ref_content": "JR      TIME0"
        }
    ],
    "TIMEV": [
        {
            "ref_file": "eval.asm",
            "ref_line": 107,
            "ref_content": "DW24\tTIMEV\t\t\t; TIME"
        }
    ],
    "TIMEVS": [],
    "TIMEVS_EX": [],
    "TIMEV_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 168,
            "ref_content": "DW24  TIMEV_EX\t\t\t; D1H"
        }
    ],
    "TOKEN1": [],
    "TOKHI": [],
    "TOKLO": [
        {
            "ref_file": "main.asm",
            "ref_line": 2012,
            "ref_content": "CP      TOKLO\t\t\t; TOKLO is 8Fh"
        }
    ],
    "TON": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1037,
            "ref_content": "CP\tTON\t\t\t; Was it \"ON PROC\"?"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1475,
            "ref_content": "CP      TON"
        }
    ],
    "TOOBIG": [],
    "TOOBIG_FP": [],
    "TOOFAR": [],
    "TOP": [],
    "TOPV": [
        {
            "ref_file": "eval.asm",
            "ref_line": 146,
            "ref_content": "DW24\tTOPV\t\t\t; TO(P)"
        }
    ],
    "TOR": [],
    "TO_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 823,
            "ref_content": "CP      TO_EX\t\t\t; Compare with the token value for \"TO\""
        }
    ],
    "TO_MN": [],
    "TPROC": [
        {
            "ref_file": "exec.asm",
            "ref_line": 713,
            "ref_content": "CP      TPROC"
        }
    ],
    "TRACE": [
        {
            "ref_file": "main.asm",
            "ref_line": 2064,
            "ref_content": "DB\tTRACE"
        }
    ],
    "TRACE0": [],
    "TRACE1": [],
    "TRACEN": [],
    "TRACE_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 211,
            "ref_content": "DW24  TRACE_EX\t\t\t; FCH"
        }
    ],
    "TRAP": [
        {
            "ref_file": "exec.asm",
            "ref_line": 250,
            "ref_content": "CALL    TRAP           \t\t; Check keyboard"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 370,
            "ref_content": "CALL    TRAP"
        }
    ],
    "TRUE": [
        {
            "ref_file": "eval.asm",
            "ref_line": 147,
            "ref_content": "DW24\tTRUE\t\t\t; TRUE"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 835,
            "ref_content": "JR      TRUE"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 840,
            "ref_content": "JR      TRUE"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 844,
            "ref_content": "JR      TRUE"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 849,
            "ref_content": "JR      TRUE"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 853,
            "ref_content": "JR      TRUE"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1253,
            "ref_content": "JP\tTRUE\t\t\t; Otherwise return -1"
        }
    ],
    "TRUE_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 143,
            "ref_content": "DW24  TRUE_FP            ;TRUE"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 609,
            "ref_content": "JR      TRUE_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 616,
            "ref_content": "JR      TRUE_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 622,
            "ref_content": "JR      TRUE_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 629,
            "ref_content": "JR      TRUE_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 635,
            "ref_content": "JR      TRUE_FP"
        }
    ],
    "TSTOP": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1348,
            "ref_content": "DB\tTSTOP"
        }
    ],
    "TYPE_": [
        {
            "ref_file": "main.asm",
            "ref_line": 1776,
            "ref_content": "CALL    TYPE_\t\t\t; Get the variable type in D"
        }
    ],
    "TYPE_EV_": [
        {
            "ref_file": "eval.asm",
            "ref_line": 368,
            "ref_content": "JR      TYPE_EV_\t\t\t; Otherwise Error: \"Type mismatch\""
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 375,
            "ref_content": "JR      TYPE_EV_\t\t\t; Otherwise Error: \"Type mismatch\""
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 382,
            "ref_content": "JR      TYPE_EV_\t\t\t; Otherwise Error: \"Type mismatch\""
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 389,
            "ref_content": "JR      TYPE_EV_\t\t\t; Otherwise Error: \"Type mismatch\""
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 396,
            "ref_content": "JR      TYPE_EV_\t\t\t; Otherwise Error: \"Type mismatch\""
        }
    ],
    "UINT": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1459,
            "ref_content": "CALL    UINT          ;GET INTEGER PART"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1574,
            "ref_content": "JR      UINT"
        }
    ],
    "UNSTK": [],
    "UNSTK1": [],
    "UNTIL": [
        {
            "ref_file": "main.asm",
            "ref_line": 1171,
            "ref_content": "CP      UNTIL\t\t\t; Or is it UNTIL..."
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1262,
            "ref_content": "CP      UNTIL\t\t\t; If it is UNTIL"
        }
    ],
    "UNTIL_EX": [
        {
            "ref_file": "exec.asm",
            "ref_line": 212,
            "ref_content": "DW24  UNTIL_EX\t\t\t; FDH"
        }
    ],
    "UPPERC": [
        {
            "ref_file": "misc.asm",
            "ref_line": 47,
            "ref_content": "CALL    UPPERC\t\t\t; Convert to uppercase"
        },
        {
            "ref_file": "misc.asm",
            "ref_line": 202,
            "ref_content": "CALL\tUPPERC\t\t\t; Convert to upper case"
        }
    ],
    "UPPRC": [
        {
            "ref_file": "patch.asm",
            "ref_line": 303,
            "ref_content": "CALL    UPPRC"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 318,
            "ref_content": "CALL    UPPRC"
        }
    ],
    "USER": [
        {
            "ref_file": "patch.asm",
            "ref_line": 287,
            "ref_content": "LD \tHL, USER"
        }
    ],
    "USR": [
        {
            "ref_file": "eval.asm",
            "ref_line": 148,
            "ref_content": "DW24\tUSR\t\t\t; USR"
        }
    ],
    "USR1": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1595,
            "ref_content": "CALL    USR1\t\t\t; And call it"
        }
    ],
    "USR2": [],
    "VAL": [
        {
            "ref_file": "eval.asm",
            "ref_line": 149,
            "ref_content": "DW24\tVAL\t\t\t; VAL"
        }
    ],
    "VAL0": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1233,
            "ref_content": "CALL    VAL0"
        }
    ],
    "VAL16": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2613,
            "ref_content": "JP      VAL16\t\t\t; Otherwise use 16-bit addresses"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2746,
            "ref_content": "VAL24:\t\t\tCALL\tVAL16\t\t\t; Lower 16-bits are in HL"
        }
    ],
    "VAL24": [],
    "VAL8": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2401,
            "ref_content": "JP      VAL8"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2462,
            "ref_content": "JP\tVAL8\t\t\t; Write out the value"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2490,
            "ref_content": "JR      VAL8\t\t\t; And the value"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2626,
            "ref_content": "JP\tVAL8\t\t\t; And write that out"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2741,
            "ref_content": "VAL16:\t\t\tCALL    VAL8\t\t\t; Write out a 16-bit value (HL)"
        }
    ],
    "VAL_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 146,
            "ref_content": "DW24  VAL_FP             ;VAL"
        }
    ],
    "VAR_": [
        {
            "ref_file": "exec.asm",
            "ref_line": 1138,
            "ref_content": "CALL    VAR_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1213,
            "ref_content": "CALL    VAR_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1280,
            "ref_content": "CALL    VAR_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1578,
            "ref_content": "CALL    VAR_"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1919,
            "ref_content": "CALL    VAR_             \t; Dummy variable"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2326,
            "ref_content": "CALL    VAR_\t\t\t; Create a variable"
        }
    ],
    "VBLANK_HANDLER": [
        {
            "ref_file": "interrupts.asm",
            "ref_line": 30,
            "ref_content": "LD\t\tHL, VBLANK_HANDLER\t\t; this interrupt handler routine who's"
        }
    ],
    "VBLANK_HANDLER_JP": [
        {
            "ref_file": "interrupts.asm",
            "ref_line": 35,
            "ref_content": "LD\t\tHL, VBLANK_HANDLER_JP + 1\t; Pointer to the JP address in this segment"
        },
        {
            "ref_file": "interrupts.asm",
            "ref_line": 43,
            "ref_content": "LD\t\tHL, VBLANK_HANDLER_JP + 1\t; Pointer to the JP address in this segment"
        }
    ],
    "VBLANK_INIT": [
        {
            "ref_file": "patch.asm",
            "ref_line": 285,
            "ref_content": "OSINIT:\t\t\tCALL\tVBLANK_INIT"
        }
    ],
    "VBLANK_STOP": [
        {
            "ref_file": "patch.asm",
            "ref_line": 431,
            "ref_content": "STAR_BYE:\t\tCALL\tVBLANK_STOP\t\t; Restore MOS interrupts"
        }
    ],
    "VDU": [
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 48,
            "ref_content": "VDU\t10h"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 63,
            "ref_content": "VDU\t16H\t\t\t; Mode change"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 64,
            "ref_content": "VDU\tL"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 86,
            "ref_content": "VDU\t23"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 87,
            "ref_content": "VDU\t0"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 88,
            "ref_content": "VDU\tvdp_scrchar"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 89,
            "ref_content": "VDU\t(VDU_BUFFER+0)"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 90,
            "ref_content": "VDU\t(VDU_BUFFER+1)"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 91,
            "ref_content": "VDU\t(VDU_BUFFER+2)"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 92,
            "ref_content": "VDU\t(VDU_BUFFER+3)"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 118,
            "ref_content": "VDU\t23"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 119,
            "ref_content": "VDU\t0"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 120,
            "ref_content": "VDU\tvdp_scrpixel"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 121,
            "ref_content": "VDU\t(VDU_BUFFER+0)"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 122,
            "ref_content": "VDU\t(VDU_BUFFER+1)"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 123,
            "ref_content": "VDU\t(VDU_BUFFER+2)"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 124,
            "ref_content": "VDU\t(VDU_BUFFER+3)"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 147,
            "ref_content": "VDU\t11h\t\t\t; Just set the colour"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 148,
            "ref_content": "VDU\t(VDU_BUFFER+0)"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 160,
            "ref_content": "VDU\t13h\t\t\t; VDU:COLOUR"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 161,
            "ref_content": "VDU\t(VDU_BUFFER+0)\t\t; Logical Colour"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 162,
            "ref_content": "VDU\t(VDU_BUFFER+1)\t\t; Palette Colour"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 163,
            "ref_content": "VDU\t0\t\t\t; RGB set to 0"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 164,
            "ref_content": "VDU\t0"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 165,
            "ref_content": "VDU\t0"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 178,
            "ref_content": "VDU\t13h\t\t\t; VDU:COLOUR"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 179,
            "ref_content": "VDU\t(VDU_BUFFER+0)\t\t; Logical Colour"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 180,
            "ref_content": "VDU\tFFh\t\t\t; Physical Colour (-1 for RGB mode)"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 181,
            "ref_content": "VDU\t(VDU_BUFFER+1)\t\t; R"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 182,
            "ref_content": "VDU\t(VDU_BUFFER+2)\t\t; G"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 183,
            "ref_content": "VDU\t(VDU_BUFFER+3)\t\t; B"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 199,
            "ref_content": "VDU\t12h\t\t\t; VDU:GCOL"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 200,
            "ref_content": "VDU\t(VDU_BUFFER+0)\t\t; Mode"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 201,
            "ref_content": "VDU\t(VDU_BUFFER+1)\t\t; Colour"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 212,
            "ref_content": "PLOT_1:\t\t\tVDU\t19H\t\t; VDU code for PLOT"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 213,
            "ref_content": "VDU\tC\t\t;  C: Mode"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 214,
            "ref_content": "VDU\tE\t\t; DE: X"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 215,
            "ref_content": "VDU\tD"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 216,
            "ref_content": "VDU\tL\t\t; HL: Y"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 217,
            "ref_content": "VDU\tH"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 234,
            "ref_content": "VDU\t19h\t\t; Move to the first coordinates"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 235,
            "ref_content": "VDU\t04h"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 236,
            "ref_content": "VDU\tE"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 237,
            "ref_content": "VDU\tD"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 238,
            "ref_content": "VDU\tL"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 239,
            "ref_content": "VDU\tH"
        },
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 85,
            "ref_content": "VDU\t23\t\t\t; Send the sound command"
        },
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 86,
            "ref_content": "VDU\t0"
        },
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 87,
            "ref_content": "VDU\tvdp_audio"
        },
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 88,
            "ref_content": "VDU\t(VDU_BUFFER+0)\t\t; 0: Channel"
        },
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 89,
            "ref_content": "VDU\t(VDU_BUFFER+1)\t\t; 1: Waveform (0)"
        },
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 90,
            "ref_content": "VDU\t(VDU_BUFFER+2)\t\t; 2: Volume (0-100)"
        },
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 91,
            "ref_content": "VDU\t(VDU_BUFFER+3)\t\t; 3: Frequency L"
        },
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 92,
            "ref_content": "VDU\t(VDU_BUFFER+4)\t\t; 4: Frequency H"
        },
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 93,
            "ref_content": "VDU\t(VDU_BUFFER+5)\t\t; 5: Duration L"
        },
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 94,
            "ref_content": "VDU\t(VDU_BUFFER+6)\t\t; 6: Duration H"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 198,
            "ref_content": "DW24  VDU\t\t\t; EFH"
        },
        {
            "ref_file": "macros.inc",
            "ref_line": 34,
            "ref_content": "MACRO VDU\tval"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 157,
            "ref_content": "VDU\t23"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 158,
            "ref_content": "VDU\t0"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 159,
            "ref_content": "VDU\tvdp_cursor"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 509,
            "ref_content": "OSBYTE_0B:\t\tVDU\t23"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 510,
            "ref_content": "VDU\t0"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 511,
            "ref_content": "VDU\tvdp_keystate"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 512,
            "ref_content": "VDU\tL"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 513,
            "ref_content": "VDU\tH"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 514,
            "ref_content": "VDU\t0"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 515,
            "ref_content": "VDU \t0"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 516,
            "ref_content": "VDU\t255"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 523,
            "ref_content": "OSBYTE_0C:\t\tVDU\t23"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 524,
            "ref_content": "VDU\t0"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 525,
            "ref_content": "VDU\tvdp_keystate"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 526,
            "ref_content": "VDU\t0"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 527,
            "ref_content": "VDU \t0"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 528,
            "ref_content": "VDU\tL"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 529,
            "ref_content": "VDU\tH"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 530,
            "ref_content": "VDU\t255"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 551,
            "ref_content": "OSBYTE_76:\t\tVDU\t23"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 552,
            "ref_content": "VDU\t0"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 553,
            "ref_content": "VDU\tvdp_keystate"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 554,
            "ref_content": "VDU\t0"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 555,
            "ref_content": "VDU \t0"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 556,
            "ref_content": "VDU\t0"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 557,
            "ref_content": "VDU\t0"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 558,
            "ref_content": "VDU\tL"
        }
    ],
    "VDU4": [],
    "VDU_BUFFER": [],
    "VPOS": [
        {
            "ref_file": "eval.asm",
            "ref_line": 150,
            "ref_content": "DW24\tVPOS\t\t\t; VPOS"
        }
    ],
    "WAIT_VBLANK": [
        {
            "ref_file": "patch.asm",
            "ref_line": 114,
            "ref_content": "CALL\tWAIT_VBLANK \t\t; Wait a frame"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 225,
            "ref_content": "CALL\tWAIT_VBLANK \t\t; Wait a frame"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 535,
            "ref_content": "OSBYTE_13:\t\tCALL\tWAIT_VBLANK"
        }
    ],
    "WARM": [
        {
            "ref_file": "exec.asm",
            "ref_line": 288,
            "ref_content": "JP      WARM            ;\"Ready\""
        },
        {
            "ref_file": "main.asm",
            "ref_line": 923,
            "ref_content": "WARM0:\t\t\tJP      WARM\t\t\t; Jump back to the command loop"
        }
    ],
    "WARM0": [
        {
            "ref_file": "main.asm",
            "ref_line": 907,
            "ref_content": "JR      WARM0\t\t\t; Jump back to the command loop"
        }
    ],
    "WARMNC": [],
    "WIDTH": [],
    "WIDTHV": [
        {
            "ref_file": "exec.asm",
            "ref_line": 213,
            "ref_content": "DW24  WIDTHV\t\t\t; FEH"
        }
    ],
    "X10": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 1556,
            "ref_content": "CALL    X10             ;*10 & COPY OLD VALUE"
        }
    ],
    "X10B": [],
    "X2": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 508,
            "ref_content": "IPOW1:\t\t\tCALL    X2"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1290,
            "ref_content": "STR22:\t\t\tCALL    X2              ;RL AHLH'L'"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1961,
            "ref_content": "CALL    X2"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1963,
            "ref_content": "CALL    X2"
        }
    ],
    "X4OR5": [
        {
            "ref_file": "exec.asm",
            "ref_line": 487,
            "ref_content": "CALL    X4OR5           \t; Dimension Accumulator Value * 4 or * 5 depending on type"
        },
        {
            "ref_file": "main.asm",
            "ref_line": 1532,
            "ref_content": "CALL    X4OR5           \t; DE=DE*n"
        }
    ],
    "X5": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 2095,
            "ref_content": "CALL    X5"
        }
    ],
    "XEQ": [
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 49,
            "ref_content": "JP\tXEQ"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 69,
            "ref_content": "JP\tXEQ"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 149,
            "ref_content": "JP\tXEQ"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 166,
            "ref_content": "JP\tXEQ"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 184,
            "ref_content": "JP\tXEQ"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 202,
            "ref_content": "JP\tXEQ"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 218,
            "ref_content": "JP\tXEQ"
        },
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 44,
            "ref_content": "JP\tNC, XEQ\t\t\t; Out of bounds, do nothing"
        },
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 106,
            "ref_content": "JP\tXEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 322,
            "ref_content": "JP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 366,
            "ref_content": "XEQR:\t\t\tJP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 656,
            "ref_content": "JP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 781,
            "ref_content": "CALL    XEQ\t\t\t; Push the marker (address of REPCHK) onto the execution stack and continue execution"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 806,
            "ref_content": "XEQ2:\t\t\tJP      XEQ\t\t\t; Continue execution"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 860,
            "ref_content": "CALL    XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 930,
            "ref_content": "JP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1038,
            "ref_content": "JP\tNZ, XEQ\t\t\t; No, so back to XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1045,
            "ref_content": "JP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1341,
            "ref_content": "JP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1358,
            "ref_content": "JP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1379,
            "ref_content": "JP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1397,
            "ref_content": "JP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1404,
            "ref_content": "JP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1414,
            "ref_content": "JP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1420,
            "ref_content": "JP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1428,
            "ref_content": "JP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1459,
            "ref_content": "JP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1467,
            "ref_content": "JP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1484,
            "ref_content": "JP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1531,
            "ref_content": "VDU4:\t\t\tJP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1537,
            "ref_content": "JP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1549,
            "ref_content": "JP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1596,
            "ref_content": "JP      XEQ"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1664,
            "ref_content": "JP      XEQ"
        }
    ],
    "XEQ0": [
        {
            "ref_file": "exec.asm",
            "ref_line": 336,
            "ref_content": "JP      XEQ0"
        }
    ],
    "XEQ1": [],
    "XEQ2": [],
    "XEQR": [
        {
            "ref_file": "exec.asm",
            "ref_line": 380,
            "ref_content": "JR      XEQR"
        }
    ],
    "XTRAC1": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2112,
            "ref_content": "JR      XTRAC1"
        }
    ],
    "XTRACT": [
        {
            "ref_file": "exec.asm",
            "ref_line": 2081,
            "ref_content": "CALL    XTRACT"
        }
    ],
    "ZERO": [
        {
            "ref_file": "eval.asm",
            "ref_line": 125,
            "ref_content": "DW24\tZERO\t\t\t; FALSE"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 419,
            "ref_content": "HEX:\t\t\tCALL    ZERO\t\t\t; Set result to 0"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 449,
            "ref_content": "BIN:\t\t\tCALL    ZERO\t\t\t; Set result to 0"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 693,
            "ref_content": "JP      ZERO\t\t\t; Otherwise return false (zero)"
        },
        {
            "ref_file": "eval.asm",
            "ref_line": 1252,
            "ref_content": "JP\tZ, ZERO\t\t\t; No, so return 0"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 1080,
            "ref_content": "CALL    ZERO\t\t\t; Zero the variable anyway"
        },
        {
            "ref_file": "exec.asm",
            "ref_line": 2328,
            "ref_content": "CALL    ZERO\t\t\t; Zero it"
        }
    ],
    "ZERO_FP": [
        {
            "ref_file": "fpp.asm",
            "ref_line": 141,
            "ref_content": "DW24  ZERO_FP            ;ZERO"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 732,
            "ref_content": "CALL    ZERO_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1073,
            "ref_content": "CALL    ZERO_FP"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1457,
            "ref_content": "CON_FP:\t\t\tCALL    ZERO_FP            ;INITIALISE TO ZERO"
        },
        {
            "ref_file": "fpp.asm",
            "ref_line": 1889,
            "ref_content": "JR      ZERO_FP            ;PRESET FALSE"
        }
    ],
    "_argv_ptrs": [
        {
            "ref_file": "init.asm",
            "ref_line": 52,
            "ref_content": "LD\t\tIX, _argv_ptrs\t\t; The argv array pointer address"
        }
    ],
    "_basic_main": [],
    "_clear_ram": [
        {
            "ref_file": "init.asm",
            "ref_line": 57,
            "ref_content": "CALL\t\t_clear_ram"
        }
    ],
    "_end": [],
    "_exec_name": [
        {
            "ref_file": "init.asm",
            "ref_line": 90,
            "ref_content": "_parse_params:\t\tLD\tBC, _exec_name"
        }
    ],
    "_get_token": [
        {
            "ref_file": "init.asm",
            "ref_line": 103,
            "ref_content": "CALL\t_get_token\t\t; Get the next token"
        }
    ],
    "_parse_params": [
        {
            "ref_file": "init.asm",
            "ref_line": 54,
            "ref_content": "CALL\t\t_parse_params\t\t; Parse the parameters"
        }
    ],
    "_parse_params_1": [
        {
            "ref_file": "init.asm",
            "ref_line": 122,
            "ref_content": "JR\tC, _parse_params_1\t; And loop"
        }
    ],
    "_skip_spaces": [
        {
            "ref_file": "init.asm",
            "ref_line": 95,
            "ref_content": "CALL\t_skip_spaces\t\t; Skip HL past any leading spaces"
        },
        {
            "ref_file": "init.asm",
            "ref_line": 113,
            "ref_content": "CALL\t_skip_spaces\t\t; And skip HL past any spaces onto the next character"
        },
        {
            "ref_file": "init.asm",
            "ref_line": 155,
            "ref_content": "JR\t_skip_spaces\t\t; Increment length"
        }
    ],
    "_sps": [],
    "_start": [
        {
            "ref_file": "init.asm",
            "ref_line": 30,
            "ref_content": "JP\t_start\t\t\t\t; Jump to start"
        }
    ],
    "argv_ptrs_max": [
        {
            "ref_file": "init.asm",
            "ref_line": 98,
            "ref_content": "LD\tB, argv_ptrs_max - 1\t; B: Maximum number of argv_ptrs"
        }
    ],
    "end_binary": [],
    "fa_create_always": [
        {
            "ref_file": "patch.asm",
            "ref_line": 845,
            "ref_content": "LD\tC, fa_write | fa_create_always"
        }
    ],
    "fa_create_new": [],
    "fa_open_always": [],
    "fa_open_append": [
        {
            "ref_file": "patch.asm",
            "ref_line": 843,
            "ref_content": "LD\tC, fa_write | fa_open_append"
        }
    ],
    "fa_open_existing": [],
    "fa_read": [
        {
            "ref_file": "patch.asm",
            "ref_line": 841,
            "ref_content": "OSOPEN:\t\t\tLD\tC, fa_read"
        }
    ],
    "fa_write": [
        {
            "ref_file": "patch.asm",
            "ref_line": 843,
            "ref_content": "LD\tC, fa_write | fa_open_append"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 845,
            "ref_content": "LD\tC, fa_write | fa_create_always"
        }
    ],
    "ffs_chdir": [],
    "ffs_chdrive": [],
    "ffs_chmod": [],
    "ffs_dclose": [],
    "ffs_dfindfirst": [],
    "ffs_dfindnext": [],
    "ffs_dopen": [],
    "ffs_dread": [],
    "ffs_fclose": [],
    "ffs_fdisk": [],
    "ffs_feof": [],
    "ffs_ferror": [],
    "ffs_fexpand": [],
    "ffs_fforward": [],
    "ffs_fgets": [],
    "ffs_flseek": [],
    "ffs_fopen": [],
    "ffs_fprintf": [],
    "ffs_fputc": [],
    "ffs_fputs": [],
    "ffs_fread": [],
    "ffs_fsize": [],
    "ffs_fsync": [],
    "ffs_ftell": [],
    "ffs_ftruncate": [],
    "ffs_fwrite": [],
    "ffs_getcwd": [],
    "ffs_getfree": [],
    "ffs_getlabel": [],
    "ffs_mkdir": [],
    "ffs_mkfs": [],
    "ffs_mount": [],
    "ffs_rename": [],
    "ffs_setcp": [],
    "ffs_setlabel": [],
    "ffs_stat": [],
    "ffs_unlink": [],
    "ffs_utime": [],
    "lbl1": [],
    "lbl2": [
        {
            "ref_file": "tmp1.asm",
            "ref_line": 2,
            "ref_content": "call lbl2"
        }
    ],
    "lbl3": [
        {
            "ref_file": "tmp2.asm",
            "ref_line": 2,
            "ref_content": "call lbl3"
        }
    ],
    "mos_cd": [],
    "mos_copy": [],
    "mos_del": [],
    "mos_dir": [],
    "mos_editline": [
        {
            "ref_file": "patch.asm",
            "ref_line": 102,
            "ref_content": "MOSCALL\tmos_editline\t\t; Call the MOS line editor"
        }
    ],
    "mos_fclose": [
        {
            "ref_file": "patch.asm",
            "ref_line": 856,
            "ref_content": "MOSCALL\tmos_fclose"
        }
    ],
    "mos_feof": [
        {
            "ref_file": "patch.asm",
            "ref_line": 894,
            "ref_content": "MOSCALL\tmos_feof"
        }
    ],
    "mos_fgetc": [
        {
            "ref_file": "patch.asm",
            "ref_line": 869,
            "ref_content": "MOSCALL\tmos_fgetc"
        }
    ],
    "mos_flseek": [
        {
            "ref_file": "patch.asm",
            "ref_line": 930,
            "ref_content": "MOSCALL\t\tmos_flseek"
        }
    ],
    "mos_fopen": [
        {
            "ref_file": "patch.asm",
            "ref_line": 846,
            "ref_content": "@@:\t\t\tMOSCALL\tmos_fopen"
        }
    ],
    "mos_fputc": [
        {
            "ref_file": "patch.asm",
            "ref_line": 881,
            "ref_content": "MOSCALL\tmos_fputc"
        }
    ],
    "mos_fread": [],
    "mos_fwrite": [],
    "mos_getError": [
        {
            "ref_file": "patch.asm",
            "ref_line": 666,
            "ref_content": "MOSCALL\tmos_getError\t\t; Copy the error message into the buffer"
        }
    ],
    "mos_getfil": [
        {
            "ref_file": "patch.asm",
            "ref_line": 907,
            "ref_content": "MOSCALL\t\tmos_getfil \t; HLU: Pointer to FIL structure"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 942,
            "ref_content": "MOSCALL mos_getfil  ; HLU: Pointer to FIL structure"
        }
    ],
    "mos_getkbmap": [
        {
            "ref_file": "eval.asm",
            "ref_line": 1227,
            "ref_content": "INKEYM:\t\t\tMOSCALL\tmos_getkbmap\t\t; Get the base address of the keyboard"
        }
    ],
    "mos_getkey": [
        {
            "ref_file": "patch.asm",
            "ref_line": 207,
            "ref_content": "OSRDCH:\t\t\tMOSCALL\tmos_getkey\t\t; Read keyboard"
        }
    ],
    "mos_getrtc": [
        {
            "ref_file": "patch.asm",
            "ref_line": 958,
            "ref_content": "MOSCALL\tmos_getrtc"
        }
    ],
    "mos_i2c_close": [],
    "mos_i2c_open": [],
    "mos_i2c_read": [],
    "mos_i2c_write": [],
    "mos_load": [
        {
            "ref_file": "patch.asm",
            "ref_line": 656,
            "ref_content": "OSLOAD_BBC:\t\tMOSCALL\tmos_load\t\t; Call LOAD in MOS"
        }
    ],
    "mos_mkdir": [],
    "mos_oscli": [
        {
            "ref_file": "patch.asm",
            "ref_line": 347,
            "ref_content": "MOSCALL\tmos_oscli\t\t; Returns OSCLI error in A"
        }
    ],
    "mos_ren": [],
    "mos_save": [
        {
            "ref_file": "patch.asm",
            "ref_line": 724,
            "ref_content": "OSSAVE_BBC:\t\tMOSCALL\tmos_save\t\t; Call SAVE in MOS"
        }
    ],
    "mos_setintvector": [
        {
            "ref_file": "interrupts.asm",
            "ref_line": 32,
            "ref_content": "MOSCALL\t\tmos_setintvector"
        },
        {
            "ref_file": "interrupts.asm",
            "ref_line": 47,
            "ref_content": "MOSCALL\t\tmos_setintvector\t\t; Restore the MOS interrupt vector"
        }
    ],
    "mos_setkbvector": [],
    "mos_setrtc": [],
    "mos_sysvars": [
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 59,
            "ref_content": "MOSCALL\tmos_sysvars\t\t; Reset the semaphore"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 65,
            "ref_content": "MOSCALL\tmos_sysvars"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 84,
            "ref_content": "MOSCALL\tmos_sysvars\t\t; Reset the semaphore"
        },
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 116,
            "ref_content": "MOSCALL\tmos_sysvars\t\t; Reset the semaphore"
        },
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 82,
            "ref_content": "MOSCALL\tmos_sysvars\t\t; Reset the semaphore"
        },
        {
            "ref_file": "interrupts.asm",
            "ref_line": 53,
            "ref_content": "DO_KEYBOARD:\t\tMOSCALL\t\tmos_sysvars\t\t\t; Get the system variables"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 123,
            "ref_content": "MOSCALL\tmos_sysvars"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 134,
            "ref_content": "MOSCALL\tmos_sysvars"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 155,
            "ref_content": "MOSCALL\tmos_sysvars\t\t; Reset the semaphore"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 540,
            "ref_content": "MOSCALL\tmos_sysvars\t\t; Fetch pointer to system variables"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 566,
            "ref_content": "MOSCALL\tmos_sysvars\t\t; Fetch pointer to system variables"
        }
    ],
    "mos_uclose": [],
    "mos_ugetc": [],
    "mos_uopen": [],
    "mos_uputc": [],
    "sysvar_audioChannel": [],
    "sysvar_audioSuccess": [],
    "sysvar_cursorX": [],
    "sysvar_cursorY": [],
    "sysvar_keyascii": [],
    "sysvar_keydelay": [],
    "sysvar_keyled": [],
    "sysvar_keymods": [],
    "sysvar_keyrate": [],
    "sysvar_mouseButtons": [],
    "sysvar_mouseWheel": [],
    "sysvar_mouseX": [],
    "sysvar_mouseXDelta": [],
    "sysvar_mouseY": [],
    "sysvar_mouseYDelta": [],
    "sysvar_rtc": [],
    "sysvar_rtcEnable": [],
    "sysvar_scrColours": [],
    "sysvar_scrCols": [],
    "sysvar_scrHeight": [],
    "sysvar_scrMode": [],
    "sysvar_scrRows": [],
    "sysvar_scrWidth": [],
    "sysvar_scrchar": [],
    "sysvar_scrpixel": [],
    "sysvar_scrpixelIndex": [],
    "sysvar_spare": [],
    "sysvar_time": [
        {
            "ref_file": "patch.asm",
            "ref_line": 124,
            "ref_content": "LD\t(IX + sysvar_time + 0), L"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 125,
            "ref_content": "LD\t(IX + sysvar_time + 1), H"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 126,
            "ref_content": "LD\t(IX + sysvar_time + 2), E"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 127,
            "ref_content": "LD\t(IX + sysvar_time + 3), D"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 135,
            "ref_content": "LD\tL, (IX + sysvar_time + 0)"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 136,
            "ref_content": "LD\tH, (IX + sysvar_time + 1)"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 137,
            "ref_content": "LD\tE, (IX + sysvar_time + 2)"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 138,
            "ref_content": "LD\tD, (IX + sysvar_time + 3)"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 541,
            "ref_content": "LD\tA, (IX + sysvar_time + 0)"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 542,
            "ref_content": "@@:\t\t\tCP \tA, (IX + sysvar_time + 0)"
        }
    ],
    "sysvar_vkeycode": [],
    "sysvar_vkeycount": [],
    "sysvar_vkeydown": [],
    "sysvar_vpd_pflags": [],
    "vdp_audio": [
        {
            "ref_file": "agon_sound.asm",
            "ref_line": 87,
            "ref_content": "VDU\tvdp_audio"
        }
    ],
    "vdp_cursor": [
        {
            "ref_file": "patch.asm",
            "ref_line": 159,
            "ref_content": "VDU\tvdp_cursor"
        }
    ],
    "vdp_gp": [],
    "vdp_keycode": [],
    "vdp_keystate": [
        {
            "ref_file": "patch.asm",
            "ref_line": 511,
            "ref_content": "VDU\tvdp_keystate"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 525,
            "ref_content": "VDU\tvdp_keystate"
        },
        {
            "ref_file": "patch.asm",
            "ref_line": 553,
            "ref_content": "VDU\tvdp_keystate"
        }
    ],
    "vdp_logicalcoords": [],
    "vdp_mode": [],
    "vdp_pflag_audio": [],
    "vdp_pflag_cursor": [],
    "vdp_pflag_mode": [],
    "vdp_pflag_mouse": [],
    "vdp_pflag_point": [],
    "vdp_pflag_rtc": [],
    "vdp_pflag_scrchar": [],
    "vdp_rtc": [],
    "vdp_scrchar": [
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 88,
            "ref_content": "VDU\tvdp_scrchar"
        }
    ],
    "vdp_scrpixel": [
        {
            "ref_file": "agon_graphics.asm",
            "ref_line": 120,
            "ref_content": "VDU\tvdp_scrpixel"
        }
    ],
    "vdp_terminalmode": []
}