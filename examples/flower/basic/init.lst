PC     Output      Line
040000             0001   ;
040000             0002   ; Title:	BBC Basic ADL for AGON - Initialisation Code
040000             0003   ;		Initialisation Code
040000             0004   ; Author:	Dean Belfield
040000             0005   ; Created:	12/05/2023
040000             0006   ; Last Updated:	26/11/2023
040000             0007   ;
040000             0008   ; Modinfo:
040000             0009   ; 11/07/2023:	Fixed *BYE for ADL mode
040000             0010   ; 26/11/2023:	Moved the ram clear routine into here
040000             0011   
040000             0012   			; SEGMENT CODE
040000             0013   
040000             0014   			; XDEF	_end
040000             0015   
040000             0016   			; XREF	_main				; In main.asm
040000             0017   
040000             0018   			; XREF	RAM_START			; In ram.asm
040000             0019   			; XREF	RAM_END
040000             0020   
040000             0021   			.ASSUME	ADL = 1
040000             0022   
040000             0023   			include "ram.asm"
040000             0001*  ;
040000             0002*  ; Title:	BBC Basic Interpreter - Z80 version
040000             0003*  ;		RAM Module for BBC Basic Interpreter
040000             0004*  ;		For use with Version 2.0 of BBC BASIC
040000             0005*  ;		Standard CP/M Distribution Version
040000             0006*  ; Author:	(C) Copyright  R.T.Russell 31-12-1983
040000             0007*  ; Modified By:	Dean Belfield
040000             0008*  ; Created:	12/05/2023
040000             0009*  ; Last Updated:	26/06/2023
040000             0010*  ;
040000             0011*  ; Modinfo:
040000             0012*  ; 06/06/2023:	Modified to run in ADL mode
040000             0013*  ; 26/06/2023:	Added temporary stores R0 and R1
040000             0014*  
040000             0015*  			.ASSUME	ADL = 1
040000             0016*  
040000             0017*  			; DEFINE	LORAM, SPACE = ROM
040000             0018*  			; SEGMENT LORAM
040000             0019*  
040000             0020*  			; XDEF	ACCS
040000             0021*  			; XDEF	BUFFER
040000             0022*  			; XDEF	STAVAR
040000             0023*  			; XDEF	DYNVAR
040000             0024*  			; XDEF	FNPTR
040000             0025*  			; XDEF	PROPTR
040000             0026*  			; XDEF	PAGE_
040000             0027*  			; XDEF	TOP
040000             0028*  			; XDEF	LOMEM
040000             0029*  			; XDEF 	FREE
040000             0030*  			; XDEF	HIMEM
040000             0031*  			; XDEF	LINENO
040000             0032*  			; XDEF	TRACEN
040000             0033*  			; XDEF	AUTONO
040000             0034*  			; XDEF	ERRTRP
040000             0035*  			; XDEF	ERRTXT
040000             0036*  			; XDEF	DATPTR
040000             0037*  			; XDEF	ERL
040000             0038*  			; XDEF	ERRLIN
040000             0039*  			; XDEF	RANDOM
040000             0040*  			; XDEF	COUNT
040000             0041*  			; XDEF	WIDTH
040000             0042*  			; XDEF	ERR
040000             0043*  			; XDEF	LISTON
040000             0044*  			; XDEF	INCREM
040000             0045*  
040000             0046*  			; XDEF	FLAGS
040000             0047*  			; XDEF	OSWRCHPT
040000             0048*  			; XDEF	OSWRCHCH
040000             0049*  			; XDEF	OSWRCHFH
040000             0050*  			; XDEF	KEYDOWN
040000             0051*  			; XDEF	KEYASCII
040000             0052*  			; XDEF	KEYCOUNT
040000             0053*  
040000             0054*  			; XDEF	R0
040000             0055*  			; XDEF	R1
040000             0056*  
040000             0057*  			; XDEF	RAM_START
040000             0058*  			; XDEF	RAM_END
040000             0059*  			; XDEF	USER
040000             0060*  
040000             0061*  			ALIGN 		256		; ACCS, BUFFER & STAVAR must be on page boundaries
040000             0062*  RAM_START:
040000             0063*  ;
040000             0064*  ACCS:			DS		256             ; String Accumulator
040100             0065*  BUFFER:			DS		256             ; String Input Buffer
040200             0066*  STAVAR:			DS	 	27*4            ; Static Variables
04026C             0067*  DYNVAR: 		DS 		54*3            ; Dynamic Variable Pointers
04030E             0068*  FNPTR:  		DS    		3               ; Dynamic Function Pointers
040311             0069*  PROPTR: 		DS		3               ; Dynamic Procedure Pointers
040314             0070*  ;
040314             0071*  PAGE_:   		DS		3               ; Start of User Program
040317             0072*  TOP:    		DS		3               ; First Location after User Program
04031A             0073*  LOMEM:  		DS		3               ; Start of Dynamic Storage
04031D             0074*  FREE:   		DS		3               ; First Free Space Byte
040320             0075*  HIMEM:  		DS		3               ; First Protected Byte
040323             0076*  ;
040323             0077*  LINENO: 		DS		3               ; Line Number
040326             0078*  TRACEN:			DS		3               ; Trace Flag
040329             0079*  AUTONO:			DS		3               ; Auto Flag
04032C             0080*  ERRTRP:			DS		3               ; Error Trap
04032F             0081*  ERRTXT:			DS		2               ; Error Message Pointer
040331             0082*  DATPTR:			DS		2               ; Data Pointer
040333             0083*  ERL:			DS		2               ; Error Line
040335             0084*  ERRLIN:			DS		3               ; The "ON ERROR" Line
040338             0085*  RANDOM:			DS		5               ; Random Number
04033D             0086*  COUNT:			DS		1               ; Print Position
04033E             0087*  WIDTH:			DS		1               ; Print Width
04033F             0088*  ERR:			DS		1               ; Error Number
040340             0089*  LISTON:			DS		1               ; LISTO (bottom nibble)
040341             0090*  							; - BIT 0: If set, output a space after the line number
040341             0091*  							; - BIT 1: If set, then indent FOR/NEXT loops
040341             0092*  							; - BIT 2: If set, then indent REPEAT/UNTIL loops
040341             0093*  							; - BIT 3: If set, then output to buffer for *EDIT
040341             0094*  							; OPT FLAG (top nibble)
040341             0095*  							; - BIT 4: If set, then list whilst assembling
040341             0096*  							; - BIT 5: If set, then assembler errors are reported
040341             0097*  							; - BIT 6: If set, then place the code starting at address pointed to by O%
040341             0098*  							; - BIT 7: If set, then assemble in ADL mode, otherwise assemble in Z80 mode
040341             0099*  INCREM:			DS		1               ; Auto-Increment Value
040342             0100*  ;
040342             0101*  ; Extra Agon-implementation specific system variables
040342             0102*  ;
040342             0103*  FLAGS:			DS		1		; Miscellaneous flags
040343             0104*  							; - BIT 7: Set if ESC pressed
040343             0105*  							; - BIT 6: Set to disable ESC
040343             0106*  OSWRCHPT:		DS		2		; Pointer for *EDIT
040345             0107*  OSWRCHCH:		DS		1		; Channel of OSWRCH
040346             0108*  							; - 0: Console
040346             0109*  							; - 1: File
040346             0110*  OSWRCHFH:		DS		1		; File handle for OSWRCHCHN
040347             0111*  KEYDOWN:		DS		1		; Keydown flag
040348             0112*  KEYASCII:		DS		1		; ASCII code of pressed key
040349             0113*  KEYCOUNT:		DS		1		; Counts every time a key is pressed
04034A             0114*  R0:			DS		3		; General purpose storage for 8/16 to 24 bit operations
04034D             0115*  R1:			DS		3		;
040350             0116*  ;
040350             0117*  ; This must be at the end
040350             0118*  ;
040350             0119*  RAM_END:
040350 FF FF FF FF 0120*  			ALIGN	256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040400             0121*  USER:							; Must be aligned on a page boundary
040400             0122*  
040400             0024   			INCLUDE	"equs.inc"
040400             0001*  ;
040400             0002*  ; Title:	BBC Basic for AGON - Equs
040400             0003*  ; Author:	Dean Belfield
040400             0004*  ; Created:	12/05/2023
040400             0005*  ; Last Updated:	08/06/2023
040400             0006*  ;
040400             0007*  ; Modinfo:
040400             0008*  ; 08/06/2023:	Added SIZEW
040400             0009*  
040400             0010*  			; XREF		STAVAR
040400             0011*  			; XREF		ACCS
040400             0012*  
040400             0013*  RAM_Top:		EQU		0B0000h	; Initial value of HIMEM
040400             0014*  ;Stack_Top:		EQU		0000h	; Stack at top
040400             0015*  SIZEW:			EQU		3	; Size of a word (3 for ADL mode)
040400             0016*  
040400             0017*  ; For GPIO
040400             0018*  ; PA not available on eZ80L92
040400             0019*  ;
040400             0020*  PA_DR:			EQU		96h
040400             0021*  PA_DDR:			EQU		97h
040400             0022*  PA_ALT1:		EQU		98h
040400             0023*  PA_ALT2:		EQU		99h
040400             0024*  PB_DR:          	EQU		9Ah
040400             0025*  PB_DDR:        	 	EQU		9Bh
040400             0026*  PB_ALT1:        	EQU		9Ch
040400             0027*  PB_ALT2:        	EQU		9Dh
040400             0028*  PC_DR:          	EQU		9Eh
040400             0029*  PC_DDR:         	EQU		9Fh
040400             0030*  PC_ALT1:        	EQU		A0h
040400             0031*  PC_ALT2:        	EQU		A1h
040400             0032*  PD_DR:          	EQU		A2h
040400             0033*  PD_DDR:			EQU		A3h
040400             0034*  PD_ALT1:		EQU		A4h
040400             0035*  PD_ALT2:		EQU		A5h
040400             0036*  
040400             0037*  GPIOMODE_OUT:		EQU		0	; Output
040400             0038*  GPIOMODE_IN:		EQU		1	; Input
040400             0039*  GPIOMODE_DIO:		EQU		2	; Open Drain IO
040400             0040*  GPIOMODE_SIO:		EQU		3	; Open Source IO
040400             0041*  GPIOMODE_INTD:		EQU		4	; Interrupt, Dual Edge
040400             0042*  GPIOMODE_ALTF:		EQU		5;	; Alt Function
040400             0043*  GPIOMODE_INTAL:		EQU		6	; Interrupt, Active Low
040400             0044*  GPIOMODE_INTAH:		EQU		7	; Interrupt, Active High
040400             0045*  GPIOMODE_INTFE:		EQU		8	; Interrupt, Falling Edge
040400             0046*  GPIOMODE_INTRE:		EQU		9	; Interrupt, Rising Edge
040400             0047*  
040400             0048*  ; Originally in ram.asm
040400             0049*  ;
040400             0050*  OC:			EQU     STAVAR+15*4     ; CODE ORIGIN (O%)
040400             0051*  PC:			EQU     STAVAR+16*4     ; PROGRAM COUNTER (P%)
040400             0052*  VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands
040400             0053*  
040400             0054*  ; Originally in main.asm
040400             0055*  ;
040400             0056*  CR:			EQU     0DH
040400             0057*  LF:			EQU     0AH
040400             0058*  ESC:			EQU     1BH
040400             0025   
040400             0026   argv_ptrs_max:		EQU	16				; Maximum number of arguments allowed in argv
040400             0027   
040400             0028   ;
040400             0029   ; Start in ADL mode
040400             0030   ;
040400 C3 45 04 04 0031   			JP	_start				; Jump to start
040404             0032   ;
040404             0033   ; The header stuff is from byte 64 onwards
040404             0034   ;
040404 42 42 43 42 0035   _exec_name:		DB	"BBCBASIC.BIN", 0		; The executable name, only used in argv
       41 53 49 43 
       2E 42 49 4E 
       00          
040411             0036   
040411 FF FF FF FF 0037   			ALIGN	64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
040440             0038   
040440 4D 4F 53    0039   			DB	"MOS"				; Flag for MOS - to confirm this is a valid MOS command
040443 00          0040   			DB	00h				; MOS header version 0
040444 01          0041   			DB	01h				; Flag for run mode (0: Z80, 1: ADL)
040445             0042   ;
040445             0043   ; And the code follows on immediately after the header
040445             0044   ;
040445 F5          0045   _start:			PUSH		AF			; Preserve the rest of the registers
040446 C5          0046   			PUSH		BC
040447 D5          0047   			PUSH		DE
040448 DD E5       0048   			PUSH		IX
04044A FD E5       0049   			PUSH		IY
04044C             0050   
04044C ED 73 D7 04 0051   			LD		(_sps), SP 		; Preserve the 24-bit stack pointer (SPS)
       04          
040451             0052   
040451 DD 21 DA 04 0053   			LD		IX, _argv_ptrs		; The argv array pointer address
       04          
040456 DD E5       0054   			PUSH		IX
040458 CD 88 04 04 0055   			CALL		_parse_params		; Parse the parameters
04045C DD E1       0056   			POP		IX			; IX: argv
04045E 06 00       0057   			LD		B, 0			;  C: argc
040460 CD 75 04 04 0058   			CALL		_clear_ram
040464 C3 0B 05 04 0059   			JP		_main			; Start user code
040468             0060   ;
040468             0061   ; This bit of code is called from STAR_BYE and returns us safely to MOS
040468             0062   ;
040468 ED 7B D7 04 0063   _end:			LD		SP, (_sps)		; Restore the stack pointer
       04          
04046D             0064   
04046D FD E1       0065   			POP		IY			; Restore the registers
04046F DD E1       0066   			POP		IX
040471 D1          0067   			POP		DE
040472 C1          0068   			POP		BC
040473 F1          0069   			POP		AF
040474 C9          0070   			RET					; Return to MOS
040475             0071   
040475             0072   ;Clear the application memory
040475             0073   ;
040475 C5          0074   _clear_ram:		PUSH		BC
040476 21 00 00 04 0075   			LD		HL, RAM_START
04047A 11 01 00 04 0076   			LD		DE, RAM_START + 1
04047E 01 4F 03 00 0077   			LD		BC, RAM_END - RAM_START - 1
040482 AF          0078   			XOR		A
040483 77          0079   			LD		(HL), A
040484 ED B0       0080   			LDIR
040486 C1          0081   			POP		BC
040487 C9          0082   			RET
040488             0083   
040488             0084   ; Parse the parameter string into a C array
040488             0085   ; Parameters
040488             0086   ; - HL: Address of parameter string
040488             0087   ; - IX: Address for array pointer storage
040488             0088   ; Returns:
040488             0089   ; -  C: Number of parameters parsed
040488             0090   ;
040488 01 04 04 04 0091   _parse_params:		LD	BC, _exec_name
04048C DD 0F 00    0092   			LD	(IX+0), BC		; ARGV[0] = the executable name
04048F DD 23       0093   			INC	IX
040491 DD 23       0094   			INC	IX
040493 DD 23       0095   			INC	IX
040495 CD D0 04 04 0096   			CALL	_skip_spaces		; Skip HL past any leading spaces
040499             0097   ;
040499 01 01 00 00 0098   			LD	BC, 1			; C: ARGC = 1 - also clears out top 16 bits of BCU
04049D 06 0F       0099   			LD	B, argv_ptrs_max - 1	; B: Maximum number of argv_ptrs
04049F             0100   ;
04049F             0101   _parse_params_1:
04049F C5          0102   			PUSH	BC			; Stack ARGC
0404A0 E5          0103   			PUSH	HL			; Stack start address of token
0404A1 CD C1 04 04 0104   			CALL	_get_token		; Get the next token
0404A5 79          0105   			LD	A, C			; A: Length of the token in characters
0404A6 D1          0106   			POP	DE			; Start address of token (was in HL)
0404A7 C1          0107   			POP	BC			; ARGC
0404A8 B7          0108   			OR	A			; Check for A=0 (no token found) OR at end of string
0404A9 C8          0109   			RET	Z
0404AA             0110   ;
0404AA DD 1F 00    0111   			LD	(IX+0), DE		; Store the pointer to the token
0404AD E5          0112   			PUSH	HL			; DE=HL
0404AE D1          0113   			POP	DE
0404AF CD D0 04 04 0114   			CALL	_skip_spaces		; And skip HL past any spaces onto the next character
0404B3 AF          0115   			XOR	A
0404B4 12          0116   			LD	(DE), A			; Zero-terminate the token
0404B5 DD 23       0117   			INC	IX
0404B7 DD 23       0118   			INC	IX
0404B9 DD 23       0119   			INC	IX			; Advance to next pointer position
0404BB 0C          0120   			INC	C			; Increment ARGC
0404BC 79          0121   			LD	A, C			; Check for C >= A
0404BD B8          0122   			CP	B
0404BE 38 DF       0123   			JR	C, _parse_params_1	; And loop
0404C0 C9          0124   			RET
0404C1             0125   
0404C1             0126   ; Get the next token
0404C1             0127   ; Parameters:
0404C1             0128   ; - HL: Address of parameter string
0404C1             0129   ; Returns:
0404C1             0130   ; - HL: Address of first character after token
0404C1             0131   ; -  C: Length of token (in characters)
0404C1             0132   ;
0404C1 0E 00       0133   _get_token:		LD	C, 0			; Initialise length
0404C3 7E          0134   @@:			LD	A, (HL)			; Get the character from the parameter string
0404C4 B7          0135   			OR	A			; Exit if 0 (end of parameter string in MOS)
0404C5 C8          0136   			RET 	Z
0404C6 FE 0D       0137   			CP	13			; Exit if CR (end of parameter string in BBC BASIC)
0404C8 C8          0138   			RET	Z
0404C9 FE 20       0139   			CP	' '			; Exit if space (end of token)
0404CB C8          0140   			RET	Z
0404CC 23          0141   			INC	HL			; Advance to next character
0404CD 0C          0142   			INC 	C			; Increment length
0404CE 18 F3       0143   			JR	@B
0404D0             0144   
0404D0             0145   ; Skip spaces in the parameter string
0404D0             0146   ; Parameters:
0404D0             0147   ; - HL: Address of parameter string
0404D0             0148   ; Returns:
0404D0             0149   ; - HL: Address of next none-space character
0404D0             0150   ;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
0404D0             0151   ;
0404D0 7E          0152   _skip_spaces:		LD	A, (HL)			; Get the character from the parameter string
0404D1 FE 20       0153   			CP	' '			; Exit if not space
0404D3 C0          0154   			RET	NZ
0404D4 23          0155   			INC	HL			; Advance to next character
0404D5 18 F9       0156   			JR	_skip_spaces		; Increment length
0404D7             0157   
0404D7             0158   ; Storage
0404D7             0159   ;
0404D7             0160   _sps:			DS	3			; Storage for the stack pointer
0404DA 00 00 00 00 0161   _argv_ptrs:		BLKP	argv_ptrs_max, 0	; Storage for the argv array pointers
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04050A             0162   
04050A             0163   ; ===== STUB FUNCTIONS =====
04050A             0164   printInline:
04050A C9          0165       ret
04050B             0166   
04050B             0167   _main:
04050B CD 0A 05 04 0168   	call printInline
04050F 69 6E 69 74 0169   	asciz "init.asm called _main!"
       2E 61 73 6D 
       20 63 61 6C 
       6C 65 64 20 
       5F 6D 61 69 
       6E 21 00    
040526 C9          0170   	ret
