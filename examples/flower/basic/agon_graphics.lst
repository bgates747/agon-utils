PC     Output      Line
040000             0001   ;
040000             0002   ; Title:	BBC Basic for AGON - Graphics stuff
040000             0003   ; Author:	Dean Belfield
040000             0004   ; Created:	12/05/2023
040000             0005   ; Last Updated:	07/06/2023
040000             0006   ;
040000             0007   ; Modinfo:
040000             0008   ; 07/06/2023:	Modified to run in ADL mode
040000             0009   
040000             0010   			.ASSUME	ADL = 1
040000             0011   
040000             0012   			INCLUDE "mos_api.inc"
040000             0001*  ;
040000             0002*  ; Title:	AGON MOS - API for user projects
040000             0003*  ; Author:	Dean Belfield
040000             0004*  ; Created:	03/08/2022
040000             0005*  ; Last Updated:	11/11/2023
040000             0006*  ;
040000             0007*  ; Modinfo:
040000             0008*  ; 05/08/2022:	Added mos_feof
040000             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040000             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040000             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040000             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040000             0013*  ; 13/10/2022:	Added mos_oscli
040000             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040000             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040000             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040000             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040000             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040000             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040000             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040000             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040000             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040000             0023*  ; 19/05/2023:	Added sysvar_scrMode
040000             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040000             0025*  ; 03/08/2023:	Added mos_setkbvector
040000             0026*  ; 10/08/2023:	Added mos_getkbmap
040000             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040000             0028*  
040000             0029*  ; VDP control (VDU 23, 0, n)
040000             0030*  ;
040000             0031*  vdp_gp:			EQU 	80h
040000             0032*  vdp_keycode:		EQU 	81h
040000             0033*  vdp_cursor:		EQU	82h
040000             0034*  vdp_scrchar:		EQU	83h
040000             0035*  vdp_scrpixel:		EQU	84h
040000             0036*  vdp_audio:		EQU	85h
040000             0037*  vdp_mode:		EQU	86h
040000             0038*  vdp_rtc:		EQU	87h
040000             0039*  vdp_keystate:		EQU	88h
040000             0040*  vdp_logicalcoords:	EQU	C0h
040000             0041*  vdp_terminalmode:	EQU	FFh
040000             0042*  
040000             0043*  ; MOS high level functions
040000             0044*  ;
040000             0045*  mos_getkey:		EQU	00h
040000             0046*  mos_load:		EQU	01h
040000             0047*  mos_save:		EQU	02h
040000             0048*  mos_cd:			EQU	03h
040000             0049*  mos_dir:		EQU	04h
040000             0050*  mos_del:		EQU	05h
040000             0051*  mos_ren:		EQU	06h
040000             0052*  mos_mkdir:		EQU	07h
040000             0053*  mos_sysvars:		EQU	08h
040000             0054*  mos_editline:		EQU	09h
040000             0055*  mos_fopen:		EQU	0Ah
040000             0056*  mos_fclose:		EQU	0Bh
040000             0057*  mos_fgetc:		EQU	0Ch
040000             0058*  mos_fputc:		EQU	0Dh
040000             0059*  mos_feof:		EQU	0Eh
040000             0060*  mos_getError:		EQU	0Fh
040000             0061*  mos_oscli:		EQU	10h
040000             0062*  mos_copy:		EQU	11h
040000             0063*  mos_getrtc:		EQU	12h
040000             0064*  mos_setrtc:		EQU	13h
040000             0065*  mos_setintvector:	EQU	14h
040000             0066*  mos_uopen:		EQU	15h
040000             0067*  mos_uclose:		EQU	16h
040000             0068*  mos_ugetc:		EQU	17h
040000             0069*  mos_uputc:		EQU 	18h
040000             0070*  mos_getfil:		EQU	19h
040000             0071*  mos_fread:		EQU	1Ah
040000             0072*  mos_fwrite:		EQU	1Bh
040000             0073*  mos_flseek:		EQU	1Ch
040000             0074*  mos_setkbvector:	EQU	1Dh
040000             0075*  mos_getkbmap:		EQU	1Eh
040000             0076*  mos_i2c_open:		EQU	1Fh
040000             0077*  mos_i2c_close:		EQU	20h
040000             0078*  mos_i2c_write:		EQU	21h
040000             0079*  mos_i2c_read:		EQU	22h
040000             0080*  
040000             0081*  
040000             0082*  ; FatFS file access functions
040000             0083*  ;
040000             0084*  ffs_fopen:		EQU	80h
040000             0085*  ffs_fclose:		EQU	81h
040000             0086*  ffs_fread:		EQU	82h
040000             0087*  ffs_fwrite:		EQU	83h
040000             0088*  ffs_flseek:		EQU	84h
040000             0089*  ffs_ftruncate:		EQU	85h
040000             0090*  ffs_fsync:		EQU	86h
040000             0091*  ffs_fforward:		EQU	87h
040000             0092*  ffs_fexpand:		EQU	88h
040000             0093*  ffs_fgets:		EQU	89h
040000             0094*  ffs_fputc:		EQU	8Ah
040000             0095*  ffs_fputs:		EQU	8Bh
040000             0096*  ffs_fprintf:		EQU	8Ch
040000             0097*  ffs_ftell:		EQU	8Dh
040000             0098*  ffs_feof:		EQU	8Eh
040000             0099*  ffs_fsize:		EQU	8Fh
040000             0100*  ffs_ferror:		EQU	90h
040000             0101*  
040000             0102*  ; FatFS directory access functions
040000             0103*  ;
040000             0104*  ffs_dopen:		EQU	91h
040000             0105*  ffs_dclose:		EQU	92h
040000             0106*  ffs_dread:		EQU	93h
040000             0107*  ffs_dfindfirst:		EQU	94h
040000             0108*  ffs_dfindnext:		EQU	95h
040000             0109*  
040000             0110*  ; FatFS file and directory management functions
040000             0111*  ;
040000             0112*  ffs_stat:		EQU	96h
040000             0113*  ffs_unlink:		EQU	97h
040000             0114*  ffs_rename:		EQU	98h
040000             0115*  ffs_chmod:		EQU	99h
040000             0116*  ffs_utime:		EQU	9Ah
040000             0117*  ffs_mkdir:		EQU	9Bh
040000             0118*  ffs_chdir:		EQU	9Ch
040000             0119*  ffs_chdrive:		EQU	9Dh
040000             0120*  ffs_getcwd:		EQU	9Eh
040000             0121*  
040000             0122*  ; FatFS volume management and system configuration functions
040000             0123*  ;
040000             0124*  ffs_mount:		EQU	9Fh
040000             0125*  ffs_mkfs:		EQU	A0h
040000             0126*  ffs_fdisk:		EQU	A1h
040000             0127*  ffs_getfree:		EQU	A2h
040000             0128*  ffs_getlabel:		EQU	A3h
040000             0129*  ffs_setlabel:		EQU	A4h
040000             0130*  ffs_setcp:		EQU	A5h
040000             0131*  
040000             0132*  ; File access modes
040000             0133*  ;
040000             0134*  fa_read:		EQU	01h
040000             0135*  fa_write:		EQU	02h
040000             0136*  fa_open_existing:	EQU	00h
040000             0137*  fa_create_new:		EQU	04h
040000             0138*  fa_create_always:	EQU	08h
040000             0139*  fa_open_always:		EQU	10h
040000             0140*  fa_open_append:		EQU	30h
040000             0141*  
040000             0142*  ; System variable indexes for api_sysvars
040000             0143*  ; Index into _sysvars in globals.asm
040000             0144*  ;
040000             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040000             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040000             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040000             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040000             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040000             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040000             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040000             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040000             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040000             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040000             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040000             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040000             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040000             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040000             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040000             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040000             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040000             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040000             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040000             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040000             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040000             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040000             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040000             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040000             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040000             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040000             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040000             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040000             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040000             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040000             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040000             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040000             0177*  
040000             0178*  ; Flags for the VPD protocol
040000             0179*  ;
040000             0180*  vdp_pflag_cursor:	EQU	00000001b
040000             0181*  vdp_pflag_scrchar:	EQU	00000010b
040000             0182*  vdp_pflag_point:	EQU	00000100b
040000             0183*  vdp_pflag_audio:	EQU	00001000b
040000             0184*  vdp_pflag_mode:		EQU	00010000b
040000             0185*  vdp_pflag_rtc:		EQU	00100000b
040000             0186*  vdp_pflag_mouse:	EQU	01000000b
040000             0187*  ; vdp_pflag_buffered:	EQU	10000000b
040000             0188*  
040000             0189*  ;
040000             0190*  ; FatFS structures
040000             0191*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040000             0192*  ;
040000             0193*  ; Object ID and allocation information (FFOBJID)
040000             0194*  ;
040000             0195*  ; FFOBJID	.STRUCT
040000             0196*  ; 	fs:		DS	3	; Pointer to the hosting volume of this object
040000             0197*  ; 	id:		DS	2	; Hosting volume mount ID
040000             0198*  ; 	attr:		DS	1	; Object attribute
040000             0199*  ; 	stat:		DS	1	; Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040000             0200*  ; 	sclust:		DS	4	; Object data start cluster (0:no cluster or root directory)
040000             0201*  ; 	objsize:	DS	4	; Object size (valid when sclust != 0)
040000             0202*  ; FFOBJID_SIZE .ENDSTRUCT FFOBJID
040000             0203*  ; ;
040000             0204*  ; ; File object structure (FIL)
040000             0205*  ; ;
040000             0206*  ; FIL .STRUCT
040000             0207*  ; 	obj:		.TAG	FFOBJID	; Object identifier
040000             0208*  ; 	flag:		DS	1	; File status flags
040000             0209*  ; 	err:		DS	1	; Abort flag (error code)
040000             0210*  ; 	fptr:		DS	4	; File read/write pointer (Zeroed on file open)
040000             0211*  ; 	clust:		DS	4	; Current cluster of fpter (invalid when fptr is 0)
040000             0212*  ; 	sect:		DS	4	; Sector number appearing in buf[] (0:invalid)
040000             0213*  ; 	dir_sect:	DS	4	; Sector number containing the directory entry
040000             0214*  ; 	dir_ptr:	DS	3	; Pointer to the directory entry in the win[]
040000             0215*  ; FIL_SIZE .ENDSTRUCT FIL
040000             0216*  ; ;
040000             0217*  ; ; Directory object structure (DIR)
040000             0218*  ; ;
040000             0219*  ; DIR .STRUCT
040000             0220*  ; 	obj:		.TAG	FFOBJID	; Object identifier
040000             0221*  ; 	dptr:		DS	4	; Current read/write offset
040000             0222*  ; 	clust:		DS	4	; Current cluster
040000             0223*  ; 	sect:		DS	4	; Current sector (0:Read operation has terminated)
040000             0224*  ; 	dir:		DS	3	; Pointer to the directory item in the win[]
040000             0225*  ; 	fn:		DS	12	; SFN (in/out) {body[8],ext[3],status[1]}
040000             0226*  ; 	blk_ofs:	DS	4	; Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040000             0227*  ; DIR_SIZE .ENDSTRUCT DIR
040000             0228*  ; ;
040000             0229*  ; ; File information structure (FILINFO)
040000             0230*  ; ;
040000             0231*  ; FILINFO .STRUCT
040000             0232*  ; 	fsize:		DS 	4	; File size
040000             0233*  ; 	fdate:		DS	2	; Modified date
040000             0234*  ; 	ftime:		DS	2	; Modified time
040000             0235*  ; 	fattrib:	DS	1	; File attribute
040000             0236*  ; 	altname:	DS	13	; Alternative file name
040000             0237*  ; 	fname:		DS	256	; Primary file name
040000             0238*  ; FILINFO_SIZE .ENDSTRUCT FILINFO
040000             0239*  
040000             0240*  ; FFOBJID offsets
040000             0241*  FFOBJID.fs:       EQU 0    ; Pointer to the hosting volume of this object
040000             0242*  FFOBJID.id:       EQU 3    ; Hosting volume mount ID
040000             0243*  FFOBJID.attr:     EQU 5    ; Object attribute
040000             0244*  FFOBJID.stat:     EQU 6    ; Object chain status
040000             0245*  FFOBJID.sclust:   EQU 7    ; Object data start cluster
040000             0246*  FFOBJID.objsize:  EQU 11   ; Object size
040000             0247*  FFOBJID_SIZE:     EQU 15   ; Total size of FFOBJID structure
040000             0248*  
040000             0249*  ; FIL offsets (including FFOBJID fields)
040000             0250*  FIL.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040000             0251*  FIL.flag:         EQU FFOBJID_SIZE       ; File status flags
040000             0252*  FIL.err:          EQU FFOBJID_SIZE + 1   ; Abort flag (error code)
040000             0253*  FIL.fptr:         EQU FFOBJID_SIZE + 2   ; File read/write pointer
040000             0254*  FIL.clust:        EQU FFOBJID_SIZE + 6   ; Current cluster of fptr
040000             0255*  FIL.sect:         EQU FFOBJID_SIZE + 10  ; Sector number appearing in buf[]
040000             0256*  FIL.dir_sect:     EQU FFOBJID_SIZE + 14  ; Sector number containing the directory entry
040000             0257*  FIL.dir_ptr:      EQU FFOBJID_SIZE + 18  ; Pointer to the directory entry in the win[]
040000             0258*  FIL_SIZE:         EQU FFOBJID_SIZE + 21  ; Total size of FIL structure
040000             0259*  
040000             0260*  ; DIR offsets (including FFOBJID fields)
040000             0261*  DIR.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040000             0262*  DIR.dptr:         EQU FFOBJID_SIZE       ; Current read/write offset
040000             0263*  DIR.clust:        EQU FFOBJID_SIZE + 4   ; Current cluster
040000             0264*  DIR.sect:         EQU FFOBJID_SIZE + 8   ; Current sector
040000             0265*  DIR.dir:          EQU FFOBJID_SIZE + 12  ; Pointer to the directory item in the win[]
040000             0266*  DIR.fn:           EQU FFOBJID_SIZE + 15  ; SFN (in/out) {body[8],ext[3],status[1]}
040000             0267*  DIR.blk_ofs:      EQU FFOBJID_SIZE + 27  ; Offset of current entry block being processed
040000             0268*  DIR_SIZE:         EQU FFOBJID_SIZE + 31  ; Total size of DIR structure
040000             0269*  
040000             0270*  ; FILINFO offsets
040000             0271*  FILINFO.fsize:    EQU 0    ; File size
040000             0272*  FILINFO.fdate:    EQU 4    ; Modified date
040000             0273*  FILINFO.ftime:    EQU 6    ; Modified time
040000             0274*  FILINFO.fattrib:  EQU 8    ; File attribute
040000             0275*  FILINFO.altname:  EQU 9    ; Alternative file name
040000             0276*  FILINFO.fname:    EQU 22   ; Primary file name
040000             0277*  FILINFO_SIZE:     EQU 278  ; Total size of FILINFO structure
040000             0278*  
040000             0279*  ;
040000             0280*  ; Macro for calling the API
040000             0281*  ; Parameters:
040000             0282*  ; - function: One of the function numbers listed above
040000             0283*  ;
040000             0284*  			MACRO MOSCALL	function
040000             0285*  			LD	A, function
040000             0286*  			RST.LIS	08h
040000             0287*  			ENDMACRO
040000             0013   			INCLUDE "macros.inc"
040000             0001*  	; Title:	BBC Basic Interpreter - Z80 version
040000             0002*  	;		Useful macros
040000             0003*  	; Author:	Dean Belfield
040000             0004*  	; Created:	12/05/2023
040000             0005*  	; Last Updated:	11/06/2023
040000             0006*  	;
040000             0007*  	; Modinfo:
040000             0008*  	; 11/06/2023:	Modified to run in ADL mode
040000             0009*  	; 11/06/2024:   Make compatible with ez80asm by Brandon R. Gates
040000             0010*  
040000             0011*  	MACRO EXREG	rp1, rp2
040000             0012*  		PUSH	rp1
040000             0013*  		POP	rp2
040000             0014*  	ENDMACRO
040000             0015*  
040000             0016*  	; MACRO ADD8U_DE	reg
040000             0017*  		MACRO ADD8U_DE
040000             0018*  		ADD	A, E
040000             0019*  		LD	E, A
040000             0020*  		ADC	A, D
040000             0021*  		SUB	E
040000             0022*  		LD	D, A
040000             0023*  	ENDMACRO
040000             0024*  
040000             0025*  	; MACRO ADD8U_HL	reg
040000             0026*  	MACRO ADD8U_HL
040000             0027*  		ADD	A, L
040000             0028*  		LD	L, A
040000             0029*  		ADC	A, H
040000             0030*  		SUB	L
040000             0031*  		LD	H, A
040000             0032*  	ENDMACRO
040000             0033*  
040000             0034*  	MACRO VDU	val
040000             0035*  		LD	A, val
040000             0036*  		CALL	OSWRCH
040000             0037*  	ENDMACRO
040000             0038*  
040000             0039*  	MACRO SET_GPIO	reg, val
040000             0040*  		IN0	A, (reg)
040000             0041*  		OR	val
040000             0042*  		OUT0	(reg), A
040000             0043*  	ENDMACRO
040000             0044*  
040000             0045*  	MACRO RES_GPIO	reg, val
040000             0046*  		PUSH	BC
040000             0047*  		LD	A, val
040000             0048*  		CPL
040000             0049*  		LD	C, A
040000             0050*  		IN0	A, (reg)
040000             0051*  		AND	C
040000             0052*  		OUT0	(reg), A
040000             0053*  		POP	BC
040000             0054*  	ENDMACRO
040000             0014   			INCLUDE "ram.asm"
040000             0001*  ;
040000             0002*  ; Title:	BBC Basic Interpreter - Z80 version
040000             0003*  ;		RAM Module for BBC Basic Interpreter
040000             0004*  ;		For use with Version 2.0 of BBC BASIC
040000             0005*  ;		Standard CP/M Distribution Version
040000             0006*  ; Author:	(C) Copyright  R.T.Russell 31-12-1983
040000             0007*  ; Modified By:	Dean Belfield
040000             0008*  ; Created:	12/05/2023
040000             0009*  ; Last Updated:	26/06/2023
040000             0010*  ;
040000             0011*  ; Modinfo:
040000             0012*  ; 06/06/2023:	Modified to run in ADL mode
040000             0013*  ; 26/06/2023:	Added temporary stores R0 and R1
040000             0014*  
040000             0015*  			.ASSUME	ADL = 1
040000             0016*  
040000             0017*  			; DEFINE	LORAM, SPACE = ROM
040000             0018*  			; SEGMENT LORAM
040000             0019*  
040000             0020*  			; XDEF	ACCS
040000             0021*  			; XDEF	BUFFER
040000             0022*  			; XDEF	STAVAR
040000             0023*  			; XDEF	DYNVAR
040000             0024*  			; XDEF	FNPTR
040000             0025*  			; XDEF	PROPTR
040000             0026*  			; XDEF	PAGE_
040000             0027*  			; XDEF	TOP
040000             0028*  			; XDEF	LOMEM
040000             0029*  			; XDEF 	FREE
040000             0030*  			; XDEF	HIMEM
040000             0031*  			; XDEF	LINENO
040000             0032*  			; XDEF	TRACEN
040000             0033*  			; XDEF	AUTONO
040000             0034*  			; XDEF	ERRTRP
040000             0035*  			; XDEF	ERRTXT
040000             0036*  			; XDEF	DATPTR
040000             0037*  			; XDEF	ERL
040000             0038*  			; XDEF	ERRLIN
040000             0039*  			; XDEF	RANDOM
040000             0040*  			; XDEF	COUNT
040000             0041*  			; XDEF	WIDTH
040000             0042*  			; XDEF	ERR
040000             0043*  			; XDEF	LISTON
040000             0044*  			; XDEF	INCREM
040000             0045*  
040000             0046*  			; XDEF	FLAGS
040000             0047*  			; XDEF	OSWRCHPT
040000             0048*  			; XDEF	OSWRCHCH
040000             0049*  			; XDEF	OSWRCHFH
040000             0050*  			; XDEF	KEYDOWN
040000             0051*  			; XDEF	KEYASCII
040000             0052*  			; XDEF	KEYCOUNT
040000             0053*  
040000             0054*  			; XDEF	R0
040000             0055*  			; XDEF	R1
040000             0056*  
040000             0057*  			; XDEF	RAM_START
040000             0058*  			; XDEF	RAM_END
040000             0059*  			; XDEF	USER
040000             0060*  
040000             0061*  			ALIGN 		256		; ACCS, BUFFER & STAVAR must be on page boundaries
040000             0062*  RAM_START:
040000             0063*  ;
040000             0064*  ACCS:			DS		256             ; String Accumulator
040100             0065*  BUFFER:			DS		256             ; String Input Buffer
040200             0066*  STAVAR:			DS	 	27*4            ; Static Variables
04026C             0067*  DYNVAR: 		DS 		54*3            ; Dynamic Variable Pointers
04030E             0068*  FNPTR:  		DS    		3               ; Dynamic Function Pointers
040311             0069*  PROPTR: 		DS		3               ; Dynamic Procedure Pointers
040314             0070*  ;
040314             0071*  PAGE_:   		DS		3               ; Start of User Program
040317             0072*  TOP:    		DS		3               ; First Location after User Program
04031A             0073*  LOMEM:  		DS		3               ; Start of Dynamic Storage
04031D             0074*  FREE:   		DS		3               ; First Free Space Byte
040320             0075*  HIMEM:  		DS		3               ; First Protected Byte
040323             0076*  ;
040323             0077*  LINENO: 		DS		3               ; Line Number
040326             0078*  TRACEN:			DS		3               ; Trace Flag
040329             0079*  AUTONO:			DS		3               ; Auto Flag
04032C             0080*  ERRTRP:			DS		3               ; Error Trap
04032F             0081*  ERRTXT:			DS		2               ; Error Message Pointer
040331             0082*  DATPTR:			DS		2               ; Data Pointer
040333             0083*  ERL:			DS		2               ; Error Line
040335             0084*  ERRLIN:			DS		3               ; The "ON ERROR" Line
040338             0085*  RANDOM:			DS		5               ; Random Number
04033D             0086*  COUNT:			DS		1               ; Print Position
04033E             0087*  WIDTH:			DS		1               ; Print Width
04033F             0088*  ERR:			DS		1               ; Error Number
040340             0089*  LISTON:			DS		1               ; LISTO (bottom nibble)
040341             0090*  							; - BIT 0: If set, output a space after the line number
040341             0091*  							; - BIT 1: If set, then indent FOR/NEXT loops
040341             0092*  							; - BIT 2: If set, then indent REPEAT/UNTIL loops
040341             0093*  							; - BIT 3: If set, then output to buffer for *EDIT
040341             0094*  							; OPT FLAG (top nibble)
040341             0095*  							; - BIT 4: If set, then list whilst assembling
040341             0096*  							; - BIT 5: If set, then assembler errors are reported
040341             0097*  							; - BIT 6: If set, then place the code starting at address pointed to by O%
040341             0098*  							; - BIT 7: If set, then assemble in ADL mode, otherwise assemble in Z80 mode
040341             0099*  INCREM:			DS		1               ; Auto-Increment Value
040342             0100*  ;
040342             0101*  ; Extra Agon-implementation specific system variables
040342             0102*  ;
040342             0103*  FLAGS:			DS		1		; Miscellaneous flags
040343             0104*  							; - BIT 7: Set if ESC pressed
040343             0105*  							; - BIT 6: Set to disable ESC
040343             0106*  OSWRCHPT:		DS		2		; Pointer for *EDIT
040345             0107*  OSWRCHCH:		DS		1		; Channel of OSWRCH
040346             0108*  							; - 0: Console
040346             0109*  							; - 1: File
040346             0110*  OSWRCHFH:		DS		1		; File handle for OSWRCHCHN
040347             0111*  KEYDOWN:		DS		1		; Keydown flag
040348             0112*  KEYASCII:		DS		1		; ASCII code of pressed key
040349             0113*  KEYCOUNT:		DS		1		; Counts every time a key is pressed
04034A             0114*  R0:			DS		3		; General purpose storage for 8/16 to 24 bit operations
04034D             0115*  R1:			DS		3		;
040350             0116*  ;
040350             0117*  ; This must be at the end
040350             0118*  ;
040350             0119*  RAM_END:
040350 FF FF FF FF 0120*  			ALIGN	256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040400             0121*  USER:							; Must be aligned on a page boundary
040400             0122*  
040400             0015   			INCLUDE	"equs.inc"
040400             0001*  ;
040400             0002*  ; Title:	BBC Basic for AGON - Equs
040400             0003*  ; Author:	Dean Belfield
040400             0004*  ; Created:	12/05/2023
040400             0005*  ; Last Updated:	08/06/2023
040400             0006*  ;
040400             0007*  ; Modinfo:
040400             0008*  ; 08/06/2023:	Added SIZEW
040400             0009*  
040400             0010*  			; XREF		STAVAR
040400             0011*  			; XREF		ACCS
040400             0012*  
040400             0013*  RAM_Top:		EQU		0B0000h	; Initial value of HIMEM
040400             0014*  ;Stack_Top:		EQU		0000h	; Stack at top
040400             0015*  SIZEW:			EQU		3	; Size of a word (3 for ADL mode)
040400             0016*  
040400             0017*  ; For GPIO
040400             0018*  ; PA not available on eZ80L92
040400             0019*  ;
040400             0020*  PA_DR:			EQU		96h
040400             0021*  PA_DDR:			EQU		97h
040400             0022*  PA_ALT1:		EQU		98h
040400             0023*  PA_ALT2:		EQU		99h
040400             0024*  PB_DR:          	EQU		9Ah
040400             0025*  PB_DDR:        	 	EQU		9Bh
040400             0026*  PB_ALT1:        	EQU		9Ch
040400             0027*  PB_ALT2:        	EQU		9Dh
040400             0028*  PC_DR:          	EQU		9Eh
040400             0029*  PC_DDR:         	EQU		9Fh
040400             0030*  PC_ALT1:        	EQU		A0h
040400             0031*  PC_ALT2:        	EQU		A1h
040400             0032*  PD_DR:          	EQU		A2h
040400             0033*  PD_DDR:			EQU		A3h
040400             0034*  PD_ALT1:		EQU		A4h
040400             0035*  PD_ALT2:		EQU		A5h
040400             0036*  
040400             0037*  GPIOMODE_OUT:		EQU		0	; Output
040400             0038*  GPIOMODE_IN:		EQU		1	; Input
040400             0039*  GPIOMODE_DIO:		EQU		2	; Open Drain IO
040400             0040*  GPIOMODE_SIO:		EQU		3	; Open Source IO
040400             0041*  GPIOMODE_INTD:		EQU		4	; Interrupt, Dual Edge
040400             0042*  GPIOMODE_ALTF:		EQU		5;	; Alt Function
040400             0043*  GPIOMODE_INTAL:		EQU		6	; Interrupt, Active Low
040400             0044*  GPIOMODE_INTAH:		EQU		7	; Interrupt, Active High
040400             0045*  GPIOMODE_INTFE:		EQU		8	; Interrupt, Falling Edge
040400             0046*  GPIOMODE_INTRE:		EQU		9	; Interrupt, Rising Edge
040400             0047*  
040400             0048*  ; Originally in ram.asm
040400             0049*  ;
040400             0050*  OC:			EQU     STAVAR+15*4     ; CODE ORIGIN (O%)
040400             0051*  PC:			EQU     STAVAR+16*4     ; PROGRAM COUNTER (P%)
040400             0052*  VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands
040400             0053*  
040400             0054*  ; Originally in main.asm
040400             0055*  ;
040400             0056*  CR:			EQU     0DH
040400             0057*  LF:			EQU     0AH
040400             0058*  ESC:			EQU     1BH
040400             0016   
040400             0017   			; SEGMENT CODE
040400             0018   
040400             0019   			; XDEF	CLG
040400             0020   			; XDEF	CLRSCN
040400             0021   			; XDEF	MODE
040400             0022   			; XDEF	COLOUR
040400             0023   			; XDEF	GCOL
040400             0024   			; XDEF	MOVE
040400             0025   			; XDEF	PLOT
040400             0026   			; XDEF	DRAW
040400             0027   			; XDEF	POINT
040400             0028   			; XDEF	GETSCHR
040400             0029   
040400             0030   			; XREF	OSWRCH
040400             0031   			; XREF	ASC_TO_NUMBER
040400             0032   			; XREF	EXTERR
040400             0033   			; XREF	EXPRI
040400             0034   			; XREF	COMMA
040400             0035   			; XREF	XEQ
040400             0036   			; XREF	NXT
040400             0037   			; XREF	BRAKET
040400             0038   			; XREF	COUNT0
040400             0039   			; XREF	CRTONULL
040400             0040   			; XREF	NULLTOCR
040400             0041   			; XREF	CRLF
040400             0042   			; XREF	EXPR_W2
040400             0043   			; XREF	INKEY1
040400             0044   
040400             0045   ; CLG: clears the graphics area
040400             0046   ;
040400             0047   CLG:			VDU	10h
040400 3E 10       0001M  		LD	A, val
040402 CD 32 08 04 0002M  		CALL	OSWRCH
040406 C3 58 08 04 0048   			JP	XEQ
04040A             0049   
04040A             0050   ; CLS: clears the text area
04040A             0051   ;
04040A 3E 0C       0052   CLRSCN:			LD	A, 0Ch
04040C C3 32 08 04 0053   			JP	OSWRCH
040410             0054   
040410             0055   ; MODE n: Set video mode
040410             0056   ;
040410 DD E5       0057   MODE:			PUSH	IX			; Get the system vars in IX
040412             0058   			MOSCALL	mos_sysvars		; Reset the semaphore
040412 3E 08       0001M  			LD	A, function
040414 49 CF       0002M  			RST.LIS	08h
040416 DD CB 04 A6 0059   			RES	4, (IX+sysvar_vpd_pflags)
04041A CD 4F 07 04 0060   			CALL    EXPRI
04041E D9          0061   			EXX
04041F             0062   			VDU	16H			; Mode change
04041F 3E 16       0001M  		LD	A, val
040421 CD 32 08 04 0002M  		CALL	OSWRCH
040425             0063   			VDU	L
040425 7D          0001M  		LD	A, val
040426 CD 32 08 04 0002M  		CALL	OSWRCH
04042A             0064   			MOSCALL	mos_sysvars
04042A 3E 08       0001M  			LD	A, function
04042C 49 CF       0002M  			RST.LIS	08h
04042E DD CB 04 66 0065   @@:			BIT	4, (IX+sysvar_vpd_pflags)
040432 28 FA       0066   			JR	Z, @B			; Wait for the result
040434 DD E1       0067   			POP	IX
040436 C3 58 08 04 0068   			JP	XEQ
04043A             0069   
04043A             0070   ; GET(x,y): Get the ASCII code of a character on screen
04043A             0071   ;
04043A FD 23       0072   GETSCHR:		INC	IY
04043C CD 4F 07 04 0073   			CALL    EXPRI      		; Get X coordinate
040440 D9          0074   			EXX
040441 22 00 00 04 0075   			LD	(VDU_BUFFER+0), HL
040445 CD B8 06 04 0076   			CALL	COMMA
040449 CD 4F 07 04 0077   			CALL	EXPRI			; Get Y coordinate
04044D D9          0078   			EXX
04044E 22 02 00 04 0079   			LD	(VDU_BUFFER+2), HL
040452 CD 92 06 04 0080   			CALL	BRAKET			; Closing bracket
040456             0081   ;
040456 DD E5       0082   			PUSH	IX			; Get the system vars in IX
040458             0083   			MOSCALL	mos_sysvars		; Reset the semaphore
040458 3E 08       0001M  			LD	A, function
04045A 49 CF       0002M  			RST.LIS	08h
04045C DD CB 04 8E 0084   			RES	1, (IX+sysvar_vpd_pflags)
040460             0085   			VDU	23
040460 3E 17       0001M  		LD	A, val
040462 CD 32 08 04 0002M  		CALL	OSWRCH
040466             0086   			VDU	0
040466 3E 00       0001M  		LD	A, val
040468 CD 32 08 04 0002M  		CALL	OSWRCH
04046C             0087   			VDU	vdp_scrchar
04046C 3E 83       0001M  		LD	A, val
04046E CD 32 08 04 0002M  		CALL	OSWRCH
040472             0088   			VDU	(VDU_BUFFER+0)
040472 3A 00 00 04 0001M  		LD	A, val
040476 CD 32 08 04 0002M  		CALL	OSWRCH
04047A             0089   			VDU	(VDU_BUFFER+1)
04047A 3A 01 00 04 0001M  		LD	A, val
04047E CD 32 08 04 0002M  		CALL	OSWRCH
040482             0090   			VDU	(VDU_BUFFER+2)
040482 3A 02 00 04 0001M  		LD	A, val
040486 CD 32 08 04 0002M  		CALL	OSWRCH
04048A             0091   			VDU	(VDU_BUFFER+3)
04048A 3A 03 00 04 0001M  		LD	A, val
04048E CD 32 08 04 0002M  		CALL	OSWRCH
040492 DD CB 04 4E 0092   @@:			BIT	1, (IX+sysvar_vpd_pflags)
040496 28 FA       0093   			JR	Z, @B			; Wait for the result
040498 DD 7E 09    0094   			LD	A, (IX+sysvar_scrchar)	; Fetch the result in A
04049B B7          0095   			OR	A			; Check for 00h
04049C 37          0096   			SCF				; C = character map
04049D 20 02       0097   			JR	NZ, @F			; We have a character, so skip next bit
04049F AF          0098   			XOR	A			; Clear carry
0404A0 3D          0099   			DEC	A			; Set A to FFh
0404A1 DD E1       0100   @@:			POP	IX
0404A3 C3 C1 07 04 0101   			JP	INKEY1			; Jump back to the GET command
0404A7             0102   
0404A7             0103   ; POINT(x,y): Get the pixel colour of a point on screen
0404A7             0104   ;
0404A7 CD 4F 07 04 0105   POINT:			CALL    EXPRI      		; Get X coordinate
0404AB D9          0106   			EXX
0404AC 22 00 00 04 0107   			LD	(VDU_BUFFER+0), HL
0404B0 CD B8 06 04 0108   			CALL	COMMA
0404B4 CD 4F 07 04 0109   			CALL	EXPRI			; Get Y coordinate
0404B8 D9          0110   			EXX
0404B9 22 02 00 04 0111   			LD	(VDU_BUFFER+2), HL
0404BD CD 92 06 04 0112   			CALL	BRAKET			; Closing bracket
0404C1             0113   ;
0404C1 DD E5       0114   			PUSH	IX			; Get the system vars in IX
0404C3             0115   			MOSCALL	mos_sysvars		; Reset the semaphore
0404C3 3E 08       0001M  			LD	A, function
0404C5 49 CF       0002M  			RST.LIS	08h
0404C7 DD CB 04 96 0116   			RES	2, (IX+sysvar_vpd_pflags)
0404CB             0117   			VDU	23
0404CB 3E 17       0001M  		LD	A, val
0404CD CD 32 08 04 0002M  		CALL	OSWRCH
0404D1             0118   			VDU	0
0404D1 3E 00       0001M  		LD	A, val
0404D3 CD 32 08 04 0002M  		CALL	OSWRCH
0404D7             0119   			VDU	vdp_scrpixel
0404D7 3E 84       0001M  		LD	A, val
0404D9 CD 32 08 04 0002M  		CALL	OSWRCH
0404DD             0120   			VDU	(VDU_BUFFER+0)
0404DD 3A 00 00 04 0001M  		LD	A, val
0404E1 CD 32 08 04 0002M  		CALL	OSWRCH
0404E5             0121   			VDU	(VDU_BUFFER+1)
0404E5 3A 01 00 04 0001M  		LD	A, val
0404E9 CD 32 08 04 0002M  		CALL	OSWRCH
0404ED             0122   			VDU	(VDU_BUFFER+2)
0404ED 3A 02 00 04 0001M  		LD	A, val
0404F1 CD 32 08 04 0002M  		CALL	OSWRCH
0404F5             0123   			VDU	(VDU_BUFFER+3)
0404F5 3A 03 00 04 0001M  		LD	A, val
0404F9 CD 32 08 04 0002M  		CALL	OSWRCH
0404FD DD CB 04 56 0124   @@:			BIT	2, (IX+sysvar_vpd_pflags)
040501 28 FA       0125   			JR	Z, @B			; Wait for the result
040503             0126   ;
040503             0127   ; Return the data as a 1 byte index
040503             0128   ;
040503 DD 6E 16    0129   			LD	L, (IX+sysvar_scrpixelIndex)
040506 DD E1       0130   			POP	IX
040508 C3 DD 06 04 0131   			JP	COUNT0
04050C             0132   
04050C             0133   
04050C             0134   ; COLOUR colour
04050C             0135   ; COLOUR L,P
04050C             0136   ; COLOUR L,R,G,B
04050C             0137   ;
04050C CD 4F 07 04 0138   COLOUR:			CALL	EXPRI			; The colour / mode
040510 D9          0139   			EXX
040511 7D          0140   			LD	A, L
040512 32 00 00 04 0141   			LD	(VDU_BUFFER+0), A	; Store first parameter
040516 CD 0F 08 04 0142   			CALL	NXT			; Are there any more parameters?
04051A FE 2C       0143   			CP	','
04051C 28 12       0144   			JR	Z, COLOUR_1		; Yes, so we're doing a palette change next
04051E             0145   ;
04051E             0146   			VDU	11h			; Just set the colour
04051E 3E 11       0001M  		LD	A, val
040520 CD 32 08 04 0002M  		CALL	OSWRCH
040524             0147   			VDU	(VDU_BUFFER+0)
040524 3A 00 00 04 0001M  		LD	A, val
040528 CD 32 08 04 0002M  		CALL	OSWRCH
04052C C3 58 08 04 0148   			JP	XEQ
040530             0149   ;
040530 CD B8 06 04 0150   COLOUR_1:		CALL	COMMA
040534 CD 4F 07 04 0151   			CALL	EXPRI			; Parse R (OR P)
040538 D9          0152   			EXX
040539 7D          0153   			LD	A, L
04053A 32 01 00 04 0154   			LD	(VDU_BUFFER+1), A
04053E CD 0F 08 04 0155   			CALL	NXT			; Are there any more parameters?
040542 FE 2C       0156   			CP	','
040544 28 2C       0157   			JR	Z, COLOUR_2		; Yes, so we're doing COLOUR L,R,G,B
040546             0158   ;
040546             0159   			VDU	13h			; VDU:COLOUR
040546 3E 13       0001M  		LD	A, val
040548 CD 32 08 04 0002M  		CALL	OSWRCH
04054C             0160   			VDU	(VDU_BUFFER+0)		; Logical Colour
04054C 3A 00 00 04 0001M  		LD	A, val
040550 CD 32 08 04 0002M  		CALL	OSWRCH
040554             0161   			VDU	(VDU_BUFFER+1)		; Palette Colour
040554 3A 01 00 04 0001M  		LD	A, val
040558 CD 32 08 04 0002M  		CALL	OSWRCH
04055C             0162   			VDU	0			; RGB set to 0
04055C 3E 00       0001M  		LD	A, val
04055E CD 32 08 04 0002M  		CALL	OSWRCH
040562             0163   			VDU	0
040562 3E 00       0001M  		LD	A, val
040564 CD 32 08 04 0002M  		CALL	OSWRCH
040568             0164   			VDU	0
040568 3E 00       0001M  		LD	A, val
04056A CD 32 08 04 0002M  		CALL	OSWRCH
04056E C3 58 08 04 0165   			JP	XEQ
040572             0166   ;
040572 CD B8 06 04 0167   COLOUR_2:		CALL	COMMA
040576 CD 4F 07 04 0168   			CALL	EXPRI			; Parse G
04057A D9          0169   			EXX
04057B 7D          0170   			LD	A, L
04057C 32 02 00 04 0171   			LD	(VDU_BUFFER+2), A
040580 CD B8 06 04 0172   			CALL	COMMA
040584 CD 4F 07 04 0173   			CALL	EXPRI			; Parse B
040588 D9          0174   			EXX
040589 7D          0175   			LD	A, L
04058A 32 03 00 04 0176   			LD	(VDU_BUFFER+3), A
04058E             0177   			VDU	13h			; VDU:COLOUR
04058E 3E 13       0001M  		LD	A, val
040590 CD 32 08 04 0002M  		CALL	OSWRCH
040594             0178   			VDU	(VDU_BUFFER+0)		; Logical Colour
040594 3A 00 00 04 0001M  		LD	A, val
040598 CD 32 08 04 0002M  		CALL	OSWRCH
04059C             0179   			VDU	FFh			; Physical Colour (-1 for RGB mode)
04059C 3E FF       0001M  		LD	A, val
04059E CD 32 08 04 0002M  		CALL	OSWRCH
0405A2             0180   			VDU	(VDU_BUFFER+1)		; R
0405A2 3A 01 00 04 0001M  		LD	A, val
0405A6 CD 32 08 04 0002M  		CALL	OSWRCH
0405AA             0181   			VDU	(VDU_BUFFER+2)		; G
0405AA 3A 02 00 04 0001M  		LD	A, val
0405AE CD 32 08 04 0002M  		CALL	OSWRCH
0405B2             0182   			VDU	(VDU_BUFFER+3)		; B
0405B2 3A 03 00 04 0001M  		LD	A, val
0405B6 CD 32 08 04 0002M  		CALL	OSWRCH
0405BA C3 58 08 04 0183   			JP	XEQ
0405BE             0184   
0405BE             0185   ; GCOL mode,colour
0405BE             0186   ;
0405BE CD 4F 07 04 0187   GCOL:			CALL	EXPRI			; Parse MODE
0405C2 D9          0188   			EXX
0405C3 7D          0189   			LD	A, L
0405C4 32 00 00 04 0190   			LD	(VDU_BUFFER+0), A
0405C8 CD B8 06 04 0191   			CALL	COMMA
0405CC             0192   ;
0405CC CD 4F 07 04 0193   			CALL	EXPRI			; Parse Colour
0405D0 D9          0194   			EXX
0405D1 7D          0195   			LD	A, L
0405D2 32 01 00 04 0196   			LD	(VDU_BUFFER+1), A
0405D6             0197   ;
0405D6             0198   			VDU	12h			; VDU:GCOL
0405D6 3E 12       0001M  		LD	A, val
0405D8 CD 32 08 04 0002M  		CALL	OSWRCH
0405DC             0199   			VDU	(VDU_BUFFER+0)		; Mode
0405DC 3A 00 00 04 0001M  		LD	A, val
0405E0 CD 32 08 04 0002M  		CALL	OSWRCH
0405E4             0200   			VDU	(VDU_BUFFER+1)		; Colour
0405E4 3A 01 00 04 0001M  		LD	A, val
0405E8 CD 32 08 04 0002M  		CALL	OSWRCH
0405EC C3 58 08 04 0201   			JP	XEQ
0405F0             0202   
0405F0             0203   ; PLOT mode,x,y
0405F0             0204   ;
0405F0 CD 4F 07 04 0205   PLOT:			CALL	EXPRI		; Parse mode
0405F4 D9          0206   			EXX
0405F5 E5          0207   			PUSH	HL		; Push mode (L) onto stack
0405F6 CD B8 06 04 0208   			CALL	COMMA
0405FA CD 74 07 04 0209   			CALL	EXPR_W2		; Parse X and Y
0405FE C1          0210   			POP	BC		; Pop mode (C) off stack
0405FF             0211   PLOT_1:			VDU	19H		; VDU code for PLOT
0405FF 3E 19       0001M  		LD	A, val
040601 CD 32 08 04 0002M  		CALL	OSWRCH
040605             0212   			VDU	C		;  C: Mode
040605 79          0001M  		LD	A, val
040606 CD 32 08 04 0002M  		CALL	OSWRCH
04060A             0213   			VDU	E		; DE: X
04060A 7B          0001M  		LD	A, val
04060B CD 32 08 04 0002M  		CALL	OSWRCH
04060F             0214   			VDU	D
04060F 7A          0001M  		LD	A, val
040610 CD 32 08 04 0002M  		CALL	OSWRCH
040614             0215   			VDU	L		; HL: Y
040614 7D          0001M  		LD	A, val
040615 CD 32 08 04 0002M  		CALL	OSWRCH
040619             0216   			VDU	H
040619 7C          0001M  		LD	A, val
04061A CD 32 08 04 0002M  		CALL	OSWRCH
04061E C3 58 08 04 0217   			JP	XEQ
040622             0218   
040622             0219   ; MOVE x,y
040622             0220   ;
040622 CD 74 07 04 0221   MOVE:			CALL	EXPR_W2		; Parse X and Y
040626 0E 04       0222   			LD	C, 04H		; Plot mode 04H (Move)
040628 18 D5       0223   			JR	PLOT_1		; Plot
04062A             0224   
04062A             0225   ; DRAW x1,y1
04062A             0226   ; DRAW x1,y1,x2,y2
04062A             0227   ;
04062A CD 74 07 04 0228   DRAW:			CALL	EXPR_W2		; Get X1 and Y1
04062E CD 0F 08 04 0229   			CALL	NXT		; Are there any more parameters?
040632 FE 2C       0230   			CP	','
040634 0E 05       0231   			LD	C, 05h		; Code for LINE
040636 20 C7       0232   			JR	NZ, PLOT_1	; No, so just do DRAW x1,y1
040638             0233   			VDU	19h		; Move to the first coordinates
040638 3E 19       0001M  		LD	A, val
04063A CD 32 08 04 0002M  		CALL	OSWRCH
04063E             0234   			VDU	04h
04063E 3E 04       0001M  		LD	A, val
040640 CD 32 08 04 0002M  		CALL	OSWRCH
040644             0235   			VDU	E
040644 7B          0001M  		LD	A, val
040645 CD 32 08 04 0002M  		CALL	OSWRCH
040649             0236   			VDU	D
040649 7A          0001M  		LD	A, val
04064A CD 32 08 04 0002M  		CALL	OSWRCH
04064E             0237   			VDU	L
04064E 7D          0001M  		LD	A, val
04064F CD 32 08 04 0002M  		CALL	OSWRCH
040653             0238   			VDU	H
040653 7C          0001M  		LD	A, val
040654 CD 32 08 04 0002M  		CALL	OSWRCH
040658 CD B8 06 04 0239   			CALL	COMMA
04065C C5          0240   			PUSH	BC
04065D CD 74 07 04 0241   			CALL	EXPR_W2		; Get X2 and Y2
040661 C1          0242   			POP	BC
040662 18 9B       0243   			JR	PLOT_1		; Now DRAW the line to those positions
040664             0244   
040664             0245   
040664             0246   
040664             0247   ; ===== STUB FUNCTIONS =====
040664             0248   printInline:
040664 C9          0249       ret
040665             0250   
040665             0251   ASC_TO_NUMBER:
040665 CD 64 06 04 0252   	call printInline
040669 61 67 6F 6E 0253   	asciz "agon_graphics.asm called ASC_TO_NUMBER!"
       5F 67 72 61 
       70 68 69 63 
       73 2E 61 73 
       6D 20 63 61 
       6C 6C 65 64 
       20 41 53 43 
       5F 54 4F 5F 
       4E 55 4D 42 
       45 52 21 00 
040691 C9          0254   	ret
040692             0255   
040692             0256   BRAKET:
040692 CD 64 06 04 0257   	call printInline
040696 61 67 6F 6E 0258   	asciz "agon_graphics.asm called BRAKET!"
       5F 67 72 61 
       70 68 69 63 
       73 2E 61 73 
       6D 20 63 61 
       6C 6C 65 64 
       20 42 52 41 
       4B 45 54 21 
       00          
0406B7 C9          0259   	ret
0406B8             0260   
0406B8             0261   COMMA:
0406B8 CD 64 06 04 0262   	call printInline
0406BC 61 67 6F 6E 0263   	asciz "agon_graphics.asm called COMMA!"
       5F 67 72 61 
       70 68 69 63 
       73 2E 61 73 
       6D 20 63 61 
       6C 6C 65 64 
       20 43 4F 4D 
       4D 41 21 00 
0406DC C9          0264   	ret
0406DD             0265   
0406DD             0266   COUNT0:
0406DD CD 64 06 04 0267   	call printInline
0406E1 61 67 6F 6E 0268   	asciz "agon_graphics.asm called COUNT0!"
       5F 67 72 61 
       70 68 69 63 
       73 2E 61 73 
       6D 20 63 61 
       6C 6C 65 64 
       20 43 4F 55 
       4E 54 30 21 
       00          
040702 C9          0269   	ret
040703             0270   
040703             0271   CRLF:
040703 CD 64 06 04 0272   	call printInline
040707 61 67 6F 6E 0273   	asciz "agon_graphics.asm called CRLF!"
       5F 67 72 61 
       70 68 69 63 
       73 2E 61 73 
       6D 20 63 61 
       6C 6C 65 64 
       20 43 52 4C 
       46 21 00    
040726 C9          0274   	ret
040727             0275   
040727             0276   CRTONULL:
040727 CD 64 06 04 0277   	call printInline
04072B 61 67 6F 6E 0278   	asciz "agon_graphics.asm called CRTONULL!"
       5F 67 72 61 
       70 68 69 63 
       73 2E 61 73 
       6D 20 63 61 
       6C 6C 65 64 
       20 43 52 54 
       4F 4E 55 4C 
       4C 21 00    
04074E C9          0279   	ret
04074F             0280   
04074F             0281   EXPRI:
04074F CD 64 06 04 0282   	call printInline
040753 61 67 6F 6E 0283   	asciz "agon_graphics.asm called EXPRI!"
       5F 67 72 61 
       70 68 69 63 
       73 2E 61 73 
       6D 20 63 61 
       6C 6C 65 64 
       20 45 58 50 
       52 49 21 00 
040773 C9          0284   	ret
040774             0285   
040774             0286   EXPR_W2:
040774 CD 64 06 04 0287   	call printInline
040778 61 67 6F 6E 0288   	asciz "agon_graphics.asm called EXPR_W2!"
       5F 67 72 61 
       70 68 69 63 
       73 2E 61 73 
       6D 20 63 61 
       6C 6C 65 64 
       20 45 58 50 
       52 5F 57 32 
       21 00       
04079A C9          0289   	ret
04079B             0290   
04079B             0291   EXTERR:
04079B CD 64 06 04 0292   	call printInline
04079F 61 67 6F 6E 0293   	asciz "agon_graphics.asm called EXTERR!"
       5F 67 72 61 
       70 68 69 63 
       73 2E 61 73 
       6D 20 63 61 
       6C 6C 65 64 
       20 45 58 54 
       45 52 52 21 
       00          
0407C0 C9          0294   	ret
0407C1             0295   
0407C1             0296   INKEY1:
0407C1 CD 64 06 04 0297   	call printInline
0407C5 61 67 6F 6E 0298   	asciz "agon_graphics.asm called INKEY1!"
       5F 67 72 61 
       70 68 69 63 
       73 2E 61 73 
       6D 20 63 61 
       6C 6C 65 64 
       20 49 4E 4B 
       45 59 31 21 
       00          
0407E6 C9          0299   	ret
0407E7             0300   
0407E7             0301   NULLTOCR:
0407E7 CD 64 06 04 0302   	call printInline
0407EB 61 67 6F 6E 0303   	asciz "agon_graphics.asm called NULLTOCR!"
       5F 67 72 61 
       70 68 69 63 
       73 2E 61 73 
       6D 20 63 61 
       6C 6C 65 64 
       20 4E 55 4C 
       4C 54 4F 43 
       52 21 00    
04080E C9          0304   	ret
04080F             0305   
04080F             0306   NXT:
04080F CD 64 06 04 0307   	call printInline
040813 61 67 6F 6E 0308   	asciz "agon_graphics.asm called NXT!"
       5F 67 72 61 
       70 68 69 63 
       73 2E 61 73 
       6D 20 63 61 
       6C 6C 65 64 
       20 4E 58 54 
       21 00       
040831 C9          0309   	ret
040832             0310   
040832             0311   OSWRCH:
040832 CD 64 06 04 0312   	call printInline
040836 61 67 6F 6E 0313   	asciz "agon_graphics.asm called OSWRCH!"
       5F 67 72 61 
       70 68 69 63 
       73 2E 61 73 
       6D 20 63 61 
       6C 6C 65 64 
       20 4F 53 57 
       52 43 48 21 
       00          
040857 C9          0314   	ret
040858             0315   
040858             0316   XEQ:
040858 CD 64 06 04 0317   	call printInline
04085C 61 67 6F 6E 0318   	asciz "agon_graphics.asm called XEQ!"
       5F 67 72 61 
       70 68 69 63 
       73 2E 61 73 
       6D 20 63 61 
       6C 6C 65 64 
       20 58 45 51 
       21 00       
04087A C9          0319   	ret
