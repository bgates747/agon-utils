        Output     Line 
       
               0001 ;
               0002 ; Title:	calcbas
               0003 ; Author:	Brandon R. Gates
               0004 ; Created:	29/10/2024
               0005 
               0006 ; ========================================
               0007 ; MODIFIED MOSLET INITIALIZATION CODE
               0008 ; ========================================
               0009 ;
               0010 ; Title:	Copy - Initialisation Code
               0011 ; Author:	Dean Belfield, Lennart Benschop
               0012 ; Created:	06/11/2022
               0013 ; Last Updated:	26/12/2022
               0014 ;
               0015 ; Modinfo:
               0016 ; 17/12/2022:	Added parameter processing
               0017 ; 26/12/2022:   Adapted to Copy program, use LEA instead of 3x INC IX, Save/restore MB
               0018 ; Changed:      08/04/2924 adapt to ez80asm
               0019 ;
               0020 ASSUME	ADL = 1
               0021 INCLUDE "mos_api.inc"
              0001* ;
              0002* ; Title:	AGON MOS - API for user projects
              0003* ; Author:	Dean Belfield
              0004* ; Created:	03/08/2022
              0005* ; Last Updated:	11/11/2023
              0006* ;
              0007* ; Modified: 11/14/2024 by Brandon R. Gates for ez80asm compatibility
              0008* ;
              0009* ; Modinfo:
              0010* ; 05/08/2022:	Added mos_feof
              0011* ; 09/08/2022:	Added system variables: cursorX, cursorY
              0012* ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
              0013* ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
              0014* ; 24/09/2022:	Added mos_getError, mos_mkdir
              0015* ; 13/10/2022:	Added mos_oscli
              0016* ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
              0017* ; 04/03/2023:	Added sysvar_scrpixelIndex
              0018* ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
              0019* ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
              0020* ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
              0021* ; 22/03/2023:	The VDP commands are now indexed from 0x80
              0022* ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
              0023* ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
              0024* ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
              0025* ; 19/05/2023:	Added sysvar_scrMode
              0026* ; 05/06/2023:	Added sysvar_rtcEnable
              0027* ; 03/08/2023:	Added mos_setkbvector
              0028* ; 10/08/2023:	Added mos_getkbmap
              0029* ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
              0030* ; 11/14/2024:   FatFS structs modified for ez80asm compatibility
              0031* ;
              0032* ; VDP control (VDU 23, 0, n)
              0033* ;
              0034* vdp_gp:			EQU 	80h
              0035* vdp_keycode:		EQU 	81h
              0036* vdp_cursor:		EQU	82h
              0037* vdp_scrchar:		EQU	83h
              0038* vdp_scrpixel:		EQU	84h
              0039* vdp_audio:		EQU	85h
              0040* vdp_mode:		EQU	86h
              0041* vdp_rtc:		EQU	87h
              0042* vdp_keystate:		EQU	88h
              0043* vdp_logicalcoords:	EQU	C0h
              0044* vdp_terminalmode:	EQU	FFh
              0045* 
              0046* ; MOS high level functions
              0047* ;
              0048* mos_getkey:		EQU	00h
              0049* mos_load:		EQU	01h
              0050* mos_save:		EQU	02h
              0051* mos_cd:			EQU	03h
              0052* mos_dir:		EQU	04h
              0053* mos_del:		EQU	05h
              0054* mos_ren:		EQU	06h
              0055* mos_mkdir:		EQU	07h
              0056* mos_sysvars:		EQU	08h
              0057* mos_editline:		EQU	09h
              0058* mos_fopen:		EQU	0Ah
              0059* mos_fclose:		EQU	0Bh
              0060* mos_fgetc:		EQU	0Ch
              0061* mos_fputc:		EQU	0Dh
              0062* mos_feof:		EQU	0Eh
              0063* mos_getError:		EQU	0Fh
              0064* mos_oscli:		EQU	10h
              0065* mos_copy:		EQU	11h
              0066* mos_getrtc:		EQU	12h
              0067* mos_setrtc:		EQU	13h
              0068* mos_setintvector:	EQU	14h
              0069* mos_uopen:		EQU	15h
              0070* mos_uclose:		EQU	16h
              0071* mos_ugetc:		EQU	17h
              0072* mos_uputc:		EQU 	18h
              0073* mos_getfil:		EQU	19h
              0074* mos_fread:		EQU	1Ah
              0075* mos_fwrite:		EQU	1Bh
              0076* mos_flseek:		EQU	1Ch
              0077* mos_setkbvector:	EQU	1Dh
              0078* mos_getkbmap:		EQU	1Eh
              0079* mos_i2c_open:		EQU	1Fh
              0080* mos_i2c_close:		EQU	20h
              0081* mos_i2c_write:		EQU	21h
              0082* mos_i2c_read:		EQU	22h
              0083* 
              0084* 
              0085* ; FatFS file access functions
              0086* ;
              0087* ffs_fopen:		EQU	80h
              0088* ffs_fclose:		EQU	81h
              0089* ffs_fread:		EQU	82h
              0090* ffs_fwrite:		EQU	83h
              0091* ffs_flseek:		EQU	84h
              0092* ffs_ftruncate:		EQU	85h
              0093* ffs_fsync:		EQU	86h
              0094* ffs_fforward:		EQU	87h
              0095* ffs_fexpand:		EQU	88h
              0096* ffs_fgets:		EQU	89h
              0097* ffs_fputc:		EQU	8Ah
              0098* ffs_fputs:		EQU	8Bh
              0099* ffs_fprintf:		EQU	8Ch
              0100* ffs_ftell:		EQU	8Dh
              0101* ffs_feof:		EQU	8Eh
              0102* ffs_fsize:		EQU	8Fh
              0103* ffs_ferror:		EQU	90h
              0104* 
              0105* ; FatFS directory access functions
              0106* ;
              0107* ffs_dopen:		EQU	91h
              0108* ffs_dclose:		EQU	92h
              0109* ffs_dread:		EQU	93h
              0110* ffs_dfindfirst:		EQU	94h
              0111* ffs_dfindnext:		EQU	95h
              0112* 
              0113* ; FatFS file and directory management functions
              0114* ;
              0115* ffs_stat:		EQU	96h
              0116* ffs_unlink:		EQU	97h
              0117* ffs_rename:		EQU	98h
              0118* ffs_chmod:		EQU	99h
              0119* ffs_utime:		EQU	9Ah
              0120* ffs_mkdir:		EQU	9Bh
              0121* ffs_chdir:		EQU	9Ch
              0122* ffs_chdrive:		EQU	9Dh
              0123* ffs_getcwd:		EQU	9Eh
              0124* 
              0125* ; FatFS volume management and system configuration functions
              0126* ;
              0127* ffs_mount:		EQU	9Fh
              0128* ffs_mkfs:		EQU	A0h
              0129* ffs_fdisk:		EQU	A1h
              0130* ffs_getfree:		EQU	A2h
              0131* ffs_getlabel:		EQU	A3h
              0132* ffs_setlabel:		EQU	A4h
              0133* ffs_setcp:		EQU	A5h
              0134* 
              0135* ; File access modes
              0136* ;
              0137* fa_read:		EQU	01h
              0138* fa_write:		EQU	02h
              0139* fa_open_existing:	EQU	00h
              0140* fa_create_new:		EQU	04h
              0141* fa_create_always:	EQU	08h
              0142* fa_open_always:		EQU	10h
              0143* fa_open_append:		EQU	30h
              0144* 
              0145* ; System variable indexes for api_sysvars
              0146* ; Index into _sysvars in globals.asm
              0147* ;
              0148* sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
              0149* sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
              0150* sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
              0151* sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
              0152* sysvar_cursorX:		EQU	07h	; 1: Cursor X position
              0153* sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
              0154* sysvar_scrchar:		EQU	09h	; 1: Character read from screen
              0155* sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
              0156* sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
              0157* sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
              0158* sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
              0159* sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
              0160* sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
              0161* sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
              0162* sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
              0163* sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
              0164* sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
              0165* sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
              0166* sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
              0167* sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
              0168* sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
              0169* sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
              0170* sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
              0171* sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
              0172* sysvar_scrMode:		EQU	27h	; 1: Screen mode
              0173* sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
              0174* sysvar_mouseX:		EQU	29h	; 2: Mouse X position
              0175* sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
              0176* sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
              0177* sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
              0178* sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
              0179* sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
              0180* ;
              0181* ; Flags for the VPD protocol
              0182* ;
              0183* vdp_pflag_cursor:	EQU	00000001b
              0184* vdp_pflag_scrchar:	EQU	00000010b
              0185* vdp_pflag_point:	EQU	00000100b
              0186* vdp_pflag_audio:	EQU	00001000b
              0187* vdp_pflag_mode:		EQU	00010000b
              0188* vdp_pflag_rtc:		EQU	00100000b
              0189* vdp_pflag_mouse:	EQU	01000000b
              0190* ; vdp_pflag_buffered:	EQU	10000000b
              0191* 
              0192* 
              0193* ; FatFS structures
              0194* ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
              0195* ;
              0196* ; Object ID and allocation information (FFOBJID)
              0197* FFOBJID.fs:       EQU 0    ; Pointer to the hosting volume of this object
              0198* FFOBJID.id:       EQU 3    ; Hosting volume mount ID
              0199* FFOBJID.attr:     EQU 5    ; Object attribute
              0200* FFOBJID.stat:     EQU 6    ; Object chain status
              0201* FFOBJID.sclust:   EQU 7    ; Object data start cluster
              0202* FFOBJID.objsize:  EQU 11   ; Object size
              0203* FFOBJID_SIZE:     EQU 15   ; Total size of FFOBJID structure
              0204* ;
              0205* ; File object structure (FIL)
              0206* ;
              0207* FIL.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
              0208* FIL.flag:         EQU FFOBJID_SIZE       ; File status flags
              0209* FIL.err:          EQU FFOBJID_SIZE + 1   ; Abort flag (error code)
              0210* FIL.fptr:         EQU FFOBJID_SIZE + 2   ; File read/write pointer
              0211* FIL.clust:        EQU FFOBJID_SIZE + 6   ; Current cluster of fptr
              0212* FIL.sect:         EQU FFOBJID_SIZE + 10  ; Sector number appearing in buf[]
              0213* FIL.dir_sect:     EQU FFOBJID_SIZE + 14  ; Sector number containing the directory entry
              0214* FIL.dir_ptr:      EQU FFOBJID_SIZE + 18  ; Pointer to the directory entry in the win[]
              0215* FIL_SIZE:         EQU FFOBJID_SIZE + 21  ; Total size of FIL structure
              0216* ;
              0217* ; Directory object structure (DIR)
              0218* ;
              0219* DIR.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
              0220* DIR.dptr:         EQU FFOBJID_SIZE       ; Current read/write offset
              0221* DIR.clust:        EQU FFOBJID_SIZE + 4   ; Current cluster
              0222* DIR.sect:         EQU FFOBJID_SIZE + 8   ; Current sector
              0223* DIR.dir:          EQU FFOBJID_SIZE + 12  ; Pointer to the directory item in the win[]
              0224* DIR.fn:           EQU FFOBJID_SIZE + 15  ; SFN (in/out) {body[8],ext[3],status[1]}
              0225* DIR.blk_ofs:      EQU FFOBJID_SIZE + 27  ; Offset of current entry block being processed
              0226* DIR_SIZE:         EQU FFOBJID_SIZE + 31  ; Total size of DIR structure
              0227* ;
              0228* ; File information structure (FILINFO)
              0229* ;
              0230* FILINFO.fsize:    EQU 0    ; File size
              0231* FILINFO.fdate:    EQU 4    ; Modified date
              0232* FILINFO.ftime:    EQU 6    ; Modified time
              0233* FILINFO.fattrib:  EQU 8    ; File attribute
              0234* FILINFO.altname:  EQU 9    ; Alternative file name
              0235* FILINFO.fname:    EQU 22   ; Primary file name
              0236* FILINFO_SIZE:     EQU 278  ; Total size of FILINFO structure
              0237* ;
              0238* ; Macro for calling the API
              0239* ; Parameters:
              0240* ; - function: One of the function numbers listed above
              0241* ;
              0242* MACRO MOSCALL	function
              0243* LD	A, function
              0244* RST.LIS	08h
              0245* ENDMACRO
               0022 ORG 0x0B0000 ; Is a moslet
               0023 
               0024 MACRO PROGNAME
               0025 ASCIZ "calcbas"
               0026 ENDMACRO
               0027 ;
               0028 ; Start in ADL mode
               0029 ;
0B0000 C3      0030 JP	_start
0B0001 45 
0B0002 00 
0B0003 0B 
               0031 ;
               0032 ; The header stuff is from byte 64 onwards
               0033 ;
               0034 _exec_name:
               0035 PROGNAME			; The executable name, only used in argv
0B0004 63     0001M ASCIZ "calcbas"
0B0005 61 
0B0006 6C 
0B0007 63 
0B0007 62   
0B0008 61 
0B0009 73 
0B000A 00 
               0036 
0B000C FF      0037 ALIGN	64
0B000D FF 
0B000E FF 
0B000F FF 
0B000F FF   
0B0010 FF 
0B0011 FF 
0B0012 FF 
0B0012 FF   
0B0013 FF 
0B0014 FF 
0B0015 FF 
0B0015 FF   
0B0016 FF 
0B0017 FF 
0B0018 FF 
0B0018 FF   
0B0019 FF 
0B001A FF 
0B001B FF 
0B001B FF   
0B001C FF 
0B001D FF 
0B001E FF 
0B001E FF   
0B001F FF 
0B0020 FF 
0B0021 FF 
0B0021 FF   
0B0022 FF 
0B0023 FF 
0B0024 FF 
0B0024 FF   
0B0025 FF 
0B0026 FF 
0B0027 FF 
0B0027 FF   
0B0028 FF 
0B0029 FF 
0B002A FF 
0B002A FF   
0B002B FF 
0B002C FF 
0B002D FF 
0B002D FF   
0B002E FF 
0B002F FF 
0B0030 FF 
0B0030 FF   
0B0031 FF 
0B0032 FF 
0B0033 FF 
               0038 
0B0040 4D      0039 DB	"MOS"			; Flag for MOS - to confirm this is a valid MOS command
0B0041 4F 
0B0042 53 
0B0043 00      0040 DB	00h			; MOS header version 0
0B0044 01      0041 DB	01h			; Flag for run mode (0: Z80, 1: ADL)
               0042 ;
               0043 ; And the code follows on immediately after the header
               0044 ;
               0045 _start:
0B0045 F5      0046 PUSH	AF			; Preserve the registers
0B0046 C5      0047 PUSH	BC
0B0047 D5      0048 PUSH	DE
0B0048 DD      0049 PUSH	IX
0B0049 E5 
0B004A FD      0050 PUSH	IY
0B004B E5 
0B004C ED      0051 LD	A, MB			; Save MB
0B004D 6E 
0B004E F5      0052 PUSH 	AF
0B004F AF      0053 XOR 	A
0B0050 ED      0054 LD 	MB, A                   ; Clear to zero so MOS API calls know how to use 24-bit addresses.
0B0051 6D 
               0055 
0B0052 CD      0056 CALL		_clear_ram ; Clear the BASIC memory allocation
0B0053 BD 
0B0054 00 
0B0055 0B 
               0057 
0B0056 DD      0058 LD	IX, argv_ptrs		; The argv array pointer address
0B0057 21 
0B0058 C3 
0B0059 50 
0B0059 0B   
0B005B DD      0059 PUSH	IX
0B005C E5 
0B005D CD      0060 CALL	_parse_params		; Parse the parameters
0B005E 74 
0B005F 00 
0B0060 0B 
0B0061 DD      0061 POP	IX			; IX: argv
0B0062 E1 
0B0063 06      0062 LD	B, 0			;  C: argc
0B0064 00 
0B0065 CD      0063 CALL	_main_init			; Start user code
0B0066 2C 
0B0067 51 
0B0068 0B 
               0064 
0B0069 F1      0065 POP 	AF
0B006A ED      0066 LD	MB, A
0B006B 6D 
0B006C FD      0067 POP	IY			; Restore registers
0B006D E1 
0B006E DD      0068 POP	IX
0B006F E1 
0B0070 D1      0069 POP	DE
0B0071 C1      0070 POP	BC
0B0072 F1      0071 POP	AF
0B0073 C9      0072 RET
               0073 
               0074 ; Parse the parameter string into a C array
               0075 ; Parameters
               0076 ; - HL: Address of parameter string
               0077 ; - IX: Address for array pointer storage
               0078 ; Returns:
               0079 ; -  C: Number of parameters parsed
               0080 ;
0B0074 01      0081 _parse_params:		LD	BC, _exec_name
0B0075 04 
0B0076 00 
0B0077 0B 
0B0078 DD      0082 LD	(IX+0), BC		; ARGV[0] = the executable name
0B0079 0F 
0B007A 00 
0B007B ED      0083 LEA     IX, IX+3
0B007C 32 
0B007D 03 
0B007E CD      0084 CALL	_skip_spaces		; Skip HL past any leading spaces
0B007F B6 
0B0080 00 
0B0081 0B 
               0085 ;
0B0082 01      0086 LD	BC, 1			; C: ARGC = 1 - also clears out top 16 bits of BCU
0B0083 01 
0B0084 00 
0B0085 00 
0B0086 06      0087 LD	B, argv_ptrs_max - 1	; B: Maximum number of argv_ptrs
0B0087 0F 
               0088 ;
               0089 _parse_params_1:
0B0088 C5      0090 PUSH	BC			; Stack ARGC
0B0089 E5      0091 PUSH	HL			; Stack start address of token
0B008A CD      0092 CALL	_get_token		; Get the next token
0B008B A7 
0B008C 00 
0B008D 0B 
0B008E 79      0093 LD	A, C			; A: Length of the token in characters
0B008F D1      0094 POP	DE			; Start address of token (was in HL)
0B0090 C1      0095 POP	BC			; ARGC
0B0091 B7      0096 OR	A			; Check for A=0 (no token found) OR at end of string
0B0092 C8      0097 RET	Z
               0098 ;
0B0093 DD      0099 LD	(IX+0), DE		; Store the pointer to the token
0B0094 1F 
0B0095 00 
0B0096 E5      0100 PUSH	HL			; DE=HL
0B0097 D1      0101 POP	DE
0B0098 CD      0102 CALL	_skip_spaces		; And skip HL past any spaces onto the next character
0B0099 B6 
0B009A 00 
0B009B 0B 
0B009C AF      0103 XOR	A
0B009D 12      0104 LD	(DE), A			; Zero-terminate the token
0B009E ED      0105 LEA  	IX, IX+3			; Advance to next pointer position
0B009F 32 
0B00A0 03 
0B00A1 0C      0106 INC	C			; Increment ARGC
0B00A2 79      0107 LD	A, C			; Check for C >= A
0B00A3 B8      0108 CP	B
0B00A4 38      0109 JR	C, _parse_params_1	; And loop
0B00A5 E2 
0B00A6 C9      0110 RET
               0111 
               0112 ; Get the next token
               0113 ; Parameters:
               0114 ; - HL: Address of parameter string
               0115 ; Returns:
               0116 ; - HL: Address of first character after token
               0117 ; -  C: Length of token (in characters)
               0118 ;
0B00A7 0E      0119 _get_token:		LD	C, 0			; Initialise length
0B00A8 00 
0B00A9 7E      0120 @@:			LD	A, (HL)			; Get the character from the parameter string
0B00AA B7      0121 OR	A			; Exit if 0 (end of parameter string in MOS)
0B00AB C8      0122 RET 	Z
0B00AC FE      0123 CP	13			; Exit if CR (end of parameter string in BBC BASIC)
0B00AD 0D 
0B00AE C8      0124 RET	Z
0B00AF FE      0125 CP	' '			; Exit if space (end of token)
0B00B0 20 
0B00B1 C8      0126 RET	Z
0B00B2 23      0127 INC	HL			; Advance to next character
0B00B3 0C      0128 INC 	C			; Increment length
0B00B4 18      0129 JR	@B
0B00B5 F3 
               0130 
               0131 ; Skip spaces in the parameter string
               0132 ; Parameters:
               0133 ; - HL: Address of parameter string
               0134 ; Returns:
               0135 ; - HL: Address of next none-space character
               0136 ;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
               0137 ;
0B00B6 7E      0138 _skip_spaces:		LD	A, (HL)			; Get the character from the parameter string
0B00B7 FE      0139 CP	' '			; Exit if not space
0B00B8 20 
0B00B9 C0      0140 RET	NZ
0B00BA 23      0141 INC	HL			; Advance to next character
0B00BB 18      0142 JR	_skip_spaces		; Increment length
0B00BC F9 
               0143 
               0144 ; ========================================
               0145 ; BASIC INITIALIZATION CODE FROM basic/init.asm
               0146 ; ========================================
               0147 ;
               0148 ;Clear the application memory
               0149 ;
               0150 _clear_ram:
0B00BD E5      0151 push hl
0B00BE C5      0152 PUSH		BC
0B00BF 21      0153 LD		HL, RAM_START
0B00C0 00 
0B00C1 53 
0B00C2 0B 
0B00C3 11      0154 LD		DE, RAM_START + 1
0B00C4 01 
0B00C5 53 
0B00C6 0B 
0B00C7 01      0155 LD		BC, RAM_END - RAM_START - 1
0B00C8 4F 
0B00C9 03 
0B00CA 00 
0B00CB AF      0156 XOR		A
0B00CC 77      0157 LD		(HL), A
0B00CD ED      0158 LDIR
0B00CE B0 
0B00CF C1      0159 POP		BC
0B00D0 E1      0160 pop hl
0B00D1 C9      0161 RET
               0162 
               0163 ; ========================================
               0164 ; BEGIN APPLICATION CODE
               0165 ; ========================================
               0166 
               0167 ; API INCLUDES
               0168 include "basic.inc"
              0001* include "basic/macros.inc"
             0001** ; Title:	BBC Basic Interpreter - Z80 version
             0002** ;		Useful macros
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	11/06/2023
             0006** ;
             0007** ; Modinfo:
             0008** ; 11/06/2023:	Modified to run in ADL mode
             0009** ; 11/06/2024:   Make compatible with ez80asm by Brandon R. Gates
             0010** 
             0011** MACRO EXREG	rp1, rp2
             0012** PUSH	rp1
             0013** POP	rp2
             0014** ENDMACRO
             0015** 
             0016** ; MACRO ADD8U_DE	reg
             0017** MACRO ADD8U_DE
             0018** ADD	A, E
             0019** LD	E, A
             0020** ADC	A, D
             0021** SUB	E
             0022** LD	D, A
             0023** ENDMACRO
             0024** 
             0025** ; MACRO ADD8U_HL	reg
             0026** MACRO ADD8U_HL
             0027** ADD	A, L
             0028** LD	L, A
             0029** ADC	A, H
             0030** SUB	L
             0031** LD	H, A
             0032** ENDMACRO
             0033** 
             0034** MACRO VDU	val
             0035** LD	A, val
             0036** CALL	OSWRCH
             0037** ENDMACRO
             0038** 
             0039** MACRO SET_GPIO	reg, val
             0040** IN0	A, (reg)
             0041** OR	val
             0042** OUT0	(reg), A
             0043** ENDMACRO
             0044** 
             0045** MACRO RES_GPIO	reg, val
             0046** PUSH	BC
             0047** LD	A, val
             0048** CPL
             0049** LD	C, A
             0050** IN0	A, (reg)
             0051** AND	C
             0052** OUT0	(reg), A
             0053** POP	BC
             0054** ENDMACRO
              0002* include "basic/equs.inc"
             0001** ;
             0002** ; Title:	BBC Basic for AGON - Equs
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	08/06/2023
             0006** ;
             0007** ; Modinfo:
             0008** ; 08/06/2023:	Added SIZEW
             0009** 
             0010** ; XREF		STAVAR
             0011** ; XREF		ACCS
             0012** 
             0013** RAM_Top:		EQU		0B0000h	; Initial value of HIMEM
             0014** ;Stack_Top:		EQU		0000h	; Stack at top
             0015** SIZEW:			EQU		3	; Size of a word (3 for ADL mode)
             0016** 
             0017** ; For GPIO
             0018** ; PA not available on eZ80L92
             0019** ;
             0020** PA_DR:			EQU		96h
             0021** PA_DDR:			EQU		97h
             0022** PA_ALT1:		EQU		98h
             0023** PA_ALT2:		EQU		99h
             0024** PB_DR:          	EQU		9Ah
             0025** PB_DDR:        	 	EQU		9Bh
             0026** PB_ALT1:        	EQU		9Ch
             0027** PB_ALT2:        	EQU		9Dh
             0028** PC_DR:          	EQU		9Eh
             0029** PC_DDR:         	EQU		9Fh
             0030** PC_ALT1:        	EQU		A0h
             0031** PC_ALT2:        	EQU		A1h
             0032** PD_DR:          	EQU		A2h
             0033** PD_DDR:			EQU		A3h
             0034** PD_ALT1:		EQU		A4h
             0035** PD_ALT2:		EQU		A5h
             0036** 
             0037** GPIOMODE_OUT:		EQU		0	; Output
             0038** GPIOMODE_IN:		EQU		1	; Input
             0039** GPIOMODE_DIO:		EQU		2	; Open Drain IO
             0040** GPIOMODE_SIO:		EQU		3	; Open Source IO
             0041** GPIOMODE_INTD:		EQU		4	; Interrupt, Dual Edge
             0042** GPIOMODE_ALTF:		EQU		5;	; Alt Function
             0043** GPIOMODE_INTAL:		EQU		6	; Interrupt, Active Low
             0044** GPIOMODE_INTAH:		EQU		7	; Interrupt, Active High
             0045** GPIOMODE_INTFE:		EQU		8	; Interrupt, Falling Edge
             0046** GPIOMODE_INTRE:		EQU		9	; Interrupt, Rising Edge
             0047** 
             0048** ; ; Originally in ram.asm
             0049** ; ;
             0050** ; OC:			EQU     STAVAR+15*4     ; CODE ORIGIN (O%)
             0051** ; PC:			EQU     STAVAR+16*4     ; PROGRAM COUNTER (P%)
             0052** ; VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands
             0053** 
             0054** ; Originally in main.asm
             0055** ;
             0056** CR:			EQU     0DH
             0057** LF:			EQU     0AH
             0058** ESC:			EQU     1BH
              0003* include "basic/eval.asm"
             0001** ;
             0002** ; Title:	BBC Basic Interpreter - Z80 version
             0003** ;		Expression Evaluation & Arithmetic Module - "EVAL"
             0004** ; Author:	(C) Copyright  R.T.Russell  1984
             0005** ; Modified By:	Dean Belfield
             0006** ; Created:	12/05/2023
             0007** ; Last Updated:	17/08/2023
             0008** ;
             0009** ; Modinfo:
             0010** ; 07/06/2023:	Modified to run in ADL mode
             0011** ; 26/06/2023:	Fixed HEX and HEXSTR
             0012** ; 13/08/2023:	Added INKEY(-n) support (requires MOS 1.04)
             0013** ; 17/08/2023:	Added binary constants
             0014** 
             0015** ; .ASSUME	ADL = 1
             0016** 
             0017** ; INCLUDE	"equs.inc"
             0018** ; INCLUDE "macros.inc"
             0019** ; INCLUDE "mos_api.inc"	; In MOS/src
             0020** 
             0021** ; SEGMENT CODE
             0022** 
             0023** ; XDEF	EXPR
             0024** ; XDEF	EXPRN
             0025** ; XDEF	EXPRI
             0026** ; XDEF	EXPRS
             0027** ; XDEF	ITEMI
             0028** ; XDEF	LOADN
             0029** ; XDEF	LOAD4
             0030** ; XDEF	CONS
             0031** ; XDEF	LOADS
             0032** ; XDEF	SFIX
             0033** ; XDEF	VAL0
             0034** ; XDEF	SEARCH
             0035** ; XDEF	SWAP
             0036** ; XDEF	TEST
             0037** ; XDEF	DECODE
             0038** ; XDEF	HEXSTR
             0039** ; XDEF	STR
             0040** ; XDEF	ZERO
             0041** ; XDEF	PUSHS
             0042** ; XDEF	POPS
             0043** ; XDEF	COMMA
             0044** ; XDEF	BRAKET
             0045** ; XDEF	NXT
             0046** ; XDEF	COUNT0
             0047** 
             0048** ; XREF	ADVAL
             0049** ; XREF	FN_EX
             0050** ; XREF	POINT
             0051** ; XREF	USR
             0052** ; XREF	SYNTAX
             0053** ; XREF	ERROR_
             0054** ; XREF	CHECK
             0055** ; XREF	GETVAR
             0056** ; XREF	LISTON
             0057** ; XREF	RANGE
             0058** ; XREF	FPP
             0059** ; XREF	GETCSR
             0060** ; XREF	CHANEL
             0061** ; XREF	OSSTAT
             0062** ; XREF	OSBGET
             0063** ; XREF	LOMEM
             0064** ; XREF	HIMEM
             0065** ; XREF	PAGE_
             0066** ; XREF	TOP
             0067** ; XREF	ERL
             0068** ; XREF	ERR
             0069** ; XREF	COUNT
             0070** ; XREF	OSOPEN
             0071** ; XREF	GETEXT
             0072** ; XREF	GETPTR
             0073** ; XREF	GETIME
             0074** ; XREF	GETIMS
             0075** ; XREF	LEXAN2
             0076** ; XREF	RANDOM
             0077** ; XREF	STORE5
             0078** ; XREF	GETSCHR
             0079** ; XREF	OSRDCH
             0080** ; XREF	OSKEY
             0081** ; XREF	INKEY1
             0082** ; XREF	EXTERR
             0083** ;
             0084** ; BINARY FLOATING POINT REPRESENTATION:
             0085** ;    32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
             0086** ;     8 BIT EXCESS-128 SIGNED EXPONENT
             0087** ;    SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
             0088** ;    MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
             0089** ;
             0090** ; BINARY INTEGER REPRESENTATION:
             0091** ;    32 BIT 2'S-COMPLEMENT SIGNED INTEGER
             0092** ;     "EXPONENT" BYTE = 0 (WHEN PRESENT)
             0093** ;
             0094** ; NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
             0095** ;                             EXPONENT - C
             0096** ;
             0097** 
             0098** ;
             0099** ; Table of addresses for functions
             0100** ;
             0101** FUNTOK:			EQU	8DH			; First token number
             0102** ;
0B00D2 AE    0103** FUNTBL:			DW24	DECODE			; Line number
0B00D3 08 
0B00D4 0B 
0B00D5 5C    0104** DW24	OPENIN			; OPENIN
0B00D6 05 
0B00D7 0B 
0B00D8 7E    0105** DW24	PTR_EV			; PTR
0B00D9 05 
0B00DA 0B 
0B00DB 18    0106** DW24	PAGEV			; PAGE
0B00DC 05 
0B00DD 0B 
0B00DE 88    0107** DW24	TIMEV			; TIME
0B00DF 05 
0B00E0 0B 
0B00E1 04    0108** DW24	LOMEMV			; LOMEM
0B00E2 05 
0B00E3 0B 
0B00E4 0E    0109** DW24	HIMEMV			; HIMEM
0B00E5 05 
0B00E6 0B 
0B00E7 DC    0110** DW24	ABSV			; ABS
0B00E8 05 
0B00E9 0B 
0B00EA 18    0111** DW24	ACS			; ACS
0B00EB 06 
0B00EC 0B 
0B00ED 7F    0112** DW24	ADVAL			; ADVAL
0B00EE 43 
0B00EF 0B 
0B00F0 ED    0113** DW24	ASC			; ASC
0B00F1 04 
0B00F2 0B 
0B00F3 10    0114** DW24	ASN			; ASN
0B00F4 06 
0B00F5 0B 
0B00F6 14    0115** DW24	ATN			; ATN
0B00F7 06 
0B00F8 0B 
0B00F9 B6    0116** DW24	BGET			; BGET
0B00FA 04 
0B00FB 0B 
0B00FC FC    0117** DW24	COS			; COS
0B00FD 05 
0B00FE 0B 
0B00FF 43    0118** DW24	COUNTV			; COUNT
0B0100 05 
0B0101 0B 
0B0102 E4    0119** DW24	DEG			; DEG
0B0103 05 
0B0104 0B 
0B0105 37    0120** DW24	ERLV			; ERL
0B0106 05 
0B0107 0B 
0B0108 3D    0121** DW24	ERRV			; ERR
0B0109 05 
0B010A 0B 
0B010B 41    0122** DW24	EVAL_			; EVAL
0B010C 06 
0B010D 0B 
0B010E 04    0123** DW24	EXP			; EXP
0B010F 06 
0B0110 0B 
0B0111 74    0124** DW24	EXT			; EXT
0B0112 05 
0B0113 0B 
0B0114 5B    0125** DW24	ZERO			; FALSE
0B0115 09 
0B0116 0B 
0B0117 47    0126** DW24	FN_EX			; FN
0B0118 10 
0B0119 0B 
0B011A D4    0127** DW24	GET			; GET
0B011B 04 
0B011C 0B 
0B011D C3    0128** DW24	INKEY			; INKEY
0B011E 04 
0B011F 0B 
0B0120 F3    0129** DW24	INSTR			; INSTR(
0B0121 06 
0B0122 0B 
0B0123 F0    0130** DW24	INT_			; INT
0B0124 05 
0B0125 0B 
0B0126 FD    0131** DW24	LEN			; LEN
0B0127 04 
0B0128 0B 
0B0129 08    0132** DW24	LN			; LN
0B012A 06 
0B012B 0B 
0B012C 0C    0133** DW24	LOG			; LOG
0B012D 06 
0B012E 0B 
0B012F E0    0134** DW24	NOTK			; NOT
0B0130 05 
0B0131 0B 
0B0132 58    0135** DW24	OPENUP			; OPENUP
0B0133 05 
0B0134 0B 
0B0135 55    0136** DW24	OPENOT			; OPENOUT
0B0136 05 
0B0137 0B 
0B0138 D8    0137** DW24	PI			; PI
0B0139 05 
0B013A 0B 
0B013B 31    0138** DW24	POINT			; POINT(
0B013C 44 
0B013D 0B 
0B013E 95    0139** DW24	POS			; POS
0B013F 04 
0B0140 0B 
0B0141 E8    0140** DW24	RAD			; RAD
0B0142 05 
0B0143 0B 
0B0144 75    0141** DW24	RND			; RND
0B0145 06 
0B0146 0B 
0B0147 EC    0142** DW24	SGN			; SGN
0B0148 05 
0B0149 0B 
0B014A 00    0143** DW24	SIN			; SIN
0B014B 06 
0B014C 0B 
0B014D F4    0144** DW24	SQR			; SQR
0B014E 05 
0B014F 0B 
0B0150 F8    0145** DW24	TAN			; TAN
0B0151 05 
0B0152 0B 
0B0153 22    0146** DW24	TOPV			; TO(P)
0B0154 05 
0B0155 0B 
0B0156 CD    0147** DW24	TRUE			; TRUE
0B0157 05 
0B0158 0B 
0B0159 EA    0148** DW24	USR			; USR
0B015A 14 
0B015B 0B 
0B015C 32    0149** DW24	VAL			; VAL
0B015D 06 
0B015E 0B 
0B015F 9E    0150** DW24	VPOS			; VPOS
0B0160 04 
0B0161 0B 
0B0162 87    0151** DW24	CHRS			; CHRS
0B0163 07 
0B0164 0B 
0B0165 8F    0152** DW24	GETS			; GETS
0B0166 07 
0B0167 0B 
0B0168 A0    0153** DW24	INKEYS			; INKEYS
0B0169 07 
0B016A 0B 
0B016B 25    0154** DW24	LEFTS			; LEFTS(
0B016C 08 
0B016D 0B 
0B016E ED    0155** DW24	MIDS			; MIDS(
0B016F 07 
0B0170 0B 
0B0171 45    0156** DW24	RIGHTS			; RIGHTS(
0B0172 08 
0B0173 0B 
0B0174 12    0157** DW24	STRS			; STR$
0B0175 09 
0B0176 0B 
0B0177 66    0158** DW24	STRING_			; STRINGS(
0B0178 08 
0B0179 0B 
0B017A A6    0159** DW24	EOF			; EOF
0B017B 04 
0B017C 0B 
             0160** ;
             0161** FUNTBL_END:		EQU	$
             0162** ; TCMD:			EQU     FUNTOK+(FUNTBL_END-FUNTBL)/3
             0163** TCMD_EV:			EQU     FUNTBL_END-FUNTBL/3+FUNTOK ; reorder because ez80asm doesn't do order of operations
             0164** 
             0165** ANDK:			EQU     80H
             0166** DIVK:			EQU     81H
             0167** EORK:			EQU     82H
             0168** MODK:			EQU     83H
             0169** ORK:			EQU     84H
             0170** ;
0B017D B8    0171** SOPTBL:			DW24	SLE			; <= (STRING)
0B017E 05 
0B017F 0B 
0B0180 C1    0172** DW24	SNE			; <>
0B0181 05 
0B0182 0B 
0B0183 B1    0173** DW24	SGE			; >=
0B0184 05 
0B0185 0B 
0B0186 A2    0174** DW24	SLT			; <
0B0187 05 
0B0188 0B 
0B0189 C8    0175** DW24	SEQ			; =
0B018A 05 
0B018B 0B 
0B018C A9    0176** DW24	SGT			; >
0B018D 05 
0B018E 0B 
             0177** ;
             0178** ; EXPR - VARIABLE-TYPE EXPRESSION EVALUATION
             0179** ;     Expression type is returned in A'F':
             0180** ;        Numeric - A' bit 7=0, F' sign bit cleared.
             0181** ;         String - A' bit 7=1, F' sign bit set.
             0182** ; Floating-point or integer result returned in HLH'L'C
             0183** ; Integer result denoted by C=0 and HLH'L' non-zero.
             0184** ; String result returned in string accumulator, DE set.
             0185** ;
             0186** ; Hierarchy is: (1) Variables, functions, constants, bracketed expressions.
             0187** ;               (2) ^
             0188** ;               (3) * / MOD DIV
             0189** ;               (4) + -
             0190** ;               (5) = <> <= >= > <
             0191** ;               (6) AND
             0192** ;               (7) EOR OR
             0193** 
             0194** ;
             0195** ; Level 7: EOR and OR
             0196** ;
0B018F CD    0197** EXPR:			CALL    EXPR1			; Get first operator by calling Level 6
0B0190 A8 
0B0191 01 
0B0192 0B 
0B0193 FE    0198** EXPR0A:			CP      EORK            	; Is operator EOR?
0B0194 82 
0B0195 28    0199** JR      Z,EXPR0B		; Yes, so skip to next bit
0B0196 03 
0B0197 FE    0200** CP      ORK			; Is operator OR
0B0198 84 
0B0199 C0    0201** RET     NZ			; No, so return
             0202** ;
0B019A CD    0203** EXPR0B:			CALL    SAVE_EV            	; Save first operand
0B019B 06 
0B019C 0A 
0B019D 0B 
0B019E CD    0204** CALL    EXPR1           	; Get second operand
0B019F A8 
0B01A0 01 
0B01A1 0B 
0B01A2 CD    0205** CALL    DOIT            	; Do the operation
0B01A3 15 
0B01A4 0A 
0B01A5 0B 
0B01A6 18    0206** JR      EXPR0A          	; And continue
0B01A7 EB 
             0207** ;
             0208** ; Level 6: AND
             0209** ;
0B01A8 CD    0210** EXPR1:			CALL    EXPR2			; Get first operator by calling Level 5
0B01A9 BD 
0B01AA 01 
0B01AB 0B 
0B01AC FE    0211** EXPR1A:			CP      ANDK			; Is operator AND?
0B01AD 80 
0B01AE C0    0212** RET     NZ			; No, so return
0B01AF CD    0213** CALL    SAVE_EV			; Save first operand
0B01B0 06 
0B01B1 0A 
0B01B2 0B 
0B01B3 CD    0214** CALL    EXPR2			; Get second operand
0B01B4 BD 
0B01B5 01 
0B01B6 0B 
0B01B7 CD    0215** CALL    DOIT			; Do the operation
0B01B8 15 
0B01B9 0A 
0B01BA 0B 
0B01BB 18    0216** JR      EXPR1A			; And continue
0B01BC EF 
             0217** ;
             0218** ; Level 5: Comparisons
             0219** ;
0B01BD CD    0220** EXPR2:			CALL    EXPR3			; Get first operator by calling Level 4
0B01BE 2F 
0B01BF 02 
0B01C0 0B 
0B01C1 CD    0221** CALL    RELOP?			; Is it ">", "=" or "<"?
0B01C2 DD 
0B01C3 09 
0B01C4 0B 
0B01C5 C0    0222** RET     NZ			; No, so return
0B01C6 47    0223** LD      B,A			; Store the first operator in B
0B01C7 FD    0224** INC     IY              	; Bump over operator
0B01C8 23 
0B01C9 CD    0225** CALL    NXT			;
0B01CA 38 
0B01CB 0A 
0B01CC 0B 
0B01CD CD    0226** CALL    RELOP?          	; Is it a compound operator?
0B01CE DD 
0B01CF 09 
0B01D0 0B 
0B01D1 20    0227** JR      NZ,EXPR2B		; No, so skip next bit
0B01D2 09 
0B01D3 FD    0228** INC     IY			; Bump over operator
0B01D4 23 
0B01D5 B8    0229** CP      B			; Compare with first
0B01D6 CA    0230** JP      Z,SYNTAX        	; Trap illegal combinations ">>", "==", "<<" (but not "><", "=>", "=<")
0B01D7 5F 
0B01D8 0C 
0B01D9 0B 
0B01DA 80    0231** ADD     A,B
0B01DB 47    0232** LD      B,A			; B: Unique code for the compound operator
0B01DC 78    0233** EXPR2B:			LD      A,B			; A: Code for the operator/compound operator
0B01DD 08    0234** EX      AF,AF'
0B01DE FA    0235** JP      M,EXPR2S		; If it is a string, then branch here to handle it
0B01DF F8 
0B01E0 01 
0B01E1 0B 
0B01E2 08    0236** EX      AF,AF'
0B01E3 D6    0237** SUB     4
0B01E4 04 
0B01E5 FE    0238** CP      '>'-4
0B01E6 3A 
0B01E7 20    0239** JR      NZ,EXPR2C
0B01E8 02 
0B01E9 C6    0240** ADD     A,2
0B01EA 02 
0B01EB CD    0241** EXPR2C:			CALL    SAVE1
0B01EC 08 
0B01ED 0A 
0B01EE 0B 
0B01EF CD    0242** CALL    EXPR3
0B01F0 2F 
0B01F1 02 
0B01F2 0B 
0B01F3 CD    0243** CALL    DOIT            	; NB: Must NOT be "JP DOIT"
0B01F4 15 
0B01F5 0A 
0B01F6 0B 
0B01F7 C9    0244** RET
             0245** ;
0B01F8 08    0246** EXPR2S:			EX      AF,AF'			; Handle string comparisons
0B01F9 3D    0247** DEC     A
0B01FA E6    0248** AND     7
0B01FB 07 
0B01FC CD    0249** CALL    PUSHS           	; Save string on the stack
0B01FD 7C 
0B01FE 09 
0B01FF 0B 
0B0200 F5    0250** PUSH    AF              	; Save the operator
0B0201 CD    0251** CALL    EXPR3           	; Get the second string
0B0202 2F 
0B0203 02 
0B0204 0B 
0B0205 08    0252** EX      AF,AF'
0B0206 F2    0253** JP      P,TYPE_EV_
0B0207 FE 
0B0208 02 
0B0209 0B 
0B020A F1    0254** POP     AF
0B020B 4B    0255** LD      C,E             	; Length of string #2
0B020C D1    0256** POP     DE
0B020D 21    0257** LD      HL,0
0B020E 00 
0B020F 00 
0B0210 00 
0B0211 39    0258** ADD     HL,SP
0B0212 43    0259** LD      B,E             	; Length of string #1
0B0213 D5    0260** PUSH    DE
0B0214 11    0261** LD      DE,ACCS
0B0215 00 
0B0216 53 
0B0217 0B 
0B0218 EB    0262** EX      DE,HL
0B0219 CD    0263** CALL    DISPT2
0B021A 44 
0B021B 0A 
0B021C 0B 
0B021D D1    0264** POP     DE
0B021E EB    0265** EX      DE,HL
0B021F 7D    0266** LD	A,L
0B0220 21    0267** LD	HL,0
0B0221 00 
0B0222 00 
0B0223 00 
0B0224 6F    0268** LD	L,A
0B0225 39    0269** ADD     HL,SP
0B0226 F9    0270** LD      SP,HL
0B0227 EB    0271** EX      DE,HL
0B0228 AF    0272** XOR     A               	; Numeric marker
0B0229 4F    0273** LD      C,A             	; Integer marker
0B022A 08    0274** EX      AF,AF'
0B022B FD    0275** LD      A,(IY)
0B022C 7E 
0B022D 00 
0B022E C9    0276** RET
             0277** ;
             0278** ; Level 4: + and -
             0279** ;
0B022F CD    0280** EXPR3:			CALL    EXPR4			; Get first operator by calling Level 3
0B0230 8C 
0B0231 02 
0B0232 0B 
0B0233 FE    0281** EXPR3A:			CP      '-'			; Is it "-"?
0B0234 2D 
0B0235 28    0282** JR      Z,EXPR3B		; Yes, so skip the next bit
0B0236 09 
0B0237 FE    0283** CP      '+'			; Is it "+"?
0B0238 2B 
0B0239 C0    0284** RET     NZ			; No, so return
0B023A 08    0285** EX      AF,AF'			; Get the type
0B023B FA    0286** JP      M,EXPR3S		; Branch here if string
0B023C 4E 
0B023D 02 
0B023E 0B 
0B023F 08    0287** EX      AF,AF'
0B0240 CD    0288** EXPR3B:			CALL    SAVE_EV			; Save the first operator
0B0241 06 
0B0242 0A 
0B0243 0B 
0B0244 CD    0289** CALL    EXPR4			; Fetch the second operator
0B0245 8C 
0B0246 02 
0B0247 0B 
0B0248 CD    0290** CALL    DOIT			; Do the operation
0B0249 15 
0B024A 0A 
0B024B 0B 
0B024C 18    0291** JR      EXPR3A			; And continue
0B024D E5 
             0292** ;
0B024E 08    0293** EXPR3S:			EX      AF,AF'			; Handle string concatenation
0B024F FD    0294** INC     IY              	; Bump past the "+"
0B0250 23 
0B0251 CD    0295** CALL    PUSHS           	; Save the string on the stack
0B0252 7C 
0B0253 09 
0B0254 0B 
0B0255 CD    0296** CALL    EXPR4           	; Fetch the second operator
0B0256 8C 
0B0257 02 
0B0258 0B 
0B0259 08    0297** EX      AF,AF'
0B025A F2    0298** JP      P,TYPE_EV_			; If it is not a string, then Error: "Type mismatch"
0B025B FE 
0B025C 02 
0B025D 0B 
0B025E 01    0299** LD	BC, 0			; Clear BC
0B025F 00 
0B0260 00 
0B0261 00 
0B0262 4B    0300** LD      C,E             	; C: Length of the second string
0B0263 D1    0301** POP     DE
0B0264 D5    0302** PUSH    DE
0B0265 21    0303** LD      HL,ACCS
0B0266 00 
0B0267 53 
0B0268 0B 
             0304** ; BEGIN MISSING FROM BINARY
             0305** ; LD	A,E			;  E: Length of the first string
             0306** ; LD      DE,ACCS
             0307** ; LD	E,A 			; DE: Pointer to the end of the first string
             0308** ; END MISSING FROM BINARY
0B0269 54    0309** LD		D,H ; ADDED FROM BINARY
0B026A 79    0310** LD      A,C
0B026B B7    0311** OR      A
0B026C 28    0312** JR      Z,EXP3S3
0B026D 0F 
0B026E 6F    0313** LD      L,A             	; Source
0B026F 83    0314** ADD     A,E
0B0270 5F    0315** LD      E,A             	; Destination
0B0271 3E    0316** LD      A,19
0B0272 13 
0B0273 DA    0317** JP      C,ERROR_         	; A carry indicates string > 255 bytes, so Error: "String too long"
0B0274 28 
0B0275 37 
0B0276 0B 
0B0277 D5    0318** PUSH    DE
0B0278 1D    0319** DEC     E
0B0279 2D    0320** DEC     L
0B027A ED    0321** LDDR                    	; Copy
0B027B B8 
0B027C D1    0322** POP     DE
0B027D D9    0323** EXP3S3:			EXX
0B027E C1    0324** POP     BC
0B027F CD    0325** CALL    POPS            	; Restore from stack
0B0280 A6 
0B0281 09 
0B0282 0B 
0B0283 D9    0326** EXX
0B0284 F6    0327** OR      80H             	; Flag as a string
0B0285 80 
0B0286 08    0328** EX      AF,AF'
0B0287 FD    0329** LD      A,(IY)			; Fetch the next character
0B0288 7E 
0B0289 00 
0B028A 18    0330** JR      EXPR3A			; And continue
0B028B A7 
             0331** ;
             0332** ; Level 3: * / MOD DIV
             0333** ;
0B028C CD    0334** EXPR4:			CALL    EXPR5			; Get first operator by calling Level 2
0B028D AD 
0B028E 02 
0B028F 0B 
0B0290 FE    0335** EXPR4A:			CP      '*'			; "*" is valid
0B0291 2A 
0B0292 28    0336** JR      Z,EXPR4B
0B0293 0B 
0B0294 FE    0337** CP      '/'			; "/" is valid
0B0295 2F 
0B0296 28    0338** JR      Z,EXPR4B
0B0297 07 
0B0298 FE    0339** CP      MODK			; MOD token is valid
0B0299 83 
0B029A 28    0340** JR      Z,EXPR4B
0B029B 03 
0B029C FE    0341** CP      DIVK			; DIV token is valid
0B029D 81 
0B029E C0    0342** RET     NZ			; And return if it is anything else
0B029F CD    0343** EXPR4B:			CALL    SAVE_EV
0B02A0 06 
0B02A1 0A 
0B02A2 0B 
0B02A3 CD    0344** CALL    EXPR5
0B02A4 AD 
0B02A5 02 
0B02A6 0B 
0B02A7 CD    0345** CALL    DOIT
0B02A8 15 
0B02A9 0A 
0B02AA 0B 
0B02AB 18    0346** JR      EXPR4A
0B02AC E3 
             0347** ;
             0348** ; Level 2: ^
             0349** ;
0B02AD CD    0350** EXPR5:			CALL    ITEM			; Get variable
0B02AE 8D 
0B02AF 03 
0B02B0 0B 
0B02B1 B7    0351** OR      A               	; Test type
0B02B2 08    0352** EX      AF,AF'          	; Save type
0B02B3 CD    0353** EXPR5A:			CALL    NXT			; Skip spaces
0B02B4 38 
0B02B5 0A 
0B02B6 0B 
0B02B7 FE    0354** CP      '^'			; Is the operator "^"?
0B02B8 5E 
0B02B9 C0    0355** RET     NZ			; No, so return
0B02BA CD    0356** CALL    SAVE_EV			; Save first operand
0B02BB 06 
0B02BC 0A 
0B02BD 0B 
0B02BE CD    0357** CALL    ITEM			; Get second operand
0B02BF 8D 
0B02C0 03 
0B02C1 0B 
0B02C2 B7    0358** OR      A			; Test type
0B02C3 08    0359** EX      AF,AF'			; Save type
0B02C4 CD    0360** CALL    DOIT			; Do the operation
0B02C5 15 
0B02C6 0A 
0B02C7 0B 
0B02C8 18    0361** JR      EXPR5A			; And continue
0B02C9 E9 
             0362** ;
             0363** ; Evaluate a numeric expression
             0364** ;
0B02CA CD    0365** EXPRN:			CALL    EXPR			; Evaluate expression
0B02CB 8F 
0B02CC 01 
0B02CD 0B 
0B02CE 08    0366** EX      AF,AF'			; Get the type
0B02CF F0    0367** RET     P			; And return if it is a number
0B02D0 18    0368** JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B02D1 2C 
             0369** ;
             0370** ; Evaluate a fixed-point expression
             0371** ;
0B02D2 CD    0372** EXPRI:			CALL    EXPR			; Evaluate the expression
0B02D3 8F 
0B02D4 01 
0B02D5 0B 
0B02D6 08    0373** EX      AF,AF'			; Get the type
0B02D7 F2    0374** JP      P,SFIX			; If it is numeric, then convert to fixed-point notation
0B02D8 2A 
0B02D9 06 
0B02DA 0B 
0B02DB 18    0375** JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B02DC 21 
             0376** ;
             0377** ; Evaluate a string expression
             0378** ;
0B02DD CD    0379** EXPRS:			CALL    EXPR			; Evaluate the expression
0B02DE 8F 
0B02DF 01 
0B02E0 0B 
0B02E1 08    0380** EX      AF,AF'			; Get the type
0B02E2 F8    0381** RET     M			; And return if it is a string
0B02E3 18    0382** JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B02E4 19 
             0383** ;
             0384** ; Get a numeric variable
             0385** ;
0B02E5 CD    0386** ITEMN:			CALL    ITEM			; Get the variable
0B02E6 8D 
0B02E7 03 
0B02E8 0B 
0B02E9 B7    0387** OR      A			; Test the type
0B02EA F0    0388** RET     P			; And return if it is a number
0B02EB 18    0389** JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B02EC 11 
             0390** ;
             0391** ; Get a fixed-point variable
             0392** ;
0B02ED CD    0393** ITEMI:			CALL    ITEM			; Get the variable
0B02EE 8D 
0B02EF 03 
0B02F0 0B 
0B02F1 B7    0394** OR      A			; Test the type
0B02F2 F2    0395** JP      P,SFIX			; If it is numeric, then convert to fixed-point notation
0B02F3 2A 
0B02F4 06 
0B02F5 0B 
0B02F6 18    0396** JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B02F7 06 
             0397** ;
             0398** ; Get a string variable
             0399** ;
0B02F8 CD    0400** ITEMS:			CALL    ITEM			; Get the variable
0B02F9 8D 
0B02FA 03 
0B02FB 0B 
0B02FC B7    0401** OR      A			; Test the type
0B02FD F8    0402** RET     M			; If it is a string, then return
             0403** ;							; Otherwise
0B02FE 3E    0404** TYPE_EV_:			LD      A,6			; Error: "Type mismatch"
0B02FF 06 
0B0300 C3    0405** JP      ERROR_
0B0301 28 
0B0302 37 
0B0303 0B 
             0406** ;
             0407** ; Evaluate a bracketed expression
             0408** ;
0B0304 CD    0409** ITEM1:			CALL    EXPR            	; Evaluate the expression
0B0305 8F 
0B0306 01 
0B0307 0B 
0B0308 CD    0410** CALL    BRAKET			; Check for closing bracket
0B0309 F7 
0B030A 09 
0B030B 0B 
0B030C 08    0411** EX      AF,AF'
0B030D C9    0412** RET
             0413** ;
             0414** ; HEX - Get hexadecimal constant.
             0415** ;   Inputs: ASCII string at (IY)
             0416** ;  Outputs: Integer result in H'L'HL, C=0, A7=0.
             0417** ;           IY updated (points to delimiter)
             0418** ;
0B030E CD    0419** HEX:			CALL    ZERO			; Set result to 0
0B030F 5B 
0B0310 09 
0B0311 0B 
0B0312 CD    0420** CALL    HEXDIG			; Fetch the character from IY
0B0313 C0 
0B0314 09 
0B0315 0B 
0B0316 38    0421** JR      C,BADHEX		; If invalid HEX character, then Error: "Bad HEX"
0B0317 1B 
0B0318 FD    0422** HEX1:			INC     IY			; Move pointer to next character
0B0319 23 
0B031A E6    0423** AND     0FH			; Clear the top nibble
0B031B 0F 
0B031C 06    0424** LD      B,4			; Loop counter
0B031D 04 
             0425** ;
0B031E D9    0426** HEX2:			EXX				; Shift the result left B (4) times. This makes
0B031F 52    0427** ADD.S   HL,HL			; space for the incoming nibble in the least significant 4 bits
0B0320 29 
0B0321 D9    0428** EXX				; .
0B0322 52    0429** ADC.S   HL,HL			; .
0B0323 ED 
0B0324 6A 
0B0325 10    0430** DJNZ    HEX2			; And loop
0B0326 F7 
0B0327 D9    0431** EXX
0B0328 B5    0432** OR      L			; OR in the digit
0B0329 6F    0433** LD      L,A
0B032A D9    0434** EXX
             0435** ;
0B032B CD    0436** CALL    HEXDIG			; Fetch the next character
0B032C C0 
0B032D 09 
0B032E 0B 
0B032F 30    0437** JR      NC,HEX1			; If it is a HEX digit then loop
0B0330 E7 
0B0331 AF    0438** XOR     A			; Clear A
0B0332 C9    0439** RET
             0440** ;
0B0333 3E    0441** BADHEX:			LD      A,28
0B0334 1C 
0B0335 C3    0442** JP      ERROR_          	; Error: "Bad HEX"
0B0336 28 
0B0337 37 
0B0338 0B 
             0443** ;
             0444** ; BIN - Get binary constant.
             0445** ;   Inputs: ASCII string at (IY)
             0446** ;  Outputs: Integer result in H'L'HL, C=0, A7=0.
             0447** ;           IY updated (points to delimiter)
             0448** ;
0B0339 CD    0449** BIN:			CALL    ZERO			; Set result to 0
0B033A 5B 
0B033B 09 
0B033C 0B 
0B033D CD    0450** CALL	BINDIG			; Fetch the character from IY
0B033E D3 
0B033F 09 
0B0340 0B 
0B0341 38    0451** JR	C,BADBIN		; If invalid BIN character then Error: "Bad Binary"
0B0342 13 
0B0343 FD    0452** BIN1:			INC	IY			; Move pointer to next character
0B0344 23 
0B0345 0F    0453** RRCA				; Bit 0 of ASCII '0' is 0, and ASCII '1' is 1, so shift that bit into carry
0B0346 D9    0454** EXX				;
0B0347 52    0455** ADC.S	HL,HL			; And shift back into into H'L'HL (note the ADC)
0B0348 ED 
0B0349 6A 
0B034A D9    0456** EXX
0B034B 52    0457** ADC.S	HL,HL
0B034C ED 
0B034D 6A 
0B034E CD    0458** CALL	BINDIG			; Fetch the next character
0B034F D3 
0B0350 09 
0B0351 0B 
0B0352 30    0459** JR	NC,BIN1
0B0353 EF 
0B0354 AF    0460** XOR	A			; Clear A
0B0355 C9    0461** RET
             0462** ;
0B0356 3E    0463** BADBIN:			LD	A, 28			; Error: "Bad Binary" - reuses same error code as Bad HEX
0B0357 1C 
0B0358 CD    0464** CALL	EXTERR
0B0359 3F 
0B035A 37 
0B035B 0B 
0B035C 42    0465** DB	"Bad Binary", 0
0B035D 61 
0B035E 64 
0B035F 20 
0B035F 42   
0B0360 69 
0B0361 6E 
0B0362 61 
0B0362 72   
0B0363 79 
0B0364 00 
             0466** ;
             0467** ; MINUS - Unary minus.
             0468** ;   Inputs: IY = text pointer
             0469** ;  Outputs: Numeric result, same type as argument.
             0470** ;           Result in H'L'HLC
             0471** ;
0B0367 CD    0472** MINUS:			CALL    ITEMN			; Get the numeric argument
0B0368 E5 
0B0369 02 
0B036A 0B 
0B036B 0D    0473** MINUS0:			DEC     C			; Check exponent (C)
0B036C 0C    0474** INC     C			; If it is zero, then it's either a FP zero or an integer
0B036D 28    0475** JR      Z,NEGATE_EV        	; So do an integer negation
0B036E 06 
             0476** ;
0B036F 7C    0477** LD      A,H			; Do a FP negation by
0B0370 EE    0478** XOR     80H             	; Toggling the sign bit (H)
0B0371 80 
0B0372 67    0479** LD      H,A
0B0373 AF    0480** XOR     A               	; Numeric marker
0B0374 C9    0481** RET
             0482** ;
0B0375 D9    0483** NEGATE_EV:			EXX				; This section does a two's complement negation on H'L'HLC
0B0376 7C    0484** LD      A,H			; First do a one's complement by negating all the bytes
0B0377 2F    0485** CPL
0B0378 67    0486** LD      H,A
0B0379 7D    0487** LD      A,L
0B037A 2F    0488** CPL
0B037B 6F    0489** LD      L,A
0B037C D9    0490** EXX
0B037D 7C    0491** LD      A,H
0B037E 2F    0492** CPL
0B037F 67    0493** LD      H,A
0B0380 7D    0494** LD      A,L
0B0381 2F    0495** CPL
0B0382 6F    0496** LD      L,A
0B0383 D9    0497** ADD1:			EXX				; Then add 1
0B0384 23    0498** INC     HL
0B0385 7C    0499** LD      A,H
0B0386 B5    0500** OR      L
0B0387 D9    0501** EXX
0B0388 3E    0502** LD      A,0             	; Numeric marker
0B0389 00 
0B038A C0    0503** RET     NZ
0B038B 23    0504** INC     HL
0B038C C9    0505** RET
             0506** ;
             0507** ; ITEM - VARIABLE TYPE NUMERIC OR STRING ITEM.
             0508** ; Item type is returned in A:  Bit 7=0 numeric.
             0509** ;                              Bit 7=1 string.
             0510** ; Numeric item returned in HLH'L'C.
             0511** ; String item returned in string accumulator,
             0512** ;   DE addresses byte after last (E=length).
             0513** ;
0B038D CD    0514** ITEM:			CALL    CHECK			; Check there's at least a page of free memory left and Error: "No room" if not
0B038E 17 
0B038F 16 
0B0390 0B 
0B0391 CD    0515** CALL    NXT			; Skip spaces
0B0392 38 
0B0393 0A 
0B0394 0B 
0B0395 FD    0516** INC     IY			; Move to the prefix character
0B0396 23 
0B0397 FE    0517** CP      '&'			; If `&`
0B0398 26 
0B0399 CA    0518** JP      Z,HEX           	; Then get a HEX constant
0B039A 0E 
0B039B 03 
0B039C 0B 
0B039D FE    0519** CP	'%'			; If '%'
0B039E 25 
0B039F 28    0520** JR	Z,BIN			; Then get a BINARY constant
0B03A0 98 
0B03A1 FE    0521** CP      '-'			; If `-`
0B03A2 2D 
0B03A3 28    0522** JR      Z,MINUS         	; Then get a negative number
0B03A4 C2 
0B03A5 FE    0523** CP      '+'			; If `+`
0B03A6 2B 
0B03A7 CA    0524** JP      Z,ITEMN         	; Then just fetch the number (unary plus)
0B03A8 E5 
0B03A9 02 
0B03AA 0B 
0B03AB FE    0525** CP      '('			; If `(`
0B03AC 28 
0B03AD CA    0526** JP      Z,ITEM1         	; Start of a bracketed expression
0B03AE 04 
0B03AF 03 
0B03B0 0B 
0B03B1 FE    0527** CP      34			; If `"`
0B03B2 22 
0B03B3 28    0528** JR      Z,CONS          	; Start of a string constant
0B03B4 7A 
0B03B5 FE    0529** CP      TCMD_EV			; Is it out of range of the function table?
0B03B6 C6 
0B03B7 D2    0530** JP      NC,SYNTAX       	; Error: "Syntax Error"
0B03B8 5F 
0B03B9 0C 
0B03BA 0B 
0B03BB FE    0531** CP      FUNTOK			; If it is in range, then
0B03BC 8D 
0B03BD D2    0532** JP      NC,DISPAT       	; It's a function
0B03BE 4B 
0B03BF 0A 
0B03C0 0B 
0B03C1 FD    0533** DEC     IY
0B03C2 2B 
0B03C3 FE    0534** CP      ':'
0B03C4 3A 
0B03C5 30    0535** JR      NC,ITEM2		; VARIABLE?
0B03C6 0C 
0B03C7 FE    0536** CP      '0'
0B03C8 30 
0B03C9 D2    0537** JP      NC,CON			; NUMERIC CONSTANT
0B03CA 56 
0B03CB 04 
0B03CC 0B 
0B03CD FE    0538** CP      '.'
0B03CE 2E 
0B03CF CA    0539** JP      Z,CON			; NUMERIC CONSTANT
0B03D0 56 
0B03D1 04 
0B03D2 0B 
0B03D3 CD    0540** ITEM2:			CALL    GETVAR			; VARIABLE
0B03D4 02 
0B03D5 3A 
0B03D6 0B 
0B03D7 20    0541** JR      NZ,NOSUCH
0B03D8 37 
0B03D9 B7    0542** OR      A
0B03DA FA    0543** JP      M,LOADS			; STRING VARIABLE
0B03DB 68 
0B03DC 04 
0B03DD 0B 
0B03DE B7    0544** LOADN:			OR      A
0B03DF 28    0545** JR      Z,LOAD1			; BYTE VARIABLE
0B03E0 20 
0B03E1 0E    0546** LD      C,0
0B03E2 00 
0B03E3 CB    0547** BIT     0,A
0B03E4 47 
0B03E5 28    0548** JR      Z,LOAD4			; INTEGER VARIABLE
0B03E6 03 
0B03E7 DD    0549** LOAD5:			LD      C,(IX+4)
0B03E8 4E 
0B03E9 04 
0B03EA D9    0550** LOAD4:			EXX
0B03EB 21    0551** LD	HL, 0			; TODO: Optimise
0B03EC 00 
0B03ED 00 
0B03EE 00 
0B03EF DD    0552** LD      L,(IX+0)
0B03F0 6E 
0B03F1 00 
0B03F2 DD    0553** LD      H,(IX+1)
0B03F3 66 
0B03F4 01 
0B03F5 D9    0554** EXX
0B03F6 21    0555** LD	HL, 0			; TODO: Optimise
0B03F7 00 
0B03F8 00 
0B03F9 00 
0B03FA DD    0556** LD      L,(IX+2)
0B03FB 6E 
0B03FC 02 
0B03FD DD    0557** LD      H,(IX+3)
0B03FE 66 
0B03FF 03 
0B0400 C9    0558** RET
             0559** ;
0B0401 21    0560** LOAD1:			LD      HL,0
0B0402 00 
0B0403 00 
0B0404 00 
0B0405 D9    0561** EXX
0B0406 21    0562** LD      HL,0			; TODO: Optimise
0B0407 00 
0B0408 00 
0B0409 00 
0B040A DD    0563** LD      L,(IX+0)
0B040B 6E 
0B040C 00 
0B040D D9    0564** EXX
0B040E 4C    0565** LD      C,H
0B040F C9    0566** RET
             0567** ;
0B0410 DA    0568** NOSUCH:			JP      C,SYNTAX
0B0411 5F 
0B0412 0C 
0B0413 0B 
0B0414 3A    0569** LD      A,(LISTON)
0B0415 40 
0B0416 56 
0B0417 0B 
0B0418 CB    0570** BIT     5,A
0B0419 6F 
0B041A 3E    0571** LD      A,26
0B041B 1A 
0B041C 20    0572** JR      NZ,ERROR0_EV		; Throw "No such variable"
0B041D 26 
0B041E FD    0573** NOS1:			INC     IY
0B041F 23 
0B0420 CD    0574** CALL    RANGE
0B0421 37 
0B0422 3C 
0B0423 0B 
0B0424 30    0575** JR      NC,NOS1
0B0425 F8 
0B0426 DD    0576** LD      IX,PC
0B0427 21 
0B0428 40 
0B0429 55 
0B0429 0B   
0B042B AF    0577** XOR     A
0B042C 4F    0578** LD      C,A
0B042D 18    0579** JR      LOAD4
0B042E BB 
             0580** ;
             0581** ;CONS - Get string constant from ASCII string.
             0582** ;   Inputs: ASCII string at (IY)
             0583** ;  Outputs: Result in string accumulator.
             0584** ;           D = MS byte of ACCS, E = string length
             0585** ;           A7 = 1 (string marker)
             0586** ;           IY updated
             0587** ;
0B042F 11    0588** CONS:			LD      DE,ACCS			; DE: Pointer to the string accumulator
0B0430 00 
0B0431 53 
0B0432 0B 
0B0433 FD    0589** CONS3:			LD      A,(IY)			; Fetch the first character and
0B0434 7E 
0B0435 00 
0B0436 FD    0590** INC     IY			; Increment the pointer
0B0437 23 
0B0438 FE    0591** CP      '"'			; Check for start quote
0B0439 22 
0B043A 28    0592** JR      Z,CONS2			; Yes, so jump to the bit that parses the string
0B043B 0C 
             0593** ;
0B043C 12    0594** CONS1:			LD      (DE),A			; Store the character in the string accumulator
0B043D 1C    0595** INC     E			; Increment the string accumulator pointer
0B043E FE    0596** CP      CR			; Is it CR
0B043F 0D 
0B0440 20    0597** JR      NZ,CONS3		; No, so keep looping
0B0441 F1 
             0598** ;
0B0442 3E    0599** LD      A,9
0B0443 09 
0B0444 C3    0600** ERROR0_EV:			JP      ERROR_           	; Throw error "Missing '"'
0B0445 28 
0B0446 37 
0B0447 0B 
             0601** ;
0B0448 FD    0602** CONS2:			LD      A,(IY)			; Fetch the next character
0B0449 7E 
0B044A 00 
0B044B FE    0603** CP      '"'			; Check for end quote?
0B044C 22 
0B044D FD    0604** INC     IY			; Increment the pointer
0B044E 23 
0B044F 28    0605** JR      Z,CONS1			; It is the end of string marker so jump to the end routine
0B0450 EB 
0B0451 FD    0606** DEC     IY			;
0B0452 2B 
0B0453 3E    0607** LD      A,80H           	; String marker
0B0454 80 
0B0455 C9    0608** RET
             0609** ;
             0610** ;CON - Get unsigned numeric constant from ASCII string.
             0611** ;   Inputs: ASCII string at (IY).
             0612** ;  Outputs: Variable-type result in HLH'L'C
             0613** ;           IY updated (points to delimiter)
             0614** ;           A7 = 0 (numeric marker)
             0615** ;
0B0456 FD    0616** CON:			PUSH    IY
0B0457 E5 
0B0458 DD    0617** POP     IX
0B0459 E1 
0B045A 3E    0618** LD      A,36
0B045B 24 
0B045C CD    0619** CALL    FPP
0B045D 32 
0B045E 20 
0B045F 0B 
0B0460 38    0620** JR      C,ERROR0_EV
0B0461 E2 
0B0462 DD    0621** PUSH    IX
0B0463 E5 
0B0464 FD    0622** POP     IY
0B0465 E1 
0B0466 AF    0623** XOR     A
0B0467 C9    0624** RET
             0625** ;
0B0468 11    0626** LOADS:			LD      DE,ACCS			; Where to store the string
0B0469 00 
0B046A 53 
0B046B 0B 
0B046C 1F    0627** RRA
0B046D 30    0628** JR      NC,LOADS2       	; Skip if it is a fixed string
0B046E 1A 
             0629** ;
0B046F D9    0630** EXX				; This block was a call to LOAD4
0B0470 DD    0631** LD      L,(IX+0)		; The length of the string currently stored in the allocated space
0B0471 6E 
0B0472 00 
0B0473 DD    0632** LD      H,(IX+1)		; The maximum original string length
0B0474 66 
0B0475 01 
0B0476 D9    0633** EXX
0B0477 DD    0634** LD	HL,(IX+2)		; Address of the string (24-bit)
0B0478 27 
0B0479 02 
             0635** ;
0B047A D9    0636** EXX
0B047B 7D    0637** LD      A,L
0B047C D9    0638** EXX
0B047D B7    0639** OR      A
0B047E 01    0640** LD	BC,0			; BC: Number of bytes to copy
0B047F 00 
0B0480 00 
0B0481 00 
0B0482 4F    0641** LD      C,A
0B0483 3E    0642** LD      A,80H           	; String marker
0B0484 80 
0B0485 C8    0643** RET     Z
0B0486 ED    0644** LDIR
0B0487 B0 
0B0488 C9    0645** RET
0B0489 7E    0646** LOADS2:			LD      A,(HL)
0B048A 12    0647** LD      (DE),A
0B048B 23    0648** INC     HL
0B048C FE    0649** CP      CR
0B048D 0D 
0B048E 3E    0650** LD      A,80H           	; String marker
0B048F 80 
0B0490 C8    0651** RET     Z
0B0491 1C    0652** INC     E
0B0492 20    0653** JR      NZ,LOADS2
0B0493 F5 
0B0494 C9    0654** RET                     	; Return null string
             0655** ;
             0656** ;VARIABLE-TYPE FUNCTIONS:
             0657** ;
             0658** ;Result returned in HLH'L'C (floating point)
             0659** ;Result returned in HLH'L' (C=0) (integer)
             0660** ;Result returned in string accumulator & DE (string)
             0661** ;All registers destroyed.
             0662** ;IY (text pointer) updated.
             0663** ;Bit 7 of A indicates type: 0 = numeric, 1 = string.
             0664** ;
             0665** ;POS - horizontal cursor position.
             0666** ;VPOS - vertical cursor position.
             0667** ;EOF - return status of file.
             0668** ;BGET - read byte from file.
             0669** ;INKEY - as GET but wait only n centiseconds.
             0670** ;GET - wait for keypress and return ASCII value.
             0671** ;GET(n) - input from Z80 port n.
             0672** ;ASC - ASCII value of string.
             0673** ;LEN - length of string.
             0674** ;LOMEM - location of dynamic variables.
             0675** ;HIMEM - top of available RAM.
             0676** ;PAGE - start of current text page.
             0677** ;TOP - address of first free byte after program.
             0678** ;ERL - line number where last error occurred.
             0679** ;ERR - number of last error.
             0680** ;COUNT - number of printing characters since CR.
             0681** ;Results are integer numeric.
             0682** ;
0B0495 CD    0683** POS:			CALL    GETCSR			; Return the horizontal cursor position
0B0496 94 
0B0497 3E 
0B0498 0B 
0B0499 EB    0684** EX      DE,HL			;  L: The X cursor position
0B049A C3    0685** JP      COUNT1			; Return an 8-bit value
0B049B 49 
0B049C 05 
0B049D 0B 
             0686** ;
0B049E CD    0687** VPOS:			CALL    GETCSR			; Return the vertical cursor position
0B049F 94 
0B04A0 3E 
0B04A1 0B 
0B04A2 C3    0688** JP      COUNT1			; Return an 8-bit value
0B04A3 49 
0B04A4 05 
0B04A5 0B 
             0689** ;
0B04A6 CD    0690** EOF:			CALL    CHANEL			; Check for EOF
0B04A7 4E 
0B04A8 18 
0B04A9 0B 
0B04AA CD    0691** CALL    OSSTAT
0B04AB 0C 
0B04AC 43 
0B04AD 0B 
0B04AE CA    0692** JP      Z,TRUE			; Yes, so return true
0B04AF CD 
0B04B0 05 
0B04B1 0B 
0B04B2 C3    0693** JP      ZERO			; Otherwise return false (zero)
0B04B3 5B 
0B04B4 09 
0B04B5 0B 
             0694** ;
0B04B6 CD    0695** BGET:			CALL    CHANEL          	; Channel number
0B04B7 4E 
0B04B8 18 
0B04B9 0B 
0B04BA CD    0696** CALL    OSBGET
0B04BB FB 
0B04BC 42 
0B04BD 0B 
0B04BE 6F    0697** LD      L,A
0B04BF C3    0698** JP      COUNT0			; Return an 8-bit value
0B04C0 47 
0B04C1 05 
0B04C2 0B 
             0699** ;
0B04C3 CD    0700** INKEY:			CALL    ITEMI			; Get the argument
0B04C4 ED 
0B04C5 02 
0B04C6 0B 
0B04C7 CB    0701** BIT	7, H			; Check the sign
0B04C8 7C 
0B04C9 D9    0702** EXX				; HL: The argument
0B04CA C2    0703** JP	NZ, INKEYM		; It's negative, so do INKEY(-n)
0B04CB B3 
0B04CC 07 
0B04CD 0B 
0B04CE CD    0704** CALL	INKEY0 			; Do INKEY(n)
0B04CF A5 
0B04D0 07 
0B04D1 0B 
0B04D2 18    0705** JR      ASC0			; Return a numeric value
0B04D3 1D 
             0706** ;
0B04D4 CD    0707** GET:			CALL    NXT			; Skip whitespace
0B04D5 38 
0B04D6 0A 
0B04D7 0B 
0B04D8 FE    0708** CP      '('			; Is it GET(
0B04D9 28 
0B04DA 20    0709** JR      NZ,GET0			; No, so get a keyboard character
0B04DB 0B 
0B04DC CD    0710** CALL    ITEMI           	; Yes, so fetch the port address
0B04DD ED 
0B04DE 02 
0B04DF 0B 
0B04E0 D9    0711** EXX
0B04E1 44    0712** LD      B,H			; BC: The port address
0B04E2 4D    0713** LD      C,L
0B04E3 ED    0714** IN      L,(C)           	;  L: Input from port BC
0B04E4 68 
0B04E5 18    0715** JR      COUNT0			; Return an 8-bit value
0B04E6 60 
             0716** ;
0B04E7 CD    0717** GET0:			CALL    GETS			; Read the keyboard character
0B04E8 8F 
0B04E9 07 
0B04EA 0B 
0B04EB 18    0718** JR      ASC1			; And return the value
0B04EC 0A 
             0719** ;
0B04ED CD    0720** ASC:			CALL    ITEMS			; Get the string argument argument
0B04EE F8 
0B04EF 02 
0B04F0 0B 
0B04F1 AF    0721** ASC0:			XOR     A			; Quickly check the length of the string in ACCS
0B04F2 BB    0722** CP      E			; Is the pointer 0
0B04F3 CA    0723** JP      Z,TRUE          	; Yes, so return -1 as it is a null string
0B04F4 CD 
0B04F5 05 
0B04F6 0B 
0B04F7 2A    0724** ASC1:			LD      HL,(ACCS)		;  L: The first character (H will be discarded in COUNT0
0B04F8 00 
0B04F9 53 
0B04FA 0B 
0B04FB 18    0725** JR      COUNT0			; An 8-bit value
0B04FC 4A 
             0726** ;
0B04FD CD    0727** LEN:			CALL    ITEMS			; Get the string argument
0B04FE F8 
0B04FF 02 
0B0500 0B 
0B0501 EB    0728** EX      DE,HL			; HL: Pointer into ACCS
0B0502 18    0729** JR      COUNT0			; Return L
0B0503 43 
             0730** ;
0B0504 2A    0731** LOMEMV:			LD      HL,(LOMEM)		; Return the LOMEM system variable
0B0505 1A 
0B0506 56 
0B0507 0B 
0B0508 3A    0732** LD	A, (LOMEM+2)
0B0509 1C 
0B050A 56 
0B050B 0B 
0B050C 18    0733** JR      COUNT2			; A 24-bit value
0B050D 41 
             0734** ;
0B050E 2A    0735** HIMEMV:			LD      HL,(HIMEM)		; Return the HIMEM system variable
0B050F 20 
0B0510 56 
0B0511 0B 
0B0512 3A    0736** LD	A, (HIMEM+2)
0B0513 22 
0B0514 56 
0B0515 0B 
0B0516 18    0737** JR      COUNT2			; A 24-bit value
0B0517 37 
             0738** ;
0B0518 2A    0739** PAGEV:			LD    	HL,(PAGE_)		; Return the PAGE system variable
0B0519 14 
0B051A 56 
0B051B 0B 
0B051C 3A    0740** LD	A, (PAGE_+2)		; A 24-bit value
0B051D 16 
0B051E 56 
0B051F 0B 
0B0520 18    0741** JR      COUNT2
0B0521 2D 
             0742** ;
0B0522 FD    0743** TOPV:			LD      A,(IY)			; Return the TOP system variable
0B0523 7E 
0B0524 00 
0B0525 FD    0744** INC     IY              	; Skip "P"
0B0526 23 
0B0527 FE    0745** CP      'P'
0B0528 50 
0B0529 C2    0746** JP      NZ,SYNTAX       	; Throw "Syntax Error"
0B052A 5F 
0B052B 0C 
0B052C 0B 
0B052D 2A    0747** LD      HL,(TOP)
0B052E 17 
0B052F 56 
0B0530 0B 
0B0531 3A    0748** LD	A, (TOP+2)
0B0532 19 
0B0533 56 
0B0534 0B 
0B0535 18    0749** JR      COUNT2
0B0536 18 
             0750** ;
0B0537 2A    0751** ERLV:			LD      HL,(ERL)		; Return the error line
0B0538 33 
0B0539 56 
0B053A 0B 
0B053B 18    0752** JR      COUNT1			; A 16-bit value
0B053C 0C 
             0753** ;
0B053D 2A    0754** ERRV:			LD      HL,(ERR)		; Return the error value
0B053E 3F 
0B053F 56 
0B0540 0B 
0B0541 18    0755** JR      COUNT0			; An 8-bit value
0B0542 04 
             0756** ;
0B0543 2A    0757** COUNTV:			LD      HL,(COUNT)		; Return the print position sysvar
0B0544 3D 
0B0545 56 
0B0546 0B 
             0758** 
0B0547 26    0759** COUNT0:			LD      H,0			; Return L
0B0548 00 
0B0549 D9    0760** COUNT1:			EXX				; Return HL
0B054A AF    0761** XOR     A
0B054B 4F    0762** LD      C,A             	; Integer marker
0B054C 67    0763** LD      H,A
0B054D 6F    0764** LD      L,A
0B054E C9    0765** RET
0B054F D9    0766** COUNT2:			EXX
0B0550 6F    0767** LD	L,A
0B0551 AF    0768** XOR	A
0B0552 4F    0769** LD	C,A			; Integer marker
0B0553 67    0770** LD	H,A
0B0554 C9    0771** RET
             0772** ;
             0773** ;OPENIN - Open a file for reading.
             0774** ;OPENOT - Open a file for writing.
             0775** ;OPENUP - Open a file for reading or writing.
             0776** ;Result is integer channel number (0 if error)
             0777** ;
0B0555 AF    0778** OPENOT:			XOR     A			; Open for writing
0B0556 18    0779** JR	OPENIN_1
0B0557 06 
             0780** ;
0B0558 3E    0781** OPENUP:			LD      A,2			; Open for reading / writing
0B0559 02 
0B055A 18    0782** JR	OPENIN_1
0B055B 02 
             0783** ;
0B055C 3E    0784** OPENIN:			LD      A,1			; Open for reading
0B055D 01 
             0785** ;
0B055E F5    0786** OPENIN_1:		PUSH    AF              	; Save OPEN type
0B055F CD    0787** CALL    ITEMS           	; Fetch the filename
0B0560 F8 
0B0561 02 
0B0562 0B 
0B0563 3E    0788** LD      A,CR
0B0564 0D 
0B0565 12    0789** LD      (DE),A
0B0566 F1    0790** POP     AF              	; Restore the OPEN type
0B0567 C6    0791** ADD     A,-1            	; Affect the flags
0B0568 FF 
0B0569 21    0792** LD      HL,ACCS
0B056A 00 
0B056B 53 
0B056C 0B 
0B056D CD    0793** CALL    OSOPEN			; Call the OS specific OPEN routine in patch.asm
0B056E E4 
0B056F 42 
0B0570 0B 
0B0571 6F    0794** LD      L,A			; L: Channel number
0B0572 18    0795** JR      COUNT0			; Return channel number to BASIC
0B0573 D3 
             0796** ;
             0797** ;EXT - Return length of file.
             0798** ;PTR_EV - Return current file pointer.
             0799** ;Results are integer numeric.
             0800** ;
0B0574 CD    0801** EXT:			CALL    CHANEL
0B0575 4E 
0B0576 18 
0B0577 0B 
0B0578 CD    0802** CALL    GETEXT
0B0579 42 
0B057A 43 
0B057B 0B 
0B057C 18    0803** JR      TIME0
0B057D 15 
             0804** ;
0B057E CD    0805** PTR_EV:			CALL    CHANEL
0B057F 4E 
0B0580 18 
0B0581 0B 
0B0582 CD    0806** CALL    GETPTR
0B0583 16 
0B0584 43 
0B0585 0B 
0B0586 18    0807** JR      TIME0
0B0587 0B 
             0808** ;
             0809** ;TIME - Return current value of elapsed time.
             0810** ;Result is integer numeric.
             0811** ;
0B0588 FD    0812** TIMEV:			LD      A,(IY)
0B0589 7E 
0B058A 00 
0B058B FE    0813** CP      '$'
0B058C 24 
0B058D 28    0814** JR      Z,TIMEVS
0B058E 0A 
0B058F CD    0815** CALL    GETIME
0B0590 74 
0B0591 3E 
0B0592 0B 
0B0593 D5    0816** TIME0:			PUSH    DE
0B0594 D9    0817** EXX
0B0595 E1    0818** POP     HL
0B0596 AF    0819** XOR     A
0B0597 4F    0820** LD      C,A
0B0598 C9    0821** RET
             0822** ;
             0823** ;TIME$ - Return date/time string.
             0824** ;Result is string
             0825** ;
0B0599 FD    0826** TIMEVS:			INC     IY              ;SKIP $
0B059A 23 
0B059B CD    0827** CALL    GETIMS
0B059C 5B 
0B059D 43 
0B059E 0B 
0B059F 3E    0828** LD      A,80H           ;MARK STRING
0B05A0 80 
0B05A1 C9    0829** RET
             0830** ;
             0831** ;String comparison:
             0832** ;
0B05A2 CD    0833** SLT:			CALL    SCP
0B05A3 57 
0B05A4 09 
0B05A5 0B 
0B05A6 D0    0834** RET     NC
0B05A7 18    0835** JR      TRUE
0B05A8 24 
             0836** ;
0B05A9 CD    0837** SGT:			CALL    SCP
0B05AA 57 
0B05AB 09 
0B05AC 0B 
0B05AD C8    0838** RET     Z
0B05AE D8    0839** RET     C
0B05AF 18    0840** JR      TRUE
0B05B0 1C 
             0841** ;
0B05B1 CD    0842** SGE:			CALL    SCP
0B05B2 57 
0B05B3 09 
0B05B4 0B 
0B05B5 D8    0843** RET     C
0B05B6 18    0844** JR      TRUE
0B05B7 15 
             0845** ;
0B05B8 CD    0846** SLE:			CALL    SCP
0B05B9 57 
0B05BA 09 
0B05BB 0B 
0B05BC 28    0847** JR      Z,TRUE
0B05BD 0F 
0B05BE D0    0848** RET     NC
0B05BF 18    0849** JR      TRUE
0B05C0 0C 
             0850** ;
0B05C1 CD    0851** SNE:			CALL    SCP
0B05C2 57 
0B05C3 09 
0B05C4 0B 
0B05C5 C8    0852** RET     Z
0B05C6 18    0853** JR      TRUE
0B05C7 05 
             0854** ;
0B05C8 CD    0855** SEQ:			CALL    SCP
0B05C9 57 
0B05CA 09 
0B05CB 0B 
0B05CC C0    0856** RET     NZ
0B05CD 3E    0857** TRUE:			LD      A,-1
0B05CE FF 
0B05CF D9    0858** EXX
0B05D0 67    0859** LD      H,A
0B05D1 6F    0860** LD      L,A
0B05D2 D9    0861** EXX
0B05D3 67    0862** LD      H,A
0B05D4 6F    0863** LD      L,A
0B05D5 3C    0864** INC     A
0B05D6 4F    0865** LD      C,A
0B05D7 C9    0866** RET
             0867** ;
             0868** ;PI - Return PI (3.141592654)
             0869** ;Result is floating-point numeric.
             0870** ;
0B05D8 3E    0871** PI:			LD      A,35
0B05D9 23 
0B05DA 18    0872** JR      FPP1
0B05DB 44 
             0873** ;
             0874** ;ABS - Absolute value
             0875** ;Result is numeric, variable type.
             0876** ;
0B05DC 3E    0877** ABSV:			LD      A,16
0B05DD 10 
0B05DE 18    0878** JR      FPPN
0B05DF 3A 
             0879** ;
             0880** ;NOT - Complement integer.
             0881** ;Result is integer numeric.
             0882** ;
0B05E0 3E    0883** NOTK:			LD      A,26
0B05E1 1A 
0B05E2 18    0884** JR      FPPN
0B05E3 36 
             0885** ;
             0886** ;DEG - Convert radians to degrees
             0887** ;Result is floating-point numeric.
             0888** ;
0B05E4 3E    0889** DEG:			LD      A,21
0B05E5 15 
0B05E6 18    0890** JR      FPPN
0B05E7 32 
             0891** ;
             0892** ;RAD - Convert degrees to radians
             0893** ;Result is floating-point numeric.
             0894** ;
0B05E8 3E    0895** RAD:			LD      A,27
0B05E9 1B 
0B05EA 18    0896** JR      FPPN
0B05EB 2E 
             0897** ;
             0898** ;SGN - Return -1, 0 or +1
             0899** ;Result is integer numeric.
             0900** ;
0B05EC 3E    0901** SGN:			LD      A,28
0B05ED 1C 
0B05EE 18    0902** JR      FPPN
0B05EF 2A 
             0903** ;
             0904** ;INT - Floor function
             0905** ;Result is integer numeric.
             0906** ;
0B05F0 3E    0907** INT_:			LD      A,23
0B05F1 17 
0B05F2 18    0908** JR      FPPN
0B05F3 26 
             0909** ;
             0910** ;SQR - square root
             0911** ;Result is floating-point numeric.
             0912** ;
0B05F4 3E    0913** SQR:			LD      A,30
0B05F5 1E 
0B05F6 18    0914** JR      FPPN
0B05F7 22 
             0915** ;
             0916** ;TAN - Tangent function
             0917** ;Result is floating-point numeric.
             0918** ;
0B05F8 3E    0919** TAN:			LD      A,31
0B05F9 1F 
0B05FA 18    0920** JR      FPPN
0B05FB 1E 
             0921** ;
             0922** ;COS - Cosine function
             0923** ;Result is floating-point numeric.
             0924** ;
0B05FC 3E    0925** COS:			LD      A,20
0B05FD 14 
0B05FE 18    0926** JR      FPPN
0B05FF 1A 
             0927** ;
             0928** ;SIN - Sine function
             0929** ;Result is floating-point numeric.
             0930** ;
0B0600 3E    0931** SIN:			LD      A,29
0B0601 1D 
0B0602 18    0932** JR      FPPN
0B0603 16 
             0933** ;
             0934** ;EXP - Exponential function
             0935** ;Result is floating-point numeric.
             0936** ;
0B0604 3E    0937** EXP:			LD      A,22
0B0605 16 
0B0606 18    0938** JR      FPPN
0B0607 12 
             0939** ;
             0940** ;LN - Natural log.
             0941** ;Result is floating-point numeric.
             0942** ;
0B0608 3E    0943** LN:			LD      A,24
0B0609 18 
0B060A 18    0944** JR      FPPN
0B060B 0E 
             0945** ;
             0946** ;LOG - base-10 logarithm.
             0947** ;Result is floating-point numeric.
             0948** ;
0B060C 3E    0949** LOG:			LD      A,25
0B060D 19 
0B060E 18    0950** JR      FPPN
0B060F 0A 
             0951** ;
             0952** ;ASN - Arc-sine
             0953** ;Result is floating-point numeric.
             0954** ;
0B0610 3E    0955** ASN:			LD      A,18
0B0611 12 
0B0612 18    0956** JR      FPPN
0B0613 06 
             0957** ;
             0958** ;ATN - arc-tangent
             0959** ;Result is floating-point numeric.
             0960** ;
0B0614 3E    0961** ATN:			LD      A,19
0B0615 13 
0B0616 18    0962** JR      FPPN
0B0617 02 
             0963** ;
             0964** ;ACS - arc-cosine
             0965** ;Result is floating point numeric.
             0966** ;
0B0618 3E    0967** ACS:			LD      A,17
0B0619 11 
0B061A F5    0968** FPPN:			PUSH    AF
0B061B CD    0969** CALL    ITEMN
0B061C E5 
0B061D 02 
0B061E 0B 
0B061F F1    0970** POP     AF
0B0620 CD    0971** FPP1:			CALL    FPP
0B0621 32 
0B0622 20 
0B0623 0B 
0B0624 DA    0972** JP      C,ERROR_
0B0625 28 
0B0626 37 
0B0627 0B 
0B0628 AF    0973** XOR     A
0B0629 C9    0974** RET
             0975** ;
             0976** ;SFIX - Convert to fixed-point notation
             0977** ;
0B062A 3E    0978** SFIX:			LD      A,38
0B062B 26 
0B062C 18    0979** JR      FPP1
0B062D F2 
             0980** ;
             0981** ;SFLOAT - Convert to floating-point notation
             0982** ;
0B062E 3E    0983** SFLOAT:			LD      A,39
0B062F 27 
0B0630 18    0984** JR      FPP1
0B0631 EE 
             0985** ;
             0986** ;VAL - Return numeric value of string.
             0987** ;Result is variable type numeric.
             0988** ;
0B0632 CD    0989** VAL:			CALL    ITEMS
0B0633 F8 
0B0634 02 
0B0635 0B 
0B0636 AF    0990** VAL0:			XOR     A
0B0637 12    0991** LD      (DE),A
0B0638 DD    0992** LD      IX,ACCS
0B0639 21 
0B063A 00 
0B063B 53 
0B063B 0B   
0B063D 3E    0993** LD      A,36
0B063E 24 
0B063F 18    0994** JR      FPP1
0B0640 DF 
             0995** ;
             0996** ;EVAL - Pass string to expression evaluator.
             0997** ;Result is variable type (numeric or string).
             0998** ;
0B0641 CD    0999** EVAL_:			CALL    ITEMS
0B0642 F8 
0B0643 02 
0B0644 0B 
0B0645 3E    1000** LD      A,CR
0B0646 0D 
0B0647 12    1001** LD      (DE),A
0B0648 FD    1002** PUSH    IY
0B0649 E5 
0B064A 11    1003** LD      DE,ACCS
0B064B 00 
0B064C 53 
0B064D 0B 
0B064E FD    1004** LD      IY,ACCS
0B064F 21 
0B0650 00 
0B0651 53 
0B0651 0B   
0B0653 0E    1005** LD      C,0
0B0654 00 
0B0655 CD    1006** CALL    LEXAN2          ;TOKENISE
0B0656 67 
0B0657 3C 
0B0658 0B 
0B0659 12    1007** LD      (DE),A
0B065A 13    1008** INC     DE
0B065B AF    1009** XOR     A
0B065C CD    1010** CALL    PUSHS           ;PUT ON STACK
0B065D 7C 
0B065E 09 
0B065F 0B 
0B0660 FD    1011** LD      IY,SIZEW	;WAS 2
0B0661 21 
0B0662 03 
0B0663 00 
0B0663 00   
0B0665 FD    1012** ADD     IY,SP
0B0666 39 
0B0667 CD    1013** CALL    EXPR
0B0668 8F 
0B0669 01 
0B066A 0B 
0B066B FD    1014** POP     IY
0B066C E1 
0B066D FD    1015** ADD     IY,SP
0B066E 39 
0B066F FD    1016** LD      SP,IY           ;ADJUST STACK POINTER
0B0670 F9 
0B0671 FD    1017** POP     IY
0B0672 E1 
0B0673 08    1018** EX      AF,AF'
0B0674 C9    1019** RET
             1020** ;
             1021** ;RND - Random number function.
             1022** ; RND gives random integer 0-&FFFFFFFF
             1023** ; RND(-n) seeds random number & returns -n.
             1024** ; RND(0) returns last value in RND(1) form.
             1025** ; RND(1) returns floating-point 0-0.99999999.
             1026** ; RND(n) returns random integer 1-n.
             1027** ;
0B0675 DD    1028** RND:			LD      IX,RANDOM
0B0676 21 
0B0677 38 
0B0678 56 
0B0678 0B   
0B067A CD    1029** CALL    NXT
0B067B 38 
0B067C 0A 
0B067D 0B 
0B067E FE    1030** CP      '('
0B067F 28 
0B0680 28    1031** JR      Z,RND5          ;ARGUMENT FOLLOWS
0B0681 20 
0B0682 CD    1032** CALL    LOAD5
0B0683 E7 
0B0684 03 
0B0685 0B 
0B0686 CB    1033** RND1:			RR      C
0B0687 19 
0B0688 06    1034** LD      B,32
0B0689 20 
0B068A D9    1035** RND2:			EXX                     ;CALCULATE NEXT
0B068B 52    1036** ADC.S   HL,HL
0B068C ED 
0B068D 6A 
0B068E D9    1037** EXX
0B068F 52    1038** ADC.S   HL,HL
0B0690 ED 
0B0691 6A 
0B0692 CB    1039** BIT     3,L
0B0693 5D 
0B0694 28    1040** JR      Z,RND3
0B0695 01 
0B0696 3F    1041** CCF
0B0697 10    1042** RND3:			DJNZ    RND2
0B0698 F1 
0B0699 CB    1043** RND4:			RL      C               ;SAVE CARRY
0B069A 11 
0B069B CD    1044** CALL    STORE5          ;STORE NEW NUMBER
0B069C A3 
0B069D 15 
0B069E 0B 
0B069F AF    1045** XOR     A
0B06A0 4F    1046** LD      C,A
0B06A1 C9    1047** RET
0B06A2 CD    1048** RND5:			CALL    ITEMI
0B06A3 ED 
0B06A4 02 
0B06A5 0B 
0B06A6 DD    1049** LD      IX,RANDOM
0B06A7 21 
0B06A8 38 
0B06A9 56 
0B06A9 0B   
0B06AB CB    1050** BIT     7,H             ;NEGATIVE?
0B06AC 7C 
0B06AD 37    1051** SCF
0B06AE 20    1052** JR      NZ,RND4         ;SEED
0B06AF E9 
0B06B0 CD    1053** CALL    TEST
0B06B1 A7 
0B06B2 08 
0B06B3 0B 
0B06B4 F5    1054** PUSH    AF
0B06B5 CD    1055** CALL    SWAP
0B06B6 9F 
0B06B7 08 
0B06B8 0B 
0B06B9 D9    1056** EXX
0B06BA CD    1057** CALL    LOAD5
0B06BB E7 
0B06BC 03 
0B06BD 0B 
0B06BE C4    1058** CALL    NZ,RND1         ;NEXT IF NON-ZERO
0B06BF 86 
0B06C0 06 
0B06C1 0B 
0B06C2 D9    1059** EXX                     ;SCRAMBLE (CARE!)
0B06C3 0E    1060** LD      C,7FH
0B06C4 7F 
0B06C5 CB    1061** RND6:			BIT     7,H             ;FLOAT
0B06C6 7C 
0B06C7 20    1062** JR      NZ,RND7
0B06C8 0A 
0B06C9 D9    1063** EXX
0B06CA 52    1064** ADD.S   HL,HL
0B06CB 29 
0B06CC D9    1065** EXX
0B06CD 52    1066** ADC.S   HL,HL
0B06CE ED 
0B06CF 6A 
0B06D0 0D    1067** DEC     C
0B06D1 20    1068** JR      NZ,RND6
0B06D2 F2 
0B06D3 CB    1069** RND7:			RES     7,H             ;POSITIVE 0-0.999999
0B06D4 BC 
0B06D5 F1    1070** POP     AF
0B06D6 C8    1071** RET     Z               ;ZERO ARGUMENT
0B06D7 D9    1072** EXX
0B06D8 7B    1073** LD      A,E
0B06D9 3D    1074** DEC     A
0B06DA B2    1075** OR      D
0B06DB D9    1076** EXX
0B06DC B3    1077** OR      E
0B06DD B2    1078** OR      D
0B06DE C8    1079** RET     Z               ;ARGUMENT=1
0B06DF 06    1080** LD      B,0             ;INTEGER MARKER
0B06E0 00 
0B06E1 3E    1081** LD      A,10
0B06E2 0A 
0B06E3 CD    1082** CALL    FPP             ;MULTIPLY
0B06E4 32 
0B06E5 20 
0B06E6 0B 
0B06E7 DA    1083** JP      C,ERROR_
0B06E8 28 
0B06E9 37 
0B06EA 0B 
0B06EB CD    1084** CALL    SFIX
0B06EC 2A 
0B06ED 06 
0B06EE 0B 
0B06EF C3    1085** JP      ADD1
0B06F0 83 
0B06F1 03 
0B06F2 0B 
             1086** ;
             1087** ; INSTR - String search.
             1088** ; Result is integer numeric.
             1089** ;
0B06F3 CD    1090** INSTR:			CALL    EXPRSC			; Get the first string expression
0B06F4 E6 
0B06F5 09 
0B06F6 0B 
0B06F7 CD    1091** CALL    PUSHS           	; Push the string onto the stack
0B06F8 7C 
0B06F9 09 
0B06FA 0B 
0B06FB CD    1092** CALL    EXPRS           	; Get the second string expression
0B06FC DD 
0B06FD 02 
0B06FE 0B 
0B06FF C1    1093** POP     BC			;  C: String length, B: Value of A before PUSHS was called
0B0700 21    1094** LD      HL,0
0B0701 00 
0B0702 00 
0B0703 00 
0B0704 39    1095** ADD     HL,SP           	; HL: Pointer to main string
0B0705 C5    1096** PUSH    BC              	;  C: Main string length
0B0706 43    1097** LD      B,E             	;  B: Sub-string length
0B0707 CD    1098** CALL    NXT			; Skip whitespace
0B0708 38 
0B0709 0A 
0B070A 0B 
0B070B FE    1099** CP      ','			; Check if there is a comma for the third parameter
0B070C 2C 
0B070D 3E    1100** LD      A,0			;  A: Default start position in string
0B070E 00 
0B070F 20    1101** JR      NZ,INSTR1		; No, so skip the next bit
0B0710 1A 
0B0711 FD    1102** INC     IY              	; Skip the comma
0B0712 23 
0B0713 C5    1103** PUSH    BC              	; Save the lengths
0B0714 E5    1104** PUSH    HL              	; Save the pointer to the main string
0B0715 CD    1105** CALL    PUSHS			; Push the string onto the stack
0B0716 7C 
0B0717 09 
0B0718 0B 
0B0719 CD    1106** CALL    EXPRI			; Get the third (numeric) parameter - the starting position
0B071A D2 
0B071B 02 
0B071C 0B 
0B071D C1    1107** POP     BC			;  C: String length, B: Value of A before PUSHS was called (discarded)
0B071E CD    1108** CALL    POPS			; Pop the string off the stack
0B071F A6 
0B0720 09 
0B0721 0B 
0B0722 E1    1109** POP     HL              	; Restore the pointer to the main string
0B0723 C1    1110** POP     BC              	; Restore the lengths
0B0724 D9    1111** EXX
0B0725 7D    1112** LD      A,L			; A: The start position in the  string
0B0726 D9    1113** EXX
0B0727 B7    1114** OR      A			; Set the flags
0B0728 28    1115** JR      Z,INSTR1		; If it is zero, then skip
0B0729 01 
0B072A 3D    1116** DEC     A
0B072B 11    1117** INSTR1:			LD      DE,ACCS         	; DE: Pointer to the sub string
0B072C 00 
0B072D 53 
0B072E 0B 
0B072F CD    1118** CALL    SEARCH			; Do the search
0B0730 4D 
0B0731 07 
0B0732 0B 
0B0733 D1    1119** POP     DE
0B0734 28    1120** JR      Z,INSTR2        	; NB: Carry cleared
0B0735 03 
0B0736 ED    1121** SBC     HL,HL
0B0737 62 
0B0738 39    1122** ADD     HL,SP
0B0739 ED    1123** INSTR2:			SBC     HL,SP
0B073A 72 
0B073B EB    1124** EX      DE,HL
0B073C 7D    1125** LD	A,L
0B073D 21    1126** LD      HL,0
0B073E 00 
0B073F 00 
0B0740 00 
0B0741 6F    1127** LD	L,A
0B0742 39    1128** ADD     HL,SP
0B0743 F9    1129** LD      SP,HL
0B0744 EB    1130** EX      DE,HL
0B0745 CD    1131** CALL    BRAKET			; Check for closing bracket
0B0746 F7 
0B0747 09 
0B0748 0B 
0B0749 C3    1132** JP      COUNT1			; Return a numeric integer
0B074A 49 
0B074B 05 
0B074C 0B 
             1133** ;
             1134** ; SEARCH - Search string for sub-string
             1135** ;    Inputs: Main string at HL length C
             1136** ;            Sub-string  at DE length B
             1137** ;            Starting offset A
             1138** ;   Outputs: NZ - not found
             1139** ;            Z - found at location HL-1
             1140** ;            Carry always cleared
             1141** ;
0B074D C5    1142** SEARCH:			PUSH    BC			; Add the starting offset to HL
0B074E 01    1143** LD      BC,0
0B074F 00 
0B0750 00 
0B0751 00 
0B0752 4F    1144** LD      C,A
0B0753 09    1145** ADD     HL,BC           	; New start address
0B0754 C1    1146** POP     BC
0B0755 91    1147** SUB     C			; If the starting offset > main string length, then do nothing
0B0756 30    1148** JR      NC,SRCH4
0B0757 2C 
0B0758 ED    1149** NEG
0B0759 44 
0B075A 4F    1150** LD      C,A             	; Remaining length
             1151** ;
0B075B C5    1152** SRCH1:			PUSH    BC
0B075C 79    1153** LD	A,C
0B075D 01    1154** LD	BC,0
0B075E 00 
0B075F 00 
0B0760 00 
0B0761 4F    1155** LD	C,A
0B0762 1A    1156** LD      A,(DE)
0B0763 ED    1157** CPIR                    	; Find the first character
0B0764 B1 
0B0765 79    1158** LD      A,C
0B0766 C1    1159** POP     BC
0B0767 20    1160** JR      NZ,SRCH4
0B0768 1B 
0B0769 4F    1161** LD      C,A
             1162** ;
             1163** ; This block of four instructions was commented as a bug fix by R.T.Russell
             1164** ;
0B076A 05    1165** DEC     B			; Bug fix
0B076B B8    1166** CP      B			; Bug fix
0B076C 04    1167** INC     B			; Bug fix
0B076D 38    1168** JR      C,SRCH4			; Bug fix
0B076E 15 
             1169** ;
0B076F C5    1170** PUSH    BC
0B0770 D5    1171** PUSH    DE
0B0771 E5    1172** PUSH    HL
0B0772 05    1173** DEC     B
0B0773 28    1174** JR      Z,SRCH3         	; Found!
0B0774 08 
0B0775 13    1175** SRCH2:			INC     DE
0B0776 1A    1176** LD      A,(DE)
0B0777 BE    1177** CP      (HL)
0B0778 20    1178** JR      NZ,SRCH3
0B0779 03 
0B077A 23    1179** INC     HL
0B077B 10    1180** DJNZ    SRCH2
0B077C F8 
0B077D E1    1181** SRCH3:			POP     HL
0B077E D1    1182** POP     DE
0B077F C1    1183** POP     BC
0B0780 20    1184** JR      NZ,SRCH1
0B0781 D9 
0B0782 AF    1185** XOR     A               	; Flags: Z, NC
0B0783 C9    1186** RET                     	; Found
             1187** ;
0B0784 F6    1188** SRCH4:			OR      0FFH            	; Flags: NZ, NC
0B0785 FF 
0B0786 C9    1189** RET                     	; Not found
             1190** ;
             1191** ;CHRS - Return character with given ASCII value.
             1192** ;Result is string.
             1193** ;
0B0787 CD    1194** CHRS:			CALL    ITEMI
0B0788 ED 
0B0789 02 
0B078A 0B 
0B078B D9    1195** EXX
0B078C 7D    1196** LD      A,L
0B078D 18    1197** JR      GET1
0B078E 0E 
             1198** ;
             1199** ;GETS - Return key pressed as stringor character at position (X,Y).
             1200** ;Result is string.
             1201** ;
0B078F CD    1202** GETS:			CALL	NXT		;NEW CODE FOR GET$(X,Y)
0B0790 38 
0B0791 0A 
0B0792 0B 
0B0793 FE    1203** CP	'('
0B0794 28 
0B0795 CA    1204** JP	Z, GETSCHR	;CALL FUNCTION IN PATCH.Z80
0B0796 C4 
0B0797 43 
0B0798 0B 
0B0799 CD    1205** CALL    OSRDCH
0B079A F1 
0B079B 3E 
0B079C 0B 
0B079D 37    1206** GET1:			SCF
0B079E 18    1207** JR      INKEY1
0B079F 09 
             1208** ;
             1209** ; INKEYS - Wait up to n centiseconds for keypress.
             1210** ;          Return key pressed as string or null
             1211** ;          string if time elapsed.
             1212** ; Result is string.
             1213** ;
0B07A0 CD    1214** INKEYS:			CALL    ITEMI			; Fetch the argument
0B07A1 ED 
0B07A2 02 
0B07A3 0B 
0B07A4 D9    1215** EXX
0B07A5 CD    1216** INKEY0:			CALL    OSKEY			; This is the entry point for INKEY(n)
0B07A6 FA 
0B07A7 3E 
0B07A8 0B 
0B07A9 11    1217** INKEY1:			LD      DE,ACCS			; Store the result in the string accumulator
0B07AA 00 
0B07AB 53 
0B07AC 0B 
0B07AD 12    1218** LD      (DE),A
0B07AE 3E    1219** LD      A,80H
0B07AF 80 
0B07B0 D0    1220** RET     NC
0B07B1 1C    1221** INC     E
0B07B2 C9    1222** RET
             1223** ;
             1224** ; INKEYM - Check immediately whether a given key is being pressed
             1225** ; Result is integer numeric
             1226** ;
             1227** INKEYM:			MOSCALL	mos_getkbmap		; Get the base address of the keyboard
0B07B3 3E   0001**M LD	A, function
0B07B4 1E 
0B07B5 49   0002**M RST.LIS	08h
0B07B6 CF 
0B07B7 23    1228** INC	HL			; Index from 0
0B07B8 7D    1229** LD	A, L			; Negate the LSB of the answer
0B07B9 ED    1230** NEG
0B07BA 44 
0B07BB 4F    1231** LD	C, A			;  E: The positive keycode value
0B07BC 3E    1232** LD	A, 1			; Throw an "Out of range" error
0B07BD 01 
0B07BE FA    1233** JP	M, ERROR_		; if the argument < - 128
0B07BF 28 
0B07C0 37 
0B07C1 0B 
             1234** ;
0B07C2 21    1235** LD	HL, BITLOOKUP		; HL: The bit lookup table
0B07C3 E5 
0B07C4 07 
0B07C5 0B 
0B07C6 11    1236** LD	DE, 0
0B07C7 00 
0B07C8 00 
0B07C9 00 
0B07CA 79    1237** LD	A, C
0B07CB E6    1238** AND	00000111b		; Just need the first three bits
0B07CC 07 
0B07CD 5F    1239** LD	E, A			; DE: The bit number
0B07CE 19    1240** ADD	HL, DE
0B07CF 46    1241** LD	B, (HL)			;  B: The mask
             1242** ;
0B07D0 79    1243** LD	A, C			; Fetch the keycode again
0B07D1 E6    1244** AND	01111000b		; And divide by 8
0B07D2 78 
0B07D3 0F    1245** RRCA
0B07D4 0F    1246** RRCA
0B07D5 0F    1247** RRCA
0B07D6 5F    1248** LD	E, A			; DE: The offset (the MSW has already been cleared previously)
0B07D7 DD    1249** ADD	IX, DE			; IX: The address
0B07D8 19 
0B07D9 78    1250** LD	A, B			;  B: The mask
0B07DA DD    1251** AND	(IX+0)			; Check whether the bit is set
0B07DB A6 
0B07DC 00 
0B07DD CA    1252** JP	Z, ZERO			; No, so return 0
0B07DE 5B 
0B07DF 09 
0B07E0 0B 
0B07E1 C3    1253** JP	TRUE			; Otherwise return -1
0B07E2 CD 
0B07E3 05 
0B07E4 0B 
             1254** ;
             1255** ; A bit lookup table
             1256** ;
0B07E5 01    1257** BITLOOKUP:		DB	01h, 02h, 04h, 08h
0B07E6 02 
0B07E7 04 
0B07E8 08 
0B07E9 10    1258** DB	10h, 20h, 40h, 80h
0B07EA 20 
0B07EB 40 
0B07EC 80 
             1259** ;
             1260** ; MID$ - Return sub-string.
             1261** ; Result is string.
             1262** ;
0B07ED CD    1263** MIDS:			CALL    EXPRSC			; Get the first string expression
0B07EE E6 
0B07EF 09 
0B07F0 0B 
0B07F1 CD    1264** CALL    PUSHS           	; Push the string onto the stack from the string accumulator (ACCS)
0B07F2 7C 
0B07F3 09 
0B07F4 0B 
0B07F5 CD    1265** CALL    EXPRI			; Get the second expression
0B07F6 D2 
0B07F7 02 
0B07F8 0B 
0B07F9 C1    1266** POP     BC			; C: String length, B: Value of A before PUSHS was called
0B07FA CD    1267** CALL    POPS			; Pop the string back off the stack to the string accumulator
0B07FB A6 
0B07FC 09 
0B07FD 0B 
0B07FE D9    1268** EXX
0B07FF 7D    1269** LD      A,L			; A: The start index
0B0800 D9    1270** EXX
0B0801 B7    1271** OR      A			; If the start index is 0, then we don't need to do the next bit
0B0802 28    1272** JR      Z,MIDS1
0B0803 0E 
0B0804 3D    1273** DEC     A
0B0805 6F    1274** LD      L,A			; L: The start index - 1
0B0806 93    1275** SUB     E			; Subtract from the string length
0B0807 1E    1276** LD      E,0			; Preemptively set the string length to 0
0B0808 00 
0B0809 30    1277** JR      NC,MIDS1		; If the first parameter is greater than the string length, then do nothing
0B080A 07 
0B080B ED    1278** NEG				; Negate the answer and
0B080C 44 
0B080D 4F    1279** LD      C,A			; C: Number of bytes to copy
0B080E CD    1280** CALL    RIGHT1			; We can do a RIGHT$ at this point with the result
0B080F 51 
0B0810 08 
0B0811 0B 
0B0812 CD    1281** MIDS1:			CALL    NXT			; Skip whitespace
0B0813 38 
0B0814 0A 
0B0815 0B 
0B0816 FE    1282** CP      ','			; Check for a comma
0B0817 2C 
0B0818 FD    1283** INC     IY			; Advance to the next character in the BASIC line
0B0819 23 
0B081A 28    1284** JR      Z,LEFT1			; If there is a comma then we do a LEFT$ on the remainder
0B081B 0D 
0B081C FD    1285** DEC     IY			; Restore the BASIC program pointer
0B081D 2B 
0B081E CD    1286** CALL    BRAKET			; Check for a bracket
0B081F F7 
0B0820 09 
0B0821 0B 
0B0822 3E    1287** LD      A,80H			; String marker
0B0823 80 
0B0824 C9    1288** RET
             1289** ;
             1290** ; LEFT$ - Return left part of string.
             1291** ; Carry cleared if entire string returned.
             1292** ; Result is string.
             1293** ;
0B0825 CD    1294** LEFTS:			CALL    EXPRSC			; Get the first string expression
0B0826 E6 
0B0827 09 
0B0828 0B 
0B0829 CD    1295** LEFT1:			CALL    PUSHS           	; Push the string onto the stack from the string accumulator (ACCS)
0B082A 7C 
0B082B 09 
0B082C 0B 
0B082D CD    1296** CALL    EXPRI			; Get the second expression
0B082E D2 
0B082F 02 
0B0830 0B 
0B0831 C1    1297** POP     BC			; C: String length, B: Value of A before PUSHS was called
0B0832 CD    1298** CALL    POPS			; Pop the string back off the stack to the string accumulator (ACCS)
0B0833 A6 
0B0834 09 
0B0835 0B 
0B0836 CD    1299** CALL    BRAKET			; Check for closing bracket
0B0837 F7 
0B0838 09 
0B0839 0B 
0B083A D9    1300** EXX
0B083B 7D    1301** LD      A,L			; L: The second parameter
0B083C D9    1302** EXX
0B083D BB    1303** CP      E			; Compare with the string length
0B083E 30    1304** JR      NC,LEFT3		; If it is greater than or equal then do nothing
0B083F 02 
0B0840 6B    1305** LD      L,E             	; For RIGHTS, no effect in LEFTS
0B0841 5F    1306** LEFT2:			LD      E,A			; E: The new length of string
0B0842 3E    1307** LEFT3:			LD      A,80H           	; String marker
0B0843 80 
0B0844 C9    1308** RET
             1309** ;
             1310** ; RIGHT$ - Return right part of string.
             1311** ; Result is string.
             1312** ;
0B0845 CD    1313** RIGHTS:			CALL    LEFTS			; Call LEFTS to get the string
0B0846 25 
0B0847 08 
0B0848 0B 
0B0849 D0    1314** RET     NC			; Do nothing if the second parameter is >= string length
0B084A 1C    1315** INC     E			; Check for a zero length string
0B084B 1D    1316** DEC     E
0B084C C8    1317** RET     Z			; Yes, so do nothing
0B084D 4B    1318** LD      C,E			;  C: Number of bytes to copy
0B084E 7D    1319** LD      A,L
0B084F 93    1320** SUB     E
0B0850 6F    1321** LD      L,A			;  L: Index into the string
0B0851 79    1322** RIGHT1:			LD	A,C
0B0852 01    1323** LD	BC,0
0B0853 00 
0B0854 00 
0B0855 00 
0B0856 4F    1324** LD	C,A			; BC: Number of bytes to copy (with top word cleared)
0B0857 7D    1325** LD	A,L
0B0858 21    1326** LD	HL,ACCS
0B0859 00 
0B085A 53 
0B085B 0B 
0B085C 6F    1327** LD	L,A			; HL: Source (in ACCS)
0B085D 11    1328** LD      DE,ACCS			; DE: Destination (start of ACCS)
0B085E 00 
0B085F 53 
0B0860 0B 
0B0861 ED    1329** LDIR                    	; Copy
0B0862 B0 
0B0863 3E    1330** LD      A,80H			; String marker
0B0864 80 
0B0865 C9    1331** RET
             1332** ;
             1333** ; STRINGS - Return n concatenations of a string.
             1334** ; Result is string.
             1335** ;
0B0866 CD    1336** STRING_:		CALL    EXPRI			; Get number of times to replicate
0B0867 D2 
0B0868 02 
0B0869 0B 
0B086A CD    1337** CALL    COMMA			; Check for comma
0B086B EA 
0B086C 09 
0B086D 0B 
0B086E D9    1338** EXX
0B086F 7D    1339** LD      A,L			; L: Number of iterations of string
0B0870 D9    1340** EXX
0B0871 F5    1341** PUSH    AF
0B0872 CD    1342** CALL    EXPRS			; Get the string
0B0873 DD 
0B0874 02 
0B0875 0B 
0B0876 CD    1343** CALL    BRAKET			; Check for closing bracket
0B0877 F7 
0B0878 09 
0B0879 0B 
0B087A F1    1344** POP     AF			; A: Number of iterations of string
0B087B B7    1345** OR      A			; Set flags
0B087C 28    1346** JR      Z,LEFT2         	; If iterations is 0, then this will return an empty string
0B087D C3 
0B087E 3D    1347** DEC     A
0B087F 4F    1348** LD      C,A			; C: Loop counter
0B0880 3E    1349** LD      A,80H			; String marker
0B0881 80 
0B0882 C8    1350** RET     Z
0B0883 1C    1351** INC     E			; Check for empty string
0B0884 1D    1352** DEC     E
0B0885 C8    1353** RET     Z              		; And return
0B0886 43    1354** LD      B,E			; B: String length tally
0B0887 21    1355** LD	HL,ACCS
0B0888 00 
0B0889 53 
0B088A 0B 
0B088B C5    1356** STRIN1:			PUSH    BC
0B088C 7E    1357** STRIN2:			LD      A,(HL)
0B088D 23    1358** INC     HL
0B088E 12    1359** LD      (DE),A
0B088F 1C    1360** INC     E
0B0890 3E    1361** LD      A,19
0B0891 13 
0B0892 CA    1362** JP      Z,ERROR_         	; Throw a "String too long" error
0B0893 28 
0B0894 37 
0B0895 0B 
0B0896 10    1363** DJNZ    STRIN2
0B0897 F4 
0B0898 C1    1364** POP     BC
0B0899 0D    1365** DEC     C
0B089A 20    1366** JR      NZ,STRIN1
0B089B EF 
0B089C 3E    1367** LD      A,80H
0B089D 80 
0B089E C9    1368** RET
             1369** ;
             1370** ;SUBROUTINES
             1371** ;
             1372** ;SWAP - Swap arguments
             1373** ;Exchanges DE,HL D'E',H'L' and B,C
             1374** ;Destroys: A,B,C,D,E,H,L,D',E',H',L'
             1375** ;
0B089F 79    1376** SWAP:			LD      A,C
0B08A0 48    1377** LD      C,B
0B08A1 47    1378** LD      B,A
0B08A2 EB    1379** EX      DE,HL
0B08A3 D9    1380** EXX
0B08A4 EB    1381** EX      DE,HL
0B08A5 D9    1382** EXX
0B08A6 C9    1383** RET
             1384** ;
             1385** ;TEST - Test HLH'L' for zero
             1386** ;Outputs: Z-flag set & A=0 if zero
             1387** ;Destroys: A,F
             1388** ;
0B08A7 7C    1389** TEST:			LD      A,H
0B08A8 B5    1390** OR      L
0B08A9 D9    1391** EXX
0B08AA B4    1392** OR      H
0B08AB B5    1393** OR      L
0B08AC D9    1394** EXX
0B08AD C9    1395** RET
             1396** ;
             1397** ;DECODE - Decode line number in pseudo-binary.
             1398** ;   Inputs: IY = Text pointer.
             1399** ;   Outputs: HL=0, H'L'=line number, C=0.
             1400** ;   Destroys: A,C,H,L,H',L',IY,F
             1401** ;
0B08AE D9    1402** DECODE:			EXX
0B08AF 21    1403** LD	HL, 0
0B08B0 00 
0B08B1 00 
0B08B2 00 
0B08B3 FD    1404** LD      A,(IY)
0B08B4 7E 
0B08B5 00 
0B08B6 FD    1405** INC     IY
0B08B7 23 
0B08B8 17    1406** RLA
0B08B9 17    1407** RLA
0B08BA 67    1408** LD      H,A
0B08BB E6    1409** AND     0C0H
0B08BC C0 
0B08BD FD    1410** XOR     (IY)
0B08BE AE 
0B08BF 00 
0B08C0 FD    1411** INC     IY
0B08C1 23 
0B08C2 6F    1412** LD      L,A
0B08C3 7C    1413** LD      A,H
0B08C4 17    1414** RLA
0B08C5 17    1415** RLA
0B08C6 E6    1416** AND     0C0H
0B08C7 C0 
0B08C8 FD    1417** XOR     (IY)
0B08C9 AE 
0B08CA 00 
0B08CB FD    1418** INC     IY
0B08CC 23 
0B08CD 67    1419** LD      H,A
0B08CE D9    1420** EXX
             1421** ;			XOR     A
             1422** ;			LD      C,A
             1423** ;			LD      H,A
             1424** ;			LD      L,A
0B08CF 21    1425** LD	HL, 0
0B08D0 00 
0B08D1 00 
0B08D2 00 
0B08D3 4D    1426** LD	C, L
0B08D4 C9    1427** RET
             1428** ;
             1429** ;HEXSTR - convert numeric value to HEX string.
             1430** ;   Inputs: HLH'L'C = integer or floating-point number
             1431** ;  Outputs: String in string accumulator.
             1432** ;           E = string length.  D = ACCS/256
             1433** ;
0B08D5 FD    1434** HEXSTS:			INC     IY              ;SKIP TILDE
0B08D6 23 
0B08D7 CD    1435** CALL    ITEMN
0B08D8 E5 
0B08D9 02 
0B08DA 0B 
0B08DB CD    1436** CALL    HEXSTR
0B08DC E2 
0B08DD 08 
0B08DE 0B 
0B08DF 3E    1437** LD      A,80H
0B08E0 80 
0B08E1 C9    1438** RET
             1439** ;
0B08E2 CD    1440** HEXSTR:			CALL    SFIX
0B08E3 2A 
0B08E4 06 
0B08E5 0B 
0B08E6 01    1441** LD      BC,8
0B08E7 08 
0B08E8 00 
0B08E9 00 
0B08EA 11    1442** LD      DE,ACCS
0B08EB 00 
0B08EC 53 
0B08ED 0B 
0B08EE C5    1443** HEXST1:			PUSH    BC
0B08EF 06    1444** LD      B,4
0B08F0 04 
0B08F1 AF    1445** XOR     A
0B08F2 D9    1446** HEXST2:			EXX
0B08F3 52    1447** ADD.S	HL,HL
0B08F4 29 
0B08F5 D9    1448** EXX
0B08F6 52    1449** ADC.S	HL,HL
0B08F7 ED 
0B08F8 6A 
0B08F9 17    1450** RLA
0B08FA 10    1451** DJNZ    HEXST2
0B08FB F6 
0B08FC C1    1452** POP     BC
0B08FD 0D    1453** DEC     C
0B08FE F8    1454** RET     M
0B08FF 28    1455** JR      Z,HEXST3
0B0900 06 
0B0901 B7    1456** OR      A
0B0902 20    1457** JR      NZ,HEXST3
0B0903 03 
0B0904 B8    1458** CP      B
0B0905 28    1459** JR      Z,HEXST1
0B0906 E7 
0B0907 C6    1460** HEXST3:			ADD     A,90H
0B0908 90 
0B0909 27    1461** DAA
0B090A CE    1462** ADC     A,40H
0B090B 40 
0B090C 27    1463** DAA
0B090D 12    1464** LD      (DE),A
0B090E 13    1465** INC     DE
0B090F 47    1466** LD      B,A
0B0910 18    1467** JR      HEXST1
0B0911 DC 
             1468** ;
             1469** ;Function STR - convert numeric value to ASCII string.
             1470** ;   Inputs: HLH'L'C = integer or floating-point number.
             1471** ;  Outputs: String in string accumulator.
             1472** ;           E = length, D = ACCS/256
             1473** ;           A = 80H (type=string)
             1474** ;
             1475** ;First normalise for decimal output:
             1476** ;
0B0912 CD    1477** STRS:			CALL    NXT
0B0913 38 
0B0914 0A 
0B0915 0B 
0B0916 FE    1478** CP      '~'
0B0917 7E 
0B0918 28    1479** JR      Z,HEXSTS
0B0919 BB 
0B091A CD    1480** CALL    ITEMN
0B091B E5 
0B091C 02 
0B091D 0B 
0B091E DD    1481** LD      IX,STAVAR
0B091F 21 
0B0920 00 
0B0921 55 
0B0921 0B   
0B0923 DD    1482** LD      A,(IX+3)
0B0924 7E 
0B0925 03 
0B0926 B7    1483** OR      A
0B0927 DD    1484** LD      IX,G9-1         ;G9 FORMAT
0B0928 21 
0B0929 54 
0B092A 09 
0B092A 0B   
0B092C 28    1485** JR      Z,STR0
0B092D 05 
0B092E DD    1486** STR:			LD      IX,STAVAR
0B092F 21 
0B0930 00 
0B0931 55 
0B0931 0B   
0B0933 11    1487** STR0:			LD      DE,ACCS
0B0934 00 
0B0935 53 
0B0936 0B 
0B0937 3E    1488** LD      A,37
0B0938 25 
0B0939 CD    1489** CALL    FPP
0B093A 32 
0B093B 20 
0B093C 0B 
0B093D DA    1490** JP      C,ERROR_
0B093E 28 
0B093F 37 
0B0940 0B 
0B0941 DD    1491** BIT     0,(IX+2)
0B0942 CB 
0B0943 02 
0B0944 46 
0B0945 3E    1492** STR1:			LD      A,80H           ;STRING MARKER
0B0946 80 
0B0947 C8    1493** RET     Z
0B0948 79    1494** LD      A,C
0B0949 C6    1495** ADD     A,4
0B094A 04 
0B094B BB    1496** STR2:			CP      E
0B094C 28    1497** JR      Z,STR1
0B094D F7 
0B094E EB    1498** EX      DE,HL
0B094F 36    1499** LD      (HL),' '        ;TRAILING SPACE
0B0950 20 
0B0951 23    1500** INC     HL
0B0952 EB    1501** EX      DE,HL
0B0953 18    1502** JR      STR2
0B0954 F6 
             1503** ;
0B0955 09    1504** G9:			DW    9
0B0956 00 
             1505** ;
             1506** ;STRING COMPARE
             1507** ;Compare string (DE) length B with string (HL) length C.
             1508** ;Result preset to false.
             1509** ;
0B0957 CD    1510** SCP:			CALL	SCP0
0B0958 65 
0B0959 09 
0B095A 0B 
             1511** ;
0B095B 3E    1512** ZERO:			LD      A,0
0B095C 00 
0B095D D9    1513** EXX
0B095E 67    1514** LD      H,A
0B095F 6F    1515** LD      L,A
0B0960 D9    1516** EXX
0B0961 67    1517** LD      H,A
0B0962 6F    1518** LD      L,A
0B0963 4F    1519** LD      C,A
0B0964 C9    1520** RET
             1521** ;
0B0965 04    1522** SCP0:			INC     B
0B0966 0C    1523** INC     C
0B0967 05    1524** SCP1:			DEC     B
0B0968 28    1525** JR      Z,SCP2
0B0969 0A 
0B096A 0D    1526** DEC     C
0B096B 28    1527** JR      Z,SCP3
0B096C 0C 
0B096D 1A    1528** LD      A,(DE)
0B096E BE    1529** CP      (HL)
0B096F C0    1530** RET     NZ
0B0970 13    1531** INC     DE
0B0971 23    1532** INC     HL
0B0972 18    1533** JR      SCP1
0B0973 F3 
0B0974 B7    1534** SCP2:			OR      A
0B0975 0D    1535** DEC     C
0B0976 C8    1536** RET     Z
0B0977 37    1537** SCF
0B0978 C9    1538** RET
0B0979 B7    1539** SCP3:			OR      A
0B097A 0C    1540** INC     C
0B097B C9    1541** RET
             1542** ;
             1543** ; PUSHS - SAVE STRING ON STACK.
             1544** ;     Inputs: String in string accumulator.
             1545** ;             E = string length.
             1546** ;             A - saved on stack.
             1547** ;   Destroys: B,C,D,E,H,L,IX,SP,F
             1548** ;
0B097C CD    1549** PUSHS:			CALL    CHECK			; Check if there is sufficient space on the stack
0B097D 17 
0B097E 16 
0B097F 0B 
0B0980 DD    1550** POP     IX              	; IX: Return address
0B0981 E1 
0B0982 B7    1551** OR      A               	; Clear the carry flag
0B0983 01    1552** LD	BC,0			; BC: Length of the string
0B0984 00 
0B0985 00 
0B0986 00 
0B0987 4B    1553** LD	C,E
0B0988 21    1554** LD      HL,ACCS			; HL: Pointer to the string accumulator
0B0989 00 
0B098A 53 
0B098B 0B 
0B098C 11    1555** LD	DE,ACCS
0B098D 00 
0B098E 53 
0B098F 0B 
0B0990 59    1556** LD	E,C 			; DE: Pointer to the end of the string in the accumulator
0B0991 ED    1557** SBC     HL,DE			; HL: Number of bytes to reserve on the stack (a negative number)
0B0992 52 
0B0993 39    1558** ADD     HL,SP			; Grow the stack
0B0994 F9    1559** LD      SP,HL
0B0995 57    1560** LD      D,A			;  D: This needs to be set to A for some functions
             1561** ; BEGIN MISSING FROM BINARY
             1562** ; LD	B,A			; Stack A and C (the string length)
             1563** ; PUSH    BC			; Note that this stacks 3 bytes, not 2; the MSB is irrelevant
             1564** ; LD	B,0			; Reset B to 0 for the LDIR in this function
             1565** ; END MISSING FROM BINARY
0B0996 D5    1566** PUSH 	DE ; ADDED FROM BINARY
0B0997 28    1567** JR      Z,PUSHS1        	; Is it zero length?
0B0998 0B 
0B0999 11    1568** LD      DE,ACCS			; DE: Destination
0B099A 00 
0B099B 53 
0B099C 0B 
0B099D EB    1569** EX      DE,HL			; HL: Destination, DE: Address on stack
0B099E ED    1570** LDIR	                    	; Copy to stack
0B099F B0 
0B09A0 CD    1571** CALL    CHECK			; Final check to see if there is sufficient space on the stack
0B09A1 17 
0B09A2 16 
0B09A3 0B 
0B09A4 DD    1572** PUSHS1:			JP      (IX)            	; Effectively "RET" (IX contains the return address)
0B09A5 E9 
             1573** ;
             1574** ; POPS - RESTORE STRING FROM STACK.
             1575** ;     Inputs: C = string length.
             1576** ;    Outputs: String in string accumulator.
             1577** ;             E = string length.
             1578** ;   Destroys: B,C,D,E,H,L,IX,SP,F
             1579** ;
0B09A6 DD    1580** POPS:			POP     IX              	; IX: Return address
0B09A7 E1 
0B09A8 69    1581** LD	L,C			; Temporarily store string length in L
0B09A9 01    1582** LD	BC,0
0B09AA 00 
0B09AB 00 
0B09AC 00 
0B09AD 4D    1583** LD	C,L			; BC: Number of bytes to copy
0B09AE 21    1584** LD      HL,0			; HL: 0
0B09AF 00 
0B09B0 00 
0B09B1 00 
0B09B2 39    1585** ADD     HL,SP			; HL: Stack address
0B09B3 11    1586** LD      DE,ACCS			; DE: Destination
0B09B4 00 
0B09B5 53 
0B09B6 0B 
0B09B7 0C    1587** INC     C			; Quick check to see if this is a zero length string
0B09B8 0D    1588** DEC     C
0B09B9 28    1589** JR      Z,POPS1         	; Yes it is, so skip
0B09BA 02 
0B09BB ED    1590** LDIR                    	; No, so copy from the stack
0B09BC B0 
0B09BD F9    1591** POPS1:			LD      SP,HL			; Shrink the stack
0B09BE DD    1592** JP      (IX)            	; Effectively "RET" (IX contains the return address)
0B09BF E9 
             1593** ;
0B09C0 FD    1594** HEXDIG:			LD      A,(IY)
0B09C1 7E 
0B09C2 00 
0B09C3 FE    1595** CP      '0'
0B09C4 30 
0B09C5 D8    1596** RET     C
0B09C6 FE    1597** CP      '9'+1
0B09C7 3A 
0B09C8 3F    1598** CCF
0B09C9 D0    1599** RET     NC
0B09CA FE    1600** CP      'A'
0B09CB 41 
0B09CC D8    1601** RET     C
0B09CD D6    1602** SUB     'A'-10
0B09CE 37 
0B09CF FE    1603** CP      16
0B09D0 10 
0B09D1 3F    1604** CCF
0B09D2 C9    1605** RET
             1606** ;
0B09D3 FD    1607** BINDIG:			LD	A,(IY)
0B09D4 7E 
0B09D5 00 
0B09D6 FE    1608** CP	'0'
0B09D7 30 
0B09D8 D8    1609** RET	C
0B09D9 FE    1610** CP	'1'+1
0B09DA 32 
0B09DB 3F    1611** CCF
0B09DC C9    1612** RET
             1613** ;
0B09DD FE    1614** RELOP?:			CP      '>'
0B09DE 3E 
0B09DF D0    1615** RET     NC
0B09E0 FE    1616** CP      '='
0B09E1 3D 
0B09E2 D0    1617** RET     NC
0B09E3 FE    1618** CP      '<'
0B09E4 3C 
0B09E5 C9    1619** RET
             1620** ;
0B09E6 CD    1621** EXPRSC:			CALL    EXPRS
0B09E7 DD 
0B09E8 02 
0B09E9 0B 
0B09EA CD    1622** COMMA:			CALL    NXT
0B09EB 38 
0B09EC 0A 
0B09ED 0B 
0B09EE FD    1623** INC     IY
0B09EF 23 
0B09F0 FE    1624** CP      ','
0B09F1 2C 
0B09F2 C8    1625** RET     Z
0B09F3 3E    1626** LD      A,5
0B09F4 05 
0B09F5 18    1627** JR      ERROR1_EV          ;"Missing ,"
0B09F6 0B 
             1628** ;
0B09F7 CD    1629** BRAKET:			CALL    NXT
0B09F8 38 
0B09F9 0A 
0B09FA 0B 
0B09FB FD    1630** INC     IY
0B09FC 23 
0B09FD FE    1631** CP      ')'
0B09FE 29 
0B09FF C8    1632** RET     Z
0B0A00 3E    1633** LD      A,27
0B0A01 1B 
0B0A02 C3    1634** ERROR1_EV:			JP      ERROR_           ;"Missing )"
0B0A03 28 
0B0A04 37 
0B0A05 0B 
             1635** ;
0B0A06 FD    1636** SAVE_EV:			INC     IY
0B0A07 23 
0B0A08 08    1637** SAVE1:			EX      AF,AF'
0B0A09 FA    1638** JP      M,TYPE_EV_
0B0A0A FE 
0B0A0B 02 
0B0A0C 0B 
0B0A0D 08    1639** EX      AF,AF'
0B0A0E E3    1640** EX      (SP),HL
0B0A0F D9    1641** EXX
0B0A10 E5    1642** PUSH    HL
0B0A11 D9    1643** EXX
0B0A12 F5    1644** PUSH    AF
0B0A13 C5    1645** PUSH    BC
0B0A14 E9    1646** JP      (HL)
             1647** ;
0B0A15 08    1648** DOIT:			EX      AF,AF'
0B0A16 FA    1649** JP      M,TYPE_EV_
0B0A17 FE 
0B0A18 02 
0B0A19 0B 
0B0A1A D9    1650** EXX
0B0A1B C1    1651** POP     BC              ;RETURN ADDRESS
0B0A1C D9    1652** EXX
0B0A1D 79    1653** LD      A,C
0B0A1E C1    1654** POP     BC
0B0A1F 47    1655** LD      B,A
0B0A20 F1    1656** POP     AF              ;OPERATOR
0B0A21 D9    1657** EXX
0B0A22 EB    1658** EX      DE,HL
0B0A23 E1    1659** POP     HL
0B0A24 D9    1660** EXX
0B0A25 EB    1661** EX      DE,HL
0B0A26 E1    1662** POP     HL
0B0A27 D9    1663** EXX
0B0A28 C5    1664** PUSH    BC
0B0A29 D9    1665** EXX
0B0A2A E6    1666** AND     0FH
0B0A2B 0F 
0B0A2C CD    1667** CALL    FPP
0B0A2D 32 
0B0A2E 20 
0B0A2F 0B 
0B0A30 38    1668** JR      C,ERROR1_EV
0B0A31 D0 
0B0A32 AF    1669** XOR     A
0B0A33 08    1670** EX      AF,AF'          ;TYPE
0B0A34 FD    1671** LD      A,(IY)
0B0A35 7E 
0B0A36 00 
0B0A37 C9    1672** RET
             1673** ;
             1674** ; Skip spaces
             1675** ; - IY: String pointer
             1676** ; Returns:
             1677** ;  - A: The non-space character found
             1678** ; - IY: Points to the character before that
             1679** ;
0B0A38 FD    1680** NXT:			LD      A,(IY)			; Fetch the character
0B0A39 7E 
0B0A3A 00 
0B0A3B FE    1681** CP      ' '			; If it is space, then return
0B0A3C 20 
0B0A3D C0    1682** RET     NZ
0B0A3E FD    1683** INC     IY			; Increment the pointer and
0B0A3F 23 
0B0A40 C3    1684** JP      NXT			; Loop
0B0A41 38 
0B0A42 0A 
0B0A43 0B 
             1685** ;
0B0A44 E5    1686** DISPT2:			PUSH    HL
0B0A45 21    1687** LD      HL,SOPTBL
0B0A46 7D 
0B0A47 01 
0B0A48 0B 
0B0A49 18    1688** JR      DISPT0
0B0A4A 07 
             1689** ;
0B0A4B E5    1690** DISPAT:			PUSH    HL
0B0A4C D6    1691** SUB     FUNTOK
0B0A4D 8D 
0B0A4E 21    1692** LD      HL,FUNTBL
0B0A4F D2 
0B0A50 00 
0B0A51 0B 
0B0A52 C5    1693** DISPT0:			PUSH    BC
             1694** 
0B0A53 01    1695** LD	BC, 3
0B0A54 03 
0B0A55 00 
0B0A56 00 
0B0A57 47    1696** LD	B, A
0B0A58 ED    1697** MLT	BC
0B0A59 4C 
0B0A5A 09    1698** ADD	HL, BC
0B0A5B ED    1699** LD	HL, (HL)
0B0A5C 27 
             1700** 
             1701** ;			ADD     A,A
             1702** ;			LD      C,A
             1703** ;			LD      B,0
             1704** ;			ADD     HL,BC
             1705** ;			LD      A,(HL)
             1706** ;			INC     HL
             1707** ;			LD      H,(HL)
             1708** ;			LD      L,A
             1709** 
0B0A5D C1    1710** POP     BC
0B0A5E E3    1711** EX      (SP),HL
0B0A5F C9    1712** RET                     ;OFF TO ROUTINE
             1713** 
              0004* include "basic/exec.asm"
             0001** ;
             0002** ; Title:	BBC Basic Interpreter - Z80 version
             0003** ;		Statement Execution & Assembler Module - "EXEC"
             0004** ; Author:	(C) Copyright  R.T.Russell  1984
             0005** ; Modified By:	Dean Belfield
             0006** ; Created:	12/05/2023
             0007** ; Last Updated:	26/06/2023
             0008** ;
             0009** ; Modinfo:
             0010** ; 27/01/1984:	Version 2.1
             0011** ; 02/03/1987:	Version 3.0
             0012** ; 11/06/1987:	Version 3.1
             0013** ; 12/05/2023:	Modified by Dean Belfield
             0014** ; 07/06/2023:	Modified to run in ADL mode
             0015** ; 26/06/2023:	Fixed DIM, USR, and address output of inline assembler
             0016** 
             0017** ; .ASSUME	ADL = 1
             0018** 
             0019** ; INCLUDE	"equs.inc"
             0020** 
             0021** ; SEGMENT CODE
             0022** 
             0023** ; XDEF	XEQ
             0024** ; XDEF	CHAIN0
             0025** ; XDEF	RUN
             0026** ; XDEF	SYNTAX
             0027** ; XDEF	ESCAPE
             0028** ; XDEF	FN_EX
             0029** ; XDEF	USR
             0030** ; XDEF	STORE5
             0031** ; XDEF	STORE4
             0032** ; XDEF	CHECK
             0033** ; XDEF	TERMQ
             0034** ; XDEF	FILL
             0035** ; XDEF	X4OR5
             0036** ; XDEF	MUL16
             0037** ; XDEF	CHANEL
             0038** ; XDEF	ASSEM
             0039** 
             0040** ; XREF	AUTO
             0041** ; XREF	DELETE
             0042** ; XREF	LOAD
             0043** ; XREF	LIST_
             0044** ; XREF	NEW
             0045** ; XREF	OLD
             0046** ; XREF	RENUM
             0047** ; XREF	SAVE
             0048** ; XREF	SOUND
             0049** ; XREF	CLG
             0050** ; XREF	DRAW
             0051** ; XREF	ENVEL
             0052** ; XREF	GCOL
             0053** ; XREF	MODE
             0054** ; XREF	MOVE
             0055** ; XREF	PLOT
             0056** ; XREF	COLOUR
             0057** ; XREF	EXPRS
             0058** ; XREF	HIMEM
             0059** ; XREF	LOAD0
             0060** ; XREF	RANDOM
             0061** ; XREF	CLEAR
             0062** ; XREF	ERRTRP
             0063** ; XREF	PAGE_
             0064** ; XREF	DATAPTR
             0065** ; XREF	ERRLIN
             0066** ; XREF	TRAP
             0067** ; XREF	NXT
             0068** ; XREF	SETLIN
             0069** ; XREF	CLOOP
             0070** ; XREF	OSSHUT
             0071** ; XREF	WARM
             0072** ; XREF	TRACEN
             0073** ; XREF	OUTCHR
             0074** ; XREF	PBCDL
             0075** ; XREF	OSCLI
             0076** ; XREF	LISTON
             0077** ; XREF	GETVAR
             0078** ; XREF	PUTVAR
             0079** ; XREF	DATPTR
             0080** ; XREF	ERROR_
             0081** ; XREF	EXPR
             0082** ; XREF	CREATE
             0083** ; XREF	EXPRI
             0084** ; XREF	BRAKET
             0085** ; XREF	FREE
             0086** ; XREF	OSBPUT
             0087** ; XREF	COUNT
             0088** ; XREF	STR
             0089** ; XREF	HEXSTR
             0090** ; XREF	CRLF
             0091** ; XREF	ITEMI
             0092** ; XREF	FINDL
             0093** ; XREF	TEST
             0094** ; XREF	EXPRN
             0095** ; XREF	DLOAD5
             0096** ; XREF	DLOAD5_SPL
             0097** ; XREF	LOADN
             0098** ; XREF	FPP
             0099** ; XREF	SWAP
             0100** ; XREF	GETDEF
             0101** ; XREF	ZERO
             0102** ; XREF	OSBGET
             0103** ; XREF	BUFFER
             0104** ; XREF	CONS
             0105** ; XREF	VAL0
             0106** ; XREF	OSLINE
             0107** ; XREF	CLRSCN
             0108** ; XREF	TELL
             0109** ; XREF	SAYLN
             0110** ; XREF	REPORT
             0111** ; XREF	PUTPTR
             0112** ; XREF	PUTIME
             0113** ; XREF	PUTIMS
             0114** ; XREF	LOMEM
             0115** ; XREF	WIDTH
             0116** ; XREF	OSWRCH
             0117** ; XREF	COMMA
             0118** ; XREF	OSCALL
             0119** ; XREF	SFIX
             0120** ; XREF	LOAD4
             0121** ; XREF	PUSHS
             0122** ; XREF	POPS
             0123** ; XREF	LOADS
             0124** ; XREF	PUTCSR
             0125** ; XREF	OUT_
             0126** ; XREF	R0
             0127** ;
             0128** ; List of token values used in this module
             0129** ;
             0130** TAND:			EQU     80H
             0131** TOR:			EQU     84H
             0132** TERROR_EX:			EQU     85H
             0133** LINE_EX_:			EQU     86H
             0134** OFF_:			EQU     87H
             0135** STEP:			EQU     88H
             0136** SPC:			EQU     89H
             0137** TAB:			EQU     8AH
             0138** ELSE_EX_:			EQU     8BH
             0139** THEN_EX_:			EQU     8CH
             0140** LINO_EX:			EQU     8DH
             0141** TO_EX:			EQU     B8H
             0142** TCMD_EX:			EQU     C6H
             0143** TCALL:			EQU     D6H
             0144** DATA_EX_:			EQU     DCH
             0145** DEF_:			EQU     DDH
             0146** TGOSUB:			EQU     E4H
             0147** TGOTO:			EQU     E5H
             0148** TON:			EQU     EEH
             0149** TPROC:			EQU     F2H
             0150** TSTOP:			EQU     FAH
             0151** 
             0152** ; The command table
             0153** ; Commands are tokens from C6H onwards; this lookup table is used to
             0154** ; run the corresponding function; Note that DATA and DEF both use the same
             0155** ; code as REM
             0156** ;
0B0A60 B1    0157** CMDTAB:			DW24  AUTO			; C6H
0B0A61 36 
0B0A62 0B 
0B0A63 14    0158** DW24  DELETE			; C7H
0B0A64 35 
0B0A65 0B 
0B0A66 F2    0159** DW24  LOAD			; C8H
0B0A67 36 
0B0A68 0B 
0B0A69 4F    0160** DW24  LIST_			; C9H
0B0A6A 35 
0B0A6B 0B 
0B0A6C CF    0161** DW24  NEW			; CAH
0B0A6D 36 
0B0A6E 0B 
0B0A6F D5    0162** DW24  OLD			; CBH
0B0A70 36 
0B0A71 0B 
0B0A72 DE    0163** DW24  RENUM			; CCH
0B0A73 35 
0B0A74 0B 
0B0A75 03    0164** DW24  SAVE			; CDH
0B0A76 37 
0B0A77 0B 
0B0A78 70    0165** DW24  PUT			; CEH
0B0A79 15 
0B0A7A 0B 
0B0A7B 90    0166** DW24  PTR_EX			; CFH
0B0A7C 13 
0B0A7D 0B 
0B0A7E AA    0167** DW24  PAGEV_EX			; D0H
0B0A7F 13 
0B0A80 0B 
0B0A81 BD    0168** DW24  TIMEV_EX			; D1H
0B0A82 13 
0B0A83 0B 
0B0A84 E6    0169** DW24  LOMEMV_EX			; D2H
0B0A85 13 
0B0A86 0B 
0B0A87 FF    0170** DW24  HIMEMV_EX			; D3H
0B0A88 13 
0B0A89 0B 
0B0A8A EE    0171** DW24  SOUND			; D4H
0B0A8B 45 
0B0A8C 0B 
0B0A8D 8A    0172** DW24  BPUT			; D5H
0B0A8E 14 
0B0A8F 0B 
0B0A90 A2    0173** DW24  CALL_			; D6H
0B0A91 14 
0B0A92 0B 
0B0A93 14    0174** DW24  CHAIN			; D7H
0B0A94 0B 
0B0A95 0B 
0B0A96 5F    0175** DW24  CLR			; D8H
0B0A97 13 
0B0A98 0B 
0B0A99 7E    0176** DW24  CLOSE			; D9H
0B0A9A 14 
0B0A9B 0B 
0B0A9C 8A    0177** DW24  CLG			; DAH
0B0A9D 43 
0B0A9E 0B 
0B0A9F 32    0178** DW24  CLS			; DBH
0B0AA0 13 
0B0AA1 0B 
0B0AA2 F3    0179** DW24  REM_EX             		; DCH: DATA
0B0AA3 0B 
0B0AA4 0B 
0B0AA5 F3    0180** DW24  REM_EX             		; DDH: DEF
0B0AA6 0B 
0B0AA7 0B 
0B0AA8 B9    0181** DW24  DIM_EX			; DEH
0B0AA9 0C 
0B0AAA 0B 
0B0AAB B4    0182** DW24  DRAW			; DFH
0B0AAC 45 
0B0AAD 0B 
0B0AAE 8E    0183** DW24  END_			; E0H
0B0AAF 0B 
0B0AB0 0B 
0B0AB1 4A    0184** DW24  ENDPRO			; E1H
0B0AB2 11 
0B0AB3 0B 
0B0AB4 7F    0185** DW24  ENVEL			; E2H
0B0AB5 43 
0B0AB6 0B 
0B0AB7 5F    0186** DW24  FOR_EX			; E3H
0B0AB8 0F 
0B0AB9 0B 
0B0ABA 0F    0187** DW24  GOSUB_EX			; E4H
0B0ABB 0F 
0B0ABC 0B 
0B0ABD F3    0188** DW24  GOTO_EX			; E5H
0B0ABE 0E 
0B0ABF 0B 
0B0AC0 48    0189** DW24  GCOL			; E6H
0B0AC1 45 
0B0AC2 0B 
0B0AC3 FE    0190** DW24  IF_			; E7H
0B0AC4 12 
0B0AC5 0B 
0B0AC6 EC    0191** DW24  INPUT			; E8H
0B0AC7 11 
0B0AC8 0B 
0B0AC9 14    0192** DW24  LET			; E9H
0B0ACA 0C 
0B0ACB 0B 
0B0ACC EF    0193** DW24  LOCAL_EX_			; EAH
0B0ACD 10 
0B0ACE 0B 
0B0ACF 9A    0194** DW24  MODE			; EBH
0B0AD0 43 
0B0AD1 0B 
0B0AD2 AC    0195** DW24  MOVE			; ECH
0B0AD3 45 
0B0AD4 0B 
0B0AD5 AD    0196** DW24  NEXT_EX			; EDH
0B0AD6 0F 
0B0AD7 0B 
0B0AD8 86    0197** DW24  ON_EX_			; EEH
0B0AD9 0E 
0B0ADA 0B 
0B0ADB 58    0198** DW24  VDU			; EFH
0B0ADC 14 
0B0ADD 0B 
0B0ADE 7A    0199** DW24  PLOT			; F0H
0B0ADF 45 
0B0AE0 0B 
0B0AE1 8F    0200** DW24  PRINT_			; F1H
0B0AE2 0D 
0B0AE3 0B 
0B0AE4 4C    0201** DW24  PROC_EX			; F2H
0B0AE5 10 
0B0AE6 0B 
0B0AE7 9E    0202** DW24  READ			; F3H
0B0AE8 12 
0B0AE9 0B 
0B0AEA F3    0203** DW24  REM_EX			; F4H
0B0AEB 0B 
0B0AEC 0B 
0B0AED 2F    0204** DW24  REPEAT_EX			; F5H
0B0AEE 0F 
0B0AEF 0B 
0B0AF0 57    0205** DW24  REPOR			; F6H
0B0AF1 13 
0B0AF2 0B 
0B0AF3 69    0206** DW24  RESTOR_EX			; F7H
0B0AF4 13 
0B0AF5 0B 
0B0AF6 1D    0207** DW24  RETURN			; F8H
0B0AF7 0F 
0B0AF8 0B 
0B0AF9 0E    0208** DW24  RUN			; F9H
0B0AFA 0B 
0B0AFB 0B 
0B0AFC 3F    0209** DW24  STOP			; FAH
0B0AFD 13 
0B0AFE 0B 
0B0AFF 96    0210** DW24  COLOUR			; FBH
0B0B00 44 
0B0B01 0B 
0B0B02 3A    0211** DW24  TRACE_EX			; FCH
0B0B03 14 
0B0B04 0B 
0B0B05 39    0212** DW24  UNTIL_EX			; FDH
0B0B06 0F 
0B0B07 0B 
0B0B08 2C    0213** DW24  WIDTHV			; FEH
0B0B09 14 
0B0B0A 0B 
0B0B0B D9    0214** DW24  CLI             		; FFH: OSCLI
0B0B0C 0B 
0B0B0D 0B 
             0215** 
             0216** ; RUN
             0217** ; RUN "filename"
             0218** ;
0B0B0E CD    0219** RUN:			CALL    TERMQ			; Standalone RUN command?
0B0B0F 42 
0B0B10 17 
0B0B11 0B 
0B0B12 28    0220** JR      Z,RUN0			; Yes, so just RUN the code
0B0B13 10 
             0221** 
             0222** ; CHAIN "filename"
             0223** ;
0B0B14 CD    0224** CHAIN:			CALL    EXPRS			; Get the filename
0B0B15 DD 
0B0B16 02 
0B0B17 0B 
0B0B18 3E    0225** LD      A,CR			; Terminate it with a CR
0B0B19 0D 
0B0B1A 12    0226** LD      (DE),A
0B0B1B ED    0227** CHAIN0:			LD      SP,(HIMEM)		; Reset SP
0B0B1C 7B 
0B0B1D 20 
0B0B1E 56 
0B0B1E 0B   
0B0B20 CD    0228** CALL    LOAD0			; And load the file in
0B0B21 E7 
0B0B22 37 
0B0B23 0B 
             0229** ;
0B0B24 ED    0230** RUN0:			LD      SP,(HIMEM)      	; Prepare for RUN
0B0B25 7B 
0B0B26 20 
0B0B27 56 
0B0B27 0B   
0B0B29 DD    0231** LD      IX,RANDOM		; Pointer to the RANDOM sysvar
0B0B2A 21 
0B0B2B 38 
0B0B2C 56 
0B0B2C 0B   
0B0B2E ED    0232** @@:			LD      A, R			; Use the R register to seed the random number generator
0B0B2F 5F 
0B0B30 28    0233** JR      Z, @B			; Loop unti we get a non-zero value in A
0B0B31 FC 
0B0B32 07    0234** RLCA				; Rotate it
0B0B33 07    0235** RLCA
0B0B34 DD    0236** LD      (IX+3),A		; And store
0B0B35 77 
0B0B36 03 
0B0B37 9F    0237** SBC     A,A			; Depending upon the C flag, this will either be 00h or FFh
0B0B38 DD    0238** LD      (IX+4),A		; And store
0B0B39 77 
0B0B3A 04 
0B0B3B CD    0239** CALL    CLEAR
0B0B3C 3E 
0B0B3D 38 
0B0B3E 0B 
0B0B3F 21    0240** LD      HL,0			; Clear the error trap sysvar
0B0B40 00 
0B0B41 00 
0B0B42 00 
0B0B43 22    0241** LD      (ERRTRP),HL
0B0B44 2C 
0B0B45 56 
0B0B46 0B 
0B0B47 2A    0242** LD      HL,(PAGE_)		; Load HL with the start of program memory (PAGE)
0B0B48 14 
0B0B49 56 
0B0B4A 0B 
0B0B4B 3E    0243** LD      A,DATA_EX_			; The DATA token value
0B0B4C DC 
0B0B4D CD    0244** CALL    SEARCH_EX          	; Search for the first DATA token in the tokenised listing
0B0B4E 16 
0B0B4F 18 
0B0B50 0B 
0B0B51 22    0245** LD      (DATPTR),HL     	; Set data pointer
0B0B52 31 
0B0B53 56 
0B0B54 0B 
0B0B55 FD    0246** LD      IY,(PAGE_)		; Load IY with the start of program memory
0B0B56 2A 
0B0B57 14 
0B0B58 56 
0B0B58 0B   
             0247** ;
0B0B5A CD    0248** XEQ0:			CALL    NEWLIN
0B0B5B A2 
0B0B5C 0B 
0B0B5D 0B 
0B0B5E FD    0249** XEQ:			LD      (ERRLIN),IY     	; Error pointer
0B0B5F 22 
0B0B60 35 
0B0B61 56 
0B0B61 0B   
0B0B63 CD    0250** CALL    TRAP           		; Check keyboard
0B0B64 35 
0B0B65 3F 
0B0B66 0B 
0B0B67 CD    0251** XEQ1:			CALL    NXT
0B0B68 38 
0B0B69 0A 
0B0B6A 0B 
0B0B6B FD    0252** INC     IY
0B0B6C 23 
0B0B6D FE    0253** CP      ':'             	; Seperator
0B0B6E 3A 
0B0B6F 28    0254** JR      Z,XEQ1
0B0B70 F6 
0B0B71 FE    0255** CP      CR
0B0B72 0D 
0B0B73 28    0256** JR      Z,XEQ0          	; New program line
0B0B74 E5 
0B0B75 D6    0257** SUB     TCMD_EX
0B0B76 C6 
0B0B77 DA    0258** JP      C,LET0          	; Implied "LET"
0B0B78 02 
0B0B79 0C 
0B0B7A 0B 
             0259** 
0B0B7B 01    0260** LD	BC, 3
0B0B7C 03 
0B0B7D 00 
0B0B7E 00 
0B0B7F 47    0261** LD	B, A
0B0B80 ED    0262** MLT	BC
0B0B81 4C 
0B0B82 21    0263** LD	HL,CMDTAB
0B0B83 60 
0B0B84 0A 
0B0B85 0B 
0B0B86 09    0264** ADD	HL, BC
0B0B87 ED    0265** LD	HL, (HL)		; Table entry
0B0B88 27 
             0266** 
             0267** ;			ADD     A,A
             0268** ;			LD      C,A
             0269** ;			LD      B,0
             0270** ;			LD      HL,CMDTAB
             0271** ;			ADD     HL,BC
             0272** ;			LD      A,(HL)          	; Table entry
             0273** ;			INC     HL
             0274** ;			LD      H,(HL)
             0275** ;			LD      L,A
             0276** 
0B0B89 CD    0277** CALL    NXT
0B0B8A 38 
0B0B8B 0A 
0B0B8C 0B 
0B0B8D E9    0278** JP      (HL)            	; Execute the statement
             0279** 
             0280** ;END
             0281** ;
0B0B8E CD    0282** END_:			CALL    SETLIN          ;FIND CURRENT LINE
0B0B8F 76 
0B0B90 39 
0B0B91 0B 
0B0B92 7C    0283** LD      A,H
0B0B93 B5    0284** OR      L               ;DIRECT?
0B0B94 CA    0285** JP      Z,CLOOP
0B0B95 48 
0B0B96 30 
0B0B97 0B 
0B0B98 1E    0286** LD      E,0
0B0B99 00 
0B0B9A CD    0287** CALL    OSSHUT          ;CLOSE ALL FILES
0B0B9B F3 
0B0B9C 42 
0B0B9D 0B 
0B0B9E C3    0288** JP      WARM            ;"Ready"
0B0B9F 47 
0B0BA0 30 
0B0BA1 0B 
             0289** ;
0B0BA2 FD    0290** NEWLIN:			LD      A,(IY+0)        ;A=LINE LENGTH
0B0BA3 7E 
0B0BA4 00 
0B0BA5 01    0291** LD      BC,3
0B0BA6 03 
0B0BA7 00 
0B0BA8 00 
0B0BA9 FD    0292** ADD     IY,BC
0B0BAA 09 
0B0BAB B7    0293** OR      A
0B0BAC 28    0294** JR      Z,END_           ;LENGTH=0, EXIT
0B0BAD E0 
0B0BAE 2A    0295** LD      HL,(TRACEN)
0B0BAF 26 
0B0BB0 56 
0B0BB1 0B 
0B0BB2 7C    0296** LD      A,H
0B0BB3 B5    0297** OR      L
0B0BB4 C8    0298** RET     Z
0B0BB5 11    0299** LD	DE, 0		;Clear DE
0B0BB6 00 
0B0BB7 00 
0B0BB8 00 
0B0BB9 FD    0300** LD      D,(IY-1)        ;DE = LINE NUMBER
0B0BBA 56 
0B0BBB FF 
0B0BBC FD    0301** LD      E,(IY-2)
0B0BBD 5E 
0B0BBE FE 
0B0BBF ED    0302** SBC     HL,DE
0B0BC0 52 
0B0BC1 D8    0303** RET     C
0B0BC2 EB    0304** EX      DE,HL
0B0BC3 3E    0305** LD      A,'['           ;TRACE
0B0BC4 5B 
0B0BC5 CD    0306** CALL    OUTCHR
0B0BC6 17 
0B0BC7 39 
0B0BC8 0B 
0B0BC9 CD    0307** CALL    PBCDL
0B0BCA BF 
0B0BCB 39 
0B0BCC 0B 
0B0BCD 3E    0308** LD      A,']'
0B0BCE 5D 
0B0BCF CD    0309** CALL    OUTCHR
0B0BD0 17 
0B0BD1 39 
0B0BD2 0B 
0B0BD3 3E    0310** LD      A,' '
0B0BD4 20 
0B0BD5 C3    0311** JP      OUTCHR
0B0BD6 17 
0B0BD7 39 
0B0BD8 0B 
             0312** 
             0313** ; Routines for each statement -------------------------------------------------
             0314** 
             0315** ; OSCLI
             0316** ;
0B0BD9 CD    0317** CLI:			CALL    EXPRS
0B0BDA DD 
0B0BDB 02 
0B0BDC 0B 
0B0BDD 3E    0318** LD      A,CR
0B0BDE 0D 
0B0BDF 12    0319** LD      (DE),A
0B0BE0 21    0320** LD      HL,ACCS
0B0BE1 00 
0B0BE2 53 
0B0BE3 0B 
0B0BE4 CD    0321** CALL    OSCLI
0B0BE5 58 
0B0BE6 3F 
0B0BE7 0B 
0B0BE8 C3    0322** JP      XEQ
0B0BE9 5E 
0B0BEA 0B 
0B0BEB 0B 
             0323** 
             0324** ; REM, *
             0325** ;
0B0BEC FD    0326** EXT_EX:			PUSH    IY
0B0BED E5 
0B0BEE E1    0327** POP     HL
0B0BEF CD    0328** CALL    OSCLI
0B0BF0 58 
0B0BF1 3F 
0B0BF2 0B 
0B0BF3 FD    0329** REM_EX:			PUSH    IY
0B0BF4 E5 
0B0BF5 E1    0330** POP     HL
0B0BF6 3E    0331** LD      A,CR
0B0BF7 0D 
0B0BF8 47    0332** LD      B,A
0B0BF9 ED    0333** CPIR                    ;FIND LINE END
0B0BFA B1 
0B0BFB E5    0334** PUSH    HL
0B0BFC FD    0335** POP     IY
0B0BFD E1 
0B0BFE C3    0336** JP      XEQ0
0B0BFF 5A 
0B0C00 0B 
0B0C01 0B 
             0337** 
             0338** ; [LET] var = expr
             0339** ;
0B0C02 FE    0340** LET0:			CP      ELSE_EX_-TCMD_EX
0B0C03 C5 
0B0C04 28    0341** JR      Z,REM_EX
0B0C05 ED 
             0342** ; CP      ('*'-TCMD) & 0FFH
             0343** ; JR      Z,EXT_EX
             0344** ; CP      ('='-TCMD) & 0FFH
             0345** ; JR      Z,FNEND
             0346** ; CP      ('['-TCMD) & 0FFH
             0347** ; ez80asm doesn't like () in expressions
0B0C06 FE    0348** CP      '*'-TCMD_EX & 0FFH
0B0C07 64 
0B0C08 28    0349** JR      Z,EXT_EX
0B0C09 E2 
0B0C0A FE    0350** CP      '='-TCMD_EX & 0FFH
0B0C0B 77 
0B0C0C 28    0351** JR      Z,FNEND
0B0C0D 5B 
0B0C0E FE    0352** CP      '['-TCMD_EX & 0FFH
0B0C0F 95 
0B0C10 28    0353** JR      Z,ASM
0B0C11 25 
0B0C12 FD    0354** DEC     IY
0B0C13 2B 
0B0C14 CD    0355** LET:			CALL    ASSIGN			; Assign the variable
0B0C15 86 
0B0C16 15 
0B0C17 0B 
0B0C18 CA    0356** JP      Z,XEQ			; Return if Z as it is a numeric variable that has been assigned in ASSIGN
0B0C19 5E 
0B0C1A 0B 
0B0C1B 0B 
0B0C1C 38    0357** JR      C,SYNTAX        	; Return if C as it is an illegal variable
0B0C1D 41 
             0358** ;
0B0C1E F5    0359** PUSH    AF              	; At this point we're dealing with a string type (A=81h)
0B0C1F CD    0360** CALL    EQUALS			; Check if the variable is followed by an '=' symbol; this will throw a 'Mistake' error if not
0B0C20 58 
0B0C21 17 
0B0C22 0B 
0B0C23 E5    0361** PUSH    HL			; HL: Address of the variable
0B0C24 CD    0362** CALL    EXPRS
0B0C25 DD 
0B0C26 02 
0B0C27 0B 
0B0C28 DD    0363** POP     IX			; IX: Address of the variable
0B0C29 E1 
0B0C2A F1    0364** POP     AF			; AF: The variable type
0B0C2B CD    0365** CALL    STACCS			; Copy the string from ACCS to the variable area
0B0C2C C8 
0B0C2D 15 
0B0C2E 0B 
0B0C2F C3    0366** XEQR:			JP      XEQ
0B0C30 5E 
0B0C31 0B 
0B0C32 0B 
             0367** ;
0B0C33 CD    0368** ASM0:			CALL    NEWLIN
0B0C34 A2 
0B0C35 0B 
0B0C36 0B 
0B0C37 FD    0369** ASM:			LD      (ERRLIN),IY
0B0C38 22 
0B0C39 35 
0B0C3A 56 
0B0C3A 0B   
0B0C3C CD    0370** CALL    TRAP
0B0C3D 35 
0B0C3E 3F 
0B0C3F 0B 
0B0C40 CD    0371** CALL    ASSEM
0B0C41 63 
0B0C42 18 
0B0C43 0B 
0B0C44 38    0372** JR      C,SYNTAX
0B0C45 19 
0B0C46 FE    0373** CP      CR
0B0C47 0D 
0B0C48 28    0374** JR      Z,ASM0
0B0C49 E9 
0B0C4A 21    0375** LD      HL,LISTON
0B0C4B 40 
0B0C4C 56 
0B0C4D 0B 
0B0C4E 7E    0376** LD      A,(HL)
0B0C4F E6    0377** AND     0FH
0B0C50 0F 
0B0C51 F6    0378** OR      B0H
0B0C52 B0 
0B0C53 77    0379** LD      (HL),A
0B0C54 18    0380** JR      XEQR
0B0C55 D9 
             0381** ;
0B0C56 CD    0382** VAR_:			CALL    GETVAR
0B0C57 02 
0B0C58 3A 
0B0C59 0B 
0B0C5A C8    0383** RET     Z
0B0C5B D2    0384** JP      NC,PUTVAR
0B0C5C F1 
0B0C5D 39 
0B0C5E 0B 
0B0C5F 3E    0385** SYNTAX:			LD      A,16            ;"Syntax error"
0B0C60 10 
0B0C61 18    0386** JR	ERROR0_EX
0B0C62 02 
0B0C63 3E    0387** ESCAPE:			LD      A,17            ;"Escape"
0B0C64 11 
0B0C65 C3    0388** ERROR0_EX:			JP      ERROR_
0B0C66 28 
0B0C67 37 
0B0C68 0B 
             0389** 
             0390** ; =
             0391** ;
0B0C69 CD    0392** FNEND:			CALL    EXPR            ;FUNCTION RESULT
0B0C6A 8F 
0B0C6B 01 
0B0C6C 0B 
0B0C6D 43    0393** LD      B,E
0B0C6E EB    0394** EX      DE,HL
0B0C6F D9    0395** EXX                     ;SAVE RESULT
0B0C70 EB    0396** EX      DE,HL           ; IN DEB'C'D'E'
0B0C71 C1    0397** FNEND5:			POP     BC
0B0C72 21    0398** LD      HL,LOCCHK
0B0C73 20 
0B0C74 17 
0B0C75 0B 
0B0C76 B7    0399** OR      A
0B0C77 ED    0400** SBC     HL,BC
0B0C78 42 
0B0C79 28    0401** JR      Z,FNEND0        ;LOCAL VARIABLE
0B0C7A 1C 
0B0C7B 21    0402** LD      HL,FNCHK
0B0C7C 4C 
0B0C7D 10 
0B0C7E 0B 
0B0C7F B7    0403** OR      A
0B0C80 ED    0404** SBC     HL,BC
0B0C81 42 
0B0C82 3E    0405** LD      A,7
0B0C83 07 
0B0C84 20    0406** JR      NZ,ERROR0_EX       ;"No FN"
0B0C85 DF 
0B0C86 FD    0407** POP     IY
0B0C87 E1 
0B0C88 FD    0408** LD      (ERRLIN),IY     ;IN CASE OF ERROR
0B0C89 22 
0B0C8A 35 
0B0C8B 56 
0B0C8B 0B   
0B0C8D EB    0409** EX      DE,HL
0B0C8E D9    0410** EXX
0B0C8F EB    0411** EX      DE,HL
0B0C90 11    0412** LD      DE,ACCS
0B0C91 00 
0B0C92 53 
0B0C93 0B 
0B0C94 58    0413** LD      E,B
0B0C95 08    0414** EX      AF,AF'
0B0C96 C9    0415** RET
             0416** ;
0B0C97 DD    0417** FNEND0:			POP     IX
0B0C98 E1 
0B0C99 C1    0418** POP     BC
0B0C9A 78    0419** LD      A,B
0B0C9B B7    0420** OR      A
0B0C9C FA    0421** JP      M,FNEND1        ;STRING
0B0C9D AA 
0B0C9E 0C 
0B0C9F 0B 
0B0CA0 E1    0422** POP     HL
0B0CA1 D9    0423** EXX
0B0CA2 E1    0424** POP     HL
0B0CA3 D9    0425** EXX
0B0CA4 CD    0426** CALL    STORE
0B0CA5 9E 
0B0CA6 15 
0B0CA7 0B 
0B0CA8 18    0427** JR      FNEND5
0B0CA9 C7 
0B0CAA 21    0428** FNEND1:			LD      HL,0
0B0CAB 00 
0B0CAC 00 
0B0CAD 00 
0B0CAE 39    0429** ADD     HL,SP
0B0CAF D5    0430** PUSH    DE
0B0CB0 59    0431** LD      E,C
0B0CB1 CD    0432** CALL    STORES
0B0CB2 CC 
0B0CB3 15 
0B0CB4 0B 
0B0CB5 D1    0433** POP     DE
0B0CB6 F9    0434** LD      SP,HL
0B0CB7 18    0435** JR      FNEND5
0B0CB8 B8 
             0436** 
             0437** ; DIM var(dim1[,dim2[,...]])[,var(...]
             0438** ; DIM var expr[,var expr...]
             0439** ;
0B0CB9 CD    0440** DIM_EX:			CALL    GETVAR          	; Get the variable
0B0CBA 02 
0B0CBB 3A 
0B0CBC 0B 
0B0CBD DA    0441** JP      C,BADDIM		; Throw a "Bad Dim" error
0B0CBE 49 
0B0CBF 0D 
0B0CC0 0B 
0B0CC1 CA    0442** JP      Z,DIM4			; If Z then the command is DIM var% expr, so don't need to create an entity
0B0CC2 53 
0B0CC3 0D 
0B0CC4 0B 
0B0CC5 CD    0443** CALL    CREATE			; Create a new entity
0B0CC6 76 
0B0CC7 3B 
0B0CC8 0B 
0B0CC9 E5    0444** PUSH    HL			; HL: Address of the entity
0B0CCA DD    0445** POP     IX			; IX: Address of the entity
0B0CCB E1 
0B0CCC FD    0446** LD      A,(IY)			; Fetch the next character from the tokenised string
0B0CCD 7E 
0B0CCE 00 
0B0CCF FE    0447** CP      '('			; Check for opening brackets
0B0CD0 28 
0B0CD1 7A    0448** LD      A,D			;  A: The dimension variable type (04h = Integer, 05h = Float, 81h = String)
0B0CD2 20    0449** JR      NZ,DIM4			; It is not a bracket; the command is DIM var expr
0B0CD3 7F 
             0450** ;
             0451** ; At this point we're reserving a variable array
             0452** ;
0B0CD4 E5    0453** PUSH    HL			; HL: Address of the entity
0B0CD5 F5    0454** PUSH    AF           	   	;  A: Entity type (04h = Integer, 05h = Float, 81h = String)
0B0CD6 11    0455** LD      DE,1			; DE: Total size of array accumulator (important for multi-dimensioned arrays)
0B0CD7 01 
0B0CD8 00 
0B0CD9 00 
0B0CDA 42    0456** LD      B,D			;  B: The number of dimensions in the array
             0457** ;
0B0CDB FD    0458** DIM1:			INC     IY			; Skip to the next token
0B0CDC 23 
0B0CDD C5    0459** PUSH    BC			; Stack the dimension counter
0B0CDE D5    0460** PUSH    DE			; Stack the total size of array accumulator
0B0CDF DD    0461** PUSH    IX			; Stack the entity address
0B0CE0 E5 
0B0CE1 CD    0462** CALL    EXPRI           	; Fetch the size of this dimension
0B0CE2 D2 
0B0CE3 02 
0B0CE4 0B 
0B0CE5 CB    0463** BIT     7,H			; If it is negative then
0B0CE6 7C 
0B0CE7 20    0464** JR      NZ,BADDIM		; Throw a "Bad Dim" error
0B0CE8 60 
0B0CE9 D9    0465** EXX
0B0CEA 23    0466** INC     HL			; HL: Size of this dimension; increment (BBC BASIC DIMs are always one bigger)
0B0CEB DD    0467** POP     IX			; IX: The entity address
0B0CEC E1 
0B0CED DD    0468** INC     IX
0B0CEE 23 
0B0CEF DD    0469** LD      (IX),L          	; Save the size of this dimension in the entity
0B0CF0 75 
0B0CF1 00 
0B0CF2 DD    0470** INC     IX
0B0CF3 23 
0B0CF4 DD    0471** LD      (IX),H
0B0CF5 74 
0B0CF6 00 
0B0CF7 C1    0472** POP     BC
0B0CF8 CD    0473** CALL    MUL16           	; HL = HL * BC (Number of Dimensions * Total size of array accumulator)
0B0CF9 3A 
0B0CFA 18 
0B0CFB 0B 
0B0CFC 38    0474** JR      C,NOROOM        	; Throw a "No Room" error if overflow
0B0CFD 4F 
0B0CFE EB    0475** EX      DE,HL           	; DE: The new total size of array accumulator
0B0CFF C1    0476** POP     BC
0B0D00 04    0477** INC     B               	;  B: The dimension counter; increment
0B0D01 FD    0478** LD      A,(IY)			; Fetch the nex token
0B0D02 7E 
0B0D03 00 
0B0D04 FE    0479** CP      ','             	; Check for another dimension in the array
0B0D05 2C 
0B0D06 28    0480** JR      Z,DIM1			; And loop
0B0D07 D3 
             0481** ;
0B0D08 CD    0482** CALL    BRAKET          	; Check for closing bracket
0B0D09 F7 
0B0D0A 09 
0B0D0B 0B 
0B0D0C F1    0483** POP     AF              	; Restore the type
0B0D0D DD    0484** INC     IX
0B0D0E 23 
0B0D0F DD    0485** EX      (SP),IX
0B0D10 E3 
0B0D11 DD    0486** LD      (IX),B          	; Number of dimensions
0B0D12 70 
0B0D13 00 
0B0D14 CD    0487** CALL    X4OR5           	; Dimension Accumulator Value * 4 or * 5 depending on type
0B0D15 2D 
0B0D16 18 
0B0D17 0B 
0B0D18 E1    0488** POP     HL			; Restore the entity address
0B0D19 38    0489** JR      C,NOROOM		; Throw a "No Room" error if there is an overflow
0B0D1A 32 
             0490** ;
             0491** ; We now allocate the memory for the array
             0492** ;
0B0D1B 19    0493** DIM3:			ADD     HL,DE
0B0D1C 38    0494** JR      C,NOROOM
0B0D1D 2F 
0B0D1E E5    0495** PUSH    HL
0B0D1F 24    0496** INC     H
0B0D20 28    0497** JR      Z,NOROOM
0B0D21 2B 
0B0D22 ED    0498** SBC     HL,SP
0B0D23 72 
0B0D24 30    0499** JR      NC,NOROOM       	; Throw an "Out of Space" error
0B0D25 27 
0B0D26 E1    0500** POP     HL
0B0D27 22    0501** LD      (FREE),HL
0B0D28 1D 
0B0D29 56 
0B0D2A 0B 
0B0D2B 7A    0502** DIM2:			LD      A,D
0B0D2C B3    0503** OR      E
0B0D2D 28    0504** JR      Z,DIM5
0B0D2E 06 
0B0D2F 2B    0505** DEC     HL
0B0D30 36    0506** LD      (HL),0         		; Initialise the array
0B0D31 00 
0B0D32 1B    0507** DEC     DE
0B0D33 18    0508** JR      DIM2
0B0D34 F6 
0B0D35 CD    0509** DIM5:			CALL    NXT
0B0D36 38 
0B0D37 0A 
0B0D38 0B 
0B0D39 FE    0510** CP      ','            		; Another variable?
0B0D3A 2C 
0B0D3B C2    0511** JP      NZ,XEQ
0B0D3C 5E 
0B0D3D 0B 
0B0D3E 0B 
0B0D3F FD    0512** INC     IY
0B0D40 23 
0B0D41 CD    0513** CALL    NXT
0B0D42 38 
0B0D43 0A 
0B0D44 0B 
0B0D45 C3    0514** JP      DIM_EX
0B0D46 B9 
0B0D47 0C 
0B0D48 0B 
             0515** ;
             0516** ; DIM errors
             0517** ;
0B0D49 3E    0518** BADDIM:			LD      A,10            	; Throw a "Bad DIM" error
0B0D4A 0A 
0B0D4B 18    0519** JR	ERROR1_EX
0B0D4C 02 
0B0D4D 3E    0520** NOROOM:			LD      A,11            	; Throw a "DIM space" error
0B0D4E 0B 
0B0D4F C3    0521** ERROR1_EX:			JP      ERROR_
0B0D50 28 
0B0D51 37 
0B0D52 0B 
             0522** ;
             0523** ; At this point we're reserving a block of memory, i.e.
             0524** ; DIM var expr[,var expr...]
             0525** ;
0B0D53 B7    0526** DIM4:			OR      A			;  A: The dimension variable type
0B0D54 28    0527** JR      Z,BADDIM		; Throw "Bad Dim" if variable is an 8-bit indirection
0B0D55 F3 
0B0D56 FA    0528** JP      M,BADDIM        	; or a string
0B0D57 49 
0B0D58 0D 
0B0D59 0B 
0B0D5A 47    0529** LD      B,A			; Temporarily store the dimension variable type in B
0B0D5B FD    0530** LD      A,(IY-1)		; Get the last character but one
0B0D5C 7E 
0B0D5D FF 
0B0D5E FE    0531** CP      ')'			; Check if it is a trailing bracket
0B0D5F 29 
0B0D60 28    0532** JR      Z,BADDIM		; And throw a "Bad Dim" error if there is a trailing bracket
0B0D61 E7 
             0533** ;
0B0D62 21    0534** LD	HL,0			; Clear HL
0B0D63 00 
0B0D64 00 
0B0D65 00 
0B0D66 3A    0535** LD	A,(FREE+0)		; HL: Lower 16 bits of FREE
0B0D67 1D 
0B0D68 56 
0B0D69 0B 
0B0D6A 6F    0536** LD	L,A
0B0D6B 3A    0537** LD	A,(FREE+1)
0B0D6C 1E 
0B0D6D 56 
0B0D6E 0B 
0B0D6F 67    0538** LD	H,A
0B0D70 78    0539** LD	A,B			; Restore the dimension variable type
0B0D71 D9    0540** EXX
0B0D72 21    0541** LD	HL,0			; Clear HL
0B0D73 00 
0B0D74 00 
0B0D75 00 
0B0D76 47    0542** LD	B,A			; Temporarily store the dimension variable type in B
0B0D77 3A    0543** LD	A,(FREE+2)		; HL: Upper 8 bits of FREE (bits 16-23)
0B0D78 1F 
0B0D79 56 
0B0D7A 0B 
0B0D7B 6F    0544** LD	L,A
0B0D7C 78    0545** LD	A,B			; Restore the dimension variable type
0B0D7D 4C    0546** LD	C,H
0B0D7E CD    0547** CALL    STORE           	; Store the address
0B0D7F 9E 
0B0D80 15 
0B0D81 0B 
0B0D82 CD    0548** CALL    EXPRI			; Get the number of bytes to store
0B0D83 D2 
0B0D84 02 
0B0D85 0B 
0B0D86 D9    0549** EXX
0B0D87 23    0550** INC     HL			; Add one to it
0B0D88 EB    0551** EX      DE,HL
0B0D89 2A    0552** LD      HL,(FREE)
0B0D8A 1D 
0B0D8B 56 
0B0D8C 0B 
0B0D8D 18    0553** JR      DIM3			; Continue with the DIM
0B0D8E 8C 
             0554** 
             0555** ; PRINT list...
             0556** ; PRINT #channel,list...
             0557** ;
0B0D8F FE    0558** PRINT_:			CP      '#'
0B0D90 23 
0B0D91 20    0559** JR      NZ,PRINT0
0B0D92 7C 
0B0D93 CD    0560** CALL    CHNL            ;CHANNEL NO. = E
0B0D94 5A 
0B0D95 18 
0B0D96 0B 
0B0D97 CD    0561** PRNTN1:			CALL    NXT
0B0D98 38 
0B0D99 0A 
0B0D9A 0B 
0B0D9B FE    0562** CP      ','
0B0D9C 2C 
0B0D9D C2    0563** JP      NZ,XEQ
0B0D9E 5E 
0B0D9F 0B 
0B0DA0 0B 
0B0DA1 FD    0564** INC     IY
0B0DA2 23 
0B0DA3 D5    0565** PUSH    DE
0B0DA4 CD    0566** CALL    EXPR            ;ITEM TO PRINT
0B0DA5 8F 
0B0DA6 01 
0B0DA7 0B 
0B0DA8 08    0567** EX      AF,AF'
0B0DA9 FA    0568** JP      M,PRNTN2        ;STRING
0B0DAA CF 
0B0DAB 0D 
0B0DAC 0B 
0B0DAD D1    0569** POP     DE
0B0DAE C5    0570** PUSH    BC
0B0DAF D9    0571** EXX
0B0DB0 7D    0572** LD      A,L
0B0DB1 D9    0573** EXX
0B0DB2 CD    0574** CALL    OSBPUT
0B0DB3 03 
0B0DB4 43 
0B0DB5 0B 
0B0DB6 D9    0575** EXX
0B0DB7 7C    0576** LD      A,H
0B0DB8 D9    0577** EXX
0B0DB9 CD    0578** CALL    OSBPUT
0B0DBA 03 
0B0DBB 43 
0B0DBC 0B 
0B0DBD 7D    0579** LD      A,L
0B0DBE CD    0580** CALL    OSBPUT
0B0DBF 03 
0B0DC0 43 
0B0DC1 0B 
0B0DC2 7C    0581** LD      A,H
0B0DC3 CD    0582** CALL    OSBPUT
0B0DC4 03 
0B0DC5 43 
0B0DC6 0B 
0B0DC7 C1    0583** POP     BC
0B0DC8 79    0584** LD      A,C
0B0DC9 CD    0585** CALL    OSBPUT
0B0DCA 03 
0B0DCB 43 
0B0DCC 0B 
0B0DCD 18    0586** JR      PRNTN1
0B0DCE C8 
0B0DCF 4B    0587** PRNTN2:			LD      C,E
0B0DD0 D1    0588** POP     DE
0B0DD1 21    0589** LD      HL,ACCS
0B0DD2 00 
0B0DD3 53 
0B0DD4 0B 
0B0DD5 0C    0590** INC     C
0B0DD6 0D    0591** PRNTN3:			DEC     C
0B0DD7 28    0592** JR      Z,PRNTN4
0B0DD8 0A 
0B0DD9 7E    0593** LD      A,(HL)
0B0DDA 23    0594** INC     HL
0B0DDB C5    0595** PUSH    BC
0B0DDC CD    0596** CALL    OSBPUT
0B0DDD 03 
0B0DDE 43 
0B0DDF 0B 
0B0DE0 C1    0597** POP     BC
0B0DE1 18    0598** JR      PRNTN3
0B0DE2 F3 
0B0DE3 3E    0599** PRNTN4:			LD      A,CR
0B0DE4 0D 
0B0DE5 CD    0600** CALL    OSBPUT
0B0DE6 03 
0B0DE7 43 
0B0DE8 0B 
0B0DE9 18    0601** JR      PRNTN1
0B0DEA AC 
             0602** ;
0B0DEB 06    0603** PRINT6:			LD      B,2
0B0DEC 02 
0B0DED 18    0604** JR      PRINTC
0B0DEE 27 
0B0DEF 01    0605** PRINT8:			LD      BC,100H
0B0DF0 00 
0B0DF1 01 
0B0DF2 00 
0B0DF3 18    0606** JR      PRINTC
0B0DF4 21 
0B0DF5 21    0607** PRINT9:			LD      HL,STAVAR
0B0DF6 00 
0B0DF7 55 
0B0DF8 0B 
0B0DF9 AF    0608** XOR     A
0B0DFA BE    0609** CP      (HL)
0B0DFB 28    0610** JR      Z,PRINT0
0B0DFC 12 
0B0DFD 3A    0611** LD      A,(COUNT)
0B0DFE 3D 
0B0DFF 56 
0B0E00 0B 
0B0E01 B7    0612** OR      A
0B0E02 28    0613** JR      Z,PRINT0
0B0E03 0B 
0B0E04 96    0614** PRINTA:			SUB     (HL)
0B0E05 28    0615** JR      Z,PRINT0
0B0E06 08 
0B0E07 30    0616** JR      NC,PRINTA
0B0E08 FB 
0B0E09 ED    0617** NEG
0B0E0A 44 
0B0E0B CD    0618** CALL    FILL
0B0E0C B7 
0B0E0D 17 
0B0E0E 0B 
0B0E0F 3A    0619** PRINT0:			LD      A,(STAVAR)
0B0E10 00 
0B0E11 55 
0B0E12 0B 
0B0E13 4F    0620** LD      C,A             ;PRINTS
0B0E14 06    0621** LD      B,0             ;PRINTF
0B0E15 00 
0B0E16 CD    0622** PRINTC:			CALL    TERMQ
0B0E17 42 
0B0E18 17 
0B0E19 0B 
0B0E1A 28    0623** JR      Z,PRINT4
0B0E1B 3F 
0B0E1C CB    0624** RES     0,B
0B0E1D 80 
0B0E1E FD    0625** INC     IY
0B0E1F 23 
0B0E20 FE    0626** CP      '~'
0B0E21 7E 
0B0E22 28    0627** JR      Z,PRINT6
0B0E23 C7 
0B0E24 FE    0628** CP      ';'
0B0E25 3B 
0B0E26 28    0629** JR      Z,PRINT8
0B0E27 C7 
0B0E28 FE    0630** CP      ','
0B0E29 2C 
0B0E2A 28    0631** JR      Z,PRINT9
0B0E2B C9 
0B0E2C CD    0632** CALL    FORMAT          ;SPC, TAB, '
0B0E2D 67 
0B0E2E 17 
0B0E2F 0B 
0B0E30 28    0633** JR      Z,PRINTC
0B0E31 E4 
0B0E32 FD    0634** DEC     IY
0B0E33 2B 
0B0E34 C5    0635** PUSH    BC
0B0E35 CD    0636** CALL    EXPR            ;VARIABLE TYPE
0B0E36 8F 
0B0E37 01 
0B0E38 0B 
0B0E39 08    0637** EX      AF,AF'
0B0E3A FA    0638** JP      M,PRINT3        ;STRING
0B0E3B 54 
0B0E3C 0E 
0B0E3D 0B 
0B0E3E D1    0639** POP     DE
0B0E3F D5    0640** PUSH    DE
0B0E40 CB    0641** BIT     1,D
0B0E41 4A 
0B0E42 F5    0642** PUSH    AF
0B0E43 CC    0643** CALL    Z,STR           ;DECIMAL
0B0E44 2E 
0B0E45 09 
0B0E46 0B 
0B0E47 F1    0644** POP     AF
0B0E48 C4    0645** CALL    NZ,HEXSTR       ;HEX
0B0E49 E2 
0B0E4A 08 
0B0E4B 0B 
0B0E4C C1    0646** POP     BC
0B0E4D C5    0647** PUSH    BC
0B0E4E 79    0648** LD      A,C
0B0E4F 93    0649** SUB     E
0B0E50 D4    0650** CALL    NC,FILL         ;RIGHT JUSTIFY
0B0E51 B7 
0B0E52 17 
0B0E53 0B 
0B0E54 C1    0651** PRINT3:			POP     BC
0B0E55 CD    0652** CALL    PTEXT           ;PRINT
0B0E56 C6 
0B0E57 17 
0B0E58 0B 
0B0E59 18    0653** JR      PRINTC
0B0E5A BB 
0B0E5B CB    0654** PRINT4:			BIT     0,B
0B0E5C 40 
0B0E5D CC    0655** CALL    Z,CRLF
0B0E5E 0F 
0B0E5F 39 
0B0E60 0B 
0B0E61 C3    0656** JP      XEQ
0B0E62 5E 
0B0E63 0B 
0B0E64 0B 
             0657** 
             0658** ; ON ERROR statement [:statement...]
             0659** ; ON ERROR OFF
             0660** ;
0B0E65 FD    0661** ONERR:			INC     IY              ;SKIP "ERROR"
0B0E66 23 
0B0E67 21    0662** LD      HL,0
0B0E68 00 
0B0E69 00 
0B0E6A 00 
0B0E6B 22    0663** LD      (ERRTRP),HL
0B0E6C 2C 
0B0E6D 56 
0B0E6E 0B 
0B0E6F CD    0664** CALL    NXT
0B0E70 38 
0B0E71 0A 
0B0E72 0B 
0B0E73 FE    0665** CP      OFF_
0B0E74 87 
0B0E75 FD    0666** INC     IY
0B0E76 23 
0B0E77 CA    0667** JP      Z,XEQ
0B0E78 5E 
0B0E79 0B 
0B0E7A 0B 
0B0E7B FD    0668** DEC     IY
0B0E7C 2B 
0B0E7D FD    0669** LD      (ERRTRP),IY
0B0E7E 22 
0B0E7F 2C 
0B0E80 56 
0B0E80 0B   
0B0E82 C3    0670** JP      REM_EX
0B0E83 F3 
0B0E84 0B 
0B0E85 0B 
             0671** 
             0672** ; ON expr GOTO line[,line...] [ELSE statement]
             0673** ; ON expr GOTO line[,line...] [ELSE line]
             0674** ; ON expr GOSUB line[,line...] [ELSE statement]
             0675** ; ON expr GOSUB line[,line...] [ELSE line]
             0676** ; ON expr PROCone [,PROCtwo..] [ELSE PROCotherwise]
             0677** ;
0B0E86 FE    0678** ON_EX_:			CP      TERROR_EX
0B0E87 85 
0B0E88 28    0679** JR      Z,ONERR         ;"ON ERROR"
0B0E89 DB 
0B0E8A CD    0680** CALL    EXPRI
0B0E8B D2 
0B0E8C 02 
0B0E8D 0B 
0B0E8E FD    0681** LD      A,(IY)
0B0E8F 7E 
0B0E90 00 
0B0E91 FD    0682** INC     IY
0B0E92 23 
0B0E93 1E    0683** LD      E,','           ;SEPARATOR
0B0E94 2C 
0B0E95 FE    0684** CP      TGOTO
0B0E96 E5 
0B0E97 28    0685** JR      Z,ON1
0B0E98 0B 
0B0E99 FE    0686** CP      TGOSUB
0B0E9A E4 
0B0E9B 28    0687** JR      Z,ON1
0B0E9C 07 
0B0E9D 1E    0688** LD      E,TPROC
0B0E9E F2 
0B0E9F BB    0689** CP      E
0B0EA0 3E    0690** LD      A,39
0B0EA1 27 
0B0EA2 20    0691** JR      NZ,ERROR2_EX       ;"ON syntax"
0B0EA3 45 
0B0EA4 57    0692** ON1:			LD      D,A
0B0EA5 D9    0693** EXX
0B0EA6 E5    0694** PUSH    HL
0B0EA7 D9    0695** EXX
0B0EA8 C1    0696** POP     BC              ;ON INDEX
0B0EA9 78    0697** LD      A,B
0B0EAA B4    0698** OR      H
0B0EAB B5    0699** OR      L
0B0EAC 20    0700** JR      NZ,ON4          ;OUT OF RANGE
0B0EAD 2A 
0B0EAE B1    0701** OR      C
0B0EAF 28    0702** JR      Z,ON4
0B0EB0 27 
0B0EB1 0D    0703** DEC     C
0B0EB2 28    0704** JR      Z,ON3           ;INDEX=1
0B0EB3 0E 
0B0EB4 CD    0705** ON2:			CALL    TERMQ
0B0EB5 42 
0B0EB6 17 
0B0EB7 0B 
0B0EB8 28    0706** JR      Z,ON4           ;OUT OF RANGE
0B0EB9 1E 
0B0EBA FD    0707** INC     IY              ;SKIP DELIMITER
0B0EBB 23 
0B0EBC BB    0708** CP      E
0B0EBD 20    0709** JR      NZ,ON2
0B0EBE F5 
0B0EBF 0D    0710** DEC     C
0B0EC0 20    0711** JR      NZ,ON2
0B0EC1 F2 
0B0EC2 7B    0712** ON3:			LD      A,E
0B0EC3 FE    0713** CP      TPROC
0B0EC4 F2 
0B0EC5 28    0714** JR      Z,ONPROC
0B0EC6 26 
0B0EC7 D5    0715** PUSH    DE
0B0EC8 CD    0716** CALL    ITEMI           ;LINE NUMBER
0B0EC9 ED 
0B0ECA 02 
0B0ECB 0B 
0B0ECC D1    0717** POP     DE
0B0ECD 7A    0718** LD      A,D
0B0ECE FE    0719** CP      TGOTO
0B0ECF E5 
0B0ED0 28    0720** JR      Z,GOTO2
0B0ED1 2D 
0B0ED2 CD    0721** CALL    SPAN            ;SKIP REST OF LIST
0B0ED3 4F 
0B0ED4 17 
0B0ED5 0B 
0B0ED6 18    0722** JR      GOSUB1
0B0ED7 3B 
             0723** ;
0B0ED8 FD    0724** ON4:			LD      A,(IY)
0B0ED9 7E 
0B0EDA 00 
0B0EDB FD    0725** INC     IY
0B0EDC 23 
0B0EDD FE    0726** CP      ELSE_EX_
0B0EDE 8B 
0B0EDF CA    0727** JP      Z,IF1           ;ELSE CLAUSE
0B0EE0 13 
0B0EE1 13 
0B0EE2 0B 
0B0EE3 FE    0728** CP      CR
0B0EE4 0D 
0B0EE5 20    0729** JR      NZ,ON4
0B0EE6 F1 
0B0EE7 3E    0730** LD      A,40
0B0EE8 28 
0B0EE9 C3    0731** ERROR2_EX:			JP      ERROR_           ;"ON range"
0B0EEA 28 
0B0EEB 37 
0B0EEC 0B 
             0732** ;
0B0EED 3E    0733** ONPROC:			LD      A,TON
0B0EEE EE 
0B0EEF C3    0734** JP      PROC_EX
0B0EF0 4C 
0B0EF1 10 
0B0EF2 0B 
             0735** 
             0736** ; GOTO line
             0737** ;
0B0EF3 CD    0738** GOTO_EX:			CALL    ITEMI           	; Fetch the line number
0B0EF4 ED 
0B0EF5 02 
0B0EF6 0B 
0B0EF7 CD    0739** GOTO1:			CALL    TERMQ			; Check for terminator
0B0EF8 42 
0B0EF9 17 
0B0EFA 0B 
0B0EFB C2    0740** JP      NZ,SYNTAX		; Throw a "Syntax Error" if not found
0B0EFC 5F 
0B0EFD 0C 
0B0EFE 0B 
0B0EFF D9    0741** GOTO2:			EXX
0B0F00 CD    0742** CALL    FINDL			; HL: Line number - Find the line
0B0F01 57 
0B0F02 39 
0B0F03 0B 
0B0F04 E5    0743** PUSH    HL			; HL: Address of the line
0B0F05 FD    0744** POP     IY			; IY = HL
0B0F06 E1 
0B0F07 CA    0745** JP      Z,XEQ0			; If the line is found, then continue execution at that point
0B0F08 5A 
0B0F09 0B 
0B0F0A 0B 
0B0F0B 3E    0746** LD      A,41			; Otherwise throw a "No such line" error
0B0F0C 29 
0B0F0D 18    0747** JR      ERROR2_EX
0B0F0E DA 
             0748** 
             0749** ; GOSUB line
             0750** ; This pushes the following data onto the execution stack
             0751** ; - 3 bytes: Current execution address
             0752** ; - 3 bytes: Marker (the address of label GOSCHK)
             0753** ;
0B0F0F CD    0754** GOSUB_EX:			CALL    ITEMI			; Fetch the line number
0B0F10 ED 
0B0F11 02 
0B0F12 0B 
0B0F13 FD    0755** GOSUB1:			PUSH    IY              	; Push the current execution address onto the execution stack
0B0F14 E5 
0B0F15 CD    0756** CALL    CHECK           	; Check there is enough room
0B0F16 17 
0B0F17 16 
0B0F18 0B 
0B0F19 CD    0757** CALL    GOTO1           	; Push the marker (address of GOSCHK) onto the execution stack and GOTO the line number
0B0F1A F7 
0B0F1B 0E 
0B0F1C 0B 
             0758** GOSCHK:			EQU     $
             0759** 
             0760** ; RETURN
             0761** ; This pops the following data off the execution stack as pushed by GOSUB
             0762** ; - 3 bytes: Marker (should be the address of label GOSCHK)
             0763** ; - 3 bytes: The return execution address
             0764** ;
0B0F1D D1    0765** RETURN:			POP     DE			; Pop the marker off the execution stack
0B0F1E 21    0766** LD      HL,GOSCHK		; Compare with GOSCHK
0B0F1F 1D 
0B0F20 0F 
0B0F21 0B 
0B0F22 B7    0767** OR      A
0B0F23 ED    0768** SBC     HL,DE
0B0F24 52 
0B0F25 FD    0769** POP     IY			; Pop the return address off the execution stack
0B0F26 E1 
0B0F27 CA    0770** JP      Z,XEQ			; Provided this has been called by a GOSUB then continue execution at the return address
0B0F28 5E 
0B0F29 0B 
0B0F2A 0B 
0B0F2B 3E    0771** LD      A,38			; Otherwise throw a "No GOSUB" error
0B0F2C 26 
0B0F2D 18    0772** JR      ERROR2_EX
0B0F2E BA 
             0773** 
             0774** ; REPEAT
             0775** ; This pushes the following data onto the execution stack
             0776** ; - 3 bytes: Current execution address
             0777** ; - 3 bytes: Marker (the address of label REPCHK)
             0778** ;
0B0F2F FD    0779** REPEAT_EX:			PUSH    IY			; Push the current execution address onto the execution stack
0B0F30 E5 
0B0F31 CD    0780** CALL    CHECK			; Check if there is enough room
0B0F32 17 
0B0F33 16 
0B0F34 0B 
0B0F35 CD    0781** CALL    XEQ			; Push the marker (address of REPCHK) onto the execution stack and continue execution
0B0F36 5E 
0B0F37 0B 
0B0F38 0B 
             0782** REPCHK:			EQU     $
             0783** 
             0784** ; UNTIL expr
             0785** ; This pops the following data off the execution stack
             0786** ; - 3 bytes: Marker (should be the address of label REPCHK)
             0787** ; - 3 bytes: The address of the REPEAT instruction
             0788** ; It also ensures that the data is pushed back on for subsequent UNTIL instructions
             0789** ;
0B0F39 C1    0790** UNTIL_EX:			POP     BC			; Fetch the marker
0B0F3A C5    0791** PUSH    BC			; And push it back onto the execution stack
0B0F3B 21    0792** LD      HL,REPCHK		; Compare with REPCHK
0B0F3C 39 
0B0F3D 0F 
0B0F3E 0B 
0B0F3F B7    0793** OR      A
0B0F40 ED    0794** SBC     HL,BC
0B0F41 42 
0B0F42 3E    0795** LD      A,43
0B0F43 2B 
0B0F44 20    0796** JR      NZ,ERROR2_EX		; Throw a "No REPEAT" if this value does not match
0B0F45 A3 
0B0F46 CD    0797** CALL    EXPRI			; Fetch the expression
0B0F47 D2 
0B0F48 02 
0B0F49 0B 
0B0F4A CD    0798** CALL    TEST			; Test if the expression evaluates to zero
0B0F4B A7 
0B0F4C 08 
0B0F4D 0B 
0B0F4E C1    0799** POP     BC			; Pop the marker
0B0F4F D1    0800** POP     DE			; Pop the address of the REPEAT instruction
0B0F50 20    0801** JR      NZ,XEQ2         	; If it is TRUE, then continue execution after the UNTIL instruction (we're done looping)
0B0F51 05 
0B0F52 D5    0802** PUSH    DE			; Push the address of the REPEAT instruction back on the stack
0B0F53 C5    0803** PUSH    BC			; Push the marker back on the stack
0B0F54 D5    0804** PUSH    DE			; IY = DE
0B0F55 FD    0805** POP     IY			; This sets the execution address back to the REPEAT instruction
0B0F56 E1 
0B0F57 C3    0806** XEQ2:			JP      XEQ			; Continue execution
0B0F58 5E 
0B0F59 0B 
0B0F5A 0B 
             0807** 
             0808** ; FOR var = expr TO expr [STEP expr]
             0809** ; This pushes the following data onto the execution stack
             0810** ; - 3 bytes: The limit value
             0811** ; - 3 bytes: The step value
             0812** ; - 3 bytes: The current execution address
             0813** ; - 3 bytes: The address of the loop variable
             0814** ; - 3 bytes: Marker (the address of FORCHK)
             0815** ;
0B0F5B 3E    0816** FORVAR:			LD      A,34
0B0F5C 22 
0B0F5D 18    0817** JR      ERROR2_EX          	; Throw "FOR variable" error
0B0F5E 8A 
             0818** ;
0B0F5F CD    0819** FOR_EX:			CALL    ASSIGN			; Assign the START expression value to a variable
0B0F60 86 
0B0F61 15 
0B0F62 0B 
0B0F63 20    0820** JR      NZ,FORVAR       	; If the variable is a string, or invalid, then throw a "FOR variable" error
0B0F64 F6 
0B0F65 F5    0821** PUSH    AF              	; Save the variable type
0B0F66 FD    0822** LD      A,(IY)			; Check the next token
0B0F67 7E 
0B0F68 00 
0B0F69 FE    0823** CP      TO_EX			; Compare with the token value for "TO"
0B0F6A B8 
0B0F6B 3E    0824** LD      A,36			; Set the error code to 36 ("No TO")
0B0F6C 24 
0B0F6D C2    0825** JP      NZ,ERROR2_EX       	; And throw the error if that token is missing
0B0F6E E9 
0B0F6F 0E 
0B0F70 0B 
0B0F71 FD    0826** INC     IY			; Skip to the next token
0B0F72 23 
             0827** ;
0B0F73 DD    0828** PUSH    IX
0B0F74 E5 
0B0F75 CD    0829** CALL    EXPRN           	; Fetch the LIMIT expression value
0B0F76 CA 
0B0F77 02 
0B0F78 0B 
0B0F79 DD    0830** POP     IX
0B0F7A E1 
0B0F7B F1    0831** POP     AF
0B0F7C 47    0832** LD      B,A             	; B: LIMIT value type (04h = Integer, 05h = Float)
0B0F7D C5    0833** PUSH    BC              	; Stack the LIMIT value
0B0F7E E5    0834** PUSH    HL
0B0F7F 21    0835** LD      HL,0
0B0F80 00 
0B0F81 00 
0B0F82 00 
0B0F83 4C    0836** LD      C,H
0B0F84 D9    0837** EXX
0B0F85 E5    0838** PUSH    HL
             0839** ;
0B0F86 21    0840** LD      HL,1            	; The preset STEP value is 1
0B0F87 01 
0B0F88 00 
0B0F89 00 
0B0F8A D9    0841** EXX
0B0F8B FD    0842** LD      A,(IY)			; Fetch the next token
0B0F8C 7E 
0B0F8D 00 
0B0F8E FE    0843** CP      STEP			; Compare with the token value for "STEP"
0B0F8F 88 
0B0F90 20    0844** JR      NZ,FOR1			; If there is no STEP token, then skip the next bit
0B0F91 0A 
             0845** ;
0B0F92 FD    0846** INC     IY			; Skip past the STEP token
0B0F93 23 
0B0F94 DD    0847** PUSH    IX
0B0F95 E5 
0B0F96 CD    0848** CALL    EXPRN          		; Fetch the STEP expression value
0B0F97 CA 
0B0F98 02 
0B0F99 0B 
0B0F9A DD    0849** POP     IX
0B0F9B E1 
             0850** ;
0B0F9C C5    0851** FOR1:			PUSH    BC			; Stack the STEP value
0B0F9D E5    0852** PUSH    HL
0B0F9E D9    0853** EXX
0B0F9F E5    0854** PUSH    HL
0B0FA0 D9    0855** EXX
             0856** ;
0B0FA1 FD    0857** PUSH    IY              	; Stack the current execution address
0B0FA2 E5 
0B0FA3 DD    0858** PUSH    IX              	; Stack the loop variable
0B0FA4 E5 
0B0FA5 CD    0859** CALL    CHECK
0B0FA6 17 
0B0FA7 16 
0B0FA8 0B 
0B0FA9 CD    0860** CALL    XEQ
0B0FAA 5E 
0B0FAB 0B 
0B0FAC 0B 
             0861** FORCHK:			EQU     $
             0862** 
             0863** ; NEXT [var[,var...]]
             0864** ; This pops the following data off the execution stack
             0865** ; - 3 bytes: Marker (the address of FORCHK)
             0866** ; - 3 bytes: The address of the loop variable
             0867** ; - 3 bytes: The current execution address
             0868** ; - 3 bytes: The step value
             0869** ; - 3 bytes: The limit value
             0870** ; It also ensures that the data is pushed back on for subsequent NEXT instructions
             0871** ;
0B0FAD C1    0872** NEXT_EX:			POP     BC              	; Pop the marker off the execution stack
0B0FAE 21    0873** LD      HL,FORCHK		; Compare with FORCHK
0B0FAF AD 
0B0FB0 0F 
0B0FB1 0B 
0B0FB2 B7    0874** OR      A
0B0FB3 ED    0875** SBC     HL,BC
0B0FB4 42 
0B0FB5 3E    0876** LD      A,32
0B0FB6 20 
0B0FB7 C2    0877** JP      NZ,ERROR3_EX      		; If this does not match, throw a "No FOR" error
0B0FB8 43 
0B0FB9 10 
0B0FBA 0B 
0B0FBB CD    0878** CALL    TERMQ			; Check for terminator (a NEXT without a variable)
0B0FBC 42 
0B0FBD 17 
0B0FBE 0B 
0B0FBF E1    0879** POP     HL			; Pop the address of the loop variable off the execution stack
0B0FC0 E5    0880** PUSH    HL			; Push it back onto the execution stack
0B0FC1 C5    0881** PUSH    BC			; Push the marker back onto the execution stack
0B0FC2 E5    0882** PUSH    HL			; HL: Address of the loop variable off the stack
0B0FC3 C4    0883** CALL    NZ,GETVAR       	; If there is no terminator, get the variable from the args
0B0FC4 02 
0B0FC5 3A 
0B0FC6 0B 
0B0FC7 D1    0884** POP     DE			; DE: Address of the loop variable off the stack
0B0FC8 EB    0885** EX      DE,HL			; HL: Address of the loop variable off the stack, DE: Address of the variable from args
0B0FC9 B7    0886** OR      A
0B0FCA ED    0887** NEXT0:			SBC     HL,DE			; Compare to make sure that the variables match
0B0FCB 52 
0B0FCC 20    0888** JR      NZ,NEXT1		; They don't, so jump to NEXT1
0B0FCD 61 
0B0FCE D5    0889** PUSH    DE
0B0FCF DD    0890** LD      IX,9+3			; IX: Address of the STEP value on the execution stack
0B0FD0 21 
0B0FD1 0C 
0B0FD2 00 
0B0FD2 00   
0B0FD4 DD    0891** ADD     IX,SP
0B0FD5 39 
0B0FD6 CD    0892** CALL    DLOAD5_SPL      	; Load the STEP value
0B0FD7 A9 
0B0FD8 29 
0B0FD9 0B 
0B0FDA DD    0893** LD      A,(IX+16)       	; Get the STEP type
0B0FDB 7E 
0B0FDC 10 
0B0FDD DD    0894** POP     IX
0B0FDE E1 
0B0FDF CD    0895** CALL    LOADN           	; Load the LOOP variable
0B0FE0 DE 
0B0FE1 03 
0B0FE2 0B 
0B0FE3 CB    0896** BIT     7,D             	; Check the sign
0B0FE4 7A 
0B0FE5 F5    0897** PUSH    AF
0B0FE6 3E    0898** LD      A,'+' & 0FH
0B0FE7 0B 
0B0FE8 CD    0899** CALL    FPP             	; Add the STEP
0B0FE9 32 
0B0FEA 20 
0B0FEB 0B 
0B0FEC 38    0900** JR      C,ERROR3_EX
0B0FED 55 
0B0FEE F1    0901** POP     AF              	; Restore TYPE
0B0FEF F5    0902** PUSH    AF
0B0FF0 CD    0903** CALL    STORE           	; Update the variable
0B0FF1 9E 
0B0FF2 15 
0B0FF3 0B 
0B0FF4 DD    0904** LD      IX,18+3			; IX: Address of the LIMIT value on the execution stack
0B0FF5 21 
0B0FF6 15 
0B0FF7 00 
0B0FF7 00   
0B0FF9 DD    0905** ADD     IX,SP
0B0FFA 39 
0B0FFB CD    0906** CALL    DLOAD5_SPL      	; Load the LIMIT value
0B0FFC A9 
0B0FFD 29 
0B0FFE 0B 
0B0FFF F1    0907** POP     AF
0B1000 CC    0908** CALL    Z,SWAP			; Swap the arguments if the sign is ?
0B1001 9F 
0B1002 08 
0B1003 0B 
             0909** ; LD      A,0+('<'-4) & 0FH
0B1004 3E    0910** LD      A,0+'<'-4 & 0FH ; ez80asm doesn't do () in expressions
0B1005 08 
0B1006 CD    0911** CALL    FPP             	; Test against the limit
0B1007 32 
0B1008 20 
0B1009 0B 
0B100A 38    0912** JR      C,ERROR3_EX		; Throw an error if FPP returns bad
0B100B 37 
0B100C 24    0913** INC     H
0B100D 20    0914** JR      NZ,LOOP_        	; Keep looping
0B100E 14 
0B100F 21    0915** LD      HL,27			; Adjust the stack
0B1010 1B 
0B1011 00 
0B1012 00 
0B1013 39    0916** ADD     HL,SP
0B1014 F9    0917** LD      SP,HL
0B1015 CD    0918** CALL    NXT
0B1016 38 
0B1017 0A 
0B1018 0B 
0B1019 FE    0919** CP      ','			; Check for multiple variables
0B101A 2C 
0B101B C2    0920** JP      NZ,XEQ			; No, so we are done at ths point
0B101C 5E 
0B101D 0B 
0B101E 0B 
0B101F FD    0921** INC     IY			; Increment to the next variable
0B1020 23 
0B1021 18    0922** JR      NEXT_EX			; And continue
0B1022 8A 
             0923** ;
0B1023 C1    0924** LOOP_:			POP     BC
0B1024 D1    0925** POP     DE
0B1025 FD    0926** POP     IY
0B1026 E1 
0B1027 FD    0927** PUSH    IY
0B1028 E5 
0B1029 D5    0928** PUSH    DE
0B102A C5    0929** PUSH    BC
0B102B C3    0930** JP      XEQ
0B102C 5E 
0B102D 0B 
0B102E 0B 
             0931** ;
0B102F 21    0932** NEXT1:			LD      HL,27			; TODO: What does this do?
0B1030 1B 
0B1031 00 
0B1032 00 
0B1033 39    0933** ADD     HL,SP
0B1034 F9    0934** LD      SP,HL			; Adjust the stack
0B1035 C1    0935** POP     BC
0B1036 21    0936** LD      HL,FORCHK
0B1037 AD 
0B1038 0F 
0B1039 0B 
0B103A ED    0937** SBC     HL,BC
0B103B 42 
0B103C E1    0938** POP     HL              	; Variable pointer
0B103D E5    0939** PUSH    HL
0B103E C5    0940** PUSH    BC
0B103F 28    0941** JR      Z,NEXT0
0B1040 89 
             0942** ;
0B1041 3E    0943** LD      A,33
0B1042 21 
0B1043 C3    0944** ERROR3_EX:			JP      ERROR_           	; Throw the error "Can't match FOR"
0B1044 28 
0B1045 37 
0B1046 0B 
             0945** 
             0946** ; FNname
             0947** ; N.B. ENTERED WITH A <> TON
             0948** ;
0B1047 F5    0949** FN_EX:			PUSH    AF              	; Push A onto the stack; this'll be checked for the token ON (TON) in PROC5
0B1048 CD    0950** CALL    PROC1
0B1049 51 
0B104A 10 
0B104B 0B 
             0951** FNCHK:			EQU     $			; This will never fall through as PROC1 will do a JP XEQ
             0952** 
             0953** ; PROCname
             0954** ; N.B. ENTERED WITH A = ON PROC FLAG (EEh or the first character of the token name)
             0955** ; This pushes the following data onto the execution stack
             0956** ; - 3 bytes: The return address for ENDPROC (initially the ON PROC FLAG)
             0957** ; - 3 bytes: Marker (the address of PROCHK)
             0958** ;
0B104C F5    0959** PROC_EX:			PUSH    AF			; Push A onto the stack; this'll be checked for the token ON (TON) in PROC5,
0B104D CD    0960** CALL    PROC1			; and is also space reserved on the stack for the return address
0B104E 51 
0B104F 10 
0B1050 0B 
             0961** PROCHK:			EQU     $			; This will never fall through as PROC1 will do a JP XEQ
             0962** ;
0B1051 CD    0963** PROC1:			CALL    CHECK			; Check there is space for this
0B1052 17 
0B1053 16 
0B1054 0B 
0B1055 FD    0964** DEC     IY			; Decrement IY to the PROC token
0B1056 2B 
0B1057 FD    0965** PUSH    IY			; Stack the pointer
0B1058 E5 
0B1059 CD    0966** CALL    GETDEF			; Search for this PROC/FN entry in the dynamic area
0B105A C3 
0B105B 3A 
0B105C 0B 
0B105D C1    0967** POP     BC			; BC = IY
0B105E 28    0968** JR      Z,PROC4			; If found in the dynamic area then skip to PROC4
0B105F 41 
0B1060 3E    0969** LD      A,30
0B1061 1E 
0B1062 38    0970** JR      C,ERROR3_EX        	; Throw error "Bad call" if invalid PROC/FN call
0B1063 DF 
             0971** ;
             0972** ; At this point the PROC/FN has not yet been registered in the dynamic area
             0973** ; So we need to search through the listing and find where the DEFPROC/FN is and save the address
             0974** ;
0B1064 C5    0975** PUSH    BC			; BC: Still pointing to the PROC token in the tokenised line
0B1065 2A    0976** LD      HL,(PAGE_)		; HL: Start of program memory
0B1066 14 
0B1067 56 
0B1068 0B 
             0977** ;
0B1069 3E    0978** PROC2:			LD      A,DEF_			;  A: The token to search for
0B106A DD 
0B106B CD    0979** CALL    SEARCH_EX          	; Look for "DEF" as the first token in a program line
0B106C 16 
0B106D 18 
0B106E 0B 
0B106F 38    0980** JR      C,PROC3			; Not found, so jump to PROC3
0B1070 26 
0B1071 E5    0981** PUSH    HL			; HL: Points to the DEF token in the DEFPROC
0B1072 FD    0982** POP     IY			; IY = HL
0B1073 E1 
0B1074 FD    0983** INC     IY              	; Skip the DEF token
0B1075 23 
0B1076 CD    0984** CALL    NXT			; And any whitespace
0B1077 38 
0B1078 0A 
0B1079 0B 
0B107A CD    0985** CALL    GETDEF			; Search for this PROC/FN entry in the dynamic area
0B107B C3 
0B107C 3A 
0B107D 0B 
0B107E FD    0986** PUSH    IY
0B107F E5 
0B1080 D1    0987** POP     DE			; DE: Points to the PROC/FN token in tokenised line of the DEFPROC
0B1081 38    0988** JR      C,PROC6			; Skip if there is an error (neither FN or PROC first)
0B1082 09 
0B1083 C4    0989** CALL    NZ,CREATE		; Create an entity in the dynamic area
0B1084 76 
0B1085 3B 
0B1086 0B 
0B1087 FD    0990** PUSH    IY			; IY: Pointer to the DEFPROC/FN arguments
0B1088 E5 
0B1089 D1    0991** POP     DE			; DE = IY
0B108A ED    0992** LD	(HL),DE			; Save address
0B108B 1F 
             0993** ;
0B108C EB    0994** PROC6:			EX      DE,HL			; HL: Address of the procedure
0B108D 3E    0995** LD      A,CR			; The character to search for
0B108E 0D 
0B108F 01    0996** LD	BC,100h			; Only need to search 256 bytes or so ahead; maximum line length
0B1090 00 
0B1091 01 
0B1092 00 
0B1093 ED    0997** CPIR                    	; Skip to next line
0B1094 B1 
0B1095 18    0998** JR      PROC2			; Rinse, lather and repeat
0B1096 D2 
             0999** ;
             1000** ; At this point a DEF has not been found for the PROC/FN
             1001** ;
0B1097 FD    1002** PROC3:			POP     IY              	; Restore the execution address
0B1098 E1 
0B1099 CD    1003** CALL    GETDEF			; Search for this PROC/FN entry in the dynamic area
0B109A C3 
0B109B 3A 
0B109C 0B 
0B109D 3E    1004** LD      A,29
0B109E 1D 
0B109F 20    1005** JR      NZ,ERROR3_EX      		; Throw error "No such FN/PROC" if not found
0B10A0 A2 
             1006** ;
             1007** ; At this point we have a PROC/FN entry in the dynamic area
             1008** ;
0B10A1 ED    1009** PROC4:			LD	DE,(HL)			; HL: Address of pointer; fetch entity address in DE
0B10A2 17 
0B10A3 21    1010** LD	HL,3
0B10A4 03 
0B10A5 00 
0B10A6 00 
0B10A7 39    1011** ADD     HL,SP
0B10A8 CD    1012** CALL    NXT             	; Allow space before "("
0B10A9 38 
0B10AA 0A 
0B10AB 0B 
0B10AC D5    1013** PUSH    DE              	; Exchange DE and IY
0B10AD FD    1014** EX      (SP),IY
0B10AE E3 
0B10AF FE    1015** CP      '('             	; Arguments?
0B10B0 28 
0B10B1 D1    1016** POP     DE			; NB: This has been moved after the compare otherwise DE gets corrupted later? IDK why!?!
0B10B2 20    1017** JR      NZ,PROC5
0B10B3 20 
0B10B4 CD    1018** CALL    NXT             	; Allow space before "("
0B10B5 38 
0B10B6 0A 
0B10B7 0B 
0B10B8 FE    1019** CP      '('
0B10B9 28 
0B10BA C2    1020** JP      NZ,SYNTAX       	; Throw "Syntax error"
0B10BB 5F 
0B10BC 0C 
0B10BD 0B 
0B10BE FD    1021** PUSH    IY
0B10BF E5 
0B10C0 C1    1022** POP     BC              	; Save IY in BC
0B10C1 D9    1023** EXX
0B10C2 CD    1024** CALL    SAVLOC          	; Save local parameters
0B10C3 C2 
0B10C4 16 
0B10C5 0B 
0B10C6 CD    1025** CALL    BRAKET          	; Closing bracket
0B10C7 F7 
0B10C8 09 
0B10C9 0B 
0B10CA D9    1026** EXX
0B10CB C5    1027** PUSH    BC
0B10CC FD    1028** POP     IY              	; Restore IY
0B10CD E1 
0B10CE E5    1029** PUSH    HL
0B10CF CD    1030** CALL    ARGUE           	; Transfer arguments
0B10D0 3E 
0B10D1 16 
0B10D2 0B 
0B10D3 E1    1031** POP     HL
             1032** ;
0B10D4 23    1033** PROC5:			INC	HL			; Increment to the ON PROC flag address
0B10D5 7E    1034** LD	A, (HL)			; And fetch the value
0B10D6 2B    1035** DEC 	HL
0B10D7 ED    1036** LD	(HL), DE		; Save the ENDPROC return address pointer in the BASIC listing
0B10D8 1F 
0B10D9 FE    1037** CP	TON			; Was it "ON PROC"?
0B10DA EE 
0B10DB C2    1038** JP	NZ, XEQ			; No, so back to XEQ
0B10DC 5E 
0B10DD 0B 
0B10DE 0B 
0B10DF D5    1039** PUSH    DE			; Exchange DE and IY
0B10E0 FD    1040** EX      (SP),IY
0B10E1 E3 
0B10E2 CD    1041** CALL    SPAN            	; Skip rest of ON list
0B10E3 4F 
0B10E4 17 
0B10E5 0B 
0B10E6 FD    1042** EX      (SP),IY			; Exchange DE and IY
0B10E7 E3 
0B10E8 D1    1043** POP     DE
0B10E9 ED    1044** LD	(HL), DE		; Save the return address
0B10EA 1F 
0B10EB C3    1045** JP      XEQ
0B10EC 5E 
0B10ED 0B 
0B10EE 0B 
             1046** 
             1047** ; LOCAL var[,var...]
             1048** ;
0B10EF C1    1049** LOCAL_EX_:			POP     BC			; BC: The current check marker (on the stack)
0B10F0 C5    1050** PUSH    BC
0B10F1 21    1051** LD      HL,FNCHK		; Check if we are in a FN
0B10F2 4C 
0B10F3 10 
0B10F4 0B 
0B10F5 B7    1052** OR      A
0B10F6 ED    1053** SBC     HL,BC
0B10F7 42 
0B10F8 28    1054** JR      Z,LOCAL1		; Yes, so all good, we can use local
0B10F9 16 
0B10FA 21    1055** LD      HL,PROCHK		; Now check if we are in a PROC
0B10FB 51 
0B10FC 10 
0B10FD 0B 
0B10FE B7    1056** OR      A
0B10FF ED    1057** SBC     HL,BC
0B1100 42 
0B1101 28    1058** JR      Z,LOCAL1		; Again, all good, we can use local
0B1102 0D 
0B1103 21    1059** LD      HL,LOCCHK		; Finally check for the local parameters marker
0B1104 20 
0B1105 17 
0B1106 0B 
0B1107 B7    1060** OR      A
0B1108 ED    1061** SBC     HL,BC			; If it is not present, then
0B1109 42 
0B110A 3E    1062** LD      A,12
0B110B 0C 
0B110C C2    1063** JP      NZ,ERROR_        	; Then throw a "Not LOCAL" errr
0B110D 28 
0B110E 37 
0B110F 0B 
             1064** ;
             1065** ; At this point we are adding a local variable into a PROC or FN
             1066** ;
0B1110 FD    1067** LOCAL1:			PUSH    IY			; IY: BASIC pointer
0B1111 E5 
0B1112 C1    1068** POP     BC			; BC: Copy of the BASIC pointer
0B1113 D9    1069** EXX
0B1114 FD    1070** DEC     IY
0B1115 2B 
0B1116 CD    1071** CALL    SAVLOC
0B1117 C2 
0B1118 16 
0B1119 0B 
0B111A D9    1072** EXX
0B111B C5    1073** PUSH    BC
0B111C FD    1074** POP     IY
0B111D E1 
             1075** ;
0B111E CD    1076** LOCAL2:			CALL    GETVAR			; Get the variable location
0B111F 02 
0B1120 3A 
0B1121 0B 
0B1122 C2    1077** JP      NZ,SYNTAX
0B1123 5F 
0B1124 0C 
0B1125 0B 
0B1126 B7    1078** OR      A               	; Check the variable type (80h = string)
0B1127 08    1079** EX      AF,AF'
0B1128 CD    1080** CALL    ZERO			; Zero the variable anyway
0B1129 5B 
0B112A 09 
0B112B 0B 
0B112C 08    1081** EX      AF,AF'
0B112D F5    1082** PUSH    AF
0B112E F4    1083** CALL    P,STORE         	; Call STORE if it is not a string
0B112F 9E 
0B1130 15 
0B1131 0B 
0B1132 F1    1084** POP     AF
0B1133 59    1085** LD      E,C
0B1134 FC    1086** CALL    M,STORES		; Call STORES if it is a string
0B1135 CC 
0B1136 15 
0B1137 0B 
0B1138 CD    1087** CALL    NXT			; Skip to the next character in the expression
0B1139 38 
0B113A 0A 
0B113B 0B 
0B113C FE    1088** CP      ','			; Is it a comma?
0B113D 2C 
0B113E C2    1089** JP      NZ,XEQ			; No, so we're done, carry on executing
0B113F 5E 
0B1140 0B 
0B1141 0B 
0B1142 FD    1090** INC     IY			; Yes, so skip the comma
0B1143 23 
0B1144 CD    1091** CALL    NXT			; And any whitespace
0B1145 38 
0B1146 0A 
0B1147 0B 
0B1148 18    1092** JR      LOCAL2			; Then loop back and handle any further local variables
0B1149 D4 
             1093** 
             1094** ; ENDPROC
             1095** ;
0B114A C1    1096** ENDPRO:			POP     BC			; Pop the check value off the stack
0B114B 21    1097** LD      HL,LOCCHK		; Check if it is the LOCAL Marker
0B114C 20 
0B114D 17 
0B114E 0B 
0B114F B7    1098** OR      A
0B1150 ED    1099** SBC     HL,BC
0B1151 42 
0B1152 28    1100** JR      Z,UNSTK         	; Yes, it is, so first need to unstack the local variables
0B1153 13 
             1101** ;
0B1154 21    1102** LD      HL,PROCHK       	; Check if it is the PROC marker
0B1155 51 
0B1156 10 
0B1157 0B 
0B1158 B7    1103** OR      A
0B1159 ED    1104** SBC     HL,BC
0B115A 42 
0B115B FD    1105** POP     IY
0B115C E1 
0B115D CA    1106** JP      Z,XEQ			; Yes, it is, so carry on, all is good
0B115E 5E 
0B115F 0B 
0B1160 0B 
0B1161 3E    1107** LD      A,13			; Otherwise throw the "No PROC" error
0B1162 0D 
0B1163 C3    1108** JP      ERROR_
0B1164 28 
0B1165 37 
0B1166 0B 
             1109** ;
0B1167 DD    1110** UNSTK:			POP     IX			; Unstack a single local variable
0B1168 E1 
0B1169 C1    1111** POP     BC
0B116A 78    1112** LD      A,B
0B116B B7    1113** OR      A
0B116C FA    1114** JP      M,UNSTK1        	; Jump here if it is a string? (80h)
0B116D 7A 
0B116E 11 
0B116F 0B 
0B1170 E1    1115** POP     HL			; Unstack a normal variable
0B1171 D9    1116** EXX
0B1172 E1    1117** POP     HL
0B1173 D9    1118** EXX
0B1174 CD    1119** CALL    STORE			; TODO: Not sure why or where it is being stored at this point
0B1175 9E 
0B1176 15 
0B1177 0B 
0B1178 18    1120** JR      ENDPRO			; And loop back to ENDPRO
0B1179 D0 
             1121** ;
0B117A 21    1122** UNSTK1:			LD      HL,0			; Unstack a string
0B117B 00 
0B117C 00 
0B117D 00 
0B117E 39    1123** ADD     HL,SP
0B117F 59    1124** LD      E,C
0B1180 CD    1125** CALL    STORES			; TODO: Not sure why or where it is being stored at this point
0B1181 CC 
0B1182 15 
0B1183 0B 
0B1184 F9    1126** LD      SP,HL
0B1185 18    1127** JR      ENDPRO
0B1186 C3 
             1128** 
             1129** ; INPUT #channel,var,var...
             1130** ;
0B1187 CD    1131** INPUTN:			CALL    CHNL            ;E = CHANNEL NUMBER
0B1188 5A 
0B1189 18 
0B118A 0B 
0B118B CD    1132** INPN1:			CALL    NXT
0B118C 38 
0B118D 0A 
0B118E 0B 
0B118F FE    1133** CP      ','
0B1190 2C 
0B1191 C2    1134** JP      NZ,XEQ
0B1192 5E 
0B1193 0B 
0B1194 0B 
0B1195 FD    1135** INC     IY
0B1196 23 
0B1197 CD    1136** CALL    NXT
0B1198 38 
0B1199 0A 
0B119A 0B 
0B119B D5    1137** PUSH    DE
0B119C CD    1138** CALL    VAR_
0B119D 56 
0B119E 0C 
0B119F 0B 
0B11A0 D1    1139** POP     DE
0B11A1 F5    1140** PUSH    AF              ;SAVE TYPE
0B11A2 E5    1141** PUSH    HL              ;VARPTR
0B11A3 B7    1142** OR      A
0B11A4 FA    1143** JP      M,INPN2         ;STRING
0B11A5 D0 
0B11A6 11 
0B11A7 0B 
0B11A8 CD    1144** CALL    OSBGET
0B11A9 FB 
0B11AA 42 
0B11AB 0B 
0B11AC D9    1145** EXX
0B11AD 6F    1146** LD      L,A
0B11AE D9    1147** EXX
0B11AF CD    1148** CALL    OSBGET
0B11B0 FB 
0B11B1 42 
0B11B2 0B 
0B11B3 D9    1149** EXX
0B11B4 67    1150** LD      H,A
0B11B5 D9    1151** EXX
0B11B6 CD    1152** CALL    OSBGET
0B11B7 FB 
0B11B8 42 
0B11B9 0B 
0B11BA 6F    1153** LD      L,A
0B11BB CD    1154** CALL    OSBGET
0B11BC FB 
0B11BD 42 
0B11BE 0B 
0B11BF 67    1155** LD      H,A
0B11C0 CD    1156** CALL    OSBGET
0B11C1 FB 
0B11C2 42 
0B11C3 0B 
0B11C4 4F    1157** LD      C,A
0B11C5 DD    1158** POP     IX
0B11C6 E1 
0B11C7 F1    1159** POP     AF              ;RESTORE TYPE
0B11C8 D5    1160** PUSH    DE              ;SAVE CHANNEL
0B11C9 CD    1161** CALL    STORE
0B11CA 9E 
0B11CB 15 
0B11CC 0B 
0B11CD D1    1162** POP     DE
0B11CE 18    1163** JR      INPN1
0B11CF BB 
0B11D0 21    1164** INPN2:			LD      HL,ACCS
0B11D1 00 
0B11D2 53 
0B11D3 0B 
0B11D4 CD    1165** INPN3:			CALL    OSBGET
0B11D5 FB 
0B11D6 42 
0B11D7 0B 
0B11D8 FE    1166** CP      CR
0B11D9 0D 
0B11DA 28    1167** JR      Z,INPN4
0B11DB 04 
0B11DC 77    1168** LD      (HL),A
0B11DD 2C    1169** INC     L
0B11DE 20    1170** JR      NZ,INPN3
0B11DF F4 
0B11E0 DD    1171** INPN4:			POP     IX
0B11E1 E1 
0B11E2 F1    1172** POP     AF
0B11E3 D5    1173** PUSH    DE
0B11E4 EB    1174** EX      DE,HL
0B11E5 CD    1175** CALL    STACCS
0B11E6 C8 
0B11E7 15 
0B11E8 0B 
0B11E9 D1    1176** POP     DE
0B11EA 18    1177** JR      INPN1
0B11EB 9F 
             1178** 
             1179** ; INPUT ['][SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
             1180** ; INPUT LINE [SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
             1181** ;
0B11EC FE    1182** INPUT:			CP      '#'
0B11ED 23 
0B11EE 28    1183** JR      Z,INPUTN
0B11EF 97 
0B11F0 0E    1184** LD      C,0             ;FLAG PROMPT
0B11F1 00 
0B11F2 FE    1185** CP      LINE_EX_
0B11F3 86 
0B11F4 20    1186** JR      NZ,INPUT0
0B11F5 04 
0B11F6 FD    1187** INC     IY              ;SKIP "LINE"
0B11F7 23 
0B11F8 0E    1188** LD      C,80H
0B11F9 80 
0B11FA 21    1189** INPUT0:			LD      HL,BUFFER
0B11FB 00 
0B11FC 54 
0B11FD 0B 
0B11FE 36    1190** LD      (HL),CR         ;INITIALISE EMPTY
0B11FF 0D 
0B1200 CD    1191** INPUT1:			CALL    TERMQ
0B1201 42 
0B1202 17 
0B1203 0B 
0B1204 CA    1192** JP      Z,XEQ           ;DONE
0B1205 5E 
0B1206 0B 
0B1207 0B 
0B1208 FD    1193** INC     IY
0B1209 23 
0B120A FE    1194** CP      ','
0B120B 2C 
0B120C 28    1195** JR      Z,INPUT3        ;SKIP COMMA
0B120D 5C 
0B120E FE    1196** CP      ';'
0B120F 3B 
0B1210 28    1197** JR      Z,INPUT3
0B1211 58 
0B1212 E5    1198** PUSH    HL              ;SAVE BUFFER POINTER
0B1213 FE    1199** CP      34		;ASCII ""
0B1214 22 
0B1215 20    1200** JR      NZ,INPUT6
0B1216 0C 
0B1217 C5    1201** PUSH    BC
0B1218 CD    1202** CALL    CONS
0B1219 2F 
0B121A 04 
0B121B 0B 
0B121C C1    1203** POP     BC
0B121D CD    1204** CALL    PTEXT           ;PRINT PROMPT
0B121E C6 
0B121F 17 
0B1220 0B 
0B1221 18    1205** JR      INPUT9
0B1222 06 
0B1223 CD    1206** INPUT6:			CALL    FORMAT          ;SPC, TAB, '
0B1224 67 
0B1225 17 
0B1226 0B 
0B1227 20    1207** JR      NZ,INPUT2
0B1228 05 
0B1229 E1    1208** INPUT9:			POP     HL
0B122A CB    1209** SET     0,C             ;FLAG NO PROMPT
0B122B C1 
0B122C 18    1210** JR      INPUT0
0B122D CC 
0B122E FD    1211** INPUT2:			DEC     IY
0B122F 2B 
0B1230 C5    1212** PUSH    BC
0B1231 CD    1213** CALL    VAR_
0B1232 56 
0B1233 0C 
0B1234 0B 
0B1235 C1    1214** POP     BC
0B1236 E1    1215** POP     HL
0B1237 F5    1216** PUSH    AF              ;SAVE TYPE
0B1238 7E    1217** LD      A,(HL)
0B1239 23    1218** INC     HL
0B123A FE    1219** CP      CR              ;BUFFER EMPTY?
0B123B 0D 
0B123C CC    1220** CALL    Z,REFILL
0B123D 6E 
0B123E 12 
0B123F 0B 
0B1240 CB    1221** BIT     7,C
0B1241 79 
0B1242 F5    1222** PUSH    AF
0B1243 C4    1223** CALL    NZ,LINES
0B1244 E8 
0B1245 17 
0B1246 0B 
0B1247 F1    1224** POP     AF
0B1248 CC    1225** CALL    Z,FETCHS
0B1249 D5 
0B124A 17 
0B124B 0B 
0B124C F1    1226** POP     AF              ;RESTORE TYPE
0B124D C5    1227** PUSH    BC
0B124E E5    1228** PUSH    HL
0B124F B7    1229** OR      A
0B1250 FA    1230** JP      M,INPUT4        ;STRING
0B1251 64 
0B1252 12 
0B1253 0B 
0B1254 F5    1231** PUSH    AF
0B1255 DD    1232** PUSH    IX
0B1256 E5 
0B1257 CD    1233** CALL    VAL0
0B1258 36 
0B1259 06 
0B125A 0B 
0B125B DD    1234** POP     IX
0B125C E1 
0B125D F1    1235** POP     AF
0B125E CD    1236** CALL    STORE
0B125F 9E 
0B1260 15 
0B1261 0B 
0B1262 18    1237** JR      INPUT5
0B1263 04 
0B1264 CD    1238** INPUT4:			CALL    STACCS
0B1265 C8 
0B1266 15 
0B1267 0B 
0B1268 E1    1239** INPUT5:			POP     HL
0B1269 C1    1240** POP     BC
0B126A CB    1241** INPUT3:			RES     0,C
0B126B 81 
0B126C 18    1242** JR      INPUT1
0B126D 92 
             1243** ;
0B126E CB    1244** REFILL:			BIT     0,C
0B126F 41 
0B1270 20    1245** JR      NZ,REFIL0       ;NO PROMPT
0B1271 0C 
0B1272 3E    1246** LD      A,'?'
0B1273 3F 
0B1274 CD    1247** CALL    OUTCHR          ;PROMPT
0B1275 17 
0B1276 39 
0B1277 0B 
0B1278 3E    1248** LD      A,' '
0B1279 20 
0B127A CD    1249** CALL    OUTCHR
0B127B 17 
0B127C 39 
0B127D 0B 
0B127E 21    1250** REFIL0:			LD      HL,BUFFER
0B127F 00 
0B1280 54 
0B1281 0B 
0B1282 C5    1251** PUSH    BC
0B1283 E5    1252** PUSH    HL
0B1284 DD    1253** PUSH    IX
0B1285 E5 
0B1286 CD    1254** CALL    OSLINE
0B1287 27 
0B1288 3E 
0B1289 0B 
0B128A DD    1255** POP     IX
0B128B E1 
0B128C E1    1256** POP     HL
0B128D C1    1257** POP     BC
0B128E 47    1258** LD      B,A             ;POS AT ENTRY
0B128F AF    1259** XOR     A
0B1290 32    1260** LD      (COUNT),A
0B1291 3D 
0B1292 56 
0B1293 0B 
0B1294 B8    1261** CP      B
0B1295 C8    1262** RET     Z
0B1296 7E    1263** REFIL1:			LD      A,(HL)
0B1297 FE    1264** CP      CR
0B1298 0D 
0B1299 C8    1265** RET     Z
0B129A 23    1266** INC     HL
0B129B 10    1267** DJNZ    REFIL1
0B129C F9 
0B129D C9    1268** RET
             1269** 
             1270** ; READ var[,var...]
             1271** ;
0B129E FE    1272** READ:			CP      '#'
0B129F 23 
0B12A0 CA    1273** JP      Z,INPUTN
0B12A1 87 
0B12A2 11 
0B12A3 0B 
0B12A4 2A    1274** LD      HL,(DATPTR)
0B12A5 31 
0B12A6 56 
0B12A7 0B 
0B12A8 7E    1275** READ0:			LD      A,(HL)
0B12A9 23    1276** INC     HL              ;SKIP COMMA OR "DATA"
0B12AA FE    1277** CP      CR              ;END OF DATA STMT?
0B12AB 0D 
0B12AC CC    1278** CALL    Z,GETDAT
0B12AD F0 
0B12AE 12 
0B12AF 0B 
0B12B0 E5    1279** PUSH    HL
0B12B1 CD    1280** CALL    VAR_
0B12B2 56 
0B12B3 0C 
0B12B4 0B 
0B12B5 E1    1281** POP     HL
0B12B6 B7    1282** OR      A
0B12B7 FA    1283** JP      M,READ1         ;STRING
0B12B8 D0 
0B12B9 12 
0B12BA 0B 
0B12BB E5    1284** PUSH    HL
0B12BC FD    1285** EX      (SP),IY
0B12BD E3 
0B12BE F5    1286** PUSH    AF              ;SAVE TYPE
0B12BF DD    1287** PUSH    IX
0B12C0 E5 
0B12C1 CD    1288** CALL    EXPRN
0B12C2 CA 
0B12C3 02 
0B12C4 0B 
0B12C5 DD    1289** POP     IX
0B12C6 E1 
0B12C7 F1    1290** POP     AF
0B12C8 CD    1291** CALL    STORE
0B12C9 9E 
0B12CA 15 
0B12CB 0B 
0B12CC FD    1292** EX      (SP),IY
0B12CD E3 
0B12CE 18    1293** JR      READ2
0B12CF 09 
0B12D0 CD    1294** READ1:			CALL    FETCHS
0B12D1 D5 
0B12D2 17 
0B12D3 0B 
0B12D4 E5    1295** PUSH    HL
0B12D5 CD    1296** CALL    STACCS
0B12D6 C8 
0B12D7 15 
0B12D8 0B 
0B12D9 E1    1297** READ2:			POP     HL
0B12DA 22    1298** LD      (DATPTR),HL
0B12DB 31 
0B12DC 56 
0B12DD 0B 
0B12DE CD    1299** CALL    NXT
0B12DF 38 
0B12E0 0A 
0B12E1 0B 
0B12E2 FE    1300** CP      ','
0B12E3 2C 
0B12E4 C2    1301** JP      NZ,XEQ
0B12E5 5E 
0B12E6 0B 
0B12E7 0B 
0B12E8 FD    1302** INC     IY
0B12E9 23 
0B12EA CD    1303** CALL    NXT
0B12EB 38 
0B12EC 0A 
0B12ED 0B 
0B12EE 18    1304** JR      READ0
0B12EF B8 
             1305** ;
0B12F0 3E    1306** GETDAT:			LD      A,DATA_EX_
0B12F1 DC 
0B12F2 CD    1307** CALL    SEARCH_EX
0B12F3 16 
0B12F4 18 
0B12F5 0B 
0B12F6 23    1308** INC     HL
0B12F7 D0    1309** RET     NC
0B12F8 3E    1310** LD      A,42
0B12F9 2A 
0B12FA C3    1311** ERROR4:			JP      ERROR_           ;"Out of DATA"
0B12FB 28 
0B12FC 37 
0B12FD 0B 
             1312** 
             1313** ; IF expr statement
             1314** ; IF expr THEN statement [ELSE statement]
             1315** ; IF expr THEN line [ELSE line]
             1316** ;
0B12FE CD    1317** IF_:			CALL    EXPRI
0B12FF D2 
0B1300 02 
0B1301 0B 
0B1302 CD    1318** CALL    TEST
0B1303 A7 
0B1304 08 
0B1305 0B 
0B1306 28    1319** JR      Z,IFNOT         ;FALSE
0B1307 19 
0B1308 FD    1320** LD      A,(IY)
0B1309 7E 
0B130A 00 
0B130B FE    1321** CP      THEN_EX_
0B130C 8C 
0B130D C2    1322** JP      NZ,XEQ
0B130E 5E 
0B130F 0B 
0B1310 0B 
0B1311 FD    1323** INC     IY              ;SKIP "THEN"
0B1312 23 
0B1313 CD    1324** IF1:			CALL    NXT
0B1314 38 
0B1315 0A 
0B1316 0B 
0B1317 FE    1325** CP      LINO_EX
0B1318 8D 
0B1319 C2    1326** JP      NZ,XEQ          ;STATEMENT FOLLOWS
0B131A 5E 
0B131B 0B 
0B131C 0B 
0B131D C3    1327** JP      GOTO_EX            ;LINE NO. FOLLOWS
0B131E F3 
0B131F 0E 
0B1320 0B 
0B1321 FD    1328** IFNOT:			LD      A,(IY)
0B1322 7E 
0B1323 00 
0B1324 FE    1329** CP      CR
0B1325 0D 
0B1326 FD    1330** INC     IY
0B1327 23 
0B1328 CA    1331** JP      Z,XEQ0          ;END OF LINE
0B1329 5A 
0B132A 0B 
0B132B 0B 
0B132C FE    1332** CP      ELSE_EX_
0B132D 8B 
0B132E 20    1333** JR      NZ,IFNOT
0B132F F1 
0B1330 18    1334** JR      IF1
0B1331 E1 
             1335** 
             1336** ; CLS
             1337** ;
0B1332 CD    1338** CLS:		CALL    CLRSCN
0B1333 94 
0B1334 43 
0B1335 0B 
0B1336 AF    1339** XOR     A
0B1337 32    1340** LD      (COUNT),A
0B1338 3D 
0B1339 56 
0B133A 0B 
0B133B C3    1341** JP      XEQ
0B133C 5E 
0B133D 0B 
0B133E 0B 
             1342** 
             1343** ; STOP
             1344** ;
0B133F CD    1345** STOP:			CALL    TELL
0B1340 58 
0B1341 3D 
0B1342 0B 
0B1343 0D    1346** DB	CR
0B1344 0A    1347** DB	LF
0B1345 FA    1348** DB	TSTOP
0B1346 00    1349** DB	0
0B1347 CD    1350** CALL    SETLIN          ;FIND CURRENT LINE
0B1348 76 
0B1349 39 
0B134A 0B 
0B134B CD    1351** CALL    SAYLN
0B134C AA 
0B134D 39 
0B134E 0B 
0B134F CD    1352** CALL    CRLF
0B1350 0F 
0B1351 39 
0B1352 0B 
0B1353 C3    1353** JP      CLOOP
0B1354 48 
0B1355 30 
0B1356 0B 
             1354** 
             1355** ; REPORT
             1356** ;
0B1357 CD    1357** REPOR:			CALL    REPORT
0B1358 4A 
0B1359 3D 
0B135A 0B 
0B135B C3    1358** JP      XEQ
0B135C 5E 
0B135D 0B 
0B135E 0B 
             1359** 
             1360** ; CLEAR
             1361** ;
0B135F CD    1362** CLR:			CALL    CLEAR
0B1360 3E 
0B1361 38 
0B1362 0B 
0B1363 2A    1363** LD      HL,(PAGE_)
0B1364 14 
0B1365 56 
0B1366 0B 
0B1367 18    1364** JR      RESTR1
0B1368 19 
             1365** 
             1366** ; RESTORE [line]
             1367** ;
0B1369 2A    1368** RESTOR_EX:			LD      HL,(PAGE_)
0B136A 14 
0B136B 56 
0B136C 0B 
0B136D CD    1369** CALL    TERMQ
0B136E 42 
0B136F 17 
0B1370 0B 
0B1371 28    1370** JR      Z,RESTR1
0B1372 0F 
0B1373 CD    1371** CALL    ITEMI
0B1374 ED 
0B1375 02 
0B1376 0B 
0B1377 D9    1372** EXX
0B1378 CD    1373** CALL    FINDL           ;SEARCH FOR LINE
0B1379 57 
0B137A 39 
0B137B 0B 
0B137C 3E    1374** LD      A,41
0B137D 29 
0B137E C2    1375** JP      NZ,ERROR4       ;"No such line"
0B137F FA 
0B1380 12 
0B1381 0B 
0B1382 3E    1376** RESTR1:			LD      A,DATA_EX_
0B1383 DC 
0B1384 CD    1377** CALL    SEARCH_EX
0B1385 16 
0B1386 18 
0B1387 0B 
0B1388 22    1378** LD      (DATPTR),HL
0B1389 31 
0B138A 56 
0B138B 0B 
0B138C C3    1379** JP      XEQ
0B138D 5E 
0B138E 0B 
0B138F 0B 
             1380** 
             1381** ; PTR#channel=expr
             1382** ; PAGE=expr
             1383** ; TIME=expr
             1384** ; LOMEM=expr
             1385** ; HIMEM=expr
             1386** ;
0B1390 CD    1387** PTR_EX:			CALL    CHANEL
0B1391 4E 
0B1392 18 
0B1393 0B 
0B1394 CD    1388** CALL    EQUALS
0B1395 58 
0B1396 17 
0B1397 0B 
0B1398 7B    1389** LD      A,E
0B1399 F5    1390** PUSH    AF
0B139A CD    1391** CALL    EXPRI
0B139B D2 
0B139C 02 
0B139D 0B 
0B139E E5    1392** PUSH    HL
0B139F D9    1393** EXX
0B13A0 D1    1394** POP     DE
0B13A1 F1    1395** POP     AF
0B13A2 CD    1396** CALL    PUTPTR
0B13A3 2F 
0B13A4 43 
0B13A5 0B 
0B13A6 C3    1397** JP      XEQ
0B13A7 5E 
0B13A8 0B 
0B13A9 0B 
             1398** ;
0B13AA CD    1399** PAGEV_EX:			CALL    EQUALS
0B13AB 58 
0B13AC 17 
0B13AD 0B 
0B13AE CD    1400** CALL    EXPRI
0B13AF D2 
0B13B0 02 
0B13B1 0B 
0B13B2 D9    1401** EXX
0B13B3 2E    1402** LD      L,0
0B13B4 00 
0B13B5 22    1403** LD      (PAGE_),HL
0B13B6 14 
0B13B7 56 
0B13B8 0B 
0B13B9 C3    1404** JP      XEQ
0B13BA 5E 
0B13BB 0B 
0B13BC 0B 
             1405** ;
0B13BD FE    1406** TIMEV_EX:			CP      '$'
0B13BE 24 
0B13BF 28    1407** JR      Z,TIMEVS_EX
0B13C0 13 
0B13C1 CD    1408** CALL    EQUALS
0B13C2 58 
0B13C3 17 
0B13C4 0B 
0B13C5 CD    1409** CALL    EXPRI
0B13C6 D2 
0B13C7 02 
0B13C8 0B 
0B13C9 E5    1410** PUSH    HL
0B13CA D9    1411** EXX
0B13CB D1    1412** POP     DE
0B13CC CD    1413** CALL    PUTIME
0B13CD 5F 
0B13CE 3E 
0B13CF 0B 
0B13D0 C3    1414** JP      XEQ
0B13D1 5E 
0B13D2 0B 
0B13D3 0B 
             1415** ;
0B13D4 FD    1416** TIMEVS_EX:			INC     IY              ;SKIP '$'
0B13D5 23 
0B13D6 CD    1417** CALL    EQUALS
0B13D7 58 
0B13D8 17 
0B13D9 0B 
0B13DA CD    1418** CALL    EXPRS
0B13DB DD 
0B13DC 02 
0B13DD 0B 
0B13DE CD    1419** CALL    PUTIMS
0B13DF 7F 
0B13E0 43 
0B13E1 0B 
0B13E2 C3    1420** JP      XEQ
0B13E3 5E 
0B13E4 0B 
0B13E5 0B 
             1421** ;
0B13E6 CD    1422** LOMEMV_EX:			CALL    EQUALS
0B13E7 58 
0B13E8 17 
0B13E9 0B 
0B13EA CD    1423** CALL    EXPRI
0B13EB D2 
0B13EC 02 
0B13ED 0B 
0B13EE CD    1424** CALL    CLEAR
0B13EF 3E 
0B13F0 38 
0B13F1 0B 
0B13F2 D9    1425** EXX
0B13F3 22    1426** LD      (LOMEM),HL
0B13F4 1A 
0B13F5 56 
0B13F6 0B 
0B13F7 22    1427** LD      (FREE),HL
0B13F8 1D 
0B13F9 56 
0B13FA 0B 
0B13FB C3    1428** JP      XEQ
0B13FC 5E 
0B13FD 0B 
0B13FE 0B 
             1429** ;
0B13FF CD    1430** HIMEMV_EX:			CALL    EQUALS			; Check for '=' and throw an error if not found
0B1400 58 
0B1401 17 
0B1402 0B 
0B1403 CD    1431** CALL    EXPRI			; Load the expression into registers
0B1404 D2 
0B1405 02 
0B1406 0B 
             1432** ; BEGIN MISSING FROM BINARY
             1433** ; LD	A,L			;  A: The MSB of the 24-bit value
             1434** ; EXX				; HL: The LSW of the 24-bit value
             1435** ; LD	(R0),HL
             1436** ; LD	(R0+2),A
             1437** ; LD	HL,(FREE)
             1438** ; LD      DE,256
             1439** ; ADD	HL,DE
             1440** ; EX	DE,HL			; DE: FREE + 256
             1441** ; LD	HL,(R0)			; HL: The passed expression
             1442** ; END MISSING FROM BINARY
             1443** ; BEGIN ADDED FROM BINARY
0B1407 D9    1444** exx
0B1408 ED    1445** ld de,(FREE)
0B1409 5B 
0B140A 1D 
0B140B 56 
0B140B 0B   
0B140D 14    1446** inc d
             1447** ; END ADDED FROM BINARY
0B140E AF    1448** XOR     A
0B140F ED    1449** SBC     HL,DE
0B1410 52 
0B1411 19    1450** ADD     HL,DE			; Do a bounds check
0B1412 DA    1451** JP      C,ERROR_         	; Throw the error: "No room"
0B1413 28 
0B1414 37 
0B1415 0B 
0B1416 ED    1452** LD      DE,(HIMEM)
0B1417 5B 
0B1418 20 
0B1419 56 
0B1419 0B   
0B141B 22    1453** LD      (HIMEM),HL
0B141C 20 
0B141D 56 
0B141E 0B 
0B141F EB    1454** EX      DE,HL
0B1420 ED    1455** SBC     HL,SP			; Adjust the stack
0B1421 72 
0B1422 C2    1456** JP      NZ,XEQ
0B1423 5E 
0B1424 0B 
0B1425 0B 
0B1426 EB    1457** EX      DE,HL
0B1427 F9    1458** LD      SP,HL           	; Load the SP
0B1428 C3    1459** JP      XEQ
0B1429 5E 
0B142A 0B 
0B142B 0B 
             1460** 
             1461** ; WIDTH expr
             1462** ;
0B142C CD    1463** WIDTHV:			CALL    EXPRI
0B142D D2 
0B142E 02 
0B142F 0B 
0B1430 D9    1464** EXX
0B1431 7D    1465** LD      A,L
0B1432 32    1466** LD      (WIDTH),A
0B1433 3E 
0B1434 56 
0B1435 0B 
0B1436 C3    1467** JP      XEQ
0B1437 5E 
0B1438 0B 
0B1439 0B 
             1468** 
             1469** ; TRACE ON
             1470** ; TRACE OFF
             1471** ; TRACE line
             1472** ;
0B143A FD    1473** TRACE_EX:			INC     IY
0B143B 23 
0B143C 21    1474** LD      HL,0
0B143D 00 
0B143E 00 
0B143F 00 
0B1440 FE    1475** CP      TON
0B1441 EE 
0B1442 28    1476** JR      Z,TRACE0
0B1443 0B 
0B1444 FE    1477** CP      OFF_
0B1445 87 
0B1446 28    1478** JR      Z,TRACE1
0B1447 08 
0B1448 FD    1479** DEC     IY
0B1449 2B 
0B144A CD    1480** CALL    EXPRI
0B144B D2 
0B144C 02 
0B144D 0B 
0B144E D9    1481** EXX
0B144F 2B    1482** TRACE0:			DEC     HL
0B1450 22    1483** TRACE1:			LD      (TRACEN),HL
0B1451 26 
0B1452 56 
0B1453 0B 
0B1454 C3    1484** JP      XEQ
0B1455 5E 
0B1456 0B 
0B1457 0B 
             1485** 
             1486** ; VDU expr,expr;....
             1487** ;
             1488** ; BEGIN MISSING FROM BINARY
             1489** ; VDU:			LD	IX,BUFFER		; Storage for the VDU stream
             1490** ; VDU1:			PUSH	IX
             1491** ; 			CALL    EXPRI			; Fetch the VDU character
             1492** ; 			POP	IX
             1493** ; 			EXX
             1494** ; 			LD	(IX+0),L		; Write out the character to the buffer
             1495** ; 			INC	IX
             1496** ; 			LD      A,(IY)			;  A: The separator character
             1497** ; 			CP      ','			; Is it a comma?
             1498** ; 			JR      Z,VDU2			; Yes, so it's a byte value - skip to next expression
             1499** ; 			CP      ';'			; Is it a semicolon?
             1500** ; 			JR      NZ,VDU3			; No, so skip to the next expression
             1501** ; 			LD	(IX+0),H		; Write out the high byte to the buffer
             1502** ; 			INC	IX
             1503** ; VDU2:			INC     IY			; Skip to the next character
             1504** ; VDU3:			CALL    TERMQ			; Skip past white space
             1505** ; 			JR      NZ,VDU1			; Loop unti reached end of the VDU command
             1506** ; 			LD	A,IXL			;  A: Number of bytes to write out
             1507** ; 			OR	A
             1508** ; 			JR 	Z,VDU4			; No bytes to write, so skip the next bit
             1509** ; 			LD	HL,BUFFER		; HL: Start of stream
             1510** ; 			LD	BC,0
             1511** ; 			LD	C,A			; BC: Number of bytes to write out
             1512** ; 			RST.LIL	18h			; Output the buffer to MOS
             1513** ; END MISSING FROM BINARY
             1514** ; BEGIN ADDED FROM BINARY
             1515** VDU:
0B1458 CD    1516** call EXPRI
0B1459 D2 
0B145A 02 
0B145B 0B 
0B145C D9    1517** exx
0B145D 7D    1518** ld a,l
0B145E CD    1519** call OSWRCH
0B145F C8 
0B1460 3E 
0B1461 0B 
0B1462 FD    1520** ld a,(iy)
0B1463 7E 
0B1464 00 
0B1465 FE    1521** cp $2c
0B1466 2C 
0B1467 28    1522** jr z,$+$0b
0B1468 09 
0B1469 FE    1523** cp $3b
0B146A 3B 
0B146B 20    1524** jr nz,$+$09
0B146C 07 
0B146D 7C    1525** ld a,h
0B146E CD    1526** call OSWRCH
0B146F C8 
0B1470 3E 
0B1471 0B 
0B1472 FD    1527** inc iy
0B1473 23 
0B1474 CD    1528** call TERMQ
0B1475 42 
0B1476 17 
0B1477 0B 
0B1478 20    1529** jr nz,$-$20
0B1479 DE 
             1530** ; END ADDED FROM BINARY
0B147A C3    1531** VDU4:			JP      XEQ
0B147B 5E 
0B147C 0B 
0B147D 0B 
             1532** 
             1533** ; CLOSE channel number
             1534** ;
0B147E CD    1535** CLOSE:			CALL    CHANEL			; Fetch the channel number
0B147F 4E 
0B1480 18 
0B1481 0B 
0B1482 CD    1536** CALL    OSSHUT			; Close the channel
0B1483 F3 
0B1484 42 
0B1485 0B 
0B1486 C3    1537** JP      XEQ
0B1487 5E 
0B1488 0B 
0B1489 0B 
             1538** 
             1539** ; BPUT channel,byte
             1540** ;
0B148A CD    1541** BPUT:			CALL    CHANEL          	; Fetch the channel number
0B148B 4E 
0B148C 18 
0B148D 0B 
0B148E D5    1542** PUSH    DE			; DE: Channel number
0B148F CD    1543** CALL    COMMA			; Skip to the next expression
0B1490 EA 
0B1491 09 
0B1492 0B 
0B1493 CD    1544** CALL    EXPRI           	; Feth the data
0B1494 D2 
0B1495 02 
0B1496 0B 
0B1497 D9    1545** EXX
0B1498 7D    1546** LD      A,L			; A: The byte to write
0B1499 D1    1547** POP     DE
0B149A CD    1548** CALL    OSBPUT			; Write the byte out
0B149B 03 
0B149C 43 
0B149D 0B 
0B149E C3    1549** JP      XEQ
0B149F 5E 
0B14A0 0B 
0B14A1 0B 
             1550** 
             1551** ; CALL address[,var[,var...]]
             1552** ;
             1553** ; Note that the parameter table differs from the Z80 version
             1554** ; Each entry now takes up 4 bytes, not 3, so the table is now:
             1555** ;  -1 byte:  Number of parameters
             1556** ; Then, for each parameter:
             1557** ;  -1 byte:  Parameter type (00h: byte, 04h: word, 05h: real, 80h: fixed string, 81h: dynamic string)
             1558** ;  -3 bytes: Parameter address
             1559** ;
             1560** ; See https://www.bbcbasic.co.uk/bbcbasic/mancpm/bbckey1.html#callparms for more information
             1561** ;
0B14A2 CD    1562** CALL_:			CALL    EXPRI           	; Fetch the address
0B14A3 D2 
0B14A4 02 
0B14A5 0B 
0B14A6 7D    1563** LD	A,L			;  A: MSB of address
0B14A7 D9    1564** EXX
0B14A8 22    1565** LD	(R0+0),HL		; HL: LSW of address
0B14A9 4A 
0B14AA 56 
0B14AB 0B 
0B14AC 32    1566** LD	(R0+2),A
0B14AD 4C 
0B14AE 56 
0B14AF 0B 
0B14B0 06    1567** LD      B,0             	;  B: The parameter counter
0B14B1 00 
0B14B2 11    1568** LD      DE,BUFFER       	; DE: Vector
0B14B3 00 
0B14B4 54 
0B14B5 0B 
             1569** ;
0B14B6 CD    1570** CALL1:			CALL    NXT			; Skip whitespace
0B14B7 38 
0B14B8 0A 
0B14B9 0B 
0B14BA FE    1571** CP      ','			; Check for comma
0B14BB 2C 
0B14BC 20    1572** JR      NZ,CALL2		; If no more parameters, then jump here
0B14BD 1B 
0B14BE FD    1573** INC     IY			; Skip to the next character
0B14BF 23 
0B14C0 04    1574** INC     B			; Increment the parameter count
0B14C1 CD    1575** CALL    NXT			; Skip whitespace
0B14C2 38 
0B14C3 0A 
0B14C4 0B 
0B14C5 C5    1576** PUSH    BC
0B14C6 D5    1577** PUSH    DE
0B14C7 CD    1578** CALL    VAR_
0B14C8 56 
0B14C9 0C 
0B14CA 0B 
0B14CB D1    1579** POP     DE
0B14CC C1    1580** POP     BC
0B14CD 13    1581** INC     DE
0B14CE 12    1582** LD      (DE),A			; Save the parameter type
0B14CF 13    1583** INC     DE
0B14D0 EB    1584** EX      DE,HL
0B14D1 ED    1585** LD	(HL),DE			; Save the parameter address (3 bytes)
0B14D2 1F 
0B14D3 23    1586** INC	HL
0B14D4 23    1587** INC	HL
0B14D5 23    1588** INC	HL
0B14D6 EB    1589** EX      DE,HL
0B14D7 18    1590** JR      CALL1
0B14D8 DD 
             1591** ;
0B14D9 78    1592** CALL2:			LD      A,B
0B14DA 32    1593** LD      (BUFFER),A      	; Save the parameter count
0B14DB 00 
0B14DC 54 
0B14DD 0B 
0B14DE 2A    1594** LD	HL,(R0)			; HL: Address of the code
0B14DF 4A 
0B14E0 56 
0B14E1 0B 
0B14E2 CD    1595** CALL    USR1			; And call it
0B14E3 FC 
0B14E4 14 
0B14E5 0B 
0B14E6 C3    1596** JP      XEQ
0B14E7 5E 
0B14E8 0B 
0B14E9 0B 
             1597** 
             1598** ; USR(address)
             1599** ;
0B14EA CD    1600** USR:			CALL    ITEMI			; Evaluate the expression
0B14EB ED 
0B14EC 02 
0B14ED 0B 
0B14EE 7D    1601** LD	A,L			;  A: MSB of address
0B14EF D9    1602** EXX
0B14F0 22    1603** LD	(R0+0),HL		; HL: LSW of address
0B14F1 4A 
0B14F2 56 
0B14F3 0B 
0B14F4 32    1604** LD	(R0+2),A
0B14F5 4C 
0B14F6 56 
0B14F7 0B 
0B14F8 2A    1605** LD	HL,(R0)			; Get the 24-bit address in HL
0B14F9 4A 
0B14FA 56 
0B14FB 0B 
             1606** ;
0B14FC E5    1607** USR1:			PUSH    HL              	; Address on stack
0B14FD FD    1608** EX      (SP),IY
0B14FE E3 
0B14FF 24    1609** INC     H               	; Check for PAGE &00FFxx
0B1500 B4    1610** OR	H
0B1501 21    1611** LD      HL,USR2         	; Return address
0B1502 6B 
0B1503 15 
0B1504 0B 
0B1505 E5    1612** PUSH    HL
0B1506 DD    1613** LD      IX,STAVAR
0B1507 21 
0B1508 00 
0B1509 55 
0B1509 0B   
0B150B CC    1614** CALL    Z,OSCALL        	; Intercept &00FFxx
0B150C B9 
0B150D 42 
0B150E 0B 
             1615** ;
0B150F DD    1616** LD      C, (IX+24)		; F%
0B1510 4E 
0B1511 18 
0B1512 C5    1617** PUSH    BC
             1618** ;
0B1513 DD    1619** LD	A, (IX+8)		; B% -> MSW
0B1514 7E 
0B1515 08 
0B1516 32    1620** LD	(R0+1), A
0B1517 4B 
0B1518 56 
0B1519 0B 
0B151A DD    1621** LD	A, (IX+9)
0B151B 7E 
0B151C 09 
0B151D 32    1622** LD	(R0+2), A
0B151E 4C 
0B151F 56 
0B1520 0B 
0B1521 DD    1623** LD	A, (IX+12)		; C% -> LSB
0B1522 7E 
0B1523 0C 
0B1524 32    1624** LD	(R0+0), A
0B1525 4A 
0B1526 56 
0B1527 0B 
0B1528 ED    1625** LD	BC, (R0)
0B1529 4B 
0B152A 4A 
0B152B 56 
0B152B 0B   
             1626** ;
0B152D DD    1627** LD	A, (IX+16)		; D% -> MSW
0B152E 7E 
0B152F 10 
0B1530 32    1628** LD	(R0+1), A
0B1531 4B 
0B1532 56 
0B1533 0B 
0B1534 DD    1629** LD	A, (IX+17)
0B1535 7E 
0B1536 11 
0B1537 32    1630** LD	(R0+2), A
0B1538 4C 
0B1539 56 
0B153A 0B 
0B153B DD    1631** LD	A, (IX+20)		; E% -> LSB
0B153C 7E 
0B153D 14 
0B153E 32    1632** LD	(R0+0), A
0B153F 4A 
0B1540 56 
0B1541 0B 
0B1542 ED    1633** LD	DE, (R0)
0B1543 5B 
0B1544 4A 
0B1545 56 
0B1545 0B   
             1634** ;
0B1547 DD    1635** LD	A, (IX+32)		; H% -> MSW
0B1548 7E 
0B1549 20 
0B154A 32    1636** LD	(R0+1), A
0B154B 4B 
0B154C 56 
0B154D 0B 
0B154E DD    1637** LD	A, (IX+33)
0B154F 7E 
0B1550 21 
0B1551 32    1638** LD	(R0+2), A
0B1552 4C 
0B1553 56 
0B1554 0B 
0B1555 DD    1639** LD	A, (IX+48)		; L% -> LSB
0B1556 7E 
0B1557 30 
0B1558 32    1640** LD	(R0+0), A
0B1559 4A 
0B155A 56 
0B155B 0B 
0B155C 2A    1641** LD	HL, (R0)
0B155D 4A 
0B155E 56 
0B155F 0B 
             1642** ;
0B1560 F1    1643** POP     AF			; F%
0B1561 DD    1644** LD      A, (IX+4)        	; A%
0B1562 7E 
0B1563 04 
             1645** 
0B1564 DD    1646** LD      IX,BUFFER
0B1565 21 
0B1566 00 
0B1567 54 
0B1567 0B   
0B1569 FD    1647** JP      (IY)            	; Off to user routine
0B156A E9 
             1648** ;
0B156B FD    1649** USR2:			POP     IY
0B156C E1 
0B156D AF    1650** XOR     A
0B156E 4F    1651** LD      C,A
0B156F C9    1652** RET
             1653** 
             1654** ; PUT port,data
             1655** ;
0B1570 CD    1656** PUT:			CALL    EXPRI           ;PORT ADDRESS
0B1571 D2 
0B1572 02 
0B1573 0B 
0B1574 D9    1657** EXX
0B1575 E5    1658** PUSH    HL
0B1576 CD    1659** CALL    COMMA
0B1577 EA 
0B1578 09 
0B1579 0B 
0B157A CD    1660** CALL    EXPRI           ;DATA
0B157B D2 
0B157C 02 
0B157D 0B 
0B157E D9    1661** EXX
0B157F C1    1662** POP     BC
0B1580 ED    1663** OUT     (C),L           ;OUTPUT TO PORT BC
0B1581 69 
0B1582 C3    1664** JP      XEQ
0B1583 5E 
0B1584 0B 
0B1585 0B 
             1665** 
             1666** ; SUBROUTINES -----------------------------------------------------------------
             1667** 
             1668** ; ASSIGN - Assign a numeric value to a variable.
             1669** ; Outputs: NC,  Z - OK, numeric.
             1670** ;          NC, NZ - OK, string.
             1671** ;           C, NZ - illegal
             1672** ;
0B1586 CD    1673** ASSIGN:			CALL    GETVAR          	; Try to get the variable
0B1587 02 
0B1588 3A 
0B1589 0B 
0B158A D8    1674** RET     C               	; Return with C if it is an illegal variable
0B158B C4    1675** CALL    NZ,PUTVAR		; If it does not exist, then create the variable
0B158C F1 
0B158D 39 
0B158E 0B 
0B158F B7    1676** OR      A
0B1590 F8    1677** RET     M               	; Return if type is string (81h)
0B1591 F5    1678** PUSH    AF              	; It's a numeric type from this point on
0B1592 CD    1679** CALL    EQUALS			; Check if the variable is followed by an '=' symbol; this will throw a 'Mistake' error if not
0B1593 58 
0B1594 17 
0B1595 0B 
0B1596 E5    1680** PUSH    HL
0B1597 CD    1681** CALL    EXPRN
0B1598 CA 
0B1599 02 
0B159A 0B 
0B159B DD    1682** POP     IX
0B159C E1 
0B159D F1    1683** POP     AF
0B159E CB    1684** STORE:			BIT     0,A
0B159F 47 
0B15A0 28    1685** JR      Z,STOREI
0B15A1 13 
0B15A2 BF    1686** CP      A               	; Set the variable to 0
0B15A3 DD    1687** STORE5:			LD      (IX+4),C
0B15A4 71 
0B15A5 04 
0B15A6 D9    1688** STORE4:			EXX
0B15A7 DD    1689** LD      (IX+0),L
0B15A8 75 
0B15A9 00 
0B15AA DD    1690** LD      (IX+1),H
0B15AB 74 
0B15AC 01 
0B15AD D9    1691** EXX
0B15AE DD    1692** LD      (IX+2),L
0B15AF 75 
0B15B0 02 
0B15B1 DD    1693** LD      (IX+3),H
0B15B2 74 
0B15B3 03 
0B15B4 C9    1694** RET
0B15B5 F5    1695** STOREI:			PUSH    AF
0B15B6 0C    1696** INC     C               ;SPEED - & PRESERVE F'
0B15B7 0D    1697** DEC     C               ; WHEN CALLED BY FNEND0
0B15B8 C4    1698** CALL    NZ,SFIX         ;CONVERT TO INTEGER
0B15B9 2A 
0B15BA 06 
0B15BB 0B 
0B15BC F1    1699** POP     AF
0B15BD FE    1700** CP      4
0B15BE 04 
0B15BF 28    1701** JR      Z,STORE4
0B15C0 E5 
0B15C1 BF    1702** CP      A               ;SET ZERO
0B15C2 D9    1703** STORE1:			EXX
0B15C3 DD    1704** LD      (IX+0),L
0B15C4 75 
0B15C5 00 
0B15C6 D9    1705** EXX
0B15C7 C9    1706** RET
             1707** ;
             1708** ; Copy a string from the string accumulator to variable storage on the stack
             1709** ; Parameters:
             1710** ; - AF: The variable type (should be 81h for a string, 80h for a fixed/static string)
             1711** ; - IX: Address of the variable storage on the stack
             1712** ;
0B15C8 21    1713** STACCS:			LD      HL,ACCS			; HL: Pointer to the string accumulator
0B15C9 00 
0B15CA 53 
0B15CB 0B 
             1714** ;
             1715** ; Parameters:
             1716** ; As above, but:
             1717** ; - HL: Address of the string to be stored
             1718** ; -  E: The string length
             1719** ; NB:
             1720** ; Strings are mutable
             1721** ; Strings are stored in the following format in the variable:
             1722** ; - Address of the next variable (3 bytes)
             1723** ; - The rest of the variable name - this is zero terminated
             1724** ; - Current string length (byte)
             1725** ; - Maximum (original) string length (byte)
             1726** ; - String start address (3 bytes for BBC BASIC for eZ80, 2 bytes for standard BBC BASIC for Z80)
             1727** ; See https://www.bbcbasic.co.uk/bbcbasic/mancpm/annexd.html#string for more details
             1728** ;
0B15CC 1F    1729** STORES:			RRA				; Rotate right to shift bit 0 into carry
0B15CD 30    1730** JR      NC,STORS3		; It's a fixed/static string, so skip the next bit
0B15CE 5D 
0B15CF E5    1731** PUSH    HL			; Stack ACCS
             1732** ;
             1733** ; Load the string pointer and lengths into registers - these are all zeroed for new strings
             1734** ;
0B15D0 D9    1735** EXX				; This block was a call to LOAD4
0B15D1 DD    1736** LD      L,(IX+0)		; The length of the string currently stored in the allocated space
0B15D2 6E 
0B15D3 00 
0B15D4 DD    1737** LD      H,(IX+1)		; The maximum original string length
0B15D5 66 
0B15D6 01 
0B15D7 D9    1738** EXX
0B15D8 DD    1739** LD	HL,(IX+2)		; Address of the string (24-bit)
0B15D9 27 
0B15DA 02 
             1740** ;
0B15DB 7B    1741** LD      A,E             	; E : Length of string in ACCS (as passed to the function)
0B15DC D9    1742** EXX
0B15DD 6F    1743** LD      L,A			; L': Length of string currently stored on the stack
0B15DE 7C    1744** LD      A,H             	; H': The maximum (original) string length
0B15DF D9    1745** EXX
0B15E0 BB    1746** CP      E			; Check whether there is enough room for the string in ACCS in the allocated space
0B15E1 30    1747** JR      NC,STORS1       	; Yes there is, so skip the next bit
0B15E2 17 
             1748** ;
             1749** ; At this point we're either initialising a new string or assigning more memory to an existing string
             1750** ; Note that there is no garbage collection here, so if a string is reassigned and the new string is longer
             1751** ; then the existing and new strings may both exist in memory.
             1752** ;
0B15E3 D9    1753** EXX
0B15E4 65    1754** LD      H,L			; H: Set the maximum string length to the string length
0B15E5 D9    1755** EXX
0B15E6 E5    1756** PUSH    HL
0B15E7 01    1757** LD	BC, 0
0B15E8 00 
0B15E9 00 
0B15EA 00 
0B15EB 4F    1758** LD      C,A			; BC: The maximum (original) string length
0B15EC 09    1759** ADD     HL,BC			; Work out whether this is the last string in memory
0B15ED ED    1760** LD      BC,(FREE)
0B15EE 4B 
0B15EF 1D 
0B15F0 56 
0B15F0 0B   
0B15F2 ED    1761** SBC     HL,BC			; Is string last?
0B15F3 42 
0B15F4 E1    1762** POP     HL
0B15F5 37    1763** SCF
0B15F6 28    1764** JR      Z,STORS1
0B15F7 02 
             1765** ; LD	HL, BC			; HL=BC
0B15F8 C5    1766** push bc
0B15F9 E1    1767** pop hl
             1768** ;
             1769** ; At this point carry flag will be clear if the string can be replaced in memory, otherwise will be set
             1770** ; - H': The maximum (original) string length
             1771** ; - L': The actual string length (must be less than H')
             1772** ; - HL: Address of the string in memory
             1773** ;
0B15FA D9    1774** STORS1:			EXX				; This block was a call to STORE4
0B15FB DD    1775** LD      (IX+0),L		; The actual string length (must be less then H')
0B15FC 75 
0B15FD 00 
0B15FE DD    1776** LD      (IX+1),H		; The maximum (original) string length
0B15FF 74 
0B1600 01 
0B1601 D9    1777** EXX
0B1602 DD    1778** LD	(IX+2),HL		; The pointer to the original string
0B1603 2F 
0B1604 02 
             1779** ;
0B1605 01    1780** LD	BC, 0
0B1606 00 
0B1607 00 
0B1608 00 
0B1609 4B    1781** LD      C,E			; BC: The new string length
0B160A EB    1782** EX      DE,HL
0B160B E1    1783** POP     HL
0B160C 0D    1784** DEC     C			; Strings can only be 255 bytes long, so this is a quick way to
0B160D 0C    1785** INC     C			; check whether BC is 0 without affecting the carry flag
0B160E C8    1786** RET     Z               	; It is, so it's a NULL string, don't need to do anything else here
0B160F ED    1787** LDIR				; Replace the string in memory
0B1610 B0 
0B1611 D0    1788** RET     NC
0B1612 ED    1789** LD      (FREE),DE		; Set the new value of FREE and fall through to CHECK
0B1613 53 
0B1614 1D 
0B1615 56 
0B1615 0B   
             1790** ;
             1791** ; Check whether the stack is full
             1792** ;
0B1617 E5    1793** CHECK:			PUSH    HL
0B1618 C5    1794** PUSH	BC
0B1619 2A    1795** LD      HL,(FREE)		; HL: Address of first free space byte
0B161A 1D 
0B161B 56 
0B161C 0B 
0B161D 01    1796** LD	BC,100h			; BC: One page of memory
0B161E 00 
0B161F 01 
0B1620 00 
0B1621 09    1797** ADD	HL,BC			; Add a page to FREE
0B1622 ED    1798** SBC     HL,SP			; And subtract the current SP
0B1623 72 
0B1624 C1    1799** POP	BC
0B1625 E1    1800** POP     HL
0B1626 D8    1801** RET     C			; The SP is not in the same page, so just return
0B1627 AF    1802** XOR     A			; Otherwise
0B1628 C3    1803** JP      ERROR_			; Throw error "No room"
0B1629 28 
0B162A 37 
0B162B 0B 
             1804** ;
0B162C 01    1805** STORS3:			LD	BC,0
0B162D 00 
0B162E 00 
0B162F 00 
0B1630 4B    1806** LD      C,E			; BC: String length
0B1631 DD    1807** PUSH    IX
0B1632 E5 
0B1633 D1    1808** POP     DE			; DE: Destination
0B1634 AF    1809** XOR     A			; Check if string length is 0
0B1635 B9    1810** CP      C
0B1636 28    1811** JR      Z,STORS5		; Yes, so don't copy
0B1637 02 
0B1638 ED    1812** LDIR
0B1639 B0 
0B163A 3E    1813** STORS5:			LD      A,CR			; Finally add the terminator
0B163B 0D 
0B163C 12    1814** LD      (DE),A
0B163D C9    1815** RET
             1816** 
             1817** ; ARGUE: TRANSFER FN OR PROC ARGUMENTS FROM THE
             1818** ;  CALLING STATEMENT TO THE DUMMY VARIABLES VIA
             1819** ;  THE STACK.  IT MUST BE DONE THIS WAY TO MAKE
             1820** ;  PROCFRED(A,B)    DEF PROCFRED(B,A)     WORK.
             1821** ;    Inputs: DE addresses parameter list
             1822** ;            IY addresses dummy variable list
             1823** ;   Outputs: DE,IY updated
             1824** ;  Destroys: Everything
             1825** ;
0B163E 3E    1826** ARGUE:			LD      A,-1
0B163F FF 
0B1640 F5    1827** PUSH    AF              	; Put marker on the stack
0B1641 FD    1828** ARGUE1:			INC     IY              	; Bump past '(' or ',''
0B1642 23 
0B1643 13    1829** INC     DE
0B1644 D5    1830** PUSH    DE
0B1645 CD    1831** CALL    NXT			; Skip any whitespace
0B1646 38 
0B1647 0A 
0B1648 0B 
0B1649 CD    1832** CALL    GETVAR			; Get the location of the variable in HL/IX
0B164A 02 
0B164B 3A 
0B164C 0B 
0B164D 38    1833** JR      C,ARGERR		; If the parameter contains an illegal character then throw an error
0B164E 3F 
0B164F C4    1834** CALL    NZ,PUTVAR
0B1650 F1 
0B1651 39 
0B1652 0B 
0B1653 D1    1835** POP     DE
0B1654 E5    1836** PUSH    HL              	; VARPTR
0B1655 B7    1837** OR      A               	; Check the variable type
0B1656 F5    1838** PUSH    AF
0B1657 D5    1839** PUSH    DE
0B1658 FD    1840** EX      (SP),IY
0B1659 E3 
0B165A FA    1841** JP      M,ARGUE2        	; Jump here if it is a string
0B165B 72 
0B165C 16 
0B165D 0B 
             1842** ;
0B165E CD    1843** CALL    EXPRN           	; At this point it is numeric, so get the numeric expression value
0B165F CA 
0B1660 02 
0B1661 0B 
0B1662 FD    1844** EX      (SP),IY
0B1663 E3 
0B1664 D1    1845** POP     DE
0B1665 F1    1846** POP     AF
0B1666 D9    1847** EXX
0B1667 E5    1848** PUSH    HL
0B1668 D9    1849** EXX
0B1669 E5    1850** PUSH    HL
0B166A 47    1851** LD      B,A
0B166B C5    1852** PUSH    BC
0B166C CD    1853** CALL    CHECK           	; Check room
0B166D 17 
0B166E 16 
0B166F 0B 
0B1670 18    1854** JR      ARGUE4
0B1671 0F 
             1855** ;
0B1672 CD    1856** ARGUE2:			CALL    EXPRS			; At this point it is a string variable, so get the string expression value
0B1673 DD 
0B1674 02 
0B1675 0B 
0B1676 FD    1857** EX      (SP),IY
0B1677 E3 
0B1678 D9    1858** EXX
0B1679 D1    1859** POP     DE
0B167A D9    1860** EXX
0B167B F1    1861** POP     AF
0B167C CD    1862** CALL    PUSHS
0B167D 7C 
0B167E 09 
0B167F 0B 
0B1680 D9    1863** EXX
             1864** ;
0B1681 CD    1865** ARGUE4:			CALL    NXT			; Skip whitespace
0B1682 38 
0B1683 0A 
0B1684 0B 
0B1685 FE    1866** CP      ','			; Check to see if the next value is a comma
0B1686 2C 
0B1687 20    1867** JR      NZ,ARGUE5		; No, so jump here
0B1688 0B 
0B1689 1A    1868** LD      A,(DE)
0B168A FE    1869** CP      ','			; Are there any more arguments?
0B168B 2C 
0B168C 28    1870** JR      Z,ARGUE1        	; Yes, so loop
0B168D B3 
             1871** ;
0B168E 3E    1872** ARGERR:			LD      A,31
0B168F 1F 
0B1690 C3    1873** JP      ERROR_           	; Throw error "Arguments"
0B1691 28 
0B1692 37 
0B1693 0B 
             1874** ;
0B1694 CD    1875** ARGUE5:			CALL    BRAKET			; Check for end bracket (throws an error if missing)
0B1695 F7 
0B1696 09 
0B1697 0B 
0B1698 1A    1876** LD      A,(DE)
0B1699 FE    1877** CP      ')'
0B169A 29 
0B169B 20    1878** JR      NZ,ARGERR
0B169C F1 
0B169D 13    1879** INC     DE
0B169E D9    1880** EXX
0B169F C1    1881** ARGUE6:			POP     BC
0B16A0 78    1882** LD      A,B
0B16A1 3C    1883** INC     A
0B16A2 D9    1884** EXX
0B16A3 C8    1885** RET     Z               	; Marker popped
0B16A4 D9    1886** EXX
0B16A5 3D    1887** DEC     A
0B16A6 FA    1888** JP      M,ARGUE7        	; If it is a string, then jump here
0B16A7 B6 
0B16A8 16 
0B16A9 0B 
0B16AA E1    1889** POP     HL
0B16AB D9    1890** EXX
0B16AC E1    1891** POP     HL
0B16AD D9    1892** EXX
0B16AE DD    1893** POP     IX
0B16AF E1 
0B16B0 CD    1894** CALL    STORE	           	; Write to dummy variable
0B16B1 9E 
0B16B2 15 
0B16B3 0B 
0B16B4 18    1895** JR      ARGUE6
0B16B5 E9 
             1896** ;
0B16B6 CD    1897** ARGUE7:			CALL    POPS
0B16B7 A6 
0B16B8 09 
0B16B9 0B 
0B16BA DD    1898** POP     IX
0B16BB E1 
0B16BC CD    1899** CALL    STACCS
0B16BD C8 
0B16BE 15 
0B16BF 0B 
0B16C0 18    1900** JR      ARGUE6
0B16C1 DD 
             1901** 
             1902** ; SAVLOC: SUBROUTINE TO STACK LOCAL PARAMETERS
             1903** ;   OF A FUNCTION OR PROCEDURE.
             1904** ; THERE IS A LOT OF STACK MANIPULATION - CARE!!
             1905** ;    Inputs: IY is parameters pointer
             1906** ;   Outputs: IY updated
             1907** ;  Destroys: A,B,C,D,E,H,L,IX,IY,F,SP
             1908** ;
0B16C2 D1    1909** SAVLOC:			POP     DE              	; DE: Return address (from the CALL)
             1910** ;
0B16C3 FD    1911** SAVLO1:			INC     IY              	; Bump past '(' or ','
0B16C4 23 
0B16C5 CD    1912** CALL    NXT			; And also any whitespace
0B16C6 38 
0B16C7 0A 
0B16C8 0B 
0B16C9 D5    1913** PUSH    DE			; Push the return address back onto the stack
0B16CA D9    1914** EXX
0B16CB C5    1915** PUSH    BC
0B16CC D5    1916** PUSH    DE
0B16CD E5    1917** PUSH    HL
0B16CE D9    1918** EXX
0B16CF CD    1919** CALL    VAR_             	; Dummy variable
0B16D0 56 
0B16D1 0C 
0B16D2 0B 
0B16D3 D9    1920** EXX
0B16D4 E1    1921** POP     HL
0B16D5 D1    1922** POP     DE
0B16D6 C1    1923** POP     BC
0B16D7 D9    1924** EXX
0B16D8 D1    1925** POP     DE
0B16D9 B7    1926** OR      A               	; Check the variable type
0B16DA FA    1927** JP      M,SAVLO2        	; 80h = string, so jump to save a local string
0B16DB ED 
0B16DC 16 
0B16DD 0B 
0B16DE D9    1928** EXX
0B16DF E5    1929** PUSH    HL              	; Save H'L'
0B16E0 D9    1930** EXX
0B16E1 47    1931** LD      B,A             	;  B: Variable type
0B16E2 CD    1932** CALL    LOADN
0B16E3 DE 
0B16E4 03 
0B16E5 0B 
0B16E6 D9    1933** EXX
0B16E7 E3    1934** EX      (SP),HL
0B16E8 D9    1935** EXX
0B16E9 E5    1936** PUSH    HL
0B16EA C5    1937** PUSH    BC
0B16EB 18    1938** JR      SAVLO4
0B16EC 2D 
             1939** ;
0B16ED F5    1940** SAVLO2:			PUSH    AF              	; Save the type (string)
0B16EE D5    1941** PUSH    DE
0B16EF D9    1942** EXX
0B16F0 E5    1943** PUSH    HL
0B16F1 D9    1944** EXX
0B16F2 CD    1945** CALL    LOADS
0B16F3 68 
0B16F4 04 
0B16F5 0B 
0B16F6 D9    1946** EXX
0B16F7 E1    1947** POP     HL
0B16F8 D9    1948** EXX
0B16F9 01    1949** LD	BC,0
0B16FA 00 
0B16FB 00 
0B16FC 00 
0B16FD 4B    1950** LD      C,E			; BC: String length
0B16FE D1    1951** POP     DE
0B16FF CD    1952** CALL    CHECK			; Check if there is space on the stack
0B1700 17 
0B1701 16 
0B1702 0B 
0B1703 F1    1953** POP     AF              	; Level stack
0B1704 21    1954** LD      HL,0
0B1705 00 
0B1706 00 
0B1707 00 
0B1708 ED    1955** SBC     HL,BC			; HL: Number of bytes required on the stack for the string
0B1709 42 
0B170A 39    1956** ADD     HL,SP			; Make space for the string on the stack
0B170B F9    1957** LD      SP,HL
0B170C 47    1958** LD      B,A             	;  B: Variable type
0B170D C5    1959** PUSH    BC
0B170E 28    1960** JR      Z,SAVLO4
0B170F 0A 
0B1710 D5    1961** PUSH    DE
0B1711 11    1962** LD      DE,ACCS
0B1712 00 
0B1713 53 
0B1714 0B 
0B1715 EB    1963** EX      DE,HL
0B1716 45    1964** LD      B,L
0B1717 ED    1965** LDIR                    	; Save the string onto the stack
0B1718 B0 
0B1719 D1    1966** POP     DE
             1967** ;
0B171A DD    1968** SAVLO4:			PUSH    IX			; VARPTR
0B171B E5 
0B171C CD    1969** CALL    SAVLO5
0B171D 20 
0B171E 17 
0B171F 0B 
             1970** LOCCHK:			EQU     $
0B1720 CD    1971** SAVLO5:			CALL    CHECK
0B1721 17 
0B1722 16 
0B1723 0B 
0B1724 CD    1972** CALL    NXT
0B1725 38 
0B1726 0A 
0B1727 0B 
0B1728 FE    1973** CP      ','             	; Are there any more local variables?
0B1729 2C 
0B172A 28    1974** JR      Z,SAVLO1		; Yes, so loop
0B172B 97 
0B172C EB    1975** EX      DE,HL			; DE -> HL: The return address
0B172D E9    1976** JP      (HL)            	; And effectvely return
             1977** ;
0B172E FD    1978** DELIM:			LD      A,(IY)          	; Assembler delimiter
0B172F 7E 
0B1730 00 
0B1731 FE    1979** CP      ' '
0B1732 20 
0B1733 C8    1980** RET     Z
0B1734 FE    1981** CP      ','
0B1735 2C 
0B1736 C8    1982** RET     Z
0B1737 FE    1983** CP      ')'
0B1738 29 
0B1739 C8    1984** RET     Z
0B173A FE    1985** TERM:			CP      ';'             	; Assembler terminator
0B173B 3B 
0B173C C8    1986** RET     Z
0B173D FE    1987** CP      '\'
0B173E 5C 
0B173F C8    1988** RET     Z
0B1740 18    1989** JR      TERM0
0B1741 07 
             1990** ;
0B1742 CD    1991** TERMQ:			CALL    NXT
0B1743 38 
0B1744 0A 
0B1745 0B 
0B1746 FE    1992** CP      ELSE_EX_
0B1747 8B 
0B1748 D0    1993** RET     NC
0B1749 FE    1994** TERM0:			CP      ':'             	; Assembler seperator
0B174A 3A 
0B174B D0    1995** RET     NC
0B174C FE    1996** CP      CR
0B174D 0D 
0B174E C9    1997** RET
             1998** ;
0B174F CD    1999** SPAN:			CALL    TERMQ
0B1750 42 
0B1751 17 
0B1752 0B 
0B1753 C8    2000** RET     Z
0B1754 FD    2001** INC     IY
0B1755 23 
0B1756 18    2002** JR      SPAN
0B1757 F7 
             2003** ;
             2004** ; This snippet is used to check whether an expression is followed by an '=' symbol
             2005** ;
0B1758 CD    2006** EQUALS:			CALL    NXT			; Skip whitespace
0B1759 38 
0B175A 0A 
0B175B 0B 
0B175C FD    2007** INC     IY			; Skip past the character in question
0B175D 23 
0B175E FE    2008** CP      '='			; Is it '='
0B175F 3D 
0B1760 C8    2009** RET     Z			; Yes, so return
0B1761 3E    2010** LD      A,4			; Otherwise
0B1762 04 
0B1763 C3    2011** JP      ERROR_           	; Throw error "Mistake"
0B1764 28 
0B1765 37 
0B1766 0B 
             2012** ;
0B1767 FE    2013** FORMAT:			CP      TAB
0B1768 8A 
0B1769 28    2014** JR      Z,DOTAB
0B176A 0D 
0B176B FE    2015** CP      SPC
0B176C 89 
0B176D 28    2016** JR      Z,DOSPC
0B176E 40 
0B176F FE    2017** CP      '''
0B1770 27 
0B1771 C0    2018** RET     NZ
0B1772 CD    2019** CALL    CRLF
0B1773 0F 
0B1774 39 
0B1775 0B 
0B1776 AF    2020** XOR     A
0B1777 C9    2021** RET
             2022** ;
0B1778 C5    2023** DOTAB:			PUSH    BC
0B1779 CD    2024** CALL    EXPRI
0B177A D2 
0B177B 02 
0B177C 0B 
0B177D D9    2025** EXX
0B177E C1    2026** POP     BC
0B177F FD    2027** LD      A,(IY)
0B1780 7E 
0B1781 00 
0B1782 FE    2028** CP      ','
0B1783 2C 
0B1784 28    2029** JR      Z,DOTAB1
0B1785 14 
0B1786 CD    2030** CALL    BRAKET
0B1787 F7 
0B1788 09 
0B1789 0B 
0B178A 7D    2031** LD      A,L
0B178B 21    2032** TABIT:			LD      HL,COUNT
0B178C 3D 
0B178D 56 
0B178E 0B 
0B178F BE    2033** CP      (HL)
0B1790 C8    2034** RET     Z
0B1791 F5    2035** PUSH    AF
0B1792 DC    2036** CALL    C,CRLF
0B1793 0F 
0B1794 39 
0B1795 0B 
0B1796 F1    2037** POP     AF
0B1797 96    2038** SUB     (HL)
0B1798 18    2039** JR      FILL
0B1799 1D 
0B179A FD    2040** DOTAB1:			INC     IY
0B179B 23 
0B179C C5    2041** PUSH    BC
0B179D E5    2042** PUSH    HL
0B179E CD    2043** CALL    EXPRI
0B179F D2 
0B17A0 02 
0B17A1 0B 
0B17A2 D9    2044** EXX
0B17A3 D1    2045** POP     DE
0B17A4 C1    2046** POP     BC
0B17A5 CD    2047** CALL    BRAKET
0B17A6 F7 
0B17A7 09 
0B17A8 0B 
0B17A9 CD    2048** CALL    PUTCSR
0B17AA 89 
0B17AB 3E 
0B17AC 0B 
0B17AD AF    2049** XOR     A
0B17AE C9    2050** RET
             2051** ;
0B17AF C5    2052** DOSPC:			PUSH    BC
0B17B0 CD    2053** CALL    ITEMI
0B17B1 ED 
0B17B2 02 
0B17B3 0B 
0B17B4 D9    2054** EXX
0B17B5 7D    2055** LD      A,L
0B17B6 C1    2056** POP     BC
0B17B7 B7    2057** FILL:			OR      A
0B17B8 C8    2058** RET     Z
0B17B9 C5    2059** PUSH    BC
0B17BA 47    2060** LD      B,A
0B17BB 3E    2061** FILL1:			LD      A,' '
0B17BC 20 
0B17BD CD    2062** CALL    OUTCHR
0B17BE 17 
0B17BF 39 
0B17C0 0B 
0B17C1 10    2063** DJNZ    FILL1
0B17C2 F8 
0B17C3 C1    2064** POP     BC
0B17C4 AF    2065** XOR     A
0B17C5 C9    2066** RET
             2067** ;
0B17C6 21    2068** PTEXT:			LD      HL,ACCS
0B17C7 00 
0B17C8 53 
0B17C9 0B 
0B17CA 1C    2069** INC     E
0B17CB 1D    2070** PTEXT1:			DEC     E
0B17CC C8    2071** RET     Z
0B17CD 7E    2072** LD      A,(HL)
0B17CE 23    2073** INC     HL
0B17CF CD    2074** CALL    OUTCHR
0B17D0 17 
0B17D1 39 
0B17D2 0B 
0B17D3 18    2075** JR      PTEXT1
0B17D4 F6 
             2076** ;
0B17D5 F5    2077** FETCHS:			PUSH    AF
0B17D6 C5    2078** PUSH    BC
0B17D7 E5    2079** PUSH    HL
0B17D8 FD    2080** EX      (SP),IY
0B17D9 E3 
0B17DA CD    2081** CALL    XTRACT
0B17DB F5 
0B17DC 17 
0B17DD 0B 
0B17DE CD    2082** CALL    NXT
0B17DF 38 
0B17E0 0A 
0B17E1 0B 
0B17E2 FD    2083** EX      (SP),IY
0B17E3 E3 
0B17E4 E1    2084** POP     HL
0B17E5 C1    2085** POP     BC
0B17E6 F1    2086** POP     AF
0B17E7 C9    2087** RET
             2088** ;
0B17E8 11    2089** LINES:			LD      DE,ACCS
0B17E9 00 
0B17EA 53 
0B17EB 0B 
0B17EC 7E    2090** LINE1S:			LD      A,(HL)
0B17ED 12    2091** LD      (DE),A
0B17EE FE    2092** CP      CR
0B17EF 0D 
0B17F0 C8    2093** RET     Z
0B17F1 23    2094** INC     HL
0B17F2 1C    2095** INC     E
0B17F3 18    2096** JR      LINE1S
0B17F4 F7 
             2097** ;
0B17F5 CD    2098** XTRACT:			CALL    NXT
0B17F6 38 
0B17F7 0A 
0B17F8 0B 
0B17F9 FE    2099** CP      '"'
0B17FA 22 
0B17FB FD    2100** INC     IY
0B17FC 23 
0B17FD CA    2101** JP      Z,CONS
0B17FE 2F 
0B17FF 04 
0B1800 0B 
0B1801 FD    2102** DEC     IY
0B1802 2B 
0B1803 11    2103** LD      DE,ACCS
0B1804 00 
0B1805 53 
0B1806 0B 
0B1807 FD    2104** XTRAC1:			LD      A,(IY)
0B1808 7E 
0B1809 00 
0B180A 12    2105** LD      (DE),A
0B180B FE    2106** CP      ','
0B180C 2C 
0B180D C8    2107** RET     Z
0B180E FE    2108** CP      CR
0B180F 0D 
0B1810 C8    2109** RET     Z
0B1811 FD    2110** INC     IY
0B1812 23 
0B1813 1C    2111** INC     E
0B1814 18    2112** JR      XTRAC1
0B1815 F1 
             2113** 
             2114** ; Search for a token at the start of a program line
             2115** ; - HL: Pointer to the start of a tokenised line in the program area
             2116** ; Returns:
             2117** ; - HL: Pointer to the
             2118** ; -  F: Carry set if not found
             2119** ; Corrupts:
             2120** ; - BC
             2121** ;
0B1816 01    2122** SEARCH_EX:			LD      BC,0			; Clear BC
0B1817 00 
0B1818 00 
0B1819 00 
             2123** ;
0B181A 4E    2124** SRCH1_EX:			LD      C,(HL)			;  C: Fetch the line length
0B181B 0C    2125** INC     C			; Check for 0, i.e. end of program marker
0B181C 0D    2126** DEC     C
0B181D 28    2127** JR      Z,SRCH2_EX         	; Not found the token, so end
0B181E 0B 
0B181F 23    2128** INC     HL			; Skip the line length and line number
0B1820 23    2129** INC     HL
0B1821 23    2130** INC     HL
0B1822 BE    2131** CP      (HL)			; Compare with the token
0B1823 C8    2132** RET     Z			; Found it, so return with carry not set
0B1824 0D    2133** DEC     C			; Skip to the next line
0B1825 0D    2134** DEC     C
0B1826 0D    2135** DEC     C
0B1827 09    2136** ADD     HL,BC
0B1828 18    2137** JR      SRCH1_EX			; Rinse, lather and repeat
0B1829 F0 
             2138** ;
0B182A 2B    2139** SRCH2_EX:			DEC     HL              	; Token not found, so back up to the CR at the end of the last line
0B182B 37    2140** SCF				; And set the carry flag
0B182C C9    2141** RET
             2142** 
             2143** ; Multiply by 4 or 5
             2144** ; This function is used to allocate space for dimensioned variables
             2145** ; This is a 24-bit operation
             2146** ; - DE: Number to multiple
             2147** ; -  A: 04h (Integer) - takes up 4 bytes
             2148** ;       05h (Float)   - takes up 5 bytes
             2149** ;       81h (String)  - takes up 5 bytes - this is different from BBC BASIC for Z80 where strings only take up 4 bytes
             2150** ; Returns:
             2151** ; - DE: Multiplied by 4 if A = 4, otherwise multiplies by 5
             2152** ; -  F: Carry if overflow
             2153** ; Corrupts:
             2154** ; - HL
0B182D FE    2155** X4OR5:			CP      4			; Check A = 4 (Z flag is used later)
0B182E 04 
             2156** ; LD	HL,DE
0B182F D5    2157** push de
0B1830 E1    2158** pop hl
0B1831 29    2159** ADD     HL,HL			; Multiply by 2 (note this operation preserves the zero flag)
0B1832 D8    2160** RET     C			; Exit if overflow
0B1833 29    2161** ADD     HL,HL			; Multiply by 2 again
0B1834 D8    2162** RET     C			; Exit if overflow
0B1835 EB    2163** EX      DE,HL			; DE: Product
0B1836 C8    2164** RET     Z			; Exit if A = 4
0B1837 19    2165** ADD     HL,DE			; Add original value to HL (effectively multiplying by 5)
0B1838 EB    2166** EX      DE,HL			; DE: Product
0B1839 C9    2167** RET
             2168** 
             2169** ; 16-bit unsigned multiply
             2170** ; - HL: Operand 1
             2171** ; - BC: Operand 2
             2172** ; Returns:
             2173** ; - HL: Result
             2174** ; -  F: C if overflow
             2175** ;
0B183A C5    2176** MUL16:			PUSH	BC
0B183B 51    2177** LD	D, C			; Set up the registers for the multiplies
0B183C 5D    2178** LD	E, L
0B183D 69    2179** LD	L, C
0B183E 4B    2180** LD	C, E
0B183F ED    2181** MLT	HL			; HL = H * C (*256)
0B1840 6C 
0B1841 ED    2182** MLT	DE			; DE = L * C
0B1842 5C 
0B1843 ED    2183** MLT	BC			; BC = B * L (*256)
0B1844 4C 
0B1845 09    2184** ADD	HL, BC			; HL = The sum of the two most significant multiplications
0B1846 C1    2185** POP	BC
0B1847 AF    2186** XOR	A
0B1848 9C    2187** SBC	H			; If H is not zero then it's an overflow
0B1849 D8    2188** RET	C
0B184A 65    2189** LD	H, L			; HL = ((H * C) + (B * L) * 256) + (L * C)
0B184B 6F    2190** LD	L, A
0B184C 19    2191** ADD	HL, DE
0B184D C9    2192** RET
             2193** ;
0B184E CD    2194** CHANEL:			CALL    NXT			; Skip whitespace
0B184F 38 
0B1850 0A 
0B1851 0B 
0B1852 FE    2195** CP      '#'			; Check for the '#' symbol
0B1853 23 
0B1854 3E    2196** LD      A,45
0B1855 2D 
0B1856 C2    2197** JP      NZ,ERROR_        	; If it is missing, then throw a "Missing #" error
0B1857 28 
0B1858 37 
0B1859 0B 
0B185A FD    2198** CHNL:			INC     IY             		; Bump past the '#'
0B185B 23 
0B185C CD    2199** CALL    ITEMI			; Get the channel number
0B185D ED 
0B185E 02 
0B185F 0B 
0B1860 D9    2200** EXX
0B1861 EB    2201** EX      DE,HL			; DE: The channel number
0B1862 C9    2202** RET
             2203** 
             2204** ; ASSEMBLER -------------------------------------------------------------------
             2205** 
             2206** ; Language independant control section:
             2207** ;  Outputs: A=delimiter, carry set if syntax error.
             2208** ;
0B1863 CD    2209** ASSEM:			CALL    SKIP
0B1864 7D 
0B1865 1D 
0B1866 0B 
0B1867 FD    2210** INC     IY
0B1868 23 
0B1869 FE    2211** CP      ':'
0B186A 3A 
0B186B 28    2212** JR      Z,ASSEM
0B186C F6 
0B186D FE    2213** CP      ']'
0B186E 5D 
0B186F C8    2214** RET     Z
0B1870 FE    2215** CP      CR
0B1871 0D 
0B1872 C8    2216** RET     Z
0B1873 FD    2217** DEC     IY
0B1874 2B 
0B1875 DD    2218** LD      IX,(PC)         	; Program counter (P% - defined in equs.inc)
0B1876 2A 
0B1877 40 
0B1878 55 
0B1878 0B   
0B187A 21    2219** LD      HL,LISTON
0B187B 40 
0B187C 56 
0B187D 0B 
0B187E CB    2220** BIT     6,(HL)
0B187F 76 
0B1880 28    2221** JR      Z,ASSEM0
0B1881 05 
0B1882 DD    2222** LD      IX,(OC)         	; Code origin (O% - defined in equs.inc)
0B1883 2A 
0B1884 3C 
0B1885 55 
0B1885 0B   
0B1887 DD    2223** ASSEM0:			PUSH    IX
0B1888 E5 
0B1889 FD    2224** PUSH    IY
0B188A E5 
0B188B CD    2225** CALL    ASMB
0B188C 3B 
0B188D 19 
0B188E 0B 
0B188F C1    2226** POP     BC
0B1890 D1    2227** POP     DE
0B1891 D8    2228** RET     C
0B1892 CD    2229** CALL    SKIP
0B1893 7D 
0B1894 1D 
0B1895 0B 
0B1896 37    2230** SCF
0B1897 C0    2231** RET     NZ
0B1898 FD    2232** DEC     IY
0B1899 2B 
0B189A FD    2233** ASSEM3:			INC     IY
0B189B 23 
0B189C FD    2234** LD      A,(IY)
0B189D 7E 
0B189E 00 
0B189F CD    2235** CALL    TERM0
0B18A0 49 
0B18A1 17 
0B18A2 0B 
0B18A3 20    2236** JR      NZ,ASSEM3
0B18A4 F5 
0B18A5 3A    2237** LD      A,(LISTON)
0B18A6 40 
0B18A7 56 
0B18A8 0B 
0B18A9 DD    2238** PUSH    IX
0B18AA E5 
0B18AB E1    2239** POP     HL
0B18AC B7    2240** OR      A
0B18AD ED    2241** SBC     HL,DE
0B18AE 52 
0B18AF EB    2242** EX      DE,HL           	; DE: Number of bytes
0B18B0 E5    2243** PUSH    HL
0B18B1 2A    2244** LD      HL,(PC)
0B18B2 40 
0B18B3 55 
0B18B4 0B 
0B18B5 E5    2245** PUSH    HL
0B18B6 19    2246** ADD     HL,DE
0B18B7 22    2247** LD      (PC),HL         	; Update PC
0B18B8 40 
0B18B9 55 
0B18BA 0B 
0B18BB CB    2248** BIT     6,A
0B18BC 77 
0B18BD 28    2249** JR      Z,ASSEM5
0B18BE 09 
0B18BF 2A    2250** LD      HL,(OC)
0B18C0 3C 
0B18C1 55 
0B18C2 0B 
0B18C3 19    2251** ADD     HL,DE
0B18C4 22    2252** LD      (OC),HL         	; Update OC
0B18C5 3C 
0B18C6 55 
0B18C7 0B 
0B18C8 E1    2253** ASSEM5:			POP     HL              	; Old PC
0B18C9 DD    2254** POP     IX              	; Code here
0B18CA E1 
0B18CB CB    2255** BIT     4,A
0B18CC 67 
0B18CD 28    2256** JR      Z,ASSEM
0B18CE 94 
0B18CF 22    2257** LD	(R0),HL			; Store HL in R0 so we can access the MSB
0B18D0 4A 
0B18D1 56 
0B18D2 0B 
0B18D3 3A    2258** LD	A,(R0+2)		; Print out the address
0B18D4 4C 
0B18D5 56 
0B18D6 0B 
0B18D7 CD    2259** CALL	HEX_EX
0B18D8 25 
0B18D9 19 
0B18DA 0B 
0B18DB 7C    2260** LD      A,H
0B18DC CD    2261** CALL    HEX_EX
0B18DD 25 
0B18DE 19 
0B18DF 0B 
0B18E0 7D    2262** LD      A,L
0B18E1 CD    2263** CALL    HEXSP
0B18E2 1D 
0B18E3 19 
0B18E4 0B 
0B18E5 AF    2264** XOR     A
0B18E6 BB    2265** CP      E
0B18E7 28    2266** JR      Z,ASSEM2
0B18E8 18 
             2267** ;
0B18E9 3A    2268** ASSEM1:			LD      A,(COUNT)
0B18EA 3D 
0B18EB 56 
0B18EC 0B 
0B18ED FE    2269** CP      20
0B18EE 14 
0B18EF 3E    2270** LD      A,7
0B18F0 07 
0B18F1 D4    2271** CALL    NC,TABIT        	; Next line
0B18F2 8B 
0B18F3 17 
0B18F4 0B 
0B18F5 DD    2272** LD      A,(IX)
0B18F6 7E 
0B18F7 00 
0B18F8 CD    2273** CALL    HEXSP
0B18F9 1D 
0B18FA 19 
0B18FB 0B 
0B18FC DD    2274** INC     IX
0B18FD 23 
0B18FE 1D    2275** DEC     E
0B18FF 20    2276** JR      NZ,ASSEM1
0B1900 E8 
             2277** ;
0B1901 3E    2278** ASSEM2:			LD      A,22			; Tab to the disassembly field
0B1902 16 
0B1903 CD    2279** CALL    TABIT
0B1904 8B 
0B1905 17 
0B1906 0B 
0B1907 FD    2280** PUSH    IY
0B1908 E5 
0B1909 E1    2281** POP     HL
0B190A ED    2282** SBC     HL,BC
0B190B 42 
0B190C 0A    2283** ASSEM4:			LD      A,(BC)
0B190D CD    2284** CALL    OUT_
0B190E 34 
0B190F 39 
0B1910 0B 
0B1911 03    2285** INC     BC
0B1912 2D    2286** DEC     L
0B1913 20    2287** JR      NZ,ASSEM4
0B1914 F7 
0B1915 CD    2288** CALL    CRLF
0B1916 0F 
0B1917 39 
0B1918 0B 
0B1919 C3    2289** JP      ASSEM
0B191A 63 
0B191B 18 
0B191C 0B 
             2290** ;
0B191D CD    2291** HEXSP:			CALL    HEX_EX
0B191E 25 
0B191F 19 
0B1920 0B 
0B1921 3E    2292** LD      A,' '
0B1922 20 
0B1923 18    2293** JR      OUTCH1
0B1924 12 
0B1925 F5    2294** HEX_EX:			PUSH    AF
0B1926 0F    2295** RRCA
0B1927 0F    2296** RRCA
0B1928 0F    2297** RRCA
0B1929 0F    2298** RRCA
0B192A CD    2299** CALL    HEXOUT
0B192B 2F 
0B192C 19 
0B192D 0B 
0B192E F1    2300** POP     AF
0B192F E6    2301** HEXOUT:			AND     0FH
0B1930 0F 
0B1931 C6    2302** ADD     A,90H
0B1932 90 
0B1933 27    2303** DAA
0B1934 CE    2304** ADC     A,40H
0B1935 40 
0B1936 27    2305** DAA
0B1937 C3    2306** OUTCH1:			JP      OUT_
0B1938 34 
0B1939 39 
0B193A 0B 
             2307** 
             2308** ; Processor Specific Translation Section:
             2309** ;
             2310** ; Register Usage: B: Type of most recent operand (the base value selected from the opcode table)
             2311** ;                 C: Opcode beig built
             2312** ;                 D: Flags
             2313** ;			Bit 7: Set to 1 if the instruction uses long addressing
             2314** ;			Bit 6: Set to 1 if the instruction is an index instruction with offset
             2315** ;                 E: Offset from IX or IY
             2316** ;                HL: Numeric operand value
             2317** ;                IX: Code destination pointer
             2318** ;                IY: Source text pointer
             2319** ;    Inputs: A = initial character
             2320** ;   Outputs: Carry set if syntax error.
             2321** ;
0B193B FE    2322** ASMB:			CP      '.'			; Check for a dot; this indicates a label
0B193C 2E 
0B193D 20    2323** JR      NZ,ASMB1		; No, so just process the instruction
0B193E 1F 
0B193F FD    2324** INC     IY			; Skip past the dot to the label name
0B1940 23 
0B1941 DD    2325** PUSH    IX			; Store the code destination pointer
0B1942 E5 
0B1943 CD    2326** CALL    VAR_			; Create a variable
0B1944 56 
0B1945 0C 
0B1946 0B 
0B1947 F5    2327** PUSH    AF
0B1948 CD    2328** CALL    ZERO			; Zero it
0B1949 5B 
0B194A 09 
0B194B 0B 
0B194C 3A    2329** LD	A,(PC+2)
0B194D 42 
0B194E 55 
0B194F 0B 
0B1950 6F    2330** LD	L,A			; The MSB of the 24-bit address
0B1951 D9    2331** EXX
0B1952 2A    2332** LD      HL,(PC)			; The LSW of the 24-bit address (only 16-bits used)
0B1953 40 
0B1954 55 
0B1955 0B 
0B1956 D9    2333** EXX
0B1957 F1    2334** POP     AF
0B1958 CD    2335** CALL    STORE			; Store the program counter
0B1959 9E 
0B195A 15 
0B195B 0B 
0B195C DD    2336** POP     IX			; Restore the code destination pointer
0B195D E1 
             2337** ;
0B195E 3A    2338** ASMB1:			LD	A,(LISTON)		; Get the OPT flags
0B195F 40 
0B1960 56 
0B1961 0B 
0B1962 E6    2339** AND	80H
0B1963 80 
0B1964 57    2340** LD      D,A     		;  D: Clear the flags and set the initial ADL mode (copied from bit 7 of LISTON)
0B1965 CD    2341** CALL    SKIP			; Skip any whitespace
0B1966 7D 
0B1967 1D 
0B1968 0B 
0B1969 C8    2342** RET     Z			; And return if there is nothing further to process
0B196A FE    2343** CP      TCALL			; Check if it is the token CALL (it will have been tokenised by BASIC)
0B196B D6 
0B196C 0E    2344** LD      C,0C4H			;  A: The base operand
0B196D C4 
0B196E FD    2345** INC     IY			; Skip past the token
0B196F 23 
0B1970 CA    2346** JP      Z,GROUP13_1		; And jump to GROUP13, which handles CALL
0B1971 B2 
0B1972 1A 
0B1973 0B 
0B1974 FD    2347** DEC     IY			; Skip back, as we're not doing the above at this point
0B1975 2B 
0B1976 21    2348** LD      HL,OPCODS		; HL: Pointer to the eZ80 opcodes table
0B1977 94 
0B1978 1D 
0B1979 0B 
0B197A CD    2349** CALL    FIND			; Find the opcode
0B197B 2C 
0B197C 1D 
0B197D 0B 
0B197E D8    2350** RET     C			; If not found, then return; carry indicates an error condition
0B197F 48    2351** LD      C,B     		;  C: A copy of the opcode
             2352** ;
             2353** ; GROUP 0: Trivial cases requiring no computation
             2354** ; GROUP 1: As Group 0, but with "ED" prefix
             2355** ;
0B1980 D6    2356** SUB     68			; The number of opcodes in GROUP0 and GROUP1
0B1981 44 
0B1982 30    2357** JR      NC,GROUP02		; If not in that range, then check GROUP2
0B1983 08 
0B1984 FE    2358** CP      15-68			; Anything between 15 and 68 (neat compare trick here)
0B1985 CB 
0B1986 D4    2359** CALL    NC,ED			; Needs to be prefixed with ED
0B1987 85 
0B1988 1C 
0B1989 0B 
0B198A 18    2360** JR      BYTE0			; Then write the opcode byte
0B198B 76 
             2361** ;
             2362** ; GROUP 2: BIT, RES, SET
             2363** ; GROUP 3: RLC, RRC, RL, RR, SLA, SRA, SRL
             2364** ;
0B198C D6    2365** GROUP02:		SUB     10			; The number of opcodes in GROUP2 and GROUP3
0B198D 0A 
0B198E 30    2366** JR      NC,GROUP04		; If not in that range, then check GROUP4
0B198F 12 
0B1990 FE    2367** CP      3-10			;
0B1991 F9 
0B1992 DC    2368** CALL    C,BIT_
0B1993 1A 
0B1994 1D 
0B1995 0B 
0B1996 D8    2369** RET     C
0B1997 CD    2370** CALL    REGLO
0B1998 EB 
0B1999 1C 
0B199A 0B 
0B199B D8    2371** RET     C
0B199C CD    2372** CALL    CB
0B199D 89 
0B199E 1C 
0B199F 0B 
0B19A0 18    2373** JR      BYTE0
0B19A1 60 
             2374** ;
             2375** ; GROUP 4 - PUSH, POP, EX (SP)
             2376** ;
0B19A2 D6    2377** GROUP04:		SUB     3			; The number of opcodes in GROUP4
0B19A3 03 
0B19A4 30    2378** JR      NC,GROUP05		; If not in that range, then check GROUP5
0B19A5 07 
0B19A6 CD    2379** GROUP04_1:		CALL    PAIR_EX
0B19A7 0D 
0B19A8 1D 
0B19A9 0B 
0B19AA D8    2380** RET     C
0B19AB 18    2381** JR      BYTE0
0B19AC 55 
             2382** ;
             2383** ; GROUP 5 - SUB, AND, XOR, OR, CP
             2384** ; GROUP 6 - ADD, ADC, SBC
             2385** ;
0B19AD D6    2386** GROUP05:		SUB     8+2			; The number of opcodes in GROUP5 and GROUP6
0B19AE 0A 
0B19AF 30    2387** JR      NC,GROUP07
0B19B0 39 
0B19B1 FE    2388** CP      5-8
0B19B2 FD 
0B19B3 06    2389** LD      B,7
0B19B4 07 
0B19B5 D4    2390** CALL    NC,OPND			; Get the first operand
0B19B6 99 
0B19B7 1C 
0B19B8 0B 
0B19B9 78    2391** LD      A,B
0B19BA FE    2392** CP      7			; Is the operand 'A'?
0B19BB 07 
0B19BC 20    2393** JR      NZ,GROUP05_HL		; No, so check for HL, IX or IY
0B19BD 15 
             2394** ;
0B19BE CD    2395** GROUP05_1:		CALL    REGLO			; Handle ADD A,?
0B19BF EB 
0B19C0 1C 
0B19C1 0B 
0B19C2 79    2396** LD      A,C
0B19C3 30    2397** JR      NC,BIND1		; If it is a register, then write that out
0B19C4 2E 
0B19C5 EE    2398** XOR     46H			; Handle ADD A,n
0B19C6 46 
0B19C7 CD    2399** CALL    BIND
0B19C8 8B 
0B19C9 1C 
0B19CA 0B 
0B19CB CD    2400** DB_:			CALL    NUMBER
0B19CC CB 
0B19CD 1C 
0B19CE 0B 
0B19CF C3    2401** JP      VAL8
0B19D0 84 
0B19D1 1A 
0B19D2 0B 
             2402** ;
0B19D3 E6    2403** GROUP05_HL:		AND     3FH
0B19D4 3F 
0B19D5 FE    2404** CP      12
0B19D6 0C 
0B19D7 37    2405** SCF
0B19D8 C0    2406** RET     NZ
0B19D9 79    2407** LD      A,C
0B19DA FE    2408** CP      80H
0B19DB 80 
0B19DC 0E    2409** LD      C,9
0B19DD 09 
0B19DE 28    2410** JR      Z,GROUP04_1
0B19DF C6 
0B19E0 EE    2411** XOR     1CH
0B19E1 1C 
0B19E2 0F    2412** RRCA
0B19E3 4F    2413** LD      C,A
0B19E4 CD    2414** CALL    ED
0B19E5 85 
0B19E6 1C 
0B19E7 0B 
0B19E8 18    2415** JR      GROUP04_1
0B19E9 BC 
             2416** ;
             2417** ; GROUP 7 - INC, DEC
             2418** ;
0B19EA D6    2419** GROUP07:		SUB     2			; The number of opcodes in GROUP7
0B19EB 02 
0B19EC 30    2420** JR      NC,GROUP08
0B19ED 19 
0B19EE CD    2421** CALL    REGHI
0B19EF F2 
0B19F0 1C 
0B19F1 0B 
0B19F2 79    2422** LD      A,C
0B19F3 D2    2423** BIND1:			JP      NC,BIND
0B19F4 8B 
0B19F5 1C 
0B19F6 0B 
0B19F7 EE    2424** XOR     64H
0B19F8 64 
0B19F9 07    2425** RLCA
0B19FA 07    2426** RLCA
0B19FB 07    2427** RLCA
0B19FC 4F    2428** LD      C,A
0B19FD CD    2429** CALL    PAIR1_EX
0B19FE 12 
0B19FF 1D 
0B1A00 0B 
0B1A01 D8    2430** RET     C
0B1A02 79    2431** BYTE0:			LD      A,C
0B1A03 C3    2432** JP      BYTE_
0B1A04 BA 
0B1A05 1C 
0B1A06 0B 
             2433** ;
             2434** ; Group 8: IN0, OUT0
             2435** ;
0B1A07 D6    2436** GROUP08:		SUB	2			; The number of opcodes in GROUP8
0B1A08 02 
0B1A09 30    2437** JR	NC,GROUP09
0B1A0A 26 
0B1A0B FE    2438** CP	1-2
0B1A0C FF 
0B1A0D CC    2439** CALL    Z,NUMBER		; Fetch number first if OUT
0B1A0E CB 
0B1A0F 1C 
0B1A10 0B 
0B1A11 08    2440** EX      AF,AF'			; Save flags
0B1A12 CD    2441** CALL    REG			; Get the register value regardless
0B1A13 DF 
0B1A14 1C 
0B1A15 0B 
0B1A16 D8    2442** RET     C			; Return if not a register
0B1A17 08    2443** EX      AF,AF'			; Restore the flags
0B1A18 DC    2444** CALL    C,NUMBER		; Fetch number last if IN
0B1A19 CB 
0B1A1A 1C 
0B1A1B 0B 
0B1A1C 78    2445** LD	A,B			; Get the register number
0B1A1D FE    2446** CP	6			; Fail on (HL)
0B1A1E 06 
0B1A1F 37    2447** SCF
0B1A20 C8    2448** RET	Z
0B1A21 FE    2449** CP	8			; Check it is just single pairs only
0B1A22 08 
0B1A23 3F    2450** CCF
0B1A24 D8    2451** RET	C			; And return if it is an invalid register
0B1A25 07    2452** RLCA				; Bind with the operand
0B1A26 07    2453** RLCA
0B1A27 07    2454** RLCA
0B1A28 81    2455** ADD	A,C
             2456** ; BEGIN NOT IN BINARY
             2457** ; LD	C,A
             2458** ; CALL	ED			; Prefix with ED
             2459** ; LD	A,C
             2460** ; END NOT IN BINARY
0B1A29 CD    2461** CALL	BYTE_			; Write out the operand
0B1A2A BA 
0B1A2B 1C 
0B1A2C 0B 
0B1A2D C3    2462** JP	VAL8			; Write out the value
0B1A2E 84 
0B1A2F 1A 
0B1A30 0B 
             2463** ;
             2464** ; GROUP 9 - IN
             2465** ; GROUP 10 - OUT
             2466** ;
0B1A31 D6    2467** GROUP09:		SUB     2			; The number of opcodes in GROUP09 amd GROUP10
0B1A32 02 
0B1A33 30    2468** JR      NC,GROUP11
0B1A34 25 
0B1A35 FE    2469** CP      1-2			; Check if Group 9 or Group 1
0B1A36 FF 
0B1A37 CC    2470** CALL    Z,CORN			; Call CORN if Group 10 (OUT)
0B1A38 79 
0B1A39 1C 
0B1A3A 0B 
0B1A3B 08    2471** EX      AF,AF'			; Save flags
0B1A3C CD    2472** CALL    REGHI			; Get the register value regardless
0B1A3D F2 
0B1A3E 1C 
0B1A3F 0B 
0B1A40 D8    2473** RET     C			; Return if not a register
0B1A41 08    2474** EX      AF,AF'			; Restore the flags
0B1A42 DC    2475** CALL    C,CORN			; Call CORN if Group 9 (IN)
0B1A43 79 
0B1A44 1C 
0B1A45 0B 
0B1A46 24    2476** INC     H			; If it is IN r,(C) or OUT (C),r then
0B1A47 28    2477** JR      Z,BYTE0			; Just write the operand out
0B1A48 B9 
             2478** ;
0B1A49 78    2479** LD      A,B			; Check the register
0B1A4A FE    2480** CP      7
0B1A4B 07 
0B1A4C 37    2481** SCF
0B1A4D C0    2482** RET     NZ			; If it is not A, then return
             2483** ;
0B1A4E 79    2484** LD      A,C			; Bind the register with the operand
0B1A4F EE    2485** XOR     3
0B1A50 03 
0B1A51 07    2486** RLCA
0B1A52 07    2487** RLCA
0B1A53 07    2488** RLCA
0B1A54 CD    2489** CALL    BYTE_			; Write out the operand
0B1A55 BA 
0B1A56 1C 
0B1A57 0B 
0B1A58 18    2490** JR      VAL8			; And the value
0B1A59 2A 
             2491** ;
             2492** ; GROUP 11 - JR, DJNZ
             2493** ;
0B1A5A D6    2494** GROUP11:		SUB     2			; The number of opcodes in GROUP11
0B1A5B 02 
0B1A5C 30    2495** JR      NC,GROUP12
0B1A5D 2B 
0B1A5E FE    2496** CP      1-2
0B1A5F FF 
0B1A60 C4    2497** CALL    NZ,COND_
0B1A61 F9 
0B1A62 1C 
0B1A63 0B 
0B1A64 79    2498** LD      A,C
0B1A65 30    2499** JR      NC,@F
0B1A66 02 
0B1A67 3E    2500** LD      A,18H
0B1A68 18 
0B1A69 CD    2501** @@:			CALL    BYTE_
0B1A6A BA 
0B1A6B 1C 
0B1A6C 0B 
0B1A6D CD    2502** CALL    NUMBER
0B1A6E CB 
0B1A6F 1C 
0B1A70 0B 
0B1A71 ED    2503** LD      DE,(PC)
0B1A72 5B 
0B1A73 40 
0B1A74 55 
0B1A74 0B   
0B1A76 13    2504** INC     DE
0B1A77 37    2505** SCF
0B1A78 ED    2506** SBC     HL,DE
0B1A79 52 
0B1A7A 7D    2507** LD      A,L
0B1A7B 17    2508** RLA
0B1A7C 9F    2509** SBC     A,A
0B1A7D BC    2510** CP      H
0B1A7E 3E    2511** TOOFAR:			LD      A,1
0B1A7F 01 
0B1A80 C2    2512** JP      NZ,ERROR_		; Throw an "Out of range" error
0B1A81 28 
0B1A82 37 
0B1A83 0B 
0B1A84 7D    2513** VAL8:			LD      A,L
0B1A85 C3    2514** JP      BYTE_
0B1A86 BA 
0B1A87 1C 
0B1A88 0B 
             2515** ;
             2516** ; GROUP 12 - JP
             2517** ;
0B1A89 D6    2518** GROUP12:		SUB	1			; The number of opcodes in GROUP12
0B1A8A 01 
0B1A8B 30    2519** JR	NC,GROUP13
0B1A8C 21 
0B1A8D CD    2520** CALL	EZ80SF_PART		; Evaluate the suffix (just LIL and SIS)
0B1A8E DF 
0B1A8F 1B 
0B1A90 0B 
0B1A91 D8    2521** RET	C			; Exit if an invalid suffix is provided
0B1A92 CD    2522** CALL    COND_			; Evaluate the conditions
0B1A93 F9 
0B1A94 1C 
0B1A95 0B 
0B1A96 79    2523** LD      A,C
0B1A97 30    2524** JR      NC,GROUP12_1
0B1A98 0D 
0B1A99 78    2525** LD      A,B
0B1A9A E6    2526** AND     3FH
0B1A9B 3F 
0B1A9C FE    2527** CP      6
0B1A9D 06 
0B1A9E 3E    2528** LD      A,0E9H
0B1A9F E9 
0B1AA0 CA    2529** JP      Z,BYTE_
0B1AA1 BA 
0B1AA2 1C 
0B1AA3 0B 
0B1AA4 3E    2530** LD      A,0C3H
0B1AA5 C3 
0B1AA6 CD    2531** GROUP12_1:		CALL    BYTE_			; Output the opcode (with conditions)
0B1AA7 BA 
0B1AA8 1C 
0B1AA9 0B 
0B1AAA C3    2532** JP	ADDR_			; Output the address
0B1AAB 34 
0B1AAC 1C 
0B1AAD 0B 
             2533** ;
             2534** ; GROUP 13 - CALL
             2535** ;
0B1AAE D6    2536** GROUP13:		SUB	1			; The number of opcodes in GROUP13
0B1AAF 01 
0B1AB0 30    2537** JR	NC,GROUP14
0B1AB1 0C 
0B1AB2 CD    2538** GROUP13_1:		CALL	EZ80SF_FULL		; Evaluate the suffix
0B1AB3 F7 
0B1AB4 1B 
0B1AB5 0B 
0B1AB6 CD    2539** CALL    GROUP15_1		; Output the opcode (with conditions)
0B1AB7 D9 
0B1AB8 1A 
0B1AB9 0B 
0B1ABA C3    2540** JP	ADDR_			; Output the address
0B1ABB 34 
0B1ABC 1C 
0B1ABD 0B 
             2541** ;
             2542** ; GROUP 14 - RST
             2543** ;
0B1ABE D6    2544** GROUP14:		SUB	1			; The number of opcodes in GROUP14
0B1ABF 01 
0B1AC0 30    2545** JR	NC,GROUP15
0B1AC1 13 
0B1AC2 CD    2546** CALL	EZ80SF_FULL		; Evaluate the suffix
0B1AC3 F7 
0B1AC4 1B 
0B1AC5 0B 
0B1AC6 D8    2547** RET	C			; Exit if an invalid suffix provided
0B1AC7 CD    2548** CALL    NUMBER
0B1AC8 CB 
0B1AC9 1C 
0B1ACA 0B 
0B1ACB A1    2549** AND     C
0B1ACC B4    2550** OR      H
0B1ACD 20    2551** JR      NZ,TOOFAR
0B1ACE AF 
0B1ACF 7D    2552** LD      A,L
0B1AD0 B1    2553** OR      C
0B1AD1 C3    2554** JP      BYTE_
0B1AD2 BA 
0B1AD3 1C 
0B1AD4 0B 
             2555** ;
             2556** ; GROUP 15 - RET
             2557** ;
0B1AD5 D6    2558** GROUP15:		SUB	1			; The number of opcodes in GROUP15
0B1AD6 01 
0B1AD7 30    2559** JR	NC,GROUP16
0B1AD8 0F 
0B1AD9 CD    2560** GROUP15_1:		CALL    COND_
0B1ADA F9 
0B1ADB 1C 
0B1ADC 0B 
0B1ADD 79    2561** LD      A,C
0B1ADE D2    2562** JP      NC,BYTE_
0B1ADF BA 
0B1AE0 1C 
0B1AE1 0B 
0B1AE2 F6    2563** OR      9
0B1AE3 09 
0B1AE4 C3    2564** JP      BYTE_
0B1AE5 BA 
0B1AE6 1C 
0B1AE7 0B 
             2565** ;
             2566** ; GROUP 16 - LD
             2567** ;
0B1AE8 D6    2568** GROUP16:		SUB	1			; The number of opcodes in GROUP16
0B1AE9 01 
0B1AEA 30    2569** JR	NC,GROUP17
0B1AEB 74 
0B1AEC CD    2570** CALL	EZ80SF_FULL		; Evaluate the suffix
0B1AED F7 
0B1AEE 1B 
0B1AEF 0B 
0B1AF0 CD    2571** CALL    LDOP			; Check for accumulator loads
0B1AF1 28 
0B1AF2 1D 
0B1AF3 0B 
0B1AF4 D2    2572** JP      NC,LDA			; Yes, so jump here
0B1AF5 54 
0B1AF6 1C 
0B1AF7 0B 
0B1AF8 CD    2573** CALL    REGHI
0B1AF9 F2 
0B1AFA 1C 
0B1AFB 0B 
0B1AFC 08    2574** EX      AF,AF'
0B1AFD CD    2575** CALL    SKIP
0B1AFE 7D 
0B1AFF 1D 
0B1B00 0B 
0B1B01 FE    2576** CP      '('			; Check for bracket
0B1B02 28 
0B1B03 28    2577** JR      Z,LDIN			; Yes, so we're doing an indirect load from memory
0B1B04 24 
0B1B05 08    2578** EX      AF,AF'
0B1B06 D2    2579** JP      NC,GROUP05_1		; Load single register direct; go here
0B1B07 BE 
0B1B08 19 
0B1B09 0B 
0B1B0A 0E    2580** LD      C,1
0B1B0B 01 
0B1B0C CD    2581** CALL    PAIR1_EX
0B1B0D 12 
0B1B0E 1D 
0B1B0F 0B 
0B1B10 D8    2582** RET     C
0B1B11 3E    2583** LD      A,14
0B1B12 0E 
0B1B13 B8    2584** CP      B
0B1B14 47    2585** LD      B,A
0B1B15 CC    2586** CALL    Z,PAIR_EX
0B1B16 0D 
0B1B17 1D 
0B1B18 0B 
0B1B19 78    2587** LD      A,B
0B1B1A E6    2588** AND     3FH
0B1B1B 3F 
0B1B1C FE    2589** CP      12
0B1B1D 0C 
0B1B1E 79    2590** LD      A,C
0B1B1F C2    2591** JP      NZ,GROUP12_1		; Load register pair direct; go here
0B1B20 A6 
0B1B21 1A 
0B1B22 0B 
0B1B23 3E    2592** LD      A,0F9H
0B1B24 F9 
0B1B25 C3    2593** JP      BYTE_
0B1B26 BA 
0B1B27 1C 
0B1B28 0B 
             2594** ;
0B1B29 08    2595** LDIN:			EX      AF,AF'
0B1B2A C5    2596** PUSH    BC
0B1B2B D4    2597** CALL    NC,REGLO
0B1B2C EB 
0B1B2D 1C 
0B1B2E 0B 
0B1B2F 79    2598** LD      A,C
0B1B30 C1    2599** POP     BC
0B1B31 D2    2600** JP      NC,BIND
0B1B32 8B 
0B1B33 1C 
0B1B34 0B 
0B1B35 0E    2601** LD      C,0AH
0B1B36 0A 
0B1B37 CD    2602** CALL    PAIR1_EX
0B1B38 12 
0B1B39 1D 
0B1B3A 0B 
0B1B3B CD    2603** CALL    LD16
0B1B3C 5F 
0B1B3D 1C 
0B1B3E 0B 
0B1B3F D2    2604** JP      NC,GROUP12_1
0B1B40 A6 
0B1B41 1A 
0B1B42 0B 
0B1B43 CD    2605** CALL    NUMBER
0B1B44 CB 
0B1B45 1C 
0B1B46 0B 
0B1B47 0E    2606** LD      C,2
0B1B48 02 
0B1B49 CD    2607** CALL    PAIR_EX
0B1B4A 0D 
0B1B4B 1D 
0B1B4C 0B 
0B1B4D CD    2608** CALL    LD16
0B1B4E 5F 
0B1B4F 1C 
0B1B50 0B 
0B1B51 D8    2609** RET     C
0B1B52 CD    2610** CALL    BYTE_
0B1B53 BA 
0B1B54 1C 
0B1B55 0B 
0B1B56 CB    2611** BIT	7,D			; Check the ADL flag
0B1B57 7A 
0B1B58 C2    2612** JP	NZ,VAL24 		; If it is set, then use 24-bit addresses
0B1B59 49 
0B1B5A 1C 
0B1B5B 0B 
0B1B5C C3    2613** JP      VAL16			; Otherwise use 16-bit addresses
0B1B5D 3C 
0B1B5E 1C 
0B1B5F 0B 
             2614** ;
             2615** ; Group 17 - TST
             2616** ;
0B1B60 D6    2617** GROUP17:		SUB	1			; The number of opcodes in GROUP17
0B1B61 01 
0B1B62 30    2618** JR	NC,OPTS
0B1B63 25 
0B1B64 CD    2619** CALL	ED			; Needs to be prefixed with ED
0B1B65 85 
0B1B66 1C 
0B1B67 0B 
0B1B68 CD    2620** CALL	REG			; Fetch the register
0B1B69 DF 
0B1B6A 1C 
0B1B6B 0B 
0B1B6C 30    2621** JR	NC,GROUP17_1		; It's just a register
0B1B6D 0E 
             2622** ;
0B1B6E 3E    2623** LD	A,64H			; Opcode for TST n
0B1B6F 64 
0B1B70 CD    2624** CALL	BYTE_			; Write out the opcode
0B1B71 BA 
0B1B72 1C 
0B1B73 0B 
0B1B74 CD    2625** CALL	NUMBER			; Get the number
0B1B75 CB 
0B1B76 1C 
0B1B77 0B 
0B1B78 C3    2626** JP	VAL8			; And write that out
0B1B79 84 
0B1B7A 1A 
0B1B7B 0B 
             2627** ;
0B1B7C 78    2628** GROUP17_1:		LD	A,B			; Check the register rangs
0B1B7D FE    2629** CP	8
0B1B7E 08 
0B1B7F 3F    2630** CCF
0B1B80 D8    2631** RET	C			; Ret with carry flag set for error if out of range
0B1B81 07    2632** RLCA				; Get the opcode value
0B1B82 07    2633** RLCA
0B1B83 07    2634** RLCA
0B1B84 81    2635** ADD	A,C			; Add the opcode base in
0B1B85 C3    2636** JP	BYTE_
0B1B86 BA 
0B1B87 1C 
0B1B88 0B 
             2637** 
             2638** ;
             2639** ; Assembler directives - OPT, ADL
             2640** ;
0B1B89 D6    2641** OPTS:			SUB	2
0B1B8A 02 
0B1B8B 30    2642** JR	NC, DEFS
0B1B8C 2B 
0B1B8D FE    2643** CP	1-2			; Check for ADL opcode
0B1B8E FF 
0B1B8F 28    2644** JR	Z, ADL_
0B1B90 13 
             2645** ;
0B1B91 CD    2646** OPT:			CALL    NUMBER			; Fetch the OPT value
0B1B92 CB 
0B1B93 1C 
0B1B94 0B 
0B1B95 21    2647** LD      HL,LISTON		; Address of the LISTON/OPT flag
0B1B96 40 
0B1B97 56 
0B1B98 0B 
0B1B99 E6    2648** AND	7			; Only interested in the first three bits
0B1B9A 07 
0B1B9B 4F    2649** LD      C,A			; Store the new OPT value in C
0B1B9C ED    2650** RLD				; Shift the top nibble of LISTON (OPT) into A
0B1B9D 6F 
0B1B9E E6    2651** AND	8			; Clear the bottom three bits, preserving the ADL bit
0B1B9F 08 
0B1BA0 B1    2652** OR	C			; OR in the new value
0B1BA1 ED    2653** RRD				; And shift the nibble back in
0B1BA2 67 
0B1BA3 C9    2654** RET
             2655** ;
0B1BA4 CD    2656** ADL_:			CALL	NUMBER			; Fetch the ADL value
0B1BA5 CB 
0B1BA6 1C 
0B1BA7 0B 
0B1BA8 E6    2657** AND	1			; Only interested if it is 0 or 1
0B1BA9 01 
0B1BAA 0F    2658** RRCA				; Rotate to bit 7
0B1BAB 4F    2659** LD	C,A			; Store in C
0B1BAC 3A    2660** LD	A,(LISTON)		; Get the LISTON system variable
0B1BAD 40 
0B1BAE 56 
0B1BAF 0B 
0B1BB0 E6    2661** AND	7Fh			; Clear bit 7
0B1BB1 7F 
0B1BB2 B1    2662** OR	C			; OR in the ADL value
0B1BB3 32    2663** LD	(LISTON),A		; Store
0B1BB4 40 
0B1BB5 56 
0B1BB6 0B 
0B1BB7 C9    2664** RET
             2665** ;
             2666** ; DEFB, DEFW, DEFL, DEFM
             2667** ;
0B1BB8 B7    2668** DEFS:			OR	A			; Handle DEFB
0B1BB9 CA    2669** JP	Z, DB_
0B1BBA CB 
0B1BBB 19 
0B1BBC 0B 
0B1BBD 3D    2670** DEC	A			; Handle DEFW
0B1BBE CA    2671** JP	Z, ADDR16
0B1BBF 38 
0B1BC0 1C 
0B1BC1 0B 
0B1BC2 3D    2672** DEC	A			; Handle DEFL
0B1BC3 CA    2673** JP	Z, ADDR24
0B1BC4 45 
0B1BC5 1C 
0B1BC6 0B 
             2674** ;
0B1BC7 DD    2675** PUSH    IX			; Handle DEFM
0B1BC8 E5 
0B1BC9 CD    2676** CALL    EXPRS
0B1BCA DD 
0B1BCB 02 
0B1BCC 0B 
0B1BCD DD    2677** POP     IX
0B1BCE E1 
0B1BCF 21    2678** LD      HL,ACCS
0B1BD0 00 
0B1BD1 53 
0B1BD2 0B 
0B1BD3 AF    2679** @@:			XOR     A
0B1BD4 BB    2680** CP      E
0B1BD5 C8    2681** RET     Z
0B1BD6 7E    2682** LD      A,(HL)
0B1BD7 23    2683** INC     HL
0B1BD8 CD    2684** CALL    BYTE_
0B1BD9 BA 
0B1BDA 1C 
0B1BDB 0B 
0B1BDC 1D    2685** DEC     E
0B1BDD 18    2686** JR      @B
0B1BDE F4 
             2687** 
             2688** ;
             2689** ;SUBROUTINES:
             2690** ;
0B1BDF FD    2691** EZ80SF_PART:		LD	A,(IY)			; Check for a dot
0B1BE0 7E 
0B1BE1 00 
0B1BE2 FE    2692** CP	'.'
0B1BE3 2E 
0B1BE4 28    2693** JR	Z, @F			; If present, then carry on processing the eZ80 suffix
0B1BE5 02 
0B1BE6 B7    2694** OR	A			; Reset the carry flag (no error)
0B1BE7 C9    2695** RET				; And return
0B1BE8 FD    2696** @@:			INC	IY			; Skip the dot
0B1BE9 23 
0B1BEA C5    2697** PUSH	BC			; Push the operand
0B1BEB 21    2698** LD	HL,EZ80SFS_2		; Check the shorter fully qualified table (just LIL and SIS)
0B1BEC 13 
0B1BED 20 
0B1BEE 0B 
0B1BEF CD    2699** CALL	FIND			; Look up the operand
0B1BF0 2C 
0B1BF1 1D 
0B1BF2 0B 
0B1BF3 30    2700** JR	NC,EZ80SF_OK
0B1BF4 24 
0B1BF5 C1    2701** POP	BC			; Not found at this point, so will return with a C (error)
0B1BF6 C9    2702** RET
             2703** ;
0B1BF7 FD    2704** EZ80SF_FULL:		LD	A,(IY)			; Check for a dot
0B1BF8 7E 
0B1BF9 00 
0B1BFA FE    2705** CP	'.'
0B1BFB 2E 
0B1BFC 28    2706** JR	Z,@F			; If present, then carry on processing the eZ80 suffix
0B1BFD 02 
0B1BFE B7    2707** OR	A			; Reset the carry flag (no error)
0B1BFF C9    2708** RET				; And return
0B1C00 FD    2709** @@:			INC	IY 			; Skip the dot
0B1C01 23 
0B1C02 C5    2710** PUSH	BC			; Push the operand
0B1C03 21    2711** LD	HL,EZ80SFS_1		; First check the fully qualified table
0B1C04 0B 
0B1C05 20 
0B1C06 0B 
0B1C07 CD    2712** CALL	FIND 			; Look up the operand
0B1C08 2C 
0B1C09 1D 
0B1C0A 0B 
0B1C0B 30    2713** JR	NC,EZ80SF_OK		; Yes, we've found it, so go write it out
0B1C0C 0C 
0B1C0D CD    2714** CALL	EZ80SF_TABLE		; Get the correct shortcut table in HL based upon the ADL mode
0B1C0E 28 
0B1C0F 1C 
0B1C10 0B 
0B1C11 CD    2715** CALL	FIND
0B1C12 2C 
0B1C13 1D 
0B1C14 0B 
0B1C15 30    2716** JR	NC,EZ80SF_OK
0B1C16 02 
0B1C17 C1    2717** POP	BC			; Not found at this point, so will return with a C (error)
0B1C18 C9    2718** RET
             2719** ;
0B1C19 78    2720** EZ80SF_OK:		LD	A,B			; The operand value
0B1C1A D4    2721** CALL	NC,BYTE_ 		; Write it out if found
0B1C1B BA 
0B1C1C 1C 
0B1C1D 0B 
0B1C1E CB    2722** RES	7,D			; Clear the default ADL mode from the flags
0B1C1F BA 
0B1C20 E6    2723** AND	2			; Check the second half of the suffix (.xxL)
0B1C21 02 
0B1C22 0F    2724** RRCA				; Shift into bit 7
0B1C23 0F    2725** RRCA
0B1C24 B2    2726** OR	D			; Or into bit 7 of D
0B1C25 57    2727** LD	D,A
0B1C26 C1    2728** POP	BC 			; Restore the operand
0B1C27 C9    2729** RET
             2730** ;
0B1C28 21    2731** EZ80SF_TABLE:		LD	HL,EZ80SFS_ADL0		; Return with the ADL0 lookup table
0B1C29 1C 
0B1C2A 20 
0B1C2B 0B 
0B1C2C CB    2732** BIT 	7,D			; if bit 7 of D is 0
0B1C2D 7A 
0B1C2E C8    2733** RET	Z
0B1C2F 21    2734** LD	HL,EZ80SFS_ADL1		; Otherwise return with the ADL1 lookup table
0B1C30 27 
0B1C31 20 
0B1C32 0B 
0B1C33 C9    2735** RET
             2736** ;
0B1C34 CB    2737** ADDR_:			BIT	7,D			; Check the ADL flag
0B1C35 7A 
0B1C36 20    2738** JR	NZ,ADDR24 		; If it is set, then use 24-bit addresses
0B1C37 0D 
             2739** ;
0B1C38 CD    2740** ADDR16:			CALL	NUMBER			; Fetch an address (16-bit) and fall through to VAL16
0B1C39 CB 
0B1C3A 1C 
0B1C3B 0B 
0B1C3C CD    2741** VAL16:			CALL    VAL8			; Write out a 16-bit value (HL)
0B1C3D 84 
0B1C3E 1A 
0B1C3F 0B 
0B1C40 7C    2742** LD      A,H
0B1C41 C3    2743** JP      BYTE_
0B1C42 BA 
0B1C43 1C 
0B1C44 0B 
             2744** ;
0B1C45 CD    2745** ADDR24:			CALL    NUMBER			; Fetch an address (24-bit) and fall through to VAL24
0B1C46 CB 
0B1C47 1C 
0B1C48 0B 
0B1C49 CD    2746** VAL24:			CALL	VAL16			; Lower 16-bits are in HL
0B1C4A 3C 
0B1C4B 1C 
0B1C4C 0B 
0B1C4D D9    2747** EXX
0B1C4E 7D    2748** LD	A,L			; Upper 16-bits are in HL', just need L' to make up 24-bit value
0B1C4F D9    2749** EXX
0B1C50 C3    2750** JP	BYTE_
0B1C51 BA 
0B1C52 1C 
0B1C53 0B 
             2751** ;
0B1C54 FE    2752** LDA:			CP      4
0B1C55 04 
0B1C56 DC    2753** CALL    C,ED
0B1C57 85 
0B1C58 1C 
0B1C59 0B 
0B1C5A 78    2754** LD      A,B
0B1C5B C3    2755** JP      BYTE_
0B1C5C BA 
0B1C5D 1C 
0B1C5E 0B 
             2756** ;
0B1C5F 78    2757** LD16:			LD      A,B
0B1C60 38    2758** JR      C,LD8
0B1C61 0F 
0B1C62 78    2759** LD      A,B
0B1C63 E6    2760** AND     3FH
0B1C64 3F 
0B1C65 FE    2761** CP      12
0B1C66 0C 
0B1C67 79    2762** LD      A,C
0B1C68 C8    2763** RET     Z
0B1C69 CD    2764** CALL    ED
0B1C6A 85 
0B1C6B 1C 
0B1C6C 0B 
0B1C6D 79    2765** LD      A,C
0B1C6E F6    2766** OR      43H
0B1C6F 43 
0B1C70 C9    2767** RET
             2768** ;
0B1C71 FE    2769** LD8:			CP      7
0B1C72 07 
0B1C73 37    2770** SCF
0B1C74 C0    2771** RET     NZ
0B1C75 79    2772** LD      A,C
0B1C76 F6    2773** OR      30H
0B1C77 30 
0B1C78 C9    2774** RET
             2775** ;
             2776** ; Used in IN and OUT to handle whether the operand is C or a number
             2777** ;
0B1C79 C5    2778** CORN:			PUSH    BC
0B1C7A CD    2779** CALL    OPND			; Get the operand
0B1C7B 99 
0B1C7C 1C 
0B1C7D 0B 
0B1C7E CB    2780** BIT     5,B
0B1C7F 68 
0B1C80 C1    2781** POP     BC
0B1C81 28    2782** JR      Z,NUMBER		; If bit 5 is clear, then it's IN A,(N) or OUT (N),A, so fetch the port number
0B1C82 48 
0B1C83 26    2783** LD      H,-1			; At this point it's IN r,(C) or OUT (C),r, so flag by setting H to &FF
0B1C84 FF 
             2784** ;
0B1C85 3E    2785** ED:			LD      A,0EDH			; Write an ED prefix out
0B1C86 ED 
0B1C87 18    2786** JR      BYTE_
0B1C88 31 
             2787** ;
0B1C89 3E    2788** CB:			LD      A,0CBH
0B1C8A CB 
0B1C8B FE    2789** BIND:			CP      76H
0B1C8C 76 
0B1C8D 37    2790** SCF
0B1C8E C8    2791** RET     Z               	; Reject LD (HL),(HL)
0B1C8F CD    2792** CALL    BYTE_
0B1C90 BA 
0B1C91 1C 
0B1C92 0B 
0B1C93 CB    2793** BIT	6,D			; Check the index bit in flags
0B1C94 72 
0B1C95 C8    2794** RET     Z
0B1C96 7B    2795** LD      A,E			; If there is an index, output the offset
0B1C97 18    2796** JR      BYTE_
0B1C98 21 
             2797** ;
             2798** ; Search through the operand table
             2799** ; Returns:
             2800** ; - B: The operand type
             2801** ; - D: Bit 7: 0 = no prefix, 1 = prefix
             2802** ; - E: The IX/IY offset
             2803** ; - F: Carry if not found
             2804** ;
0B1C99 E5    2805** OPND:			PUSH    HL			; Preserve HL
0B1C9A 21    2806** LD      HL,OPRNDS		; The operands table
0B1C9B 9D 
0B1C9C 1F 
0B1C9D 0B 
0B1C9E CD    2807** CALL    FIND			; Find the operand
0B1C9F 2C 
0B1CA0 1D 
0B1CA1 0B 
0B1CA2 E1    2808** POP     HL
0B1CA3 D8    2809** RET     C			; Return if not found
0B1CA4 CB    2810** BIT     7,B			; Check if it is an index register (IX, IY)
0B1CA5 78 
0B1CA6 C8    2811** RET     Z			; Return if it isn't
0B1CA7 CB    2812** SET	6,D			; Set flag to indicate we've got an index
0B1CA8 F2 
0B1CA9 CB    2813** BIT     3,B			; Check if an offset is required
0B1CAA 58 
0B1CAB E5    2814** PUSH    HL
0B1CAC CC    2815** CALL    Z,OFFSET_EX		; If bit 3 of B is zero, then get the offset
0B1CAD C1 
0B1CAE 1C 
0B1CAF 0B 
0B1CB0 5D    2816** LD      E,L			; E: The offset
0B1CB1 E1    2817** POP     HL
0B1CB2 3E    2818** LD	A,DDH			; IX prefix
0B1CB3 DD 
0B1CB4 CB    2819** BIT     6,B			; If bit 6 is reset then
0B1CB5 70 
0B1CB6 28    2820** JR      Z,BYTE_			; It's an IX instruction, otherwise set
0B1CB7 02 
0B1CB8 3E    2821** LD	A,FDH			; IY prefix
0B1CB9 FD 
             2822** ;
0B1CBA DD    2823** BYTE_:			LD      (IX),A			; Write a byte out
0B1CBB 77 
0B1CBC 00 
0B1CBD DD    2824** INC     IX
0B1CBE 23 
0B1CBF B7    2825** OR      A
0B1CC0 C9    2826** RET
             2827** ;
0B1CC1 FD    2828** OFFSET_EX:			LD      A,(IY)
0B1CC2 7E 
0B1CC3 00 
0B1CC4 FE    2829** CP      ')'
0B1CC5 29 
0B1CC6 21    2830** LD      HL,0
0B1CC7 00 
0B1CC8 00 
0B1CC9 00 
0B1CCA C8    2831** RET     Z
0B1CCB CD    2832** NUMBER:			CALL    SKIP
0B1CCC 7D 
0B1CCD 1D 
0B1CCE 0B 
0B1CCF C5    2833** PUSH    BC
0B1CD0 D5    2834** PUSH    DE
0B1CD1 DD    2835** PUSH    IX
0B1CD2 E5 
0B1CD3 CD    2836** CALL    EXPRI
0B1CD4 D2 
0B1CD5 02 
0B1CD6 0B 
0B1CD7 DD    2837** POP     IX
0B1CD8 E1 
0B1CD9 D9    2838** EXX
0B1CDA D1    2839** POP     DE
0B1CDB C1    2840** POP     BC
0B1CDC 7D    2841** LD      A,L
0B1CDD B7    2842** OR      A
0B1CDE C9    2843** RET
             2844** ;
0B1CDF CD    2845** REG:			CALL    OPND
0B1CE0 99 
0B1CE1 1C 
0B1CE2 0B 
0B1CE3 D8    2846** RET     C
0B1CE4 78    2847** LD      A,B
0B1CE5 E6    2848** AND     3FH
0B1CE6 3F 
0B1CE7 FE    2849** CP      8
0B1CE8 08 
0B1CE9 3F    2850** CCF
0B1CEA C9    2851** RET
             2852** ;
0B1CEB CD    2853** REGLO:			CALL    REG
0B1CEC DF 
0B1CED 1C 
0B1CEE 0B 
0B1CEF D8    2854** RET     C
0B1CF0 18    2855** JR      ORC
0B1CF1 33 
             2856** ;
0B1CF2 CD    2857** REGHI:			CALL    REG
0B1CF3 DF 
0B1CF4 1C 
0B1CF5 0B 
0B1CF6 D8    2858** RET     C
0B1CF7 18    2859** JR      SHL3
0B1CF8 29 
             2860** ;
0B1CF9 CD    2861** COND_:			CALL    OPND
0B1CFA 99 
0B1CFB 1C 
0B1CFC 0B 
0B1CFD D8    2862** RET     C
0B1CFE 78    2863** LD      A,B
0B1CFF E6    2864** AND     1FH
0B1D00 1F 
0B1D01 D6    2865** SUB     16
0B1D02 10 
0B1D03 30    2866** JR      NC,SHL3
0B1D04 1D 
0B1D05 FE    2867** CP      -15
0B1D06 F1 
0B1D07 37    2868** SCF
0B1D08 C0    2869** RET     NZ
0B1D09 3E    2870** LD      A,3
0B1D0A 03 
0B1D0B 18    2871** JR      SHL3
0B1D0C 15 
             2872** ;
0B1D0D CD    2873** PAIR_EX:			CALL    OPND
0B1D0E 99 
0B1D0F 1C 
0B1D10 0B 
0B1D11 D8    2874** RET     C
0B1D12 78    2875** PAIR1_EX:			LD      A,B
0B1D13 E6    2876** AND     0FH
0B1D14 0F 
0B1D15 D6    2877** SUB     8
0B1D16 08 
0B1D17 D8    2878** RET     C
0B1D18 18    2879** JR      SHL3
0B1D19 08 
             2880** ;
0B1D1A CD    2881** BIT_:			CALL    NUMBER
0B1D1B CB 
0B1D1C 1C 
0B1D1D 0B 
0B1D1E FE    2882** CP      8
0B1D1F 08 
0B1D20 3F    2883** CCF
0B1D21 D8    2884** RET     C
0B1D22 07    2885** SHL3:			RLCA
0B1D23 07    2886** RLCA
0B1D24 07    2887** RLCA
0B1D25 B1    2888** ORC:			OR      C
0B1D26 4F    2889** LD      C,A
0B1D27 C9    2890** RET
             2891** ;
0B1D28 21    2892** LDOP:			LD      HL,LDOPS
0B1D29 E2 
0B1D2A 1F 
0B1D2B 0B 
             2893** 
             2894** ;
             2895** ; Look up a value in a table
             2896** ; Parameters:
             2897** ; - IY: Address of the assembly language line in the BASIC program area
             2898** ; - HL: Address of the table
             2899** ; Returns:
             2900** ; - B: The operand code
             2901** ; - F: Carry set if not found
             2902** ;
0B1D2C CD    2903** FIND:			CALL    SKIP			; Skip delimiters
0B1D2D 7D 
0B1D2E 1D 
0B1D2F 0B 
             2904** ;
0B1D30 06    2905** EXIT_:			LD      B,0			; Set B to 0
0B1D31 00 
0B1D32 37    2906** SCF				; Set the carry flag
0B1D33 C8    2907** RET     Z			; Returns if Z
             2908** ;
0B1D34 FE    2909** CP      DEF_			; Special case for token DEF (used in DEFB, DEFW, DEFL, DEFM)
0B1D35 DD 
0B1D36 28    2910** JR      Z,FIND0
0B1D37 04 
0B1D38 FE    2911** CP      TOR+1			; Special case for tokens AND and OR
0B1D39 85 
0B1D3A 3F    2912** CCF
0B1D3B D8    2913** RET     C
0B1D3C 7E    2914** FIND0:			LD      A,(HL)			; Check for the end of the table (0 byte marker)
0B1D3D B7    2915** OR      A
0B1D3E 28    2916** JR      Z,EXIT_			; Exit
0B1D3F F0 
0B1D40 FD    2917** XOR     (IY)
0B1D41 AE 
0B1D42 00 
0B1D43 E6    2918** AND     01011111B
0B1D44 5F 
0B1D45 28    2919** JR      Z,FIND2
0B1D46 09 
0B1D47 CB    2920** FIND1:			BIT     7,(HL)
0B1D48 7E 
0B1D49 23    2921** INC     HL
0B1D4A 28    2922** JR      Z,FIND1
0B1D4B FB 
0B1D4C 23    2923** INC     HL
0B1D4D 04    2924** INC     B
0B1D4E 18    2925** JR      FIND0
0B1D4F EC 
             2926** ;
0B1D50 FD    2927** FIND2:			PUSH    IY
0B1D51 E5 
0B1D52 CB    2928** FIND3:			BIT     7,(HL)			; Is this the end of token marker?
0B1D53 7E 
0B1D54 FD    2929** INC     IY
0B1D55 23 
0B1D56 23    2930** INC     HL
0B1D57 20    2931** JR      NZ,FIND5		; Yes
0B1D58 11 
0B1D59 BE    2932** CP      (HL)
0B1D5A CC    2933** CALL    Z,SKIP0
0B1D5B 7C 
0B1D5C 1D 
0B1D5D 0B 
0B1D5E 7E    2934** LD      A,(HL)
0B1D5F FD    2935** XOR     (IY)
0B1D60 AE 
0B1D61 00 
0B1D62 E6    2936** AND     01011111B
0B1D63 5F 
0B1D64 28    2937** JR      Z,FIND3
0B1D65 EC 
0B1D66 FD    2938** FIND4:			POP     IY
0B1D67 E1 
0B1D68 18    2939** JR      FIND1
0B1D69 DD 
             2940** ;
0B1D6A CD    2941** FIND5:			CALL    DELIM			; Is it a delimiter?
0B1D6B 2E 
0B1D6C 17 
0B1D6D 0B 
0B1D6E C4    2942** CALL	NZ,DOT 			; No, so also check whether it is a dot character (for suffixes)
0B1D6F 91 
0B1D70 1D 
0B1D71 0B 
0B1D72 C4    2943** CALL    NZ,SIGN			; No, so also check whether it is a SIGN character ('+' or '-')
0B1D73 8B 
0B1D74 1D 
0B1D75 0B 
0B1D76 20    2944** JR      NZ,FIND4		; If it is not a sign or a delimiter, then loop
0B1D77 EE 
             2945** ;
0B1D78 78    2946** FIND6:			LD      A,B			; At this point we have a token
0B1D79 46    2947** LD      B,(HL)			; Fetch the token type code
0B1D7A E1    2948** POP     HL			; Restore the stack
0B1D7B C9    2949** RET
             2950** ;
0B1D7C 23    2951** SKIP0:			INC     HL
0B1D7D CD    2952** SKIP:			CALL    DELIM			; Is it a delimiter?
0B1D7E 2E 
0B1D7F 17 
0B1D80 0B 
0B1D81 C0    2953** RET     NZ			; No, so return
0B1D82 CD    2954** CALL    TERM			; Is it a terminator?
0B1D83 3A 
0B1D84 17 
0B1D85 0B 
0B1D86 C8    2955** RET     Z			; Yes, so return
0B1D87 FD    2956** INC     IY			; Increment the basic program counter
0B1D88 23 
0B1D89 18    2957** JR      SKIP			; And loop
0B1D8A F2 
             2958** ;
0B1D8B FE    2959** SIGN:			CP      '+'			; Check whether the character is a sign symbol
0B1D8C 2B 
0B1D8D C8    2960** RET     Z
0B1D8E FE    2961** CP      '-'
0B1D8F 2D 
0B1D90 C9    2962** RET
             2963** ;
0B1D91 FE    2964** DOT:			CP	'.'			; Check if it is a dot character
0B1D92 2E 
0B1D93 C9    2965** RET
             2966** ; Z80 opcode list
             2967** ;
             2968** ; Group 0: (15 opcodes)
             2969** ; Trivial cases requiring no computation
             2970** ;
             2971** ; BEGIN REFACTOR FROM BINARY
             2972** ; OPCODS:
             2973** ; 			DB	"NO","P"+80H,00h	; # 00h
             2974** ; 			DB	"RLC","A"+80H,07h
             2975** ; 			DB	"EX",0,"AF",0,"AF","'"+80H,08h
             2976** ; 			DB	"RRC","A"+80H,0FH
             2977** ; 			DB	"RL","A"+80H,17H
             2978** ; 			DB	"RR","A"+80H,1FH
             2979** ; 			DB	"DA","A"+80H,27H
             2980** ; 			DB	"CP","L"+80H,2FH
             2981** ; 			DB	"SC","F"+80H,37H
             2982** ; 			DB	"CC","F"+80H,3FH
             2983** ; 			DB	"HAL","T"+80H,76H
             2984** ; 			DB	"EX","X"+80H,D9H
             2985** ; 			DB	"EX",0,"DE",0,"H","L"+80H,EBH
             2986** ; 			DB	"D","I"+80H,F3H
             2987** ; 			DB	"E","I"+80H,FBH
             2988** ; ;
             2989** ; ; Group 1: (53 opcodes)
             2990** ; ; As Group 0, but with an ED prefix
             2991** ; ;
             2992** ; 			DB	"NE","G"+80H,44H	; 0Fh
             2993** ; 			DB	"IM",0,"0"+80H,46H
             2994** ; 			DB	"RET","N"+80H,45H
             2995** ; 			DB	"MLT",0,"B","C"+80H,4CH
             2996** ; 			DB	"RET","I"+80H,4DH
             2997** ; 			DB	"IM",0,"1"+80H,56H
             2998** ; 			DB	"MLT",0,"D","E"+80H,5CH
             2999** ; 			DB	"IM",0,"2"+80H,5EH
             3000** ; 			DB	"RR","D"+80H,67H
             3001** ; 			DB	"MLT",0,"H","L"+80H,6CH
             3002** ; 			DB	"LD",0,"MB",0,"A"+80H,6DH
             3003** ; 			DB	"LD",0,"A",0,"M","B"+80H,6EH
             3004** ; 			DB	"RL","D"+80H,6FH
             3005** ; 			DB	"SL","P"+80H,76H
             3006** ; 			DB	"MLT",0,"S","P"+80H,7CH
             3007** ; 			DB	"STMI","X"+80H,7DH
             3008** ; 			DB	"RSMI","X"+80H,7EH
             3009** ; 			DB	"INI","M"+80H,82H
             3010** ; 			DB	"OTI","M"+80H,83H
             3011** ; 			DB	"INI","2"+80H,84H
             3012** ; 			DB	"IND","M"+80H,8AH
             3013** ; 			DB	"OTD","M"+80H,8BH
             3014** ; 			DB	"IND","2"+80H,8CH
             3015** ; 			DB	"INIM","R"+80H,92H
             3016** ; 			DB	"OTIM","R"+80H,93H
             3017** ; 			DB	"INI2","R"+80H,94H
             3018** ; 			DB	"INDM","R"+80H,9AH
             3019** ; 			DB	"OTDM","R"+80H,9BH
             3020** ; 			DB	"IND2","R"+80H,9CH
             3021** ; 			DB	"LD","I"+80H,A0H
             3022** ; 			DB	"CP","I"+80H,A1H
             3023** ; 			DB	"IN","I"+80H,A2H
             3024** ; 			DB	"OUTI","2"+80H,A4H	; These are swapped round so that FIND will find
             3025** ; 			DB	"OUT","I"+80H,A3H	; OUTI2 before OUTI
             3026** ; 			DB	"LD","D"+80H,A8H
             3027** ; 			DB	"CP","D"+80H,A9H
             3028** ; 			DB	"IN","D"+80H,AAH
             3029** ; 			DB	"OUTD","2"+80H,ACH	; Similarly these are swapped round so that FIND
             3030** ; 			DB	"OUT","D"+80H,ABH	; will find OUTD2 before OUTD
             3031** ; 			DB	"LDI","R"+80H,B0H
             3032** ; 			DB	"CPI","R"+80H,B1H
             3033** ; 			DB	"INI","R"+80H,B2H
             3034** ; 			DB	"OTI","R"+80H,B3H
             3035** ; 			DB	"OTI2","R"+80H,B4H
             3036** ; 			DB	"LDD","R"+80H,B8H
             3037** ; 			DB	"CPD","R"+80H,B9H
             3038** ; 			DB	"IND","R"+80H,BAH
             3039** ; 			DB	"OTD","R"+80H,BBH
             3040** ; 			DB	"OTD2","R"+80H,BCH
             3041** ; 			DB	"INIR","X"+80H,C2H
             3042** ; 			DB	"OTIR","X"+80H,C3H
             3043** ; 			DB	"INDR","X"+80H,CAH
             3044** ; 			DB	"OTDR","X"+80H,CBH
             3045** ; ;
             3046** ; ; Group 2: (3 opcodes)
             3047** ; ;
             3048** ; 			DB	"BI","T"+80H,40H	; 44h
             3049** ; 			DB	"RE","S"+80H,80H
             3050** ; 			DB	"SE","T"+80H,C0H
             3051** ; ;
             3052** ; ; Group 3: (7 opcodes)
             3053** ; ;
             3054** ; 			DB	"RL","C"+80H,00H	; 47h
             3055** ; 			DB	"RR","C"+80H,08H
             3056** ; 			DB	"R","L"+80H,10H
             3057** ; 			DB	"R","R"+80H,18H
             3058** ; 			DB	"SL","A"+80H,20H
             3059** ; 			DB	"SR","A"+80H,28H
             3060** ; 			DB	"SR","L"+80H,38H
             3061** ; ;
             3062** ; ; Group 4: (3 opcodes)
             3063** ; ;
             3064** ; 			DB	"PO","P"+80H,C1H	; 4Eh
             3065** ; 			DB	"PUS","H"+80H,C5H
             3066** ; 			DB	"EX",0,"(S","P"+80H,E3H
             3067** ; ;
             3068** ; ; Group 5: (7 opcodes)
             3069** ; ;
             3070** ; 			DB	"SU","B"+80H,90H	; 51h
             3071** ; 			DB	"AN","D"+80H,A0H
             3072** ; 			DB	"XO","R"+80H,A8H
             3073** ; 			DB	"O","R"+80H,B0H
             3074** ; 			DB	"C","P"+80H,B8H
             3075** ; 			DB	TAND,A0H		; 56h TAND: Tokenised AND
             3076** ; 			DB	TOR,B0H			; 57h TOR: Tokenised OR
             3077** ; ;
             3078** ; ; Group 6 (3 opcodes)
             3079** ; ;
             3080** ; 			DB	"AD","D"+80H,80H	; 58h
             3081** ; 			DB	"AD","C"+80H,88H
             3082** ; 			DB	"SB","C"+80H,98H
             3083** ; ;
             3084** ; ; Group 7: (2 opcodes)
             3085** ; ;
             3086** ; 			DB	"IN","C"+80H,04H	; 5Bh
             3087** ; 			DB	"DE","C"+80H,05H
             3088** ; ;
             3089** ; ; Group 8: (2 opcodes)
             3090** ; ;
             3091** ; 			DB	"IN","0"+80H,00H	; 5Dh
             3092** ; 			DB	"OUT","0"+80H,01H
             3093** ; ;
             3094** ; ; Group 9: (1 opcode)
             3095** ; ;
             3096** ; 			DB	"I","N"+80H,40H		; 5Fh
             3097** ; ;
             3098** ; ; Group 10: (1 opcode)
             3099** ; ;
             3100** ; 			DB	"OU","T"+80H,41H	; 60h
             3101** ; ;
             3102** ; ; Group 11: (2 opcodes)
             3103** ; ;
             3104** ; 			DB	"J","R"+80H,20H		; 61h
             3105** ; 			DB	"DJN","Z"+80H,10H
             3106** ; ;
             3107** ; ; Group 12: (1 opcode)
             3108** ; ;
             3109** ; 			DB	"J","P"+80H,C2H		; 63h
             3110** ; ;
             3111** ; ; Group 13: (1 opcode)
             3112** ; ;
             3113** ; 			DB	"CAL","L"+80H,C4H	; 64h
             3114** ; ;
             3115** ; ; Group 14: (1 opcode)
             3116** ; ;
             3117** ; 			DB	"RS","T"+80H,C7H	; 65h
             3118** ; ;
             3119** ; ; Group 15: (1 opcode)
             3120** ; ;
             3121** ; 			DB	"RE","T"+80H,C0H	; 66h
             3122** ; ;
             3123** ; ; Group 16: (1 opcode)
             3124** ; ;
             3125** ; 			DB	"L","D"+80H,40H		; 67h
             3126** ; ;
             3127** ; ; Group 17: (1 opcode)
             3128** ; ;
             3129** ; 			DB	"TS","T"+80H,04H	; 68h
             3130** 
             3131** ; ;
             3132** ; ; Assembler Directives
             3133** ; ;
             3134** ; 			DB	"OP","T"+80H,00H	; 69h OPT
             3135** ; 			DB	"AD","L"+80H,00H	; 6Ah ADL
             3136** ; ;
             3137** ; 			DB	DEF_ & 7FH,"B"+80H,00H	; 6Bh Tokenised DEF + B
             3138** ; 			DB	DEF_ & 7FH,"W"+80H,00H	; 6Ch Tokenised DEF + W
             3139** ; 			DB	DEF_ & 7FH,"L"+80H,00H	; 6Dh Tokenised DEF + L
             3140** ; 			DB 	DEF_ & 7FH,"M"+80H,00H	; 6Eh Tokenised DEF + M
             3141** ; ;
             3142** ; 			DB	0
             3143** ; ;
             3144** ; ; Operands
             3145** ; ;
             3146** ; OPRNDS:			DB	"B"+80H, 00H
             3147** ; 			DB	"C"+80H, 01H
             3148** ; 			DB	"D"+80H, 02H
             3149** ; 			DB	"E"+80H, 03H
             3150** ; 			DB	"H"+80H, 04H
             3151** ; 			DB	"L"+80H, 05H
             3152** ; 			DB	"(H","L"+80H,06H
             3153** ; 			DB	"A"+80H, 07H
             3154** ; 			DB	"(I","X"+80H,86H
             3155** ; 			DB	"(I","Y"+80H,C6H
             3156** ; ;
             3157** ; 			DB	"B","C"+80H,08H
             3158** ; 			DB	"D","E"+80H,0AH
             3159** ; 			DB	"H","L"+80H,0CH
             3160** ; 			DB	"I","X"+80H,8CH
             3161** ; 			DB	"I","Y"+80H,CCH
             3162** ; 			DB	"A","F"+80H,0EH
             3163** ; 			DB	"S","P"+80H,0EH
             3164** ; ;
             3165** ; 			DB	"N","Z"+80H,10H
             3166** ; 			DB	"Z"+80H,11H
             3167** ; 			DB	"N","C"+80H,12H
             3168** ; 			DB	"P","O"+80H,14H
             3169** ; 			DB	"P","E"+80H,15H
             3170** ; 			DB	"P"+80H,16H
             3171** ; 			DB	"M"+80H,17H
             3172** ; ;
             3173** ; 			DB	"(","C"+80H,20H
             3174** ; ;
             3175** ; 			DB	0
             3176** ; ;
             3177** ; ; Load operations
             3178** ; ;
             3179** ; LDOPS:			DB	"I",0,"A"+80H,47H
             3180** ; 			DB	"R",0,"A"+80H,4FH
             3181** ; 			DB	"A",0,"I"+80H,57H
             3182** ; 			DB	"A",0,"R"+80H,5FH
             3183** ; 			DB	"(BC",0,"A"+80H,02h
             3184** ; 			DB	"(DE",0,"A"+80H,12H
             3185** ; 			DB	"A",0,"(B","C"+80H,0AH
             3186** ; 			DB	"A",0,"(D","E"+80H,1AH
             3187** ; ;
             3188** ; 			DB	0
             3189** ; ;
             3190** ; ; eZ80 addressing mode suffixes
             3191** ; ;
             3192** ; ; Fully qualified suffixes
             3193** ; ;
             3194** ; EZ80SFS_1:		DB	"LI","S"+80H,49H
             3195** ; 			DB	"SI","L"+80H,52H
             3196** ; EZ80SFS_2:		DB	"SI","S"+80H,40H
             3197** ; 			DB	"LI","L"+80H,5BH
             3198** ; ;
             3199** ; 			DB	0
             3200** ; ;
             3201** ; ; Shortcuts when ADL mode is 0
             3202** ; ;
             3203** ; EZ80SFS_ADL0:		DB	"S"+80H,40H		; Equivalent to .SIS
             3204** ; 			DB	"L"+80H,49H		; Equivalent to .LIS
             3205** ; 			DB	"I","S"+80H,40H		; Equivalent to .SIS
             3206** ; 			DB	"I","L"+80H,52H		; Equivalent to .SIL
             3207** ; ;
             3208** ; 			DB	0
             3209** ; ;
             3210** ; ; Shortcuts when ADL mode is 1
             3211** ; ;
             3212** ; EZ80SFS_ADL1:		DB	"S"+80H,52H		; Equivalent to .SIL
             3213** ; 			DB	"L"+80H,5BH		; Equivalent to .LIL
             3214** ; 			DB	"I","S"+80H,49H		; Equivalent to .LIS
             3215** ; 			DB	"I","L"+80H,5BH		; Equivalent to .LIL
             3216** ; ;
             3217** ; 			DB	0
             3218** ; END REFACTOR FROM BINARY
             3219** ; BEGIN INSERT FROM BINARY
             3220** ;
             3221** ; Trivial cases requiring no computation
             3222** OPCODS:
0B1D94 4E    3223** db 0x4e ; 041DCC 4E      5258 DB	"NO","P"+80H,00h	; # 00h
0B1D95 4F    3224** db 0x4f ; 041DCD
0B1D96 D0    3225** db 0xd0 ; 041DCE
0B1D97 00    3226** db 0x00 ; 041DCF
0B1D98 52    3227** db 0x52 ; 041DD0 52      5259 DB	"RLC","A"+80H,07h
0B1D99 4C    3228** db 0x4c ; 041DD1
0B1D9A 43    3229** db 0x43 ; 041DD2
0B1D9B C1    3230** db 0xc1 ; 041DD3
0B1D9C 07    3231** db 0x07 ; 041DD4
0B1D9D 45    3232** db 0x45 ; 041DD5 45      5260 DB	"EX",0,"AF",0,"AF","'"+80H,08h
0B1D9E 58    3233** db 0x58 ; 041DD6
0B1D9F 00    3234** db 0x00 ; 041DD7
0B1DA0 41    3235** db 0x41 ; 041DD8
0B1DA1 46    3236** db 0x46 ; 041DD9
0B1DA2 00    3237** db 0x00 ; 041DDA
0B1DA3 41    3238** db 0x41 ; 041DDB
0B1DA4 46    3239** db 0x46 ; 041DDC
0B1DA5 A7    3240** db 0xa7 ; 041DDD
0B1DA6 08    3241** db 0x08 ; 041DDE
0B1DA7 52    3242** db 0x52 ; 041DDF 52      5261 DB	"RRC","A"+80H,0FH
0B1DA8 52    3243** db 0x52 ; 041DE0
0B1DA9 43    3244** db 0x43 ; 041DE1
0B1DAA C1    3245** db 0xc1 ; 041DE2
0B1DAB 0F    3246** db 0x0f ; 041DE3
0B1DAC 52    3247** db 0x52 ; 041DE4 52      5262 DB	"RL","A"+80H,17H
0B1DAD 4C    3248** db 0x4c ; 041DE5
0B1DAE C1    3249** db 0xc1 ; 041DE6
0B1DAF 17    3250** db 0x17 ; 041DE7
0B1DB0 52    3251** db 0x52 ; 041DE8 52      5263 DB	"RR","A"+80H,1FH
0B1DB1 52    3252** db 0x52 ; 041DE9
0B1DB2 C1    3253** db 0xc1 ; 041DEA
0B1DB3 1F    3254** db 0x1f ; 041DEB
0B1DB4 44    3255** db 0x44 ; 041DEC 44      5264 DB	"DA","A"+80H,27H
0B1DB5 41    3256** db 0x41 ; 041DED
0B1DB6 C1    3257** db 0xc1 ; 041DEE
0B1DB7 27    3258** db 0x27 ; 041DEF
0B1DB8 43    3259** db 0x43 ; 041DF0 43      5265 DB	"CP","L"+80H,2FH
0B1DB9 50    3260** db 0x50 ; 041DF1
0B1DBA CC    3261** db 0xcc ; 041DF2
0B1DBB 2F    3262** db 0x2f ; 041DF3
0B1DBC 53    3263** db 0x53 ; 041DF4 53      5266 DB	"SC","F"+80H,37H
0B1DBD 43    3264** db 0x43 ; 041DF5
0B1DBE C6    3265** db 0xc6 ; 041DF6
0B1DBF 37    3266** db 0x37 ; 041DF7
0B1DC0 43    3267** db 0x43 ; 041DF8 43      5267 DB	"CC","F"+80H,3FH
0B1DC1 43    3268** db 0x43 ; 041DF9
0B1DC2 C6    3269** db 0xc6 ; 041DFA
0B1DC3 3F    3270** db 0x3f ; 041DFB
0B1DC4 48    3271** db 0x48 ; 041DFC 48      5268 DB	"HAL","T"+80H,76H
0B1DC5 41    3272** db 0x41 ; 041DFD
0B1DC6 4C    3273** db 0x4c ; 041DFE
0B1DC7 D4    3274** db 0xd4 ; 041DFF
0B1DC8 76    3275** db 0x76 ; 041E00
0B1DC9 45    3276** db 0x45 ; 041E01 45      5269 DB	"EX","X"+80H,D9H
0B1DCA 58    3277** db 0x58 ; 041E02
0B1DCB D8    3278** db 0xd8 ; 041E03
0B1DCC D9    3279** db 0xd9 ; 041E04
0B1DCD 45    3280** db 0x45 ; 041E05 45      5270 DB	"EX",0,"DE",0,"H","L"+80H,EBH
0B1DCE 58    3281** db 0x58 ; 041E06
0B1DCF 00    3282** db 0x00 ; 041E07
0B1DD0 44    3283** db 0x44 ; 041E08
0B1DD1 45    3284** db 0x45 ; 041E09
0B1DD2 00    3285** db 0x00 ; 041E0A
0B1DD3 48    3286** db 0x48 ; 041E0B
0B1DD4 CC    3287** db 0xcc ; 041E0C
0B1DD5 EB    3288** db 0xeb ; 041E0D
0B1DD6 44    3289** db 0x44 ; 041E0E 44      5271 DB	"D","I"+80H,F3H
0B1DD7 C9    3290** db 0xc9 ; 041E0F
0B1DD8 F3    3291** db 0xf3 ; 041E10
0B1DD9 45    3292** db 0x45 ; 041E11 45      5272 DB	"E","I"+80H,FBH
0B1DDA C9    3293** db 0xc9 ; 041E12
0B1DDB FB    3294** db 0xfb ; 041E13
             3295** ;
             3296** ; Group 1: (53 opcodes)
             3297** ; As Group 0, but with an ED prefix
             3298** ;
0B1DDC 4E    3299** db 0x4e ; 041E14 4E      5277 DB	"NE","G"+80H,44H	; 0Fh
0B1DDD 45    3300** db 0x45 ; 041E15
0B1DDE C7    3301** db 0xc7 ; 041E16
0B1DDF 44    3302** db 0x44 ; 041E17
0B1DE0 49    3303** db 0x49 ; 041E18 49      5278 DB	"IM",0,"0"+80H,46H
0B1DE1 4D    3304** db 0x4d ; 041E19
0B1DE2 00    3305** db 0x00 ; 041E1A
0B1DE3 B0    3306** db 0xb0 ; 041E1B
0B1DE4 46    3307** db 0x46 ; 041E1C
0B1DE5 52    3308** db 0x52 ; 041E1D 52      5279 DB	"RET","N"+80H,45H
0B1DE6 45    3309** db 0x45 ; 041E1E
0B1DE7 54    3310** db 0x54 ; 041E1F
0B1DE8 CE    3311** db 0xce ; 041E20
0B1DE9 45    3312** db 0x45 ; 041E21
0B1DEA 4D    3313** db 0x4d ; 041E22 4D      5280 DB	"MLT",0,"B","C"+80H,4CH
0B1DEB 4C    3314** db 0x4c ; 041E23
0B1DEC 54    3315** db 0x54 ; 041E24
0B1DED 00    3316** db 0x00 ; 041E25
0B1DEE 42    3317** db 0x42 ; 041E26
0B1DEF C3    3318** db 0xc3 ; 041E27
0B1DF0 4C    3319** db 0x4c ; 041E28
0B1DF1 52    3320** db 0x52 ; 041E29 52      5281 DB	"RET","I"+80H,4DH
0B1DF2 45    3321** db 0x45 ; 041E2A
0B1DF3 54    3322** db 0x54 ; 041E2B
0B1DF4 C9    3323** db 0xc9 ; 041E2C
0B1DF5 4D    3324** db 0x4d ; 041E2D
0B1DF6 49    3325** db 0x49 ; 041E2E 49      5282 DB	"IM",0,"1"+80H,56H
0B1DF7 4D    3326** db 0x4d ; 041E2F
0B1DF8 00    3327** db 0x00 ; 041E30
0B1DF9 B1    3328** db 0xb1 ; 041E31
0B1DFA 56    3329** db 0x56 ; 041E32
0B1DFB 4D    3330** db 0x4d ; 041E33 4D      5283 DB	"MLT",0,"D","E"+80H,5CH
0B1DFC 4C    3331** db 0x4c ; 041E34
0B1DFD 54    3332** db 0x54 ; 041E35
0B1DFE 00    3333** db 0x00 ; 041E36
0B1DFF 44    3334** db 0x44 ; 041E37
0B1E00 C5    3335** db 0xc5 ; 041E38
0B1E01 5C    3336** db 0x5c ; 041E39
0B1E02 49    3337** db 0x49 ; 041E3A 49      5284 DB	"IM",0,"2"+80H,5EH
0B1E03 4D    3338** db 0x4d ; 041E3B
0B1E04 00    3339** db 0x00 ; 041E3C
0B1E05 B2    3340** db 0xb2 ; 041E3D
0B1E06 5E    3341** db 0x5e ; 041E3E
0B1E07 52    3342** db 0x52 ; 041E3F 52      5285 DB	"RR","D"+80H,67H
0B1E08 52    3343** db 0x52 ; 041E40
0B1E09 C4    3344** db 0xc4 ; 041E41
0B1E0A 67    3345** db 0x67 ; 041E42
0B1E0B 4D    3346** db 0x4d ; 041E43 4D      5286 DB	"MLT",0,"H","L"+80H,6CH
0B1E0C 4C    3347** db 0x4c ; 041E44
0B1E0D 54    3348** db 0x54 ; 041E45
0B1E0E 00    3349** db 0x00 ; 041E46
0B1E0F 48    3350** db 0x48 ; 041E47
0B1E10 CC    3351** db 0xcc ; 041E48
0B1E11 6C    3352** db 0x6c ; 041E49
0B1E12 4C    3353** db 0x4c ; 041E4A 4C      5287 DB	"LD",0,"MB",0,"A"+80H,6DH
0B1E13 44    3354** db 0x44 ; 041E4B
0B1E14 00    3355** db 0x00 ; 041E4C
0B1E15 4D    3356** db 0x4d ; 041E4D
0B1E16 42    3357** db 0x42 ; 041E4E
0B1E17 00    3358** db 0x00 ; 041E4F
0B1E18 C1    3359** db 0xc1 ; 041E50
0B1E19 6D    3360** db 0x6d ; 041E51
0B1E1A 4C    3361** db 0x4c ; 041E52 4C      5288 DB	"LD",0,"A",0,"M","B"+80H,6EH
0B1E1B 44    3362** db 0x44 ; 041E53
0B1E1C 00    3363** db 0x00 ; 041E54
0B1E1D 41    3364** db 0x41 ; 041E55
0B1E1E 00    3365** db 0x00 ; 041E56
0B1E1F 4D    3366** db 0x4d ; 041E57
0B1E20 C2    3367** db 0xc2 ; 041E58
0B1E21 6E    3368** db 0x6e ; 041E59
0B1E22 52    3369** db 0x52 ; 041E5A 52      5289 DB	"RL","D"+80H,6FH
0B1E23 4C    3370** db 0x4c ; 041E5B
0B1E24 C4    3371** db 0xc4 ; 041E5C
0B1E25 6F    3372** db 0x6f ; 041E5D
0B1E26 53    3373** db 0x53 ; 041E5E 53      5290 DB	"SL","P"+80H,76H
0B1E27 4C    3374** db 0x4c ; 041E5F
0B1E28 D0    3375** db 0xd0 ; 041E60
0B1E29 76    3376** db 0x76 ; 041E61
0B1E2A 4D    3377** db 0x4d ; 041E62 4D      5291 DB	"MLT",0,"S","P"+80H,7CH
0B1E2B 4C    3378** db 0x4c ; 041E63
0B1E2C 54    3379** db 0x54 ; 041E64
0B1E2D 00    3380** db 0x00 ; 041E65
0B1E2E 53    3381** db 0x53 ; 041E66
0B1E2F D0    3382** db 0xd0 ; 041E67
0B1E30 7C    3383** db 0x7c ; 041E68
0B1E31 53    3384** db 0x53 ; 041E69 53      5292 DB	"STMI","X"+80H,7DH
0B1E32 54    3385** db 0x54 ; 041E6A
0B1E33 4D    3386** db 0x4d ; 041E6B
0B1E34 49    3387** db 0x49 ; 041E6C
0B1E35 D8    3388** db 0xd8 ; 041E6D
0B1E36 7D    3389** db 0x7d ; 041E6E
0B1E37 52    3390** db 0x52 ; 041E6F 52      5293 DB	"RSMI","X"+80H,7EH
0B1E38 53    3391** db 0x53 ; 041E70
0B1E39 4D    3392** db 0x4d ; 041E71
0B1E3A 49    3393** db 0x49 ; 041E72
0B1E3B D8    3394** db 0xd8 ; 041E73
0B1E3C 7E    3395** db 0x7e ; 041E74
0B1E3D 49    3396** db 0x49 ; 041E75 49      5294 DB	"INI","M"+80H,82H
0B1E3E 4E    3397** db 0x4e ; 041E76
0B1E3F 49    3398** db 0x49 ; 041E77
0B1E40 CD    3399** db 0xcd ; 041E78
0B1E41 82    3400** db 0x82 ; 041E79
0B1E42 4F    3401** db 0x4f ; 041E7A 4F      5295 DB	"OTI","M"+80H,83H
0B1E43 54    3402** db 0x54 ; 041E7B
0B1E44 49    3403** db 0x49 ; 041E7C
0B1E45 CD    3404** db 0xcd ; 041E7D
0B1E46 83    3405** db 0x83 ; 041E7E
0B1E47 49    3406** db 0x49 ; 041E7F 49      5296 DB	"INI","2"+80H,84H
0B1E48 4E    3407** db 0x4e ; 041E80
0B1E49 49    3408** db 0x49 ; 041E81
0B1E4A B2    3409** db 0xb2 ; 041E82
0B1E4B 84    3410** db 0x84 ; 041E83
0B1E4C 49    3411** db 0x49 ; 041E84 49      5297 DB	"IND","M"+80H,8AH
0B1E4D 4E    3412** db 0x4e ; 041E85
0B1E4E 44    3413** db 0x44 ; 041E86
0B1E4F CD    3414** db 0xcd ; 041E87
0B1E50 8A    3415** db 0x8a ; 041E88
0B1E51 4F    3416** db 0x4f ; 041E89 4F      5298 DB	"OTD","M"+80H,8BH
0B1E52 54    3417** db 0x54 ; 041E8A
0B1E53 44    3418** db 0x44 ; 041E8B
0B1E54 CD    3419** db 0xcd ; 041E8C
0B1E55 8B    3420** db 0x8b ; 041E8D
0B1E56 49    3421** db 0x49 ; 041E8E 49      5299 DB	"IND","2"+80H,8CH
0B1E57 4E    3422** db 0x4e ; 041E8F
0B1E58 44    3423** db 0x44 ; 041E90
0B1E59 B2    3424** db 0xb2 ; 041E91
0B1E5A 8C    3425** db 0x8c ; 041E92
0B1E5B 49    3426** db 0x49 ; 041E93 49      5300 DB	"INIM","R"+80H,92H
0B1E5C 4E    3427** db 0x4e ; 041E94
0B1E5D 49    3428** db 0x49 ; 041E95
0B1E5E 4D    3429** db 0x4d ; 041E96
0B1E5F D2    3430** db 0xd2 ; 041E97
0B1E60 92    3431** db 0x92 ; 041E98
0B1E61 4F    3432** db 0x4f ; 041E99 4F      5301 DB	"OTIM","R"+80H,93H
0B1E62 54    3433** db 0x54 ; 041E9A
0B1E63 49    3434** db 0x49 ; 041E9B
0B1E64 4D    3435** db 0x4d ; 041E9C
0B1E65 D2    3436** db 0xd2 ; 041E9D
0B1E66 93    3437** db 0x93 ; 041E9E
0B1E67 49    3438** db 0x49 ; 041E9F 49      5302 DB	"INI2","R"+80H,94H
0B1E68 4E    3439** db 0x4e ; 041EA0
0B1E69 49    3440** db 0x49 ; 041EA1
0B1E6A 32    3441** db 0x32 ; 041EA2
0B1E6B D2    3442** db 0xd2 ; 041EA3
0B1E6C 94    3443** db 0x94 ; 041EA4
0B1E6D 49    3444** db 0x49 ; 041EA5 49      5303 DB	"INDM","R"+80H,9AH
0B1E6E 4E    3445** db 0x4e ; 041EA6
0B1E6F 44    3446** db 0x44 ; 041EA7
0B1E70 4D    3447** db 0x4d ; 041EA8
0B1E71 D2    3448** db 0xd2 ; 041EA9
0B1E72 9A    3449** db 0x9a ; 041EAA
0B1E73 4F    3450** db 0x4f ; 041EAB 4F      5304 DB	"OTDM","R"+80H,9BH
0B1E74 54    3451** db 0x54 ; 041EAC
0B1E75 44    3452** db 0x44 ; 041EAD
0B1E76 4D    3453** db 0x4d ; 041EAE
0B1E77 D2    3454** db 0xd2 ; 041EAF
0B1E78 9B    3455** db 0x9b ; 041EB0
0B1E79 49    3456** db 0x49 ; 041EB1 49      5305 DB	"IND2","R"+80H,9CH
0B1E7A 4E    3457** db 0x4e ; 041EB2
0B1E7B 44    3458** db 0x44 ; 041EB3
0B1E7C 32    3459** db 0x32 ; 041EB4
0B1E7D D2    3460** db 0xd2 ; 041EB5
0B1E7E 9C    3461** db 0x9c ; 041EB6
0B1E7F 4C    3462** db 0x4c ; 041EB7 4C      5306 DB	"LD","I"+80H,A0H
0B1E80 44    3463** db 0x44 ; 041EB8
0B1E81 C9    3464** db 0xc9 ; 041EB9
0B1E82 A0    3465** db 0xa0 ; 041EBA
0B1E83 43    3466** db 0x43 ; 041EBB 43      5307 DB	"CP","I"+80H,A1H
0B1E84 50    3467** db 0x50 ; 041EBC
0B1E85 C9    3468** db 0xc9 ; 041EBD
0B1E86 A1    3469** db 0xa1 ; 041EBE
0B1E87 49    3470** db 0x49 ; 041EBF 49      5308 DB	"IN","I"+80H,A2H
0B1E88 4E    3471** db 0x4e ; 041EC0
0B1E89 C9    3472** db 0xc9 ; 041EC1
0B1E8A A2    3473** db 0xa2 ; 041EC2
0B1E8B 4F    3474** db 0x4f ; 041EC3 4F      5309 DB	"OUTI","2"+80H,A4H	; These are swapped round so that FIND will find
0B1E8C 55    3475** db 0x55 ; 041EC4
0B1E8D 54    3476** db 0x54 ; 041EC5
0B1E8E 49    3477** db 0x49 ; 041EC6
0B1E8F B2    3478** db 0xb2 ; 041EC7
0B1E90 A4    3479** db 0xa4 ; 041EC8
0B1E91 4F    3480** db 0x4f ; 041EC9 4F      5310 DB	"OUT","I"+80H,A3H	; OUTI2 before OUTI
0B1E92 55    3481** db 0x55 ; 041ECA
0B1E93 54    3482** db 0x54 ; 041ECB
0B1E94 C9    3483** db 0xc9 ; 041ECC
0B1E95 A3    3484** db 0xa3 ; 041ECD
0B1E96 4C    3485** db 0x4c ; 041ECE 4C      5311 DB	"LD","D"+80H,A8H
0B1E97 44    3486** db 0x44 ; 041ECF
0B1E98 C4    3487** db 0xc4 ; 041ED0
0B1E99 A8    3488** db 0xa8 ; 041ED1
0B1E9A 43    3489** db 0x43 ; 041ED2 43      5312 DB	"CP","D"+80H,A9H
0B1E9B 50    3490** db 0x50 ; 041ED3
0B1E9C C4    3491** db 0xc4 ; 041ED4
0B1E9D A9    3492** db 0xa9 ; 041ED5
0B1E9E 49    3493** db 0x49 ; 041ED6 49      5313 DB	"IN","D"+80H,AAH
0B1E9F 4E    3494** db 0x4e ; 041ED7
0B1EA0 C4    3495** db 0xc4 ; 041ED8
0B1EA1 AA    3496** db 0xaa ; 041ED9
0B1EA2 4F    3497** db 0x4f ; 041EDA 4F      5314 DB	"OUTD","2"+80H,ACH	; Similarly these are swapped round so that FIND
0B1EA3 55    3498** db 0x55 ; 041EDB
0B1EA4 54    3499** db 0x54 ; 041EDC
0B1EA5 44    3500** db 0x44 ; 041EDD
0B1EA6 B2    3501** db 0xb2 ; 041EDE
0B1EA7 AC    3502** db 0xac ; 041EDF
0B1EA8 4F    3503** db 0x4f ; 041EE0 4F      5315 DB	"OUT","D"+80H,ABH	; will find OUTD2 before OUTD
0B1EA9 55    3504** db 0x55 ; 041EE1
0B1EAA 54    3505** db 0x54 ; 041EE2
0B1EAB C4    3506** db 0xc4 ; 041EE3
0B1EAC AB    3507** db 0xab ; 041EE4
0B1EAD 4C    3508** db 0x4c ; 041EE5 4C      5316 DB	"LDI","R"+80H,B0H
0B1EAE 44    3509** db 0x44 ; 041EE6
0B1EAF 49    3510** db 0x49 ; 041EE7
0B1EB0 D2    3511** db 0xd2 ; 041EE8
0B1EB1 B0    3512** db 0xb0 ; 041EE9
0B1EB2 43    3513** db 0x43 ; 041EEA 43      5317 DB	"CPI","R"+80H,B1H
0B1EB3 50    3514** db 0x50 ; 041EEB
0B1EB4 49    3515** db 0x49 ; 041EEC
0B1EB5 D2    3516** db 0xd2 ; 041EED
0B1EB6 B1    3517** db 0xb1 ; 041EEE
0B1EB7 49    3518** db 0x49 ; 041EEF 49      5318 DB	"INI","R"+80H,B2H
0B1EB8 4E    3519** db 0x4e ; 041EF0
0B1EB9 49    3520** db 0x49 ; 041EF1
0B1EBA D2    3521** db 0xd2 ; 041EF2
0B1EBB B2    3522** db 0xb2 ; 041EF3
0B1EBC 4F    3523** db 0x4f ; 041EF4 4F      5319 DB	"OTI","R"+80H,B3H
0B1EBD 54    3524** db 0x54 ; 041EF5
0B1EBE 49    3525** db 0x49 ; 041EF6
0B1EBF D2    3526** db 0xd2 ; 041EF7
0B1EC0 B3    3527** db 0xb3 ; 041EF8
0B1EC1 4F    3528** db 0x4f ; 041EF9 4F      5320 DB	"OTI2","R"+80H,B4H
0B1EC2 54    3529** db 0x54 ; 041EFA
0B1EC3 49    3530** db 0x49 ; 041EFB
0B1EC4 32    3531** db 0x32 ; 041EFC
0B1EC5 D2    3532** db 0xd2 ; 041EFD
0B1EC6 B4    3533** db 0xb4 ; 041EFE
0B1EC7 4C    3534** db 0x4c ; 041EFF 4C      5321 DB	"LDD","R"+80H,B8H
0B1EC8 44    3535** db 0x44 ; 041F00
0B1EC9 44    3536** db 0x44 ; 041F01
0B1ECA D2    3537** db 0xd2 ; 041F02
0B1ECB B8    3538** db 0xb8 ; 041F03
0B1ECC 43    3539** db 0x43 ; 041F04 43      5322 DB	"CPD","R"+80H,B9H
0B1ECD 50    3540** db 0x50 ; 041F05
0B1ECE 44    3541** db 0x44 ; 041F06
0B1ECF D2    3542** db 0xd2 ; 041F07
0B1ED0 B9    3543** db 0xb9 ; 041F08
0B1ED1 49    3544** db 0x49 ; 041F09 49      5323 DB	"IND","R"+80H,BAH
0B1ED2 4E    3545** db 0x4e ; 041F0A
0B1ED3 44    3546** db 0x44 ; 041F0B
0B1ED4 D2    3547** db 0xd2 ; 041F0C
0B1ED5 BA    3548** db 0xba ; 041F0D
0B1ED6 4F    3549** db 0x4f ; 041F0E 4F      5324 DB	"OTD","R"+80H,BBH
0B1ED7 54    3550** db 0x54 ; 041F0F
0B1ED8 44    3551** db 0x44 ; 041F10
0B1ED9 D2    3552** db 0xd2 ; 041F11
0B1EDA BB    3553** db 0xbb ; 041F12
0B1EDB 4F    3554** db 0x4f ; 041F13 4F      5325 DB	"OTD2","R"+80H,BCH
0B1EDC 54    3555** db 0x54 ; 041F14
0B1EDD 44    3556** db 0x44 ; 041F15
0B1EDE 32    3557** db 0x32 ; 041F16
0B1EDF D2    3558** db 0xd2 ; 041F17
0B1EE0 BC    3559** db 0xbc ; 041F18
0B1EE1 49    3560** db 0x49 ; 041F19 49      5326 DB	"INIR","X"+80H,C2H
0B1EE2 4E    3561** db 0x4e ; 041F1A
0B1EE3 49    3562** db 0x49 ; 041F1B
0B1EE4 52    3563** db 0x52 ; 041F1C
0B1EE5 D8    3564** db 0xd8 ; 041F1D
0B1EE6 C2    3565** db 0xc2 ; 041F1E
0B1EE7 4F    3566** db 0x4f ; 041F1F 4F      5327 DB	"OTIR","X"+80H,C3H
0B1EE8 54    3567** db 0x54 ; 041F20
0B1EE9 49    3568** db 0x49 ; 041F21
0B1EEA 52    3569** db 0x52 ; 041F22
0B1EEB D8    3570** db 0xd8 ; 041F23
0B1EEC C3    3571** db 0xc3 ; 041F24
0B1EED 49    3572** db 0x49 ; 041F25 49      5328 DB	"INDR","X"+80H,CAH
0B1EEE 4E    3573** db 0x4e ; 041F26
0B1EEF 44    3574** db 0x44 ; 041F27
0B1EF0 52    3575** db 0x52 ; 041F28
0B1EF1 D8    3576** db 0xd8 ; 041F29
0B1EF2 CA    3577** db 0xca ; 041F2A
0B1EF3 4F    3578** db 0x4f ; 041F2B 4F      5329 DB	"OTDR","X"+80H,CBH
0B1EF4 54    3579** db 0x54 ; 041F2C
0B1EF5 44    3580** db 0x44 ; 041F2D
0B1EF6 52    3581** db 0x52 ; 041F2E
0B1EF7 D8    3582** db 0xd8 ; 041F2F
0B1EF8 CB    3583** db 0xcb ; 041F30
             3584** ;
             3585** ; Group 2: (3 opcodes)
             3586** ;
0B1EF9 42    3587** db 0x42 ; 041F31 42      5333 DB	"BI","T"+80H,40H	; 44h
0B1EFA 49    3588** db 0x49 ; 041F32
0B1EFB D4    3589** db 0xd4 ; 041F33
0B1EFC 40    3590** db 0x40 ; 041F34
0B1EFD 52    3591** db 0x52 ; 041F35 52      5333 DB	"RE","S"+80H,80H
0B1EFE 45    3592** db 0x45 ; 041F36
0B1EFF D3    3593** db 0xd3 ; 041F37
0B1F00 80    3594** db 0x80 ; 041F38
0B1F01 53    3595** db 0x53 ; 041F39 53      5334 DB	"SE","T"+80H,C0H
0B1F02 45    3596** db 0x45 ; 041F3A
0B1F03 D4    3597** db 0xd4 ; 041F3B
0B1F04 C0    3598** db 0xc0 ; 041F3C
             3599** ;
             3600** ; Group 3: (7 opcodes)
             3601** ;
0B1F05 52    3602** db 0x52 ; 041F3D 52      5338 DB	"RL","C"+80H,00H	; 47h
0B1F06 4C    3603** db 0x4c ; 041F3E
0B1F07 C3    3604** db 0xc3 ; 041F3F
0B1F08 00    3605** db 0x00 ; 041F40
0B1F09 52    3606** db 0x52 ; 041F41 52      5339 DB	"RR","C"+80H,08H
0B1F0A 52    3607** db 0x52 ; 041F42
0B1F0B C3    3608** db 0xc3 ; 041F43
0B1F0C 08    3609** db 0x08 ; 041F44
0B1F0D 52    3610** db 0x52 ; 041F45 52      5340 DB	"R","L"+80H,10H
0B1F0E CC    3611** db 0xcc ; 041F46
0B1F0F 10    3612** db 0x10 ; 041F47
0B1F10 52    3613** db 0x52 ; 041F48 52      5341 DB	"R","R"+80H,18H
0B1F11 D2    3614** db 0xd2 ; 041F49
0B1F12 18    3615** db 0x18 ; 041F4A
0B1F13 53    3616** db 0x53 ; 041F4B 53      5342 DB	"SL","A"+80H,20H
0B1F14 4C    3617** db 0x4c ; 041F4C
0B1F15 C1    3618** db 0xc1 ; 041F4D
0B1F16 20    3619** db 0x20 ; 041F4E
0B1F17 53    3620** db 0x53 ; 041F4F 53      5343 DB	"SR","A"+80H,28H
0B1F18 52    3621** db 0x52 ; 041F50
0B1F19 C1    3622** db 0xc1 ; 041F51
0B1F1A 28    3623** db 0x28 ; 041F52
0B1F1B 53    3624** db 0x53 ; 041F53 53      5344 DB	"SR","L"+80H,38H
0B1F1C 52    3625** db 0x52 ; 041F54
0B1F1D CC    3626** db 0xcc ; 041F55
0B1F1E 38    3627** db 0x38 ; 041F56
             3628** ;
             3629** ; Group 4: (3 opcodes)
             3630** ;
0B1F1F 50    3631** db 0x50 ; 041F57 50      5348 DB	"PO","P"+80H,C1H	; 4Eh
0B1F20 4F    3632** db 0x4f ; 041F58
0B1F21 D0    3633** db 0xd0 ; 041F59
0B1F22 C1    3634** db 0xc1 ; 041F5A
0B1F23 50    3635** db 0x50 ; 041F5B 50      5349 DB	"PUS","H"+80H,C5H
0B1F24 55    3636** db 0x55 ; 041F5C
0B1F25 53    3637** db 0x53 ; 041F5D
0B1F26 C8    3638** db 0xc8 ; 041F5E
0B1F27 C5    3639** db 0xc5 ; 041F5F
0B1F28 45    3640** db 0x45 ; 041F60 45      5350 DB	"EX",0,"(S","P"+80H,E3H
0B1F29 58    3641** db 0x58 ; 041F61
0B1F2A 00    3642** db 0x00 ; 041F62
0B1F2B 28    3643** db 0x28 ; 041F63
0B1F2C 53    3644** db 0x53 ; 041F64
0B1F2D D0    3645** db 0xd0 ; 041F65
0B1F2E E3    3646** db 0xe3 ; 041F66
             3647** ;
             3648** ; Group 5: (7 opcodes)
             3649** ;
0B1F2F 53    3650** db 0x53 ; 041F67 53      5354 DB	"SU","B"+80H,90H	; 51h
0B1F30 55    3651** db 0x55 ; 041F68
0B1F31 C2    3652** db 0xc2 ; 041F69
0B1F32 90    3653** db 0x90 ; 041F6A
0B1F33 41    3654** db 0x41 ; 041F6B 41      5355 DB	"AN","D"+80H,A0H
0B1F34 4E    3655** db 0x4e ; 041F6C
0B1F35 C4    3656** db 0xc4 ; 041F6D
0B1F36 A0    3657** db 0xa0 ; 041F6E
0B1F37 58    3658** db 0x58 ; 041F6F 58      5356 DB	"XO","R"+80H,A8H
0B1F38 4F    3659** db 0x4f ; 041F70
0B1F39 D2    3660** db 0xd2 ; 041F71
0B1F3A A8    3661** db 0xa8 ; 041F72
0B1F3B 4F    3662** db 0x4f ; 041F73 4F      5357 DB	"O","R"+80H,B0H
0B1F3C D2    3663** db 0xd2 ; 041F74
0B1F3D B0    3664** db 0xb0 ; 041F75
0B1F3E 43    3665** db 0x43 ; 041F76 43      5358 DB	"C","P"+80H,B8H
0B1F3F D0    3666** db 0xd0 ; 041F77
0B1F40 B8    3667** db 0xb8 ; 041F78
0B1F41 80    3668** db 0x80 ; 041F79 80      5359 DB	TAND,A0H		; 56h TAND: Tokenised AND
0B1F42 A0    3669** db 0xa0 ; 041F7A
0B1F43 84    3670** db 0x84 ; 041F7B 84      5360 DB	TOR,B0H			; 57h TOR: Tokenised OR
0B1F44 B0    3671** db 0xb0 ; 041F7C
             3672** ;
             3673** ; Group 6 (3 opcodes)
             3674** ;
0B1F45 41    3675** db 0x41 ; 041F7D 41      5364 DB	"AD","D"+80H,80H	; 58h
0B1F46 44    3676** db 0x44 ; 041F7E
0B1F47 C4    3677** db 0xc4 ; 041F7F
0B1F48 80    3678** db 0x80 ; 041F80
0B1F49 41    3679** db 0x41 ; 041F81 41      5365 DB	"AD","C"+80H,88H
0B1F4A 44    3680** db 0x44 ; 041F82
0B1F4B C3    3681** db 0xc3 ; 041F83
0B1F4C 88    3682** db 0x88 ; 041F84
0B1F4D 53    3683** db 0x53 ; 041F85 53      5366 DB	"SB","C"+80H,98H
0B1F4E 42    3684** db 0x42 ; 041F86
0B1F4F C3    3685** db 0xc3 ; 041F87
0B1F50 98    3686** db 0x98 ; 041F88
             3687** ;
             3688** ; Group 7: (2 opcodes)
             3689** ;
0B1F51 49    3690** db 0x49 ; 041F89 49      5370 DB	"IN","C"+80H,04H	; 5Bh
0B1F52 4E    3691** db 0x4e ; 041F8A
0B1F53 C3    3692** db 0xc3 ; 041F8B
0B1F54 04    3693** db 0x04 ; 041F8C
0B1F55 44    3694** db 0x44 ; 041F8D 44      5371 DB	"DE","C"+80H,05H
0B1F56 45    3695** db 0x45 ; 041F8E
0B1F57 C3    3696** db 0xc3 ; 041F8F
0B1F58 05    3697** db 0x05 ; 041F90
             3698** ;
             3699** ; Group 8: (2 opcodes)
             3700** ;
0B1F59 49    3701** db 0x49 ; 041F91 49      5375 DB	"IN","0"+80H,00H	; 5Dh
0B1F5A 4E    3702** db 0x4e ; 041F92
0B1F5B B0    3703** db 0xb0 ; 041F93
0B1F5C 00    3704** db 0x00 ; 041F94
0B1F5D 4F    3705** db 0x4f ; 041F95 4F      5376 DB	"OUT","0"+80H,01H
0B1F5E 55    3706** db 0x55 ; 041F96
0B1F5F 54    3707** db 0x54 ; 041F97
0B1F60 B0    3708** db 0xb0 ; 041F98
0B1F61 01    3709** db 0x01 ; 041F99
             3710** ;
             3711** ; Group 9: (1 opcode)
             3712** ;
0B1F62 49    3713** db 0x49 ; 041F9A 49      5380 DB	"I","N"+80H,40H		; 5Fh
0B1F63 CE    3714** db 0xce ; 041F9B
0B1F64 40    3715** db 0x40 ; 041F9C
             3716** ;
             3717** ; Group 10: (1 opcode)
             3718** ;
0B1F65 4F    3719** db 0x4f ; 041F9D 4F      5384 DB	"OU","T"+80H,41H	; 60h
0B1F66 55    3720** db 0x55 ; 041F9E
0B1F67 D4    3721** db 0xd4 ; 041F9F
0B1F68 41    3722** db 0x41 ; 041FA0
             3723** ;
             3724** ; Group 11: (2 opcodes)
             3725** ;
0B1F69 4A    3726** db 0x4a ; 041FA1 4A      5388 DB	"J","R"+80H,20H		; 61h
0B1F6A D2    3727** db 0xd2 ; 041FA2
0B1F6B 20    3728** db 0x20 ; 041FA3
0B1F6C 44    3729** db 0x44 ; 041FA4 44      5389 DB	"DJN","Z"+80H,10H
0B1F6D 4A    3730** db 0x4a ; 041FA5
0B1F6E 4E    3731** db 0x4e ; 041FA6
0B1F6F DA    3732** db 0xda ; 041FA7
0B1F70 10    3733** db 0x10 ; 041FA8
             3734** ;
             3735** ; Group 12: (1 opcode)
             3736** ;
0B1F71 4A    3737** db 0x4a ; 041FA9 4A      5393 DB	"J","P"+80H,C2H		; 63h
0B1F72 D0    3738** db 0xd0 ; 041FAA
0B1F73 C2    3739** db 0xc2 ; 041FAB
             3740** ;
             3741** ; Group 13: (1 opcode)
             3742** ;
0B1F74 43    3743** db 0x43 ; 041FAC 43      5397 DB	"CAL","L"+80H,C4H	; 64h
0B1F75 41    3744** db 0x41 ; 041FAD
0B1F76 4C    3745** db 0x4c ; 041FAE
0B1F77 CC    3746** db 0xcc ; 041FAF
0B1F78 C4    3747** db 0xc4 ; 041FB0
             3748** ;
             3749** ; Group 14: (1 opcode)
             3750** ;
0B1F79 52    3751** db 0x52 ; 041FB1 52      5401 DB	"RS","T"+80H,C7H	; 65h
0B1F7A 53    3752** db 0x53 ; 041FB2
0B1F7B D4    3753** db 0xd4 ; 041FB3
0B1F7C C7    3754** db 0xc7 ; 041FB4
             3755** ;
             3756** ; Group 15: (1 opcode)
             3757** ;
0B1F7D 52    3758** db 0x52 ; 041FB5 52      5405 DB	"RE","T"+80H,C0H	; 66h
0B1F7E 45    3759** db 0x45 ; 041FB6
0B1F7F D4    3760** db 0xd4 ; 041FB7
0B1F80 C0    3761** db 0xc0 ; 041FB8
             3762** ;
             3763** ; Group 16: (1 opcode)
             3764** ;
0B1F81 4C    3765** db 0x4c ; 041FB9 4C      5409 DB	"L","D"+80H,40H		; 67h
0B1F82 C4    3766** db 0xc4 ; 041FBA
0B1F83 40    3767** db 0x40 ; 041FBB
             3768** ;
             3769** ; Group 17: (1 opcode)
             3770** ;
0B1F84 54    3771** db 0x54 ; 041FBC 54      5413 DB	"TS","T"+80H,04H	; 68h
0B1F85 53    3772** db 0x53 ; 041FBD
0B1F86 D4    3773** db 0xd4 ; 041FBE
0B1F87 04    3774** db 0x04 ; 041FBF
             3775** ;
             3776** ; Assembler Directives
             3777** ;
0B1F88 4F    3778** db 0x4f ; 041FC0 4F      5418 DB	"OP","T"+80H,00H	; 69h OPT
0B1F89 50    3779** db 0x50 ; 041FC1
0B1F8A D4    3780** db 0xd4 ; 041FC2
0B1F8B 00    3781** db 0x00 ; 041FC3
0B1F8C 41    3782** db 0x41 ; 041FC4 41      5419 DB	"AD","L"+80H,00H	; 6Ah ADL
0B1F8D 44    3783** db 0x44 ; 041FC5
0B1F8E CC    3784** db 0xcc ; 041FC6
0B1F8F 00    3785** db 0x00 ; 041FC7
0B1F90 5D    3786** db 0x5d ; 041FC8 5D      5421 DB	DEF_ & 7FH,"B"+80H,00H	; 6Bh Tokenised DEF + B
0B1F91 C2    3787** db 0xc2 ; 041FC9
0B1F92 00    3788** db 0x00 ; 041FCA
0B1F93 5D    3789** db 0x5d ; 041FCB 5D      5422 DB	DEF_ & 7FH,"W"+80H,00H	; 6Ch Tokenised DEF + W
0B1F94 D7    3790** db 0xd7 ; 041FCC
0B1F95 00    3791** db 0x00 ; 041FCD
0B1F96 5D    3792** db 0x5d ; 041FCE 5D      5423 DB	DEF_ & 7FH,"L"+80H,00H	; 6Dh Tokenised DEF + L
0B1F97 CC    3793** db 0xcc ; 041FCF
0B1F98 00    3794** db 0x00 ; 041FD0
0B1F99 5D    3795** db 0x5d ; 041FD1 5D      5424 DB 	DEF_ & 7FH,"M"+80H,00H	; 6Eh Tokenised DEF + M
0B1F9A CD    3796** db 0xcd ; 041FD2
0B1F9B 00    3797** db 0x00 ; 041FD3
0B1F9C 00    3798** db 0x00 ; 041FD4 00      5426 DB	0
             3799** ;
             3800** ; Operands
             3801** ;
             3802** OPRNDS:
0B1F9D C2    3803** db 0xc2 ; 041FD5 42      5430 OPRNDS:			DB	"B"+80H, 00H
0B1F9E 00    3804** db 0x00 ; 041FD6
0B1F9F C3    3805** db 0xc3 ; 041FD7 43      5431 DB	"C"+80H, 01H
0B1FA0 01    3806** db 0x01 ; 041FD8
0B1FA1 C4    3807** db 0xc4 ; 041FD9 44      5432 DB	"D"+80H, 02H
0B1FA2 02    3808** db 0x02 ; 041FDA
0B1FA3 C5    3809** db 0xc5 ; 041FDB 45      5433 DB	"E"+80H, 03H
0B1FA4 03    3810** db 0x03 ; 041FDC
0B1FA5 C8    3811** db 0xc8 ; 041FDD 48      5434 DB	"H"+80H, 04H
0B1FA6 04    3812** db 0x04 ; 041FDE
0B1FA7 CC    3813** db 0xcc ; 041FDF 4C      5435 DB	"L"+80H, 05H
0B1FA8 05    3814** db 0x05 ; 041FE0
0B1FA9 28    3815** db 0x28 ; 041FE1 28      5436 DB	"(H","L"+80H,06H
0B1FAA 48    3816** db 0x48 ; 041FE2
0B1FAB CC    3817** db 0xcc ; 041FE3
0B1FAC 06    3818** db 0x06 ; 041FE4
0B1FAD C1    3819** db 0xc1 ; 041FE5 41      5437 DB	"A"+80H, 07H
0B1FAE 07    3820** db 0x07 ; 041FE6
0B1FAF 28    3821** db 0x28 ; 041FE7 28      5438 DB	"(I","X"+80H,86H
0B1FB0 49    3822** db 0x49 ; 041FE8
0B1FB1 D8    3823** db 0xd8 ; 041FE9
0B1FB2 86    3824** db 0x86 ; 041FEA
0B1FB3 28    3825** db 0x28 ; 041FEB 28      5439 DB	"(I","Y"+80H,C6H
0B1FB4 49    3826** db 0x49 ; 041FEC
0B1FB5 D9    3827** db 0xd9 ; 041FED
0B1FB6 C6    3828** db 0xc6 ; 041FEE
0B1FB7 42    3829** db 0x42 ; 041FEF 42      5441 DB	"B","C"+80H,08H
0B1FB8 C3    3830** db 0xc3 ; 041FF0
0B1FB9 08    3831** db 0x08 ; 041FF1
0B1FBA 44    3832** db 0x44 ; 041FF2 44      5442 DB	"D","E"+80H,0AH
0B1FBB C5    3833** db 0xc5 ; 041FF3
0B1FBC 0A    3834** db 0x0a ; 041FF4
0B1FBD 48    3835** db 0x48 ; 041FF5 48      5443 DB	"H","L"+80H,0CH
0B1FBE CC    3836** db 0xcc ; 041FF6
0B1FBF 0C    3837** db 0x0c ; 041FF7
0B1FC0 49    3838** db 0x49 ; 041FF8 49      5444 DB	"I","X"+80H,8CH
0B1FC1 D8    3839** db 0xd8 ; 041FF9
0B1FC2 8C    3840** db 0x8c ; 041FFA
0B1FC3 49    3841** db 0x49 ; 041FFB 49      5445 DB	"I","Y"+80H,CCH
0B1FC4 D9    3842** db 0xd9 ; 041FFC
0B1FC5 CC    3843** db 0xcc ; 041FFD
0B1FC6 41    3844** db 0x41 ; 041FFE 41      5446 DB	"A","F"+80H,0EH
0B1FC7 C6    3845** db 0xc6 ; 041FFF
0B1FC8 0E    3846** db 0x0e ; 042000
0B1FC9 53    3847** db 0x53 ; 042001 53      5447 DB	"S","P"+80H,0EH
0B1FCA D0    3848** db 0xd0 ; 042002
0B1FCB 0E    3849** db 0x0e ; 042003
0B1FCC 4E    3850** db 0x4e ; 042004 4E      5449 DB	"N","Z"+80H,10H
0B1FCD DA    3851** db 0xda ; 042005
0B1FCE 10    3852** db 0x10 ; 042006
0B1FCF DA    3853** db 0xda ; 042007 5A      5450 DB	"Z"+80H,11H
0B1FD0 11    3854** db 0x11 ; 042008
0B1FD1 4E    3855** db 0x4e ; 042009 4E      5451 DB	"N","C"+80H,12H
0B1FD2 C3    3856** db 0xc3 ; 04200A
0B1FD3 12    3857** db 0x12 ; 04200B
0B1FD4 50    3858** db 0x50 ; 04200C 50      5452 DB	"P","O"+80H,14H
0B1FD5 CF    3859** db 0xcf ; 04200D
0B1FD6 14    3860** db 0x14 ; 04200E
0B1FD7 50    3861** db 0x50 ; 04200F 50      5453 DB	"P","E"+80H,15H
0B1FD8 C5    3862** db 0xc5 ; 042010
0B1FD9 15    3863** db 0x15 ; 042011
0B1FDA D0    3864** db 0xd0 ; 042012 50      5454 DB	"P"+80H,16H
0B1FDB 16    3865** db 0x16 ; 042013
0B1FDC CD    3866** db 0xcd ; 042014 4D      5455 DB	"M"+80H,17H
0B1FDD 17    3867** db 0x17 ; 042015
0B1FDE 28    3868** db 0x28 ; 042016 28      5457 DB	"(","C"+80H,20H
0B1FDF C3    3869** db 0xc3 ; 042017
0B1FE0 20    3870** db 0x20 ; 042018
0B1FE1 00    3871** db 0x00 ; 042019 00      5459 DB	0
             3872** ;
             3873** ; Load operations
             3874** ;
             3875** LDOPS:
0B1FE2 49    3876** db 0x49 ; 04201A 49      5463 LDOPS:			DB	"I",0,"A"+80H,47H
0B1FE3 00    3877** db 0x00 ; 04201B
0B1FE4 C1    3878** db 0xc1 ; 04201C
0B1FE5 47    3879** db 0x47 ; 04201D
0B1FE6 52    3880** db 0x52 ; 04201E 52      5464 DB	"R",0,"A"+80H,4FH
0B1FE7 00    3881** db 0x00 ; 04201F
0B1FE8 C1    3882** db 0xc1 ; 042020
0B1FE9 4F    3883** db 0x4f ; 042021
0B1FEA 41    3884** db 0x41 ; 042022 41      5465 DB	"A",0,"I"+80H,57H
0B1FEB 00    3885** db 0x00 ; 042023
0B1FEC C9    3886** db 0xc9 ; 042024
0B1FED 57    3887** db 0x57 ; 042025
0B1FEE 41    3888** db 0x41 ; 042026 41      5466 DB	"A",0,"R"+80H,5FH
0B1FEF 00    3889** db 0x00 ; 042027
0B1FF0 D2    3890** db 0xd2 ; 042028
0B1FF1 5F    3891** db 0x5f ; 042029
0B1FF2 28    3892** db 0x28 ; 04202A 28      5467 DB	"(BC",0,"A"+80H,02h
0B1FF3 42    3893** db 0x42 ; 04202B
0B1FF4 43    3894** db 0x43 ; 04202C
0B1FF5 00    3895** db 0x00 ; 04202D
0B1FF6 C1    3896** db 0xc1 ; 04202E
0B1FF7 02    3897** db 0x02 ; 04202F
0B1FF8 28    3898** db 0x28 ; 042030 28      5468 DB	"(DE",0,"A"+80H,12H
0B1FF9 44    3899** db 0x44 ; 042031
0B1FFA 45    3900** db 0x45 ; 042032
0B1FFB 00    3901** db 0x00 ; 042033
0B1FFC C1    3902** db 0xc1 ; 042034
0B1FFD 12    3903** db 0x12 ; 042035
0B1FFE 41    3904** db 0x41 ; 042036 41      5469 DB	"A",0,"(B","C"+80H,0AH
0B1FFF 00    3905** db 0x00 ; 042037
0B2000 28    3906** db 0x28 ; 042038
0B2001 42    3907** db 0x42 ; 042039
0B2002 C3    3908** db 0xc3 ; 04203A
0B2003 0A    3909** db 0x0a ; 04203B
0B2004 41    3910** db 0x41 ; 04203C 41      5470 DB	"A",0,"(D","E"+80H,1AH
0B2005 00    3911** db 0x00 ; 04203D
0B2006 28    3912** db 0x28 ; 04203E
0B2007 44    3913** db 0x44 ; 04203F
0B2008 C5    3914** db 0xc5 ; 042040
0B2009 1A    3915** db 0x1a ; 042041
0B200A 00    3916** db 0x00 ; 042042 00      5472 DB	0
             3917** ;
             3918** ; eZ80 addressing mode suffixes
             3919** ;
             3920** ; Fully qualified suffixes
             3921** ;
             3922** EZ80SFS_1:
0B200B 4C    3923** db 0x4c ; 042043 4C      5478 EZ80SFS_1:		DB	"LI","S"+80H,49H
0B200C 49    3924** db 0x49 ; 042044
0B200D D3    3925** db 0xd3 ; 042045
0B200E 49    3926** db 0x49 ; 042046
0B200F 53    3927** db 0x53 ; 042047 53      5479 DB	"SI","L"+80H,52H
0B2010 49    3928** db 0x49 ; 042048
0B2011 CC    3929** db 0xcc ; 042049
0B2012 52    3930** db 0x52 ; 04204A
             3931** 
             3932** EZ80SFS_2:
0B2013 53    3933** db 0x53 ; 04204B 53      5480 EZ80SFS_2:		DB	"SI","S"+80H,40H
0B2014 49    3934** db 0x49 ; 04204C
0B2015 D3    3935** db 0xd3 ; 04204D
0B2016 40    3936** db 0x40 ; 04204E
0B2017 4C    3937** db 0x4c ; 04204F 4C      5481 DB	"LI","L"+80H,5BH
0B2018 49    3938** db 0x49 ; 042050
0B2019 CC    3939** db 0xcc ; 042051
0B201A 5B    3940** db 0x5b ; 042052
0B201B 00    3941** db 0x00 ; 042053 00      5483 DB	0
             3942** ;
             3943** ; Shortcuts when ADL mode is 0
             3944** ;
             3945** EZ80SFS_ADL0:
0B201C D3    3946** db 0xd3 ; 042054 53      5487 EZ80SFS_ADL0:		DB	"S"+80H,40H		; Equivalent to .SIS
0B201D 40    3947** db 0x40 ; 042055
0B201E CC    3948** db 0xcc ; 042056 4C      5488 DB	"L"+80H,49H		; Equivalent to .LIS
0B201F 49    3949** db 0x49 ; 042057
0B2020 49    3950** db 0x49 ; 042058 49      5489 DB	"I","S"+80H,40H		; Equivalent to .SIS
0B2021 D3    3951** db 0xd3 ; 042059
0B2022 40    3952** db 0x40 ; 04205A
0B2023 49    3953** db 0x49 ; 04205B 49      5490 DB	"I","L"+80H,52H		; Equivalent to .SIL
0B2024 CC    3954** db 0xcc ; 04205C
0B2025 52    3955** db 0x52 ; 04205D
0B2026 00    3956** db 0x00 ; 04205E 00      5492 DB	0
             3957** ;
             3958** ; Shortcuts when ADL mode is 1
             3959** ;
             3960** EZ80SFS_ADL1:
0B2027 D3    3961** db 0xd3 ; 04205F 53      5496 EZ80SFS_ADL1:		DB	"S"+80H,52H		; Equivalent to .SIL
0B2028 52    3962** db 0x52 ; 042060
0B2029 CC    3963** db 0xcc ; 042061 4C      5497 DB	"L"+80H,5BH		; Equivalent to .LIL
0B202A 5B    3964** db 0x5b ; 042062
0B202B 49    3965** db 0x49 ; 042063 49      5498 DB	"I","S"+80H,49H		; Equivalent to .LIS
0B202C D3    3966** db 0xd3 ; 042064
0B202D 49    3967** db 0x49 ; 042065
0B202E 49    3968** db 0x49 ; 042066 49      5499 DB	"I","L"+80H,5BH		; Equivalent to .LIL
0B202F CC    3969** db 0xcc ; 042067
0B2030 5B    3970** db 0x5b ; 042068
0B2031 00    3971** db 0x00 ; 042069 00      5501 DB	0
             3972** ; END INSERT FROM BINARY
             3973** ;
             3974** ; .LIST
             3975** ;
             3976** ; already defined in equs.inc
             3977** ; LF:			EQU     0AH
             3978** ; CR:			EQU     0DH
              0005* include "basic/fpp.asm"
             0001** ;
             0002** ; Title:	BBC Basic Interpreter - Z80 version
             0003** ;		Z80 Floating Point Package
             0004** ; Author:	(C) Copyright  R.T.Russell  1986
             0005** ; Modified By:	Dean Belfield
             0006** ; Created:	03/05/2022
             0007** ; Last Updated:	07/06/2023
             0008** ;
             0009** ; Modinfo:
             0010** ; 26/10/1986:	Version 0.0
             0011** ; 14/12/1988:	Vesion 0.1 (Bug Fix)
             0012** ; 12/05/2023:	Modified by Dean Belfield
             0013** ; 07/06/2023:	Modified to run in ADL mode
             0014** 
             0015** ; .ASSUME	ADL = 1
             0016** 
             0017** ; SEGMENT CODE
             0018** 
             0019** ; XDEF	FPP
             0020** ; XDEF	DLOAD5
             0021** ; XDEF	DLOAD5_SPL
             0022** ;
             0023** ;BINARY FLOATING POINT REPRESENTATION:
             0024** ;   32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
             0025** ;    8 BIT EXCESS-128 SIGNED EXPONENT
             0026** ;   SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
             0027** ;   MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
             0028** ;
             0029** ;BINARY INTEGER REPRESENTATION:
             0030** ;   32 BIT 2'S-COMPLEMENT SIGNED INTEGER
             0031** ;    "EXPONENT" BYTE = 0 (WHEN PRESENT)
             0032** ;
             0033** ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
             0034** ;                            EXPONENT - C
             0035** ;ALTERNATE REGISTER ALLOCATION: MANTISSA - DED'E'
             0036** ;                               EXPONENT - B
             0037** 
             0038** ;
             0039** ;Error codes:
             0040** ;
             0041** 
             0042** BADOP:			EQU     1               ;Bad operation code
             0043** DIVBY0:			EQU     18              ;Division by zero
             0044** TOOBIG_FP:			EQU     20              ;Too big
             0045** NGROOT:			EQU     21              ;Negative root
             0046** LOGRNG:			EQU     22              ;Log range
             0047** ACLOST:			EQU     23              ;Accuracy lost
             0048** EXPRNG:			EQU     24              ;Exp range
             0049** ;
             0050** ;Call entry and despatch code:
             0051** ;
0B2032 FD    0052** FPP:			PUSH    IY              ;Save IY
0B2033 E5 
0B2034 FD    0053** LD      IY,0
0B2035 21 
0B2036 00 
0B2037 00 
0B2037 00   
0B2039 FD    0054** ADD     IY,SP           ;Save SP in IY
0B203A 39 
0B203B CD    0055** CALL    OP              ;Perform operation
0B203C 4B 
0B203D 20 
0B203E 0B 
0B203F BF    0056** CP      A               ;Good return (Z, NC)
0B2040 FD    0057** EXIT_FP_:			POP     IY              ;Restore IY
0B2041 E1 
0B2042 C9    0058** RET                     ;Return to caller
             0059** ;
             0060** ;Error exit:
             0061** ;
0B2043 3E    0062** BAD_FP:			LD      A,BADOP         ;"Bad operation code"
0B2044 01 
0B2045 FD    0063** ERROR_FP_:			LD      SP,IY           ;Restore SP from IY
0B2046 F9 
0B2047 B7    0064** OR      A               ;Set NZ
0B2048 37    0065** SCF                     ;Set C
0B2049 18    0066** JR      EXIT_FP_
0B204A F5 
             0067** ;
             0068** ;Perform operation or function:
             0069** ;
             0070** ; OP:			CP      (RTABLE-DTABLE)/3
0B204B FE    0071** OP:				CP      RTABLE-DTABLE/3 ; ez80asm doesn't do nested expressions
0B204C 2A 
             0072** 
0B204D 30    0073** JR      NC,BAD_FP
0B204E F4 
             0074** ; CP      (FTABLE-DTABLE)/3
0B204F FE    0075** CP      FTABLE-DTABLE/3 ; ditto
0B2050 10 
0B2051 30    0076** JR      NC,DISPAT_FP
0B2052 08 
0B2053 08    0077** EX      AF,AF'
0B2054 78    0078** LD      A,B
0B2055 B1    0079** OR      C               ;Both integer?
0B2056 C4    0080** CALL    NZ,FLOATA       ;No, so float both
0B2057 5E 
0B2058 2B 
0B2059 0B 
0B205A 08    0081** EX      AF,AF'
0B205B E5    0082** DISPAT_FP:			PUSH    HL
0B205C 21    0083** LD      HL,DTABLE
0B205D 6E 
0B205E 20 
0B205F 0B 
0B2060 C5    0084** PUSH    BC
0B2061 01    0085** LD	BC, 3		; C = 3
0B2062 03 
0B2063 00 
0B2064 00 
0B2065 47    0086** LD	B, A 		; B = op-code
0B2066 ED    0087** MLT 	BC 		;BC = op-code * 3
0B2067 4C 
0B2068 09    0088** ADD	HL, BC 		;Add to table base
0B2069 ED    0089** LD	HL, (HL)	;Get the routine address (24-bit)
0B206A 27 
             0090** 
             0091** ;        		ADD     A, A            ;A = op-code * 2
             0092** ;        		LD      C,A
             0093** ;        		LD      B,0             ;BC = op-code * 2
             0094** ;        		ADD     HL,BC
             0095** ;        		LD      A,(HL)          ;Get low byte
             0096** ;        		INC     HL
             0097** ;        		LD      H,(HL)          ;Get high byte
             0098** ;        		LD      L,A
             0099** 
0B206B C1    0100** POP     BC
0B206C E3    0101** EX      (SP),HL
0B206D C9    0102** RET                     ;Off to routine
             0103** ;
             0104** ;Despatch table:
             0105** ;
0B206E 20    0106** DTABLE:			DW24  IAND            ;AND (INTEGER)
0B206F 21 
0B2070 0B 
0B2071 8E    0107** DW24  IBDIV           ;DIV
0B2072 21 
0B2073 0B 
0B2074 33    0108** DW24  IEOR            ;EOR
0B2075 21 
0B2076 0B 
0B2077 59    0109** DW24  IMOD            ;MOD
0B2078 21 
0B2079 0B 
0B207A 46    0110** DW24  IOR             ;OR
0B207B 21 
0B207C 0B 
0B207D 14    0111** DW24  ILE             ;<=
0B207E 24 
0B207F 0B 
0B2080 23    0112** DW24  INE             ;<>
0B2081 24 
0B2082 0B 
0B2083 07    0113** DW24  IGE             ;>=
0B2084 24 
0B2085 0B 
0B2086 EC    0114** DW24  ILT             ;<
0B2087 23 
0B2088 0B 
0B2089 30    0115** DW24  IEQ             ;=
0B208A 24 
0B208B 0B 
0B208C 7C    0116** DW24  IMUL            ;*
0B208D 22 
0B208E 0B 
0B208F B7    0117** DW24  IADD            ;+
0B2090 21 
0B2091 0B 
0B2092 F9    0118** DW24  IGT             ;>
0B2093 23 
0B2094 0B 
0B2095 9E    0119** DW24  ISUB            ;-
0B2096 21 
0B2097 0B 
0B2098 33    0120** DW24  IPOW            ;^
0B2099 23 
0B209A 0B 
0B209B 29    0121** DW24  IDIV            ;/
0B209C 22 
0B209D 0B 
             0122** ;
             0123** FTABLE:
0B209E 42    0124** DW24  ABSV_FP            ;ABS
0B209F 24 
0B20A0 0B 
0B20A1 28    0125** DW24  ACS_FP             ;ACS
0B20A2 28 
0B20A3 0B 
0B20A4 66    0126** DW24  ASN_FP             ;ASN
0B20A5 27 
0B20A6 0B 
0B20A7 96    0127** DW24  ATN_FP             ;ATN
0B20A8 27 
0B20A9 0B 
0B20AA 61    0128** DW24  COS_FP             ;COS
0B20AB 25 
0B20AC 0B 
0B20AD 70    0129** DW24  DEG_FP             ;DEG
0B20AE 24 
0B20AF 0B 
0B20B0 1D    0130** DW24  EXP_FP             ;EXP
0B20B1 26 
0B20B2 0B 
0B20B3 C4    0131** DW24  INT_FP_            ;INT
0B20B4 24 
0B20B5 0B 
0B20B6 BB    0132** DW24  LN_FP              ;LN
0B20B7 26 
0B20B8 0B 
0B20B9 50    0133** DW24  LOG_FP             ;LOG
0B20BA 27 
0B20BB 0B 
0B20BC 4E    0134** DW24  NOTK_FP            ;NOT
0B20BD 24 
0B20BE 0B 
0B20BF 7A    0135** DW24  RAD_FP             ;RAD
0B20C0 24 
0B20C1 0B 
0B20C2 95    0136** DW24  SGN_FP             ;SGN
0B20C3 24 
0B20C4 0B 
0B20C5 6E    0137** DW24  SIN_FP             ;SIN
0B20C6 25 
0B20C7 0B 
0B20C8 DD    0138** DW24  SQR_FP             ;SQR
0B20C9 24 
0B20CA 0B 
0B20CB 3B    0139** DW24  TAN_FP             ;TAN
0B20CC 25 
0B20CD 0B 
             0140** ;
0B20CE EB    0141** DW24  ZERO_FP            ;ZERO
0B20CF 2B 
0B20D0 0B 
0B20D1 F6    0142** DW24  FONE_FP            ;FONE
0B20D2 25 
0B20D3 0B 
0B20D4 35    0143** DW24  TRUE_FP            ;TRUE
0B20D5 24 
0B20D6 0B 
0B20D7 62    0144** DW24  PI_FP              ;PI
0B20D8 24 
0B20D9 0B 
             0145** ;
0B20DA A9    0146** DW24  VAL_FP             ;VAL
0B20DB 24 
0B20DC 0B 
0B20DD 31    0147** DW24  STR_FP             ;STR$
0B20DE 28 
0B20DF 0B 
             0148** ;
0B20E0 92    0149** DW24  SFIX_FP            ;FIX
0B20E1 2A 
0B20E2 0B 
0B20E3 6E    0150** DW24  SFLOAT_FP          ;FLOAT
0B20E4 2B 
0B20E5 0B 
             0151** ;
0B20E6 BC    0152** DW24  FTEST_FP           ;TEST
0B20E7 2B 
0B20E8 0B 
0B20E9 CE    0153** DW24  FCOMP_FP           ;COMPARE
0B20EA 2B 
0B20EB 0B 
             0154** ;
0B20EC 1C    0155** RTABLE:			DW24  FAND            ;AND (FLOATING-POINT)
0B20ED 21 
0B20EE 0B 
0B20EF 8A    0156** DW24  FBDIV           ;DIV
0B20F0 21 
0B20F1 0B 
0B20F2 2F    0157** DW24  FEOR            ;EOR
0B20F3 21 
0B20F4 0B 
0B20F5 55    0158** DW24  FMOD            ;MOD
0B20F6 21 
0B20F7 0B 
0B20F8 42    0159** DW24  FFOR             ;OR
0B20F9 21 
0B20FA 0B 
0B20FB 0E    0160** DW24  FLE             ;<=
0B20FC 24 
0B20FD 0B 
0B20FE 1D    0161** DW24  FNE             ;<>
0B20FF 24 
0B2100 0B 
0B2101 01    0162** DW24  FGE             ;>=
0B2102 24 
0B2103 0B 
0B2104 E6    0163** DW24  FLT             ;<
0B2105 23 
0B2106 0B 
0B2107 2A    0164** DW24  FEQ             ;=
0B2108 24 
0B2109 0B 
0B210A D6    0165** DW24  FMUL            ;*
0B210B 22 
0B210C 0B 
0B210D C4    0166** DW24  FADD            ;+
0B210E 21 
0B210F 0B 
0B2110 F3    0167** DW24  FGT             ;>
0B2111 23 
0B2112 0B 
0B2113 AB    0168** DW24  FSUB            ;-
0B2114 21 
0B2115 0B 
0B2116 B3    0169** DW24  FPOW            ;^
0B2117 23 
0B2118 0B 
0B2119 2D    0170** DW24  FDIV            ;/
0B211A 22 
0B211B 0B 
             0171** ;
             0172** ;       PAGE
             0173** ;
             0174** ;ARITHMETIC AND LOGICAL OPERATORS:
             0175** ;All take two arguments, in HLH'L'C & DED'E'B.
             0176** ;Output in HLH'L'C
             0177** ;All registers except IX, IY destroyed.
             0178** ; (N.B. FPOW destroys IX).
             0179** ;
             0180** ;FAND - Floating-point AND.
             0181** ;IAND - Integer AND.
             0182** ;
0B211C CD    0183** FAND:			CALL    FIX2
0B211D 86 
0B211E 2A 
0B211F 0B 
0B2120 7C    0184** IAND:			LD      A,H
0B2121 A2    0185** AND     D
0B2122 67    0186** LD      H,A
0B2123 7D    0187** LD      A,L
0B2124 A3    0188** AND     E
0B2125 6F    0189** LD      L,A
0B2126 D9    0190** EXX
0B2127 7C    0191** LD      A,H
0B2128 A2    0192** AND     D
0B2129 67    0193** LD      H,A
0B212A 7D    0194** LD      A,L
0B212B A3    0195** AND     E
0B212C 6F    0196** LD      L,A
0B212D D9    0197** EXX
0B212E C9    0198** RET
             0199** ;
             0200** ;FEOR - Floating-point exclusive-OR.
             0201** ;IEOR - Integer exclusive-OR.
             0202** ;
0B212F CD    0203** FEOR:			CALL    FIX2
0B2130 86 
0B2131 2A 
0B2132 0B 
0B2133 7C    0204** IEOR:			LD      A,H
0B2134 AA    0205** XOR     D
0B2135 67    0206** LD      H,A
0B2136 7D    0207** LD      A,L
0B2137 AB    0208** XOR     E
0B2138 6F    0209** LD      L,A
0B2139 D9    0210** EXX
0B213A 7C    0211** LD      A,H
0B213B AA    0212** XOR     D
0B213C 67    0213** LD      H,A
0B213D 7D    0214** LD      A,L
0B213E AB    0215** XOR     E
0B213F 6F    0216** LD      L,A
0B2140 D9    0217** EXX
0B2141 C9    0218** RET
             0219** ;
             0220** ;FOR - Floating-point OR.
             0221** ;IOR - Integer OR.
             0222** ;
0B2142 CD    0223** FFOR:			CALL    FIX2
0B2143 86 
0B2144 2A 
0B2145 0B 
0B2146 7C    0224** IOR:			LD      A,H
0B2147 B2    0225** OR      D
0B2148 67    0226** LD      H,A
0B2149 7D    0227** LD      A,L
0B214A B3    0228** OR      E
0B214B 6F    0229** LD      L,A
0B214C D9    0230** EXX
0B214D 7C    0231** LD      A,H
0B214E B2    0232** OR      D
0B214F 67    0233** LD      H,A
0B2150 7D    0234** LD      A,L
0B2151 B3    0235** OR      E
0B2152 6F    0236** LD      L,A
0B2153 D9    0237** EXX
0B2154 C9    0238** RET
             0239** ;
             0240** ;FMOD - Floating-point remainder.
             0241** ;IMOD - Integer remainder.
             0242** ;
0B2155 CD    0243** FMOD:			CALL    FIX2
0B2156 86 
0B2157 2A 
0B2158 0B 
0B2159 7C    0244** IMOD:			LD      A,H
0B215A AA    0245** XOR     D               ;DIV RESULT SIGN
0B215B CB    0246** BIT     7,H
0B215C 7C 
0B215D 08    0247** EX      AF,AF'
0B215E CB    0248** BIT     7,H
0B215F 7C 
0B2160 C4    0249** CALL    NZ,NEGATE       ;MAKE ARGUMENTS +VE
0B2161 A2 
0B2162 2A 
0B2163 0B 
0B2164 CD    0250** CALL    SWAP_FP
0B2165 9F 
0B2166 2B 
0B2167 0B 
0B2168 CB    0251** BIT     7,H
0B2169 7C 
0B216A C4    0252** CALL    NZ,NEGATE
0B216B A2 
0B216C 2A 
0B216D 0B 
0B216E 44    0253** LD      B,H
0B216F 4D    0254** LD      C,L
0B2170 21    0255** LD      HL,0
0B2171 00 
0B2172 00 
0B2173 00 
0B2174 D9    0256** EXX
0B2175 44    0257** LD      B,H
0B2176 4D    0258** LD      C,L
0B2177 21    0259** LD      HL,0
0B2178 00 
0B2179 00 
0B217A 00 
0B217B 3E    0260** LD      A,-33
0B217C DF 
0B217D CD    0261** CALL    DIVA            ;DIVIDE
0B217E 2C 
0B217F 2D 
0B2180 0B 
0B2181 D9    0262** EXX
0B2182 0E    0263** LD      C,0             ;INTEGER MARKER
0B2183 00 
0B2184 08    0264** EX      AF,AF'
0B2185 C8    0265** RET     Z
0B2186 C3    0266** JP      NEGATE
0B2187 A2 
0B2188 2A 
0B2189 0B 
             0267** ;
             0268** ;BDIV - Integer division.
             0269** ;
0B218A CD    0270** FBDIV:			CALL    FIX2
0B218B 86 
0B218C 2A 
0B218D 0B 
0B218E CD    0271** IBDIV:			CALL    IMOD
0B218F 59 
0B2190 21 
0B2191 0B 
0B2192 B7    0272** OR      A
0B2193 CD    0273** CALL    SWAP_FP
0B2194 9F 
0B2195 2B 
0B2196 0B 
0B2197 0E    0274** LD      C,0
0B2198 00 
0B2199 F0    0275** RET     P
0B219A C3    0276** JP      NEGATE
0B219B A2 
0B219C 2A 
0B219D 0B 
             0277** ;
             0278** ;ISUB - Integer subtraction.
             0279** ;FSUB - Floating point subtraction with rounding.
             0280** ;
0B219E CD    0281** ISUB:			CALL    SUB_
0B219F 3A 
0B21A0 2C 
0B21A1 0B 
0B21A2 E0    0282** RET     PO
0B21A3 CD    0283** CALL    ADD_
0B21A4 32 
0B21A5 2C 
0B21A6 0B 
0B21A7 CD    0284** CALL    FLOAT2
0B21A8 62 
0B21A9 2B 
0B21AA 0B 
0B21AB 7A    0285** FSUB:			LD      A,D
0B21AC EE    0286** XOR     80H             ;CHANGE SIGN THEN ADD
0B21AD 80 
0B21AE 57    0287** LD      D,A
0B21AF 18    0288** JR      FADD
0B21B0 13 
             0289** ;
             0290** ;Reverse subtract.
             0291** ;
0B21B1 7C    0292** RSUB:			LD      A,H
0B21B2 EE    0293** XOR     80H
0B21B3 80 
0B21B4 67    0294** LD      H,A
0B21B5 18    0295** JR      FADD
0B21B6 0D 
             0296** ;
             0297** ;IADD - Integer addition.
             0298** ;FADD - Floating point addition with rounding.
             0299** ;
0B21B7 CD    0300** IADD:			CALL    ADD_
0B21B8 32 
0B21B9 2C 
0B21BA 0B 
0B21BB E0    0301** RET     PO
0B21BC CD    0302** CALL    SUB_
0B21BD 3A 
0B21BE 2C 
0B21BF 0B 
0B21C0 CD    0303** CALL    FLOAT2
0B21C1 62 
0B21C2 2B 
0B21C3 0B 
0B21C4 05    0304** FADD:			DEC     B
0B21C5 04    0305** INC     B
0B21C6 C8    0306** RET     Z               ;ARG 2 ZERO
0B21C7 0D    0307** DEC     C
0B21C8 0C    0308** INC     C
0B21C9 CA    0309** JP      Z,SWAP_FP          ;ARG 1 ZERO
0B21CA 9F 
0B21CB 2B 
0B21CC 0B 
0B21CD D9    0310** EXX
0B21CE 01    0311** LD      BC,0            ;INITIALISE
0B21CF 00 
0B21D0 00 
0B21D1 00 
0B21D2 D9    0312** EXX
0B21D3 7C    0313** LD      A,H
0B21D4 AA    0314** XOR     D               ;XOR SIGNS
0B21D5 F5    0315** PUSH    AF
0B21D6 78    0316** LD      A,B
0B21D7 B9    0317** CP      C               ;COMPARE EXPONENTS
0B21D8 DC    0318** CALL    C,SWAP_FP          ;MAKE DED'E'B LARGEST
0B21D9 9F 
0B21DA 2B 
0B21DB 0B 
0B21DC 78    0319** LD      A,B
0B21DD CB    0320** SET     7,H             ;IMPLIED 1
0B21DE FC 
0B21DF C4    0321** CALL    NZ,FIX          ;ALIGN
0B21E0 73 
0B21E1 2A 
0B21E2 0B 
0B21E3 F1    0322** POP     AF
0B21E4 7A    0323** LD      A,D             ;SIGN OF LARGER
0B21E5 CB    0324** SET     7,D             ;IMPLIED 1
0B21E6 FA 
0B21E7 FA    0325** JP      M,FADD3         ;SIGNS DIFFERENT
0B21E8 F7 
0B21E9 21 
0B21EA 0B 
0B21EB CD    0326** CALL    ADD_             ;HLH'L'=HLH'L'+DED'E'
0B21EC 32 
0B21ED 2C 
0B21EE 0B 
0B21EF DC    0327** CALL    C,DIV2          ;NORMALISE
0B21F0 A7 
0B21F1 2B 
0B21F2 0B 
0B21F3 CB    0328** SET     7,H
0B21F4 FC 
0B21F5 18    0329** JR      FADD4
0B21F6 0D 
             0330** ;
0B21F7 CD    0331** FADD3:			CALL    SUB_             ;HLH'L'=HLH'L'-DED'E'
0B21F8 3A 
0B21F9 2C 
0B21FA 0B 
0B21FB DC    0332** CALL    C,NEG_           ;NEGATE HLH'L'B'C'
0B21FC BA 
0B21FD 2A 
0B21FE 0B 
0B21FF CD    0333** CALL    FLO48
0B2200 39 
0B2201 2B 
0B2202 0B 
0B2203 2F    0334** CPL                     ;CHANGE RESULT SIGN
0B2204 D9    0335** FADD4:			EXX
0B2205 EB    0336** EX      DE,HL
0B2206 21    0337** LD      HL,8000H
0B2207 00 
0B2208 80 
0B2209 00 
0B220A B7    0338** OR      A               ;CLEAR CARRY
0B220B 52    0339** SBC.S   HL,BC
0B220C ED 
0B220D 42 
0B220E EB    0340** EX      DE,HL
0B220F D9    0341** EXX
0B2210 CC    0342** CALL    Z,ODD           ;ROUND UNBIASSED
0B2211 99 
0B2212 2B 
0B2213 0B 
0B2214 DC    0343** CALL    C,ADD1_FP          ;ROUND UP
0B2215 87 
0B2216 2B 
0B2217 0B 
0B2218 DC    0344** CALL    C,INCC
0B2219 B4 
0B221A 2B 
0B221B 0B 
0B221C CB    0345** RES     7,H
0B221D BC 
0B221E 0D    0346** DEC     C
0B221F 0C    0347** INC     C
0B2220 CA    0348** JP      Z,ZERO_FP
0B2221 EB 
0B2222 2B 
0B2223 0B 
0B2224 B7    0349** OR      A               ;RESULT SIGNQ
0B2225 F0    0350** RET     P               ;POSITIVE
0B2226 CB    0351** SET     7,H             ;NEGATIVE
0B2227 FC 
0B2228 C9    0352** RET
             0353** ;
             0354** ;IDIV - Integer division.
             0355** ;FDIV - Floating point division with rounding.
             0356** ;
0B2229 CD    0357** IDIV:			CALL    FLOAT2
0B222A 62 
0B222B 2B 
0B222C 0B 
0B222D 05    0358** FDIV:			DEC     B               ;TEST FOR ZERO
0B222E 04    0359** INC     B
0B222F 3E    0360** LD      A,DIVBY0
0B2230 12 
0B2231 CA    0361** JP      Z,ERROR_FP_         ;"Division by zero"
0B2232 45 
0B2233 20 
0B2234 0B 
0B2235 0D    0362** DEC     C               ;TEST FOR ZERO
0B2236 0C    0363** INC     C
0B2237 C8    0364** RET     Z
0B2238 7C    0365** LD      A,H
0B2239 AA    0366** XOR     D               ;CALC. RESULT SIGN
0B223A 08    0367** EX      AF,AF'          ;SAVE SIGN
0B223B CB    0368** SET     7,D             ;REPLACE IMPLIED 1's
0B223C FA 
0B223D CB    0369** SET     7,H
0B223E FC 
0B223F C5    0370** PUSH    BC              ;SAVE EXPONENTS
0B2240 42    0371** LD      B,D             ;LOAD REGISTERS
0B2241 4B    0372** LD      C,E
0B2242 11    0373** LD      DE,0
0B2243 00 
0B2244 00 
0B2245 00 
0B2246 D9    0374** EXX
0B2247 42    0375** LD      B,D
0B2248 4B    0376** LD      C,E
0B2249 11    0377** LD      DE,0
0B224A 00 
0B224B 00 
0B224C 00 
0B224D 3E    0378** LD      A,-32           ;LOOP COUNTER
0B224E E0 
0B224F CD    0379** CALL    DIVA            ;DIVIDE
0B2250 2C 
0B2251 2D 
0B2252 0B 
0B2253 D9    0380** EXX
0B2254 CB    0381** BIT     7,D
0B2255 7A 
0B2256 D9    0382** EXX
0B2257 CC    0383** CALL    Z,DIVB          ;NORMALISE & INC A
0B2258 4B 
0B2259 2D 
0B225A 0B 
0B225B EB    0384** EX      DE,HL
0B225C D9    0385** EXX
0B225D CB    0386** SRL     B               ;DIVISOR/2
0B225E 38 
0B225F CB    0387** RR      C
0B2260 19 
0B2261 B7    0388** OR      A               ;CLEAR CARRY
0B2262 52    0389** SBC.S   HL,BC           ;REMAINDER-DIVISOR/2
0B2263 ED 
0B2264 42 
0B2265 3F    0390** CCF
0B2266 EB    0391** EX      DE,HL           ;RESULT IN HLH'L'
0B2267 CC    0392** CALL    Z,ODD           ;ROUND UNBIASSED
0B2268 99 
0B2269 2B 
0B226A 0B 
0B226B DC    0393** CALL    C,ADD1_FP          ;ROUND UP
0B226C 87 
0B226D 2B 
0B226E 0B 
0B226F C1    0394** POP     BC              ;RESTORE EXPONENTS
0B2270 DC    0395** CALL    C,INCC
0B2271 B4 
0B2272 2B 
0B2273 0B 
0B2274 1F    0396** RRA                     ;LSB OF A TO CARRY
0B2275 79    0397** LD      A,C             ;COMPUTE NEW EXPONENT
0B2276 98    0398** SBC     A,B
0B2277 3F    0399** CCF
0B2278 C3    0400** JP      CHKOVF
0B2279 19 
0B227A 23 
0B227B 0B 
             0401** ;
             0402** ;IMUL - Integer multiplication.
             0403** ;
0B227C 7C    0404** IMUL:			LD      A,H
0B227D AA    0405** XOR     D
0B227E 08    0406** EX      AF,AF'          ;SAVE RESULT SIGN
0B227F CB    0407** BIT     7,H
0B2280 7C 
0B2281 C4    0408** CALL    NZ,NEGATE
0B2282 A2 
0B2283 2A 
0B2284 0B 
0B2285 CD    0409** CALL    SWAP_FP
0B2286 9F 
0B2287 2B 
0B2288 0B 
0B2289 CB    0410** BIT     7,H
0B228A 7C 
0B228B C4    0411** CALL    NZ,NEGATE
0B228C A2 
0B228D 2A 
0B228E 0B 
0B228F 44    0412** LD      B,H
0B2290 4D    0413** LD      C,L
0B2291 21    0414** LD      HL,0
0B2292 00 
0B2293 00 
0B2294 00 
0B2295 D9    0415** EXX
0B2296 44    0416** LD      B,H
0B2297 4D    0417** LD      C,L
0B2298 21    0418** LD      HL,0
0B2299 00 
0B229A 00 
0B229B 00 
0B229C 3E    0419** LD      A,-33
0B229D DF 
0B229E CD    0420** CALL    MULA            ;MULTIPLY
0B229F 63 
0B22A0 2D 
0B22A1 0B 
0B22A2 D9    0421** EXX
0B22A3 0E    0422** LD      C,191           ;PRESET EXPONENT
0B22A4 BF 
0B22A5 CD    0423** CALL    TEST_FP            ;TEST RANGE
0B22A6 C7 
0B22A7 2B 
0B22A8 0B 
0B22A9 20    0424** JR      NZ,IMUL1        ;TOO BIG
0B22AA 0F 
0B22AB CB    0425** BIT     7,D
0B22AC 7A 
0B22AD 20    0426** JR      NZ,IMUL1
0B22AE 0B 
0B22AF CD    0427** CALL    SWAP_FP
0B22B0 9F 
0B22B1 2B 
0B22B2 0B 
0B22B3 4A    0428** LD      C,D             ;INTEGER MARKER
0B22B4 08    0429** EX      AF,AF'
0B22B5 F0    0430** RET     P
0B22B6 C3    0431** JP      NEGATE
0B22B7 A2 
0B22B8 2A 
0B22B9 0B 
             0432** ;
0B22BA 0D    0433** IMUL1:			DEC     C
0B22BB D9    0434** EXX
0B22BC CB    0435** SLA     E
0B22BD 23 
0B22BE CB    0436** RL      D
0B22BF 12 
0B22C0 D9    0437** EXX
0B22C1 CB    0438** RL      E
0B22C2 13 
0B22C3 CB    0439** RL      D
0B22C4 12 
0B22C5 D9    0440** EXX
0B22C6 52    0441** ADC.S   HL,HL
0B22C7 ED 
0B22C8 6A 
0B22C9 D9    0442** EXX
0B22CA 52    0443** ADC.S   HL,HL
0B22CB ED 
0B22CC 6A 
0B22CD F2    0444** JP      P,IMUL1         ;NORMALISE
0B22CE BA 
0B22CF 22 
0B22D0 0B 
0B22D1 08    0445** EX      AF,AF'
0B22D2 F8    0446** RET     M
0B22D3 CB    0447** RES     7,H             ;POSITIVE
0B22D4 BC 
0B22D5 C9    0448** RET
             0449** ;
             0450** ;FMUL - Floating point multiplication with rounding.
             0451** ;
0B22D6 05    0452** FMUL:			DEC     B               ;TEST FOR ZERO
0B22D7 04    0453** INC     B
0B22D8 CA    0454** JP      Z,ZERO_FP
0B22D9 EB 
0B22DA 2B 
0B22DB 0B 
0B22DC 0D    0455** DEC     C               ;TEST FOR ZERO
0B22DD 0C    0456** INC     C
0B22DE C8    0457** RET     Z
0B22DF 7C    0458** LD      A,H
0B22E0 AA    0459** XOR     D               ;CALC. RESULT SIGN
0B22E1 08    0460** EX      AF,AF'
0B22E2 CB    0461** SET     7,D             ;REPLACE IMPLIED 1's
0B22E3 FA 
0B22E4 CB    0462** SET     7,H
0B22E5 FC 
0B22E6 C5    0463** PUSH    BC              ;SAVE EXPONENTS
0B22E7 44    0464** LD      B,H             ;LOAD REGISTERS
0B22E8 4D    0465** LD      C,L
0B22E9 21    0466** LD      HL,0
0B22EA 00 
0B22EB 00 
0B22EC 00 
0B22ED D9    0467** EXX
0B22EE 44    0468** LD      B,H
0B22EF 4D    0469** LD      C,L
0B22F0 21    0470** LD      HL,0
0B22F1 00 
0B22F2 00 
0B22F3 00 
0B22F4 3E    0471** LD      A,-32           ;LOOP COUNTER
0B22F5 E0 
0B22F6 CD    0472** CALL    MULA            ;MULTIPLY
0B22F7 63 
0B22F8 2D 
0B22F9 0B 
0B22FA DC    0473** CALL    C,MULB          ;NORMALISE & INC A
0B22FB 79 
0B22FC 2D 
0B22FD 0B 
0B22FE D9    0474** EXX
0B22FF E5    0475** PUSH    HL
0B2300 21    0476** LD      HL,8000H
0B2301 00 
0B2302 80 
0B2303 00 
0B2304 B7    0477** OR      A               ;CLEAR CARRY
0B2305 52    0478** SBC.S   HL,DE
0B2306 ED 
0B2307 52 
0B2308 E1    0479** POP     HL
0B2309 CC    0480** CALL    Z,ODD           ;ROUND UNBIASSED
0B230A 99 
0B230B 2B 
0B230C 0B 
0B230D DC    0481** CALL    C,ADD1_FP          ;ROUND UP
0B230E 87 
0B230F 2B 
0B2310 0B 
0B2311 C1    0482** POP     BC              ;RESTORE EXPONENTS
0B2312 DC    0483** CALL    C,INCC
0B2313 B4 
0B2314 2B 
0B2315 0B 
0B2316 1F    0484** RRA                     ;LSB OF A TO CARRY
0B2317 79    0485** LD      A,C             ;COMPUTE NEW EXPONENT
0B2318 88    0486** ADC     A,B
0B2319 38    0487** CHKOVF:			JR      C,CHKO1
0B231A 06 
0B231B F2    0488** JP      P,ZERO_FP          ;UNDERFLOW
0B231C EB 
0B231D 2B 
0B231E 0B 
0B231F 18    0489** JR      CHKO2
0B2320 04 
0B2321 FA    0490** CHKO1:			JP      M,OFLOW         ;OVERFLOW
0B2322 B6 
0B2323 2B 
0B2324 0B 
0B2325 C6    0491** CHKO2:			ADD     A,80H
0B2326 80 
0B2327 4F    0492** LD      C,A
0B2328 CA    0493** JP      Z,ZERO_FP
0B2329 EB 
0B232A 2B 
0B232B 0B 
0B232C 08    0494** EX      AF,AF'          ;RESTORE SIGN BIT
0B232D CB    0495** RES     7,H
0B232E BC 
0B232F F0    0496** RET     P
0B2330 CB    0497** SET     7,H
0B2331 FC 
0B2332 C9    0498** RET
             0499** ;
             0500** ;IPOW - Integer involution.
             0501** ;
0B2333 CD    0502** IPOW:			CALL    SWAP_FP
0B2334 9F 
0B2335 2B 
0B2336 0B 
0B2337 CB    0503** BIT     7,H
0B2338 7C 
0B2339 F5    0504** PUSH    AF              ;SAVE SIGN
0B233A C4    0505** CALL    NZ,NEGATE
0B233B A2 
0B233C 2A 
0B233D 0B 
0B233E 48    0506** IPOW0:			LD      C,B
0B233F 06    0507** LD      B,32            ;LOOP COUNTER
0B2340 20 
0B2341 CD    0508** IPOW1:			CALL    X2
0B2342 57 
0B2343 2C 
0B2344 0B 
0B2345 38    0509** JR      C,IPOW2
0B2346 08 
0B2347 10    0510** DJNZ    IPOW1
0B2348 F8 
0B2349 F1    0511** POP     AF
0B234A D9    0512** EXX
0B234B 2C    0513** INC     L               ;RESULT=1
0B234C D9    0514** EXX
0B234D 4C    0515** LD      C,H
0B234E C9    0516** RET
             0517** ;
0B234F F1    0518** IPOW2:			POP     AF
0B2350 C5    0519** PUSH    BC
0B2351 EB    0520** EX      DE,HL
0B2352 E5    0521** PUSH    HL
0B2353 D9    0522** EXX
0B2354 EB    0523** EX      DE,HL
0B2355 E5    0524** PUSH    HL
0B2356 D9    0525** EXX
0B2357 DD    0526** LD      IX,0
0B2358 21 
0B2359 00 
0B235A 00 
0B235A 00   
0B235C DD    0527** ADD     IX,SP
0B235D 39 
0B235E 28    0528** JR      Z,IPOW4
0B235F 48 
0B2360 C5    0529** PUSH    BC
0B2361 D9    0530** EXX
0B2362 D5    0531** PUSH    DE
0B2363 D9    0532** EXX
0B2364 D5    0533** PUSH    DE
0B2365 CD    0534** CALL    SFLOAT_FP
0B2366 6E 
0B2367 2B 
0B2368 0B 
0B2369 CD    0535** CALL    RECIP
0B236A A2 
0B236B 26 
0B236C 0B 
0B236D DD    0536** LD      (IX+4),C
0B236E 71 
0B236F 04 
0B2370 D9    0537** EXX
0B2371 DD    0538** LD      (IX+0),L
0B2372 75 
0B2373 00 
0B2374 DD    0539** LD      (IX+1),H
0B2375 74 
0B2376 01 
0B2377 D9    0540** EXX
0B2378 DD    0541** LD      (IX+2),L
0B2379 75 
0B237A 02 
0B237B DD    0542** LD      (IX+3),H
0B237C 74 
0B237D 03 
0B237E 18    0543** JR      IPOW5
0B237F 21 
             0544** ;
0B2380 C5    0545** IPOW3:			PUSH    BC
0B2381 D9    0546** EXX
0B2382 CB    0547** SLA     E
0B2383 23 
0B2384 CB    0548** RL      D
0B2385 12 
0B2386 D5    0549** PUSH    DE
0B2387 D9    0550** EXX
0B2388 CB    0551** RL      E
0B2389 13 
0B238A CB    0552** RL      D
0B238B 12 
0B238C D5    0553** PUSH    DE
0B238D 3E    0554** LD      A,'*' & 0FH
0B238E 0A 
0B238F F5    0555** PUSH    AF
0B2390 CD    0556** CALL    COPY_
0B2391 6B 
0B2392 2C 
0B2393 0B 
0B2394 CD    0557** CALL    OP              ;SQUARE
0B2395 4B 
0B2396 20 
0B2397 0B 
0B2398 F1    0558** POP     AF
0B2399 CD    0559** CALL    DLOAD5
0B239A 97 
0B239B 29 
0B239C 0B 
0B239D DC    0560** CALL    C,OP            ;MULTIPLY BY X
0B239E 4B 
0B239F 20 
0B23A0 0B 
0B23A1 D1    0561** IPOW5:			POP     DE
0B23A2 D9    0562** EXX
0B23A3 D1    0563** POP     DE
0B23A4 D9    0564** EXX
0B23A5 79    0565** LD      A,C
0B23A6 C1    0566** POP     BC
0B23A7 4F    0567** LD      C,A
0B23A8 10    0568** IPOW4:			DJNZ    IPOW3
0B23A9 D6 
0B23AA F1    0569** POP     AF
0B23AB F1    0570** POP     AF
0B23AC F1    0571** POP     AF
0B23AD C9    0572** RET
             0573** ;
0B23AE F1    0574** FPOW0:			POP     AF
0B23AF F1    0575** POP     AF
0B23B0 F1    0576** POP     AF
0B23B1 18    0577** JR      IPOW0
0B23B2 8B 
             0578** ;
             0579** ;FPOW - Floating-point involution.
             0580** ;
0B23B3 CB    0581** FPOW:			BIT     7,D
0B23B4 7A 
0B23B5 F5    0582** PUSH    AF
0B23B6 CD    0583** CALL    SWAP_FP
0B23B7 9F 
0B23B8 2B 
0B23B9 0B 
0B23BA CD    0584** CALL    PUSH5
0B23BB 7B 
0B23BC 2C 
0B23BD 0B 
0B23BE 0D    0585** DEC     C
0B23BF 0C    0586** INC     C
0B23C0 28    0587** JR      Z,FPOW0
0B23C1 EC 
0B23C2 3E    0588** LD      A,158
0B23C3 9E 
0B23C4 B9    0589** CP      C
0B23C5 38    0590** JR      C,FPOW1
0B23C6 0A 
0B23C7 3C    0591** INC     A
0B23C8 CD    0592** CALL    FIX
0B23C9 73 
0B23CA 2A 
0B23CB 0B 
0B23CC 08    0593** EX      AF,AF'
0B23CD F2    0594** JP      P,FPOW0
0B23CE AE 
0B23CF 23 
0B23D0 0B 
0B23D1 CD    0595** FPOW1:			CALL    SWAP_FP
0B23D2 9F 
0B23D3 2B 
0B23D4 0B 
0B23D5 CD    0596** CALL    LN0
0B23D6 BF 
0B23D7 26 
0B23D8 0B 
0B23D9 CD    0597** CALL    POP5
0B23DA 84 
0B23DB 2C 
0B23DC 0B 
0B23DD F1    0598** POP     AF
0B23DE CD    0599** CALL    FMUL
0B23DF D6 
0B23E0 22 
0B23E1 0B 
0B23E2 C3    0600** JP      EXP0
0B23E3 21 
0B23E4 26 
0B23E5 0B 
             0601** ;
             0602** ;Integer and floating-point compare.
             0603** ;Result is TRUE (-1) or FALSE (0).
             0604** ;
0B23E6 CD    0605** FLT:			CALL    FCP
0B23E7 F5 
0B23E8 2B 
0B23E9 0B 
0B23EA 18    0606** JR      ILT1
0B23EB 04 
0B23EC CD    0607** ILT:			CALL    ICP
0B23ED E7 
0B23EE 2B 
0B23EF 0B 
0B23F0 D0    0608** ILT1:			RET     NC
0B23F1 18    0609** JR      TRUE_FP
0B23F2 42 
             0610** ;
0B23F3 CD    0611** FGT:			CALL    FCP
0B23F4 F5 
0B23F5 2B 
0B23F6 0B 
0B23F7 18    0612** JR      IGT1
0B23F8 04 
0B23F9 CD    0613** IGT:			CALL    ICP
0B23FA E7 
0B23FB 2B 
0B23FC 0B 
0B23FD C8    0614** IGT1:			RET     Z
0B23FE D8    0615** RET     C
0B23FF 18    0616** JR      TRUE_FP
0B2400 34 
             0617** ;
0B2401 CD    0618** FGE:			CALL    FCP
0B2402 F5 
0B2403 2B 
0B2404 0B 
0B2405 18    0619** JR      IGE1
0B2406 04 
0B2407 CD    0620** IGE:			CALL    ICP
0B2408 E7 
0B2409 2B 
0B240A 0B 
0B240B D8    0621** IGE1:			RET     C
0B240C 18    0622** JR      TRUE_FP
0B240D 27 
             0623** ;
0B240E CD    0624** FLE:			CALL    FCP
0B240F F5 
0B2410 2B 
0B2411 0B 
0B2412 18    0625** JR      ILE1
0B2413 04 
0B2414 CD    0626** ILE:			CALL    ICP
0B2415 E7 
0B2416 2B 
0B2417 0B 
0B2418 28    0627** ILE1:			JR      Z,TRUE_FP
0B2419 1B 
0B241A D0    0628** RET     NC
0B241B 18    0629** JR      TRUE_FP
0B241C 18 
             0630** ;
0B241D CD    0631** FNE:			CALL    FCP
0B241E F5 
0B241F 2B 
0B2420 0B 
0B2421 18    0632** JR      INE1
0B2422 04 
0B2423 CD    0633** INE:			CALL    ICP
0B2424 E7 
0B2425 2B 
0B2426 0B 
0B2427 C8    0634** INE1:			RET     Z
0B2428 18    0635** JR      TRUE_FP
0B2429 0B 
             0636** ;
0B242A CD    0637** FEQ:			CALL    FCP
0B242B F5 
0B242C 2B 
0B242D 0B 
0B242E 18    0638** JR      IEQ1
0B242F 04 
0B2430 CD    0639** IEQ:			CALL    ICP
0B2431 E7 
0B2432 2B 
0B2433 0B 
0B2434 C0    0640** IEQ1:			RET     NZ
0B2435 21    0641** TRUE_FP:			LD      HL,-1
0B2436 FF 
0B2437 FF 
0B2438 FF 
0B2439 D9    0642** EXX
0B243A 21    0643** LD      HL,-1
0B243B FF 
0B243C FF 
0B243D FF 
0B243E D9    0644** EXX
0B243F AF    0645** XOR     A
0B2440 4F    0646** LD      C,A
0B2441 C9    0647** RET
             0648** ;
             0649** ;FUNCTIONS:
             0650** ;
             0651** ;Result returned in HLH'L'C (floating point)
             0652** ;Result returned in HLH'L' (C=0) (integer)
             0653** ;All registers except IY destroyed.
             0654** ;
             0655** ;ABS - Absolute value
             0656** ;Result is numeric, variable type.
             0657** ;
0B2442 CB    0658** ABSV_FP:			BIT     7,H
0B2443 7C 
0B2444 C8    0659** RET     Z               ;POSITIVE/ZERO
0B2445 0D    0660** DEC     C
0B2446 0C    0661** INC     C
0B2447 CA    0662** JP      Z,NEGATE        ;INTEGER
0B2448 A2 
0B2449 2A 
0B244A 0B 
0B244B CB    0663** RES     7,H
0B244C BC 
0B244D C9    0664** RET
             0665** ;
             0666** ;NOT - Complement integer.
             0667** ;Result is integer numeric.
             0668** ;
0B244E CD    0669** NOTK_FP:			CALL    SFIX_FP
0B244F 92 
0B2450 2A 
0B2451 0B 
0B2452 7C    0670** LD      A,H
0B2453 2F    0671** CPL
0B2454 67    0672** LD      H,A
0B2455 7D    0673** LD      A,L
0B2456 2F    0674** CPL
0B2457 6F    0675** LD      L,A
0B2458 D9    0676** EXX
0B2459 7C    0677** LD      A,H
0B245A 2F    0678** CPL
0B245B 67    0679** LD      H,A
0B245C 7D    0680** LD      A,L
0B245D 2F    0681** CPL
0B245E 6F    0682** LD      L,A
0B245F D9    0683** EXX
0B2460 AF    0684** XOR     A               ;NUMERIC MARKER
0B2461 C9    0685** RET
             0686** ;
             0687** ;PI - Return PI (3.141592654)
             0688** ;Result is floating-point numeric.
             0689** ;
0B2462 21    0690** PI_FP:			LD      HL,490FH
0B2463 0F 
0B2464 49 
0B2465 00 
0B2466 D9    0691** EXX
0B2467 21    0692** LD      HL,0DAA2H
0B2468 A2 
0B2469 DA 
0B246A 00 
0B246B D9    0693** EXX
0B246C 0E    0694** LD      C,81H
0B246D 81 
0B246E AF    0695** XOR     A               ;NUMERIC MARKER
0B246F C9    0696** RET
             0697** ;
             0698** ;DEG - Convert radians to degrees
             0699** ;Result is floating-point numeric.
             0700** ;
0B2470 CD    0701** DEG_FP:			CALL    FPI180
0B2471 84 
0B2472 24 
0B2473 0B 
0B2474 CD    0702** CALL    FMUL
0B2475 D6 
0B2476 22 
0B2477 0B 
0B2478 AF    0703** XOR     A
0B2479 C9    0704** RET
             0705** ;
             0706** ;RAD - Convert degrees to radians
             0707** ;Result is floating-point numeric.
             0708** ;
0B247A CD    0709** RAD_FP:			CALL    FPI180
0B247B 84 
0B247C 24 
0B247D 0B 
0B247E CD    0710** CALL    FDIV
0B247F 2D 
0B2480 22 
0B2481 0B 
0B2482 AF    0711** XOR     A
0B2483 C9    0712** RET
             0713** ;
             0714** ;180/PI
             0715** ;
0B2484 CD    0716** FPI180:			CALL    SFLOAT_FP
0B2485 6E 
0B2486 2B 
0B2487 0B 
0B2488 11    0717** LD      DE,652EH
0B2489 2E 
0B248A 65 
0B248B 00 
0B248C D9    0718** EXX
0B248D 11    0719** LD      DE,0E0D3H
0B248E D3 
0B248F E0 
0B2490 00 
0B2491 D9    0720** EXX
0B2492 06    0721** LD      B,85H
0B2493 85 
0B2494 C9    0722** RET
             0723** ;
             0724** ;SGN - Return -1, 0 or +1
             0725** ;Result is integer numeric.
             0726** ;
0B2495 CD    0727** SGN_FP:			CALL    TEST_FP
0B2496 C7 
0B2497 2B 
0B2498 0B 
0B2499 B1    0728** OR      C
0B249A C8    0729** RET     Z               ;ZERO
0B249B CB    0730** BIT     7,H
0B249C 7C 
0B249D C2    0731** JP      NZ,TRUE_FP         ;-1
0B249E 35 
0B249F 24 
0B24A0 0B 
0B24A1 CD    0732** CALL    ZERO_FP
0B24A2 EB 
0B24A3 2B 
0B24A4 0B 
0B24A5 C3    0733** JP      ADD1_FP            ;1
0B24A6 87 
0B24A7 2B 
0B24A8 0B 
             0734** ;
             0735** ;VAL - Return numeric value of string.
             0736** ;Input: ASCII string at IX
             0737** ;Result is variable type numeric.
             0738** ;
0B24A9 CD    0739** VAL_FP:			CALL    SIGNQ
0B24AA 05 
0B24AB 2E 
0B24AC 0B 
0B24AD F5    0740** PUSH    AF
0B24AE CD    0741** CALL    CON_FP
0B24AF B5 
0B24B0 29 
0B24B1 0B 
0B24B2 F1    0742** POP     AF
0B24B3 FE    0743** CP      '-'
0B24B4 2D 
0B24B5 3E    0744** LD      A,0             ;NUMERIC MARKER
0B24B6 00 
0B24B7 C0    0745** RET     NZ
0B24B8 0D    0746** DEC     C
0B24B9 0C    0747** INC     C
0B24BA CA    0748** JP      Z,NEGATE        ;ZERO/INTEGER
0B24BB A2 
0B24BC 2A 
0B24BD 0B 
0B24BE 7C    0749** LD      A,H
0B24BF EE    0750** XOR     80H             ;CHANGE SIGN (FP)
0B24C0 80 
0B24C1 67    0751** LD      H,A
0B24C2 AF    0752** XOR     A
0B24C3 C9    0753** RET
             0754** ;
             0755** ;INT - Floor function
             0756** ;Result is integer numeric.
             0757** ;
0B24C4 0D    0758** INT_FP_:			DEC     C
0B24C5 0C    0759** INC     C
0B24C6 C8    0760** RET     Z               ;ZERO/INTEGER
0B24C7 3E    0761** LD      A,159
0B24C8 9F 
0B24C9 44    0762** LD      B,H             ;B7=SIGN BIT
0B24CA CD    0763** CALL    FIX
0B24CB 73 
0B24CC 2A 
0B24CD 0B 
0B24CE 08    0764** EX      AF,AF'
0B24CF A0    0765** AND     B
0B24D0 FC    0766** CALL    M,ADD1_FP          ;NEGATIVE NON-INTEGER
0B24D1 87 
0B24D2 2B 
0B24D3 0B 
0B24D4 78    0767** LD      A,B
0B24D5 B7    0768** OR      A
0B24D6 FC    0769** CALL    M,NEGATE
0B24D7 A2 
0B24D8 2A 
0B24D9 0B 
0B24DA AF    0770** XOR     A
0B24DB 4F    0771** LD      C,A
0B24DC C9    0772** RET
             0773** ;
             0774** ;SQR - square root
             0775** ;Result is floating-point numeric.
             0776** ;
0B24DD CD    0777** SQR_FP:			CALL    SFLOAT_FP
0B24DE 6E 
0B24DF 2B 
0B24E0 0B 
0B24E1 CB    0778** SQR0:			BIT     7,H
0B24E2 7C 
0B24E3 3E    0779** LD      A,NGROOT
0B24E4 15 
0B24E5 C2    0780** JP      NZ,ERROR_FP_        ;"-ve root"
0B24E6 45 
0B24E7 20 
0B24E8 0B 
0B24E9 0D    0781** DEC     C
0B24EA 0C    0782** INC     C
0B24EB C8    0783** RET     Z               ;ZERO
0B24EC CB    0784** SET     7,H             ;IMPLIED 1
0B24ED FC 
0B24EE CB    0785** BIT     0,C
0B24EF 41 
0B24F0 CC    0786** CALL    Z,DIV2          ;MAKE EXPONENT ODD
0B24F1 A7 
0B24F2 2B 
0B24F3 0B 
0B24F4 79    0787** LD      A,C
0B24F5 D6    0788** SUB     80H
0B24F6 80 
0B24F7 CB    0789** SRA     A               ;HALVE EXPONENT
0B24F8 2F 
0B24F9 C6    0790** ADD     A,80H
0B24FA 80 
0B24FB 4F    0791** LD      C,A
0B24FC C5    0792** PUSH    BC              ;SAVE EXPONENT
0B24FD EB    0793** EX      DE,HL
0B24FE 21    0794** LD      HL,0
0B24FF 00 
0B2500 00 
0B2501 00 
0B2502 44    0795** LD      B,H
0B2503 4D    0796** LD      C,L
0B2504 D9    0797** EXX
0B2505 EB    0798** EX      DE,HL
0B2506 21    0799** LD      HL,0
0B2507 00 
0B2508 00 
0B2509 00 
0B250A 44    0800** LD      B,H
0B250B 4D    0801** LD      C,L
0B250C 3E    0802** LD      A,-31
0B250D E1 
0B250E CD    0803** CALL    SQRA            ;ROOT
0B250F 9D 
0B2510 2D 
0B2511 0B 
0B2512 D9    0804** EXX
0B2513 CB    0805** BIT     7,B
0B2514 78 
0B2515 D9    0806** EXX
0B2516 CC    0807** CALL    Z,SQRA          ;NORMALISE & INC A
0B2517 9D 
0B2518 2D 
0B2519 0B 
0B251A CD    0808** CALL    SQRB
0B251B DE 
0B251C 2D 
0B251D 0B 
0B251E B7    0809** OR      A               ;CLEAR CARRY
0B251F CD    0810** CALL    DIVB
0B2520 4B 
0B2521 2D 
0B2522 0B 
0B2523 CB    0811** RR      E               ;LSB TO CARRY
0B2524 1B 
0B2525 60    0812** LD      H,B
0B2526 69    0813** LD      L,C
0B2527 D9    0814** EXX
0B2528 60    0815** LD      H,B
0B2529 69    0816** LD      L,C
0B252A DC    0817** CALL    C,ADD1_FP          ;ROUND UP
0B252B 87 
0B252C 2B 
0B252D 0B 
0B252E C1    0818** POP     BC              ;RESTORE EXPONENT
0B252F DC    0819** CALL    C,INCC
0B2530 B4 
0B2531 2B 
0B2532 0B 
0B2533 1F    0820** RRA
0B2534 9F    0821** SBC     A,A
0B2535 81    0822** ADD     A,C
0B2536 4F    0823** LD      C,A
0B2537 CB    0824** RES     7,H             ;POSITIVE
0B2538 BC 
0B2539 AF    0825** XOR     A
0B253A C9    0826** RET
             0827** ;
             0828** ;TAN - Tangent function
             0829** ;Result is floating-point numeric.
             0830** ;
0B253B CD    0831** TAN_FP:			CALL    SFLOAT_FP
0B253C 6E 
0B253D 2B 
0B253E 0B 
0B253F CD    0832** CALL    PUSH5
0B2540 7B 
0B2541 2C 
0B2542 0B 
0B2543 CD    0833** CALL    COS0
0B2544 65 
0B2545 25 
0B2546 0B 
0B2547 CD    0834** CALL    POP5
0B2548 84 
0B2549 2C 
0B254A 0B 
0B254B CD    0835** CALL    PUSH5
0B254C 7B 
0B254D 2C 
0B254E 0B 
0B254F CD    0836** CALL    SWAP_FP
0B2550 9F 
0B2551 2B 
0B2552 0B 
0B2553 CD    0837** CALL    SIN0
0B2554 72 
0B2555 25 
0B2556 0B 
0B2557 CD    0838** CALL    POP5
0B2558 84 
0B2559 2C 
0B255A 0B 
0B255B CD    0839** CALL    FDIV
0B255C 2D 
0B255D 22 
0B255E 0B 
0B255F AF    0840** XOR     A               ;NUMERIC MARKER
0B2560 C9    0841** RET
             0842** ;
             0843** ;COS - Cosine function
             0844** ;Result is floating-point numeric.
             0845** ;
0B2561 CD    0846** COS_FP:			CALL    SFLOAT_FP
0B2562 6E 
0B2563 2B 
0B2564 0B 
0B2565 CD    0847** COS0:			CALL    SCALE
0B2566 CA 
0B2567 2A 
0B2568 0B 
0B2569 1C    0848** INC     E
0B256A 1C    0849** INC     E
0B256B 7B    0850** LD      A,E
0B256C 18    0851** JR      SIN1
0B256D 10 
             0852** ;
             0853** ;SIN - Sine function
             0854** ;Result is floating-point numeric.
             0855** ;
0B256E CD    0856** SIN_FP:			CALL    SFLOAT_FP
0B256F 6E 
0B2570 2B 
0B2571 0B 
0B2572 E5    0857** SIN0:			PUSH    HL              ;H7=SIGN
0B2573 CD    0858** CALL    SCALE
0B2574 CA 
0B2575 2A 
0B2576 0B 
0B2577 F1    0859** POP     AF
0B2578 07    0860** RLCA
0B2579 07    0861** RLCA
0B257A 07    0862** RLCA
0B257B E6    0863** AND     4
0B257C 04 
0B257D AB    0864** XOR     E
0B257E F5    0865** SIN1:			PUSH    AF              ;OCTANT
0B257F CB    0866** RES     7,H
0B2580 BC 
0B2581 1F    0867** RRA
0B2582 CD    0868** CALL    PIBY4
0B2583 10 
0B2584 26 
0B2585 0B 
0B2586 DC    0869** CALL    C,RSUB          ;X=(PI/4)-X
0B2587 B1 
0B2588 21 
0B2589 0B 
0B258A F1    0870** POP     AF
0B258B F5    0871** PUSH    AF
0B258C E6    0872** AND     3
0B258D 03 
0B258E E2    0873** JP      PO,SIN2         ;USE COSINE APPROX.
0B258F C7 
0B2590 25 
0B2591 0B 
0B2592 CD    0874** CALL    PUSH5           ;SAVE X
0B2593 7B 
0B2594 2C 
0B2595 0B 
0B2596 CD    0875** CALL    SQUARE          ;PUSH X*X
0B2597 73 
0B2598 2C 
0B2599 0B 
0B259A CD    0876** CALL    POLY
0B259B B8 
0B259C 2C 
0B259D 0B 
0B259E B7    0877** DW	0A8B7H          ;a(8)
0B259F A8 
0B25A0 11    0878** DW	3611H
0B25A1 36 
0B25A2 6D    0879** DB	6DH
0B25A3 26    0880** DW	0DE26H          ;a(6)
0B25A4 DE 
0B25A5 05    0881** DW	0D005H
0B25A6 D0 
0B25A7 73    0882** DB	73H
0B25A8 C0    0883** DW	80C0H           ;a(4)
0B25A9 80 
0B25AA 88    0884** DW	888H
0B25AB 08 
0B25AC 79    0885** DB	79H
0B25AD 9D    0886** DW	0AA9DH          ;a(2)
0B25AE AA 
0B25AF AA    0887** DW	0AAAAH
0B25B0 AA 
0B25B1 7D    0888** DB	7DH
0B25B2 00    0889** DW	0               ;a(0)
0B25B3 00 
0B25B4 00    0890** DW	0
0B25B5 00 
0B25B6 80    0891** DB	80H
0B25B7 CD    0892** CALL    POP5
0B25B8 84 
0B25B9 2C 
0B25BA 0B 
0B25BB CD    0893** CALL    POP5
0B25BC 84 
0B25BD 2C 
0B25BE 0B 
0B25BF CD    0894** CALL    FMUL
0B25C0 D6 
0B25C1 22 
0B25C2 0B 
0B25C3 C3    0895** JP      SIN3
0B25C4 EC 
0B25C5 25 
0B25C6 0B 
             0896** ;
0B25C7 CD    0897** SIN2:			CALL    SQUARE          ;PUSH X*X
0B25C8 73 
0B25C9 2C 
0B25CA 0B 
0B25CB CD    0898** CALL    POLY
0B25CC B8 
0B25CD 2C 
0B25CE 0B 
0B25CF 71    0899** DW	0D571H          ;b(8)
0B25D0 D5 
0B25D1 78    0900** DW	4C78H
0B25D2 4C 
0B25D3 70    0901** DB	70H
0B25D4 AF    0902** DW	94AFH           ;b(6)
0B25D5 94 
0B25D6 03    0903** DW	0B603H
0B25D7 B6 
0B25D8 76    0904** DB	76H
0B25D9 C8    0905** DW	9CC8H           ;b(4)
0B25DA 9C 
0B25DB AA    0906** DW	2AAAH
0B25DC 2A 
0B25DD 7B    0907** DB	7BH
0B25DE DD    0908** DW	0FFDDH          ;b(2)
0B25DF FF 
0B25E0 FF    0909** DW	0FFFFH
0B25E1 FF 
0B25E2 7E    0910** DB	7EH
0B25E3 00    0911** DW	0               ;b(0)
0B25E4 00 
0B25E5 00    0912** DW	0
0B25E6 00 
0B25E7 80    0913** DB	80H
0B25E8 CD    0914** CALL    POP5
0B25E9 84 
0B25EA 2C 
0B25EB 0B 
0B25EC F1    0915** SIN3:			POP     AF
0B25ED E6    0916** AND     4
0B25EE 04 
0B25EF C8    0917** RET     Z
0B25F0 0D    0918** DEC     C
0B25F1 0C    0919** INC     C
0B25F2 C8    0920** RET     Z               ;ZERO
0B25F3 CB    0921** SET     7,H             ;MAKE NEGATIVE
0B25F4 FC 
0B25F5 C9    0922** RET
             0923** ;
             0924** ;Floating-point one:
             0925** ;
0B25F6 21    0926** FONE_FP:			LD      HL,0
0B25F7 00 
0B25F8 00 
0B25F9 00 
0B25FA D9    0927** EXX
0B25FB 21    0928** LD      HL,0
0B25FC 00 
0B25FD 00 
0B25FE 00 
0B25FF D9    0929** EXX
0B2600 0E    0930** LD      C,80H
0B2601 80 
0B2602 C9    0931** RET
             0932** ;
0B2603 11    0933** DONE:			LD      DE,0
0B2604 00 
0B2605 00 
0B2606 00 
0B2607 D9    0934** EXX
0B2608 11    0935** LD      DE,0
0B2609 00 
0B260A 00 
0B260B 00 
0B260C D9    0936** EXX
0B260D 06    0937** LD      B,80H
0B260E 80 
0B260F C9    0938** RET
             0939** ;
0B2610 11    0940** PIBY4:			LD      DE,490FH
0B2611 0F 
0B2612 49 
0B2613 00 
0B2614 D9    0941** EXX
0B2615 11    0942** LD      DE,0DAA2H
0B2616 A2 
0B2617 DA 
0B2618 00 
0B2619 D9    0943** EXX
0B261A 06    0944** LD      B,7FH
0B261B 7F 
0B261C C9    0945** RET
             0946** ;
             0947** ;EXP - Exponential function
             0948** ;Result is floating-point numeric.
             0949** ;
0B261D CD    0950** EXP_FP:			CALL    SFLOAT_FP
0B261E 6E 
0B261F 2B 
0B2620 0B 
0B2621 CD    0951** EXP0:			CALL    LN2             ;LN(2)
0B2622 AE 
0B2623 26 
0B2624 0B 
0B2625 D9    0952** EXX
0B2626 1D    0953** DEC     E
0B2627 01    0954** LD      BC,0D1CFH       ;0.6931471805599453
0B2628 CF 
0B2629 D1 
0B262A 00 
0B262B D9    0955** EXX
0B262C E5    0956** PUSH    HL              ;H7=SIGN
0B262D CD    0957** CALL    MOD48           ;"MODULUS"
0B262E DD 
0B262F 2A 
0B2630 0B 
0B2631 F1    0958** POP     AF
0B2632 CB    0959** BIT     7,E
0B2633 7B 
0B2634 28    0960** JR      Z,EXP1
0B2635 0B 
0B2636 17    0961** RLA
0B2637 DA    0962** JP      C,ZERO_FP
0B2638 EB 
0B2639 2B 
0B263A 0B 
0B263B 3E    0963** LD      A,EXPRNG
0B263C 18 
0B263D C3    0964** JP      ERROR_FP_           ;"Exp range"
0B263E 45 
0B263F 20 
0B2640 0B 
             0965** ;
0B2641 E6    0966** EXP1:			AND     80H
0B2642 80 
0B2643 B3    0967** OR      E
0B2644 F5    0968** PUSH    AF              ;INTEGER PART
0B2645 CB    0969** RES     7,H
0B2646 BC 
0B2647 CD    0970** CALL    PUSH5           ;PUSH X*LN(2)
0B2648 7B 
0B2649 2C 
0B264A 0B 
0B264B CD    0971** CALL    POLY
0B264C B8 
0B264D 2C 
0B264E 0B 
0B264F 72    0972** DW	4072H           ;a(7)
0B2650 40 
0B2651 2E    0973** DW	942EH
0B2652 94 
0B2653 73    0974** DB	73H
0B2654 65    0975** DW	6F65H           ;a(6)
0B2655 6F 
0B2656 4F    0976** DW	2E4FH
0B2657 2E 
0B2658 76    0977** DB	76H
0B2659 37    0978** DW	6D37H           ;a(5)
0B265A 6D 
0B265B 02    0979** DW	8802H
0B265C 88 
0B265D 79    0980** DB	79H
0B265E 12    0981** DW	0E512H          ;a(4)
0B265F E5 
0B2660 A0    0982** DW	2AA0H
0B2661 2A 
0B2662 7B    0983** DB	7BH
0B2663 14    0984** DW	4F14H           ;a(3)
0B2664 4F 
0B2665 AA    0985** DW	0AAAAH
0B2666 AA 
0B2667 7D    0986** DB	7DH
0B2668 56    0987** DW	0FD56H          ;a(2)
0B2669 FD 
0B266A FF    0988** DW	7FFFH
0B266B 7F 
0B266C 7E    0989** DB	7EH
0B266D FE    0990** DW	0FFFEH          ;a(1)
0B266E FF 
0B266F FF    0991** DW	0FFFFH
0B2670 FF 
0B2671 7F    0992** DB	7FH
0B2672 00    0993** DW	0               ;a(0)
0B2673 00 
0B2674 00    0994** DW	0
0B2675 00 
0B2676 80    0995** DB	80H
0B2677 CD    0996** CALL    POP5
0B2678 84 
0B2679 2C 
0B267A 0B 
0B267B F1    0997** POP     AF
0B267C F5    0998** PUSH    AF
0B267D F4    0999** CALL    P,RECIP         ;X=1/X
0B267E A2 
0B267F 26 
0B2680 0B 
0B2681 F1    1000** POP     AF
0B2682 F2    1001** JP      P,EXP4
0B2683 8A 
0B2684 26 
0B2685 0B 
0B2686 E6    1002** AND     7FH
0B2687 7F 
0B2688 ED    1003** NEG
0B2689 44 
0B268A C6    1004** EXP4:			ADD     A,80H
0B268B 80 
0B268C 81    1005** ADD     A,C
0B268D 38    1006** JR      C,EXP2
0B268E 06 
0B268F F2    1007** JP      P,ZERO_FP          ;UNDERFLOW
0B2690 EB 
0B2691 2B 
0B2692 0B 
0B2693 18    1008** JR      EXP3
0B2694 04 
0B2695 FA    1009** EXP2:			JP      M,OFLOW         ;OVERFLOW
0B2696 B6 
0B2697 2B 
0B2698 0B 
0B2699 C6    1010** EXP3:			ADD     A,80H
0B269A 80 
0B269B CA    1011** JP      Z,ZERO_FP
0B269C EB 
0B269D 2B 
0B269E 0B 
0B269F 4F    1012** LD      C,A
0B26A0 AF    1013** XOR     A               ;NUMERIC MARKER
0B26A1 C9    1014** RET
             1015** ;
0B26A2 CD    1016** RECIP:			CALL    DONE
0B26A3 03 
0B26A4 26 
0B26A5 0B 
0B26A6 CD    1017** RDIV:			CALL    SWAP_FP
0B26A7 9F 
0B26A8 2B 
0B26A9 0B 
0B26AA C3    1018** JP      FDIV            ;RECIPROCAL
0B26AB 2D 
0B26AC 22 
0B26AD 0B 
             1019** ;
0B26AE 11    1020** LN2:			LD      DE,3172H        ;LN(2)
0B26AF 72 
0B26B0 31 
0B26B1 00 
0B26B2 D9    1021** EXX
0B26B3 11    1022** LD      DE,17F8H
0B26B4 F8 
0B26B5 17 
0B26B6 00 
0B26B7 D9    1023** EXX
0B26B8 06    1024** LD      B,7FH
0B26B9 7F 
0B26BA C9    1025** RET
             1026** ;
             1027** ;LN - Natural log.
             1028** ;Result is floating-point numeric.
             1029** ;
0B26BB CD    1030** LN_FP:			CALL    SFLOAT_FP
0B26BC 6E 
0B26BD 2B 
0B26BE 0B 
0B26BF 3E    1031** LN0:			LD      A,LOGRNG
0B26C0 16 
0B26C1 CB    1032** BIT     7,H
0B26C2 7C 
0B26C3 C2    1033** JP      NZ,ERROR_FP_        ;"Log range"
0B26C4 45 
0B26C5 20 
0B26C6 0B 
0B26C7 0C    1034** INC     C
0B26C8 0D    1035** DEC     C
0B26C9 CA    1036** JP      Z,ERROR_FP_
0B26CA 45 
0B26CB 20 
0B26CC 0B 
0B26CD 11    1037** LD      DE,3504H        ;SQR(2)
0B26CE 04 
0B26CF 35 
0B26D0 00 
0B26D1 D9    1038** EXX
0B26D2 11    1039** LD      DE,0F333H       ;1.41421356237
0B26D3 33 
0B26D4 F3 
0B26D5 00 
0B26D6 D9    1040** EXX
0B26D7 CD    1041** CALL    ICP0            ;MANTISSA>SQR(2)?
0B26D8 FE 
0B26D9 2B 
0B26DA 0B 
0B26DB 79    1042** LD      A,C             ;EXPONENT
0B26DC 0E    1043** LD      C,80H           ;1 <= X < 2
0B26DD 80 
0B26DE 38    1044** JR      C,LN4
0B26DF 02 
0B26E0 0D    1045** DEC     C
0B26E1 3C    1046** INC     A
0B26E2 F5    1047** LN4:			PUSH    AF              ;SAVE EXPONENT
0B26E3 CD    1048** CALL    RATIO           ;X=(X-1)/(X+1)
0B26E4 90 
0B26E5 2C 
0B26E6 0B 
0B26E7 CD    1049** CALL    PUSH5
0B26E8 7B 
0B26E9 2C 
0B26EA 0B 
0B26EB CD    1050** CALL    SQUARE          ;PUSH X*X
0B26EC 73 
0B26ED 2C 
0B26EE 0B 
0B26EF CD    1051** CALL    POLY
0B26F0 B8 
0B26F1 2C 
0B26F2 0B 
0B26F3 48    1052** DW	0CC48H          ;a(9)
0B26F4 CC 
0B26F5 FB    1053** DW	74FBH
0B26F6 74 
0B26F7 7D    1054** DB	7DH
0B26F8 AF    1055** DW	0AEAFH          ;a(7)
0B26F9 AE 
0B26FA FF    1056** DW	11FFH
0B26FB 11 
0B26FC 7E    1057** DB	7EH
0B26FD 8C    1058** DW	0D98CH          ;a(5)
0B26FE D9 
0B26FF CD    1059** DW	4CCDH
0B2700 4C 
0B2701 7E    1060** DB	7EH
0B2702 E3    1061** DW	0A9E3H          ;a(3)
0B2703 A9 
0B2704 AA    1062** DW	2AAAH
0B2705 2A 
0B2706 7F    1063** DB	7FH
0B2707 00    1064** DW	0               ;a(1)
0B2708 00 
0B2709 00    1065** DW	0
0B270A 00 
0B270B 81    1066** DB	81H
0B270C CD    1067** CALL    POP5
0B270D 84 
0B270E 2C 
0B270F 0B 
0B2710 CD    1068** CALL    POP5
0B2711 84 
0B2712 2C 
0B2713 0B 
0B2714 CD    1069** CALL    FMUL
0B2715 D6 
0B2716 22 
0B2717 0B 
0B2718 F1    1070** POP     AF              ;EXPONENT
0B2719 CD    1071** CALL    PUSH5
0B271A 7B 
0B271B 2C 
0B271C 0B 
0B271D 08    1072** EX      AF,AF'
0B271E CD    1073** CALL    ZERO_FP
0B271F EB 
0B2720 2B 
0B2721 0B 
0B2722 08    1074** EX      AF,AF'
0B2723 D6    1075** SUB     80H
0B2724 80 
0B2725 28    1076** JR      Z,LN3
0B2726 1F 
0B2727 30    1077** JR      NC,LN1
0B2728 02 
0B2729 2F    1078** CPL
0B272A 3C    1079** INC     A
0B272B 67    1080** LN1:			LD      H,A
0B272C 0E    1081** LD      C,87H
0B272D 87 
0B272E F5    1082** PUSH    AF
0B272F CD    1083** CALL    FLOAT_
0B2730 4E 
0B2731 2B 
0B2732 0B 
0B2733 CB    1084** RES     7,H
0B2734 BC 
0B2735 CD    1085** CALL    LN2
0B2736 AE 
0B2737 26 
0B2738 0B 
0B2739 CD    1086** CALL    FMUL
0B273A D6 
0B273B 22 
0B273C 0B 
0B273D F1    1087** POP     AF
0B273E 30    1088** JR      NC,LN3
0B273F 06 
0B2740 FA    1089** JP      M,LN3
0B2741 46 
0B2742 27 
0B2743 0B 
0B2744 CB    1090** SET     7,H
0B2745 FC 
0B2746 CD    1091** LN3:			CALL    POP5
0B2747 84 
0B2748 2C 
0B2749 0B 
0B274A CD    1092** CALL    FADD
0B274B C4 
0B274C 21 
0B274D 0B 
0B274E AF    1093** XOR     A
0B274F C9    1094** RET
             1095** ;
             1096** ;LOG - base-10 logarithm.
             1097** ;Result is floating-point numeric.
             1098** ;
0B2750 CD    1099** LOG_FP:			CALL    LN_FP
0B2751 BB 
0B2752 26 
0B2753 0B 
0B2754 11    1100** LD      DE,5E5BH        ;LOG(e)
0B2755 5B 
0B2756 5E 
0B2757 00 
0B2758 D9    1101** EXX
0B2759 11    1102** LD      DE,0D8A9H
0B275A A9 
0B275B D8 
0B275C 00 
0B275D D9    1103** EXX
0B275E 06    1104** LD      B,7EH
0B275F 7E 
0B2760 CD    1105** CALL    FMUL
0B2761 D6 
0B2762 22 
0B2763 0B 
0B2764 AF    1106** XOR     A
0B2765 C9    1107** RET
             1108** ;
             1109** ;ASN - Arc-sine
             1110** ;Result is floating-point numeric.
             1111** ;
0B2766 CD    1112** ASN_FP:			CALL    SFLOAT_FP
0B2767 6E 
0B2768 2B 
0B2769 0B 
0B276A CD    1113** CALL    PUSH5
0B276B 7B 
0B276C 2C 
0B276D 0B 
0B276E CD    1114** CALL    COPY_
0B276F 6B 
0B2770 2C 
0B2771 0B 
0B2772 CD    1115** CALL    FMUL
0B2773 D6 
0B2774 22 
0B2775 0B 
0B2776 CD    1116** CALL    DONE
0B2777 03 
0B2778 26 
0B2779 0B 
0B277A CD    1117** CALL    RSUB
0B277B B1 
0B277C 21 
0B277D 0B 
0B277E CD    1118** CALL    SQR0
0B277F E1 
0B2780 24 
0B2781 0B 
0B2782 CD    1119** CALL    POP5
0B2783 84 
0B2784 2C 
0B2785 0B 
0B2786 0C    1120** INC     C
0B2787 0D    1121** DEC     C
0B2788 3E    1122** LD      A,2
0B2789 02 
0B278A D5    1123** PUSH    DE
0B278B CA    1124** JP      Z,ACS1
0B278C 10 
0B278D 28 
0B278E 0B 
0B278F D1    1125** POP     DE
0B2790 CD    1126** CALL    RDIV
0B2791 A6 
0B2792 26 
0B2793 0B 
0B2794 18    1127** JR      ATN0
0B2795 04 
             1128** ;
             1129** ;ATN - arc-tangent
             1130** ;Result is floating-point numeric.
             1131** ;
0B2796 CD    1132** ATN_FP:			CALL    SFLOAT_FP
0B2797 6E 
0B2798 2B 
0B2799 0B 
0B279A E5    1133** ATN0:			PUSH    HL              ;SAVE SIGN
0B279B CB    1134** RES     7,H
0B279C BC 
0B279D 11    1135** LD      DE,5413H        ;TAN(PI/8)=SQR(2)-1
0B279E 13 
0B279F 54 
0B27A0 00 
0B27A1 D9    1136** EXX
0B27A2 11    1137** LD      DE,0CCD0H
0B27A3 D0 
0B27A4 CC 
0B27A5 00 
0B27A6 D9    1138** EXX
0B27A7 06    1139** LD      B,7EH
0B27A8 7E 
0B27A9 CD    1140** CALL    FCP0            ;COMPARE
0B27AA FB 
0B27AB 2B 
0B27AC 0B 
0B27AD 06    1141** LD      B,0
0B27AE 00 
0B27AF 38    1142** JR      C,ATN2
0B27B0 22 
0B27B1 11    1143** LD      DE,1A82H        ;TAN(3*PI/8)=SQR(2)+1
0B27B2 82 
0B27B3 1A 
0B27B4 00 
0B27B5 D9    1144** EXX
0B27B6 11    1145** LD      DE,799AH
0B27B7 9A 
0B27B8 79 
0B27B9 00 
0B27BA D9    1146** EXX
0B27BB 06    1147** LD      B,81H
0B27BC 81 
0B27BD CD    1148** CALL    FCP0            ;COMPARE
0B27BE FB 
0B27BF 2B 
0B27C0 0B 
0B27C1 38    1149** JR      C,ATN1
0B27C2 0A 
0B27C3 CD    1150** CALL    RECIP           ;X=1/X
0B27C4 A2 
0B27C5 26 
0B27C6 0B 
0B27C7 06    1151** LD      B,2
0B27C8 02 
0B27C9 C3    1152** JP      ATN2
0B27CA D3 
0B27CB 27 
0B27CC 0B 
0B27CD CD    1153** ATN1:			CALL    RATIO           ;X=(X-1)/(X+1)
0B27CE 90 
0B27CF 2C 
0B27D0 0B 
0B27D1 06    1154** LD      B,1
0B27D2 01 
0B27D3 C5    1155** ATN2:			PUSH    BC              ;SAVE FLAG
0B27D4 CD    1156** CALL    PUSH5
0B27D5 7B 
0B27D6 2C 
0B27D7 0B 
0B27D8 CD    1157** CALL    SQUARE          ;PUSH X*X
0B27D9 73 
0B27DA 2C 
0B27DB 0B 
0B27DC CD    1158** CALL    POLY
0B27DD B8 
0B27DE 2C 
0B27DF 0B 
0B27E0 35    1159** DW	0F335H          ;a(13)
0B27E1 F3 
0B27E2 D8    1160** DW	37D8H
0B27E3 37 
0B27E4 7B    1161** DB	7BH
0B27E5 91    1162** DW	6B91H           ;a(11)
0B27E6 6B 
0B27E7 B9    1163** DW	0AAB9H
0B27E8 AA 
0B27E9 7C    1164** DB	7CH
0B27EA DE    1165** DW	41DEH           ;a(9)
0B27EB 41 
0B27EC 97    1166** DW	6197H
0B27ED 61 
0B27EE 7C    1167** DB	7CH
0B27EF 7B    1168** DW	9D7BH           ;a(7)
0B27F0 9D 
0B27F1 37    1169** DW	9237H
0B27F2 92 
0B27F3 7D    1170** DB	7DH
0B27F4 5A    1171** DW	2A5AH           ;a(5)
0B27F5 2A 
0B27F6 CC    1172** DW	4CCCH
0B27F7 4C 
0B27F8 7D    1173** DB	7DH
0B27F9 5C    1174** DW	0A95CH          ;a(3)
0B27FA A9 
0B27FB AA    1175** DW	0AAAAH
0B27FC AA 
0B27FD 7E    1176** DB	7EH
0B27FE 00    1177** DW	0               ;a(1)
0B27FF 00 
0B2800 00    1178** DW	0
0B2801 00 
0B2802 80    1179** DB	80H
0B2803 CD    1180** CALL    POP5
0B2804 84 
0B2805 2C 
0B2806 0B 
0B2807 CD    1181** CALL    POP5
0B2808 84 
0B2809 2C 
0B280A 0B 
0B280B CD    1182** CALL    FMUL
0B280C D6 
0B280D 22 
0B280E 0B 
0B280F F1    1183** POP     AF
0B2810 CD    1184** ACS1:			CALL    PIBY4           ;PI/4
0B2811 10 
0B2812 26 
0B2813 0B 
0B2814 1F    1185** RRA
0B2815 F5    1186** PUSH    AF
0B2816 DC    1187** CALL    C,FADD
0B2817 C4 
0B2818 21 
0B2819 0B 
0B281A F1    1188** POP     AF
0B281B 04    1189** INC     B
0B281C 1F    1190** RRA
0B281D DC    1191** CALL    C,RSUB
0B281E B1 
0B281F 21 
0B2820 0B 
0B2821 F1    1192** POP     AF
0B2822 B7    1193** OR      A
0B2823 F0    1194** RET     P
0B2824 CB    1195** SET     7,H             ;MAKE NEGATIVE
0B2825 FC 
0B2826 AF    1196** XOR     A
0B2827 C9    1197** RET
             1198** ;
             1199** ;ACS - Arc cosine=PI/2-ASN.
             1200** ;Result is floating point numeric.
             1201** ;
0B2828 CD    1202** ACS_FP:			CALL    ASN_FP
0B2829 66 
0B282A 27 
0B282B 0B 
0B282C 3E    1203** LD      A,2
0B282D 02 
0B282E F5    1204** PUSH    AF
0B282F 18    1205** JR      ACS1
0B2830 DF 
             1206** ;
             1207** ;Function STR - convert numeric value to ASCII string.
             1208** ;   Inputs: HLH'L'C = integer or floating-point number
             1209** ;           DE = address at which to store string
             1210** ;           IX = address of @% format control
             1211** ;  Outputs: String stored, with NUL terminator
             1212** ;
             1213** ;First normalise for decimal output:
             1214** ;
0B2831 CD    1215** STR_FP:			CALL    SFLOAT_FP
0B2832 6E 
0B2833 2B 
0B2834 0B 
0B2835 06    1216** LD      B,0             ;DEFAULT PT. POSITION
0B2836 00 
0B2837 CB    1217** BIT     7,H             ;NEGATIVE?
0B2838 7C 
0B2839 28    1218** JR      Z,STR10
0B283A 06 
0B283B CB    1219** RES     7,H
0B283C BC 
0B283D 3E    1220** LD      A,'-'
0B283E 2D 
0B283F 12    1221** LD      (DE),A          ;STORE SIGN
0B2840 13    1222** INC     DE
0B2841 AF    1223** STR10:			XOR     A               ;CLEAR A
0B2842 B9    1224** CP      C
0B2843 28    1225** JR      Z,STR02          ;ZERO
0B2844 4E 
0B2845 D5    1226** PUSH    DE              ;SAVE TEXT POINTER
0B2846 78    1227** LD      A,B
0B2847 F5    1228** STR11:			PUSH    AF              ;SAVE DECIMAL COUNTER
0B2848 79    1229** LD      A,C             ;BINARY EXPONENT
0B2849 FE    1230** CP      161
0B284A A1 
0B284B 30    1231** JR      NC,STR14
0B284C 1C 
0B284D FE    1232** CP      155
0B284E 9B 
0B284F 30    1233** JR      NC,STR15
0B2850 29 
0B2851 2F    1234** CPL
0B2852 FE    1235** CP      225
0B2853 E1 
0B2854 38    1236** JR      C,STR13
0B2855 02 
0B2856 3E    1237** LD      A,-8
0B2857 F8 
0B2858 C6    1238** STR13:			ADD     A,28
0B2859 1C 
0B285A CD    1239** CALL    POWR10
0B285B E7 
0B285C 2C 
0B285D 0B 
0B285E F5    1240** PUSH    AF
0B285F CD    1241** CALL    FMUL
0B2860 D6 
0B2861 22 
0B2862 0B 
0B2863 F1    1242** POP     AF
0B2864 47    1243** LD      B,A
0B2865 F1    1244** POP     AF
0B2866 90    1245** SUB     B
0B2867 18    1246** JR      STR11
0B2868 DE 
0B2869 D6    1247** STR14:			SUB     32
0B286A 20 
0B286B CD    1248** CALL    POWR10
0B286C E7 
0B286D 2C 
0B286E 0B 
0B286F F5    1249** PUSH    AF
0B2870 CD    1250** CALL    FDIV
0B2871 2D 
0B2872 22 
0B2873 0B 
0B2874 F1    1251** POP     AF
0B2875 47    1252** LD      B,A
0B2876 F1    1253** POP     AF
0B2877 80    1254** ADD     A,B
0B2878 18    1255** JR      STR11
0B2879 CD 
0B287A 3E    1256** STR15:			LD      A,9
0B287B 09 
0B287C CD    1257** CALL    POWR10          ;10^9
0B287D E7 
0B287E 2C 
0B287F 0B 
0B2880 CD    1258** CALL    FCP0
0B2881 FB 
0B2882 2B 
0B2883 0B 
0B2884 79    1259** LD      A,C
0B2885 C1    1260** POP     BC
0B2886 4F    1261** LD      C,A
0B2887 CB    1262** SET     7,H             ;IMPLIED 1
0B2888 FC 
0B2889 DC    1263** CALL    C,X10B          ;X10, DEC B
0B288A 23 
0B288B 2C 
0B288C 0B 
0B288D D1    1264** POP     DE              ;RESTORE TEXT POINTER
0B288E CB    1265** RES     7,C
0B288F B9 
0B2890 3E    1266** LD      A,0
0B2891 00 
0B2892 17    1267** RLA                     ;PUT CARRY IN LSB
             1268** ;
             1269** ;At this point decimal normalisation has been done,
             1270** ;now convert to decimal digits:
             1271** ;      AHLH'L' = number in normalised integer form
             1272** ;            B = decimal place adjustment
             1273** ;            C = binary place adjustment (29-33)
             1274** ;
0B2893 0C    1275** STR02:			INC     C
0B2894 08    1276** EX      AF,AF'          ;SAVE A
0B2895 78    1277** LD      A,B
0B2896 DD    1278** BIT     1,(IX+2)
0B2897 CB 
0B2898 02 
0B2899 4E 
0B289A 20    1279** JR      NZ,STR20
0B289B 08 
0B289C AF    1280** XOR     A
0B289D DD    1281** CP      (IX+1)
0B289E BE 
0B289F 01 
0B28A0 28    1282** JR      Z,STR21
0B28A1 0B 
0B28A2 3E    1283** LD      A,-10
0B28A3 F6 
0B28A4 DD    1284** STR20:			ADD     A,(IX+1)        ;SIG. FIG. COUNT
0B28A5 86 
0B28A6 01 
0B28A7 B7    1285** OR      A               ;CLEAR CARRY
0B28A8 FA    1286** JP      M,STR21
0B28A9 AD 
0B28AA 28 
0B28AB 0B 
0B28AC AF    1287** XOR     A
0B28AD F5    1288** STR21:			PUSH    AF
0B28AE 08    1289** EX      AF,AF'          ;RESTORE A
0B28AF CD    1290** STR22:			CALL    X2              ;RL AHLH'L'
0B28B0 57 
0B28B1 2C 
0B28B2 0B 
0B28B3 8F    1291** ADC     A,A
0B28B4 FE    1292** CP      10
0B28B5 0A 
0B28B6 38    1293** JR      C,STR23
0B28B7 05 
0B28B8 D6    1294** SUB     10
0B28B9 0A 
0B28BA D9    1295** EXX
0B28BB 2C    1296** INC     L               ;SET RESULT BIT
0B28BC D9    1297** EXX
0B28BD 0D    1298** STR23:			DEC     C
0B28BE 20    1299** JR      NZ,STR22        ;32 TIMES
0B28BF EF 
0B28C0 4F    1300** LD      C,A             ;REMAINDER
0B28C1 7C    1301** LD      A,H
0B28C2 E6    1302** AND     3FH             ;CLEAR OUT JUNK
0B28C3 3F 
0B28C4 67    1303** LD      H,A
0B28C5 F1    1304** POP     AF
0B28C6 F2    1305** JP      P,STR24
0B28C7 D4 
0B28C8 28 
0B28C9 0B 
0B28CA 3C    1306** INC     A
0B28CB 20    1307** JR      NZ,STR26
0B28CC 1C 
0B28CD 3E    1308** LD      A,4
0B28CE 04 
0B28CF B9    1309** CP      C               ;ROUND UP?
0B28D0 3E    1310** LD      A,0
0B28D1 00 
0B28D2 18    1311** JR      STR26
0B28D3 15 
0B28D4 F5    1312** STR24:			PUSH    AF
0B28D5 79    1313** LD      A,C
0B28D6 CE    1314** ADC     A,'0'           ;ADD CARRY
0B28D7 30 
0B28D8 FE    1315** CP      '0'
0B28D9 30 
0B28DA 28    1316** JR      Z,STR25         ;SUPPRESS ZERO
0B28DB 05 
0B28DC FE    1317** CP      '9'+1
0B28DD 3A 
0B28DE 3F    1318** CCF
0B28DF 30    1319** JR      NC,STR26
0B28E0 08 
0B28E1 E3    1320** STR25:			EX      (SP),HL
0B28E2 CB    1321** BIT     6,L             ;ZERO FLAG
0B28E3 75 
0B28E4 E3    1322** EX      (SP),HL
0B28E5 20    1323** JR      NZ,STR27
0B28E6 05 
0B28E7 3E    1324** LD      A,'0'
0B28E8 30 
0B28E9 3C    1325** STR26:			INC     A               ;SET +VE
0B28EA 3D    1326** DEC     A
0B28EB F5    1327** PUSH    AF              ;PUT ON STACK + CARRY
0B28EC 04    1328** STR27:			INC     B
0B28ED CD    1329** CALL    TEST_FP            ;IS HLH'L' ZERO?
0B28EE C7 
0B28EF 2B 
0B28F0 0B 
0B28F1 0E    1330** LD      C,32
0B28F2 20 
0B28F3 3E    1331** LD      A,0
0B28F4 00 
0B28F5 20    1332** JR      NZ,STR22
0B28F6 B8 
0B28F7 F1    1333** POP     AF
0B28F8 F5    1334** PUSH    AF
0B28F9 3E    1335** LD      A,0
0B28FA 00 
0B28FB 38    1336** JR      C,STR22
0B28FC B2 
             1337** ;
             1338** ;At this point, the decimal character string is stored
             1339** ; on the stack. Trailing zeroes are suppressed and may
             1340** ; need to be replaced.
             1341** ;B register holds decimal point position.
             1342** ;Now format number and store as ASCII string:
             1343** ;
0B28FD EB    1344** STR3:			EX      DE,HL           ;STRING POINTER
0B28FE 0E    1345** LD      C,-1            ;FLAG "E"
0B28FF FF 
0B2900 16    1346** LD      D,1
0B2901 01 
0B2902 DD    1347** LD      E,(IX+1)        ;f2
0B2903 5E 
0B2904 01 
0B2905 DD    1348** BIT     0,(IX+2)
0B2906 CB 
0B2907 02 
0B2908 46 
0B2909 20    1349** JR      NZ,STR34        ;E MODE
0B290A 35 
0B290B DD    1350** BIT     1,(IX+2)
0B290C CB 
0B290D 02 
0B290E 4E 
0B290F 28    1351** JR      Z,STR31
0B2910 12 
0B2911 78    1352** LD      A,B             ;F MODE
0B2912 B7    1353** OR      A
0B2913 28    1354** JR      Z,STR30
0B2914 05 
0B2915 FA    1355** JP      M,STR30
0B2916 1A 
0B2917 29 
0B2918 0B 
0B2919 50    1356** LD      D,B
0B291A 7A    1357** STR30:			LD      A,D
0B291B DD    1358** ADD     A,(IX+1)
0B291C 86 
0B291D 01 
0B291E 5F    1359** LD      E,A
0B291F FE    1360** CP      11
0B2920 0B 
0B2921 38    1361** JR      C,STR32
0B2922 19 
0B2923 78    1362** STR31:			LD      A,B             ;G MODE
0B2924 11    1363** LD      DE,101H
0B2925 01 
0B2926 01 
0B2927 00 
0B2928 B7    1364** OR      A
0B2929 FA    1365** JP      M,STR34
0B292A 40 
0B292B 29 
0B292C 0B 
0B292D 28    1366** JR      Z,STR32
0B292E 0D 
0B292F DD    1367** LD      A,(IX+1)
0B2930 7E 
0B2931 01 
0B2932 B7    1368** OR      A
0B2933 20    1369** JR      NZ,STR3A
0B2934 02 
0B2935 3E    1370** LD      A,10
0B2936 0A 
0B2937 B8    1371** STR3A:			CP      B
0B2938 38    1372** JR      C,STR34
0B2939 06 
0B293A 50    1373** LD      D,B
0B293B 58    1374** LD      E,B
0B293C 78    1375** STR32:			LD      A,B
0B293D C6    1376** ADD     A,129
0B293E 81 
0B293F 4F    1377** LD      C,A
0B2940 CB    1378** STR34:			SET     7,D
0B2941 FA 
0B2942 1D    1379** DEC     E
0B2943 7A    1380** STR35:			LD      A,D
0B2944 B9    1381** CP      C
0B2945 30    1382** JR      NC,STR33
0B2946 0E 
0B2947 F1    1383** STR36:			POP     AF
0B2948 28    1384** JR      Z,STR37
0B2949 04 
0B294A F2    1385** JP      P,STR38
0B294B 57 
0B294C 29 
0B294D 0B 
0B294E F5    1386** STR37:			PUSH    AF
0B294F 1C    1387** INC     E
0B2950 1D    1388** DEC     E
0B2951 FA    1389** JP      M,STR4
0B2952 68 
0B2953 29 
0B2954 0B 
0B2955 3E    1390** STR33:			LD      A,'0'
0B2956 30 
0B2957 15    1391** STR38:			DEC     D
0B2958 E2    1392** JP      PO,STR39
0B2959 5F 
0B295A 29 
0B295B 0B 
0B295C 36    1393** LD      (HL),'.'
0B295D 2E 
0B295E 23    1394** INC     HL
0B295F 77    1395** STR39:			LD      (HL),A
0B2960 23    1396** INC     HL
0B2961 1D    1397** DEC     E
0B2962 F2    1398** JP      P,STR35
0B2963 43 
0B2964 29 
0B2965 0B 
0B2966 18    1399** JR      STR36
0B2967 DF 
             1400** ;
0B2968 F1    1401** STR4:			POP     AF
0B2969 0C    1402** STR40:			INC     C
0B296A 4D    1403** LD      C,L
0B296B 20    1404** JR      NZ,STR44
0B296C 28 
0B296D 36    1405** LD      (HL),'E'        ;EXPONENT
0B296E 45 
0B296F 23    1406** INC     HL
0B2970 78    1407** LD      A,B
0B2971 3D    1408** DEC     A
0B2972 F2    1409** JP      P,STR41
0B2973 7B 
0B2974 29 
0B2975 0B 
0B2976 36    1410** LD      (HL),'-'
0B2977 2D 
0B2978 23    1411** INC     HL
0B2979 ED    1412** NEG
0B297A 44 
0B297B 36    1413** STR41:			LD      (HL),'0'
0B297C 30 
0B297D 28    1414** JR      Z,STR47
0B297E 15 
0B297F FE    1415** CP      10
0B2980 0A 
0B2981 47    1416** LD      B,A
0B2982 3E    1417** LD      A,':'
0B2983 3A 
0B2984 38    1418** JR      C,STR42
0B2985 03 
0B2986 23    1419** INC     HL
0B2987 36    1420** LD      (HL),'0'
0B2988 30 
0B2989 34    1421** STR42:			INC     (HL)
0B298A BE    1422** CP      (HL)
0B298B 20    1423** JR      NZ,STR43
0B298C 05 
0B298D 36    1424** LD      (HL),'0'
0B298E 30 
0B298F 2B    1425** DEC     HL
0B2990 34    1426** INC     (HL)
0B2991 23    1427** INC     HL
0B2992 10    1428** STR43:			DJNZ    STR42
0B2993 F5 
0B2994 23    1429** STR47:			INC     HL
0B2995 EB    1430** STR44:			EX      DE,HL
0B2996 C9    1431** RET
             1432** ;
             1433** ;Support subroutines:
             1434** ;
0B2997 DD    1435** DLOAD5:			LD      B,(IX+4)
0B2998 46 
0B2999 04 
0B299A D9    1436** EXX
0B299B DD    1437** LD      E,(IX+0)
0B299C 5E 
0B299D 00 
0B299E DD    1438** LD      D,(IX+1)
0B299F 56 
0B29A0 01 
0B29A1 D9    1439** EXX
0B29A2 DD    1440** LD      E,(IX+2)
0B29A3 5E 
0B29A4 02 
0B29A5 DD    1441** LD      D,(IX+3)
0B29A6 56 
0B29A7 03 
0B29A8 C9    1442** RET
             1443** ;
0B29A9 DD    1444** DLOAD5_SPL:		LD      B,(IX+6)
0B29AA 46 
0B29AB 06 
0B29AC D9    1445** EXX
0B29AD DD    1446** LD	DE, (IX+0)
0B29AE 17 
0B29AF 00 
0B29B0 D9    1447** EXX
0B29B1 DD    1448** LD	DE, (IX+3)
0B29B2 17 
0B29B3 03 
0B29B4 C9    1449** RET
             1450** ;
             1451** ;CON_FP - Get unsigned numeric constant from ASCII string.
             1452** ;   Inputs: ASCII string at (IX).
             1453** ;  Outputs: Variable-type result in HLH'L'C
             1454** ;           IX updated (points to delimiter)
             1455** ;           A7 = 0 (numeric marker)
             1456** ;
0B29B5 CD    1457** CON_FP:			CALL    ZERO_FP            ;INITIALISE TO ZERO
0B29B6 EB 
0B29B7 2B 
0B29B8 0B 
0B29B9 0E    1458** LD      C,0             ;TRUNCATION COUNTER
0B29BA 00 
0B29BB CD    1459** CALL    UINT          ;GET INTEGER PART
0B29BC 49 
0B29BD 2A 
0B29BE 0B 
0B29BF FE    1460** CP      '.'
0B29C0 2E 
0B29C1 06    1461** LD      B,0             ;DECL. PLACE COUNTER
0B29C2 00 
0B29C3 CC    1462** CALL    Z,NUMBIX        ;GET FRACTION PART
0B29C4 47 
0B29C5 2A 
0B29C6 0B 
0B29C7 FE    1463** CP      'E'
0B29C8 45 
0B29C9 3E    1464** LD      A,0             ;INITIALISE EXPONENT
0B29CA 00 
0B29CB CC    1465** CALL    Z,GETEXP        ;GET EXPONENT
0B29CC 15 
0B29CD 2A 
0B29CE 0B 
0B29CF CB    1466** BIT     7,H
0B29D0 7C 
0B29D1 20    1467** JR      NZ,CON0         ;INTEGER OVERFLOW
0B29D2 08 
0B29D3 B7    1468** OR      A
0B29D4 20    1469** JR      NZ,CON0         ;EXPONENT NON-ZERO
0B29D5 05 
0B29D6 B8    1470** CP      B
0B29D7 20    1471** JR      NZ,CON0         ;DECIMAL POINT
0B29D8 02 
0B29D9 B9    1472** CP      C
0B29DA C8    1473** RET     Z               ;INTEGER
0B29DB 90    1474** CON0:			SUB     B
0B29DC 81    1475** ADD     A,C
0B29DD 0E    1476** LD      C,159
0B29DE 9F 
0B29DF CD    1477** CALL    FLOAT_
0B29E0 4E 
0B29E1 2B 
0B29E2 0B 
0B29E3 CB    1478** RES     7,H             ;DITCH IMPLIED 1
0B29E4 BC 
0B29E5 B7    1479** OR      A
0B29E6 C8    1480** RET     Z               ;DONE
0B29E7 FA    1481** JP      M,CON2          ;NEGATIVE EXPONENT
0B29E8 F5 
0B29E9 29 
0B29EA 0B 
0B29EB CD    1482** CALL    POWR10
0B29EC E7 
0B29ED 2C 
0B29EE 0B 
0B29EF CD    1483** CALL    FMUL            ;SCALE
0B29F0 D6 
0B29F1 22 
0B29F2 0B 
0B29F3 AF    1484** XOR     A
0B29F4 C9    1485** RET
0B29F5 FE    1486** CON2:			CP      -38
0B29F6 DA 
0B29F7 38    1487** JR      C,CON3          ;CAN'T SCALE IN ONE GO
0B29F8 0C 
0B29F9 ED    1488** NEG
0B29FA 44 
0B29FB CD    1489** CALL    POWR10
0B29FC E7 
0B29FD 2C 
0B29FE 0B 
0B29FF CD    1490** CALL    FDIV            ;SCALE
0B2A00 2D 
0B2A01 22 
0B2A02 0B 
0B2A03 AF    1491** XOR     A
0B2A04 C9    1492** RET
0B2A05 F5    1493** CON3:			PUSH    AF
0B2A06 3E    1494** LD      A,38
0B2A07 26 
0B2A08 CD    1495** CALL    POWR10
0B2A09 E7 
0B2A0A 2C 
0B2A0B 0B 
0B2A0C CD    1496** CALL    FDIV
0B2A0D 2D 
0B2A0E 22 
0B2A0F 0B 
0B2A10 F1    1497** POP     AF
0B2A11 C6    1498** ADD     A,38
0B2A12 26 
0B2A13 18    1499** JR      CON2
0B2A14 E0 
             1500** ;
             1501** ;GETEXP - Get decimal exponent from string
             1502** ;     Inputs: ASCII string at (IX)
             1503** ;             (IX points at 'E')
             1504** ;             A = initial value
             1505** ;    Outputs: A = new exponent
             1506** ;             IX updated.
             1507** ;   Destroys: A,A',IX,F,F'
             1508** ;
0B2A15 C5    1509** GETEXP:			PUSH    BC              ;SAVE REGISTERS
0B2A16 47    1510** LD      B,A             ;INITIAL VALUE
0B2A17 0E    1511** LD      C,2             ;2 DIGITS MAX
0B2A18 02 
0B2A19 DD    1512** INC     IX              ;BUMP PAST 'E'
0B2A1A 23 
0B2A1B CD    1513** CALL    SIGNQ
0B2A1C 05 
0B2A1D 2E 
0B2A1E 0B 
0B2A1F 08    1514** EX      AF,AF'          ;SAVE EXPONENT SIGN
0B2A20 CD    1515** GETEX1:			CALL    DIGITQ
0B2A21 FB 
0B2A22 2D 
0B2A23 0B 
0B2A24 38    1516** JR      C,GETEX2
0B2A25 18 
0B2A26 78    1517** LD      A,B             ;B=B*10
0B2A27 87    1518** ADD     A,A
0B2A28 87    1519** ADD     A,A
0B2A29 80    1520** ADD     A,B
0B2A2A 87    1521** ADD     A,A
0B2A2B 47    1522** LD      B,A
0B2A2C DD    1523** LD      A,(IX)          ;GET BACK DIGIT
0B2A2D 7E 
0B2A2E 00 
0B2A2F DD    1524** INC     IX
0B2A30 23 
0B2A31 E6    1525** AND     0FH             ;MASK UNWANTED BITS
0B2A32 0F 
0B2A33 80    1526** ADD     A,B             ;ADD IN DIGIT
0B2A34 47    1527** LD      B,A
0B2A35 0D    1528** DEC     C
0B2A36 F2    1529** JP      P,GETEX1
0B2A37 20 
0B2A38 2A 
0B2A39 0B 
0B2A3A 06    1530** LD      B,100           ;FORCE OVERFLOW
0B2A3B 64 
0B2A3C 18    1531** JR      GETEX1
0B2A3D E2 
0B2A3E 08    1532** GETEX2:			EX      AF,AF'          ;RESTORE SIGN
0B2A3F FE    1533** CP      '-'
0B2A40 2D 
0B2A41 78    1534** LD      A,B
0B2A42 C1    1535** POP     BC              ;RESTORE
0B2A43 C0    1536** RET     NZ
0B2A44 ED    1537** NEG                     ;NEGATE EXPONENT
0B2A45 44 
0B2A46 C9    1538** RET
             1539** ;
             1540** ;UINT: Get unsigned integer from string.
             1541** ;    Inputs: string at (IX)
             1542** ;            C = truncated digit count
             1543** ;                (initially zero)
             1544** ;            B = total digit count
             1545** ;            HLH'L' = initial value
             1546** ;   Outputs: HLH'L' = number (binary integer)
             1547** ;            A = delimiter.
             1548** ;            B, C & IX updated
             1549** ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
             1550** ;
0B2A47 DD    1551** NUMBIX:			INC     IX
0B2A48 23 
0B2A49 CD    1552** UINT:			CALL    DIGITQ
0B2A4A FB 
0B2A4B 2D 
0B2A4C 0B 
0B2A4D D8    1553** RET     C
0B2A4E 04    1554** INC     B               ;INCREMENT DIGIT COUNT
0B2A4F DD    1555** INC     IX
0B2A50 23 
0B2A51 CD    1556** CALL    X10             ;*10 & COPY OLD VALUE
0B2A52 44 
0B2A53 2C 
0B2A54 0B 
0B2A55 38    1557** JR      C,NUMB1         ;OVERFLOW
0B2A56 15 
0B2A57 0D    1558** DEC     C               ;SEE IF TRUNCATED
0B2A58 0C    1559** INC     C
0B2A59 20    1560** JR      NZ,NUMB1        ;IMPORTANT!
0B2A5A 11 
0B2A5B E6    1561** AND     0FH
0B2A5C 0F 
0B2A5D D9    1562** EXX
0B2A5E 06    1563** LD      B,0
0B2A5F 00 
0B2A60 4F    1564** LD      C,A
0B2A61 52    1565** ADD.S   HL,BC           ;ADD IN DIGIT
0B2A62 09 
0B2A63 D9    1566** EXX
0B2A64 30    1567** JR      NC,UINT
0B2A65 E3 
0B2A66 52    1568** INC.S   HL              ;CARRY
0B2A67 23 
0B2A68 7C    1569** LD      A,H
0B2A69 B5    1570** OR      L
0B2A6A 20    1571** JR      NZ,UINT
0B2A6B DD 
0B2A6C 0C    1572** NUMB1:			INC     C               ;TRUNCATION COUNTER
0B2A6D CD    1573** CALL    SWAP1           ;RESTORE PREVIOUS VALUE
0B2A6E A2 
0B2A6F 2B 
0B2A70 0B 
0B2A71 18    1574** JR      UINT
0B2A72 D6 
             1575** ;
             1576** ;FIX - Fix number to specified exponent value.
             1577** ;    Inputs: HLH'L'C = +ve non-zero number (floated)
             1578** ;            A = desired exponent (A>C)
             1579** ;   Outputs: HLH'L'C = fixed number (unsigned)
             1580** ;            fraction shifted into B'C'
             1581** ;            A'F' positive if integer input
             1582** ;  Destroys: C,H,L,A',B',C',H',L',F,F'
             1583** ;
0B2A73 08    1584** FIX:			EX      AF,AF'
0B2A74 AF    1585** XOR     A
0B2A75 08    1586** EX      AF,AF'
0B2A76 CB    1587** SET     7,H             ;IMPLIED 1
0B2A77 FC 
0B2A78 CD    1588** FIX1:			CALL    DIV2
0B2A79 A7 
0B2A7A 2B 
0B2A7B 0B 
0B2A7C B9    1589** CP      C
0B2A7D C8    1590** RET     Z
0B2A7E D2    1591** JP      NC,FIX1
0B2A7F 78 
0B2A80 2A 
0B2A81 0B 
0B2A82 C3    1592** JP      OFLOW
0B2A83 B6 
0B2A84 2B 
0B2A85 0B 
             1593** ;
             1594** ;SFIX - Convert to integer if necessary.
             1595** ;    Input: Variable-type number in HLH'L'C
             1596** ;   Output: Integer in HLH'L', C=0
             1597** ; Destroys: A,C,H,L,A',B',C',H',L',F,F'
             1598** ;
             1599** ;NEGATE - Negate HLH'L'
             1600** ;    Destroys: H,L,H',L',F
             1601** ;
0B2A86 CD    1602** FIX2:			CALL    SWAP_FP
0B2A87 9F 
0B2A88 2B 
0B2A89 0B 
0B2A8A CD    1603** CALL    SFIX_FP
0B2A8B 92 
0B2A8C 2A 
0B2A8D 0B 
0B2A8E CD    1604** CALL    SWAP_FP
0B2A8F 9F 
0B2A90 2B 
0B2A91 0B 
0B2A92 0D    1605** SFIX_FP:			DEC     C
0B2A93 0C    1606** INC     C
0B2A94 C8    1607** RET     Z               ;INTEGER/ZERO
0B2A95 CB    1608** BIT     7,H             ;SIGN
0B2A96 7C 
0B2A97 F5    1609** PUSH    AF
0B2A98 3E    1610** LD      A,159
0B2A99 9F 
0B2A9A CD    1611** CALL    FIX
0B2A9B 73 
0B2A9C 2A 
0B2A9D 0B 
0B2A9E F1    1612** POP     AF
0B2A9F 0E    1613** LD      C,0
0B2AA0 00 
0B2AA1 C8    1614** RET     Z
0B2AA2 B7    1615** NEGATE:			OR      A               ;CLEAR CARRY
0B2AA3 D9    1616** EXX
0B2AA4 D5    1617** NEG0:			PUSH    DE
0B2AA5 EB    1618** EX      DE,HL
0B2AA6 21    1619** LD      HL,0
0B2AA7 00 
0B2AA8 00 
0B2AA9 00 
0B2AAA 52    1620** SBC.S   HL,DE
0B2AAB ED 
0B2AAC 52 
0B2AAD D1    1621** POP     DE
0B2AAE D9    1622** EXX
0B2AAF D5    1623** PUSH    DE
0B2AB0 EB    1624** EX      DE,HL
0B2AB1 21    1625** LD      HL,0
0B2AB2 00 
0B2AB3 00 
0B2AB4 00 
0B2AB5 52    1626** SBC.S   HL,DE
0B2AB6 ED 
0B2AB7 52 
0B2AB8 D1    1627** POP     DE
0B2AB9 C9    1628** RET
             1629** ;
             1630** ;NEG - Negate HLH'L'B'C'
             1631** ;    Also complements A (used in FADD)
             1632** ;    Destroys: A,H,L,B',C',H',L',F
             1633** ;
0B2ABA D9    1634** NEG_:			EXX
0B2ABB 2F    1635** CPL
0B2ABC E5    1636** PUSH    HL
0B2ABD B7    1637** OR      A               ;CLEAR CARRY
0B2ABE 21    1638** LD      HL,0
0B2ABF 00 
0B2AC0 00 
0B2AC1 00 
0B2AC2 52    1639** SBC.S   HL,BC
0B2AC3 ED 
0B2AC4 42 
0B2AC5 44    1640** LD      B,H
0B2AC6 4D    1641** LD      C,L
0B2AC7 E1    1642** POP     HL
0B2AC8 18    1643** JR      NEG0
0B2AC9 DA 
             1644** ;
             1645** ;SCALE - Trig scaling.
             1646** ;MOD48 - 48-bit floating-point "modulus" (remainder).
             1647** ;   Inputs: HLH'L'C unsigned floating-point dividend
             1648** ;           DED'E'B'C'B unsigned 48-bit FP divisor
             1649** ;  Outputs: HLH'L'C floating point remainder (H7=1)
             1650** ;           E = quotient (bit 7 is sticky)
             1651** ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
             1652** ;FLO48 - Float unsigned number (48 bits)
             1653** ;    Input/output in HLH'L'B'C'C
             1654** ;   Destroys: C,H,L,B',C',H',L',F
             1655** ;
0B2ACA 3E    1656** SCALE:			LD      A,150
0B2ACB 96 
0B2ACC B9    1657** CP      C
0B2ACD 3E    1658** LD      A,ACLOST
0B2ACE 17 
0B2ACF DA    1659** JP      C,ERROR_FP_         ;"Accuracy lost"
0B2AD0 45 
0B2AD1 20 
0B2AD2 0B 
0B2AD3 CD    1660** CALL    PIBY4
0B2AD4 10 
0B2AD5 26 
0B2AD6 0B 
0B2AD7 D9    1661** EXX
0B2AD8 01    1662** LD      BC,2169H        ;3.141592653589793238
0B2AD9 69 
0B2ADA 21 
0B2ADB 00 
0B2ADC D9    1663** EXX
0B2ADD CB    1664** MOD48:			SET     7,D             ;IMPLIED 1
0B2ADE FA 
0B2ADF CB    1665** SET     7,H
0B2AE0 FC 
0B2AE1 79    1666** LD      A,C
0B2AE2 0E    1667** LD      C,0             ;INIT QUOTIENT
0B2AE3 00 
0B2AE4 DD    1668** LD      IX,0
0B2AE5 21 
0B2AE6 00 
0B2AE7 00 
0B2AE7 00   
0B2AE9 DD    1669** PUSH    IX              ;PUT ZERO ON STACK
0B2AEA E5 
0B2AEB B8    1670** CP      B
0B2AEC 38    1671** JR      C,MOD485        ;DIVIDEND<DIVISOR
0B2AED 46 
0B2AEE D9    1672** MOD481:			EXX                     ;CARRY=0 HERE
0B2AEF E3    1673** EX      (SP),HL
0B2AF0 52    1674** SBC.S   HL,BC
0B2AF1 ED 
0B2AF2 42 
0B2AF3 E3    1675** EX      (SP),HL
0B2AF4 52    1676** SBC.S   HL,DE
0B2AF5 ED 
0B2AF6 52 
0B2AF7 D9    1677** EXX
0B2AF8 52    1678** SBC.S   HL,DE
0B2AF9 ED 
0B2AFA 52 
0B2AFB 30    1679** JR      NC,MOD482       ;DIVIDEND>=DIVISOR
0B2AFC 0C 
0B2AFD D9    1680** EXX
0B2AFE E3    1681** EX      (SP),HL
0B2AFF 52    1682** ADD.S   HL,BC
0B2B00 09 
0B2B01 E3    1683** EX      (SP),HL
0B2B02 52    1684** ADC.S   HL,DE
0B2B03 ED 
0B2B04 5A 
0B2B05 D9    1685** EXX
0B2B06 52    1686** ADC.S   HL,DE
0B2B07 ED 
0B2B08 5A 
0B2B09 3F    1687** MOD482:			CCF
0B2B0A CB    1688** RL      C               ;QUOTIENT
0B2B0B 11 
0B2B0C 30    1689** JR      NC,MOD483
0B2B0D 02 
0B2B0E CB    1690** SET     7,C             ;STICKY BIT
0B2B0F F9 
0B2B10 3D    1691** MOD483:			DEC     A
0B2B11 B8    1692** CP      B
0B2B12 38    1693** JR      C,MOD484        ;DIVIDEND<DIVISOR
0B2B13 1F 
0B2B14 E3    1694** EX      (SP),HL
0B2B15 52    1695** ADD.S   HL,HL           ;DIVIDEND * 2
0B2B16 29 
0B2B17 E3    1696** EX      (SP),HL
0B2B18 D9    1697** EXX
0B2B19 52    1698** ADC.S   HL,HL
0B2B1A ED 
0B2B1B 6A 
0B2B1C D9    1699** EXX
0B2B1D 52    1700** ADC.S   HL,HL
0B2B1E ED 
0B2B1F 6A 
0B2B20 30    1701** JR      NC,MOD481       ;AGAIN
0B2B21 CC 
0B2B22 B7    1702** OR      A
0B2B23 D9    1703** EXX
0B2B24 E3    1704** EX      (SP),HL
0B2B25 52    1705** SBC.S   HL,BC           ;OVERFLOW, SO SUBTRACT
0B2B26 ED 
0B2B27 42 
0B2B28 E3    1706** EX      (SP),HL
0B2B29 52    1707** SBC.S   HL,DE
0B2B2A ED 
0B2B2B 52 
0B2B2C D9    1708** EXX
0B2B2D 52    1709** SBC.S   HL,DE
0B2B2E ED 
0B2B2F 52 
0B2B30 B7    1710** OR      A
0B2B31 18    1711** JR      MOD482
0B2B32 D6 
             1712** ;
0B2B33 3C    1713** MOD484:			INC     A
0B2B34 59    1714** MOD485:			LD      E,C             ;QUOTIENT
0B2B35 4F    1715** LD      C,A             ;REMAINDER EXPONENT
0B2B36 D9    1716** EXX
0B2B37 C1    1717** POP     BC
0B2B38 D9    1718** EXX
0B2B39 CB    1719** FLO48:			BIT     7,H
0B2B3A 7C 
0B2B3B C0    1720** RET     NZ
0B2B3C D9    1721** EXX
0B2B3D CB    1722** SLA     C
0B2B3E 21 
0B2B3F CB    1723** RL      B
0B2B40 10 
0B2B41 52    1724** ADC.S   HL,HL
0B2B42 ED 
0B2B43 6A 
0B2B44 D9    1725** EXX
0B2B45 52    1726** ADC.S   HL,HL
0B2B46 ED 
0B2B47 6A 
0B2B48 0D    1727** DEC     C
0B2B49 C2    1728** JP      NZ,FLO48
0B2B4A 39 
0B2B4B 2B 
0B2B4C 0B 
0B2B4D C9    1729** RET
             1730** ;
             1731** ;Float unsigned number
             1732** ;    Input/output in HLH'L'C
             1733** ;   Destroys: C,H,L,H',L',F
             1734** ;
0B2B4E CB    1735** FLOAT_:			BIT     7,H
0B2B4F 7C 
0B2B50 C0    1736** RET     NZ
0B2B51 D9    1737** EXX                     ;SAME AS "X2"
0B2B52 52    1738** ADD.S   HL,HL           ;TIME-CRITICAL
0B2B53 29 
0B2B54 D9    1739** EXX                     ;REGION
0B2B55 52    1740** ADC.S   HL,HL           ;(BENCHMARKS)
0B2B56 ED 
0B2B57 6A 
0B2B58 0D    1741** DEC     C
0B2B59 C2    1742** JP      NZ,FLOAT_
0B2B5A 4E 
0B2B5B 2B 
0B2B5C 0B 
0B2B5D C9    1743** RET
             1744** ;
             1745** ;SFLOAT - Convert to floating-point if necessary.
             1746** ;    Input: Variable-type number in HLH'L'C
             1747** ;    Output: Floating-point in HLH'L'C
             1748** ;    Destroys: A,C,H,L,H',L',F
             1749** ;
0B2B5E 08    1750** FLOATA:			EX      AF,AF'
             1751** ; ADD     A,(RTABLE-DTABLE)/3
0B2B5F C6    1752** ADD     A,RTABLE-DTABLE/3 ; ez80asm doesn't do nested expressions
0B2B60 2A 
0B2B61 08    1753** EX      AF,AF'
0B2B62 CD    1754** FLOAT2:			CALL    SWAP_FP
0B2B63 9F 
0B2B64 2B 
0B2B65 0B 
0B2B66 CD    1755** CALL    SFLOAT_FP
0B2B67 6E 
0B2B68 2B 
0B2B69 0B 
0B2B6A CD    1756** CALL    SWAP_FP
0B2B6B 9F 
0B2B6C 2B 
0B2B6D 0B 
0B2B6E 0D    1757** SFLOAT_FP:			DEC     C
0B2B6F 0C    1758** INC     C
0B2B70 C0    1759** RET     NZ              ;ALREADY FLOATING-POINT
0B2B71 CD    1760** CALL    TEST_FP
0B2B72 C7 
0B2B73 2B 
0B2B74 0B 
0B2B75 C8    1761** RET     Z               ;ZERO
0B2B76 7C    1762** LD      A,H
0B2B77 B7    1763** OR      A
0B2B78 FC    1764** CALL    M,NEGATE
0B2B79 A2 
0B2B7A 2A 
0B2B7B 0B 
0B2B7C 0E    1765** LD      C,159
0B2B7D 9F 
0B2B7E CD    1766** CALL    FLOAT_
0B2B7F 4E 
0B2B80 2B 
0B2B81 0B 
0B2B82 B7    1767** OR      A
0B2B83 F8    1768** RET     M               ;NEGATIVE
0B2B84 CB    1769** RES     7,H
0B2B85 BC 
0B2B86 C9    1770** RET
             1771** ;
             1772** ;ROUND UP
             1773** ;Return with carry set if 32-bit overflow
             1774** ;   Destroys: H,L,B',C',H',L',F
             1775** ;
0B2B87 D9    1776** ADD1_FP:			EXX
0B2B88 01    1777** LD      BC,1
0B2B89 01 
0B2B8A 00 
0B2B8B 00 
0B2B8C 52    1778** ADD.S   HL,BC
0B2B8D 09 
0B2B8E D9    1779** EXX
0B2B8F D0    1780** RET     NC
0B2B90 C5    1781** PUSH    BC
0B2B91 01    1782** LD      BC,1
0B2B92 01 
0B2B93 00 
0B2B94 00 
0B2B95 52    1783** ADD.S   HL,BC
0B2B96 09 
0B2B97 C1    1784** POP     BC
0B2B98 C9    1785** RET
             1786** ;
             1787** ;ODD - Add one if even, leave alone if odd.
             1788** ; (Used to perform unbiassed rounding, i.e.
             1789** ;  number is rounded up half the time)
             1790** ;    Destroys: L',F (carry cleared)
             1791** ;
0B2B99 B7    1792** ODD:			OR      A               ;CLEAR CARRY
0B2B9A D9    1793** EXX
0B2B9B CB    1794** SET     0,L             ;MAKE ODD
0B2B9C C5 
0B2B9D D9    1795** EXX
0B2B9E C9    1796** RET
             1797** ;
             1798** ;SWAP_FP - Swap arguments.
             1799** ;    Exchanges DE,HL D'E',H'L' and B,C
             1800** ;    Destroys: A,B,C,D,E,H,L,D',E',H',L'
             1801** ;SWAP1 - Swap DEHL with D'E'H'L'
             1802** ;    Destroys: D,E,H,L,D',E',H',L'
             1803** ;
0B2B9F 79    1804** SWAP_FP:			LD      A,C
0B2BA0 48    1805** LD      C,B
0B2BA1 47    1806** LD      B,A
0B2BA2 EB    1807** SWAP1:			EX      DE,HL
0B2BA3 D9    1808** EXX
0B2BA4 EB    1809** EX      DE,HL
0B2BA5 D9    1810** EXX
0B2BA6 C9    1811** RET
             1812** ;
             1813** ; DIV2 - destroys C,H,L,A',B',C',H',L',F,F'
             1814** ; INCC - destroys C,F
             1815** ; OFLOW
             1816** ;
0B2BA7 CD    1817** DIV2:			CALL    D2
0B2BA8 60 
0B2BA9 2C 
0B2BAA 0B 
0B2BAB D9    1818** EXX
0B2BAC CB    1819** RR      B
0B2BAD 18 
0B2BAE CB    1820** RR      C
0B2BAF 19 
0B2BB0 08    1821** EX      AF,AF'
0B2BB1 B0    1822** OR      B
0B2BB2 08    1823** EX      AF,AF'
0B2BB3 D9    1824** EXX
0B2BB4 0C    1825** INCC:			INC     C
0B2BB5 C0    1826** RET     NZ
0B2BB6 3E    1827** OFLOW:			LD      A,TOOBIG_FP
0B2BB7 14 
0B2BB8 C3    1828** JP      ERROR_FP_           ;"Too big"
0B2BB9 45 
0B2BBA 20 
0B2BBB 0B 
             1829** ;
             1830** ; FTEST - Test for zero & sign
             1831** ;     Output: A=0 if zero, A=&40 if +ve, A=&C0 if -ve
             1832** ;
0B2BBC CD    1833** FTEST_FP:			CALL    TEST_FP
0B2BBD C7 
0B2BBE 2B 
0B2BBF 0B 
0B2BC0 C8    1834** RET     Z
0B2BC1 7C    1835** LD      A,H
0B2BC2 E6    1836** AND     10000000B
0B2BC3 80 
0B2BC4 F6    1837** OR      01000000B
0B2BC5 40 
0B2BC6 C9    1838** RET
             1839** ;
             1840** ; TEST_FP - Test HLH'L' for zero.
             1841** ;     Output: Z-flag set & A=0 if HLH'L'=0
             1842** ;     Destroys: A,F
             1843** ;
0B2BC7 7C    1844** TEST_FP:			LD      A,H
0B2BC8 B5    1845** OR      L
0B2BC9 D9    1846** EXX
0B2BCA B4    1847** OR      H
0B2BCB B5    1848** OR      L
0B2BCC D9    1849** EXX
0B2BCD C9    1850** RET
             1851** ;
             1852** ; FCOMP - Compare two numbers
             1853** ;     Output: A=0 if equal, A=&40 if L>R, A=&C0 if L<R
             1854** ;
0B2BCE 78    1855** FCOMP_FP:			LD      A,B
0B2BCF B1    1856** OR      C               ;Both integer?
0B2BD0 20    1857** JR      NZ,FCOMP1
0B2BD1 0B 
0B2BD2 CD    1858** CALL    ICP
0B2BD3 E7 
0B2BD4 2B 
0B2BD5 0B 
0B2BD6 3E    1859** FCOMP0:			LD      A,0
0B2BD7 00 
0B2BD8 C8    1860** RET     Z               ;Equal
0B2BD9 3E    1861** LD      A,80H
0B2BDA 80 
0B2BDB 1F    1862** RRA
0B2BDC C9    1863** RET
             1864** ;
0B2BDD CD    1865** FCOMP1:			CALL    FLOAT2          ;Float both
0B2BDE 62 
0B2BDF 2B 
0B2BE0 0B 
0B2BE1 CD    1866** CALL    FCP
0B2BE2 F5 
0B2BE3 2B 
0B2BE4 0B 
0B2BE5 18    1867** JR      FCOMP0
0B2BE6 EF 
             1868** ;
             1869** ; Integer and floating point compare.
             1870** ; Sets carry & zero flags according to HLH'L'C-DED'E'B
             1871** ; Result pre-set to FALSE
             1872** ; ICP1, FCP1 destroy A,F
             1873** ;
             1874** ; ZERO - Return zero.
             1875** ;  Destroys: A,C,H,L,H',L'
             1876** ;
0B2BE7 CD    1877** ICP:			CALL    ICP1
0B2BE8 1A 
0B2BE9 2C 
0B2BEA 0B 
0B2BEB 3E    1878** ZERO_FP:			LD      A,0
0B2BEC 00 
0B2BED D9    1879** EXX
0B2BEE 67    1880** LD      H,A
0B2BEF 6F    1881** LD      L,A
0B2BF0 D9    1882** EXX
0B2BF1 67    1883** LD      H,A
0B2BF2 6F    1884** LD      L,A
0B2BF3 4F    1885** LD      C,A
0B2BF4 C9    1886** RET
             1887** ;
0B2BF5 CD    1888** FCP:			CALL    FCP1
0B2BF6 0C 
0B2BF7 2C 
0B2BF8 0B 
0B2BF9 18    1889** JR      ZERO_FP            ;PRESET FALSE
0B2BFA F0 
             1890** ;
0B2BFB 79    1891** FCP0:			LD      A,C
0B2BFC B8    1892** CP      B               ;COMPARE EXPONENTS
0B2BFD C0    1893** RET     NZ
             1894** ICP0:
0B2BFE 52    1895** SBC.S   HL,DE           ;COMP MANTISSA MSB
0B2BFF ED 
0B2C00 52 
0B2C01 52    1896** ADD.S   HL,DE
0B2C02 19 
0B2C03 C0    1897** RET     NZ
0B2C04 D9    1898** EXX
0B2C05 52    1899** SBC.S   HL,DE           ;COMP MANTISSA LSB
0B2C06 ED 
0B2C07 52 
0B2C08 52    1900** ADD.S   HL,DE
0B2C09 19 
0B2C0A D9    1901** EXX
0B2C0B C9    1902** RET
             1903** ;
0B2C0C 7C    1904** FCP1:			LD      A,H
0B2C0D AA    1905** XOR     D
0B2C0E 7C    1906** LD      A,H
0B2C0F 17    1907** RLA
0B2C10 F8    1908** RET     M
0B2C11 30    1909** JR      NC,FCP0
0B2C12 E8 
0B2C13 CD    1910** CALL    FCP0
0B2C14 FB 
0B2C15 2B 
0B2C16 0B 
0B2C17 C8    1911** RET     Z               ;** V0.1 BUG FIX
0B2C18 3F    1912** CCF
0B2C19 C9    1913** RET
             1914** ;
0B2C1A 7C    1915** ICP1:			LD      A,H
0B2C1B AA    1916** XOR     D
0B2C1C F2    1917** JP      P,ICP0
0B2C1D FE 
0B2C1E 2B 
0B2C1F 0B 
0B2C20 7C    1918** LD      A,H
0B2C21 17    1919** RLA
0B2C22 C9    1920** RET
             1921** ;
             1922** ; ADD - Integer add.
             1923** ; Carry, sign & zero flags valid on exit
             1924** ;     Destroys: H,L,H',L',F
             1925** ;
0B2C23 05    1926** X10B:			DEC     B
0B2C24 0C    1927** INC     C
0B2C25 CD    1928** X5:			CALL    COPY0
0B2C26 6C 
0B2C27 2C 
0B2C28 0B 
0B2C29 CD    1929** CALL    D2C
0B2C2A 5F 
0B2C2B 2C 
0B2C2C 0B 
0B2C2D CD    1930** CALL    D2C
0B2C2E 5F 
0B2C2F 2C 
0B2C30 0B 
0B2C31 08    1931** EX      AF,AF'          ;SAVE CARRY
0B2C32 D9    1932** ADD_:			EXX
0B2C33 52    1933** ADD.S   HL,DE
0B2C34 19 
0B2C35 D9    1934** EXX
0B2C36 52    1935** ADC.S   HL,DE
0B2C37 ED 
0B2C38 5A 
0B2C39 C9    1936** RET
             1937** ;
             1938** ; SUB - Integer subtract.
             1939** ; Carry, sign & zero flags valid on exit
             1940** ;     Destroys: H,L,H',L',F
             1941** ;
0B2C3A D9    1942** SUB_:			EXX
0B2C3B B7    1943** OR      A
0B2C3C 52    1944** SBC.S   HL,DE
0B2C3D ED 
0B2C3E 52 
0B2C3F D9    1945** EXX
0B2C40 52    1946** SBC.S   HL,DE
0B2C41 ED 
0B2C42 52 
0B2C43 C9    1947** RET
             1948** ;
             1949** ; X10 - unsigned integer * 10
             1950** ;    Inputs: HLH'L' initial value
             1951** ;   Outputs: DED'E' = initial HLH'L'
             1952** ;            Carry bit set if overflow
             1953** ;            If carry not set HLH'L'=result
             1954** ;  Destroys: D,E,H,L,D',E',H',L',F
             1955** ; X2 - Multiply HLH'L' by 2 as 32-bit integer.
             1956** ;     Carry set if MSB=1 before shift.
             1957** ;     Sign set if MSB=1 after shift.
             1958** ;     Destroys: H,L,H',L',F
             1959** ;
0B2C44 CD    1960** X10:			CALL    COPY0           ;DED'E'=HLH'L'
0B2C45 6C 
0B2C46 2C 
0B2C47 0B 
0B2C48 CD    1961** CALL    X2
0B2C49 57 
0B2C4A 2C 
0B2C4B 0B 
0B2C4C D8    1962** RET     C               ;TOO BIG
0B2C4D CD    1963** CALL    X2
0B2C4E 57 
0B2C4F 2C 
0B2C50 0B 
0B2C51 D8    1964** RET     C
0B2C52 CD    1965** CALL    ADD_
0B2C53 32 
0B2C54 2C 
0B2C55 0B 
0B2C56 D8    1966** RET     C
0B2C57 D9    1967** X2:			EXX
0B2C58 52    1968** ADD.S   HL,HL
0B2C59 29 
0B2C5A D9    1969** EXX
0B2C5B 52    1970** ADC.S   HL,HL
0B2C5C ED 
0B2C5D 6A 
0B2C5E C9    1971** RET
             1972** ;
             1973** ; D2 - Divide HLH'L' by 2 as 32-bit integer.
             1974** ;     Carry set if LSB=1 before shift.
             1975** ;     Destroys: H,L,H',L',F
             1976** ;
0B2C5F 0C    1977** D2C:			INC     C
0B2C60 CB    1978** D2:			SRL     H
0B2C61 3C 
0B2C62 CB    1979** RR      L
0B2C63 1D 
0B2C64 D9    1980** EXX
0B2C65 CB    1981** RR      H
0B2C66 1C 
0B2C67 CB    1982** RR      L
0B2C68 1D 
0B2C69 D9    1983** EXX
0B2C6A C9    1984** RET
             1985** ;
             1986** ; COPY - COPY HLH'L'C INTO DED'E'B
             1987** ;   Destroys: B,C,D,E,H,L,D',E',H',L'
             1988** ;
0B2C6B 41    1989** COPY_:			LD      B,C
0B2C6C 54    1990** COPY0:			LD      D,H
0B2C6D 5D    1991** LD      E,L
0B2C6E D9    1992** EXX
0B2C6F 54    1993** LD      D,H
0B2C70 5D    1994** LD      E,L
0B2C71 D9    1995** EXX
0B2C72 C9    1996** RET
             1997** ;
             1998** ; SQUARE - PUSH X*X
             1999** ; PUSH5 - PUSH HLH'L'C ONTO STACK.
             2000** ;   Destroys: SP,IX
             2001** ;
0B2C73 CD    2002** SQUARE:			CALL    COPY_
0B2C74 6B 
0B2C75 2C 
0B2C76 0B 
0B2C77 CD    2003** CALL    FMUL
0B2C78 D6 
0B2C79 22 
0B2C7A 0B 
0B2C7B DD    2004** PUSH5:			POP     IX              ;RETURN ADDRESS
0B2C7C E1 
0B2C7D C5    2005** PUSH    BC
0B2C7E E5    2006** PUSH    HL
0B2C7F D9    2007** EXX
0B2C80 E5    2008** PUSH    HL
0B2C81 D9    2009** EXX
0B2C82 DD    2010** JP      (IX)            ;"RETURN"
0B2C83 E9 
             2011** ;
             2012** ; POP5 - POP DED'E'B OFF STACK.
             2013** ;   Destroys: A,B,D,E,D',E',SP,IX
             2014** ;
0B2C84 DD    2015** POP5:			POP     IX              ;RETURN ADDRESS
0B2C85 E1 
0B2C86 D9    2016** EXX
0B2C87 D1    2017** POP     DE
0B2C88 D9    2018** EXX
0B2C89 D1    2019** POP     DE
0B2C8A 79    2020** LD      A,C
0B2C8B C1    2021** POP     BC
0B2C8C 41    2022** LD      B,C
0B2C8D 4F    2023** LD      C,A
0B2C8E DD    2024** JP      (IX)            ;"RETURN"
0B2C8F E9 
             2025** ;
             2026** ; RATIO - Calculate (X-1)/(X+1)
             2027** ;     Inputs: X in HLH'L'C
             2028** ;    Outputs: (X-1)/(X+1) in HLH'L'C
             2029** ;   Destroys: Everything except IY,SP,I
             2030** ;
0B2C90 CD    2031** RATIO:			CALL    PUSH5           ;SAVE X
0B2C91 7B 
0B2C92 2C 
0B2C93 0B 
0B2C94 CD    2032** CALL    DONE
0B2C95 03 
0B2C96 26 
0B2C97 0B 
0B2C98 CD    2033** CALL    FADD
0B2C99 C4 
0B2C9A 21 
0B2C9B 0B 
0B2C9C CD    2034** CALL    POP5            ;RESTORE X
0B2C9D 84 
0B2C9E 2C 
0B2C9F 0B 
0B2CA0 CD    2035** CALL    PUSH5           ;SAVE X+1
0B2CA1 7B 
0B2CA2 2C 
0B2CA3 0B 
0B2CA4 CD    2036** CALL    SWAP_FP
0B2CA5 9F 
0B2CA6 2B 
0B2CA7 0B 
0B2CA8 CD    2037** CALL    DONE
0B2CA9 03 
0B2CAA 26 
0B2CAB 0B 
0B2CAC CD    2038** CALL    FSUB
0B2CAD AB 
0B2CAE 21 
0B2CAF 0B 
0B2CB0 CD    2039** CALL    POP5            ;RESTORE X+1
0B2CB1 84 
0B2CB2 2C 
0B2CB3 0B 
0B2CB4 C3    2040** JP      FDIV
0B2CB5 2D 
0B2CB6 22 
0B2CB7 0B 
             2041** ;
             2042** ; POLY - Evaluate a polynomial.
             2043** ;     Inputs: X in HLH'L'C and also stored at (SP+2)
             2044** ;             Polynomial coefficients follow call.
             2045** ;    Outputs: Result in HLH'L'C
             2046** ;   Destroys: Everything except IY,SP,I
             2047** ; Routine terminates on finding a coefficient >=1.
             2048** ; Note: The last coefficient is EXECUTED on return
             2049** ;       so must contain only innocuous bytes!
             2050** ;
0B2CB8 DD    2051** POLY:			LD      IX, 3				; Advance the SP to the return address
0B2CB9 21 
0B2CBA 03 
0B2CBB 00 
0B2CBB 00   
0B2CBD DD    2052** ADD     IX, SP
0B2CBE 39 
0B2CBF DD    2053** EX      (SP), IX			; IX: Points to the inline list of coefficients
0B2CC0 E3 
             2054** ;
0B2CC1 CD    2055** CALL    DLOAD5          		; Load the first coefficient from (IX)
0B2CC2 97 
0B2CC3 29 
0B2CC4 0B 
0B2CC5 CD    2056** POLY1:			CALL    FMUL
0B2CC6 D6 
0B2CC7 22 
0B2CC8 0B 
0B2CC9 11    2057** LD      DE, 5				; Skip to the next coefficient
0B2CCA 05 
0B2CCB 00 
0B2CCC 00 
0B2CCD DD    2058** ADD     IX, DE
0B2CCE 19 
0B2CCF CD    2059** CALL    DLOAD5          		; Load the second coefficient from (IX)
0B2CD0 97 
0B2CD1 29 
0B2CD2 0B 
0B2CD3 DD    2060** EX      (SP), IX			; Restore the SP just in case we need to return
0B2CD4 E3 
0B2CD5 04    2061** INC     B
0B2CD6 05    2062** DEC     B               		; Test B for end byte (80h)
0B2CD7 FA    2063** JP      M,FADD				; Yes, so add and return
0B2CD8 C4 
0B2CD9 21 
0B2CDA 0B 
0B2CDB CD    2064** CALL    FADD				; No, so add
0B2CDC C4 
0B2CDD 21 
0B2CDE 0B 
0B2CDF CD    2065** CALL    DLOAD5_SPL			; Load X from SP
0B2CE0 A9 
0B2CE1 29 
0B2CE2 0B 
0B2CE3 DD    2066** EX      (SP), IX			; IX: Points to the inline list of coefficients
0B2CE4 E3 
0B2CE5 18    2067** JR      POLY1				; And loop
0B2CE6 DE 
             2068** ;
             2069** ; POWR10 - Calculate power of ten.
             2070** ;     Inputs: A=power of 10 required (A<128)
             2071** ;             A=binary exponent to be exceeded (A>=128)
             2072** ;    Outputs: DED'E'B = result
             2073** ;             A = actual power of ten returned
             2074** ;   Destroys: A,B,D,E,A',D',E',F,F'
             2075** ;
0B2CE7 3C    2076** POWR10:			INC     A
0B2CE8 08    2077** EX      AF,AF'
0B2CE9 E5    2078** PUSH    HL
0B2CEA D9    2079** EXX
0B2CEB E5    2080** PUSH    HL
0B2CEC D9    2081** EXX
0B2CED CD    2082** CALL    DONE
0B2CEE 03 
0B2CEF 26 
0B2CF0 0B 
0B2CF1 CD    2083** CALL    SWAP_FP
0B2CF2 9F 
0B2CF3 2B 
0B2CF4 0B 
0B2CF5 AF    2084** XOR     A
0B2CF6 08    2085** POWR11:			EX      AF,AF'
0B2CF7 3D    2086** DEC     A
0B2CF8 28    2087** JR      Z,POWR14        ;EXIT TYPE 1
0B2CF9 26 
0B2CFA F2    2088** JP      P,POWR13
0B2CFB 02 
0B2CFC 2D 
0B2CFD 0B 
0B2CFE B9    2089** CP      C
0B2CFF 38    2090** JR      C,POWR14        ;EXIT TYPE 2
0B2D00 1F 
0B2D01 3C    2091** INC     A
0B2D02 08    2092** POWR13:			EX      AF,AF'
0B2D03 3C    2093** INC     A
0B2D04 CB    2094** SET     7,H
0B2D05 FC 
0B2D06 CD    2095** CALL    X5
0B2D07 25 
0B2D08 2C 
0B2D09 0B 
0B2D0A 30    2096** JR      NC,POWR12
0B2D0B 06 
0B2D0C 08    2097** EX      AF,AF'
0B2D0D CD    2098** CALL    D2C
0B2D0E 5F 
0B2D0F 2C 
0B2D10 0B 
0B2D11 08    2099** EX      AF,AF'
0B2D12 08    2100** POWR12:			EX      AF,AF'
0B2D13 DC    2101** CALL    C,ADD1_FP          ;ROUND UP
0B2D14 87 
0B2D15 2B 
0B2D16 0B 
0B2D17 0C    2102** INC     C
0B2D18 FA    2103** JP      M,POWR11
0B2D19 F6 
0B2D1A 2C 
0B2D1B 0B 
0B2D1C C3    2104** JP      OFLOW
0B2D1D B6 
0B2D1E 2B 
0B2D1F 0B 
0B2D20 CD    2105** POWR14:			CALL    SWAP_FP
0B2D21 9F 
0B2D22 2B 
0B2D23 0B 
0B2D24 CB    2106** RES     7,D
0B2D25 BA 
0B2D26 D9    2107** EXX
0B2D27 E1    2108** POP     HL
0B2D28 D9    2109** EXX
0B2D29 E1    2110** POP     HL
0B2D2A 08    2111** EX      AF,AF'
0B2D2B C9    2112** RET
             2113** ;
             2114** ; DIVA, DIVB - DIVISION PRIMITIVE.
             2115** ;     Function: D'E'DE = H'L'HLD'E'DE / B'C'BC
             2116** ;               Remainder in H'L'HL
             2117** ;     Inputs: A = loop counter (normally -32)
             2118** ;     Destroys: A,D,E,H,L,D',E',H',L',F
             2119** ;
0B2D2C B7    2120** DIVA:			OR      A               ;CLEAR CARRY
             2121** DIV0:
0B2D2D 52    2122** SBC.S   HL,BC           ;DIVIDEND-DIVISOR
0B2D2E ED 
0B2D2F 42 
0B2D30 D9    2123** EXX
0B2D31 52    2124** SBC.S   HL,BC
0B2D32 ED 
0B2D33 42 
0B2D34 D9    2125** EXX
0B2D35 30    2126** JR      NC,DIV1
0B2D36 07 
0B2D37 52    2127** ADD.S   HL,BC           ;DIVIDEND+DIVISOR
0B2D38 09 
0B2D39 D9    2128** EXX
0B2D3A 52    2129** ADC.S   HL,BC
0B2D3B ED 
0B2D3C 4A 
0B2D3D D9    2130** EXX
0B2D3E 3F    2131** DIV1:			CCF
0B2D3F CB    2132** DIVC:			RL      E               ;SHIFT RESULT INTO DE
0B2D40 13 
0B2D41 CB    2133** RL      D
0B2D42 12 
0B2D43 D9    2134** EXX
0B2D44 CB    2135** RL      E
0B2D45 13 
0B2D46 CB    2136** RL      D
0B2D47 12 
0B2D48 D9    2137** EXX
0B2D49 3C    2138** INC     A
0B2D4A F0    2139** RET     P
             2140** DIVB:
0B2D4B 52    2141** ADC.S   HL,HL           ;DIVIDEND*2
0B2D4C ED 
0B2D4D 6A 
0B2D4E D9    2142** EXX
0B2D4F 52    2143** ADC.S   HL,HL
0B2D50 ED 
0B2D51 6A 
0B2D52 D9    2144** EXX
0B2D53 30    2145** JR      NC,DIV0
0B2D54 D8 
0B2D55 B7    2146** OR      A
0B2D56 52    2147** SBC.S   HL,BC           ;DIVIDEND-DIVISOR
0B2D57 ED 
0B2D58 42 
0B2D59 D9    2148** EXX
0B2D5A 52    2149** SBC.S   HL,BC
0B2D5B ED 
0B2D5C 42 
0B2D5D D9    2150** EXX
0B2D5E 37    2151** SCF
0B2D5F C3    2152** JP      DIVC
0B2D60 3F 
0B2D61 2D 
0B2D62 0B 
             2153** ;
             2154** ;MULA, MULB - MULTIPLICATION PRIMITIVE.
             2155** ;    Function: H'L'HLD'E'DE = B'C'BC * D'E'DE
             2156** ;    Inputs: A = loop counter (usually -32)
             2157** ;            H'L'HL = 0
             2158** ;    Destroys: D,E,H,L,D',E',H',L',A,F
             2159** ;
0B2D63 B7    2160** MULA:			OR      A               ;CLEAR CARRY
0B2D64 D9    2161** MUL0:			EXX
0B2D65 CB    2162** RR      D               ;MULTIPLIER/2
0B2D66 1A 
0B2D67 CB    2163** RR      E
0B2D68 1B 
0B2D69 D9    2164** EXX
0B2D6A CB    2165** RR      D
0B2D6B 1A 
0B2D6C CB    2166** RR      E
0B2D6D 1B 
0B2D6E 30    2167** JR      NC,MUL1
0B2D6F 07 
0B2D70 52    2168** ADD.S   HL,BC           ;ADD IN MULTIPLICAND
0B2D71 09 
0B2D72 D9    2169** EXX
0B2D73 52    2170** ADC.S   HL,BC
0B2D74 ED 
0B2D75 4A 
0B2D76 D9    2171** EXX
0B2D77 3C    2172** MUL1:			INC     A
0B2D78 F0    2173** RET     P
0B2D79 D9    2174** MULB:			EXX
0B2D7A CB    2175** RR      H               ;PRODUCT/2
0B2D7B 1C 
0B2D7C CB    2176** RR      L
0B2D7D 1D 
0B2D7E D9    2177** EXX
0B2D7F CB    2178** RR      H
0B2D80 1C 
0B2D81 CB    2179** RR      L
0B2D82 1D 
0B2D83 C3    2180** JP      MUL0
0B2D84 64 
0B2D85 2D 
0B2D86 0B 
             2181** ;
             2182** ; SQRA, SQRB - SQUARE ROOT PRIMITIVES
             2183** ;     Function: B'C'BC = SQR (D'E'DE)
             2184** ;     Inputs: A = loop counter (normally -31)
             2185** ;             B'C'BCH'L'HL initialised to 0
             2186** ;   Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',F
             2187** ;
             2188** SQR1:
0B2D87 52    2189** SBC.S   HL,BC
0B2D88 ED 
0B2D89 42 
0B2D8A D9    2190** EXX
0B2D8B 52    2191** SBC.S   HL,BC
0B2D8C ED 
0B2D8D 42 
0B2D8E D9    2192** EXX
0B2D8F 0C    2193** INC     C
0B2D90 30    2194** JR      NC,SQR2
0B2D91 09 
0B2D92 0D    2195** DEC     C
0B2D93 52    2196** ADD.S   HL,BC
0B2D94 09 
0B2D95 D9    2197** EXX
0B2D96 52    2198** ADC.S   HL,BC
0B2D97 ED 
0B2D98 4A 
0B2D99 D9    2199** EXX
0B2D9A 0D    2200** DEC     C
0B2D9B 3C    2201** SQR2:			INC     A
0B2D9C F0    2202** RET     P
0B2D9D CB    2203** SQRA:			SLA     C
0B2D9E 21 
0B2D9F CB    2204** RL      B
0B2DA0 10 
0B2DA1 D9    2205** EXX
0B2DA2 CB    2206** RL      C
0B2DA3 11 
0B2DA4 CB    2207** RL      B
0B2DA5 10 
0B2DA6 D9    2208** EXX
0B2DA7 0C    2209** INC     C
0B2DA8 CB    2210** SLA     E
0B2DA9 23 
0B2DAA CB    2211** RL      D
0B2DAB 12 
0B2DAC D9    2212** EXX
0B2DAD CB    2213** RL      E
0B2DAE 13 
0B2DAF CB    2214** RL      D
0B2DB0 12 
0B2DB1 D9    2215** EXX
0B2DB2 52    2216** ADC.S   HL,HL
0B2DB3 ED 
0B2DB4 6A 
0B2DB5 D9    2217** EXX
0B2DB6 52    2218** ADC.S   HL,HL
0B2DB7 ED 
0B2DB8 6A 
0B2DB9 D9    2219** EXX
0B2DBA CB    2220** SLA     E
0B2DBB 23 
0B2DBC CB    2221** RL      D
0B2DBD 12 
0B2DBE D9    2222** EXX
0B2DBF CB    2223** RL      E
0B2DC0 13 
0B2DC1 CB    2224** RL      D
0B2DC2 12 
0B2DC3 D9    2225** EXX
0B2DC4 52    2226** ADC.S   HL,HL
0B2DC5 ED 
0B2DC6 6A 
0B2DC7 D9    2227** EXX
0B2DC8 52    2228** ADC.S   HL,HL
0B2DC9 ED 
0B2DCA 6A 
0B2DCB D9    2229** EXX
0B2DCC D2    2230** JP      NC,SQR1
0B2DCD 87 
0B2DCE 2D 
0B2DCF 0B 
0B2DD0 B7    2231** SQR3:			OR      A
0B2DD1 52    2232** SBC.S   HL,BC
0B2DD2 ED 
0B2DD3 42 
0B2DD4 D9    2233** EXX
0B2DD5 52    2234** SBC.S   HL,BC
0B2DD6 ED 
0B2DD7 42 
0B2DD8 D9    2235** EXX
0B2DD9 0C    2236** INC     C
0B2DDA C3    2237** JP      SQR2
0B2DDB 9B 
0B2DDC 2D 
0B2DDD 0B 
             2238** ;
             2239** SQRB:
0B2DDE 52    2240** ADD.S   HL,HL
0B2DDF 29 
0B2DE0 D9    2241** EXX
0B2DE1 52    2242** ADC.S   HL,HL
0B2DE2 ED 
0B2DE3 6A 
0B2DE4 D9    2243** EXX
0B2DE5 38    2244** JR      C,SQR3
0B2DE6 E9 
0B2DE7 3C    2245** INC     A
0B2DE8 0C    2246** INC     C
0B2DE9 52    2247** SBC.S   HL,BC
0B2DEA ED 
0B2DEB 42 
0B2DEC D9    2248** EXX
0B2DED 52    2249** SBC.S   HL,BC
0B2DEE ED 
0B2DEF 42 
0B2DF0 D9    2250** EXX
0B2DF1 D0    2251** RET     NC
0B2DF2 52    2252** ADD.S   HL,BC
0B2DF3 09 
0B2DF4 D9    2253** EXX
0B2DF5 52    2254** ADC.S   HL,BC
0B2DF6 ED 
0B2DF7 4A 
0B2DF8 D9    2255** EXX
0B2DF9 0D    2256** DEC     C
0B2DFA C9    2257** RET
             2258** ;
0B2DFB DD    2259** DIGITQ:			LD      A,(IX)
0B2DFC 7E 
0B2DFD 00 
0B2DFE FE    2260** CP      '9'+1
0B2DFF 3A 
0B2E00 3F    2261** CCF
0B2E01 D8    2262** RET     C
0B2E02 FE    2263** CP      '0'
0B2E03 30 
0B2E04 C9    2264** RET
             2265** ;
0B2E05 DD    2266** SIGNQ:			LD      A,(IX)
0B2E06 7E 
0B2E07 00 
0B2E08 DD    2267** INC     IX
0B2E09 23 
0B2E0A FE    2268** CP      ' '
0B2E0B 20 
0B2E0C 28    2269** JR      Z,SIGNQ
0B2E0D F7 
0B2E0E FE    2270** CP      '+'
0B2E0F 2B 
0B2E10 C8    2271** RET     Z
0B2E11 FE    2272** CP      '-'
0B2E12 2D 
0B2E13 C8    2273** RET     Z
0B2E14 DD    2274** DEC     IX
0B2E15 2B 
0B2E16 C9    2275** RET
              0006* include "basic/gpio.asm"
             0001** ;
             0002** ; Title:	BBC Basic for AGON - GPIO functions
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	12/05/2023
             0006** ;
             0007** ; Modinfo:
             0008** 
             0009** ; INCLUDE	"macros.inc"
             0010** ; INCLUDE	"equs.inc"
             0011** 
             0012** ; .ASSUME	ADL = 1
             0013** 
             0014** ; SEGMENT CODE
             0015** 
             0016** ; XDEF	GPIOB_SETMODE
             0017** 
             0018** ; XREF	SWITCH_A
             0019** 
             0020** ;  A: Mode
             0021** ;  B: Pins
             0022** ;
0B2E17 CD    0023** GPIOB_SETMODE:		CALL	SWITCH_A
0B2E18 BC 
0B2E19 3D 
0B2E1A 0B 
0B2E1B 2F    0024** DW	GPIOB_M0	; Output
0B2E1C 2E 
0B2E1D 54    0025** DW	GPIOB_M1	; Input
0B2E1E 2E 
0B2E1F 74    0026** DW	GPIOB_M2	; Open Drain IO
0B2E20 2E 
0B2E21 94    0027** DW	GPIOB_M3	; Open Source IO
0B2E22 2E 
0B2E23 AF    0028** DW	GPIOB_M4	; Interrupt, Dual Edge
0B2E24 2E 
0B2E25 DB    0029** DW	GPIOB_M5	; Alt Function
0B2E26 2E 
0B2E27 F6    0030** DW	GPIOB_M6	; Interrupt, Active Low
0B2E28 2E 
0B2E29 1D    0031** DW	GPIOB_M7	; Interrupt, Active High
0B2E2A 2F 
0B2E2B 3F    0032** DW	GPIOB_M8	; Interrupt, Falling Edge
0B2E2C 2F 
0B2E2D 61    0033** DW	GPIOB_M9	; Interrupt, Rising Edge
0B2E2E 2F 
             0034** 
             0035** ; Output
             0036** ;
             0037** GPIOB_M0:		RES_GPIO PB_DDR,  B
0B2E2F C5   0001**M PUSH	BC
0B2E30 78   0002**M LD	A, val
0B2E31 2F   0003**M CPL
0B2E32 4F   0004**M LD	C, A
0B2E33 ED   0005**M IN0	A, (reg)
0B2E34 38 
0B2E35 9B 
0B2E36 A1   0006**M AND	C
0B2E37 ED   0007**M OUT0	(reg), A
0B2E38 39 
0B2E39 9B 
0B2E3A C1   0008**M POP	BC
             0038** RES_GPIO PB_ALT1, B
0B2E3B C5   0001**M PUSH	BC
0B2E3C 78   0002**M LD	A, val
0B2E3D 2F   0003**M CPL
0B2E3E 4F   0004**M LD	C, A
0B2E3F ED   0005**M IN0	A, (reg)
0B2E40 38 
0B2E41 9C 
0B2E42 A1   0006**M AND	C
0B2E43 ED   0007**M OUT0	(reg), A
0B2E44 39 
0B2E45 9C 
0B2E46 C1   0008**M POP	BC
             0039** RES_GPIO PB_ALT2, B
0B2E47 C5   0001**M PUSH	BC
0B2E48 78   0002**M LD	A, val
0B2E49 2F   0003**M CPL
0B2E4A 4F   0004**M LD	C, A
0B2E4B ED   0005**M IN0	A, (reg)
0B2E4C 38 
0B2E4D 9D 
0B2E4E A1   0006**M AND	C
0B2E4F ED   0007**M OUT0	(reg), A
0B2E50 39 
0B2E51 9D 
0B2E52 C1   0008**M POP	BC
0B2E53 C9    0040** RET
             0041** 
             0042** ; Input
             0043** ;
             0044** GPIOB_M1:		SET_GPIO PB_DDR,  B
0B2E54 ED   0001**M IN0	A, (reg)
0B2E55 38 
0B2E56 9B 
0B2E57 B0   0002**M OR	val
0B2E58 ED   0003**M OUT0	(reg), A
0B2E59 39 
0B2E5A 9B 
             0045** RES_GPIO PB_ALT1, B
0B2E5B C5   0001**M PUSH	BC
0B2E5C 78   0002**M LD	A, val
0B2E5D 2F   0003**M CPL
0B2E5E 4F   0004**M LD	C, A
0B2E5F ED   0005**M IN0	A, (reg)
0B2E60 38 
0B2E61 9C 
0B2E62 A1   0006**M AND	C
0B2E63 ED   0007**M OUT0	(reg), A
0B2E64 39 
0B2E65 9C 
0B2E66 C1   0008**M POP	BC
             0046** RES_GPIO PB_ALT2, B
0B2E67 C5   0001**M PUSH	BC
0B2E68 78   0002**M LD	A, val
0B2E69 2F   0003**M CPL
0B2E6A 4F   0004**M LD	C, A
0B2E6B ED   0005**M IN0	A, (reg)
0B2E6C 38 
0B2E6D 9D 
0B2E6E A1   0006**M AND	C
0B2E6F ED   0007**M OUT0	(reg), A
0B2E70 39 
0B2E71 9D 
0B2E72 C1   0008**M POP	BC
0B2E73 C9    0047** RET
             0048** 
             0049** ; Open Drain IO
             0050** ;
             0051** GPIOB_M2:		RES_GPIO PB_DDR,  B
0B2E74 C5   0001**M PUSH	BC
0B2E75 78   0002**M LD	A, val
0B2E76 2F   0003**M CPL
0B2E77 4F   0004**M LD	C, A
0B2E78 ED   0005**M IN0	A, (reg)
0B2E79 38 
0B2E7A 9B 
0B2E7B A1   0006**M AND	C
0B2E7C ED   0007**M OUT0	(reg), A
0B2E7D 39 
0B2E7E 9B 
0B2E7F C1   0008**M POP	BC
             0052** SET_GPIO PB_ALT1, B
0B2E80 ED   0001**M IN0	A, (reg)
0B2E81 38 
0B2E82 9C 
0B2E83 B0   0002**M OR	val
0B2E84 ED   0003**M OUT0	(reg), A
0B2E85 39 
0B2E86 9C 
             0053** RES_GPIO PB_ALT2, B
0B2E87 C5   0001**M PUSH	BC
0B2E88 78   0002**M LD	A, val
0B2E89 2F   0003**M CPL
0B2E8A 4F   0004**M LD	C, A
0B2E8B ED   0005**M IN0	A, (reg)
0B2E8C 38 
0B2E8D 9D 
0B2E8E A1   0006**M AND	C
0B2E8F ED   0007**M OUT0	(reg), A
0B2E90 39 
0B2E91 9D 
0B2E92 C1   0008**M POP	BC
0B2E93 C9    0054** RET
             0055** 
             0056** ; Open Source IO
             0057** ;
             0058** GPIOB_M3:		SET_GPIO PB_DDR,  B
0B2E94 ED   0001**M IN0	A, (reg)
0B2E95 38 
0B2E96 9B 
0B2E97 B0   0002**M OR	val
0B2E98 ED   0003**M OUT0	(reg), A
0B2E99 39 
0B2E9A 9B 
             0059** SET_GPIO PB_ALT1, B
0B2E9B ED   0001**M IN0	A, (reg)
0B2E9C 38 
0B2E9D 9C 
0B2E9E B0   0002**M OR	val
0B2E9F ED   0003**M OUT0	(reg), A
0B2EA0 39 
0B2EA1 9C 
             0060** RES_GPIO PB_ALT2, B
0B2EA2 C5   0001**M PUSH	BC
0B2EA3 78   0002**M LD	A, val
0B2EA4 2F   0003**M CPL
0B2EA5 4F   0004**M LD	C, A
0B2EA6 ED   0005**M IN0	A, (reg)
0B2EA7 38 
0B2EA8 9D 
0B2EA9 A1   0006**M AND	C
0B2EAA ED   0007**M OUT0	(reg), A
0B2EAB 39 
0B2EAC 9D 
0B2EAD C1   0008**M POP	BC
0B2EAE C9    0061** RET
             0062** 
             0063** ; Interrupt, Dual Edge
             0064** ;
             0065** GPIOB_M4:		SET_GPIO PB_DR,   B
0B2EAF ED   0001**M IN0	A, (reg)
0B2EB0 38 
0B2EB1 9A 
0B2EB2 B0   0002**M OR	val
0B2EB3 ED   0003**M OUT0	(reg), A
0B2EB4 39 
0B2EB5 9A 
             0066** RES_GPIO PB_DDR,  B
0B2EB6 C5   0001**M PUSH	BC
0B2EB7 78   0002**M LD	A, val
0B2EB8 2F   0003**M CPL
0B2EB9 4F   0004**M LD	C, A
0B2EBA ED   0005**M IN0	A, (reg)
0B2EBB 38 
0B2EBC 9B 
0B2EBD A1   0006**M AND	C
0B2EBE ED   0007**M OUT0	(reg), A
0B2EBF 39 
0B2EC0 9B 
0B2EC1 C1   0008**M POP	BC
             0067** RES_GPIO PB_ALT1, B
0B2EC2 C5   0001**M PUSH	BC
0B2EC3 78   0002**M LD	A, val
0B2EC4 2F   0003**M CPL
0B2EC5 4F   0004**M LD	C, A
0B2EC6 ED   0005**M IN0	A, (reg)
0B2EC7 38 
0B2EC8 9C 
0B2EC9 A1   0006**M AND	C
0B2ECA ED   0007**M OUT0	(reg), A
0B2ECB 39 
0B2ECC 9C 
0B2ECD C1   0008**M POP	BC
             0068** RES_GPIO PB_ALT2, B
0B2ECE C5   0001**M PUSH	BC
0B2ECF 78   0002**M LD	A, val
0B2ED0 2F   0003**M CPL
0B2ED1 4F   0004**M LD	C, A
0B2ED2 ED   0005**M IN0	A, (reg)
0B2ED3 38 
0B2ED4 9D 
0B2ED5 A1   0006**M AND	C
0B2ED6 ED   0007**M OUT0	(reg), A
0B2ED7 39 
0B2ED8 9D 
0B2ED9 C1   0008**M POP	BC
0B2EDA C9    0069** RET
             0070** 
             0071** ; Alt Function
             0072** ;
             0073** GPIOB_M5:		SET_GPIO PB_DDR,  B
0B2EDB ED   0001**M IN0	A, (reg)
0B2EDC 38 
0B2EDD 9B 
0B2EDE B0   0002**M OR	val
0B2EDF ED   0003**M OUT0	(reg), A
0B2EE0 39 
0B2EE1 9B 
             0074** RES_GPIO PB_ALT1, B
0B2EE2 C5   0001**M PUSH	BC
0B2EE3 78   0002**M LD	A, val
0B2EE4 2F   0003**M CPL
0B2EE5 4F   0004**M LD	C, A
0B2EE6 ED   0005**M IN0	A, (reg)
0B2EE7 38 
0B2EE8 9C 
0B2EE9 A1   0006**M AND	C
0B2EEA ED   0007**M OUT0	(reg), A
0B2EEB 39 
0B2EEC 9C 
0B2EED C1   0008**M POP	BC
             0075** SET_GPIO PB_ALT2, B
0B2EEE ED   0001**M IN0	A, (reg)
0B2EEF 38 
0B2EF0 9D 
0B2EF1 B0   0002**M OR	val
0B2EF2 ED   0003**M OUT0	(reg), A
0B2EF3 39 
0B2EF4 9D 
0B2EF5 C9    0076** RET
             0077** 
             0078** ; Interrupt, Active Low
             0079** ;
             0080** GPIOB_M6:		RES_GPIO PB_DR,   B
0B2EF6 C5   0001**M PUSH	BC
0B2EF7 78   0002**M LD	A, val
0B2EF8 2F   0003**M CPL
0B2EF9 4F   0004**M LD	C, A
0B2EFA ED   0005**M IN0	A, (reg)
0B2EFB 38 
0B2EFC 9A 
0B2EFD A1   0006**M AND	C
0B2EFE ED   0007**M OUT0	(reg), A
0B2EFF 39 
0B2F00 9A 
0B2F01 C1   0008**M POP	BC
             0081** RES_GPIO PB_DDR,  B
0B2F02 C5   0001**M PUSH	BC
0B2F03 78   0002**M LD	A, val
0B2F04 2F   0003**M CPL
0B2F05 4F   0004**M LD	C, A
0B2F06 ED   0005**M IN0	A, (reg)
0B2F07 38 
0B2F08 9B 
0B2F09 A1   0006**M AND	C
0B2F0A ED   0007**M OUT0	(reg), A
0B2F0B 39 
0B2F0C 9B 
0B2F0D C1   0008**M POP	BC
             0082** SET_GPIO PB_ALT1, B
0B2F0E ED   0001**M IN0	A, (reg)
0B2F0F 38 
0B2F10 9C 
0B2F11 B0   0002**M OR	val
0B2F12 ED   0003**M OUT0	(reg), A
0B2F13 39 
0B2F14 9C 
             0083** SET_GPIO PB_ALT2, B
0B2F15 ED   0001**M IN0	A, (reg)
0B2F16 38 
0B2F17 9D 
0B2F18 B0   0002**M OR	val
0B2F19 ED   0003**M OUT0	(reg), A
0B2F1A 39 
0B2F1B 9D 
0B2F1C C9    0084** RET
             0085** 
             0086** 
             0087** ; Interrupt, Active High
             0088** ;
             0089** GPIOB_M7:		SET_GPIO PB_DR,   B
0B2F1D ED   0001**M IN0	A, (reg)
0B2F1E 38 
0B2F1F 9A 
0B2F20 B0   0002**M OR	val
0B2F21 ED   0003**M OUT0	(reg), A
0B2F22 39 
0B2F23 9A 
             0090** RES_GPIO PB_DDR,  B
0B2F24 C5   0001**M PUSH	BC
0B2F25 78   0002**M LD	A, val
0B2F26 2F   0003**M CPL
0B2F27 4F   0004**M LD	C, A
0B2F28 ED   0005**M IN0	A, (reg)
0B2F29 38 
0B2F2A 9B 
0B2F2B A1   0006**M AND	C
0B2F2C ED   0007**M OUT0	(reg), A
0B2F2D 39 
0B2F2E 9B 
0B2F2F C1   0008**M POP	BC
             0091** SET_GPIO PB_ALT1, B
0B2F30 ED   0001**M IN0	A, (reg)
0B2F31 38 
0B2F32 9C 
0B2F33 B0   0002**M OR	val
0B2F34 ED   0003**M OUT0	(reg), A
0B2F35 39 
0B2F36 9C 
             0092** SET_GPIO PB_ALT2, B
0B2F37 ED   0001**M IN0	A, (reg)
0B2F38 38 
0B2F39 9D 
0B2F3A B0   0002**M OR	val
0B2F3B ED   0003**M OUT0	(reg), A
0B2F3C 39 
0B2F3D 9D 
0B2F3E C9    0093** RET
             0094** 
             0095** 
             0096** ; Interrupt, Falling Edge
             0097** ;
             0098** GPIOB_M8:		RES_GPIO PB_DR,   B
0B2F3F C5   0001**M PUSH	BC
0B2F40 78   0002**M LD	A, val
0B2F41 2F   0003**M CPL
0B2F42 4F   0004**M LD	C, A
0B2F43 ED   0005**M IN0	A, (reg)
0B2F44 38 
0B2F45 9A 
0B2F46 A1   0006**M AND	C
0B2F47 ED   0007**M OUT0	(reg), A
0B2F48 39 
0B2F49 9A 
0B2F4A C1   0008**M POP	BC
             0099** SET_GPIO PB_DDR,  B
0B2F4B ED   0001**M IN0	A, (reg)
0B2F4C 38 
0B2F4D 9B 
0B2F4E B0   0002**M OR	val
0B2F4F ED   0003**M OUT0	(reg), A
0B2F50 39 
0B2F51 9B 
             0100** SET_GPIO PB_ALT1, B
0B2F52 ED   0001**M IN0	A, (reg)
0B2F53 38 
0B2F54 9C 
0B2F55 B0   0002**M OR	val
0B2F56 ED   0003**M OUT0	(reg), A
0B2F57 39 
0B2F58 9C 
             0101** SET_GPIO PB_ALT2, B
0B2F59 ED   0001**M IN0	A, (reg)
0B2F5A 38 
0B2F5B 9D 
0B2F5C B0   0002**M OR	val
0B2F5D ED   0003**M OUT0	(reg), A
0B2F5E 39 
0B2F5F 9D 
0B2F60 C9    0102** RET
             0103** 
             0104** ; Interrupt, Rising Edge
             0105** ;
             0106** GPIOB_M9:		SET_GPIO PB_DR,   B
0B2F61 ED   0001**M IN0	A, (reg)
0B2F62 38 
0B2F63 9A 
0B2F64 B0   0002**M OR	val
0B2F65 ED   0003**M OUT0	(reg), A
0B2F66 39 
0B2F67 9A 
             0107** SET_GPIO PB_DDR,  B
0B2F68 ED   0001**M IN0	A, (reg)
0B2F69 38 
0B2F6A 9B 
0B2F6B B0   0002**M OR	val
0B2F6C ED   0003**M OUT0	(reg), A
0B2F6D 39 
0B2F6E 9B 
             0108** SET_GPIO PB_ALT1, B
0B2F6F ED   0001**M IN0	A, (reg)
0B2F70 38 
0B2F71 9C 
0B2F72 B0   0002**M OR	val
0B2F73 ED   0003**M OUT0	(reg), A
0B2F74 39 
0B2F75 9C 
             0109** SET_GPIO PB_ALT2, B
0B2F76 ED   0001**M IN0	A, (reg)
0B2F77 38 
0B2F78 9D 
0B2F79 B0   0002**M OR	val
0B2F7A ED   0003**M OUT0	(reg), A
0B2F7B 39 
0B2F7C 9D 
0B2F7D C9    0110** RET
              0007* include "basic/main.asm"
             0001** ;
             0002** ; Title:	BBC Basic Interpreter - Z80 version
             0003** ;		Command, Error and Lexical Analysis Module - "MAIN"
             0004** ; Author:	(C) Copyright  R.T.Russell  1984
             0005** ; Modified By:	Dean Belfield
             0006** ; Created:	12/05/2023
             0007** ; Last Updated:	26/11/2023
             0008** ;
             0009** ; Modinfo:
             0010** ; 07/05/1984:	Version 2.3
             0011** ; 01/03/1987:	Version 3.0
             0012** ; 03/05/2022:	Modified by Dean Belfield
             0013** ; 06/06/2023:	Modified to run in ADL mode
             0014** ; 26/06/2023:	Fixed binary and unary indirection
             0015** ; 17/08/2023:	Added binary constants
             0016** ; 15/11/2023:	Fixed bug in ONEDIT1 for OSLOAD_TXT, Startup message now includes Agon version
             0017** ; 26/11/2023:	Fixed bug in AUTOLOAD
             0018** 
             0019** ; .ASSUME	ADL = 1
             0020** 
             0021** ; INCLUDE	"equs.inc"
             0022** 
             0023** ; SEGMENT CODE
             0024** 
             0025** ; XDEF	_main
             0026** 
             0027** ; XDEF	COLD
             0028** ; XDEF	WARM
             0029** ; XDEF	CLOOP
             0030** ; XDEF	DELETE
             0031** ; XDEF	LIST_
             0032** ; XDEF	RENUM
             0033** ; XDEF	AUTO
             0034** ; XDEF	NEW
             0035** ; XDEF	OLD
             0036** ; XDEF	LOAD
             0037** ; XDEF	SAVE
             0038** ; XDEF	ERROR_
             0039** ; XDEF	EXTERR
             0040** ; XDEF	LOAD0
             0041** ; XDEF	CLEAR
             0042** ; XDEF	CRLF
             0043** ; XDEF	OUTCHR
             0044** ; XDEF	OUT_
             0045** ; XDEF	FINDL
             0046** ; XDEF	SETLIN
             0047** ; XDEF	PBCDL
             0048** ; XDEF	SAYLN
             0049** ; XDEF	PUTVAR
             0050** ; XDEF	GETVAR
             0051** ; XDEF	GETDEF
             0052** ; XDEF	CREATE
             0053** ; XDEF	RANGE
             0054** ; XDEF	LEXAN2
             0055** ; XDEF	REPORT
             0056** ; XDEF	TELL
             0057** ; XDEF	SPACE_
             0058** ; XDEF	KEYWDS
             0059** ; XDEF	KEYWDL
             0060** ; XDEF	ONEDIT
             0061** ; XDEF	ONEDIT1
             0062** ; XDEF	LISTIT
             0063** ; XDEF	CLEAN
             0064** 
             0065** ; XREF	LISTON
             0066** ; XREF	ERRTXT
             0067** ; XREF	OSINIT
             0068** ; XREF	HIMEM
             0069** ; XREF	PAGE_
             0070** ; XREF	CHAIN0
             0071** ; XREF	PROMPT
             0072** ; XREF	ERRTRP
             0073** ; XREF	ERRLIN
             0074** ; XREF	AUTONO
             0075** ; XREF	LINENO
             0076** ; XREF	INCREM
             0077** ; XREF	OSLINE
             0078** ; XREF	COUNT
             0079** ; XREF	NXT
             0080** ; XREF	BUFFER
             0081** ; XREF	XEQ
             0082** ; XREF	TOP
             0083** ; XREF	EXPRI
             0084** ; XREF	SEARCH
             0085** ; XREF	LTRAP
             0086** ; XREF	LOMEM
             0087** ; XREF	DECODE
             0088** ; XREF	EXPRS
             0089** ; XREF	OSSAVE
             0090** ; XREF	ERR
             0091** ; XREF	ERL
             0092** ; XREF	TRACEN
             0093** ; XREF	RESET
             0094** ; XREF	OSSHUT
             0095** ; XREF	OSLOAD
             0096** ; XREF	FREE
             0097** ; XREF	DYNVAR
             0098** ; XREF	FILL
             0099** ; XREF	OSWRCH
             0100** ; XREF	WIDTH
             0101** ; XREF	COMMA
             0102** ; XREF	MUL16
             0103** ; XREF	BRAKET
             0104** ; XREF	X4OR5
             0105** ; XREF	LOADN
             0106** ; XREF	SFIX
             0107** ; XREF	ITEMI
             0108** ; XREF	FNPTR
             0109** ; XREF	PROPTR
             0110** ; XREF	CHECK
             0111** ; XREF	TERMQ
             0112** ; XREF	OSWRCHCH
             0113** ; XREF	NEWIT
             0114** ; XREF	BAD
             0115** ; XREF	RAM_START
             0116** ; XREF	RAM_END
             0117** ; XREF	R0
             0118** ; XREF	STAR_VERSION
             0119** 
             0120** ; XREF	_end			; In init.asm
             0121** ;
             0122** ; A handful of common token IDs
             0123** ;
             0124** TERROR_MN:			EQU     85H
             0125** LINE_MN_:			EQU     86H
             0126** ELSE_MN_:			EQU     8BH
             0127** THEN_MN_:			EQU     8CH
             0128** LINO_MN:			EQU     8DH
             0129** FN:			EQU     A4H
             0130** TO_MN:			EQU     B8H
             0131** REN:			EQU     CCH
             0132** DATA_MN_:			EQU     DCH
             0133** DIM:			EQU     DEH
             0134** FOR:			EQU     E3H
             0135** GOSUB:			EQU     E4H
             0136** GOTO:			EQU     E5H
             0137** TIF:			EQU     E7H
             0138** LOCAL_:			EQU     EAH
             0139** NEXT:			EQU     EDH
             0140** ON_:			EQU     EEH
             0141** PROC:			EQU     F2H
             0142** REM:			EQU     F4H
             0143** REPEAT:			EQU     F5H
             0144** RESTOR:			EQU     F7H
             0145** TRACE:			EQU     FCH
             0146** UNTIL:			EQU     FDH
             0147** ;
             0148** ; This defines the block of tokens that are pseudo-variables.
             0149** ; There are two versions of each token, a GET and a SET
             0150** 
             0151** ; Name  : GET : SET
             0152** ; ------:-----:----
             0153** ; PTR   : 8Fh : CFh
             0154** ; PAGE  : 90h : D0h
             0155** ; TIME  : 91h : D1h
             0156** ; LOMEM : 92h : D2h
             0157** ; HIMEM : 93h : D3h
             0158** ;
             0159** ; Examples:
             0160** ;   LET A% = PAGE : REM This is the GET version
             0161** ;   PAGE = 40000  : REM This is the SET version
             0162** ;
             0163** TOKLO:			EQU     8FH			; This defines the block of tokens that are pseudo-variables
             0164** TOKHI:			EQU     93H			; PTR, PAGE, TIME, LOMEM, HIMEM
             0165** OFFSET:			EQU     CFH-TOKLO		; Offset to the parameterised SET versions
             0166** 
             0167** ; The main routine
             0168** ; IXU: argv - pointer to array of parameters
             0169** ;   C: argc - number of parameters
             0170** ; Returns:
             0171** ;  HL: Error code, or 0 if OK
             0172** ;
0B2F7E 21    0173** _main:			LD	HL, ACCS		; Clear the ACCS
0B2F7F 00 
0B2F80 53 
0B2F81 0B 
0B2F82 36    0174** LD	(HL), 0
0B2F83 00 
0B2F84 79    0175** LD	A, C
0B2F85 FE    0176** CP	2
0B2F86 02 
0B2F87 28    0177** JR	Z, AUTOLOAD		; 2 parameters = autoload
0B2F88 2D 
0B2F89 38    0178** JR	C, COLD			; 1 parameter = normal start
0B2F8A 3F 
0B2F8B CD    0179** CALL	STAR_VERSION
0B2F8C 00 
0B2F8D 40 
0B2F8E 0B 
0B2F8F CD    0180** CALL	TELL
0B2F90 58 
0B2F91 3D 
0B2F92 0B 
0B2F93 55    0181** DB	"Usage:\n\r"
0B2F94 73 
0B2F95 61 
0B2F96 67 
0B2F96 65   
0B2F97 3A 
0B2F98 0A 
0B2F99 0D 
0B2F9B 52    0182** DB	"RUN . <filename>\n\r", 0
0B2F9C 55 
0B2F9D 4E 
0B2F9E 20 
0B2F9E 2E   
0B2F9F 20 
0B2FA0 3C 
0B2FA1 66 
0B2FA1 69   
0B2FA2 6C 
0B2FA3 65 
0B2FA4 6E 
0B2FA4 61   
0B2FA5 6D 
0B2FA6 65 
0B2FA7 3E 
0B2FA7 0A   
0B2FA8 0D 
0B2FA9 00 
0B2FAE 21    0183** LD	HL, 0			; The error code
0B2FAF 00 
0B2FB0 00 
0B2FB1 00 
0B2FB2 C3    0184** JP	_end
0B2FB3 46 
0B2FB4 51 
0B2FB5 0B 
             0185** ;
0B2FB6 DD    0186** AUTOLOAD:		LD	HL, (IX+3)		; HLU: Address of filename
0B2FB7 27 
0B2FB8 03 
0B2FB9 11    0187** LD	DE, ACCS		;  DE: Destination address
0B2FBA 00 
0B2FBB 53 
0B2FBC 0B 
0B2FBD 7E    0188** AUTOLOAD_1:		LD	A, (HL)			; Fetch the filename byte
0B2FBE 12    0189** LD	(DE), A			;
0B2FBF 23    0190** INC	HL			; Increase the source pointer
0B2FC0 1C    0191** INC	E			; We only need to increase E as ACCS is on a page boundary
0B2FC1 28    0192** JR	Z, AUTOLOAD_2		; End if we hit the page boundary
0B2FC2 03 
0B2FC3 B7    0193** OR	A
0B2FC4 20    0194** JR	NZ, AUTOLOAD_1		; Loop until we hit a 0 byte
0B2FC5 F7 
0B2FC6 1D    0195** AUTOLOAD_2:		DEC	E
0B2FC7 3E    0196** LD	A, CR
0B2FC8 0D 
0B2FC9 12    0197** LD	(DE), A			; Replace the 0 byte with a CR for BBC BASIC
             0198** ;
0B2FCA E1    0199** COLD:			POP	HL			; Pop the return address to init off SPS
0B2FCB E5    0200** PUSH	HL 			; Stack it on SPL (*BYE will use this as the return address)
0B2FCC 21    0201** LD	HL, STAVAR		; Cold start
0B2FCD 00 
0B2FCE 55 
0B2FCF 0B 
0B2FD0 F9    0202** LD	SP, HL
0B2FD1 36    0203** LD	(HL), 10
0B2FD2 0A 
0B2FD3 23    0204** INC	HL
0B2FD4 36    0205** LD	(HL),9
0B2FD5 09 
0B2FD6 CD    0206** CALL    OSINIT			; Call the machine specific OS initialisation routines
0B2FD7 49 
0B2FD8 3F 
0B2FD9 0B 
0B2FDA ED    0207** LD      (HIMEM),DE		; This returns HIMEM (ramtop) in DE - store in the HIMEM sysvar
0B2FDB 53 
0B2FDC 20 
0B2FDD 56 
0B2FDD 0B   
0B2FDF 22    0208** LD      (PAGE_),HL		; And PAGE in HL (where BASIC program storage starts) - store in PAGE sysvar
0B2FE0 14 
0B2FE1 56 
0B2FE2 0B 
0B2FE3 3E    0209** LD      A,B7H           	; Set LISTO sysvar; the bottom nibble is LISTO (7), top nibble is OPT (B)
0B2FE4 B7 
0B2FE5 32    0210** LD      (LISTON),A
0B2FE6 40 
0B2FE7 56 
0B2FE8 0B 
0B2FE9 21    0211** LD      HL,NOTICE
0B2FEA 24 
0B2FEB 30 
0B2FEC 0B 
0B2FED 22    0212** LD      (ERRTXT),HL
0B2FEE 2F 
0B2FEF 56 
0B2FF0 0B 
0B2FF1 CD    0213** CALL    NEWIT			; From what I can determine, NEWIT always returns with Z flag set
0B2FF2 34 
0B2FF3 38 
0B2FF4 0B 
0B2FF5 3A    0214** LD	A,(ACCS)		; Check if there is a filename in ACCS
0B2FF6 00 
0B2FF7 53 
0B2FF8 0B 
0B2FF9 B7    0215** OR	A
0B2FFA C2    0216** JP	NZ,CHAIN0		; Yes, so load and run
0B2FFB 1B 
0B2FFC 0B 
0B2FFD 0B 
0B2FFE CD    0217** CALL	STAR_VERSION		;
0B2FFF 00 
0B3000 40 
0B3001 0B 
0B3002 CD    0218** CALL    TELL			; Output the welcome message
0B3003 58 
0B3004 3D 
0B3005 0B 
0B3006 42    0219** DB    	"BBC BASIC (Z80) Version 3.00\n\r"
0B3007 42 
0B3008 43 
0B3009 20 
0B3009 42   
0B300A 41 
0B300B 53 
0B300C 49 
0B300C 43   
0B300D 20 
0B300E 28 
0B300F 5A 
0B300F 38   
0B3010 30 
0B3011 29 
0B3012 20 
0B3012 56   
0B3013 65 
0B3014 72 
0B3015 73 
0B3015 69   
0B3016 6F 
0B3017 6E 
0B3018 20 
0B3018 33   
0B3019 2E 
0B301A 30 
0B301B 30 
0B301B 0A   
0B301C 0D 
0B3024 28    0220** NOTICE:			DB    	"(C) Copyright R.T.Russell 1987\n\r"
0B3025 43 
0B3026 29 
0B3027 20 
0B3027 43   
0B3028 6F 
0B3029 70 
0B302A 79 
0B302A 72   
0B302B 69 
0B302C 67 
0B302D 68 
0B302D 74   
0B302E 20 
0B302F 52 
0B3030 2E 
0B3030 54   
0B3031 2E 
0B3032 52 
0B3033 75 
0B3033 73   
0B3034 73 
0B3035 65 
0B3036 6C 
0B3036 6C   
0B3037 20 
0B3038 31 
0B3039 39 
0B3039 38   
0B303A 37 
0B303B 0A 
0B303C 0D 
0B3044 0A    0221** DB	"\n\r", 0
0B3045 0D 
0B3046 00 
             0222** ;
0B3047 F6    0223** WARM:			DB 	F6H			; Opcode for OR? Maybe to CCF (the following SCF will be the operand)
             0224** ;
             0225** ; This is the main entry point for BASIC
             0226** ;
0B3048 37    0227** CLOOP:			SCF				; See above - not sure why this is here!
0B3049 ED    0228** LD      SP,(HIMEM)
0B304A 7B 
0B304B 20 
0B304C 56 
0B304C 0B   
0B304E CD    0229** CALL    PROMPT          	; Prompt user
0B304F C2 
0B3050 3E 
0B3051 0B 
0B3052 21    0230** LD      HL,LISTON		; Pointer to the LISTO/OPT sysvar
0B3053 40 
0B3054 56 
0B3055 0B 
0B3056 7E    0231** LD      A,(HL)			; Fetch the value
0B3057 E6    0232** AND     0FH             	; Bottom nibble: LISTO
0B3058 0F 
0B3059 F6    0233** OR      B0H             	; Top nibble: Default to OPT (3) with ADL mode bit set to 1 for assembler
0B305A B0 
0B305B 77    0234** LD      (HL),A			; Store back in
0B305C ED    0235** SBC     HL,HL           	; HL: 0
0B305D 62 
0B305E 22    0236** LD      (ERRTRP),HL		; Clear ERRTRP sysvar
0B305F 2C 
0B3060 56 
0B3061 0B 
0B3062 22    0237** LD      (ERRLIN),HL		; Clear ERRLIN sysvar (ON ERROR)
0B3063 35 
0B3064 56 
0B3065 0B 
             0238** ;
0B3066 2A    0239** LD      HL,(AUTONO)		; Get the auto line number
0B3067 29 
0B3068 56 
0B3069 0B 
0B306A 22    0240** LD      (LINENO),HL		; Store in line number
0B306B 23 
0B306C 56 
0B306D 0B 
0B306E 7C    0241** LD      A,H			; If the auto line number is zero then
0B306F B5    0242** OR      L
0B3070 28    0243** JR      Z,NOAUTO		; We're not auto line numbering, so skip the next bit
0B3071 1E 
             0244** ;
             0245** ; This section handles auto line numbering
             0246** ;
0B3072 E5    0247** PUSH    HL			; Stack the line number
0B3073 CD    0248** CALL    PBCD           	 	; Output the line number
0B3074 C3 
0B3075 39 
0B3076 0B 
0B3077 E1    0249** POP     HL			; Pop the line number back off the stack
             0250** ;			LD      BC,(INCREM)		; Load BC with Increment - but INCREM is just a byte; C is the value
             0251** ;			LD      B,0			; So clear B
0B3078 01    0252** LD	BC, 0			; Load BC with Increment
0B3079 00 
0B307A 00 
0B307B 00 
0B307C 3A    0253** LD	A,(INCREM)
0B307D 41 
0B307E 56 
0B307F 0B 
0B3080 4F    0254** LD	C, A
0B3081 09    0255** ADD     HL,BC			; Add the increment to the line number
0B3082 DA    0256** JP      C,TOOBIG		; And error if we wrap
0B3083 ED 
0B3084 3B 
0B3085 0B 
0B3086 22    0257** LD      (AUTONO),HL		; Store the new auto line number
0B3087 29 
0B3088 56 
0B3089 0B 
0B308A 3E    0258** LD      A,' '			; Print a space
0B308B 20 
0B308C CD    0259** CALL    OUTCHR
0B308D 17 
0B308E 39 
0B308F 0B 
             0260** ;
             0261** ; This section invokes the line editor
             0262** ;
0B3090 21    0263** NOAUTO:			LD      HL,ACCS			; Storage for the line editor (256 bytes)
0B3091 00 
0B3092 53 
0B3093 0B 
0B3094 CD    0264** CALL    OSLINE          	; Call the line editor in MOS
0B3095 27 
0B3096 3E 
0B3097 0B 
0B3098 CD    0265** ONEDIT:			CALL	ONEDIT1			; Enter the line into memory
0B3099 A4 
0B309A 30 
0B309B 0B 
0B309C DC    0266** CALL    C,CLEAN			; Set TOP, write out &FFFF end of program marker
0B309D 07 
0B309E 38 
0B309F 0B 
0B30A0 C3    0267** JP      CLOOP			; Jump back to immediate mode
0B30A1 48 
0B30A2 30 
0B30A3 0B 
             0268** ;
             0269** ; This bit enters the line into memory
             0270** ; Also called from OSLOAD_TXT
             0271** ; Returns:
             0272** ; F: C if a new line has been entered (CLEAN will need to be called)
             0273** ;
0B30A4 AF    0274** ONEDIT1:		XOR     A			; Entry point after *EDIT
0B30A5 32    0275** LD      (COUNT),A
0B30A6 3D 
0B30A7 56 
0B30A8 0B 
0B30A9 FD    0276** LD      IY,ACCS
0B30AA 21 
0B30AB 00 
0B30AC 53 
0B30AC 0B   
0B30AE CD    0277** CALL    LINNUM			; HL: The line number from the input buffer
0B30AF C1 
0B30B0 3B 
0B30B1 0B 
0B30B2 CD    0278** CALL    NXT			; Skip spaces
0B30B3 38 
0B30B4 0A 
0B30B5 0B 
0B30B6 7C    0279** LD      A,H			; HL: The line number will be 0 for immediate mode or when auto line numbering is used
0B30B7 B5    0280** OR      L
0B30B8 28    0281** JR      Z,LNZERO        	; Skip if there is no line number in the input buffer
0B30B9 04 
0B30BA 22    0282** LD      (LINENO),HL		; Otherwise store it
0B30BB 23 
0B30BC 56 
0B30BD 0B 
             0283** ;
             0284** ; This bit does the lexical analysis and tokenisation
             0285** ;
0B30BE 0E    0286** LNZERO:			LD	C,1			; Left mode
0B30BF 01 
0B30C0 11    0287** LD      DE,BUFFER		; Buffer for tokenised BASIC
0B30C1 00 
0B30C2 54 
0B30C3 0B 
0B30C4 CD    0288** CALL    LEXAN2          	; Lexical analysis on the user input
0B30C5 67 
0B30C6 3C 
0B30C7 0B 
0B30C8 12    0289** LD      (DE),A          	; Terminator
0B30C9 AF    0290** XOR     A
             0291** ;			LD      B,A
             0292** ;			LD      C,E             	; BC: Line length
0B30CA 01    0293** LD	BC,0
0B30CB 00 
0B30CC 00 
0B30CD 00 
0B30CE 4B    0294** LD	C,E			; BC: Line length
0B30CF 13    0295** INC     DE
0B30D0 12    0296** LD      (DE),A          	; Zero next
0B30D1 2A    0297** LD      HL,(LINENO)		; Get the line number
0B30D2 23 
0B30D3 56 
0B30D4 0B 
0B30D5 7C    0298** LD      A,H			; Is it zero, i.e. a command with no line number?
0B30D6 B5    0299** OR      L
0B30D7 FD    0300** LD      IY,BUFFER       	; Yes, so we're in immediate mode
0B30D8 21 
0B30D9 00 
0B30DA 54 
0B30DA 0B   
0B30DC CA    0301** JP      Z,XEQ           	; Execute it
0B30DD 5E 
0B30DE 0B 
0B30DF 0B 
             0302** ;
             0303** ; This section stores the BASIC line in memory
             0304** ;
0B30E0 C5    0305** PUSH    BC
0B30E1 E5    0306** PUSH    HL
0B30E2 CD    0307** CALL    SETTOP          	; Set TOP sysvar
0B30E3 13 
0B30E4 38 
0B30E5 0B 
0B30E6 E1    0308** POP     HL
0B30E7 CD    0309** CALL    FINDL			; Find the address of the line
0B30E8 57 
0B30E9 39 
0B30EA 0B 
0B30EB CC    0310** CALL    Z,DEL			; Delete the existing line if found
0B30EC CA 
0B30ED 37 
0B30EE 0B 
0B30EF C1    0311** POP     BC
0B30F0 79    0312** LD      A,C			; Check for the line length being zero, i.e.
0B30F1 B7    0313** OR      A			; the user has just entered a line number in the command line
0B30F2 C8    0314** RET	Z 	         	; If so, then don't do anything else
0B30F3 C6    0315** ADD     A,4
0B30F4 04 
0B30F5 4F    0316** LD      C,A             	; Length inclusive
0B30F6 D5    0317** PUSH    DE              	; DE: Line number (fetched from the call to FINDL)
0B30F7 C5    0318** PUSH    BC              	; BC: Line length
0B30F8 EB    0319** EX      DE,HL			; DE: Address of the line in memory
0B30F9 2A    0320** LD      HL,(TOP)		; HL: TOP (the first free location after the end of the BASIC program)
0B30FA 17 
0B30FB 56 
0B30FC 0B 
0B30FD E5    0321** PUSH    HL			; Stack TOP (current TOP value)
0B30FE 09    0322** ADD     HL,BC			; Add the line length to HL, the new TOP value
0B30FF E5    0323** PUSH    HL			; Stack HL (new TOP value)
0B3100 24    0324** INC     H			; Add 256 to HL
0B3101 AF    0325** XOR     A
0B3102 ED    0326** SBC     HL,SP			; Check whether HL is in the same page as the current stack pointer
0B3103 72 
0B3104 E1    0327** POP     HL			; Pop HL (new TOP value)
0B3105 D2    0328** JP      NC,ERROR_        	; If HL is in the stack page, then error: "No room"
0B3106 28 
0B3107 37 
0B3108 0B 
0B3109 22    0329** LD      (TOP),HL		; Store new value of TOP
0B310A 17 
0B310B 56 
0B310C 0B 
0B310D E3    0330** EX      (SP),HL			; HL: TOP (current TOP value), top of stack now contains new TOP value
0B310E E5    0331** PUSH    HL			; PUSH current TOP value
0B310F 23    0332** INC     HL
0B3110 B7    0333** OR      A
0B3111 ED    0334** SBC     HL,DE			; DE: Address of the line in memory
0B3112 52 
0B3113 44    0335** LD      B,H             	; BC: Amount to move
0B3114 4D    0336** LD      C,L
0B3115 E1    0337** POP     HL			; HL: Destination (current TOP value)
0B3116 D1    0338** POP     DE			; DE: Source (new TOP value)
0B3117 28    0339** JR      Z,ATEND			; If current TOP and new TOP are the same, i.e. adding a line at the end, then skip...
0B3118 02 
0B3119 ED    0340** LDDR                    	; Otherwise, make space for the new line in the program
0B311A B8 
0B311B C1    0341** ATEND:			POP     BC              	; BC: Line length
0B311C D1    0342** POP     DE              	; DE: Line number
0B311D 23    0343** INC     HL			; HL: Destination address
0B311E 71    0344** LD      (HL),C          	; Store length
0B311F 23    0345** INC     HL
0B3120 73    0346** LD      (HL),E          	; Store line number
0B3121 23    0347** INC     HL
0B3122 72    0348** LD      (HL),D
0B3123 23    0349** INC     HL
0B3124 11    0350** LD      DE,BUFFER		; DE: Location of the new, tokenised line
0B3125 00 
0B3126 54 
0B3127 0B 
0B3128 EB    0351** EX      DE,HL			; HL: Location of the new, tokensied line, DE: Destination address in BASIC program
0B3129 0D    0352** DEC     C			; Subtract 3 from the number of bytes to copy to
0B312A 0D    0353** DEC     C			; compensate for the 3 bytes stored above (length and line number)
0B312B 0D    0354** DEC     C
0B312C ED    0355** LDIR                    	; Add the line to the BASIC program
0B312D B0 
0B312E 37    0356** SCF				; To flag we need to call CLEAN
0B312F C9    0357** RET
             0358** ;
             0359** ; List of tokens and keywords. If a keyword is followed by 0 then
             0360** ; it will only match with the keyword followed immediately by
             0361** ; a delimiter
             0362** ;
0B3130 80    0363** KEYWDS:			DB    80H, "AND"
0B3131 41 
0B3132 4E 
0B3133 44 
0B3134 94    0364** DB    94H, "ABS"
0B3135 41 
0B3136 42 
0B3137 53 
0B3138 95    0365** DB    95H, "ACS"
0B3139 41 
0B313A 43 
0B313B 53 
0B313C 96    0366** DB    96H, "ADVAL"
0B313D 41 
0B313E 44 
0B313F 56 
0B313F 41   
0B3140 4C 
0B3142 97    0367** DB    97H, "ASC"
0B3143 41 
0B3144 53 
0B3145 43 
0B3146 98    0368** DB    98H, "ASN"
0B3147 41 
0B3148 53 
0B3149 4E 
0B314A 99    0369** DB    99H, "ATN"
0B314B 41 
0B314C 54 
0B314D 4E 
0B314E C6    0370** DB    C6H, "AUTO"
0B314F 41 
0B3150 55 
0B3151 54 
0B3151 4F   
0B3153 9A    0371** DB    9AH, "BGET", 0
0B3154 42 
0B3155 47 
0B3156 45 
0B3156 54   
0B3157 00 
0B3159 D5    0372** DB    D5H, "BPUT", 0
0B315A 42 
0B315B 50 
0B315C 55 
0B315C 54   
0B315D 00 
0B315F FB    0373** DB    FBH, "COLOUR"
0B3160 43 
0B3161 4F 
0B3162 4C 
0B3162 4F   
0B3163 55 
0B3164 52 
0B3166 FB    0374** DB    FBH, "COLOR"
0B3167 43 
0B3168 4F 
0B3169 4C 
0B3169 4F   
0B316A 52 
0B316C D6    0375** DB    D6H, "CALL"
0B316D 43 
0B316E 41 
0B316F 4C 
0B316F 4C   
0B3171 D7    0376** DB    D7H, "CHAIN"
0B3172 43 
0B3173 48 
0B3174 41 
0B3174 49   
0B3175 4E 
0B3177 BD    0377** DB    BDH, "CHR$"
0B3178 43 
0B3179 48 
0B317A 52 
0B317A 24   
0B317C D8    0378** DB    D8H, "CLEAR", 0
0B317D 43 
0B317E 4C 
0B317F 45 
0B317F 41   
0B3180 52 
0B3181 00 
0B3183 D9    0379** DB    D9H, "CLOSE", 0
0B3184 43 
0B3185 4C 
0B3186 4F 
0B3186 53   
0B3187 45 
0B3188 00 
0B318A DA    0380** DB    DAH, "CLG", 0
0B318B 43 
0B318C 4C 
0B318D 47 
0B318D 00   
0B318F DB    0381** DB    DBH, "CLS", 0
0B3190 43 
0B3191 4C 
0B3192 53 
0B3192 00   
0B3194 9B    0382** DB    9BH, "COS"
0B3195 43 
0B3196 4F 
0B3197 53 
0B3198 9C    0383** DB    9CH, "COUNT", 0
0B3199 43 
0B319A 4F 
0B319B 55 
0B319B 4E   
0B319C 54 
0B319D 00 
0B319F DC    0384** DB    DCH, "DATA"
0B31A0 44 
0B31A1 41 
0B31A2 54 
0B31A2 41   
0B31A4 9D    0385** DB    9DH, "DEG"
0B31A5 44 
0B31A6 45 
0B31A7 47 
0B31A8 DD    0386** DB    DDH, "DEF"
0B31A9 44 
0B31AA 45 
0B31AB 46 
0B31AC C7    0387** DB    C7H, "DELETE"
0B31AD 44 
0B31AE 45 
0B31AF 4C 
0B31AF 45   
0B31B0 54 
0B31B1 45 
0B31B3 81    0388** DB    81H, "DIV"
0B31B4 44 
0B31B5 49 
0B31B6 56 
0B31B7 DE    0389** DB    DEH, "DIM"
0B31B8 44 
0B31B9 49 
0B31BA 4D 
0B31BB DF    0390** DB    DFH, "DRAW"
0B31BC 44 
0B31BD 52 
0B31BE 41 
0B31BE 57   
0B31C0 E1    0391** DB    E1H, "ENDPROC", 0
0B31C1 45 
0B31C2 4E 
0B31C3 44 
0B31C3 50   
0B31C4 52 
0B31C5 4F 
0B31C6 43 
0B31C6 00   
0B31C9 E0    0392** DB    E0H, "END", 0
0B31CA 45 
0B31CB 4E 
0B31CC 44 
0B31CC 00   
0B31CE E2    0393** DB    E2H, "ENVELOPE"
0B31CF 45 
0B31D0 4E 
0B31D1 56 
0B31D1 45   
0B31D2 4C 
0B31D3 4F 
0B31D4 50 
0B31D4 45   
0B31D7 8B    0394** DB    8BH, "ELSE"
0B31D8 45 
0B31D9 4C 
0B31DA 53 
0B31DA 45   
0B31DC A0    0395** DB    A0H, "EVAL"
0B31DD 45 
0B31DE 56 
0B31DF 41 
0B31DF 4C   
0B31E1 9E    0396** DB    9EH, "ERL", 0
0B31E2 45 
0B31E3 52 
0B31E4 4C 
0B31E4 00   
0B31E6 85    0397** DB    85H, "ERROR"
0B31E7 45 
0B31E8 52 
0B31E9 52 
0B31E9 4F   
0B31EA 52 
0B31EC C5    0398** DB    C5H, "EOF", 0
0B31ED 45 
0B31EE 4F 
0B31EF 46 
0B31EF 00   
0B31F1 82    0399** DB    82H, "EOR"
0B31F2 45 
0B31F3 4F 
0B31F4 52 
0B31F5 9F    0400** DB    9FH, "ERR", 0
0B31F6 45 
0B31F7 52 
0B31F8 52 
0B31F8 00   
0B31FA A1    0401** DB    A1H, "EXP"
0B31FB 45 
0B31FC 58 
0B31FD 50 
0B31FE A2    0402** DB    A2H, "EXT", 0
0B31FF 45 
0B3200 58 
0B3201 54 
0B3201 00   
0B3203 E3    0403** DB    E3H, "FOR"
0B3204 46 
0B3205 4F 
0B3206 52 
0B3207 A3    0404** DB    A3H, "FALSE", 0
0B3208 46 
0B3209 41 
0B320A 4C 
0B320A 53   
0B320B 45 
0B320C 00 
0B320E A4    0405** DB    A4H, "FN"
0B320F 46 
0B3210 4E 
0B3211 E5    0406** DB    E5H, "GOTO"
0B3212 47 
0B3213 4F 
0B3214 54 
0B3214 4F   
0B3216 BE    0407** DB    BEH, "GET$"
0B3217 47 
0B3218 45 
0B3219 54 
0B3219 24   
0B321B A5    0408** DB    A5H, "GET"
0B321C 47 
0B321D 45 
0B321E 54 
0B321F E4    0409** DB    E4H, "GOSUB"
0B3220 47 
0B3221 4F 
0B3222 53 
0B3222 55   
0B3223 42 
0B3225 E6    0410** DB    E6H, "GCOL"
0B3226 47 
0B3227 43 
0B3228 4F 
0B3228 4C   
0B322A 93    0411** DB    93H, "HIMEM", 0
0B322B 48 
0B322C 49 
0B322D 4D 
0B322D 45   
0B322E 4D 
0B322F 00 
0B3231 E8    0412** DB    E8H, "INPUT"
0B3232 49 
0B3233 4E 
0B3234 50 
0B3234 55   
0B3235 54 
0B3237 E7    0413** DB    E7H, "IF"
0B3238 49 
0B3239 46 
0B323A BF    0414** DB    BFH, "INKEY$"
0B323B 49 
0B323C 4E 
0B323D 4B 
0B323D 45   
0B323E 59 
0B323F 24 
0B3241 A6    0415** DB    A6H, "INKEY"
0B3242 49 
0B3243 4E 
0B3244 4B 
0B3244 45   
0B3245 59 
0B3247 A8    0416** DB    A8H, "INT"
0B3248 49 
0B3249 4E 
0B324A 54 
0B324B A7    0417** DB    A7H, "INSTR("
0B324C 49 
0B324D 4E 
0B324E 53 
0B324E 54   
0B324F 52 
0B3250 28 
0B3252 C9    0418** DB    C9H, "LIST"
0B3253 4C 
0B3254 49 
0B3255 53 
0B3255 54   
0B3257 86    0419** DB    86H, "LINE"
0B3258 4C 
0B3259 49 
0B325A 4E 
0B325A 45   
0B325C C8    0420** DB    C8H, "LOAD"
0B325D 4C 
0B325E 4F 
0B325F 41 
0B325F 44   
0B3261 92    0421** DB    92H, "LOMEM", 0
0B3262 4C 
0B3263 4F 
0B3264 4D 
0B3264 45   
0B3265 4D 
0B3266 00 
0B3268 EA    0422** DB    EAH, "LOCAL"
0B3269 4C 
0B326A 4F 
0B326B 43 
0B326B 41   
0B326C 4C 
0B326E C0    0423** DB    C0H, "LEFT$("
0B326F 4C 
0B3270 45 
0B3271 46 
0B3271 54   
0B3272 24 
0B3273 28 
0B3275 A9    0424** DB    A9H, "LEN"
0B3276 4C 
0B3277 45 
0B3278 4E 
0B3279 E9    0425** DB    E9H, "LET"
0B327A 4C 
0B327B 45 
0B327C 54 
0B327D AB    0426** DB    ABH, "LOG"
0B327E 4C 
0B327F 4F 
0B3280 47 
0B3281 AA    0427** DB    AAH, "LN"
0B3282 4C 
0B3283 4E 
0B3284 C1    0428** DB    C1H, "MID$("
0B3285 4D 
0B3286 49 
0B3287 44 
0B3287 24   
0B3288 28 
0B328A EB    0429** DB    EBH, "MODE"
0B328B 4D 
0B328C 4F 
0B328D 44 
0B328D 45   
0B328F 83    0430** DB    83H, "MOD"
0B3290 4D 
0B3291 4F 
0B3292 44 
0B3293 EC    0431** DB    ECH, "MOVE"
0B3294 4D 
0B3295 4F 
0B3296 56 
0B3296 45   
0B3298 ED    0432** DB    EDH, "NEXT"
0B3299 4E 
0B329A 45 
0B329B 58 
0B329B 54   
0B329D CA    0433** DB    CAH, "NEW", 0
0B329E 4E 
0B329F 45 
0B32A0 57 
0B32A0 00   
0B32A2 AC    0434** DB    ACH, "NOT"
0B32A3 4E 
0B32A4 4F 
0B32A5 54 
0B32A6 CB    0435** DB    CBH, "OLD", 0
0B32A7 4F 
0B32A8 4C 
0B32A9 44 
0B32A9 00   
0B32AB EE    0436** DB    EEH, "ON"
0B32AC 4F 
0B32AD 4E 
0B32AE 87    0437** DB    87H, "OFF"
0B32AF 4F 
0B32B0 46 
0B32B1 46 
0B32B2 84    0438** DB    84H, "OR"
0B32B3 4F 
0B32B4 52 
0B32B5 8E    0439** DB    8EH, "OPENIN"
0B32B6 4F 
0B32B7 50 
0B32B8 45 
0B32B8 4E   
0B32B9 49 
0B32BA 4E 
0B32BC AE    0440** DB    AEH, "OPENOUT"
0B32BD 4F 
0B32BE 50 
0B32BF 45 
0B32BF 4E   
0B32C0 4F 
0B32C1 55 
0B32C2 54 
0B32C4 AD    0441** DB    ADH, "OPENUP"
0B32C5 4F 
0B32C6 50 
0B32C7 45 
0B32C7 4E   
0B32C8 55 
0B32C9 50 
0B32CB FF    0442** DB    FFH, "OSCLI"
0B32CC 4F 
0B32CD 53 
0B32CE 43 
0B32CE 4C   
0B32CF 49 
0B32D1 F1    0443** DB    F1H, "PRINT"
0B32D2 50 
0B32D3 52 
0B32D4 49 
0B32D4 4E   
0B32D5 54 
0B32D7 90    0444** DB    90H, "PAGE", 0
0B32D8 50 
0B32D9 41 
0B32DA 47 
0B32DA 45   
0B32DB 00 
0B32DD 8F    0445** DB    8FH, "PTR", 0
0B32DE 50 
0B32DF 54 
0B32E0 52 
0B32E0 00   
0B32E2 AF    0446** DB    AFH, "PI", 0
0B32E3 50 
0B32E4 49 
0B32E5 00 
0B32E6 F0    0447** DB    F0H, "PLOT"
0B32E7 50 
0B32E8 4C 
0B32E9 4F 
0B32E9 54   
0B32EB B0    0448** DB    B0H, "POINT("
0B32EC 50 
0B32ED 4F 
0B32EE 49 
0B32EE 4E   
0B32EF 54 
0B32F0 28 
0B32F2 F2    0449** DB    F2H, "PROC"
0B32F3 50 
0B32F4 52 
0B32F5 4F 
0B32F5 43   
0B32F7 B1    0450** DB    B1H, "POS", 0
0B32F8 50 
0B32F9 4F 
0B32FA 53 
0B32FA 00   
0B32FC CE    0451** DB    CEH, "PUT"
0B32FD 50 
0B32FE 55 
0B32FF 54 
0B3300 F8    0452** DB    F8H, "RETURN", 0
0B3301 52 
0B3302 45 
0B3303 54 
0B3303 55   
0B3304 52 
0B3305 4E 
0B3306 00 
0B3308 F5    0453** DB    F5H, "REPEAT"
0B3309 52 
0B330A 45 
0B330B 50 
0B330B 45   
0B330C 41 
0B330D 54 
0B330F F6    0454** DB    F6H, "REPORT", 0
0B3310 52 
0B3311 45 
0B3312 50 
0B3312 4F   
0B3313 52 
0B3314 54 
0B3315 00 
0B3317 F3    0455** DB    F3H, "READ"
0B3318 52 
0B3319 45 
0B331A 41 
0B331A 44   
0B331C F4    0456** DB    F4H, "REM"
0B331D 52 
0B331E 45 
0B331F 4D 
0B3320 F9    0457** DB    F9H, "RUN", 0
0B3321 52 
0B3322 55 
0B3323 4E 
0B3323 00   
0B3325 B2    0458** DB    B2H, "RAD"
0B3326 52 
0B3327 41 
0B3328 44 
0B3329 F7    0459** DB    F7H, "RESTORE"
0B332A 52 
0B332B 45 
0B332C 53 
0B332C 54   
0B332D 4F 
0B332E 52 
0B332F 45 
0B3331 C2    0460** DB    C2H, "RIGHT$("
0B3332 52 
0B3333 49 
0B3334 47 
0B3334 48   
0B3335 54 
0B3336 24 
0B3337 28 
0B3339 B3    0461** DB    B3H, "RND", 0
0B333A 52 
0B333B 4E 
0B333C 44 
0B333C 00   
0B333E CC    0462** DB    CCH, "RENUMBER"
0B333F 52 
0B3340 45 
0B3341 4E 
0B3341 55   
0B3342 4D 
0B3343 42 
0B3344 45 
0B3344 52   
0B3347 88    0463** DB    88H, "STEP"
0B3348 53 
0B3349 54 
0B334A 45 
0B334A 50   
0B334C CD    0464** DB    CDH, "SAVE"
0B334D 53 
0B334E 41 
0B334F 56 
0B334F 45   
0B3351 B4    0465** DB    B4H, "SGN"
0B3352 53 
0B3353 47 
0B3354 4E 
0B3355 B5    0466** DB    B5H, "SIN"
0B3356 53 
0B3357 49 
0B3358 4E 
0B3359 B6    0467** DB    B6H, "SQR"
0B335A 53 
0B335B 51 
0B335C 52 
0B335D 89    0468** DB    89H, "SPC"
0B335E 53 
0B335F 50 
0B3360 43 
0B3361 C3    0469** DB    C3H, "STR$"
0B3362 53 
0B3363 54 
0B3364 52 
0B3364 24   
0B3366 C4    0470** DB    C4H, "STRING$("
0B3367 53 
0B3368 54 
0B3369 52 
0B3369 49   
0B336A 4E 
0B336B 47 
0B336C 24 
0B336C 28   
0B336F D4    0471** DB    D4H, "SOUND"
0B3370 53 
0B3371 4F 
0B3372 55 
0B3372 4E   
0B3373 44 
0B3375 FA    0472** DB    FAH, "STOP", 0
0B3376 53 
0B3377 54 
0B3378 4F 
0B3378 50   
0B3379 00 
0B337B B7    0473** DB    B7H, "TAN"
0B337C 54 
0B337D 41 
0B337E 4E 
0B337F 8C    0474** DB    8CH, "THEN"
0B3380 54 
0B3381 48 
0B3382 45 
0B3382 4E   
0B3384 B8    0475** DB    B8H, "TO"
0B3385 54 
0B3386 4F 
0B3387 8A    0476** DB    8AH, "TAB("
0B3388 54 
0B3389 41 
0B338A 42 
0B338A 28   
0B338C FC    0477** DB    FCH, "TRACE"
0B338D 54 
0B338E 52 
0B338F 41 
0B338F 43   
0B3390 45 
0B3392 91    0478** DB    91H, "TIME", 0
0B3393 54 
0B3394 49 
0B3395 4D 
0B3395 45   
0B3396 00 
0B3398 B9    0479** DB    B9H, "TRUE", 0
0B3399 54 
0B339A 52 
0B339B 55 
0B339B 45   
0B339C 00 
0B339E FD    0480** DB    FDH, "UNTIL"
0B339F 55 
0B33A0 4E 
0B33A1 54 
0B33A1 49   
0B33A2 4C 
0B33A4 BA    0481** DB    BAH, "USR"
0B33A5 55 
0B33A6 53 
0B33A7 52 
0B33A8 EF    0482** DB    EFH, "VDU"
0B33A9 56 
0B33AA 44 
0B33AB 55 
0B33AC BB    0483** DB    BBH, "VAL"
0B33AD 56 
0B33AE 41 
0B33AF 4C 
0B33B0 BC    0484** DB    BCH, "VPOS", 0
0B33B1 56 
0B33B2 50 
0B33B3 4F 
0B33B3 53   
0B33B4 00 
0B33B6 FE    0485** DB    FEH, "WIDTH"
0B33B7 57 
0B33B8 49 
0B33B9 44 
0B33B9 54   
0B33BA 48 
0B33BC D3    0486** DB    D3H, "HIMEM"
0B33BD 48 
0B33BE 49 
0B33BF 4D 
0B33BF 45   
0B33C0 4D 
0B33C2 D2    0487** DB    D2H, "LOMEM"
0B33C3 4C 
0B33C4 4F 
0B33C5 4D 
0B33C5 45   
0B33C6 4D 
0B33C8 D0    0488** DB    D0H, "PAGE"
0B33C9 50 
0B33CA 41 
0B33CB 47 
0B33CB 45   
0B33CD CF    0489** DB    CFH, "PTR"
0B33CE 50 
0B33CF 54 
0B33D0 52 
0B33D1 D1    0490** DB    D1H, "TIME"
0B33D2 54 
0B33D3 49 
0B33D4 4D 
0B33D4 45   
             0491** ;
             0492** ; These are indexed from the ERRWDS table
             0493** ;
0B33D6 01    0494** DB    01H, "Missing "
0B33D7 4D 
0B33D8 69 
0B33D9 73 
0B33D9 73   
0B33DA 69 
0B33DB 6E 
0B33DC 67 
0B33DC 20   
0B33DF 02    0495** DB    02H, "No such "
0B33E0 4E 
0B33E1 6F 
0B33E2 20 
0B33E2 73   
0B33E3 75 
0B33E4 63 
0B33E5 68 
0B33E5 20   
0B33E8 03    0496** DB    03H, "Bad "
0B33E9 42 
0B33EA 61 
0B33EB 64 
0B33EB 20   
0B33ED 04    0497** DB    04H, " range"
0B33EE 20 
0B33EF 72 
0B33F0 61 
0B33F0 6E   
0B33F1 67 
0B33F2 65 
0B33F4 05    0498** DB    05H, "variable"
0B33F5 76 
0B33F6 61 
0B33F7 72 
0B33F7 69   
0B33F8 61 
0B33F9 62 
0B33FA 6C 
0B33FA 65   
0B33FD 06    0499** DB    06H, "Out of"
0B33FE 4F 
0B33FF 75 
0B3400 74 
0B3400 20   
0B3401 6F 
0B3402 66 
0B3404 07    0500** DB    07H, "No "
0B3405 4E 
0B3406 6F 
0B3407 20 
0B3408 08    0501** DB    08H, " space"
0B3409 20 
0B340A 73 
0B340B 70 
0B340B 61   
0B340C 63 
0B340D 65 
             0502** 
             0503** KEYWDL:			EQU     $-KEYWDS
0B340F FF    0504** DW    -1
0B3410 FF 
             0505** ;
             0506** ; Error messages
             0507** ;
0B3411 07    0508** ERRWDS:			DB    7, "room", 0		;  0: No room
0B3412 72 
0B3413 6F 
0B3414 6F 
0B3414 6D   
0B3415 00 
0B3417 06    0509** DB    6, 4, 0			;  1: Out of range
0B3418 04 
0B3419 00 
0B341A 00    0510** DB    0				;  2: *
0B341B 00    0511** DB    0				;  3: *
0B341C 4D    0512** DB    "Mistake", 0		;  4: Mistake
0B341D 69 
0B341E 73 
0B341F 74 
0B341F 61   
0B3420 6B 
0B3421 65 
0B3422 00 
0B3424 01    0513** DB    1, ",", 0			;  5: Missing ,
0B3425 2C 
0B3426 00 
0B3427 54    0514** DB    "Type mismatch", 0	;  6: Type mismatch
0B3428 79 
0B3429 70 
0B342A 65 
0B342A 20   
0B342B 6D 
0B342C 69 
0B342D 73 
0B342D 6D   
0B342E 61 
0B342F 74 
0B3430 63 
0B3430 68   
0B3431 00 
0B3435 07    0515** DB    7, FN, 0			;  7: No FN
0B3436 A4 
0B3437 00 
0B3438 00    0516** DB    0				;  8: *
0B3439 01    0517** DB    1, 34, 0			;  9: Missing "
0B343A 22 
0B343B 00 
0B343C 03    0518** DB    3, DIM, 0			; 10: Bad DIM
0B343D DE 
0B343E 00 
0B343F DE    0519** DB    DIM, 8, 0			; 11: DIM space
0B3440 08 
0B3441 00 
0B3442 4E    0520** DB    "Not ", LOCAL_, 0		; 12: Not LOCAL
0B3443 6F 
0B3444 74 
0B3445 20 
0B3445 EA   
0B3446 00 
0B3448 07    0521** DB    7, PROC, 0		; 13: No PROC
0B3449 F2 
0B344A 00 
0B344B 41    0522** DB    "Array", 0		; 14: Array
0B344C 72 
0B344D 72 
0B344E 61 
0B344E 79   
0B344F 00 
0B3451 53    0523** DB    "Subscript", 0		; 15: Subscript
0B3452 75 
0B3453 62 
0B3454 73 
0B3454 63   
0B3455 72 
0B3456 69 
0B3457 70 
0B3457 74   
0B3458 00 
0B345B 53    0524** DB    "Syntax error", 0		; 16: Syntax error
0B345C 79 
0B345D 6E 
0B345E 74 
0B345E 61   
0B345F 78 
0B3460 20 
0B3461 65 
0B3461 72   
0B3462 72 
0B3463 6F 
0B3464 72 
0B3464 00   
0B3468 45    0525** DB    "Escape", 0		; 17: Escape
0B3469 73 
0B346A 63 
0B346B 61 
0B346B 70   
0B346C 65 
0B346D 00 
0B346F 44    0526** DB    "Division by zero", 0	; 18: Division by zero
0B3470 69 
0B3471 76 
0B3472 69 
0B3472 73   
0B3473 69 
0B3474 6F 
0B3475 6E 
0B3475 20   
0B3476 62 
0B3477 79 
0B3478 20 
0B3478 7A   
0B3479 65 
0B347A 72 
0B347B 6F 
0B347B 00   
0B3480 53    0527** DB    "String too long", 0	; 19: String too long
0B3481 74 
0B3482 72 
0B3483 69 
0B3483 6E   
0B3484 67 
0B3485 20 
0B3486 74 
0B3486 6F   
0B3487 6F 
0B3488 20 
0B3489 6C 
0B3489 6F   
0B348A 6E 
0B348B 67 
0B348C 00 
0B3490 54    0528** DB    "Too big", 0		; 20: Too big
0B3491 6F 
0B3492 6F 
0B3493 20 
0B3493 62   
0B3494 69 
0B3495 67 
0B3496 00 
0B3498 2D    0529** DB    "-ve root", 0		; 21: -ve root
0B3499 76 
0B349A 65 
0B349B 20 
0B349B 72   
0B349C 6F 
0B349D 6F 
0B349E 74 
0B349E 00   
0B34A1 4C    0530** DB    "Log", 4, 0		; 22: Log range
0B34A2 6F 
0B34A3 67 
0B34A4 04 
0B34A4 00   
0B34A6 41    0531** DB    "Accuracy lost", 0	; 23: Accuracy lost
0B34A7 63 
0B34A8 63 
0B34A9 75 
0B34A9 72   
0B34AA 61 
0B34AB 63 
0B34AC 79 
0B34AC 20   
0B34AD 6C 
0B34AE 6F 
0B34AF 73 
0B34AF 74   
0B34B0 00 
0B34B4 45    0532** DB    "Exp", 4, 0		; 24: Exp range
0B34B5 78 
0B34B6 70 
0B34B7 04 
0B34B7 00   
0B34B9 00    0533** DB    0				; 25: *
0B34BA 02    0534** DB    2, 5, 0			; 26: No such variable
0B34BB 05 
0B34BC 00 
0B34BD 01    0535** DB    1, ")", 0			; 27: Missing )
0B34BE 29 
0B34BF 00 
0B34C0 03    0536** DB    3, "HEX", 0		; 28: Bad HEX
0B34C1 48 
0B34C2 45 
0B34C3 58 
0B34C3 00   
0B34C5 02    0537** DB    2, FN, "/", PROC, 0	; 29: No such FN/PROC
0B34C6 A4 
0B34C7 2F 
0B34C8 F2 
0B34C8 00   
0B34CA 03    0538** DB    3, "call", 0		; 30: Bad call
0B34CB 63 
0B34CC 61 
0B34CD 6C 
0B34CD 6C   
0B34CE 00 
0B34D0 41    0539** DB    "Arguments", 0		; 31: Arguments
0B34D1 72 
0B34D2 67 
0B34D3 75 
0B34D3 6D   
0B34D4 65 
0B34D5 6E 
0B34D6 74 
0B34D6 73   
0B34D7 00 
0B34DA 07    0540** DB    7, FOR, 0			; 32: No FOR
0B34DB E3 
0B34DC 00 
0B34DD 43    0541** DB    "Can't match ", FOR, 0	; 33: Can't match FOR
0B34DE 61 
0B34DF 6E 
0B34E0 27 
0B34E0 74   
0B34E1 20 
0B34E2 6D 
0B34E3 61 
0B34E3 74   
0B34E4 63 
0B34E5 68 
0B34E6 20 
0B34E6 E3   
0B34E7 00 
0B34EB E3    0542** DB    FOR, " ", 5, 0		; 34: FOR variable
0B34EC 20 
0B34ED 05 
0B34EE 00 
0B34EF 00    0543** DB    0				; 35: *
0B34F0 07    0544** DB    7, TO_MN, 0			; 36: No TO
0B34F1 B8 
0B34F2 00 
0B34F3 00    0545** DB    0				; 37: *
0B34F4 07    0546** DB    7, GOSUB, 0		; 38: No GOSUB
0B34F5 E4 
0B34F6 00 
0B34F7 EE    0547** DB    ON_, " syntax", 0		; 39: ON syntax
0B34F8 20 
0B34F9 73 
0B34FA 79 
0B34FA 6E   
0B34FB 74 
0B34FC 61 
0B34FD 78 
0B34FD 00   
0B3500 EE    0548** DB    ON_, 4, 0			; 40: ON range
0B3501 04 
0B3502 00 
0B3503 02    0549** DB    2, "line", 0		; 41: No such line
0B3504 6C 
0B3505 69 
0B3506 6E 
0B3506 65   
0B3507 00 
0B3509 06    0550** DB    6, " ", DATA_MN_, 0		; 42: Out of DATA
0B350A 20 
0B350B DC 
0B350C 00 
0B350D 07    0551** DB    7, REPEAT, 0		; 43: No REPEAT
0B350E F5 
0B350F 00 
0B3510 00    0552** DB    0				; 44: *
0B3511 01    0553** DB    1, "#", 0			; 45: Missing #
0B3512 23 
0B3513 00 
             0554** ;
             0555** ; COMMANDS:
             0556** ;
             0557** ; DELETE line,line
             0558** ;
0B3514 CD    0559** DELETE:			CALL    SETTOP          	; Set TOP sysvar (first free byte at end of BASIC program)
0B3515 13 
0B3516 38 
0B3517 0B 
0B3518 CD    0560** CALL    DLPAIR			; Get the line number pair - HL: BASIC program address, BC: second number (or 0 if missing)
0B3519 1B 
0B351A 3C 
0B351B 0B 
0B351C 7E    0561** DELET1:			LD      A,(HL)			; Check whether it's the last line
0B351D B7    0562** OR      A
0B351E CA    0563** JP      Z,WARMNC		; Yes, so do nothing
0B351F A5 
0B3520 35 
0B3521 0B 
0B3522 23    0564** INC     HL			; Skip the line length byte
0B3523 11    0565** LD	DE, 0			; Clear DE
0B3524 00 
0B3525 00 
0B3526 00 
0B3527 5E    0566** LD      E,(HL)			; Fetch the line number in DE
0B3528 23    0567** INC     HL
0B3529 56    0568** LD      D,(HL)
0B352A 7A    0569** LD      A,D			; If the line number is zero then
0B352B B3    0570** OR      E
0B352C 28    0571** JR      Z,CLOOP1        	; Do nothing
0B352D 1D 
0B352E 2B    0572** DEC     HL			; Decrement BASIC program pointer back to length
0B352F 2B    0573** DEC     HL
0B3530 EB    0574** EX      DE,HL			; Check if we've gone past the terminating line
0B3531 37    0575** SCF
0B3532 ED    0576** SBC     HL,BC
0B3533 42 
0B3534 EB    0577** EX      DE,HL
0B3535 30    0578** JR      NC,WARMNC		; Yes, so exit back to BASIC prompt
0B3536 6E 
0B3537 C5    0579** PUSH    BC
0B3538 CD    0580** CALL    DEL			; Delete the line pointed to by HL
0B3539 CA 
0B353A 37 
0B353B 0B 
0B353C C1    0581** POP     BC
0B353D 18    0582** JR      DELET1			; And loop round to the next line
0B353E DD 
             0583** ;
             0584** ; LISTO expr
             0585** ;
0B353F FD    0586** LISTO:			INC     IY              	; Skip "O" byte
0B3540 23 
0B3541 CD    0587** CALL    EXPRI			; Get expr
0B3542 D2 
0B3543 02 
0B3544 0B 
0B3545 D9    0588** EXX
0B3546 7D    0589** LD      A,L
0B3547 32    0590** LD      (LISTON),A		; Store in LISTON sysvar
0B3548 40 
0B3549 56 
0B354A 0B 
0B354B C3    0591** CLOOP1:			JP      CLOOP
0B354C 48 
0B354D 30 
0B354E 0B 
             0592** ;
             0593** ; LIST
             0594** ; LIST line
             0595** ; LIST line,line [IF string]
             0596** ; LIST ,line
             0597** ; LIST line,
             0598** ;
0B354F FE    0599** LIST_:			CP      'O'			; Check for O (LISTO)
0B3550 4F 
0B3551 28    0600** JR      Z,LISTO			; and jump to LISTO if zero
0B3552 EC 
0B3553 CD    0601** CALL    DLPAIR			; Get the line number pair - HL: BASIC program address, BC: second number (or 0 if missing)
0B3554 1B 
0B3555 3C 
0B3556 0B 
0B3557 CD    0602** CALL    NXT			; Skip space
0B3558 38 
0B3559 0A 
0B355A 0B 
0B355B FE    0603** CP      TIF             	; Check for IF clause (token IF)
0B355C E7 
0B355D 3E    0604** LD      A,0             	; Initialise the IF clause string length
0B355E 00 
0B355F 20    0605** JR      NZ,LISTB		; If there is no IF clause, skip the next bit
0B3560 17 
             0606** ;
0B3561 FD    0607** INC     IY              	; Skip the IF token
0B3562 23 
0B3563 CD    0608** CALL    NXT             	; And skip any spaces
0B3564 38 
0B3565 0A 
0B3566 0B 
0B3567 EB    0609** EX      DE,HL			; DE: Address in memory
0B3568 FD    0610** PUSH    IY			; LD IY, HL
0B3569 E5 
0B356A E1    0611** POP     HL              	; HL is now the address of the tokenised line
0B356B 3E    0612** LD      A,CR
0B356C 0D 
0B356D C5    0613** PUSH    BC			; Stack the second line number arg
0B356E 01    0614** LD      BC,256
0B356F 00 
0B3570 01 
0B3571 00 
0B3572 ED    0615** CPIR                    	; Locate CR byte
0B3573 B1 
0B3574 79    0616** LD      A,C
0B3575 2F    0617** CPL                    	 	; A: Substring length (of IF clause)
0B3576 C1    0618** POP     BC			; Restore the second line number arg
0B3577 EB    0619** EX      DE,HL			; HL: Address in memory
             0620** ;
0B3578 5F    0621** LISTB:			LD      E,A             	; E: IF clause string length
0B3579 78    0622** LD      A,B			; Check whether a second line number was passed (BC!=0)
0B357A B1    0623** OR      C
0B357B 20    0624** JR      NZ,LISTA		; If there isn't a second line number
0B357C 01 
0B357D 0B    0625** DEC     BC			; then we set it to the maximum of 65535
             0626** ;
0B357E D9    0627** LISTA:			EXX
0B357F DD    0628** LD      IX,LISTON		; IX : Pointer to the LISTON (LISTO and OPT) sysvar
0B3580 21 
0B3581 40 
0B3582 56 
0B3582 0B   
0B3584 01    0629** LD      BC,0            	; BC': Indentation counter (C: FOR/NEXT, B: REPEAT/UNTIL)
0B3585 00 
0B3586 00 
0B3587 00 
0B3588 D9    0630** EXX
0B3589 3E    0631** LD      A,20			; Number of lines to list
0B358A 14 
             0632** ;
0B358B C5    0633** LISTC:			PUSH    BC              	; Save second line number
0B358C D5    0634** PUSH    DE              	; Save IF clause length
0B358D E5    0635** PUSH    HL              	; Save BASIC program counter
0B358E 08    0636** EX      AF,AF'
             0637** ;
             0638** ; BBC BASIC for Z80 lines are stored as follows:
             0639** ;
             0640** ; - [LEN] [LSB] [MSB] [DATA...] [0x0D]: LSB, MSB = line number
             0641** ; - [&00] [&FF] [&FF]: End of program marker
             0642** ;
             0643** ; This is the Russell format and different to the Wilson/Acorn format: https://www.beebwiki.mdfs.net/Program_format
             0644** ;
0B358F 7E    0645** LD      A,(HL)			; Check for end of program marker
0B3590 B7    0646** OR      A			; If found
0B3591 28    0647** JR      Z,WARMNC		; Jump to WARMNC (F=NC, so will jump to WARM)
0B3592 12 
             0648** ;
             0649** ; Check if past terminating line number
             0650** ;
0B3593 7B    0651** LD      A,E             	; A: IF clause length
0B3594 23    0652** INC     HL			; Skip the length byte
0B3595 11    0653** LD	DE,0			; Clear DE
0B3596 00 
0B3597 00 
0B3598 00 
0B3599 5E    0654** LD      E,(HL)			; Fetch the line number in DE
0B359A 23    0655** INC     HL
0B359B 56    0656** LD      D,(HL)
0B359C 2B    0657** DEC     HL			; Step HL back to the length byte
0B359D 2B    0658** DEC     HL
0B359E D5    0659** PUSH    DE             	 	; Push the line number on the stack
0B359F EB    0660** EX      DE,HL			; HL: line number
0B35A0 37    0661** SCF				; Do a 16-bit compare of HL and DE
0B35A1 ED    0662** SBC     HL,BC
0B35A2 42 
0B35A3 EB    0663** EX      DE,HL
0B35A4 D1    0664** POP     DE              	; Restore the line number
0B35A5 D2    0665** WARMNC:			JP      NC,WARM			; If exceeded the terminating line number then jump to WARM
0B35A6 47 
0B35A7 30 
0B35A8 0B 
0B35A9 4E    0666** LD      C,(HL)          	; C: Line length + 4
0B35AA 47    0667** LD      B,A             	; B: IF clause length
             0668** ;
             0669** ; Check if "UNLISTABLE":
             0670** ;
0B35AB 7A    0671** LD      A,D			; TODO: What is "UNLISTABLE?"
0B35AC B3    0672** OR      E
0B35AD CA    0673** JP      Z,CLOOP
0B35AE 48 
0B35AF 30 
0B35B0 0B 
             0674** ;
             0675** ; Check for IF clause:
             0676** ;
0B35B1 23    0677** INC     HL			; Skip the length
0B35B2 23    0678** INC     HL			; Skip the line number
0B35B3 23    0679** INC     HL              	; HL: Address of the tokenised BASIC line
0B35B4 0D    0680** DEC     C			;  C: Line length
0B35B5 0D    0681** DEC     C
0B35B6 0D    0682** DEC     C
0B35B7 0D    0683** DEC     C
0B35B8 D5    0684** PUSH    DE              	; Save the line number
0B35B9 E5    0685** PUSH    HL              	; Save the BASIC program address
0B35BA AF    0686** XOR     A               	;
0B35BB B8    0687** CP      B              	 	; Check for an IF clause (B!=0)
0B35BC FD    0688** PUSH    IY			; LD IY, DE
0B35BD E5 
0B35BE D1    0689** POP     DE              	; DE: Address of the IF clause string in the input buffer
0B35BF C4    0690** CALL    NZ,SEARCH      		; If there is an IF clause (B!=0) then search for it
0B35C0 4D 
0B35C1 07 
0B35C2 0B 
0B35C3 E1    0691** POP     HL              	; Restore BASIC program address
0B35C4 D1    0692** POP     DE              	; Restore line number
0B35C5 FD    0693** PUSH    IY
0B35C6 E5 
0B35C7 CC    0694** CALL    Z,LISTIT        	; List if no IF clause OR there is an IF clause match
0B35C8 5A 
0B35C9 38 
0B35CA 0B 
0B35CB FD    0695** POP     IY
0B35CC E1 
             0696** ;
0B35CD 08    0697** EX      AF,AF'
0B35CE 3D    0698** DEC     A			; Decrement line list counter
0B35CF CD    0699** CALL    LTRAP			; TODO: This destroys A - is this a bug I've introduced in LTRAP?
0B35D0 39 
0B35D1 3F 
0B35D2 0B 
0B35D3 E1    0700** POP     HL             	 	; Restore BASIC program address to beginning of line
0B35D4 11    0701** LD	DE,0
0B35D5 00 
0B35D6 00 
0B35D7 00 
0B35D8 5E    0702** LD      E,(HL)			; Fetch the length of line in DE
0B35D9 19    0703** ADD     HL,DE           	; Go to the next line
0B35DA D1    0704** POP     DE              	; Restore IF clause length
0B35DB C1    0705** POP     BC              	; Restore second line number
0B35DC 18    0706** JR      LISTC			; Loop back to do next line
0B35DD AD 
             0707** ;
             0708** ; RENUMBER
             0709** ; RENUMBER start
             0710** ; RENUMBER start,increment
             0711** ; RENUMBER ,increment
             0712** ;
0B35DE CD    0713** RENUM:			CALL    CLEAR           	; Uses the heap so clear all dynamic variables and function/procedure pointers
0B35DF 3E 
0B35E0 38 
0B35E1 0B 
0B35E2 CD    0714** CALL    PAIR            	; Fetch the parameters - HL: start (NEW line number), BC: increment
0B35E3 F3 
0B35E4 3B 
0B35E5 0B 
0B35E6 D9    0715** EXX
0B35E7 2A    0716** LD      HL,(PAGE_)		; HL: Top of program
0B35E8 14 
0B35E9 56 
0B35EA 0B 
0B35EB ED    0717** LD      DE,(LOMEM)		; DE: Start address of the heap
0B35EC 5B 
0B35ED 1A 
0B35EE 56 
0B35EE 0B   
             0718** ;
             0719** ; Build the table
             0720** ;
0B35F0 7E    0721** RENUM1:			LD      A,(HL)          	; Fetch the line length byte
0B35F1 B7    0722** OR      A			; Is it zero, i.e. the end of program marker?
0B35F2 28    0723** JR      Z,RENUM2		; Yes, so skip to the next part
0B35F3 36 
0B35F4 23    0724** INC     HL
0B35F5 4E    0725** LD      C,(HL)          	; BC: The OLD line number
0B35F6 23    0726** INC     HL
0B35F7 46    0727** LD      B,(HL)
0B35F8 78    0728** LD      A,B			; Check whether the line number is zero - we only need to check the LSW
0B35F9 B1    0729** OR      C
0B35FA CA    0730** JP      Z,CLOOP        		; If the line number is zero, then exit back to the command line
0B35FB 48 
0B35FC 30 
0B35FD 0B 
0B35FE EB    0731** EX      DE,HL			; DE: Pointer to BASIC program, HL: Pointer to heap
0B35FF 71    0732** LD      (HL),C			; Store the OLD line number in the heap
0B3600 23    0733** INC     HL
0B3601 70    0734** LD      (HL),B
0B3602 23    0735** INC     HL
0B3603 D9    0736** EXX				; HL: line number, BC: increment (16-bit values)
0B3604 E5    0737** PUSH    HL			; HL: Stack the NEW line number value
0B3605 52    0738** ADD.S   HL,BC           	; Add the increment
0B3606 09 
0B3607 DA    0739** JP      C,TOOBIG        	; If > 65535, then error: "Too big"
0B3608 ED 
0B3609 3B 
0B360A 0B 
0B360B D9    0740** EXX				; DE: Pointer to BASIC program, HL: Pointer to heap
0B360C C1    0741** POP     BC			; BC: Pop the NEW line number value off the stack
0B360D 71    0742** LD      (HL),C			; Store the NEW line number in the heap
0B360E 23    0743** INC     HL
0B360F 70    0744** LD      (HL),B
0B3610 23    0745** INC     HL
0B3611 EB    0746** EX      DE,HL			; HL: Pointer to BASIC program, DE: Pointer to heap
0B3612 2B    0747** DEC     HL			; Back up to the line length byte
0B3613 2B    0748** DEC     HL
0B3614 01    0749** LD	BC, 0
0B3615 00 
0B3616 00 
0B3617 00 
0B3618 4E    0750** LD      C,(HL)			; BC: Line length
0B3619 09    0751** ADD	HL,BC           	; Advance HL to next line
0B361A EB    0752** EX      DE,HL			; DE: Pointer to BASIC program, HL: Pointer to heap
0B361B E5    0753** PUSH    HL
0B361C 24    0754** INC     H			; Increment to next page
0B361D ED    0755** SBC     HL,SP			; Subtract from SP
0B361E 72 
0B361F E1    0756** POP     HL
0B3620 EB    0757** EX      DE, HL			; HL: Pointer to BASIC program, DE: Pointer to heap
0B3621 38    0758** JR      C,RENUM1        	; Loop, as the heap pointer has not strayed into the stack page
0B3622 CD 
0B3623 CD    0759** CALL    EXTERR          	; Otherwise throw error: "RENUMBER space'
0B3624 3F 
0B3625 37 
0B3626 0B 
0B3627 CC    0760** DB    	REN
0B3628 08    0761** DB    	8
0B3629 00    0762** DB    	0
             0763** ;
             0764** ; At this point a list of BASIC line numbers have been written to the heap
             0765** ; as word pairs:
             0766** ; - DW: The OLD line number
             0767** ; - DW: The NEW line number
             0768** ;
0B362A EB    0769** RENUM2:			EX      DE,HL			; HL: Pointer to the end of the heap
0B362B 36    0770** LD      (HL),-1			; Mark the end with FFFFh
0B362C FF 
0B362D 23    0771** INC     HL
0B362E 36    0772** LD      (HL),-1
0B362F FF 
0B3630 ED    0773** LD      DE,(LOMEM)		; DE: Pointer to the start of the heap
0B3631 5B 
0B3632 1A 
0B3633 56 
0B3633 0B   
0B3635 D9    0774** EXX
0B3636 2A    0775** LD      HL,(PAGE_)		; HL: Start of the BASIC program area
0B3637 14 
0B3638 56 
0B3639 0B 
0B363A 4E    0776** RENUM3:			LD      C,(HL)			; Fetch the first line length byte
0B363B 79    0777** LD      A,C			; If it is zero, then no program, so...
0B363C B7    0778** OR      A
0B363D CA    0779** JP      Z,WARM			; Jump to warm start
0B363E 47 
0B363F 30 
0B3640 0B 
0B3641 D9    0780** EXX				; HL: Pointer to end of heap, DE: Pointer to start of heap
0B3642 EB    0781** EX      DE,HL			; DE: Pointer to end of heap, HL: Pointer to start of heap
0B3643 23    0782** INC     HL			; Skip to the NEW line number
0B3644 23    0783** INC     HL
0B3645 5E    0784** LD      E,(HL)			; DE: The NEW line number
0B3646 23    0785** INC     HL
0B3647 56    0786** LD      D,(HL)
0B3648 23    0787** INC     HL
0B3649 D5    0788** PUSH    DE			; Stack the NEW line number
0B364A EB    0789** EX      DE,HL			; HL: The NEW line number, DE: Pointer to the end of heap
0B364B 22    0790** LD      (LINENO),HL		; Store the line number in LINENO
0B364C 23 
0B364D 56 
0B364E 0B 
0B364F D9    0791** EXX				; HL: Pointer to the BASIC program area
0B3650 D1    0792** POP     DE			; DE: The NEW line number
0B3651 23    0793** INC     HL
0B3652 73    0794** LD      (HL),E          	; Write out the NEW line number to the BASIC program
0B3653 23    0795** INC     HL
0B3654 72    0796** LD      (HL),D
0B3655 23    0797** INC     HL
0B3656 0D    0798** DEC     C			; Subtract 3 from the line length to compensate for increasing HL by 3 above
0B3657 0D    0799** DEC     C
0B3658 0D    0800** DEC     C
0B3659 79    0801** LD	A,C
0B365A 01    0802** LD	BC,0
0B365B 00 
0B365C 00 
0B365D 00 
0B365E 4F    0803** LD	C,A			; BC: Line length
             0804** ;
0B365F 3E    0805** RENUM7:			LD      A,LINO_MN			; A: The token code that precedes any line number encoded in BASIC (i.e. GOTO/GOSUB)
0B3660 8D 
0B3661 ED    0806** CPIR                    	; Search for the token
0B3662 B1 
0B3663 20    0807** JR      NZ,RENUM3		; If not found, then loop to process the next line
0B3664 D5 
             0808** ;
             0809** ; Having established this line contains at least one encoded line number, we need to update it to point to the new line number
             0810** ;
0B3665 C5    0811** PUSH    BC			; Stack everything
0B3666 E5    0812** PUSH    HL
0B3667 E5    0813** PUSH    HL			; HL: Pointer to encoded line number
0B3668 FD    0814** POP     IY			; IY: Pointer to encoded line number
0B3669 E1 
0B366A D9    0815** EXX
0B366B CD    0816** CALL    DECODE			; Decode the encoded line number (in HL')
0B366C AE 
0B366D 08 
0B366E 0B 
0B366F D9    0817** EXX				; HL: Decoded line number
0B3670 44    0818** LD      B,H			; BC: Decoded line number
0B3671 4D    0819** LD      C,L
0B3672 2A    0820** LD      HL,(LOMEM)		; HL: Pointer to heap
0B3673 1A 
0B3674 56 
0B3675 0B 
             0821** ;
             0822** ; This section of code cross-references the decoded (OLD) line number with the list
             0823** ; created previously in the global heap
             0824** ;
0B3676 5E    0825** RENUM4:			LD      E,(HL)          	; DE: The OLD line number
0B3677 23    0826** INC     HL
0B3678 56    0827** LD      D,(HL)
0B3679 23    0828** INC     HL
0B367A EB    0829** EX      DE,HL			; HL: The OLD line number, DE: Pointer in the global heap
0B367B B7    0830** OR      A               	; Clear the carry and...
0B367C 52    0831** SBC.S   HL,BC			; Compare by means of subtraction the OLD line number against the one in the heap
0B367D ED 
0B367E 42 
0B367F EB    0832** EX      DE,HL			; HL: Pointer in the global heap
0B3680 5E    0833** LD      E,(HL)          	; DE: The NEW line number
0B3681 23    0834** INC     HL
0B3682 56    0835** LD      D,(HL)
0B3683 23    0836** INC     HL
0B3684 38    0837** JR      C,RENUM4		; Loop until there is a match (Z) or not (NC)
0B3685 F0 
0B3686 EB    0838** EX      DE,HL			; DE: Pointer in the global heap
0B3687 28    0839** JR      Z,RENUM5        	; If Z flag is set, there is an exact match to the decoded line number on the heap
0B3688 1D 
             0840** ;
0B3689 CD    0841** CALL    TELL			; Display this error if the line number is not found
0B368A 58 
0B368B 3D 
0B368C 0B 
0B368D 46    0842** DB    	"Failed at "
0B368E 61 
0B368F 69 
0B3690 6C 
0B3690 65   
0B3691 64 
0B3692 20 
0B3693 61 
0B3693 74   
0B3694 20 
0B3697 00    0843** DB    	0
0B3698 2A    0844** LD      HL,(LINENO)
0B3699 23 
0B369A 56 
0B369B 0B 
0B369C CD    0845** CALL    PBCDL
0B369D BF 
0B369E 39 
0B369F 0B 
0B36A0 CD    0846** CALL    CRLF
0B36A1 0F 
0B36A2 39 
0B36A3 0B 
0B36A4 18    0847** JR      RENUM6			; And carry on renumbering
0B36A5 07 
             0848** ;
             0849** ; This snippet re-encodes the line number in the BASIC program
             0850** ;
0B36A6 D1    0851** RENUM5:			POP     DE			; DE: Pointer to the encoded line number in the listing
0B36A7 D5    0852** PUSH    DE
0B36A8 1B    0853** DEC     DE			; Back up a byte to the LINO token
0B36A9 CD    0854** CALL    ENCODE          	; Re-write the new line number out
0B36AA 24 
0B36AB 3D 
0B36AC 0B 
0B36AD E1    0855** RENUM6:			POP     HL			; HL: Pointer to the encoded line number in the listing
0B36AE C1    0856** POP     BC			; BC: The remaining line length
0B36AF 18    0857** JR      RENUM7			; Carry on checking for any more encoded line numbers in this line
0B36B0 AE 
             0858** ;
             0859** ; AUTO
             0860** ; AUTO start,increment
             0861** ; AUTO start
             0862** ; AUTO ,increment
             0863** ;
0B36B1 CD    0864** AUTO:			CALL    PAIR			; Get the parameter pair (HL: first parameter, BC: second parameter)
0B36B2 F3 
0B36B3 3B 
0B36B4 0B 
0B36B5 22    0865** LD      (AUTONO),HL		; Store the start in AUTONO
0B36B6 29 
0B36B7 56 
0B36B8 0B 
0B36B9 79    0866** LD      A,C			; Increment is 8 bit (0-255)
0B36BA 32    0867** LD      (INCREM),A		; Store that in INCREM
0B36BB 41 
0B36BC 56 
0B36BD 0B 
0B36BE 18    0868** JR      CLOOP0			; Jump back indirectly to the command loop via CLOOP0 (optimisation for size)
0B36BF 2E 
             0869** ;
             0870** ; BAD
             0871** ; NEW
             0872** ;
0B36C0 CD    0873** BAD:			CALL    TELL            	; Output "Bad program" error
0B36C1 58 
0B36C2 3D 
0B36C3 0B 
0B36C4 03    0874** DB    3				; Token for "BAD"
0B36C5 70    0875** DB    "program"
0B36C6 72 
0B36C7 6F 
0B36C8 67 
0B36C8 72   
0B36C9 61 
0B36CA 6D 
0B36CC 0D    0876** DB    CR
0B36CD 0A    0877** DB    LF
0B36CE 00    0878** DB    0				; Falls through to NEW
             0879** ;
0B36CF CD    0880** NEW:			CALL    NEWIT			; Call NEWIT (clears program area and variables)
0B36D0 34 
0B36D1 38 
0B36D2 0B 
0B36D3 18    0881** JR      CLOOP0			; Jump back indirectly to the command loop via CLOOP0 (optimisation for size)
0B36D4 19 
             0882** ;
             0883** ; OLD
             0884** ;
0B36D5 2A    0885** OLD:			LD      HL,(PAGE_)		; HL: The start of the BASIC program area
0B36D6 14 
0B36D7 56 
0B36D8 0B 
0B36D9 E5    0886** PUSH    HL			; Stack it
0B36DA 23    0887** INC     HL			; Skip the potential length byte of first line of code
0B36DB 23    0888** INC     HL			; And the line number word
0B36DC 23    0889** INC     HL
0B36DD 01    0890** LD      BC,252			; Look for a CR in the first 252 bytes of code; maximum line length
0B36DE FC 
0B36DF 00 
0B36E0 00 
0B36E1 3E    0891** LD      A,CR
0B36E2 0D 
0B36E3 ED    0892** CPIR
0B36E4 B1 
0B36E5 20    0893** JR      NZ,BAD			; If not found, then the first line of code is not a valid BBC BASIC code
0B36E6 D9 
0B36E7 7D    0894** LD      A,L			; It could still be garbage though! Store the position in A; this requires
0B36E8 E1    0895** POP     HL			; PAGE to be on a 256 page boundary, and is now the length of the first line
0B36E9 77    0896** LD      (HL),A			; Restore the length byte (this will have been set to 0 by NEW)
0B36EA CD    0897** CALL    CLEAN			; Further checks for bad program, set TOP, write out &FFFF end of program marker
0B36EB 07 
0B36EC 38 
0B36ED 0B 
0B36EE C3    0898** CLOOP0:			JP      CLOOP			; Jump back to the command loop
0B36EF 48 
0B36F0 30 
0B36F1 0B 
             0899** ;
             0900** ; LOAD filename
             0901** ;
0B36F2 CD    0902** LOAD:			CALL    EXPRS           	; Get the filename
0B36F3 DD 
0B36F4 02 
0B36F5 0B 
0B36F6 3E    0903** LD      A,CR			; DE points to the last byte of filename in ACCS
0B36F7 0D 
0B36F8 12    0904** LD      (DE),A			; Terminate filename with a CR
0B36F9 CD    0905** CALL    LOAD0			; Load the file in, then CLEAN
0B36FA E7 
0B36FB 37 
0B36FC 0B 
0B36FD CD    0906** CALL    CLEAR			; Further checks for bad program, set TOP, write out &FFFF end of program marker
0B36FE 3E 
0B36FF 38 
0B3700 0B 
0B3701 18    0907** JR      WARM0			; Jump back to the command loop
0B3702 21 
             0908** ;
             0909** ; SAVE filename
             0910** ;
0B3703 CD    0911** SAVE:			CALL    SETTOP          	; Set TOP sysvar
0B3704 13 
0B3705 38 
0B3706 0B 
0B3707 CD    0912** CALL    EXPRS           	; Get the filename
0B3708 DD 
0B3709 02 
0B370A 0B 
0B370B 3E    0913** LD      A,CR			; Terminate the filename with a CR
0B370C 0D 
0B370D 12    0914** LD      (DE),A
0B370E ED    0915** LD      DE,(PAGE_)		; DE: Start of program memory
0B370F 5B 
0B3710 14 
0B3711 56 
0B3711 0B   
0B3713 2A    0916** LD      HL,(TOP)		; HL: Top of program memory
0B3714 17 
0B3715 56 
0B3716 0B 
0B3717 B7    0917** OR      A			; Calculate program size (TOP-PAGE)
0B3718 ED    0918** SBC     HL,DE
0B3719 52 
0B371A 44    0919** LD      B,H             	; BC: Length of program in bytes
0B371B 4D    0920** LD      C,L
0B371C 21    0921** LD      HL,ACCS			; HL: Address of the filename
0B371D 00 
0B371E 53 
0B371F 0B 
0B3720 CD    0922** CALL    OSSAVE			; Call the SAVE routine in patch.asm
0B3721 F5 
0B3722 41 
0B3723 0B 
0B3724 C3    0923** WARM0:			JP      WARM			; Jump back to the command loop
0B3725 47 
0B3726 30 
0B3727 0B 
             0924** 
             0925** ;
             0926** ; ERROR
             0927** ; Called whenever BASIC needs to halt with an error
             0928** ; Error messages are indexed from 0
             0929** ; Inputs:
             0930** ;  A: Error number
             0931** ;
0B3728 ED    0932** ERROR_:			LD      SP,(HIMEM)		; Set SP to HIMEM
0B3729 7B 
0B372A 20 
0B372B 56 
0B372B 0B   
0B372D 21    0933** LD      HL,ERRWDS		; Index into the error string table
0B372E 11 
0B372F 34 
0B3730 0B 
0B3731 B7    0934** OR      A			; We don't need to search for the first error
0B3732 28    0935** JR      Z,ERROR1		; So skip the search routine
0B3733 0A 
             0936** ;
             0937** ; Search the error table for error #A
             0938** ; HL will end up being the pointer into the correct error
             0939** ; There is no bounds checking on this, so invalid error numbers will probably output garbage
             0940** ;
0B3734 47    0941** LD      B,A             	; Store error number in B
0B3735 08    0942** EX      AF,AF'			; Store error number in AF'
0B3736 AF    0943** XOR     A
0B3737 BE    0944** ERROR0:			CP      (HL)			; Compare the character with 0 (the terminator byte)
0B3738 23    0945** INC     HL			; Increment the string pointer
0B3739 20    0946** JR      NZ,ERROR0		; Loop until with hit a 0
0B373A FC 
0B373B 10    0947** DJNZ    ERROR0			; Decrements the error number and loop until 0
0B373C FA 
0B373D 08    0948** EX      AF,AF'			; Restore the error number from AF'
             0949** ;
             0950** ; At this point HL points to the tokenised error string
             0951** ;
0B373E E5    0952** ERROR1:			PUSH    HL			; Stack the error string pointer and fall through to EXTERR
             0953** 
             0954** ;
             0955** ; EXTERR
             0956** ; Inputs:
             0957** ;  A: Error number
             0958** ;
             0959** ; This is the entry point for external errors, i.e. ones not in the ERRWDS table
             0960** ; The error text immediately follows the CALL to EXTERR, for example:
             0961** ; > CALL  EXTERR
             0962** ; > DB    "Silly", 0
             0963** ; So we can get the address of the string by popping the return address off the stack
             0964** ;
0B373F E1    0965** EXTERR:			POP     HL			; Pop the error string pointer
0B3740 22    0966** LD      (ERRTXT),HL		; Store in ERRTXT sysvar
0B3741 2F 
0B3742 56 
0B3743 0B 
0B3744 ED    0967** LD      SP,(HIMEM)		; Set SP to HIMEM
0B3745 7B 
0B3746 20 
0B3747 56 
0B3747 0B   
0B3749 32    0968** LD      (ERR),A			; Store error number in ERR sysvar
0B374A 3F 
0B374B 56 
0B374C 0B 
0B374D CD    0969** CALL    SETLIN			; Get line number
0B374E 76 
0B374F 39 
0B3750 0B 
0B3751 22    0970** LD      (ERL),HL		; Store in ERL sysvar
0B3752 33 
0B3753 56 
0B3754 0B 
0B3755 B7    0971** OR      A			; Is error number 0?
0B3756 28    0972** JR      Z,ERROR2		; Yes, so skip the next bit as error number 0 is untrappable
0B3757 0D 
             0973** ;
0B3758 2A    0974** LD      HL,(ERRTRP)		; Check whether the error is trapped
0B3759 2C 
0B375A 56 
0B375B 0B 
0B375C 7C    0975** LD      A,H
0B375D B5    0976** OR      L
0B375E E5    0977** PUSH    HL			; HL: Error line
0B375F FD    0978** POP     IY			; IY: HL
0B3760 E1 
0B3761 C2    0979** JP      NZ,XEQ         	 	; If error trapped, jump to XEQ
0B3762 5E 
0B3763 0B 
0B3764 0B 
             0980** ;
0B3765 21    0981** ERROR2:			LD      HL,0
0B3766 00 
0B3767 00 
0B3768 00 
0B3769 22    0982** LD      (AUTONO),HL		; Cancel AUTO
0B376A 29 
0B376B 56 
0B376C 0B 
0B376D 22    0983** LD      (TRACEN),HL     	; Cancel TRACE
0B376E 26 
0B376F 56 
0B3770 0B 
0B3771 CD    0984** CALL    RESET           	; Reset OPSYS
0B3772 7E 
0B3773 43 
0B3774 0B 
0B3775 CD    0985** CALL    CRLF			; Output newline
0B3776 0F 
0B3777 39 
0B3778 0B 
0B3779 CD    0986** CALL    REPORT          	; Output the error message
0B377A 4A 
0B377B 3D 
0B377C 0B 
0B377D CD    0987** CALL    SAYLN			; Output " at line nnnn" message.
0B377E AA 
0B377F 39 
0B3780 0B 
0B3781 1E    0988** LD      E,0			; Close all files
0B3782 00 
0B3783 DC    0989** CALL    C,OSSHUT
0B3784 F3 
0B3785 42 
0B3786 0B 
0B3787 CD    0990** CALL    CRLF			; Output newline
0B3788 0F 
0B3789 39 
0B378A 0B 
0B378B C3    0991** JP      CLOOP			; Back to CLOOP
0B378C 48 
0B378D 30 
0B378E 0B 
             0992** ;
             0993** ; SUBROUTINES:
             0994** ;
             0995** ; LEX - SEARCH FOR KEYWORDS
             0996** ;   Inputs: HL = start of keyword table
             0997** ;           IY = start of match text
             0998** ;  Outputs: If found, Z-flag set, A=token.
             0999** ;           If not found, Z-flag reset, A=(IY).
             1000** ;           IY updated (if NZ, IY unchanged).
             1001** ; Destroys: A,B,H,L,IY,F
             1002** ;
0B378F 21    1003** LEX:			LD      HL,KEYWDS		; Address of the keywords table
0B3790 30 
0B3791 31 
0B3792 0B 
             1004** ;
0B3793 FD    1005** LEX0:			LD      A,(IY)			; Fetch the character to match
0B3794 7E 
0B3795 00 
0B3796 46    1006** LD      B,(HL)			; B: The token from the keywords table
0B3797 23    1007** INC     HL			; Increment the pointer in the keywords table
0B3798 BE    1008** CP      (HL)			; Compare the first characters
0B3799 28    1009** JR      Z,LEX2			; If there is a match, then skip to LEX2
0B379A 08 
0B379B D8    1010** RET     C               	; No match, so fail
             1011** ;
             1012** ; This snippet of code skips to the next token in the KEYWDS table
             1013** ;
0B379C 23    1014** LEX1:			INC     HL			; Increment the pointer
0B379D CB    1015** BIT     7,(HL)			; Check if bit 7 set (all token IDs have bit 7 set)
0B379E 7E 
0B379F 28    1016** JR      Z,LEX1			; No, so loop
0B37A0 FB 
0B37A1 18    1017** JR      LEX0			; At this point HL is pointing to the start of the next keyword
0B37A2 F0 
             1018** ;
0B37A3 FD    1019** LEX2:			PUSH    IY              	; Save the input pointer
0B37A4 E5 
0B37A5 23    1020** LEX3:			INC     HL			; Increment the keyword pointer
0B37A6 CB    1021** BIT     7,(HL)			; If we've reached the end (marked by the start of the next token) then
0B37A7 7E 
0B37A8 20    1022** JR      NZ,LEX6         	; Jump to here as we've found a token
0B37A9 1C 
0B37AA FD    1023** INC     IY			; Increment the text pointer
0B37AB 23 
0B37AC FD    1024** LD      A,(IY)			; Fetch the character
0B37AD 7E 
0B37AE 00 
0B37AF FE    1025** CP      '.'			; Is it an abbreviated keyword?
0B37B0 2E 
0B37B1 28    1026** JR      Z,LEX6          	; Yes, so we'll return with the token we've found
0B37B2 13 
0B37B3 BE    1027** CP      (HL)			; Compare with the keywords list
0B37B4 28    1028** JR      Z,LEX3			; It's a match, so continue checking this keyword
0B37B5 EF 
0B37B6 CD    1029** CALL    RANGE1			; Is it alphanumeric, '@', '_' or '`'
0B37B7 43 
0B37B8 3C 
0B37B9 0B 
0B37BA 38    1030** JR      C,LEX5			; No, so check whether keyword needs to be immediately delimited
0B37BB 04 
             1031** ;
0B37BC FD    1032** LEX4:			POP     IY              	; Restore the input pointer ready for the next search
0B37BD E1 
0B37BE 18    1033** JR      LEX1			; And loop back to start again
0B37BF DC 
             1034** ;
             1035** ; This section handles the 0 byte at the end of keywords that indicate the keyword needs to be
             1036** ; immediately delimited
             1037** ;
0B37C0 7E    1038** LEX5:			LD      A,(HL)			; Fetch the byte from the keywords table
0B37C1 B7    1039** OR      A			; If it is not zero, then...
0B37C2 20    1040** JR      NZ,LEX4			; Keep searching
0B37C3 F8 
0B37C4 FD    1041** DEC     IY			; If it is zero, then skip the input pointer back one byte
0B37C5 2B 
             1042** ;
             1043** ; We've found a token at this point
             1044** ;
0B37C6 F1    1045** LEX6:			POP     AF			; Discard IY input pointer pushed on the stack
0B37C7 AF    1046** XOR     A			; Set the Z flag
0B37C8 78    1047** LD      A,B			; A: The token
0B37C9 C9    1048** RET
             1049** ;
             1050** ; DEL - DELETE A PROGRAM LINE.
             1051** ;   Inputs: HL addresses program line.
             1052** ; Destroys: B,C,F
             1053** ;
             1054** ; This simply erases the line by moving all of the code after the line to be deleted back over
             1055** ; it using an LDIR
             1056** ;
0B37CA D5    1057** DEL:			PUSH    DE
0B37CB E5    1058** PUSH    HL
0B37CC E5    1059** PUSH    HL			; HL: Address of the program line
0B37CD 06    1060** LD      B,0			; BC: Length of the line
0B37CE 00 
0B37CF 4E    1061** LD      C,(HL)
0B37D0 09    1062** ADD     HL,BC			; HL: Advanced to the start of the next line
0B37D1 E5    1063** PUSH    HL
0B37D2 EB    1064** EX      DE,HL			; DE: Pointer to the next line
0B37D3 2A    1065** LD      HL,(TOP)		; HL: Pointer to the end of the program
0B37D4 17 
0B37D5 56 
0B37D6 0B 
0B37D7 ED    1066** SBC     HL,DE
0B37D8 52 
0B37D9 44    1067** LD      B,H			; BC: Size of block to move
0B37DA 4D    1068** LD      C,L
0B37DB E1    1069** POP     HL			; HL: Pointer to next line
0B37DC D1    1070** POP     DE			; DE: Pointer to this line
0B37DD ED    1071** LDIR                    	; Delete the line
0B37DE B0 
0B37DF ED    1072** LD      (TOP),DE		; Adjust TOP
0B37E0 53 
0B37E1 17 
0B37E2 56 
0B37E2 0B   
0B37E4 E1    1073** POP     HL
0B37E5 D1    1074** POP     DE
0B37E6 C9    1075** RET
             1076** ;
             1077** ;LOAD0 - LOAD A DISK FILE THEN CLEAN.
             1078** ;   Inputs: Filename in ACCS (term CR)
             1079** ; Destroys: A,B,C,D,E,H,L,F
             1080** ;
             1081** ;CLEAN - CHECK FOR BAD PROGRAM, FIND END OF TEXT
             1082** ; AND WRITE FF FF, THEN LOAD (TOP).
             1083** ; Destroys: A,B,C,H,L,F
             1084** ;
0B37E7 ED    1085** LOAD0: 			LD      DE,(PAGE_)		; DE: Beginning of BASIC program area
0B37E8 5B 
0B37E9 14 
0B37EA 56 
0B37EA 0B   
0B37EC 21    1086** LD      HL,-256
0B37ED 00 
0B37EE FF 
0B37EF FF 
0B37F0 39    1087** ADD     HL,SP
0B37F1 ED    1088** SBC     HL,DE           	; Find available space
0B37F2 52 
0B37F3 44    1089** LD      B,H
0B37F4 4D    1090** LD      C,L
0B37F5 21    1091** LD      HL,ACCS
0B37F6 00 
0B37F7 53 
0B37F8 0B 
0B37F9 CD    1092** CALL    OSLOAD          	; Call the OSLOAD function in patch
0B37FA 5C 
0B37FB 41 
0B37FC 0B 
0B37FD D4    1093** CALL    NC,NEWIT		; If NC then NEW
0B37FE 34 
0B37FF 38 
0B3800 0B 
0B3801 3E    1094** LD      A,0
0B3802 00 
0B3803 D2    1095** JP      NC,ERROR_        	; And trigger a "No room" error, otherwise...
0B3804 28 
0B3805 37 
0B3806 0B 
             1096** ;
0B3807 CD    1097** CLEAN:			CALL    SETTOP			; Set TOP sysvar
0B3808 13 
0B3809 38 
0B380A 0B 
0B380B 2B    1098** DEC     HL			; Write out the end of program markers
0B380C 36    1099** LD      (HL),-1
0B380D FF 
0B380E 2B    1100** DEC     HL
0B380F 36    1101** LD      (HL),-1
0B3810 FF 
0B3811 18    1102** JR      CLEAR			; Clear all dynamic variables and function/procedure pointers
0B3812 2B 
             1103** ;
             1104** ; Set the TOP sysvar; the first free location after the end of the current program
             1105** ; Returns:
             1106** ; - HL: TOP
             1107** ;
0B3813 2A    1108** SETTOP:			LD      HL,(PAGE_)		; Start at beginning of BASIC program area
0B3814 14 
0B3815 56 
0B3816 0B 
0B3817 01    1109** LD	BC, 0			; BC: 0
0B3818 00 
0B3819 00 
0B381A 00 
0B381B 3E    1110** LD      A,CR			; End of line marker
0B381C 0D 
0B381D 4E    1111** SETOP1:			LD      C,(HL)			; BC: Get first byte of program line (line length)
0B381E 0C    1112** INC     C			; Check for zero
0B381F 0D    1113** DEC     C
0B3820 28    1114** JR      Z,SETOP2		; If it is zero, we've reached the end
0B3821 0A 
0B3822 09    1115** ADD     HL,BC			; Skip to next line
0B3823 2B    1116** DEC     HL			; Check end of previous line
0B3824 BE    1117** CP      (HL)
0B3825 23    1118** INC     HL
0B3826 28    1119** JR      Z,SETOP1		; If CR then loop
0B3827 F5 
0B3828 C3    1120** JP      BAD			; If anything else, then something has gone wrong - trip a Bad Program error
0B3829 C0 
0B382A 36 
0B382B 0B 
             1121** ;
0B382C 23    1122** SETOP2:			INC     HL             		; Skip the 3 byte end of program marker (&00, &FF, &FF)
0B382D 23    1123** INC     HL			; NB: Called from NEWIT
0B382E 23    1124** INC     HL
0B382F 22    1125** LD      (TOP),HL		; Store in TOP sysvar
0B3830 17 
0B3831 56 
0B3832 0B 
0B3833 C9    1126** RET
             1127** ;
             1128** ; NEWIT - NEW PROGRAM THEN CLEAR
             1129** ;   Destroys: H,L
             1130** ;
             1131** ; CLEAR - CLEAR ALL DYNAMIC VARIABLES INCLUDING
             1132** ; FUNCTION AND PROCEDURE POINTERS.
             1133** ;   Destroys: Nothing
             1134** ;
0B3834 2A    1135** NEWIT:			LD      HL,(PAGE_)		; HL: First byte of BASIC program area
0B3835 14 
0B3836 56 
0B3837 0B 
0B3838 36    1136** LD      (HL),0			; Stick a 0 in there
0B3839 00 
0B383A CD    1137** CALL    SETOP2			; Skip three bytes to get to end of empty BASIC program area and set TOP sysvar
0B383B 2C 
0B383C 38 
0B383D 0B 
             1138** ;
0B383E E5    1139** CLEAR:			PUSH    HL			; Stack the BASIC program pointer
0B383F 2A    1140** LD      HL,(TOP)		; Get the TOP sysvar - first available byte after BASIC
0B3840 17 
0B3841 56 
0B3842 0B 
0B3843 22    1141** LD      (LOMEM),HL		; Set the LOMEM sysvar
0B3844 1A 
0B3845 56 
0B3846 0B 
0B3847 22    1142** LD      (FREE),HL		; And the FREE sysvar with that value
0B3848 1D 
0B3849 56 
0B384A 0B 
0B384B 21    1143** LD      HL,DYNVAR		; Get the pointer to the dynamic variable pointers buffer in RAM
0B384C 6C 
0B384D 55 
0B384E 0B 
0B384F C5    1144** PUSH    BC
             1145** ; LD      B,3*(54+2)		; Loop counter
0B3850 06    1146** LD      B,54+2*3		; ez80asm doesn't do () in expressions
0B3851 A8 
0B3852 36    1147** CLEAR1:			LD      (HL),0			; Clear the dynamic variable pointers
0B3853 00 
0B3854 23    1148** INC     HL
0B3855 10    1149** DJNZ    CLEAR1
0B3856 FB 
0B3857 C1    1150** POP     BC
0B3858 E1    1151** POP     HL			; Restore the BASIC program pointer
0B3859 C9    1152** RET
             1153** ;
             1154** ;LISTIT - LIST A PROGRAM LINE.
             1155** ;    Inputs: HL addresses line
             1156** ;            DE = line number (binary)
             1157** ;            IX = Pointer to LISTON
             1158** ;             B = FOR/NEXT indent level
             1159** ;             C = REPEAT/UNTIL indent level
             1160** ;  Destroys: A,D,E,B',C',D',E',H',L',IY,F
             1161** ;
0B385A E5    1162** LISTIT:			PUSH    HL			; Stack the address of the line
0B385B EB    1163** EX      DE,HL			; HL: Line number
0B385C C5    1164** PUSH    BC
0B385D CD    1165** CALL    PBCD			; Print the line number
0B385E C3 
0B385F 39 
0B3860 0B 
0B3861 C1    1166** POP     BC
0B3862 E1    1167** POP     HL			; HL: Address of the first token/character
0B3863 7E    1168** LD      A,(HL)			; Fetch the token
0B3864 FE    1169** CP      NEXT			; Is it NEXT...
0B3865 ED 
0B3866 CC    1170** CALL    Z,INDENT		; Yes, so indent in
0B3867 F0 
0B3868 38 
0B3869 0B 
0B386A FE    1171** CP      UNTIL			; Or is it UNTIL...
0B386B FD 
0B386C CC    1172** CALL    Z,INDENT		; Yes, so indent in
0B386D F0 
0B386E 38 
0B386F 0B 
0B3870 D9    1173** EXX
0B3871 3E    1174** LD      A,' '
0B3872 20 
0B3873 DD    1175** BIT     0,(IX)			; If BIT 0 of LISTON is set
0B3874 CB 
0B3875 00 
0B3876 46 
0B3877 C4    1176** CALL    NZ,OUTCHR		; Then print a space after the line number
0B3878 17 
0B3879 39 
0B387A 0B 
0B387B 78    1177** LD      A,B			; Fetch the FOR/NEXT indent level
0B387C 87    1178** ADD     A,A			; Multiply by 2
0B387D DD    1179** BIT     1,(IX)			; If BIT 1 of LISTON is set
0B387E CB 
0B387F 00 
0B3880 4E 
0B3881 C4    1180** CALL    NZ,FILL			; Then print the FOR/NEXT indent
0B3882 B7 
0B3883 17 
0B3884 0B 
0B3885 79    1181** LD      A,C			; Fetch the REPEAT/UNTIL indent level
0B3886 87    1182** ADD     A,A			; Multiply by 2
0B3887 DD    1183** BIT     2,(IX)			; If BIT 2 of LISTON is set
0B3888 CB 
0B3889 00 
0B388A 56 
0B388B C4    1184** CALL    NZ,FILL			; Then print the REPEAT/UNTIL indent
0B388C B7 
0B388D 17 
0B388E 0B 
0B388F D9    1185** EXX
0B3890 7E    1186** LD      A,(HL)			; Fetch the token
0B3891 FE    1187** CP      FOR			; Is it FOR?
0B3892 E3 
0B3893 CC    1188** CALL    Z,INDENT		; Yes, so indent
0B3894 F0 
0B3895 38 
0B3896 0B 
0B3897 FE    1189** CP      REPEAT			; Is it REPEAT?
0B3898 F5 
0B3899 CC    1190** CALL    Z,INDENT		; Yes, so indent
0B389A F0 
0B389B 38 
0B389C 0B 
0B389D 1E    1191** LD      E,0			; E: The quote counter - reset to 0
0B389E 00 
0B389F 7E    1192** LIST8:			LD      A,(HL)			; Fetch a character / token byte
0B38A0 23    1193** INC     HL
0B38A1 FE    1194** CP      CR			; Is it end of line?
0B38A2 0D 
0B38A3 28    1195** JR      Z,LISTE			; Yes, so finish (DB: Used to jump to CRLF, modified for *EDIT)
0B38A4 0B 
0B38A5 FE    1196** CP      34			; Is it a quote character?
0B38A6 22 
0B38A7 20    1197** JR      NZ,LIST7		; No, so skip to next bit
0B38A8 01 
0B38A9 1C    1198** INC     E			; Otherwise increment quote counter
0B38AA CD    1199** LIST7:			CALL    LOUT			; Output the character / token
0B38AB DF 
0B38AC 38 
0B38AD 0B 
0B38AE 18    1200** JR      LIST8			; And repeat
0B38AF EF 
             1201** ;
             1202** ; DB: Modification for *EDIT
             1203** ; Terminate the line with either a CRLF or a NUL character
             1204** ;
0B38B0 DD    1205** LISTE:			BIT 	3,(IX)			; Are we printing to buffer?
0B38B1 CB 
0B38B2 00 
0B38B3 5E 
0B38B4 28    1206** JR	Z, CRLF			; Yes, so print a CRLF
0B38B5 59 
0B38B6 AF    1207** XOR	A			; Otherwise print a NUL (0)
0B38B7 C3    1208** JP	OSWRCH
0B38B8 C8 
0B38B9 3E 
0B38BA 0B 
             1209** ;
             1210** ; Decode the 3 byte GOTO type line number
             1211** ;
0B38BB E5    1212** PRLINO:			PUSH    HL			; Swap HL and IY
0B38BC FD    1213** POP     IY			; IY: Pointer to the line number
0B38BD E1 
0B38BE C5    1214** PUSH    BC
0B38BF CD    1215** CALL    DECODE			; Decode
0B38C0 AE 
0B38C1 08 
0B38C2 0B 
0B38C3 C1    1216** POP     BC
0B38C4 D9    1217** EXX
0B38C5 C5    1218** PUSH    BC
0B38C6 CD    1219** CALL    PBCDL			; Output the line number
0B38C7 BF 
0B38C8 39 
0B38C9 0B 
0B38CA C1    1220** POP     BC
0B38CB D9    1221** EXX
0B38CC FD    1222** PUSH    IY			; Swap HL and IY
0B38CD E5 
0B38CE E1    1223** POP     HL			; HL: Pointer to the next character in the line
0B38CF C9    1224** RET
             1225** ;
             1226** ; DB: Modification for internationalisation
             1227** ;
0B38D0 CD    1228** PRREM:			CALL	OUT_			; Output the REM token
0B38D1 34 
0B38D2 39 
0B38D3 0B 
0B38D4 7E    1229** @@:			LD	A, (HL)			; Fetch the character
0B38D5 FE    1230** CP	CR			; If it is end of line, then
0B38D6 0D 
0B38D7 C8    1231** RET	Z			; we have finished
0B38D8 CD    1232** CALL	OUTCHR			; Ouput the character
0B38D9 17 
0B38DA 39 
0B38DB 0B 
0B38DC 23    1233** INC	HL
0B38DD 18    1234** JR	@B			; And loop
0B38DE F5 
             1235** ;
             1236** ; DB: End of modification
             1237** ;
0B38DF CB    1238** LOUT:			BIT     0,E			; If the quote counter is odd (bit 1 set) then
0B38E0 43 
0B38E1 20    1239** JR      NZ,OUTCHR		; don't tokenise, just output the character
0B38E2 34 
0B38E3 FE    1240** CP	REM			; DB: Is it REM
0B38E4 F4 
0B38E5 28    1241** JR	Z, PRREM		; DB: Yes so jump to the special case for REM
0B38E6 E9 
0B38E7 FE    1242** CP      LINO_MN			; Is it a line number (following GOTO/GOSUB etc)?
0B38E8 8D 
0B38E9 28    1243** JR      Z,PRLINO		; Yes, so decode and print the line number
0B38EA D0 
0B38EB CD    1244** CALL    OUT_			; Output a character / keyword
0B38EC 34 
0B38ED 39 
0B38EE 0B 
0B38EF 7E    1245** LD      A,(HL)			; Fetch the next character
             1246** ;
             1247** ; This block of code handles the indentation
             1248** ; B: Counter for FOR/NEXT indent
             1249** ; C: Counter for REPEAT/UNTIL indent
             1250** ;
0B38F0 D9    1251** INDENT:			EXX
0B38F1 FE    1252** CP      FOR			; If the token is FOR
0B38F2 E3 
0B38F3 28    1253** JR      Z,IND1			; Then INC B
0B38F4 09 
0B38F5 FE    1254** CP      NEXT			; If it is NEXT
0B38F6 ED 
0B38F7 20    1255** JR      NZ,IND2_		; Then...
0B38F8 06 
0B38F9 05    1256** DEC     B			; DEC B
0B38FA F2    1257** JP      P,IND2_			; If we have gone below 0 then
0B38FB FF 
0B38FC 38 
0B38FD 0B 
0B38FE 04    1258** IND1:			INC     B			; Increment back to 0
             1259** ;
0B38FF FE    1260** IND2_:			CP      REPEAT			; If the token is REPEAT
0B3900 F5 
0B3901 28    1261** JR      Z,IND3			; Then INC C
0B3902 09 
0B3903 FE    1262** CP      UNTIL			; If it is UNTIL
0B3904 FD 
0B3905 20    1263** JR      NZ,IND4			; Then...
0B3906 06 
0B3907 0D    1264** DEC     C			; DEC C
0B3908 F2    1265** JP      P,IND4			; If we have gone below 0 then
0B3909 0D 
0B390A 39 
0B390B 0B 
0B390C 0C    1266** IND3:			INC     C			; Incremet back to 0
0B390D D9    1267** IND4:			EXX
0B390E C9    1268** RET
             1269** ;
             1270** ;CRLF - SEND CARRIAGE RETURN, LINE FEED.
             1271** ;  Destroys: A,F
             1272** ;OUTCHR - OUTPUT A CHARACTER TO CONSOLE.
             1273** ;    Inputs: A = character
             1274** ;  Destroys: A,F
             1275** ;
0B390F 3E    1276** CRLF:			LD      A,CR			; Output CR
0B3910 0D 
0B3911 CD    1277** CALL    OUTCHR
0B3912 17 
0B3913 39 
0B3914 0B 
0B3915 3E    1278** LD      A,LF			; Output LF
0B3916 0A 
             1279** ;
0B3917 CD    1280** OUTCHR:			CALL    OSWRCH			; Output the character in A
0B3918 C8 
0B3919 3E 
0B391A 0B 
0B391B D6    1281** SUB     CR			; Check for CR
0B391C 0D 
0B391D 28    1282** JR      Z,CARRET		; If it is CR then A will be 0, this will clear the count
0B391E 06 
0B391F D8    1283** RET     C              		; If it is less than CR, it is non-printing, so don't increment the count
0B3920 3A    1284** LD      A,(COUNT)		; Increment the count
0B3921 3D 
0B3922 56 
0B3923 0B 
0B3924 3C    1285** INC     A
             1286** ;
0B3925 32    1287** CARRET:			LD      (COUNT),A		; Store the new count value
0B3926 3D 
0B3927 56 
0B3928 0B 
0B3929 C8    1288** RET     Z			; Return if the count has wrapped to 0
0B392A E5    1289** PUSH    HL			; Now check if count = print width
0B392B 2A    1290** LD      HL,(WIDTH)		; Get the print width; it's a byte value, so
0B392C 3E 
0B392D 56 
0B392E 0B 
0B392F BD    1291** CP      L			; L is the width. Compare it with count.
0B3930 E1    1292** POP     HL
0B3931 C0    1293** RET     NZ			; If we've not hit print width, then just return
0B3932 18    1294** JR      CRLF			; Otherwise output CRLF
0B3933 DB 
             1295** ;
             1296** ; OUT - SEND CHARACTER OR KEYWORD
             1297** ;   Inputs: A = character (>=10, <128)
             1298** ;           A = Token (<10, >=128)
             1299** ;  Destroys: A,F
             1300** ;
0B3934 FE    1301** OUT_:			CP      138			; Neat trick to do condition: If A >= 10 or < 128 then PE flag is set
0B3935 8A 
0B3936 EA    1302** JP      PE,OUTCHR		; If so, then it's a character, so just output it
0B3937 17 
0B3938 39 
0B3939 0B 
             1303** ;
             1304** ; This bit looks up the character in the KEYWDS token table and expands it
             1305** ; Note the CP 138; this sets the overflow flag as follows:
             1306** ;
             1307** ; NB:
             1308** ;  1. Any 8-bit number between 128 and 255 is negative (two's complement) so 138 is -118, 128 = -128
             1309** ;  2. CP is effectively a SUB; sets the flags without affecting A
             1310** ;  3. The operation n - -118 ~ n + 118
             1311** ;
             1312** ; So:
             1313** ;  *   9 CP 138 ~    9 + 118 = 127 = no overflow : token
             1314** ;  *  10 CP 138 ~   10 + 118 = 128 =    overflow : character
             1315** ;  * 127 CP 138 ~  127 + 118 = 245 =    overflow : character
             1316** ;  * 128 CP 138 ~ -128 + 118 = -10 = no overflow : token
             1317** ;
0B393A C5    1318** PUSH    BC			; Preserve BC and HL
0B393B E5    1319** PUSH    HL
0B393C 21    1320** LD      HL,KEYWDS		; The list of tokens and keywords
0B393D 30 
0B393E 31 
0B393F 0B 
0B3940 01    1321** LD      BC,KEYWDL		; The length of the keyword list
0B3941 DF 
0B3942 02 
0B3943 00 
0B3944 ED    1322** CPIR				; We can just do a straight CPIR as the token characters are unique in the list
0B3945 B1 
             1323** ;							; At this point HL points to the next byte, the first character of the token
0B3946 7E    1324** TOKEN1:			LD      A,(HL)			; Fetch the character
0B3947 23    1325** INC     HL			; Increment to the next byte in the token table
0B3948 FE    1326** CP      138			; If A >= 10 or < 128, i.e. we've not hit the token code for the next token
0B3949 8A 
0B394A F5    1327** PUSH    AF			; Then...
0B394B EC    1328** CALL    PE,OUTCHR		; Output the character...
0B394C 17 
0B394D 39 
0B394E 0B 
0B394F F1    1329** POP     AF			;
0B3950 EA    1330** JP      PE,TOKEN1		; And loop to the next character
0B3951 46 
0B3952 39 
0B3953 0B 
0B3954 E1    1331** POP     HL			; Done, so tidy up the stack and exit
0B3955 C1    1332** POP     BC
0B3956 C9    1333** RET
             1334** ;
             1335** ; FINDL - FIND PROGRAM LINE
             1336** ;   Inputs: HL = line number (binary)
             1337** ;  Outputs: HL addresses line (if found)
             1338** ;           DE = line number
             1339** ;           Z-flag set if found.
             1340** ; Destroys: A,B,C,D,E,H,L,F
             1341** ;
0B3957 EB    1342** FINDL:			EX      DE,HL			; DE: Line number (binary)
0B3958 2A    1343** LD      HL,(PAGE_)		; HL: Top of BASIC program area
0B3959 14 
0B395A 56 
0B395B 0B 
0B395C AF    1344** XOR     A               	;  A: 0
0B395D BE    1345** CP      (HL)			; Check for end of program marker
0B395E 3C    1346** INC     A			;  A: 1
0B395F D0    1347** RET     NC			; Return with 1 if 0
0B3960 AF    1348** XOR     A               	; Clear the carry flag
             1349** ;			LD      B,A			;  B: 0
0B3961 01    1350** LD	BC, 0			; BC: 0
0B3962 00 
0B3963 00 
0B3964 00 
             1351** ;
0B3965 4E    1352** FINDL1:			LD      C,(HL)			;  C: The line length
0B3966 E5    1353** PUSH    HL			; Stack the current program counter
0B3967 23    1354** INC     HL			; Skip to the line number bytes
0B3968 7E    1355** LD      A,(HL)			; Fetch the line number (in binary) from the BASIC line in HL
0B3969 23    1356** INC     HL
0B396A 66    1357** LD      H,(HL)
0B396B 6F    1358** LD      L,A
0B396C 52    1359** SBC.S   HL,DE			; Compare with the line number we're searching for
0B396D ED 
0B396E 52 
0B396F E1    1360** POP     HL			; Get the current program counter
0B3970 D0    1361** RET     NC              	; Then return if found or past (Z flag will be set if line number matches)
0B3971 09    1362** ADD     HL,BC			; Skip to the next line (B was set to 0 before the loop was entered)
0B3972 C3    1363** JP      FINDL1			; And loop
0B3973 65 
0B3974 39 
0B3975 0B 
             1364** ;
             1365** ; SETLIN - Search program for line containing address
             1366** ;          Update (LINENO)
             1367** ;   Inputs: Address in (ERRLIN)
             1368** ;  Outputs: Line number in HL and (LINENO)
             1369** ; Destroys: B,C,D,E,H,L,F
             1370** ;
0B3976 01    1371** SETLIN:			LD	BC, 0			; Zero BC for later
0B3977 00 
0B3978 00 
0B3979 00 
             1372** ;			LD      B, 0			; Zero B for later
0B397A ED    1373** LD      DE, (ERRLIN)		; DE: Address of line
0B397B 5B 
0B397C 35 
0B397D 56 
0B397D 0B   
0B397F 2A    1374** LD      HL, (PAGE_)		; HL: Start of user program area
0B3980 14 
0B3981 56 
0B3982 0B 
0B3983 B7    1375** OR      A			; Do a 24 bit compare without destroying HL
0B3984 ED    1376** SBC     HL, DE			;  Z: DE = HL, NC: DE <= HL
0B3985 52 
0B3986 19    1377** ADD     HL, DE			;  C: DE > HL
0B3987 30    1378** JR      NC, SET3		; So skip, as the address is less than or equal to the top of program area
0B3988 1B 
             1379** ;
0B3989 4E    1380** SET1:			LD      C, (HL)			; Get the length of the line; zero indicates the end of the BASIC program
0B398A 0C    1381** INC     C			; This is a way to check for zero without using the accumulator
0B398B 0D    1382** DEC     C			; If it is zero, then...
0B398C 28    1383** JR      Z, SET3			; We've reached the end of the current BASIC program, not found the line
0B398D 16 
0B398E 09    1384** ADD     HL, BC			; Skip to the next line (we set B to 0 at the top of this subroutine)
0B398F ED    1385** SBC     HL, DE			; Do a 24-bit compare; the previous ADD will have cleared the carry flag
0B3990 52 
0B3991 19    1386** ADD     HL, DE
0B3992 38    1387** JR      C, SET1			; Loop whilst DE (the address to search for) is > HL (the current line)
0B3993 F5 
0B3994 ED    1388** SBC     HL, BC			; We've found it, so back up to the beginning of the line
0B3995 42 
0B3996 23    1389** INC     HL			; Skip the length counter
0B3997 11    1390** LD	DE, 0			; Zero DE
0B3998 00 
0B3999 00 
0B399A 00 
0B399B 5E    1391** LD      E, (HL)          	; Fetch the line number
0B399C 23    1392** INC     HL
0B399D 56    1393** LD      D, (HL)
0B399E EB    1394** EX      DE, HL			; HL: The line number
0B399F 22    1395** SET2:			LD      (LINENO), HL		; Store in the variable LINENO
0B39A0 23 
0B39A1 56 
0B39A2 0B 
0B39A3 C9    1396** RET
             1397** ;
0B39A4 21    1398** SET3:			LD      HL, 0			; We've not found the line at this point so
0B39A5 00 
0B39A6 00 
0B39A7 00 
0B39A8 18    1399** JR      SET2			; Set LINENO to 0
0B39A9 F5 
             1400** ;
             1401** ;SAYLN - PRINT " at line nnnn" MESSAGE.
             1402** ;  Outputs: Carry=0 if line number is zero.
             1403** ;           Carry=1 if line number is non-zero.
             1404** ; Destroys: A,B,C,D,E,H,L,F
             1405** ;
0B39AA 2A    1406** SAYLN:			LD      HL,(LINENO)		; Get the LINENO sysvar
0B39AB 23 
0B39AC 56 
0B39AD 0B 
0B39AE 7C    1407** LD      A,H			; If it is zero then
0B39AF B5    1408** OR      L
0B39B0 C8    1409** RET     Z			; Don't need to do anything; return with F:C set to 0
0B39B1 CD    1410** CALL    TELL			; Output the error message
0B39B2 58 
0B39B3 3D 
0B39B4 0B 
0B39B5 20    1411** DB    	" at line ", 0
0B39B6 61 
0B39B7 74 
0B39B8 20 
0B39B8 6C   
0B39B9 69 
0B39BA 6E 
0B39BB 65 
0B39BB 20   
0B39BC 00 
0B39BF 0E    1412** PBCDL:			LD      C,0			; C: Leading character (NUL)
0B39C0 00 
0B39C1 18    1413** JR      PBCD0			; Output the line number; return with F:C set to 1
0B39C2 02 
             1414** ;
             1415** ; PBCD - PRINT NUMBER AS DECIMAL INTEGER.
             1416** ;   Inputs: HL = number (binary).
             1417** ;  Outputs: Carry = 1
             1418** ; Destroys: A,B,C,D,E,H,L,F
             1419** ;
0B39C3 0E    1420** PBCD:			LD      C,' '			; C: Leading character (" ")
0B39C4 20 
0B39C5 06    1421** PBCD0:			LD      B,5			; Number of digits in result
0B39C6 05 
0B39C7 11    1422** LD      DE,10000		; Start off with the 10,000 column
0B39C8 10 
0B39C9 27 
0B39CA 00 
0B39CB AF    1423** PBCD1:			XOR     A			; Counter
0B39CC ED    1424** PBCD2:			SBC     HL,DE			; Loop and count how many 10,000s we have
0B39CD 52 
0B39CE 3C    1425** INC     A
0B39CF 30    1426** JR      NC,PBCD2
0B39D0 FB 
0B39D1 19    1427** ADD     HL,DE			; The loop overruns by one, so adjust here
0B39D2 3D    1428** DEC     A			; A: Number of 10,000s
0B39D3 28    1429** JR      Z,PBCD3			; If it is 0, then skip the next bit
0B39D4 04 
0B39D5 CB    1430** SET     4,C			; C: Set to '0' ASCII (30h)
0B39D6 E1 
0B39D7 CB    1431** SET     5,C
0B39D8 E9 
0B39D9 B1    1432** PBCD3:			OR      C			; A is then an ASCII character, or 00h if we've not processed any non-zero digits yet
0B39DA C4    1433** CALL    NZ,OUTCHR		; If it is not a leading NUL character then output it
0B39DB 17 
0B39DC 39 
0B39DD 0B 
0B39DE 78    1434** LD      A,B			; If on first transition, skip this
0B39DF FE    1435** CP      5			; TODO: Need to find out why
0B39E0 05 
0B39E1 28    1436** JR      Z,PBCD4
0B39E2 06 
0B39E3 29    1437** ADD     HL,HL			; HL x  2 : We shift the number being tested left,
0B39E4 54    1438** LD      D,H			;         : rather than shifting DE right
0B39E5 5D    1439** LD      E,L			;         : This makes a lot of sense
0B39E6 29    1440** ADD     HL,HL			; HL x  4
0B39E7 29    1441** ADD     HL,HL			; HL x  8
0B39E8 19    1442** ADD     HL,DE			; HL x 10
0B39E9 11    1443** PBCD4:			LD      DE,1000			; Set the column heading to 1,000s for subsequent runs
0B39EA E8 
0B39EB 03 
0B39EC 00 
0B39ED 10    1444** DJNZ    PBCD1			; Loop until done
0B39EE DC 
0B39EF 37    1445** SCF				; SCF set for SAYLN in this module
0B39F0 C9    1446** RET
             1447** ;
             1448** ; PUTVAR - CREATE VARIABLE AND INITIALISE TO ZERO.
             1449** ;   Inputs: HL, IY as returned from GETVAR (NZ).
             1450** ;  Outputs: As GETVAR.
             1451** ; Destroys: everything
             1452** ;
0B39F1 CD    1453** PUTVAR:			CALL    CREATE			; Create the variable
0B39F2 76 
0B39F3 3B 
0B39F4 0B 
0B39F5 FD    1454** LD      A,(IY)			; Fetch the next character
0B39F6 7E 
0B39F7 00 
0B39F8 FE    1455** CP      '('			; Check for bad use of array
0B39F9 28 
0B39FA 20    1456** JR      NZ,GETVZ        	; It's fine, so set the exit conditions
0B39FB 70 
0B39FC 3E    1457** ARRAY:			LD      A,14            	; Otherwise Error: 'Array'
0B39FD 0E 
0B39FE C3    1458** ERROR3:			JP      ERROR_
0B39FF 28 
0B3A00 37 
0B3A01 0B 
             1459** ;
             1460** ;GETVAR - GET LOCATION OF VARIABLE, RETURN IN HL & IX
             1461** ;   Inputs: IY addresses first character.
             1462** ;  Outputs: Carry set and NZ if illegal character.
             1463** ;           Z-flag set if variable found, then:
             1464** ;            A = variable type (0,4,5,128 or 129)
             1465** ;            HL = IX = variable pointer.
             1466** ;            IY updated
             1467** ;           If Z-flag & carry reset, then:
             1468** ;            HL, IY set for subsequent PUTVAR call.
             1469** ; Destroys: everything
             1470** ;
0B3A02 FD    1471** GETVAR:			LD      A,(IY)			; Get the first character
0B3A03 7E 
0B3A04 00 
0B3A05 FE    1472** CP      '$'			; Is it a string?
0B3A06 24 
0B3A07 28    1473** JR      Z,GETV4			; Yes, so branch here
0B3A08 69 
0B3A09 FE    1474** CP      '!'			; Is it indirection (32-bit)?
0B3A0A 21 
0B3A0B 28    1475** JR      Z,GETV5			; Yes, so branch here
0B3A0C 69 
0B3A0D FE    1476** CP      '?'			; Is it indirection (8-bit)?
0B3A0E 3F 
0B3A0F 28    1477** JR      Z,GETV6			; Yes, so branch here
0B3A10 69 
             1478** ;
0B3A11 CD    1479** CALL    LOCATE			; Locate the variable
0B3A12 E0 
0B3A13 3A 
0B3A14 0B 
0B3A15 C0    1480** RET     NZ			; And exit here if not found
             1481** ;
             1482** ; At this point:
             1483** ;  HL: Address of variable in memory
             1484** ;   D: Variable type (4 = Integer, 5 = Floating point, 129 = String)
             1485** ;
0B3A16 FD    1486** LD      A,(IY)			; Further checks
0B3A17 7E 
0B3A18 00 
0B3A19 FE    1487** CP      '('             	; Is it an array?
0B3A1A 28 
0B3A1B 20    1488** JR      NZ,GETVX        	; No, so exit
0B3A1C 47 
             1489** ;
             1490** ; We are processing an array at this point
             1491** ;
0B3A1D D5    1492** PUSH    DE              	; Save the variable type (in D)
0B3A1E 7E    1493** LD      A,(HL)          	; Fetch the number of dimensions
0B3A1F B7    1494** OR      A
0B3A20 28    1495** JR      Z,ARRAY			; If there are none, then Error: 'Array'
0B3A21 DA 
0B3A22 23    1496** INC     HL			;
0B3A23 11    1497** LD      DE,0            	; Accumulator
0B3A24 00 
0B3A25 00 
0B3A26 00 
0B3A27 F5    1498** PUSH    AF
0B3A28 FD    1499** INC     IY              	; Skip "("
0B3A29 23 
0B3A2A 18    1500** JR      GETV3
0B3A2B 05 
             1501** ;
0B3A2C F5    1502** GETV2:			PUSH    AF
0B3A2D CD    1503** CALL    COMMA
0B3A2E EA 
0B3A2F 09 
0B3A30 0B 
0B3A31 E5    1504** GETV3:			PUSH    HL
0B3A32 D5    1505** PUSH    DE
0B3A33 CD    1506** CALL    EXPRI			; Get the subscript
0B3A34 D2 
0B3A35 02 
0B3A36 0B 
0B3A37 D9    1507** EXX
0B3A38 D1    1508** POP     DE
0B3A39 E3    1509** EX      (SP),HL
0B3A3A 4E    1510** LD      C,(HL)
0B3A3B 23    1511** INC     HL
0B3A3C 46    1512** LD      B,(HL)
0B3A3D 23    1513** INC     HL
0B3A3E E3    1514** EX      (SP),HL
0B3A3F EB    1515** EX      DE,HL
0B3A40 D5    1516** PUSH    DE
0B3A41 CD    1517** CALL    MUL16			; HL=HL*BC
0B3A42 3A 
0B3A43 18 
0B3A44 0B 
0B3A45 D1    1518** POP     DE
0B3A46 19    1519** ADD     HL,DE
0B3A47 EB    1520** EX      DE,HL
0B3A48 B7    1521** OR      A
0B3A49 ED    1522** SBC     HL,BC
0B3A4A 42 
0B3A4B 3E    1523** LD      A,15
0B3A4C 0F 
0B3A4D 30    1524** JR      NC,ERROR3		; Throw a "Subscript" error
0B3A4E AF 
0B3A4F E1    1525** POP     HL
0B3A50 F1    1526** POP     AF
0B3A51 3D    1527** DEC     A               	; Dimension counter
0B3A52 20    1528** JR      NZ,GETV2
0B3A53 D8 
0B3A54 CD    1529** CALL    BRAKET          	; Check for closing bracket
0B3A55 F7 
0B3A56 09 
0B3A57 0B 
0B3A58 F1    1530** POP     AF              	; Restore the type
0B3A59 E5    1531** PUSH    HL
0B3A5A CD    1532** CALL    X4OR5           	; DE=DE*n
0B3A5B 2D 
0B3A5C 18 
0B3A5D 0B 
0B3A5E E1    1533** POP     HL
0B3A5F 19    1534** ADD     HL,DE
0B3A60 57    1535** LD      D,A             	; The type
0B3A61 FD    1536** LD      A,(IY)
0B3A62 7E 
0B3A63 00 
0B3A64 FE    1537** GETVX:			CP      '?'
0B3A65 3F 
0B3A66 28    1538** JR      Z,GETV9
0B3A67 1E 
0B3A68 FE    1539** CP      '!'
0B3A69 21 
0B3A6A 28    1540** JR      Z,GETV8
0B3A6B 16 
0B3A6C E5    1541** GETVZ:			PUSH    HL              	; Set exit conditions
0B3A6D DD    1542** POP     IX
0B3A6E E1 
0B3A6F 7A    1543** LD      A,D
0B3A70 BF    1544** CP      A
0B3A71 C9    1545** RET
             1546** ;
             1547** ; Process strings, unary & binary indirection:
             1548** ;
0B3A72 3E    1549** GETV4:			LD      A,128           	; Static strings
0B3A73 80 
0B3A74 18    1550** JR      GETV7
0B3A75 05 
             1551** ;
0B3A76 3E    1552** GETV5:			LD      A,4             	; Unary 32-bit indirection
0B3A77 04 
0B3A78 18    1553** JR      GETV7
0B3A79 01 
             1554** ;
0B3A7A AF    1555** GETV6:			XOR     A               	; Unary 8-bit indirection
             1556** ;
0B3A7B 21    1557** GETV7:			LD      HL,0
0B3A7C 00 
0B3A7D 00 
0B3A7E 00 
0B3A7F F5    1558** PUSH    AF
0B3A80 18    1559** JR      GETV0
0B3A81 24 
             1560** ;
0B3A82 06    1561** GETV8:			LD      B,4             	; Binary 32-bt indirection
0B3A83 04 
0B3A84 18    1562** JR      GETVA
0B3A85 02 
             1563** ;
0B3A86 06    1564** GETV9:			LD      B,0             	; Binary 8-bit indirection
0B3A87 00 
             1565** ;
0B3A88 E5    1566** GETVA:			PUSH    HL
0B3A89 DD    1567** POP     IX
0B3A8A E1 
0B3A8B 7A    1568** LD      A,D            		; Fetch the variable type
0B3A8C FE    1569** CP      129			; Is it a string?
0B3A8D 81 
0B3A8E C8    1570** RET     Z               	; Yes, so exit here
0B3A8F C5    1571** PUSH    BC
0B3A90 CD    1572** CALL    LOADN           	; Left operand of the binary indirection (var?index or var!index)
0B3A91 DE 
0B3A92 03 
0B3A93 0B 
0B3A94 CD    1573** CALL    SFIX
0B3A95 2A 
0B3A96 06 
0B3A97 0B 
0B3A98 7D    1574** LD	A,L
0B3A99 D9    1575** EXX
0B3A9A 22    1576** LD	(R0+0),HL
0B3A9B 4A 
0B3A9C 56 
0B3A9D 0B 
0B3A9E 32    1577** LD	(R0+2),A
0B3A9F 4C 
0B3AA0 56 
0B3AA1 0B 
0B3AA2 2A    1578** LD	HL,(R0)			; HL: 24-bit address of the variable in memory
0B3AA3 4A 
0B3AA4 56 
0B3AA5 0B 
             1579** ;
0B3AA6 E5    1580** GETV0:			PUSH    HL			; HL will be 0 for a unary indirection, or the address of the variable for a binary indirection
0B3AA7 FD    1581** INC     IY
0B3AA8 23 
0B3AA9 CD    1582** CALL    ITEMI
0B3AAA ED 
0B3AAB 02 
0B3AAC 0B 
0B3AAD 7D    1583** LD	A,L			;  A: The MSB of the address
0B3AAE D9    1584** EXX
0B3AAF 22    1585** LD	(R0+0),HL		; HL: The LSW of the address
0B3AB0 4A 
0B3AB1 56 
0B3AB2 0B 
0B3AB3 32    1586** LD	(R0+2),A		; R0: L'HL or the 24-bit address
0B3AB4 4C 
0B3AB5 56 
0B3AB6 0B 
0B3AB7 D1    1587** POP     DE
0B3AB8 F1    1588** POP     AF
0B3AB9 2A    1589** LD	HL,(R0)			; HL: L'HL
0B3ABA 4A 
0B3ABB 56 
0B3ABC 0B 
0B3ABD 19    1590** ADD     HL,DE
0B3ABE E5    1591** PUSH    HL
0B3ABF DD    1592** POP     IX
0B3AC0 E1 
0B3AC1 BF    1593** CP      A
0B3AC2 C9    1594** RET
             1595** ;
             1596** ;GETDEF - Find entry for FN or PROC in dynamic area.
             1597** ;   Inputs: IY addresses byte following "DEF" token.
             1598** ;  Outputs: Z flag set if found
             1599** ;           Carry set if neither FN or PROC first.
             1600** ;           If Z: HL points to entry
             1601** ;                 IY addresses delimiter
             1602** ; Destroys: A,D,E,H,L,IY,F
             1603** ;
0B3AC3 FD    1604** GETDEF:			LD      A,(IY+1)		; Get the next character from the tokenised line (the start of the procedure name)
0B3AC4 7E 
0B3AC5 01 
0B3AC6 CD    1605** CALL    RANGE1			; Is it in range: "0" to "9", "A" to "Z", "a' to "z", "@", "_" or "`"?
0B3AC7 43 
0B3AC8 3C 
0B3AC9 0B 
0B3ACA D8    1606** RET     C			; No so return with C set
0B3ACB FD    1607** LD      A,(IY)			; Fetch the current character from the tokenised line
0B3ACC 7E 
0B3ACD 00 
0B3ACE 21    1608** LD      HL,FNPTR		; HL: Address of the dynamic function pointer in ram.asm
0B3ACF 0E 
0B3AD0 56 
0B3AD1 0B 
0B3AD2 FE    1609** CP      FN			; Is it the token FN?
0B3AD3 A4 
0B3AD4 28    1610** JR      Z,LOC2			; Yes, so skip to LOC2 with that pointer to find a match
0B3AD5 4A 
0B3AD6 21    1611** LD      HL,PROPTR		; HL: Address of the dynamic procedure pointer in ram.asm
0B3AD7 11 
0B3AD8 56 
0B3AD9 0B 
0B3ADA FE    1612** CP      PROC			; Is it the token PROC?
0B3ADB F2 
0B3ADC 28    1613** JR      Z,LOC2			; Yes, so skip to LOC2 with that pointer to find a match
0B3ADD 42 
0B3ADE 37    1614** SCF				; No, so just return with C set
0B3ADF C9    1615** RET
             1616** ;
             1617** ; LOCATE - Try to locate variable name in static or dynamic variables.
             1618** ; If illegal first character return carry, non-zero.
             1619** ; If found, return no-carry, zero.
             1620** ; If not found, return no-carry, non-zero.
             1621** ;   Inputs: IY=Addresses first character of name.
             1622** ;            A=(IY)
             1623** ;  Outputs:  F=Z set if found, then:
             1624** ;           IY=addresses terminator
             1625** ;           HL=addresses location of variable
             1626** ;            D=type of variable: 4 = integer
             1627** ;                                5 = floating point
             1628** ;                              129 = string
             1629** ; Destroys: A,D,E,H,L,IY,F
             1630** ;
             1631** ; Variable names can start with any letter of the alphabet (upper or lower case), underscore (_), or the grave accent (`)
             1632** ; They can contain any alphanumeric character and underscore (_)
             1633** ; String variables are postfixed with the dollar ($) character
             1634** ; Integer variables are postfixed with the percent (%) character
             1635** ; Static integer variables are named @%, A% to Z%
             1636** ; All other variables are dynamic
             1637** ;
0B3AE0 D6    1638** LOCATE:			SUB     '@'			; Check for valid range
0B3AE1 40 
0B3AE2 D8    1639** RET     C			; First character not "@", "A" to "Z" or "a" to "z", so not a variable
0B3AE3 21    1640** LD      HL, 0			; Clear HL
0B3AE4 00 
0B3AE5 00 
0B3AE6 00 
0B3AE7 FE    1641** CP      'Z'-'@'+1		; Check for static ("@", "A" to "Z"); if it is not static...
0B3AE8 1B 
0B3AE9 30    1642** JR      NC,LOC0         	; Then branch here
0B3AEA 1E 
0B3AEB 6F    1643** LD	L, A			; HL = A
0B3AEC FD    1644** LD      A,(IY+1)        	; Check the 2nd character
0B3AED 7E 
0B3AEE 01 
0B3AEF FE    1645** CP      '%'			; If not "%" then it is not static...
0B3AF0 25 
0B3AF1 20    1646** JR      NZ,LOC1         	; Branch here
0B3AF2 21 
0B3AF3 FD    1647** LD      A,(IY+2)		; Check the 3rd character
0B3AF4 7E 
0B3AF5 02 
0B3AF6 FE    1648** CP      '('			; If it is "(" (array) then it is not static...
0B3AF7 28 
0B3AF8 28    1649** JR      Z,LOC1          	; Branch here
0B3AF9 1A 
             1650** ;
             1651** ; At this point we're dealing with a static variable
             1652** ;
0B3AFA 29    1653** ADD     HL,HL			; HL: Variable index * 4
0B3AFB 29    1654** ADD	HL,HL
0B3AFC 11    1655** LD      DE,STAVAR       	; The static variable area in memory
0B3AFD 00 
0B3AFE 55 
0B3AFF 0B 
0B3B00 19    1656** ADD     HL,DE			; HL: The address of the static variable
0B3B01 FD    1657** INC     IY			; Skip the program pointer past the static variable name
0B3B02 23 
0B3B03 FD    1658** INC     IY
0B3B04 23 
0B3B05 16    1659** LD      D,4             	; Set the type to be integer
0B3B06 04 
0B3B07 AF    1660** XOR     A			; Set the Z flag
0B3B08 C9    1661** RET
             1662** ;
             1663** ; At this point it's potentially a dynamic variable, just need to do a few more checks
             1664** ;
0B3B09 FE    1665** LOC0:			CP      '_'-'@'			; Check the first character is in
0B3B0A 1F 
0B3B0B D8    1666** RET     C			; the range "_" to
0B3B0C FE    1667** CP      'z'-'@'+1		; "z" (lowercase characters only)
0B3B0D 3B 
0B3B0E 3F    1668** CCF				; If it is not in range then
0B3B0F 3D    1669** DEC     A               	; Set NZ flag and
0B3B10 D8    1670** RET     C			; Exit here
0B3B11 D6    1671** SUB     3			; This brings it in the range of 27 upwards (need to confirm)
0B3B12 03 
0B3B13 6F    1672** LD	L, A			; HL = A
             1673** ;
             1674** ; Yes, it's definitely a dynamic variable at this point...
             1675** ;
0B3B14 7D    1676** LOC1:			LD	A, L			; Fetch variable index
0B3B15 87    1677** ADD	A, A			; x 2
0B3B16 85    1678** ADD	A, L			; x 3
0B3B17 D6    1679** SUB	3			; Subtract 2 TODO: Should be 3
0B3B18 03 
0B3B19 6F    1680** LD	L, A
0B3B1A 11    1681** LD      DE, DYNVAR       	; The dynamic variable storage
0B3B1B 6C 
0B3B1C 55 
0B3B1D 0B 
0B3B1E D8    1682** RET	C			; Bounds check to trap for variable '@'
0B3B1F 19    1683** ADD     HL, DE			; HL: Address of first entry
             1684** ;
             1685** ; Loop through the linked list of variables to find a match
             1686** ;
0B3B20 ED    1687** LOC2:			LD	DE, (HL)		; Fetch the original pointer
0B3B21 17 
0B3B22 E5    1688** PUSH	HL			; Need to preserve HL for LOC6
0B3B23 AF    1689** XOR	A			; Reset carry flag
0B3B24 ED    1690** SBC	HL, HL			; Set HL to 0
0B3B25 62 
0B3B26 ED    1691** SBC	HL, DE			; Compare with 0
0B3B27 52 
0B3B28 E1    1692** POP	HL			; Restore the original pointer
0B3B29 28    1693** JR	Z, LOC6			; If the pointer in DE is zero, the variable is undefined at this point
0B3B2A 49 
             1694** ; LD	HL, DE			; Make a copy of this pointer in HL
0B3B2B D5    1695** push de
0B3B2C E1    1696** pop hl ; how was that even possible?
0B3B2D 23    1697** INC     HL              	; Skip the link (24-bits)
0B3B2E 23    1698** INC     HL
0B3B2F 23    1699** INC	HL			; HL: Address of the variable name in DYNVARS
0B3B30 FD    1700** PUSH    IY			; IY: Address of the variable name in the program
0B3B31 E5 
             1701** ;
0B3B32 7E    1702** LOC3:			LD      A,(HL)         		; Compare
0B3B33 23    1703** INC     HL
0B3B34 FD    1704** INC     IY
0B3B35 23 
0B3B36 FD    1705** CP      (IY)
0B3B37 BE 
0B3B38 00 
0B3B39 28    1706** JR      Z, LOC3			; Keep looping whilst we've got a match...
0B3B3A F7 
0B3B3B B7    1707** OR      A               	; Have we hit a terminator?
0B3B3C 28    1708** JR      Z,LOC5          	; Yes, so maybe we've found a variable
0B3B3D 07 
             1709** ;
0B3B3E FD    1710** LOC4:			POP     IY			; Restore the pointer in the program
0B3B3F E1 
0B3B40 EB    1711** EX      DE, HL			; HL: New pointer in DYNVARS
0B3B41 C3    1712** JP      LOC2            	; Loop round and try again
0B3B42 20 
0B3B43 3B 
0B3B44 0B 
             1713** ;
             1714** ; We might have located a variable at this point, just need to do a few more tests
             1715** ;
0B3B45 FD    1716** LOC5:			DEC     IY
0B3B46 2B 
0B3B47 FD    1717** LD      A,(IY)
0B3B48 7E 
0B3B49 00 
0B3B4A FE    1718** CP      '('
0B3B4B 28 
0B3B4C 28    1719** JR      Z,LOC5A         	; FOUND
0B3B4D 15 
0B3B4E FD    1720** INC     IY
0B3B4F 23 
0B3B50 CD    1721** CALL    RANGE
0B3B51 37 
0B3B52 3C 
0B3B53 0B 
0B3B54 38    1722** JR      C,LOC5A         	; FOUND
0B3B55 0D 
0B3B56 FE    1723** CP      '('
0B3B57 28 
0B3B58 28    1724** JR      Z,LOC4          	; KEEP LOOKING
0B3B59 E4 
0B3B5A FD    1725** LD      A,(IY-1)
0B3B5B 7E 
0B3B5C FF 
0B3B5D CD    1726** CALL    RANGE1
0B3B5E 43 
0B3B5F 3C 
0B3B60 0B 
0B3B61 30    1727** JR      NC,LOC4         	; KEEP LOOKING
0B3B62 DB 
0B3B63 D1    1728** LOC5A:			POP     DE
0B3B64 FD    1729** TYPE_:			LD      A,(IY-1)		; Check the string type postfix
0B3B65 7E 
0B3B66 FF 
0B3B67 FE    1730** CP      '$'			; Is it a string?
0B3B68 24 
0B3B69 16    1731** LD      D,129			; Yes, so return D = 129
0B3B6A 81 
0B3B6B C8    1732** RET     Z
0B3B6C FE    1733** CP      '%'			; Is it an integer?
0B3B6D 25 
0B3B6E 16    1734** LD      D,4			; Yes, so return D = 4
0B3B6F 04 
0B3B70 C8    1735** RET     Z
0B3B71 14    1736** INC     D			; At this point it must be a float
0B3B72 BF    1737** CP      A			; Set the flags
0B3B73 C9    1738** RET
             1739** ;
             1740** ; The variable is undefined at this point; HL will be zero
             1741** ;
0B3B74 3C    1742** LOC6:			INC     A               	; Set NZ flag
0B3B75 C9    1743** RET
             1744** ;
             1745** ; CREATE - CREATE NEW ENTRY, INITIALISE TO ZERO.
             1746** ;   Inputs: HL, IY as returned from LOCATE (NZ).
             1747** ;  Outputs: As LOCATE, GETDEF.
             1748** ; Destroys: As LOCATE, GETDEF.
             1749** ;
0B3B76 AF    1750** CREATE:			XOR     A
0B3B77 ED    1751** LD      DE,(FREE)		; Get the last byte of available RAM
0B3B78 5B 
0B3B79 1D 
0B3B7A 56 
0B3B7A 0B   
0B3B7C ED    1752** LD	(HL), DE		; Store
0B3B7D 1F 
0B3B7E EB    1753** EX      DE,HL
0B3B7F 77    1754** LD      (HL),A			; Clear the link of the new entity
0B3B80 23    1755** INC     HL
0B3B81 77    1756** LD      (HL),A
0B3B82 23    1757** INC     HL
0B3B83 77    1758** LD      (HL),A
0B3B84 23    1759** INC     HL
0B3B85 FD    1760** LOC7:			INC     IY
0B3B86 23 
0B3B87 CD    1761** CALL    RANGE           	; END OF VARIABLE?
0B3B88 37 
0B3B89 3C 
0B3B8A 0B 
0B3B8B 38    1762** JR      C,LOC8
0B3B8C 15 
0B3B8D 77    1763** LD      (HL),A
0B3B8E 23    1764** INC     HL
0B3B8F CD    1765** CALL    RANGE1
0B3B90 43 
0B3B91 3C 
0B3B92 0B 
0B3B93 30    1766** JR      NC,LOC7
0B3B94 F0 
0B3B95 FE    1767** CP      '('
0B3B96 28 
0B3B97 28    1768** JR      Z,LOC8
0B3B98 09 
0B3B99 FD    1769** LD      A,(IY+1)
0B3B9A 7E 
0B3B9B 01 
0B3B9C FE    1770** CP      '('
0B3B9D 28 
0B3B9E 28    1771** JR      Z,LOC7
0B3B9F E5 
0B3BA0 FD    1772** INC     IY
0B3BA1 23 
0B3BA2 36    1773** LOC8:			LD      (HL),0          	; TERMINATOR
0B3BA3 00 
0B3BA4 23    1774** INC     HL
0B3BA5 E5    1775** PUSH    HL
0B3BA6 CD    1776** CALL    TYPE_			; Get the variable type in D
0B3BA7 64 
0B3BA8 3B 
0B3BA9 0B 
0B3BAA 3E    1777** LD      A,4			; If it is an integer then it takes up 4 bytes
0B3BAB 04 
0B3BAC BA    1778** CP      D
0B3BAD 28    1779** JR      Z,LOC9			; So skip the next bit
0B3BAE 01 
0B3BAF 3C    1780** INC     A			; Strings and floats take up 5 bytes (NB: Strings take up 4 in BBC BASIC for Z80)
0B3BB0 36    1781** LOC9:			LD      (HL),0          	; Initialise the memory to zero
0B3BB1 00 
0B3BB2 23    1782** INC     HL
0B3BB3 3D    1783** DEC     A
0B3BB4 20    1784** JR      NZ,LOC9
0B3BB5 FA 
0B3BB6 22    1785** LD      (FREE),HL		; Adjust the stack
0B3BB7 1D 
0B3BB8 56 
0B3BB9 0B 
0B3BBA CD    1786** CALL    CHECK			; Check whether we are out of space
0B3BBB 17 
0B3BBC 16 
0B3BBD 0B 
0B3BBE E1    1787** POP     HL
0B3BBF AF    1788** XOR     A
0B3BC0 C9    1789** RET
             1790** ;
             1791** ; LINNUM - GET LINE NUMBER FROM TEXT STRING
             1792** ;   Inputs: IY = Text Pointer
             1793** ;  Outputs: HL = Line number (zero if none)
             1794** ;           IY updated
             1795** ; Destroys: A,D,E,H,L,IY,F
             1796** ;
             1797** ; This bit of code performs a BASE 10 shift to build up the number
             1798** ; So if the string passed is "345", the algorithm does this:
             1799** ;
             1800** ;    HL : Digit	: Operation
             1801** ; ----- : ----- : ---------
             1802** ; 00000 :	:
             1803** ; 00003 :     3	: Multiply HL  (0) by 10   (0) and add 3   (3)
             1804** ; 00034 :     4 : Multiply HL  (3) by 10  (30) and add 4  (34)
             1805** ; 00345 :     5	: Multiply HL (34) by 10 (340) and add 5 (345)
             1806** ;
             1807** ; The multiply by 10 is done by an unrolled shift and add loop
             1808** ;
0B3BC1 CD    1809** LINNUM:			CALL    NXT			; Skip whitespace to the first character
0B3BC2 38 
0B3BC3 0A 
0B3BC4 0B 
0B3BC5 40    1810** LD.SIS  HL,0			; The running total
0B3BC6 21 
0B3BC7 00 
0B3BC8 00 
0B3BC9 FD    1811** LINNM1:			LD      A,(IY)			; A: Fetch the digit to add in
0B3BCA 7E 
0B3BCB 00 
0B3BCC D6    1812** SUB     '0'			; Sub ASCII '0' to make a binary number (0-9)
0B3BCD 30 
0B3BCE D8    1813** RET     C			; And return if less than 0
0B3BCF FE    1814** CP      10			; Or greater than or equal to 10
0B3BD0 0A 
0B3BD1 D0    1815** RET     NC			; As we've hit a non-numeric character (end of number) at this point
0B3BD2 FD    1816** INC     IY			; Increment the string pointer
0B3BD3 23 
0B3BD4 54    1817** LD      D,H			; This next block multiplys HL by 10, shifting the result left in BASE 10
0B3BD5 5D    1818** LD      E,L			; Store the original number in DE
0B3BD6 52    1819** ADD.S   HL,HL           	; *2
0B3BD7 29 
0B3BD8 38    1820** JR      C,TOOBIG		; At each point, error if > 65535 (carry flag set)
0B3BD9 13 
0B3BDA 52    1821** ADD.S   HL,HL           	; *4S
0B3BDB 29 
0B3BDC 38    1822** JR      C,TOOBIG
0B3BDD 0F 
0B3BDE 52    1823** ADD.S   HL,DE           	; *5
0B3BDF 19 
0B3BE0 38    1824** JR      C,TOOBIG
0B3BE1 0B 
0B3BE2 52    1825** ADD.S   HL,HL           	; *10
0B3BE3 29 
0B3BE4 38    1826** JR      C,TOOBIG
0B3BE5 07 
0B3BE6 5F    1827** LD      E,A			; A->DE: the digit to add in
0B3BE7 16    1828** LD      D,0
0B3BE8 00 
0B3BE9 52    1829** ADD.S   HL,DE           	; Add in the digit to the running total
0B3BEA 19 
0B3BEB 30    1830** JR      NC,LINNM1       	; And if it is still <= 65535, loop
0B3BEC DC 
             1831** ;
0B3BED 3E    1832** TOOBIG:			LD      A,20
0B3BEE 14 
0B3BEF C3    1833** JP      ERROR_           	; Error: "Too big"
0B3BF0 28 
0B3BF1 37 
0B3BF2 0B 
             1834** ;
             1835** ; PAIR - GET PAIR OF LINE NUMBERS FOR RENUMBER/AUTO.
             1836** ;   Inputs: IY = text pointer
             1837** ;  Outputs: HL = first number (10 by default)
             1838** ;           BC = second number (10 by default)
             1839** ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IY,F
             1840** ;
0B3BF3 CD    1841** PAIR:			CALL    LINNUM          	; Parse the first line number
0B3BF4 C1 
0B3BF5 3B 
0B3BF6 0B 
0B3BF7 7C    1842** LD      A,H			; If it is not zero, then...
0B3BF8 B5    1843** OR      L
0B3BF9 20    1844** JR      NZ,PAIR1		; Skip...
0B3BFA 02 
0B3BFB 2E    1845** LD      L,10			; HL: the default value (10)
0B3BFC 0A 
             1846** ;
0B3BFD CD    1847** PAIR1:			CALL    TERMQ			; Check for ELSE, : or CR
0B3BFE 42 
0B3BFF 17 
0B3C00 0B 
0B3C01 FD    1848** INC     IY			; Skip to next character
0B3C02 23 
0B3C03 E5    1849** PUSH    HL			; Stack the first line number
0B3C04 21    1850** LD      HL,10			; HL: the second default (10)
0B3C05 0A 
0B3C06 00 
0B3C07 00 
0B3C08 C4    1851** CALL    NZ,LINNUM       	; Parse the second line number
0B3C09 C1 
0B3C0A 3B 
0B3C0B 0B 
0B3C0C E3    1852** EX      (SP),HL			; HL: The first line number (off the stack)
0B3C0D C1    1853** POP     BC			; BC: Second line number
0B3C0E 78    1854** LD      A,B			; If the second line number is not zero then...
0B3C0F B1    1855** OR      C			; We're good...
0B3C10 C0    1856** RET     NZ			; Exit, otherwise...
0B3C11 CD    1857** CALL    EXTERR			; Throw error: "Silly"
0B3C12 3F 
0B3C13 37 
0B3C14 0B 
0B3C15 53    1858** DB    	"Silly", 0
0B3C16 69 
0B3C17 6C 
0B3C18 6C 
0B3C18 79   
0B3C19 00 
             1859** ;
             1860** ; DLPAIR - GET PAIR OF LINE NUMBERS FOR DELETE/LIST.
             1861** ;   Inputs: IY = text pointer
             1862** ;  Outputs: HL = points to program text
             1863** ;           BC = second number (0 by default)
             1864** ; Destroys: A,B,C,D,E,H,L,IY,F
             1865** ;
0B3C1B CD    1866** DLPAIR:			CALL    LINNUM			; Parse the first line number
0B3C1C C1 
0B3C1D 3B 
0B3C1E 0B 
0B3C1F E5    1867** PUSH    HL			; Stack it
0B3C20 CD    1868** CALL    TERMQ			; Check for ELSE, : or CR
0B3C21 42 
0B3C22 17 
0B3C23 0B 
0B3C24 28    1869** JR      Z,DLP1			; And exit if so
0B3C25 0A 
0B3C26 FE    1870** CP      TIF			; Is the token IF?
0B3C27 E7 
0B3C28 28    1871** JR      Z,DLP1			; Yes, so skip the next bit...
0B3C29 06 
0B3C2A FD    1872** INC     IY			; Otherwise...
0B3C2B 23 
0B3C2C CD    1873** CALL    LINNUM			; Fetch the second line number
0B3C2D C1 
0B3C2E 3B 
0B3C2F 0B 
0B3C30 E3    1874** DLP1:			EX      (SP),HL			; HL: The first line number (off the stack)
0B3C31 CD    1875** CALL    FINDL			; HL: Find the address of the line
0B3C32 57 
0B3C33 39 
0B3C34 0B 
0B3C35 C1    1876** POP     BC			; BC: The second number
0B3C36 C9    1877** RET
             1878** ;
             1879** ; TEST FOR VALID CHARACTER IN VARIABLE NAME:
             1880** ;   Inputs: IY addresses character
             1881** ;  Outputs: Carry set if out-of-range.
             1882** ; Destroys: A,F
             1883** ;
             1884** ; It is called here to check the following
             1885** ; In range: "$", "%" and "("
             1886** ;   Plus all characters in RANGE1 and RANGE2
             1887** ;
0B3C37 FD    1888** RANGE:			LD      A,(IY)			; Fetch the character
0B3C38 7E 
0B3C39 00 
0B3C3A FE    1889** CP      '$'			; Postfix for string variable is valid
0B3C3B 24 
0B3C3C C8    1890** RET     Z
0B3C3D FE    1891** CP      '%'			; Postfix for integer variable is valid
0B3C3E 25 
0B3C3F C8    1892** RET     Z
0B3C40 FE    1893** CP      '('			; Postfix for array is valid
0B3C41 28 
0B3C42 C8    1894** RET     Z
             1895** ;
             1896** ; It is called here to check the following
             1897** ; In range: "0" to "9" and "@"
             1898** ;   Plus all characters in RANGE2
             1899** ;
0B3C43 FE    1900** RANGE1:			CP      '0'			; If it is between '0'...
0B3C44 30 
0B3C45 D8    1901** RET     C
0B3C46 FE    1902** CP      '9'+1			; And '9'...
0B3C47 3A 
0B3C48 3F    1903** CCF
0B3C49 D0    1904** RET     NC			; Then it is valid
0B3C4A FE    1905** CP      '@'             	; The prefix @ is valid (@% controls numeric print formatting - v2.4)
0B3C4B 40 
0B3C4C C8    1906** RET     Z
             1907** ;
             1908** ; It is called here to check the following
             1909** ; In range: "A" to "Z", "a' to "z", "_" and "`"
             1910** ;
0B3C4D FE    1911** RANGE2:			CP      'A'			; If it is between 'A'...
0B3C4E 41 
0B3C4F D8    1912** RET     C
0B3C50 FE    1913** CP      'Z'+1			; And 'Z'...
0B3C51 5B 
0B3C52 3F    1914** CCF
0B3C53 D0    1915** RET     NC			; Then it is valid
0B3C54 FE    1916** CP      '_'			; If it is underscore, grave, or between 'a'
0B3C55 5F 
0B3C56 D8    1917** RET     C
0B3C57 FE    1918** CP      'z'+1			; And 'z'
0B3C58 7B 
0B3C59 3F    1919** CCF				; Then it is valid
0B3C5A C9    1920** RET
             1921** ;
             1922** ; Throw a 'LINE space' error (line too long)
             1923** ; This is called from LEXAN
             1924** ;
0B3C5B AF    1925** SPACE_: 		XOR     A
0B3C5C CD    1926** CALL    EXTERR          	; "LINE space"
0B3C5D 3F 
0B3C5E 37 
0B3C5F 0B 
0B3C60 86    1927** DB    	LINE_MN_, 8, 0
0B3C61 08 
0B3C62 00 
             1928** ;
             1929** ; LEXAN - LEXICAL ANALYSIS.
             1930** ;  Bit 0,C: 1=left, 0=right
             1931** ;  Bit 2,C: 1=in BINARY
             1932** ;  Bit 3,C: 1=in HEX
             1933** ;  Bit 4,C: 1=accept line number
             1934** ;  Bit 5,C: 1=in variable, FN, PROC
             1935** ;  Bit 6,C: 1=in REM, DATA, *
             1936** ;  Bit 7,C: 1=in quotes
             1937** ;   Inputs: IY addresses source string
             1938** ;           DE addresses destination string (must be page boundary)
             1939** ;            C sets initial mode
             1940** ;  Outputs: DE, IY updated
             1941** ;            A holds carriage return
             1942** ;
0B3C63 12    1943** LEXAN1:			LD      (DE),A          	; Transfer to buffer
0B3C64 13    1944** INC     DE              	; Increment the pointers
0B3C65 FD    1945** INC     IY			; And fall through to the main function
0B3C66 23 
             1946** ;
             1947** ; This is the main entry point
             1948** ;
0B3C67 7B    1949** LEXAN2:			LD      A,E             	; Destination buffer on page boundary, so E can be used as length
0B3C68 FE    1950** CP      252             	; If it is >= 252 bytes, then...
0B3C69 FC 
0B3C6A 30    1951** JR      NC,SPACE_        	; Throw a 'LINE space' error (line too long)
0B3C6B EF 
0B3C6C FD    1952** LD      A,(IY)			; Fetch character from source string
0B3C6D 7E 
0B3C6E 00 
0B3C6F FE    1953** CP      CR			; If it is a CR
0B3C70 0D 
0B3C71 C8    1954** RET     Z               	; Then it is end of line; we're done parsing
0B3C72 CD    1955** CALL    RANGE1			; Is it alphanumeric, '@', '_' or '`'
0B3C73 43 
0B3C74 3C 
0B3C75 0B 
0B3C76 30    1956** JR      NC,LEXAN3		; Yes, so skip
0B3C77 06 
0B3C78 CB    1957** RES     5,C             	; FLAG: NOT IN VARIABLE
0B3C79 A9 
0B3C7A CB    1958** RES     3,C             	; FLAG: NOT IN HEX
0B3C7B 99 
0B3C7C CB    1959** RES	2,C			; FLAG: NOT IN BINARY
0B3C7D 91 
             1960** ;
0B3C7E FE    1961** LEXAN3:			CP      ' '			; Ignore spaces
0B3C7F 20 
0B3C80 28    1962** JR      Z,LEXAN1
0B3C81 E1 
0B3C82 FE    1963** CP      ','			; Ignore commas
0B3C83 2C 
0B3C84 28    1964** JR      Z,LEXAN1
0B3C85 DD 
0B3C86 FE    1965** CP	'2'			; If less than '2'
0B3C87 32 
0B3C88 30    1966** JR	NC, @F			; No, so skip
0B3C89 02 
0B3C8A CB    1967** RES	2,C			; FLAG: NOT IN BINARY
0B3C8B 91 
0B3C8C FE    1968** @@:			CP      'G'			; If less then 'G'
0B3C8D 47 
0B3C8E 38    1969** JR      C,LEXAN4		; Yes, so skip
0B3C8F 02 
0B3C90 CB    1970** RES     3,C             	; FLAG: NOT IN HEX
0B3C91 99 
             1971** ;
0B3C92 FE    1972** LEXAN4:			CP      34			; Is it a quote character?
0B3C93 22 
0B3C94 20    1973** JR      NZ,LEXAN5		; No, so skip
0B3C95 05 
0B3C96 CB    1974** RL      C			; Toggle bit 7 of C by shifting it into carry flag
0B3C97 11 
0B3C98 3F    1975** CCF                     	; Toggle the carry
0B3C99 CB    1976** RR      C			; And then shifting it back into bit 7 of C
0B3C9A 19 
             1977** ;
0B3C9B CB    1978** LEXAN5:			BIT     4,C			; Accept line number?
0B3C9C 61 
0B3C9D 28    1979** JR      Z,LEXAN6		; No, so skip
0B3C9E 12 
0B3C9F CB    1980** RES     4,C			; FLAG: DON'T ACCEPT LINE NUMBER
0B3CA0 A1 
0B3CA1 C5    1981** PUSH    BC
0B3CA2 D5    1982** PUSH    DE
0B3CA3 CD    1983** CALL    LINNUM         		; Parse the line number to HL
0B3CA4 C1 
0B3CA5 3B 
0B3CA6 0B 
0B3CA7 D1    1984** POP     DE
0B3CA8 C1    1985** POP     BC
0B3CA9 7C    1986** LD      A,H			; If it is not zero
0B3CAA B5    1987** OR      L
0B3CAB C4    1988** CALL    NZ,ENCODE       	; Then encode the line number HL to the destination (DE)
0B3CAC 24 
0B3CAD 3D 
0B3CAE 0B 
0B3CAF 18    1989** JR      LEXAN2          	; And loop
0B3CB0 B6 
             1990** ;
0B3CB1 0D    1991** LEXAN6:			DEC     C			; Check for C=1 (LEFT)
0B3CB2 28    1992** JR      Z,LEXAN7        	; If so, skip
0B3CB3 0A 
0B3CB4 0C    1993** INC     C			; Otherwise restore C
0B3CB5 20    1994** JR      NZ,LEXAN1		; If C was 0 (RIGHT) then...
0B3CB6 AC 
0B3CB7 B7    1995** OR      A			; Set the flags based on the character
0B3CB8 F4    1996** CALL    P,LEX           	; Tokenise if A < 128
0B3CB9 8F 
0B3CBA 37 
0B3CBB 0B 
0B3CBC 18    1997** JR      LEXAN8			; And skip
0B3CBD 13 
             1998** ;
             1999** ; Processing the LEFT hand side here
             2000** ;
0B3CBE FE    2001** LEXAN7:			CP      '*'			; Is it a '*' (for star commands)
0B3CBF 2A 
0B3CC0 28    2002** JR      Z,LEXAN9		; Yes, so skip to quit tokenising
0B3CC1 17 
0B3CC2 B7    2003** OR      A			; Set the flags based on the character
0B3CC3 F4    2004** CALL    P,LEX           	; Tokenise if A < 128
0B3CC4 8F 
0B3CC5 37 
0B3CC6 0B 
             2005** ;
             2006** ; This bit of code checks if the tokens are one of the pseudo-variables PTR, PAGE, TIME, LOMEM, HIMEM
             2007** ; These tokens are duplicate in the table with a GET version and a SET version offset by the define OFFSET (40h)
             2008** ; Examples:
             2009** ;   LET A% = PAGE : REM This is the GET version
             2010** ;   PAGE = 40000  : REM This is the SET version
             2011** ;
0B3CC7 FE    2012** CP      TOKLO			; TOKLO is 8Fh
0B3CC8 8F 
0B3CC9 38    2013** JR      C,LEXAN8		; If A is < 8Fh then skip to LEX8
0B3CCA 06 
0B3CCB FE    2014** CP      TOKHI+1			; TOKHI is 93h
0B3CCC 94 
0B3CCD 30    2015** JR      NC,LEXAN8		; If A is >= 94h then skip to LEX8
0B3CCE 02 
0B3CCF C6    2016** ADD     A,OFFSET       		; Add OFFSET (40h) to make the token the SET version
0B3CD0 40 
             2017** ;
0B3CD1 FE    2018** LEXAN8:			CP      REM			; If the token is REM
0B3CD2 F4 
0B3CD3 28    2019** JR      Z,LEXAN9		; Then stop tokenising
0B3CD4 04 
0B3CD5 FE    2020** CP      DATA_MN_			; If it is not DATA then
0B3CD6 DC 
0B3CD7 20    2021** JR      NZ,LEXANA		; Skip
0B3CD8 02 
0B3CD9 CB    2022** LEXAN9:			SET     6,C             	; FLAG: STOP TOKENISING
0B3CDA F1 
             2023** ;
0B3CDB FE    2024** LEXANA:			CP      FN			; If the token is FN
0B3CDC A4 
0B3CDD 28    2025** JR      Z,LEXANB
0B3CDE 0A 
0B3CDF FE    2026** CP      PROC			; Or the token is PROC
0B3CE0 F2 
0B3CE1 28    2027** JR      Z,LEXANB		; Then jump to here
0B3CE2 06 
0B3CE3 CD    2028** CALL    RANGE2			; Otherwise check the input is alphanumeric, "_" or "`"
0B3CE4 4D 
0B3CE5 3C 
0B3CE6 0B 
0B3CE7 38    2029** JR      C,LEXANC		; Jump here if out of range
0B3CE8 02 
             2030** ;
0B3CE9 CB    2031** LEXANB:			SET     5,C             	; FLAG: IN VARIABLE/FN/PROC
0B3CEA E9 
0B3CEB FE    2032** LEXANC:			CP      '&'			; Check for hex prefix
0B3CEC 26 
0B3CED 20    2033** JR      NZ,LEXAND		; If not, skip
0B3CEE 02 
0B3CEF CB    2034** SET     3,C             	; FLAG: IN HEX
0B3CF0 D9 
             2035** ;
0B3CF1 FE    2036** LEXAND:			CP	'%'			; Check for binary prefix
0B3CF2 25 
0B3CF3 20    2037** JR	NZ,LEXANE		; If not, skip
0B3CF4 02 
0B3CF5 CB    2038** SET	2,C			; FLAG: IN BINARY
0B3CF6 D1 
             2039** ;
0B3CF7 21    2040** LEXANE:			LD      HL,LIST1		; List of tokens that must be followed by a line number
0B3CF8 1B 
0B3CF9 3D 
0B3CFA 0B 
0B3CFB C5    2041** PUSH    BC
0B3CFC 01    2042** LD      BC,LIST1L		; The list length
0B3CFD 06 
0B3CFE 00 
0B3CFF 00 
0B3D00 ED    2043** CPIR				; Check if the token is in this list
0B3D01 B1 
0B3D02 C1    2044** POP     BC
0B3D03 20    2045** JR      NZ,LEXANF		; If not, then skip
0B3D04 02 
0B3D05 CB    2046** SET     4,C             	; FLAG: ACCEPT LINE NUMBER
0B3D06 E1 
             2047** ;
0B3D07 21    2048** LEXANF:			LD      HL,LIST2		; List of tokens that switch the lexical analysis back to LEFT mode
0B3D08 1F 
0B3D09 3D 
0B3D0A 0B 
0B3D0B C5    2049** PUSH    BC
0B3D0C 01    2050** LD      BC,LIST2L		; The list length
0B3D0D 05 
0B3D0E 00 
0B3D0F 00 
0B3D10 ED    2051** CPIR				; Check if the token is in this list
0B3D11 B1 
0B3D12 C1    2052** POP     BC
0B3D13 20    2053** JR      NZ,LEXANG		; If not, then skip
0B3D14 02 
0B3D15 CB    2054** SET     0,C             	; FLAG: ENTER LEFT MODE
0B3D16 C1 
0B3D17 C3    2055** LEXANG:			JP      LEXAN1			; And loop
0B3D18 63 
0B3D19 3C 
0B3D1A 0B 
             2056** 
             2057** ;
             2058** ; LIST1: List of tokens that must be followed by line numbers
             2059** ; LIST2: List of tokens that switch the lexical analysis back to LEFT mode
             2060** ;
0B3D1B E5    2061** LIST1:			DB	GOTO
0B3D1C E4    2062** DB	GOSUB
0B3D1D F7    2063** DB	RESTOR
0B3D1E FC    2064** DB	TRACE
0B3D1F 8C    2065** LIST2:			DB	THEN_MN_
0B3D20 8B    2066** DB	ELSE_MN_
             2067** LIST1L:			EQU     $-LIST1
0B3D21 F5    2068** DB	REPEAT
0B3D22 85    2069** DB	TERROR_MN
0B3D23 3A    2070** DB    	':'
             2071** LIST2L:			EQU     $-LIST2
             2072** ;
             2073** ; ENCODE - ENCODE LINE NUMBER INTO PSEUDO-BINARY FORM.
             2074** ;   Inputs: HL=line number, DE=string pointer
             2075** ;  Outputs: DE updated, BIT 4,C set.
             2076** ; Destroys: A,B,C,D,E,F
             2077** ;
             2078** ; Thanks to Matt Godblot for this explanation (https://xania.org/200711/bbc-basic-line-number-format)
             2079** ;
             2080** ; The line number is spread over three bytes and kept in the range of normal ASCII values so the interpreter
             2081** ; can make this short cut in skipping to the non-ASCII token ELSE. The algorithm used splits the top two bits off
             2082** ; each of the two bytes of the 16-bit line number. These bits are combined (in binary as 00LlHh00),
             2083** ; exclusive-ORred with 0x54, and stored as the first byte of the 3-byte sequence. The remaining six bits of
             2084** ; each byte are then stored, in LO/HI order, ORred with 0x40.
             2085** ;
0B3D24 CB    2086** ENCODE:			SET     4,C			; Set bit 4 of C (for lexical analysis - accept line number)
0B3D25 E1 
0B3D26 EB    2087** EX      DE, HL			; HL: string pointer, DE: line number
0B3D27 36    2088** LD      (HL), LINO_MN		; Store 8Dh first to flag next bytes as an encoded line number
0B3D28 8D 
0B3D29 23    2089** INC     HL
0B3D2A 7A    2090** LD      A,D			; Get the high byte
0B3D2B E6    2091** AND     0C0H			; Get the top two bits	DD000000
0B3D2C C0 
0B3D2D 0F    2092** RRCA				; Shift right		00DD0000
0B3D2E 0F    2093** RRCA
0B3D2F 47    2094** LD      B,A			; Store in B
0B3D30 7B    2095** LD      A,E			; Get the low byte
0B3D31 E6    2096** AND     0C0H			; Get the top two bits	EE000000
0B3D32 C0 
0B3D33 B0    2097** OR      B			; Combine with D	EEDD0000
0B3D34 0F    2098** RRCA				; Shift right		00EEDD00
0B3D35 0F    2099** RRCA
0B3D36 EE    2100** XOR     01010100B		; XOR with 54h
0B3D37 54 
0B3D38 77    2101** LD      (HL),A			; Store this as the second byte
0B3D39 23    2102** INC     HL
0B3D3A 7B    2103** LD      A,E			; Get the low byte
0B3D3B E6    2104** AND     3FH			; Strip the top two bits off
0B3D3C 3F 
0B3D3D F6    2105** OR      '@'			; OR with 40h
0B3D3E 40 
0B3D3F 77    2106** LD      (HL),A			; Store
0B3D40 23    2107** INC     HL
0B3D41 7A    2108** LD      A,D			; Get the high byte
0B3D42 E6    2109** AND     3FH			; Strip the top two bits off
0B3D43 3F 
0B3D44 F6    2110** OR      '@'			; OR with 40h
0B3D45 40 
0B3D46 77    2111** LD      (HL),A			; Store
0B3D47 23    2112** INC     HL
0B3D48 EB    2113** EX      DE,HL			; DE: string pointer, HL: line number
0B3D49 C9    2114** RET
             2115** ;
             2116** ; TEXT - OUTPUT MESSAGE.
             2117** ;   Inputs: HL addresses text (terminated by nul)
             2118** ;  Outputs: HL addresses character following nul.
             2119** ; Destroys: A,H,L,F
             2120** ;
0B3D4A 2A    2121** REPORT:			LD      HL, (ERRTXT)		; Output an error message pointed to by ERRTXT
0B3D4B 2F 
0B3D4C 56 
0B3D4D 0B 
             2122** ;
0B3D4E 7E    2123** TEXT_:			LD      A, (HL)			; Fetch the character
0B3D4F 23    2124** INC     HL			; Increment pointer to next character
0B3D50 B7    2125** OR      A			; Check for the nul (0) string terminator
0B3D51 C8    2126** RET     Z			; And return if so
0B3D52 CD    2127** CALL    OUT_			; Output the character; note that OUT_ will detokenise tokens
0B3D53 34 
0B3D54 39 
0B3D55 0B 
0B3D56 18    2128** JR      TEXT_			; And loop
0B3D57 F6 
             2129** ;
             2130** ; TELL - OUTPUT MESSAGE.
             2131** ;   Inputs: Text follows subroutine call (term=nul)
             2132** ; Destroys: A,F
             2133** ;
             2134** ; Example usage:
             2135** ;
             2136** ;	CALL	TELL			Call the function
             2137** ;	DB	"Hello World", 0	Followed by a zero terminated string
             2138** ;	LD	A, (1234H)		Program execution will carry on here after the message is output
             2139** ;
0B3D58 E3    2140** TELL:			EX      (SP), HL		; Get the return address off the stack into HL, this is the
0B3D59 CD    2141** CALL    TEXT_			; first byte of the string that follows it. Print it, then
0B3D5A 4E 
0B3D5B 3D 
0B3D5C 0B 
0B3D5D E3    2142** EX      (SP), HL		; HL will point to the next instruction, swap this back onto the stack
0B3D5E C9    2143** RET				; at this point we'll return to the first instruction after the message
              0008* include "basic/misc.asm"
             0001** ;
             0002** ; Title:	BBC Basic for AGON - Miscellaneous helper functions
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	12/05/2023
             0006** ;
             0007** ; Modinfo:
             0008** 
             0009** ; INCLUDE	"equs.inc"
             0010** ; INCLUDE	"macros.inc"
             0011** 
             0012** ; .ASSUME	ADL = 1
             0013** 
             0014** ; SEGMENT CODE
             0015** 
             0016** ; XDEF	ASC_TO_NUMBER
             0017** ; XDEF	SWITCH_A
             0018** ; XDEF	NULLTOCR
             0019** ; XDEF	CRTONULL
             0020** ; XDEF	CSTR_FNAME
             0021** ; XDEF	CSTR_LINE
             0022** ; XDEF	CSTR_FINDCH
             0023** ; XDEF	CSTR_ENDSWITH
             0024** ; XDEF	CSTR_CAT
             0025** 
             0026** ; XREF	OSWRCH
             0027** ; XREF	KEYWDS
             0028** ; XREF	KEYWDL
             0029** 
             0030** ; Read a number and convert to binary
             0031** ; If prefixed with &, will read as hex, otherwise decimal
             0032** ;   Inputs: HL: Pointer in string buffer
             0033** ;  Outputs: HL: Updated text pointer
             0034** ;           DE: Value
             0035** ;            A: Terminator (spaces skipped)
             0036** ; Destroys: A,D,E,H,L,F
             0037** ;
0B3D5F C5    0038** ASC_TO_NUMBER:		PUSH	BC			; Preserve BC
0B3D60 11    0039** LD	DE, 0			; Initialise DE
0B3D61 00 
0B3D62 00 
0B3D63 00 
0B3D64 CD    0040** CALL	SKIPSPC			; Skip whitespace
0B3D65 A6 
0B3D66 3D 
0B3D67 0B 
0B3D68 7E    0041** LD	A, (HL)			; Read first character
0B3D69 FE    0042** CP	'&'			; Is it prefixed with '&' (HEX number)?
0B3D6A 26 
0B3D6B 20    0043** JR	NZ, ASC_TO_NUMBER3	; Jump to decimal parser if not
0B3D6C 1F 
0B3D6D 23    0044** INC	HL			; Otherwise fall through to ASC_TO_HEX
             0045** ;
0B3D6E 7E    0046** ASC_TO_NUMBER1:		LD	A, (HL)			; Fetch the character
0B3D6F CD    0047** CALL    UPPERC			; Convert to uppercase
0B3D70 B4 
0B3D71 3D 
0B3D72 0B 
0B3D73 D6    0048** SUB	'0'			; Normalise to 0
0B3D74 30 
0B3D75 38    0049** JR 	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0B3D76 2E 
0B3D77 FE    0050** CP 	10			; Check if >= 10
0B3D78 0A 
0B3D79 38    0051** JR 	C,ASC_TO_NUMBER2	; No, so skip next bit
0B3D7A 06 
0B3D7B D6    0052** SUB 	7			; Adjust ASCII A-F to nibble
0B3D7C 07 
0B3D7D FE    0053** CP 	16			; Check for > F
0B3D7E 10 
0B3D7F 30    0054** JR 	NC, ASC_TO_NUMBER4	; Return if out of range
0B3D80 24 
0B3D81 EB    0055** ASC_TO_NUMBER2:		EX 	DE, HL 			; Shift DE left 4 times
0B3D82 29    0056** ADD	HL, HL
0B3D83 29    0057** ADD	HL, HL
0B3D84 29    0058** ADD	HL, HL
0B3D85 29    0059** ADD	HL, HL
0B3D86 EB    0060** EX	DE, HL
0B3D87 B3    0061** OR      E			; OR the new digit in to the least significant nibble
0B3D88 5F    0062** LD      E, A
0B3D89 23    0063** INC     HL			; Onto the next character
0B3D8A 18    0064** JR      ASC_TO_NUMBER1		; And loop
0B3D8B E2 
             0065** ;
0B3D8C 7E    0066** ASC_TO_NUMBER3:		LD	A, (HL)
0B3D8D D6    0067** SUB	'0'			; Normalise to 0
0B3D8E 30 
0B3D8F 38    0068** JR	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0B3D90 14 
0B3D91 FE    0069** CP	10			; Check if >= 10
0B3D92 0A 
0B3D93 30    0070** JR	NC, ASC_TO_NUMBER4	; Return if >= 10
0B3D94 10 
0B3D95 EB    0071** EX 	DE, HL 			; Stick DE in HL
0B3D96 44    0072** LD	B, H 			; And copy HL into BC
0B3D97 4D    0073** LD	C, L
0B3D98 29    0074** ADD	HL, HL 			; x 2
0B3D99 29    0075** ADD	HL, HL 			; x 4
0B3D9A 09    0076** ADD	HL, BC 			; x 5
0B3D9B 29    0077** ADD	HL, HL 			; x 10
0B3D9C EB    0078** EX	DE, HL
             0079** ADD8U_DE 			; Add A to DE (macro)
0B3D9D 83   0001**M ADD	A, E
0B3D9E 5F   0002**M LD	E, A
0B3D9F 8A   0003**M ADC	A, D
0B3DA0 93   0004**M SUB	E
0B3DA1 57   0005**M LD	D, A
0B3DA2 23    0080** INC	HL
0B3DA3 18    0081** JR	ASC_TO_NUMBER3
0B3DA4 E7 
0B3DA5 C1    0082** ASC_TO_NUMBER4:		POP	BC 			; Fall through to SKIPSPC here
             0083** 
             0084** ; Skip a space
             0085** ; HL: Pointer in string buffer
             0086** ;
0B3DA6 7E    0087** SKIPSPC:			LD      A, (HL)
0B3DA7 FE    0088** CP      ' '
0B3DA8 20 
0B3DA9 C0    0089** RET     NZ
0B3DAA 23    0090** INC     HL
0B3DAB 18    0091** JR      SKIPSPC
0B3DAC F9 
             0092** 
             0093** ; Skip a string
             0094** ; HL: Pointer in string buffer
             0095** ;
0B3DAD 7E    0096** SKIPNOTSP:		LD	A, (HL)
0B3DAE FE    0097** CP	' '
0B3DAF 20 
0B3DB0 C8    0098** RET	Z
0B3DB1 23    0099** INC	HL
0B3DB2 18    0100** JR	SKIPNOTSP
0B3DB3 F9 
             0101** 
             0102** ; Convert a character to upper case
             0103** ;  A: Character to convert
             0104** ;
0B3DB4 E6    0105** UPPERC:  		AND     7FH
0B3DB5 7F 
0B3DB6 FE    0106** CP      '`'
0B3DB7 60 
0B3DB8 D8    0107** RET     C
0B3DB9 E6    0108** AND     5FH			; Convert to upper case
0B3DBA 5F 
0B3DBB C9    0109** RET
             0110** 
             0111** ; Switch on A - lookup table immediately after call
             0112** ;  A: Index into lookup table
             0113** ;
0B3DBC E3    0114** SWITCH_A:		EX	(SP), HL		; Swap HL with the contents of the top of the stack
0B3DBD 87    0115** ADD	A, A			; Multiply A by two
             0116** ADD8U_HL 			; Add to HL (macro)
0B3DBE 85   0001**M ADD	A, L
0B3DBF 6F   0002**M LD	L, A
0B3DC0 8C   0003**M ADC	A, H
0B3DC1 95   0004**M SUB	L
0B3DC2 67   0005**M LD	H, A
0B3DC3 7E    0117** LD	A, (HL)			; follow the call. Fetch an address from the
0B3DC4 23    0118** INC	HL 			; table.
0B3DC5 66    0119** LD	H, (HL)
0B3DC6 6F    0120** LD	L, A
0B3DC7 E3    0121** EX	(SP), HL		; Swap this new address back, restores HL
0B3DC8 C9    0122** RET				; Return program control to this new address
             0123** 
             0124** ; Convert the buffer to a null terminated string and back
             0125** ; HL: Buffer address
             0126** ;
0B3DC9 C5    0127** NULLTOCR:		PUSH 	BC
0B3DCA 06    0128** LD	B, 0
0B3DCB 00 
0B3DCC 0E    0129** LD	C, CR
0B3DCD 0D 
0B3DCE 18    0130** JR	CRTONULL0
0B3DCF 05 
             0131** ;
0B3DD0 C5    0132** CRTONULL:		PUSH	BC
0B3DD1 06    0133** LD	B, CR
0B3DD2 0D 
0B3DD3 0E    0134** LD	C, 0
0B3DD4 00 
             0135** ;
0B3DD5 E5    0136** CRTONULL0:		PUSH	HL
0B3DD6 7E    0137** CRTONULL1:		LD	A, (HL)
0B3DD7 B8    0138** CP 	B
0B3DD8 28    0139** JR	Z, CRTONULL2
0B3DD9 03 
0B3DDA 23    0140** INC	HL
0B3DDB 18    0141** JR	CRTONULL1
0B3DDC F9 
0B3DDD 71    0142** CRTONULL2:		LD	(HL), C
0B3DDE E1    0143** POP 	HL
0B3DDF C1    0144** POP	BC
0B3DE0 C9    0145** RET
             0146** 
             0147** ; Copy a filename to DE and zero terminate it
             0148** ; HL: Source
             0149** ; DE: Destination (ACCS)
             0150** ;
0B3DE1 7E    0151** CSTR_FNAME:		LD	A, (HL)			; Get source
0B3DE2 FE    0152** CP	32			; Is it space
0B3DE3 20 
0B3DE4 28    0153** JR	Z, @F
0B3DE5 09 
0B3DE6 FE    0154** CP	CR			; Or is it CR
0B3DE7 0D 
0B3DE8 28    0155** JR	Z, @F
0B3DE9 05 
0B3DEA 12    0156** LD	(DE), A			; No, so store
0B3DEB 23    0157** INC	HL			; Increment
0B3DEC 13    0158** INC	DE
0B3DED 18    0159** JR	CSTR_FNAME		; And loop
0B3DEE F2 
0B3DEF AF    0160** @@:			XOR	A			; Zero terminate the target string
0B3DF0 12    0161** LD	(DE), A
0B3DF1 13    0162** INC	DE			; And point to next free address
0B3DF2 C9    0163** RET
             0164** 
             0165** ; Copy a CR terminated line to DE and zero terminate it
             0166** ; HL: Source
             0167** ; DE: Destination (ACCS)
             0168** ;
0B3DF3 7E    0169** CSTR_LINE:		LD	A, (HL)			; Get source
0B3DF4 FE    0170** CP	CR			; Is it CR
0B3DF5 0D 
0B3DF6 28    0171** JR	Z, @F
0B3DF7 05 
0B3DF8 12    0172** LD	(DE), A			; No, so store
0B3DF9 23    0173** INC	HL			; Increment
0B3DFA 13    0174** INC	DE
0B3DFB 18    0175** JR	CSTR_LINE		; And loop
0B3DFC F6 
0B3DFD AF    0176** @@:			XOR	A			; Zero terminate the target string
0B3DFE 12    0177** LD	(DE), A
0B3DFF 13    0178** INC	DE			; And point to next free address
0B3E00 C9    0179** RET
             0180** 
             0181** ; Find the first occurrence of a character (case sensitive)
             0182** ; HL: Source
             0183** ;  C: Character to find
             0184** ; Returns:
             0185** ; HL: Pointer to character, or end of string marker
             0186** ;
0B3E01 7E    0187** CSTR_FINDCH:		LD	A, (HL)			; Get source
0B3E02 B9    0188** CP	C			; Is it our character?
0B3E03 C8    0189** RET	Z			; Yes, so exit
0B3E04 B7    0190** OR	A			; Is it the end of string?
0B3E05 C8    0191** RET	Z			; Yes, so exit
0B3E06 23    0192** INC	HL
0B3E07 18    0193** JR	CSTR_FINDCH
0B3E08 F8 
             0194** 
             0195** ; Check whether a string ends with another string (case insensitive)
             0196** ; HL: Source
             0197** ; DE: The substring we want to test with
             0198** ; Returns:
             0199** ;  F: Z if HL ends with DE, otherwise NZ
             0200** ;
0B3E09 7E    0201** CSTR_ENDSWITH:		LD	A, (HL)			; Get the source string byte
0B3E0A CD    0202** CALL	UPPERC			; Convert to upper case
0B3E0B B4 
0B3E0C 3D 
0B3E0D 0B 
0B3E0E 4F    0203** LD	C, A
0B3E0F 1A    0204** LD	A, (DE)			; Get the substring byte
0B3E10 B9    0205** CP	C
0B3E11 C0    0206** RET	NZ			; Return NZ if at any point the strings don't match
0B3E12 B1    0207** OR	C			; Check whether both bytes are zero
0B3E13 C8    0208** RET	Z			; If so, return, as we have reached the end of both strings
0B3E14 23    0209** INC	HL
0B3E15 13    0210** INC	DE
0B3E16 18    0211** JR	CSTR_ENDSWITH		; And loop
0B3E17 F1 
             0212** 
             0213** ; Concatenate a string onto the end of another string
             0214** ; HL: Source
             0215** ; DE: Second string
             0216** ;
0B3E18 7E    0217** CSTR_CAT:		LD	A, (HL)			; Loop until we find the end of the first string
0B3E19 B7    0218** OR	A
0B3E1A 28    0219** JR	Z, CSTR_CAT_1
0B3E1B 03 
0B3E1C 23    0220** INC	HL
0B3E1D 18    0221** JR	CSTR_CAT
0B3E1E F9 
             0222** ;
0B3E1F 1A    0223** CSTR_CAT_1:		LD	A, (DE)			; Copy the second string onto the end of the first string
0B3E20 77    0224** LD	(HL), A
0B3E21 B7    0225** OR	A			; Check for end of string
0B3E22 C8    0226** RET	Z			; And return
0B3E23 23    0227** INC	HL
0B3E24 13    0228** INC	DE
0B3E25 18    0229** JR	CSTR_CAT_1		; Loop until finished
0B3E26 F8 
              0009* include "basic/patch.asm"
             0001** ;
             0002** ; Title:	BBC Basic for AGON
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	15/11/2023
             0006** ;
             0007** ; Modinfo:
             0008** ; 11/07/2023:	Fixed *BYE for ADL mode
             0009** ; 15/11/2023:	Improved OSLOAD_TXT; now handles LF terminated files, files with no trailing LF or CR/LF at end
             0010** 
             0011** ; .ASSUME	ADL = 1
             0012** 
             0013** ; INCLUDE	"equs.inc"
             0014** ; INCLUDE "macros.inc"
             0015** ; INCLUDE "mos_api.inc"	; In MOS/src
             0016** 
             0017** ; SEGMENT CODE
             0018** 
             0019** ; XDEF	OSWRCH
             0020** ; XDEF	OSLINE
             0021** ; XDEF	ESCSET
             0022** ; XDEF	PUTIME
             0023** ; XDEF	GETIME
             0024** ; XDEF	PUTCSR
             0025** ; XDEF 	GETCSR
             0026** ; XDEF	OSRDCH
             0027** ; XDEF	PROMPT
             0028** ; XDEF	OSKEY
             0029** ; XDEF	TRAP
             0030** ; XDEF	LTRAP
             0031** ; XDEF	OSINIT
             0032** ; XDEF	OSCLI
             0033** ; XDEF	OSBPUT
             0034** ; XDEF	OSBGET
             0035** ; XDEF	OSSTAT
             0036** ; XDEF	OSSHUT
             0037** ; XDEF	OSOPEN
             0038** ; XDEF	OSCALL
             0039** ; XDEF	GETPTR
             0040** ; XDEF	PUTPTR
             0041** ; XDEF	GETEXT
             0042** ; XDEF	GETIMS
             0043** ; XDEF	RESET
             0044** ; XDEF	OSLOAD
             0045** ; XDEF	OSSAVE
             0046** ; XDEF	EXPR_W2
             0047** ; XDEF	STAR_VERSION
             0048** 
             0049** ; XREF	_end			; In init.asm
             0050** 
             0051** ; XREF	ASC_TO_NUMBER
             0052** ; XREF	RAM_START
             0053** ; XREF	RAM_END
             0054** ; XREF	FLAGS
             0055** ; XREF	ESCAPE
             0056** ; XREF	USER
             0057** ; XREF	RAM_Top
             0058** ; XREF	EXTERR
             0059** ; XREF	COUNT0
             0060** ; XREF	EXPRI
             0061** ; XREF	COMMA
             0062** ; XREF	XEQ
             0063** ; XREF	NXT
             0064** ; XREF	NULLTOCR
             0065** ; XREF	CRLF
             0066** ; XREF	CSTR_FNAME
             0067** ; XREF	CSTR_LINE
             0068** ; XREF	CSTR_FINDCH
             0069** ; XREF	CSTR_ENDSWITH
             0070** ; XREF	CSTR_CAT
             0071** ; XREF	FINDL
             0072** ; XREF	OUT_
             0073** ; XREF	ERROR_
             0074** ; XREF	ONEDIT
             0075** ; XREF	TELL
             0076** ; XREF	OSWRCHPT
             0077** ; XREF	OSWRCHCH
             0078** ; XREF	OSWRCHFH
             0079** ; XREF	LISTON
             0080** ; XREF	LISTIT
             0081** ; XREF	PAGE_
             0082** ; XREF	ONEDIT1
             0083** ; XREF	CLEAN
             0084** ; XREF	NEWIT
             0085** ; XREF	BAD
             0086** ; XREF	VBLANK_INIT
             0087** ; XREF	VBLANK_STOP
             0088** ; XREF	KEYDOWN
             0089** ; XREF	KEYASCII
             0090** ; XREF	WIDTH
             0091** ; XREF	ASSEM
             0092** 
             0093** ; OSLINE: Invoke the line editor
             0094** ;
0B3E27 1E    0095** OSLINE:			LD 	E, 1			; Default is to clear the buffer
0B3E28 01 
             0096** 
             0097** ; Entry point to line editor that does not clear the buffer
             0098** ;
0B3E29 FD    0099** OSLINE1:		PUSH	IY
0B3E2A E5 
0B3E2B E5    0100** PUSH	HL			; Buffer address
0B3E2C 01    0101** LD	BC, 256			; Buffer length
0B3E2D 00 
0B3E2E 01 
0B3E2F 00 
             0102** MOSCALL	mos_editline		; Call the MOS line editor
0B3E30 3E   0001**M LD	A, function
0B3E31 09 
0B3E32 49   0002**M RST.LIS	08h
0B3E33 CF 
0B3E34 E1    0103** POP	HL			; Pop the address
0B3E35 FD    0104** POP	IY
0B3E36 E1 
0B3E37 F5    0105** PUSH	AF			; Stack the return value (key pressed)
0B3E38 CD    0106** CALL	NULLTOCR		; Turn the 0 character to a CR
0B3E39 C9 
0B3E3A 3D 
0B3E3B 0B 
0B3E3C CD    0107** CALL	CRLF			; Display CRLF
0B3E3D 0F 
0B3E3E 39 
0B3E3F 0B 
0B3E40 F1    0108** POP	AF
0B3E41 FE    0109** CP	1Bh 			; Check if ESC terminated the input
0B3E42 1B 
0B3E43 CA    0110** JP	Z, LTRAP1 		; Yes, so do the ESC thing
0B3E44 3F 
0B3E45 3F 
0B3E46 0B 
0B3E47 3A    0111** LD	A, (FLAGS)		; Otherwise
0B3E48 42 
0B3E49 56 
0B3E4A 0B 
0B3E4B CB    0112** RES	7, A 			; Clear the escape flag
0B3E4C BF 
0B3E4D 32    0113** LD	(FLAGS), A
0B3E4E 42 
0B3E4F 56 
0B3E50 0B 
0B3E51 CD    0114** CALL	WAIT_VBLANK 		; Wait a frame
0B3E52 05 
0B3E53 41 
0B3E54 0B 
0B3E55 AF    0115** XOR	A			; Return A = 0
0B3E56 32    0116** LD	(KEYDOWN), A
0B3E57 47 
0B3E58 56 
0B3E59 0B 
0B3E5A 32    0117** LD	(KEYASCII), A
0B3E5B 48 
0B3E5C 56 
0B3E5D 0B 
0B3E5E C9    0118** RET
             0119** 
             0120** ; PUTIME: set current time to DE:HL, in centiseconds.
             0121** ;
0B3E5F DD    0122** PUTIME:			PUSH 	IX
0B3E60 E5 
             0123** MOSCALL	mos_sysvars
0B3E61 3E   0001**M LD	A, function
0B3E62 08 
0B3E63 49   0002**M RST.LIS	08h
0B3E64 CF 
0B3E65 DD    0124** LD	(IX + sysvar_time + 0), L
0B3E66 75 
0B3E67 00 
0B3E68 DD    0125** LD	(IX + sysvar_time + 1), H
0B3E69 74 
0B3E6A 01 
0B3E6B DD    0126** LD	(IX + sysvar_time + 2), E
0B3E6C 73 
0B3E6D 02 
0B3E6E DD    0127** LD	(IX + sysvar_time + 3), D
0B3E6F 72 
0B3E70 03 
0B3E71 DD    0128** POP	IX
0B3E72 E1 
0B3E73 C9    0129** RET
             0130** 
             0131** ; GETIME: return current time in DE:HL, in centiseconds
             0132** ;
0B3E74 DD    0133** GETIME:			PUSH 	IX
0B3E75 E5 
             0134** MOSCALL	mos_sysvars
0B3E76 3E   0001**M LD	A, function
0B3E77 08 
0B3E78 49   0002**M RST.LIS	08h
0B3E79 CF 
0B3E7A DD    0135** LD	L, (IX + sysvar_time + 0)
0B3E7B 6E 
0B3E7C 00 
0B3E7D DD    0136** LD	H, (IX + sysvar_time + 1)
0B3E7E 66 
0B3E7F 01 
0B3E80 DD    0137** LD	E, (IX + sysvar_time + 2)
0B3E81 5E 
0B3E82 02 
0B3E83 DD    0138** LD	D, (IX + sysvar_time + 3)
0B3E84 56 
0B3E85 03 
0B3E86 DD    0139** POP	IX
0B3E87 E1 
0B3E88 C9    0140** RET
             0141** 
             0142** ; PUTCSR: move to cursor to x=DE, y=HL
             0143** ;
0B3E89 3E    0144** PUTCSR:			LD	A, 1Fh			; TAB
0B3E8A 1F 
0B3E8B 5B    0145** RST.LIL	10h
0B3E8C D7 
0B3E8D 7B    0146** LD	A, E			; X
0B3E8E 5B    0147** RST.LIL 10h
0B3E8F D7 
0B3E90 7D    0148** LD	A, L			; Y
0B3E91 5B    0149** RST.LIL 10h
0B3E92 D7 
0B3E93 C9    0150** RET
             0151** 
             0152** ; GETCSR: return cursor position in x=DE, y=HL
             0153** ;
0B3E94 DD    0154** GETCSR:			PUSH	IX			; Get the system vars in IX
0B3E95 E5 
             0155** MOSCALL	mos_sysvars		; Reset the semaphore
0B3E96 3E   0001**M LD	A, function
0B3E97 08 
0B3E98 49   0002**M RST.LIS	08h
0B3E99 CF 
0B3E9A DD    0156** RES	0, (IX+sysvar_vpd_pflags)
0B3E9B CB 
0B3E9C 04 
0B3E9D 86 
             0157** VDU	23
0B3E9E 3E   0001**M LD	A, val
0B3E9F 17 
0B3EA0 CD   0002**M CALL	OSWRCH
0B3EA1 C8 
0B3EA2 3E 
0B3EA3 0B 
             0158** VDU	0
0B3EA4 3E   0001**M LD	A, val
0B3EA5 00 
0B3EA6 CD   0002**M CALL	OSWRCH
0B3EA7 C8 
0B3EA8 3E 
0B3EA9 0B 
             0159** VDU	vdp_cursor
0B3EAA 3E   0001**M LD	A, val
0B3EAB 82 
0B3EAC CD   0002**M CALL	OSWRCH
0B3EAD C8 
0B3EAE 3E 
0B3EAF 0B 
0B3EB0 DD    0160** @@:			BIT	0, (IX+sysvar_vpd_pflags)
0B3EB1 CB 
0B3EB2 04 
0B3EB3 46 
0B3EB4 28    0161** JR	Z, @B			; Wait for the result
0B3EB5 FA 
0B3EB6 16    0162** LD 	D, 0
0B3EB7 00 
0B3EB8 62    0163** LD	H, D
0B3EB9 DD    0164** LD	E, (IX + sysvar_cursorX)
0B3EBA 5E 
0B3EBB 07 
0B3EBC DD    0165** LD	L, (IX + sysvar_cursorY)
0B3EBD 6E 
0B3EBE 08 
0B3EBF DD    0166** POP	IX
0B3EC0 E1 
0B3EC1 C9    0167** RET
             0168** 
             0169** ; PROMPT: output the input prompt
             0170** ;
0B3EC2 3E    0171** PROMPT: 		LD	A,'>'
0B3EC3 3E 
0B3EC4 C3    0172** JP	OSWRCH
0B3EC5 C8 
0B3EC6 3E 
0B3EC7 0B 
             0173** 
             0174** ; OSWRCH: Write a character out to the ESP32 VDU handler via the MOS
             0175** ; A: Character to write
             0176** ;
0B3EC8 E5    0177** OSWRCH:			PUSH	HL
0B3EC9 21    0178** LD	HL, LISTON		; Fetch the LISTON variable
0B3ECA 40 
0B3ECB 56 
0B3ECC 0B 
0B3ECD CB    0179** BIT	3, (HL)			; Check whether we are in *EDIT mode
0B3ECE 5E 
0B3ECF 20    0180** JR	NZ, OSWRCH_BUFFER	; Yes, so just output to buffer
0B3ED0 0B 
             0181** ;
0B3ED1 2A    0182** LD	HL, (OSWRCHCH)		; L: Channel #
0B3ED2 45 
0B3ED3 56 
0B3ED4 0B 
0B3ED5 2D    0183** DEC	L			; If it is 1
0B3ED6 28    0184** JR	Z, OSWRCH_FILE		; Then we are outputting to a file
0B3ED7 10 
             0185** ;
0B3ED8 E1    0186** POP	HL			; Otherwise
0B3ED9 5B    0187** RST.LIL	10h			; Output the character to MOS
0B3EDA D7 
0B3EDB C9    0188** RET
             0189** ;
0B3EDC 2A    0190** OSWRCH_BUFFER:		LD	HL, (OSWRCHPT)		; Fetch the pointer buffer
0B3EDD 43 
0B3EDE 56 
0B3EDF 0B 
0B3EE0 77    0191** LD	(HL), A			; Echo the character into the buffer
0B3EE1 23    0192** INC	HL			; Increment pointer
0B3EE2 22    0193** LD	(OSWRCHPT), HL		; Write pointer back
0B3EE3 43 
0B3EE4 56 
0B3EE5 0B 
0B3EE6 E1    0194** POP	HL
0B3EE7 C9    0195** RET
             0196** ;
0B3EE8 D5    0197** OSWRCH_FILE:		PUSH	DE
0B3EE9 5C    0198** LD	E, H			; Filehandle to E
0B3EEA CD    0199** CALL	OSBPUT			; Write the byte out
0B3EEB 03 
0B3EEC 43 
0B3EED 0B 
0B3EEE D1    0200** POP	DE
0B3EEF E1    0201** POP	HL
0B3EF0 C9    0202** RET
             0203** 
             0204** ; OSRDCH: Read a character in from the ESP32 keyboard handler
             0205** ; This is only called in GETS (eval.asm)
             0206** ;
             0207** OSRDCH:			MOSCALL	mos_getkey		; Read keyboard
0B3EF1 3E   0001**M LD	A, function
0B3EF2 00 
0B3EF3 49   0002**M RST.LIS	08h
0B3EF4 CF 
0B3EF5 FE    0208** CP	1Bh
0B3EF6 1B 
0B3EF7 28    0209** JR	Z, LTRAP1
0B3EF8 46 
0B3EF9 C9    0210** RET
             0211** 
             0212** 
             0213** ;OSKEY - Read key with time-limit, test for ESCape.
             0214** ;Main function is carried out in user patch.
             0215** ;   Inputs: HL = time limit (centiseconds)
             0216** ;  Outputs: Carry reset if time-out
             0217** ;           If carry set A = character
             0218** ; Destroys: A,H,L,F
             0219** ;
0B3EFA CD    0220** OSKEY:			CALL	READKEY			; Read the keyboard
0B3EFB 2B 
0B3EFC 3F 
0B3EFD 0B 
0B3EFE 28    0221** JR	Z, @F 			; Skip if we have a key
0B3EFF 0A 
0B3F00 7C    0222** LD	A, H 			; Check loop counter
0B3F01 B5    0223** OR 	L
0B3F02 C8    0224** RET 	Z 			; Return, we've not got a key at this point
0B3F03 CD    0225** CALL	WAIT_VBLANK 		; Wait a frame
0B3F04 05 
0B3F05 41 
0B3F06 0B 
0B3F07 2B    0226** DEC 	HL			; Decrement
0B3F08 18    0227** JR	OSKEY 			; And loop
0B3F09 F0 
             0228** ;
0B3F0A 21    0229** @@:			LD	HL, KEYDOWN		; We have a key, so
0B3F0B 47 
0B3F0C 56 
0B3F0D 0B 
0B3F0E 36    0230** LD	(HL), 0			; clear the keydown flag
0B3F0F 00 
0B3F10 FE    0231** CP	1BH			; If we are not pressing ESC,
0B3F11 1B 
0B3F12 37    0232** SCF 				; then flag we've got a character
0B3F13 C0    0233** RET	NZ
             0234** ;
             0235** ; ESCSET
             0236** ; Set the escape flag (bit 7 of FLAGS = 1) if escape is enabled (bit 6 of FLAGS = 0)
             0237** ;
0B3F14 E5    0238** ESCSET: 		PUSH    HL
0B3F15 21    0239** LD      HL,FLAGS		; Pointer to FLAGS
0B3F16 42 
0B3F17 56 
0B3F18 0B 
0B3F19 CB    0240** BIT     6,(HL)			; If bit 6 is set, then
0B3F1A 76 
0B3F1B 20    0241** JR      NZ,ESCDIS		; escape is disabled, so skip
0B3F1C 02 
0B3F1D CB    0242** SET     7,(HL)			; Set bit 7, the escape flag
0B3F1E FE 
0B3F1F E1    0243** ESCDIS: 		POP     HL
0B3F20 C9    0244** RET
             0245** ;
             0246** ; ESCTEST
             0247** ; Test for ESC key
             0248** ;
0B3F21 CD    0249** ESCTEST:		CALL	READKEY			; Read the keyboard
0B3F22 2B 
0B3F23 3F 
0B3F24 0B 
0B3F25 C0    0250** RET	NZ			; Skip if no key is pressed
0B3F26 FE    0251** CP	1BH			; If ESC pressed then
0B3F27 1B 
0B3F28 28    0252** JR	Z,ESCSET		; jump to the escape set routine
0B3F29 EA 
0B3F2A C9    0253** RET
             0254** 
             0255** ; Read the keyboard
             0256** ; Returns:
             0257** ; - A: ASCII of the pressed key
             0258** ; - F: Z if the key is pressed, otherwise NZ
             0259** ;
0B3F2B 3A    0260** READKEY:		LD	A, (KEYDOWN)		; Get key down
0B3F2C 47 
0B3F2D 56 
0B3F2E 0B 
0B3F2F 3D    0261** DEC	A 			; Set Z flag if keydown is 1
0B3F30 3A    0262** LD	A, (KEYASCII)		; Get key ASCII value
0B3F31 48 
0B3F32 56 
0B3F33 0B 
0B3F34 C9    0263** RET
             0264** ;
             0265** ; TRAP
             0266** ; This is called whenever BASIC needs to check for ESC
             0267** ;
0B3F35 CD    0268** TRAP:			CALL	ESCTEST			; Read keyboard, test for ESC, set FLAGS
0B3F36 21 
0B3F37 3F 
0B3F38 0B 
             0269** ;
0B3F39 3A    0270** LTRAP:			LD	A,(FLAGS)		; Get FLAGS
0B3F3A 42 
0B3F3B 56 
0B3F3C 0B 
0B3F3D B7    0271** OR	A			; This checks for bit 7; if it is not set then the result will
0B3F3E F0    0272** RET	P			; be positive (bit 7 is the sign bit in Z80), so return
0B3F3F 21    0273** LTRAP1:			LD	HL,FLAGS 		; Escape is pressed at this point, so
0B3F40 42 
0B3F41 56 
0B3F42 0B 
0B3F43 CB    0274** RES	7,(HL)			; Clear the escape pressed flag and
0B3F44 BE 
0B3F45 C3    0275** JP	ESCAPE			; Jump to the ESCAPE error routine in exec.asm
0B3F46 63 
0B3F47 0C 
0B3F48 0B 
             0276** 
             0277** ;OSINIT - Initialise RAM mapping etc.
             0278** ;If BASIC is entered by BBCBASIC FILENAME then file
             0279** ;FILENAME.BBC is automatically CHAINed.
             0280** ;   Outputs: DE = initial value of HIMEM (top of RAM)
             0281** ;            HL = initial value of PAGE (user program)
             0282** ;            Z-flag reset indicates AUTO-RUN.
             0283** ;  Destroys: A,D,E,H,L,F
             0284** ;
0B3F49 CD    0285** OSINIT:			CALL	VBLANK_INIT
0B3F4A A8 
0B3F4B 48 
0B3F4C 0B 
0B3F4D AF    0286** XOR	A
0B3F4E 21    0287** LD 	HL, USER
0B3F4F 00 
0B3F50 57 
0B3F51 0B 
0B3F52 11    0288** LD	DE, RAM_Top
0B3F53 00 
0B3F54 00 
0B3F55 0B 
0B3F56 5F    0289** LD	E, A			; Page boundary
0B3F57 C9    0290** RET
             0291** 
             0292** ;
             0293** ;OSCLI - Process a MOS command
             0294** ;
0B3F58 CD    0295** OSCLI: 			CALL    SKIPSP
0B3F59 CC 
0B3F5A 3F 
0B3F5B 0B 
0B3F5C FE    0296** CP      CR
0B3F5D 0D 
0B3F5E C8    0297** RET     Z
0B3F5F FE    0298** CP      '|'
0B3F60 7C 
0B3F61 C8    0299** RET     Z
0B3F62 EB    0300** EX      DE,HL
0B3F63 21    0301** LD      HL,COMDS
0B3F64 DB 
0B3F65 3F 
0B3F66 0B 
0B3F67 1A    0302** OSCLI0:			LD      A,(DE)
0B3F68 CD    0303** CALL    UPPRC
0B3F69 D3 
0B3F6A 3F 
0B3F6B 0B 
0B3F6C BE    0304** CP      (HL)
0B3F6D 28    0305** JR      Z,OSCLI2
0B3F6E 0B 
0B3F6F 38    0306** JR      C,OSCLI6
0B3F70 30 
0B3F71 CB    0307** OSCLI1:			BIT     7,(HL)
0B3F72 7E 
0B3F73 23    0308** INC     HL
0B3F74 28    0309** JR      Z,OSCLI1
0B3F75 FB 
0B3F76 23    0310** INC     HL
0B3F77 23    0311** INC     HL
0B3F78 18    0312** JR      OSCLI0
0B3F79 ED 
             0313** ;
0B3F7A D5    0314** OSCLI2:			PUSH    DE
0B3F7B 13    0315** OSCLI3:			INC     DE
0B3F7C 23    0316** INC     HL
0B3F7D 1A    0317** LD      A,(DE)
0B3F7E CD    0318** CALL    UPPRC
0B3F7F D3 
0B3F80 3F 
0B3F81 0B 
0B3F82 FE    0319** CP      '.'			; ABBREVIATED?
0B3F83 2E 
0B3F84 28    0320** JR      Z,OSCLI4
0B3F85 0A 
0B3F86 AE    0321** XOR     (HL)
0B3F87 28    0322** JR      Z,OSCLI3
0B3F88 F2 
0B3F89 FE    0323** CP      80H
0B3F8A 80 
0B3F8B 28    0324** JR      Z,OSCLI4
0B3F8C 03 
0B3F8D D1    0325** POP     DE
0B3F8E 18    0326** JR      OSCLI1
0B3F8F E1 
             0327** ;
0B3F90 F1    0328** OSCLI4:			POP     AF
0B3F91 13    0329** INC     DE
0B3F92 CB    0330** OSCLI5:			BIT     7,(HL)
0B3F93 7E 
0B3F94 23    0331** INC     HL
0B3F95 28    0332** JR      Z,OSCLI5
0B3F96 FB 
0B3F97 7E    0333** LD      A,(HL)
0B3F98 23    0334** INC     HL
0B3F99 66    0335** LD      H,(HL)
0B3F9A 6F    0336** LD      L,A
0B3F9B E5    0337** PUSH    HL
0B3F9C EB    0338** EX      DE,HL
0B3F9D C3    0339** JP      SKIPSP
0B3F9E CC 
0B3F9F 3F 
0B3FA0 0B 
             0340** ;
0B3FA1 EB    0341** OSCLI6:			EX	DE, HL			; HL: Buffer for command
0B3FA2 11    0342** LD	DE, ACCS		; Buffer for command string is ACCS (the string accumulator)
0B3FA3 00 
0B3FA4 53 
0B3FA5 0B 
0B3FA6 D5    0343** PUSH	DE			; Store buffer address
0B3FA7 CD    0344** CALL	CSTR_LINE		; Fetch the line
0B3FA8 F3 
0B3FA9 3D 
0B3FAA 0B 
0B3FAB E1    0345** POP	HL			; HL: Pointer to command string in ACCS
0B3FAC FD    0346** PUSH	IY
0B3FAD E5 
             0347** MOSCALL	mos_oscli		; Returns OSCLI error in A
0B3FAE 3E   0001**M LD	A, function
0B3FAF 10 
0B3FB0 49   0002**M RST.LIS	08h
0B3FB1 CF 
0B3FB2 FD    0348** POP	IY
0B3FB3 E1 
0B3FB4 B7    0349** OR	A			; 0 means MOS returned OK
0B3FB5 C8    0350** RET	Z			; So don't do anything
0B3FB6 C3    0351** JP 	OSERROR			; Otherwise it's a MOS error
0B3FB7 DF 
0B3FB8 41 
0B3FB9 0B 
             0352** 
0B3FBA 3E    0353** HUH:    		LD      A,254			; Bad command error
0B3FBB FE 
0B3FBC CD    0354** CALL    EXTERR
0B3FBD 3F 
0B3FBE 37 
0B3FBF 0B 
0B3FC0 42    0355** DB    	"Bad command"
0B3FC1 61 
0B3FC2 64 
0B3FC3 20 
0B3FC3 63   
0B3FC4 6F 
0B3FC5 6D 
0B3FC6 6D 
0B3FC6 61   
0B3FC7 6E 
0B3FC8 64 
0B3FCB 00    0356** DEFB    0
             0357** 
0B3FCC 7E    0358** SKIPSP:			LD      A,(HL)
0B3FCD FE    0359** CP      ' '
0B3FCE 20 
0B3FCF C0    0360** RET     NZ
0B3FD0 23    0361** INC     HL
0B3FD1 18    0362** JR      SKIPSP
0B3FD2 F9 
             0363** 
0B3FD3 E6    0364** UPPRC:  		AND     7FH
0B3FD4 7F 
0B3FD5 FE    0365** CP      '`'
0B3FD6 60 
0B3FD7 D8    0366** RET     C
0B3FD8 E6    0367** AND     5FH			; CONVERT TO UPPER CASE
0B3FD9 5F 
0B3FDA C9    0368** RET
             0369** 
             0370** ; Each command has bit 7 of the last character set, and is followed by the address of the handler
             0371** ; These must be in alphabetical order
             0372** ;
             0373** ; BEGIN NOT FOUND IN BINARY
             0374** ; COMDS:  		DB	"AS","M"+80h		; ASM
             0375** ; 			DW	STAR_ASM
             0376** ; 			DB	"BY","E"+80h		; BYE
             0377** ; 			DW	STAR_BYE
             0378** ; 			DB	"EDI","T"+80h		; EDIT
             0379** ; 			DW	STAR_EDIT
             0380** ; 			DB	"F","X"+80h		; FX
             0381** ; 			DW	STAR_FX
             0382** ; 			DB	"VERSIO","N"+80h	; VERSION
             0383** ; 			DW	STAR_VERSION
             0384** ; 			DB	FFh
             0385** ; END NOT FOUND IN BINARY
             0386** ; BEGIN INSERTED FROM BINARY
             0387** ; Each command has bit 7 of the last character set, and is followed by the address of the handler
             0388** ; These must be in alphabetical order
             0389** ;
             0390** COMDS:
0B3FDB 42    0391** db 0x42 ; 044013 41     11404 COMDS:  		DB	"AS","M"+80h		; ASM
0B3FDC 59    0392** db 0x59 ; 044014
0B3FDD C5    0393** db 0xc5 ; 044015
0B3FDE 2C    0394** db 0x2c ; 044016 31     11405 DW	STAR_ASM
0B3FDF 40    0395** db 0x40 ; 044017
0B3FE0 45    0396** db 0x45 ; 044018 42     11406 DB	"BY","E"+80h		; BYE
0B3FE1 44    0397** db 0x44 ; 044019
0B3FE2 49    0398** db 0x49 ; 04401A
0B3FE3 D4    0399** db 0xd4 ; 04401B 3D     11407 DW	STAR_BYE
0B3FE4 61    0400** db 0x61 ; 04401C
0B3FE5 40    0401** db 0x40 ; 04401D 45     11408 DB	"EDI","T"+80h		; EDIT
0B3FE6 46    0402** db 0x46 ; 04401E
0B3FE7 D8    0403** db 0xd8 ; 04401F
0B3FE8 A1    0404** db 0xa1 ; 044020
0B3FE9 40    0405** db 0x40 ; 044021 72     11409 DW	STAR_EDIT
0B3FEA 56    0406** db 0x56 ; 044022
0B3FEB 45    0407** db 0x45 ; 044023 46     11410 DB	"F","X"+80h		; FX
0B3FEC 52    0408** db 0x52 ; 044024
0B3FED 53    0409** db 0x53 ; 044025 B2     11411 DW	STAR_FX
0B3FEE 49    0410** db 0x49 ; 044026
0B3FEF 4F    0411** db 0x4f ; 044027 56     11412 DB	"VERSIO","N"+80h	; VERSION
0B3FF0 CE    0412** db 0xce ; 044028
0B3FF1 38    0413** db 0x38 ; 044029
0B3FF2 40    0414** db 0x40 ; 04402A
0B3FF3 FF    0415** db 0xff ; 04402B
             0416** ; END INSERTED FROM BINARY
             0417** 
             0418** ; BEGIN NOT FOUND IN BINARY
             0419** ; ; *ASM string
             0420** ; ;
             0421** ; STAR_ASM:		PUSH	IY			; Stack the BASIC pointer
             0422** ; 			PUSH	HL			; HL = IY
             0423** ; 			POP	IY
             0424** ; 			CALL	ASSEM			; Invoke the assembler
             0425** ; 			POP	IY
             0426** ; 			RET
             0427** ; END NOT FOUND IN BINARY
             0428** 
             0429** ; *BYE
             0430** ;
0B3FF4 CD    0431** STAR_BYE:		CALL	VBLANK_STOP		; Restore MOS interrupts
0B3FF5 BC 
0B3FF6 48 
0B3FF7 0B 
0B3FF8 21    0432** LD	HL, 0			; The return value
0B3FF9 00 
0B3FFA 00 
0B3FFB 00 
0B3FFC C3    0433** JP	_end 			; Jump back to the end routine in init.asm
0B3FFD 46 
0B3FFE 51 
0B3FFF 0B 
             0434** 
             0435** ; *VERSION
             0436** ;
0B4000 CD    0437** STAR_VERSION:		CALL    TELL			; Output the welcome message
0B4001 58 
0B4002 3D 
0B4003 0B 
0B4004 42    0438** DB    	"BBC BASIC (Agon ADL) Version 1.03\n\r",0
0B4005 42 
0B4006 43 
0B4007 20 
0B4007 42   
0B4008 41 
0B4009 53 
0B400A 49 
0B400A 43   
0B400B 20 
0B400C 28 
0B400D 41 
0B400D 67   
0B400E 6F 
0B400F 6E 
0B4010 20 
0B4010 41   
0B4011 44 
0B4012 4C 
0B4013 29 
0B4013 20   
0B4014 56 
0B4015 65 
0B4016 72 
0B4016 73   
0B4017 69 
0B4018 6F 
0B4019 6E 
0B4019 20   
0B401A 31 
0B401B 2E 
0B401C 30 
0B401C 33   
0B401D 0A 
0B401E 0D 
0B401F 00 
0B4028 C9    0439** RET
             0440** 
             0441** ; *EDIT linenum
             0442** ;
0B4029 CD    0443** STAR_EDIT:		CALL	ASC_TO_NUMBER		; DE: Line number to edit
0B402A 5F 
0B402B 3D 
0B402C 0B 
0B402D EB    0444** EX	DE, HL			; HL: Line number
0B402E CD    0445** CALL	FINDL			; HL: Address in RAM of tokenised line
0B402F 57 
0B4030 39 
0B4031 0B 
0B4032 3E    0446** LD	A, 41			; F:NZ If the line is not found
0B4033 29 
0B4034 C2    0447** JP	NZ, ERROR_		; Do error 41: No such line in that case
0B4035 28 
0B4036 37 
0B4037 0B 
             0448** ;
             0449** ; Use LISTIT to output the line to the ACCS buffer
             0450** ;
0B4038 23    0451** INC	HL			; Skip the length byte
0B4039 5E    0452** LD	E, (HL)			; Fetch the line number
0B403A 23    0453** INC	HL
0B403B 56    0454** LD	D, (HL)
0B403C 23    0455** INC	HL
0B403D DD    0456** LD	IX, ACCS		; Pointer to where the copy is to be stored
0B403E 21 
0B403F 00 
0B4040 53 
0B4040 0B   
0B4042 DD    0457** LD	(OSWRCHPT), IX
0B4043 22 
0B4044 43 
0B4045 56 
0B4045 0B   
0B4047 DD    0458** LD	IX, LISTON		; Pointer to LISTON variable in RAM
0B4048 21 
0B4049 40 
0B404A 56 
0B404A 0B   
0B404C DD    0459** LD	A, (IX)			; Store that variable
0B404D 7E 
0B404E 00 
0B404F F5    0460** PUSH	AF
0B4050 DD    0461** LD	(IX), 09h		; Set to echo to buffer
0B4051 36 
0B4052 00 
0B4053 09 
0B4054 CD    0462** CALL	LISTIT
0B4055 5A 
0B4056 38 
0B4057 0B 
0B4058 F1    0463** POP	AF
0B4059 DD    0464** LD	(IX), A			; Restore the original LISTON variable
0B405A 77 
0B405B 00 
0B405C 21    0465** LD	HL, ACCS		; HL: ACCS
0B405D 00 
0B405E 53 
0B405F 0B 
0B4060 5D    0466** LD	E, L			;  E: 0 - Don't clear the buffer; ACCS is on a page boundary so L is 0
0B4061 CD    0467** CALL	OSLINE1			; Invoke the editor
0B4062 29 
0B4063 3E 
0B4064 0B 
0B4065 C3    0468** JP	ONEDIT			; Jump back to the BASIC loop just after the normal line edit
0B4066 98 
0B4067 30 
0B4068 0B 
             0469** 
             0470** ; OSCLI FX n
             0471** ;
0B4069 CD    0472** STAR_FX:		CALL	ASC_TO_NUMBER
0B406A 5F 
0B406B 3D 
0B406C 0B 
0B406D 4B    0473** LD	C, E			; C: Save FX #
0B406E CD    0474** CALL	ASC_TO_NUMBER
0B406F 5F 
0B4070 3D 
0B4071 0B 
0B4072 7A    0475** LD	A, D  			; Is first parameter > 255?
0B4073 B7    0476** OR 	A
0B4074 28    0477** JR	Z, STAR_FX1		; Yes, so skip next bit
0B4075 03 
0B4076 EB    0478** EX	DE, HL 			; Parameter is 16-bit
0B4077 18    0479** JR	STAR_FX2
0B4078 07 
             0480** ;
0B4079 43    0481** STAR_FX1:		LD	B, E 			; B: Save First parameter
0B407A CD    0482** CALL	ASC_TO_NUMBER		; Fetch second parameter
0B407B 5F 
0B407C 3D 
0B407D 0B 
0B407E 68    0483** LD	L, B 			; L: First parameter
0B407F 63    0484** LD	H, E 			; H: Second parameter
             0485** ;
0B4080 79    0486** STAR_FX2:		LD	A, C 			; A: FX #, and fall through to OSBYTE
             0487** ;
             0488** ; OSBYTE
             0489** ;  A: FX #
             0490** ;  L: First parameter
             0491** ;  H: Second parameter
             0492** ;
0B4081 FE    0493** OSBYTE:			CP	0BH			; *FX 11, n: Keyboard auto-repeat delay
0B4082 0B 
0B4083 28    0494** JR	Z, OSBYTE_0B
0B4084 18 
0B4085 FE    0495** CP	0CH			; *FX 12, n: Keyboard auto-repeat rate
0B4086 0C 
0B4087 28    0496** JR	Z, OSBYTE_0C
0B4088 43 
0B4089 FE    0497** CP	13H			; *FX 19: Wait for vblank
0B408A 13 
0B408B 28    0498** JR	Z, OSBYTE_13
0B408C 6E 
0B408D FE    0499** CP	76H			; *FX 118, n: Set keyboard LED
0B408E 76 
0B408F CA    0500** JP	Z, OSBYTE_76
0B4090 16 
0B4091 41 
0B4092 0B 
0B4093 FE    0501** CP	A0H
0B4094 A0 
0B4095 CA    0502** JP	Z, OSBYTE_A0
0B4096 46 
0B4097 41 
0B4098 0B 
0B4099 C3    0503** JP	HUH			; Anything else trips an error
0B409A BA 
0B409B 3F 
0B409C 0B 
             0504** 
             0505** ; OSBYTE 0x0B (FX 11,n): Keyboard auto-repeat delay
             0506** ; Parameters:
             0507** ; - HL: Repeat delay
             0508** ;
             0509** OSBYTE_0B:		VDU	23
0B409D 3E   0001**M LD	A, val
0B409E 17 
0B409F CD   0002**M CALL	OSWRCH
0B40A0 C8 
0B40A1 3E 
0B40A2 0B 
             0510** VDU	0
0B40A3 3E   0001**M LD	A, val
0B40A4 00 
0B40A5 CD   0002**M CALL	OSWRCH
0B40A6 C8 
0B40A7 3E 
0B40A8 0B 
             0511** VDU	vdp_keystate
0B40A9 3E   0001**M LD	A, val
0B40AA 88 
0B40AB CD   0002**M CALL	OSWRCH
0B40AC C8 
0B40AD 3E 
0B40AE 0B 
             0512** VDU	L
0B40AF 7D   0001**M LD	A, val
0B40B0 CD   0002**M CALL	OSWRCH
0B40B1 C8 
0B40B2 3E 
0B40B3 0B 
             0513** VDU	H
0B40B4 7C   0001**M LD	A, val
0B40B5 CD   0002**M CALL	OSWRCH
0B40B6 C8 
0B40B7 3E 
0B40B8 0B 
             0514** VDU	0
0B40B9 3E   0001**M LD	A, val
0B40BA 00 
0B40BB CD   0002**M CALL	OSWRCH
0B40BC C8 
0B40BD 3E 
0B40BE 0B 
             0515** VDU 	0
0B40BF 3E   0001**M LD	A, val
0B40C0 00 
0B40C1 CD   0002**M CALL	OSWRCH
0B40C2 C8 
0B40C3 3E 
0B40C4 0B 
             0516** VDU	255
0B40C5 3E   0001**M LD	A, val
0B40C6 FF 
0B40C7 CD   0002**M CALL	OSWRCH
0B40C8 C8 
0B40C9 3E 
0B40CA 0B 
0B40CB C9    0517** RET
             0518** 
             0519** ; OSBYTE 0x0C (FX 12,n): Keyboard auto-repeat rate
             0520** ; Parameters:
             0521** ; - HL: Repeat rate
             0522** ;
             0523** OSBYTE_0C:		VDU	23
0B40CC 3E   0001**M LD	A, val
0B40CD 17 
0B40CE CD   0002**M CALL	OSWRCH
0B40CF C8 
0B40D0 3E 
0B40D1 0B 
             0524** VDU	0
0B40D2 3E   0001**M LD	A, val
0B40D3 00 
0B40D4 CD   0002**M CALL	OSWRCH
0B40D5 C8 
0B40D6 3E 
0B40D7 0B 
             0525** VDU	vdp_keystate
0B40D8 3E   0001**M LD	A, val
0B40D9 88 
0B40DA CD   0002**M CALL	OSWRCH
0B40DB C8 
0B40DC 3E 
0B40DD 0B 
             0526** VDU	0
0B40DE 3E   0001**M LD	A, val
0B40DF 00 
0B40E0 CD   0002**M CALL	OSWRCH
0B40E1 C8 
0B40E2 3E 
0B40E3 0B 
             0527** VDU 	0
0B40E4 3E   0001**M LD	A, val
0B40E5 00 
0B40E6 CD   0002**M CALL	OSWRCH
0B40E7 C8 
0B40E8 3E 
0B40E9 0B 
             0528** VDU	L
0B40EA 7D   0001**M LD	A, val
0B40EB CD   0002**M CALL	OSWRCH
0B40EC C8 
0B40ED 3E 
0B40EE 0B 
             0529** VDU	H
0B40EF 7C   0001**M LD	A, val
0B40F0 CD   0002**M CALL	OSWRCH
0B40F1 C8 
0B40F2 3E 
0B40F3 0B 
             0530** VDU	255
0B40F4 3E   0001**M LD	A, val
0B40F5 FF 
0B40F6 CD   0002**M CALL	OSWRCH
0B40F7 C8 
0B40F8 3E 
0B40F9 0B 
0B40FA C9    0531** RET
             0532** 
             0533** ; OSBYTE 0x13 (FX 19): Wait for vertical blank interrupt
             0534** ;
0B40FB CD    0535** OSBYTE_13:		CALL	WAIT_VBLANK
0B40FC 05 
0B40FD 41 
0B40FE 0B 
0B40FF 2E    0536** LD	L, 0			; Returns 0
0B4100 00 
0B4101 C3    0537** JP	COUNT0
0B4102 47 
0B4103 05 
0B4104 0B 
             0538** ;
0B4105 DD    0539** WAIT_VBLANK:		PUSH 	IX			; Wait for VBLANK interrupt
0B4106 E5 
             0540** MOSCALL	mos_sysvars		; Fetch pointer to system variables
0B4107 3E   0001**M LD	A, function
0B4108 08 
0B4109 49   0002**M RST.LIS	08h
0B410A CF 
0B410B DD    0541** LD	A, (IX + sysvar_time + 0)
0B410C 7E 
0B410D 00 
0B410E DD    0542** @@:			CP 	A, (IX + sysvar_time + 0)
0B410F BE 
0B4110 00 
0B4111 28    0543** JR	Z, @B
0B4112 FB 
0B4113 DD    0544** POP	IX
0B4114 E1 
0B4115 C9    0545** RET
             0546** 
             0547** ; OSBYTE 0x76 (FX 118,n): Set Keyboard LED
             0548** ; Parameters:
             0549** ; - L: LED (Bit 0: Scroll Lock, Bit 1: Caps Lock, Bit 2: Num Lock)
             0550** ;
             0551** OSBYTE_76:		VDU	23
0B4116 3E   0001**M LD	A, val
0B4117 17 
0B4118 CD   0002**M CALL	OSWRCH
0B4119 C8 
0B411A 3E 
0B411B 0B 
             0552** VDU	0
0B411C 3E   0001**M LD	A, val
0B411D 00 
0B411E CD   0002**M CALL	OSWRCH
0B411F C8 
0B4120 3E 
0B4121 0B 
             0553** VDU	vdp_keystate
0B4122 3E   0001**M LD	A, val
0B4123 88 
0B4124 CD   0002**M CALL	OSWRCH
0B4125 C8 
0B4126 3E 
0B4127 0B 
             0554** VDU	0
0B4128 3E   0001**M LD	A, val
0B4129 00 
0B412A CD   0002**M CALL	OSWRCH
0B412B C8 
0B412C 3E 
0B412D 0B 
             0555** VDU 	0
0B412E 3E   0001**M LD	A, val
0B412F 00 
0B4130 CD   0002**M CALL	OSWRCH
0B4131 C8 
0B4132 3E 
0B4133 0B 
             0556** VDU	0
0B4134 3E   0001**M LD	A, val
0B4135 00 
0B4136 CD   0002**M CALL	OSWRCH
0B4137 C8 
0B4138 3E 
0B4139 0B 
             0557** VDU	0
0B413A 3E   0001**M LD	A, val
0B413B 00 
0B413C CD   0002**M CALL	OSWRCH
0B413D C8 
0B413E 3E 
0B413F 0B 
             0558** VDU	L
0B4140 7D   0001**M LD	A, val
0B4141 CD   0002**M CALL	OSWRCH
0B4142 C8 
0B4143 3E 
0B4144 0B 
0B4145 C9    0559** RET
             0560** 
             0561** ; OSBYTE 0xA0: Fetch system variable
             0562** ; Parameters:
             0563** ; - L: The system variable to fetch
             0564** ;
0B4146 DD    0565** OSBYTE_A0:		PUSH	IX
0B4147 E5 
             0566** MOSCALL	mos_sysvars		; Fetch pointer to system variables
0B4148 3E   0001**M LD	A, function
0B4149 08 
0B414A 49   0002**M RST.LIS	08h
0B414B CF 
0B414C 01    0567** LD	BC, 0
0B414D 00 
0B414E 00 
0B414F 00 
0B4150 4D    0568** LD	C, L			; BCU = L
0B4151 DD    0569** ADD	IX, BC			; Add to IX
0B4152 09 
0B4153 DD    0570** LD	L, (IX + 0)		; Fetch the return value
0B4154 6E 
0B4155 00 
0B4156 DD    0571** POP	IX
0B4157 E1 
0B4158 C3    0572** JP 	COUNT0
0B4159 47 
0B415A 05 
0B415B 0B 
             0573** 
             0574** ;OSLOAD - Load an area of memory from a file.
             0575** ;   Inputs: HL addresses filename (CR terminated)
             0576** ;           DE = address at which to load
             0577** ;           BC = maximum allowed size (bytes)
             0578** ;  Outputs: Carry reset indicates no room for file.
             0579** ; Destroys: A,B,C,D,E,H,L,F
             0580** ;
0B415C C5    0581** OSLOAD:			PUSH	BC			; Stack the size
0B415D D5    0582** PUSH	DE			; Stack the load address
0B415E 11    0583** LD	DE, ACCS		; Buffer address for filename
0B415F 00 
0B4160 53 
0B4161 0B 
0B4162 CD    0584** CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0B4163 E1 
0B4164 3D 
0B4165 0B 
0B4166 21    0585** LD	HL, ACCS		; HL: Filename
0B4167 00 
0B4168 53 
0B4169 0B 
0B416A CD    0586** CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0B416B 5C 
0B416C 42 
0B416D 0B 
0B416E CD    0587** CALL	EXT_HANDLER		; Get the default handler
0B416F 70 
0B4170 42 
0B4171 0B 
0B4172 D1    0588** POP	DE			; Restore the load address
0B4173 C1    0589** POP	BC			; Restore the size
0B4174 B7    0590** OR	A
0B4175 28    0591** JR 	Z, OSLOAD_BBC
0B4176 60 
             0592** ;
             0593** ; Load the file in as a text file
             0594** ;
0B4177 AF    0595** OSLOAD_TXT:		XOR	A			; Set file attributes to read
0B4178 CD    0596** CALL	OSOPEN			; Open the file
0B4179 E4 
0B417A 42 
0B417B 0B 
0B417C 5F    0597** LD 	E, A 			; The filehandle
0B417D B7    0598** OR	A
0B417E 3E    0599** LD	A, 4			; File not found error
0B417F 04 
0B4180 28    0600** JR	Z, OSERROR		; Jump to error handler
0B4181 5D 
0B4182 CD    0601** CALL	NEWIT			; Call NEW to clear the program space
0B4183 34 
0B4184 38 
0B4185 0B 
             0602** ;
0B4186 21    0603** OSLOAD_TXT1:		LD	HL, ACCS 		; Where the input is going to be stored
0B4187 00 
0B4188 53 
0B4189 0B 
             0604** ;
             0605** ; First skip any whitespace (indents) at the beginning of the input
             0606** ;
0B418A CD    0607** @@:			CALL	OSBGET			; Read the byte into A
0B418B FB 
0B418C 42 
0B418D 0B 
0B418E 38    0608** JR	C, OSLOAD_TXT3		; Is it EOF?
0B418F 1E 
0B4190 FE    0609** CP	LF 			; Is it LF?
0B4191 0A 
0B4192 28    0610** JR	Z, OSLOAD_TXT3 		; Yes, so skip to the next line
0B4193 1A 
0B4194 FE    0611** CP	21h			; Is it less than or equal to ASCII space?
0B4195 21 
0B4196 38    0612** JR	C, @B 			; Yes, so keep looping
0B4197 F2 
0B4198 77    0613** LD	(HL), A 		; Store the first character
0B4199 2C    0614** INC	L
             0615** ;
             0616** ; Now read the rest of the line in
             0617** ;
0B419A CD    0618** OSLOAD_TXT2:		CALL	OSBGET			; Read the byte into A
0B419B FB 
0B419C 42 
0B419D 0B 
0B419E 38    0619** JR	C, OSLOAD_TXT4		; Is it EOF?
0B419F 2B 
0B41A0 FE    0620** CP	20h			; Skip if not an ASCII character
0B41A1 20 
0B41A2 38    0621** JR	C, @F
0B41A3 06 
0B41A4 77    0622** LD	(HL), A 		; Store in the input buffer
0B41A5 2C    0623** INC	L			; Increment the buffer pointer
0B41A6 CA    0624** JP	Z, BAD			; If the buffer is full (wrapped to 0) then jump to Bad Program error
0B41A7 C0 
0B41A8 36 
0B41A9 0B 
0B41AA FE    0625** @@:			CP	LF			; Check for LF
0B41AB 0A 
0B41AC 20    0626** JR	NZ, OSLOAD_TXT2		; If not, then loop to read the rest of the characters in
0B41AD EC 
             0627** ;
             0628** ; Finally, handle EOL/EOF
             0629** ;
0B41AE 36    0630** OSLOAD_TXT3:		LD	(HL), CR		; Store a CR for BBC BASIC
0B41AF 0D 
0B41B0 7D    0631** LD	A, L			; Check for minimum line length
0B41B1 FE    0632** CP	2			; If it is 2 characters or less (including CR)
0B41B2 02 
0B41B3 38    0633** JR	C, @F			; Then don't bother entering it
0B41B4 0A 
0B41B5 D5    0634** PUSH	DE			; Preserve the filehandle
0B41B6 CD    0635** CALL	ONEDIT1			; Enter the line in memory
0B41B7 A4 
0B41B8 30 
0B41B9 0B 
0B41BA DC    0636** CALL	C,CLEAN			; If a new line has been entered, then call CLEAN to set TOP and write &FFFF end of program marker
0B41BB 07 
0B41BC 38 
0B41BD 0B 
0B41BE D1    0637** POP	DE
0B41BF CD    0638** @@:			CALL	OSSTAT			; End of file?
0B41C0 0C 
0B41C1 43 
0B41C2 0B 
0B41C3 20    0639** JR	NZ, OSLOAD_TXT1		; No, so loop
0B41C4 C1 
0B41C5 CD    0640** CALL	OSSHUT			; Close the file
0B41C6 F3 
0B41C7 42 
0B41C8 0B 
0B41C9 37    0641** SCF				; Flag to BASIC that we're good
0B41CA C9    0642** RET
             0643** ;
             0644** ; Special case for BASIC programs with no blank line at the end
             0645** ;
0B41CB FE    0646** OSLOAD_TXT4:		CP	20h			; Skip if not an ASCII character
0B41CC 20 
0B41CD 38    0647** JR	C, @F
0B41CE 06 
0B41CF 77    0648** LD	(HL), A			; Store the character
0B41D0 2C    0649** INC	L
0B41D1 CA    0650** JP	Z, BAD
0B41D2 C0 
0B41D3 36 
0B41D4 0B 
0B41D5 18    0651** @@:			JR	OSLOAD_TXT3
0B41D6 D7 
             0652** 
             0653** ;
             0654** ; Load the file in as a tokenised binary blob
             0655** ;
             0656** OSLOAD_BBC:		MOSCALL	mos_load		; Call LOAD in MOS
0B41D7 3E   0001**M LD	A, function
0B41D8 01 
0B41D9 49   0002**M RST.LIS	08h
0B41DA CF 
0B41DB D0    0657** RET	NC			; If load returns with carry reset - NO ROOM
0B41DC B7    0658** OR	A			; If there is no error (A=0)
0B41DD 37    0659** SCF				; Need to set carry indicating there was room
0B41DE C8    0660** RET	Z			; Return
             0661** ;
0B41DF F5    0662** OSERROR:		PUSH	AF			; Handle the MOS error
0B41E0 21    0663** LD	HL, ACCS		; Address of the buffer
0B41E1 00 
0B41E2 53 
0B41E3 0B 
0B41E4 01    0664** LD	BC, 256			; Length of the buffer
0B41E5 00 
0B41E6 01 
0B41E7 00 
0B41E8 5F    0665** LD	E, A			; The error code
             0666** MOSCALL	mos_getError		; Copy the error message into the buffer
0B41E9 3E   0001**M LD	A, function
0B41EA 0F 
0B41EB 49   0002**M RST.LIS	08h
0B41EC CF 
0B41ED F1    0667** POP	AF
0B41EE E5    0668** PUSH	HL			; Stack the address of the error (now in ACCS)
0B41EF C6    0669** ADD	A, 127			; Add 127 to the error code (MOS errors start at 128, and are trappable)
0B41F0 7F 
0B41F1 C3    0670** JP	EXTERR			; Trigger an external error
0B41F2 3F 
0B41F3 37 
0B41F4 0B 
             0671** 
             0672** ;OSSAVE - Save an area of memory to a file.
             0673** ;   Inputs: HL addresses filename (term CR)
             0674** ;           DE = start address of data to save
             0675** ;           BC = length of data to save (bytes)
             0676** ; Destroys: A,B,C,D,E,H,L,F
             0677** ;
0B41F5 C5    0678** OSSAVE:			PUSH	BC			; Stack the size
0B41F6 D5    0679** PUSH	DE			; Stack the save address
0B41F7 11    0680** LD	DE, ACCS		; Buffer address for filename
0B41F8 00 
0B41F9 53 
0B41FA 0B 
0B41FB CD    0681** CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0B41FC E1 
0B41FD 3D 
0B41FE 0B 
0B41FF 21    0682** LD	HL, ACCS		; HL: Filename
0B4200 00 
0B4201 53 
0B4202 0B 
0B4203 CD    0683** CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0B4204 5C 
0B4205 42 
0B4206 0B 
0B4207 CD    0684** CALL	EXT_HANDLER		; Get the default handler
0B4208 70 
0B4209 42 
0B420A 0B 
0B420B D1    0685** POP	DE			; Restore the save address
0B420C C1    0686** POP	BC			; Restore the size
0B420D B7    0687** OR	A			; Is the extension .BBC
0B420E 28    0688** JR	Z, OSSAVE_BBC		; Yes, so use that
0B420F 44 
             0689** ;
             0690** ; Save the file out as a text file
             0691** ;
0B4210 3A    0692** OSSAVE_TXT:		LD 	A, (OSWRCHCH)		; Stack the current channel
0B4211 45 
0B4212 56 
0B4213 0B 
0B4214 F5    0693** PUSH	AF
0B4215 AF    0694** XOR	A
0B4216 3C    0695** INC	A			; Make sure C is clear, A is 1, for OPENOUT
0B4217 32    0696** LD	(OSWRCHCH), A
0B4218 45 
0B4219 56 
0B421A 0B 
0B421B CD    0697** CALL	OSOPEN			; Open the file
0B421C E4 
0B421D 42 
0B421E 0B 
0B421F 32    0698** LD	(OSWRCHFH), A		; Store the file handle for OSWRCH
0B4220 46 
0B4221 56 
0B4222 0B 
0B4223 DD    0699** LD	IX, LISTON		; Required for LISTIT
0B4224 21 
0B4225 40 
0B4226 56 
0B4226 0B   
0B4228 2A    0700** LD	HL, (PAGE_)		; Get start of program area
0B4229 14 
0B422A 56 
0B422B 0B 
0B422C D9    0701** EXX
0B422D 01    0702** LD	BC, 0			; Set the initial indent counters
0B422E 00 
0B422F 00 
0B4230 00 
0B4231 D9    0703** EXX
0B4232 7E    0704** OSSAVE_TXT1:		LD	A, (HL)			; Check for end of program marker
0B4233 B7    0705** OR	A
0B4234 28    0706** JR	Z, OSSAVE_TXT2
0B4235 0F 
0B4236 23    0707** INC	HL			; Skip the length byte
0B4237 11    0708** LD	DE, 0			; Clear DE to ensure we get a 16-bit line number
0B4238 00 
0B4239 00 
0B423A 00 
0B423B 5E    0709** LD	E, (HL)			; Get the line number
0B423C 23    0710** INC	HL
0B423D 56    0711** LD	D, (HL)
0B423E 23    0712** INC	HL
0B423F CD    0713** CALL	LISTIT			; List the line
0B4240 5A 
0B4241 38 
0B4242 0B 
0B4243 18    0714** JR	OSSAVE_TXT1
0B4244 ED 
0B4245 3A    0715** OSSAVE_TXT2:		LD	A, (OSWRCHFH)		; Get the file handle
0B4246 46 
0B4247 56 
0B4248 0B 
0B4249 5F    0716** LD	E, A
0B424A CD    0717** CALL	OSSHUT			; Close it
0B424B F3 
0B424C 42 
0B424D 0B 
0B424E F1    0718** POP	AF			; Restore the channel
0B424F 32    0719** LD	(OSWRCHCH), A
0B4250 45 
0B4251 56 
0B4252 0B 
0B4253 C9    0720** RET
             0721** ;
             0722** ; Save the file out as a tokenised binary blob
             0723** ;
             0724** OSSAVE_BBC:		MOSCALL	mos_save		; Call SAVE in MOS
0B4254 3E   0001**M LD	A, function
0B4255 02 
0B4256 49   0002**M RST.LIS	08h
0B4257 CF 
0B4258 B7    0725** OR	A			; If there is no error (A=0)
0B4259 C8    0726** RET	Z			; Just return
0B425A 18    0727** JR	OSERROR			; Trip an error
0B425B 83 
             0728** 
             0729** ; Check if an extension is specified in the filename
             0730** ; Add a default if not specified
             0731** ; HL: Filename (CSTR format)
             0732** ;
0B425C E5    0733** EXT_DEFAULT:		PUSH	HL			; Stack the filename pointer
0B425D 0E    0734** LD	C, '.'			; Search for dot (marks start of extension)
0B425E 2E 
0B425F CD    0735** CALL	CSTR_FINDCH
0B4260 01 
0B4261 3E 
0B4262 0B 
0B4263 B7    0736** OR	A			; Check for end of string marker
0B4264 20    0737** JR	NZ, @F			; No, so skip as we have an extension at this point
0B4265 08 
0B4266 11    0738** LD	DE, EXT_LOOKUP		; Get the first (default extension)
0B4267 A0 
0B4268 42 
0B4269 0B 
0B426A CD    0739** CALL	CSTR_CAT		; Concat it to string pointed to by HL
0B426B 18 
0B426C 3E 
0B426D 0B 
0B426E E1    0740** @@:			POP	HL			; Restore the filename pointer
0B426F C9    0741** RET
             0742** 
             0743** ; Check if an extension is valid and, if so, provide a pointer to a handler
             0744** ; HL: Filename (CSTR format)
             0745** ; Returns:
             0746** ;  A: Filename extension type (0=BBC tokenised, 1=ASCII untokenised)
             0747** ;
0B4270 E5    0748** EXT_HANDLER:		PUSH	HL			; Stack the filename pointer
0B4271 0E    0749** LD	C, '.'			; Find the '.'
0B4272 2E 
0B4273 CD    0750** CALL	CSTR_FINDCH
0B4274 01 
0B4275 3E 
0B4276 0B 
0B4277 11    0751** LD	DE, EXT_LOOKUP		; The lookup table
0B4278 A0 
0B4279 42 
0B427A 0B 
             0752** ;
0B427B E5    0753** EXT_HANDLER_1:		PUSH	HL			; Stack the pointer to the extension
0B427C CD    0754** CALL	CSTR_ENDSWITH		; Check whether the string ends with the entry in the lookup
0B427D 09 
0B427E 3E 
0B427F 0B 
0B4280 E1    0755** POP	HL			; Restore the pointer to the extension
0B4281 28    0756** JR	Z, EXT_HANDLER_2	; We have a match!
0B4282 19 
             0757** ;
0B4283 1A    0758** @@:			LD	A, (DE)			; Skip to the end of the entry in the lookup
0B4284 13    0759** INC	DE
0B4285 B7    0760** OR	A
0B4286 20    0761** JR	NZ, @B
0B4287 FB 
0B4288 13    0762** INC	DE			; Skip the file extension # byte
             0763** ;
0B4289 1A    0764** LD	A, (DE)			; Are we at the end of the table?
0B428A B7    0765** OR	A
0B428B 20    0766** JR	NZ, EXT_HANDLER_1	; No, so loop
0B428C EE 
             0767** ;
0B428D 3E    0768** LD      A,204			; Throw a "Bad name" error
0B428E CC 
0B428F CD    0769** CALL    EXTERR
0B4290 3F 
0B4291 37 
0B4292 0B 
0B4293 42    0770** DB    	"Bad name", 0
0B4294 61 
0B4295 64 
0B4296 20 
0B4296 6E   
0B4297 61 
0B4298 6D 
0B4299 65 
0B4299 00   
             0771** ;
0B429C 13    0772** EXT_HANDLER_2:		INC	DE			; Skip to the file extension # byte
0B429D 1A    0773** LD	A, (DE)
0B429E E1    0774** POP	HL			; Restore the filename pointer
0B429F C9    0775** RET
             0776** ;
             0777** 
             0778** 
             0779** ; Extension lookup table
             0780** ; CSTR, TYPE
             0781** ; 	- 0: BBC (tokenised BBC BASIC for Z80 format)
             0782** ; 	- 1: Human readable plain text
             0783** ;
0B42A0 2E    0784** EXT_LOOKUP:		DB	".BBC", 0, 0		; First entry is the default extension
0B42A1 42 
0B42A2 42 
0B42A3 43 
0B42A3 00   
0B42A4 00 
0B42A6 2E    0785** DB	".TXT", 0, 1
0B42A7 54 
0B42A8 58 
0B42A9 54 
0B42A9 00   
0B42AA 01 
0B42AC 2E    0786** DB	".ASC", 0, 1
0B42AD 41 
0B42AE 53 
0B42AF 43 
0B42AF 00   
0B42B0 01 
0B42B2 2E    0787** DB	".BAS", 0, 1
0B42B3 42 
0B42B4 41 
0B42B5 53 
0B42B5 00   
0B42B6 01 
0B42B8 00    0788** DB	0			; End of table
             0789** 
             0790** ;OSCALL - Intercept page &FF calls and provide an alternative address
             0791** ;
             0792** ;&FFF7:	OSCLI	Execute *command.
             0793** ;&FFF4:	OSBYTE	Various byte-wide functions.
             0794** ;&FFF1:	OSWORD	Various control block functions.
             0795** ;&FFEE:	OSWRCH	Write character to output stream.
             0796** ;&FFE7:	OSNEWL	Write NewLine to output stream.
             0797** ;&FFE3:	OSASCI	Write character or NewLine to output stream.
             0798** ;&FFE0:	OSRDCH	Wait for character from input stream.
             0799** ;&FFDD:	OSFILE	Perform actions on whole files or directories.
             0800** ;&FFDA:	OSARGS	Read and write information on open files or filing systems.
             0801** ;&FFD7:	OSBGET	Read a byte from an a channel.
             0802** ;&FFD4:	OSBPUT	Write a byte to a channel.
             0803** ;&FFD1:	OSGBPB	Read and write blocks of data.
             0804** ;&FFCE:	OSFIND	Open or close a file.
             0805** ;
0B42B9 21    0806** OSCALL:			LD	HL, OSCALL_TABLE
0B42BA CF 
0B42BB 42 
0B42BC 0B 
0B42BD 7E    0807** OSCALL_1:		LD	A, (HL)
0B42BE 23    0808** INC	HL
0B42BF FE    0809** CP	FFh
0B42C0 FF 
0B42C1 C8    0810** RET	Z
0B42C2 FD    0811** CP	A, IYL
0B42C3 BD 
0B42C4 28    0812** JR	Z, OSCALL_2
0B42C5 06 
0B42C6 D0    0813** RET	NC
0B42C7 23    0814** INC	HL
0B42C8 23    0815** INC	HL
0B42C9 23    0816** INC	HL
0B42CA 18    0817** JR	OSCALL_1
0B42CB F1 
0B42CC ED    0818** OSCALL_2:		LD	IY,(HL)
0B42CD 31 
0B42CE C9    0819** RET
0B42CF D4    0820** OSCALL_TABLE:		DB 	D4h
0B42D0 03    0821** DW24 	OSBPUT
0B42D1 43 
0B42D2 0B 
0B42D3 D7    0822** DB 	D7h
0B42D4 FB    0823** DW24 	OSBGET
0B42D5 42 
0B42D6 0B 
0B42D7 EE    0824** DB 	EEh
0B42D8 C8    0825** DW24 	OSWRCH
0B42D9 3E 
0B42DA 0B 
0B42DB F4    0826** DB	F4h
0B42DC 81    0827** DW24 	OSBYTE
0B42DD 40 
0B42DE 0B 
0B42DF F7    0828** DB	F7h
0B42E0 58    0829** DW24	OSCLI
0B42E1 3F 
0B42E2 0B 
0B42E3 FF    0830** DB	FFh
             0831** 
             0832** ; OSOPEN
             0833** ; HL: Pointer to path
             0834** ;  F: C Z
             0835** ;     x x OPENIN
             0836** ; 	  OPENOUT
             0837** ;     x	  OPENUP
             0838** ; Returns:
             0839** ;  A: Filehandle, 0 if cannot open
             0840** ;
0B42E4 0E    0841** OSOPEN:			LD	C, fa_read
0B42E5 01 
0B42E6 28    0842** JR	Z, @F
0B42E7 06 
0B42E8 0E    0843** LD	C, fa_write | fa_open_append
0B42E9 32 
0B42EA 38    0844** JR	C, @F
0B42EB 02 
0B42EC 0E    0845** LD	C, fa_write | fa_create_always
0B42ED 0A 
             0846** @@:			MOSCALL	mos_fopen
0B42EE 3E   0001**M LD	A, function
0B42EF 0A 
0B42F0 49   0002**M RST.LIS	08h
0B42F1 CF 
0B42F2 C9    0847** RET
             0848** 
             0849** ;OSSHUT - Close disk file(s).
             0850** ; E = file channel
             0851** ;  If E=0 all files are closed (except SPOOL)
             0852** ; Destroys: A,B,C,D,E,H,L,F
             0853** ;
0B42F3 C5    0854** OSSHUT:			PUSH	BC
0B42F4 4B    0855** LD	C, E
             0856** MOSCALL	mos_fclose
0B42F5 3E   0001**M LD	A, function
0B42F6 0B 
0B42F7 49   0002**M RST.LIS	08h
0B42F8 CF 
0B42F9 C1    0857** POP	BC
0B42FA C9    0858** RET
             0859** 
             0860** ; OSBGET - Read a byte from a random disk file.
             0861** ;  E = file channel
             0862** ; Returns
             0863** ;  A = byte read
             0864** ;  Carry set if LAST BYTE of file
             0865** ; Destroys: A,B,C,F
             0866** ;
0B42FB C5    0867** OSBGET:			PUSH	BC
0B42FC 4B    0868** LD	C, E
             0869** MOSCALL	mos_fgetc
0B42FD 3E   0001**M LD	A, function
0B42FE 0C 
0B42FF 49   0002**M RST.LIS	08h
0B4300 CF 
0B4301 C1    0870** POP	BC
0B4302 C9    0871** RET
             0872** 
             0873** ; OSBPUT - Write a byte to a random disk file.
             0874** ;  E = file channel
             0875** ;  A = byte to write
             0876** ; Destroys: A,B,C,F
             0877** ;
0B4303 C5    0878** OSBPUT:			PUSH	BC
0B4304 4B    0879** LD	C, E
0B4305 47    0880** LD	B, A
             0881** MOSCALL	mos_fputc
0B4306 3E   0001**M LD	A, function
0B4307 0D 
0B4308 49   0002**M RST.LIS	08h
0B4309 CF 
0B430A C1    0882** POP	BC
0B430B C9    0883** RET
             0884** 
             0885** ; OSSTAT - Read file status
             0886** ;  E = file channel
             0887** ; Returns
             0888** ;  F: Z flag set - EOF
             0889** ;  A: If Z then A = 0
             0890** ; Destroys: A,D,E,H,L,F
             0891** ;
0B430C C5    0892** OSSTAT:			PUSH	BC
0B430D 4B    0893** LD	C, E
             0894** MOSCALL	mos_feof
0B430E 3E   0001**M LD	A, function
0B430F 0E 
0B4310 49   0002**M RST.LIS	08h
0B4311 CF 
0B4312 C1    0895** POP	BC
0B4313 FE    0896** CP	1
0B4314 01 
0B4315 C9    0897** RET
             0898** 
             0899** ; GETPTR - Return file pointer.
             0900** ;    E = file channel
             0901** ; Returns:
             0902** ; DEHL = pointer (0-&7FFFFF)
             0903** ; Destroys: A,B,C,D,E,H,L,F
             0904** ;
0B4316 FD    0905** GETPTR:			PUSH		IY
0B4317 E5 
0B4318 4B    0906** LD		C, E
             0907** MOSCALL		mos_getfil 	; HLU: Pointer to FIL structure
0B4319 3E   0001**M LD	A, function
0B431A 19 
0B431B 49   0002**M RST.LIS	08h
0B431C CF 
0B431D E5    0908** PUSH		HL
0B431E FD    0909** POP		IY		; IYU: Pointer to FIL structure
0B431F E1 
0B4320 FD    0910** LD		L, (IY + FIL.fptr + 0)
0B4321 6E 
0B4322 11 
0B4323 FD    0911** LD		H, (IY + FIL.fptr + 1)
0B4324 66 
0B4325 12 
0B4326 FD    0912** LD		E, (IY + FIL.fptr + 2)
0B4327 5E 
0B4328 13 
0B4329 FD    0913** LD		D, (IY + FIL.fptr + 3)
0B432A 56 
0B432B 14 
0B432C FD    0914** POP		IY
0B432D E1 
0B432E C9    0915** RET
             0916** 
             0917** ; PUTPTR - Update file pointer.
             0918** ;    A = file channel
             0919** ; DEHL = new pointer (0-&7FFFFF)
             0920** ; Destroys: A,B,C,D,E,H,L,F
             0921** ;
0B432F FD    0922** PUTPTR:			PUSH		IY
0B4330 E5 
0B4331 4F    0923** LD		C, A  		; C: Filehandle
0B4332 E5    0924** PUSH		HL
0B4333 21    0925** LD		HL, 2
0B4334 02 
0B4335 00 
0B4336 00 
0B4337 39    0926** ADD		HL, SP
0B4338 73    0927** LD		(HL), E 	; 3rd byte of DWORD set to E
0B4339 E1    0928** POP		HL
0B433A 5A    0929** LD		E, D  		; 4th byte passed as E
             0930** MOSCALL		mos_flseek
0B433B 3E   0001**M LD	A, function
0B433C 1C 
0B433D 49   0002**M RST.LIS	08h
0B433E CF 
0B433F FD    0931** POP		IY
0B4340 E1 
0B4341 C9    0932** RET
             0933** 
             0934** ; GETEXT - Find file size.
             0935** ;    E = file channel
             0936** ; Returns:
             0937** ; DEHL = file size (0-&800000)
             0938** ; Destroys: A,B,C,D,E,H,L,F
             0939** ;
0B4342 FD    0940** GETEXT:         PUSH    IY
0B4343 E5 
0B4344 4B    0941** LD      C, E
             0942** MOSCALL mos_getfil  ; HLU: Pointer to FIL structure
0B4345 3E   0001**M LD	A, function
0B4346 19 
0B4347 49   0002**M RST.LIS	08h
0B4348 CF 
0B4349 E5    0943** PUSH    HL
0B434A FD    0944** POP     IY          ; IYU: Pointer to FIL structure
0B434B E1 
             0945** ; Access the obj.objsize field using the offset values
0B434C FD    0946** LD      L, (IY + FIL.obj + FFOBJID.objsize + 0)
0B434D 6E 
0B434E 0B 
0B434F FD    0947** LD      H, (IY + FIL.obj + FFOBJID.objsize + 1)
0B4350 66 
0B4351 0C 
0B4352 FD    0948** LD      E, (IY + FIL.obj + FFOBJID.objsize + 2)
0B4353 5E 
0B4354 0D 
0B4355 FD    0949** LD      D, (IY + FIL.obj + FFOBJID.objsize + 3)
0B4356 56 
0B4357 0E 
             0950** 
0B4358 FD    0951** POP     IY
0B4359 E1 
0B435A C9    0952** RET
             0953** 
             0954** ; GETIMS - Get time from RTC
             0955** ;
0B435B FD    0956** GETIMS:			PUSH	IY
0B435C E5 
0B435D 21    0957** LD	HL, ACCS 		; Where to store the time string
0B435E 00 
0B435F 53 
0B4360 0B 
             0958** MOSCALL	mos_getrtc
0B4361 3E   0001**M LD	A, function
0B4362 12 
0B4363 49   0002**M RST.LIS	08h
0B4364 CF 
0B4365 11    0959** LD	DE, ACCS		; DE: pointer to start of string accumulator
0B4366 00 
0B4367 53 
0B4368 0B 
0B4369 5F    0960** LD	E, A 			;  E: now points to the end of the string
0B436A FD    0961** POP	IY
0B436B E1 
0B436C C9    0962** RET
             0963** 
             0964** ; Get two word values from EXPR in DE, HL
             0965** ; IY: Pointer to expression string
             0966** ; Returns:
             0967** ; DE: P1
             0968** ; HL: P2
             0969** ;
0B436D CD    0970** EXPR_W2:		CALL	EXPRI			; Get first parameter
0B436E D2 
0B436F 02 
0B4370 0B 
0B4371 D9    0971** EXX
0B4372 E5    0972** PUSH	HL
0B4373 CD    0973** CALL	COMMA
0B4374 EA 
0B4375 09 
0B4376 0B 
0B4377 CD    0974** CALL	EXPRI			; Get second parameter
0B4378 D2 
0B4379 02 
0B437A 0B 
0B437B D9    0975** EXX
0B437C D1    0976** POP	DE
0B437D C9    0977** RET
             0978** 
             0979** ; Stuff not implemented yet
             0980** ;
0B437E C9    0981** RESET:			RET
              0010* include "basic/sorry.asm"
             0001** ;
             0002** ; Title:	BBC Basic Interpreter - Z80 version
             0003** ;		Catch-all for unimplemented functionality
             0004** ; Author:	Dean Belfield
             0005** ; Created:	12/05/2023
             0006** ; Last Updated:	12/05/2023
             0007** ;
             0008** ; Modinfo:
             0009** 
             0010** ; .ASSUME	ADL = 1
             0011** 
             0012** ; SEGMENT CODE
             0013** 
             0014** ; XDEF	ENVEL
             0015** ; XDEF	ADVAL
             0016** ; XDEF	PUTIMS
             0017** 
             0018** ; XREF	EXTERR
             0019** 
             0020** ENVEL:
             0021** ADVAL:
             0022** PUTIMS:
0B437F AF    0023** XOR     A
0B4380 CD    0024** CALL    EXTERR
0B4381 3F 
0B4382 37 
0B4383 0B 
0B4384 53    0025** DEFB    "Sorry"
0B4385 6F 
0B4386 72 
0B4387 72 
0B4387 79   
0B4389 00    0026** DEFB    0
              0011* include "basic/agon_graphics.asm"
             0001** ;
             0002** ; Title:	BBC Basic for AGON - Graphics stuff
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	07/06/2023
             0006** ;
             0007** ; Modinfo:
             0008** ; 07/06/2023:	Modified to run in ADL mode
             0009** 
             0010** ; .ASSUME	ADL = 1
             0011** 
             0012** ; INCLUDE	"equs.inc"
             0013** ; INCLUDE "macros.inc"
             0014** ; INCLUDE "mos_api.inc"	; In MOS/src
             0015** 
             0016** ; SEGMENT CODE
             0017** 
             0018** ; XDEF	CLG
             0019** ; XDEF	CLRSCN
             0020** ; XDEF	MODE
             0021** ; XDEF	COLOUR
             0022** ; XDEF	GCOL
             0023** ; XDEF	MOVE
             0024** ; XDEF	PLOT
             0025** ; XDEF	DRAW
             0026** ; XDEF	POINT
             0027** ; XDEF	GETSCHR
             0028** 
             0029** ; XREF	OSWRCH
             0030** ; XREF	ASC_TO_NUMBER
             0031** ; XREF	EXTERR
             0032** ; XREF	EXPRI
             0033** ; XREF	COMMA
             0034** ; XREF	XEQ
             0035** ; XREF	NXT
             0036** ; XREF	BRAKET
             0037** ; XREF	COUNT0
             0038** ; XREF	CRTONULL
             0039** ; XREF	NULLTOCR
             0040** ; XREF	CRLF
             0041** ; XREF	EXPR_W2
             0042** ; XREF	INKEY1
             0043** 
             0044** ; CLG: clears the graphics area
             0045** ;
             0046** CLG:
             0047** 
             0048** VDU	10h
0B438A 3E   0001**M LD	A, val
0B438B 10 
0B438C CD   0002**M CALL	OSWRCH
0B438D C8 
0B438E 3E 
0B438F 0B 
0B4390 C3    0049** JP	XEQ
0B4391 5E 
0B4392 0B 
0B4393 0B 
             0050** 
             0051** ; CLS: clears the text area
             0052** ;
0B4394 3E    0053** CLRSCN:			LD	A, 0Ch
0B4395 0C 
0B4396 C3    0054** JP	OSWRCH
0B4397 C8 
0B4398 3E 
0B4399 0B 
             0055** 
             0056** ; MODE n: Set video mode
             0057** ;
0B439A DD    0058** MODE:			PUSH	IX			; Get the system vars in IX
0B439B E5 
             0059** MOSCALL	mos_sysvars		; Reset the semaphore
0B439C 3E   0001**M LD	A, function
0B439D 08 
0B439E 49   0002**M RST.LIS	08h
0B439F CF 
0B43A0 DD    0060** RES	4, (IX+sysvar_vpd_pflags)
0B43A1 CB 
0B43A2 04 
0B43A3 A6 
0B43A4 CD    0061** CALL    EXPRI
0B43A5 D2 
0B43A6 02 
0B43A7 0B 
0B43A8 D9    0062** EXX
             0063** VDU	16H			; Mode change
0B43A9 3E   0001**M LD	A, val
0B43AA 16 
0B43AB CD   0002**M CALL	OSWRCH
0B43AC C8 
0B43AD 3E 
0B43AE 0B 
             0064** VDU	L
0B43AF 7D   0001**M LD	A, val
0B43B0 CD   0002**M CALL	OSWRCH
0B43B1 C8 
0B43B2 3E 
0B43B3 0B 
             0065** MOSCALL	mos_sysvars
0B43B4 3E   0001**M LD	A, function
0B43B5 08 
0B43B6 49   0002**M RST.LIS	08h
0B43B7 CF 
0B43B8 DD    0066** @@:			BIT	4, (IX+sysvar_vpd_pflags)
0B43B9 CB 
0B43BA 04 
0B43BB 66 
0B43BC 28    0067** JR	Z, @B			; Wait for the result
0B43BD FA 
0B43BE DD    0068** POP	IX
0B43BF E1 
0B43C0 C3    0069** JP	XEQ
0B43C1 5E 
0B43C2 0B 
0B43C3 0B 
             0070** 
             0071** ; GET(x,y): Get the ASCII code of a character on screen
             0072** ;
0B43C4 FD    0073** GETSCHR:		INC	IY
0B43C5 23 
0B43C6 CD    0074** CALL    EXPRI      		; Get X coordinate
0B43C7 D2 
0B43C8 02 
0B43C9 0B 
0B43CA D9    0075** EXX
0B43CB 22    0076** LD	(VDU_BUFFER+0), HL
0B43CC 00 
0B43CD 53 
0B43CE 0B 
0B43CF CD    0077** CALL	COMMA
0B43D0 EA 
0B43D1 09 
0B43D2 0B 
0B43D3 CD    0078** CALL	EXPRI			; Get Y coordinate
0B43D4 D2 
0B43D5 02 
0B43D6 0B 
0B43D7 D9    0079** EXX
0B43D8 22    0080** LD	(VDU_BUFFER+2), HL
0B43D9 02 
0B43DA 53 
0B43DB 0B 
0B43DC CD    0081** CALL	BRAKET			; Closing bracket
0B43DD F7 
0B43DE 09 
0B43DF 0B 
             0082** ;
0B43E0 DD    0083** PUSH	IX			; Get the system vars in IX
0B43E1 E5 
             0084** MOSCALL	mos_sysvars		; Reset the semaphore
0B43E2 3E   0001**M LD	A, function
0B43E3 08 
0B43E4 49   0002**M RST.LIS	08h
0B43E5 CF 
0B43E6 DD    0085** RES	1, (IX+sysvar_vpd_pflags)
0B43E7 CB 
0B43E8 04 
0B43E9 8E 
             0086** VDU	23
0B43EA 3E   0001**M LD	A, val
0B43EB 17 
0B43EC CD   0002**M CALL	OSWRCH
0B43ED C8 
0B43EE 3E 
0B43EF 0B 
             0087** VDU	0
0B43F0 3E   0001**M LD	A, val
0B43F1 00 
0B43F2 CD   0002**M CALL	OSWRCH
0B43F3 C8 
0B43F4 3E 
0B43F5 0B 
             0088** VDU	vdp_scrchar
0B43F6 3E   0001**M LD	A, val
0B43F7 83 
0B43F8 CD   0002**M CALL	OSWRCH
0B43F9 C8 
0B43FA 3E 
0B43FB 0B 
             0089** VDU	(VDU_BUFFER+0)
0B43FC 3A   0001**M LD	A, val
0B43FD 00 
0B43FE 53 
0B43FF 0B 
0B4400 CD   0002**M CALL	OSWRCH
0B4401 C8 
0B4402 3E 
0B4403 0B 
             0090** VDU	(VDU_BUFFER+1)
0B4404 3A   0001**M LD	A, val
0B4405 01 
0B4406 53 
0B4407 0B 
0B4408 CD   0002**M CALL	OSWRCH
0B4409 C8 
0B440A 3E 
0B440B 0B 
             0091** VDU	(VDU_BUFFER+2)
0B440C 3A   0001**M LD	A, val
0B440D 02 
0B440E 53 
0B440F 0B 
0B4410 CD   0002**M CALL	OSWRCH
0B4411 C8 
0B4412 3E 
0B4413 0B 
             0092** VDU	(VDU_BUFFER+3)
0B4414 3A   0001**M LD	A, val
0B4415 03 
0B4416 53 
0B4417 0B 
0B4418 CD   0002**M CALL	OSWRCH
0B4419 C8 
0B441A 3E 
0B441B 0B 
0B441C DD    0093** @@:			BIT	1, (IX+sysvar_vpd_pflags)
0B441D CB 
0B441E 04 
0B441F 4E 
0B4420 28    0094** JR	Z, @B			; Wait for the result
0B4421 FA 
0B4422 DD    0095** LD	A, (IX+sysvar_scrchar)	; Fetch the result in A
0B4423 7E 
0B4424 09 
0B4425 B7    0096** OR	A			; Check for 00h
0B4426 37    0097** SCF				; C = character map
0B4427 20    0098** JR	NZ, @F			; We have a character, so skip next bit
0B4428 02 
0B4429 AF    0099** XOR	A			; Clear carry
0B442A 3D    0100** DEC	A			; Set A to FFh
0B442B DD    0101** @@:			POP	IX
0B442C E1 
0B442D C3    0102** JP	INKEY1			; Jump back to the GET command
0B442E A9 
0B442F 07 
0B4430 0B 
             0103** 
             0104** ; POINT(x,y): Get the pixel colour of a point on screen
             0105** ;
0B4431 CD    0106** POINT:			CALL    EXPRI      		; Get X coordinate
0B4432 D2 
0B4433 02 
0B4434 0B 
0B4435 D9    0107** EXX
0B4436 22    0108** LD	(VDU_BUFFER+0), HL
0B4437 00 
0B4438 53 
0B4439 0B 
0B443A CD    0109** CALL	COMMA
0B443B EA 
0B443C 09 
0B443D 0B 
0B443E CD    0110** CALL	EXPRI			; Get Y coordinate
0B443F D2 
0B4440 02 
0B4441 0B 
0B4442 D9    0111** EXX
0B4443 22    0112** LD	(VDU_BUFFER+2), HL
0B4444 02 
0B4445 53 
0B4446 0B 
0B4447 CD    0113** CALL	BRAKET			; Closing bracket
0B4448 F7 
0B4449 09 
0B444A 0B 
             0114** ;
0B444B DD    0115** PUSH	IX			; Get the system vars in IX
0B444C E5 
             0116** MOSCALL	mos_sysvars		; Reset the semaphore
0B444D 3E   0001**M LD	A, function
0B444E 08 
0B444F 49   0002**M RST.LIS	08h
0B4450 CF 
0B4451 DD    0117** RES	2, (IX+sysvar_vpd_pflags)
0B4452 CB 
0B4453 04 
0B4454 96 
             0118** VDU	23
0B4455 3E   0001**M LD	A, val
0B4456 17 
0B4457 CD   0002**M CALL	OSWRCH
0B4458 C8 
0B4459 3E 
0B445A 0B 
             0119** VDU	0
0B445B 3E   0001**M LD	A, val
0B445C 00 
0B445D CD   0002**M CALL	OSWRCH
0B445E C8 
0B445F 3E 
0B4460 0B 
             0120** VDU	vdp_scrpixel
0B4461 3E   0001**M LD	A, val
0B4462 84 
0B4463 CD   0002**M CALL	OSWRCH
0B4464 C8 
0B4465 3E 
0B4466 0B 
             0121** VDU	(VDU_BUFFER+0)
0B4467 3A   0001**M LD	A, val
0B4468 00 
0B4469 53 
0B446A 0B 
0B446B CD   0002**M CALL	OSWRCH
0B446C C8 
0B446D 3E 
0B446E 0B 
             0122** VDU	(VDU_BUFFER+1)
0B446F 3A   0001**M LD	A, val
0B4470 01 
0B4471 53 
0B4472 0B 
0B4473 CD   0002**M CALL	OSWRCH
0B4474 C8 
0B4475 3E 
0B4476 0B 
             0123** VDU	(VDU_BUFFER+2)
0B4477 3A   0001**M LD	A, val
0B4478 02 
0B4479 53 
0B447A 0B 
0B447B CD   0002**M CALL	OSWRCH
0B447C C8 
0B447D 3E 
0B447E 0B 
             0124** VDU	(VDU_BUFFER+3)
0B447F 3A   0001**M LD	A, val
0B4480 03 
0B4481 53 
0B4482 0B 
0B4483 CD   0002**M CALL	OSWRCH
0B4484 C8 
0B4485 3E 
0B4486 0B 
0B4487 DD    0125** @@:			BIT	2, (IX+sysvar_vpd_pflags)
0B4488 CB 
0B4489 04 
0B448A 56 
0B448B 28    0126** JR	Z, @B			; Wait for the result
0B448C FA 
             0127** ;
             0128** ; Return the data as a 1 byte index
             0129** ;
0B448D DD    0130** LD	L, (IX+sysvar_scrpixelIndex)
0B448E 6E 
0B448F 16 
0B4490 DD    0131** POP	IX
0B4491 E1 
0B4492 C3    0132** JP	COUNT0
0B4493 47 
0B4494 05 
0B4495 0B 
             0133** 
             0134** 
             0135** ; COLOUR colour
             0136** ; COLOUR L,P
             0137** ; COLOUR L,R,G,B
             0138** ;
0B4496 CD    0139** COLOUR:			CALL	EXPRI			; The colour / mode
0B4497 D2 
0B4498 02 
0B4499 0B 
0B449A D9    0140** EXX
0B449B 7D    0141** LD	A, L
0B449C 32    0142** LD	(VDU_BUFFER+0), A	; Store first parameter
0B449D 00 
0B449E 53 
0B449F 0B 
0B44A0 CD    0143** CALL	NXT			; Are there any more parameters?
0B44A1 38 
0B44A2 0A 
0B44A3 0B 
0B44A4 FE    0144** CP	','
0B44A5 2C 
0B44A6 28    0145** JR	Z, COLOUR_1		; Yes, so we're doing a palette change next
0B44A7 12 
             0146** ;
             0147** VDU	11h			; Just set the colour
0B44A8 3E   0001**M LD	A, val
0B44A9 11 
0B44AA CD   0002**M CALL	OSWRCH
0B44AB C8 
0B44AC 3E 
0B44AD 0B 
             0148** VDU	(VDU_BUFFER+0)
0B44AE 3A   0001**M LD	A, val
0B44AF 00 
0B44B0 53 
0B44B1 0B 
0B44B2 CD   0002**M CALL	OSWRCH
0B44B3 C8 
0B44B4 3E 
0B44B5 0B 
0B44B6 C3    0149** JP	XEQ
0B44B7 5E 
0B44B8 0B 
0B44B9 0B 
             0150** ;
0B44BA CD    0151** COLOUR_1:		CALL	COMMA
0B44BB EA 
0B44BC 09 
0B44BD 0B 
0B44BE CD    0152** CALL	EXPRI			; Parse R (OR P)
0B44BF D2 
0B44C0 02 
0B44C1 0B 
0B44C2 D9    0153** EXX
0B44C3 7D    0154** LD	A, L
0B44C4 32    0155** LD	(VDU_BUFFER+1), A
0B44C5 01 
0B44C6 53 
0B44C7 0B 
0B44C8 CD    0156** CALL	NXT			; Are there any more parameters?
0B44C9 38 
0B44CA 0A 
0B44CB 0B 
0B44CC FE    0157** CP	','
0B44CD 2C 
0B44CE 28    0158** JR	Z, COLOUR_2		; Yes, so we're doing COLOUR L,R,G,B
0B44CF 2C 
             0159** ;
             0160** VDU	13h			; VDU:COLOUR
0B44D0 3E   0001**M LD	A, val
0B44D1 13 
0B44D2 CD   0002**M CALL	OSWRCH
0B44D3 C8 
0B44D4 3E 
0B44D5 0B 
             0161** VDU	(VDU_BUFFER+0)		; Logical Colour
0B44D6 3A   0001**M LD	A, val
0B44D7 00 
0B44D8 53 
0B44D9 0B 
0B44DA CD   0002**M CALL	OSWRCH
0B44DB C8 
0B44DC 3E 
0B44DD 0B 
             0162** VDU	(VDU_BUFFER+1)		; Palette Colour
0B44DE 3A   0001**M LD	A, val
0B44DF 01 
0B44E0 53 
0B44E1 0B 
0B44E2 CD   0002**M CALL	OSWRCH
0B44E3 C8 
0B44E4 3E 
0B44E5 0B 
             0163** VDU	0			; RGB set to 0
0B44E6 3E   0001**M LD	A, val
0B44E7 00 
0B44E8 CD   0002**M CALL	OSWRCH
0B44E9 C8 
0B44EA 3E 
0B44EB 0B 
             0164** VDU	0
0B44EC 3E   0001**M LD	A, val
0B44ED 00 
0B44EE CD   0002**M CALL	OSWRCH
0B44EF C8 
0B44F0 3E 
0B44F1 0B 
             0165** VDU	0
0B44F2 3E   0001**M LD	A, val
0B44F3 00 
0B44F4 CD   0002**M CALL	OSWRCH
0B44F5 C8 
0B44F6 3E 
0B44F7 0B 
0B44F8 C3    0166** JP	XEQ
0B44F9 5E 
0B44FA 0B 
0B44FB 0B 
             0167** ;
0B44FC CD    0168** COLOUR_2:		CALL	COMMA
0B44FD EA 
0B44FE 09 
0B44FF 0B 
0B4500 CD    0169** CALL	EXPRI			; Parse G
0B4501 D2 
0B4502 02 
0B4503 0B 
0B4504 D9    0170** EXX
0B4505 7D    0171** LD	A, L
0B4506 32    0172** LD	(VDU_BUFFER+2), A
0B4507 02 
0B4508 53 
0B4509 0B 
0B450A CD    0173** CALL	COMMA
0B450B EA 
0B450C 09 
0B450D 0B 
0B450E CD    0174** CALL	EXPRI			; Parse B
0B450F D2 
0B4510 02 
0B4511 0B 
0B4512 D9    0175** EXX
0B4513 7D    0176** LD	A, L
0B4514 32    0177** LD	(VDU_BUFFER+3), A
0B4515 03 
0B4516 53 
0B4517 0B 
             0178** VDU	13h			; VDU:COLOUR
0B4518 3E   0001**M LD	A, val
0B4519 13 
0B451A CD   0002**M CALL	OSWRCH
0B451B C8 
0B451C 3E 
0B451D 0B 
             0179** VDU	(VDU_BUFFER+0)		; Logical Colour
0B451E 3A   0001**M LD	A, val
0B451F 00 
0B4520 53 
0B4521 0B 
0B4522 CD   0002**M CALL	OSWRCH
0B4523 C8 
0B4524 3E 
0B4525 0B 
             0180** VDU	FFh			; Physical Colour (-1 for RGB mode)
0B4526 3E   0001**M LD	A, val
0B4527 FF 
0B4528 CD   0002**M CALL	OSWRCH
0B4529 C8 
0B452A 3E 
0B452B 0B 
             0181** VDU	(VDU_BUFFER+1)		; R
0B452C 3A   0001**M LD	A, val
0B452D 01 
0B452E 53 
0B452F 0B 
0B4530 CD   0002**M CALL	OSWRCH
0B4531 C8 
0B4532 3E 
0B4533 0B 
             0182** VDU	(VDU_BUFFER+2)		; G
0B4534 3A   0001**M LD	A, val
0B4535 02 
0B4536 53 
0B4537 0B 
0B4538 CD   0002**M CALL	OSWRCH
0B4539 C8 
0B453A 3E 
0B453B 0B 
             0183** VDU	(VDU_BUFFER+3)		; B
0B453C 3A   0001**M LD	A, val
0B453D 03 
0B453E 53 
0B453F 0B 
0B4540 CD   0002**M CALL	OSWRCH
0B4541 C8 
0B4542 3E 
0B4543 0B 
0B4544 C3    0184** JP	XEQ
0B4545 5E 
0B4546 0B 
0B4547 0B 
             0185** 
             0186** ; GCOL mode,colour
             0187** ;
0B4548 CD    0188** GCOL:			CALL	EXPRI			; Parse MODE
0B4549 D2 
0B454A 02 
0B454B 0B 
0B454C D9    0189** EXX
0B454D 7D    0190** LD	A, L
0B454E 32    0191** LD	(VDU_BUFFER+0), A
0B454F 00 
0B4550 53 
0B4551 0B 
0B4552 CD    0192** CALL	COMMA
0B4553 EA 
0B4554 09 
0B4555 0B 
             0193** ;
0B4556 CD    0194** CALL	EXPRI			; Parse Colour
0B4557 D2 
0B4558 02 
0B4559 0B 
0B455A D9    0195** EXX
0B455B 7D    0196** LD	A, L
0B455C 32    0197** LD	(VDU_BUFFER+1), A
0B455D 01 
0B455E 53 
0B455F 0B 
             0198** ;
             0199** VDU	12h			; VDU:GCOL
0B4560 3E   0001**M LD	A, val
0B4561 12 
0B4562 CD   0002**M CALL	OSWRCH
0B4563 C8 
0B4564 3E 
0B4565 0B 
             0200** VDU	(VDU_BUFFER+0)		; Mode
0B4566 3A   0001**M LD	A, val
0B4567 00 
0B4568 53 
0B4569 0B 
0B456A CD   0002**M CALL	OSWRCH
0B456B C8 
0B456C 3E 
0B456D 0B 
             0201** VDU	(VDU_BUFFER+1)		; Colour
0B456E 3A   0001**M LD	A, val
0B456F 01 
0B4570 53 
0B4571 0B 
0B4572 CD   0002**M CALL	OSWRCH
0B4573 C8 
0B4574 3E 
0B4575 0B 
0B4576 C3    0202** JP	XEQ
0B4577 5E 
0B4578 0B 
0B4579 0B 
             0203** 
             0204** ; PLOT mode,x,y
             0205** ;
0B457A CD    0206** PLOT:			CALL	EXPRI		; Parse mode
0B457B D2 
0B457C 02 
0B457D 0B 
0B457E D9    0207** EXX
0B457F E5    0208** PUSH	HL		; Push mode (L) onto stack
0B4580 CD    0209** CALL	COMMA
0B4581 EA 
0B4582 09 
0B4583 0B 
0B4584 CD    0210** CALL	EXPR_W2		; Parse X and Y
0B4585 6D 
0B4586 43 
0B4587 0B 
0B4588 C1    0211** POP	BC		; Pop mode (C) off stack
             0212** PLOT_1:			VDU	19H		; VDU code for PLOT
0B4589 3E   0001**M LD	A, val
0B458A 19 
0B458B CD   0002**M CALL	OSWRCH
0B458C C8 
0B458D 3E 
0B458E 0B 
             0213** VDU	C		;  C: Mode
0B458F 79   0001**M LD	A, val
0B4590 CD   0002**M CALL	OSWRCH
0B4591 C8 
0B4592 3E 
0B4593 0B 
             0214** VDU	E		; DE: X
0B4594 7B   0001**M LD	A, val
0B4595 CD   0002**M CALL	OSWRCH
0B4596 C8 
0B4597 3E 
0B4598 0B 
             0215** VDU	D
0B4599 7A   0001**M LD	A, val
0B459A CD   0002**M CALL	OSWRCH
0B459B C8 
0B459C 3E 
0B459D 0B 
             0216** VDU	L		; HL: Y
0B459E 7D   0001**M LD	A, val
0B459F CD   0002**M CALL	OSWRCH
0B45A0 C8 
0B45A1 3E 
0B45A2 0B 
             0217** VDU	H
0B45A3 7C   0001**M LD	A, val
0B45A4 CD   0002**M CALL	OSWRCH
0B45A5 C8 
0B45A6 3E 
0B45A7 0B 
0B45A8 C3    0218** JP	XEQ
0B45A9 5E 
0B45AA 0B 
0B45AB 0B 
             0219** 
             0220** ; MOVE x,y
             0221** ;
0B45AC CD    0222** MOVE:			CALL	EXPR_W2		; Parse X and Y
0B45AD 6D 
0B45AE 43 
0B45AF 0B 
0B45B0 0E    0223** LD	C, 04H		; Plot mode 04H (Move)
0B45B1 04 
0B45B2 18    0224** JR	PLOT_1		; Plot
0B45B3 D5 
             0225** 
             0226** ; DRAW x1,y1
             0227** ; DRAW x1,y1,x2,y2
             0228** ;
0B45B4 CD    0229** DRAW:			CALL	EXPR_W2		; Get X1 and Y1
0B45B5 6D 
0B45B6 43 
0B45B7 0B 
0B45B8 CD    0230** CALL	NXT		; Are there any more parameters?
0B45B9 38 
0B45BA 0A 
0B45BB 0B 
0B45BC FE    0231** CP	','
0B45BD 2C 
0B45BE 0E    0232** LD	C, 05h		; Code for LINE
0B45BF 05 
0B45C0 20    0233** JR	NZ, PLOT_1	; No, so just do DRAW x1,y1
0B45C1 C7 
             0234** VDU	19h		; Move to the first coordinates
0B45C2 3E   0001**M LD	A, val
0B45C3 19 
0B45C4 CD   0002**M CALL	OSWRCH
0B45C5 C8 
0B45C6 3E 
0B45C7 0B 
             0235** VDU	04h
0B45C8 3E   0001**M LD	A, val
0B45C9 04 
0B45CA CD   0002**M CALL	OSWRCH
0B45CB C8 
0B45CC 3E 
0B45CD 0B 
             0236** VDU	E
0B45CE 7B   0001**M LD	A, val
0B45CF CD   0002**M CALL	OSWRCH
0B45D0 C8 
0B45D1 3E 
0B45D2 0B 
             0237** VDU	D
0B45D3 7A   0001**M LD	A, val
0B45D4 CD   0002**M CALL	OSWRCH
0B45D5 C8 
0B45D6 3E 
0B45D7 0B 
             0238** VDU	L
0B45D8 7D   0001**M LD	A, val
0B45D9 CD   0002**M CALL	OSWRCH
0B45DA C8 
0B45DB 3E 
0B45DC 0B 
             0239** VDU	H
0B45DD 7C   0001**M LD	A, val
0B45DE CD   0002**M CALL	OSWRCH
0B45DF C8 
0B45E0 3E 
0B45E1 0B 
0B45E2 CD    0240** CALL	COMMA
0B45E3 EA 
0B45E4 09 
0B45E5 0B 
0B45E6 C5    0241** PUSH	BC
0B45E7 CD    0242** CALL	EXPR_W2		; Get X2 and Y2
0B45E8 6D 
0B45E9 43 
0B45EA 0B 
0B45EB C1    0243** POP	BC
0B45EC 18    0244** JR	PLOT_1		; Now DRAW the line to those positions
0B45ED 9B 
             0245** 
             0246** 
             0247** 
              0012* include "basic/agon_sound.asm"
             0001** ;
             0002** ; Title:	BBC Basic for AGON - Audio stuff
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	12/05/2023
             0006** ;
             0007** ; Modinfo:
             0008** 
             0009** ; .ASSUME	ADL = 1
             0010** 
             0011** ; INCLUDE	"equs.inc"
             0012** ; INCLUDE "macros.inc"
             0013** ; INCLUDE "mos_api.inc"	; In MOS/src
             0014** 
             0015** ; SEGMENT CODE
             0016** 
             0017** ; XDEF	SOUND
             0018** 
             0019** ; XREF	COMMA
             0020** ; XREF	EXPR_W2
             0021** ; XREF	XEQ
             0022** ; XREF	LTRAP
             0023** ; XREF	OSWRCH
             0024** ; XREF	VDU_BUFFER
             0025** 
             0026** 
             0027** ; SOUND channel,volume,pitch,duration
             0028** ; volume: 0 (off) to -15 (full volume)
             0029** ; pitch: 0 - 255
             0030** ; duration: -1 to 254 (duration in 20ths of a second, -1 = play forever)
             0031** ;
0B45EE CD    0032** SOUND:			CALL	EXPR_W2			; DE: Channel/Control, HL: Volume
0B45EF 6D 
0B45F0 43 
0B45F1 0B 
0B45F2 7D    0033** LD	A, L 			;  A: Volume
0B45F3 F5    0034** PUSH	AF
0B45F4 D5    0035** PUSH	DE
0B45F5 CD    0036** CALL	COMMA
0B45F6 EA 
0B45F7 09 
0B45F8 0B 
0B45F9 CD    0037** CALL	EXPR_W2			; DE: Pitch, HL: Duration
0B45FA 6D 
0B45FB 43 
0B45FC 0B 
0B45FD 53    0038** LD	D, E			;  D: Pitch
0B45FE 5D    0039** LD	E, L 			;  E: Duration
0B45FF E1    0040** POP	HL 			; HL: Channel/Control
0B4600 F1    0041** POP	AF
0B4601 ED    0042** NEG
0B4602 44 
0B4603 FE    0043** CP	16			; Check volume is in bounds
0B4604 10 
0B4605 D2    0044** JP	NC, XEQ			; Out of bounds, do nothing
0B4606 5E 
0B4607 0B 
0B4608 0B 
             0045** ;
             0046** ; Store	in VDU vars
             0047** ;
0B4609 4F    0048** LD	C, A			; Store Volume in C
0B460A 7D    0049** LD	A, L
0B460B 32    0050** LD	(VDU_BUFFER+0), A	; Channel
0B460C 00 
0B460D 53 
0B460E 0B 
0B460F AF    0051** XOR	A
0B4610 32    0052** LD	(VDU_BUFFER+1), A	; Waveform
0B4611 01 
0B4612 53 
0B4613 0B 
             0053** ;
             0054** ; Calculate the volume
             0055** ;
0B4614 06    0056** LD	B, 6			; C already contains the volume
0B4615 06 
0B4616 ED    0057** MLT	BC			; Multiply by 6 (0-15 scales to 0-90)
0B4617 4C 
0B4618 79    0058** LD	A, C
0B4619 32    0059** LD	(VDU_BUFFER+2), A
0B461A 02 
0B461B 53 
0B461C 0B 
             0060** ;
             0061** ; And the frequency
             0062** ;
0B461D 4B    0063** LD	C, E			; Store duration in C
0B461E 26    0064** LD	H, 0			; Lookup the frequency
0B461F 00 
0B4620 6A    0065** LD	L, D
0B4621 11    0066** LD	DE, SOUND_FREQ_LOOKUP
0B4622 A8 
0B4623 46 
0B4624 0B 
0B4625 29    0067** ADD	HL, HL
0B4626 19    0068** ADD	HL, DE
0B4627 7E    0069** LD	A, (HL)
0B4628 32    0070** LD	(VDU_BUFFER+3), A
0B4629 03 
0B462A 53 
0B462B 0B 
0B462C 23    0071** INC	HL
0B462D 7E    0072** LD	A, (HL)
0B462E 32    0073** LD	(VDU_BUFFER+4), A
0B462F 04 
0B4630 53 
0B4631 0B 
             0074** ;
             0075** ; And now the duration - multiply it by 50 to convert from 1/20ths of seconds to milliseconds
             0076** ;
0B4632 06    0077** LD	B, 50			; C contains the duration, so MLT by 50
0B4633 32 
0B4634 ED    0078** MLT	BC
0B4635 4C 
0B4636 ED    0079** LD	(VDU_BUFFER+5), BC
0B4637 43 
0B4638 05 
0B4639 53 
0B4639 0B   
             0080** ;
0B463B DD    0081** PUSH	IX			; Get the system vars in IX
0B463C E5 
             0082** MOSCALL	mos_sysvars		; Reset the semaphore
0B463D 3E   0001**M LD	A, function
0B463E 08 
0B463F 49   0002**M RST.LIS	08h
0B4640 CF 
0B4641 5B    0083** SOUND0:			RES.LIL	3, (IX+sysvar_vpd_pflags)
0B4642 DD 
0B4643 CB 
0B4644 04 
0B4644 9E   
             0084** ;
             0085** VDU	23			; Send the sound command
0B4646 3E   0001**M LD	A, val
0B4647 17 
0B4648 CD   0002**M CALL	OSWRCH
0B4649 C8 
0B464A 3E 
0B464B 0B 
             0086** VDU	0
0B464C 3E   0001**M LD	A, val
0B464D 00 
0B464E CD   0002**M CALL	OSWRCH
0B464F C8 
0B4650 3E 
0B4651 0B 
             0087** VDU	vdp_audio
0B4652 3E   0001**M LD	A, val
0B4653 85 
0B4654 CD   0002**M CALL	OSWRCH
0B4655 C8 
0B4656 3E 
0B4657 0B 
             0088** VDU	(VDU_BUFFER+0)		; 0: Channel
0B4658 3A   0001**M LD	A, val
0B4659 00 
0B465A 53 
0B465B 0B 
0B465C CD   0002**M CALL	OSWRCH
0B465D C8 
0B465E 3E 
0B465F 0B 
             0089** VDU	(VDU_BUFFER+1)		; 1: Waveform (0)
0B4660 3A   0001**M LD	A, val
0B4661 01 
0B4662 53 
0B4663 0B 
0B4664 CD   0002**M CALL	OSWRCH
0B4665 C8 
0B4666 3E 
0B4667 0B 
             0090** VDU	(VDU_BUFFER+2)		; 2: Volume (0-100)
0B4668 3A   0001**M LD	A, val
0B4669 02 
0B466A 53 
0B466B 0B 
0B466C CD   0002**M CALL	OSWRCH
0B466D C8 
0B466E 3E 
0B466F 0B 
             0091** VDU	(VDU_BUFFER+3)		; 3: Frequency L
0B4670 3A   0001**M LD	A, val
0B4671 03 
0B4672 53 
0B4673 0B 
0B4674 CD   0002**M CALL	OSWRCH
0B4675 C8 
0B4676 3E 
0B4677 0B 
             0092** VDU	(VDU_BUFFER+4)		; 4: Frequency H
0B4678 3A   0001**M LD	A, val
0B4679 04 
0B467A 53 
0B467B 0B 
0B467C CD   0002**M CALL	OSWRCH
0B467D C8 
0B467E 3E 
0B467F 0B 
             0093** VDU	(VDU_BUFFER+5)		; 5: Duration L
0B4680 3A   0001**M LD	A, val
0B4681 05 
0B4682 53 
0B4683 0B 
0B4684 CD   0002**M CALL	OSWRCH
0B4685 C8 
0B4686 3E 
0B4687 0B 
             0094** VDU	(VDU_BUFFER+6)		; 6: Duration H
0B4688 3A   0001**M LD	A, val
0B4689 06 
0B468A 53 
0B468B 0B 
0B468C CD   0002**M CALL	OSWRCH
0B468D C8 
0B468E 3E 
0B468F 0B 
             0095** ;
             0096** ; Wait for acknowledgement
             0097** ;
0B4690 5B    0098** @@:			BIT.LIL	3, (IX+sysvar_vpd_pflags)
0B4691 DD 
0B4692 CB 
0B4693 04 
0B4693 5E   
0B4695 28    0099** JR	Z, @B			; Wait for the result
0B4696 F9 
0B4697 CD    0100** CALL	LTRAP			; Check for ESC
0B4698 39 
0B4699 3F 
0B469A 0B 
0B469B 5B    0101** LD.LIL	A, (IX+sysvar_audioSuccess)
0B469C DD 
0B469D 7E 
0B469E 0E 
0B469F A7    0102** AND	A			; Check if VDP has queued the note
0B46A0 28    0103** JR	Z, SOUND0		; No, so loop back and send again
0B46A1 9F 
             0104** ;
0B46A2 DD    0105** POP	IX
0B46A3 E1 
0B46A4 C3    0106** JP	XEQ
0B46A5 5E 
0B46A6 0B 
0B46A7 0B 
             0107** 
             0108** ; Frequency Lookup Table
             0109** ; Set up to replicate the BBC Micro audio frequencies
             0110** ;
             0111** ; Split over 5 complete octaves, with 53 being middle C
             0112** ; * C4: 262hz
             0113** ; + A4: 440hz
             0114** ;
             0115** ;	2	3	4	5	6	7	8
             0116** ;
             0117** ; B	1	49	97	145	193	241
             0118** ; A#	0	45	93	141	189	237
             0119** ; A		41	89+	137	185	233
             0120** ; G#		37	85	133	181	229
             0121** ; G		33	81	129	177	225
             0122** ; F#		29	77	125	173	221
             0123** ; F		25	73	121	169	217
             0124** ; E		21	69	117	165	213
             0125** ; D#		17	65	113	161	209
             0126** ; D		13	61	109	157	205	253
             0127** ; C#		9	57	105	153	201	249
             0128** ; C		5	53*	101	149	197	245
             0129** ;
0B46A8 75    0130** SOUND_FREQ_LOOKUP:	DW	 117,  118,  120,  122,  123,  131,  133,  135
0B46A9 00 
0B46AA 76 
0B46AB 00 
0B46AB 78   
0B46AC 00 
0B46AD 7A 
0B46AE 00 
0B46AE 7B   
0B46AF 00 
0B46B0 83 
0B46B1 00 
0B46B1 85   
0B46B2 00 
0B46B3 87 
0B46B4 00 
0B46B8 89    0131** DW	 137,  139,  141,  143,  145,  147,  149,  151
0B46B9 00 
0B46BA 8B 
0B46BB 00 
0B46BB 8D   
0B46BC 00 
0B46BD 8F 
0B46BE 00 
0B46BE 91   
0B46BF 00 
0B46C0 93 
0B46C1 00 
0B46C1 95   
0B46C2 00 
0B46C3 97 
0B46C4 00 
0B46C8 99    0132** DW	 153,  156,  158,  160,  162,  165,  167,  170
0B46C9 00 
0B46CA 9C 
0B46CB 00 
0B46CB 9E   
0B46CC 00 
0B46CD A0 
0B46CE 00 
0B46CE A2   
0B46CF 00 
0B46D0 A5 
0B46D1 00 
0B46D1 A7   
0B46D2 00 
0B46D3 AA 
0B46D4 00 
0B46D8 AC    0133** DW	 172,  175,  177,  180,  182,  185,  188,  190
0B46D9 00 
0B46DA AF 
0B46DB 00 
0B46DB B1   
0B46DC 00 
0B46DD B4 
0B46DE 00 
0B46DE B6   
0B46DF 00 
0B46E0 B9 
0B46E1 00 
0B46E1 BC   
0B46E2 00 
0B46E3 BE 
0B46E4 00 
0B46E8 C1    0134** DW	 193,  196,  199,  202,  205,  208,  211,  214
0B46E9 00 
0B46EA C4 
0B46EB 00 
0B46EB C7   
0B46EC 00 
0B46ED CA 
0B46EE 00 
0B46EE CD   
0B46EF 00 
0B46F0 D0 
0B46F1 00 
0B46F1 D3   
0B46F2 00 
0B46F3 D6 
0B46F4 00 
0B46F8 D9    0135** DW	 217,  220,  223,  226,  230,  233,  236,  240
0B46F9 00 
0B46FA DC 
0B46FB 00 
0B46FB DF   
0B46FC 00 
0B46FD E2 
0B46FE 00 
0B46FE E6   
0B46FF 00 
0B4700 E9 
0B4701 00 
0B4701 EC   
0B4702 00 
0B4703 F0 
0B4704 00 
0B4708 F3    0136** DW	 243,  247,  251,  254,  258,  262,  265,  269
0B4709 00 
0B470A F7 
0B470B 00 
0B470B FB   
0B470C 00 
0B470D FE 
0B470E 00 
0B470E 02   
0B470F 01 
0B4710 06 
0B4711 01 
0B4711 09   
0B4712 01 
0B4713 0D 
0B4714 01 
0B4718 11    0137** DW	 273,  277,  281,  285,  289,  294,  298,  302
0B4719 01 
0B471A 15 
0B471B 01 
0B471B 19   
0B471C 01 
0B471D 1D 
0B471E 01 
0B471E 21   
0B471F 01 
0B4720 26 
0B4721 01 
0B4721 2A   
0B4722 01 
0B4723 2E 
0B4724 01 
0B4728 33    0138** DW	 307,  311,  316,  320,  325,  330,  334,  339
0B4729 01 
0B472A 37 
0B472B 01 
0B472B 3C   
0B472C 01 
0B472D 40 
0B472E 01 
0B472E 45   
0B472F 01 
0B4730 4A 
0B4731 01 
0B4731 4E   
0B4732 01 
0B4733 53 
0B4734 01 
0B4738 58    0139** DW	 344,  349,  354,  359,  365,  370,  375,  381
0B4739 01 
0B473A 5D 
0B473B 01 
0B473B 62   
0B473C 01 
0B473D 67 
0B473E 01 
0B473E 6D   
0B473F 01 
0B4740 72 
0B4741 01 
0B4741 77   
0B4742 01 
0B4743 7D 
0B4744 01 
0B4748 82    0140** DW	 386,  392,  398,  403,  409,  415,  421,  427
0B4749 01 
0B474A 88 
0B474B 01 
0B474B 8E   
0B474C 01 
0B474D 93 
0B474E 01 
0B474E 99   
0B474F 01 
0B4750 9F 
0B4751 01 
0B4751 A5   
0B4752 01 
0B4753 AB 
0B4754 01 
0B4758 B2    0141** DW	 434,  440,  446,  453,  459,  466,  473,  480
0B4759 01 
0B475A B8 
0B475B 01 
0B475B BE   
0B475C 01 
0B475D C5 
0B475E 01 
0B475E CB   
0B475F 01 
0B4760 D2 
0B4761 01 
0B4761 D9   
0B4762 01 
0B4763 E0 
0B4764 01 
0B4768 E7    0142** DW	 487,  494,  501,  508,  516,  523,  531,  539
0B4769 01 
0B476A EE 
0B476B 01 
0B476B F5   
0B476C 01 
0B476D FC 
0B476E 01 
0B476E 04   
0B476F 02 
0B4770 0B 
0B4771 02 
0B4771 13   
0B4772 02 
0B4773 1B 
0B4774 02 
0B4778 22    0143** DW	 546,  554,  562,  571,  579,  587,  596,  605
0B4779 02 
0B477A 2A 
0B477B 02 
0B477B 32   
0B477C 02 
0B477D 3B 
0B477E 02 
0B477E 43   
0B477F 02 
0B4780 4B 
0B4781 02 
0B4781 54   
0B4782 02 
0B4783 5D 
0B4784 02 
0B4788 65    0144** DW	 613,  622,  631,  641,  650,  659,  669,  679
0B4789 02 
0B478A 6E 
0B478B 02 
0B478B 77   
0B478C 02 
0B478D 81 
0B478E 02 
0B478E 8A   
0B478F 02 
0B4790 93 
0B4791 02 
0B4791 9D   
0B4792 02 
0B4793 A7 
0B4794 02 
0B4798 B1    0145** DW	 689,  699,  709,  719,  729,  740,  751,  762
0B4799 02 
0B479A BB 
0B479B 02 
0B479B C5   
0B479C 02 
0B479D CF 
0B479E 02 
0B479E D9   
0B479F 02 
0B47A0 E4 
0B47A1 02 
0B47A1 EF   
0B47A2 02 
0B47A3 FA 
0B47A4 02 
0B47A8 05    0146** DW	 773,  784,  795,  807,  819,  831,  843,  855
0B47A9 03 
0B47AA 10 
0B47AB 03 
0B47AB 1B   
0B47AC 03 
0B47AD 27 
0B47AE 03 
0B47AE 33   
0B47AF 03 
0B47B0 3F 
0B47B1 03 
0B47B1 4B   
0B47B2 03 
0B47B3 57 
0B47B4 03 
0B47B8 63    0147** DW	 867,  880,  893,  906,  919,  932,  946,  960
0B47B9 03 
0B47BA 70 
0B47BB 03 
0B47BB 7D   
0B47BC 03 
0B47BD 8A 
0B47BE 03 
0B47BE 97   
0B47BF 03 
0B47C0 A4 
0B47C1 03 
0B47C1 B2   
0B47C2 03 
0B47C3 C0 
0B47C4 03 
0B47C8 CE    0148** DW	 974,  988, 1002, 1017, 1032, 1047, 1062, 1078
0B47C9 03 
0B47CA DC 
0B47CB 03 
0B47CB EA   
0B47CC 03 
0B47CD F9 
0B47CE 03 
0B47CE 08   
0B47CF 04 
0B47D0 17 
0B47D1 04 
0B47D1 26   
0B47D2 04 
0B47D3 36 
0B47D4 04 
0B47D8 45    0149** DW	1093, 1109, 1125, 1142, 1158, 1175, 1192, 1210
0B47D9 04 
0B47DA 55 
0B47DB 04 
0B47DB 65   
0B47DC 04 
0B47DD 76 
0B47DE 04 
0B47DE 86   
0B47DF 04 
0B47E0 97 
0B47E1 04 
0B47E1 A8   
0B47E2 04 
0B47E3 BA 
0B47E4 04 
0B47E8 CB    0150** DW	1227, 1245, 1263, 1282, 1300, 1319, 1338, 1358
0B47E9 04 
0B47EA DD 
0B47EB 04 
0B47EB EF   
0B47EC 04 
0B47ED 02 
0B47EE 05 
0B47EE 14   
0B47EF 05 
0B47F0 27 
0B47F1 05 
0B47F1 3A   
0B47F2 05 
0B47F3 4E 
0B47F4 05 
0B47F8 62    0151** DW	1378, 1398, 1418, 1439, 1459, 1481, 1502, 1524
0B47F9 05 
0B47FA 76 
0B47FB 05 
0B47FB 8A   
0B47FC 05 
0B47FD 9F 
0B47FE 05 
0B47FE B3   
0B47FF 05 
0B4800 C9 
0B4801 05 
0B4801 DE   
0B4802 05 
0B4803 F4 
0B4804 05 
0B4808 0A    0152** DW	1546, 1569, 1592, 1615, 1638, 1662, 1686, 1711
0B4809 06 
0B480A 21 
0B480B 06 
0B480B 38   
0B480C 06 
0B480D 4F 
0B480E 06 
0B480E 66   
0B480F 06 
0B4810 7E 
0B4811 06 
0B4811 96   
0B4812 06 
0B4813 AF 
0B4814 06 
0B4818 C8    0153** DW	1736, 1761, 1786, 1812, 1839, 1866, 1893, 1920
0B4819 06 
0B481A E1 
0B481B 06 
0B481B FA   
0B481C 06 
0B481D 14 
0B481E 07 
0B481E 2F   
0B481F 07 
0B4820 4A 
0B4821 07 
0B4821 65   
0B4822 07 
0B4823 80 
0B4824 07 
0B4828 9C    0154** DW	1948, 1976, 2005, 2034, 2064, 2093, 2123, 2154
0B4829 07 
0B482A B8 
0B482B 07 
0B482B D5   
0B482C 07 
0B482D F2 
0B482E 07 
0B482E 10   
0B482F 08 
0B4830 2D 
0B4831 08 
0B4831 4B   
0B4832 08 
0B4833 6A 
0B4834 08 
0B4838 8A    0155** DW	2186, 2217, 2250, 2282, 2316, 2349, 2383, 2418
0B4839 08 
0B483A A9 
0B483B 08 
0B483B CA   
0B483C 08 
0B483D EA 
0B483E 08 
0B483E 0C   
0B483F 09 
0B4840 2D 
0B4841 09 
0B4841 4F   
0B4842 09 
0B4843 72 
0B4844 09 
0B4848 95    0156** DW	2453, 2489, 2525, 2562, 2599, 2637, 2675, 2714
0B4849 09 
0B484A B9 
0B484B 09 
0B484B DD   
0B484C 09 
0B484D 02 
0B484E 0A 
0B484E 27   
0B484F 0A 
0B4850 4D 
0B4851 0A 
0B4851 73   
0B4852 0A 
0B4853 9A 
0B4854 0A 
0B4858 C2    0157** DW	2754, 2794, 2834, 2876, 2918, 2960, 3003, 3047
0B4859 0A 
0B485A EA 
0B485B 0A 
0B485B 12   
0B485C 0B 
0B485D 3C 
0B485E 0B 
0B485E 66   
0B485F 0B 
0B4860 90 
0B4861 0B 
0B4861 BB   
0B4862 0B 
0B4863 E7 
0B4864 0B 
0B4868 13    0158** DW	3091, 3136, 3182, 3228, 3275, 3322, 3371, 3420
0B4869 0C 
0B486A 40 
0B486B 0C 
0B486B 6E   
0B486C 0C 
0B486D 9C 
0B486E 0C 
0B486E CB   
0B486F 0C 
0B4870 FA 
0B4871 0C 
0B4871 2B   
0B4872 0D 
0B4873 5C 
0B4874 0D 
0B4878 8E    0159** DW	3470, 3520, 3571, 3623, 3676, 3729, 3784, 3839
0B4879 0D 
0B487A C0 
0B487B 0D 
0B487B F3   
0B487C 0D 
0B487D 27 
0B487E 0E 
0B487E 5C   
0B487F 0E 
0B4880 91 
0B4881 0E 
0B4881 C8   
0B4882 0E 
0B4883 FF 
0B4884 0E 
0B4888 36    0160** DW	3894, 3951, 4009, 4067, 4126, 4186, 4247, 4309
0B4889 0F 
0B488A 6F 
0B488B 0F 
0B488B A9   
0B488C 0F 
0B488D E3 
0B488E 0F 
0B488E 1E   
0B488F 10 
0B4890 5A 
0B4891 10 
0B4891 97   
0B4892 10 
0B4893 D5 
0B4894 10 
0B4898 13    0161** DW	4371, 4435, 4499, 4565, 4631, 4699, 4767, 4836
0B4899 11 
0B489A 53 
0B489B 11 
0B489B 93   
0B489C 11 
0B489D D5 
0B489E 11 
0B489E 17   
0B489F 12 
0B48A0 5B 
0B48A1 12 
0B48A1 9F   
0B48A2 12 
0B48A3 E4 
0B48A4 12 
             0162** 
             0163** 
              0013* include "basic/interrupts.asm"
             0001** ;
             0002** ; Title:	BBC Basic for AGON - Interrupts
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	07/06/2023
             0006** ;
             0007** ; Modinfo:
             0008** ; 07/06/2023:	Modified to run in ADL mode
             0009** 
             0010** ; .ASSUME	ADL = 1
             0011** 
             0012** ; INCLUDE	"macros.inc"
             0013** ; INCLUDE	"equs.inc"
             0014** ; INCLUDE "mos_api.inc"	; In MOS/src
             0015** 
             0016** ; SEGMENT CODE
             0017** 
             0018** ; XDEF	VBLANK_INIT
             0019** ; XDEF	VBLANK_STOP
             0020** ; XDEF	VBLANK_HANDLER
             0021** 
             0022** ; XREF	ESCSET
             0023** ; XREF	KEYDOWN		; In ram.asm
             0024** ; XREF	KEYASCII 	; In ram.asm
             0025** ; XREF	KEYCOUNT	; In ram.asm
             0026** 
             0027** ; Hook into the MOS VBLANK interrupt
             0028** ;
0B48A8 F3    0029** VBLANK_INIT:		DI
0B48A9 21    0030** LD		HL, VBLANK_HANDLER		; this interrupt handler routine who's
0B48AA FD 
0B48AB 48 
0B48AC 0B 
0B48AD 1E    0031** LD		E, 32h				; Set up the VBlank Interrupt Vector
0B48AE 32 
             0032** MOSCALL		mos_setintvector
0B48AF 3E   0001**M LD	A, function
0B48B0 14 
0B48B1 49   0002**M RST.LIS	08h
0B48B2 CF 
             0033** ; EX		HL, DE 				; DEU: Pointer to the MOS interrupt vector
0B48B3 EB    0034** ex de,hl
0B48B4 21    0035** LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
0B48B5 0B 
0B48B6 49 
0B48B7 0B 
0B48B8 ED    0036** LD		(HL), DE			; Self-modify the code
0B48B9 1F 
0B48BA FB    0037** EI
0B48BB C9    0038** RET
             0039** 
             0040** ; Unhook the custom VBLANK interrupt
             0041** ;
0B48BC F3    0042** VBLANK_STOP:		DI
0B48BD 21    0043** LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
0B48BE 0B 
0B48BF 49 
0B48C0 0B 
0B48C1 ED    0044** LD		DE, (HL)
0B48C2 17 
0B48C3 EB    0045** EX		DE, HL 				; HLU: Address of MOS interrupt vector
0B48C4 1E    0046** LD		E, 32h
0B48C5 32 
             0047** MOSCALL		mos_setintvector		; Restore the MOS interrupt vector
0B48C6 3E   0001**M LD	A, function
0B48C7 14 
0B48C8 49   0002**M RST.LIS	08h
0B48C9 CF 
0B48CA FB    0048** EI
0B48CB C9    0049** RET
             0050** 
             0051** ; A safe LIS call to ESCSET
             0052** ;
             0053** DO_KEYBOARD:		MOSCALL		mos_sysvars			; Get the system variables
0B48CC 3E   0001**M LD	A, function
0B48CD 08 
0B48CE 49   0002**M RST.LIS	08h
0B48CF CF 
0B48D0 21    0054** LD		HL, KEYCOUNT 			; Check whether the keycount has changed
0B48D1 49 
0B48D2 56 
0B48D3 0B 
0B48D4 DD    0055** LD		A, (IX + sysvar_vkeycount)	; by comparing the MOS copy
0B48D5 7E 
0B48D6 19 
0B48D7 BE    0056** CP 		(HL)				; with our local copy
0B48D8 20    0057** JR		NZ, DO_KEYBOARD_1		; Yes it has, so jump to the next bit
0B48D9 0A 
             0058** ;
0B48DA AF    0059** DO_KEYBOARD_0:		XOR		A 				; Clear the keyboard values
0B48DB 32    0060** LD		(KEYASCII), A
0B48DC 48 
0B48DD 56 
0B48DE 0B 
0B48DF 32    0061** LD		(KEYDOWN), A
0B48E0 47 
0B48E1 56 
0B48E2 0B 
0B48E3 C9    0062** RET	 					; And return
             0063** ;
0B48E4 77    0064** DO_KEYBOARD_1:		LD		(HL), A 			; Store the updated local copy of keycount
0B48E5 DD    0065** LD		A, (IX + sysvar_vkeydown)	; Fetch key down value (1 = key down, 0 = key up)
0B48E6 7E 
0B48E7 18 
0B48E8 B7    0066** OR		A
0B48E9 28    0067** JR		Z, DO_KEYBOARD_0		; If it is key up, then clear the keyboard values
0B48EA EF 
             0068** ;
0B48EB 32    0069** LD		(KEYDOWN), A 			; Store the keydown value
0B48EC 47 
0B48ED 56 
0B48EE 0B 
0B48EF DD    0070** LD		A, (IX + sysvar_keyascii)	; Fetch key ASCII value
0B48F0 7E 
0B48F1 05 
0B48F2 32    0071** LD		(KEYASCII), A 			; Store locally
0B48F3 48 
0B48F4 56 
0B48F5 0B 
0B48F6 FE    0072** CP		1Bh				; Is it escape?
0B48F7 1B 
0B48F8 CC    0073** CALL		Z, ESCSET			; Yes, so set the escape flags
0B48F9 14 
0B48FA 3F 
0B48FB 0B 
0B48FC C9    0074** RET						; Return to the interrupt handler
             0075** 
0B48FD F3    0076** VBLANK_HANDLER:		DI
0B48FE F5    0077** PUSH		AF
0B48FF E5    0078** PUSH		HL
0B4900 DD    0079** PUSH		IX
0B4901 E5 
0B4902 CD    0080** CALL		DO_KEYBOARD
0B4903 CC 
0B4904 48 
0B4905 0B 
0B4906 DD    0081** POP		IX
0B4907 E1 
0B4908 E1    0082** POP		HL
0B4909 F1    0083** POP		AF
             0084** ;
             0085** ; Finally jump to the MOS interrupt
             0086** ;
0B490A C3    0087** VBLANK_HANDLER_JP:	JP		0				; This is self-modified by VBLANK_INIT
0B490B 00 
0B490C 00 
0B490D 00 
               0169 include "functions.inc"
              0001* MACRO printChar char
              0002* LD A, char
              0003* RST.LIL 10h
              0004* ENDMACRO
              0005* 
              0006* ; test the sign of HL
              0007* ; inputs: HL obviously
              0008* ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
              0009* ; destroys: flags
              0010* MACRO sign_hlu
              0011* add hl,de
              0012* or a
              0013* sbc hl,de
              0014* ENDMACRO
              0015* 
              0016* ; Simulated call to subroutine at HL
              0017* ; inputs: HL pointing to the subroutine address plus whatever the called function expects
              0018* ; outputs: whatever the subroutine does, including HL and BC
              0019* ; destroys: only what the subroutine does, but always BC
              0020* MACRO callHL
              0021* ld bc,$+7     ; Address of first instruction after the jump
              0022* push bc       ; which constitutes the return address
              0023* jp   (hl)     ; Jump to the address in HL
              0024* ENDMACRO
              0025* 
              0026* ; Simulated call to subroutine at IX
              0027* ; inputs: IX pointing to the subroutine address plus whatever the called function expects
              0028* ; outputs: whatever the subroutine does, including IX and BC
              0029* ; destroys: only what the subroutine does, but always BC
              0030* MACRO callIX
              0031* ld bc,$+7     ; Address of first instruction after the jump
              0032* push bc       ; which constitutes the return address
              0033* jp   (ix)     ; Jump to the address in IX
              0034* ENDMACRO
              0035* 
              0036* ; Simulated call to soubroutinte at IY
              0037* ; inputs: IY pointing to the subroutine address plus whatever the called function expects
              0038* ; outputs: whatever the subroutine does, including IY and BC
              0039* ; destroys: only what the subroutine does, but always BC
              0040* MACRO callIY
              0041* ld bc,$+7     ; Address of first instruction after the jump
              0042* push bc       ; which constitutes the return address
              0043* jp   (iy)     ; Jump to the address in IY
              0044* ENDMACRO
              0045* 
              0046* ; put the value in HLU into the accumulator
              0047* ; destroys: af
              0048* MACRO HLU_TO_A
              0049* push hl ; 4 cycles
              0050* inc sp ; 1 cycle
              0051* pop af  ; 4 cycles
              0052* dec sp ; 1 cycle
              0053* ; 10 cycles total
              0054* ENDMACRO
              0055* 
              0056* A_TO_HLU:
              0057* ; call is 7 cycles
0B490E 22     0058* ld (@scratch),hl ; 7 cycles
0B490F 1B 
0B4910 49 
0B4911 0B 
0B4912 32     0059* ld (@scratch+2),a ; 5 cycles
0B4913 1D 
0B4914 49 
0B4915 0B 
0B4916 2A     0060* ld hl,(@scratch) ; 7 cycles
0B4917 1B 
0B4918 49 
0B4919 0B 
0B491A C9     0061* ret ; 6 cycles
              0062* ; 25 cycles total
0B491B 00     0063* @scratch: dl 0
0B491C 00 
0B491D 00 
              0064* 
              0065* ; TODO: implement this
              0066* ; MACRO A_TO_HLU
              0067* ;     push.s af
              0068* ;     inc sp
              0069* ;     push.s hl
              0070* ;     pop hl
              0071* ;     inc sp
              0072* ;     inc sp
              0073* ; ENDMACRO
              0074* 
              0075* MACRO PUSH_ALL
              0076* ex af,af'
              0077* exx
              0078* push af
              0079* push hl
              0080* push bc
              0081* push de
              0082* 
              0083* ex af,af'
              0084* exx
              0085* push af
              0086* push hl
              0087* push bc
              0088* push de
              0089* push ix
              0090* push iy
              0091* ENDMACRO
              0092* 
              0093* MACRO POP_ALL
              0094* pop iy
              0095* pop ix
              0096* pop de
              0097* pop bc
              0098* pop hl
              0099* pop af
              0100* ex af,af'
              0101* exx
              0102* 
              0103* pop de
              0104* pop bc
              0105* pop hl
              0106* pop af
              0107* ex af,af'
              0108* exx
              0109* ENDMACRO
              0110* 
              0111* ; Print a zero-terminated string inline with code, e.g.:
              0112* ;
              0113* ;    call printInline
              0114* ;    ASCIZ "Hello, world!\r\n"
              0115* ;
              0116* ; Destroys: HL,AF
              0117* printInline:
0B491E E1     0118* pop hl ; get the return address = pointer to start of string
0B491F CD     0119* call printString ; HL advances to end of string
0B4920 25 
0B4921 49 
0B4922 0B 
0B4923 E5     0120* push hl ; restore the return address = pointer to end of string
0B4924 C9     0121* ret
              0122* 
              0123* ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
              0124* ; Print a zero-terminated string
              0125* ; HL: Pointer to string
              0126* printString:
0B4925 C5     0127* PUSH	BC
0B4926 01     0128* LD		BC,0
0B4927 00 
0B4928 00 
0B4929 00 
0B492A 3E     0129* LD 	 	A,0
0B492B 00 
0B492C 5B     0130* RST.LIL 18h
0B492D DF 
0B492E C1     0131* POP		BC
0B492F C9     0132* RET
              0133* ; print a VDU sequence
              0134* ; HL: Pointer to VDU sequence - <1 byte length> <data>
              0135* sendVDUsequence:
0B4930 C5     0136* PUSH	BC
0B4931 01     0137* LD		BC, 0
0B4932 00 
0B4933 00 
0B4934 00 
0B4935 4E     0138* LD		C, (HL)
0B4936 5B     0139* RST.LIL	18h
0B4937 DF 
0B4938 C1     0140* POP		BC
0B4939 C9     0141* RET
              0142* ; Print Newline sequence to VDP
              0143* printNewLine:
0B493A F5     0144* push af ; for some reason rst.lil 10h sets carry flag
0B493B 3E     0145* LD	A, '\r'
0B493C 0D 
0B493D 5B     0146* RST.LIL 10h
0B493E D7 
0B493F 3E     0147* LD	A, '\n'
0B4940 0A 
0B4941 5B     0148* RST.LIL 10h
0B4942 D7 
0B4943 F1     0149* pop af
0B4944 C9     0150* RET
              0151* 
              0152* ; Print a 24-bit HEX number
              0153* ; HLU: Number to print
              0154* printHex24:
              0155* HLU_TO_A
0B4945 E5    0001*M push hl ; 4 cycles
0B4946 33    0002*M inc sp ; 1 cycle
0B4947 F1    0003*M pop af  ; 4 cycles
0B4948 3B    0004*M dec sp ; 1 cycle
             0005*M ; 10 cycles total
0B4949 CD     0156* CALL	printHex8
0B494A 53 
0B494B 49 
0B494C 0B 
              0157* ; Print a 16-bit HEX number
              0158* ; HL: Number to print
              0159* printHex16:
0B494D 7C     0160* LD		A,H
0B494E CD     0161* CALL	printHex8
0B494F 53 
0B4950 49 
0B4951 0B 
0B4952 7D     0162* LD		A,L
              0163* ; Print an 8-bit HEX number
              0164* ; A: Number to print
              0165* printHex8:
0B4953 4F     0166* LD		C,A
0B4954 1F     0167* RRA
0B4955 1F     0168* RRA
0B4956 1F     0169* RRA
0B4957 1F     0170* RRA
0B4958 CD     0171* CALL	@F
0B4959 5D 
0B495A 49 
0B495B 0B 
0B495C 79     0172* LD		A,C
              0173* @@:
0B495D E6     0174* AND		0Fh
0B495E 0F 
0B495F C6     0175* ADD		A,90h
0B4960 90 
0B4961 27     0176* DAA
0B4962 CE     0177* ADC		A,40h
0B4963 40 
0B4964 27     0178* DAA
0B4965 5B     0179* RST.LIL	10h
0B4966 D7 
0B4967 C9     0180* RET
              0181* 
              0182* printHexA:
0B4968 F5     0183* push af
0B4969 C5     0184* push bc
0B496A CD     0185* call printHex8
0B496B 53 
0B496C 49 
0B496D 0B 
0B496E 3E     0186* ld a,' '
0B496F 20 
0B4970 5B     0187* rst.lil 10h
0B4971 D7 
0B4972 C1     0188* pop bc
0B4973 F1     0189* pop af
0B4974 C9     0190* ret
              0191* 
              0192* printHexHL:
0B4975 F5     0193* push af
0B4976 C5     0194* push bc
0B4977 CD     0195* call printHex16
0B4978 4D 
0B4979 49 
0B497A 0B 
0B497B 3E     0196* ld a,' '
0B497C 20 
0B497D 5B     0197* rst.lil 10h
0B497E D7 
0B497F C1     0198* pop bc
0B4980 F1     0199* pop af
0B4981 C9     0200* ret
              0201* 
              0202* printHexUHL:
0B4982 F5     0203* push af
0B4983 C5     0204* push bc
0B4984 CD     0205* call printHex24
0B4985 45 
0B4986 49 
0B4987 0B 
0B4988 3E     0206* ld a,' '
0B4989 20 
0B498A 5B     0207* rst.lil 10h
0B498B D7 
0B498C C1     0208* pop bc
0B498D F1     0209* pop af
0B498E C9     0210* ret
              0211* 
              0212* printHexAUHL:
0B498F F5     0213* push af
0B4990 C5     0214* push bc
0B4991 CD     0215* call printHex8
0B4992 53 
0B4993 49 
0B4994 0B 
0B4995 3E     0216* ld a,'.'
0B4996 2E 
0B4997 5B     0217* rst.lil 10h
0B4998 D7 
0B4999 CD     0218* call printHex24
0B499A 45 
0B499B 49 
0B499C 0B 
0B499D 3E     0219* ld a,' '
0B499E 20 
0B499F 5B     0220* rst.lil 10h
0B49A0 D7 
0B49A1 C1     0221* pop bc
0B49A2 F1     0222* pop af
0B49A3 C9     0223* ret
              0224* 
              0225* printHexABHL:
              0226* ; preserve registers
0B49A4 C5     0227* push bc ; b will be ok c will not
0B49A5 F5     0228* push af ; will get totally destroyed
              0229* ; print a
0B49A6 CD     0230* call printHex8
0B49A7 53 
0B49A8 49 
0B49A9 0B 
              0231* ; print b
0B49AA 78     0232* ld a,b
0B49AB CD     0233* call printHex8
0B49AC 53 
0B49AD 49 
0B49AE 0B 
              0234* ; print hl
0B49AF CD     0235* call printHex16
0B49B0 4D 
0B49B1 49 
0B49B2 0B 
              0236* ; restore registers
0B49B3 F1     0237* pop af
0B49B4 C1     0238* pop bc
0B49B5 C9     0239* ret
              0240* 
              0241* printHexBHL:
              0242* ; preserve registers
0B49B6 C5     0243* push bc ; b will be ok c will not
0B49B7 F5     0244* push af ; will get totally destroyed
              0245* ; print b
0B49B8 78     0246* ld a,b
0B49B9 CD     0247* call printHex8
0B49BA 53 
0B49BB 49 
0B49BC 0B 
              0248* ; print hl
0B49BD CD     0249* call printHex16
0B49BE 4D 
0B49BF 49 
0B49C0 0B 
              0250* ; restore registers
0B49C1 F1     0251* pop af
0B49C2 C1     0252* pop bc
0B49C3 C9     0253* ret
              0254* 
              0255* printHexCDE:
              0256* ; preserve registers
0B49C4 C5     0257* push bc ; b will be ok c will not
0B49C5 F5     0258* push af ; will get totally destroyed
              0259* ; print c
0B49C6 79     0260* ld a,c
0B49C7 CD     0261* call printHex8
0B49C8 53 
0B49C9 49 
0B49CA 0B 
              0262* ; print de
0B49CB EB     0263* ex de,hl
0B49CC CD     0264* call printHex16
0B49CD 4D 
0B49CE 49 
0B49CF 0B 
0B49D0 EB     0265* ex de,hl
              0266* ; restore registers
0B49D1 F1     0267* pop af
0B49D2 C1     0268* pop bc
0B49D3 C9     0269* ret
              0270* 
              0271* printHexUIX:
              0272* ; store everything in scratch
0B49D4 22     0273* ld (uhl),hl
0B49D5 4D 
0B49D6 4E 
0B49D7 0B 
0B49D8 ED     0274* ld (ubc),bc
0B49D9 43 
0B49DA 50 
0B49DB 4E 
0B49DB 0B   
0B49DD ED     0275* ld (ude),de
0B49DE 53 
0B49DF 53 
0B49E0 4E 
0B49E0 0B   
0B49E2 DD     0276* ld (uix),ix
0B49E3 22 
0B49E4 56 
0B49E5 4E 
0B49E5 0B   
0B49E7 FD     0277* ld (uiy),iy
0B49E8 22 
0B49E9 59 
0B49EA 4E 
0B49EA 0B   
0B49EC F5     0278* push af ; fml
              0279* 
0B49ED 21     0280* ld hl,str_ixu
0B49EE E4 
0B49EF 4D 
0B49F0 0B 
0B49F1 CD     0281* call printString
0B49F2 25 
0B49F3 49 
0B49F4 0B 
0B49F5 2A     0282* ld hl,(uix)
0B49F6 56 
0B49F7 4E 
0B49F8 0B 
0B49F9 CD     0283* call printHex24
0B49FA 45 
0B49FB 49 
0B49FC 0B 
0B49FD CD     0284* call printNewLine
0B49FE 3A 
0B49FF 49 
0B4A00 0B 
              0285* 
              0286* ; restore everything
0B4A01 2A     0287* ld hl, (uhl)
0B4A02 4D 
0B4A03 4E 
0B4A04 0B 
0B4A05 ED     0288* ld bc, (ubc)
0B4A06 4B 
0B4A07 50 
0B4A08 4E 
0B4A08 0B   
0B4A0A ED     0289* ld de, (ude)
0B4A0B 5B 
0B4A0C 53 
0B4A0D 4E 
0B4A0D 0B   
0B4A0F DD     0290* ld ix, (uix)
0B4A10 2A 
0B4A11 56 
0B4A12 4E 
0B4A12 0B   
0B4A14 FD     0291* ld iy, (uiy)
0B4A15 2A 
0B4A16 59 
0B4A17 4E 
0B4A17 0B   
0B4A19 F1     0292* pop af
              0293* ; all done
0B4A1A C9     0294* ret
              0295* 
              0296* ; Print a 0x HEX prefix
              0297* DisplayHexPrefix:
0B4A1B 3E     0298* LD	A, '0'
0B4A1C 30 
0B4A1D 5B     0299* RST.LIL 10h
0B4A1E D7 
0B4A1F 3E     0300* LD	A, 'x'
0B4A20 78 
0B4A21 5B     0301* RST.LIL 10h
0B4A22 D7 
0B4A23 C9     0302* RET
              0303* 
              0304* MACRO printDecBC
              0305* push hl
              0306* push bc
              0307* pop hl
              0308* call printDec
              0309* pop hl
              0310* ENDMACRO
              0311* 
              0312* MACRO printDecDE
              0313* push hl
              0314* push de
              0315* pop hl
              0316* call printDec
              0317* pop hl
              0318* ENDMACRO
              0319* 
              0320* MACRO printDecHL
              0321* call printDec
              0322* ENDMACRO
              0323* 
              0324* MACRO printDecIX
              0325* push hl
              0326* push ix
              0327* pop hl
              0328* call printDec
              0329* pop hl
              0330* ENDMACRO
              0331* 
              0332* MACRO printDecIY
              0333* push hl
              0334* push iy
              0335* pop hl
              0336* call printDec
              0337* pop hl
              0338* ENDMACRO
              0339* 
              0340* 
              0341* ; Prints the right justified decimal value in HL without leading zeroes
              0342* ; HL : Value to print
              0343* ; preserves all registers and flags
              0344* printDec:
              0345* ; BEGIN MY CODE
              0346* ; back up all the things
0B4A24 F5     0347* push af
0B4A25 C5     0348* push bc
0B4A26 D5     0349* push de
0B4A27 E5     0350* push hl
              0351* ; END MY CODE
0B4A28 11     0352* LD	 DE, _printDecBuffer
0B4A29 50 
0B4A2A 4A 
0B4A2B 0B 
0B4A2C CD     0353* CALL u24_to_ascii
0B4A2D 60 
0B4A2E 4A 
0B4A2F 0B 
              0354* ; BEGIN MY CODE
              0355* ; replace leading zeroes with spaces
0B4A30 21     0356* LD	 HL, _printDecBuffer
0B4A31 50 
0B4A32 4A 
0B4A33 0B 
0B4A34 06     0357* ld   B, 7 ; if HL was 0, we want to keep the final zero
0B4A35 07 
              0358* @loop:
0B4A36 7E     0359* LD	 A, (HL)
0B4A37 FE     0360* CP	 '0'
0B4A38 30 
0B4A39 C2     0361* JP	 NZ, @done
0B4A3A 43 
0B4A3B 4A 
0B4A3C 0B 
0B4A3D 3E     0362* LD   A, ' '
0B4A3E 20 
0B4A3F 77     0363* LD	 (HL), A
0B4A40 23     0364* INC	 HL
              0365* ; CALL vdu_cursor_forward
0B4A41 10     0366* DJNZ @loop
0B4A42 F3 
              0367* @done:
              0368* ; END MY CODE
0B4A43 21     0369* LD	 HL, _printDecBuffer
0B4A44 50 
0B4A45 4A 
0B4A46 0B 
0B4A47 CD     0370* CALL printString
0B4A48 25 
0B4A49 49 
0B4A4A 0B 
              0371* ; BEGIN MY CODE
              0372* ; restore all the things
0B4A4B E1     0373* pop hl
0B4A4C D1     0374* pop de
0B4A4D C1     0375* pop bc
0B4A4E F1     0376* pop af
              0377* ; END MY CODE
0B4A4F C9     0378* RET
0B4A50 00     0379* _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
0B4A51 00 
0B4A52 00 
0B4A53 00 
0B4A53 00   
0B4A54 00 
0B4A55 00 
0B4A56 00 
0B4A56 00   
0B4A57 00 
0B4A58 00 
0B4A59 00 
0B4A59 00   
0B4A5A 00 
0B4A5B 00 
0B4A5C 00 
              0380* 
              0381* ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
              0382* ; starting to memory location pointing by DE, in decimal form and with leading zeroes
              0383* ; so it will allways be 8 characters length
              0384* ; HL : Value to convert to string
              0385* ; DE : pointer to buffer, at least 8 byte + 0
              0386* u24_to_ascii:
0B4A60 01     0387* LD	 BC,-10000000
0B4A61 80 
0B4A62 69 
0B4A63 67 
0B4A64 CD     0388* CALL @one_digit
0B4A65 97 
0B4A66 4A 
0B4A67 0B 
0B4A68 01     0389* LD	 BC,-1000000
0B4A69 C0 
0B4A6A BD 
0B4A6B F0 
0B4A6C CD     0390* CALL @one_digit
0B4A6D 97 
0B4A6E 4A 
0B4A6F 0B 
0B4A70 01     0391* LD	 BC,-100000
0B4A71 60 
0B4A72 79 
0B4A73 FE 
0B4A74 CD     0392* CALL @one_digit
0B4A75 97 
0B4A76 4A 
0B4A77 0B 
0B4A78 01     0393* LD   BC,-10000
0B4A79 F0 
0B4A7A D8 
0B4A7B FF 
0B4A7C CD     0394* CALL @one_digit
0B4A7D 97 
0B4A7E 4A 
0B4A7F 0B 
0B4A80 01     0395* LD   BC,-1000
0B4A81 18 
0B4A82 FC 
0B4A83 FF 
0B4A84 CD     0396* CALL @one_digit
0B4A85 97 
0B4A86 4A 
0B4A87 0B 
0B4A88 01     0397* LD   BC,-100
0B4A89 9C 
0B4A8A FF 
0B4A8B FF 
0B4A8C CD     0398* CALL @one_digit
0B4A8D 97 
0B4A8E 4A 
0B4A8F 0B 
0B4A90 0E     0399* LD   C,-10
0B4A91 F6 
0B4A92 CD     0400* CALL @one_digit
0B4A93 97 
0B4A94 4A 
0B4A95 0B 
0B4A96 48     0401* LD   C,B
              0402* @one_digit:
0B4A97 3E     0403* LD   A,'0'-1
0B4A98 2F 
              0404* @divide_me:
0B4A99 3C     0405* INC  A
0B4A9A 09     0406* ADD  HL,BC
0B4A9B 38     0407* JR   C,@divide_me
0B4A9C FC 
0B4A9D ED     0408* SBC  HL,BC
0B4A9E 42 
0B4A9F 12     0409* LD   (DE),A
0B4AA0 13     0410* INC  DE
0B4AA1 C9     0411* RET
              0412* 
              0413* print_u24:
0B4AA2 D5     0414* push de
0B4AA3 E5     0415* push hl
0B4AA4 11     0416* ld de,_printDecBuffer
0B4AA5 50 
0B4AA6 4A 
0B4AA7 0B 
0B4AA8 CD     0417* call u24_to_ascii
0B4AA9 60 
0B4AAA 4A 
0B4AAB 0B 
0B4AAC 21     0418* ld hl,_printDecBuffer
0B4AAD 50 
0B4AAE 4A 
0B4AAF 0B 
0B4AB0 CD     0419* call printString
0B4AB1 25 
0B4AB2 49 
0B4AB3 0B 
0B4AB4 3E     0420* ld a,' '
0B4AB5 20 
0B4AB6 5B     0421* rst.lil 10h
0B4AB7 D7 
0B4AB8 E1     0422* pop hl
0B4AB9 D1     0423* pop de
0B4ABA C9     0424* ret
              0425* 
              0426* ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
              0427* ; HL : Value to convert to string (integer part in H, fractional part in L)
              0428* ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
              0429* u168_to_ascii:
              0430* ; add a leading space to make room for sign flag if needed
0B4ABB 3E     0431* ld a,' '
0B4ABC 20 
0B4ABD 12     0432* ld (de),a
0B4ABE 13     0433* inc de
              0434* ; Convert integer part
0B4ABF E5     0435* push hl               ; Save HL (we’ll need the fractional part later)
0B4AC0 CD     0436* call hlu_udiv256    ; Shift to get integer portion in HL
0B4AC1 60 
0B4AC2 50 
0B4AC3 0B 
0B4AC4 01     0437* ld   bc, -10000
0B4AC5 F0 
0B4AC6 D8 
0B4AC7 FF 
0B4AC8 CD     0438* call @one_int
0B4AC9 EB 
0B4ACA 4A 
0B4ACB 0B 
0B4ACC 01     0439* ld   bc, -1000
0B4ACD 18 
0B4ACE FC 
0B4ACF FF 
0B4AD0 CD     0440* call @one_int
0B4AD1 EB 
0B4AD2 4A 
0B4AD3 0B 
0B4AD4 01     0441* ld   bc, -100
0B4AD5 9C 
0B4AD6 FF 
0B4AD7 FF 
0B4AD8 CD     0442* call @one_int
0B4AD9 EB 
0B4ADA 4A 
0B4ADB 0B 
0B4ADC 0E     0443* ld   c, -10
0B4ADD F6 
0B4ADE CD     0444* call @one_int
0B4ADF EB 
0B4AE0 4A 
0B4AE1 0B 
0B4AE2 48     0445* ld   c, b
0B4AE3 CD     0446* call @one_int
0B4AE4 EB 
0B4AE5 4A 
0B4AE6 0B 
0B4AE7 C3     0447* jp   @frac            ; Jump to fractional part conversion
0B4AE8 F6 
0B4AE9 4A 
0B4AEA 0B 
              0448* @one_int:
0B4AEB 3E     0449* ld   a, '0' - 1       ; Start ASCII character at '0'
0B4AEC 2F 
              0450* @divide_me:
0B4AED 3C     0451* inc  a
0B4AEE 09     0452* add  hl, bc           ; Accumulate until overflow
0B4AEF 38     0453* jr   c, @divide_me
0B4AF0 FC 
0B4AF1 ED     0454* sbc  hl, bc           ; Remove excess after overflow
0B4AF2 42 
0B4AF3 12     0455* ld   (de), a          ; Store ASCII digit
0B4AF4 13     0456* inc  de
0B4AF5 C9     0457* ret
              0458* ; Convert fractional part
              0459* @frac:
0B4AF6 3E     0460* ld   a, '.'           ; Decimal point
0B4AF7 2E 
0B4AF8 12     0461* ld   (de), a
0B4AF9 13     0462* inc  de
0B4AFA E1     0463* pop  hl               ; Restore HL with original fraction
0B4AFB 06     0464* ld   b, 3             ; Loop counter for 3 fractional digits
0B4AFC 03 
              0465* @frac_loop:
0B4AFD 26     0466* ld   h, 10            ; Load multiplier for fractional part
0B4AFE 0A 
0B4AFF ED     0467* mlt  hl               ; Multiply by 10, result in HL (H holds the integer part)
0B4B00 6C 
0B4B01 3E     0468* ld   a, '0'
0B4B02 30 
0B4B03 84     0469* add  a, h             ; Convert integer part to ASCII
0B4B04 12     0470* ld   (de), a
0B4B05 13     0471* inc  de
0B4B06 10     0472* djnz @frac_loop       ; Repeat for each fractional digit
0B4B07 F5 
              0473* ; Add null terminator
0B4B08 AF     0474* xor  a                ; Null terminator
0B4B09 12     0475* ld   (de), a
0B4B0A C9     0476* ret
              0477* 
              0478* print_u168:
0B4B0B D5     0479* push de
0B4B0C E5     0480* push hl
0B4B0D 11     0481* ld de,_printDecBuffer
0B4B0E 50 
0B4B0F 4A 
0B4B10 0B 
0B4B11 CD     0482* call u168_to_ascii
0B4B12 BB 
0B4B13 4A 
0B4B14 0B 
0B4B15 21     0483* ld hl,_printDecBuffer
0B4B16 50 
0B4B17 4A 
0B4B18 0B 
0B4B19 CD     0484* call printString
0B4B1A 25 
0B4B1B 49 
0B4B1C 0B 
0B4B1D E1     0485* pop hl
0B4B1E D1     0486* pop de
0B4B1F C9     0487* ret
              0488* 
              0489* ; signed version of u168_to_ascii
              0490* s168_to_ascii:
0B4B20 D5     0491* push de ; save starting address of buffer
0B4B21 CD     0492* call hlu_abs
0B4B22 F9 
0B4B23 4F 
0B4B24 0B 
0B4B25 F5     0493* push af ; save sign flag
0B4B26 CD     0494* call u168_to_ascii
0B4B27 BB 
0B4B28 4A 
0B4B29 0B 
0B4B2A F1     0495* pop af ; restore sign flag
0B4B2B D1     0496* pop de ; restore starting address of buffer
0B4B2C F0     0497* ret p ; hlu was positive so nothing to do
0B4B2D 3E     0498* ld a,'-'
0B4B2E 2D 
0B4B2F 12     0499* ld (de),a
0B4B30 C9     0500* ret
              0501* 
              0502* print_s168:
0B4B31 D5     0503* push de
0B4B32 E5     0504* push hl
0B4B33 11     0505* ld de,_printDecBuffer
0B4B34 50 
0B4B35 4A 
0B4B36 0B 
0B4B37 CD     0506* call s168_to_ascii
0B4B38 20 
0B4B39 4B 
0B4B3A 0B 
0B4B3B 21     0507* ld hl,_printDecBuffer
0B4B3C 50 
0B4B3D 4A 
0B4B3E 0B 
0B4B3F CD     0508* call printString
0B4B40 25 
0B4B41 49 
0B4B42 0B 
0B4B43 E1     0509* pop hl
0B4B44 D1     0510* pop de
0B4B45 C9     0511* ret
              0512* 
              0513* print_s168_hl:
0B4B46 F5     0514* push af
0B4B47 E5     0515* push hl
0B4B48 CD     0516* call print_s168
0B4B49 31 
0B4B4A 4B 
0B4B4B 0B 
0B4B4C 3E     0517* ld a,' '
0B4B4D 20 
0B4B4E 5B     0518* rst.lil 10h
0B4B4F D7 
0B4B50 E1     0519* pop hl
0B4B51 F1     0520* pop af
0B4B52 C9     0521* ret
              0522* 
              0523* print_s168_bc:
0B4B53 F5     0524* push af
0B4B54 C5     0525* push bc
0B4B55 E5     0526* push hl
0B4B56 C5     0527* push bc
0B4B57 E1     0528* pop hl
0B4B58 CD     0529* call print_s168
0B4B59 31 
0B4B5A 4B 
0B4B5B 0B 
0B4B5C 3E     0530* ld a,' '
0B4B5D 20 
0B4B5E 5B     0531* rst.lil 10h
0B4B5F D7 
0B4B60 E1     0532* pop hl
0B4B61 C1     0533* pop bc
0B4B62 F1     0534* pop af
0B4B63 C9     0535* ret
              0536* 
              0537* print_s168_de:
0B4B64 F5     0538* push af
0B4B65 D5     0539* push de
0B4B66 E5     0540* push hl
0B4B67 EB     0541* ex de,hl
0B4B68 CD     0542* call print_s168
0B4B69 31 
0B4B6A 4B 
0B4B6B 0B 
0B4B6C 3E     0543* ld a,' '
0B4B6D 20 
0B4B6E 5B     0544* rst.lil 10h
0B4B6F D7 
0B4B70 E1     0545* pop hl
0B4B71 D1     0546* pop de
0B4B72 F1     0547* pop af
0B4B73 C9     0548* ret
              0549* 
              0550* print_s168_hl_bc_de:
0B4B74 F5     0551* push af
0B4B75 C5     0552* push bc
0B4B76 D5     0553* push de
0B4B77 E5     0554* push hl
0B4B78 CD     0555* call print_s168
0B4B79 31 
0B4B7A 4B 
0B4B7B 0B 
0B4B7C 3E     0556* ld a,' '
0B4B7D 20 
0B4B7E 5B     0557* rst.lil 10h
0B4B7F D7 
0B4B80 C5     0558* push bc
0B4B81 E1     0559* pop hl
0B4B82 CD     0560* call print_s168
0B4B83 31 
0B4B84 4B 
0B4B85 0B 
0B4B86 3E     0561* ld a,' '
0B4B87 20 
0B4B88 5B     0562* rst.lil 10h
0B4B89 D7 
0B4B8A EB     0563* ex de,hl
0B4B8B CD     0564* call print_s168
0B4B8C 31 
0B4B8D 4B 
0B4B8E 0B 
0B4B8F 3E     0565* ld a,' '
0B4B90 20 
0B4B91 5B     0566* rst.lil 10h
0B4B92 D7 
0B4B93 E1     0567* pop hl
0B4B94 D1     0568* pop de
0B4B95 C1     0569* pop bc
0B4B96 F1     0570* pop af
0B4B97 C9     0571* ret
              0572* 
              0573* print_s168_bc_de:
0B4B98 F5     0574* push af
0B4B99 C5     0575* push bc
0B4B9A D5     0576* push de
0B4B9B C5     0577* push bc
0B4B9C E1     0578* pop hl
0B4B9D CD     0579* call print_s168
0B4B9E 31 
0B4B9F 4B 
0B4BA0 0B 
0B4BA1 3E     0580* ld a,' '
0B4BA2 20 
0B4BA3 5B     0581* rst.lil 10h
0B4BA4 D7 
0B4BA5 EB     0582* ex de,hl
0B4BA6 CD     0583* call print_s168
0B4BA7 31 
0B4BA8 4B 
0B4BA9 0B 
0B4BAA 3E     0584* ld a,' '
0B4BAB 20 
0B4BAC 5B     0585* rst.lil 10h
0B4BAD D7 
0B4BAE E1     0586* pop hl
0B4BAF D1     0587* pop de
0B4BB0 C1     0588* pop bc
0B4BB1 F1     0589* pop af
0B4BB2 C9     0590* ret
              0591* 
              0592* print_s168_a:
0B4BB3 F5     0593* push af
0B4BB4 C5     0594* push bc
0B4BB5 E5     0595* push hl
0B4BB6 21     0596* ld hl,0
0B4BB7 00 
0B4BB8 00 
0B4BB9 00 
0B4BBA 6F     0597* ld l,a
0B4BBB CD     0598* call print_s168_hl
0B4BBC 46 
0B4BBD 4B 
0B4BBE 0B 
0B4BBF E1     0599* pop hl
0B4BC0 C1     0600* pop bc
0B4BC1 F1     0601* pop af
0B4BC2 C9     0602* ret
              0603* 
              0604* ; #### new functions added by Brandon R. Gates ####
              0605* 
              0606* ; print the binary representation of the 8-bit value in a
              0607* ; destroys a, hl, bc
              0608* printBin8:
0B4BC3 06     0609* ld b,8      ; loop counter for 8 bits
0B4BC4 08 
0B4BC5 21     0610* ld hl,@cmd  ; set hl to the low byte of the output string
0B4BC6 E0 
0B4BC7 4B 
0B4BC8 0B 
              0611* ; (which will be the high bit of the value in a)
              0612* @loop:
0B4BC9 07     0613* rlca ; put the next highest bit into carry
0B4BCA 38     0614* jr c,@one
0B4BCB 04 
0B4BCC 36     0615* ld (hl),'0'
0B4BCD 30 
0B4BCE 18     0616* jr @next_bit
0B4BCF 02 
              0617* @one:
0B4BD0 36     0618* ld (hl),'1'
0B4BD1 31 
              0619* @next_bit:
0B4BD2 23     0620* inc hl
0B4BD3 10     0621* djnz @loop
0B4BD4 F4 
              0622* ; print it
0B4BD5 21     0623* ld hl,@cmd
0B4BD6 E0 
0B4BD7 4B 
0B4BD8 0B 
0B4BD9 01     0624* ld bc,@end-@cmd
0B4BDA 08 
0B4BDB 00 
0B4BDC 00 
0B4BDD 5B     0625* rst.lil $18
0B4BDE DF 
0B4BDF C9     0626* ret
              0627* @cmd: ds 8 ; eight bytes for eight bits
              0628* @end:
              0629* 
              0630* ; print the binary representation of the 8-bit value in a
              0631* ; in reverse order (lsb first)
              0632* ; destroys a, hl, bc
              0633* printBin8Rev:
0B4BE8 06     0634* ld b,8      ; loop counter for 8 bits
0B4BE9 08 
0B4BEA 21     0635* ld hl,@cmd  ; set hl to the low byte of the output string
0B4BEB 05 
0B4BEC 4C 
0B4BED 0B 
              0636* ; (which will be the high bit of the value in a)
              0637* @loop:
0B4BEE 0F     0638* rrca ; put the next lowest bit into carry
0B4BEF 38     0639* jr c,@one
0B4BF0 04 
0B4BF1 36     0640* ld (hl),'0'
0B4BF2 30 
0B4BF3 18     0641* jr @next_bit
0B4BF4 02 
              0642* @one:
0B4BF5 36     0643* ld (hl),'1'
0B4BF6 31 
              0644* @next_bit:
0B4BF7 23     0645* inc hl
0B4BF8 10     0646* djnz @loop
0B4BF9 F4 
              0647* ; print it
0B4BFA 21     0648* ld hl,@cmd
0B4BFB 05 
0B4BFC 4C 
0B4BFD 0B 
0B4BFE 01     0649* ld bc,@end-@cmd
0B4BFF 08 
0B4C00 00 
0B4C01 00 
0B4C02 5B     0650* rst.lil $18
0B4C03 DF 
0B4C04 C9     0651* ret
              0652* @cmd: ds 8 ; eight bytes for eight bits
              0653* @end:
              0654* 
              0655* ; print registers to screen in hexidecimal format
              0656* ; inputs: none
              0657* ; outputs: values of every register printed to screen
              0658* ;    values of each register in global scratch memory
              0659* ; destroys: nothing
              0660* stepRegistersHex:
              0661* ; store everything in scratch
0B4C0D 22     0662* ld (uhl),hl
0B4C0E 4D 
0B4C0F 4E 
0B4C10 0B 
0B4C11 ED     0663* ld (ubc),bc
0B4C12 43 
0B4C13 50 
0B4C14 4E 
0B4C14 0B   
0B4C16 ED     0664* ld (ude),de
0B4C17 53 
0B4C18 53 
0B4C19 4E 
0B4C19 0B   
0B4C1B DD     0665* ld (uix),ix
0B4C1C 22 
0B4C1D 56 
0B4C1E 4E 
0B4C1E 0B   
0B4C20 FD     0666* ld (uiy),iy
0B4C21 22 
0B4C22 59 
0B4C23 4E 
0B4C23 0B   
0B4C25 F5     0667* push af ; fml
0B4C26 E1     0668* pop hl  ; thanks, zilog
0B4C27 22     0669* ld (uaf),hl
0B4C28 4A 
0B4C29 4E 
0B4C2A 0B 
0B4C2B F5     0670* push af ; dammit
              0671* 
              0672* ; home the cursor
              0673* ; call vdu_home_cursor
              0674* 
              0675* ; print each register
0B4C2C 21     0676* ld hl,str_afu
0B4C2D D0 
0B4C2E 4D 
0B4C2F 0B 
0B4C30 CD     0677* call printString
0B4C31 25 
0B4C32 49 
0B4C33 0B 
0B4C34 2A     0678* ld hl,(uaf)
0B4C35 4A 
0B4C36 4E 
0B4C37 0B 
0B4C38 CD     0679* call printHex24
0B4C39 45 
0B4C3A 49 
0B4C3B 0B 
0B4C3C CD     0680* call printNewLine
0B4C3D 3A 
0B4C3E 49 
0B4C3F 0B 
              0681* 
0B4C40 21     0682* ld hl,str_hlu
0B4C41 D5 
0B4C42 4D 
0B4C43 0B 
0B4C44 CD     0683* call printString
0B4C45 25 
0B4C46 49 
0B4C47 0B 
0B4C48 2A     0684* ld hl,(uhl)
0B4C49 4D 
0B4C4A 4E 
0B4C4B 0B 
0B4C4C CD     0685* call printHex24
0B4C4D 45 
0B4C4E 49 
0B4C4F 0B 
0B4C50 CD     0686* call printNewLine
0B4C51 3A 
0B4C52 49 
0B4C53 0B 
              0687* 
0B4C54 21     0688* ld hl,str_bcu
0B4C55 DA 
0B4C56 4D 
0B4C57 0B 
0B4C58 CD     0689* call printString
0B4C59 25 
0B4C5A 49 
0B4C5B 0B 
0B4C5C 2A     0690* ld hl,(ubc)
0B4C5D 50 
0B4C5E 4E 
0B4C5F 0B 
0B4C60 CD     0691* call printHex24
0B4C61 45 
0B4C62 49 
0B4C63 0B 
0B4C64 CD     0692* call printNewLine
0B4C65 3A 
0B4C66 49 
0B4C67 0B 
              0693* 
0B4C68 21     0694* ld hl,str_deu
0B4C69 DF 
0B4C6A 4D 
0B4C6B 0B 
0B4C6C CD     0695* call printString
0B4C6D 25 
0B4C6E 49 
0B4C6F 0B 
0B4C70 2A     0696* ld hl,(ude)
0B4C71 53 
0B4C72 4E 
0B4C73 0B 
0B4C74 CD     0697* call printHex24
0B4C75 45 
0B4C76 49 
0B4C77 0B 
0B4C78 CD     0698* call printNewLine
0B4C79 3A 
0B4C7A 49 
0B4C7B 0B 
              0699* 
0B4C7C 21     0700* ld hl,str_ixu
0B4C7D E4 
0B4C7E 4D 
0B4C7F 0B 
0B4C80 CD     0701* call printString
0B4C81 25 
0B4C82 49 
0B4C83 0B 
0B4C84 2A     0702* ld hl,(uix)
0B4C85 56 
0B4C86 4E 
0B4C87 0B 
0B4C88 CD     0703* call printHex24
0B4C89 45 
0B4C8A 49 
0B4C8B 0B 
0B4C8C CD     0704* call printNewLine
0B4C8D 3A 
0B4C8E 49 
0B4C8F 0B 
              0705* 
0B4C90 21     0706* ld hl,str_iyu
0B4C91 E9 
0B4C92 4D 
0B4C93 0B 
0B4C94 CD     0707* call printString
0B4C95 25 
0B4C96 49 
0B4C97 0B 
0B4C98 2A     0708* ld hl,(uiy)
0B4C99 59 
0B4C9A 4E 
0B4C9B 0B 
0B4C9C CD     0709* call printHex24
0B4C9D 45 
0B4C9E 49 
0B4C9F 0B 
0B4CA0 CD     0710* call printNewLine
0B4CA1 3A 
0B4CA2 49 
0B4CA3 0B 
              0711* 
              0712* ; call vsync
              0713* 
0B4CA4 CD     0714* call printNewLine
0B4CA5 3A 
0B4CA6 49 
0B4CA7 0B 
              0715* 
              0716* ; check for right shift key and quit if pressed
              0717* MOSCALL mos_getkbmap
0B4CA8 3E    0001*M LD	A, function
0B4CA9 1E 
0B4CAA 49    0002*M RST.LIS	08h
0B4CAB CF 
              0718* @stayhere:
              0719* ; 7 RightShift
0B4CAC DD     0720* bit 6,(ix+0)
0B4CAD CB 
0B4CAE 00 
0B4CAF 76 
0B4CB0 20     0721* jr nz,@RightShift
0B4CB1 02 
0B4CB2 18     0722* jr @stayhere
0B4CB3 F8 
              0723* @RightShift:
0B4CB4 DD     0724* res 0,(ix+14) ; debounce the key (hopefully)
0B4CB5 CB 
0B4CB6 0E 
0B4CB7 86 
0B4CB8 3E     0725* ld a,%10000000
0B4CB9 80 
              0726* ; call multiPurposeDelay
              0727* 
              0728* ; restore everything
0B4CBA 2A     0729* ld hl, (uhl)
0B4CBB 4D 
0B4CBC 4E 
0B4CBD 0B 
0B4CBE ED     0730* ld bc, (ubc)
0B4CBF 4B 
0B4CC0 50 
0B4CC1 4E 
0B4CC1 0B   
0B4CC3 ED     0731* ld de, (ude)
0B4CC4 5B 
0B4CC5 53 
0B4CC6 4E 
0B4CC6 0B   
0B4CC8 DD     0732* ld ix, (uix)
0B4CC9 2A 
0B4CCA 56 
0B4CCB 4E 
0B4CCB 0B   
0B4CCD FD     0733* ld iy, (uiy)
0B4CCE 2A 
0B4CCF 59 
0B4CD0 4E 
0B4CD0 0B   
0B4CD2 F1     0734* pop af
              0735* ; all done
0B4CD3 C9     0736* ret
              0737* 
              0738* ; print registers to screen in hexidecimal format
              0739* ; inputs: none
              0740* ; outputs: values of every register printed to screen
              0741* ;    values of each register in global scratch memory
              0742* ; destroys: nothing
              0743* dumpRegistersHex:
              0744* ; store everything in scratch
0B4CD4 22     0745* ld (uhl),hl
0B4CD5 4D 
0B4CD6 4E 
0B4CD7 0B 
0B4CD8 ED     0746* ld (ubc),bc
0B4CD9 43 
0B4CDA 50 
0B4CDB 4E 
0B4CDB 0B   
0B4CDD ED     0747* ld (ude),de
0B4CDE 53 
0B4CDF 53 
0B4CE0 4E 
0B4CE0 0B   
0B4CE2 DD     0748* ld (uix),ix
0B4CE3 22 
0B4CE4 56 
0B4CE5 4E 
0B4CE5 0B   
0B4CE7 FD     0749* ld (uiy),iy
0B4CE8 22 
0B4CE9 59 
0B4CEA 4E 
0B4CEA 0B   
0B4CEC F5     0750* push af ; fml
0B4CED E1     0751* pop hl  ; thanks, zilog
0B4CEE 22     0752* ld (uaf),hl
0B4CEF 4A 
0B4CF0 4E 
0B4CF1 0B 
0B4CF2 F5     0753* push af ; dammit
              0754* 
              0755* ; home the cursor
              0756* ; call vdu_home_cursor
              0757* ; call printNewLine
              0758* 
              0759* ; print each register
0B4CF3 21     0760* ld hl,str_afu
0B4CF4 D0 
0B4CF5 4D 
0B4CF6 0B 
0B4CF7 CD     0761* call printString
0B4CF8 25 
0B4CF9 49 
0B4CFA 0B 
0B4CFB 2A     0762* ld hl,(uaf)
0B4CFC 4A 
0B4CFD 4E 
0B4CFE 0B 
0B4CFF CD     0763* call printHex24
0B4D00 45 
0B4D01 49 
0B4D02 0B 
              0764* ; call printNewLine
              0765* 
0B4D03 21     0766* ld hl,str_hlu
0B4D04 D5 
0B4D05 4D 
0B4D06 0B 
0B4D07 CD     0767* call printString
0B4D08 25 
0B4D09 49 
0B4D0A 0B 
0B4D0B 2A     0768* ld hl,(uhl)
0B4D0C 4D 
0B4D0D 4E 
0B4D0E 0B 
0B4D0F CD     0769* call printHex24
0B4D10 45 
0B4D11 49 
0B4D12 0B 
              0770* ; call printNewLine
              0771* 
0B4D13 21     0772* ld hl,str_bcu
0B4D14 DA 
0B4D15 4D 
0B4D16 0B 
0B4D17 CD     0773* call printString
0B4D18 25 
0B4D19 49 
0B4D1A 0B 
0B4D1B 2A     0774* ld hl,(ubc)
0B4D1C 50 
0B4D1D 4E 
0B4D1E 0B 
0B4D1F CD     0775* call printHex24
0B4D20 45 
0B4D21 49 
0B4D22 0B 
              0776* ; call printNewLine
              0777* 
0B4D23 21     0778* ld hl,str_deu
0B4D24 DF 
0B4D25 4D 
0B4D26 0B 
0B4D27 CD     0779* call printString
0B4D28 25 
0B4D29 49 
0B4D2A 0B 
0B4D2B 2A     0780* ld hl,(ude)
0B4D2C 53 
0B4D2D 4E 
0B4D2E 0B 
0B4D2F CD     0781* call printHex24
0B4D30 45 
0B4D31 49 
0B4D32 0B 
              0782* ; call printNewLine
              0783* 
0B4D33 21     0784* ld hl,str_ixu
0B4D34 E4 
0B4D35 4D 
0B4D36 0B 
0B4D37 CD     0785* call printString
0B4D38 25 
0B4D39 49 
0B4D3A 0B 
0B4D3B 2A     0786* ld hl,(uix)
0B4D3C 56 
0B4D3D 4E 
0B4D3E 0B 
0B4D3F CD     0787* call printHex24
0B4D40 45 
0B4D41 49 
0B4D42 0B 
              0788* ; call printNewLine
              0789* 
0B4D43 21     0790* ld hl,str_iyu
0B4D44 E9 
0B4D45 4D 
0B4D46 0B 
0B4D47 CD     0791* call printString
0B4D48 25 
0B4D49 49 
0B4D4A 0B 
0B4D4B 2A     0792* ld hl,(uiy)
0B4D4C 59 
0B4D4D 4E 
0B4D4E 0B 
0B4D4F CD     0793* call printHex24
0B4D50 45 
0B4D51 49 
0B4D52 0B 
              0794* ; call printNewLine
              0795* 
              0796* ; call vdu_vblank
              0797* 
0B4D53 CD     0798* call printNewLine
0B4D54 3A 
0B4D55 49 
0B4D56 0B 
              0799* ; restore everything
0B4D57 2A     0800* ld hl, (uhl)
0B4D58 4D 
0B4D59 4E 
0B4D5A 0B 
0B4D5B ED     0801* ld bc, (ubc)
0B4D5C 4B 
0B4D5D 50 
0B4D5E 4E 
0B4D5E 0B   
0B4D60 ED     0802* ld de, (ude)
0B4D61 5B 
0B4D62 53 
0B4D63 4E 
0B4D63 0B   
0B4D65 DD     0803* ld ix, (uix)
0B4D66 2A 
0B4D67 56 
0B4D68 4E 
0B4D68 0B   
0B4D6A FD     0804* ld iy, (uiy)
0B4D6B 2A 
0B4D6C 59 
0B4D6D 4E 
0B4D6D 0B   
0B4D6F F1     0805* pop af
              0806* ; all done
0B4D70 C9     0807* ret
              0808* 
              0809* dumpRegistersHexPrime:
0B4D71 D9     0810* exx
0B4D72 08     0811* ex af,af'
0B4D73 CD     0812* call dumpRegistersHex
0B4D74 D4 
0B4D75 4C 
0B4D76 0B 
0B4D77 08     0813* ex af,af'
0B4D78 D9     0814* exx
0B4D79 C9     0815* ret
              0816* 
              0817* ; additionally dump prime registers
              0818* ; inputs: none
              0819* ; outputs: values of every register printed to screen
              0820* ; destroys: nothing
              0821* dumpRegistersHexAll:
0B4D7A CD     0822* call dumpRegistersHex
0B4D7B D4 
0B4D7C 4C 
0B4D7D 0B 
0B4D7E 08     0823* ex af,af'
0B4D7F D9     0824* exx
0B4D80 CD     0825* call dumpRegistersHex
0B4D81 D4 
0B4D82 4C 
0B4D83 0B 
0B4D84 08     0826* ex af,af'
0B4D85 D9     0827* exx
0B4D86 C9     0828* ret
              0829* 
              0830* ; print hlu to screen in hexidecimal format
              0831* ; inputs: none
              0832* ; destroys: nothing
              0833* print_hex_hl:
0B4D87 F5     0834* push af
0B4D88 E5     0835* push hl
0B4D89 21     0836* ld hl,str_hlu
0B4D8A D5 
0B4D8B 4D 
0B4D8C 0B 
0B4D8D CD     0837* call printString
0B4D8E 25 
0B4D8F 49 
0B4D90 0B 
0B4D91 E1     0838* pop hl
0B4D92 E5     0839* push hl
0B4D93 CD     0840* call printHex24
0B4D94 45 
0B4D95 49 
0B4D96 0B 
0B4D97 3E     0841* ld a,' '
0B4D98 20 
0B4D99 5B     0842* rst.lil 10h
0B4D9A D7 
0B4D9B E1     0843* pop hl
0B4D9C F1     0844* pop af
0B4D9D C9     0845* ret
              0846* 
              0847* ; print bcu to screen in hexidecimal format
              0848* ; inputs: none
              0849* ; destroys: nothing
              0850* print_hex_bc:
0B4D9E F5     0851* push af
0B4D9F E5     0852* push hl
0B4DA0 C5     0853* push bc
0B4DA1 21     0854* ld hl,str_bcu
0B4DA2 DA 
0B4DA3 4D 
0B4DA4 0B 
0B4DA5 CD     0855* call printString
0B4DA6 25 
0B4DA7 49 
0B4DA8 0B 
0B4DA9 E1     0856* pop hl
0B4DAA E5     0857* push hl
0B4DAB CD     0858* call printHex24
0B4DAC 45 
0B4DAD 49 
0B4DAE 0B 
0B4DAF 3E     0859* ld a,' '
0B4DB0 20 
0B4DB1 5B     0860* rst.lil 10h
0B4DB2 D7 
0B4DB3 C1     0861* pop bc
0B4DB4 E1     0862* pop hl
0B4DB5 F1     0863* pop af
0B4DB6 C9     0864* ret
              0865* 
              0866* ; print deu to screen in hexidecimal format
              0867* ; inputs: none
              0868* ; destroys: nothing
              0869* print_hex_de:
0B4DB7 F5     0870* push af
0B4DB8 E5     0871* push hl
0B4DB9 D5     0872* push de
0B4DBA 21     0873* ld hl,str_deu
0B4DBB DF 
0B4DBC 4D 
0B4DBD 0B 
0B4DBE CD     0874* call printString
0B4DBF 25 
0B4DC0 49 
0B4DC1 0B 
0B4DC2 E1     0875* pop hl
0B4DC3 E5     0876* push hl
0B4DC4 CD     0877* call printHex24
0B4DC5 45 
0B4DC6 49 
0B4DC7 0B 
0B4DC8 3E     0878* ld a,' '
0B4DC9 20 
0B4DCA 5B     0879* rst.lil 10h
0B4DCB D7 
0B4DCC D1     0880* pop de
0B4DCD E1     0881* pop hl
0B4DCE F1     0882* pop af
0B4DCF C9     0883* ret
              0884* 
0B4DD0 20     0885* str_afu: db " af=",0
0B4DD1 61 
0B4DD2 66 
0B4DD3 3D 
0B4DD3 00   
0B4DD5 20     0886* str_hlu: db " hl=",0
0B4DD6 68 
0B4DD7 6C 
0B4DD8 3D 
0B4DD8 00   
0B4DDA 20     0887* str_bcu: db " bc=",0
0B4DDB 62 
0B4DDC 63 
0B4DDD 3D 
0B4DDD 00   
0B4DDF 20     0888* str_deu: db " de=",0
0B4DE0 64 
0B4DE1 65 
0B4DE2 3D 
0B4DE2 00   
0B4DE4 20     0889* str_ixu: db " ix=",0
0B4DE5 69 
0B4DE6 78 
0B4DE7 3D 
0B4DE7 00   
0B4DE9 20     0890* str_iyu: db " iy=",0
0B4DEA 69 
0B4DEB 79 
0B4DEC 3D 
0B4DEC 00   
              0891* 
              0892* ; print udeuhl to screen in hexidecimal format
              0893* ; inputs: none
              0894* ; outputs: concatenated hexidecimal udeuhl
              0895* ; destroys: nothing
              0896* dumpUDEUHLHex:
              0897* ; store everything in scratch
0B4DEE 22     0898* ld (uhl),hl
0B4DEF 4D 
0B4DF0 4E 
0B4DF1 0B 
0B4DF2 ED     0899* ld (ubc),bc
0B4DF3 43 
0B4DF4 50 
0B4DF5 4E 
0B4DF5 0B   
0B4DF7 ED     0900* ld (ude),de
0B4DF8 53 
0B4DF9 53 
0B4DFA 4E 
0B4DFA 0B   
0B4DFC DD     0901* ld (uix),ix
0B4DFD 22 
0B4DFE 56 
0B4DFF 4E 
0B4DFF 0B   
0B4E01 FD     0902* ld (uiy),iy
0B4E02 22 
0B4E03 59 
0B4E04 4E 
0B4E04 0B   
0B4E06 F5     0903* push af
              0904* 
              0905* ; print each register
              0906* 
0B4E07 21     0907* ld hl,str_udeuhl
0B4E08 41 
0B4E09 4E 
0B4E0A 0B 
0B4E0B CD     0908* call printString
0B4E0C 25 
0B4E0D 49 
0B4E0E 0B 
0B4E0F 2A     0909* ld hl,(ude)
0B4E10 53 
0B4E11 4E 
0B4E12 0B 
0B4E13 CD     0910* call printHex24
0B4E14 45 
0B4E15 49 
0B4E16 0B 
0B4E17 3E     0911* ld a,'.'	; print a dot to separate the values
0B4E18 2E 
0B4E19 5B     0912* rst.lil 10h
0B4E1A D7 
0B4E1B 2A     0913* ld hl,(uhl)
0B4E1C 4D 
0B4E1D 4E 
0B4E1E 0B 
0B4E1F CD     0914* call printHex24
0B4E20 45 
0B4E21 49 
0B4E22 0B 
0B4E23 CD     0915* call printNewLine
0B4E24 3A 
0B4E25 49 
0B4E26 0B 
              0916* 
              0917* ; restore everything
0B4E27 2A     0918* ld hl, (uhl)
0B4E28 4D 
0B4E29 4E 
0B4E2A 0B 
0B4E2B ED     0919* ld bc, (ubc)
0B4E2C 4B 
0B4E2D 50 
0B4E2E 4E 
0B4E2E 0B   
0B4E30 ED     0920* ld de, (ude)
0B4E31 5B 
0B4E32 53 
0B4E33 4E 
0B4E33 0B   
0B4E35 DD     0921* ld ix, (uix)
0B4E36 2A 
0B4E37 56 
0B4E38 4E 
0B4E38 0B   
0B4E3A FD     0922* ld iy, (uiy)
0B4E3B 2A 
0B4E3C 59 
0B4E3D 4E 
0B4E3D 0B   
0B4E3F F1     0923* pop af
              0924* ; all done
0B4E40 C9     0925* ret
              0926* 
0B4E41 75     0927* str_udeuhl: db "ude.uhl=",0
0B4E42 64 
0B4E43 65 
0B4E44 2E 
0B4E44 75   
0B4E45 68 
0B4E46 6C 
0B4E47 3D 
0B4E47 00   
              0928* 
              0929* ; global scratch memory for registers
0B4E4A 00     0930* uaf: dl 0
0B4E4B 00 
0B4E4C 00 
0B4E4D 00     0931* uhl: dl 0
0B4E4E 00 
0B4E4F 00 
0B4E50 00     0932* ubc: dl 0
0B4E51 00 
0B4E52 00 
0B4E53 00     0933* ude: dl 0
0B4E54 00 
0B4E55 00 
0B4E56 00     0934* uix: dl 0
0B4E57 00 
0B4E58 00 
0B4E59 00     0935* uiy: dl 0
0B4E5A 00 
0B4E5B 00 
0B4E5C 00     0936* usp: dl 0
0B4E5D 00 
0B4E5E 00 
0B4E5F 00     0937* upc: dl 0
0B4E60 00 
0B4E61 00 
              0938* 
              0939* ; inputs: whatever is in the flags register
              0940* ; outputs: binary representation of flags
              0941* ;          with a header so we know which is what
              0942* ; destroys: nothing
              0943* ; preserves: everything
              0944* dumpFlags:
              0945* ; first we curse zilog for not giving direct access to flags
0B4E62 F5     0946* push af ; this is so we can send it back unharmed
0B4E63 F5     0947* push af ; this is so we can pop it to hl
              0948* ; store everything in scratch
0B4E64 22     0949* ld (uhl),hl
0B4E65 4D 
0B4E66 4E 
0B4E67 0B 
0B4E68 ED     0950* ld (ubc),bc
0B4E69 43 
0B4E6A 50 
0B4E6B 4E 
0B4E6B 0B   
0B4E6D ED     0951* ld (ude),de
0B4E6E 53 
0B4E6F 53 
0B4E70 4E 
0B4E70 0B   
0B4E72 DD     0952* ld (uix),ix
0B4E73 22 
0B4E74 56 
0B4E75 4E 
0B4E75 0B   
0B4E77 FD     0953* ld (uiy),iy
0B4E78 22 
0B4E79 59 
0B4E7A 4E 
0B4E7A 0B   
              0954* ; next we print the header
0B4E7C 21     0955* ld hl,@header
0B4E7D A8 
0B4E7E 4E 
0B4E7F 0B 
0B4E80 CD     0956* call printString
0B4E81 25 
0B4E82 49 
0B4E83 0B 
0B4E84 E1     0957* pop hl ; flags are now in l
0B4E85 7D     0958* ld a,l ; flags are now in a
0B4E86 CD     0959* call printBin8
0B4E87 C3 
0B4E88 4B 
0B4E89 0B 
0B4E8A CD     0960* call printNewLine
0B4E8B 3A 
0B4E8C 49 
0B4E8D 0B 
              0961* ; restore everything
0B4E8E 2A     0962* ld hl, (uhl)
0B4E8F 4D 
0B4E90 4E 
0B4E91 0B 
0B4E92 ED     0963* ld bc, (ubc)
0B4E93 4B 
0B4E94 50 
0B4E95 4E 
0B4E95 0B   
0B4E97 ED     0964* ld de, (ude)
0B4E98 5B 
0B4E99 53 
0B4E9A 4E 
0B4E9A 0B   
0B4E9C DD     0965* ld ix, (uix)
0B4E9D 2A 
0B4E9E 56 
0B4E9F 4E 
0B4E9F 0B   
0B4EA1 FD     0966* ld iy, (uiy)
0B4EA2 2A 
0B4EA3 59 
0B4EA4 4E 
0B4EA4 0B   
0B4EA6 F1     0967* pop af ; send her home the way she came
0B4EA7 C9     0968* ret
              0969* ; Bit 7 (S): Sign flag
              0970* ; Bit 6 (Z): Zero flag
              0971* ; Bit 5 (5): Reserved (copy of bit 5 of the result)
              0972* ; Bit 4 (H): Half Carry flag
              0973* ; Bit 3 (3): Reserved (copy of bit 3 of the result)
              0974* ; Bit 2 (PV): Parity/Overflow flag
              0975* ; Bit 1 (N): Subtract flag
              0976* ; Bit 0 (C): Carry flag
0B4EA8 53     0977* @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
0B4EA9 5A 
0B4EAA 78 
0B4EAB 48 
0B4EAB 78   
0B4EAC 50 
0B4EAD 4E 
0B4EAE 43 
0B4EAE 0D   
0B4EAF 0A 
0B4EB0 00 
              0978* 
              0979* ; set all the bits in the flag register
              0980* ; more of an academic exercise than anything useful
              0981* ; inputs; none
              0982* ; outputs; a=0,f=255
              0983* ; destroys: flags, hl
              0984* ; preserves: a, because why not
              0985* setAllFlags:
0B4EB3 21     0986* ld hl,255
0B4EB4 FF 
0B4EB5 00 
0B4EB6 00 
0B4EB7 67     0987* ld h,a ; four cycles to preserve a is cheap
0B4EB8 E5     0988* push hl
0B4EB9 F1     0989* pop af
0B4EBA C9     0990* ret
              0991* 
              0992* ; reset all the bits in the flag register
              0993* ; unlike its inverse counterpart, this may actually be useful
              0994* ; inputs; none
              0995* ; outputs; a=0,f=0
              0996* ; destroys: flags, hl
              0997* ; preserves: a, because why not
              0998* resetAllFlags:
0B4EBB 21     0999* ld hl,0
0B4EBC 00 
0B4EBD 00 
0B4EBE 00 
0B4EBF 67     1000* ld h,a ; four cycles to preserve a is cheap
0B4EC0 E5     1001* push hl
0B4EC1 F1     1002* pop af
0B4EC2 C9     1003* ret
              1004* 
              1005* ; wait until user presses a key
              1006* ; inputs: none
              1007* ; outputs: none
              1008* ; destroys: af,ix
              1009* waitKeypress:
              1010* MOSCALL mos_sysvars
0B4EC3 3E    0001*M LD	A, function
0B4EC4 08 
0B4EC5 49    0002*M RST.LIS	08h
0B4EC6 CF 
0B4EC7 AF     1011* xor a ; zero out any prior keypresses
0B4EC8 DD     1012* ld (ix+sysvar_keyascii),a
0B4EC9 77 
0B4ECA 05 
              1013* @loop:
0B4ECB DD     1014* ld a,(ix+sysvar_keyascii)
0B4ECC 7E 
0B4ECD 05 
0B4ECE A7     1015* and a
0B4ECF C0     1016* ret nz
0B4ED0 18     1017* jr @loop
0B4ED1 F9 
              1018* 
              1019* 
              1020* ; print bytes from an address to the screen in hexidecimal format
              1021* ; inputs: hl = address of first byte to print, a = number of bytes to print
              1022* ; outputs: values of each byte printed to screen separated by spaces
              1023* ; destroys: nothing
              1024* dumpMemoryHex:
              1025* ; save registers to the stack
0B4ED2 C5     1026* push bc
0B4ED3 E5     1027* push hl
0B4ED4 F5     1028* push af
              1029* 
              1030* ; print the address and separator
0B4ED5 CD     1031* call printHex24
0B4ED6 45 
0B4ED7 49 
0B4ED8 0B 
0B4ED9 3E     1032* ld a,':'
0B4EDA 3A 
0B4EDB 5B     1033* rst.lil 10h
0B4EDC D7 
0B4EDD 3E     1034* ld a,' '
0B4EDE 20 
0B4EDF 5B     1035* rst.lil 10h
0B4EE0 D7 
              1036* 
              1037* ; set b to be our loop counter
0B4EE1 F1     1038* pop af
0B4EE2 47     1039* ld b,a
0B4EE3 E1     1040* pop hl
0B4EE4 E5     1041* push hl
0B4EE5 F5     1042* push af
              1043* @loop:
              1044* ; print the byte
0B4EE6 7E     1045* ld a,(hl)
0B4EE7 CD     1046* call printHex8
0B4EE8 53 
0B4EE9 49 
0B4EEA 0B 
              1047* ; print a space
0B4EEB 3E     1048* ld a,' '
0B4EEC 20 
0B4EED 5B     1049* rst.lil 10h
0B4EEE D7 
0B4EEF 23     1050* inc hl
0B4EF0 10     1051* djnz @loop
0B4EF1 F4 
0B4EF2 CD     1052* call printNewLine
0B4EF3 3A 
0B4EF4 49 
0B4EF5 0B 
              1053* 
              1054* ; restore everything
0B4EF6 F1     1055* pop af
0B4EF7 E1     1056* pop hl
0B4EF8 C1     1057* pop bc
              1058* 
              1059* ; all done
0B4EF9 C9     1060* ret
              1061* 
              1062* 
              1063* ; print bytes from an address to the screen in binary format
              1064* ; inputs: hl = address of first byte to print, a = number of bytes to print
              1065* ; outputs: values of each byte printed to screen separated by spaces
              1066* ; destroys: nothing
              1067* dumpMemoryBin:
              1068* ; save all registers to the stack
0B4EFA F5     1069* push af
0B4EFB C5     1070* push bc
0B4EFC D5     1071* push de
0B4EFD E5     1072* push hl
0B4EFE DD     1073* push ix
0B4EFF E5 
0B4F00 FD     1074* push iy
0B4F01 E5 
              1075* 
              1076* ; set b to be our loop counter
0B4F02 47     1077* ld b,a
              1078* @loop:
              1079* ; print the byte
0B4F03 7E     1080* ld a,(hl)
0B4F04 E5     1081* push hl
0B4F05 C5     1082* push bc
0B4F06 CD     1083* call printBin8
0B4F07 C3 
0B4F08 4B 
0B4F09 0B 
0B4F0A C1     1084* pop bc
              1085* ; print a space
0B4F0B 3E     1086* ld a,' '
0B4F0C 20 
0B4F0D 5B     1087* rst.lil 10h
0B4F0E D7 
0B4F0F E1     1088* pop hl
0B4F10 23     1089* inc hl
0B4F11 10     1090* djnz @loop
0B4F12 F0 
0B4F13 CD     1091* call printNewLine
0B4F14 3A 
0B4F15 49 
0B4F16 0B 
              1092* 
              1093* ; restore everything
0B4F17 FD     1094* pop iy
0B4F18 E1 
0B4F19 DD     1095* pop ix
0B4F1A E1 
0B4F1B E1     1096* pop hl
0B4F1C D1     1097* pop de
0B4F1D C1     1098* pop bc
0B4F1E F1     1099* pop af
              1100* ; all done
0B4F1F C9     1101* ret
              1102* 
              1103* ; print bytes from an address to the screen in binary format
              1104* ; with the bits of each byte in reverse order (lsb first)
              1105* ; inputs: hl = address of first byte to print, a = number of bytes to print
              1106* ; outputs: values of each byte printed to screen separated by spaces
              1107* ; destroys: nothing
              1108* dumpMemoryBinRev:
              1109* ; save all registers to the stack
0B4F20 F5     1110* push af
0B4F21 C5     1111* push bc
0B4F22 D5     1112* push de
0B4F23 E5     1113* push hl
0B4F24 DD     1114* push ix
0B4F25 E5 
0B4F26 FD     1115* push iy
0B4F27 E5 
              1116* 
              1117* ; set b to be our loop counter
0B4F28 47     1118* ld b,a
              1119* @loop:
              1120* ; print the byte
0B4F29 7E     1121* ld a,(hl)
0B4F2A E5     1122* push hl
0B4F2B C5     1123* push bc
0B4F2C CD     1124* call printBin8Rev
0B4F2D E8 
0B4F2E 4B 
0B4F2F 0B 
0B4F30 C1     1125* pop bc
              1126* ; print a space
0B4F31 3E     1127* ld a,' '
0B4F32 20 
0B4F33 5B     1128* rst.lil 10h
0B4F34 D7 
0B4F35 E1     1129* pop hl
0B4F36 23     1130* inc hl
0B4F37 10     1131* djnz @loop
0B4F38 F0 
0B4F39 CD     1132* call printNewLine
0B4F3A 3A 
0B4F3B 49 
0B4F3C 0B 
              1133* 
              1134* ; restore everything
0B4F3D FD     1135* pop iy
0B4F3E E1 
0B4F3F DD     1136* pop ix
0B4F40 E1 
0B4F41 E1     1137* pop hl
0B4F42 D1     1138* pop de
0B4F43 C1     1139* pop bc
0B4F44 F1     1140* pop af
              1141* ; all done
0B4F45 C9     1142* ret
              1143* 
              1144* ; store HLH'L'C floating point number in a 40-bit buffer
              1145* ; inputs: HLH'L'C = floating point number
              1146* ;         ix = buffer address
              1147* ; outputs: buffer filled with floating point number
              1148* ; destroys: nothing
              1149* store_float_nor:
0B4F46 DD     1150* ld (ix+0),c
0B4F47 71 
0B4F48 00 
0B4F49 DD     1151* ld (ix+3),l
0B4F4A 75 
0B4F4B 03 
0B4F4C DD     1152* ld (ix+4),h
0B4F4D 74 
0B4F4E 04 
0B4F4F D9     1153* exx
0B4F50 DD     1154* ld (ix+1),l
0B4F51 75 
0B4F52 01 
0B4F53 DD     1155* ld (ix+2),h
0B4F54 74 
0B4F55 02 
0B4F56 D9     1156* exx
0B4F57 C9     1157* ret
              1158* 
              1159* ; fetch HLH'L'C floating point number from a 40-bit buffer
              1160* ; inputs: ix = buffer address
              1161* ; outputs: HLH'L'C = floating point number
              1162* ; destroys: HLH'L'C
              1163* fetch_float_nor:
0B4F58 DD     1164* ld c,(ix+0)
0B4F59 4E 
0B4F5A 00 
0B4F5B DD     1165* ld l,(ix+3)
0B4F5C 6E 
0B4F5D 03 
0B4F5E DD     1166* ld h,(ix+4)
0B4F5F 66 
0B4F60 04 
0B4F61 D9     1167* exx
0B4F62 DD     1168* ld l,(ix+1)
0B4F63 6E 
0B4F64 01 
0B4F65 DD     1169* ld h,(ix+2)
0B4F66 66 
0B4F67 02 
0B4F68 D9     1170* exx
0B4F69 C9     1171* ret
              1172* 
              1173* ; store DED'E'B floating point number in a 40-bit buffer
              1174* ; inputs: DED'E'B = floating point number
              1175* ;         ix = buffer address
              1176* ; outputs: buffer filled with floating point number
              1177* ; destroys: nothing
              1178* store_float_alt:
0B4F6A DD     1179* ld (ix+0),b
0B4F6B 70 
0B4F6C 00 
0B4F6D DD     1180* ld (ix+3),e
0B4F6E 73 
0B4F6F 03 
0B4F70 DD     1181* ld (ix+4),d
0B4F71 72 
0B4F72 04 
0B4F73 D9     1182* exx
0B4F74 DD     1183* ld (ix+1),e
0B4F75 73 
0B4F76 01 
0B4F77 DD     1184* ld (ix+2),d
0B4F78 72 
0B4F79 02 
0B4F7A D9     1185* exx
0B4F7B C9     1186* ret
              1187* 
              1188* ; fetch DED'E'B floating point number from a 40-bit buffer
              1189* ; inputs: ix = buffer address
              1190* ; outputs: DED'E'B = floating point number
              1191* ; destroys: DED'E'B
              1192* fetch_float_alt:
0B4F7C DD     1193* ld b,(ix+0)
0B4F7D 46 
0B4F7E 00 
0B4F7F DD     1194* ld e,(ix+3)
0B4F80 5E 
0B4F81 03 
0B4F82 DD     1195* ld d,(ix+4)
0B4F83 56 
0B4F84 04 
0B4F85 D9     1196* exx
0B4F86 DD     1197* ld e,(ix+1)
0B4F87 5E 
0B4F88 01 
0B4F89 DD     1198* ld d,(ix+2)
0B4F8A 56 
0B4F8B 02 
0B4F8C D9     1199* exx
0B4F8D C9     1200* ret
              1201* 
              1202* ; print HLH'L'C floating point number in hex format
              1203* ; inputs: HLH'L'C = floating point number
              1204* print_float_hex_nor:
0B4F8E C5     1205* push bc ; preserve
0B4F8F E5     1206* push hl ; preserve
0B4F90 CD     1207* call printHex16
0B4F91 4D 
0B4F92 49 
0B4F93 0B 
0B4F94 3E     1208* ld a,'.'
0B4F95 2E 
0B4F96 5B     1209* rst.lil 10h
0B4F97 D7 
0B4F98 D9     1210* exx
0B4F99 CD     1211* call printHex16
0B4F9A 4D 
0B4F9B 49 
0B4F9C 0B 
0B4F9D D9     1212* exx
0B4F9E 3E     1213* ld a,'^'
0B4F9F 5E 
0B4FA0 5B     1214* rst.lil 10h
0B4FA1 D7 
0B4FA2 79     1215* ld a,c
0B4FA3 CD     1216* call printHex8
0B4FA4 53 
0B4FA5 49 
0B4FA6 0B 
0B4FA7 C1     1217* pop bc ; restore
0B4FA8 E1     1218* pop hl ; restore
0B4FA9 C9     1219* ret
              1220* 
              1221* ; print DED'E'B floating point number in hex format
              1222* ; inputs: DED'E'B = floating point number
              1223* print_float_hex_alt:
0B4FAA C5     1224* push bc ; preserve
0B4FAB E5     1225* push hl ; preserve
0B4FAC EB     1226* ex de,hl
0B4FAD CD     1227* call printHex16
0B4FAE 4D 
0B4FAF 49 
0B4FB0 0B 
0B4FB1 EB     1228* ex de,hl
0B4FB2 3E     1229* ld a,'.'
0B4FB3 2E 
0B4FB4 5B     1230* rst.lil 10h
0B4FB5 D7 
0B4FB6 D9     1231* exx
0B4FB7 EB     1232* ex de,hl
0B4FB8 CD     1233* call printHex16
0B4FB9 4D 
0B4FBA 49 
0B4FBB 0B 
0B4FBC EB     1234* ex de,hl
0B4FBD D9     1235* exx
0B4FBE 3E     1236* ld a,'^'
0B4FBF 5E 
0B4FC0 5B     1237* rst.lil 10h
0B4FC1 D7 
0B4FC2 78     1238* ld a,b
0B4FC3 CD     1239* call printHex8
0B4FC4 53 
0B4FC5 49 
0B4FC6 0B 
0B4FC7 C1     1240* pop bc ; restore
0B4FC8 E1     1241* pop hl ; restore
0B4FC9 C9     1242* ret
              1243* 
              1244* print_floats_hex:
0B4FCA CD     1245* call print_float_hex_nor
0B4FCB 8E 
0B4FCC 4F 
0B4FCD 0B 
0B4FCE 3E     1246* ld a,' '
0B4FCF 20 
0B4FD0 5B     1247* rst.lil 10h
0B4FD1 D7 
0B4FD2 CD     1248* call print_float_hex_alt
0B4FD3 AA 
0B4FD4 4F 
0B4FD5 0B 
0B4FD6 C9     1249* ret
              1250* 
              1251* ; print a floating point number in decimal format
              1252* ; inputs: HL'H'L'C is the number to print
              1253* ; outputs: number printed to screen
              1254* ;          ACCS null-terminated string representation of the number
              1255* ; destroys: everything except ix
              1256* print_float_dec:
              1257* print_float_dec_nor:
0B4FD7 DD     1258* push ix             ; save the pointer to the parameters
0B4FD8 E5 
0B4FD9 11     1259* ld de,ACCS          ; point to the string accumulator
0B4FDA 00 
0B4FDB 53 
0B4FDC 0B 
0B4FDD DD     1260* ld ix,@G9-1         ; get the format code for the number
0B4FDE 21 
0B4FDF F0 
0B4FE0 4F 
0B4FE0 0B   
0B4FE2 CD     1261* call STR_FP ; convert the number to a string
0B4FE3 31 
0B4FE4 28 
0B4FE5 0B 
0B4FE6 21     1262* ld hl,ACCS ; point to the string accumulator
0B4FE7 00 
0B4FE8 53 
0B4FE9 0B 
0B4FEA CD     1263* call printString
0B4FEB 25 
0B4FEC 49 
0B4FED 0B 
0B4FEE DD     1264* pop ix              ; restore the pointer to the parameters
0B4FEF E1 
0B4FF0 C9     1265* ret
0B4FF1 09     1266* @G9:			DW    9
0B4FF2 00 
               0170 include "maths.inc"
              0001* ;------------------------------------------------------------------------
              0002* ; Scratch area for calculations
              0003* ;------------------------------------------------------------------------
0B4FF3 00     0004* scratch1:	dw24	0	;bit manipulation buffer 1
0B4FF4 00 
0B4FF5 00 
0B4FF6 00     0005* scratch2:	dw24	0	;bit manipulation buffer 2
0B4FF7 00 
0B4FF8 00 
              0006* 
              0007* ; absolute value of hlu
              0008* ; returns: abs(hlu), flags set according to the incoming sign of hlu:
              0009* ;         s1,z0,pv0,n1,c0 if hlu was negative
              0010* ;         s0,z1,pv0,n1,c0 if hlu was zero
              0011* ;         s0,z0,pv0,n1,c0 if hlu was positive
              0012* ; destroys: a
              0013* hlu_abs:
0B4FF9 19     0014* add hl,de
0B4FFA B7     0015* or a
0B4FFB ED     0016* sbc hl,de
0B4FFC 52 
0B4FFD FA     0017* jp m,@is_neg
0B4FFE 02 
0B4FFF 50 
0B5000 0B 
0B5001 C9     0018* ret         ; hlu is positive or zero so we're done
              0019* @is_neg:
0B5002 F5     0020* push af     ; otherwise, save current flags for return
0B5003 CD     0021* call neg_hlu ; negate hlu
0B5004 09 
0B5005 50 
0B5006 0B 
0B5007 F1     0022* pop af      ; get back flags
0B5008 C9     0023* ret
              0024* 
              0025* ; flip the sign of hlu
              0026* ; inputs: hlu
              0027* ; returns: 0-hlu, flags set appropriately for the result:
              0028* ;         s1,z0,pv0,n1,c1 if result is negative
              0029* ;         s0,z1,pv0,n1,c0 if result is zero
              0030* ;         s0,z0,pv0,n1,c1 if result is positive
              0031* ; destroys a
              0032* neg_hlu:
0B5009 D5     0033* push de     ; save de
0B500A EB     0034* ex de,hl    ; put hl into de
0B500B 21     0035* ld hl,0     ; clear hl
0B500C 00 
0B500D 00 
0B500E 00 
0B500F AF     0036* xor a       ; clear carry
0B5010 ED     0037* sbc hl,de   ; 0-hlu = -hlu
0B5011 52 
0B5012 D1     0038* pop de      ; get de back
0B5013 C9     0039* ret         ; easy peasy
              0040* 
              0041* ;------------------------------------------------------------------------
              0042* ; divide hlu by 2, inspired by above
              0043* ;------------------------------------------------------------------------
              0044* hlu_div2:
0B5014 22     0045* ld		(scratch1),hl
0B5015 F3 
0B5016 4F 
0B5017 0B 
0B5018 21     0046* ld		hl,scratch1+2
0B5019 F5 
0B501A 4F 
0B501B 0B 
0B501C CB     0047* rr		(hl)
0B501D 1E 
0B501E 2B     0048* dec		hl
0B501F CB     0049* rr		(hl)
0B5020 1E 
0B5021 2B     0050* dec		hl
0B5022 CB     0051* rr		(hl)
0B5023 1E 
0B5024 23     0052* inc		hl
0B5025 23     0053* inc		hl
0B5026 2A     0054* ld hl,(scratch1)
0B5027 F3 
0B5028 4F 
0B5029 0B 
0B502A C9     0055* ret
              0056* 
              0057* ; this is my little hack to divide by 16
              0058* hlu_div16:
0B502B AF     0059* xor a
0B502C 29     0060* add hl,hl
0B502D 17     0061* rla
0B502E 29     0062* add hl,hl
0B502F 17     0063* rla
0B5030 29     0064* add hl,hl
0B5031 17     0065* rla
0B5032 29     0066* add hl,hl
0B5033 17     0067* rla
0B5034 22     0068* ld (@scratch),hl
0B5035 41 
0B5036 50 
0B5037 0B 
0B5038 32     0069* ld (@scratch+3),a
0B5039 44 
0B503A 50 
0B503B 0B 
0B503C 2A     0070* ld hl,(@scratch+1)
0B503D 42 
0B503E 50 
0B503F 0B 
0B5040 C9     0071* ret
              0072* @scratch: ds 4
              0073* 
              0074* ; hlu signed division by 256
              0075* ; returns: hlu / 256
              0076* ; destroys: af
              0077* hlu_sdiv256:
0B5045 AF     0078* xor a ; assume hl is positive
0B5046 22     0079* ld (@buffer),hl
0B5047 5C 
0B5048 50 
0B5049 0B 
              0080* sign_hlu
0B504A 19    0001*M add hl,de
0B504B B7    0002*M or a
0B504C ED    0003*M sbc hl,de
0B504D 52 
0B504E F2     0081* jp p,@hl_pos
0B504F 53 
0B5050 50 
0B5051 0B 
0B5052 3D     0082* dec a
              0083* @hl_pos:
0B5053 32     0084* ld (@buffer+3),a
0B5054 5F 
0B5055 50 
0B5056 0B 
0B5057 2A     0085* ld hl,(@buffer+1)
0B5058 5D 
0B5059 50 
0B505A 0B 
0B505B C9     0086* ret
              0087* @buffer: ds 4
              0088* 
              0089* ; hlu 1 byte right shift, unsigned
              0090* ; returns: hlu / 256, fractional portion in a
              0091* ; destroys: af
              0092* hlu_udiv256:
0B5060 AF     0093* xor a
0B5061 32     0094* ld (@buffer+3),a
0B5062 72 
0B5063 50 
0B5064 0B 
0B5065 7D     0095* ld a,l ; save the fractional portion
0B5066 22     0096* ld (@buffer),hl
0B5067 6F 
0B5068 50 
0B5069 0B 
0B506A 2A     0097* ld hl,(@buffer+1)
0B506B 70 
0B506C 50 
0B506D 0B 
0B506E C9     0098* ret
              0099* @buffer: ds 4
              0100* 
              0101* MACRO hlu_mul256
              0102* add hl,hl ; * 2
              0103* add hl,hl ; * 4
              0104* add hl,hl ; * 8
              0105* add hl,hl ; * 16
              0106* add hl,hl ; * 32
              0107* add hl,hl ; * 64
              0108* add hl,hl ; * 128
              0109* add hl,hl ; * 256
              0110* ENDMACRO
              0111* 
              0112* ; compute the modulo of hlu by deu
              0113* ; outputs: hlu = hlu % deu
              0114* ; destroys: f, hl
              0115* hlu_mod:
0B5073 B7     0116* or a ; clear carry
              0117* @loop:
0B5074 ED     0118* sbc hl,de
0B5075 52 
0B5076 DA     0119* jp c, @end
0B5077 7E 
0B5078 50 
0B5079 0B 
0B507A C3     0120* jp @loop
0B507B 74 
0B507C 50 
0B507D 0B 
              0121* @end:
0B507E 19     0122* add hl,de
0B507F C9     0123* ret
              0124* 
              0125* 
0B5080 00     0126* add_bcd_arg1: db #00,#00,#00,#00
0B5081 00 
0B5082 00 
0B5083 00 
0B5084 00     0127* add_bcd_arg2: db #00,#00,#00,#00
0B5085 00 
0B5086 00 
0B5087 00 
              0128* 
              0129* ; set bcd values in a scratch memory address from registers bcde
              0130* ; input: hl; scratch address,bcde; 8-place bcd number
              0131* ; destroys ; hl
              0132* set_bcd:
0B5088 73     0133* ld (hl),e
0B5089 23     0134* inc hl
0B508A 72     0135* ld (hl),d
0B508B 23     0136* inc hl
0B508C 71     0137* ld (hl),c
0B508D 23     0138* inc hl
0B508E 70     0139* ld (hl),b
0B508F C9     0140* ret
              0141* 
              0142* ; load bcd values from a scratch memory address to bcde
              0143* ; input: hl; scratch address
              0144* ; output: bcde; 8-place bcd number
              0145* ; destroys: hl
              0146* get_bcd:
0B5090 5E     0147* ld e,(hl)
0B5091 23     0148* inc hl
0B5092 56     0149* ld d,(hl)
0B5093 23     0150* inc hl
0B5094 4E     0151* ld c,(hl)
0B5095 23     0152* inc hl
0B5096 46     0153* ld b,(hl)
0B5097 C9     0154* ret
              0155* 
              0156* ; BCD addition
              0157* ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
              0158* ;       a is the number of bytes holding each number (number of places/2)
              0159* ; outputs: (hl) + (de) --> (hl)
              0160* ; destroys: a,b,de,hl
              0161* add_bcd:
0B5098 47     0162* ld b,a ; loop counter
0B5099 AF     0163* xor a ; reset a, clear carry flag
              0164* adcec:
0B509A 1A     0165* ld a,(de) ; addend to acc
0B509B 8E     0166* adc a,(hl) ; add (hl) to acc
0B509C 27     0167* daa ; adjust result to bcd
0B509D 77     0168* ld (hl),a ; store result
0B509E 23     0169* inc hl ; advance memory pointers
0B509F 13     0170* inc de
0B50A0 10     0171* djnz adcec ; loop until b == 0
0B50A1 F8 
0B50A2 C9     0172* ret
              0173* 
              0174* ; BCD subtraction
              0175* ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
              0176* ;       a is the number of bytes holding each number (number of places/2)
              0177* ; outputs: (hl) - (de) --> (hl)
              0178* ; destroys: a,b,de,hl
              0179* sub_bcd:
0B50A3 47     0180* ld b,a ; loop counter
0B50A4 AF     0181* xor a ; reset a,clear carry flag
              0182* subdec:
0B50A5 1A     0183* ld a,(de) ; subtrahend to acc
0B50A6 9E     0184* sbc a,(hl) ; subtract (hl) from acc
0B50A7 27     0185* daa ; adjust result to bcd
0B50A8 77     0186* ld (hl),a ; store result
0B50A9 23     0187* inc hl ; advance memory pointers
0B50AA 13     0188* inc de
0B50AB 10     0189* djnz subdec ; loop until b == 0
0B50AC F8 
0B50AD C9     0190* ret
              0191* 
              0192* ; http://www.z80.info/pseudo-random.txt
              0193* rand_8:
0B50AE C5     0194* push bc
0B50AF 3A     0195* ld a,(r_seed)
0B50B0 C2 
0B50B1 50 
0B50B2 0B 
0B50B3 4F     0196* ld c,a
              0197* 
0B50B4 0F     0198* rrca ; multiply by 32
0B50B5 0F     0199* rrca
0B50B6 0F     0200* rrca
0B50B7 EE     0201* xor 0x1f
0B50B8 1F 
              0202* 
0B50B9 81     0203* add a,c
0B50BA DE     0204* sbc a,255 ; carry
0B50BB FF 
              0205* 
0B50BC 32     0206* ld (r_seed),a
0B50BD C2 
0B50BE 50 
0B50BF 0B 
0B50C0 C1     0207* pop bc
0B50C1 C9     0208* ret
0B50C2 50     0209* r_seed: defb $50
               0171 include "mathfpp.inc"
              0001* ; integer operations
              0002* iand:	EQU 0x00	; AND (INTEGER)
              0003* ibdiv:	EQU 0x01	; DIV
              0004* ieor:	EQU 0x02	; EOR
              0005* imod:	EQU 0x03	; MOD
              0006* ior:	EQU 0x04	; OR
              0007* ile:	EQU 0x05	; <=
              0008* ine:	EQU 0x06	; <>
              0009* ige:	EQU 0x07	; >=
              0010* ilt:	EQU 0x08	; <
              0011* ieq:	EQU 0x09	; =
              0012* imul:	EQU 0x0A	; *
              0013* iadd:	EQU 0x0B	; +
              0014* igt:	EQU 0x0C	; >
              0015* isub:	EQU 0x0D	; -
              0016* ipow:	EQU 0x0E	; ^
              0017* idiv:	EQU 0x0F	; /
              0018* ;
              0019* ; floating point functions
              0020* absv:	EQU 0x00	; ABS
              0021* acs:	EQU 0x01	; ACS
              0022* asn:	EQU 0x02	; ASN
              0023* atn:	EQU 0x03	; ATN
              0024* cos:	EQU 0x04	; COS
              0025* deg:	EQU 0x05	; DEG
              0026* exp:	EQU 0x06	; EXP
              0027* int_:	EQU 0x07	; INT
              0028* ln:	EQU 0x08	; LN
              0029* log:	EQU 0x09	; LOG
              0030* notk:	EQU 0x0A	; NOT
              0031* rad:	EQU 0x0B	; RAD
              0032* sgn:	EQU 0x0C	; SGN
              0033* sin:	EQU 0x0D	; SIN
              0034* sqr:	EQU 0x0E	; SQR
              0035* tan:	EQU 0x0F	; TAN
              0036* zero:	EQU 0x10	; ZERO
              0037* fone:	EQU 0x11	; FONE
              0038* true:	EQU 0x12	; TRUE
              0039* pi:	EQU 0x13	; PI
              0040* val:	EQU 0x14	; VAL
              0041* str:	EQU 0x15	; STR$
              0042* sfix:	EQU 0x16	; FIX
              0043* sfloat:	EQU 0x17	; FLOAT
              0044* ftest:	EQU 0x18	; TEST
              0045* fcomp:	EQU 0x19	; COMPARE
              0046* ;
              0047* ; floating point operations
              0048* fand:	EQU 0x00	; AND (FLOATING-POINT)
              0049* fbdiv:	EQU 0x01	; DIV
              0050* feor:	EQU 0x02	; EOR
              0051* fmod:	EQU 0x03	; MOD
              0052* ffor:	EQU 0x04	; OR
              0053* fle:	EQU 0x05	; <=
              0054* fne:	EQU 0x06	; <>
              0055* fge:	EQU 0x07	; >=
              0056* flt:	EQU 0x08	; <
              0057* feq:	EQU 0x09	; =
              0058* fmul:	EQU 0x0A	; *
              0059* fadd:	EQU 0x0B	; +
              0060* fgt:	EQU 0x0C	; >
              0061* fsub:	EQU 0x0D	; -
              0062* fpow:	EQU 0x0E	; ^
              0063* fdiv:	EQU 0x0F	; /
               0172 
               0173 ; APPLICATION INCLUDES
               0174 
               0175 ; Storage for the argv array pointers
               0176 min_args: equ 2
               0177 argv_ptrs_max:		EQU	16			; Maximum number of arguments allowed in argv
0B50C3 00      0178 argv_ptrs:		    BLKP	argv_ptrs_max, 0
0B50C4 00 
0B50C5 00 
0B50C6 00 
0B50C6 00   
0B50C7 00 
0B50C8 00 
0B50C9 00 
0B50C9 00   
0B50CA 00 
0B50CB 00 
0B50CC 00 
0B50CC 00   
0B50CD 00 
0B50CE 00 
0B50CF 00 
0B50CF 00   
0B50D0 00 
0B50D1 00 
0B50D2 00 
0B50D2 00   
0B50D3 00 
0B50D4 00 
0B50D5 00 
0B50D5 00   
0B50D6 00 
0B50D7 00 
0B50D8 00 
0B50D8 00   
0B50D9 00 
0B50DA 00 
0B50DB 00 
0B50DB 00   
0B50DC 00 
0B50DD 00 
0B50DE 00 
0B50DE 00   
0B50DF 00 
0B50E0 00 
0B50E1 00 
0B50E1 00   
0B50E2 00 
0B50E3 00 
0B50E4 00 
0B50E4 00   
0B50E5 00 
0B50E6 00 
0B50E7 00 
               0179 _sps:			DS	3			; Storage for the stack pointer (used by BASIC)
               0180 
               0181 ; Storage for the arguments, ORDER MATTERS
               0182 arg1: ds 5
               0183 arg2: ds 5
               0184 
               0185 ; GLOBAL MESSAGE STRINGS
0B5100 55      0186 str_usage: ASCIZ "Usage: scratch <args>\r\n"
0B5101 73 
0B5102 61 
0B5103 67 
0B5103 65   
0B5104 3A 
0B5105 20 
0B5106 73 
0B5106 63   
0B5107 72 
0B5108 61 
0B5109 74 
0B5109 63   
0B510A 68 
0B510B 20 
0B510C 3C 
0B510C 61   
0B510D 72 
0B510E 67 
0B510F 73 
0B510F 3E   
0B5110 0D 
0B5111 0A 
0B5112 00 
0B5118 45      0187 str_error: ASCIZ "Error!\r\n"
0B5119 72 
0B511A 72 
0B511B 6F 
0B511B 72   
0B511C 21 
0B511D 0D 
0B511E 0A 
0B511E 00   
0B5121 53      0188 str_success: ASCIZ "Success!\r\n"
0B5122 75 
0B5123 63 
0B5124 63 
0B5124 65   
0B5125 73 
0B5126 73 
0B5127 21 
0B5127 0D   
0B5128 0A 
0B5129 00 
               0189 
               0190 ; ========= MAIN LOOP =========
               0191 ; The main routine
               0192 ; IXU: argv - pointer to array of parameters
               0193 ;   C: argc - number of parameters
               0194 ; Returns:
               0195 ;  HL: Error code, or 0 if OK
               0196 
               0197 _main_init:
0B512C 79      0198 ld a,c              ; how many arguments?
0B512D FE      0199 cp min_args         ; not enough?
0B512E 02 
0B512F 30      0200 jr nc,main          ; if enough, go to main loop
0B5130 23 
0B5131 21      0201 ld hl,str_usage     ; if not enough, print usage
0B5132 00 
0B5133 51 
0B5134 0B 
0B5135 CD      0202 call printString
0B5136 25 
0B5137 49 
0B5138 0B 
               0203 ; fall through to _main_end_error
               0204 
               0205 _main_end_error:
0B5139 21      0206 ld hl,str_error     ; print error message
0B513A 18 
0B513B 51 
0B513C 0B 
0B513D CD      0207 call printString
0B513E 25 
0B513F 49 
0B5140 0B 
0B5141 21      0208 ld hl,19            ; return error code 19
0B5142 13 
0B5143 00 
0B5144 00 
0B5145 C9      0209 ret
               0210 
               0211 ; begin BASIC-specific end code
               0212 ; This bit of code is called from STAR_BYE and returns us safely to MOS
0B5146 ED      0213 _end:			LD		SP, (_sps)		; Restore the stack pointer
0B5147 7B 
0B5148 F3 
0B5149 50 
0B5149 0B   
               0214 ; fall through to _main_end_ok
               0215 ; end BASIC-specific end code
               0216 
               0217 _main_end_ok:
               0218 ; ld hl,str_success   ; print success message
               0219 ; call printString
0B514B CD      0220 call printNewLine
0B514C 3A 
0B514D 49 
0B514E 0B 
0B514F 21      0221 ld hl,0             ; return 0 for success
0B5150 00 
0B5151 00 
0B5152 00 
0B5153 C9      0222 ret
               0223 
               0224 ; ========= BEGIN CUSTOM MAIN LOOP =========
               0225 main:
0B5154 DD      0226 ld hl,(ix)          ; get the first argument in case hl doesn't land here with it
0B5155 27 
0B5156 00 
               0227 
0B5157 CD      0228 call store_arg1_float
0B5158 AA 
0B5159 51 
0B515A 0B 
               0229 ; call print_float_hex_nor
0B515B CD      0230 call print_float_dec
0B515C D7 
0B515D 4F 
0B515E 0B 
               0231 ; call printHexUIX ; DEBUG
               0232 
0B515F CD      0233 call printInline
0B5160 1E 
0B5161 49 
0B5162 0B 
0B5163 20      0234 asciz " * "
0B5164 2A 
0B5165 20 
0B5166 00 
               0235 
0B5167 CD      0236 call store_arg2_float
0B5168 C2 
0B5169 51 
0B516A 0B 
               0237 ; call print_float_hex_nor
0B516B CD      0238 call print_float_dec
0B516C D7 
0B516D 4F 
0B516E 0B 
               0239 
0B516F CD      0240 call printInline
0B5170 1E 
0B5171 49 
0B5172 0B 
0B5173 20      0241 asciz " = "
0B5174 3D 
0B5175 20 
0B5176 00 
               0242 
               0243 ; call printHexUIX ; DEBUG
               0244 
0B5177 DD      0245 ld ix,arg1
0B5178 21 
0B5179 F6 
0B517A 50 
0B517A 0B   
0B517C CD      0246 call fetch_float_nor
0B517D 58 
0B517E 4F 
0B517F 0B 
               0247 
0B5180 DD      0248 ld ix,arg2
0B5181 21 
0B5182 FB 
0B5183 50 
0B5183 0B   
0B5185 CD      0249 call fetch_float_alt
0B5186 7C 
0B5187 4F 
0B5188 0B 
               0250 
               0251 ; call printNewLine
               0252 ; call dumpRegistersHexAll
               0253 
               0254 ; call FMUL ; HLH'L'C * DED'E'B --> HLH'L'C
0B5189 3E      0255 ld a,fmul
0B518A 0A 
0B518B CD      0256 call FPP
0B518C 32 
0B518D 20 
0B518E 0B 
               0257 ; call print_floats_hex
0B518F CD      0258 call print_float_dec
0B5190 D7 
0B5191 4F 
0B5192 0B 
               0259 
               0260 ; ; USING THE STACK:
               0261 ;     call get_arg_float
               0262 ;     call PUSH5
               0263 
               0264 ;     call get_arg_float
               0265 ;     call POP5
               0266 ;     call SWAP
               0267 
               0268 ;     call print_floats_hex
               0269 
               0270 ;     ld a,fmul
               0271 ;     call FPP
               0272 ;     call print_float_dec
               0273 
0B5193 CD      0274 call printNewLine
0B5194 3A 
0B5195 49 
0B5196 0B 
               0275 
0B5197 C3      0276 jp _main_end_ok     ; return success
0B5198 4B 
0B5199 51 
0B519A 0B 
               0277 
               0278 ; ========== HELPER FUNCTIONS ==========
               0279 ;
               0280 ; get the next argument after ix as a floating point number
               0281 ; inputs: ix = pointer to the argument string
               0282 ; outputs: HLH'L'C = floating point number, ix points to the next argument
               0283 ; destroys: everything except iy, including prime registers
               0284 get_arg_float:
0B519B ED      0285 lea ix,ix+3 ; point to the next argument
0B519C 32 
0B519D 03 
0B519E DD      0286 push ix ; preserve
0B519F E5 
0B51A0 DD      0287 ld ix,(ix)  ; point to argument string
0B51A1 37 
0B51A2 00 
0B51A3 CD      0288 call VAL_FP ; convert the string to a float
0B51A4 A9 
0B51A5 24 
0B51A6 0B 
0B51A7 DD      0289 pop ix ; restore
0B51A8 E1 
0B51A9 C9      0290 ret ; return with the value in HLH'L'C
               0291 
               0292 ; get the next argument after ix as a floating point number and store it in ag1 buffer
               0293 ; inputs: ix = pointer to the argument string
               0294 ; outputs: HLH'L'C = floating point number, ix points to the next argument
               0295 ; destroys: everything except iy, including prime registers
               0296 store_arg1_float:
0B51AA ED      0297 lea ix,ix+3 ; point to the next argument
0B51AB 32 
0B51AC 03 
0B51AD DD      0298 push ix ; preserve
0B51AE E5 
0B51AF DD      0299 ld ix,(ix)  ; point to argument string
0B51B0 37 
0B51B1 00 
0B51B2 CD      0300 call VAL_FP ; convert the string to a float
0B51B3 A9 
0B51B4 24 
0B51B5 0B 
0B51B6 DD      0301 ld ix,arg1 ; point to the buffer
0B51B7 21 
0B51B8 F6 
0B51B9 50 
0B51B9 0B   
0B51BB CD      0302 call store_float_nor ; save the float in arg1 buffer
0B51BC 46 
0B51BD 4F 
0B51BE 0B 
0B51BF DD      0303 pop ix ; restore
0B51C0 E1 
0B51C1 C9      0304 ret ; return with the value in HLH'L'C
               0305 
               0306 ; same as above, but store the float in arg2 buffer
               0307 store_arg2_float:
0B51C2 ED      0308 lea ix,ix+3 ; point to the next argument
0B51C3 32 
0B51C4 03 
0B51C5 DD      0309 push ix ; preserve
0B51C6 E5 
0B51C7 DD      0310 ld ix,(ix)  ; point to argument string
0B51C8 37 
0B51C9 00 
0B51CA CD      0311 call VAL_FP ; convert the string to a float
0B51CB A9 
0B51CC 24 
0B51CD 0B 
0B51CE DD      0312 ld ix,arg2 ; point to the buffer
0B51CF 21 
0B51D0 FB 
0B51D1 50 
0B51D1 0B   
0B51D3 CD      0313 call store_float_nor ; save the float in arg2 buffer
0B51D4 46 
0B51D5 4F 
0B51D6 0B 
0B51D7 DD      0314 pop ix ; restore
0B51D8 E1 
0B51D9 C9      0315 ret ; return with the value in HLH'L'C
               0316 ;
               0317 ; get the next argument after ix as a string
               0318 ; inputs: ix = pointer to the argument string
               0319 ; outputs: HL = pointer to the argument string, ix points to the next argument
               0320 ; destroys: a, h, l, f
               0321 get_arg_text:
0B51DA ED      0322 lea ix,ix+3 ; point to the next argument
0B51DB 32 
0B51DC 03 
0B51DD DD      0323 ld hl,(ix)  ; get the argument string
0B51DE 27 
0B51DF 00 
0B51E0 C9      0324 ret
               0325 ;
               0326 ; match the next argument after ix to the dispatch table at iy
               0327 ;   - arguments and dispatch entries are zero-terminated, case-sensitive strings
               0328 ;   - final entry of dispatch table must be a 3-byte zero or bad things will happen
               0329 ; returns: NO MATCH: iy=dispatch list terminator a=1 and zero flag reset
               0330 ;          ON MATCH: iy=dispatch address, a=0 and zero flag set
               0331 ; destroys: a, hl, de, ix, iy, flags
               0332 match_next:
0B51E1 ED      0333 lea ix,ix+3         ; point to the next argument
0B51E2 32 
0B51E3 03 
               0334 @loop:
0B51E4 FD      0335 ld hl,(iy)          ; pointer argument dispatch record
0B51E5 27 
0B51E6 00 
               0336 sign_hlu            ; check for list terminator
0B51E7 19     0001M add hl,de
0B51E8 B7     0002M or a
0B51E9 ED     0003M sbc hl,de
0B51EA 52 
0B51EB CA      0337 jp z,@no_match      ; if a=0, return error
0B51EC 03 
0B51ED 52 
0B51EE 0B 
0B51EF 23      0338 inc hl              ; skip over jp instruction
0B51F0 23      0339 inc hl
0B51F1 DD      0340 ld de,(ix)          ; pointer to the argument string
0B51F2 17 
0B51F3 00 
0B51F4 CD      0341 call str_equal      ; compare the argument to the dispatch table entry
0B51F5 1A 
0B51F6 52 
0B51F7 0B 
0B51F8 CA      0342 jp z,@match         ; if equal, return success
0B51F9 05 
0B51FA 52 
0B51FB 0B 
0B51FC ED      0343 lea iy,iy+3         ; if not equal, bump iy to next dispatch table entry
0B51FD 33 
0B51FE 03 
0B51FF C3      0344 jp @loop            ; and loop
0B5200 E4 
0B5201 51 
0B5202 0B 
               0345 @no_match:
0B5203 3C      0346 inc a               ; no match so return a=1 and zero flag reset
0B5204 C9      0347 ret
               0348 @match:
0B5205 FD      0349 ld iy,(iy)          ; get the function pointer
0B5206 37 
0B5207 00 
0B5208 C9      0350 ret                 ; return a=0 and zero flag set
               0351 
               0352 ; same as match_next, but prints the parameter if a match is found
               0353 match_next_and_print:
0B5209 CD      0354 call match_next
0B520A E1 
0B520B 51 
0B520C 0B 
0B520D C0      0355 ret nz ; no match found
0B520E ED      0356 lea ix,ix-3
0B520F 32 
0B5210 FD 
0B5211 CD      0357 call get_arg_text ; hl points to the operator string
0B5212 DA 
0B5213 51 
0B5214 0B 
0B5215 CD      0358 call print_param
0B5216 25 
0B5217 52 
0B5218 0B 
0B5219 C9      0359 ret
               0360 
               0361 ; compare two zero-terminated strings for equality, case-sensitive
               0362 ; hl: pointer to first string, de: pointer to second string
               0363 ; returns: z if equal, nz if not equal
               0364 ; destroys: a, hl, de
               0365 str_equal:
0B521A 1A      0366 ld a,(de)           ; get the first character
0B521B BE      0367 cp (hl)             ; compare to the second character
0B521C C0      0368 ret nz              ; if not equal, return
0B521D B7      0369 or a
0B521E C8      0370 ret z               ; if equal and zero, return
0B521F 23      0371 inc hl              ; next character
0B5220 13      0372 inc de
0B5221 C3      0373 jp str_equal        ; loop until end of string
0B5222 1A 
0B5223 52 
0B5224 0B 
               0374 
               0375 ; print the parameter string pointed to by ix
               0376 ; destroys: a, hl
               0377 print_param:
0B5225 DD      0378 ld hl,(ix)          ; get the parameter pointer
0B5226 27 
0B5227 00 
0B5228 CD      0379 call printString    ; print the parameter string
0B5229 25 
0B522A 49 
0B522B 0B 
0B522C 3E      0380 ld a,' '            ; print a space separator
0B522D 20 
0B522E 5B      0381 rst.lil $10
0B522F D7 
0B5230 C9      0382 ret
               0383 
               0384 ; print the parameters
               0385 ; inputs: b = number of parameters, ix = pointer to the parameters
               0386 ; destroys: a, hl, bc
               0387 print_params:
0B5231 41      0388 ld b,c              ; loop counter = number of parameters
0B5232 DD      0389 push ix             ; save the pointer to the parameters
0B5233 E5 
               0390 @loop:
0B5234 C5      0391 push bc             ; save the loop counter
0B5235 CD      0392 call print_param    ; print the parameter
0B5236 25 
0B5237 52 
0B5238 0B 
0B5239 ED      0393 lea ix,ix+3         ; next parameter pointer
0B523A 32 
0B523B 03 
0B523C C1      0394 pop bc              ; get back the loop counter
0B523D 10      0395 djnz @loop          ; loop until done
0B523E F5 
0B523F DD      0396 pop ix              ; restore the pointer to the parameters
0B5240 E1 
0B5241 C9      0397 ret
               0398 
               0399 debug_print:
0B5242 CD      0400 call printNewLine
0B5243 3A 
0B5244 49 
0B5245 0B 
0B5246 CD      0401 call dumpRegistersHexAll
0B5247 7A 
0B5248 4D 
0B5249 0B 
0B524A CD      0402 call printNewLine
0B524B 3A 
0B524C 49 
0B524D 0B 
0B524E C9      0403 ret
               0404 
               0405 include "basic/ram.asm" ; must be last so that RAM has room for BASIC operations
              0001* ;
              0002* ; Title:	BBC Basic Interpreter - Z80 version
              0003* ;		RAM Module for BBC Basic Interpreter
              0004* ;		For use with Version 2.0 of BBC BASIC
              0005* ;		Standard CP/M Distribution Version
              0006* ; Author:	(C) Copyright  R.T.Russell 31-12-1983
              0007* ; Modified By:	Dean Belfield
              0008* ; Created:	12/05/2023
              0009* ; Last Updated:	26/06/2023
              0010* ;
              0011* ; Modinfo:
              0012* ; 06/06/2023:	Modified to run in ADL mode
              0013* ; 26/06/2023:	Added temporary stores R0 and R1
              0014* 
              0015* ; .ASSUME	ADL = 1
              0016* 
              0017* ; DEFINE	LORAM, SPACE = ROM
              0018* ; SEGMENT LORAM
              0019* 
              0020* ; XDEF	ACCS
              0021* ; XDEF	BUFFER
              0022* ; XDEF	STAVAR
              0023* ; XDEF	DYNVAR
              0024* ; XDEF	FNPTR
              0025* ; XDEF	PROPTR
              0026* ; XDEF	PAGE_
              0027* ; XDEF	TOP
              0028* ; XDEF	LOMEM
              0029* ; XDEF 	FREE
              0030* ; XDEF	HIMEM
              0031* ; XDEF	LINENO
              0032* ; XDEF	TRACEN
              0033* ; XDEF	AUTONO
              0034* ; XDEF	ERRTRP
              0035* ; XDEF	ERRTXT
              0036* ; XDEF	DATPTR
              0037* ; XDEF	ERL
              0038* ; XDEF	ERRLIN
              0039* ; XDEF	RANDOM
              0040* ; XDEF	COUNT
              0041* ; XDEF	WIDTH
              0042* ; XDEF	ERR
              0043* ; XDEF	LISTON
              0044* ; XDEF	INCREM
              0045* 
              0046* ; XDEF	FLAGS
              0047* ; XDEF	OSWRCHPT
              0048* ; XDEF	OSWRCHCH
              0049* ; XDEF	OSWRCHFH
              0050* ; XDEF	KEYDOWN
              0051* ; XDEF	KEYASCII
              0052* ; XDEF	KEYCOUNT
              0053* 
              0054* ; XDEF	R0
              0055* ; XDEF	R1
              0056* 
              0057* ; XDEF	RAM_START
              0058* ; XDEF	RAM_END
              0059* ; XDEF	USER
              0060* 
              0061* end_binary: ;  for assemble.py to know where to truncate the binary file
0B524F FF     0062* ALIGN 		256		; ACCS, BUFFER & STAVAR must be on page boundaries
0B5250 FF 
0B5251 FF 
0B5252 FF 
0B5252 FF   
0B5253 FF 
0B5254 FF 
0B5255 FF 
0B5255 FF   
0B5256 FF 
0B5257 FF 
0B5258 FF 
0B5258 FF   
0B5259 FF 
0B525A FF 
0B525B FF 
0B525B FF   
0B525C FF 
0B525D FF 
0B525E FF 
0B525E FF   
0B525F FF 
0B5260 FF 
0B5261 FF 
0B5261 FF   
0B5262 FF 
0B5263 FF 
0B5264 FF 
0B5264 FF   
0B5265 FF 
0B5266 FF 
0B5267 FF 
0B5267 FF   
0B5268 FF 
0B5269 FF 
0B526A FF 
0B526A FF   
0B526B FF 
0B526C FF 
0B526D FF 
0B526D FF   
0B526E FF 
0B526F FF 
0B5270 FF 
0B5270 FF   
0B5271 FF 
0B5272 FF 
0B5273 FF 
0B5273 FF   
0B5274 FF 
0B5275 FF 
0B5276 FF 
0B5276 FF   
0B5277 FF 
0B5278 FF 
0B5279 FF 
0B5279 FF   
0B527A FF 
0B527B FF 
0B527C FF 
0B527C FF   
0B527D FF 
0B527E FF 
0B527F FF 
0B527F FF   
0B5280 FF 
0B5281 FF 
0B5282 FF 
0B5282 FF   
0B5283 FF 
0B5284 FF 
0B5285 FF 
0B5285 FF   
0B5286 FF 
0B5287 FF 
0B5288 FF 
0B5288 FF   
0B5289 FF 
0B528A FF 
0B528B FF 
0B528B FF   
0B528C FF 
0B528D FF 
0B528E FF 
0B528E FF   
0B528F FF 
0B5290 FF 
0B5291 FF 
0B5291 FF   
0B5292 FF 
0B5293 FF 
0B5294 FF 
0B5294 FF   
0B5295 FF 
0B5296 FF 
0B5297 FF 
0B5297 FF   
0B5298 FF 
0B5299 FF 
0B529A FF 
0B529A FF   
0B529B FF 
0B529C FF 
0B529D FF 
0B529D FF   
0B529E FF 
0B529F FF 
0B52A0 FF 
0B52A0 FF   
0B52A1 FF 
0B52A2 FF 
0B52A3 FF 
0B52A3 FF   
0B52A4 FF 
0B52A5 FF 
0B52A6 FF 
0B52A6 FF   
0B52A7 FF 
0B52A8 FF 
0B52A9 FF 
0B52A9 FF   
0B52AA FF 
0B52AB FF 
0B52AC FF 
0B52AC FF   
0B52AD FF 
0B52AE FF 
0B52AF FF 
0B52AF FF   
0B52B0 FF 
0B52B1 FF 
0B52B2 FF 
0B52B2 FF   
0B52B3 FF 
0B52B4 FF 
0B52B5 FF 
0B52B5 FF   
0B52B6 FF 
0B52B7 FF 
0B52B8 FF 
0B52B8 FF   
0B52B9 FF 
0B52BA FF 
0B52BB FF 
0B52BB FF   
0B52BC FF 
0B52BD FF 
0B52BE FF 
0B52BE FF   
0B52BF FF 
0B52C0 FF 
0B52C1 FF 
0B52C1 FF   
0B52C2 FF 
0B52C3 FF 
0B52C4 FF 
0B52C4 FF   
0B52C5 FF 
0B52C6 FF 
0B52C7 FF 
0B52C7 FF   
0B52C8 FF 
0B52C9 FF 
0B52CA FF 
0B52CA FF   
0B52CB FF 
0B52CC FF 
0B52CD FF 
0B52CD FF   
0B52CE FF 
0B52CF FF 
0B52D0 FF 
0B52D0 FF   
0B52D1 FF 
0B52D2 FF 
0B52D3 FF 
0B52D3 FF   
              0063* RAM_START:
              0064* ;
0B5300 00     0065* ACCS:           BLKB    256,0             ; String Accumulator
0B5301 00 
0B5302 00 
0B5303 00 
0B5303 00   
0B5304 00 
0B5305 00 
0B5306 00 
0B5306 00   
0B5307 00 
0B5308 00 
0B5309 00 
0B5309 00   
0B530A 00 
0B530B 00 
0B530C 00 
0B530C 00   
0B530D 00 
0B530E 00 
0B530F 00 
0B530F 00   
0B5310 00 
0B5311 00 
0B5312 00 
0B5312 00   
0B5313 00 
0B5314 00 
0B5315 00 
0B5315 00   
0B5316 00 
0B5317 00 
0B5318 00 
0B5318 00   
0B5319 00 
0B531A 00 
0B531B 00 
0B531B 00   
0B531C 00 
0B531D 00 
0B531E 00 
0B531E 00   
0B531F 00 
0B5320 00 
0B5321 00 
0B5321 00   
0B5322 00 
0B5323 00 
0B5324 00 
0B5324 00   
0B5325 00 
0B5326 00 
0B5327 00 
0B5327 00   
0B5328 00 
0B5329 00 
0B532A 00 
0B532A 00   
0B532B 00 
0B532C 00 
0B532D 00 
0B532D 00   
0B532E 00 
0B532F 00 
0B5330 00 
0B5330 00   
0B5331 00 
0B5332 00 
0B5333 00 
0B5333 00   
0B5334 00 
0B5335 00 
0B5336 00 
0B5336 00   
0B5337 00 
0B5338 00 
0B5339 00 
0B5339 00   
0B533A 00 
0B533B 00 
0B533C 00 
0B533C 00   
0B533D 00 
0B533E 00 
0B533F 00 
0B533F 00   
0B5340 00 
0B5341 00 
0B5342 00 
0B5342 00   
0B5343 00 
0B5344 00 
0B5345 00 
0B5345 00   
0B5346 00 
0B5347 00 
0B5348 00 
0B5348 00   
0B5349 00 
0B534A 00 
0B534B 00 
0B534B 00   
0B534C 00 
0B534D 00 
0B534E 00 
0B534E 00   
0B534F 00 
0B5350 00 
0B5351 00 
0B5351 00   
0B5352 00 
0B5353 00 
0B5354 00 
0B5354 00   
0B5355 00 
0B5356 00 
0B5357 00 
0B5357 00   
0B5358 00 
0B5359 00 
0B535A 00 
0B535A 00   
0B535B 00 
0B535C 00 
0B535D 00 
0B535D 00   
0B535E 00 
0B535F 00 
0B5360 00 
0B5360 00   
0B5361 00 
0B5362 00 
0B5363 00 
0B5363 00   
0B5364 00 
0B5365 00 
0B5366 00 
0B5366 00   
0B5367 00 
0B5368 00 
0B5369 00 
0B5369 00   
0B536A 00 
0B536B 00 
0B536C 00 
0B536C 00   
0B536D 00 
0B536E 00 
0B536F 00 
0B536F 00   
0B5370 00 
0B5371 00 
0B5372 00 
0B5372 00   
0B5373 00 
0B5374 00 
0B5375 00 
0B5375 00   
0B5376 00 
0B5377 00 
0B5378 00 
0B5378 00   
0B5379 00 
0B537A 00 
0B537B 00 
0B537B 00   
0B537C 00 
0B537D 00 
0B537E 00 
0B537E 00   
0B537F 00 
0B5380 00 
0B5381 00 
0B5381 00   
0B5382 00 
0B5383 00 
0B5384 00 
0B5384 00   
0B5385 00 
0B5386 00 
0B5387 00 
0B5387 00   
0B5388 00 
0B5389 00 
0B538A 00 
0B538A 00   
0B538B 00 
0B538C 00 
0B538D 00 
0B538D 00   
0B538E 00 
0B538F 00 
0B5390 00 
0B5390 00   
0B5391 00 
0B5392 00 
0B5393 00 
0B5393 00   
0B5394 00 
0B5395 00 
0B5396 00 
0B5396 00   
0B5397 00 
0B5398 00 
0B5399 00 
0B5399 00   
0B539A 00 
0B539B 00 
0B539C 00 
0B539C 00   
0B539D 00 
0B539E 00 
0B539F 00 
0B539F 00   
0B53A0 00 
0B53A1 00 
0B53A2 00 
0B53A2 00   
0B53A3 00 
0B53A4 00 
0B53A5 00 
0B53A5 00   
0B53A6 00 
0B53A7 00 
0B53A8 00 
0B53A8 00   
0B53A9 00 
0B53AA 00 
0B53AB 00 
0B53AB 00   
0B53AC 00 
0B53AD 00 
0B53AE 00 
0B53AE 00   
0B53AF 00 
0B53B0 00 
0B53B1 00 
0B53B1 00   
0B53B2 00 
0B53B3 00 
0B53B4 00 
0B53B4 00   
0B53B5 00 
0B53B6 00 
0B53B7 00 
0B53B7 00   
0B53B8 00 
0B53B9 00 
0B53BA 00 
0B53BA 00   
0B53BB 00 
0B53BC 00 
0B53BD 00 
0B53BD 00   
0B53BE 00 
0B53BF 00 
0B53C0 00 
0B5400 00     0066* BUFFER:         BLKB    256,0             ; String Input Buffer
0B5401 00 
0B5402 00 
0B5403 00 
0B5403 00   
0B5404 00 
0B5405 00 
0B5406 00 
0B5406 00   
0B5407 00 
0B5408 00 
0B5409 00 
0B5409 00   
0B540A 00 
0B540B 00 
0B540C 00 
0B540C 00   
0B540D 00 
0B540E 00 
0B540F 00 
0B540F 00   
0B5410 00 
0B5411 00 
0B5412 00 
0B5412 00   
0B5413 00 
0B5414 00 
0B5415 00 
0B5415 00   
0B5416 00 
0B5417 00 
0B5418 00 
0B5418 00   
0B5419 00 
0B541A 00 
0B541B 00 
0B541B 00   
0B541C 00 
0B541D 00 
0B541E 00 
0B541E 00   
0B541F 00 
0B5420 00 
0B5421 00 
0B5421 00   
0B5422 00 
0B5423 00 
0B5424 00 
0B5424 00   
0B5425 00 
0B5426 00 
0B5427 00 
0B5427 00   
0B5428 00 
0B5429 00 
0B542A 00 
0B542A 00   
0B542B 00 
0B542C 00 
0B542D 00 
0B542D 00   
0B542E 00 
0B542F 00 
0B5430 00 
0B5430 00   
0B5431 00 
0B5432 00 
0B5433 00 
0B5433 00   
0B5434 00 
0B5435 00 
0B5436 00 
0B5436 00   
0B5437 00 
0B5438 00 
0B5439 00 
0B5439 00   
0B543A 00 
0B543B 00 
0B543C 00 
0B543C 00   
0B543D 00 
0B543E 00 
0B543F 00 
0B543F 00   
0B5440 00 
0B5441 00 
0B5442 00 
0B5442 00   
0B5443 00 
0B5444 00 
0B5445 00 
0B5445 00   
0B5446 00 
0B5447 00 
0B5448 00 
0B5448 00   
0B5449 00 
0B544A 00 
0B544B 00 
0B544B 00   
0B544C 00 
0B544D 00 
0B544E 00 
0B544E 00   
0B544F 00 
0B5450 00 
0B5451 00 
0B5451 00   
0B5452 00 
0B5453 00 
0B5454 00 
0B5454 00   
0B5455 00 
0B5456 00 
0B5457 00 
0B5457 00   
0B5458 00 
0B5459 00 
0B545A 00 
0B545A 00   
0B545B 00 
0B545C 00 
0B545D 00 
0B545D 00   
0B545E 00 
0B545F 00 
0B5460 00 
0B5460 00   
0B5461 00 
0B5462 00 
0B5463 00 
0B5463 00   
0B5464 00 
0B5465 00 
0B5466 00 
0B5466 00   
0B5467 00 
0B5468 00 
0B5469 00 
0B5469 00   
0B546A 00 
0B546B 00 
0B546C 00 
0B546C 00   
0B546D 00 
0B546E 00 
0B546F 00 
0B546F 00   
0B5470 00 
0B5471 00 
0B5472 00 
0B5472 00   
0B5473 00 
0B5474 00 
0B5475 00 
0B5475 00   
0B5476 00 
0B5477 00 
0B5478 00 
0B5478 00   
0B5479 00 
0B547A 00 
0B547B 00 
0B547B 00   
0B547C 00 
0B547D 00 
0B547E 00 
0B547E 00   
0B547F 00 
0B5480 00 
0B5481 00 
0B5481 00   
0B5482 00 
0B5483 00 
0B5484 00 
0B5484 00   
0B5485 00 
0B5486 00 
0B5487 00 
0B5487 00   
0B5488 00 
0B5489 00 
0B548A 00 
0B548A 00   
0B548B 00 
0B548C 00 
0B548D 00 
0B548D 00   
0B548E 00 
0B548F 00 
0B5490 00 
0B5490 00   
0B5491 00 
0B5492 00 
0B5493 00 
0B5493 00   
0B5494 00 
0B5495 00 
0B5496 00 
0B5496 00   
0B5497 00 
0B5498 00 
0B5499 00 
0B5499 00   
0B549A 00 
0B549B 00 
0B549C 00 
0B549C 00   
0B549D 00 
0B549E 00 
0B549F 00 
0B549F 00   
0B54A0 00 
0B54A1 00 
0B54A2 00 
0B54A2 00   
0B54A3 00 
0B54A4 00 
0B54A5 00 
0B54A5 00   
0B54A6 00 
0B54A7 00 
0B54A8 00 
0B54A8 00   
0B54A9 00 
0B54AA 00 
0B54AB 00 
0B54AB 00   
0B54AC 00 
0B54AD 00 
0B54AE 00 
0B54AE 00   
0B54AF 00 
0B54B0 00 
0B54B1 00 
0B54B1 00   
0B54B2 00 
0B54B3 00 
0B54B4 00 
0B54B4 00   
0B54B5 00 
0B54B6 00 
0B54B7 00 
0B54B7 00   
0B54B8 00 
0B54B9 00 
0B54BA 00 
0B54BA 00   
0B54BB 00 
0B54BC 00 
0B54BD 00 
0B54BD 00   
0B54BE 00 
0B54BF 00 
0B54C0 00 
0B5500 00     0067* STAVAR:         BLKB    27*4,0            ; Static Variables
0B5501 00 
0B5502 00 
0B5503 00 
0B5503 00   
0B5504 00 
0B5505 00 
0B5506 00 
0B5506 00   
0B5507 00 
0B5508 00 
0B5509 00 
0B5509 00   
0B550A 00 
0B550B 00 
0B550C 00 
0B550C 00   
0B550D 00 
0B550E 00 
0B550F 00 
0B550F 00   
0B5510 00 
0B5511 00 
0B5512 00 
0B5512 00   
0B5513 00 
0B5514 00 
0B5515 00 
0B5515 00   
0B5516 00 
0B5517 00 
0B5518 00 
0B5518 00   
0B5519 00 
0B551A 00 
0B551B 00 
0B551B 00   
0B551C 00 
0B551D 00 
0B551E 00 
0B551E 00   
0B551F 00 
0B5520 00 
0B5521 00 
0B5521 00   
0B5522 00 
0B5523 00 
0B5524 00 
0B5524 00   
0B5525 00 
0B5526 00 
0B5527 00 
0B5527 00   
0B5528 00 
0B5529 00 
0B552A 00 
0B552A 00   
0B552B 00 
0B552C 00 
0B552D 00 
0B552D 00   
0B552E 00 
0B552F 00 
0B5530 00 
0B5530 00   
0B5531 00 
0B5532 00 
0B5533 00 
0B5533 00   
0B5534 00 
0B5535 00 
0B5536 00 
0B5536 00   
0B5537 00 
0B5538 00 
0B5539 00 
0B5539 00   
0B553A 00 
0B553B 00 
0B553C 00 
0B553C 00   
0B553D 00 
0B553E 00 
0B553F 00 
0B553F 00   
0B5540 00 
0B5541 00 
0B5542 00 
0B5542 00   
0B5543 00 
0B5544 00 
0B5545 00 
0B5545 00   
0B5546 00 
0B5547 00 
0B5548 00 
0B5548 00   
0B5549 00 
0B554A 00 
0B554B 00 
0B554B 00   
0B554C 00 
0B554D 00 
0B554E 00 
0B554E 00   
0B554F 00 
0B5550 00 
0B5551 00 
0B556C 00     0068* DYNVAR:         BLKB    54*3,0            ; Dynamic Variable Pointers
0B556D 00 
0B556E 00 
0B556F 00 
0B556F 00   
0B5570 00 
0B5571 00 
0B5572 00 
0B5572 00   
0B5573 00 
0B5574 00 
0B5575 00 
0B5575 00   
0B5576 00 
0B5577 00 
0B5578 00 
0B5578 00   
0B5579 00 
0B557A 00 
0B557B 00 
0B557B 00   
0B557C 00 
0B557D 00 
0B557E 00 
0B557E 00   
0B557F 00 
0B5580 00 
0B5581 00 
0B5581 00   
0B5582 00 
0B5583 00 
0B5584 00 
0B5584 00   
0B5585 00 
0B5586 00 
0B5587 00 
0B5587 00   
0B5588 00 
0B5589 00 
0B558A 00 
0B558A 00   
0B558B 00 
0B558C 00 
0B558D 00 
0B558D 00   
0B558E 00 
0B558F 00 
0B5590 00 
0B5590 00   
0B5591 00 
0B5592 00 
0B5593 00 
0B5593 00   
0B5594 00 
0B5595 00 
0B5596 00 
0B5596 00   
0B5597 00 
0B5598 00 
0B5599 00 
0B5599 00   
0B559A 00 
0B559B 00 
0B559C 00 
0B559C 00   
0B559D 00 
0B559E 00 
0B559F 00 
0B559F 00   
0B55A0 00 
0B55A1 00 
0B55A2 00 
0B55A2 00   
0B55A3 00 
0B55A4 00 
0B55A5 00 
0B55A5 00   
0B55A6 00 
0B55A7 00 
0B55A8 00 
0B55A8 00   
0B55A9 00 
0B55AA 00 
0B55AB 00 
0B55AB 00   
0B55AC 00 
0B55AD 00 
0B55AE 00 
0B55AE 00   
0B55AF 00 
0B55B0 00 
0B55B1 00 
0B55B1 00   
0B55B2 00 
0B55B3 00 
0B55B4 00 
0B55B4 00   
0B55B5 00 
0B55B6 00 
0B55B7 00 
0B55B7 00   
0B55B8 00 
0B55B9 00 
0B55BA 00 
0B55BA 00   
0B55BB 00 
0B55BC 00 
0B55BD 00 
0B55BD 00   
0B55BE 00 
0B55BF 00 
0B55C0 00 
0B55C0 00   
0B55C1 00 
0B55C2 00 
0B55C3 00 
0B55C3 00   
0B55C4 00 
0B55C5 00 
0B55C6 00 
0B55C6 00   
0B55C7 00 
0B55C8 00 
0B55C9 00 
0B55C9 00   
0B55CA 00 
0B55CB 00 
0B55CC 00 
0B55CC 00   
0B55CD 00 
0B55CE 00 
0B55CF 00 
0B55CF 00   
0B55D0 00 
0B55D1 00 
0B55D2 00 
0B55D2 00   
0B55D3 00 
0B55D4 00 
0B55D5 00 
0B55D5 00   
0B55D6 00 
0B55D7 00 
0B55D8 00 
0B55D8 00   
0B55D9 00 
0B55DA 00 
0B55DB 00 
0B55DB 00   
0B55DC 00 
0B55DD 00 
0B55DE 00 
0B55DE 00   
0B55DF 00 
0B55E0 00 
0B55E1 00 
0B55E1 00   
0B55E2 00 
0B55E3 00 
0B55E4 00 
0B55E4 00   
0B55E5 00 
0B560E 00     0069* FNPTR:          BLKB    3,0               ; Dynamic Function Pointers
0B560F 00 
0B5610 00 
0B5611 00     0070* PROPTR:         BLKB    3,0               ; Dynamic Procedure Pointers
0B5612 00 
0B5613 00 
              0071* ;
0B5614 00     0072* PAGE_:          BLKB    3,0               ; Start of User Program
0B5615 00 
0B5616 00 
0B5617 00     0073* TOP:            BLKB    3,0               ; First Location after User Program
0B5618 00 
0B5619 00 
0B561A 00     0074* LOMEM:          BLKB    3,0               ; Start of Dynamic Storage
0B561B 00 
0B561C 00 
0B561D 00     0075* FREE:           BLKB    3,0               ; First Free Space Byte
0B561E 00 
0B561F 00 
0B5620 00     0076* HIMEM:          BLKB    3,0               ; First Protected Byte
0B5621 00 
0B5622 00 
              0077* ;
0B5623 00     0078* LINENO:         BLKB    3,0               ; Line Number
0B5624 00 
0B5625 00 
0B5626 00     0079* TRACEN:         BLKB    3,0               ; Trace Flag
0B5627 00 
0B5628 00 
0B5629 00     0080* AUTONO:         BLKB    3,0               ; Auto Flag
0B562A 00 
0B562B 00 
0B562C 00     0081* ERRTRP:         BLKB    3,0               ; Error Trap
0B562D 00 
0B562E 00 
0B562F 00     0082* ERRTXT:         BLKB    2,0               ; Error Message Pointer
0B5630 00 
0B5631 00     0083* DATPTR:         BLKB    2,0               ; Data Pointer
0B5632 00 
0B5633 00     0084* ERL:            BLKB    2,0               ; Error Line
0B5634 00 
0B5635 00     0085* ERRLIN:         BLKB    3,0               ; The "ON ERROR" Line
0B5636 00 
0B5637 00 
0B5638 00     0086* RANDOM:         BLKB    5,0               ; Random Number
0B5639 00 
0B563A 00 
0B563B 00 
0B563B 00   
0B563D 00     0087* COUNT:          BLKB    1,0               ; Print Position
0B563E 00     0088* WIDTH:          BLKB    1,0               ; Print Width
0B563F 00     0089* ERR:            BLKB    1,0               ; Error Number
0B5640 00     0090* LISTON:         BLKB    1,0               ; LISTO (bottom nibble)
              0091* ; - BIT 0: If set, output a space after the line number
              0092* ; - BIT 1: If set, then indent FOR/NEXT loops
              0093* ; - BIT 2: If set, then indent REPEAT/UNTIL loops
              0094* ; - BIT 3: If set, then output to buffer for *EDIT
              0095* ; OPT FLAG (top nibble)
              0096* ; - BIT 4: If set, then list whilst assembling
              0097* ; - BIT 5: If set, then assembler errors are reported
              0098* ; - BIT 6: If set, then place the code starting at address pointed to by O%
              0099* ; - BIT 7: If set, then assemble in ADL mode, otherwise assemble in Z80 mode
0B5641 00     0100* INCREM:         BLKB    1,0               ; Auto-Increment Value
              0101* ;
              0102* ; --------------------------------------------------------------------------------------------
              0103* ; BEGIN MODIFIED CODE
              0104* ; --------------------------------------------------------------------------------------------
              0105* ; Originally in equs.inc
              0106* ;
              0107* OC:			EQU     15*4+STAVAR     ; CODE ORIGIN (O%)
              0108* PC:			EQU     16*4+STAVAR     ; PROGRAM COUNTER (P%)
              0109* VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands
              0110* ; --------------------------------------------------------------------------------------------
              0111* ; END MODIFIED CODE
              0112* ; --------------------------------------------------------------------------------------------
              0113* 
              0114* ; Extra Agon-implementation specific system variables
              0115* ;
0B5642 00     0116* FLAGS:          BLKB    1,0       ; Miscellaneous flags
              0117* ; - BIT 7: Set if ESC pressed
              0118* ; - BIT 6: Set to disable ESC
0B5643 00     0119* OSWRCHPT:       BLKB    2,0       ; Pointer for *EDIT
0B5644 00 
0B5645 00     0120* OSWRCHCH:       BLKB    1,0       ; Channel of OSWRCH
              0121* ; - 0: Console
              0122* ; - 1: File
0B5646 00     0123* OSWRCHFH:       BLKB    1,0       ; File handle for OSWRCHCHN
0B5647 00     0124* KEYDOWN:        BLKB    1,0       ; Keydown flag
0B5648 00     0125* KEYASCII:       BLKB    1,0       ; ASCII code of pressed key
0B5649 00     0126* KEYCOUNT:       BLKB    1,0       ; Counts every time a key is pressed
0B564A 00     0127* R0:             BLKB    3,0       ; General purpose storage for 8/16 to 24 bit operations
0B564B 00 
0B564C 00 
0B564D 00     0128* R1:             BLKB    3,0
0B564E 00 
0B564F 00 
              0129* 
              0130* ;
              0131* ; This must be at the end
              0132* ;
              0133* RAM_END:
0B5650 FF     0134* ALIGN	256
0B5651 FF 
0B5652 FF 
0B5653 FF 
0B5653 FF   
0B5654 FF 
0B5655 FF 
0B5656 FF 
0B5656 FF   
0B5657 FF 
0B5658 FF 
0B5659 FF 
0B5659 FF   
0B565A FF 
0B565B FF 
0B565C FF 
0B565C FF   
0B565D FF 
0B565E FF 
0B565F FF 
0B565F FF   
0B5660 FF 
0B5661 FF 
0B5662 FF 
0B5662 FF   
0B5663 FF 
0B5664 FF 
0B5665 FF 
0B5665 FF   
0B5666 FF 
0B5667 FF 
0B5668 FF 
0B5668 FF   
0B5669 FF 
0B566A FF 
0B566B FF 
0B566B FF   
0B566C FF 
0B566D FF 
0B566E FF 
0B566E FF   
0B566F FF 
0B5670 FF 
0B5671 FF 
0B5671 FF   
0B5672 FF 
0B5673 FF 
0B5674 FF 
0B5674 FF   
0B5675 FF 
0B5676 FF 
0B5677 FF 
0B5677 FF   
0B5678 FF 
0B5679 FF 
0B567A FF 
0B567A FF   
0B567B FF 
0B567C FF 
0B567D FF 
0B567D FF   
0B567E FF 
0B567F FF 
0B5680 FF 
0B5680 FF   
0B5681 FF 
0B5682 FF 
0B5683 FF 
0B5683 FF   
0B5684 FF 
0B5685 FF 
0B5686 FF 
0B5686 FF   
0B5687 FF 
0B5688 FF 
0B5689 FF 
0B5689 FF   
0B568A FF 
0B568B FF 
0B568C FF 
0B568C FF   
0B568D FF 
0B568E FF 
0B568F FF 
0B568F FF   
0B5690 FF 
0B5691 FF 
0B5692 FF 
0B5692 FF   
0B5693 FF 
0B5694 FF 
0B5695 FF 
0B5695 FF   
0B5696 FF 
0B5697 FF 
0B5698 FF 
0B5698 FF   
0B5699 FF 
0B569A FF 
0B569B FF 
0B569B FF   
0B569C FF 
0B569D FF 
0B569E FF 
0B569E FF   
0B569F FF 
0B56A0 FF 
0B56A1 FF 
0B56A1 FF   
0B56A2 FF 
0B56A3 FF 
0B56A4 FF 
0B56A4 FF   
0B56A5 FF 
0B56A6 FF 
0B56A7 FF 
0B56A7 FF   
0B56A8 FF 
0B56A9 FF 
0B56AA FF 
0B56AA FF   
0B56AB FF 
0B56AC FF 
0B56AD FF 
0B56AD FF   
0B56AE FF 
0B56AF FF 
0B56B0 FF 
0B56B0 FF   
0B56B1 FF 
0B56B2 FF 
0B56B3 FF 
0B56B3 FF   
0B56B4 FF 
0B56B5 FF 
0B56B6 FF 
0B56B6 FF   
0B56B7 FF 
0B56B8 FF 
0B56B9 FF 
0B56B9 FF   
0B56BA FF 
0B56BB FF 
0B56BC FF 
0B56BC FF   
0B56BD FF 
0B56BE FF 
0B56BF FF 
0B56BF FF   
0B56C0 FF 
0B56C1 FF 
0B56C2 FF 
0B56C2 FF   
0B56C3 FF 
0B56C4 FF 
0B56C5 FF 
0B56C5 FF   
0B56C6 FF 
0B56C7 FF 
0B56C8 FF 
0B56C8 FF   
0B56C9 FF 
0B56CA FF 
0B56CB FF 
0B56CB FF   
0B56CC FF 
0B56CD FF 
0B56CE FF 
0B56CE FF   
0B56CF FF 
0B56D0 FF 
0B56D1 FF 
0B56D1 FF   
0B56D2 FF 
0B56D3 FF 
0B56D4 FF 
              0135* USER:							; Must be aligned on a page boundary
              0136* 
