        Output     Line 
       
               0001 ;
               0002 ; Title:	calcbas
               0003 ; Author:	Brandon R. Gates
               0004 ; Created:	29/10/2024
               0005 
               0006 ; ========================================
               0007 ; MODIFIED MOSLET INITIALIZATION CODE
               0008 ; ========================================
               0009 ;
               0010 ; Title:	Copy - Initialisation Code
               0011 ; Author:	Dean Belfield, Lennart Benschop
               0012 ; Created:	06/11/2022
               0013 ; Last Updated:	26/12/2022
               0014 ;
               0015 ; Modinfo:
               0016 ; 17/12/2022:	Added parameter processing
               0017 ; 26/12/2022:   Adapted to Copy program, use LEA instead of 3x INC IX, Save/restore MB
               0018 ; Changed:      08/04/2924 adapt to ez80asm
               0019 ;
               0020 ASSUME	ADL = 1
               0021 INCLUDE "mos_api.inc"
              0001* ;
              0002* ; Title:	AGON MOS - API for user projects
              0003* ; Author:	Dean Belfield
              0004* ; Created:	03/08/2022
              0005* ; Last Updated:	11/11/2023
              0006* ;
              0007* ; Modified: 11/14/2024 by Brandon R. Gates for ez80asm compatibility
              0008* ;
              0009* ; Modinfo:
              0010* ; 05/08/2022:	Added mos_feof
              0011* ; 09/08/2022:	Added system variables: cursorX, cursorY
              0012* ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
              0013* ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
              0014* ; 24/09/2022:	Added mos_getError, mos_mkdir
              0015* ; 13/10/2022:	Added mos_oscli
              0016* ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
              0017* ; 04/03/2023:	Added sysvar_scrpixelIndex
              0018* ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
              0019* ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
              0020* ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
              0021* ; 22/03/2023:	The VDP commands are now indexed from 0x80
              0022* ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
              0023* ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
              0024* ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
              0025* ; 19/05/2023:	Added sysvar_scrMode
              0026* ; 05/06/2023:	Added sysvar_rtcEnable
              0027* ; 03/08/2023:	Added mos_setkbvector
              0028* ; 10/08/2023:	Added mos_getkbmap
              0029* ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
              0030* ; 11/14/2024:   FatFS structs modified for ez80asm compatibility
              0031* ;
              0032* ; VDP control (VDU 23, 0, n)
              0033* ;
              0034* vdp_gp:			EQU 	80h
              0035* vdp_keycode:		EQU 	81h
              0036* vdp_cursor:		EQU	82h
              0037* vdp_scrchar:		EQU	83h
              0038* vdp_scrpixel:		EQU	84h
              0039* vdp_audio:		EQU	85h
              0040* vdp_mode:		EQU	86h
              0041* vdp_rtc:		EQU	87h
              0042* vdp_keystate:		EQU	88h
              0043* vdp_logicalcoords:	EQU	C0h
              0044* vdp_terminalmode:	EQU	FFh
              0045* 
              0046* ; MOS high level functions
              0047* ;
              0048* mos_getkey:		EQU	00h
              0049* mos_load:		EQU	01h
              0050* mos_save:		EQU	02h
              0051* mos_cd:			EQU	03h
              0052* mos_dir:		EQU	04h
              0053* mos_del:		EQU	05h
              0054* mos_ren:		EQU	06h
              0055* mos_mkdir:		EQU	07h
              0056* mos_sysvars:		EQU	08h
              0057* mos_editline:		EQU	09h
              0058* mos_fopen:		EQU	0Ah
              0059* mos_fclose:		EQU	0Bh
              0060* mos_fgetc:		EQU	0Ch
              0061* mos_fputc:		EQU	0Dh
              0062* mos_feof:		EQU	0Eh
              0063* mos_getError:		EQU	0Fh
              0064* mos_oscli:		EQU	10h
              0065* mos_copy:		EQU	11h
              0066* mos_getrtc:		EQU	12h
              0067* mos_setrtc:		EQU	13h
              0068* mos_setintvector:	EQU	14h
              0069* mos_uopen:		EQU	15h
              0070* mos_uclose:		EQU	16h
              0071* mos_ugetc:		EQU	17h
              0072* mos_uputc:		EQU 	18h
              0073* mos_getfil:		EQU	19h
              0074* mos_fread:		EQU	1Ah
              0075* mos_fwrite:		EQU	1Bh
              0076* mos_flseek:		EQU	1Ch
              0077* mos_setkbvector:	EQU	1Dh
              0078* mos_getkbmap:		EQU	1Eh
              0079* mos_i2c_open:		EQU	1Fh
              0080* mos_i2c_close:		EQU	20h
              0081* mos_i2c_write:		EQU	21h
              0082* mos_i2c_read:		EQU	22h
              0083* 
              0084* 
              0085* ; FatFS file access functions
              0086* ;
              0087* ffs_fopen:		EQU	80h
              0088* ffs_fclose:		EQU	81h
              0089* ffs_fread:		EQU	82h
              0090* ffs_fwrite:		EQU	83h
              0091* ffs_flseek:		EQU	84h
              0092* ffs_ftruncate:		EQU	85h
              0093* ffs_fsync:		EQU	86h
              0094* ffs_fforward:		EQU	87h
              0095* ffs_fexpand:		EQU	88h
              0096* ffs_fgets:		EQU	89h
              0097* ffs_fputc:		EQU	8Ah
              0098* ffs_fputs:		EQU	8Bh
              0099* ffs_fprintf:		EQU	8Ch
              0100* ffs_ftell:		EQU	8Dh
              0101* ffs_feof:		EQU	8Eh
              0102* ffs_fsize:		EQU	8Fh
              0103* ffs_ferror:		EQU	90h
              0104* 
              0105* ; FatFS directory access functions
              0106* ;
              0107* ffs_dopen:		EQU	91h
              0108* ffs_dclose:		EQU	92h
              0109* ffs_dread:		EQU	93h
              0110* ffs_dfindfirst:		EQU	94h
              0111* ffs_dfindnext:		EQU	95h
              0112* 
              0113* ; FatFS file and directory management functions
              0114* ;
              0115* ffs_stat:		EQU	96h
              0116* ffs_unlink:		EQU	97h
              0117* ffs_rename:		EQU	98h
              0118* ffs_chmod:		EQU	99h
              0119* ffs_utime:		EQU	9Ah
              0120* ffs_mkdir:		EQU	9Bh
              0121* ffs_chdir:		EQU	9Ch
              0122* ffs_chdrive:		EQU	9Dh
              0123* ffs_getcwd:		EQU	9Eh
              0124* 
              0125* ; FatFS volume management and system configuration functions
              0126* ;
              0127* ffs_mount:		EQU	9Fh
              0128* ffs_mkfs:		EQU	A0h
              0129* ffs_fdisk:		EQU	A1h
              0130* ffs_getfree:		EQU	A2h
              0131* ffs_getlabel:		EQU	A3h
              0132* ffs_setlabel:		EQU	A4h
              0133* ffs_setcp:		EQU	A5h
              0134* 
              0135* ; File access modes
              0136* ;
              0137* fa_read:		EQU	01h
              0138* fa_write:		EQU	02h
              0139* fa_open_existing:	EQU	00h
              0140* fa_create_new:		EQU	04h
              0141* fa_create_always:	EQU	08h
              0142* fa_open_always:		EQU	10h
              0143* fa_open_append:		EQU	30h
              0144* 
              0145* ; System variable indexes for api_sysvars
              0146* ; Index into _sysvars in globals.asm
              0147* ;
              0148* sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
              0149* sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
              0150* sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
              0151* sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
              0152* sysvar_cursorX:		EQU	07h	; 1: Cursor X position
              0153* sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
              0154* sysvar_scrchar:		EQU	09h	; 1: Character read from screen
              0155* sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
              0156* sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
              0157* sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
              0158* sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
              0159* sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
              0160* sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
              0161* sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
              0162* sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
              0163* sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
              0164* sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
              0165* sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
              0166* sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
              0167* sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
              0168* sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
              0169* sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
              0170* sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
              0171* sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
              0172* sysvar_scrMode:		EQU	27h	; 1: Screen mode
              0173* sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
              0174* sysvar_mouseX:		EQU	29h	; 2: Mouse X position
              0175* sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
              0176* sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
              0177* sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
              0178* sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
              0179* sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
              0180* ;
              0181* ; Flags for the VPD protocol
              0182* ;
              0183* vdp_pflag_cursor:	EQU	00000001b
              0184* vdp_pflag_scrchar:	EQU	00000010b
              0185* vdp_pflag_point:	EQU	00000100b
              0186* vdp_pflag_audio:	EQU	00001000b
              0187* vdp_pflag_mode:		EQU	00010000b
              0188* vdp_pflag_rtc:		EQU	00100000b
              0189* vdp_pflag_mouse:	EQU	01000000b
              0190* ; vdp_pflag_buffered:	EQU	10000000b
              0191* 
              0192* 
              0193* ; FatFS structures
              0194* ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
              0195* ;
              0196* ; Object ID and allocation information (FFOBJID)
              0197* FFOBJID.fs:       EQU 0    ; Pointer to the hosting volume of this object
              0198* FFOBJID.id:       EQU 3    ; Hosting volume mount ID
              0199* FFOBJID.attr:     EQU 5    ; Object attribute
              0200* FFOBJID.stat:     EQU 6    ; Object chain status
              0201* FFOBJID.sclust:   EQU 7    ; Object data start cluster
              0202* FFOBJID.objsize:  EQU 11   ; Object size
              0203* FFOBJID_SIZE:     EQU 15   ; Total size of FFOBJID structure
              0204* ;
              0205* ; File object structure (FIL)
              0206* ;
              0207* FIL.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
              0208* FIL.flag:         EQU FFOBJID_SIZE       ; File status flags
              0209* FIL.err:          EQU FFOBJID_SIZE + 1   ; Abort flag (error code)
              0210* FIL.fptr:         EQU FFOBJID_SIZE + 2   ; File read/write pointer
              0211* FIL.clust:        EQU FFOBJID_SIZE + 6   ; Current cluster of fptr
              0212* FIL.sect:         EQU FFOBJID_SIZE + 10  ; Sector number appearing in buf[]
              0213* FIL.dir_sect:     EQU FFOBJID_SIZE + 14  ; Sector number containing the directory entry
              0214* FIL.dir_ptr:      EQU FFOBJID_SIZE + 18  ; Pointer to the directory entry in the win[]
              0215* FIL_SIZE:         EQU FFOBJID_SIZE + 21  ; Total size of FIL structure
              0216* ;
              0217* ; Directory object structure (DIR)
              0218* ;
              0219* DIR.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
              0220* DIR.dptr:         EQU FFOBJID_SIZE       ; Current read/write offset
              0221* DIR.clust:        EQU FFOBJID_SIZE + 4   ; Current cluster
              0222* DIR.sect:         EQU FFOBJID_SIZE + 8   ; Current sector
              0223* DIR.dir:          EQU FFOBJID_SIZE + 12  ; Pointer to the directory item in the win[]
              0224* DIR.fn:           EQU FFOBJID_SIZE + 15  ; SFN (in/out) {body[8],ext[3],status[1]}
              0225* DIR.blk_ofs:      EQU FFOBJID_SIZE + 27  ; Offset of current entry block being processed
              0226* DIR_SIZE:         EQU FFOBJID_SIZE + 31  ; Total size of DIR structure
              0227* ;
              0228* ; File information structure (FILINFO)
              0229* ;
              0230* FILINFO.fsize:    EQU 0    ; File size
              0231* FILINFO.fdate:    EQU 4    ; Modified date
              0232* FILINFO.ftime:    EQU 6    ; Modified time
              0233* FILINFO.fattrib:  EQU 8    ; File attribute
              0234* FILINFO.altname:  EQU 9    ; Alternative file name
              0235* FILINFO.fname:    EQU 22   ; Primary file name
              0236* FILINFO_SIZE:     EQU 278  ; Total size of FILINFO structure
              0237* ;
              0238* ; Macro for calling the API
              0239* ; Parameters:
              0240* ; - function: One of the function numbers listed above
              0241* ;
              0242* MACRO MOSCALL	function
              0243* LD	A, function
              0244* RST.LIS	08h
              0245* ENDMACRO
               0022 ORG 0x0B0000 ; Is a moslet
               0023 
               0024 MACRO PROGNAME
               0025 ASCIZ "calcbas"
               0026 ENDMACRO
               0027 ;
               0028 ; Start in ADL mode
               0029 ;
0B0000 C3      0030 JP	_start
0B0001 45 
0B0002 00 
0B0003 0B 
               0031 ;
               0032 ; The header stuff is from byte 64 onwards
               0033 ;
               0034 _exec_name:
               0035 PROGNAME			; The executable name, only used in argv
0B0004 63     0001M ASCIZ "calcbas"
0B0005 61 
0B0006 6C 
0B0007 63 
0B0007 62   
0B0008 61 
0B0009 73 
0B000A 00 
               0036 
0B000C FF      0037 ALIGN	64
0B000D FF 
0B000E FF 
0B000F FF 
0B000F FF   
0B0010 FF 
0B0011 FF 
0B0012 FF 
0B0012 FF   
0B0013 FF 
0B0014 FF 
0B0015 FF 
0B0015 FF   
0B0016 FF 
0B0017 FF 
0B0018 FF 
0B0018 FF   
0B0019 FF 
0B001A FF 
0B001B FF 
0B001B FF   
0B001C FF 
0B001D FF 
0B001E FF 
0B001E FF   
0B001F FF 
0B0020 FF 
0B0021 FF 
0B0021 FF   
0B0022 FF 
0B0023 FF 
0B0024 FF 
0B0024 FF   
0B0025 FF 
0B0026 FF 
0B0027 FF 
0B0027 FF   
0B0028 FF 
0B0029 FF 
0B002A FF 
0B002A FF   
0B002B FF 
0B002C FF 
0B002D FF 
0B002D FF   
0B002E FF 
0B002F FF 
0B0030 FF 
0B0030 FF   
0B0031 FF 
0B0032 FF 
0B0033 FF 
               0038 
0B0040 4D      0039 DB	"MOS"			; Flag for MOS - to confirm this is a valid MOS command
0B0041 4F 
0B0042 53 
0B0043 00      0040 DB	00h			; MOS header version 0
0B0044 01      0041 DB	01h			; Flag for run mode (0: Z80, 1: ADL)
               0042 ;
               0043 ; And the code follows on immediately after the header
               0044 ;
               0045 _start:
0B0045 F5      0046 PUSH	AF			; Preserve the registers
0B0046 C5      0047 PUSH	BC
0B0047 D5      0048 PUSH	DE
0B0048 DD      0049 PUSH	IX
0B0049 E5 
0B004A FD      0050 PUSH	IY
0B004B E5 
0B004C ED      0051 LD	A, MB			; Save MB
0B004D 6E 
0B004E F5      0052 PUSH 	AF
0B004F AF      0053 XOR 	A
0B0050 ED      0054 LD 	MB, A                   ; Clear to zero so MOS API calls know how to use 24-bit addresses.
0B0051 6D 
               0055 
               0056 ; intialize BASIC-specific stuff
0B0052 ED      0057 LD		(_sps), SP 		; Preserve the 24-bit stack pointer (SPS)
0B0053 73 
0B0054 30 
0B0055 50 
0B0055 0B   
0B0057 CD      0058 CALL		_clear_ram
0B0058 A8 
0B0059 00 
0B005A 0B 
               0059 ; end of BASIC-specific initialization
               0060 
0B005B DD      0061 LD	IX, argv_ptrs		; The argv array pointer address
0B005C 21 
0B005D 00 
0B005E 50 
0B005E 0B   
0B0060 DD      0062 PUSH	IX
0B0061 E5 
0B0062 CD      0063 CALL	_parse_params		; Parse the parameters
0B0063 79 
0B0064 00 
0B0065 0B 
0B0066 DD      0064 POP	IX			; IX: argv
0B0067 E1 
0B0068 06      0065 LD	B, 0			;  C: argc
0B0069 00 
0B006A CD      0066 CALL	_main			; Start user code
0B006B 5F 
0B006C 50 
0B006D 0B 
               0067 
0B006E F1      0068 POP 	AF
0B006F ED      0069 LD	MB, A
0B0070 6D 
0B0071 FD      0070 POP	IY			; Restore registers
0B0072 E1 
0B0073 DD      0071 POP	IX
0B0074 E1 
0B0075 D1      0072 POP	DE
0B0076 C1      0073 POP	BC
0B0077 F1      0074 POP	AF
0B0078 C9      0075 RET
               0076 
               0077 ; Parse the parameter string into a C array
               0078 ; Parameters
               0079 ; - HL: Address of parameter string
               0080 ; - IX: Address for array pointer storage
               0081 ; Returns:
               0082 ; -  C: Number of parameters parsed
               0083 ;
0B0079 01      0084 _parse_params:		LD	BC, _exec_name
0B007A 04 
0B007B 00 
0B007C 0B 
0B007D DD      0085 LD	(IX+0), BC		; ARGV[0] = the executable name
0B007E 0F 
0B007F 00 
0B0080 ED      0086 LEA     IX, IX+3
0B0081 32 
0B0082 03 
0B0083 CD      0087 CALL	_skip_spaces		; Skip HL past any leading spaces
0B0084 A1 
0B0085 00 
0B0086 0B 
               0088 ;
0B0087 01      0089 LD	BC, 1			; C: ARGC = 1 - also clears out top 16 bits of BCU
0B0088 01 
0B0089 00 
0B008A 00 
0B008B 06      0090 LD	B, argv_ptrs_max - 1	; B: Maximum number of argv_ptrs
0B008C 0F 
               0091 
               0092 ; drop hl into (ix) leaving two parameters:
               0093 ; - the app name
               0094 ; - whatever the user entered
0B008D DD      0095 ld (ix),hl
0B008E 2F 
0B008F 00 
0B0090 0C      0096 INC	C			; Increment ARGC
0B0091 C9      0097 ret
               0098 
               0099 ; Get the next token
               0100 ; Parameters:
               0101 ; - HL: Address of parameter string
               0102 ; Returns:
               0103 ; - HL: Address of first character after token
               0104 ; -  C: Length of token (in characters)
               0105 ;
0B0092 0E      0106 _get_token:		LD	C, 0			; Initialise length
0B0093 00 
0B0094 7E      0107 @@:			LD	A, (HL)			; Get the character from the parameter string
0B0095 B7      0108 OR	A			; Exit if 0 (end of parameter string in MOS)
0B0096 C8      0109 RET 	Z
0B0097 FE      0110 CP	13			; Exit if CR (end of parameter string in BBC BASIC)
0B0098 0D 
0B0099 C8      0111 RET	Z
0B009A FE      0112 CP	' '			; Exit if space (end of token)
0B009B 20 
0B009C C8      0113 RET	Z
0B009D 23      0114 INC	HL			; Advance to next character
0B009E 0C      0115 INC 	C			; Increment length
0B009F 18      0116 JR	@B
0B00A0 F3 
               0117 
               0118 ; Skip spaces in the parameter string
               0119 ; Parameters:
               0120 ; - HL: Address of parameter string
               0121 ; Returns:
               0122 ; - HL: Address of next none-space character
               0123 ;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
               0124 ;
0B00A1 7E      0125 _skip_spaces:		LD	A, (HL)			; Get the character from the parameter string
0B00A2 FE      0126 CP	' '			; Exit if not space
0B00A3 20 
0B00A4 C0      0127 RET	NZ
0B00A5 23      0128 INC	HL			; Advance to next character
0B00A6 18      0129 JR	_skip_spaces		; Increment length
0B00A7 F9 
               0130 
               0131 ; ========================================
               0132 ; BASIC INITIALIZATION CODE FROM basic/init.asm
               0133 ; ========================================
               0134 ;
               0135 ;Clear the application memory
               0136 ;
               0137 _clear_ram:
0B00A8 E5      0138 push hl
0B00A9 C5      0139 PUSH		BC
0B00AA 21      0140 LD		HL, RAM_START
0B00AB 00 
0B00AC 4C 
0B00AD 0B 
0B00AE 11      0141 LD		DE, RAM_START + 1
0B00AF 01 
0B00B0 4C 
0B00B1 0B 
0B00B2 01      0142 LD		BC, RAM_END - RAM_START - 1
0B00B3 4F 
0B00B4 03 
0B00B5 00 
0B00B6 AF      0143 XOR		A
0B00B7 77      0144 LD		(HL), A
0B00B8 ED      0145 LDIR
0B00B9 B0 
0B00BA C1      0146 POP		BC
0B00BB E1      0147 pop hl
0B00BC C9      0148 RET
               0149 
               0150 ; ========================================
               0151 ; BEGIN APPLICATION CODE
               0152 ; ========================================
               0153 
               0154 ; API INCLUDES
               0155 
               0156 ; APPLICATION INCLUDES
               0157 include "calcbas.inc"
              0001* ; global scratch memory for registers
0B00BD 00     0002* uaf: dl 0
0B00BE 00 
0B00BF 00 
0B00C0 00     0003* uhl: dl 0
0B00C1 00 
0B00C2 00 
0B00C3 00     0004* ubc: dl 0
0B00C4 00 
0B00C5 00 
0B00C6 00     0005* ude: dl 0
0B00C7 00 
0B00C8 00 
0B00C9 00     0006* uix: dl 0
0B00CA 00 
0B00CB 00 
0B00CC 00     0007* uiy: dl 0
0B00CD 00 
0B00CE 00 
0B00CF 00     0008* usp: dl 0
0B00D0 00 
0B00D1 00 
0B00D2 00     0009* upc: dl 0
0B00D3 00 
0B00D4 00 
              0010* 
0B00D5 20     0011* str_afu: db " af=",0
0B00D6 61 
0B00D7 66 
0B00D8 3D 
0B00D8 00   
0B00DA 20     0012* str_hlu: db " hl=",0
0B00DB 68 
0B00DC 6C 
0B00DD 3D 
0B00DD 00   
0B00DF 20     0013* str_bcu: db " bc=",0
0B00E0 62 
0B00E1 63 
0B00E2 3D 
0B00E2 00   
0B00E4 20     0014* str_deu: db " de=",0
0B00E5 64 
0B00E6 65 
0B00E7 3D 
0B00E7 00   
0B00E9 20     0015* str_ixu: db " ix=",0
0B00EA 69 
0B00EB 78 
0B00EC 3D 
0B00EC 00   
0B00EE 20     0016* str_iyu: db " iy=",0
0B00EF 69 
0B00F0 79 
0B00F1 3D 
0B00F1 00   
              0017* 
              0018* 
              0019* MACRO PUSH_ALL
              0020* ex af,af'
              0021* exx
              0022* push af
              0023* push hl
              0024* push bc
              0025* push de
              0026* 
              0027* ex af,af'
              0028* exx
              0029* push af
              0030* push hl
              0031* push bc
              0032* push de
              0033* push ix
              0034* push iy
              0035* ENDMACRO
              0036* 
              0037* MACRO POP_ALL
              0038* pop iy
              0039* pop ix
              0040* pop de
              0041* pop bc
              0042* pop hl
              0043* pop af
              0044* ex af,af'
              0045* exx
              0046* 
              0047* pop de
              0048* pop bc
              0049* pop hl
              0050* pop af
              0051* ex af,af'
              0052* exx
              0053* ENDMACRO
              0054* 
              0055* ; Print a 24-bit HEX number
              0056* ; HLU: Number to print
              0057* printHex24:
              0058* ; PUSH	HL      ; 4 cycles
              0059* ; LD		HL, 2   ; 4 cycles
              0060* ; ADD		HL, SP  ; 1 cycle
              0061* ; LD		A, (HL) ; 2 cycles
              0062* ; POP		HL      ; 4 cycles
              0063* ;                 ; 15 cycles total
0B00F3 E5     0064* push hl ; 4 cycles
0B00F4 33     0065* inc sp ; 1 cycle
0B00F5 F1     0066* pop af  ; 4 cycles
0B00F6 3B     0067* dec sp ; 1 cycle
              0068* ; 10 cycles total
0B00F7 CD     0069* CALL	printHex8
0B00F8 01 
0B00F9 01 
0B00FA 0B 
              0070* ; Print a 16-bit HEX number
              0071* ; HL: Number to print
              0072* printHex16:
0B00FB 7C     0073* LD		A,H
0B00FC CD     0074* CALL	printHex8
0B00FD 01 
0B00FE 01 
0B00FF 0B 
0B0100 7D     0075* LD		A,L
              0076* ; Print an 8-bit HEX number
              0077* ; A: Number to print
              0078* printHex8:
0B0101 4F     0079* LD		C,A
0B0102 1F     0080* RRA
0B0103 1F     0081* RRA
0B0104 1F     0082* RRA
0B0105 1F     0083* RRA
0B0106 CD     0084* CALL	@F
0B0107 0B 
0B0108 01 
0B0109 0B 
0B010A 79     0085* LD		A,C
              0086* @@:
0B010B E6     0087* AND		0Fh
0B010C 0F 
0B010D C6     0088* ADD		A,90h
0B010E 90 
0B010F 27     0089* DAA
0B0110 CE     0090* ADC		A,40h
0B0111 40 
0B0112 27     0091* DAA
0B0113 5B     0092* RST.LIL	10h
0B0114 D7 
0B0115 C9     0093* RET
              0094* 
              0095* ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
              0096* ; Print a zero-terminated string
              0097* ; HL: Pointer to string
              0098* printString:
0B0116 C5     0099* PUSH	BC
0B0117 01     0100* LD		BC,0
0B0118 00 
0B0119 00 
0B011A 00 
0B011B 3E     0101* LD 	 	A,0
0B011C 00 
0B011D 5B     0102* RST.LIL 18h
0B011E DF 
0B011F C1     0103* POP		BC
0B0120 C9     0104* RET
              0105* ; print a VDU sequence
              0106* ; HL: Pointer to VDU sequence - <1 byte length> <data>
              0107* sendVDUsequence:
0B0121 C5     0108* PUSH	BC
0B0122 01     0109* LD		BC, 0
0B0123 00 
0B0124 00 
0B0125 00 
0B0126 4E     0110* LD		C, (HL)
0B0127 5B     0111* RST.LIL	18h
0B0128 DF 
0B0129 C1     0112* POP		BC
0B012A C9     0113* RET
              0114* ; Print Newline sequence to VDP
              0115* printNewLine:
0B012B F5     0116* push af ; for some reason rst.lil 10h sets carry flag
0B012C 3E     0117* LD	A, '\r'
0B012D 0D 
0B012E 5B     0118* RST.LIL 10h
0B012F D7 
0B0130 3E     0119* LD	A, '\n'
0B0131 0A 
0B0132 5B     0120* RST.LIL 10h
0B0133 D7 
0B0134 F1     0121* pop af
0B0135 C9     0122* RET
              0123* 
              0124* ; print registers to screen in hexidecimal format
              0125* ; inputs: none
              0126* ; outputs: values of every register printed to screen
              0127* ;    values of each register in global scratch memory
              0128* ; destroys: nothing
              0129* dumpRegistersHex:
              0130* ; store everything in scratch
0B0136 22     0131* ld (uhl),hl
0B0137 C0 
0B0138 00 
0B0139 0B 
0B013A ED     0132* ld (ubc),bc
0B013B 43 
0B013C C3 
0B013D 00 
0B013D 0B   
0B013F ED     0133* ld (ude),de
0B0140 53 
0B0141 C6 
0B0142 00 
0B0142 0B   
0B0144 DD     0134* ld (uix),ix
0B0145 22 
0B0146 C9 
0B0147 00 
0B0147 0B   
0B0149 FD     0135* ld (uiy),iy
0B014A 22 
0B014B CC 
0B014C 00 
0B014C 0B   
0B014E F5     0136* push af ; fml
0B014F E1     0137* pop hl  ; thanks, zilog
0B0150 22     0138* ld (uaf),hl
0B0151 BD 
0B0152 00 
0B0153 0B 
0B0154 F5     0139* push af ; dammit
              0140* 
              0141* ; home the cursor
              0142* ; call vdu_home_cursor
              0143* ; call printNewLine
              0144* 
              0145* ; print each register
0B0155 21     0146* ld hl,str_afu
0B0156 D5 
0B0157 00 
0B0158 0B 
0B0159 CD     0147* call printString
0B015A 16 
0B015B 01 
0B015C 0B 
0B015D 2A     0148* ld hl,(uaf)
0B015E BD 
0B015F 00 
0B0160 0B 
0B0161 CD     0149* call printHex24
0B0162 F3 
0B0163 00 
0B0164 0B 
              0150* ; call printNewLine
              0151* 
0B0165 21     0152* ld hl,str_hlu
0B0166 DA 
0B0167 00 
0B0168 0B 
0B0169 CD     0153* call printString
0B016A 16 
0B016B 01 
0B016C 0B 
0B016D 2A     0154* ld hl,(uhl)
0B016E C0 
0B016F 00 
0B0170 0B 
0B0171 CD     0155* call printHex24
0B0172 F3 
0B0173 00 
0B0174 0B 
              0156* ; call printNewLine
              0157* 
0B0175 21     0158* ld hl,str_bcu
0B0176 DF 
0B0177 00 
0B0178 0B 
0B0179 CD     0159* call printString
0B017A 16 
0B017B 01 
0B017C 0B 
0B017D 2A     0160* ld hl,(ubc)
0B017E C3 
0B017F 00 
0B0180 0B 
0B0181 CD     0161* call printHex24
0B0182 F3 
0B0183 00 
0B0184 0B 
              0162* ; call printNewLine
              0163* 
0B0185 21     0164* ld hl,str_deu
0B0186 E4 
0B0187 00 
0B0188 0B 
0B0189 CD     0165* call printString
0B018A 16 
0B018B 01 
0B018C 0B 
0B018D 2A     0166* ld hl,(ude)
0B018E C6 
0B018F 00 
0B0190 0B 
0B0191 CD     0167* call printHex24
0B0192 F3 
0B0193 00 
0B0194 0B 
              0168* ; call printNewLine
              0169* 
0B0195 21     0170* ld hl,str_ixu
0B0196 E9 
0B0197 00 
0B0198 0B 
0B0199 CD     0171* call printString
0B019A 16 
0B019B 01 
0B019C 0B 
0B019D 2A     0172* ld hl,(uix)
0B019E C9 
0B019F 00 
0B01A0 0B 
0B01A1 CD     0173* call printHex24
0B01A2 F3 
0B01A3 00 
0B01A4 0B 
              0174* ; call printNewLine
              0175* 
0B01A5 21     0176* ld hl,str_iyu
0B01A6 EE 
0B01A7 00 
0B01A8 0B 
0B01A9 CD     0177* call printString
0B01AA 16 
0B01AB 01 
0B01AC 0B 
0B01AD 2A     0178* ld hl,(uiy)
0B01AE CC 
0B01AF 00 
0B01B0 0B 
0B01B1 CD     0179* call printHex24
0B01B2 F3 
0B01B3 00 
0B01B4 0B 
              0180* ; call printNewLine
              0181* 
              0182* ; call vdu_vblank
              0183* 
0B01B5 CD     0184* call printNewLine
0B01B6 2B 
0B01B7 01 
0B01B8 0B 
              0185* ; restore everything
0B01B9 2A     0186* ld hl, (uhl)
0B01BA C0 
0B01BB 00 
0B01BC 0B 
0B01BD ED     0187* ld bc, (ubc)
0B01BE 4B 
0B01BF C3 
0B01C0 00 
0B01C0 0B   
0B01C2 ED     0188* ld de, (ude)
0B01C3 5B 
0B01C4 C6 
0B01C5 00 
0B01C5 0B   
0B01C7 DD     0189* ld ix, (uix)
0B01C8 2A 
0B01C9 C9 
0B01CA 00 
0B01CA 0B   
0B01CC FD     0190* ld iy, (uiy)
0B01CD 2A 
0B01CE CC 
0B01CF 00 
0B01CF 0B   
0B01D1 F1     0191* pop af
              0192* ; all done
0B01D2 C9     0193* ret
              0194* 
              0195* 
              0196* ; print bytes from an address to the screen in hexidecimal format
              0197* ; inputs: hl = address of first byte to print, a = number of bytes to print
              0198* ; outputs: values of each byte printed to screen separated by spaces
              0199* ; destroys: nothing
              0200* dumpMemoryHex:
              0201* ; save registers to the stack
0B01D3 C5     0202* push bc
0B01D4 E5     0203* push hl
0B01D5 F5     0204* push af
              0205* 
              0206* ; print the address and separator
0B01D6 CD     0207* call printHex24
0B01D7 F3 
0B01D8 00 
0B01D9 0B 
0B01DA 3E     0208* ld a,':'
0B01DB 3A 
0B01DC 5B     0209* rst.lil 10h
0B01DD D7 
0B01DE 3E     0210* ld a,' '
0B01DF 20 
0B01E0 5B     0211* rst.lil 10h
0B01E1 D7 
              0212* 
              0213* ; set b to be our loop counter
0B01E2 F1     0214* pop af
0B01E3 47     0215* ld b,a
0B01E4 E1     0216* pop hl
0B01E5 E5     0217* push hl
0B01E6 F5     0218* push af
              0219* @loop:
              0220* ; print the byte
0B01E7 7E     0221* ld a,(hl)
0B01E8 CD     0222* call printHex8
0B01E9 01 
0B01EA 01 
0B01EB 0B 
              0223* ; print a space
0B01EC 3E     0224* ld a,' '
0B01ED 20 
0B01EE 5B     0225* rst.lil 10h
0B01EF D7 
0B01F0 23     0226* inc hl
0B01F1 10     0227* djnz @loop
0B01F2 F4 
0B01F3 CD     0228* call printNewLine
0B01F4 2B 
0B01F5 01 
0B01F6 0B 
              0229* 
              0230* ; restore everything
0B01F7 F1     0231* pop af
0B01F8 E1     0232* pop hl
0B01F9 C1     0233* pop bc
              0234* 
              0235* ; all done
0B01FA C9     0236* ret
               0158 include "mathfpp.inc"
              0001* iand: equ 0
              0002* ibdiv: equ 1
              0003* ieor: equ 2
              0004* imod: equ 3
              0005* ior: equ 4
              0006* ile: equ 5
              0007* ine: equ 6
              0008* ige: equ 7
              0009* ilt: equ 8
              0010* ieq: equ 9
              0011* imul: equ 10
              0012* iadd: equ 11
              0013* igt: equ 12
              0014* isub: equ 13
              0015* ipow: equ 14
              0016* idiv: equ 15
              0017* absv: equ 16
              0018* acs: equ 17
              0019* asn: equ 18
              0020* atn: equ 19
              0021* cos: equ 20
              0022* deg: equ 21
              0023* exp: equ 22
              0024* int_: equ 23
              0025* ln: equ 24
              0026* log: equ 25
              0027* notk: equ 26
              0028* rad: equ 27
              0029* sgn: equ 28
              0030* sin: equ 29
              0031* sqr: equ 30
              0032* tan: equ 31
              0033* fpzero: equ 32
              0034* fone: equ 33
              0035* true: equ 34
              0036* pi: equ 35
              0037* val: equ 36
              0038* string: equ 37
              0039* sfix_fp: equ 38
              0040* sfloat: equ 39
              0041* ftest: equ 40
              0042* fcomp: equ 41
              0043* fand: equ 42
              0044* fbdiv: equ 43
              0045* feor: equ 44
              0046* fmod: equ 45
              0047* ffor: equ 46
              0048* fle: equ 47
              0049* fne: equ 48
              0050* fge: equ 49
              0051* flt: equ 50
              0052* feq: equ 51
              0053* fmul: equ 52
              0054* fadd: equ 53
              0055* fgt: equ 54
              0056* fsub: equ 55
              0057* fpow: equ 56
              0058* fdiv: equ 57
              0059* 
              0060* ; -------------------- from basic/fpp.asm --------------------
              0061* 
              0062* 
              0063* ;Function STRING - convert numeric value to ASCII string.
              0064* ;   Inputs: HLH'L'C = integer or floating-point number
              0065* ;           DE = address at which to store string
              0066* ;           IX = address of @% format control
              0067* ;  Outputs: String stored, with NUL terminator
              0068* 
              0069* ;NUMBER: Get unsigned integer from string.
              0070* ;    Inputs: string at (IX)
              0071* ;            C = truncated digit count
              0072* ;                (initially zero)
              0073* ;            B = total digit count
              0074* ;            HLH'L' = initial value
              0075* ;   Outputs: HLH'L' = number (binary integer)
              0076* ;            A = delimiter.
              0077* ;            B, C & IX updated
              0078* ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
              0079* 
              0080* ;VAL - Return numeric value of string.
              0081* ;Input: ASCII string at IX
              0082* ;Result is variable type numeric.
              0083* 
              0084* ;SWAP_FP - Swap arguments.
              0085* ;    Exchanges DE,HL D'E',H'L' and B,C
              0086* ;    Destroys: A,B,C,D,E,H,L,D',E',H',L'
              0087* ;SWAP1 - Swap DEHL with D'E'H'L'
              0088* ;    Destroys: D,E,H,L,D',E',H',L'
              0089* 
              0090* 
              0091* ;
              0092* ;IADD - Integer addition.
              0093* ;FADD - Floating point addition with rounding.
              0094* ;
              0095* 
              0096* ; -------------------- from basic/eval.asm --------------------
              0097* ;
              0098* ;Function STR - convert numeric value to ASCII string.
              0099* ;   Inputs: HLH'L'C = integer or floating-point number.
              0100* ;  Outputs: String in string accumulator.
              0101* ;           E = length, D = ACCS/256
              0102* ;           A = 80H (type=string)
              0103* 
              0104* 
              0105* ;HEXSTR - convert numeric value to HEX string.
              0106* ;   Inputs: HLH'L'C = integer or floating-point number
              0107* ;  Outputs: String in string accumulator.
              0108* ;           E = string length.  D = ACCS/256
              0109* 
              0110* 
              0111* 
              0112* ; ==================== CONVENIENCE FUNCTIONS ====================
              0113* ;
              0114* ; print a floating point number in decimal format
              0115* ; inputs: HL'H'L'C is the number to print
              0116* ; outputs: number printed to screen
              0117* ;          STROUT null-terminated string representation of the number
              0118* ; destroys: everything
              0119* print_float_dec:
0B01FB CD     0120* call STR ; convert the number to a string
0B01FC 67 
0B01FD 0B 
0B01FE 0B 
0B01FF 21     0121* ld hl,ACCS ; point to the string accumulator
0B0200 00 
0B0201 4C 
0B0202 0B 
0B0203 CD     0122* call printString
0B0204 16 
0B0205 01 
0B0206 0B 
0B0207 C9     0123* ret
              0124* 
              0125* 
              0126* ; output buffer for strings from BASIC
0B0208 00     0127* STROUT: blkb 256,0
0B0209 00 
0B020A 00 
0B020B 00 
0B020B 00   
0B020C 00 
0B020D 00 
0B020E 00 
0B020E 00   
0B020F 00 
0B0210 00 
0B0211 00 
0B0211 00   
0B0212 00 
0B0213 00 
0B0214 00 
0B0214 00   
0B0215 00 
0B0216 00 
0B0217 00 
0B0217 00   
0B0218 00 
0B0219 00 
0B021A 00 
0B021A 00   
0B021B 00 
0B021C 00 
0B021D 00 
0B021D 00   
0B021E 00 
0B021F 00 
0B0220 00 
0B0220 00   
0B0221 00 
0B0222 00 
0B0223 00 
0B0223 00   
0B0224 00 
0B0225 00 
0B0226 00 
0B0226 00   
0B0227 00 
0B0228 00 
0B0229 00 
0B0229 00   
0B022A 00 
0B022B 00 
0B022C 00 
0B022C 00   
0B022D 00 
0B022E 00 
0B022F 00 
0B022F 00   
0B0230 00 
0B0231 00 
0B0232 00 
0B0232 00   
0B0233 00 
0B0234 00 
0B0235 00 
0B0235 00   
0B0236 00 
0B0237 00 
0B0238 00 
0B0238 00   
0B0239 00 
0B023A 00 
0B023B 00 
0B023B 00   
0B023C 00 
0B023D 00 
0B023E 00 
0B023E 00   
0B023F 00 
0B0240 00 
0B0241 00 
0B0241 00   
0B0242 00 
0B0243 00 
0B0244 00 
0B0244 00   
0B0245 00 
0B0246 00 
0B0247 00 
0B0247 00   
0B0248 00 
0B0249 00 
0B024A 00 
0B024A 00   
0B024B 00 
0B024C 00 
0B024D 00 
0B024D 00   
0B024E 00 
0B024F 00 
0B0250 00 
0B0250 00   
0B0251 00 
0B0252 00 
0B0253 00 
0B0253 00   
0B0254 00 
0B0255 00 
0B0256 00 
0B0256 00   
0B0257 00 
0B0258 00 
0B0259 00 
0B0259 00   
0B025A 00 
0B025B 00 
0B025C 00 
0B025C 00   
0B025D 00 
0B025E 00 
0B025F 00 
0B025F 00   
0B0260 00 
0B0261 00 
0B0262 00 
0B0262 00   
0B0263 00 
0B0264 00 
0B0265 00 
0B0265 00   
0B0266 00 
0B0267 00 
0B0268 00 
0B0268 00   
0B0269 00 
0B026A 00 
0B026B 00 
0B026B 00   
0B026C 00 
0B026D 00 
0B026E 00 
0B026E 00   
0B026F 00 
0B0270 00 
0B0271 00 
0B0271 00   
0B0272 00 
0B0273 00 
0B0274 00 
0B0274 00   
0B0275 00 
0B0276 00 
0B0277 00 
0B0277 00   
0B0278 00 
0B0279 00 
0B027A 00 
0B027A 00   
0B027B 00 
0B027C 00 
0B027D 00 
0B027D 00   
0B027E 00 
0B027F 00 
0B0280 00 
0B0280 00   
0B0281 00 
0B0282 00 
0B0283 00 
0B0283 00   
0B0284 00 
0B0285 00 
0B0286 00 
0B0286 00   
0B0287 00 
0B0288 00 
0B0289 00 
0B0289 00   
0B028A 00 
0B028B 00 
0B028C 00 
0B028C 00   
0B028D 00 
0B028E 00 
0B028F 00 
0B028F 00   
0B0290 00 
0B0291 00 
0B0292 00 
0B0292 00   
0B0293 00 
0B0294 00 
0B0295 00 
0B0295 00   
0B0296 00 
0B0297 00 
0B0298 00 
0B0298 00   
0B0299 00 
0B029A 00 
0B029B 00 
0B029B 00   
0B029C 00 
0B029D 00 
0B029E 00 
0B029E 00   
0B029F 00 
0B02A0 00 
0B02A1 00 
0B02A1 00   
0B02A2 00 
0B02A3 00 
0B02A4 00 
0B02A4 00   
0B02A5 00 
0B02A6 00 
0B02A7 00 
0B02A7 00   
0B02A8 00 
0B02A9 00 
0B02AA 00 
0B02AA 00   
0B02AB 00 
0B02AC 00 
0B02AD 00 
0B02AD 00   
0B02AE 00 
0B02AF 00 
0B02B0 00 
0B02B0 00   
0B02B1 00 
0B02B2 00 
0B02B3 00 
0B02B3 00   
0B02B4 00 
0B02B5 00 
0B02B6 00 
0B02B6 00   
0B02B7 00 
0B02B8 00 
0B02B9 00 
0B02B9 00   
0B02BA 00 
0B02BB 00 
0B02BC 00 
0B02BC 00   
0B02BD 00 
0B02BE 00 
0B02BF 00 
0B02BF 00   
0B02C0 00 
0B02C1 00 
0B02C2 00 
0B02C2 00   
0B02C3 00 
0B02C4 00 
0B02C5 00 
0B02C5 00   
0B02C6 00 
0B02C7 00 
0B02C8 00 
              0128* ; numeric string format code
              0129* ; byte 1 is the number of significant digits:
              0130* ; -- up to 10
              0131* ; -- 0 or > 10 defaults to max decimal notation
              0132* ; -- if less than number of integer digits, output will be in E notation
              0133* ; byte 2 bit 1 is E notation flag when set
              0134* ; -- trailing zeros are added to bring number of significant digits to the specified number
0B0308 00     0135* NUMF: dl 0
0B0309 00 
0B030A 00 
              0136* 
              0137* ; num1: blkb 6,0
              0138* ; num2: blkb 6,0
              0139* ; ; store HLH'L'C in num1
              0140* ; store1:
              0141* ;     push ix
              0142* ;     ld ix,num1
              0143* ;     exx
              0144* ;     ld (ix+0),c
              0145* ;     ld (ix+1),l
              0146* ;     ld (ix+2),h
              0147* ;     exx
              0148* ;     ld (ix+3),l
              0149* ;     ld (ix+4),h
              0150* 
              0151* ;     call debug_print
              0152* ;     push hl
              0153* ;     ld hl,num1
              0154* ;     ld a,6
              0155* ;     call dumpMemoryHex
              0156* ;     pop hl
              0157* 
              0158* ;     pop ix
              0159* ;     ret
              0160* 
              0161* ; get1:
              0162* ;     push ix
              0163* ;     ld ix,num1
              0164* ;     exx
              0165* ;     ld c,(ix+0)
              0166* ;     ld l,(ix+1)
              0167* ;     ld h,(ix+2)
              0168* ;     exx
              0169* ;     ld l,(ix+3)
              0170* ;     ld h,(ix+4)
              0171* ;     pop ix
              0172* ;     ret
              0173* 
              0174* ; ; store DED'E'B in num2
              0175* ; store2:
              0176* ;     push ix
              0177* ;     ld ix,num2
              0178* ;     exx
              0179* ;     ld (ix+0),b
              0180* ;     ld (ix+1),e
              0181* ;     ld (ix+2),d
              0182* ;     exx
              0183* ;     ld (ix+3),e
              0184* ;     ld (ix+4),d
              0185* 
              0186* ;     call debug_print
              0187* ;     push hl
              0188* ;     ld hl,num2
              0189* ;     ld a,6
              0190* ;     call dumpMemoryHex
              0191* 
              0192* ;     pop ix
              0193* ;     ret
              0194* 
              0195* ; ; get DED'E'B from num2
              0196* ; get2:
              0197* ;     push ix
              0198* ;     ld ix,num2
              0199* ;     exx
              0200* ;     ld b,(ix+0)
              0201* ;     ld e,(ix+1)
              0202* ;     ld d,(ix+2)
              0203* ;     exx
              0204* ;     ld e,(ix+3)
              0205* ;     ld d,(ix+4)
              0206* ;     pop ix
              0207* ;     ret
               0159 include "basic/basic.asm" ; must be last so that RAM has room for BASIC operations
              0001* ; include "basic/mos_api.inc"
              0002* include "basic/macros.inc"
             0001** ; Title:	BBC Basic Interpreter - Z80 version
             0002** ;		Useful macros
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	11/06/2023
             0006** ;
             0007** ; Modinfo:
             0008** ; 11/06/2023:	Modified to run in ADL mode
             0009** ; 11/06/2024:   Make compatible with ez80asm by Brandon R. Gates
             0010** 
             0011** MACRO EXREG	rp1, rp2
             0012** PUSH	rp1
             0013** POP	rp2
             0014** ENDMACRO
             0015** 
             0016** ; MACRO ADD8U_DE	reg
             0017** MACRO ADD8U_DE
             0018** ADD	A, E
             0019** LD	E, A
             0020** ADC	A, D
             0021** SUB	E
             0022** LD	D, A
             0023** ENDMACRO
             0024** 
             0025** ; MACRO ADD8U_HL	reg
             0026** MACRO ADD8U_HL
             0027** ADD	A, L
             0028** LD	L, A
             0029** ADC	A, H
             0030** SUB	L
             0031** LD	H, A
             0032** ENDMACRO
             0033** 
             0034** MACRO VDU	val
             0035** LD	A, val
             0036** CALL	OSWRCH
             0037** ENDMACRO
             0038** 
             0039** MACRO SET_GPIO	reg, val
             0040** IN0	A, (reg)
             0041** OR	val
             0042** OUT0	(reg), A
             0043** ENDMACRO
             0044** 
             0045** MACRO RES_GPIO	reg, val
             0046** PUSH	BC
             0047** LD	A, val
             0048** CPL
             0049** LD	C, A
             0050** IN0	A, (reg)
             0051** AND	C
             0052** OUT0	(reg), A
             0053** POP	BC
             0054** ENDMACRO
              0003* include "basic/equs.inc"
             0001** ;
             0002** ; Title:	BBC Basic for AGON - Equs
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	08/06/2023
             0006** ;
             0007** ; Modinfo:
             0008** ; 08/06/2023:	Added SIZEW
             0009** 
             0010** ; XREF		STAVAR
             0011** ; XREF		ACCS
             0012** 
             0013** RAM_Top:		EQU		0B0000h	; Initial value of HIMEM
             0014** ;Stack_Top:		EQU		0000h	; Stack at top
             0015** SIZEW:			EQU		3	; Size of a word (3 for ADL mode)
             0016** 
             0017** ; For GPIO
             0018** ; PA not available on eZ80L92
             0019** ;
             0020** PA_DR:			EQU		96h
             0021** PA_DDR:			EQU		97h
             0022** PA_ALT1:		EQU		98h
             0023** PA_ALT2:		EQU		99h
             0024** PB_DR:          	EQU		9Ah
             0025** PB_DDR:        	 	EQU		9Bh
             0026** PB_ALT1:        	EQU		9Ch
             0027** PB_ALT2:        	EQU		9Dh
             0028** PC_DR:          	EQU		9Eh
             0029** PC_DDR:         	EQU		9Fh
             0030** PC_ALT1:        	EQU		A0h
             0031** PC_ALT2:        	EQU		A1h
             0032** PD_DR:          	EQU		A2h
             0033** PD_DDR:			EQU		A3h
             0034** PD_ALT1:		EQU		A4h
             0035** PD_ALT2:		EQU		A5h
             0036** 
             0037** GPIOMODE_OUT:		EQU		0	; Output
             0038** GPIOMODE_IN:		EQU		1	; Input
             0039** GPIOMODE_DIO:		EQU		2	; Open Drain IO
             0040** GPIOMODE_SIO:		EQU		3	; Open Source IO
             0041** GPIOMODE_INTD:		EQU		4	; Interrupt, Dual Edge
             0042** GPIOMODE_ALTF:		EQU		5;	; Alt Function
             0043** GPIOMODE_INTAL:		EQU		6	; Interrupt, Active Low
             0044** GPIOMODE_INTAH:		EQU		7	; Interrupt, Active High
             0045** GPIOMODE_INTFE:		EQU		8	; Interrupt, Falling Edge
             0046** GPIOMODE_INTRE:		EQU		9	; Interrupt, Rising Edge
             0047** 
             0048** ; ; Originally in ram.asm
             0049** ; ;
             0050** ; OC:			EQU     STAVAR+15*4     ; CODE ORIGIN (O%)
             0051** ; PC:			EQU     STAVAR+16*4     ; PROGRAM COUNTER (P%)
             0052** ; VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands
             0053** 
             0054** ; Originally in main.asm
             0055** ;
             0056** CR:			EQU     0DH
             0057** LF:			EQU     0AH
             0058** ESC:			EQU     1BH
              0004* ; include "basic/init.asm" ; relevant bits folded into calcbas.asm
              0005* include "basic/eval.asm"
             0001** ;
             0002** ; Title:	BBC Basic Interpreter - Z80 version
             0003** ;		Expression Evaluation & Arithmetic Module - "EVAL"
             0004** ; Author:	(C) Copyright  R.T.Russell  1984
             0005** ; Modified By:	Dean Belfield
             0006** ; Created:	12/05/2023
             0007** ; Last Updated:	17/08/2023
             0008** ;
             0009** ; Modinfo:
             0010** ; 07/06/2023:	Modified to run in ADL mode
             0011** ; 26/06/2023:	Fixed HEX and HEXSTR
             0012** ; 13/08/2023:	Added INKEY(-n) support (requires MOS 1.04)
             0013** ; 17/08/2023:	Added binary constants
             0014** 
             0015** ; .ASSUME	ADL = 1
             0016** 
             0017** ; INCLUDE	"equs.inc"
             0018** ; INCLUDE "macros.inc"
             0019** ; INCLUDE "mos_api.inc"	; In MOS/src
             0020** 
             0021** ; SEGMENT CODE
             0022** 
             0023** ; XDEF	EXPR
             0024** ; XDEF	EXPRN
             0025** ; XDEF	EXPRI
             0026** ; XDEF	EXPRS
             0027** ; XDEF	ITEMI
             0028** ; XDEF	LOADN
             0029** ; XDEF	LOAD4
             0030** ; XDEF	CONS
             0031** ; XDEF	LOADS
             0032** ; XDEF	SFIX
             0033** ; XDEF	VAL0
             0034** ; XDEF	SEARCH
             0035** ; XDEF	SWAP
             0036** ; XDEF	TEST
             0037** ; XDEF	DECODE
             0038** ; XDEF	HEXSTR
             0039** ; XDEF	STR
             0040** ; XDEF	ZERO
             0041** ; XDEF	PUSHS
             0042** ; XDEF	POPS
             0043** ; XDEF	COMMA
             0044** ; XDEF	BRAKET
             0045** ; XDEF	NXT
             0046** ; XDEF	COUNT0
             0047** 
             0048** ; XREF	ADVAL
             0049** ; XREF	FN_EX
             0050** ; XREF	POINT
             0051** ; XREF	USR
             0052** ; XREF	SYNTAX
             0053** ; XREF	ERROR_
             0054** ; XREF	CHECK
             0055** ; XREF	GETVAR
             0056** ; XREF	LISTON
             0057** ; XREF	RANGE
             0058** ; XREF	FPP
             0059** ; XREF	GETCSR
             0060** ; XREF	CHANEL
             0061** ; XREF	OSSTAT
             0062** ; XREF	OSBGET
             0063** ; XREF	LOMEM
             0064** ; XREF	HIMEM
             0065** ; XREF	PAGE_
             0066** ; XREF	TOP
             0067** ; XREF	ERL
             0068** ; XREF	ERR
             0069** ; XREF	COUNT
             0070** ; XREF	OSOPEN
             0071** ; XREF	GETEXT
             0072** ; XREF	GETPTR
             0073** ; XREF	GETIME
             0074** ; XREF	GETIMS
             0075** ; XREF	LEXAN2
             0076** ; XREF	RANDOM
             0077** ; XREF	STORE5
             0078** ; XREF	GETSCHR
             0079** ; XREF	OSRDCH
             0080** ; XREF	OSKEY
             0081** ; XREF	INKEY1
             0082** ; XREF	EXTERR
             0083** ;
             0084** ; BINARY FLOATING POINT REPRESENTATION:
             0085** ;    32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
             0086** ;     8 BIT EXCESS-128 SIGNED EXPONENT
             0087** ;    SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
             0088** ;    MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
             0089** ;
             0090** ; BINARY INTEGER REPRESENTATION:
             0091** ;    32 BIT 2'S-COMPLEMENT SIGNED INTEGER
             0092** ;     "EXPONENT" BYTE = 0 (WHEN PRESENT)
             0093** ;
             0094** ; NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
             0095** ;                             EXPONENT - C
             0096** ;
             0097** 
             0098** ;
             0099** ; Table of addresses for functions
             0100** ;
             0101** FUNTOK:			EQU	8DH			; First token number
             0102** ;
0B030B E7    0103** FUNTBL:			DW24	DECODE			; Line number
0B030C 0A 
0B030D 0B 
0B030E 95    0104** DW24	OPENIN			; OPENIN
0B030F 07 
0B0310 0B 
0B0311 B7    0105** DW24	PTR_EV			; PTR
0B0312 07 
0B0313 0B 
0B0314 51    0106** DW24	PAGEV			; PAGE
0B0315 07 
0B0316 0B 
0B0317 C1    0107** DW24	TIMEV			; TIME
0B0318 07 
0B0319 0B 
0B031A 3D    0108** DW24	LOMEMV			; LOMEM
0B031B 07 
0B031C 0B 
0B031D 47    0109** DW24	HIMEMV			; HIMEM
0B031E 07 
0B031F 0B 
0B0320 15    0110** DW24	ABSV			; ABS
0B0321 08 
0B0322 0B 
0B0323 51    0111** DW24	ACS			; ACS
0B0324 08 
0B0325 0B 
0B0326 B8    0112** DW24	ADVAL			; ADVAL
0B0327 45 
0B0328 0B 
0B0329 26    0113** DW24	ASC			; ASC
0B032A 07 
0B032B 0B 
0B032C 49    0114** DW24	ASN			; ASN
0B032D 08 
0B032E 0B 
0B032F 4D    0115** DW24	ATN			; ATN
0B0330 08 
0B0331 0B 
0B0332 EF    0116** DW24	BGET			; BGET
0B0333 06 
0B0334 0B 
0B0335 35    0117** DW24	COS			; COS
0B0336 08 
0B0337 0B 
0B0338 7C    0118** DW24	COUNTV			; COUNT
0B0339 07 
0B033A 0B 
0B033B 1D    0119** DW24	DEG			; DEG
0B033C 08 
0B033D 0B 
0B033E 70    0120** DW24	ERLV			; ERL
0B033F 07 
0B0340 0B 
0B0341 76    0121** DW24	ERRV			; ERR
0B0342 07 
0B0343 0B 
0B0344 7A    0122** DW24	EVAL_			; EVAL
0B0345 08 
0B0346 0B 
0B0347 3D    0123** DW24	EXP			; EXP
0B0348 08 
0B0349 0B 
0B034A AD    0124** DW24	EXT			; EXT
0B034B 07 
0B034C 0B 
0B034D 94    0125** DW24	ZERO			; FALSE
0B034E 0B 
0B034F 0B 
0B0350 80    0126** DW24	FN_EX			; FN
0B0351 12 
0B0352 0B 
0B0353 0D    0127** DW24	GET			; GET
0B0354 07 
0B0355 0B 
0B0356 FC    0128** DW24	INKEY			; INKEY
0B0357 06 
0B0358 0B 
0B0359 2C    0129** DW24	INSTR			; INSTR(
0B035A 09 
0B035B 0B 
0B035C 29    0130** DW24	INT_			; INT
0B035D 08 
0B035E 0B 
0B035F 36    0131** DW24	LEN			; LEN
0B0360 07 
0B0361 0B 
0B0362 41    0132** DW24	LN			; LN
0B0363 08 
0B0364 0B 
0B0365 45    0133** DW24	LOG			; LOG
0B0366 08 
0B0367 0B 
0B0368 19    0134** DW24	NOTK			; NOT
0B0369 08 
0B036A 0B 
0B036B 91    0135** DW24	OPENUP			; OPENUP
0B036C 07 
0B036D 0B 
0B036E 8E    0136** DW24	OPENOT			; OPENOUT
0B036F 07 
0B0370 0B 
0B0371 11    0137** DW24	PI			; PI
0B0372 08 
0B0373 0B 
0B0374 6A    0138** DW24	POINT			; POINT(
0B0375 46 
0B0376 0B 
0B0377 CE    0139** DW24	POS			; POS
0B0378 06 
0B0379 0B 
0B037A 21    0140** DW24	RAD			; RAD
0B037B 08 
0B037C 0B 
0B037D AE    0141** DW24	RND			; RND
0B037E 08 
0B037F 0B 
0B0380 25    0142** DW24	SGN			; SGN
0B0381 08 
0B0382 0B 
0B0383 39    0143** DW24	SIN			; SIN
0B0384 08 
0B0385 0B 
0B0386 2D    0144** DW24	SQR			; SQR
0B0387 08 
0B0388 0B 
0B0389 31    0145** DW24	TAN			; TAN
0B038A 08 
0B038B 0B 
0B038C 5B    0146** DW24	TOPV			; TO(P)
0B038D 07 
0B038E 0B 
0B038F 06    0147** DW24	TRUE			; TRUE
0B0390 08 
0B0391 0B 
0B0392 23    0148** DW24	USR			; USR
0B0393 17 
0B0394 0B 
0B0395 6B    0149** DW24	VAL			; VAL
0B0396 08 
0B0397 0B 
0B0398 D7    0150** DW24	VPOS			; VPOS
0B0399 06 
0B039A 0B 
0B039B C0    0151** DW24	CHRS			; CHRS
0B039C 09 
0B039D 0B 
0B039E C8    0152** DW24	GETS			; GETS
0B039F 09 
0B03A0 0B 
0B03A1 D9    0153** DW24	INKEYS			; INKEYS
0B03A2 09 
0B03A3 0B 
0B03A4 5E    0154** DW24	LEFTS			; LEFTS(
0B03A5 0A 
0B03A6 0B 
0B03A7 26    0155** DW24	MIDS			; MIDS(
0B03A8 0A 
0B03A9 0B 
0B03AA 7E    0156** DW24	RIGHTS			; RIGHTS(
0B03AB 0A 
0B03AC 0B 
0B03AD 4B    0157** DW24	STRS			; STR$
0B03AE 0B 
0B03AF 0B 
0B03B0 9F    0158** DW24	STRING_			; STRINGS(
0B03B1 0A 
0B03B2 0B 
0B03B3 DF    0159** DW24	EOF			; EOF
0B03B4 06 
0B03B5 0B 
             0160** ;
             0161** FUNTBL_END:		EQU	$
             0162** ; TCMD:			EQU     FUNTOK+(FUNTBL_END-FUNTBL)/3
             0163** TCMD_EV:			EQU     FUNTBL_END-FUNTBL/3+FUNTOK ; reorder because ez80asm doesn't do order of operations
             0164** 
             0165** ANDK:			EQU     80H
             0166** DIVK:			EQU     81H
             0167** EORK:			EQU     82H
             0168** MODK:			EQU     83H
             0169** ORK:			EQU     84H
             0170** ;
0B03B6 F1    0171** SOPTBL:			DW24	SLE			; <= (STRING)
0B03B7 07 
0B03B8 0B 
0B03B9 FA    0172** DW24	SNE			; <>
0B03BA 07 
0B03BB 0B 
0B03BC EA    0173** DW24	SGE			; >=
0B03BD 07 
0B03BE 0B 
0B03BF DB    0174** DW24	SLT			; <
0B03C0 07 
0B03C1 0B 
0B03C2 01    0175** DW24	SEQ			; =
0B03C3 08 
0B03C4 0B 
0B03C5 E2    0176** DW24	SGT			; >
0B03C6 07 
0B03C7 0B 
             0177** ;
             0178** ; EXPR - VARIABLE-TYPE EXPRESSION EVALUATION
             0179** ;     Expression type is returned in A'F':
             0180** ;        Numeric - A' bit 7=0, F' sign bit cleared.
             0181** ;         String - A' bit 7=1, F' sign bit set.
             0182** ; Floating-point or integer result returned in HLH'L'C
             0183** ; Integer result denoted by C=0 and HLH'L' non-zero.
             0184** ; String result returned in string accumulator, DE set.
             0185** ;
             0186** ; Hierarchy is: (1) Variables, functions, constants, bracketed expressions.
             0187** ;               (2) ^
             0188** ;               (3) * / MOD DIV
             0189** ;               (4) + -
             0190** ;               (5) = <> <= >= > <
             0191** ;               (6) AND
             0192** ;               (7) EOR OR
             0193** 
             0194** ;
             0195** ; Level 7: EOR and OR
             0196** ;
0B03C8 CD    0197** EXPR:			CALL    EXPR1			; Get first operator by calling Level 6
0B03C9 E1 
0B03CA 03 
0B03CB 0B 
0B03CC FE    0198** EXPR0A:			CP      EORK            	; Is operator EOR?
0B03CD 82 
0B03CE 28    0199** JR      Z,EXPR0B		; Yes, so skip to next bit
0B03CF 03 
0B03D0 FE    0200** CP      ORK			; Is operator OR
0B03D1 84 
0B03D2 C0    0201** RET     NZ			; No, so return
             0202** ;
0B03D3 CD    0203** EXPR0B:			CALL    SAVE_EV            	; Save first operand
0B03D4 3F 
0B03D5 0C 
0B03D6 0B 
0B03D7 CD    0204** CALL    EXPR1           	; Get second operand
0B03D8 E1 
0B03D9 03 
0B03DA 0B 
0B03DB CD    0205** CALL    DOIT            	; Do the operation
0B03DC 4E 
0B03DD 0C 
0B03DE 0B 
0B03DF 18    0206** JR      EXPR0A          	; And continue
0B03E0 EB 
             0207** ;
             0208** ; Level 6: AND
             0209** ;
0B03E1 CD    0210** EXPR1:			CALL    EXPR2			; Get first operator by calling Level 5
0B03E2 F6 
0B03E3 03 
0B03E4 0B 
0B03E5 FE    0211** EXPR1A:			CP      ANDK			; Is operator AND?
0B03E6 80 
0B03E7 C0    0212** RET     NZ			; No, so return
0B03E8 CD    0213** CALL    SAVE_EV			; Save first operand
0B03E9 3F 
0B03EA 0C 
0B03EB 0B 
0B03EC CD    0214** CALL    EXPR2			; Get second operand
0B03ED F6 
0B03EE 03 
0B03EF 0B 
0B03F0 CD    0215** CALL    DOIT			; Do the operation
0B03F1 4E 
0B03F2 0C 
0B03F3 0B 
0B03F4 18    0216** JR      EXPR1A			; And continue
0B03F5 EF 
             0217** ;
             0218** ; Level 5: Comparisons
             0219** ;
0B03F6 CD    0220** EXPR2:			CALL    EXPR3			; Get first operator by calling Level 4
0B03F7 68 
0B03F8 04 
0B03F9 0B 
0B03FA CD    0221** CALL    RELOP?			; Is it ">", "=" or "<"?
0B03FB 16 
0B03FC 0C 
0B03FD 0B 
0B03FE C0    0222** RET     NZ			; No, so return
0B03FF 47    0223** LD      B,A			; Store the first operator in B
0B0400 FD    0224** INC     IY              	; Bump over operator
0B0401 23 
0B0402 CD    0225** CALL    NXT			;
0B0403 71 
0B0404 0C 
0B0405 0B 
0B0406 CD    0226** CALL    RELOP?          	; Is it a compound operator?
0B0407 16 
0B0408 0C 
0B0409 0B 
0B040A 20    0227** JR      NZ,EXPR2B		; No, so skip next bit
0B040B 09 
0B040C FD    0228** INC     IY			; Bump over operator
0B040D 23 
0B040E B8    0229** CP      B			; Compare with first
0B040F CA    0230** JP      Z,SYNTAX        	; Trap illegal combinations ">>", "==", "<<" (but not "><", "=>", "=<")
0B0410 98 
0B0411 0E 
0B0412 0B 
0B0413 80    0231** ADD     A,B
0B0414 47    0232** LD      B,A			; B: Unique code for the compound operator
0B0415 78    0233** EXPR2B:			LD      A,B			; A: Code for the operator/compound operator
0B0416 08    0234** EX      AF,AF'
0B0417 FA    0235** JP      M,EXPR2S		; If it is a string, then branch here to handle it
0B0418 31 
0B0419 04 
0B041A 0B 
0B041B 08    0236** EX      AF,AF'
0B041C D6    0237** SUB     4
0B041D 04 
0B041E FE    0238** CP      '>'-4
0B041F 3A 
0B0420 20    0239** JR      NZ,EXPR2C
0B0421 02 
0B0422 C6    0240** ADD     A,2
0B0423 02 
0B0424 CD    0241** EXPR2C:			CALL    SAVE1
0B0425 41 
0B0426 0C 
0B0427 0B 
0B0428 CD    0242** CALL    EXPR3
0B0429 68 
0B042A 04 
0B042B 0B 
0B042C CD    0243** CALL    DOIT            	; NB: Must NOT be "JP DOIT"
0B042D 4E 
0B042E 0C 
0B042F 0B 
0B0430 C9    0244** RET
             0245** ;
0B0431 08    0246** EXPR2S:			EX      AF,AF'			; Handle string comparisons
0B0432 3D    0247** DEC     A
0B0433 E6    0248** AND     7
0B0434 07 
0B0435 CD    0249** CALL    PUSHS           	; Save string on the stack
0B0436 B5 
0B0437 0B 
0B0438 0B 
0B0439 F5    0250** PUSH    AF              	; Save the operator
0B043A CD    0251** CALL    EXPR3           	; Get the second string
0B043B 68 
0B043C 04 
0B043D 0B 
0B043E 08    0252** EX      AF,AF'
0B043F F2    0253** JP      P,TYPE_EV_
0B0440 37 
0B0441 05 
0B0442 0B 
0B0443 F1    0254** POP     AF
0B0444 4B    0255** LD      C,E             	; Length of string #2
0B0445 D1    0256** POP     DE
0B0446 21    0257** LD      HL,0
0B0447 00 
0B0448 00 
0B0449 00 
0B044A 39    0258** ADD     HL,SP
0B044B 43    0259** LD      B,E             	; Length of string #1
0B044C D5    0260** PUSH    DE
0B044D 11    0261** LD      DE,ACCS
0B044E 00 
0B044F 4C 
0B0450 0B 
0B0451 EB    0262** EX      DE,HL
0B0452 CD    0263** CALL    DISPT2
0B0453 7D 
0B0454 0C 
0B0455 0B 
0B0456 D1    0264** POP     DE
0B0457 EB    0265** EX      DE,HL
0B0458 7D    0266** LD	A,L
0B0459 21    0267** LD	HL,0
0B045A 00 
0B045B 00 
0B045C 00 
0B045D 6F    0268** LD	L,A
0B045E 39    0269** ADD     HL,SP
0B045F F9    0270** LD      SP,HL
0B0460 EB    0271** EX      DE,HL
0B0461 AF    0272** XOR     A               	; Numeric marker
0B0462 4F    0273** LD      C,A             	; Integer marker
0B0463 08    0274** EX      AF,AF'
0B0464 FD    0275** LD      A,(IY)
0B0465 7E 
0B0466 00 
0B0467 C9    0276** RET
             0277** ;
             0278** ; Level 4: + and -
             0279** ;
0B0468 CD    0280** EXPR3:			CALL    EXPR4			; Get first operator by calling Level 3
0B0469 C5 
0B046A 04 
0B046B 0B 
0B046C FE    0281** EXPR3A:			CP      '-'			; Is it "-"?
0B046D 2D 
0B046E 28    0282** JR      Z,EXPR3B		; Yes, so skip the next bit
0B046F 09 
0B0470 FE    0283** CP      '+'			; Is it "+"?
0B0471 2B 
0B0472 C0    0284** RET     NZ			; No, so return
0B0473 08    0285** EX      AF,AF'			; Get the type
0B0474 FA    0286** JP      M,EXPR3S		; Branch here if string
0B0475 87 
0B0476 04 
0B0477 0B 
0B0478 08    0287** EX      AF,AF'
0B0479 CD    0288** EXPR3B:			CALL    SAVE_EV			; Save the first operator
0B047A 3F 
0B047B 0C 
0B047C 0B 
0B047D CD    0289** CALL    EXPR4			; Fetch the second operator
0B047E C5 
0B047F 04 
0B0480 0B 
0B0481 CD    0290** CALL    DOIT			; Do the operation
0B0482 4E 
0B0483 0C 
0B0484 0B 
0B0485 18    0291** JR      EXPR3A			; And continue
0B0486 E5 
             0292** ;
0B0487 08    0293** EXPR3S:			EX      AF,AF'			; Handle string concatenation
0B0488 FD    0294** INC     IY              	; Bump past the "+"
0B0489 23 
0B048A CD    0295** CALL    PUSHS           	; Save the string on the stack
0B048B B5 
0B048C 0B 
0B048D 0B 
0B048E CD    0296** CALL    EXPR4           	; Fetch the second operator
0B048F C5 
0B0490 04 
0B0491 0B 
0B0492 08    0297** EX      AF,AF'
0B0493 F2    0298** JP      P,TYPE_EV_			; If it is not a string, then Error: "Type mismatch"
0B0494 37 
0B0495 05 
0B0496 0B 
0B0497 01    0299** LD	BC, 0			; Clear BC
0B0498 00 
0B0499 00 
0B049A 00 
0B049B 4B    0300** LD      C,E             	; C: Length of the second string
0B049C D1    0301** POP     DE
0B049D D5    0302** PUSH    DE
0B049E 21    0303** LD      HL,ACCS
0B049F 00 
0B04A0 4C 
0B04A1 0B 
             0304** ; BEGIN MISSING FROM BINARY
             0305** ; LD	A,E			;  E: Length of the first string
             0306** ; LD      DE,ACCS
             0307** ; LD	E,A 			; DE: Pointer to the end of the first string
             0308** ; END MISSING FROM BINARY
0B04A2 54    0309** LD		D,H ; ADDED FROM BINARY
0B04A3 79    0310** LD      A,C
0B04A4 B7    0311** OR      A
0B04A5 28    0312** JR      Z,EXP3S3
0B04A6 0F 
0B04A7 6F    0313** LD      L,A             	; Source
0B04A8 83    0314** ADD     A,E
0B04A9 5F    0315** LD      E,A             	; Destination
0B04AA 3E    0316** LD      A,19
0B04AB 13 
0B04AC DA    0317** JP      C,ERROR_         	; A carry indicates string > 255 bytes, so Error: "String too long"
0B04AD 61 
0B04AE 39 
0B04AF 0B 
0B04B0 D5    0318** PUSH    DE
0B04B1 1D    0319** DEC     E
0B04B2 2D    0320** DEC     L
0B04B3 ED    0321** LDDR                    	; Copy
0B04B4 B8 
0B04B5 D1    0322** POP     DE
0B04B6 D9    0323** EXP3S3:			EXX
0B04B7 C1    0324** POP     BC
0B04B8 CD    0325** CALL    POPS            	; Restore from stack
0B04B9 DF 
0B04BA 0B 
0B04BB 0B 
0B04BC D9    0326** EXX
0B04BD F6    0327** OR      80H             	; Flag as a string
0B04BE 80 
0B04BF 08    0328** EX      AF,AF'
0B04C0 FD    0329** LD      A,(IY)			; Fetch the next character
0B04C1 7E 
0B04C2 00 
0B04C3 18    0330** JR      EXPR3A			; And continue
0B04C4 A7 
             0331** ;
             0332** ; Level 3: * / MOD DIV
             0333** ;
0B04C5 CD    0334** EXPR4:			CALL    EXPR5			; Get first operator by calling Level 2
0B04C6 E6 
0B04C7 04 
0B04C8 0B 
0B04C9 FE    0335** EXPR4A:			CP      '*'			; "*" is valid
0B04CA 2A 
0B04CB 28    0336** JR      Z,EXPR4B
0B04CC 0B 
0B04CD FE    0337** CP      '/'			; "/" is valid
0B04CE 2F 
0B04CF 28    0338** JR      Z,EXPR4B
0B04D0 07 
0B04D1 FE    0339** CP      MODK			; MOD token is valid
0B04D2 83 
0B04D3 28    0340** JR      Z,EXPR4B
0B04D4 03 
0B04D5 FE    0341** CP      DIVK			; DIV token is valid
0B04D6 81 
0B04D7 C0    0342** RET     NZ			; And return if it is anything else
0B04D8 CD    0343** EXPR4B:			CALL    SAVE_EV
0B04D9 3F 
0B04DA 0C 
0B04DB 0B 
0B04DC CD    0344** CALL    EXPR5
0B04DD E6 
0B04DE 04 
0B04DF 0B 
0B04E0 CD    0345** CALL    DOIT
0B04E1 4E 
0B04E2 0C 
0B04E3 0B 
0B04E4 18    0346** JR      EXPR4A
0B04E5 E3 
             0347** ;
             0348** ; Level 2: ^
             0349** ;
0B04E6 CD    0350** EXPR5:			CALL    ITEM			; Get variable
0B04E7 C6 
0B04E8 05 
0B04E9 0B 
0B04EA B7    0351** OR      A               	; Test type
0B04EB 08    0352** EX      AF,AF'          	; Save type
0B04EC CD    0353** EXPR5A:			CALL    NXT			; Skip spaces
0B04ED 71 
0B04EE 0C 
0B04EF 0B 
0B04F0 FE    0354** CP      '^'			; Is the operator "^"?
0B04F1 5E 
0B04F2 C0    0355** RET     NZ			; No, so return
0B04F3 CD    0356** CALL    SAVE_EV			; Save first operand
0B04F4 3F 
0B04F5 0C 
0B04F6 0B 
0B04F7 CD    0357** CALL    ITEM			; Get second operand
0B04F8 C6 
0B04F9 05 
0B04FA 0B 
0B04FB B7    0358** OR      A			; Test type
0B04FC 08    0359** EX      AF,AF'			; Save type
0B04FD CD    0360** CALL    DOIT			; Do the operation
0B04FE 4E 
0B04FF 0C 
0B0500 0B 
0B0501 18    0361** JR      EXPR5A			; And continue
0B0502 E9 
             0362** ;
             0363** ; Evaluate a numeric expression
             0364** ;
0B0503 CD    0365** EXPRN:			CALL    EXPR			; Evaluate expression
0B0504 C8 
0B0505 03 
0B0506 0B 
0B0507 08    0366** EX      AF,AF'			; Get the type
0B0508 F0    0367** RET     P			; And return if it is a number
0B0509 18    0368** JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B050A 2C 
             0369** ;
             0370** ; Evaluate a fixed-point expression
             0371** ;
0B050B CD    0372** EXPRI:			CALL    EXPR			; Evaluate the expression
0B050C C8 
0B050D 03 
0B050E 0B 
0B050F 08    0373** EX      AF,AF'			; Get the type
0B0510 F2    0374** JP      P,SFIX			; If it is numeric, then convert to fixed-point notation
0B0511 63 
0B0512 08 
0B0513 0B 
0B0514 18    0375** JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B0515 21 
             0376** ;
             0377** ; Evaluate a string expression
             0378** ;
0B0516 CD    0379** EXPRS:			CALL    EXPR			; Evaluate the expression
0B0517 C8 
0B0518 03 
0B0519 0B 
0B051A 08    0380** EX      AF,AF'			; Get the type
0B051B F8    0381** RET     M			; And return if it is a string
0B051C 18    0382** JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B051D 19 
             0383** ;
             0384** ; Get a numeric variable
             0385** ;
0B051E CD    0386** ITEMN:			CALL    ITEM			; Get the variable
0B051F C6 
0B0520 05 
0B0521 0B 
0B0522 B7    0387** OR      A			; Test the type
0B0523 F0    0388** RET     P			; And return if it is a number
0B0524 18    0389** JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B0525 11 
             0390** ;
             0391** ; Get a fixed-point variable
             0392** ;
0B0526 CD    0393** ITEMI:			CALL    ITEM			; Get the variable
0B0527 C6 
0B0528 05 
0B0529 0B 
0B052A B7    0394** OR      A			; Test the type
0B052B F2    0395** JP      P,SFIX			; If it is numeric, then convert to fixed-point notation
0B052C 63 
0B052D 08 
0B052E 0B 
0B052F 18    0396** JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B0530 06 
             0397** ;
             0398** ; Get a string variable
             0399** ;
0B0531 CD    0400** ITEMS:			CALL    ITEM			; Get the variable
0B0532 C6 
0B0533 05 
0B0534 0B 
0B0535 B7    0401** OR      A			; Test the type
0B0536 F8    0402** RET     M			; If it is a string, then return
             0403** ;							; Otherwise
0B0537 3E    0404** TYPE_EV_:			LD      A,6			; Error: "Type mismatch"
0B0538 06 
0B0539 C3    0405** JP      ERROR_
0B053A 61 
0B053B 39 
0B053C 0B 
             0406** ;
             0407** ; Evaluate a bracketed expression
             0408** ;
0B053D CD    0409** ITEM1:			CALL    EXPR            	; Evaluate the expression
0B053E C8 
0B053F 03 
0B0540 0B 
0B0541 CD    0410** CALL    BRAKET			; Check for closing bracket
0B0542 30 
0B0543 0C 
0B0544 0B 
0B0545 08    0411** EX      AF,AF'
0B0546 C9    0412** RET
             0413** ;
             0414** ; HEX - Get hexadecimal constant.
             0415** ;   Inputs: ASCII string at (IY)
             0416** ;  Outputs: Integer result in H'L'HL, C=0, A7=0.
             0417** ;           IY updated (points to delimiter)
             0418** ;
0B0547 CD    0419** HEX:			CALL    ZERO			; Set result to 0
0B0548 94 
0B0549 0B 
0B054A 0B 
0B054B CD    0420** CALL    HEXDIG			; Fetch the character from IY
0B054C F9 
0B054D 0B 
0B054E 0B 
0B054F 38    0421** JR      C,BADHEX		; If invalid HEX character, then Error: "Bad HEX"
0B0550 1B 
0B0551 FD    0422** HEX1:			INC     IY			; Move pointer to next character
0B0552 23 
0B0553 E6    0423** AND     0FH			; Clear the top nibble
0B0554 0F 
0B0555 06    0424** LD      B,4			; Loop counter
0B0556 04 
             0425** ;
0B0557 D9    0426** HEX2:			EXX				; Shift the result left B (4) times. This makes
0B0558 52    0427** ADD.S   HL,HL			; space for the incoming nibble in the least significant 4 bits
0B0559 29 
0B055A D9    0428** EXX				; .
0B055B 52    0429** ADC.S   HL,HL			; .
0B055C ED 
0B055D 6A 
0B055E 10    0430** DJNZ    HEX2			; And loop
0B055F F7 
0B0560 D9    0431** EXX
0B0561 B5    0432** OR      L			; OR in the digit
0B0562 6F    0433** LD      L,A
0B0563 D9    0434** EXX
             0435** ;
0B0564 CD    0436** CALL    HEXDIG			; Fetch the next character
0B0565 F9 
0B0566 0B 
0B0567 0B 
0B0568 30    0437** JR      NC,HEX1			; If it is a HEX digit then loop
0B0569 E7 
0B056A AF    0438** XOR     A			; Clear A
0B056B C9    0439** RET
             0440** ;
0B056C 3E    0441** BADHEX:			LD      A,28
0B056D 1C 
0B056E C3    0442** JP      ERROR_          	; Error: "Bad HEX"
0B056F 61 
0B0570 39 
0B0571 0B 
             0443** ;
             0444** ; BIN - Get binary constant.
             0445** ;   Inputs: ASCII string at (IY)
             0446** ;  Outputs: Integer result in H'L'HL, C=0, A7=0.
             0447** ;           IY updated (points to delimiter)
             0448** ;
0B0572 CD    0449** BIN:			CALL    ZERO			; Set result to 0
0B0573 94 
0B0574 0B 
0B0575 0B 
0B0576 CD    0450** CALL	BINDIG			; Fetch the character from IY
0B0577 0C 
0B0578 0C 
0B0579 0B 
0B057A 38    0451** JR	C,BADBIN		; If invalid BIN character then Error: "Bad Binary"
0B057B 13 
0B057C FD    0452** BIN1:			INC	IY			; Move pointer to next character
0B057D 23 
0B057E 0F    0453** RRCA				; Bit 0 of ASCII '0' is 0, and ASCII '1' is 1, so shift that bit into carry
0B057F D9    0454** EXX				;
0B0580 52    0455** ADC.S	HL,HL			; And shift back into into H'L'HL (note the ADC)
0B0581 ED 
0B0582 6A 
0B0583 D9    0456** EXX
0B0584 52    0457** ADC.S	HL,HL
0B0585 ED 
0B0586 6A 
0B0587 CD    0458** CALL	BINDIG			; Fetch the next character
0B0588 0C 
0B0589 0C 
0B058A 0B 
0B058B 30    0459** JR	NC,BIN1
0B058C EF 
0B058D AF    0460** XOR	A			; Clear A
0B058E C9    0461** RET
             0462** ;
0B058F 3E    0463** BADBIN:			LD	A, 28			; Error: "Bad Binary" - reuses same error code as Bad HEX
0B0590 1C 
0B0591 CD    0464** CALL	EXTERR
0B0592 78 
0B0593 39 
0B0594 0B 
0B0595 42    0465** DB	"Bad Binary", 0
0B0596 61 
0B0597 64 
0B0598 20 
0B0598 42   
0B0599 69 
0B059A 6E 
0B059B 61 
0B059B 72   
0B059C 79 
0B059D 00 
             0466** ;
             0467** ; MINUS - Unary minus.
             0468** ;   Inputs: IY = text pointer
             0469** ;  Outputs: Numeric result, same type as argument.
             0470** ;           Result in H'L'HLC
             0471** ;
0B05A0 CD    0472** MINUS:			CALL    ITEMN			; Get the numeric argument
0B05A1 1E 
0B05A2 05 
0B05A3 0B 
0B05A4 0D    0473** MINUS0:			DEC     C			; Check exponent (C)
0B05A5 0C    0474** INC     C			; If it is zero, then it's either a FP zero or an integer
0B05A6 28    0475** JR      Z,NEGATE_EV        	; So do an integer negation
0B05A7 06 
             0476** ;
0B05A8 7C    0477** LD      A,H			; Do a FP negation by
0B05A9 EE    0478** XOR     80H             	; Toggling the sign bit (H)
0B05AA 80 
0B05AB 67    0479** LD      H,A
0B05AC AF    0480** XOR     A               	; Numeric marker
0B05AD C9    0481** RET
             0482** ;
0B05AE D9    0483** NEGATE_EV:			EXX				; This section does a two's complement negation on H'L'HLC
0B05AF 7C    0484** LD      A,H			; First do a one's complement by negating all the bytes
0B05B0 2F    0485** CPL
0B05B1 67    0486** LD      H,A
0B05B2 7D    0487** LD      A,L
0B05B3 2F    0488** CPL
0B05B4 6F    0489** LD      L,A
0B05B5 D9    0490** EXX
0B05B6 7C    0491** LD      A,H
0B05B7 2F    0492** CPL
0B05B8 67    0493** LD      H,A
0B05B9 7D    0494** LD      A,L
0B05BA 2F    0495** CPL
0B05BB 6F    0496** LD      L,A
0B05BC D9    0497** ADD1:			EXX				; Then add 1
0B05BD 23    0498** INC     HL
0B05BE 7C    0499** LD      A,H
0B05BF B5    0500** OR      L
0B05C0 D9    0501** EXX
0B05C1 3E    0502** LD      A,0             	; Numeric marker
0B05C2 00 
0B05C3 C0    0503** RET     NZ
0B05C4 23    0504** INC     HL
0B05C5 C9    0505** RET
             0506** ;
             0507** ; ITEM - VARIABLE TYPE NUMERIC OR STRING ITEM.
             0508** ; Item type is returned in A:  Bit 7=0 numeric.
             0509** ;                              Bit 7=1 string.
             0510** ; Numeric item returned in HLH'L'C.
             0511** ; String item returned in string accumulator,
             0512** ;   DE addresses byte after last (E=length).
             0513** ;
0B05C6 CD    0514** ITEM:			CALL    CHECK			; Check there's at least a page of free memory left and Error: "No room" if not
0B05C7 50 
0B05C8 18 
0B05C9 0B 
0B05CA CD    0515** CALL    NXT			; Skip spaces
0B05CB 71 
0B05CC 0C 
0B05CD 0B 
0B05CE FD    0516** INC     IY			; Move to the prefix character
0B05CF 23 
0B05D0 FE    0517** CP      '&'			; If `&`
0B05D1 26 
0B05D2 CA    0518** JP      Z,HEX           	; Then get a HEX constant
0B05D3 47 
0B05D4 05 
0B05D5 0B 
0B05D6 FE    0519** CP	'%'			; If '%'
0B05D7 25 
0B05D8 28    0520** JR	Z,BIN			; Then get a BINARY constant
0B05D9 98 
0B05DA FE    0521** CP      '-'			; If `-`
0B05DB 2D 
0B05DC 28    0522** JR      Z,MINUS         	; Then get a negative number
0B05DD C2 
0B05DE FE    0523** CP      '+'			; If `+`
0B05DF 2B 
0B05E0 CA    0524** JP      Z,ITEMN         	; Then just fetch the number (unary plus)
0B05E1 1E 
0B05E2 05 
0B05E3 0B 
0B05E4 FE    0525** CP      '('			; If `(`
0B05E5 28 
0B05E6 CA    0526** JP      Z,ITEM1         	; Start of a bracketed expression
0B05E7 3D 
0B05E8 05 
0B05E9 0B 
0B05EA FE    0527** CP      34			; If `"`
0B05EB 22 
0B05EC 28    0528** JR      Z,CONS          	; Start of a string constant
0B05ED 7A 
0B05EE FE    0529** CP      TCMD_EV			; Is it out of range of the function table?
0B05EF C6 
0B05F0 D2    0530** JP      NC,SYNTAX       	; Error: "Syntax Error"
0B05F1 98 
0B05F2 0E 
0B05F3 0B 
0B05F4 FE    0531** CP      FUNTOK			; If it is in range, then
0B05F5 8D 
0B05F6 D2    0532** JP      NC,DISPAT       	; It's a function
0B05F7 84 
0B05F8 0C 
0B05F9 0B 
0B05FA FD    0533** DEC     IY
0B05FB 2B 
0B05FC FE    0534** CP      ':'
0B05FD 3A 
0B05FE 30    0535** JR      NC,ITEM2		; VARIABLE?
0B05FF 0C 
0B0600 FE    0536** CP      '0'
0B0601 30 
0B0602 D2    0537** JP      NC,CON			; NUMERIC CONSTANT
0B0603 8F 
0B0604 06 
0B0605 0B 
0B0606 FE    0538** CP      '.'
0B0607 2E 
0B0608 CA    0539** JP      Z,CON			; NUMERIC CONSTANT
0B0609 8F 
0B060A 06 
0B060B 0B 
0B060C CD    0540** ITEM2:			CALL    GETVAR			; VARIABLE
0B060D 3B 
0B060E 3C 
0B060F 0B 
0B0610 20    0541** JR      NZ,NOSUCH
0B0611 37 
0B0612 B7    0542** OR      A
0B0613 FA    0543** JP      M,LOADS			; STRING VARIABLE
0B0614 A1 
0B0615 06 
0B0616 0B 
0B0617 B7    0544** LOADN:			OR      A
0B0618 28    0545** JR      Z,LOAD1			; BYTE VARIABLE
0B0619 20 
0B061A 0E    0546** LD      C,0
0B061B 00 
0B061C CB    0547** BIT     0,A
0B061D 47 
0B061E 28    0548** JR      Z,LOAD4			; INTEGER VARIABLE
0B061F 03 
0B0620 DD    0549** LOAD5:			LD      C,(IX+4)
0B0621 4E 
0B0622 04 
0B0623 D9    0550** LOAD4:			EXX
0B0624 21    0551** LD	HL, 0			; TODO: Optimise
0B0625 00 
0B0626 00 
0B0627 00 
0B0628 DD    0552** LD      L,(IX+0)
0B0629 6E 
0B062A 00 
0B062B DD    0553** LD      H,(IX+1)
0B062C 66 
0B062D 01 
0B062E D9    0554** EXX
0B062F 21    0555** LD	HL, 0			; TODO: Optimise
0B0630 00 
0B0631 00 
0B0632 00 
0B0633 DD    0556** LD      L,(IX+2)
0B0634 6E 
0B0635 02 
0B0636 DD    0557** LD      H,(IX+3)
0B0637 66 
0B0638 03 
0B0639 C9    0558** RET
             0559** ;
0B063A 21    0560** LOAD1:			LD      HL,0
0B063B 00 
0B063C 00 
0B063D 00 
0B063E D9    0561** EXX
0B063F 21    0562** LD      HL,0			; TODO: Optimise
0B0640 00 
0B0641 00 
0B0642 00 
0B0643 DD    0563** LD      L,(IX+0)
0B0644 6E 
0B0645 00 
0B0646 D9    0564** EXX
0B0647 4C    0565** LD      C,H
0B0648 C9    0566** RET
             0567** ;
0B0649 DA    0568** NOSUCH:			JP      C,SYNTAX
0B064A 98 
0B064B 0E 
0B064C 0B 
0B064D 3A    0569** LD      A,(LISTON)
0B064E 40 
0B064F 4F 
0B0650 0B 
0B0651 CB    0570** BIT     5,A
0B0652 6F 
0B0653 3E    0571** LD      A,26
0B0654 1A 
0B0655 20    0572** JR      NZ,ERROR0_EV		; Throw "No such variable"
0B0656 26 
0B0657 FD    0573** NOS1:			INC     IY
0B0658 23 
0B0659 CD    0574** CALL    RANGE
0B065A 70 
0B065B 3E 
0B065C 0B 
0B065D 30    0575** JR      NC,NOS1
0B065E F8 
0B065F DD    0576** LD      IX,PC
0B0660 21 
0B0661 40 
0B0662 4E 
0B0662 0B   
0B0664 AF    0577** XOR     A
0B0665 4F    0578** LD      C,A
0B0666 18    0579** JR      LOAD4
0B0667 BB 
             0580** ;
             0581** ;CONS - Get string constant from ASCII string.
             0582** ;   Inputs: ASCII string at (IY)
             0583** ;  Outputs: Result in string accumulator.
             0584** ;           D = MS byte of ACCS, E = string length
             0585** ;           A7 = 1 (string marker)
             0586** ;           IY updated
             0587** ;
0B0668 11    0588** CONS:			LD      DE,ACCS			; DE: Pointer to the string accumulator
0B0669 00 
0B066A 4C 
0B066B 0B 
0B066C FD    0589** CONS3:			LD      A,(IY)			; Fetch the first character and
0B066D 7E 
0B066E 00 
0B066F FD    0590** INC     IY			; Increment the pointer
0B0670 23 
0B0671 FE    0591** CP      '"'			; Check for start quote
0B0672 22 
0B0673 28    0592** JR      Z,CONS2			; Yes, so jump to the bit that parses the string
0B0674 0C 
             0593** ;
0B0675 12    0594** CONS1:			LD      (DE),A			; Store the character in the string accumulator
0B0676 1C    0595** INC     E			; Increment the string accumulator pointer
0B0677 FE    0596** CP      CR			; Is it CR
0B0678 0D 
0B0679 20    0597** JR      NZ,CONS3		; No, so keep looping
0B067A F1 
             0598** ;
0B067B 3E    0599** LD      A,9
0B067C 09 
0B067D C3    0600** ERROR0_EV:			JP      ERROR_           	; Throw error "Missing '"'
0B067E 61 
0B067F 39 
0B0680 0B 
             0601** ;
0B0681 FD    0602** CONS2:			LD      A,(IY)			; Fetch the next character
0B0682 7E 
0B0683 00 
0B0684 FE    0603** CP      '"'			; Check for end quote?
0B0685 22 
0B0686 FD    0604** INC     IY			; Increment the pointer
0B0687 23 
0B0688 28    0605** JR      Z,CONS1			; It is the end of string marker so jump to the end routine
0B0689 EB 
0B068A FD    0606** DEC     IY			;
0B068B 2B 
0B068C 3E    0607** LD      A,80H           	; String marker
0B068D 80 
0B068E C9    0608** RET
             0609** ;
             0610** ;CON - Get unsigned numeric constant from ASCII string.
             0611** ;   Inputs: ASCII string at (IY).
             0612** ;  Outputs: Variable-type result in HLH'L'C
             0613** ;           IY updated (points to delimiter)
             0614** ;           A7 = 0 (numeric marker)
             0615** ;
0B068F FD    0616** CON:			PUSH    IY
0B0690 E5 
0B0691 DD    0617** POP     IX
0B0692 E1 
0B0693 3E    0618** LD      A,36
0B0694 24 
0B0695 CD    0619** CALL    FPP
0B0696 6B 
0B0697 22 
0B0698 0B 
0B0699 38    0620** JR      C,ERROR0_EV
0B069A E2 
0B069B DD    0621** PUSH    IX
0B069C E5 
0B069D FD    0622** POP     IY
0B069E E1 
0B069F AF    0623** XOR     A
0B06A0 C9    0624** RET
             0625** ;
0B06A1 11    0626** LOADS:			LD      DE,ACCS			; Where to store the string
0B06A2 00 
0B06A3 4C 
0B06A4 0B 
0B06A5 1F    0627** RRA
0B06A6 30    0628** JR      NC,LOADS2       	; Skip if it is a fixed string
0B06A7 1A 
             0629** ;
0B06A8 D9    0630** EXX				; This block was a call to LOAD4
0B06A9 DD    0631** LD      L,(IX+0)		; The length of the string currently stored in the allocated space
0B06AA 6E 
0B06AB 00 
0B06AC DD    0632** LD      H,(IX+1)		; The maximum original string length
0B06AD 66 
0B06AE 01 
0B06AF D9    0633** EXX
0B06B0 DD    0634** LD	HL,(IX+2)		; Address of the string (24-bit)
0B06B1 27 
0B06B2 02 
             0635** ;
0B06B3 D9    0636** EXX
0B06B4 7D    0637** LD      A,L
0B06B5 D9    0638** EXX
0B06B6 B7    0639** OR      A
0B06B7 01    0640** LD	BC,0			; BC: Number of bytes to copy
0B06B8 00 
0B06B9 00 
0B06BA 00 
0B06BB 4F    0641** LD      C,A
0B06BC 3E    0642** LD      A,80H           	; String marker
0B06BD 80 
0B06BE C8    0643** RET     Z
0B06BF ED    0644** LDIR
0B06C0 B0 
0B06C1 C9    0645** RET
0B06C2 7E    0646** LOADS2:			LD      A,(HL)
0B06C3 12    0647** LD      (DE),A
0B06C4 23    0648** INC     HL
0B06C5 FE    0649** CP      CR
0B06C6 0D 
0B06C7 3E    0650** LD      A,80H           	; String marker
0B06C8 80 
0B06C9 C8    0651** RET     Z
0B06CA 1C    0652** INC     E
0B06CB 20    0653** JR      NZ,LOADS2
0B06CC F5 
0B06CD C9    0654** RET                     	; Return null string
             0655** ;
             0656** ;VARIABLE-TYPE FUNCTIONS:
             0657** ;
             0658** ;Result returned in HLH'L'C (floating point)
             0659** ;Result returned in HLH'L' (C=0) (integer)
             0660** ;Result returned in string accumulator & DE (string)
             0661** ;All registers destroyed.
             0662** ;IY (text pointer) updated.
             0663** ;Bit 7 of A indicates type: 0 = numeric, 1 = string.
             0664** ;
             0665** ;POS - horizontal cursor position.
             0666** ;VPOS - vertical cursor position.
             0667** ;EOF - return status of file.
             0668** ;BGET - read byte from file.
             0669** ;INKEY - as GET but wait only n centiseconds.
             0670** ;GET - wait for keypress and return ASCII value.
             0671** ;GET(n) - input from Z80 port n.
             0672** ;ASC - ASCII value of string.
             0673** ;LEN - length of string.
             0674** ;LOMEM - location of dynamic variables.
             0675** ;HIMEM - top of available RAM.
             0676** ;PAGE - start of current text page.
             0677** ;TOP - address of first free byte after program.
             0678** ;ERL - line number where last error occurred.
             0679** ;ERR - number of last error.
             0680** ;COUNT - number of printing characters since CR.
             0681** ;Results are integer numeric.
             0682** ;
0B06CE CD    0683** POS:			CALL    GETCSR			; Return the horizontal cursor position
0B06CF CD 
0B06D0 40 
0B06D1 0B 
0B06D2 EB    0684** EX      DE,HL			;  L: The X cursor position
0B06D3 C3    0685** JP      COUNT1			; Return an 8-bit value
0B06D4 82 
0B06D5 07 
0B06D6 0B 
             0686** ;
0B06D7 CD    0687** VPOS:			CALL    GETCSR			; Return the vertical cursor position
0B06D8 CD 
0B06D9 40 
0B06DA 0B 
0B06DB C3    0688** JP      COUNT1			; Return an 8-bit value
0B06DC 82 
0B06DD 07 
0B06DE 0B 
             0689** ;
0B06DF CD    0690** EOF:			CALL    CHANEL			; Check for EOF
0B06E0 87 
0B06E1 1A 
0B06E2 0B 
0B06E3 CD    0691** CALL    OSSTAT
0B06E4 45 
0B06E5 45 
0B06E6 0B 
0B06E7 CA    0692** JP      Z,TRUE			; Yes, so return true
0B06E8 06 
0B06E9 08 
0B06EA 0B 
0B06EB C3    0693** JP      ZERO			; Otherwise return false (zero)
0B06EC 94 
0B06ED 0B 
0B06EE 0B 
             0694** ;
0B06EF CD    0695** BGET:			CALL    CHANEL          	; Channel number
0B06F0 87 
0B06F1 1A 
0B06F2 0B 
0B06F3 CD    0696** CALL    OSBGET
0B06F4 34 
0B06F5 45 
0B06F6 0B 
0B06F7 6F    0697** LD      L,A
0B06F8 C3    0698** JP      COUNT0			; Return an 8-bit value
0B06F9 80 
0B06FA 07 
0B06FB 0B 
             0699** ;
0B06FC CD    0700** INKEY:			CALL    ITEMI			; Get the argument
0B06FD 26 
0B06FE 05 
0B06FF 0B 
0B0700 CB    0701** BIT	7, H			; Check the sign
0B0701 7C 
0B0702 D9    0702** EXX				; HL: The argument
0B0703 C2    0703** JP	NZ, INKEYM		; It's negative, so do INKEY(-n)
0B0704 EC 
0B0705 09 
0B0706 0B 
0B0707 CD    0704** CALL	INKEY0 			; Do INKEY(n)
0B0708 DE 
0B0709 09 
0B070A 0B 
0B070B 18    0705** JR      ASC0			; Return a numeric value
0B070C 1D 
             0706** ;
0B070D CD    0707** GET:			CALL    NXT			; Skip whitespace
0B070E 71 
0B070F 0C 
0B0710 0B 
0B0711 FE    0708** CP      '('			; Is it GET(
0B0712 28 
0B0713 20    0709** JR      NZ,GET0			; No, so get a keyboard character
0B0714 0B 
0B0715 CD    0710** CALL    ITEMI           	; Yes, so fetch the port address
0B0716 26 
0B0717 05 
0B0718 0B 
0B0719 D9    0711** EXX
0B071A 44    0712** LD      B,H			; BC: The port address
0B071B 4D    0713** LD      C,L
0B071C ED    0714** IN      L,(C)           	;  L: Input from port BC
0B071D 68 
0B071E 18    0715** JR      COUNT0			; Return an 8-bit value
0B071F 60 
             0716** ;
0B0720 CD    0717** GET0:			CALL    GETS			; Read the keyboard character
0B0721 C8 
0B0722 09 
0B0723 0B 
0B0724 18    0718** JR      ASC1			; And return the value
0B0725 0A 
             0719** ;
0B0726 CD    0720** ASC:			CALL    ITEMS			; Get the string argument argument
0B0727 31 
0B0728 05 
0B0729 0B 
0B072A AF    0721** ASC0:			XOR     A			; Quickly check the length of the string in ACCS
0B072B BB    0722** CP      E			; Is the pointer 0
0B072C CA    0723** JP      Z,TRUE          	; Yes, so return -1 as it is a null string
0B072D 06 
0B072E 08 
0B072F 0B 
0B0730 2A    0724** ASC1:			LD      HL,(ACCS)		;  L: The first character (H will be discarded in COUNT0
0B0731 00 
0B0732 4C 
0B0733 0B 
0B0734 18    0725** JR      COUNT0			; An 8-bit value
0B0735 4A 
             0726** ;
0B0736 CD    0727** LEN:			CALL    ITEMS			; Get the string argument
0B0737 31 
0B0738 05 
0B0739 0B 
0B073A EB    0728** EX      DE,HL			; HL: Pointer into ACCS
0B073B 18    0729** JR      COUNT0			; Return L
0B073C 43 
             0730** ;
0B073D 2A    0731** LOMEMV:			LD      HL,(LOMEM)		; Return the LOMEM system variable
0B073E 1A 
0B073F 4F 
0B0740 0B 
0B0741 3A    0732** LD	A, (LOMEM+2)
0B0742 1C 
0B0743 4F 
0B0744 0B 
0B0745 18    0733** JR      COUNT2			; A 24-bit value
0B0746 41 
             0734** ;
0B0747 2A    0735** HIMEMV:			LD      HL,(HIMEM)		; Return the HIMEM system variable
0B0748 20 
0B0749 4F 
0B074A 0B 
0B074B 3A    0736** LD	A, (HIMEM+2)
0B074C 22 
0B074D 4F 
0B074E 0B 
0B074F 18    0737** JR      COUNT2			; A 24-bit value
0B0750 37 
             0738** ;
0B0751 2A    0739** PAGEV:			LD    	HL,(PAGE_)		; Return the PAGE system variable
0B0752 14 
0B0753 4F 
0B0754 0B 
0B0755 3A    0740** LD	A, (PAGE_+2)		; A 24-bit value
0B0756 16 
0B0757 4F 
0B0758 0B 
0B0759 18    0741** JR      COUNT2
0B075A 2D 
             0742** ;
0B075B FD    0743** TOPV:			LD      A,(IY)			; Return the TOP system variable
0B075C 7E 
0B075D 00 
0B075E FD    0744** INC     IY              	; Skip "P"
0B075F 23 
0B0760 FE    0745** CP      'P'
0B0761 50 
0B0762 C2    0746** JP      NZ,SYNTAX       	; Throw "Syntax Error"
0B0763 98 
0B0764 0E 
0B0765 0B 
0B0766 2A    0747** LD      HL,(TOP)
0B0767 17 
0B0768 4F 
0B0769 0B 
0B076A 3A    0748** LD	A, (TOP+2)
0B076B 19 
0B076C 4F 
0B076D 0B 
0B076E 18    0749** JR      COUNT2
0B076F 18 
             0750** ;
0B0770 2A    0751** ERLV:			LD      HL,(ERL)		; Return the error line
0B0771 33 
0B0772 4F 
0B0773 0B 
0B0774 18    0752** JR      COUNT1			; A 16-bit value
0B0775 0C 
             0753** ;
0B0776 2A    0754** ERRV:			LD      HL,(ERR)		; Return the error value
0B0777 3F 
0B0778 4F 
0B0779 0B 
0B077A 18    0755** JR      COUNT0			; An 8-bit value
0B077B 04 
             0756** ;
0B077C 2A    0757** COUNTV:			LD      HL,(COUNT)		; Return the print position sysvar
0B077D 3D 
0B077E 4F 
0B077F 0B 
             0758** 
0B0780 26    0759** COUNT0:			LD      H,0			; Return L
0B0781 00 
0B0782 D9    0760** COUNT1:			EXX				; Return HL
0B0783 AF    0761** XOR     A
0B0784 4F    0762** LD      C,A             	; Integer marker
0B0785 67    0763** LD      H,A
0B0786 6F    0764** LD      L,A
0B0787 C9    0765** RET
0B0788 D9    0766** COUNT2:			EXX
0B0789 6F    0767** LD	L,A
0B078A AF    0768** XOR	A
0B078B 4F    0769** LD	C,A			; Integer marker
0B078C 67    0770** LD	H,A
0B078D C9    0771** RET
             0772** ;
             0773** ;OPENIN - Open a file for reading.
             0774** ;OPENOT - Open a file for writing.
             0775** ;OPENUP - Open a file for reading or writing.
             0776** ;Result is integer channel number (0 if error)
             0777** ;
0B078E AF    0778** OPENOT:			XOR     A			; Open for writing
0B078F 18    0779** JR	OPENIN_1
0B0790 06 
             0780** ;
0B0791 3E    0781** OPENUP:			LD      A,2			; Open for reading / writing
0B0792 02 
0B0793 18    0782** JR	OPENIN_1
0B0794 02 
             0783** ;
0B0795 3E    0784** OPENIN:			LD      A,1			; Open for reading
0B0796 01 
             0785** ;
0B0797 F5    0786** OPENIN_1:		PUSH    AF              	; Save OPEN type
0B0798 CD    0787** CALL    ITEMS           	; Fetch the filename
0B0799 31 
0B079A 05 
0B079B 0B 
0B079C 3E    0788** LD      A,CR
0B079D 0D 
0B079E 12    0789** LD      (DE),A
0B079F F1    0790** POP     AF              	; Restore the OPEN type
0B07A0 C6    0791** ADD     A,-1            	; Affect the flags
0B07A1 FF 
0B07A2 21    0792** LD      HL,ACCS
0B07A3 00 
0B07A4 4C 
0B07A5 0B 
0B07A6 CD    0793** CALL    OSOPEN			; Call the OS specific OPEN routine in patch.asm
0B07A7 1D 
0B07A8 45 
0B07A9 0B 
0B07AA 6F    0794** LD      L,A			; L: Channel number
0B07AB 18    0795** JR      COUNT0			; Return channel number to BASIC
0B07AC D3 
             0796** ;
             0797** ;EXT - Return length of file.
             0798** ;PTR_EV - Return current file pointer.
             0799** ;Results are integer numeric.
             0800** ;
0B07AD CD    0801** EXT:			CALL    CHANEL
0B07AE 87 
0B07AF 1A 
0B07B0 0B 
0B07B1 CD    0802** CALL    GETEXT
0B07B2 7B 
0B07B3 45 
0B07B4 0B 
0B07B5 18    0803** JR      TIME0
0B07B6 15 
             0804** ;
0B07B7 CD    0805** PTR_EV:			CALL    CHANEL
0B07B8 87 
0B07B9 1A 
0B07BA 0B 
0B07BB CD    0806** CALL    GETPTR
0B07BC 4F 
0B07BD 45 
0B07BE 0B 
0B07BF 18    0807** JR      TIME0
0B07C0 0B 
             0808** ;
             0809** ;TIME - Return current value of elapsed time.
             0810** ;Result is integer numeric.
             0811** ;
0B07C1 FD    0812** TIMEV:			LD      A,(IY)
0B07C2 7E 
0B07C3 00 
0B07C4 FE    0813** CP      '$'
0B07C5 24 
0B07C6 28    0814** JR      Z,TIMEVS
0B07C7 0A 
0B07C8 CD    0815** CALL    GETIME
0B07C9 AD 
0B07CA 40 
0B07CB 0B 
0B07CC D5    0816** TIME0:			PUSH    DE
0B07CD D9    0817** EXX
0B07CE E1    0818** POP     HL
0B07CF AF    0819** XOR     A
0B07D0 4F    0820** LD      C,A
0B07D1 C9    0821** RET
             0822** ;
             0823** ;TIME$ - Return date/time string.
             0824** ;Result is string
             0825** ;
0B07D2 FD    0826** TIMEVS:			INC     IY              ;SKIP $
0B07D3 23 
0B07D4 CD    0827** CALL    GETIMS
0B07D5 94 
0B07D6 45 
0B07D7 0B 
0B07D8 3E    0828** LD      A,80H           ;MARK STRING
0B07D9 80 
0B07DA C9    0829** RET
             0830** ;
             0831** ;String comparison:
             0832** ;
0B07DB CD    0833** SLT:			CALL    SCP
0B07DC 90 
0B07DD 0B 
0B07DE 0B 
0B07DF D0    0834** RET     NC
0B07E0 18    0835** JR      TRUE
0B07E1 24 
             0836** ;
0B07E2 CD    0837** SGT:			CALL    SCP
0B07E3 90 
0B07E4 0B 
0B07E5 0B 
0B07E6 C8    0838** RET     Z
0B07E7 D8    0839** RET     C
0B07E8 18    0840** JR      TRUE
0B07E9 1C 
             0841** ;
0B07EA CD    0842** SGE:			CALL    SCP
0B07EB 90 
0B07EC 0B 
0B07ED 0B 
0B07EE D8    0843** RET     C
0B07EF 18    0844** JR      TRUE
0B07F0 15 
             0845** ;
0B07F1 CD    0846** SLE:			CALL    SCP
0B07F2 90 
0B07F3 0B 
0B07F4 0B 
0B07F5 28    0847** JR      Z,TRUE
0B07F6 0F 
0B07F7 D0    0848** RET     NC
0B07F8 18    0849** JR      TRUE
0B07F9 0C 
             0850** ;
0B07FA CD    0851** SNE:			CALL    SCP
0B07FB 90 
0B07FC 0B 
0B07FD 0B 
0B07FE C8    0852** RET     Z
0B07FF 18    0853** JR      TRUE
0B0800 05 
             0854** ;
0B0801 CD    0855** SEQ:			CALL    SCP
0B0802 90 
0B0803 0B 
0B0804 0B 
0B0805 C0    0856** RET     NZ
0B0806 3E    0857** TRUE:			LD      A,-1
0B0807 FF 
0B0808 D9    0858** EXX
0B0809 67    0859** LD      H,A
0B080A 6F    0860** LD      L,A
0B080B D9    0861** EXX
0B080C 67    0862** LD      H,A
0B080D 6F    0863** LD      L,A
0B080E 3C    0864** INC     A
0B080F 4F    0865** LD      C,A
0B0810 C9    0866** RET
             0867** ;
             0868** ;PI - Return PI (3.141592654)
             0869** ;Result is floating-point numeric.
             0870** ;
0B0811 3E    0871** PI:			LD      A,35
0B0812 23 
0B0813 18    0872** JR      FPP1
0B0814 44 
             0873** ;
             0874** ;ABS - Absolute value
             0875** ;Result is numeric, variable type.
             0876** ;
0B0815 3E    0877** ABSV:			LD      A,16
0B0816 10 
0B0817 18    0878** JR      FPPN
0B0818 3A 
             0879** ;
             0880** ;NOT - Complement integer.
             0881** ;Result is integer numeric.
             0882** ;
0B0819 3E    0883** NOTK:			LD      A,26
0B081A 1A 
0B081B 18    0884** JR      FPPN
0B081C 36 
             0885** ;
             0886** ;DEG - Convert radians to degrees
             0887** ;Result is floating-point numeric.
             0888** ;
0B081D 3E    0889** DEG:			LD      A,21
0B081E 15 
0B081F 18    0890** JR      FPPN
0B0820 32 
             0891** ;
             0892** ;RAD - Convert degrees to radians
             0893** ;Result is floating-point numeric.
             0894** ;
0B0821 3E    0895** RAD:			LD      A,27
0B0822 1B 
0B0823 18    0896** JR      FPPN
0B0824 2E 
             0897** ;
             0898** ;SGN - Return -1, 0 or +1
             0899** ;Result is integer numeric.
             0900** ;
0B0825 3E    0901** SGN:			LD      A,28
0B0826 1C 
0B0827 18    0902** JR      FPPN
0B0828 2A 
             0903** ;
             0904** ;INT - Floor function
             0905** ;Result is integer numeric.
             0906** ;
0B0829 3E    0907** INT_:			LD      A,23
0B082A 17 
0B082B 18    0908** JR      FPPN
0B082C 26 
             0909** ;
             0910** ;SQR - square root
             0911** ;Result is floating-point numeric.
             0912** ;
0B082D 3E    0913** SQR:			LD      A,30
0B082E 1E 
0B082F 18    0914** JR      FPPN
0B0830 22 
             0915** ;
             0916** ;TAN - Tangent function
             0917** ;Result is floating-point numeric.
             0918** ;
0B0831 3E    0919** TAN:			LD      A,31
0B0832 1F 
0B0833 18    0920** JR      FPPN
0B0834 1E 
             0921** ;
             0922** ;COS - Cosine function
             0923** ;Result is floating-point numeric.
             0924** ;
0B0835 3E    0925** COS:			LD      A,20
0B0836 14 
0B0837 18    0926** JR      FPPN
0B0838 1A 
             0927** ;
             0928** ;SIN - Sine function
             0929** ;Result is floating-point numeric.
             0930** ;
0B0839 3E    0931** SIN:			LD      A,29
0B083A 1D 
0B083B 18    0932** JR      FPPN
0B083C 16 
             0933** ;
             0934** ;EXP - Exponential function
             0935** ;Result is floating-point numeric.
             0936** ;
0B083D 3E    0937** EXP:			LD      A,22
0B083E 16 
0B083F 18    0938** JR      FPPN
0B0840 12 
             0939** ;
             0940** ;LN - Natural log.
             0941** ;Result is floating-point numeric.
             0942** ;
0B0841 3E    0943** LN:			LD      A,24
0B0842 18 
0B0843 18    0944** JR      FPPN
0B0844 0E 
             0945** ;
             0946** ;LOG - base-10 logarithm.
             0947** ;Result is floating-point numeric.
             0948** ;
0B0845 3E    0949** LOG:			LD      A,25
0B0846 19 
0B0847 18    0950** JR      FPPN
0B0848 0A 
             0951** ;
             0952** ;ASN - Arc-sine
             0953** ;Result is floating-point numeric.
             0954** ;
0B0849 3E    0955** ASN:			LD      A,18
0B084A 12 
0B084B 18    0956** JR      FPPN
0B084C 06 
             0957** ;
             0958** ;ATN - arc-tangent
             0959** ;Result is floating-point numeric.
             0960** ;
0B084D 3E    0961** ATN:			LD      A,19
0B084E 13 
0B084F 18    0962** JR      FPPN
0B0850 02 
             0963** ;
             0964** ;ACS - arc-cosine
             0965** ;Result is floating point numeric.
             0966** ;
0B0851 3E    0967** ACS:			LD      A,17
0B0852 11 
0B0853 F5    0968** FPPN:			PUSH    AF
0B0854 CD    0969** CALL    ITEMN
0B0855 1E 
0B0856 05 
0B0857 0B 
0B0858 F1    0970** POP     AF
0B0859 CD    0971** FPP1:			CALL    FPP
0B085A 6B 
0B085B 22 
0B085C 0B 
0B085D DA    0972** JP      C,ERROR_
0B085E 61 
0B085F 39 
0B0860 0B 
0B0861 AF    0973** XOR     A
0B0862 C9    0974** RET
             0975** ;
             0976** ;SFIX - Convert to fixed-point notation
             0977** ;
0B0863 3E    0978** SFIX:			LD      A,38
0B0864 26 
0B0865 18    0979** JR      FPP1
0B0866 F2 
             0980** ;
             0981** ;SFLOAT - Convert to floating-point notation
             0982** ;
0B0867 3E    0983** SFLOAT:			LD      A,39
0B0868 27 
0B0869 18    0984** JR      FPP1
0B086A EE 
             0985** ;
             0986** ;VAL - Return numeric value of string.
             0987** ;Result is variable type numeric.
             0988** ;
0B086B CD    0989** VAL:			CALL    ITEMS
0B086C 31 
0B086D 05 
0B086E 0B 
0B086F AF    0990** VAL0:			XOR     A
0B0870 12    0991** LD      (DE),A
0B0871 DD    0992** LD      IX,ACCS
0B0872 21 
0B0873 00 
0B0874 4C 
0B0874 0B   
0B0876 3E    0993** LD      A,36
0B0877 24 
0B0878 18    0994** JR      FPP1
0B0879 DF 
             0995** ;
             0996** ;EVAL - Pass string to expression evaluator.
             0997** ;Result is variable type (numeric or string).
             0998** ;
0B087A CD    0999** EVAL_:			CALL    ITEMS
0B087B 31 
0B087C 05 
0B087D 0B 
0B087E 3E    1000** LD      A,CR
0B087F 0D 
0B0880 12    1001** LD      (DE),A
0B0881 FD    1002** PUSH    IY
0B0882 E5 
0B0883 11    1003** LD      DE,ACCS
0B0884 00 
0B0885 4C 
0B0886 0B 
0B0887 FD    1004** LD      IY,ACCS
0B0888 21 
0B0889 00 
0B088A 4C 
0B088A 0B   
0B088C 0E    1005** LD      C,0
0B088D 00 
0B088E CD    1006** CALL    LEXAN2          ;TOKENISE
0B088F A0 
0B0890 3E 
0B0891 0B 
0B0892 12    1007** LD      (DE),A
0B0893 13    1008** INC     DE
0B0894 AF    1009** XOR     A
0B0895 CD    1010** CALL    PUSHS           ;PUT ON STACK
0B0896 B5 
0B0897 0B 
0B0898 0B 
0B0899 FD    1011** LD      IY,SIZEW	;WAS 2
0B089A 21 
0B089B 03 
0B089C 00 
0B089C 00   
0B089E FD    1012** ADD     IY,SP
0B089F 39 
0B08A0 CD    1013** CALL    EXPR
0B08A1 C8 
0B08A2 03 
0B08A3 0B 
0B08A4 FD    1014** POP     IY
0B08A5 E1 
0B08A6 FD    1015** ADD     IY,SP
0B08A7 39 
0B08A8 FD    1016** LD      SP,IY           ;ADJUST STACK POINTER
0B08A9 F9 
0B08AA FD    1017** POP     IY
0B08AB E1 
0B08AC 08    1018** EX      AF,AF'
0B08AD C9    1019** RET
             1020** ;
             1021** ;RND - Random number function.
             1022** ; RND gives random integer 0-&FFFFFFFF
             1023** ; RND(-n) seeds random number & returns -n.
             1024** ; RND(0) returns last value in RND(1) form.
             1025** ; RND(1) returns floating-point 0-0.99999999.
             1026** ; RND(n) returns random integer 1-n.
             1027** ;
0B08AE DD    1028** RND:			LD      IX,RANDOM
0B08AF 21 
0B08B0 38 
0B08B1 4F 
0B08B1 0B   
0B08B3 CD    1029** CALL    NXT
0B08B4 71 
0B08B5 0C 
0B08B6 0B 
0B08B7 FE    1030** CP      '('
0B08B8 28 
0B08B9 28    1031** JR      Z,RND5          ;ARGUMENT FOLLOWS
0B08BA 20 
0B08BB CD    1032** CALL    LOAD5
0B08BC 20 
0B08BD 06 
0B08BE 0B 
0B08BF CB    1033** RND1:			RR      C
0B08C0 19 
0B08C1 06    1034** LD      B,32
0B08C2 20 
0B08C3 D9    1035** RND2:			EXX                     ;CALCULATE NEXT
0B08C4 52    1036** ADC.S   HL,HL
0B08C5 ED 
0B08C6 6A 
0B08C7 D9    1037** EXX
0B08C8 52    1038** ADC.S   HL,HL
0B08C9 ED 
0B08CA 6A 
0B08CB CB    1039** BIT     3,L
0B08CC 5D 
0B08CD 28    1040** JR      Z,RND3
0B08CE 01 
0B08CF 3F    1041** CCF
0B08D0 10    1042** RND3:			DJNZ    RND2
0B08D1 F1 
0B08D2 CB    1043** RND4:			RL      C               ;SAVE CARRY
0B08D3 11 
0B08D4 CD    1044** CALL    STORE5          ;STORE NEW NUMBER
0B08D5 DC 
0B08D6 17 
0B08D7 0B 
0B08D8 AF    1045** XOR     A
0B08D9 4F    1046** LD      C,A
0B08DA C9    1047** RET
0B08DB CD    1048** RND5:			CALL    ITEMI
0B08DC 26 
0B08DD 05 
0B08DE 0B 
0B08DF DD    1049** LD      IX,RANDOM
0B08E0 21 
0B08E1 38 
0B08E2 4F 
0B08E2 0B   
0B08E4 CB    1050** BIT     7,H             ;NEGATIVE?
0B08E5 7C 
0B08E6 37    1051** SCF
0B08E7 20    1052** JR      NZ,RND4         ;SEED
0B08E8 E9 
0B08E9 CD    1053** CALL    TEST
0B08EA E0 
0B08EB 0A 
0B08EC 0B 
0B08ED F5    1054** PUSH    AF
0B08EE CD    1055** CALL    SWAP
0B08EF D8 
0B08F0 0A 
0B08F1 0B 
0B08F2 D9    1056** EXX
0B08F3 CD    1057** CALL    LOAD5
0B08F4 20 
0B08F5 06 
0B08F6 0B 
0B08F7 C4    1058** CALL    NZ,RND1         ;NEXT IF NON-ZERO
0B08F8 BF 
0B08F9 08 
0B08FA 0B 
0B08FB D9    1059** EXX                     ;SCRAMBLE (CARE!)
0B08FC 0E    1060** LD      C,7FH
0B08FD 7F 
0B08FE CB    1061** RND6:			BIT     7,H             ;FLOAT
0B08FF 7C 
0B0900 20    1062** JR      NZ,RND7
0B0901 0A 
0B0902 D9    1063** EXX
0B0903 52    1064** ADD.S   HL,HL
0B0904 29 
0B0905 D9    1065** EXX
0B0906 52    1066** ADC.S   HL,HL
0B0907 ED 
0B0908 6A 
0B0909 0D    1067** DEC     C
0B090A 20    1068** JR      NZ,RND6
0B090B F2 
0B090C CB    1069** RND7:			RES     7,H             ;POSITIVE 0-0.999999
0B090D BC 
0B090E F1    1070** POP     AF
0B090F C8    1071** RET     Z               ;ZERO ARGUMENT
0B0910 D9    1072** EXX
0B0911 7B    1073** LD      A,E
0B0912 3D    1074** DEC     A
0B0913 B2    1075** OR      D
0B0914 D9    1076** EXX
0B0915 B3    1077** OR      E
0B0916 B2    1078** OR      D
0B0917 C8    1079** RET     Z               ;ARGUMENT=1
0B0918 06    1080** LD      B,0             ;INTEGER MARKER
0B0919 00 
0B091A 3E    1081** LD      A,10
0B091B 0A 
0B091C CD    1082** CALL    FPP             ;MULTIPLY
0B091D 6B 
0B091E 22 
0B091F 0B 
0B0920 DA    1083** JP      C,ERROR_
0B0921 61 
0B0922 39 
0B0923 0B 
0B0924 CD    1084** CALL    SFIX
0B0925 63 
0B0926 08 
0B0927 0B 
0B0928 C3    1085** JP      ADD1
0B0929 BC 
0B092A 05 
0B092B 0B 
             1086** ;
             1087** ; INSTR - String search.
             1088** ; Result is integer numeric.
             1089** ;
0B092C CD    1090** INSTR:			CALL    EXPRSC			; Get the first string expression
0B092D 1F 
0B092E 0C 
0B092F 0B 
0B0930 CD    1091** CALL    PUSHS           	; Push the string onto the stack
0B0931 B5 
0B0932 0B 
0B0933 0B 
0B0934 CD    1092** CALL    EXPRS           	; Get the second string expression
0B0935 16 
0B0936 05 
0B0937 0B 
0B0938 C1    1093** POP     BC			;  C: String length, B: Value of A before PUSHS was called
0B0939 21    1094** LD      HL,0
0B093A 00 
0B093B 00 
0B093C 00 
0B093D 39    1095** ADD     HL,SP           	; HL: Pointer to main string
0B093E C5    1096** PUSH    BC              	;  C: Main string length
0B093F 43    1097** LD      B,E             	;  B: Sub-string length
0B0940 CD    1098** CALL    NXT			; Skip whitespace
0B0941 71 
0B0942 0C 
0B0943 0B 
0B0944 FE    1099** CP      ','			; Check if there is a comma for the third parameter
0B0945 2C 
0B0946 3E    1100** LD      A,0			;  A: Default start position in string
0B0947 00 
0B0948 20    1101** JR      NZ,INSTR1		; No, so skip the next bit
0B0949 1A 
0B094A FD    1102** INC     IY              	; Skip the comma
0B094B 23 
0B094C C5    1103** PUSH    BC              	; Save the lengths
0B094D E5    1104** PUSH    HL              	; Save the pointer to the main string
0B094E CD    1105** CALL    PUSHS			; Push the string onto the stack
0B094F B5 
0B0950 0B 
0B0951 0B 
0B0952 CD    1106** CALL    EXPRI			; Get the third (numeric) parameter - the starting position
0B0953 0B 
0B0954 05 
0B0955 0B 
0B0956 C1    1107** POP     BC			;  C: String length, B: Value of A before PUSHS was called (discarded)
0B0957 CD    1108** CALL    POPS			; Pop the string off the stack
0B0958 DF 
0B0959 0B 
0B095A 0B 
0B095B E1    1109** POP     HL              	; Restore the pointer to the main string
0B095C C1    1110** POP     BC              	; Restore the lengths
0B095D D9    1111** EXX
0B095E 7D    1112** LD      A,L			; A: The start position in the  string
0B095F D9    1113** EXX
0B0960 B7    1114** OR      A			; Set the flags
0B0961 28    1115** JR      Z,INSTR1		; If it is zero, then skip
0B0962 01 
0B0963 3D    1116** DEC     A
0B0964 11    1117** INSTR1:			LD      DE,ACCS         	; DE: Pointer to the sub string
0B0965 00 
0B0966 4C 
0B0967 0B 
0B0968 CD    1118** CALL    SEARCH			; Do the search
0B0969 86 
0B096A 09 
0B096B 0B 
0B096C D1    1119** POP     DE
0B096D 28    1120** JR      Z,INSTR2        	; NB: Carry cleared
0B096E 03 
0B096F ED    1121** SBC     HL,HL
0B0970 62 
0B0971 39    1122** ADD     HL,SP
0B0972 ED    1123** INSTR2:			SBC     HL,SP
0B0973 72 
0B0974 EB    1124** EX      DE,HL
0B0975 7D    1125** LD	A,L
0B0976 21    1126** LD      HL,0
0B0977 00 
0B0978 00 
0B0979 00 
0B097A 6F    1127** LD	L,A
0B097B 39    1128** ADD     HL,SP
0B097C F9    1129** LD      SP,HL
0B097D EB    1130** EX      DE,HL
0B097E CD    1131** CALL    BRAKET			; Check for closing bracket
0B097F 30 
0B0980 0C 
0B0981 0B 
0B0982 C3    1132** JP      COUNT1			; Return a numeric integer
0B0983 82 
0B0984 07 
0B0985 0B 
             1133** ;
             1134** ; SEARCH - Search string for sub-string
             1135** ;    Inputs: Main string at HL length C
             1136** ;            Sub-string  at DE length B
             1137** ;            Starting offset A
             1138** ;   Outputs: NZ - not found
             1139** ;            Z - found at location HL-1
             1140** ;            Carry always cleared
             1141** ;
0B0986 C5    1142** SEARCH:			PUSH    BC			; Add the starting offset to HL
0B0987 01    1143** LD      BC,0
0B0988 00 
0B0989 00 
0B098A 00 
0B098B 4F    1144** LD      C,A
0B098C 09    1145** ADD     HL,BC           	; New start address
0B098D C1    1146** POP     BC
0B098E 91    1147** SUB     C			; If the starting offset > main string length, then do nothing
0B098F 30    1148** JR      NC,SRCH4
0B0990 2C 
0B0991 ED    1149** NEG
0B0992 44 
0B0993 4F    1150** LD      C,A             	; Remaining length
             1151** ;
0B0994 C5    1152** SRCH1:			PUSH    BC
0B0995 79    1153** LD	A,C
0B0996 01    1154** LD	BC,0
0B0997 00 
0B0998 00 
0B0999 00 
0B099A 4F    1155** LD	C,A
0B099B 1A    1156** LD      A,(DE)
0B099C ED    1157** CPIR                    	; Find the first character
0B099D B1 
0B099E 79    1158** LD      A,C
0B099F C1    1159** POP     BC
0B09A0 20    1160** JR      NZ,SRCH4
0B09A1 1B 
0B09A2 4F    1161** LD      C,A
             1162** ;
             1163** ; This block of four instructions was commented as a bug fix by R.T.Russell
             1164** ;
0B09A3 05    1165** DEC     B			; Bug fix
0B09A4 B8    1166** CP      B			; Bug fix
0B09A5 04    1167** INC     B			; Bug fix
0B09A6 38    1168** JR      C,SRCH4			; Bug fix
0B09A7 15 
             1169** ;
0B09A8 C5    1170** PUSH    BC
0B09A9 D5    1171** PUSH    DE
0B09AA E5    1172** PUSH    HL
0B09AB 05    1173** DEC     B
0B09AC 28    1174** JR      Z,SRCH3         	; Found!
0B09AD 08 
0B09AE 13    1175** SRCH2:			INC     DE
0B09AF 1A    1176** LD      A,(DE)
0B09B0 BE    1177** CP      (HL)
0B09B1 20    1178** JR      NZ,SRCH3
0B09B2 03 
0B09B3 23    1179** INC     HL
0B09B4 10    1180** DJNZ    SRCH2
0B09B5 F8 
0B09B6 E1    1181** SRCH3:			POP     HL
0B09B7 D1    1182** POP     DE
0B09B8 C1    1183** POP     BC
0B09B9 20    1184** JR      NZ,SRCH1
0B09BA D9 
0B09BB AF    1185** XOR     A               	; Flags: Z, NC
0B09BC C9    1186** RET                     	; Found
             1187** ;
0B09BD F6    1188** SRCH4:			OR      0FFH            	; Flags: NZ, NC
0B09BE FF 
0B09BF C9    1189** RET                     	; Not found
             1190** ;
             1191** ;CHRS - Return character with given ASCII value.
             1192** ;Result is string.
             1193** ;
0B09C0 CD    1194** CHRS:			CALL    ITEMI
0B09C1 26 
0B09C2 05 
0B09C3 0B 
0B09C4 D9    1195** EXX
0B09C5 7D    1196** LD      A,L
0B09C6 18    1197** JR      GET1
0B09C7 0E 
             1198** ;
             1199** ;GETS - Return key pressed as stringor character at position (X,Y).
             1200** ;Result is string.
             1201** ;
0B09C8 CD    1202** GETS:			CALL	NXT		;NEW CODE FOR GET$(X,Y)
0B09C9 71 
0B09CA 0C 
0B09CB 0B 
0B09CC FE    1203** CP	'('
0B09CD 28 
0B09CE CA    1204** JP	Z, GETSCHR	;CALL FUNCTION IN PATCH.Z80
0B09CF FD 
0B09D0 45 
0B09D1 0B 
0B09D2 CD    1205** CALL    OSRDCH
0B09D3 2A 
0B09D4 41 
0B09D5 0B 
0B09D6 37    1206** GET1:			SCF
0B09D7 18    1207** JR      INKEY1
0B09D8 09 
             1208** ;
             1209** ; INKEYS - Wait up to n centiseconds for keypress.
             1210** ;          Return key pressed as string or null
             1211** ;          string if time elapsed.
             1212** ; Result is string.
             1213** ;
0B09D9 CD    1214** INKEYS:			CALL    ITEMI			; Fetch the argument
0B09DA 26 
0B09DB 05 
0B09DC 0B 
0B09DD D9    1215** EXX
0B09DE CD    1216** INKEY0:			CALL    OSKEY			; This is the entry point for INKEY(n)
0B09DF 33 
0B09E0 41 
0B09E1 0B 
0B09E2 11    1217** INKEY1:			LD      DE,ACCS			; Store the result in the string accumulator
0B09E3 00 
0B09E4 4C 
0B09E5 0B 
0B09E6 12    1218** LD      (DE),A
0B09E7 3E    1219** LD      A,80H
0B09E8 80 
0B09E9 D0    1220** RET     NC
0B09EA 1C    1221** INC     E
0B09EB C9    1222** RET
             1223** ;
             1224** ; INKEYM - Check immediately whether a given key is being pressed
             1225** ; Result is integer numeric
             1226** ;
             1227** INKEYM:			MOSCALL	mos_getkbmap		; Get the base address of the keyboard
0B09EC 3E   0001**M LD	A, function
0B09ED 1E 
0B09EE 49   0002**M RST.LIS	08h
0B09EF CF 
0B09F0 23    1228** INC	HL			; Index from 0
0B09F1 7D    1229** LD	A, L			; Negate the LSB of the answer
0B09F2 ED    1230** NEG
0B09F3 44 
0B09F4 4F    1231** LD	C, A			;  E: The positive keycode value
0B09F5 3E    1232** LD	A, 1			; Throw an "Out of range" error
0B09F6 01 
0B09F7 FA    1233** JP	M, ERROR_		; if the argument < - 128
0B09F8 61 
0B09F9 39 
0B09FA 0B 
             1234** ;
0B09FB 21    1235** LD	HL, BITLOOKUP		; HL: The bit lookup table
0B09FC 1E 
0B09FD 0A 
0B09FE 0B 
0B09FF 11    1236** LD	DE, 0
0B0A00 00 
0B0A01 00 
0B0A02 00 
0B0A03 79    1237** LD	A, C
0B0A04 E6    1238** AND	00000111b		; Just need the first three bits
0B0A05 07 
0B0A06 5F    1239** LD	E, A			; DE: The bit number
0B0A07 19    1240** ADD	HL, DE
0B0A08 46    1241** LD	B, (HL)			;  B: The mask
             1242** ;
0B0A09 79    1243** LD	A, C			; Fetch the keycode again
0B0A0A E6    1244** AND	01111000b		; And divide by 8
0B0A0B 78 
0B0A0C 0F    1245** RRCA
0B0A0D 0F    1246** RRCA
0B0A0E 0F    1247** RRCA
0B0A0F 5F    1248** LD	E, A			; DE: The offset (the MSW has already been cleared previously)
0B0A10 DD    1249** ADD	IX, DE			; IX: The address
0B0A11 19 
0B0A12 78    1250** LD	A, B			;  B: The mask
0B0A13 DD    1251** AND	(IX+0)			; Check whether the bit is set
0B0A14 A6 
0B0A15 00 
0B0A16 CA    1252** JP	Z, ZERO			; No, so return 0
0B0A17 94 
0B0A18 0B 
0B0A19 0B 
0B0A1A C3    1253** JP	TRUE			; Otherwise return -1
0B0A1B 06 
0B0A1C 08 
0B0A1D 0B 
             1254** ;
             1255** ; A bit lookup table
             1256** ;
0B0A1E 01    1257** BITLOOKUP:		DB	01h, 02h, 04h, 08h
0B0A1F 02 
0B0A20 04 
0B0A21 08 
0B0A22 10    1258** DB	10h, 20h, 40h, 80h
0B0A23 20 
0B0A24 40 
0B0A25 80 
             1259** ;
             1260** ; MID$ - Return sub-string.
             1261** ; Result is string.
             1262** ;
0B0A26 CD    1263** MIDS:			CALL    EXPRSC			; Get the first string expression
0B0A27 1F 
0B0A28 0C 
0B0A29 0B 
0B0A2A CD    1264** CALL    PUSHS           	; Push the string onto the stack from the string accumulator (ACCS)
0B0A2B B5 
0B0A2C 0B 
0B0A2D 0B 
0B0A2E CD    1265** CALL    EXPRI			; Get the second expression
0B0A2F 0B 
0B0A30 05 
0B0A31 0B 
0B0A32 C1    1266** POP     BC			; C: String length, B: Value of A before PUSHS was called
0B0A33 CD    1267** CALL    POPS			; Pop the string back off the stack to the string accumulator
0B0A34 DF 
0B0A35 0B 
0B0A36 0B 
0B0A37 D9    1268** EXX
0B0A38 7D    1269** LD      A,L			; A: The start index
0B0A39 D9    1270** EXX
0B0A3A B7    1271** OR      A			; If the start index is 0, then we don't need to do the next bit
0B0A3B 28    1272** JR      Z,MIDS1
0B0A3C 0E 
0B0A3D 3D    1273** DEC     A
0B0A3E 6F    1274** LD      L,A			; L: The start index - 1
0B0A3F 93    1275** SUB     E			; Subtract from the string length
0B0A40 1E    1276** LD      E,0			; Preemptively set the string length to 0
0B0A41 00 
0B0A42 30    1277** JR      NC,MIDS1		; If the first parameter is greater than the string length, then do nothing
0B0A43 07 
0B0A44 ED    1278** NEG				; Negate the answer and
0B0A45 44 
0B0A46 4F    1279** LD      C,A			; C: Number of bytes to copy
0B0A47 CD    1280** CALL    RIGHT1			; We can do a RIGHT$ at this point with the result
0B0A48 8A 
0B0A49 0A 
0B0A4A 0B 
0B0A4B CD    1281** MIDS1:			CALL    NXT			; Skip whitespace
0B0A4C 71 
0B0A4D 0C 
0B0A4E 0B 
0B0A4F FE    1282** CP      ','			; Check for a comma
0B0A50 2C 
0B0A51 FD    1283** INC     IY			; Advance to the next character in the BASIC line
0B0A52 23 
0B0A53 28    1284** JR      Z,LEFT1			; If there is a comma then we do a LEFT$ on the remainder
0B0A54 0D 
0B0A55 FD    1285** DEC     IY			; Restore the BASIC program pointer
0B0A56 2B 
0B0A57 CD    1286** CALL    BRAKET			; Check for a bracket
0B0A58 30 
0B0A59 0C 
0B0A5A 0B 
0B0A5B 3E    1287** LD      A,80H			; String marker
0B0A5C 80 
0B0A5D C9    1288** RET
             1289** ;
             1290** ; LEFT$ - Return left part of string.
             1291** ; Carry cleared if entire string returned.
             1292** ; Result is string.
             1293** ;
0B0A5E CD    1294** LEFTS:			CALL    EXPRSC			; Get the first string expression
0B0A5F 1F 
0B0A60 0C 
0B0A61 0B 
0B0A62 CD    1295** LEFT1:			CALL    PUSHS           	; Push the string onto the stack from the string accumulator (ACCS)
0B0A63 B5 
0B0A64 0B 
0B0A65 0B 
0B0A66 CD    1296** CALL    EXPRI			; Get the second expression
0B0A67 0B 
0B0A68 05 
0B0A69 0B 
0B0A6A C1    1297** POP     BC			; C: String length, B: Value of A before PUSHS was called
0B0A6B CD    1298** CALL    POPS			; Pop the string back off the stack to the string accumulator (ACCS)
0B0A6C DF 
0B0A6D 0B 
0B0A6E 0B 
0B0A6F CD    1299** CALL    BRAKET			; Check for closing bracket
0B0A70 30 
0B0A71 0C 
0B0A72 0B 
0B0A73 D9    1300** EXX
0B0A74 7D    1301** LD      A,L			; L: The second parameter
0B0A75 D9    1302** EXX
0B0A76 BB    1303** CP      E			; Compare with the string length
0B0A77 30    1304** JR      NC,LEFT3		; If it is greater than or equal then do nothing
0B0A78 02 
0B0A79 6B    1305** LD      L,E             	; For RIGHTS, no effect in LEFTS
0B0A7A 5F    1306** LEFT2:			LD      E,A			; E: The new length of string
0B0A7B 3E    1307** LEFT3:			LD      A,80H           	; String marker
0B0A7C 80 
0B0A7D C9    1308** RET
             1309** ;
             1310** ; RIGHT$ - Return right part of string.
             1311** ; Result is string.
             1312** ;
0B0A7E CD    1313** RIGHTS:			CALL    LEFTS			; Call LEFTS to get the string
0B0A7F 5E 
0B0A80 0A 
0B0A81 0B 
0B0A82 D0    1314** RET     NC			; Do nothing if the second parameter is >= string length
0B0A83 1C    1315** INC     E			; Check for a zero length string
0B0A84 1D    1316** DEC     E
0B0A85 C8    1317** RET     Z			; Yes, so do nothing
0B0A86 4B    1318** LD      C,E			;  C: Number of bytes to copy
0B0A87 7D    1319** LD      A,L
0B0A88 93    1320** SUB     E
0B0A89 6F    1321** LD      L,A			;  L: Index into the string
0B0A8A 79    1322** RIGHT1:			LD	A,C
0B0A8B 01    1323** LD	BC,0
0B0A8C 00 
0B0A8D 00 
0B0A8E 00 
0B0A8F 4F    1324** LD	C,A			; BC: Number of bytes to copy (with top word cleared)
0B0A90 7D    1325** LD	A,L
0B0A91 21    1326** LD	HL,ACCS
0B0A92 00 
0B0A93 4C 
0B0A94 0B 
0B0A95 6F    1327** LD	L,A			; HL: Source (in ACCS)
0B0A96 11    1328** LD      DE,ACCS			; DE: Destination (start of ACCS)
0B0A97 00 
0B0A98 4C 
0B0A99 0B 
0B0A9A ED    1329** LDIR                    	; Copy
0B0A9B B0 
0B0A9C 3E    1330** LD      A,80H			; String marker
0B0A9D 80 
0B0A9E C9    1331** RET
             1332** ;
             1333** ; STRINGS - Return n concatenations of a string.
             1334** ; Result is string.
             1335** ;
0B0A9F CD    1336** STRING_:		CALL    EXPRI			; Get number of times to replicate
0B0AA0 0B 
0B0AA1 05 
0B0AA2 0B 
0B0AA3 CD    1337** CALL    COMMA			; Check for comma
0B0AA4 23 
0B0AA5 0C 
0B0AA6 0B 
0B0AA7 D9    1338** EXX
0B0AA8 7D    1339** LD      A,L			; L: Number of iterations of string
0B0AA9 D9    1340** EXX
0B0AAA F5    1341** PUSH    AF
0B0AAB CD    1342** CALL    EXPRS			; Get the string
0B0AAC 16 
0B0AAD 05 
0B0AAE 0B 
0B0AAF CD    1343** CALL    BRAKET			; Check for closing bracket
0B0AB0 30 
0B0AB1 0C 
0B0AB2 0B 
0B0AB3 F1    1344** POP     AF			; A: Number of iterations of string
0B0AB4 B7    1345** OR      A			; Set flags
0B0AB5 28    1346** JR      Z,LEFT2         	; If iterations is 0, then this will return an empty string
0B0AB6 C3 
0B0AB7 3D    1347** DEC     A
0B0AB8 4F    1348** LD      C,A			; C: Loop counter
0B0AB9 3E    1349** LD      A,80H			; String marker
0B0ABA 80 
0B0ABB C8    1350** RET     Z
0B0ABC 1C    1351** INC     E			; Check for empty string
0B0ABD 1D    1352** DEC     E
0B0ABE C8    1353** RET     Z              		; And return
0B0ABF 43    1354** LD      B,E			; B: String length tally
0B0AC0 21    1355** LD	HL,ACCS
0B0AC1 00 
0B0AC2 4C 
0B0AC3 0B 
0B0AC4 C5    1356** STRIN1:			PUSH    BC
0B0AC5 7E    1357** STRIN2:			LD      A,(HL)
0B0AC6 23    1358** INC     HL
0B0AC7 12    1359** LD      (DE),A
0B0AC8 1C    1360** INC     E
0B0AC9 3E    1361** LD      A,19
0B0ACA 13 
0B0ACB CA    1362** JP      Z,ERROR_         	; Throw a "String too long" error
0B0ACC 61 
0B0ACD 39 
0B0ACE 0B 
0B0ACF 10    1363** DJNZ    STRIN2
0B0AD0 F4 
0B0AD1 C1    1364** POP     BC
0B0AD2 0D    1365** DEC     C
0B0AD3 20    1366** JR      NZ,STRIN1
0B0AD4 EF 
0B0AD5 3E    1367** LD      A,80H
0B0AD6 80 
0B0AD7 C9    1368** RET
             1369** ;
             1370** ;SUBROUTINES
             1371** ;
             1372** ;SWAP - Swap arguments
             1373** ;Exchanges DE,HL D'E',H'L' and B,C
             1374** ;Destroys: A,B,C,D,E,H,L,D',E',H',L'
             1375** ;
0B0AD8 79    1376** SWAP:			LD      A,C
0B0AD9 48    1377** LD      C,B
0B0ADA 47    1378** LD      B,A
0B0ADB EB    1379** EX      DE,HL
0B0ADC D9    1380** EXX
0B0ADD EB    1381** EX      DE,HL
0B0ADE D9    1382** EXX
0B0ADF C9    1383** RET
             1384** ;
             1385** ;TEST - Test HLH'L' for zero
             1386** ;Outputs: Z-flag set & A=0 if zero
             1387** ;Destroys: A,F
             1388** ;
0B0AE0 7C    1389** TEST:			LD      A,H
0B0AE1 B5    1390** OR      L
0B0AE2 D9    1391** EXX
0B0AE3 B4    1392** OR      H
0B0AE4 B5    1393** OR      L
0B0AE5 D9    1394** EXX
0B0AE6 C9    1395** RET
             1396** ;
             1397** ;DECODE - Decode line number in pseudo-binary.
             1398** ;   Inputs: IY = Text pointer.
             1399** ;   Outputs: HL=0, H'L'=line number, C=0.
             1400** ;   Destroys: A,C,H,L,H',L',IY,F
             1401** ;
0B0AE7 D9    1402** DECODE:			EXX
0B0AE8 21    1403** LD	HL, 0
0B0AE9 00 
0B0AEA 00 
0B0AEB 00 
0B0AEC FD    1404** LD      A,(IY)
0B0AED 7E 
0B0AEE 00 
0B0AEF FD    1405** INC     IY
0B0AF0 23 
0B0AF1 17    1406** RLA
0B0AF2 17    1407** RLA
0B0AF3 67    1408** LD      H,A
0B0AF4 E6    1409** AND     0C0H
0B0AF5 C0 
0B0AF6 FD    1410** XOR     (IY)
0B0AF7 AE 
0B0AF8 00 
0B0AF9 FD    1411** INC     IY
0B0AFA 23 
0B0AFB 6F    1412** LD      L,A
0B0AFC 7C    1413** LD      A,H
0B0AFD 17    1414** RLA
0B0AFE 17    1415** RLA
0B0AFF E6    1416** AND     0C0H
0B0B00 C0 
0B0B01 FD    1417** XOR     (IY)
0B0B02 AE 
0B0B03 00 
0B0B04 FD    1418** INC     IY
0B0B05 23 
0B0B06 67    1419** LD      H,A
0B0B07 D9    1420** EXX
             1421** ;			XOR     A
             1422** ;			LD      C,A
             1423** ;			LD      H,A
             1424** ;			LD      L,A
0B0B08 21    1425** LD	HL, 0
0B0B09 00 
0B0B0A 00 
0B0B0B 00 
0B0B0C 4D    1426** LD	C, L
0B0B0D C9    1427** RET
             1428** ;
             1429** ;HEXSTR - convert numeric value to HEX string.
             1430** ;   Inputs: HLH'L'C = integer or floating-point number
             1431** ;  Outputs: String in string accumulator.
             1432** ;           E = string length.  D = ACCS/256
             1433** ;
0B0B0E FD    1434** HEXSTS:			INC     IY              ;SKIP TILDE
0B0B0F 23 
0B0B10 CD    1435** CALL    ITEMN
0B0B11 1E 
0B0B12 05 
0B0B13 0B 
0B0B14 CD    1436** CALL    HEXSTR
0B0B15 1B 
0B0B16 0B 
0B0B17 0B 
0B0B18 3E    1437** LD      A,80H
0B0B19 80 
0B0B1A C9    1438** RET
             1439** ;
0B0B1B CD    1440** HEXSTR:			CALL    SFIX
0B0B1C 63 
0B0B1D 08 
0B0B1E 0B 
0B0B1F 01    1441** LD      BC,8
0B0B20 08 
0B0B21 00 
0B0B22 00 
0B0B23 11    1442** LD      DE,ACCS
0B0B24 00 
0B0B25 4C 
0B0B26 0B 
0B0B27 C5    1443** HEXST1:			PUSH    BC
0B0B28 06    1444** LD      B,4
0B0B29 04 
0B0B2A AF    1445** XOR     A
0B0B2B D9    1446** HEXST2:			EXX
0B0B2C 52    1447** ADD.S	HL,HL
0B0B2D 29 
0B0B2E D9    1448** EXX
0B0B2F 52    1449** ADC.S	HL,HL
0B0B30 ED 
0B0B31 6A 
0B0B32 17    1450** RLA
0B0B33 10    1451** DJNZ    HEXST2
0B0B34 F6 
0B0B35 C1    1452** POP     BC
0B0B36 0D    1453** DEC     C
0B0B37 F8    1454** RET     M
0B0B38 28    1455** JR      Z,HEXST3
0B0B39 06 
0B0B3A B7    1456** OR      A
0B0B3B 20    1457** JR      NZ,HEXST3
0B0B3C 03 
0B0B3D B8    1458** CP      B
0B0B3E 28    1459** JR      Z,HEXST1
0B0B3F E7 
0B0B40 C6    1460** HEXST3:			ADD     A,90H
0B0B41 90 
0B0B42 27    1461** DAA
0B0B43 CE    1462** ADC     A,40H
0B0B44 40 
0B0B45 27    1463** DAA
0B0B46 12    1464** LD      (DE),A
0B0B47 13    1465** INC     DE
0B0B48 47    1466** LD      B,A
0B0B49 18    1467** JR      HEXST1
0B0B4A DC 
             1468** ;
             1469** ;Function STR - convert numeric value to ASCII string.
             1470** ;   Inputs: HLH'L'C = integer or floating-point number.
             1471** ;  Outputs: String in string accumulator.
             1472** ;           E = length, D = ACCS/256
             1473** ;           A = 80H (type=string)
             1474** ;
             1475** ;First normalise for decimal output:
             1476** ;
0B0B4B CD    1477** STRS:			CALL    NXT
0B0B4C 71 
0B0B4D 0C 
0B0B4E 0B 
0B0B4F FE    1478** CP      '~'
0B0B50 7E 
0B0B51 28    1479** JR      Z,HEXSTS
0B0B52 BB 
0B0B53 CD    1480** CALL    ITEMN
0B0B54 1E 
0B0B55 05 
0B0B56 0B 
0B0B57 DD    1481** LD      IX,STAVAR
0B0B58 21 
0B0B59 00 
0B0B5A 4E 
0B0B5A 0B   
0B0B5C DD    1482** LD      A,(IX+3)
0B0B5D 7E 
0B0B5E 03 
0B0B5F B7    1483** OR      A
0B0B60 DD    1484** LD      IX,G9-1         ;G9 FORMAT
0B0B61 21 
0B0B62 8D 
0B0B63 0B 
0B0B63 0B   
0B0B65 28    1485** JR      Z,STR0
0B0B66 05 
0B0B67 DD    1486** STR:			LD      IX,STAVAR
0B0B68 21 
0B0B69 00 
0B0B6A 4E 
0B0B6A 0B   
0B0B6C 11    1487** STR0:			LD      DE,ACCS
0B0B6D 00 
0B0B6E 4C 
0B0B6F 0B 
0B0B70 3E    1488** LD      A,37
0B0B71 25 
0B0B72 CD    1489** CALL    FPP
0B0B73 6B 
0B0B74 22 
0B0B75 0B 
0B0B76 DA    1490** JP      C,ERROR_
0B0B77 61 
0B0B78 39 
0B0B79 0B 
0B0B7A DD    1491** BIT     0,(IX+2)
0B0B7B CB 
0B0B7C 02 
0B0B7D 46 
0B0B7E 3E    1492** STR1:			LD      A,80H           ;STRING MARKER
0B0B7F 80 
0B0B80 C8    1493** RET     Z
0B0B81 79    1494** LD      A,C
0B0B82 C6    1495** ADD     A,4
0B0B83 04 
0B0B84 BB    1496** STR2:			CP      E
0B0B85 28    1497** JR      Z,STR1
0B0B86 F7 
0B0B87 EB    1498** EX      DE,HL
0B0B88 36    1499** LD      (HL),' '        ;TRAILING SPACE
0B0B89 20 
0B0B8A 23    1500** INC     HL
0B0B8B EB    1501** EX      DE,HL
0B0B8C 18    1502** JR      STR2
0B0B8D F6 
             1503** ;
0B0B8E 09    1504** G9:			DW    9
0B0B8F 00 
             1505** ;
             1506** ;STRING COMPARE
             1507** ;Compare string (DE) length B with string (HL) length C.
             1508** ;Result preset to false.
             1509** ;
0B0B90 CD    1510** SCP:			CALL	SCP0
0B0B91 9E 
0B0B92 0B 
0B0B93 0B 
             1511** ;
0B0B94 3E    1512** ZERO:			LD      A,0
0B0B95 00 
0B0B96 D9    1513** EXX
0B0B97 67    1514** LD      H,A
0B0B98 6F    1515** LD      L,A
0B0B99 D9    1516** EXX
0B0B9A 67    1517** LD      H,A
0B0B9B 6F    1518** LD      L,A
0B0B9C 4F    1519** LD      C,A
0B0B9D C9    1520** RET
             1521** ;
0B0B9E 04    1522** SCP0:			INC     B
0B0B9F 0C    1523** INC     C
0B0BA0 05    1524** SCP1:			DEC     B
0B0BA1 28    1525** JR      Z,SCP2
0B0BA2 0A 
0B0BA3 0D    1526** DEC     C
0B0BA4 28    1527** JR      Z,SCP3
0B0BA5 0C 
0B0BA6 1A    1528** LD      A,(DE)
0B0BA7 BE    1529** CP      (HL)
0B0BA8 C0    1530** RET     NZ
0B0BA9 13    1531** INC     DE
0B0BAA 23    1532** INC     HL
0B0BAB 18    1533** JR      SCP1
0B0BAC F3 
0B0BAD B7    1534** SCP2:			OR      A
0B0BAE 0D    1535** DEC     C
0B0BAF C8    1536** RET     Z
0B0BB0 37    1537** SCF
0B0BB1 C9    1538** RET
0B0BB2 B7    1539** SCP3:			OR      A
0B0BB3 0C    1540** INC     C
0B0BB4 C9    1541** RET
             1542** ;
             1543** ; PUSHS - SAVE STRING ON STACK.
             1544** ;     Inputs: String in string accumulator.
             1545** ;             E = string length.
             1546** ;             A - saved on stack.
             1547** ;   Destroys: B,C,D,E,H,L,IX,SP,F
             1548** ;
0B0BB5 CD    1549** PUSHS:			CALL    CHECK			; Check if there is sufficient space on the stack
0B0BB6 50 
0B0BB7 18 
0B0BB8 0B 
0B0BB9 DD    1550** POP     IX              	; IX: Return address
0B0BBA E1 
0B0BBB B7    1551** OR      A               	; Clear the carry flag
0B0BBC 01    1552** LD	BC,0			; BC: Length of the string
0B0BBD 00 
0B0BBE 00 
0B0BBF 00 
0B0BC0 4B    1553** LD	C,E
0B0BC1 21    1554** LD      HL,ACCS			; HL: Pointer to the string accumulator
0B0BC2 00 
0B0BC3 4C 
0B0BC4 0B 
0B0BC5 11    1555** LD	DE,ACCS
0B0BC6 00 
0B0BC7 4C 
0B0BC8 0B 
0B0BC9 59    1556** LD	E,C 			; DE: Pointer to the end of the string in the accumulator
0B0BCA ED    1557** SBC     HL,DE			; HL: Number of bytes to reserve on the stack (a negative number)
0B0BCB 52 
0B0BCC 39    1558** ADD     HL,SP			; Grow the stack
0B0BCD F9    1559** LD      SP,HL
0B0BCE 57    1560** LD      D,A			;  D: This needs to be set to A for some functions
             1561** ; BEGIN MISSING FROM BINARY
             1562** ; LD	B,A			; Stack A and C (the string length)
             1563** ; PUSH    BC			; Note that this stacks 3 bytes, not 2; the MSB is irrelevant
             1564** ; LD	B,0			; Reset B to 0 for the LDIR in this function
             1565** ; END MISSING FROM BINARY
0B0BCF D5    1566** PUSH 	DE ; ADDED FROM BINARY
0B0BD0 28    1567** JR      Z,PUSHS1        	; Is it zero length?
0B0BD1 0B 
0B0BD2 11    1568** LD      DE,ACCS			; DE: Destination
0B0BD3 00 
0B0BD4 4C 
0B0BD5 0B 
0B0BD6 EB    1569** EX      DE,HL			; HL: Destination, DE: Address on stack
0B0BD7 ED    1570** LDIR	                    	; Copy to stack
0B0BD8 B0 
0B0BD9 CD    1571** CALL    CHECK			; Final check to see if there is sufficient space on the stack
0B0BDA 50 
0B0BDB 18 
0B0BDC 0B 
0B0BDD DD    1572** PUSHS1:			JP      (IX)            	; Effectively "RET" (IX contains the return address)
0B0BDE E9 
             1573** ;
             1574** ; POPS - RESTORE STRING FROM STACK.
             1575** ;     Inputs: C = string length.
             1576** ;    Outputs: String in string accumulator.
             1577** ;             E = string length.
             1578** ;   Destroys: B,C,D,E,H,L,IX,SP,F
             1579** ;
0B0BDF DD    1580** POPS:			POP     IX              	; IX: Return address
0B0BE0 E1 
0B0BE1 69    1581** LD	L,C			; Temporarily store string length in L
0B0BE2 01    1582** LD	BC,0
0B0BE3 00 
0B0BE4 00 
0B0BE5 00 
0B0BE6 4D    1583** LD	C,L			; BC: Number of bytes to copy
0B0BE7 21    1584** LD      HL,0			; HL: 0
0B0BE8 00 
0B0BE9 00 
0B0BEA 00 
0B0BEB 39    1585** ADD     HL,SP			; HL: Stack address
0B0BEC 11    1586** LD      DE,ACCS			; DE: Destination
0B0BED 00 
0B0BEE 4C 
0B0BEF 0B 
0B0BF0 0C    1587** INC     C			; Quick check to see if this is a zero length string
0B0BF1 0D    1588** DEC     C
0B0BF2 28    1589** JR      Z,POPS1         	; Yes it is, so skip
0B0BF3 02 
0B0BF4 ED    1590** LDIR                    	; No, so copy from the stack
0B0BF5 B0 
0B0BF6 F9    1591** POPS1:			LD      SP,HL			; Shrink the stack
0B0BF7 DD    1592** JP      (IX)            	; Effectively "RET" (IX contains the return address)
0B0BF8 E9 
             1593** ;
0B0BF9 FD    1594** HEXDIG:			LD      A,(IY)
0B0BFA 7E 
0B0BFB 00 
0B0BFC FE    1595** CP      '0'
0B0BFD 30 
0B0BFE D8    1596** RET     C
0B0BFF FE    1597** CP      '9'+1
0B0C00 3A 
0B0C01 3F    1598** CCF
0B0C02 D0    1599** RET     NC
0B0C03 FE    1600** CP      'A'
0B0C04 41 
0B0C05 D8    1601** RET     C
0B0C06 D6    1602** SUB     'A'-10
0B0C07 37 
0B0C08 FE    1603** CP      16
0B0C09 10 
0B0C0A 3F    1604** CCF
0B0C0B C9    1605** RET
             1606** ;
0B0C0C FD    1607** BINDIG:			LD	A,(IY)
0B0C0D 7E 
0B0C0E 00 
0B0C0F FE    1608** CP	'0'
0B0C10 30 
0B0C11 D8    1609** RET	C
0B0C12 FE    1610** CP	'1'+1
0B0C13 32 
0B0C14 3F    1611** CCF
0B0C15 C9    1612** RET
             1613** ;
0B0C16 FE    1614** RELOP?:			CP      '>'
0B0C17 3E 
0B0C18 D0    1615** RET     NC
0B0C19 FE    1616** CP      '='
0B0C1A 3D 
0B0C1B D0    1617** RET     NC
0B0C1C FE    1618** CP      '<'
0B0C1D 3C 
0B0C1E C9    1619** RET
             1620** ;
0B0C1F CD    1621** EXPRSC:			CALL    EXPRS
0B0C20 16 
0B0C21 05 
0B0C22 0B 
0B0C23 CD    1622** COMMA:			CALL    NXT
0B0C24 71 
0B0C25 0C 
0B0C26 0B 
0B0C27 FD    1623** INC     IY
0B0C28 23 
0B0C29 FE    1624** CP      ','
0B0C2A 2C 
0B0C2B C8    1625** RET     Z
0B0C2C 3E    1626** LD      A,5
0B0C2D 05 
0B0C2E 18    1627** JR      ERROR1_EV          ;"Missing ,"
0B0C2F 0B 
             1628** ;
0B0C30 CD    1629** BRAKET:			CALL    NXT
0B0C31 71 
0B0C32 0C 
0B0C33 0B 
0B0C34 FD    1630** INC     IY
0B0C35 23 
0B0C36 FE    1631** CP      ')'
0B0C37 29 
0B0C38 C8    1632** RET     Z
0B0C39 3E    1633** LD      A,27
0B0C3A 1B 
0B0C3B C3    1634** ERROR1_EV:			JP      ERROR_           ;"Missing )"
0B0C3C 61 
0B0C3D 39 
0B0C3E 0B 
             1635** ;
0B0C3F FD    1636** SAVE_EV:			INC     IY
0B0C40 23 
0B0C41 08    1637** SAVE1:			EX      AF,AF'
0B0C42 FA    1638** JP      M,TYPE_EV_
0B0C43 37 
0B0C44 05 
0B0C45 0B 
0B0C46 08    1639** EX      AF,AF'
0B0C47 E3    1640** EX      (SP),HL
0B0C48 D9    1641** EXX
0B0C49 E5    1642** PUSH    HL
0B0C4A D9    1643** EXX
0B0C4B F5    1644** PUSH    AF
0B0C4C C5    1645** PUSH    BC
0B0C4D E9    1646** JP      (HL)
             1647** ;
0B0C4E 08    1648** DOIT:			EX      AF,AF'
0B0C4F FA    1649** JP      M,TYPE_EV_
0B0C50 37 
0B0C51 05 
0B0C52 0B 
0B0C53 D9    1650** EXX
0B0C54 C1    1651** POP     BC              ;RETURN ADDRESS
0B0C55 D9    1652** EXX
0B0C56 79    1653** LD      A,C
0B0C57 C1    1654** POP     BC
0B0C58 47    1655** LD      B,A
0B0C59 F1    1656** POP     AF              ;OPERATOR
0B0C5A D9    1657** EXX
0B0C5B EB    1658** EX      DE,HL
0B0C5C E1    1659** POP     HL
0B0C5D D9    1660** EXX
0B0C5E EB    1661** EX      DE,HL
0B0C5F E1    1662** POP     HL
0B0C60 D9    1663** EXX
0B0C61 C5    1664** PUSH    BC
0B0C62 D9    1665** EXX
0B0C63 E6    1666** AND     0FH
0B0C64 0F 
0B0C65 CD    1667** CALL    FPP
0B0C66 6B 
0B0C67 22 
0B0C68 0B 
0B0C69 38    1668** JR      C,ERROR1_EV
0B0C6A D0 
0B0C6B AF    1669** XOR     A
0B0C6C 08    1670** EX      AF,AF'          ;TYPE
0B0C6D FD    1671** LD      A,(IY)
0B0C6E 7E 
0B0C6F 00 
0B0C70 C9    1672** RET
             1673** ;
             1674** ; Skip spaces
             1675** ; - IY: String pointer
             1676** ; Returns:
             1677** ;  - A: The non-space character found
             1678** ; - IY: Points to the character before that
             1679** ;
0B0C71 FD    1680** NXT:			LD      A,(IY)			; Fetch the character
0B0C72 7E 
0B0C73 00 
0B0C74 FE    1681** CP      ' '			; If it is space, then return
0B0C75 20 
0B0C76 C0    1682** RET     NZ
0B0C77 FD    1683** INC     IY			; Increment the pointer and
0B0C78 23 
0B0C79 C3    1684** JP      NXT			; Loop
0B0C7A 71 
0B0C7B 0C 
0B0C7C 0B 
             1685** ;
0B0C7D E5    1686** DISPT2:			PUSH    HL
0B0C7E 21    1687** LD      HL,SOPTBL
0B0C7F B6 
0B0C80 03 
0B0C81 0B 
0B0C82 18    1688** JR      DISPT0
0B0C83 07 
             1689** ;
0B0C84 E5    1690** DISPAT:			PUSH    HL
0B0C85 D6    1691** SUB     FUNTOK
0B0C86 8D 
0B0C87 21    1692** LD      HL,FUNTBL
0B0C88 0B 
0B0C89 03 
0B0C8A 0B 
0B0C8B C5    1693** DISPT0:			PUSH    BC
             1694** 
0B0C8C 01    1695** LD	BC, 3
0B0C8D 03 
0B0C8E 00 
0B0C8F 00 
0B0C90 47    1696** LD	B, A
0B0C91 ED    1697** MLT	BC
0B0C92 4C 
0B0C93 09    1698** ADD	HL, BC
0B0C94 ED    1699** LD	HL, (HL)
0B0C95 27 
             1700** 
             1701** ;			ADD     A,A
             1702** ;			LD      C,A
             1703** ;			LD      B,0
             1704** ;			ADD     HL,BC
             1705** ;			LD      A,(HL)
             1706** ;			INC     HL
             1707** ;			LD      H,(HL)
             1708** ;			LD      L,A
             1709** 
0B0C96 C1    1710** POP     BC
0B0C97 E3    1711** EX      (SP),HL
0B0C98 C9    1712** RET                     ;OFF TO ROUTINE
             1713** 
              0006* include "basic/exec.asm"
             0001** ;
             0002** ; Title:	BBC Basic Interpreter - Z80 version
             0003** ;		Statement Execution & Assembler Module - "EXEC"
             0004** ; Author:	(C) Copyright  R.T.Russell  1984
             0005** ; Modified By:	Dean Belfield
             0006** ; Created:	12/05/2023
             0007** ; Last Updated:	26/06/2023
             0008** ;
             0009** ; Modinfo:
             0010** ; 27/01/1984:	Version 2.1
             0011** ; 02/03/1987:	Version 3.0
             0012** ; 11/06/1987:	Version 3.1
             0013** ; 12/05/2023:	Modified by Dean Belfield
             0014** ; 07/06/2023:	Modified to run in ADL mode
             0015** ; 26/06/2023:	Fixed DIM, USR, and address output of inline assembler
             0016** 
             0017** ; .ASSUME	ADL = 1
             0018** 
             0019** ; INCLUDE	"equs.inc"
             0020** 
             0021** ; SEGMENT CODE
             0022** 
             0023** ; XDEF	XEQ
             0024** ; XDEF	CHAIN0
             0025** ; XDEF	RUN
             0026** ; XDEF	SYNTAX
             0027** ; XDEF	ESCAPE
             0028** ; XDEF	FN_EX
             0029** ; XDEF	USR
             0030** ; XDEF	STORE5
             0031** ; XDEF	STORE4
             0032** ; XDEF	CHECK
             0033** ; XDEF	TERMQ
             0034** ; XDEF	FILL
             0035** ; XDEF	X4OR5
             0036** ; XDEF	MUL16
             0037** ; XDEF	CHANEL
             0038** ; XDEF	ASSEM
             0039** 
             0040** ; XREF	AUTO
             0041** ; XREF	DELETE
             0042** ; XREF	LOAD
             0043** ; XREF	LIST_
             0044** ; XREF	NEW
             0045** ; XREF	OLD
             0046** ; XREF	RENUM
             0047** ; XREF	SAVE
             0048** ; XREF	SOUND
             0049** ; XREF	CLG
             0050** ; XREF	DRAW
             0051** ; XREF	ENVEL
             0052** ; XREF	GCOL
             0053** ; XREF	MODE
             0054** ; XREF	MOVE
             0055** ; XREF	PLOT
             0056** ; XREF	COLOUR
             0057** ; XREF	EXPRS
             0058** ; XREF	HIMEM
             0059** ; XREF	LOAD0
             0060** ; XREF	RANDOM
             0061** ; XREF	CLEAR
             0062** ; XREF	ERRTRP
             0063** ; XREF	PAGE_
             0064** ; XREF	DATAPTR
             0065** ; XREF	ERRLIN
             0066** ; XREF	TRAP
             0067** ; XREF	NXT
             0068** ; XREF	SETLIN
             0069** ; XREF	CLOOP
             0070** ; XREF	OSSHUT
             0071** ; XREF	WARM
             0072** ; XREF	TRACEN
             0073** ; XREF	OUTCHR
             0074** ; XREF	PBCDL
             0075** ; XREF	OSCLI
             0076** ; XREF	LISTON
             0077** ; XREF	GETVAR
             0078** ; XREF	PUTVAR
             0079** ; XREF	DATPTR
             0080** ; XREF	ERROR_
             0081** ; XREF	EXPR
             0082** ; XREF	CREATE
             0083** ; XREF	EXPRI
             0084** ; XREF	BRAKET
             0085** ; XREF	FREE
             0086** ; XREF	OSBPUT
             0087** ; XREF	COUNT
             0088** ; XREF	STR
             0089** ; XREF	HEXSTR
             0090** ; XREF	CRLF
             0091** ; XREF	ITEMI
             0092** ; XREF	FINDL
             0093** ; XREF	TEST
             0094** ; XREF	EXPRN
             0095** ; XREF	DLOAD5
             0096** ; XREF	DLOAD5_SPL
             0097** ; XREF	LOADN
             0098** ; XREF	FPP
             0099** ; XREF	SWAP
             0100** ; XREF	GETDEF
             0101** ; XREF	ZERO
             0102** ; XREF	OSBGET
             0103** ; XREF	BUFFER
             0104** ; XREF	CONS
             0105** ; XREF	VAL0
             0106** ; XREF	OSLINE
             0107** ; XREF	CLRSCN
             0108** ; XREF	TELL
             0109** ; XREF	SAYLN
             0110** ; XREF	REPORT
             0111** ; XREF	PUTPTR
             0112** ; XREF	PUTIME
             0113** ; XREF	PUTIMS
             0114** ; XREF	LOMEM
             0115** ; XREF	WIDTH
             0116** ; XREF	OSWRCH
             0117** ; XREF	COMMA
             0118** ; XREF	OSCALL
             0119** ; XREF	SFIX
             0120** ; XREF	LOAD4
             0121** ; XREF	PUSHS
             0122** ; XREF	POPS
             0123** ; XREF	LOADS
             0124** ; XREF	PUTCSR
             0125** ; XREF	OUT_
             0126** ; XREF	R0
             0127** ;
             0128** ; List of token values used in this module
             0129** ;
             0130** TAND:			EQU     80H
             0131** TOR:			EQU     84H
             0132** TERROR_EX:			EQU     85H
             0133** LINE_EX_:			EQU     86H
             0134** OFF_:			EQU     87H
             0135** STEP:			EQU     88H
             0136** SPC:			EQU     89H
             0137** TAB:			EQU     8AH
             0138** ELSE_EX_:			EQU     8BH
             0139** THEN_EX_:			EQU     8CH
             0140** LINO_EX:			EQU     8DH
             0141** TO_EX:			EQU     B8H
             0142** TCMD_EX:			EQU     C6H
             0143** TCALL:			EQU     D6H
             0144** DATA_EX_:			EQU     DCH
             0145** DEF_:			EQU     DDH
             0146** TGOSUB:			EQU     E4H
             0147** TGOTO:			EQU     E5H
             0148** TON:			EQU     EEH
             0149** TPROC:			EQU     F2H
             0150** TSTOP:			EQU     FAH
             0151** 
             0152** ; The command table
             0153** ; Commands are tokens from C6H onwards; this lookup table is used to
             0154** ; run the corresponding function; Note that DATA and DEF both use the same
             0155** ; code as REM
             0156** ;
0B0C99 EA    0157** CMDTAB:			DW24  AUTO			; C6H
0B0C9A 38 
0B0C9B 0B 
0B0C9C 4D    0158** DW24  DELETE			; C7H
0B0C9D 37 
0B0C9E 0B 
0B0C9F 2B    0159** DW24  LOAD			; C8H
0B0CA0 39 
0B0CA1 0B 
0B0CA2 88    0160** DW24  LIST_			; C9H
0B0CA3 37 
0B0CA4 0B 
0B0CA5 08    0161** DW24  NEW			; CAH
0B0CA6 39 
0B0CA7 0B 
0B0CA8 0E    0162** DW24  OLD			; CBH
0B0CA9 39 
0B0CAA 0B 
0B0CAB 17    0163** DW24  RENUM			; CCH
0B0CAC 38 
0B0CAD 0B 
0B0CAE 3C    0164** DW24  SAVE			; CDH
0B0CAF 39 
0B0CB0 0B 
0B0CB1 A9    0165** DW24  PUT			; CEH
0B0CB2 17 
0B0CB3 0B 
0B0CB4 C9    0166** DW24  PTR_EX			; CFH
0B0CB5 15 
0B0CB6 0B 
0B0CB7 E3    0167** DW24  PAGEV_EX			; D0H
0B0CB8 15 
0B0CB9 0B 
0B0CBA F6    0168** DW24  TIMEV_EX			; D1H
0B0CBB 15 
0B0CBC 0B 
0B0CBD 1F    0169** DW24  LOMEMV_EX			; D2H
0B0CBE 16 
0B0CBF 0B 
0B0CC0 38    0170** DW24  HIMEMV_EX			; D3H
0B0CC1 16 
0B0CC2 0B 
0B0CC3 27    0171** DW24  SOUND			; D4H
0B0CC4 48 
0B0CC5 0B 
0B0CC6 C3    0172** DW24  BPUT			; D5H
0B0CC7 16 
0B0CC8 0B 
0B0CC9 DB    0173** DW24  CALL_			; D6H
0B0CCA 16 
0B0CCB 0B 
0B0CCC 4D    0174** DW24  CHAIN			; D7H
0B0CCD 0D 
0B0CCE 0B 
0B0CCF 98    0175** DW24  CLR			; D8H
0B0CD0 15 
0B0CD1 0B 
0B0CD2 B7    0176** DW24  CLOSE			; D9H
0B0CD3 16 
0B0CD4 0B 
0B0CD5 C3    0177** DW24  CLG			; DAH
0B0CD6 45 
0B0CD7 0B 
0B0CD8 6B    0178** DW24  CLS			; DBH
0B0CD9 15 
0B0CDA 0B 
0B0CDB 2C    0179** DW24  REM_EX             		; DCH: DATA
0B0CDC 0E 
0B0CDD 0B 
0B0CDE 2C    0180** DW24  REM_EX             		; DDH: DEF
0B0CDF 0E 
0B0CE0 0B 
0B0CE1 F2    0181** DW24  DIM_EX			; DEH
0B0CE2 0E 
0B0CE3 0B 
0B0CE4 ED    0182** DW24  DRAW			; DFH
0B0CE5 47 
0B0CE6 0B 
0B0CE7 C7    0183** DW24  END_			; E0H
0B0CE8 0D 
0B0CE9 0B 
0B0CEA 83    0184** DW24  ENDPRO			; E1H
0B0CEB 13 
0B0CEC 0B 
0B0CED B8    0185** DW24  ENVEL			; E2H
0B0CEE 45 
0B0CEF 0B 
0B0CF0 98    0186** DW24  FOR_EX			; E3H
0B0CF1 11 
0B0CF2 0B 
0B0CF3 48    0187** DW24  GOSUB_EX			; E4H
0B0CF4 11 
0B0CF5 0B 
0B0CF6 2C    0188** DW24  GOTO_EX			; E5H
0B0CF7 11 
0B0CF8 0B 
0B0CF9 81    0189** DW24  GCOL			; E6H
0B0CFA 47 
0B0CFB 0B 
0B0CFC 37    0190** DW24  IF_			; E7H
0B0CFD 15 
0B0CFE 0B 
0B0CFF 25    0191** DW24  INPUT			; E8H
0B0D00 14 
0B0D01 0B 
0B0D02 4D    0192** DW24  LET			; E9H
0B0D03 0E 
0B0D04 0B 
0B0D05 28    0193** DW24  LOCAL_EX_			; EAH
0B0D06 13 
0B0D07 0B 
0B0D08 D3    0194** DW24  MODE			; EBH
0B0D09 45 
0B0D0A 0B 
0B0D0B E5    0195** DW24  MOVE			; ECH
0B0D0C 47 
0B0D0D 0B 
0B0D0E E6    0196** DW24  NEXT_EX			; EDH
0B0D0F 11 
0B0D10 0B 
0B0D11 BF    0197** DW24  ON_EX_			; EEH
0B0D12 10 
0B0D13 0B 
0B0D14 91    0198** DW24  VDU			; EFH
0B0D15 16 
0B0D16 0B 
0B0D17 B3    0199** DW24  PLOT			; F0H
0B0D18 47 
0B0D19 0B 
0B0D1A C8    0200** DW24  PRINT_			; F1H
0B0D1B 0F 
0B0D1C 0B 
0B0D1D 85    0201** DW24  PROC_EX			; F2H
0B0D1E 12 
0B0D1F 0B 
0B0D20 D7    0202** DW24  READ			; F3H
0B0D21 14 
0B0D22 0B 
0B0D23 2C    0203** DW24  REM_EX			; F4H
0B0D24 0E 
0B0D25 0B 
0B0D26 68    0204** DW24  REPEAT_EX			; F5H
0B0D27 11 
0B0D28 0B 
0B0D29 90    0205** DW24  REPOR			; F6H
0B0D2A 15 
0B0D2B 0B 
0B0D2C A2    0206** DW24  RESTOR_EX			; F7H
0B0D2D 15 
0B0D2E 0B 
0B0D2F 56    0207** DW24  RETURN			; F8H
0B0D30 11 
0B0D31 0B 
0B0D32 47    0208** DW24  RUN			; F9H
0B0D33 0D 
0B0D34 0B 
0B0D35 78    0209** DW24  STOP			; FAH
0B0D36 15 
0B0D37 0B 
0B0D38 CF    0210** DW24  COLOUR			; FBH
0B0D39 46 
0B0D3A 0B 
0B0D3B 73    0211** DW24  TRACE_EX			; FCH
0B0D3C 16 
0B0D3D 0B 
0B0D3E 72    0212** DW24  UNTIL_EX			; FDH
0B0D3F 11 
0B0D40 0B 
0B0D41 65    0213** DW24  WIDTHV			; FEH
0B0D42 16 
0B0D43 0B 
0B0D44 12    0214** DW24  CLI             		; FFH: OSCLI
0B0D45 0E 
0B0D46 0B 
             0215** 
             0216** ; RUN
             0217** ; RUN "filename"
             0218** ;
0B0D47 CD    0219** RUN:			CALL    TERMQ			; Standalone RUN command?
0B0D48 7B 
0B0D49 19 
0B0D4A 0B 
0B0D4B 28    0220** JR      Z,RUN0			; Yes, so just RUN the code
0B0D4C 10 
             0221** 
             0222** ; CHAIN "filename"
             0223** ;
0B0D4D CD    0224** CHAIN:			CALL    EXPRS			; Get the filename
0B0D4E 16 
0B0D4F 05 
0B0D50 0B 
0B0D51 3E    0225** LD      A,CR			; Terminate it with a CR
0B0D52 0D 
0B0D53 12    0226** LD      (DE),A
0B0D54 ED    0227** CHAIN0:			LD      SP,(HIMEM)		; Reset SP
0B0D55 7B 
0B0D56 20 
0B0D57 4F 
0B0D57 0B   
0B0D59 CD    0228** CALL    LOAD0			; And load the file in
0B0D5A 20 
0B0D5B 3A 
0B0D5C 0B 
             0229** ;
0B0D5D ED    0230** RUN0:			LD      SP,(HIMEM)      	; Prepare for RUN
0B0D5E 7B 
0B0D5F 20 
0B0D60 4F 
0B0D60 0B   
0B0D62 DD    0231** LD      IX,RANDOM		; Pointer to the RANDOM sysvar
0B0D63 21 
0B0D64 38 
0B0D65 4F 
0B0D65 0B   
0B0D67 ED    0232** @@:			LD      A, R			; Use the R register to seed the random number generator
0B0D68 5F 
0B0D69 28    0233** JR      Z, @B			; Loop unti we get a non-zero value in A
0B0D6A FC 
0B0D6B 07    0234** RLCA				; Rotate it
0B0D6C 07    0235** RLCA
0B0D6D DD    0236** LD      (IX+3),A		; And store
0B0D6E 77 
0B0D6F 03 
0B0D70 9F    0237** SBC     A,A			; Depending upon the C flag, this will either be 00h or FFh
0B0D71 DD    0238** LD      (IX+4),A		; And store
0B0D72 77 
0B0D73 04 
0B0D74 CD    0239** CALL    CLEAR
0B0D75 77 
0B0D76 3A 
0B0D77 0B 
0B0D78 21    0240** LD      HL,0			; Clear the error trap sysvar
0B0D79 00 
0B0D7A 00 
0B0D7B 00 
0B0D7C 22    0241** LD      (ERRTRP),HL
0B0D7D 2C 
0B0D7E 4F 
0B0D7F 0B 
0B0D80 2A    0242** LD      HL,(PAGE_)		; Load HL with the start of program memory (PAGE)
0B0D81 14 
0B0D82 4F 
0B0D83 0B 
0B0D84 3E    0243** LD      A,DATA_EX_			; The DATA token value
0B0D85 DC 
0B0D86 CD    0244** CALL    SEARCH_EX          	; Search for the first DATA token in the tokenised listing
0B0D87 4F 
0B0D88 1A 
0B0D89 0B 
0B0D8A 22    0245** LD      (DATPTR),HL     	; Set data pointer
0B0D8B 31 
0B0D8C 4F 
0B0D8D 0B 
0B0D8E FD    0246** LD      IY,(PAGE_)		; Load IY with the start of program memory
0B0D8F 2A 
0B0D90 14 
0B0D91 4F 
0B0D91 0B   
             0247** ;
0B0D93 CD    0248** XEQ0:			CALL    NEWLIN
0B0D94 DB 
0B0D95 0D 
0B0D96 0B 
0B0D97 FD    0249** XEQ:			LD      (ERRLIN),IY     	; Error pointer
0B0D98 22 
0B0D99 35 
0B0D9A 4F 
0B0D9A 0B   
0B0D9C CD    0250** CALL    TRAP           		; Check keyboard
0B0D9D 6E 
0B0D9E 41 
0B0D9F 0B 
0B0DA0 CD    0251** XEQ1:			CALL    NXT
0B0DA1 71 
0B0DA2 0C 
0B0DA3 0B 
0B0DA4 FD    0252** INC     IY
0B0DA5 23 
0B0DA6 FE    0253** CP      ':'             	; Seperator
0B0DA7 3A 
0B0DA8 28    0254** JR      Z,XEQ1
0B0DA9 F6 
0B0DAA FE    0255** CP      CR
0B0DAB 0D 
0B0DAC 28    0256** JR      Z,XEQ0          	; New program line
0B0DAD E5 
0B0DAE D6    0257** SUB     TCMD_EX
0B0DAF C6 
0B0DB0 DA    0258** JP      C,LET0          	; Implied "LET"
0B0DB1 3B 
0B0DB2 0E 
0B0DB3 0B 
             0259** 
0B0DB4 01    0260** LD	BC, 3
0B0DB5 03 
0B0DB6 00 
0B0DB7 00 
0B0DB8 47    0261** LD	B, A
0B0DB9 ED    0262** MLT	BC
0B0DBA 4C 
0B0DBB 21    0263** LD	HL,CMDTAB
0B0DBC 99 
0B0DBD 0C 
0B0DBE 0B 
0B0DBF 09    0264** ADD	HL, BC
0B0DC0 ED    0265** LD	HL, (HL)		; Table entry
0B0DC1 27 
             0266** 
             0267** ;			ADD     A,A
             0268** ;			LD      C,A
             0269** ;			LD      B,0
             0270** ;			LD      HL,CMDTAB
             0271** ;			ADD     HL,BC
             0272** ;			LD      A,(HL)          	; Table entry
             0273** ;			INC     HL
             0274** ;			LD      H,(HL)
             0275** ;			LD      L,A
             0276** 
0B0DC2 CD    0277** CALL    NXT
0B0DC3 71 
0B0DC4 0C 
0B0DC5 0B 
0B0DC6 E9    0278** JP      (HL)            	; Execute the statement
             0279** 
             0280** ;END
             0281** ;
0B0DC7 CD    0282** END_:			CALL    SETLIN          ;FIND CURRENT LINE
0B0DC8 AF 
0B0DC9 3B 
0B0DCA 0B 
0B0DCB 7C    0283** LD      A,H
0B0DCC B5    0284** OR      L               ;DIRECT?
0B0DCD CA    0285** JP      Z,CLOOP
0B0DCE 81 
0B0DCF 32 
0B0DD0 0B 
0B0DD1 1E    0286** LD      E,0
0B0DD2 00 
0B0DD3 CD    0287** CALL    OSSHUT          ;CLOSE ALL FILES
0B0DD4 2C 
0B0DD5 45 
0B0DD6 0B 
0B0DD7 C3    0288** JP      WARM            ;"Ready"
0B0DD8 80 
0B0DD9 32 
0B0DDA 0B 
             0289** ;
0B0DDB FD    0290** NEWLIN:			LD      A,(IY+0)        ;A=LINE LENGTH
0B0DDC 7E 
0B0DDD 00 
0B0DDE 01    0291** LD      BC,3
0B0DDF 03 
0B0DE0 00 
0B0DE1 00 
0B0DE2 FD    0292** ADD     IY,BC
0B0DE3 09 
0B0DE4 B7    0293** OR      A
0B0DE5 28    0294** JR      Z,END_           ;LENGTH=0, EXIT
0B0DE6 E0 
0B0DE7 2A    0295** LD      HL,(TRACEN)
0B0DE8 26 
0B0DE9 4F 
0B0DEA 0B 
0B0DEB 7C    0296** LD      A,H
0B0DEC B5    0297** OR      L
0B0DED C8    0298** RET     Z
0B0DEE 11    0299** LD	DE, 0		;Clear DE
0B0DEF 00 
0B0DF0 00 
0B0DF1 00 
0B0DF2 FD    0300** LD      D,(IY-1)        ;DE = LINE NUMBER
0B0DF3 56 
0B0DF4 FF 
0B0DF5 FD    0301** LD      E,(IY-2)
0B0DF6 5E 
0B0DF7 FE 
0B0DF8 ED    0302** SBC     HL,DE
0B0DF9 52 
0B0DFA D8    0303** RET     C
0B0DFB EB    0304** EX      DE,HL
0B0DFC 3E    0305** LD      A,'['           ;TRACE
0B0DFD 5B 
0B0DFE CD    0306** CALL    OUTCHR
0B0DFF 50 
0B0E00 3B 
0B0E01 0B 
0B0E02 CD    0307** CALL    PBCDL
0B0E03 F8 
0B0E04 3B 
0B0E05 0B 
0B0E06 3E    0308** LD      A,']'
0B0E07 5D 
0B0E08 CD    0309** CALL    OUTCHR
0B0E09 50 
0B0E0A 3B 
0B0E0B 0B 
0B0E0C 3E    0310** LD      A,' '
0B0E0D 20 
0B0E0E C3    0311** JP      OUTCHR
0B0E0F 50 
0B0E10 3B 
0B0E11 0B 
             0312** 
             0313** ; Routines for each statement -------------------------------------------------
             0314** 
             0315** ; OSCLI
             0316** ;
0B0E12 CD    0317** CLI:			CALL    EXPRS
0B0E13 16 
0B0E14 05 
0B0E15 0B 
0B0E16 3E    0318** LD      A,CR
0B0E17 0D 
0B0E18 12    0319** LD      (DE),A
0B0E19 21    0320** LD      HL,ACCS
0B0E1A 00 
0B0E1B 4C 
0B0E1C 0B 
0B0E1D CD    0321** CALL    OSCLI
0B0E1E 91 
0B0E1F 41 
0B0E20 0B 
0B0E21 C3    0322** JP      XEQ
0B0E22 97 
0B0E23 0D 
0B0E24 0B 
             0323** 
             0324** ; REM, *
             0325** ;
0B0E25 FD    0326** EXT_EX:			PUSH    IY
0B0E26 E5 
0B0E27 E1    0327** POP     HL
0B0E28 CD    0328** CALL    OSCLI
0B0E29 91 
0B0E2A 41 
0B0E2B 0B 
0B0E2C FD    0329** REM_EX:			PUSH    IY
0B0E2D E5 
0B0E2E E1    0330** POP     HL
0B0E2F 3E    0331** LD      A,CR
0B0E30 0D 
0B0E31 47    0332** LD      B,A
0B0E32 ED    0333** CPIR                    ;FIND LINE END
0B0E33 B1 
0B0E34 E5    0334** PUSH    HL
0B0E35 FD    0335** POP     IY
0B0E36 E1 
0B0E37 C3    0336** JP      XEQ0
0B0E38 93 
0B0E39 0D 
0B0E3A 0B 
             0337** 
             0338** ; [LET] var = expr
             0339** ;
0B0E3B FE    0340** LET0:			CP      ELSE_EX_-TCMD_EX
0B0E3C C5 
0B0E3D 28    0341** JR      Z,REM_EX
0B0E3E ED 
             0342** ; CP      ('*'-TCMD) & 0FFH
             0343** ; JR      Z,EXT_EX
             0344** ; CP      ('='-TCMD) & 0FFH
             0345** ; JR      Z,FNEND
             0346** ; CP      ('['-TCMD) & 0FFH
             0347** ; ez80asm doesn't like () in expressions
0B0E3F FE    0348** CP      '*'-TCMD_EX & 0FFH
0B0E40 64 
0B0E41 28    0349** JR      Z,EXT_EX
0B0E42 E2 
0B0E43 FE    0350** CP      '='-TCMD_EX & 0FFH
0B0E44 77 
0B0E45 28    0351** JR      Z,FNEND
0B0E46 5B 
0B0E47 FE    0352** CP      '['-TCMD_EX & 0FFH
0B0E48 95 
0B0E49 28    0353** JR      Z,ASM
0B0E4A 25 
0B0E4B FD    0354** DEC     IY
0B0E4C 2B 
0B0E4D CD    0355** LET:			CALL    ASSIGN			; Assign the variable
0B0E4E BF 
0B0E4F 17 
0B0E50 0B 
0B0E51 CA    0356** JP      Z,XEQ			; Return if Z as it is a numeric variable that has been assigned in ASSIGN
0B0E52 97 
0B0E53 0D 
0B0E54 0B 
0B0E55 38    0357** JR      C,SYNTAX        	; Return if C as it is an illegal variable
0B0E56 41 
             0358** ;
0B0E57 F5    0359** PUSH    AF              	; At this point we're dealing with a string type (A=81h)
0B0E58 CD    0360** CALL    EQUALS			; Check if the variable is followed by an '=' symbol; this will throw a 'Mistake' error if not
0B0E59 91 
0B0E5A 19 
0B0E5B 0B 
0B0E5C E5    0361** PUSH    HL			; HL: Address of the variable
0B0E5D CD    0362** CALL    EXPRS
0B0E5E 16 
0B0E5F 05 
0B0E60 0B 
0B0E61 DD    0363** POP     IX			; IX: Address of the variable
0B0E62 E1 
0B0E63 F1    0364** POP     AF			; AF: The variable type
0B0E64 CD    0365** CALL    STACCS			; Copy the string from ACCS to the variable area
0B0E65 01 
0B0E66 18 
0B0E67 0B 
0B0E68 C3    0366** XEQR:			JP      XEQ
0B0E69 97 
0B0E6A 0D 
0B0E6B 0B 
             0367** ;
0B0E6C CD    0368** ASM0:			CALL    NEWLIN
0B0E6D DB 
0B0E6E 0D 
0B0E6F 0B 
0B0E70 FD    0369** ASM:			LD      (ERRLIN),IY
0B0E71 22 
0B0E72 35 
0B0E73 4F 
0B0E73 0B   
0B0E75 CD    0370** CALL    TRAP
0B0E76 6E 
0B0E77 41 
0B0E78 0B 
0B0E79 CD    0371** CALL    ASSEM
0B0E7A 9C 
0B0E7B 1A 
0B0E7C 0B 
0B0E7D 38    0372** JR      C,SYNTAX
0B0E7E 19 
0B0E7F FE    0373** CP      CR
0B0E80 0D 
0B0E81 28    0374** JR      Z,ASM0
0B0E82 E9 
0B0E83 21    0375** LD      HL,LISTON
0B0E84 40 
0B0E85 4F 
0B0E86 0B 
0B0E87 7E    0376** LD      A,(HL)
0B0E88 E6    0377** AND     0FH
0B0E89 0F 
0B0E8A F6    0378** OR      B0H
0B0E8B B0 
0B0E8C 77    0379** LD      (HL),A
0B0E8D 18    0380** JR      XEQR
0B0E8E D9 
             0381** ;
0B0E8F CD    0382** VAR_:			CALL    GETVAR
0B0E90 3B 
0B0E91 3C 
0B0E92 0B 
0B0E93 C8    0383** RET     Z
0B0E94 D2    0384** JP      NC,PUTVAR
0B0E95 2A 
0B0E96 3C 
0B0E97 0B 
0B0E98 3E    0385** SYNTAX:			LD      A,16            ;"Syntax error"
0B0E99 10 
0B0E9A 18    0386** JR	ERROR0_EX
0B0E9B 02 
0B0E9C 3E    0387** ESCAPE:			LD      A,17            ;"Escape"
0B0E9D 11 
0B0E9E C3    0388** ERROR0_EX:			JP      ERROR_
0B0E9F 61 
0B0EA0 39 
0B0EA1 0B 
             0389** 
             0390** ; =
             0391** ;
0B0EA2 CD    0392** FNEND:			CALL    EXPR            ;FUNCTION RESULT
0B0EA3 C8 
0B0EA4 03 
0B0EA5 0B 
0B0EA6 43    0393** LD      B,E
0B0EA7 EB    0394** EX      DE,HL
0B0EA8 D9    0395** EXX                     ;SAVE RESULT
0B0EA9 EB    0396** EX      DE,HL           ; IN DEB'C'D'E'
0B0EAA C1    0397** FNEND5:			POP     BC
0B0EAB 21    0398** LD      HL,LOCCHK
0B0EAC 59 
0B0EAD 19 
0B0EAE 0B 
0B0EAF B7    0399** OR      A
0B0EB0 ED    0400** SBC     HL,BC
0B0EB1 42 
0B0EB2 28    0401** JR      Z,FNEND0        ;LOCAL VARIABLE
0B0EB3 1C 
0B0EB4 21    0402** LD      HL,FNCHK
0B0EB5 85 
0B0EB6 12 
0B0EB7 0B 
0B0EB8 B7    0403** OR      A
0B0EB9 ED    0404** SBC     HL,BC
0B0EBA 42 
0B0EBB 3E    0405** LD      A,7
0B0EBC 07 
0B0EBD 20    0406** JR      NZ,ERROR0_EX       ;"No FN"
0B0EBE DF 
0B0EBF FD    0407** POP     IY
0B0EC0 E1 
0B0EC1 FD    0408** LD      (ERRLIN),IY     ;IN CASE OF ERROR
0B0EC2 22 
0B0EC3 35 
0B0EC4 4F 
0B0EC4 0B   
0B0EC6 EB    0409** EX      DE,HL
0B0EC7 D9    0410** EXX
0B0EC8 EB    0411** EX      DE,HL
0B0EC9 11    0412** LD      DE,ACCS
0B0ECA 00 
0B0ECB 4C 
0B0ECC 0B 
0B0ECD 58    0413** LD      E,B
0B0ECE 08    0414** EX      AF,AF'
0B0ECF C9    0415** RET
             0416** ;
0B0ED0 DD    0417** FNEND0:			POP     IX
0B0ED1 E1 
0B0ED2 C1    0418** POP     BC
0B0ED3 78    0419** LD      A,B
0B0ED4 B7    0420** OR      A
0B0ED5 FA    0421** JP      M,FNEND1        ;STRING
0B0ED6 E3 
0B0ED7 0E 
0B0ED8 0B 
0B0ED9 E1    0422** POP     HL
0B0EDA D9    0423** EXX
0B0EDB E1    0424** POP     HL
0B0EDC D9    0425** EXX
0B0EDD CD    0426** CALL    STORE
0B0EDE D7 
0B0EDF 17 
0B0EE0 0B 
0B0EE1 18    0427** JR      FNEND5
0B0EE2 C7 
0B0EE3 21    0428** FNEND1:			LD      HL,0
0B0EE4 00 
0B0EE5 00 
0B0EE6 00 
0B0EE7 39    0429** ADD     HL,SP
0B0EE8 D5    0430** PUSH    DE
0B0EE9 59    0431** LD      E,C
0B0EEA CD    0432** CALL    STORES
0B0EEB 05 
0B0EEC 18 
0B0EED 0B 
0B0EEE D1    0433** POP     DE
0B0EEF F9    0434** LD      SP,HL
0B0EF0 18    0435** JR      FNEND5
0B0EF1 B8 
             0436** 
             0437** ; DIM var(dim1[,dim2[,...]])[,var(...]
             0438** ; DIM var expr[,var expr...]
             0439** ;
0B0EF2 CD    0440** DIM_EX:			CALL    GETVAR          	; Get the variable
0B0EF3 3B 
0B0EF4 3C 
0B0EF5 0B 
0B0EF6 DA    0441** JP      C,BADDIM		; Throw a "Bad Dim" error
0B0EF7 82 
0B0EF8 0F 
0B0EF9 0B 
0B0EFA CA    0442** JP      Z,DIM4			; If Z then the command is DIM var% expr, so don't need to create an entity
0B0EFB 8C 
0B0EFC 0F 
0B0EFD 0B 
0B0EFE CD    0443** CALL    CREATE			; Create a new entity
0B0EFF AF 
0B0F00 3D 
0B0F01 0B 
0B0F02 E5    0444** PUSH    HL			; HL: Address of the entity
0B0F03 DD    0445** POP     IX			; IX: Address of the entity
0B0F04 E1 
0B0F05 FD    0446** LD      A,(IY)			; Fetch the next character from the tokenised string
0B0F06 7E 
0B0F07 00 
0B0F08 FE    0447** CP      '('			; Check for opening brackets
0B0F09 28 
0B0F0A 7A    0448** LD      A,D			;  A: The dimension variable type (04h = Integer, 05h = Float, 81h = String)
0B0F0B 20    0449** JR      NZ,DIM4			; It is not a bracket; the command is DIM var expr
0B0F0C 7F 
             0450** ;
             0451** ; At this point we're reserving a variable array
             0452** ;
0B0F0D E5    0453** PUSH    HL			; HL: Address of the entity
0B0F0E F5    0454** PUSH    AF           	   	;  A: Entity type (04h = Integer, 05h = Float, 81h = String)
0B0F0F 11    0455** LD      DE,1			; DE: Total size of array accumulator (important for multi-dimensioned arrays)
0B0F10 01 
0B0F11 00 
0B0F12 00 
0B0F13 42    0456** LD      B,D			;  B: The number of dimensions in the array
             0457** ;
0B0F14 FD    0458** DIM1:			INC     IY			; Skip to the next token
0B0F15 23 
0B0F16 C5    0459** PUSH    BC			; Stack the dimension counter
0B0F17 D5    0460** PUSH    DE			; Stack the total size of array accumulator
0B0F18 DD    0461** PUSH    IX			; Stack the entity address
0B0F19 E5 
0B0F1A CD    0462** CALL    EXPRI           	; Fetch the size of this dimension
0B0F1B 0B 
0B0F1C 05 
0B0F1D 0B 
0B0F1E CB    0463** BIT     7,H			; If it is negative then
0B0F1F 7C 
0B0F20 20    0464** JR      NZ,BADDIM		; Throw a "Bad Dim" error
0B0F21 60 
0B0F22 D9    0465** EXX
0B0F23 23    0466** INC     HL			; HL: Size of this dimension; increment (BBC BASIC DIMs are always one bigger)
0B0F24 DD    0467** POP     IX			; IX: The entity address
0B0F25 E1 
0B0F26 DD    0468** INC     IX
0B0F27 23 
0B0F28 DD    0469** LD      (IX),L          	; Save the size of this dimension in the entity
0B0F29 75 
0B0F2A 00 
0B0F2B DD    0470** INC     IX
0B0F2C 23 
0B0F2D DD    0471** LD      (IX),H
0B0F2E 74 
0B0F2F 00 
0B0F30 C1    0472** POP     BC
0B0F31 CD    0473** CALL    MUL16           	; HL = HL * BC (Number of Dimensions * Total size of array accumulator)
0B0F32 73 
0B0F33 1A 
0B0F34 0B 
0B0F35 38    0474** JR      C,NOROOM        	; Throw a "No Room" error if overflow
0B0F36 4F 
0B0F37 EB    0475** EX      DE,HL           	; DE: The new total size of array accumulator
0B0F38 C1    0476** POP     BC
0B0F39 04    0477** INC     B               	;  B: The dimension counter; increment
0B0F3A FD    0478** LD      A,(IY)			; Fetch the nex token
0B0F3B 7E 
0B0F3C 00 
0B0F3D FE    0479** CP      ','             	; Check for another dimension in the array
0B0F3E 2C 
0B0F3F 28    0480** JR      Z,DIM1			; And loop
0B0F40 D3 
             0481** ;
0B0F41 CD    0482** CALL    BRAKET          	; Check for closing bracket
0B0F42 30 
0B0F43 0C 
0B0F44 0B 
0B0F45 F1    0483** POP     AF              	; Restore the type
0B0F46 DD    0484** INC     IX
0B0F47 23 
0B0F48 DD    0485** EX      (SP),IX
0B0F49 E3 
0B0F4A DD    0486** LD      (IX),B          	; Number of dimensions
0B0F4B 70 
0B0F4C 00 
0B0F4D CD    0487** CALL    X4OR5           	; Dimension Accumulator Value * 4 or * 5 depending on type
0B0F4E 66 
0B0F4F 1A 
0B0F50 0B 
0B0F51 E1    0488** POP     HL			; Restore the entity address
0B0F52 38    0489** JR      C,NOROOM		; Throw a "No Room" error if there is an overflow
0B0F53 32 
             0490** ;
             0491** ; We now allocate the memory for the array
             0492** ;
0B0F54 19    0493** DIM3:			ADD     HL,DE
0B0F55 38    0494** JR      C,NOROOM
0B0F56 2F 
0B0F57 E5    0495** PUSH    HL
0B0F58 24    0496** INC     H
0B0F59 28    0497** JR      Z,NOROOM
0B0F5A 2B 
0B0F5B ED    0498** SBC     HL,SP
0B0F5C 72 
0B0F5D 30    0499** JR      NC,NOROOM       	; Throw an "Out of Space" error
0B0F5E 27 
0B0F5F E1    0500** POP     HL
0B0F60 22    0501** LD      (FREE),HL
0B0F61 1D 
0B0F62 4F 
0B0F63 0B 
0B0F64 7A    0502** DIM2:			LD      A,D
0B0F65 B3    0503** OR      E
0B0F66 28    0504** JR      Z,DIM5
0B0F67 06 
0B0F68 2B    0505** DEC     HL
0B0F69 36    0506** LD      (HL),0         		; Initialise the array
0B0F6A 00 
0B0F6B 1B    0507** DEC     DE
0B0F6C 18    0508** JR      DIM2
0B0F6D F6 
0B0F6E CD    0509** DIM5:			CALL    NXT
0B0F6F 71 
0B0F70 0C 
0B0F71 0B 
0B0F72 FE    0510** CP      ','            		; Another variable?
0B0F73 2C 
0B0F74 C2    0511** JP      NZ,XEQ
0B0F75 97 
0B0F76 0D 
0B0F77 0B 
0B0F78 FD    0512** INC     IY
0B0F79 23 
0B0F7A CD    0513** CALL    NXT
0B0F7B 71 
0B0F7C 0C 
0B0F7D 0B 
0B0F7E C3    0514** JP      DIM_EX
0B0F7F F2 
0B0F80 0E 
0B0F81 0B 
             0515** ;
             0516** ; DIM errors
             0517** ;
0B0F82 3E    0518** BADDIM:			LD      A,10            	; Throw a "Bad DIM" error
0B0F83 0A 
0B0F84 18    0519** JR	ERROR1_EX
0B0F85 02 
0B0F86 3E    0520** NOROOM:			LD      A,11            	; Throw a "DIM space" error
0B0F87 0B 
0B0F88 C3    0521** ERROR1_EX:			JP      ERROR_
0B0F89 61 
0B0F8A 39 
0B0F8B 0B 
             0522** ;
             0523** ; At this point we're reserving a block of memory, i.e.
             0524** ; DIM var expr[,var expr...]
             0525** ;
0B0F8C B7    0526** DIM4:			OR      A			;  A: The dimension variable type
0B0F8D 28    0527** JR      Z,BADDIM		; Throw "Bad Dim" if variable is an 8-bit indirection
0B0F8E F3 
0B0F8F FA    0528** JP      M,BADDIM        	; or a string
0B0F90 82 
0B0F91 0F 
0B0F92 0B 
0B0F93 47    0529** LD      B,A			; Temporarily store the dimension variable type in B
0B0F94 FD    0530** LD      A,(IY-1)		; Get the last character but one
0B0F95 7E 
0B0F96 FF 
0B0F97 FE    0531** CP      ')'			; Check if it is a trailing bracket
0B0F98 29 
0B0F99 28    0532** JR      Z,BADDIM		; And throw a "Bad Dim" error if there is a trailing bracket
0B0F9A E7 
             0533** ;
0B0F9B 21    0534** LD	HL,0			; Clear HL
0B0F9C 00 
0B0F9D 00 
0B0F9E 00 
0B0F9F 3A    0535** LD	A,(FREE+0)		; HL: Lower 16 bits of FREE
0B0FA0 1D 
0B0FA1 4F 
0B0FA2 0B 
0B0FA3 6F    0536** LD	L,A
0B0FA4 3A    0537** LD	A,(FREE+1)
0B0FA5 1E 
0B0FA6 4F 
0B0FA7 0B 
0B0FA8 67    0538** LD	H,A
0B0FA9 78    0539** LD	A,B			; Restore the dimension variable type
0B0FAA D9    0540** EXX
0B0FAB 21    0541** LD	HL,0			; Clear HL
0B0FAC 00 
0B0FAD 00 
0B0FAE 00 
0B0FAF 47    0542** LD	B,A			; Temporarily store the dimension variable type in B
0B0FB0 3A    0543** LD	A,(FREE+2)		; HL: Upper 8 bits of FREE (bits 16-23)
0B0FB1 1F 
0B0FB2 4F 
0B0FB3 0B 
0B0FB4 6F    0544** LD	L,A
0B0FB5 78    0545** LD	A,B			; Restore the dimension variable type
0B0FB6 4C    0546** LD	C,H
0B0FB7 CD    0547** CALL    STORE           	; Store the address
0B0FB8 D7 
0B0FB9 17 
0B0FBA 0B 
0B0FBB CD    0548** CALL    EXPRI			; Get the number of bytes to store
0B0FBC 0B 
0B0FBD 05 
0B0FBE 0B 
0B0FBF D9    0549** EXX
0B0FC0 23    0550** INC     HL			; Add one to it
0B0FC1 EB    0551** EX      DE,HL
0B0FC2 2A    0552** LD      HL,(FREE)
0B0FC3 1D 
0B0FC4 4F 
0B0FC5 0B 
0B0FC6 18    0553** JR      DIM3			; Continue with the DIM
0B0FC7 8C 
             0554** 
             0555** ; PRINT list...
             0556** ; PRINT #channel,list...
             0557** ;
0B0FC8 FE    0558** PRINT_:			CP      '#'
0B0FC9 23 
0B0FCA 20    0559** JR      NZ,PRINT0
0B0FCB 7C 
0B0FCC CD    0560** CALL    CHNL            ;CHANNEL NO. = E
0B0FCD 93 
0B0FCE 1A 
0B0FCF 0B 
0B0FD0 CD    0561** PRNTN1:			CALL    NXT
0B0FD1 71 
0B0FD2 0C 
0B0FD3 0B 
0B0FD4 FE    0562** CP      ','
0B0FD5 2C 
0B0FD6 C2    0563** JP      NZ,XEQ
0B0FD7 97 
0B0FD8 0D 
0B0FD9 0B 
0B0FDA FD    0564** INC     IY
0B0FDB 23 
0B0FDC D5    0565** PUSH    DE
0B0FDD CD    0566** CALL    EXPR            ;ITEM TO PRINT
0B0FDE C8 
0B0FDF 03 
0B0FE0 0B 
0B0FE1 08    0567** EX      AF,AF'
0B0FE2 FA    0568** JP      M,PRNTN2        ;STRING
0B0FE3 08 
0B0FE4 10 
0B0FE5 0B 
0B0FE6 D1    0569** POP     DE
0B0FE7 C5    0570** PUSH    BC
0B0FE8 D9    0571** EXX
0B0FE9 7D    0572** LD      A,L
0B0FEA D9    0573** EXX
0B0FEB CD    0574** CALL    OSBPUT
0B0FEC 3C 
0B0FED 45 
0B0FEE 0B 
0B0FEF D9    0575** EXX
0B0FF0 7C    0576** LD      A,H
0B0FF1 D9    0577** EXX
0B0FF2 CD    0578** CALL    OSBPUT
0B0FF3 3C 
0B0FF4 45 
0B0FF5 0B 
0B0FF6 7D    0579** LD      A,L
0B0FF7 CD    0580** CALL    OSBPUT
0B0FF8 3C 
0B0FF9 45 
0B0FFA 0B 
0B0FFB 7C    0581** LD      A,H
0B0FFC CD    0582** CALL    OSBPUT
0B0FFD 3C 
0B0FFE 45 
0B0FFF 0B 
0B1000 C1    0583** POP     BC
0B1001 79    0584** LD      A,C
0B1002 CD    0585** CALL    OSBPUT
0B1003 3C 
0B1004 45 
0B1005 0B 
0B1006 18    0586** JR      PRNTN1
0B1007 C8 
0B1008 4B    0587** PRNTN2:			LD      C,E
0B1009 D1    0588** POP     DE
0B100A 21    0589** LD      HL,ACCS
0B100B 00 
0B100C 4C 
0B100D 0B 
0B100E 0C    0590** INC     C
0B100F 0D    0591** PRNTN3:			DEC     C
0B1010 28    0592** JR      Z,PRNTN4
0B1011 0A 
0B1012 7E    0593** LD      A,(HL)
0B1013 23    0594** INC     HL
0B1014 C5    0595** PUSH    BC
0B1015 CD    0596** CALL    OSBPUT
0B1016 3C 
0B1017 45 
0B1018 0B 
0B1019 C1    0597** POP     BC
0B101A 18    0598** JR      PRNTN3
0B101B F3 
0B101C 3E    0599** PRNTN4:			LD      A,CR
0B101D 0D 
0B101E CD    0600** CALL    OSBPUT
0B101F 3C 
0B1020 45 
0B1021 0B 
0B1022 18    0601** JR      PRNTN1
0B1023 AC 
             0602** ;
0B1024 06    0603** PRINT6:			LD      B,2
0B1025 02 
0B1026 18    0604** JR      PRINTC
0B1027 27 
0B1028 01    0605** PRINT8:			LD      BC,100H
0B1029 00 
0B102A 01 
0B102B 00 
0B102C 18    0606** JR      PRINTC
0B102D 21 
0B102E 21    0607** PRINT9:			LD      HL,STAVAR
0B102F 00 
0B1030 4E 
0B1031 0B 
0B1032 AF    0608** XOR     A
0B1033 BE    0609** CP      (HL)
0B1034 28    0610** JR      Z,PRINT0
0B1035 12 
0B1036 3A    0611** LD      A,(COUNT)
0B1037 3D 
0B1038 4F 
0B1039 0B 
0B103A B7    0612** OR      A
0B103B 28    0613** JR      Z,PRINT0
0B103C 0B 
0B103D 96    0614** PRINTA:			SUB     (HL)
0B103E 28    0615** JR      Z,PRINT0
0B103F 08 
0B1040 30    0616** JR      NC,PRINTA
0B1041 FB 
0B1042 ED    0617** NEG
0B1043 44 
0B1044 CD    0618** CALL    FILL
0B1045 F0 
0B1046 19 
0B1047 0B 
0B1048 3A    0619** PRINT0:			LD      A,(STAVAR)
0B1049 00 
0B104A 4E 
0B104B 0B 
0B104C 4F    0620** LD      C,A             ;PRINTS
0B104D 06    0621** LD      B,0             ;PRINTF
0B104E 00 
0B104F CD    0622** PRINTC:			CALL    TERMQ
0B1050 7B 
0B1051 19 
0B1052 0B 
0B1053 28    0623** JR      Z,PRINT4
0B1054 3F 
0B1055 CB    0624** RES     0,B
0B1056 80 
0B1057 FD    0625** INC     IY
0B1058 23 
0B1059 FE    0626** CP      '~'
0B105A 7E 
0B105B 28    0627** JR      Z,PRINT6
0B105C C7 
0B105D FE    0628** CP      ';'
0B105E 3B 
0B105F 28    0629** JR      Z,PRINT8
0B1060 C7 
0B1061 FE    0630** CP      ','
0B1062 2C 
0B1063 28    0631** JR      Z,PRINT9
0B1064 C9 
0B1065 CD    0632** CALL    FORMAT          ;SPC, TAB, '
0B1066 A0 
0B1067 19 
0B1068 0B 
0B1069 28    0633** JR      Z,PRINTC
0B106A E4 
0B106B FD    0634** DEC     IY
0B106C 2B 
0B106D C5    0635** PUSH    BC
0B106E CD    0636** CALL    EXPR            ;VARIABLE TYPE
0B106F C8 
0B1070 03 
0B1071 0B 
0B1072 08    0637** EX      AF,AF'
0B1073 FA    0638** JP      M,PRINT3        ;STRING
0B1074 8D 
0B1075 10 
0B1076 0B 
0B1077 D1    0639** POP     DE
0B1078 D5    0640** PUSH    DE
0B1079 CB    0641** BIT     1,D
0B107A 4A 
0B107B F5    0642** PUSH    AF
0B107C CC    0643** CALL    Z,STR           ;DECIMAL
0B107D 67 
0B107E 0B 
0B107F 0B 
0B1080 F1    0644** POP     AF
0B1081 C4    0645** CALL    NZ,HEXSTR       ;HEX
0B1082 1B 
0B1083 0B 
0B1084 0B 
0B1085 C1    0646** POP     BC
0B1086 C5    0647** PUSH    BC
0B1087 79    0648** LD      A,C
0B1088 93    0649** SUB     E
0B1089 D4    0650** CALL    NC,FILL         ;RIGHT JUSTIFY
0B108A F0 
0B108B 19 
0B108C 0B 
0B108D C1    0651** PRINT3:			POP     BC
0B108E CD    0652** CALL    PTEXT           ;PRINT
0B108F FF 
0B1090 19 
0B1091 0B 
0B1092 18    0653** JR      PRINTC
0B1093 BB 
0B1094 CB    0654** PRINT4:			BIT     0,B
0B1095 40 
0B1096 CC    0655** CALL    Z,CRLF
0B1097 48 
0B1098 3B 
0B1099 0B 
0B109A C3    0656** JP      XEQ
0B109B 97 
0B109C 0D 
0B109D 0B 
             0657** 
             0658** ; ON ERROR statement [:statement...]
             0659** ; ON ERROR OFF
             0660** ;
0B109E FD    0661** ONERR:			INC     IY              ;SKIP "ERROR"
0B109F 23 
0B10A0 21    0662** LD      HL,0
0B10A1 00 
0B10A2 00 
0B10A3 00 
0B10A4 22    0663** LD      (ERRTRP),HL
0B10A5 2C 
0B10A6 4F 
0B10A7 0B 
0B10A8 CD    0664** CALL    NXT
0B10A9 71 
0B10AA 0C 
0B10AB 0B 
0B10AC FE    0665** CP      OFF_
0B10AD 87 
0B10AE FD    0666** INC     IY
0B10AF 23 
0B10B0 CA    0667** JP      Z,XEQ
0B10B1 97 
0B10B2 0D 
0B10B3 0B 
0B10B4 FD    0668** DEC     IY
0B10B5 2B 
0B10B6 FD    0669** LD      (ERRTRP),IY
0B10B7 22 
0B10B8 2C 
0B10B9 4F 
0B10B9 0B   
0B10BB C3    0670** JP      REM_EX
0B10BC 2C 
0B10BD 0E 
0B10BE 0B 
             0671** 
             0672** ; ON expr GOTO line[,line...] [ELSE statement]
             0673** ; ON expr GOTO line[,line...] [ELSE line]
             0674** ; ON expr GOSUB line[,line...] [ELSE statement]
             0675** ; ON expr GOSUB line[,line...] [ELSE line]
             0676** ; ON expr PROCone [,PROCtwo..] [ELSE PROCotherwise]
             0677** ;
0B10BF FE    0678** ON_EX_:			CP      TERROR_EX
0B10C0 85 
0B10C1 28    0679** JR      Z,ONERR         ;"ON ERROR"
0B10C2 DB 
0B10C3 CD    0680** CALL    EXPRI
0B10C4 0B 
0B10C5 05 
0B10C6 0B 
0B10C7 FD    0681** LD      A,(IY)
0B10C8 7E 
0B10C9 00 
0B10CA FD    0682** INC     IY
0B10CB 23 
0B10CC 1E    0683** LD      E,','           ;SEPARATOR
0B10CD 2C 
0B10CE FE    0684** CP      TGOTO
0B10CF E5 
0B10D0 28    0685** JR      Z,ON1
0B10D1 0B 
0B10D2 FE    0686** CP      TGOSUB
0B10D3 E4 
0B10D4 28    0687** JR      Z,ON1
0B10D5 07 
0B10D6 1E    0688** LD      E,TPROC
0B10D7 F2 
0B10D8 BB    0689** CP      E
0B10D9 3E    0690** LD      A,39
0B10DA 27 
0B10DB 20    0691** JR      NZ,ERROR2_EX       ;"ON syntax"
0B10DC 45 
0B10DD 57    0692** ON1:			LD      D,A
0B10DE D9    0693** EXX
0B10DF E5    0694** PUSH    HL
0B10E0 D9    0695** EXX
0B10E1 C1    0696** POP     BC              ;ON INDEX
0B10E2 78    0697** LD      A,B
0B10E3 B4    0698** OR      H
0B10E4 B5    0699** OR      L
0B10E5 20    0700** JR      NZ,ON4          ;OUT OF RANGE
0B10E6 2A 
0B10E7 B1    0701** OR      C
0B10E8 28    0702** JR      Z,ON4
0B10E9 27 
0B10EA 0D    0703** DEC     C
0B10EB 28    0704** JR      Z,ON3           ;INDEX=1
0B10EC 0E 
0B10ED CD    0705** ON2:			CALL    TERMQ
0B10EE 7B 
0B10EF 19 
0B10F0 0B 
0B10F1 28    0706** JR      Z,ON4           ;OUT OF RANGE
0B10F2 1E 
0B10F3 FD    0707** INC     IY              ;SKIP DELIMITER
0B10F4 23 
0B10F5 BB    0708** CP      E
0B10F6 20    0709** JR      NZ,ON2
0B10F7 F5 
0B10F8 0D    0710** DEC     C
0B10F9 20    0711** JR      NZ,ON2
0B10FA F2 
0B10FB 7B    0712** ON3:			LD      A,E
0B10FC FE    0713** CP      TPROC
0B10FD F2 
0B10FE 28    0714** JR      Z,ONPROC
0B10FF 26 
0B1100 D5    0715** PUSH    DE
0B1101 CD    0716** CALL    ITEMI           ;LINE NUMBER
0B1102 26 
0B1103 05 
0B1104 0B 
0B1105 D1    0717** POP     DE
0B1106 7A    0718** LD      A,D
0B1107 FE    0719** CP      TGOTO
0B1108 E5 
0B1109 28    0720** JR      Z,GOTO2
0B110A 2D 
0B110B CD    0721** CALL    SPAN            ;SKIP REST OF LIST
0B110C 88 
0B110D 19 
0B110E 0B 
0B110F 18    0722** JR      GOSUB1
0B1110 3B 
             0723** ;
0B1111 FD    0724** ON4:			LD      A,(IY)
0B1112 7E 
0B1113 00 
0B1114 FD    0725** INC     IY
0B1115 23 
0B1116 FE    0726** CP      ELSE_EX_
0B1117 8B 
0B1118 CA    0727** JP      Z,IF1           ;ELSE CLAUSE
0B1119 4C 
0B111A 15 
0B111B 0B 
0B111C FE    0728** CP      CR
0B111D 0D 
0B111E 20    0729** JR      NZ,ON4
0B111F F1 
0B1120 3E    0730** LD      A,40
0B1121 28 
0B1122 C3    0731** ERROR2_EX:			JP      ERROR_           ;"ON range"
0B1123 61 
0B1124 39 
0B1125 0B 
             0732** ;
0B1126 3E    0733** ONPROC:			LD      A,TON
0B1127 EE 
0B1128 C3    0734** JP      PROC_EX
0B1129 85 
0B112A 12 
0B112B 0B 
             0735** 
             0736** ; GOTO line
             0737** ;
0B112C CD    0738** GOTO_EX:			CALL    ITEMI           	; Fetch the line number
0B112D 26 
0B112E 05 
0B112F 0B 
0B1130 CD    0739** GOTO1:			CALL    TERMQ			; Check for terminator
0B1131 7B 
0B1132 19 
0B1133 0B 
0B1134 C2    0740** JP      NZ,SYNTAX		; Throw a "Syntax Error" if not found
0B1135 98 
0B1136 0E 
0B1137 0B 
0B1138 D9    0741** GOTO2:			EXX
0B1139 CD    0742** CALL    FINDL			; HL: Line number - Find the line
0B113A 90 
0B113B 3B 
0B113C 0B 
0B113D E5    0743** PUSH    HL			; HL: Address of the line
0B113E FD    0744** POP     IY			; IY = HL
0B113F E1 
0B1140 CA    0745** JP      Z,XEQ0			; If the line is found, then continue execution at that point
0B1141 93 
0B1142 0D 
0B1143 0B 
0B1144 3E    0746** LD      A,41			; Otherwise throw a "No such line" error
0B1145 29 
0B1146 18    0747** JR      ERROR2_EX
0B1147 DA 
             0748** 
             0749** ; GOSUB line
             0750** ; This pushes the following data onto the execution stack
             0751** ; - 3 bytes: Current execution address
             0752** ; - 3 bytes: Marker (the address of label GOSCHK)
             0753** ;
0B1148 CD    0754** GOSUB_EX:			CALL    ITEMI			; Fetch the line number
0B1149 26 
0B114A 05 
0B114B 0B 
0B114C FD    0755** GOSUB1:			PUSH    IY              	; Push the current execution address onto the execution stack
0B114D E5 
0B114E CD    0756** CALL    CHECK           	; Check there is enough room
0B114F 50 
0B1150 18 
0B1151 0B 
0B1152 CD    0757** CALL    GOTO1           	; Push the marker (address of GOSCHK) onto the execution stack and GOTO the line number
0B1153 30 
0B1154 11 
0B1155 0B 
             0758** GOSCHK:			EQU     $
             0759** 
             0760** ; RETURN
             0761** ; This pops the following data off the execution stack as pushed by GOSUB
             0762** ; - 3 bytes: Marker (should be the address of label GOSCHK)
             0763** ; - 3 bytes: The return execution address
             0764** ;
0B1156 D1    0765** RETURN:			POP     DE			; Pop the marker off the execution stack
0B1157 21    0766** LD      HL,GOSCHK		; Compare with GOSCHK
0B1158 56 
0B1159 11 
0B115A 0B 
0B115B B7    0767** OR      A
0B115C ED    0768** SBC     HL,DE
0B115D 52 
0B115E FD    0769** POP     IY			; Pop the return address off the execution stack
0B115F E1 
0B1160 CA    0770** JP      Z,XEQ			; Provided this has been called by a GOSUB then continue execution at the return address
0B1161 97 
0B1162 0D 
0B1163 0B 
0B1164 3E    0771** LD      A,38			; Otherwise throw a "No GOSUB" error
0B1165 26 
0B1166 18    0772** JR      ERROR2_EX
0B1167 BA 
             0773** 
             0774** ; REPEAT
             0775** ; This pushes the following data onto the execution stack
             0776** ; - 3 bytes: Current execution address
             0777** ; - 3 bytes: Marker (the address of label REPCHK)
             0778** ;
0B1168 FD    0779** REPEAT_EX:			PUSH    IY			; Push the current execution address onto the execution stack
0B1169 E5 
0B116A CD    0780** CALL    CHECK			; Check if there is enough room
0B116B 50 
0B116C 18 
0B116D 0B 
0B116E CD    0781** CALL    XEQ			; Push the marker (address of REPCHK) onto the execution stack and continue execution
0B116F 97 
0B1170 0D 
0B1171 0B 
             0782** REPCHK:			EQU     $
             0783** 
             0784** ; UNTIL expr
             0785** ; This pops the following data off the execution stack
             0786** ; - 3 bytes: Marker (should be the address of label REPCHK)
             0787** ; - 3 bytes: The address of the REPEAT instruction
             0788** ; It also ensures that the data is pushed back on for subsequent UNTIL instructions
             0789** ;
0B1172 C1    0790** UNTIL_EX:			POP     BC			; Fetch the marker
0B1173 C5    0791** PUSH    BC			; And push it back onto the execution stack
0B1174 21    0792** LD      HL,REPCHK		; Compare with REPCHK
0B1175 72 
0B1176 11 
0B1177 0B 
0B1178 B7    0793** OR      A
0B1179 ED    0794** SBC     HL,BC
0B117A 42 
0B117B 3E    0795** LD      A,43
0B117C 2B 
0B117D 20    0796** JR      NZ,ERROR2_EX		; Throw a "No REPEAT" if this value does not match
0B117E A3 
0B117F CD    0797** CALL    EXPRI			; Fetch the expression
0B1180 0B 
0B1181 05 
0B1182 0B 
0B1183 CD    0798** CALL    TEST			; Test if the expression evaluates to zero
0B1184 E0 
0B1185 0A 
0B1186 0B 
0B1187 C1    0799** POP     BC			; Pop the marker
0B1188 D1    0800** POP     DE			; Pop the address of the REPEAT instruction
0B1189 20    0801** JR      NZ,XEQ2         	; If it is TRUE, then continue execution after the UNTIL instruction (we're done looping)
0B118A 05 
0B118B D5    0802** PUSH    DE			; Push the address of the REPEAT instruction back on the stack
0B118C C5    0803** PUSH    BC			; Push the marker back on the stack
0B118D D5    0804** PUSH    DE			; IY = DE
0B118E FD    0805** POP     IY			; This sets the execution address back to the REPEAT instruction
0B118F E1 
0B1190 C3    0806** XEQ2:			JP      XEQ			; Continue execution
0B1191 97 
0B1192 0D 
0B1193 0B 
             0807** 
             0808** ; FOR var = expr TO expr [STEP expr]
             0809** ; This pushes the following data onto the execution stack
             0810** ; - 3 bytes: The limit value
             0811** ; - 3 bytes: The step value
             0812** ; - 3 bytes: The current execution address
             0813** ; - 3 bytes: The address of the loop variable
             0814** ; - 3 bytes: Marker (the address of FORCHK)
             0815** ;
0B1194 3E    0816** FORVAR:			LD      A,34
0B1195 22 
0B1196 18    0817** JR      ERROR2_EX          	; Throw "FOR variable" error
0B1197 8A 
             0818** ;
0B1198 CD    0819** FOR_EX:			CALL    ASSIGN			; Assign the START expression value to a variable
0B1199 BF 
0B119A 17 
0B119B 0B 
0B119C 20    0820** JR      NZ,FORVAR       	; If the variable is a string, or invalid, then throw a "FOR variable" error
0B119D F6 
0B119E F5    0821** PUSH    AF              	; Save the variable type
0B119F FD    0822** LD      A,(IY)			; Check the next token
0B11A0 7E 
0B11A1 00 
0B11A2 FE    0823** CP      TO_EX			; Compare with the token value for "TO"
0B11A3 B8 
0B11A4 3E    0824** LD      A,36			; Set the error code to 36 ("No TO")
0B11A5 24 
0B11A6 C2    0825** JP      NZ,ERROR2_EX       	; And throw the error if that token is missing
0B11A7 22 
0B11A8 11 
0B11A9 0B 
0B11AA FD    0826** INC     IY			; Skip to the next token
0B11AB 23 
             0827** ;
0B11AC DD    0828** PUSH    IX
0B11AD E5 
0B11AE CD    0829** CALL    EXPRN           	; Fetch the LIMIT expression value
0B11AF 03 
0B11B0 05 
0B11B1 0B 
0B11B2 DD    0830** POP     IX
0B11B3 E1 
0B11B4 F1    0831** POP     AF
0B11B5 47    0832** LD      B,A             	; B: LIMIT value type (04h = Integer, 05h = Float)
0B11B6 C5    0833** PUSH    BC              	; Stack the LIMIT value
0B11B7 E5    0834** PUSH    HL
0B11B8 21    0835** LD      HL,0
0B11B9 00 
0B11BA 00 
0B11BB 00 
0B11BC 4C    0836** LD      C,H
0B11BD D9    0837** EXX
0B11BE E5    0838** PUSH    HL
             0839** ;
0B11BF 21    0840** LD      HL,1            	; The preset STEP value is 1
0B11C0 01 
0B11C1 00 
0B11C2 00 
0B11C3 D9    0841** EXX
0B11C4 FD    0842** LD      A,(IY)			; Fetch the next token
0B11C5 7E 
0B11C6 00 
0B11C7 FE    0843** CP      STEP			; Compare with the token value for "STEP"
0B11C8 88 
0B11C9 20    0844** JR      NZ,FOR1			; If there is no STEP token, then skip the next bit
0B11CA 0A 
             0845** ;
0B11CB FD    0846** INC     IY			; Skip past the STEP token
0B11CC 23 
0B11CD DD    0847** PUSH    IX
0B11CE E5 
0B11CF CD    0848** CALL    EXPRN          		; Fetch the STEP expression value
0B11D0 03 
0B11D1 05 
0B11D2 0B 
0B11D3 DD    0849** POP     IX
0B11D4 E1 
             0850** ;
0B11D5 C5    0851** FOR1:			PUSH    BC			; Stack the STEP value
0B11D6 E5    0852** PUSH    HL
0B11D7 D9    0853** EXX
0B11D8 E5    0854** PUSH    HL
0B11D9 D9    0855** EXX
             0856** ;
0B11DA FD    0857** PUSH    IY              	; Stack the current execution address
0B11DB E5 
0B11DC DD    0858** PUSH    IX              	; Stack the loop variable
0B11DD E5 
0B11DE CD    0859** CALL    CHECK
0B11DF 50 
0B11E0 18 
0B11E1 0B 
0B11E2 CD    0860** CALL    XEQ
0B11E3 97 
0B11E4 0D 
0B11E5 0B 
             0861** FORCHK:			EQU     $
             0862** 
             0863** ; NEXT [var[,var...]]
             0864** ; This pops the following data off the execution stack
             0865** ; - 3 bytes: Marker (the address of FORCHK)
             0866** ; - 3 bytes: The address of the loop variable
             0867** ; - 3 bytes: The current execution address
             0868** ; - 3 bytes: The step value
             0869** ; - 3 bytes: The limit value
             0870** ; It also ensures that the data is pushed back on for subsequent NEXT instructions
             0871** ;
0B11E6 C1    0872** NEXT_EX:			POP     BC              	; Pop the marker off the execution stack
0B11E7 21    0873** LD      HL,FORCHK		; Compare with FORCHK
0B11E8 E6 
0B11E9 11 
0B11EA 0B 
0B11EB B7    0874** OR      A
0B11EC ED    0875** SBC     HL,BC
0B11ED 42 
0B11EE 3E    0876** LD      A,32
0B11EF 20 
0B11F0 C2    0877** JP      NZ,ERROR3_EX      		; If this does not match, throw a "No FOR" error
0B11F1 7C 
0B11F2 12 
0B11F3 0B 
0B11F4 CD    0878** CALL    TERMQ			; Check for terminator (a NEXT without a variable)
0B11F5 7B 
0B11F6 19 
0B11F7 0B 
0B11F8 E1    0879** POP     HL			; Pop the address of the loop variable off the execution stack
0B11F9 E5    0880** PUSH    HL			; Push it back onto the execution stack
0B11FA C5    0881** PUSH    BC			; Push the marker back onto the execution stack
0B11FB E5    0882** PUSH    HL			; HL: Address of the loop variable off the stack
0B11FC C4    0883** CALL    NZ,GETVAR       	; If there is no terminator, get the variable from the args
0B11FD 3B 
0B11FE 3C 
0B11FF 0B 
0B1200 D1    0884** POP     DE			; DE: Address of the loop variable off the stack
0B1201 EB    0885** EX      DE,HL			; HL: Address of the loop variable off the stack, DE: Address of the variable from args
0B1202 B7    0886** OR      A
0B1203 ED    0887** NEXT0:			SBC     HL,DE			; Compare to make sure that the variables match
0B1204 52 
0B1205 20    0888** JR      NZ,NEXT1		; They don't, so jump to NEXT1
0B1206 61 
0B1207 D5    0889** PUSH    DE
0B1208 DD    0890** LD      IX,9+3			; IX: Address of the STEP value on the execution stack
0B1209 21 
0B120A 0C 
0B120B 00 
0B120B 00   
0B120D DD    0891** ADD     IX,SP
0B120E 39 
0B120F CD    0892** CALL    DLOAD5_SPL      	; Load the STEP value
0B1210 E2 
0B1211 2B 
0B1212 0B 
0B1213 DD    0893** LD      A,(IX+16)       	; Get the STEP type
0B1214 7E 
0B1215 10 
0B1216 DD    0894** POP     IX
0B1217 E1 
0B1218 CD    0895** CALL    LOADN           	; Load the LOOP variable
0B1219 17 
0B121A 06 
0B121B 0B 
0B121C CB    0896** BIT     7,D             	; Check the sign
0B121D 7A 
0B121E F5    0897** PUSH    AF
0B121F 3E    0898** LD      A,'+' & 0FH
0B1220 0B 
0B1221 CD    0899** CALL    FPP             	; Add the STEP
0B1222 6B 
0B1223 22 
0B1224 0B 
0B1225 38    0900** JR      C,ERROR3_EX
0B1226 55 
0B1227 F1    0901** POP     AF              	; Restore TYPE
0B1228 F5    0902** PUSH    AF
0B1229 CD    0903** CALL    STORE           	; Update the variable
0B122A D7 
0B122B 17 
0B122C 0B 
0B122D DD    0904** LD      IX,18+3			; IX: Address of the LIMIT value on the execution stack
0B122E 21 
0B122F 15 
0B1230 00 
0B1230 00   
0B1232 DD    0905** ADD     IX,SP
0B1233 39 
0B1234 CD    0906** CALL    DLOAD5_SPL      	; Load the LIMIT value
0B1235 E2 
0B1236 2B 
0B1237 0B 
0B1238 F1    0907** POP     AF
0B1239 CC    0908** CALL    Z,SWAP			; Swap the arguments if the sign is ?
0B123A D8 
0B123B 0A 
0B123C 0B 
             0909** ; LD      A,0+('<'-4) & 0FH
0B123D 3E    0910** LD      A,0+'<'-4 & 0FH ; ez80asm doesn't do () in expressions
0B123E 08 
0B123F CD    0911** CALL    FPP             	; Test against the limit
0B1240 6B 
0B1241 22 
0B1242 0B 
0B1243 38    0912** JR      C,ERROR3_EX		; Throw an error if FPP returns bad
0B1244 37 
0B1245 24    0913** INC     H
0B1246 20    0914** JR      NZ,LOOP_        	; Keep looping
0B1247 14 
0B1248 21    0915** LD      HL,27			; Adjust the stack
0B1249 1B 
0B124A 00 
0B124B 00 
0B124C 39    0916** ADD     HL,SP
0B124D F9    0917** LD      SP,HL
0B124E CD    0918** CALL    NXT
0B124F 71 
0B1250 0C 
0B1251 0B 
0B1252 FE    0919** CP      ','			; Check for multiple variables
0B1253 2C 
0B1254 C2    0920** JP      NZ,XEQ			; No, so we are done at ths point
0B1255 97 
0B1256 0D 
0B1257 0B 
0B1258 FD    0921** INC     IY			; Increment to the next variable
0B1259 23 
0B125A 18    0922** JR      NEXT_EX			; And continue
0B125B 8A 
             0923** ;
0B125C C1    0924** LOOP_:			POP     BC
0B125D D1    0925** POP     DE
0B125E FD    0926** POP     IY
0B125F E1 
0B1260 FD    0927** PUSH    IY
0B1261 E5 
0B1262 D5    0928** PUSH    DE
0B1263 C5    0929** PUSH    BC
0B1264 C3    0930** JP      XEQ
0B1265 97 
0B1266 0D 
0B1267 0B 
             0931** ;
0B1268 21    0932** NEXT1:			LD      HL,27			; TODO: What does this do?
0B1269 1B 
0B126A 00 
0B126B 00 
0B126C 39    0933** ADD     HL,SP
0B126D F9    0934** LD      SP,HL			; Adjust the stack
0B126E C1    0935** POP     BC
0B126F 21    0936** LD      HL,FORCHK
0B1270 E6 
0B1271 11 
0B1272 0B 
0B1273 ED    0937** SBC     HL,BC
0B1274 42 
0B1275 E1    0938** POP     HL              	; Variable pointer
0B1276 E5    0939** PUSH    HL
0B1277 C5    0940** PUSH    BC
0B1278 28    0941** JR      Z,NEXT0
0B1279 89 
             0942** ;
0B127A 3E    0943** LD      A,33
0B127B 21 
0B127C C3    0944** ERROR3_EX:			JP      ERROR_           	; Throw the error "Can't match FOR"
0B127D 61 
0B127E 39 
0B127F 0B 
             0945** 
             0946** ; FNname
             0947** ; N.B. ENTERED WITH A <> TON
             0948** ;
0B1280 F5    0949** FN_EX:			PUSH    AF              	; Push A onto the stack; this'll be checked for the token ON (TON) in PROC5
0B1281 CD    0950** CALL    PROC1
0B1282 8A 
0B1283 12 
0B1284 0B 
             0951** FNCHK:			EQU     $			; This will never fall through as PROC1 will do a JP XEQ
             0952** 
             0953** ; PROCname
             0954** ; N.B. ENTERED WITH A = ON PROC FLAG (EEh or the first character of the token name)
             0955** ; This pushes the following data onto the execution stack
             0956** ; - 3 bytes: The return address for ENDPROC (initially the ON PROC FLAG)
             0957** ; - 3 bytes: Marker (the address of PROCHK)
             0958** ;
0B1285 F5    0959** PROC_EX:			PUSH    AF			; Push A onto the stack; this'll be checked for the token ON (TON) in PROC5,
0B1286 CD    0960** CALL    PROC1			; and is also space reserved on the stack for the return address
0B1287 8A 
0B1288 12 
0B1289 0B 
             0961** PROCHK:			EQU     $			; This will never fall through as PROC1 will do a JP XEQ
             0962** ;
0B128A CD    0963** PROC1:			CALL    CHECK			; Check there is space for this
0B128B 50 
0B128C 18 
0B128D 0B 
0B128E FD    0964** DEC     IY			; Decrement IY to the PROC token
0B128F 2B 
0B1290 FD    0965** PUSH    IY			; Stack the pointer
0B1291 E5 
0B1292 CD    0966** CALL    GETDEF			; Search for this PROC/FN entry in the dynamic area
0B1293 FC 
0B1294 3C 
0B1295 0B 
0B1296 C1    0967** POP     BC			; BC = IY
0B1297 28    0968** JR      Z,PROC4			; If found in the dynamic area then skip to PROC4
0B1298 41 
0B1299 3E    0969** LD      A,30
0B129A 1E 
0B129B 38    0970** JR      C,ERROR3_EX        	; Throw error "Bad call" if invalid PROC/FN call
0B129C DF 
             0971** ;
             0972** ; At this point the PROC/FN has not yet been registered in the dynamic area
             0973** ; So we need to search through the listing and find where the DEFPROC/FN is and save the address
             0974** ;
0B129D C5    0975** PUSH    BC			; BC: Still pointing to the PROC token in the tokenised line
0B129E 2A    0976** LD      HL,(PAGE_)		; HL: Start of program memory
0B129F 14 
0B12A0 4F 
0B12A1 0B 
             0977** ;
0B12A2 3E    0978** PROC2:			LD      A,DEF_			;  A: The token to search for
0B12A3 DD 
0B12A4 CD    0979** CALL    SEARCH_EX          	; Look for "DEF" as the first token in a program line
0B12A5 4F 
0B12A6 1A 
0B12A7 0B 
0B12A8 38    0980** JR      C,PROC3			; Not found, so jump to PROC3
0B12A9 26 
0B12AA E5    0981** PUSH    HL			; HL: Points to the DEF token in the DEFPROC
0B12AB FD    0982** POP     IY			; IY = HL
0B12AC E1 
0B12AD FD    0983** INC     IY              	; Skip the DEF token
0B12AE 23 
0B12AF CD    0984** CALL    NXT			; And any whitespace
0B12B0 71 
0B12B1 0C 
0B12B2 0B 
0B12B3 CD    0985** CALL    GETDEF			; Search for this PROC/FN entry in the dynamic area
0B12B4 FC 
0B12B5 3C 
0B12B6 0B 
0B12B7 FD    0986** PUSH    IY
0B12B8 E5 
0B12B9 D1    0987** POP     DE			; DE: Points to the PROC/FN token in tokenised line of the DEFPROC
0B12BA 38    0988** JR      C,PROC6			; Skip if there is an error (neither FN or PROC first)
0B12BB 09 
0B12BC C4    0989** CALL    NZ,CREATE		; Create an entity in the dynamic area
0B12BD AF 
0B12BE 3D 
0B12BF 0B 
0B12C0 FD    0990** PUSH    IY			; IY: Pointer to the DEFPROC/FN arguments
0B12C1 E5 
0B12C2 D1    0991** POP     DE			; DE = IY
0B12C3 ED    0992** LD	(HL),DE			; Save address
0B12C4 1F 
             0993** ;
0B12C5 EB    0994** PROC6:			EX      DE,HL			; HL: Address of the procedure
0B12C6 3E    0995** LD      A,CR			; The character to search for
0B12C7 0D 
0B12C8 01    0996** LD	BC,100h			; Only need to search 256 bytes or so ahead; maximum line length
0B12C9 00 
0B12CA 01 
0B12CB 00 
0B12CC ED    0997** CPIR                    	; Skip to next line
0B12CD B1 
0B12CE 18    0998** JR      PROC2			; Rinse, lather and repeat
0B12CF D2 
             0999** ;
             1000** ; At this point a DEF has not been found for the PROC/FN
             1001** ;
0B12D0 FD    1002** PROC3:			POP     IY              	; Restore the execution address
0B12D1 E1 
0B12D2 CD    1003** CALL    GETDEF			; Search for this PROC/FN entry in the dynamic area
0B12D3 FC 
0B12D4 3C 
0B12D5 0B 
0B12D6 3E    1004** LD      A,29
0B12D7 1D 
0B12D8 20    1005** JR      NZ,ERROR3_EX      		; Throw error "No such FN/PROC" if not found
0B12D9 A2 
             1006** ;
             1007** ; At this point we have a PROC/FN entry in the dynamic area
             1008** ;
0B12DA ED    1009** PROC4:			LD	DE,(HL)			; HL: Address of pointer; fetch entity address in DE
0B12DB 17 
0B12DC 21    1010** LD	HL,3
0B12DD 03 
0B12DE 00 
0B12DF 00 
0B12E0 39    1011** ADD     HL,SP
0B12E1 CD    1012** CALL    NXT             	; Allow space before "("
0B12E2 71 
0B12E3 0C 
0B12E4 0B 
0B12E5 D5    1013** PUSH    DE              	; Exchange DE and IY
0B12E6 FD    1014** EX      (SP),IY
0B12E7 E3 
0B12E8 FE    1015** CP      '('             	; Arguments?
0B12E9 28 
0B12EA D1    1016** POP     DE			; NB: This has been moved after the compare otherwise DE gets corrupted later? IDK why!?!
0B12EB 20    1017** JR      NZ,PROC5
0B12EC 20 
0B12ED CD    1018** CALL    NXT             	; Allow space before "("
0B12EE 71 
0B12EF 0C 
0B12F0 0B 
0B12F1 FE    1019** CP      '('
0B12F2 28 
0B12F3 C2    1020** JP      NZ,SYNTAX       	; Throw "Syntax error"
0B12F4 98 
0B12F5 0E 
0B12F6 0B 
0B12F7 FD    1021** PUSH    IY
0B12F8 E5 
0B12F9 C1    1022** POP     BC              	; Save IY in BC
0B12FA D9    1023** EXX
0B12FB CD    1024** CALL    SAVLOC          	; Save local parameters
0B12FC FB 
0B12FD 18 
0B12FE 0B 
0B12FF CD    1025** CALL    BRAKET          	; Closing bracket
0B1300 30 
0B1301 0C 
0B1302 0B 
0B1303 D9    1026** EXX
0B1304 C5    1027** PUSH    BC
0B1305 FD    1028** POP     IY              	; Restore IY
0B1306 E1 
0B1307 E5    1029** PUSH    HL
0B1308 CD    1030** CALL    ARGUE           	; Transfer arguments
0B1309 77 
0B130A 18 
0B130B 0B 
0B130C E1    1031** POP     HL
             1032** ;
0B130D 23    1033** PROC5:			INC	HL			; Increment to the ON PROC flag address
0B130E 7E    1034** LD	A, (HL)			; And fetch the value
0B130F 2B    1035** DEC 	HL
0B1310 ED    1036** LD	(HL), DE		; Save the ENDPROC return address pointer in the BASIC listing
0B1311 1F 
0B1312 FE    1037** CP	TON			; Was it "ON PROC"?
0B1313 EE 
0B1314 C2    1038** JP	NZ, XEQ			; No, so back to XEQ
0B1315 97 
0B1316 0D 
0B1317 0B 
0B1318 D5    1039** PUSH    DE			; Exchange DE and IY
0B1319 FD    1040** EX      (SP),IY
0B131A E3 
0B131B CD    1041** CALL    SPAN            	; Skip rest of ON list
0B131C 88 
0B131D 19 
0B131E 0B 
0B131F FD    1042** EX      (SP),IY			; Exchange DE and IY
0B1320 E3 
0B1321 D1    1043** POP     DE
0B1322 ED    1044** LD	(HL), DE		; Save the return address
0B1323 1F 
0B1324 C3    1045** JP      XEQ
0B1325 97 
0B1326 0D 
0B1327 0B 
             1046** 
             1047** ; LOCAL var[,var...]
             1048** ;
0B1328 C1    1049** LOCAL_EX_:			POP     BC			; BC: The current check marker (on the stack)
0B1329 C5    1050** PUSH    BC
0B132A 21    1051** LD      HL,FNCHK		; Check if we are in a FN
0B132B 85 
0B132C 12 
0B132D 0B 
0B132E B7    1052** OR      A
0B132F ED    1053** SBC     HL,BC
0B1330 42 
0B1331 28    1054** JR      Z,LOCAL1		; Yes, so all good, we can use local
0B1332 16 
0B1333 21    1055** LD      HL,PROCHK		; Now check if we are in a PROC
0B1334 8A 
0B1335 12 
0B1336 0B 
0B1337 B7    1056** OR      A
0B1338 ED    1057** SBC     HL,BC
0B1339 42 
0B133A 28    1058** JR      Z,LOCAL1		; Again, all good, we can use local
0B133B 0D 
0B133C 21    1059** LD      HL,LOCCHK		; Finally check for the local parameters marker
0B133D 59 
0B133E 19 
0B133F 0B 
0B1340 B7    1060** OR      A
0B1341 ED    1061** SBC     HL,BC			; If it is not present, then
0B1342 42 
0B1343 3E    1062** LD      A,12
0B1344 0C 
0B1345 C2    1063** JP      NZ,ERROR_        	; Then throw a "Not LOCAL" errr
0B1346 61 
0B1347 39 
0B1348 0B 
             1064** ;
             1065** ; At this point we are adding a local variable into a PROC or FN
             1066** ;
0B1349 FD    1067** LOCAL1:			PUSH    IY			; IY: BASIC pointer
0B134A E5 
0B134B C1    1068** POP     BC			; BC: Copy of the BASIC pointer
0B134C D9    1069** EXX
0B134D FD    1070** DEC     IY
0B134E 2B 
0B134F CD    1071** CALL    SAVLOC
0B1350 FB 
0B1351 18 
0B1352 0B 
0B1353 D9    1072** EXX
0B1354 C5    1073** PUSH    BC
0B1355 FD    1074** POP     IY
0B1356 E1 
             1075** ;
0B1357 CD    1076** LOCAL2:			CALL    GETVAR			; Get the variable location
0B1358 3B 
0B1359 3C 
0B135A 0B 
0B135B C2    1077** JP      NZ,SYNTAX
0B135C 98 
0B135D 0E 
0B135E 0B 
0B135F B7    1078** OR      A               	; Check the variable type (80h = string)
0B1360 08    1079** EX      AF,AF'
0B1361 CD    1080** CALL    ZERO			; Zero the variable anyway
0B1362 94 
0B1363 0B 
0B1364 0B 
0B1365 08    1081** EX      AF,AF'
0B1366 F5    1082** PUSH    AF
0B1367 F4    1083** CALL    P,STORE         	; Call STORE if it is not a string
0B1368 D7 
0B1369 17 
0B136A 0B 
0B136B F1    1084** POP     AF
0B136C 59    1085** LD      E,C
0B136D FC    1086** CALL    M,STORES		; Call STORES if it is a string
0B136E 05 
0B136F 18 
0B1370 0B 
0B1371 CD    1087** CALL    NXT			; Skip to the next character in the expression
0B1372 71 
0B1373 0C 
0B1374 0B 
0B1375 FE    1088** CP      ','			; Is it a comma?
0B1376 2C 
0B1377 C2    1089** JP      NZ,XEQ			; No, so we're done, carry on executing
0B1378 97 
0B1379 0D 
0B137A 0B 
0B137B FD    1090** INC     IY			; Yes, so skip the comma
0B137C 23 
0B137D CD    1091** CALL    NXT			; And any whitespace
0B137E 71 
0B137F 0C 
0B1380 0B 
0B1381 18    1092** JR      LOCAL2			; Then loop back and handle any further local variables
0B1382 D4 
             1093** 
             1094** ; ENDPROC
             1095** ;
0B1383 C1    1096** ENDPRO:			POP     BC			; Pop the check value off the stack
0B1384 21    1097** LD      HL,LOCCHK		; Check if it is the LOCAL Marker
0B1385 59 
0B1386 19 
0B1387 0B 
0B1388 B7    1098** OR      A
0B1389 ED    1099** SBC     HL,BC
0B138A 42 
0B138B 28    1100** JR      Z,UNSTK         	; Yes, it is, so first need to unstack the local variables
0B138C 13 
             1101** ;
0B138D 21    1102** LD      HL,PROCHK       	; Check if it is the PROC marker
0B138E 8A 
0B138F 12 
0B1390 0B 
0B1391 B7    1103** OR      A
0B1392 ED    1104** SBC     HL,BC
0B1393 42 
0B1394 FD    1105** POP     IY
0B1395 E1 
0B1396 CA    1106** JP      Z,XEQ			; Yes, it is, so carry on, all is good
0B1397 97 
0B1398 0D 
0B1399 0B 
0B139A 3E    1107** LD      A,13			; Otherwise throw the "No PROC" error
0B139B 0D 
0B139C C3    1108** JP      ERROR_
0B139D 61 
0B139E 39 
0B139F 0B 
             1109** ;
0B13A0 DD    1110** UNSTK:			POP     IX			; Unstack a single local variable
0B13A1 E1 
0B13A2 C1    1111** POP     BC
0B13A3 78    1112** LD      A,B
0B13A4 B7    1113** OR      A
0B13A5 FA    1114** JP      M,UNSTK1        	; Jump here if it is a string? (80h)
0B13A6 B3 
0B13A7 13 
0B13A8 0B 
0B13A9 E1    1115** POP     HL			; Unstack a normal variable
0B13AA D9    1116** EXX
0B13AB E1    1117** POP     HL
0B13AC D9    1118** EXX
0B13AD CD    1119** CALL    STORE			; TODO: Not sure why or where it is being stored at this point
0B13AE D7 
0B13AF 17 
0B13B0 0B 
0B13B1 18    1120** JR      ENDPRO			; And loop back to ENDPRO
0B13B2 D0 
             1121** ;
0B13B3 21    1122** UNSTK1:			LD      HL,0			; Unstack a string
0B13B4 00 
0B13B5 00 
0B13B6 00 
0B13B7 39    1123** ADD     HL,SP
0B13B8 59    1124** LD      E,C
0B13B9 CD    1125** CALL    STORES			; TODO: Not sure why or where it is being stored at this point
0B13BA 05 
0B13BB 18 
0B13BC 0B 
0B13BD F9    1126** LD      SP,HL
0B13BE 18    1127** JR      ENDPRO
0B13BF C3 
             1128** 
             1129** ; INPUT #channel,var,var...
             1130** ;
0B13C0 CD    1131** INPUTN:			CALL    CHNL            ;E = CHANNEL NUMBER
0B13C1 93 
0B13C2 1A 
0B13C3 0B 
0B13C4 CD    1132** INPN1:			CALL    NXT
0B13C5 71 
0B13C6 0C 
0B13C7 0B 
0B13C8 FE    1133** CP      ','
0B13C9 2C 
0B13CA C2    1134** JP      NZ,XEQ
0B13CB 97 
0B13CC 0D 
0B13CD 0B 
0B13CE FD    1135** INC     IY
0B13CF 23 
0B13D0 CD    1136** CALL    NXT
0B13D1 71 
0B13D2 0C 
0B13D3 0B 
0B13D4 D5    1137** PUSH    DE
0B13D5 CD    1138** CALL    VAR_
0B13D6 8F 
0B13D7 0E 
0B13D8 0B 
0B13D9 D1    1139** POP     DE
0B13DA F5    1140** PUSH    AF              ;SAVE TYPE
0B13DB E5    1141** PUSH    HL              ;VARPTR
0B13DC B7    1142** OR      A
0B13DD FA    1143** JP      M,INPN2         ;STRING
0B13DE 09 
0B13DF 14 
0B13E0 0B 
0B13E1 CD    1144** CALL    OSBGET
0B13E2 34 
0B13E3 45 
0B13E4 0B 
0B13E5 D9    1145** EXX
0B13E6 6F    1146** LD      L,A
0B13E7 D9    1147** EXX
0B13E8 CD    1148** CALL    OSBGET
0B13E9 34 
0B13EA 45 
0B13EB 0B 
0B13EC D9    1149** EXX
0B13ED 67    1150** LD      H,A
0B13EE D9    1151** EXX
0B13EF CD    1152** CALL    OSBGET
0B13F0 34 
0B13F1 45 
0B13F2 0B 
0B13F3 6F    1153** LD      L,A
0B13F4 CD    1154** CALL    OSBGET
0B13F5 34 
0B13F6 45 
0B13F7 0B 
0B13F8 67    1155** LD      H,A
0B13F9 CD    1156** CALL    OSBGET
0B13FA 34 
0B13FB 45 
0B13FC 0B 
0B13FD 4F    1157** LD      C,A
0B13FE DD    1158** POP     IX
0B13FF E1 
0B1400 F1    1159** POP     AF              ;RESTORE TYPE
0B1401 D5    1160** PUSH    DE              ;SAVE CHANNEL
0B1402 CD    1161** CALL    STORE
0B1403 D7 
0B1404 17 
0B1405 0B 
0B1406 D1    1162** POP     DE
0B1407 18    1163** JR      INPN1
0B1408 BB 
0B1409 21    1164** INPN2:			LD      HL,ACCS
0B140A 00 
0B140B 4C 
0B140C 0B 
0B140D CD    1165** INPN3:			CALL    OSBGET
0B140E 34 
0B140F 45 
0B1410 0B 
0B1411 FE    1166** CP      CR
0B1412 0D 
0B1413 28    1167** JR      Z,INPN4
0B1414 04 
0B1415 77    1168** LD      (HL),A
0B1416 2C    1169** INC     L
0B1417 20    1170** JR      NZ,INPN3
0B1418 F4 
0B1419 DD    1171** INPN4:			POP     IX
0B141A E1 
0B141B F1    1172** POP     AF
0B141C D5    1173** PUSH    DE
0B141D EB    1174** EX      DE,HL
0B141E CD    1175** CALL    STACCS
0B141F 01 
0B1420 18 
0B1421 0B 
0B1422 D1    1176** POP     DE
0B1423 18    1177** JR      INPN1
0B1424 9F 
             1178** 
             1179** ; INPUT ['][SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
             1180** ; INPUT LINE [SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
             1181** ;
0B1425 FE    1182** INPUT:			CP      '#'
0B1426 23 
0B1427 28    1183** JR      Z,INPUTN
0B1428 97 
0B1429 0E    1184** LD      C,0             ;FLAG PROMPT
0B142A 00 
0B142B FE    1185** CP      LINE_EX_
0B142C 86 
0B142D 20    1186** JR      NZ,INPUT0
0B142E 04 
0B142F FD    1187** INC     IY              ;SKIP "LINE"
0B1430 23 
0B1431 0E    1188** LD      C,80H
0B1432 80 
0B1433 21    1189** INPUT0:			LD      HL,BUFFER
0B1434 00 
0B1435 4D 
0B1436 0B 
0B1437 36    1190** LD      (HL),CR         ;INITIALISE EMPTY
0B1438 0D 
0B1439 CD    1191** INPUT1:			CALL    TERMQ
0B143A 7B 
0B143B 19 
0B143C 0B 
0B143D CA    1192** JP      Z,XEQ           ;DONE
0B143E 97 
0B143F 0D 
0B1440 0B 
0B1441 FD    1193** INC     IY
0B1442 23 
0B1443 FE    1194** CP      ','
0B1444 2C 
0B1445 28    1195** JR      Z,INPUT3        ;SKIP COMMA
0B1446 5C 
0B1447 FE    1196** CP      ';'
0B1448 3B 
0B1449 28    1197** JR      Z,INPUT3
0B144A 58 
0B144B E5    1198** PUSH    HL              ;SAVE BUFFER POINTER
0B144C FE    1199** CP      34		;ASCII ""
0B144D 22 
0B144E 20    1200** JR      NZ,INPUT6
0B144F 0C 
0B1450 C5    1201** PUSH    BC
0B1451 CD    1202** CALL    CONS
0B1452 68 
0B1453 06 
0B1454 0B 
0B1455 C1    1203** POP     BC
0B1456 CD    1204** CALL    PTEXT           ;PRINT PROMPT
0B1457 FF 
0B1458 19 
0B1459 0B 
0B145A 18    1205** JR      INPUT9
0B145B 06 
0B145C CD    1206** INPUT6:			CALL    FORMAT          ;SPC, TAB, '
0B145D A0 
0B145E 19 
0B145F 0B 
0B1460 20    1207** JR      NZ,INPUT2
0B1461 05 
0B1462 E1    1208** INPUT9:			POP     HL
0B1463 CB    1209** SET     0,C             ;FLAG NO PROMPT
0B1464 C1 
0B1465 18    1210** JR      INPUT0
0B1466 CC 
0B1467 FD    1211** INPUT2:			DEC     IY
0B1468 2B 
0B1469 C5    1212** PUSH    BC
0B146A CD    1213** CALL    VAR_
0B146B 8F 
0B146C 0E 
0B146D 0B 
0B146E C1    1214** POP     BC
0B146F E1    1215** POP     HL
0B1470 F5    1216** PUSH    AF              ;SAVE TYPE
0B1471 7E    1217** LD      A,(HL)
0B1472 23    1218** INC     HL
0B1473 FE    1219** CP      CR              ;BUFFER EMPTY?
0B1474 0D 
0B1475 CC    1220** CALL    Z,REFILL
0B1476 A7 
0B1477 14 
0B1478 0B 
0B1479 CB    1221** BIT     7,C
0B147A 79 
0B147B F5    1222** PUSH    AF
0B147C C4    1223** CALL    NZ,LINES
0B147D 21 
0B147E 1A 
0B147F 0B 
0B1480 F1    1224** POP     AF
0B1481 CC    1225** CALL    Z,FETCHS
0B1482 0E 
0B1483 1A 
0B1484 0B 
0B1485 F1    1226** POP     AF              ;RESTORE TYPE
0B1486 C5    1227** PUSH    BC
0B1487 E5    1228** PUSH    HL
0B1488 B7    1229** OR      A
0B1489 FA    1230** JP      M,INPUT4        ;STRING
0B148A 9D 
0B148B 14 
0B148C 0B 
0B148D F5    1231** PUSH    AF
0B148E DD    1232** PUSH    IX
0B148F E5 
0B1490 CD    1233** CALL    VAL0
0B1491 6F 
0B1492 08 
0B1493 0B 
0B1494 DD    1234** POP     IX
0B1495 E1 
0B1496 F1    1235** POP     AF
0B1497 CD    1236** CALL    STORE
0B1498 D7 
0B1499 17 
0B149A 0B 
0B149B 18    1237** JR      INPUT5
0B149C 04 
0B149D CD    1238** INPUT4:			CALL    STACCS
0B149E 01 
0B149F 18 
0B14A0 0B 
0B14A1 E1    1239** INPUT5:			POP     HL
0B14A2 C1    1240** POP     BC
0B14A3 CB    1241** INPUT3:			RES     0,C
0B14A4 81 
0B14A5 18    1242** JR      INPUT1
0B14A6 92 
             1243** ;
0B14A7 CB    1244** REFILL:			BIT     0,C
0B14A8 41 
0B14A9 20    1245** JR      NZ,REFIL0       ;NO PROMPT
0B14AA 0C 
0B14AB 3E    1246** LD      A,'?'
0B14AC 3F 
0B14AD CD    1247** CALL    OUTCHR          ;PROMPT
0B14AE 50 
0B14AF 3B 
0B14B0 0B 
0B14B1 3E    1248** LD      A,' '
0B14B2 20 
0B14B3 CD    1249** CALL    OUTCHR
0B14B4 50 
0B14B5 3B 
0B14B6 0B 
0B14B7 21    1250** REFIL0:			LD      HL,BUFFER
0B14B8 00 
0B14B9 4D 
0B14BA 0B 
0B14BB C5    1251** PUSH    BC
0B14BC E5    1252** PUSH    HL
0B14BD DD    1253** PUSH    IX
0B14BE E5 
0B14BF CD    1254** CALL    OSLINE
0B14C0 60 
0B14C1 40 
0B14C2 0B 
0B14C3 DD    1255** POP     IX
0B14C4 E1 
0B14C5 E1    1256** POP     HL
0B14C6 C1    1257** POP     BC
0B14C7 47    1258** LD      B,A             ;POS AT ENTRY
0B14C8 AF    1259** XOR     A
0B14C9 32    1260** LD      (COUNT),A
0B14CA 3D 
0B14CB 4F 
0B14CC 0B 
0B14CD B8    1261** CP      B
0B14CE C8    1262** RET     Z
0B14CF 7E    1263** REFIL1:			LD      A,(HL)
0B14D0 FE    1264** CP      CR
0B14D1 0D 
0B14D2 C8    1265** RET     Z
0B14D3 23    1266** INC     HL
0B14D4 10    1267** DJNZ    REFIL1
0B14D5 F9 
0B14D6 C9    1268** RET
             1269** 
             1270** ; READ var[,var...]
             1271** ;
0B14D7 FE    1272** READ:			CP      '#'
0B14D8 23 
0B14D9 CA    1273** JP      Z,INPUTN
0B14DA C0 
0B14DB 13 
0B14DC 0B 
0B14DD 2A    1274** LD      HL,(DATPTR)
0B14DE 31 
0B14DF 4F 
0B14E0 0B 
0B14E1 7E    1275** READ0:			LD      A,(HL)
0B14E2 23    1276** INC     HL              ;SKIP COMMA OR "DATA"
0B14E3 FE    1277** CP      CR              ;END OF DATA STMT?
0B14E4 0D 
0B14E5 CC    1278** CALL    Z,GETDAT
0B14E6 29 
0B14E7 15 
0B14E8 0B 
0B14E9 E5    1279** PUSH    HL
0B14EA CD    1280** CALL    VAR_
0B14EB 8F 
0B14EC 0E 
0B14ED 0B 
0B14EE E1    1281** POP     HL
0B14EF B7    1282** OR      A
0B14F0 FA    1283** JP      M,READ1         ;STRING
0B14F1 09 
0B14F2 15 
0B14F3 0B 
0B14F4 E5    1284** PUSH    HL
0B14F5 FD    1285** EX      (SP),IY
0B14F6 E3 
0B14F7 F5    1286** PUSH    AF              ;SAVE TYPE
0B14F8 DD    1287** PUSH    IX
0B14F9 E5 
0B14FA CD    1288** CALL    EXPRN
0B14FB 03 
0B14FC 05 
0B14FD 0B 
0B14FE DD    1289** POP     IX
0B14FF E1 
0B1500 F1    1290** POP     AF
0B1501 CD    1291** CALL    STORE
0B1502 D7 
0B1503 17 
0B1504 0B 
0B1505 FD    1292** EX      (SP),IY
0B1506 E3 
0B1507 18    1293** JR      READ2
0B1508 09 
0B1509 CD    1294** READ1:			CALL    FETCHS
0B150A 0E 
0B150B 1A 
0B150C 0B 
0B150D E5    1295** PUSH    HL
0B150E CD    1296** CALL    STACCS
0B150F 01 
0B1510 18 
0B1511 0B 
0B1512 E1    1297** READ2:			POP     HL
0B1513 22    1298** LD      (DATPTR),HL
0B1514 31 
0B1515 4F 
0B1516 0B 
0B1517 CD    1299** CALL    NXT
0B1518 71 
0B1519 0C 
0B151A 0B 
0B151B FE    1300** CP      ','
0B151C 2C 
0B151D C2    1301** JP      NZ,XEQ
0B151E 97 
0B151F 0D 
0B1520 0B 
0B1521 FD    1302** INC     IY
0B1522 23 
0B1523 CD    1303** CALL    NXT
0B1524 71 
0B1525 0C 
0B1526 0B 
0B1527 18    1304** JR      READ0
0B1528 B8 
             1305** ;
0B1529 3E    1306** GETDAT:			LD      A,DATA_EX_
0B152A DC 
0B152B CD    1307** CALL    SEARCH_EX
0B152C 4F 
0B152D 1A 
0B152E 0B 
0B152F 23    1308** INC     HL
0B1530 D0    1309** RET     NC
0B1531 3E    1310** LD      A,42
0B1532 2A 
0B1533 C3    1311** ERROR4:			JP      ERROR_           ;"Out of DATA"
0B1534 61 
0B1535 39 
0B1536 0B 
             1312** 
             1313** ; IF expr statement
             1314** ; IF expr THEN statement [ELSE statement]
             1315** ; IF expr THEN line [ELSE line]
             1316** ;
0B1537 CD    1317** IF_:			CALL    EXPRI
0B1538 0B 
0B1539 05 
0B153A 0B 
0B153B CD    1318** CALL    TEST
0B153C E0 
0B153D 0A 
0B153E 0B 
0B153F 28    1319** JR      Z,IFNOT         ;FALSE
0B1540 19 
0B1541 FD    1320** LD      A,(IY)
0B1542 7E 
0B1543 00 
0B1544 FE    1321** CP      THEN_EX_
0B1545 8C 
0B1546 C2    1322** JP      NZ,XEQ
0B1547 97 
0B1548 0D 
0B1549 0B 
0B154A FD    1323** INC     IY              ;SKIP "THEN"
0B154B 23 
0B154C CD    1324** IF1:			CALL    NXT
0B154D 71 
0B154E 0C 
0B154F 0B 
0B1550 FE    1325** CP      LINO_EX
0B1551 8D 
0B1552 C2    1326** JP      NZ,XEQ          ;STATEMENT FOLLOWS
0B1553 97 
0B1554 0D 
0B1555 0B 
0B1556 C3    1327** JP      GOTO_EX            ;LINE NO. FOLLOWS
0B1557 2C 
0B1558 11 
0B1559 0B 
0B155A FD    1328** IFNOT:			LD      A,(IY)
0B155B 7E 
0B155C 00 
0B155D FE    1329** CP      CR
0B155E 0D 
0B155F FD    1330** INC     IY
0B1560 23 
0B1561 CA    1331** JP      Z,XEQ0          ;END OF LINE
0B1562 93 
0B1563 0D 
0B1564 0B 
0B1565 FE    1332** CP      ELSE_EX_
0B1566 8B 
0B1567 20    1333** JR      NZ,IFNOT
0B1568 F1 
0B1569 18    1334** JR      IF1
0B156A E1 
             1335** 
             1336** ; CLS
             1337** ;
0B156B CD    1338** CLS:		CALL    CLRSCN
0B156C CD 
0B156D 45 
0B156E 0B 
0B156F AF    1339** XOR     A
0B1570 32    1340** LD      (COUNT),A
0B1571 3D 
0B1572 4F 
0B1573 0B 
0B1574 C3    1341** JP      XEQ
0B1575 97 
0B1576 0D 
0B1577 0B 
             1342** 
             1343** ; STOP
             1344** ;
0B1578 CD    1345** STOP:			CALL    TELL
0B1579 91 
0B157A 3F 
0B157B 0B 
0B157C 0D    1346** DB	CR
0B157D 0A    1347** DB	LF
0B157E FA    1348** DB	TSTOP
0B157F 00    1349** DB	0
0B1580 CD    1350** CALL    SETLIN          ;FIND CURRENT LINE
0B1581 AF 
0B1582 3B 
0B1583 0B 
0B1584 CD    1351** CALL    SAYLN
0B1585 E3 
0B1586 3B 
0B1587 0B 
0B1588 CD    1352** CALL    CRLF
0B1589 48 
0B158A 3B 
0B158B 0B 
0B158C C3    1353** JP      CLOOP
0B158D 81 
0B158E 32 
0B158F 0B 
             1354** 
             1355** ; REPORT
             1356** ;
0B1590 CD    1357** REPOR:			CALL    REPORT
0B1591 83 
0B1592 3F 
0B1593 0B 
0B1594 C3    1358** JP      XEQ
0B1595 97 
0B1596 0D 
0B1597 0B 
             1359** 
             1360** ; CLEAR
             1361** ;
0B1598 CD    1362** CLR:			CALL    CLEAR
0B1599 77 
0B159A 3A 
0B159B 0B 
0B159C 2A    1363** LD      HL,(PAGE_)
0B159D 14 
0B159E 4F 
0B159F 0B 
0B15A0 18    1364** JR      RESTR1
0B15A1 19 
             1365** 
             1366** ; RESTORE [line]
             1367** ;
0B15A2 2A    1368** RESTOR_EX:			LD      HL,(PAGE_)
0B15A3 14 
0B15A4 4F 
0B15A5 0B 
0B15A6 CD    1369** CALL    TERMQ
0B15A7 7B 
0B15A8 19 
0B15A9 0B 
0B15AA 28    1370** JR      Z,RESTR1
0B15AB 0F 
0B15AC CD    1371** CALL    ITEMI
0B15AD 26 
0B15AE 05 
0B15AF 0B 
0B15B0 D9    1372** EXX
0B15B1 CD    1373** CALL    FINDL           ;SEARCH FOR LINE
0B15B2 90 
0B15B3 3B 
0B15B4 0B 
0B15B5 3E    1374** LD      A,41
0B15B6 29 
0B15B7 C2    1375** JP      NZ,ERROR4       ;"No such line"
0B15B8 33 
0B15B9 15 
0B15BA 0B 
0B15BB 3E    1376** RESTR1:			LD      A,DATA_EX_
0B15BC DC 
0B15BD CD    1377** CALL    SEARCH_EX
0B15BE 4F 
0B15BF 1A 
0B15C0 0B 
0B15C1 22    1378** LD      (DATPTR),HL
0B15C2 31 
0B15C3 4F 
0B15C4 0B 
0B15C5 C3    1379** JP      XEQ
0B15C6 97 
0B15C7 0D 
0B15C8 0B 
             1380** 
             1381** ; PTR#channel=expr
             1382** ; PAGE=expr
             1383** ; TIME=expr
             1384** ; LOMEM=expr
             1385** ; HIMEM=expr
             1386** ;
0B15C9 CD    1387** PTR_EX:			CALL    CHANEL
0B15CA 87 
0B15CB 1A 
0B15CC 0B 
0B15CD CD    1388** CALL    EQUALS
0B15CE 91 
0B15CF 19 
0B15D0 0B 
0B15D1 7B    1389** LD      A,E
0B15D2 F5    1390** PUSH    AF
0B15D3 CD    1391** CALL    EXPRI
0B15D4 0B 
0B15D5 05 
0B15D6 0B 
0B15D7 E5    1392** PUSH    HL
0B15D8 D9    1393** EXX
0B15D9 D1    1394** POP     DE
0B15DA F1    1395** POP     AF
0B15DB CD    1396** CALL    PUTPTR
0B15DC 68 
0B15DD 45 
0B15DE 0B 
0B15DF C3    1397** JP      XEQ
0B15E0 97 
0B15E1 0D 
0B15E2 0B 
             1398** ;
0B15E3 CD    1399** PAGEV_EX:			CALL    EQUALS
0B15E4 91 
0B15E5 19 
0B15E6 0B 
0B15E7 CD    1400** CALL    EXPRI
0B15E8 0B 
0B15E9 05 
0B15EA 0B 
0B15EB D9    1401** EXX
0B15EC 2E    1402** LD      L,0
0B15ED 00 
0B15EE 22    1403** LD      (PAGE_),HL
0B15EF 14 
0B15F0 4F 
0B15F1 0B 
0B15F2 C3    1404** JP      XEQ
0B15F3 97 
0B15F4 0D 
0B15F5 0B 
             1405** ;
0B15F6 FE    1406** TIMEV_EX:			CP      '$'
0B15F7 24 
0B15F8 28    1407** JR      Z,TIMEVS_EX
0B15F9 13 
0B15FA CD    1408** CALL    EQUALS
0B15FB 91 
0B15FC 19 
0B15FD 0B 
0B15FE CD    1409** CALL    EXPRI
0B15FF 0B 
0B1600 05 
0B1601 0B 
0B1602 E5    1410** PUSH    HL
0B1603 D9    1411** EXX
0B1604 D1    1412** POP     DE
0B1605 CD    1413** CALL    PUTIME
0B1606 98 
0B1607 40 
0B1608 0B 
0B1609 C3    1414** JP      XEQ
0B160A 97 
0B160B 0D 
0B160C 0B 
             1415** ;
0B160D FD    1416** TIMEVS_EX:			INC     IY              ;SKIP '$'
0B160E 23 
0B160F CD    1417** CALL    EQUALS
0B1610 91 
0B1611 19 
0B1612 0B 
0B1613 CD    1418** CALL    EXPRS
0B1614 16 
0B1615 05 
0B1616 0B 
0B1617 CD    1419** CALL    PUTIMS
0B1618 B8 
0B1619 45 
0B161A 0B 
0B161B C3    1420** JP      XEQ
0B161C 97 
0B161D 0D 
0B161E 0B 
             1421** ;
0B161F CD    1422** LOMEMV_EX:			CALL    EQUALS
0B1620 91 
0B1621 19 
0B1622 0B 
0B1623 CD    1423** CALL    EXPRI
0B1624 0B 
0B1625 05 
0B1626 0B 
0B1627 CD    1424** CALL    CLEAR
0B1628 77 
0B1629 3A 
0B162A 0B 
0B162B D9    1425** EXX
0B162C 22    1426** LD      (LOMEM),HL
0B162D 1A 
0B162E 4F 
0B162F 0B 
0B1630 22    1427** LD      (FREE),HL
0B1631 1D 
0B1632 4F 
0B1633 0B 
0B1634 C3    1428** JP      XEQ
0B1635 97 
0B1636 0D 
0B1637 0B 
             1429** ;
0B1638 CD    1430** HIMEMV_EX:			CALL    EQUALS			; Check for '=' and throw an error if not found
0B1639 91 
0B163A 19 
0B163B 0B 
0B163C CD    1431** CALL    EXPRI			; Load the expression into registers
0B163D 0B 
0B163E 05 
0B163F 0B 
             1432** ; BEGIN MISSING FROM BINARY
             1433** ; LD	A,L			;  A: The MSB of the 24-bit value
             1434** ; EXX				; HL: The LSW of the 24-bit value
             1435** ; LD	(R0),HL
             1436** ; LD	(R0+2),A
             1437** ; LD	HL,(FREE)
             1438** ; LD      DE,256
             1439** ; ADD	HL,DE
             1440** ; EX	DE,HL			; DE: FREE + 256
             1441** ; LD	HL,(R0)			; HL: The passed expression
             1442** ; END MISSING FROM BINARY
             1443** ; BEGIN ADDED FROM BINARY
0B1640 D9    1444** exx
0B1641 ED    1445** ld de,(FREE)
0B1642 5B 
0B1643 1D 
0B1644 4F 
0B1644 0B   
0B1646 14    1446** inc d
             1447** ; END ADDED FROM BINARY
0B1647 AF    1448** XOR     A
0B1648 ED    1449** SBC     HL,DE
0B1649 52 
0B164A 19    1450** ADD     HL,DE			; Do a bounds check
0B164B DA    1451** JP      C,ERROR_         	; Throw the error: "No room"
0B164C 61 
0B164D 39 
0B164E 0B 
0B164F ED    1452** LD      DE,(HIMEM)
0B1650 5B 
0B1651 20 
0B1652 4F 
0B1652 0B   
0B1654 22    1453** LD      (HIMEM),HL
0B1655 20 
0B1656 4F 
0B1657 0B 
0B1658 EB    1454** EX      DE,HL
0B1659 ED    1455** SBC     HL,SP			; Adjust the stack
0B165A 72 
0B165B C2    1456** JP      NZ,XEQ
0B165C 97 
0B165D 0D 
0B165E 0B 
0B165F EB    1457** EX      DE,HL
0B1660 F9    1458** LD      SP,HL           	; Load the SP
0B1661 C3    1459** JP      XEQ
0B1662 97 
0B1663 0D 
0B1664 0B 
             1460** 
             1461** ; WIDTH expr
             1462** ;
0B1665 CD    1463** WIDTHV:			CALL    EXPRI
0B1666 0B 
0B1667 05 
0B1668 0B 
0B1669 D9    1464** EXX
0B166A 7D    1465** LD      A,L
0B166B 32    1466** LD      (WIDTH),A
0B166C 3E 
0B166D 4F 
0B166E 0B 
0B166F C3    1467** JP      XEQ
0B1670 97 
0B1671 0D 
0B1672 0B 
             1468** 
             1469** ; TRACE ON
             1470** ; TRACE OFF
             1471** ; TRACE line
             1472** ;
0B1673 FD    1473** TRACE_EX:			INC     IY
0B1674 23 
0B1675 21    1474** LD      HL,0
0B1676 00 
0B1677 00 
0B1678 00 
0B1679 FE    1475** CP      TON
0B167A EE 
0B167B 28    1476** JR      Z,TRACE0
0B167C 0B 
0B167D FE    1477** CP      OFF_
0B167E 87 
0B167F 28    1478** JR      Z,TRACE1
0B1680 08 
0B1681 FD    1479** DEC     IY
0B1682 2B 
0B1683 CD    1480** CALL    EXPRI
0B1684 0B 
0B1685 05 
0B1686 0B 
0B1687 D9    1481** EXX
0B1688 2B    1482** TRACE0:			DEC     HL
0B1689 22    1483** TRACE1:			LD      (TRACEN),HL
0B168A 26 
0B168B 4F 
0B168C 0B 
0B168D C3    1484** JP      XEQ
0B168E 97 
0B168F 0D 
0B1690 0B 
             1485** 
             1486** ; VDU expr,expr;....
             1487** ;
             1488** ; BEGIN MISSING FROM BINARY
             1489** ; VDU:			LD	IX,BUFFER		; Storage for the VDU stream
             1490** ; VDU1:			PUSH	IX
             1491** ; 			CALL    EXPRI			; Fetch the VDU character
             1492** ; 			POP	IX
             1493** ; 			EXX
             1494** ; 			LD	(IX+0),L		; Write out the character to the buffer
             1495** ; 			INC	IX
             1496** ; 			LD      A,(IY)			;  A: The separator character
             1497** ; 			CP      ','			; Is it a comma?
             1498** ; 			JR      Z,VDU2			; Yes, so it's a byte value - skip to next expression
             1499** ; 			CP      ';'			; Is it a semicolon?
             1500** ; 			JR      NZ,VDU3			; No, so skip to the next expression
             1501** ; 			LD	(IX+0),H		; Write out the high byte to the buffer
             1502** ; 			INC	IX
             1503** ; VDU2:			INC     IY			; Skip to the next character
             1504** ; VDU3:			CALL    TERMQ			; Skip past white space
             1505** ; 			JR      NZ,VDU1			; Loop unti reached end of the VDU command
             1506** ; 			LD	A,IXL			;  A: Number of bytes to write out
             1507** ; 			OR	A
             1508** ; 			JR 	Z,VDU4			; No bytes to write, so skip the next bit
             1509** ; 			LD	HL,BUFFER		; HL: Start of stream
             1510** ; 			LD	BC,0
             1511** ; 			LD	C,A			; BC: Number of bytes to write out
             1512** ; 			RST.LIL	18h			; Output the buffer to MOS
             1513** ; END MISSING FROM BINARY
             1514** ; BEGIN ADDED FROM BINARY
             1515** VDU:
0B1691 CD    1516** call EXPRI
0B1692 0B 
0B1693 05 
0B1694 0B 
0B1695 D9    1517** exx
0B1696 7D    1518** ld a,l
0B1697 CD    1519** call OSWRCH
0B1698 01 
0B1699 41 
0B169A 0B 
0B169B FD    1520** ld a,(iy)
0B169C 7E 
0B169D 00 
0B169E FE    1521** cp $2c
0B169F 2C 
0B16A0 28    1522** jr z,$+$0b
0B16A1 09 
0B16A2 FE    1523** cp $3b
0B16A3 3B 
0B16A4 20    1524** jr nz,$+$09
0B16A5 07 
0B16A6 7C    1525** ld a,h
0B16A7 CD    1526** call OSWRCH
0B16A8 01 
0B16A9 41 
0B16AA 0B 
0B16AB FD    1527** inc iy
0B16AC 23 
0B16AD CD    1528** call TERMQ
0B16AE 7B 
0B16AF 19 
0B16B0 0B 
0B16B1 20    1529** jr nz,$-$20
0B16B2 DE 
             1530** ; END ADDED FROM BINARY
0B16B3 C3    1531** VDU4:			JP      XEQ
0B16B4 97 
0B16B5 0D 
0B16B6 0B 
             1532** 
             1533** ; CLOSE channel number
             1534** ;
0B16B7 CD    1535** CLOSE:			CALL    CHANEL			; Fetch the channel number
0B16B8 87 
0B16B9 1A 
0B16BA 0B 
0B16BB CD    1536** CALL    OSSHUT			; Close the channel
0B16BC 2C 
0B16BD 45 
0B16BE 0B 
0B16BF C3    1537** JP      XEQ
0B16C0 97 
0B16C1 0D 
0B16C2 0B 
             1538** 
             1539** ; BPUT channel,byte
             1540** ;
0B16C3 CD    1541** BPUT:			CALL    CHANEL          	; Fetch the channel number
0B16C4 87 
0B16C5 1A 
0B16C6 0B 
0B16C7 D5    1542** PUSH    DE			; DE: Channel number
0B16C8 CD    1543** CALL    COMMA			; Skip to the next expression
0B16C9 23 
0B16CA 0C 
0B16CB 0B 
0B16CC CD    1544** CALL    EXPRI           	; Feth the data
0B16CD 0B 
0B16CE 05 
0B16CF 0B 
0B16D0 D9    1545** EXX
0B16D1 7D    1546** LD      A,L			; A: The byte to write
0B16D2 D1    1547** POP     DE
0B16D3 CD    1548** CALL    OSBPUT			; Write the byte out
0B16D4 3C 
0B16D5 45 
0B16D6 0B 
0B16D7 C3    1549** JP      XEQ
0B16D8 97 
0B16D9 0D 
0B16DA 0B 
             1550** 
             1551** ; CALL address[,var[,var...]]
             1552** ;
             1553** ; Note that the parameter table differs from the Z80 version
             1554** ; Each entry now takes up 4 bytes, not 3, so the table is now:
             1555** ;  -1 byte:  Number of parameters
             1556** ; Then, for each parameter:
             1557** ;  -1 byte:  Parameter type (00h: byte, 04h: word, 05h: real, 80h: fixed string, 81h: dynamic string)
             1558** ;  -3 bytes: Parameter address
             1559** ;
             1560** ; See https://www.bbcbasic.co.uk/bbcbasic/mancpm/bbckey1.html#callparms for more information
             1561** ;
0B16DB CD    1562** CALL_:			CALL    EXPRI           	; Fetch the address
0B16DC 0B 
0B16DD 05 
0B16DE 0B 
0B16DF 7D    1563** LD	A,L			;  A: MSB of address
0B16E0 D9    1564** EXX
0B16E1 22    1565** LD	(R0+0),HL		; HL: LSW of address
0B16E2 4A 
0B16E3 4F 
0B16E4 0B 
0B16E5 32    1566** LD	(R0+2),A
0B16E6 4C 
0B16E7 4F 
0B16E8 0B 
0B16E9 06    1567** LD      B,0             	;  B: The parameter counter
0B16EA 00 
0B16EB 11    1568** LD      DE,BUFFER       	; DE: Vector
0B16EC 00 
0B16ED 4D 
0B16EE 0B 
             1569** ;
0B16EF CD    1570** CALL1:			CALL    NXT			; Skip whitespace
0B16F0 71 
0B16F1 0C 
0B16F2 0B 
0B16F3 FE    1571** CP      ','			; Check for comma
0B16F4 2C 
0B16F5 20    1572** JR      NZ,CALL2		; If no more parameters, then jump here
0B16F6 1B 
0B16F7 FD    1573** INC     IY			; Skip to the next character
0B16F8 23 
0B16F9 04    1574** INC     B			; Increment the parameter count
0B16FA CD    1575** CALL    NXT			; Skip whitespace
0B16FB 71 
0B16FC 0C 
0B16FD 0B 
0B16FE C5    1576** PUSH    BC
0B16FF D5    1577** PUSH    DE
0B1700 CD    1578** CALL    VAR_
0B1701 8F 
0B1702 0E 
0B1703 0B 
0B1704 D1    1579** POP     DE
0B1705 C1    1580** POP     BC
0B1706 13    1581** INC     DE
0B1707 12    1582** LD      (DE),A			; Save the parameter type
0B1708 13    1583** INC     DE
0B1709 EB    1584** EX      DE,HL
0B170A ED    1585** LD	(HL),DE			; Save the parameter address (3 bytes)
0B170B 1F 
0B170C 23    1586** INC	HL
0B170D 23    1587** INC	HL
0B170E 23    1588** INC	HL
0B170F EB    1589** EX      DE,HL
0B1710 18    1590** JR      CALL1
0B1711 DD 
             1591** ;
0B1712 78    1592** CALL2:			LD      A,B
0B1713 32    1593** LD      (BUFFER),A      	; Save the parameter count
0B1714 00 
0B1715 4D 
0B1716 0B 
0B1717 2A    1594** LD	HL,(R0)			; HL: Address of the code
0B1718 4A 
0B1719 4F 
0B171A 0B 
0B171B CD    1595** CALL    USR1			; And call it
0B171C 35 
0B171D 17 
0B171E 0B 
0B171F C3    1596** JP      XEQ
0B1720 97 
0B1721 0D 
0B1722 0B 
             1597** 
             1598** ; USR(address)
             1599** ;
0B1723 CD    1600** USR:			CALL    ITEMI			; Evaluate the expression
0B1724 26 
0B1725 05 
0B1726 0B 
0B1727 7D    1601** LD	A,L			;  A: MSB of address
0B1728 D9    1602** EXX
0B1729 22    1603** LD	(R0+0),HL		; HL: LSW of address
0B172A 4A 
0B172B 4F 
0B172C 0B 
0B172D 32    1604** LD	(R0+2),A
0B172E 4C 
0B172F 4F 
0B1730 0B 
0B1731 2A    1605** LD	HL,(R0)			; Get the 24-bit address in HL
0B1732 4A 
0B1733 4F 
0B1734 0B 
             1606** ;
0B1735 E5    1607** USR1:			PUSH    HL              	; Address on stack
0B1736 FD    1608** EX      (SP),IY
0B1737 E3 
0B1738 24    1609** INC     H               	; Check for PAGE &00FFxx
0B1739 B4    1610** OR	H
0B173A 21    1611** LD      HL,USR2         	; Return address
0B173B A4 
0B173C 17 
0B173D 0B 
0B173E E5    1612** PUSH    HL
0B173F DD    1613** LD      IX,STAVAR
0B1740 21 
0B1741 00 
0B1742 4E 
0B1742 0B   
0B1744 CC    1614** CALL    Z,OSCALL        	; Intercept &00FFxx
0B1745 F2 
0B1746 44 
0B1747 0B 
             1615** ;
0B1748 DD    1616** LD      C, (IX+24)		; F%
0B1749 4E 
0B174A 18 
0B174B C5    1617** PUSH    BC
             1618** ;
0B174C DD    1619** LD	A, (IX+8)		; B% -> MSW
0B174D 7E 
0B174E 08 
0B174F 32    1620** LD	(R0+1), A
0B1750 4B 
0B1751 4F 
0B1752 0B 
0B1753 DD    1621** LD	A, (IX+9)
0B1754 7E 
0B1755 09 
0B1756 32    1622** LD	(R0+2), A
0B1757 4C 
0B1758 4F 
0B1759 0B 
0B175A DD    1623** LD	A, (IX+12)		; C% -> LSB
0B175B 7E 
0B175C 0C 
0B175D 32    1624** LD	(R0+0), A
0B175E 4A 
0B175F 4F 
0B1760 0B 
0B1761 ED    1625** LD	BC, (R0)
0B1762 4B 
0B1763 4A 
0B1764 4F 
0B1764 0B   
             1626** ;
0B1766 DD    1627** LD	A, (IX+16)		; D% -> MSW
0B1767 7E 
0B1768 10 
0B1769 32    1628** LD	(R0+1), A
0B176A 4B 
0B176B 4F 
0B176C 0B 
0B176D DD    1629** LD	A, (IX+17)
0B176E 7E 
0B176F 11 
0B1770 32    1630** LD	(R0+2), A
0B1771 4C 
0B1772 4F 
0B1773 0B 
0B1774 DD    1631** LD	A, (IX+20)		; E% -> LSB
0B1775 7E 
0B1776 14 
0B1777 32    1632** LD	(R0+0), A
0B1778 4A 
0B1779 4F 
0B177A 0B 
0B177B ED    1633** LD	DE, (R0)
0B177C 5B 
0B177D 4A 
0B177E 4F 
0B177E 0B   
             1634** ;
0B1780 DD    1635** LD	A, (IX+32)		; H% -> MSW
0B1781 7E 
0B1782 20 
0B1783 32    1636** LD	(R0+1), A
0B1784 4B 
0B1785 4F 
0B1786 0B 
0B1787 DD    1637** LD	A, (IX+33)
0B1788 7E 
0B1789 21 
0B178A 32    1638** LD	(R0+2), A
0B178B 4C 
0B178C 4F 
0B178D 0B 
0B178E DD    1639** LD	A, (IX+48)		; L% -> LSB
0B178F 7E 
0B1790 30 
0B1791 32    1640** LD	(R0+0), A
0B1792 4A 
0B1793 4F 
0B1794 0B 
0B1795 2A    1641** LD	HL, (R0)
0B1796 4A 
0B1797 4F 
0B1798 0B 
             1642** ;
0B1799 F1    1643** POP     AF			; F%
0B179A DD    1644** LD      A, (IX+4)        	; A%
0B179B 7E 
0B179C 04 
             1645** 
0B179D DD    1646** LD      IX,BUFFER
0B179E 21 
0B179F 00 
0B17A0 4D 
0B17A0 0B   
0B17A2 FD    1647** JP      (IY)            	; Off to user routine
0B17A3 E9 
             1648** ;
0B17A4 FD    1649** USR2:			POP     IY
0B17A5 E1 
0B17A6 AF    1650** XOR     A
0B17A7 4F    1651** LD      C,A
0B17A8 C9    1652** RET
             1653** 
             1654** ; PUT port,data
             1655** ;
0B17A9 CD    1656** PUT:			CALL    EXPRI           ;PORT ADDRESS
0B17AA 0B 
0B17AB 05 
0B17AC 0B 
0B17AD D9    1657** EXX
0B17AE E5    1658** PUSH    HL
0B17AF CD    1659** CALL    COMMA
0B17B0 23 
0B17B1 0C 
0B17B2 0B 
0B17B3 CD    1660** CALL    EXPRI           ;DATA
0B17B4 0B 
0B17B5 05 
0B17B6 0B 
0B17B7 D9    1661** EXX
0B17B8 C1    1662** POP     BC
0B17B9 ED    1663** OUT     (C),L           ;OUTPUT TO PORT BC
0B17BA 69 
0B17BB C3    1664** JP      XEQ
0B17BC 97 
0B17BD 0D 
0B17BE 0B 
             1665** 
             1666** ; SUBROUTINES -----------------------------------------------------------------
             1667** 
             1668** ; ASSIGN - Assign a numeric value to a variable.
             1669** ; Outputs: NC,  Z - OK, numeric.
             1670** ;          NC, NZ - OK, string.
             1671** ;           C, NZ - illegal
             1672** ;
0B17BF CD    1673** ASSIGN:			CALL    GETVAR          	; Try to get the variable
0B17C0 3B 
0B17C1 3C 
0B17C2 0B 
0B17C3 D8    1674** RET     C               	; Return with C if it is an illegal variable
0B17C4 C4    1675** CALL    NZ,PUTVAR		; If it does not exist, then create the variable
0B17C5 2A 
0B17C6 3C 
0B17C7 0B 
0B17C8 B7    1676** OR      A
0B17C9 F8    1677** RET     M               	; Return if type is string (81h)
0B17CA F5    1678** PUSH    AF              	; It's a numeric type from this point on
0B17CB CD    1679** CALL    EQUALS			; Check if the variable is followed by an '=' symbol; this will throw a 'Mistake' error if not
0B17CC 91 
0B17CD 19 
0B17CE 0B 
0B17CF E5    1680** PUSH    HL
0B17D0 CD    1681** CALL    EXPRN
0B17D1 03 
0B17D2 05 
0B17D3 0B 
0B17D4 DD    1682** POP     IX
0B17D5 E1 
0B17D6 F1    1683** POP     AF
0B17D7 CB    1684** STORE:			BIT     0,A
0B17D8 47 
0B17D9 28    1685** JR      Z,STOREI
0B17DA 13 
0B17DB BF    1686** CP      A               	; Set the variable to 0
0B17DC DD    1687** STORE5:			LD      (IX+4),C
0B17DD 71 
0B17DE 04 
0B17DF D9    1688** STORE4:			EXX
0B17E0 DD    1689** LD      (IX+0),L
0B17E1 75 
0B17E2 00 
0B17E3 DD    1690** LD      (IX+1),H
0B17E4 74 
0B17E5 01 
0B17E6 D9    1691** EXX
0B17E7 DD    1692** LD      (IX+2),L
0B17E8 75 
0B17E9 02 
0B17EA DD    1693** LD      (IX+3),H
0B17EB 74 
0B17EC 03 
0B17ED C9    1694** RET
0B17EE F5    1695** STOREI:			PUSH    AF
0B17EF 0C    1696** INC     C               ;SPEED - & PRESERVE F'
0B17F0 0D    1697** DEC     C               ; WHEN CALLED BY FNEND0
0B17F1 C4    1698** CALL    NZ,SFIX         ;CONVERT TO INTEGER
0B17F2 63 
0B17F3 08 
0B17F4 0B 
0B17F5 F1    1699** POP     AF
0B17F6 FE    1700** CP      4
0B17F7 04 
0B17F8 28    1701** JR      Z,STORE4
0B17F9 E5 
0B17FA BF    1702** CP      A               ;SET ZERO
0B17FB D9    1703** STORE1:			EXX
0B17FC DD    1704** LD      (IX+0),L
0B17FD 75 
0B17FE 00 
0B17FF D9    1705** EXX
0B1800 C9    1706** RET
             1707** ;
             1708** ; Copy a string from the string accumulator to variable storage on the stack
             1709** ; Parameters:
             1710** ; - AF: The variable type (should be 81h for a string, 80h for a fixed/static string)
             1711** ; - IX: Address of the variable storage on the stack
             1712** ;
0B1801 21    1713** STACCS:			LD      HL,ACCS			; HL: Pointer to the string accumulator
0B1802 00 
0B1803 4C 
0B1804 0B 
             1714** ;
             1715** ; Parameters:
             1716** ; As above, but:
             1717** ; - HL: Address of the string to be stored
             1718** ; -  E: The string length
             1719** ; NB:
             1720** ; Strings are mutable
             1721** ; Strings are stored in the following format in the variable:
             1722** ; - Address of the next variable (3 bytes)
             1723** ; - The rest of the variable name - this is zero terminated
             1724** ; - Current string length (byte)
             1725** ; - Maximum (original) string length (byte)
             1726** ; - String start address (3 bytes for BBC BASIC for eZ80, 2 bytes for standard BBC BASIC for Z80)
             1727** ; See https://www.bbcbasic.co.uk/bbcbasic/mancpm/annexd.html#string for more details
             1728** ;
0B1805 1F    1729** STORES:			RRA				; Rotate right to shift bit 0 into carry
0B1806 30    1730** JR      NC,STORS3		; It's a fixed/static string, so skip the next bit
0B1807 5D 
0B1808 E5    1731** PUSH    HL			; Stack ACCS
             1732** ;
             1733** ; Load the string pointer and lengths into registers - these are all zeroed for new strings
             1734** ;
0B1809 D9    1735** EXX				; This block was a call to LOAD4
0B180A DD    1736** LD      L,(IX+0)		; The length of the string currently stored in the allocated space
0B180B 6E 
0B180C 00 
0B180D DD    1737** LD      H,(IX+1)		; The maximum original string length
0B180E 66 
0B180F 01 
0B1810 D9    1738** EXX
0B1811 DD    1739** LD	HL,(IX+2)		; Address of the string (24-bit)
0B1812 27 
0B1813 02 
             1740** ;
0B1814 7B    1741** LD      A,E             	; E : Length of string in ACCS (as passed to the function)
0B1815 D9    1742** EXX
0B1816 6F    1743** LD      L,A			; L': Length of string currently stored on the stack
0B1817 7C    1744** LD      A,H             	; H': The maximum (original) string length
0B1818 D9    1745** EXX
0B1819 BB    1746** CP      E			; Check whether there is enough room for the string in ACCS in the allocated space
0B181A 30    1747** JR      NC,STORS1       	; Yes there is, so skip the next bit
0B181B 17 
             1748** ;
             1749** ; At this point we're either initialising a new string or assigning more memory to an existing string
             1750** ; Note that there is no garbage collection here, so if a string is reassigned and the new string is longer
             1751** ; then the existing and new strings may both exist in memory.
             1752** ;
0B181C D9    1753** EXX
0B181D 65    1754** LD      H,L			; H: Set the maximum string length to the string length
0B181E D9    1755** EXX
0B181F E5    1756** PUSH    HL
0B1820 01    1757** LD	BC, 0
0B1821 00 
0B1822 00 
0B1823 00 
0B1824 4F    1758** LD      C,A			; BC: The maximum (original) string length
0B1825 09    1759** ADD     HL,BC			; Work out whether this is the last string in memory
0B1826 ED    1760** LD      BC,(FREE)
0B1827 4B 
0B1828 1D 
0B1829 4F 
0B1829 0B   
0B182B ED    1761** SBC     HL,BC			; Is string last?
0B182C 42 
0B182D E1    1762** POP     HL
0B182E 37    1763** SCF
0B182F 28    1764** JR      Z,STORS1
0B1830 02 
             1765** ; LD	HL, BC			; HL=BC
0B1831 C5    1766** push bc
0B1832 E1    1767** pop hl
             1768** ;
             1769** ; At this point carry flag will be clear if the string can be replaced in memory, otherwise will be set
             1770** ; - H': The maximum (original) string length
             1771** ; - L': The actual string length (must be less than H')
             1772** ; - HL: Address of the string in memory
             1773** ;
0B1833 D9    1774** STORS1:			EXX				; This block was a call to STORE4
0B1834 DD    1775** LD      (IX+0),L		; The actual string length (must be less then H')
0B1835 75 
0B1836 00 
0B1837 DD    1776** LD      (IX+1),H		; The maximum (original) string length
0B1838 74 
0B1839 01 
0B183A D9    1777** EXX
0B183B DD    1778** LD	(IX+2),HL		; The pointer to the original string
0B183C 2F 
0B183D 02 
             1779** ;
0B183E 01    1780** LD	BC, 0
0B183F 00 
0B1840 00 
0B1841 00 
0B1842 4B    1781** LD      C,E			; BC: The new string length
0B1843 EB    1782** EX      DE,HL
0B1844 E1    1783** POP     HL
0B1845 0D    1784** DEC     C			; Strings can only be 255 bytes long, so this is a quick way to
0B1846 0C    1785** INC     C			; check whether BC is 0 without affecting the carry flag
0B1847 C8    1786** RET     Z               	; It is, so it's a NULL string, don't need to do anything else here
0B1848 ED    1787** LDIR				; Replace the string in memory
0B1849 B0 
0B184A D0    1788** RET     NC
0B184B ED    1789** LD      (FREE),DE		; Set the new value of FREE and fall through to CHECK
0B184C 53 
0B184D 1D 
0B184E 4F 
0B184E 0B   
             1790** ;
             1791** ; Check whether the stack is full
             1792** ;
0B1850 E5    1793** CHECK:			PUSH    HL
0B1851 C5    1794** PUSH	BC
0B1852 2A    1795** LD      HL,(FREE)		; HL: Address of first free space byte
0B1853 1D 
0B1854 4F 
0B1855 0B 
0B1856 01    1796** LD	BC,100h			; BC: One page of memory
0B1857 00 
0B1858 01 
0B1859 00 
0B185A 09    1797** ADD	HL,BC			; Add a page to FREE
0B185B ED    1798** SBC     HL,SP			; And subtract the current SP
0B185C 72 
0B185D C1    1799** POP	BC
0B185E E1    1800** POP     HL
0B185F D8    1801** RET     C			; The SP is not in the same page, so just return
0B1860 AF    1802** XOR     A			; Otherwise
0B1861 C3    1803** JP      ERROR_			; Throw error "No room"
0B1862 61 
0B1863 39 
0B1864 0B 
             1804** ;
0B1865 01    1805** STORS3:			LD	BC,0
0B1866 00 
0B1867 00 
0B1868 00 
0B1869 4B    1806** LD      C,E			; BC: String length
0B186A DD    1807** PUSH    IX
0B186B E5 
0B186C D1    1808** POP     DE			; DE: Destination
0B186D AF    1809** XOR     A			; Check if string length is 0
0B186E B9    1810** CP      C
0B186F 28    1811** JR      Z,STORS5		; Yes, so don't copy
0B1870 02 
0B1871 ED    1812** LDIR
0B1872 B0 
0B1873 3E    1813** STORS5:			LD      A,CR			; Finally add the terminator
0B1874 0D 
0B1875 12    1814** LD      (DE),A
0B1876 C9    1815** RET
             1816** 
             1817** ; ARGUE: TRANSFER FN OR PROC ARGUMENTS FROM THE
             1818** ;  CALLING STATEMENT TO THE DUMMY VARIABLES VIA
             1819** ;  THE STACK.  IT MUST BE DONE THIS WAY TO MAKE
             1820** ;  PROCFRED(A,B)    DEF PROCFRED(B,A)     WORK.
             1821** ;    Inputs: DE addresses parameter list
             1822** ;            IY addresses dummy variable list
             1823** ;   Outputs: DE,IY updated
             1824** ;  Destroys: Everything
             1825** ;
0B1877 3E    1826** ARGUE:			LD      A,-1
0B1878 FF 
0B1879 F5    1827** PUSH    AF              	; Put marker on the stack
0B187A FD    1828** ARGUE1:			INC     IY              	; Bump past '(' or ',''
0B187B 23 
0B187C 13    1829** INC     DE
0B187D D5    1830** PUSH    DE
0B187E CD    1831** CALL    NXT			; Skip any whitespace
0B187F 71 
0B1880 0C 
0B1881 0B 
0B1882 CD    1832** CALL    GETVAR			; Get the location of the variable in HL/IX
0B1883 3B 
0B1884 3C 
0B1885 0B 
0B1886 38    1833** JR      C,ARGERR		; If the parameter contains an illegal character then throw an error
0B1887 3F 
0B1888 C4    1834** CALL    NZ,PUTVAR
0B1889 2A 
0B188A 3C 
0B188B 0B 
0B188C D1    1835** POP     DE
0B188D E5    1836** PUSH    HL              	; VARPTR
0B188E B7    1837** OR      A               	; Check the variable type
0B188F F5    1838** PUSH    AF
0B1890 D5    1839** PUSH    DE
0B1891 FD    1840** EX      (SP),IY
0B1892 E3 
0B1893 FA    1841** JP      M,ARGUE2        	; Jump here if it is a string
0B1894 AB 
0B1895 18 
0B1896 0B 
             1842** ;
0B1897 CD    1843** CALL    EXPRN           	; At this point it is numeric, so get the numeric expression value
0B1898 03 
0B1899 05 
0B189A 0B 
0B189B FD    1844** EX      (SP),IY
0B189C E3 
0B189D D1    1845** POP     DE
0B189E F1    1846** POP     AF
0B189F D9    1847** EXX
0B18A0 E5    1848** PUSH    HL
0B18A1 D9    1849** EXX
0B18A2 E5    1850** PUSH    HL
0B18A3 47    1851** LD      B,A
0B18A4 C5    1852** PUSH    BC
0B18A5 CD    1853** CALL    CHECK           	; Check room
0B18A6 50 
0B18A7 18 
0B18A8 0B 
0B18A9 18    1854** JR      ARGUE4
0B18AA 0F 
             1855** ;
0B18AB CD    1856** ARGUE2:			CALL    EXPRS			; At this point it is a string variable, so get the string expression value
0B18AC 16 
0B18AD 05 
0B18AE 0B 
0B18AF FD    1857** EX      (SP),IY
0B18B0 E3 
0B18B1 D9    1858** EXX
0B18B2 D1    1859** POP     DE
0B18B3 D9    1860** EXX
0B18B4 F1    1861** POP     AF
0B18B5 CD    1862** CALL    PUSHS
0B18B6 B5 
0B18B7 0B 
0B18B8 0B 
0B18B9 D9    1863** EXX
             1864** ;
0B18BA CD    1865** ARGUE4:			CALL    NXT			; Skip whitespace
0B18BB 71 
0B18BC 0C 
0B18BD 0B 
0B18BE FE    1866** CP      ','			; Check to see if the next value is a comma
0B18BF 2C 
0B18C0 20    1867** JR      NZ,ARGUE5		; No, so jump here
0B18C1 0B 
0B18C2 1A    1868** LD      A,(DE)
0B18C3 FE    1869** CP      ','			; Are there any more arguments?
0B18C4 2C 
0B18C5 28    1870** JR      Z,ARGUE1        	; Yes, so loop
0B18C6 B3 
             1871** ;
0B18C7 3E    1872** ARGERR:			LD      A,31
0B18C8 1F 
0B18C9 C3    1873** JP      ERROR_           	; Throw error "Arguments"
0B18CA 61 
0B18CB 39 
0B18CC 0B 
             1874** ;
0B18CD CD    1875** ARGUE5:			CALL    BRAKET			; Check for end bracket (throws an error if missing)
0B18CE 30 
0B18CF 0C 
0B18D0 0B 
0B18D1 1A    1876** LD      A,(DE)
0B18D2 FE    1877** CP      ')'
0B18D3 29 
0B18D4 20    1878** JR      NZ,ARGERR
0B18D5 F1 
0B18D6 13    1879** INC     DE
0B18D7 D9    1880** EXX
0B18D8 C1    1881** ARGUE6:			POP     BC
0B18D9 78    1882** LD      A,B
0B18DA 3C    1883** INC     A
0B18DB D9    1884** EXX
0B18DC C8    1885** RET     Z               	; Marker popped
0B18DD D9    1886** EXX
0B18DE 3D    1887** DEC     A
0B18DF FA    1888** JP      M,ARGUE7        	; If it is a string, then jump here
0B18E0 EF 
0B18E1 18 
0B18E2 0B 
0B18E3 E1    1889** POP     HL
0B18E4 D9    1890** EXX
0B18E5 E1    1891** POP     HL
0B18E6 D9    1892** EXX
0B18E7 DD    1893** POP     IX
0B18E8 E1 
0B18E9 CD    1894** CALL    STORE	           	; Write to dummy variable
0B18EA D7 
0B18EB 17 
0B18EC 0B 
0B18ED 18    1895** JR      ARGUE6
0B18EE E9 
             1896** ;
0B18EF CD    1897** ARGUE7:			CALL    POPS
0B18F0 DF 
0B18F1 0B 
0B18F2 0B 
0B18F3 DD    1898** POP     IX
0B18F4 E1 
0B18F5 CD    1899** CALL    STACCS
0B18F6 01 
0B18F7 18 
0B18F8 0B 
0B18F9 18    1900** JR      ARGUE6
0B18FA DD 
             1901** 
             1902** ; SAVLOC: SUBROUTINE TO STACK LOCAL PARAMETERS
             1903** ;   OF A FUNCTION OR PROCEDURE.
             1904** ; THERE IS A LOT OF STACK MANIPULATION - CARE!!
             1905** ;    Inputs: IY is parameters pointer
             1906** ;   Outputs: IY updated
             1907** ;  Destroys: A,B,C,D,E,H,L,IX,IY,F,SP
             1908** ;
0B18FB D1    1909** SAVLOC:			POP     DE              	; DE: Return address (from the CALL)
             1910** ;
0B18FC FD    1911** SAVLO1:			INC     IY              	; Bump past '(' or ','
0B18FD 23 
0B18FE CD    1912** CALL    NXT			; And also any whitespace
0B18FF 71 
0B1900 0C 
0B1901 0B 
0B1902 D5    1913** PUSH    DE			; Push the return address back onto the stack
0B1903 D9    1914** EXX
0B1904 C5    1915** PUSH    BC
0B1905 D5    1916** PUSH    DE
0B1906 E5    1917** PUSH    HL
0B1907 D9    1918** EXX
0B1908 CD    1919** CALL    VAR_             	; Dummy variable
0B1909 8F 
0B190A 0E 
0B190B 0B 
0B190C D9    1920** EXX
0B190D E1    1921** POP     HL
0B190E D1    1922** POP     DE
0B190F C1    1923** POP     BC
0B1910 D9    1924** EXX
0B1911 D1    1925** POP     DE
0B1912 B7    1926** OR      A               	; Check the variable type
0B1913 FA    1927** JP      M,SAVLO2        	; 80h = string, so jump to save a local string
0B1914 26 
0B1915 19 
0B1916 0B 
0B1917 D9    1928** EXX
0B1918 E5    1929** PUSH    HL              	; Save H'L'
0B1919 D9    1930** EXX
0B191A 47    1931** LD      B,A             	;  B: Variable type
0B191B CD    1932** CALL    LOADN
0B191C 17 
0B191D 06 
0B191E 0B 
0B191F D9    1933** EXX
0B1920 E3    1934** EX      (SP),HL
0B1921 D9    1935** EXX
0B1922 E5    1936** PUSH    HL
0B1923 C5    1937** PUSH    BC
0B1924 18    1938** JR      SAVLO4
0B1925 2D 
             1939** ;
0B1926 F5    1940** SAVLO2:			PUSH    AF              	; Save the type (string)
0B1927 D5    1941** PUSH    DE
0B1928 D9    1942** EXX
0B1929 E5    1943** PUSH    HL
0B192A D9    1944** EXX
0B192B CD    1945** CALL    LOADS
0B192C A1 
0B192D 06 
0B192E 0B 
0B192F D9    1946** EXX
0B1930 E1    1947** POP     HL
0B1931 D9    1948** EXX
0B1932 01    1949** LD	BC,0
0B1933 00 
0B1934 00 
0B1935 00 
0B1936 4B    1950** LD      C,E			; BC: String length
0B1937 D1    1951** POP     DE
0B1938 CD    1952** CALL    CHECK			; Check if there is space on the stack
0B1939 50 
0B193A 18 
0B193B 0B 
0B193C F1    1953** POP     AF              	; Level stack
0B193D 21    1954** LD      HL,0
0B193E 00 
0B193F 00 
0B1940 00 
0B1941 ED    1955** SBC     HL,BC			; HL: Number of bytes required on the stack for the string
0B1942 42 
0B1943 39    1956** ADD     HL,SP			; Make space for the string on the stack
0B1944 F9    1957** LD      SP,HL
0B1945 47    1958** LD      B,A             	;  B: Variable type
0B1946 C5    1959** PUSH    BC
0B1947 28    1960** JR      Z,SAVLO4
0B1948 0A 
0B1949 D5    1961** PUSH    DE
0B194A 11    1962** LD      DE,ACCS
0B194B 00 
0B194C 4C 
0B194D 0B 
0B194E EB    1963** EX      DE,HL
0B194F 45    1964** LD      B,L
0B1950 ED    1965** LDIR                    	; Save the string onto the stack
0B1951 B0 
0B1952 D1    1966** POP     DE
             1967** ;
0B1953 DD    1968** SAVLO4:			PUSH    IX			; VARPTR
0B1954 E5 
0B1955 CD    1969** CALL    SAVLO5
0B1956 59 
0B1957 19 
0B1958 0B 
             1970** LOCCHK:			EQU     $
0B1959 CD    1971** SAVLO5:			CALL    CHECK
0B195A 50 
0B195B 18 
0B195C 0B 
0B195D CD    1972** CALL    NXT
0B195E 71 
0B195F 0C 
0B1960 0B 
0B1961 FE    1973** CP      ','             	; Are there any more local variables?
0B1962 2C 
0B1963 28    1974** JR      Z,SAVLO1		; Yes, so loop
0B1964 97 
0B1965 EB    1975** EX      DE,HL			; DE -> HL: The return address
0B1966 E9    1976** JP      (HL)            	; And effectvely return
             1977** ;
0B1967 FD    1978** DELIM:			LD      A,(IY)          	; Assembler delimiter
0B1968 7E 
0B1969 00 
0B196A FE    1979** CP      ' '
0B196B 20 
0B196C C8    1980** RET     Z
0B196D FE    1981** CP      ','
0B196E 2C 
0B196F C8    1982** RET     Z
0B1970 FE    1983** CP      ')'
0B1971 29 
0B1972 C8    1984** RET     Z
0B1973 FE    1985** TERM:			CP      ';'             	; Assembler terminator
0B1974 3B 
0B1975 C8    1986** RET     Z
0B1976 FE    1987** CP      '\'
0B1977 5C 
0B1978 C8    1988** RET     Z
0B1979 18    1989** JR      TERM0
0B197A 07 
             1990** ;
0B197B CD    1991** TERMQ:			CALL    NXT
0B197C 71 
0B197D 0C 
0B197E 0B 
0B197F FE    1992** CP      ELSE_EX_
0B1980 8B 
0B1981 D0    1993** RET     NC
0B1982 FE    1994** TERM0:			CP      ':'             	; Assembler seperator
0B1983 3A 
0B1984 D0    1995** RET     NC
0B1985 FE    1996** CP      CR
0B1986 0D 
0B1987 C9    1997** RET
             1998** ;
0B1988 CD    1999** SPAN:			CALL    TERMQ
0B1989 7B 
0B198A 19 
0B198B 0B 
0B198C C8    2000** RET     Z
0B198D FD    2001** INC     IY
0B198E 23 
0B198F 18    2002** JR      SPAN
0B1990 F7 
             2003** ;
             2004** ; This snippet is used to check whether an expression is followed by an '=' symbol
             2005** ;
0B1991 CD    2006** EQUALS:			CALL    NXT			; Skip whitespace
0B1992 71 
0B1993 0C 
0B1994 0B 
0B1995 FD    2007** INC     IY			; Skip past the character in question
0B1996 23 
0B1997 FE    2008** CP      '='			; Is it '='
0B1998 3D 
0B1999 C8    2009** RET     Z			; Yes, so return
0B199A 3E    2010** LD      A,4			; Otherwise
0B199B 04 
0B199C C3    2011** JP      ERROR_           	; Throw error "Mistake"
0B199D 61 
0B199E 39 
0B199F 0B 
             2012** ;
0B19A0 FE    2013** FORMAT:			CP      TAB
0B19A1 8A 
0B19A2 28    2014** JR      Z,DOTAB
0B19A3 0D 
0B19A4 FE    2015** CP      SPC
0B19A5 89 
0B19A6 28    2016** JR      Z,DOSPC
0B19A7 40 
0B19A8 FE    2017** CP      '''
0B19A9 27 
0B19AA C0    2018** RET     NZ
0B19AB CD    2019** CALL    CRLF
0B19AC 48 
0B19AD 3B 
0B19AE 0B 
0B19AF AF    2020** XOR     A
0B19B0 C9    2021** RET
             2022** ;
0B19B1 C5    2023** DOTAB:			PUSH    BC
0B19B2 CD    2024** CALL    EXPRI
0B19B3 0B 
0B19B4 05 
0B19B5 0B 
0B19B6 D9    2025** EXX
0B19B7 C1    2026** POP     BC
0B19B8 FD    2027** LD      A,(IY)
0B19B9 7E 
0B19BA 00 
0B19BB FE    2028** CP      ','
0B19BC 2C 
0B19BD 28    2029** JR      Z,DOTAB1
0B19BE 14 
0B19BF CD    2030** CALL    BRAKET
0B19C0 30 
0B19C1 0C 
0B19C2 0B 
0B19C3 7D    2031** LD      A,L
0B19C4 21    2032** TABIT:			LD      HL,COUNT
0B19C5 3D 
0B19C6 4F 
0B19C7 0B 
0B19C8 BE    2033** CP      (HL)
0B19C9 C8    2034** RET     Z
0B19CA F5    2035** PUSH    AF
0B19CB DC    2036** CALL    C,CRLF
0B19CC 48 
0B19CD 3B 
0B19CE 0B 
0B19CF F1    2037** POP     AF
0B19D0 96    2038** SUB     (HL)
0B19D1 18    2039** JR      FILL
0B19D2 1D 
0B19D3 FD    2040** DOTAB1:			INC     IY
0B19D4 23 
0B19D5 C5    2041** PUSH    BC
0B19D6 E5    2042** PUSH    HL
0B19D7 CD    2043** CALL    EXPRI
0B19D8 0B 
0B19D9 05 
0B19DA 0B 
0B19DB D9    2044** EXX
0B19DC D1    2045** POP     DE
0B19DD C1    2046** POP     BC
0B19DE CD    2047** CALL    BRAKET
0B19DF 30 
0B19E0 0C 
0B19E1 0B 
0B19E2 CD    2048** CALL    PUTCSR
0B19E3 C2 
0B19E4 40 
0B19E5 0B 
0B19E6 AF    2049** XOR     A
0B19E7 C9    2050** RET
             2051** ;
0B19E8 C5    2052** DOSPC:			PUSH    BC
0B19E9 CD    2053** CALL    ITEMI
0B19EA 26 
0B19EB 05 
0B19EC 0B 
0B19ED D9    2054** EXX
0B19EE 7D    2055** LD      A,L
0B19EF C1    2056** POP     BC
0B19F0 B7    2057** FILL:			OR      A
0B19F1 C8    2058** RET     Z
0B19F2 C5    2059** PUSH    BC
0B19F3 47    2060** LD      B,A
0B19F4 3E    2061** FILL1:			LD      A,' '
0B19F5 20 
0B19F6 CD    2062** CALL    OUTCHR
0B19F7 50 
0B19F8 3B 
0B19F9 0B 
0B19FA 10    2063** DJNZ    FILL1
0B19FB F8 
0B19FC C1    2064** POP     BC
0B19FD AF    2065** XOR     A
0B19FE C9    2066** RET
             2067** ;
0B19FF 21    2068** PTEXT:			LD      HL,ACCS
0B1A00 00 
0B1A01 4C 
0B1A02 0B 
0B1A03 1C    2069** INC     E
0B1A04 1D    2070** PTEXT1:			DEC     E
0B1A05 C8    2071** RET     Z
0B1A06 7E    2072** LD      A,(HL)
0B1A07 23    2073** INC     HL
0B1A08 CD    2074** CALL    OUTCHR
0B1A09 50 
0B1A0A 3B 
0B1A0B 0B 
0B1A0C 18    2075** JR      PTEXT1
0B1A0D F6 
             2076** ;
0B1A0E F5    2077** FETCHS:			PUSH    AF
0B1A0F C5    2078** PUSH    BC
0B1A10 E5    2079** PUSH    HL
0B1A11 FD    2080** EX      (SP),IY
0B1A12 E3 
0B1A13 CD    2081** CALL    XTRACT
0B1A14 2E 
0B1A15 1A 
0B1A16 0B 
0B1A17 CD    2082** CALL    NXT
0B1A18 71 
0B1A19 0C 
0B1A1A 0B 
0B1A1B FD    2083** EX      (SP),IY
0B1A1C E3 
0B1A1D E1    2084** POP     HL
0B1A1E C1    2085** POP     BC
0B1A1F F1    2086** POP     AF
0B1A20 C9    2087** RET
             2088** ;
0B1A21 11    2089** LINES:			LD      DE,ACCS
0B1A22 00 
0B1A23 4C 
0B1A24 0B 
0B1A25 7E    2090** LINE1S:			LD      A,(HL)
0B1A26 12    2091** LD      (DE),A
0B1A27 FE    2092** CP      CR
0B1A28 0D 
0B1A29 C8    2093** RET     Z
0B1A2A 23    2094** INC     HL
0B1A2B 1C    2095** INC     E
0B1A2C 18    2096** JR      LINE1S
0B1A2D F7 
             2097** ;
0B1A2E CD    2098** XTRACT:			CALL    NXT
0B1A2F 71 
0B1A30 0C 
0B1A31 0B 
0B1A32 FE    2099** CP      '"'
0B1A33 22 
0B1A34 FD    2100** INC     IY
0B1A35 23 
0B1A36 CA    2101** JP      Z,CONS
0B1A37 68 
0B1A38 06 
0B1A39 0B 
0B1A3A FD    2102** DEC     IY
0B1A3B 2B 
0B1A3C 11    2103** LD      DE,ACCS
0B1A3D 00 
0B1A3E 4C 
0B1A3F 0B 
0B1A40 FD    2104** XTRAC1:			LD      A,(IY)
0B1A41 7E 
0B1A42 00 
0B1A43 12    2105** LD      (DE),A
0B1A44 FE    2106** CP      ','
0B1A45 2C 
0B1A46 C8    2107** RET     Z
0B1A47 FE    2108** CP      CR
0B1A48 0D 
0B1A49 C8    2109** RET     Z
0B1A4A FD    2110** INC     IY
0B1A4B 23 
0B1A4C 1C    2111** INC     E
0B1A4D 18    2112** JR      XTRAC1
0B1A4E F1 
             2113** 
             2114** ; Search for a token at the start of a program line
             2115** ; - HL: Pointer to the start of a tokenised line in the program area
             2116** ; Returns:
             2117** ; - HL: Pointer to the
             2118** ; -  F: Carry set if not found
             2119** ; Corrupts:
             2120** ; - BC
             2121** ;
0B1A4F 01    2122** SEARCH_EX:			LD      BC,0			; Clear BC
0B1A50 00 
0B1A51 00 
0B1A52 00 
             2123** ;
0B1A53 4E    2124** SRCH1_EX:			LD      C,(HL)			;  C: Fetch the line length
0B1A54 0C    2125** INC     C			; Check for 0, i.e. end of program marker
0B1A55 0D    2126** DEC     C
0B1A56 28    2127** JR      Z,SRCH2_EX         	; Not found the token, so end
0B1A57 0B 
0B1A58 23    2128** INC     HL			; Skip the line length and line number
0B1A59 23    2129** INC     HL
0B1A5A 23    2130** INC     HL
0B1A5B BE    2131** CP      (HL)			; Compare with the token
0B1A5C C8    2132** RET     Z			; Found it, so return with carry not set
0B1A5D 0D    2133** DEC     C			; Skip to the next line
0B1A5E 0D    2134** DEC     C
0B1A5F 0D    2135** DEC     C
0B1A60 09    2136** ADD     HL,BC
0B1A61 18    2137** JR      SRCH1_EX			; Rinse, lather and repeat
0B1A62 F0 
             2138** ;
0B1A63 2B    2139** SRCH2_EX:			DEC     HL              	; Token not found, so back up to the CR at the end of the last line
0B1A64 37    2140** SCF				; And set the carry flag
0B1A65 C9    2141** RET
             2142** 
             2143** ; Multiply by 4 or 5
             2144** ; This function is used to allocate space for dimensioned variables
             2145** ; This is a 24-bit operation
             2146** ; - DE: Number to multiple
             2147** ; -  A: 04h (Integer) - takes up 4 bytes
             2148** ;       05h (Float)   - takes up 5 bytes
             2149** ;       81h (String)  - takes up 5 bytes - this is different from BBC BASIC for Z80 where strings only take up 4 bytes
             2150** ; Returns:
             2151** ; - DE: Multiplied by 4 if A = 4, otherwise multiplies by 5
             2152** ; -  F: Carry if overflow
             2153** ; Corrupts:
             2154** ; - HL
0B1A66 FE    2155** X4OR5:			CP      4			; Check A = 4 (Z flag is used later)
0B1A67 04 
             2156** ; LD	HL,DE
0B1A68 D5    2157** push de
0B1A69 E1    2158** pop hl
0B1A6A 29    2159** ADD     HL,HL			; Multiply by 2 (note this operation preserves the zero flag)
0B1A6B D8    2160** RET     C			; Exit if overflow
0B1A6C 29    2161** ADD     HL,HL			; Multiply by 2 again
0B1A6D D8    2162** RET     C			; Exit if overflow
0B1A6E EB    2163** EX      DE,HL			; DE: Product
0B1A6F C8    2164** RET     Z			; Exit if A = 4
0B1A70 19    2165** ADD     HL,DE			; Add original value to HL (effectively multiplying by 5)
0B1A71 EB    2166** EX      DE,HL			; DE: Product
0B1A72 C9    2167** RET
             2168** 
             2169** ; 16-bit unsigned multiply
             2170** ; - HL: Operand 1
             2171** ; - BC: Operand 2
             2172** ; Returns:
             2173** ; - HL: Result
             2174** ; -  F: C if overflow
             2175** ;
0B1A73 C5    2176** MUL16:			PUSH	BC
0B1A74 51    2177** LD	D, C			; Set up the registers for the multiplies
0B1A75 5D    2178** LD	E, L
0B1A76 69    2179** LD	L, C
0B1A77 4B    2180** LD	C, E
0B1A78 ED    2181** MLT	HL			; HL = H * C (*256)
0B1A79 6C 
0B1A7A ED    2182** MLT	DE			; DE = L * C
0B1A7B 5C 
0B1A7C ED    2183** MLT	BC			; BC = B * L (*256)
0B1A7D 4C 
0B1A7E 09    2184** ADD	HL, BC			; HL = The sum of the two most significant multiplications
0B1A7F C1    2185** POP	BC
0B1A80 AF    2186** XOR	A
0B1A81 9C    2187** SBC	H			; If H is not zero then it's an overflow
0B1A82 D8    2188** RET	C
0B1A83 65    2189** LD	H, L			; HL = ((H * C) + (B * L) * 256) + (L * C)
0B1A84 6F    2190** LD	L, A
0B1A85 19    2191** ADD	HL, DE
0B1A86 C9    2192** RET
             2193** ;
0B1A87 CD    2194** CHANEL:			CALL    NXT			; Skip whitespace
0B1A88 71 
0B1A89 0C 
0B1A8A 0B 
0B1A8B FE    2195** CP      '#'			; Check for the '#' symbol
0B1A8C 23 
0B1A8D 3E    2196** LD      A,45
0B1A8E 2D 
0B1A8F C2    2197** JP      NZ,ERROR_        	; If it is missing, then throw a "Missing #" error
0B1A90 61 
0B1A91 39 
0B1A92 0B 
0B1A93 FD    2198** CHNL:			INC     IY             		; Bump past the '#'
0B1A94 23 
0B1A95 CD    2199** CALL    ITEMI			; Get the channel number
0B1A96 26 
0B1A97 05 
0B1A98 0B 
0B1A99 D9    2200** EXX
0B1A9A EB    2201** EX      DE,HL			; DE: The channel number
0B1A9B C9    2202** RET
             2203** 
             2204** ; ASSEMBLER -------------------------------------------------------------------
             2205** 
             2206** ; Language independant control section:
             2207** ;  Outputs: A=delimiter, carry set if syntax error.
             2208** ;
0B1A9C CD    2209** ASSEM:			CALL    SKIP
0B1A9D B6 
0B1A9E 1F 
0B1A9F 0B 
0B1AA0 FD    2210** INC     IY
0B1AA1 23 
0B1AA2 FE    2211** CP      ':'
0B1AA3 3A 
0B1AA4 28    2212** JR      Z,ASSEM
0B1AA5 F6 
0B1AA6 FE    2213** CP      ']'
0B1AA7 5D 
0B1AA8 C8    2214** RET     Z
0B1AA9 FE    2215** CP      CR
0B1AAA 0D 
0B1AAB C8    2216** RET     Z
0B1AAC FD    2217** DEC     IY
0B1AAD 2B 
0B1AAE DD    2218** LD      IX,(PC)         	; Program counter (P% - defined in equs.inc)
0B1AAF 2A 
0B1AB0 40 
0B1AB1 4E 
0B1AB1 0B   
0B1AB3 21    2219** LD      HL,LISTON
0B1AB4 40 
0B1AB5 4F 
0B1AB6 0B 
0B1AB7 CB    2220** BIT     6,(HL)
0B1AB8 76 
0B1AB9 28    2221** JR      Z,ASSEM0
0B1ABA 05 
0B1ABB DD    2222** LD      IX,(OC)         	; Code origin (O% - defined in equs.inc)
0B1ABC 2A 
0B1ABD 3C 
0B1ABE 4E 
0B1ABE 0B   
0B1AC0 DD    2223** ASSEM0:			PUSH    IX
0B1AC1 E5 
0B1AC2 FD    2224** PUSH    IY
0B1AC3 E5 
0B1AC4 CD    2225** CALL    ASMB
0B1AC5 74 
0B1AC6 1B 
0B1AC7 0B 
0B1AC8 C1    2226** POP     BC
0B1AC9 D1    2227** POP     DE
0B1ACA D8    2228** RET     C
0B1ACB CD    2229** CALL    SKIP
0B1ACC B6 
0B1ACD 1F 
0B1ACE 0B 
0B1ACF 37    2230** SCF
0B1AD0 C0    2231** RET     NZ
0B1AD1 FD    2232** DEC     IY
0B1AD2 2B 
0B1AD3 FD    2233** ASSEM3:			INC     IY
0B1AD4 23 
0B1AD5 FD    2234** LD      A,(IY)
0B1AD6 7E 
0B1AD7 00 
0B1AD8 CD    2235** CALL    TERM0
0B1AD9 82 
0B1ADA 19 
0B1ADB 0B 
0B1ADC 20    2236** JR      NZ,ASSEM3
0B1ADD F5 
0B1ADE 3A    2237** LD      A,(LISTON)
0B1ADF 40 
0B1AE0 4F 
0B1AE1 0B 
0B1AE2 DD    2238** PUSH    IX
0B1AE3 E5 
0B1AE4 E1    2239** POP     HL
0B1AE5 B7    2240** OR      A
0B1AE6 ED    2241** SBC     HL,DE
0B1AE7 52 
0B1AE8 EB    2242** EX      DE,HL           	; DE: Number of bytes
0B1AE9 E5    2243** PUSH    HL
0B1AEA 2A    2244** LD      HL,(PC)
0B1AEB 40 
0B1AEC 4E 
0B1AED 0B 
0B1AEE E5    2245** PUSH    HL
0B1AEF 19    2246** ADD     HL,DE
0B1AF0 22    2247** LD      (PC),HL         	; Update PC
0B1AF1 40 
0B1AF2 4E 
0B1AF3 0B 
0B1AF4 CB    2248** BIT     6,A
0B1AF5 77 
0B1AF6 28    2249** JR      Z,ASSEM5
0B1AF7 09 
0B1AF8 2A    2250** LD      HL,(OC)
0B1AF9 3C 
0B1AFA 4E 
0B1AFB 0B 
0B1AFC 19    2251** ADD     HL,DE
0B1AFD 22    2252** LD      (OC),HL         	; Update OC
0B1AFE 3C 
0B1AFF 4E 
0B1B00 0B 
0B1B01 E1    2253** ASSEM5:			POP     HL              	; Old PC
0B1B02 DD    2254** POP     IX              	; Code here
0B1B03 E1 
0B1B04 CB    2255** BIT     4,A
0B1B05 67 
0B1B06 28    2256** JR      Z,ASSEM
0B1B07 94 
0B1B08 22    2257** LD	(R0),HL			; Store HL in R0 so we can access the MSB
0B1B09 4A 
0B1B0A 4F 
0B1B0B 0B 
0B1B0C 3A    2258** LD	A,(R0+2)		; Print out the address
0B1B0D 4C 
0B1B0E 4F 
0B1B0F 0B 
0B1B10 CD    2259** CALL	HEX_EX
0B1B11 5E 
0B1B12 1B 
0B1B13 0B 
0B1B14 7C    2260** LD      A,H
0B1B15 CD    2261** CALL    HEX_EX
0B1B16 5E 
0B1B17 1B 
0B1B18 0B 
0B1B19 7D    2262** LD      A,L
0B1B1A CD    2263** CALL    HEXSP
0B1B1B 56 
0B1B1C 1B 
0B1B1D 0B 
0B1B1E AF    2264** XOR     A
0B1B1F BB    2265** CP      E
0B1B20 28    2266** JR      Z,ASSEM2
0B1B21 18 
             2267** ;
0B1B22 3A    2268** ASSEM1:			LD      A,(COUNT)
0B1B23 3D 
0B1B24 4F 
0B1B25 0B 
0B1B26 FE    2269** CP      20
0B1B27 14 
0B1B28 3E    2270** LD      A,7
0B1B29 07 
0B1B2A D4    2271** CALL    NC,TABIT        	; Next line
0B1B2B C4 
0B1B2C 19 
0B1B2D 0B 
0B1B2E DD    2272** LD      A,(IX)
0B1B2F 7E 
0B1B30 00 
0B1B31 CD    2273** CALL    HEXSP
0B1B32 56 
0B1B33 1B 
0B1B34 0B 
0B1B35 DD    2274** INC     IX
0B1B36 23 
0B1B37 1D    2275** DEC     E
0B1B38 20    2276** JR      NZ,ASSEM1
0B1B39 E8 
             2277** ;
0B1B3A 3E    2278** ASSEM2:			LD      A,22			; Tab to the disassembly field
0B1B3B 16 
0B1B3C CD    2279** CALL    TABIT
0B1B3D C4 
0B1B3E 19 
0B1B3F 0B 
0B1B40 FD    2280** PUSH    IY
0B1B41 E5 
0B1B42 E1    2281** POP     HL
0B1B43 ED    2282** SBC     HL,BC
0B1B44 42 
0B1B45 0A    2283** ASSEM4:			LD      A,(BC)
0B1B46 CD    2284** CALL    OUT_
0B1B47 6D 
0B1B48 3B 
0B1B49 0B 
0B1B4A 03    2285** INC     BC
0B1B4B 2D    2286** DEC     L
0B1B4C 20    2287** JR      NZ,ASSEM4
0B1B4D F7 
0B1B4E CD    2288** CALL    CRLF
0B1B4F 48 
0B1B50 3B 
0B1B51 0B 
0B1B52 C3    2289** JP      ASSEM
0B1B53 9C 
0B1B54 1A 
0B1B55 0B 
             2290** ;
0B1B56 CD    2291** HEXSP:			CALL    HEX_EX
0B1B57 5E 
0B1B58 1B 
0B1B59 0B 
0B1B5A 3E    2292** LD      A,' '
0B1B5B 20 
0B1B5C 18    2293** JR      OUTCH1
0B1B5D 12 
0B1B5E F5    2294** HEX_EX:			PUSH    AF
0B1B5F 0F    2295** RRCA
0B1B60 0F    2296** RRCA
0B1B61 0F    2297** RRCA
0B1B62 0F    2298** RRCA
0B1B63 CD    2299** CALL    HEXOUT
0B1B64 68 
0B1B65 1B 
0B1B66 0B 
0B1B67 F1    2300** POP     AF
0B1B68 E6    2301** HEXOUT:			AND     0FH
0B1B69 0F 
0B1B6A C6    2302** ADD     A,90H
0B1B6B 90 
0B1B6C 27    2303** DAA
0B1B6D CE    2304** ADC     A,40H
0B1B6E 40 
0B1B6F 27    2305** DAA
0B1B70 C3    2306** OUTCH1:			JP      OUT_
0B1B71 6D 
0B1B72 3B 
0B1B73 0B 
             2307** 
             2308** ; Processor Specific Translation Section:
             2309** ;
             2310** ; Register Usage: B: Type of most recent operand (the base value selected from the opcode table)
             2311** ;                 C: Opcode beig built
             2312** ;                 D: Flags
             2313** ;			Bit 7: Set to 1 if the instruction uses long addressing
             2314** ;			Bit 6: Set to 1 if the instruction is an index instruction with offset
             2315** ;                 E: Offset from IX or IY
             2316** ;                HL: Numeric operand value
             2317** ;                IX: Code destination pointer
             2318** ;                IY: Source text pointer
             2319** ;    Inputs: A = initial character
             2320** ;   Outputs: Carry set if syntax error.
             2321** ;
0B1B74 FE    2322** ASMB:			CP      '.'			; Check for a dot; this indicates a label
0B1B75 2E 
0B1B76 20    2323** JR      NZ,ASMB1		; No, so just process the instruction
0B1B77 1F 
0B1B78 FD    2324** INC     IY			; Skip past the dot to the label name
0B1B79 23 
0B1B7A DD    2325** PUSH    IX			; Store the code destination pointer
0B1B7B E5 
0B1B7C CD    2326** CALL    VAR_			; Create a variable
0B1B7D 8F 
0B1B7E 0E 
0B1B7F 0B 
0B1B80 F5    2327** PUSH    AF
0B1B81 CD    2328** CALL    ZERO			; Zero it
0B1B82 94 
0B1B83 0B 
0B1B84 0B 
0B1B85 3A    2329** LD	A,(PC+2)
0B1B86 42 
0B1B87 4E 
0B1B88 0B 
0B1B89 6F    2330** LD	L,A			; The MSB of the 24-bit address
0B1B8A D9    2331** EXX
0B1B8B 2A    2332** LD      HL,(PC)			; The LSW of the 24-bit address (only 16-bits used)
0B1B8C 40 
0B1B8D 4E 
0B1B8E 0B 
0B1B8F D9    2333** EXX
0B1B90 F1    2334** POP     AF
0B1B91 CD    2335** CALL    STORE			; Store the program counter
0B1B92 D7 
0B1B93 17 
0B1B94 0B 
0B1B95 DD    2336** POP     IX			; Restore the code destination pointer
0B1B96 E1 
             2337** ;
0B1B97 3A    2338** ASMB1:			LD	A,(LISTON)		; Get the OPT flags
0B1B98 40 
0B1B99 4F 
0B1B9A 0B 
0B1B9B E6    2339** AND	80H
0B1B9C 80 
0B1B9D 57    2340** LD      D,A     		;  D: Clear the flags and set the initial ADL mode (copied from bit 7 of LISTON)
0B1B9E CD    2341** CALL    SKIP			; Skip any whitespace
0B1B9F B6 
0B1BA0 1F 
0B1BA1 0B 
0B1BA2 C8    2342** RET     Z			; And return if there is nothing further to process
0B1BA3 FE    2343** CP      TCALL			; Check if it is the token CALL (it will have been tokenised by BASIC)
0B1BA4 D6 
0B1BA5 0E    2344** LD      C,0C4H			;  A: The base operand
0B1BA6 C4 
0B1BA7 FD    2345** INC     IY			; Skip past the token
0B1BA8 23 
0B1BA9 CA    2346** JP      Z,GROUP13_1		; And jump to GROUP13, which handles CALL
0B1BAA EB 
0B1BAB 1C 
0B1BAC 0B 
0B1BAD FD    2347** DEC     IY			; Skip back, as we're not doing the above at this point
0B1BAE 2B 
0B1BAF 21    2348** LD      HL,OPCODS		; HL: Pointer to the eZ80 opcodes table
0B1BB0 CD 
0B1BB1 1F 
0B1BB2 0B 
0B1BB3 CD    2349** CALL    FIND			; Find the opcode
0B1BB4 65 
0B1BB5 1F 
0B1BB6 0B 
0B1BB7 D8    2350** RET     C			; If not found, then return; carry indicates an error condition
0B1BB8 48    2351** LD      C,B     		;  C: A copy of the opcode
             2352** ;
             2353** ; GROUP 0: Trivial cases requiring no computation
             2354** ; GROUP 1: As Group 0, but with "ED" prefix
             2355** ;
0B1BB9 D6    2356** SUB     68			; The number of opcodes in GROUP0 and GROUP1
0B1BBA 44 
0B1BBB 30    2357** JR      NC,GROUP02		; If not in that range, then check GROUP2
0B1BBC 08 
0B1BBD FE    2358** CP      15-68			; Anything between 15 and 68 (neat compare trick here)
0B1BBE CB 
0B1BBF D4    2359** CALL    NC,ED			; Needs to be prefixed with ED
0B1BC0 BE 
0B1BC1 1E 
0B1BC2 0B 
0B1BC3 18    2360** JR      BYTE0			; Then write the opcode byte
0B1BC4 76 
             2361** ;
             2362** ; GROUP 2: BIT, RES, SET
             2363** ; GROUP 3: RLC, RRC, RL, RR, SLA, SRA, SRL
             2364** ;
0B1BC5 D6    2365** GROUP02:		SUB     10			; The number of opcodes in GROUP2 and GROUP3
0B1BC6 0A 
0B1BC7 30    2366** JR      NC,GROUP04		; If not in that range, then check GROUP4
0B1BC8 12 
0B1BC9 FE    2367** CP      3-10			;
0B1BCA F9 
0B1BCB DC    2368** CALL    C,BIT_
0B1BCC 53 
0B1BCD 1F 
0B1BCE 0B 
0B1BCF D8    2369** RET     C
0B1BD0 CD    2370** CALL    REGLO
0B1BD1 24 
0B1BD2 1F 
0B1BD3 0B 
0B1BD4 D8    2371** RET     C
0B1BD5 CD    2372** CALL    CB
0B1BD6 C2 
0B1BD7 1E 
0B1BD8 0B 
0B1BD9 18    2373** JR      BYTE0
0B1BDA 60 
             2374** ;
             2375** ; GROUP 4 - PUSH, POP, EX (SP)
             2376** ;
0B1BDB D6    2377** GROUP04:		SUB     3			; The number of opcodes in GROUP4
0B1BDC 03 
0B1BDD 30    2378** JR      NC,GROUP05		; If not in that range, then check GROUP5
0B1BDE 07 
0B1BDF CD    2379** GROUP04_1:		CALL    PAIR_EX
0B1BE0 46 
0B1BE1 1F 
0B1BE2 0B 
0B1BE3 D8    2380** RET     C
0B1BE4 18    2381** JR      BYTE0
0B1BE5 55 
             2382** ;
             2383** ; GROUP 5 - SUB, AND, XOR, OR, CP
             2384** ; GROUP 6 - ADD, ADC, SBC
             2385** ;
0B1BE6 D6    2386** GROUP05:		SUB     8+2			; The number of opcodes in GROUP5 and GROUP6
0B1BE7 0A 
0B1BE8 30    2387** JR      NC,GROUP07
0B1BE9 39 
0B1BEA FE    2388** CP      5-8
0B1BEB FD 
0B1BEC 06    2389** LD      B,7
0B1BED 07 
0B1BEE D4    2390** CALL    NC,OPND			; Get the first operand
0B1BEF D2 
0B1BF0 1E 
0B1BF1 0B 
0B1BF2 78    2391** LD      A,B
0B1BF3 FE    2392** CP      7			; Is the operand 'A'?
0B1BF4 07 
0B1BF5 20    2393** JR      NZ,GROUP05_HL		; No, so check for HL, IX or IY
0B1BF6 15 
             2394** ;
0B1BF7 CD    2395** GROUP05_1:		CALL    REGLO			; Handle ADD A,?
0B1BF8 24 
0B1BF9 1F 
0B1BFA 0B 
0B1BFB 79    2396** LD      A,C
0B1BFC 30    2397** JR      NC,BIND1		; If it is a register, then write that out
0B1BFD 2E 
0B1BFE EE    2398** XOR     46H			; Handle ADD A,n
0B1BFF 46 
0B1C00 CD    2399** CALL    BIND
0B1C01 C4 
0B1C02 1E 
0B1C03 0B 
0B1C04 CD    2400** DB_:			CALL    NUMBER
0B1C05 04 
0B1C06 1F 
0B1C07 0B 
0B1C08 C3    2401** JP      VAL8
0B1C09 BD 
0B1C0A 1C 
0B1C0B 0B 
             2402** ;
0B1C0C E6    2403** GROUP05_HL:		AND     3FH
0B1C0D 3F 
0B1C0E FE    2404** CP      12
0B1C0F 0C 
0B1C10 37    2405** SCF
0B1C11 C0    2406** RET     NZ
0B1C12 79    2407** LD      A,C
0B1C13 FE    2408** CP      80H
0B1C14 80 
0B1C15 0E    2409** LD      C,9
0B1C16 09 
0B1C17 28    2410** JR      Z,GROUP04_1
0B1C18 C6 
0B1C19 EE    2411** XOR     1CH
0B1C1A 1C 
0B1C1B 0F    2412** RRCA
0B1C1C 4F    2413** LD      C,A
0B1C1D CD    2414** CALL    ED
0B1C1E BE 
0B1C1F 1E 
0B1C20 0B 
0B1C21 18    2415** JR      GROUP04_1
0B1C22 BC 
             2416** ;
             2417** ; GROUP 7 - INC, DEC
             2418** ;
0B1C23 D6    2419** GROUP07:		SUB     2			; The number of opcodes in GROUP7
0B1C24 02 
0B1C25 30    2420** JR      NC,GROUP08
0B1C26 19 
0B1C27 CD    2421** CALL    REGHI
0B1C28 2B 
0B1C29 1F 
0B1C2A 0B 
0B1C2B 79    2422** LD      A,C
0B1C2C D2    2423** BIND1:			JP      NC,BIND
0B1C2D C4 
0B1C2E 1E 
0B1C2F 0B 
0B1C30 EE    2424** XOR     64H
0B1C31 64 
0B1C32 07    2425** RLCA
0B1C33 07    2426** RLCA
0B1C34 07    2427** RLCA
0B1C35 4F    2428** LD      C,A
0B1C36 CD    2429** CALL    PAIR1_EX
0B1C37 4B 
0B1C38 1F 
0B1C39 0B 
0B1C3A D8    2430** RET     C
0B1C3B 79    2431** BYTE0:			LD      A,C
0B1C3C C3    2432** JP      BYTE_
0B1C3D F3 
0B1C3E 1E 
0B1C3F 0B 
             2433** ;
             2434** ; Group 8: IN0, OUT0
             2435** ;
0B1C40 D6    2436** GROUP08:		SUB	2			; The number of opcodes in GROUP8
0B1C41 02 
0B1C42 30    2437** JR	NC,GROUP09
0B1C43 26 
0B1C44 FE    2438** CP	1-2
0B1C45 FF 
0B1C46 CC    2439** CALL    Z,NUMBER		; Fetch number first if OUT
0B1C47 04 
0B1C48 1F 
0B1C49 0B 
0B1C4A 08    2440** EX      AF,AF'			; Save flags
0B1C4B CD    2441** CALL    REG			; Get the register value regardless
0B1C4C 18 
0B1C4D 1F 
0B1C4E 0B 
0B1C4F D8    2442** RET     C			; Return if not a register
0B1C50 08    2443** EX      AF,AF'			; Restore the flags
0B1C51 DC    2444** CALL    C,NUMBER		; Fetch number last if IN
0B1C52 04 
0B1C53 1F 
0B1C54 0B 
0B1C55 78    2445** LD	A,B			; Get the register number
0B1C56 FE    2446** CP	6			; Fail on (HL)
0B1C57 06 
0B1C58 37    2447** SCF
0B1C59 C8    2448** RET	Z
0B1C5A FE    2449** CP	8			; Check it is just single pairs only
0B1C5B 08 
0B1C5C 3F    2450** CCF
0B1C5D D8    2451** RET	C			; And return if it is an invalid register
0B1C5E 07    2452** RLCA				; Bind with the operand
0B1C5F 07    2453** RLCA
0B1C60 07    2454** RLCA
0B1C61 81    2455** ADD	A,C
             2456** ; BEGIN NOT IN BINARY
             2457** ; LD	C,A
             2458** ; CALL	ED			; Prefix with ED
             2459** ; LD	A,C
             2460** ; END NOT IN BINARY
0B1C62 CD    2461** CALL	BYTE_			; Write out the operand
0B1C63 F3 
0B1C64 1E 
0B1C65 0B 
0B1C66 C3    2462** JP	VAL8			; Write out the value
0B1C67 BD 
0B1C68 1C 
0B1C69 0B 
             2463** ;
             2464** ; GROUP 9 - IN
             2465** ; GROUP 10 - OUT
             2466** ;
0B1C6A D6    2467** GROUP09:		SUB     2			; The number of opcodes in GROUP09 amd GROUP10
0B1C6B 02 
0B1C6C 30    2468** JR      NC,GROUP11
0B1C6D 25 
0B1C6E FE    2469** CP      1-2			; Check if Group 9 or Group 1
0B1C6F FF 
0B1C70 CC    2470** CALL    Z,CORN			; Call CORN if Group 10 (OUT)
0B1C71 B2 
0B1C72 1E 
0B1C73 0B 
0B1C74 08    2471** EX      AF,AF'			; Save flags
0B1C75 CD    2472** CALL    REGHI			; Get the register value regardless
0B1C76 2B 
0B1C77 1F 
0B1C78 0B 
0B1C79 D8    2473** RET     C			; Return if not a register
0B1C7A 08    2474** EX      AF,AF'			; Restore the flags
0B1C7B DC    2475** CALL    C,CORN			; Call CORN if Group 9 (IN)
0B1C7C B2 
0B1C7D 1E 
0B1C7E 0B 
0B1C7F 24    2476** INC     H			; If it is IN r,(C) or OUT (C),r then
0B1C80 28    2477** JR      Z,BYTE0			; Just write the operand out
0B1C81 B9 
             2478** ;
0B1C82 78    2479** LD      A,B			; Check the register
0B1C83 FE    2480** CP      7
0B1C84 07 
0B1C85 37    2481** SCF
0B1C86 C0    2482** RET     NZ			; If it is not A, then return
             2483** ;
0B1C87 79    2484** LD      A,C			; Bind the register with the operand
0B1C88 EE    2485** XOR     3
0B1C89 03 
0B1C8A 07    2486** RLCA
0B1C8B 07    2487** RLCA
0B1C8C 07    2488** RLCA
0B1C8D CD    2489** CALL    BYTE_			; Write out the operand
0B1C8E F3 
0B1C8F 1E 
0B1C90 0B 
0B1C91 18    2490** JR      VAL8			; And the value
0B1C92 2A 
             2491** ;
             2492** ; GROUP 11 - JR, DJNZ
             2493** ;
0B1C93 D6    2494** GROUP11:		SUB     2			; The number of opcodes in GROUP11
0B1C94 02 
0B1C95 30    2495** JR      NC,GROUP12
0B1C96 2B 
0B1C97 FE    2496** CP      1-2
0B1C98 FF 
0B1C99 C4    2497** CALL    NZ,COND_
0B1C9A 32 
0B1C9B 1F 
0B1C9C 0B 
0B1C9D 79    2498** LD      A,C
0B1C9E 30    2499** JR      NC,@F
0B1C9F 02 
0B1CA0 3E    2500** LD      A,18H
0B1CA1 18 
0B1CA2 CD    2501** @@:			CALL    BYTE_
0B1CA3 F3 
0B1CA4 1E 
0B1CA5 0B 
0B1CA6 CD    2502** CALL    NUMBER
0B1CA7 04 
0B1CA8 1F 
0B1CA9 0B 
0B1CAA ED    2503** LD      DE,(PC)
0B1CAB 5B 
0B1CAC 40 
0B1CAD 4E 
0B1CAD 0B   
0B1CAF 13    2504** INC     DE
0B1CB0 37    2505** SCF
0B1CB1 ED    2506** SBC     HL,DE
0B1CB2 52 
0B1CB3 7D    2507** LD      A,L
0B1CB4 17    2508** RLA
0B1CB5 9F    2509** SBC     A,A
0B1CB6 BC    2510** CP      H
0B1CB7 3E    2511** TOOFAR:			LD      A,1
0B1CB8 01 
0B1CB9 C2    2512** JP      NZ,ERROR_		; Throw an "Out of range" error
0B1CBA 61 
0B1CBB 39 
0B1CBC 0B 
0B1CBD 7D    2513** VAL8:			LD      A,L
0B1CBE C3    2514** JP      BYTE_
0B1CBF F3 
0B1CC0 1E 
0B1CC1 0B 
             2515** ;
             2516** ; GROUP 12 - JP
             2517** ;
0B1CC2 D6    2518** GROUP12:		SUB	1			; The number of opcodes in GROUP12
0B1CC3 01 
0B1CC4 30    2519** JR	NC,GROUP13
0B1CC5 21 
0B1CC6 CD    2520** CALL	EZ80SF_PART		; Evaluate the suffix (just LIL and SIS)
0B1CC7 18 
0B1CC8 1E 
0B1CC9 0B 
0B1CCA D8    2521** RET	C			; Exit if an invalid suffix is provided
0B1CCB CD    2522** CALL    COND_			; Evaluate the conditions
0B1CCC 32 
0B1CCD 1F 
0B1CCE 0B 
0B1CCF 79    2523** LD      A,C
0B1CD0 30    2524** JR      NC,GROUP12_1
0B1CD1 0D 
0B1CD2 78    2525** LD      A,B
0B1CD3 E6    2526** AND     3FH
0B1CD4 3F 
0B1CD5 FE    2527** CP      6
0B1CD6 06 
0B1CD7 3E    2528** LD      A,0E9H
0B1CD8 E9 
0B1CD9 CA    2529** JP      Z,BYTE_
0B1CDA F3 
0B1CDB 1E 
0B1CDC 0B 
0B1CDD 3E    2530** LD      A,0C3H
0B1CDE C3 
0B1CDF CD    2531** GROUP12_1:		CALL    BYTE_			; Output the opcode (with conditions)
0B1CE0 F3 
0B1CE1 1E 
0B1CE2 0B 
0B1CE3 C3    2532** JP	ADDR_			; Output the address
0B1CE4 6D 
0B1CE5 1E 
0B1CE6 0B 
             2533** ;
             2534** ; GROUP 13 - CALL
             2535** ;
0B1CE7 D6    2536** GROUP13:		SUB	1			; The number of opcodes in GROUP13
0B1CE8 01 
0B1CE9 30    2537** JR	NC,GROUP14
0B1CEA 0C 
0B1CEB CD    2538** GROUP13_1:		CALL	EZ80SF_FULL		; Evaluate the suffix
0B1CEC 30 
0B1CED 1E 
0B1CEE 0B 
0B1CEF CD    2539** CALL    GROUP15_1		; Output the opcode (with conditions)
0B1CF0 12 
0B1CF1 1D 
0B1CF2 0B 
0B1CF3 C3    2540** JP	ADDR_			; Output the address
0B1CF4 6D 
0B1CF5 1E 
0B1CF6 0B 
             2541** ;
             2542** ; GROUP 14 - RST
             2543** ;
0B1CF7 D6    2544** GROUP14:		SUB	1			; The number of opcodes in GROUP14
0B1CF8 01 
0B1CF9 30    2545** JR	NC,GROUP15
0B1CFA 13 
0B1CFB CD    2546** CALL	EZ80SF_FULL		; Evaluate the suffix
0B1CFC 30 
0B1CFD 1E 
0B1CFE 0B 
0B1CFF D8    2547** RET	C			; Exit if an invalid suffix provided
0B1D00 CD    2548** CALL    NUMBER
0B1D01 04 
0B1D02 1F 
0B1D03 0B 
0B1D04 A1    2549** AND     C
0B1D05 B4    2550** OR      H
0B1D06 20    2551** JR      NZ,TOOFAR
0B1D07 AF 
0B1D08 7D    2552** LD      A,L
0B1D09 B1    2553** OR      C
0B1D0A C3    2554** JP      BYTE_
0B1D0B F3 
0B1D0C 1E 
0B1D0D 0B 
             2555** ;
             2556** ; GROUP 15 - RET
             2557** ;
0B1D0E D6    2558** GROUP15:		SUB	1			; The number of opcodes in GROUP15
0B1D0F 01 
0B1D10 30    2559** JR	NC,GROUP16
0B1D11 0F 
0B1D12 CD    2560** GROUP15_1:		CALL    COND_
0B1D13 32 
0B1D14 1F 
0B1D15 0B 
0B1D16 79    2561** LD      A,C
0B1D17 D2    2562** JP      NC,BYTE_
0B1D18 F3 
0B1D19 1E 
0B1D1A 0B 
0B1D1B F6    2563** OR      9
0B1D1C 09 
0B1D1D C3    2564** JP      BYTE_
0B1D1E F3 
0B1D1F 1E 
0B1D20 0B 
             2565** ;
             2566** ; GROUP 16 - LD
             2567** ;
0B1D21 D6    2568** GROUP16:		SUB	1			; The number of opcodes in GROUP16
0B1D22 01 
0B1D23 30    2569** JR	NC,GROUP17
0B1D24 74 
0B1D25 CD    2570** CALL	EZ80SF_FULL		; Evaluate the suffix
0B1D26 30 
0B1D27 1E 
0B1D28 0B 
0B1D29 CD    2571** CALL    LDOP			; Check for accumulator loads
0B1D2A 61 
0B1D2B 1F 
0B1D2C 0B 
0B1D2D D2    2572** JP      NC,LDA			; Yes, so jump here
0B1D2E 8D 
0B1D2F 1E 
0B1D30 0B 
0B1D31 CD    2573** CALL    REGHI
0B1D32 2B 
0B1D33 1F 
0B1D34 0B 
0B1D35 08    2574** EX      AF,AF'
0B1D36 CD    2575** CALL    SKIP
0B1D37 B6 
0B1D38 1F 
0B1D39 0B 
0B1D3A FE    2576** CP      '('			; Check for bracket
0B1D3B 28 
0B1D3C 28    2577** JR      Z,LDIN			; Yes, so we're doing an indirect load from memory
0B1D3D 24 
0B1D3E 08    2578** EX      AF,AF'
0B1D3F D2    2579** JP      NC,GROUP05_1		; Load single register direct; go here
0B1D40 F7 
0B1D41 1B 
0B1D42 0B 
0B1D43 0E    2580** LD      C,1
0B1D44 01 
0B1D45 CD    2581** CALL    PAIR1_EX
0B1D46 4B 
0B1D47 1F 
0B1D48 0B 
0B1D49 D8    2582** RET     C
0B1D4A 3E    2583** LD      A,14
0B1D4B 0E 
0B1D4C B8    2584** CP      B
0B1D4D 47    2585** LD      B,A
0B1D4E CC    2586** CALL    Z,PAIR_EX
0B1D4F 46 
0B1D50 1F 
0B1D51 0B 
0B1D52 78    2587** LD      A,B
0B1D53 E6    2588** AND     3FH
0B1D54 3F 
0B1D55 FE    2589** CP      12
0B1D56 0C 
0B1D57 79    2590** LD      A,C
0B1D58 C2    2591** JP      NZ,GROUP12_1		; Load register pair direct; go here
0B1D59 DF 
0B1D5A 1C 
0B1D5B 0B 
0B1D5C 3E    2592** LD      A,0F9H
0B1D5D F9 
0B1D5E C3    2593** JP      BYTE_
0B1D5F F3 
0B1D60 1E 
0B1D61 0B 
             2594** ;
0B1D62 08    2595** LDIN:			EX      AF,AF'
0B1D63 C5    2596** PUSH    BC
0B1D64 D4    2597** CALL    NC,REGLO
0B1D65 24 
0B1D66 1F 
0B1D67 0B 
0B1D68 79    2598** LD      A,C
0B1D69 C1    2599** POP     BC
0B1D6A D2    2600** JP      NC,BIND
0B1D6B C4 
0B1D6C 1E 
0B1D6D 0B 
0B1D6E 0E    2601** LD      C,0AH
0B1D6F 0A 
0B1D70 CD    2602** CALL    PAIR1_EX
0B1D71 4B 
0B1D72 1F 
0B1D73 0B 
0B1D74 CD    2603** CALL    LD16
0B1D75 98 
0B1D76 1E 
0B1D77 0B 
0B1D78 D2    2604** JP      NC,GROUP12_1
0B1D79 DF 
0B1D7A 1C 
0B1D7B 0B 
0B1D7C CD    2605** CALL    NUMBER
0B1D7D 04 
0B1D7E 1F 
0B1D7F 0B 
0B1D80 0E    2606** LD      C,2
0B1D81 02 
0B1D82 CD    2607** CALL    PAIR_EX
0B1D83 46 
0B1D84 1F 
0B1D85 0B 
0B1D86 CD    2608** CALL    LD16
0B1D87 98 
0B1D88 1E 
0B1D89 0B 
0B1D8A D8    2609** RET     C
0B1D8B CD    2610** CALL    BYTE_
0B1D8C F3 
0B1D8D 1E 
0B1D8E 0B 
0B1D8F CB    2611** BIT	7,D			; Check the ADL flag
0B1D90 7A 
0B1D91 C2    2612** JP	NZ,VAL24 		; If it is set, then use 24-bit addresses
0B1D92 82 
0B1D93 1E 
0B1D94 0B 
0B1D95 C3    2613** JP      VAL16			; Otherwise use 16-bit addresses
0B1D96 75 
0B1D97 1E 
0B1D98 0B 
             2614** ;
             2615** ; Group 17 - TST
             2616** ;
0B1D99 D6    2617** GROUP17:		SUB	1			; The number of opcodes in GROUP17
0B1D9A 01 
0B1D9B 30    2618** JR	NC,OPTS
0B1D9C 25 
0B1D9D CD    2619** CALL	ED			; Needs to be prefixed with ED
0B1D9E BE 
0B1D9F 1E 
0B1DA0 0B 
0B1DA1 CD    2620** CALL	REG			; Fetch the register
0B1DA2 18 
0B1DA3 1F 
0B1DA4 0B 
0B1DA5 30    2621** JR	NC,GROUP17_1		; It's just a register
0B1DA6 0E 
             2622** ;
0B1DA7 3E    2623** LD	A,64H			; Opcode for TST n
0B1DA8 64 
0B1DA9 CD    2624** CALL	BYTE_			; Write out the opcode
0B1DAA F3 
0B1DAB 1E 
0B1DAC 0B 
0B1DAD CD    2625** CALL	NUMBER			; Get the number
0B1DAE 04 
0B1DAF 1F 
0B1DB0 0B 
0B1DB1 C3    2626** JP	VAL8			; And write that out
0B1DB2 BD 
0B1DB3 1C 
0B1DB4 0B 
             2627** ;
0B1DB5 78    2628** GROUP17_1:		LD	A,B			; Check the register rangs
0B1DB6 FE    2629** CP	8
0B1DB7 08 
0B1DB8 3F    2630** CCF
0B1DB9 D8    2631** RET	C			; Ret with carry flag set for error if out of range
0B1DBA 07    2632** RLCA				; Get the opcode value
0B1DBB 07    2633** RLCA
0B1DBC 07    2634** RLCA
0B1DBD 81    2635** ADD	A,C			; Add the opcode base in
0B1DBE C3    2636** JP	BYTE_
0B1DBF F3 
0B1DC0 1E 
0B1DC1 0B 
             2637** 
             2638** ;
             2639** ; Assembler directives - OPT, ADL
             2640** ;
0B1DC2 D6    2641** OPTS:			SUB	2
0B1DC3 02 
0B1DC4 30    2642** JR	NC, DEFS
0B1DC5 2B 
0B1DC6 FE    2643** CP	1-2			; Check for ADL opcode
0B1DC7 FF 
0B1DC8 28    2644** JR	Z, ADL_
0B1DC9 13 
             2645** ;
0B1DCA CD    2646** OPT:			CALL    NUMBER			; Fetch the OPT value
0B1DCB 04 
0B1DCC 1F 
0B1DCD 0B 
0B1DCE 21    2647** LD      HL,LISTON		; Address of the LISTON/OPT flag
0B1DCF 40 
0B1DD0 4F 
0B1DD1 0B 
0B1DD2 E6    2648** AND	7			; Only interested in the first three bits
0B1DD3 07 
0B1DD4 4F    2649** LD      C,A			; Store the new OPT value in C
0B1DD5 ED    2650** RLD				; Shift the top nibble of LISTON (OPT) into A
0B1DD6 6F 
0B1DD7 E6    2651** AND	8			; Clear the bottom three bits, preserving the ADL bit
0B1DD8 08 
0B1DD9 B1    2652** OR	C			; OR in the new value
0B1DDA ED    2653** RRD				; And shift the nibble back in
0B1DDB 67 
0B1DDC C9    2654** RET
             2655** ;
0B1DDD CD    2656** ADL_:			CALL	NUMBER			; Fetch the ADL value
0B1DDE 04 
0B1DDF 1F 
0B1DE0 0B 
0B1DE1 E6    2657** AND	1			; Only interested if it is 0 or 1
0B1DE2 01 
0B1DE3 0F    2658** RRCA				; Rotate to bit 7
0B1DE4 4F    2659** LD	C,A			; Store in C
0B1DE5 3A    2660** LD	A,(LISTON)		; Get the LISTON system variable
0B1DE6 40 
0B1DE7 4F 
0B1DE8 0B 
0B1DE9 E6    2661** AND	7Fh			; Clear bit 7
0B1DEA 7F 
0B1DEB B1    2662** OR	C			; OR in the ADL value
0B1DEC 32    2663** LD	(LISTON),A		; Store
0B1DED 40 
0B1DEE 4F 
0B1DEF 0B 
0B1DF0 C9    2664** RET
             2665** ;
             2666** ; DEFB, DEFW, DEFL, DEFM
             2667** ;
0B1DF1 B7    2668** DEFS:			OR	A			; Handle DEFB
0B1DF2 CA    2669** JP	Z, DB_
0B1DF3 04 
0B1DF4 1C 
0B1DF5 0B 
0B1DF6 3D    2670** DEC	A			; Handle DEFW
0B1DF7 CA    2671** JP	Z, ADDR16
0B1DF8 71 
0B1DF9 1E 
0B1DFA 0B 
0B1DFB 3D    2672** DEC	A			; Handle DEFL
0B1DFC CA    2673** JP	Z, ADDR24
0B1DFD 7E 
0B1DFE 1E 
0B1DFF 0B 
             2674** ;
0B1E00 DD    2675** PUSH    IX			; Handle DEFM
0B1E01 E5 
0B1E02 CD    2676** CALL    EXPRS
0B1E03 16 
0B1E04 05 
0B1E05 0B 
0B1E06 DD    2677** POP     IX
0B1E07 E1 
0B1E08 21    2678** LD      HL,ACCS
0B1E09 00 
0B1E0A 4C 
0B1E0B 0B 
0B1E0C AF    2679** @@:			XOR     A
0B1E0D BB    2680** CP      E
0B1E0E C8    2681** RET     Z
0B1E0F 7E    2682** LD      A,(HL)
0B1E10 23    2683** INC     HL
0B1E11 CD    2684** CALL    BYTE_
0B1E12 F3 
0B1E13 1E 
0B1E14 0B 
0B1E15 1D    2685** DEC     E
0B1E16 18    2686** JR      @B
0B1E17 F4 
             2687** 
             2688** ;
             2689** ;SUBROUTINES:
             2690** ;
0B1E18 FD    2691** EZ80SF_PART:		LD	A,(IY)			; Check for a dot
0B1E19 7E 
0B1E1A 00 
0B1E1B FE    2692** CP	'.'
0B1E1C 2E 
0B1E1D 28    2693** JR	Z, @F			; If present, then carry on processing the eZ80 suffix
0B1E1E 02 
0B1E1F B7    2694** OR	A			; Reset the carry flag (no error)
0B1E20 C9    2695** RET				; And return
0B1E21 FD    2696** @@:			INC	IY			; Skip the dot
0B1E22 23 
0B1E23 C5    2697** PUSH	BC			; Push the operand
0B1E24 21    2698** LD	HL,EZ80SFS_2		; Check the shorter fully qualified table (just LIL and SIS)
0B1E25 4C 
0B1E26 22 
0B1E27 0B 
0B1E28 CD    2699** CALL	FIND			; Look up the operand
0B1E29 65 
0B1E2A 1F 
0B1E2B 0B 
0B1E2C 30    2700** JR	NC,EZ80SF_OK
0B1E2D 24 
0B1E2E C1    2701** POP	BC			; Not found at this point, so will return with a C (error)
0B1E2F C9    2702** RET
             2703** ;
0B1E30 FD    2704** EZ80SF_FULL:		LD	A,(IY)			; Check for a dot
0B1E31 7E 
0B1E32 00 
0B1E33 FE    2705** CP	'.'
0B1E34 2E 
0B1E35 28    2706** JR	Z,@F			; If present, then carry on processing the eZ80 suffix
0B1E36 02 
0B1E37 B7    2707** OR	A			; Reset the carry flag (no error)
0B1E38 C9    2708** RET				; And return
0B1E39 FD    2709** @@:			INC	IY 			; Skip the dot
0B1E3A 23 
0B1E3B C5    2710** PUSH	BC			; Push the operand
0B1E3C 21    2711** LD	HL,EZ80SFS_1		; First check the fully qualified table
0B1E3D 44 
0B1E3E 22 
0B1E3F 0B 
0B1E40 CD    2712** CALL	FIND 			; Look up the operand
0B1E41 65 
0B1E42 1F 
0B1E43 0B 
0B1E44 30    2713** JR	NC,EZ80SF_OK		; Yes, we've found it, so go write it out
0B1E45 0C 
0B1E46 CD    2714** CALL	EZ80SF_TABLE		; Get the correct shortcut table in HL based upon the ADL mode
0B1E47 61 
0B1E48 1E 
0B1E49 0B 
0B1E4A CD    2715** CALL	FIND
0B1E4B 65 
0B1E4C 1F 
0B1E4D 0B 
0B1E4E 30    2716** JR	NC,EZ80SF_OK
0B1E4F 02 
0B1E50 C1    2717** POP	BC			; Not found at this point, so will return with a C (error)
0B1E51 C9    2718** RET
             2719** ;
0B1E52 78    2720** EZ80SF_OK:		LD	A,B			; The operand value
0B1E53 D4    2721** CALL	NC,BYTE_ 		; Write it out if found
0B1E54 F3 
0B1E55 1E 
0B1E56 0B 
0B1E57 CB    2722** RES	7,D			; Clear the default ADL mode from the flags
0B1E58 BA 
0B1E59 E6    2723** AND	2			; Check the second half of the suffix (.xxL)
0B1E5A 02 
0B1E5B 0F    2724** RRCA				; Shift into bit 7
0B1E5C 0F    2725** RRCA
0B1E5D B2    2726** OR	D			; Or into bit 7 of D
0B1E5E 57    2727** LD	D,A
0B1E5F C1    2728** POP	BC 			; Restore the operand
0B1E60 C9    2729** RET
             2730** ;
0B1E61 21    2731** EZ80SF_TABLE:		LD	HL,EZ80SFS_ADL0		; Return with the ADL0 lookup table
0B1E62 55 
0B1E63 22 
0B1E64 0B 
0B1E65 CB    2732** BIT 	7,D			; if bit 7 of D is 0
0B1E66 7A 
0B1E67 C8    2733** RET	Z
0B1E68 21    2734** LD	HL,EZ80SFS_ADL1		; Otherwise return with the ADL1 lookup table
0B1E69 60 
0B1E6A 22 
0B1E6B 0B 
0B1E6C C9    2735** RET
             2736** ;
0B1E6D CB    2737** ADDR_:			BIT	7,D			; Check the ADL flag
0B1E6E 7A 
0B1E6F 20    2738** JR	NZ,ADDR24 		; If it is set, then use 24-bit addresses
0B1E70 0D 
             2739** ;
0B1E71 CD    2740** ADDR16:			CALL	NUMBER			; Fetch an address (16-bit) and fall through to VAL16
0B1E72 04 
0B1E73 1F 
0B1E74 0B 
0B1E75 CD    2741** VAL16:			CALL    VAL8			; Write out a 16-bit value (HL)
0B1E76 BD 
0B1E77 1C 
0B1E78 0B 
0B1E79 7C    2742** LD      A,H
0B1E7A C3    2743** JP      BYTE_
0B1E7B F3 
0B1E7C 1E 
0B1E7D 0B 
             2744** ;
0B1E7E CD    2745** ADDR24:			CALL    NUMBER			; Fetch an address (24-bit) and fall through to VAL24
0B1E7F 04 
0B1E80 1F 
0B1E81 0B 
0B1E82 CD    2746** VAL24:			CALL	VAL16			; Lower 16-bits are in HL
0B1E83 75 
0B1E84 1E 
0B1E85 0B 
0B1E86 D9    2747** EXX
0B1E87 7D    2748** LD	A,L			; Upper 16-bits are in HL', just need L' to make up 24-bit value
0B1E88 D9    2749** EXX
0B1E89 C3    2750** JP	BYTE_
0B1E8A F3 
0B1E8B 1E 
0B1E8C 0B 
             2751** ;
0B1E8D FE    2752** LDA:			CP      4
0B1E8E 04 
0B1E8F DC    2753** CALL    C,ED
0B1E90 BE 
0B1E91 1E 
0B1E92 0B 
0B1E93 78    2754** LD      A,B
0B1E94 C3    2755** JP      BYTE_
0B1E95 F3 
0B1E96 1E 
0B1E97 0B 
             2756** ;
0B1E98 78    2757** LD16:			LD      A,B
0B1E99 38    2758** JR      C,LD8
0B1E9A 0F 
0B1E9B 78    2759** LD      A,B
0B1E9C E6    2760** AND     3FH
0B1E9D 3F 
0B1E9E FE    2761** CP      12
0B1E9F 0C 
0B1EA0 79    2762** LD      A,C
0B1EA1 C8    2763** RET     Z
0B1EA2 CD    2764** CALL    ED
0B1EA3 BE 
0B1EA4 1E 
0B1EA5 0B 
0B1EA6 79    2765** LD      A,C
0B1EA7 F6    2766** OR      43H
0B1EA8 43 
0B1EA9 C9    2767** RET
             2768** ;
0B1EAA FE    2769** LD8:			CP      7
0B1EAB 07 
0B1EAC 37    2770** SCF
0B1EAD C0    2771** RET     NZ
0B1EAE 79    2772** LD      A,C
0B1EAF F6    2773** OR      30H
0B1EB0 30 
0B1EB1 C9    2774** RET
             2775** ;
             2776** ; Used in IN and OUT to handle whether the operand is C or a number
             2777** ;
0B1EB2 C5    2778** CORN:			PUSH    BC
0B1EB3 CD    2779** CALL    OPND			; Get the operand
0B1EB4 D2 
0B1EB5 1E 
0B1EB6 0B 
0B1EB7 CB    2780** BIT     5,B
0B1EB8 68 
0B1EB9 C1    2781** POP     BC
0B1EBA 28    2782** JR      Z,NUMBER		; If bit 5 is clear, then it's IN A,(N) or OUT (N),A, so fetch the port number
0B1EBB 48 
0B1EBC 26    2783** LD      H,-1			; At this point it's IN r,(C) or OUT (C),r, so flag by setting H to &FF
0B1EBD FF 
             2784** ;
0B1EBE 3E    2785** ED:			LD      A,0EDH			; Write an ED prefix out
0B1EBF ED 
0B1EC0 18    2786** JR      BYTE_
0B1EC1 31 
             2787** ;
0B1EC2 3E    2788** CB:			LD      A,0CBH
0B1EC3 CB 
0B1EC4 FE    2789** BIND:			CP      76H
0B1EC5 76 
0B1EC6 37    2790** SCF
0B1EC7 C8    2791** RET     Z               	; Reject LD (HL),(HL)
0B1EC8 CD    2792** CALL    BYTE_
0B1EC9 F3 
0B1ECA 1E 
0B1ECB 0B 
0B1ECC CB    2793** BIT	6,D			; Check the index bit in flags
0B1ECD 72 
0B1ECE C8    2794** RET     Z
0B1ECF 7B    2795** LD      A,E			; If there is an index, output the offset
0B1ED0 18    2796** JR      BYTE_
0B1ED1 21 
             2797** ;
             2798** ; Search through the operand table
             2799** ; Returns:
             2800** ; - B: The operand type
             2801** ; - D: Bit 7: 0 = no prefix, 1 = prefix
             2802** ; - E: The IX/IY offset
             2803** ; - F: Carry if not found
             2804** ;
0B1ED2 E5    2805** OPND:			PUSH    HL			; Preserve HL
0B1ED3 21    2806** LD      HL,OPRNDS		; The operands table
0B1ED4 D6 
0B1ED5 21 
0B1ED6 0B 
0B1ED7 CD    2807** CALL    FIND			; Find the operand
0B1ED8 65 
0B1ED9 1F 
0B1EDA 0B 
0B1EDB E1    2808** POP     HL
0B1EDC D8    2809** RET     C			; Return if not found
0B1EDD CB    2810** BIT     7,B			; Check if it is an index register (IX, IY)
0B1EDE 78 
0B1EDF C8    2811** RET     Z			; Return if it isn't
0B1EE0 CB    2812** SET	6,D			; Set flag to indicate we've got an index
0B1EE1 F2 
0B1EE2 CB    2813** BIT     3,B			; Check if an offset is required
0B1EE3 58 
0B1EE4 E5    2814** PUSH    HL
0B1EE5 CC    2815** CALL    Z,OFFSET_EX		; If bit 3 of B is zero, then get the offset
0B1EE6 FA 
0B1EE7 1E 
0B1EE8 0B 
0B1EE9 5D    2816** LD      E,L			; E: The offset
0B1EEA E1    2817** POP     HL
0B1EEB 3E    2818** LD	A,DDH			; IX prefix
0B1EEC DD 
0B1EED CB    2819** BIT     6,B			; If bit 6 is reset then
0B1EEE 70 
0B1EEF 28    2820** JR      Z,BYTE_			; It's an IX instruction, otherwise set
0B1EF0 02 
0B1EF1 3E    2821** LD	A,FDH			; IY prefix
0B1EF2 FD 
             2822** ;
0B1EF3 DD    2823** BYTE_:			LD      (IX),A			; Write a byte out
0B1EF4 77 
0B1EF5 00 
0B1EF6 DD    2824** INC     IX
0B1EF7 23 
0B1EF8 B7    2825** OR      A
0B1EF9 C9    2826** RET
             2827** ;
0B1EFA FD    2828** OFFSET_EX:			LD      A,(IY)
0B1EFB 7E 
0B1EFC 00 
0B1EFD FE    2829** CP      ')'
0B1EFE 29 
0B1EFF 21    2830** LD      HL,0
0B1F00 00 
0B1F01 00 
0B1F02 00 
0B1F03 C8    2831** RET     Z
0B1F04 CD    2832** NUMBER:			CALL    SKIP
0B1F05 B6 
0B1F06 1F 
0B1F07 0B 
0B1F08 C5    2833** PUSH    BC
0B1F09 D5    2834** PUSH    DE
0B1F0A DD    2835** PUSH    IX
0B1F0B E5 
0B1F0C CD    2836** CALL    EXPRI
0B1F0D 0B 
0B1F0E 05 
0B1F0F 0B 
0B1F10 DD    2837** POP     IX
0B1F11 E1 
0B1F12 D9    2838** EXX
0B1F13 D1    2839** POP     DE
0B1F14 C1    2840** POP     BC
0B1F15 7D    2841** LD      A,L
0B1F16 B7    2842** OR      A
0B1F17 C9    2843** RET
             2844** ;
0B1F18 CD    2845** REG:			CALL    OPND
0B1F19 D2 
0B1F1A 1E 
0B1F1B 0B 
0B1F1C D8    2846** RET     C
0B1F1D 78    2847** LD      A,B
0B1F1E E6    2848** AND     3FH
0B1F1F 3F 
0B1F20 FE    2849** CP      8
0B1F21 08 
0B1F22 3F    2850** CCF
0B1F23 C9    2851** RET
             2852** ;
0B1F24 CD    2853** REGLO:			CALL    REG
0B1F25 18 
0B1F26 1F 
0B1F27 0B 
0B1F28 D8    2854** RET     C
0B1F29 18    2855** JR      ORC
0B1F2A 33 
             2856** ;
0B1F2B CD    2857** REGHI:			CALL    REG
0B1F2C 18 
0B1F2D 1F 
0B1F2E 0B 
0B1F2F D8    2858** RET     C
0B1F30 18    2859** JR      SHL3
0B1F31 29 
             2860** ;
0B1F32 CD    2861** COND_:			CALL    OPND
0B1F33 D2 
0B1F34 1E 
0B1F35 0B 
0B1F36 D8    2862** RET     C
0B1F37 78    2863** LD      A,B
0B1F38 E6    2864** AND     1FH
0B1F39 1F 
0B1F3A D6    2865** SUB     16
0B1F3B 10 
0B1F3C 30    2866** JR      NC,SHL3
0B1F3D 1D 
0B1F3E FE    2867** CP      -15
0B1F3F F1 
0B1F40 37    2868** SCF
0B1F41 C0    2869** RET     NZ
0B1F42 3E    2870** LD      A,3
0B1F43 03 
0B1F44 18    2871** JR      SHL3
0B1F45 15 
             2872** ;
0B1F46 CD    2873** PAIR_EX:			CALL    OPND
0B1F47 D2 
0B1F48 1E 
0B1F49 0B 
0B1F4A D8    2874** RET     C
0B1F4B 78    2875** PAIR1_EX:			LD      A,B
0B1F4C E6    2876** AND     0FH
0B1F4D 0F 
0B1F4E D6    2877** SUB     8
0B1F4F 08 
0B1F50 D8    2878** RET     C
0B1F51 18    2879** JR      SHL3
0B1F52 08 
             2880** ;
0B1F53 CD    2881** BIT_:			CALL    NUMBER
0B1F54 04 
0B1F55 1F 
0B1F56 0B 
0B1F57 FE    2882** CP      8
0B1F58 08 
0B1F59 3F    2883** CCF
0B1F5A D8    2884** RET     C
0B1F5B 07    2885** SHL3:			RLCA
0B1F5C 07    2886** RLCA
0B1F5D 07    2887** RLCA
0B1F5E B1    2888** ORC:			OR      C
0B1F5F 4F    2889** LD      C,A
0B1F60 C9    2890** RET
             2891** ;
0B1F61 21    2892** LDOP:			LD      HL,LDOPS
0B1F62 1B 
0B1F63 22 
0B1F64 0B 
             2893** 
             2894** ;
             2895** ; Look up a value in a table
             2896** ; Parameters:
             2897** ; - IY: Address of the assembly language line in the BASIC program area
             2898** ; - HL: Address of the table
             2899** ; Returns:
             2900** ; - B: The operand code
             2901** ; - F: Carry set if not found
             2902** ;
0B1F65 CD    2903** FIND:			CALL    SKIP			; Skip delimiters
0B1F66 B6 
0B1F67 1F 
0B1F68 0B 
             2904** ;
0B1F69 06    2905** EXIT_:			LD      B,0			; Set B to 0
0B1F6A 00 
0B1F6B 37    2906** SCF				; Set the carry flag
0B1F6C C8    2907** RET     Z			; Returns if Z
             2908** ;
0B1F6D FE    2909** CP      DEF_			; Special case for token DEF (used in DEFB, DEFW, DEFL, DEFM)
0B1F6E DD 
0B1F6F 28    2910** JR      Z,FIND0
0B1F70 04 
0B1F71 FE    2911** CP      TOR+1			; Special case for tokens AND and OR
0B1F72 85 
0B1F73 3F    2912** CCF
0B1F74 D8    2913** RET     C
0B1F75 7E    2914** FIND0:			LD      A,(HL)			; Check for the end of the table (0 byte marker)
0B1F76 B7    2915** OR      A
0B1F77 28    2916** JR      Z,EXIT_			; Exit
0B1F78 F0 
0B1F79 FD    2917** XOR     (IY)
0B1F7A AE 
0B1F7B 00 
0B1F7C E6    2918** AND     01011111B
0B1F7D 5F 
0B1F7E 28    2919** JR      Z,FIND2
0B1F7F 09 
0B1F80 CB    2920** FIND1:			BIT     7,(HL)
0B1F81 7E 
0B1F82 23    2921** INC     HL
0B1F83 28    2922** JR      Z,FIND1
0B1F84 FB 
0B1F85 23    2923** INC     HL
0B1F86 04    2924** INC     B
0B1F87 18    2925** JR      FIND0
0B1F88 EC 
             2926** ;
0B1F89 FD    2927** FIND2:			PUSH    IY
0B1F8A E5 
0B1F8B CB    2928** FIND3:			BIT     7,(HL)			; Is this the end of token marker?
0B1F8C 7E 
0B1F8D FD    2929** INC     IY
0B1F8E 23 
0B1F8F 23    2930** INC     HL
0B1F90 20    2931** JR      NZ,FIND5		; Yes
0B1F91 11 
0B1F92 BE    2932** CP      (HL)
0B1F93 CC    2933** CALL    Z,SKIP0
0B1F94 B5 
0B1F95 1F 
0B1F96 0B 
0B1F97 7E    2934** LD      A,(HL)
0B1F98 FD    2935** XOR     (IY)
0B1F99 AE 
0B1F9A 00 
0B1F9B E6    2936** AND     01011111B
0B1F9C 5F 
0B1F9D 28    2937** JR      Z,FIND3
0B1F9E EC 
0B1F9F FD    2938** FIND4:			POP     IY
0B1FA0 E1 
0B1FA1 18    2939** JR      FIND1
0B1FA2 DD 
             2940** ;
0B1FA3 CD    2941** FIND5:			CALL    DELIM			; Is it a delimiter?
0B1FA4 67 
0B1FA5 19 
0B1FA6 0B 
0B1FA7 C4    2942** CALL	NZ,DOT 			; No, so also check whether it is a dot character (for suffixes)
0B1FA8 CA 
0B1FA9 1F 
0B1FAA 0B 
0B1FAB C4    2943** CALL    NZ,SIGN			; No, so also check whether it is a SIGN character ('+' or '-')
0B1FAC C4 
0B1FAD 1F 
0B1FAE 0B 
0B1FAF 20    2944** JR      NZ,FIND4		; If it is not a sign or a delimiter, then loop
0B1FB0 EE 
             2945** ;
0B1FB1 78    2946** FIND6:			LD      A,B			; At this point we have a token
0B1FB2 46    2947** LD      B,(HL)			; Fetch the token type code
0B1FB3 E1    2948** POP     HL			; Restore the stack
0B1FB4 C9    2949** RET
             2950** ;
0B1FB5 23    2951** SKIP0:			INC     HL
0B1FB6 CD    2952** SKIP:			CALL    DELIM			; Is it a delimiter?
0B1FB7 67 
0B1FB8 19 
0B1FB9 0B 
0B1FBA C0    2953** RET     NZ			; No, so return
0B1FBB CD    2954** CALL    TERM			; Is it a terminator?
0B1FBC 73 
0B1FBD 19 
0B1FBE 0B 
0B1FBF C8    2955** RET     Z			; Yes, so return
0B1FC0 FD    2956** INC     IY			; Increment the basic program counter
0B1FC1 23 
0B1FC2 18    2957** JR      SKIP			; And loop
0B1FC3 F2 
             2958** ;
0B1FC4 FE    2959** SIGN:			CP      '+'			; Check whether the character is a sign symbol
0B1FC5 2B 
0B1FC6 C8    2960** RET     Z
0B1FC7 FE    2961** CP      '-'
0B1FC8 2D 
0B1FC9 C9    2962** RET
             2963** ;
0B1FCA FE    2964** DOT:			CP	'.'			; Check if it is a dot character
0B1FCB 2E 
0B1FCC C9    2965** RET
             2966** ; Z80 opcode list
             2967** ;
             2968** ; Group 0: (15 opcodes)
             2969** ; Trivial cases requiring no computation
             2970** ;
             2971** ; BEGIN REFACTOR FROM BINARY
             2972** ; OPCODS:
             2973** ; 			DB	"NO","P"+80H,00h	; # 00h
             2974** ; 			DB	"RLC","A"+80H,07h
             2975** ; 			DB	"EX",0,"AF",0,"AF","'"+80H,08h
             2976** ; 			DB	"RRC","A"+80H,0FH
             2977** ; 			DB	"RL","A"+80H,17H
             2978** ; 			DB	"RR","A"+80H,1FH
             2979** ; 			DB	"DA","A"+80H,27H
             2980** ; 			DB	"CP","L"+80H,2FH
             2981** ; 			DB	"SC","F"+80H,37H
             2982** ; 			DB	"CC","F"+80H,3FH
             2983** ; 			DB	"HAL","T"+80H,76H
             2984** ; 			DB	"EX","X"+80H,D9H
             2985** ; 			DB	"EX",0,"DE",0,"H","L"+80H,EBH
             2986** ; 			DB	"D","I"+80H,F3H
             2987** ; 			DB	"E","I"+80H,FBH
             2988** ; ;
             2989** ; ; Group 1: (53 opcodes)
             2990** ; ; As Group 0, but with an ED prefix
             2991** ; ;
             2992** ; 			DB	"NE","G"+80H,44H	; 0Fh
             2993** ; 			DB	"IM",0,"0"+80H,46H
             2994** ; 			DB	"RET","N"+80H,45H
             2995** ; 			DB	"MLT",0,"B","C"+80H,4CH
             2996** ; 			DB	"RET","I"+80H,4DH
             2997** ; 			DB	"IM",0,"1"+80H,56H
             2998** ; 			DB	"MLT",0,"D","E"+80H,5CH
             2999** ; 			DB	"IM",0,"2"+80H,5EH
             3000** ; 			DB	"RR","D"+80H,67H
             3001** ; 			DB	"MLT",0,"H","L"+80H,6CH
             3002** ; 			DB	"LD",0,"MB",0,"A"+80H,6DH
             3003** ; 			DB	"LD",0,"A",0,"M","B"+80H,6EH
             3004** ; 			DB	"RL","D"+80H,6FH
             3005** ; 			DB	"SL","P"+80H,76H
             3006** ; 			DB	"MLT",0,"S","P"+80H,7CH
             3007** ; 			DB	"STMI","X"+80H,7DH
             3008** ; 			DB	"RSMI","X"+80H,7EH
             3009** ; 			DB	"INI","M"+80H,82H
             3010** ; 			DB	"OTI","M"+80H,83H
             3011** ; 			DB	"INI","2"+80H,84H
             3012** ; 			DB	"IND","M"+80H,8AH
             3013** ; 			DB	"OTD","M"+80H,8BH
             3014** ; 			DB	"IND","2"+80H,8CH
             3015** ; 			DB	"INIM","R"+80H,92H
             3016** ; 			DB	"OTIM","R"+80H,93H
             3017** ; 			DB	"INI2","R"+80H,94H
             3018** ; 			DB	"INDM","R"+80H,9AH
             3019** ; 			DB	"OTDM","R"+80H,9BH
             3020** ; 			DB	"IND2","R"+80H,9CH
             3021** ; 			DB	"LD","I"+80H,A0H
             3022** ; 			DB	"CP","I"+80H,A1H
             3023** ; 			DB	"IN","I"+80H,A2H
             3024** ; 			DB	"OUTI","2"+80H,A4H	; These are swapped round so that FIND will find
             3025** ; 			DB	"OUT","I"+80H,A3H	; OUTI2 before OUTI
             3026** ; 			DB	"LD","D"+80H,A8H
             3027** ; 			DB	"CP","D"+80H,A9H
             3028** ; 			DB	"IN","D"+80H,AAH
             3029** ; 			DB	"OUTD","2"+80H,ACH	; Similarly these are swapped round so that FIND
             3030** ; 			DB	"OUT","D"+80H,ABH	; will find OUTD2 before OUTD
             3031** ; 			DB	"LDI","R"+80H,B0H
             3032** ; 			DB	"CPI","R"+80H,B1H
             3033** ; 			DB	"INI","R"+80H,B2H
             3034** ; 			DB	"OTI","R"+80H,B3H
             3035** ; 			DB	"OTI2","R"+80H,B4H
             3036** ; 			DB	"LDD","R"+80H,B8H
             3037** ; 			DB	"CPD","R"+80H,B9H
             3038** ; 			DB	"IND","R"+80H,BAH
             3039** ; 			DB	"OTD","R"+80H,BBH
             3040** ; 			DB	"OTD2","R"+80H,BCH
             3041** ; 			DB	"INIR","X"+80H,C2H
             3042** ; 			DB	"OTIR","X"+80H,C3H
             3043** ; 			DB	"INDR","X"+80H,CAH
             3044** ; 			DB	"OTDR","X"+80H,CBH
             3045** ; ;
             3046** ; ; Group 2: (3 opcodes)
             3047** ; ;
             3048** ; 			DB	"BI","T"+80H,40H	; 44h
             3049** ; 			DB	"RE","S"+80H,80H
             3050** ; 			DB	"SE","T"+80H,C0H
             3051** ; ;
             3052** ; ; Group 3: (7 opcodes)
             3053** ; ;
             3054** ; 			DB	"RL","C"+80H,00H	; 47h
             3055** ; 			DB	"RR","C"+80H,08H
             3056** ; 			DB	"R","L"+80H,10H
             3057** ; 			DB	"R","R"+80H,18H
             3058** ; 			DB	"SL","A"+80H,20H
             3059** ; 			DB	"SR","A"+80H,28H
             3060** ; 			DB	"SR","L"+80H,38H
             3061** ; ;
             3062** ; ; Group 4: (3 opcodes)
             3063** ; ;
             3064** ; 			DB	"PO","P"+80H,C1H	; 4Eh
             3065** ; 			DB	"PUS","H"+80H,C5H
             3066** ; 			DB	"EX",0,"(S","P"+80H,E3H
             3067** ; ;
             3068** ; ; Group 5: (7 opcodes)
             3069** ; ;
             3070** ; 			DB	"SU","B"+80H,90H	; 51h
             3071** ; 			DB	"AN","D"+80H,A0H
             3072** ; 			DB	"XO","R"+80H,A8H
             3073** ; 			DB	"O","R"+80H,B0H
             3074** ; 			DB	"C","P"+80H,B8H
             3075** ; 			DB	TAND,A0H		; 56h TAND: Tokenised AND
             3076** ; 			DB	TOR,B0H			; 57h TOR: Tokenised OR
             3077** ; ;
             3078** ; ; Group 6 (3 opcodes)
             3079** ; ;
             3080** ; 			DB	"AD","D"+80H,80H	; 58h
             3081** ; 			DB	"AD","C"+80H,88H
             3082** ; 			DB	"SB","C"+80H,98H
             3083** ; ;
             3084** ; ; Group 7: (2 opcodes)
             3085** ; ;
             3086** ; 			DB	"IN","C"+80H,04H	; 5Bh
             3087** ; 			DB	"DE","C"+80H,05H
             3088** ; ;
             3089** ; ; Group 8: (2 opcodes)
             3090** ; ;
             3091** ; 			DB	"IN","0"+80H,00H	; 5Dh
             3092** ; 			DB	"OUT","0"+80H,01H
             3093** ; ;
             3094** ; ; Group 9: (1 opcode)
             3095** ; ;
             3096** ; 			DB	"I","N"+80H,40H		; 5Fh
             3097** ; ;
             3098** ; ; Group 10: (1 opcode)
             3099** ; ;
             3100** ; 			DB	"OU","T"+80H,41H	; 60h
             3101** ; ;
             3102** ; ; Group 11: (2 opcodes)
             3103** ; ;
             3104** ; 			DB	"J","R"+80H,20H		; 61h
             3105** ; 			DB	"DJN","Z"+80H,10H
             3106** ; ;
             3107** ; ; Group 12: (1 opcode)
             3108** ; ;
             3109** ; 			DB	"J","P"+80H,C2H		; 63h
             3110** ; ;
             3111** ; ; Group 13: (1 opcode)
             3112** ; ;
             3113** ; 			DB	"CAL","L"+80H,C4H	; 64h
             3114** ; ;
             3115** ; ; Group 14: (1 opcode)
             3116** ; ;
             3117** ; 			DB	"RS","T"+80H,C7H	; 65h
             3118** ; ;
             3119** ; ; Group 15: (1 opcode)
             3120** ; ;
             3121** ; 			DB	"RE","T"+80H,C0H	; 66h
             3122** ; ;
             3123** ; ; Group 16: (1 opcode)
             3124** ; ;
             3125** ; 			DB	"L","D"+80H,40H		; 67h
             3126** ; ;
             3127** ; ; Group 17: (1 opcode)
             3128** ; ;
             3129** ; 			DB	"TS","T"+80H,04H	; 68h
             3130** 
             3131** ; ;
             3132** ; ; Assembler Directives
             3133** ; ;
             3134** ; 			DB	"OP","T"+80H,00H	; 69h OPT
             3135** ; 			DB	"AD","L"+80H,00H	; 6Ah ADL
             3136** ; ;
             3137** ; 			DB	DEF_ & 7FH,"B"+80H,00H	; 6Bh Tokenised DEF + B
             3138** ; 			DB	DEF_ & 7FH,"W"+80H,00H	; 6Ch Tokenised DEF + W
             3139** ; 			DB	DEF_ & 7FH,"L"+80H,00H	; 6Dh Tokenised DEF + L
             3140** ; 			DB 	DEF_ & 7FH,"M"+80H,00H	; 6Eh Tokenised DEF + M
             3141** ; ;
             3142** ; 			DB	0
             3143** ; ;
             3144** ; ; Operands
             3145** ; ;
             3146** ; OPRNDS:			DB	"B"+80H, 00H
             3147** ; 			DB	"C"+80H, 01H
             3148** ; 			DB	"D"+80H, 02H
             3149** ; 			DB	"E"+80H, 03H
             3150** ; 			DB	"H"+80H, 04H
             3151** ; 			DB	"L"+80H, 05H
             3152** ; 			DB	"(H","L"+80H,06H
             3153** ; 			DB	"A"+80H, 07H
             3154** ; 			DB	"(I","X"+80H,86H
             3155** ; 			DB	"(I","Y"+80H,C6H
             3156** ; ;
             3157** ; 			DB	"B","C"+80H,08H
             3158** ; 			DB	"D","E"+80H,0AH
             3159** ; 			DB	"H","L"+80H,0CH
             3160** ; 			DB	"I","X"+80H,8CH
             3161** ; 			DB	"I","Y"+80H,CCH
             3162** ; 			DB	"A","F"+80H,0EH
             3163** ; 			DB	"S","P"+80H,0EH
             3164** ; ;
             3165** ; 			DB	"N","Z"+80H,10H
             3166** ; 			DB	"Z"+80H,11H
             3167** ; 			DB	"N","C"+80H,12H
             3168** ; 			DB	"P","O"+80H,14H
             3169** ; 			DB	"P","E"+80H,15H
             3170** ; 			DB	"P"+80H,16H
             3171** ; 			DB	"M"+80H,17H
             3172** ; ;
             3173** ; 			DB	"(","C"+80H,20H
             3174** ; ;
             3175** ; 			DB	0
             3176** ; ;
             3177** ; ; Load operations
             3178** ; ;
             3179** ; LDOPS:			DB	"I",0,"A"+80H,47H
             3180** ; 			DB	"R",0,"A"+80H,4FH
             3181** ; 			DB	"A",0,"I"+80H,57H
             3182** ; 			DB	"A",0,"R"+80H,5FH
             3183** ; 			DB	"(BC",0,"A"+80H,02h
             3184** ; 			DB	"(DE",0,"A"+80H,12H
             3185** ; 			DB	"A",0,"(B","C"+80H,0AH
             3186** ; 			DB	"A",0,"(D","E"+80H,1AH
             3187** ; ;
             3188** ; 			DB	0
             3189** ; ;
             3190** ; ; eZ80 addressing mode suffixes
             3191** ; ;
             3192** ; ; Fully qualified suffixes
             3193** ; ;
             3194** ; EZ80SFS_1:		DB	"LI","S"+80H,49H
             3195** ; 			DB	"SI","L"+80H,52H
             3196** ; EZ80SFS_2:		DB	"SI","S"+80H,40H
             3197** ; 			DB	"LI","L"+80H,5BH
             3198** ; ;
             3199** ; 			DB	0
             3200** ; ;
             3201** ; ; Shortcuts when ADL mode is 0
             3202** ; ;
             3203** ; EZ80SFS_ADL0:		DB	"S"+80H,40H		; Equivalent to .SIS
             3204** ; 			DB	"L"+80H,49H		; Equivalent to .LIS
             3205** ; 			DB	"I","S"+80H,40H		; Equivalent to .SIS
             3206** ; 			DB	"I","L"+80H,52H		; Equivalent to .SIL
             3207** ; ;
             3208** ; 			DB	0
             3209** ; ;
             3210** ; ; Shortcuts when ADL mode is 1
             3211** ; ;
             3212** ; EZ80SFS_ADL1:		DB	"S"+80H,52H		; Equivalent to .SIL
             3213** ; 			DB	"L"+80H,5BH		; Equivalent to .LIL
             3214** ; 			DB	"I","S"+80H,49H		; Equivalent to .LIS
             3215** ; 			DB	"I","L"+80H,5BH		; Equivalent to .LIL
             3216** ; ;
             3217** ; 			DB	0
             3218** ; END REFACTOR FROM BINARY
             3219** ; BEGIN INSERT FROM BINARY
             3220** ;
             3221** ; Trivial cases requiring no computation
             3222** OPCODS:
0B1FCD 4E    3223** db 0x4e ; 041DCC 4E      5258 DB	"NO","P"+80H,00h	; # 00h
0B1FCE 4F    3224** db 0x4f ; 041DCD
0B1FCF D0    3225** db 0xd0 ; 041DCE
0B1FD0 00    3226** db 0x00 ; 041DCF
0B1FD1 52    3227** db 0x52 ; 041DD0 52      5259 DB	"RLC","A"+80H,07h
0B1FD2 4C    3228** db 0x4c ; 041DD1
0B1FD3 43    3229** db 0x43 ; 041DD2
0B1FD4 C1    3230** db 0xc1 ; 041DD3
0B1FD5 07    3231** db 0x07 ; 041DD4
0B1FD6 45    3232** db 0x45 ; 041DD5 45      5260 DB	"EX",0,"AF",0,"AF","'"+80H,08h
0B1FD7 58    3233** db 0x58 ; 041DD6
0B1FD8 00    3234** db 0x00 ; 041DD7
0B1FD9 41    3235** db 0x41 ; 041DD8
0B1FDA 46    3236** db 0x46 ; 041DD9
0B1FDB 00    3237** db 0x00 ; 041DDA
0B1FDC 41    3238** db 0x41 ; 041DDB
0B1FDD 46    3239** db 0x46 ; 041DDC
0B1FDE A7    3240** db 0xa7 ; 041DDD
0B1FDF 08    3241** db 0x08 ; 041DDE
0B1FE0 52    3242** db 0x52 ; 041DDF 52      5261 DB	"RRC","A"+80H,0FH
0B1FE1 52    3243** db 0x52 ; 041DE0
0B1FE2 43    3244** db 0x43 ; 041DE1
0B1FE3 C1    3245** db 0xc1 ; 041DE2
0B1FE4 0F    3246** db 0x0f ; 041DE3
0B1FE5 52    3247** db 0x52 ; 041DE4 52      5262 DB	"RL","A"+80H,17H
0B1FE6 4C    3248** db 0x4c ; 041DE5
0B1FE7 C1    3249** db 0xc1 ; 041DE6
0B1FE8 17    3250** db 0x17 ; 041DE7
0B1FE9 52    3251** db 0x52 ; 041DE8 52      5263 DB	"RR","A"+80H,1FH
0B1FEA 52    3252** db 0x52 ; 041DE9
0B1FEB C1    3253** db 0xc1 ; 041DEA
0B1FEC 1F    3254** db 0x1f ; 041DEB
0B1FED 44    3255** db 0x44 ; 041DEC 44      5264 DB	"DA","A"+80H,27H
0B1FEE 41    3256** db 0x41 ; 041DED
0B1FEF C1    3257** db 0xc1 ; 041DEE
0B1FF0 27    3258** db 0x27 ; 041DEF
0B1FF1 43    3259** db 0x43 ; 041DF0 43      5265 DB	"CP","L"+80H,2FH
0B1FF2 50    3260** db 0x50 ; 041DF1
0B1FF3 CC    3261** db 0xcc ; 041DF2
0B1FF4 2F    3262** db 0x2f ; 041DF3
0B1FF5 53    3263** db 0x53 ; 041DF4 53      5266 DB	"SC","F"+80H,37H
0B1FF6 43    3264** db 0x43 ; 041DF5
0B1FF7 C6    3265** db 0xc6 ; 041DF6
0B1FF8 37    3266** db 0x37 ; 041DF7
0B1FF9 43    3267** db 0x43 ; 041DF8 43      5267 DB	"CC","F"+80H,3FH
0B1FFA 43    3268** db 0x43 ; 041DF9
0B1FFB C6    3269** db 0xc6 ; 041DFA
0B1FFC 3F    3270** db 0x3f ; 041DFB
0B1FFD 48    3271** db 0x48 ; 041DFC 48      5268 DB	"HAL","T"+80H,76H
0B1FFE 41    3272** db 0x41 ; 041DFD
0B1FFF 4C    3273** db 0x4c ; 041DFE
0B2000 D4    3274** db 0xd4 ; 041DFF
0B2001 76    3275** db 0x76 ; 041E00
0B2002 45    3276** db 0x45 ; 041E01 45      5269 DB	"EX","X"+80H,D9H
0B2003 58    3277** db 0x58 ; 041E02
0B2004 D8    3278** db 0xd8 ; 041E03
0B2005 D9    3279** db 0xd9 ; 041E04
0B2006 45    3280** db 0x45 ; 041E05 45      5270 DB	"EX",0,"DE",0,"H","L"+80H,EBH
0B2007 58    3281** db 0x58 ; 041E06
0B2008 00    3282** db 0x00 ; 041E07
0B2009 44    3283** db 0x44 ; 041E08
0B200A 45    3284** db 0x45 ; 041E09
0B200B 00    3285** db 0x00 ; 041E0A
0B200C 48    3286** db 0x48 ; 041E0B
0B200D CC    3287** db 0xcc ; 041E0C
0B200E EB    3288** db 0xeb ; 041E0D
0B200F 44    3289** db 0x44 ; 041E0E 44      5271 DB	"D","I"+80H,F3H
0B2010 C9    3290** db 0xc9 ; 041E0F
0B2011 F3    3291** db 0xf3 ; 041E10
0B2012 45    3292** db 0x45 ; 041E11 45      5272 DB	"E","I"+80H,FBH
0B2013 C9    3293** db 0xc9 ; 041E12
0B2014 FB    3294** db 0xfb ; 041E13
             3295** ;
             3296** ; Group 1: (53 opcodes)
             3297** ; As Group 0, but with an ED prefix
             3298** ;
0B2015 4E    3299** db 0x4e ; 041E14 4E      5277 DB	"NE","G"+80H,44H	; 0Fh
0B2016 45    3300** db 0x45 ; 041E15
0B2017 C7    3301** db 0xc7 ; 041E16
0B2018 44    3302** db 0x44 ; 041E17
0B2019 49    3303** db 0x49 ; 041E18 49      5278 DB	"IM",0,"0"+80H,46H
0B201A 4D    3304** db 0x4d ; 041E19
0B201B 00    3305** db 0x00 ; 041E1A
0B201C B0    3306** db 0xb0 ; 041E1B
0B201D 46    3307** db 0x46 ; 041E1C
0B201E 52    3308** db 0x52 ; 041E1D 52      5279 DB	"RET","N"+80H,45H
0B201F 45    3309** db 0x45 ; 041E1E
0B2020 54    3310** db 0x54 ; 041E1F
0B2021 CE    3311** db 0xce ; 041E20
0B2022 45    3312** db 0x45 ; 041E21
0B2023 4D    3313** db 0x4d ; 041E22 4D      5280 DB	"MLT",0,"B","C"+80H,4CH
0B2024 4C    3314** db 0x4c ; 041E23
0B2025 54    3315** db 0x54 ; 041E24
0B2026 00    3316** db 0x00 ; 041E25
0B2027 42    3317** db 0x42 ; 041E26
0B2028 C3    3318** db 0xc3 ; 041E27
0B2029 4C    3319** db 0x4c ; 041E28
0B202A 52    3320** db 0x52 ; 041E29 52      5281 DB	"RET","I"+80H,4DH
0B202B 45    3321** db 0x45 ; 041E2A
0B202C 54    3322** db 0x54 ; 041E2B
0B202D C9    3323** db 0xc9 ; 041E2C
0B202E 4D    3324** db 0x4d ; 041E2D
0B202F 49    3325** db 0x49 ; 041E2E 49      5282 DB	"IM",0,"1"+80H,56H
0B2030 4D    3326** db 0x4d ; 041E2F
0B2031 00    3327** db 0x00 ; 041E30
0B2032 B1    3328** db 0xb1 ; 041E31
0B2033 56    3329** db 0x56 ; 041E32
0B2034 4D    3330** db 0x4d ; 041E33 4D      5283 DB	"MLT",0,"D","E"+80H,5CH
0B2035 4C    3331** db 0x4c ; 041E34
0B2036 54    3332** db 0x54 ; 041E35
0B2037 00    3333** db 0x00 ; 041E36
0B2038 44    3334** db 0x44 ; 041E37
0B2039 C5    3335** db 0xc5 ; 041E38
0B203A 5C    3336** db 0x5c ; 041E39
0B203B 49    3337** db 0x49 ; 041E3A 49      5284 DB	"IM",0,"2"+80H,5EH
0B203C 4D    3338** db 0x4d ; 041E3B
0B203D 00    3339** db 0x00 ; 041E3C
0B203E B2    3340** db 0xb2 ; 041E3D
0B203F 5E    3341** db 0x5e ; 041E3E
0B2040 52    3342** db 0x52 ; 041E3F 52      5285 DB	"RR","D"+80H,67H
0B2041 52    3343** db 0x52 ; 041E40
0B2042 C4    3344** db 0xc4 ; 041E41
0B2043 67    3345** db 0x67 ; 041E42
0B2044 4D    3346** db 0x4d ; 041E43 4D      5286 DB	"MLT",0,"H","L"+80H,6CH
0B2045 4C    3347** db 0x4c ; 041E44
0B2046 54    3348** db 0x54 ; 041E45
0B2047 00    3349** db 0x00 ; 041E46
0B2048 48    3350** db 0x48 ; 041E47
0B2049 CC    3351** db 0xcc ; 041E48
0B204A 6C    3352** db 0x6c ; 041E49
0B204B 4C    3353** db 0x4c ; 041E4A 4C      5287 DB	"LD",0,"MB",0,"A"+80H,6DH
0B204C 44    3354** db 0x44 ; 041E4B
0B204D 00    3355** db 0x00 ; 041E4C
0B204E 4D    3356** db 0x4d ; 041E4D
0B204F 42    3357** db 0x42 ; 041E4E
0B2050 00    3358** db 0x00 ; 041E4F
0B2051 C1    3359** db 0xc1 ; 041E50
0B2052 6D    3360** db 0x6d ; 041E51
0B2053 4C    3361** db 0x4c ; 041E52 4C      5288 DB	"LD",0,"A",0,"M","B"+80H,6EH
0B2054 44    3362** db 0x44 ; 041E53
0B2055 00    3363** db 0x00 ; 041E54
0B2056 41    3364** db 0x41 ; 041E55
0B2057 00    3365** db 0x00 ; 041E56
0B2058 4D    3366** db 0x4d ; 041E57
0B2059 C2    3367** db 0xc2 ; 041E58
0B205A 6E    3368** db 0x6e ; 041E59
0B205B 52    3369** db 0x52 ; 041E5A 52      5289 DB	"RL","D"+80H,6FH
0B205C 4C    3370** db 0x4c ; 041E5B
0B205D C4    3371** db 0xc4 ; 041E5C
0B205E 6F    3372** db 0x6f ; 041E5D
0B205F 53    3373** db 0x53 ; 041E5E 53      5290 DB	"SL","P"+80H,76H
0B2060 4C    3374** db 0x4c ; 041E5F
0B2061 D0    3375** db 0xd0 ; 041E60
0B2062 76    3376** db 0x76 ; 041E61
0B2063 4D    3377** db 0x4d ; 041E62 4D      5291 DB	"MLT",0,"S","P"+80H,7CH
0B2064 4C    3378** db 0x4c ; 041E63
0B2065 54    3379** db 0x54 ; 041E64
0B2066 00    3380** db 0x00 ; 041E65
0B2067 53    3381** db 0x53 ; 041E66
0B2068 D0    3382** db 0xd0 ; 041E67
0B2069 7C    3383** db 0x7c ; 041E68
0B206A 53    3384** db 0x53 ; 041E69 53      5292 DB	"STMI","X"+80H,7DH
0B206B 54    3385** db 0x54 ; 041E6A
0B206C 4D    3386** db 0x4d ; 041E6B
0B206D 49    3387** db 0x49 ; 041E6C
0B206E D8    3388** db 0xd8 ; 041E6D
0B206F 7D    3389** db 0x7d ; 041E6E
0B2070 52    3390** db 0x52 ; 041E6F 52      5293 DB	"RSMI","X"+80H,7EH
0B2071 53    3391** db 0x53 ; 041E70
0B2072 4D    3392** db 0x4d ; 041E71
0B2073 49    3393** db 0x49 ; 041E72
0B2074 D8    3394** db 0xd8 ; 041E73
0B2075 7E    3395** db 0x7e ; 041E74
0B2076 49    3396** db 0x49 ; 041E75 49      5294 DB	"INI","M"+80H,82H
0B2077 4E    3397** db 0x4e ; 041E76
0B2078 49    3398** db 0x49 ; 041E77
0B2079 CD    3399** db 0xcd ; 041E78
0B207A 82    3400** db 0x82 ; 041E79
0B207B 4F    3401** db 0x4f ; 041E7A 4F      5295 DB	"OTI","M"+80H,83H
0B207C 54    3402** db 0x54 ; 041E7B
0B207D 49    3403** db 0x49 ; 041E7C
0B207E CD    3404** db 0xcd ; 041E7D
0B207F 83    3405** db 0x83 ; 041E7E
0B2080 49    3406** db 0x49 ; 041E7F 49      5296 DB	"INI","2"+80H,84H
0B2081 4E    3407** db 0x4e ; 041E80
0B2082 49    3408** db 0x49 ; 041E81
0B2083 B2    3409** db 0xb2 ; 041E82
0B2084 84    3410** db 0x84 ; 041E83
0B2085 49    3411** db 0x49 ; 041E84 49      5297 DB	"IND","M"+80H,8AH
0B2086 4E    3412** db 0x4e ; 041E85
0B2087 44    3413** db 0x44 ; 041E86
0B2088 CD    3414** db 0xcd ; 041E87
0B2089 8A    3415** db 0x8a ; 041E88
0B208A 4F    3416** db 0x4f ; 041E89 4F      5298 DB	"OTD","M"+80H,8BH
0B208B 54    3417** db 0x54 ; 041E8A
0B208C 44    3418** db 0x44 ; 041E8B
0B208D CD    3419** db 0xcd ; 041E8C
0B208E 8B    3420** db 0x8b ; 041E8D
0B208F 49    3421** db 0x49 ; 041E8E 49      5299 DB	"IND","2"+80H,8CH
0B2090 4E    3422** db 0x4e ; 041E8F
0B2091 44    3423** db 0x44 ; 041E90
0B2092 B2    3424** db 0xb2 ; 041E91
0B2093 8C    3425** db 0x8c ; 041E92
0B2094 49    3426** db 0x49 ; 041E93 49      5300 DB	"INIM","R"+80H,92H
0B2095 4E    3427** db 0x4e ; 041E94
0B2096 49    3428** db 0x49 ; 041E95
0B2097 4D    3429** db 0x4d ; 041E96
0B2098 D2    3430** db 0xd2 ; 041E97
0B2099 92    3431** db 0x92 ; 041E98
0B209A 4F    3432** db 0x4f ; 041E99 4F      5301 DB	"OTIM","R"+80H,93H
0B209B 54    3433** db 0x54 ; 041E9A
0B209C 49    3434** db 0x49 ; 041E9B
0B209D 4D    3435** db 0x4d ; 041E9C
0B209E D2    3436** db 0xd2 ; 041E9D
0B209F 93    3437** db 0x93 ; 041E9E
0B20A0 49    3438** db 0x49 ; 041E9F 49      5302 DB	"INI2","R"+80H,94H
0B20A1 4E    3439** db 0x4e ; 041EA0
0B20A2 49    3440** db 0x49 ; 041EA1
0B20A3 32    3441** db 0x32 ; 041EA2
0B20A4 D2    3442** db 0xd2 ; 041EA3
0B20A5 94    3443** db 0x94 ; 041EA4
0B20A6 49    3444** db 0x49 ; 041EA5 49      5303 DB	"INDM","R"+80H,9AH
0B20A7 4E    3445** db 0x4e ; 041EA6
0B20A8 44    3446** db 0x44 ; 041EA7
0B20A9 4D    3447** db 0x4d ; 041EA8
0B20AA D2    3448** db 0xd2 ; 041EA9
0B20AB 9A    3449** db 0x9a ; 041EAA
0B20AC 4F    3450** db 0x4f ; 041EAB 4F      5304 DB	"OTDM","R"+80H,9BH
0B20AD 54    3451** db 0x54 ; 041EAC
0B20AE 44    3452** db 0x44 ; 041EAD
0B20AF 4D    3453** db 0x4d ; 041EAE
0B20B0 D2    3454** db 0xd2 ; 041EAF
0B20B1 9B    3455** db 0x9b ; 041EB0
0B20B2 49    3456** db 0x49 ; 041EB1 49      5305 DB	"IND2","R"+80H,9CH
0B20B3 4E    3457** db 0x4e ; 041EB2
0B20B4 44    3458** db 0x44 ; 041EB3
0B20B5 32    3459** db 0x32 ; 041EB4
0B20B6 D2    3460** db 0xd2 ; 041EB5
0B20B7 9C    3461** db 0x9c ; 041EB6
0B20B8 4C    3462** db 0x4c ; 041EB7 4C      5306 DB	"LD","I"+80H,A0H
0B20B9 44    3463** db 0x44 ; 041EB8
0B20BA C9    3464** db 0xc9 ; 041EB9
0B20BB A0    3465** db 0xa0 ; 041EBA
0B20BC 43    3466** db 0x43 ; 041EBB 43      5307 DB	"CP","I"+80H,A1H
0B20BD 50    3467** db 0x50 ; 041EBC
0B20BE C9    3468** db 0xc9 ; 041EBD
0B20BF A1    3469** db 0xa1 ; 041EBE
0B20C0 49    3470** db 0x49 ; 041EBF 49      5308 DB	"IN","I"+80H,A2H
0B20C1 4E    3471** db 0x4e ; 041EC0
0B20C2 C9    3472** db 0xc9 ; 041EC1
0B20C3 A2    3473** db 0xa2 ; 041EC2
0B20C4 4F    3474** db 0x4f ; 041EC3 4F      5309 DB	"OUTI","2"+80H,A4H	; These are swapped round so that FIND will find
0B20C5 55    3475** db 0x55 ; 041EC4
0B20C6 54    3476** db 0x54 ; 041EC5
0B20C7 49    3477** db 0x49 ; 041EC6
0B20C8 B2    3478** db 0xb2 ; 041EC7
0B20C9 A4    3479** db 0xa4 ; 041EC8
0B20CA 4F    3480** db 0x4f ; 041EC9 4F      5310 DB	"OUT","I"+80H,A3H	; OUTI2 before OUTI
0B20CB 55    3481** db 0x55 ; 041ECA
0B20CC 54    3482** db 0x54 ; 041ECB
0B20CD C9    3483** db 0xc9 ; 041ECC
0B20CE A3    3484** db 0xa3 ; 041ECD
0B20CF 4C    3485** db 0x4c ; 041ECE 4C      5311 DB	"LD","D"+80H,A8H
0B20D0 44    3486** db 0x44 ; 041ECF
0B20D1 C4    3487** db 0xc4 ; 041ED0
0B20D2 A8    3488** db 0xa8 ; 041ED1
0B20D3 43    3489** db 0x43 ; 041ED2 43      5312 DB	"CP","D"+80H,A9H
0B20D4 50    3490** db 0x50 ; 041ED3
0B20D5 C4    3491** db 0xc4 ; 041ED4
0B20D6 A9    3492** db 0xa9 ; 041ED5
0B20D7 49    3493** db 0x49 ; 041ED6 49      5313 DB	"IN","D"+80H,AAH
0B20D8 4E    3494** db 0x4e ; 041ED7
0B20D9 C4    3495** db 0xc4 ; 041ED8
0B20DA AA    3496** db 0xaa ; 041ED9
0B20DB 4F    3497** db 0x4f ; 041EDA 4F      5314 DB	"OUTD","2"+80H,ACH	; Similarly these are swapped round so that FIND
0B20DC 55    3498** db 0x55 ; 041EDB
0B20DD 54    3499** db 0x54 ; 041EDC
0B20DE 44    3500** db 0x44 ; 041EDD
0B20DF B2    3501** db 0xb2 ; 041EDE
0B20E0 AC    3502** db 0xac ; 041EDF
0B20E1 4F    3503** db 0x4f ; 041EE0 4F      5315 DB	"OUT","D"+80H,ABH	; will find OUTD2 before OUTD
0B20E2 55    3504** db 0x55 ; 041EE1
0B20E3 54    3505** db 0x54 ; 041EE2
0B20E4 C4    3506** db 0xc4 ; 041EE3
0B20E5 AB    3507** db 0xab ; 041EE4
0B20E6 4C    3508** db 0x4c ; 041EE5 4C      5316 DB	"LDI","R"+80H,B0H
0B20E7 44    3509** db 0x44 ; 041EE6
0B20E8 49    3510** db 0x49 ; 041EE7
0B20E9 D2    3511** db 0xd2 ; 041EE8
0B20EA B0    3512** db 0xb0 ; 041EE9
0B20EB 43    3513** db 0x43 ; 041EEA 43      5317 DB	"CPI","R"+80H,B1H
0B20EC 50    3514** db 0x50 ; 041EEB
0B20ED 49    3515** db 0x49 ; 041EEC
0B20EE D2    3516** db 0xd2 ; 041EED
0B20EF B1    3517** db 0xb1 ; 041EEE
0B20F0 49    3518** db 0x49 ; 041EEF 49      5318 DB	"INI","R"+80H,B2H
0B20F1 4E    3519** db 0x4e ; 041EF0
0B20F2 49    3520** db 0x49 ; 041EF1
0B20F3 D2    3521** db 0xd2 ; 041EF2
0B20F4 B2    3522** db 0xb2 ; 041EF3
0B20F5 4F    3523** db 0x4f ; 041EF4 4F      5319 DB	"OTI","R"+80H,B3H
0B20F6 54    3524** db 0x54 ; 041EF5
0B20F7 49    3525** db 0x49 ; 041EF6
0B20F8 D2    3526** db 0xd2 ; 041EF7
0B20F9 B3    3527** db 0xb3 ; 041EF8
0B20FA 4F    3528** db 0x4f ; 041EF9 4F      5320 DB	"OTI2","R"+80H,B4H
0B20FB 54    3529** db 0x54 ; 041EFA
0B20FC 49    3530** db 0x49 ; 041EFB
0B20FD 32    3531** db 0x32 ; 041EFC
0B20FE D2    3532** db 0xd2 ; 041EFD
0B20FF B4    3533** db 0xb4 ; 041EFE
0B2100 4C    3534** db 0x4c ; 041EFF 4C      5321 DB	"LDD","R"+80H,B8H
0B2101 44    3535** db 0x44 ; 041F00
0B2102 44    3536** db 0x44 ; 041F01
0B2103 D2    3537** db 0xd2 ; 041F02
0B2104 B8    3538** db 0xb8 ; 041F03
0B2105 43    3539** db 0x43 ; 041F04 43      5322 DB	"CPD","R"+80H,B9H
0B2106 50    3540** db 0x50 ; 041F05
0B2107 44    3541** db 0x44 ; 041F06
0B2108 D2    3542** db 0xd2 ; 041F07
0B2109 B9    3543** db 0xb9 ; 041F08
0B210A 49    3544** db 0x49 ; 041F09 49      5323 DB	"IND","R"+80H,BAH
0B210B 4E    3545** db 0x4e ; 041F0A
0B210C 44    3546** db 0x44 ; 041F0B
0B210D D2    3547** db 0xd2 ; 041F0C
0B210E BA    3548** db 0xba ; 041F0D
0B210F 4F    3549** db 0x4f ; 041F0E 4F      5324 DB	"OTD","R"+80H,BBH
0B2110 54    3550** db 0x54 ; 041F0F
0B2111 44    3551** db 0x44 ; 041F10
0B2112 D2    3552** db 0xd2 ; 041F11
0B2113 BB    3553** db 0xbb ; 041F12
0B2114 4F    3554** db 0x4f ; 041F13 4F      5325 DB	"OTD2","R"+80H,BCH
0B2115 54    3555** db 0x54 ; 041F14
0B2116 44    3556** db 0x44 ; 041F15
0B2117 32    3557** db 0x32 ; 041F16
0B2118 D2    3558** db 0xd2 ; 041F17
0B2119 BC    3559** db 0xbc ; 041F18
0B211A 49    3560** db 0x49 ; 041F19 49      5326 DB	"INIR","X"+80H,C2H
0B211B 4E    3561** db 0x4e ; 041F1A
0B211C 49    3562** db 0x49 ; 041F1B
0B211D 52    3563** db 0x52 ; 041F1C
0B211E D8    3564** db 0xd8 ; 041F1D
0B211F C2    3565** db 0xc2 ; 041F1E
0B2120 4F    3566** db 0x4f ; 041F1F 4F      5327 DB	"OTIR","X"+80H,C3H
0B2121 54    3567** db 0x54 ; 041F20
0B2122 49    3568** db 0x49 ; 041F21
0B2123 52    3569** db 0x52 ; 041F22
0B2124 D8    3570** db 0xd8 ; 041F23
0B2125 C3    3571** db 0xc3 ; 041F24
0B2126 49    3572** db 0x49 ; 041F25 49      5328 DB	"INDR","X"+80H,CAH
0B2127 4E    3573** db 0x4e ; 041F26
0B2128 44    3574** db 0x44 ; 041F27
0B2129 52    3575** db 0x52 ; 041F28
0B212A D8    3576** db 0xd8 ; 041F29
0B212B CA    3577** db 0xca ; 041F2A
0B212C 4F    3578** db 0x4f ; 041F2B 4F      5329 DB	"OTDR","X"+80H,CBH
0B212D 54    3579** db 0x54 ; 041F2C
0B212E 44    3580** db 0x44 ; 041F2D
0B212F 52    3581** db 0x52 ; 041F2E
0B2130 D8    3582** db 0xd8 ; 041F2F
0B2131 CB    3583** db 0xcb ; 041F30
             3584** ;
             3585** ; Group 2: (3 opcodes)
             3586** ;
0B2132 42    3587** db 0x42 ; 041F31 42      5333 DB	"BI","T"+80H,40H	; 44h
0B2133 49    3588** db 0x49 ; 041F32
0B2134 D4    3589** db 0xd4 ; 041F33
0B2135 40    3590** db 0x40 ; 041F34
0B2136 52    3591** db 0x52 ; 041F35 52      5333 DB	"RE","S"+80H,80H
0B2137 45    3592** db 0x45 ; 041F36
0B2138 D3    3593** db 0xd3 ; 041F37
0B2139 80    3594** db 0x80 ; 041F38
0B213A 53    3595** db 0x53 ; 041F39 53      5334 DB	"SE","T"+80H,C0H
0B213B 45    3596** db 0x45 ; 041F3A
0B213C D4    3597** db 0xd4 ; 041F3B
0B213D C0    3598** db 0xc0 ; 041F3C
             3599** ;
             3600** ; Group 3: (7 opcodes)
             3601** ;
0B213E 52    3602** db 0x52 ; 041F3D 52      5338 DB	"RL","C"+80H,00H	; 47h
0B213F 4C    3603** db 0x4c ; 041F3E
0B2140 C3    3604** db 0xc3 ; 041F3F
0B2141 00    3605** db 0x00 ; 041F40
0B2142 52    3606** db 0x52 ; 041F41 52      5339 DB	"RR","C"+80H,08H
0B2143 52    3607** db 0x52 ; 041F42
0B2144 C3    3608** db 0xc3 ; 041F43
0B2145 08    3609** db 0x08 ; 041F44
0B2146 52    3610** db 0x52 ; 041F45 52      5340 DB	"R","L"+80H,10H
0B2147 CC    3611** db 0xcc ; 041F46
0B2148 10    3612** db 0x10 ; 041F47
0B2149 52    3613** db 0x52 ; 041F48 52      5341 DB	"R","R"+80H,18H
0B214A D2    3614** db 0xd2 ; 041F49
0B214B 18    3615** db 0x18 ; 041F4A
0B214C 53    3616** db 0x53 ; 041F4B 53      5342 DB	"SL","A"+80H,20H
0B214D 4C    3617** db 0x4c ; 041F4C
0B214E C1    3618** db 0xc1 ; 041F4D
0B214F 20    3619** db 0x20 ; 041F4E
0B2150 53    3620** db 0x53 ; 041F4F 53      5343 DB	"SR","A"+80H,28H
0B2151 52    3621** db 0x52 ; 041F50
0B2152 C1    3622** db 0xc1 ; 041F51
0B2153 28    3623** db 0x28 ; 041F52
0B2154 53    3624** db 0x53 ; 041F53 53      5344 DB	"SR","L"+80H,38H
0B2155 52    3625** db 0x52 ; 041F54
0B2156 CC    3626** db 0xcc ; 041F55
0B2157 38    3627** db 0x38 ; 041F56
             3628** ;
             3629** ; Group 4: (3 opcodes)
             3630** ;
0B2158 50    3631** db 0x50 ; 041F57 50      5348 DB	"PO","P"+80H,C1H	; 4Eh
0B2159 4F    3632** db 0x4f ; 041F58
0B215A D0    3633** db 0xd0 ; 041F59
0B215B C1    3634** db 0xc1 ; 041F5A
0B215C 50    3635** db 0x50 ; 041F5B 50      5349 DB	"PUS","H"+80H,C5H
0B215D 55    3636** db 0x55 ; 041F5C
0B215E 53    3637** db 0x53 ; 041F5D
0B215F C8    3638** db 0xc8 ; 041F5E
0B2160 C5    3639** db 0xc5 ; 041F5F
0B2161 45    3640** db 0x45 ; 041F60 45      5350 DB	"EX",0,"(S","P"+80H,E3H
0B2162 58    3641** db 0x58 ; 041F61
0B2163 00    3642** db 0x00 ; 041F62
0B2164 28    3643** db 0x28 ; 041F63
0B2165 53    3644** db 0x53 ; 041F64
0B2166 D0    3645** db 0xd0 ; 041F65
0B2167 E3    3646** db 0xe3 ; 041F66
             3647** ;
             3648** ; Group 5: (7 opcodes)
             3649** ;
0B2168 53    3650** db 0x53 ; 041F67 53      5354 DB	"SU","B"+80H,90H	; 51h
0B2169 55    3651** db 0x55 ; 041F68
0B216A C2    3652** db 0xc2 ; 041F69
0B216B 90    3653** db 0x90 ; 041F6A
0B216C 41    3654** db 0x41 ; 041F6B 41      5355 DB	"AN","D"+80H,A0H
0B216D 4E    3655** db 0x4e ; 041F6C
0B216E C4    3656** db 0xc4 ; 041F6D
0B216F A0    3657** db 0xa0 ; 041F6E
0B2170 58    3658** db 0x58 ; 041F6F 58      5356 DB	"XO","R"+80H,A8H
0B2171 4F    3659** db 0x4f ; 041F70
0B2172 D2    3660** db 0xd2 ; 041F71
0B2173 A8    3661** db 0xa8 ; 041F72
0B2174 4F    3662** db 0x4f ; 041F73 4F      5357 DB	"O","R"+80H,B0H
0B2175 D2    3663** db 0xd2 ; 041F74
0B2176 B0    3664** db 0xb0 ; 041F75
0B2177 43    3665** db 0x43 ; 041F76 43      5358 DB	"C","P"+80H,B8H
0B2178 D0    3666** db 0xd0 ; 041F77
0B2179 B8    3667** db 0xb8 ; 041F78
0B217A 80    3668** db 0x80 ; 041F79 80      5359 DB	TAND,A0H		; 56h TAND: Tokenised AND
0B217B A0    3669** db 0xa0 ; 041F7A
0B217C 84    3670** db 0x84 ; 041F7B 84      5360 DB	TOR,B0H			; 57h TOR: Tokenised OR
0B217D B0    3671** db 0xb0 ; 041F7C
             3672** ;
             3673** ; Group 6 (3 opcodes)
             3674** ;
0B217E 41    3675** db 0x41 ; 041F7D 41      5364 DB	"AD","D"+80H,80H	; 58h
0B217F 44    3676** db 0x44 ; 041F7E
0B2180 C4    3677** db 0xc4 ; 041F7F
0B2181 80    3678** db 0x80 ; 041F80
0B2182 41    3679** db 0x41 ; 041F81 41      5365 DB	"AD","C"+80H,88H
0B2183 44    3680** db 0x44 ; 041F82
0B2184 C3    3681** db 0xc3 ; 041F83
0B2185 88    3682** db 0x88 ; 041F84
0B2186 53    3683** db 0x53 ; 041F85 53      5366 DB	"SB","C"+80H,98H
0B2187 42    3684** db 0x42 ; 041F86
0B2188 C3    3685** db 0xc3 ; 041F87
0B2189 98    3686** db 0x98 ; 041F88
             3687** ;
             3688** ; Group 7: (2 opcodes)
             3689** ;
0B218A 49    3690** db 0x49 ; 041F89 49      5370 DB	"IN","C"+80H,04H	; 5Bh
0B218B 4E    3691** db 0x4e ; 041F8A
0B218C C3    3692** db 0xc3 ; 041F8B
0B218D 04    3693** db 0x04 ; 041F8C
0B218E 44    3694** db 0x44 ; 041F8D 44      5371 DB	"DE","C"+80H,05H
0B218F 45    3695** db 0x45 ; 041F8E
0B2190 C3    3696** db 0xc3 ; 041F8F
0B2191 05    3697** db 0x05 ; 041F90
             3698** ;
             3699** ; Group 8: (2 opcodes)
             3700** ;
0B2192 49    3701** db 0x49 ; 041F91 49      5375 DB	"IN","0"+80H,00H	; 5Dh
0B2193 4E    3702** db 0x4e ; 041F92
0B2194 B0    3703** db 0xb0 ; 041F93
0B2195 00    3704** db 0x00 ; 041F94
0B2196 4F    3705** db 0x4f ; 041F95 4F      5376 DB	"OUT","0"+80H,01H
0B2197 55    3706** db 0x55 ; 041F96
0B2198 54    3707** db 0x54 ; 041F97
0B2199 B0    3708** db 0xb0 ; 041F98
0B219A 01    3709** db 0x01 ; 041F99
             3710** ;
             3711** ; Group 9: (1 opcode)
             3712** ;
0B219B 49    3713** db 0x49 ; 041F9A 49      5380 DB	"I","N"+80H,40H		; 5Fh
0B219C CE    3714** db 0xce ; 041F9B
0B219D 40    3715** db 0x40 ; 041F9C
             3716** ;
             3717** ; Group 10: (1 opcode)
             3718** ;
0B219E 4F    3719** db 0x4f ; 041F9D 4F      5384 DB	"OU","T"+80H,41H	; 60h
0B219F 55    3720** db 0x55 ; 041F9E
0B21A0 D4    3721** db 0xd4 ; 041F9F
0B21A1 41    3722** db 0x41 ; 041FA0
             3723** ;
             3724** ; Group 11: (2 opcodes)
             3725** ;
0B21A2 4A    3726** db 0x4a ; 041FA1 4A      5388 DB	"J","R"+80H,20H		; 61h
0B21A3 D2    3727** db 0xd2 ; 041FA2
0B21A4 20    3728** db 0x20 ; 041FA3
0B21A5 44    3729** db 0x44 ; 041FA4 44      5389 DB	"DJN","Z"+80H,10H
0B21A6 4A    3730** db 0x4a ; 041FA5
0B21A7 4E    3731** db 0x4e ; 041FA6
0B21A8 DA    3732** db 0xda ; 041FA7
0B21A9 10    3733** db 0x10 ; 041FA8
             3734** ;
             3735** ; Group 12: (1 opcode)
             3736** ;
0B21AA 4A    3737** db 0x4a ; 041FA9 4A      5393 DB	"J","P"+80H,C2H		; 63h
0B21AB D0    3738** db 0xd0 ; 041FAA
0B21AC C2    3739** db 0xc2 ; 041FAB
             3740** ;
             3741** ; Group 13: (1 opcode)
             3742** ;
0B21AD 43    3743** db 0x43 ; 041FAC 43      5397 DB	"CAL","L"+80H,C4H	; 64h
0B21AE 41    3744** db 0x41 ; 041FAD
0B21AF 4C    3745** db 0x4c ; 041FAE
0B21B0 CC    3746** db 0xcc ; 041FAF
0B21B1 C4    3747** db 0xc4 ; 041FB0
             3748** ;
             3749** ; Group 14: (1 opcode)
             3750** ;
0B21B2 52    3751** db 0x52 ; 041FB1 52      5401 DB	"RS","T"+80H,C7H	; 65h
0B21B3 53    3752** db 0x53 ; 041FB2
0B21B4 D4    3753** db 0xd4 ; 041FB3
0B21B5 C7    3754** db 0xc7 ; 041FB4
             3755** ;
             3756** ; Group 15: (1 opcode)
             3757** ;
0B21B6 52    3758** db 0x52 ; 041FB5 52      5405 DB	"RE","T"+80H,C0H	; 66h
0B21B7 45    3759** db 0x45 ; 041FB6
0B21B8 D4    3760** db 0xd4 ; 041FB7
0B21B9 C0    3761** db 0xc0 ; 041FB8
             3762** ;
             3763** ; Group 16: (1 opcode)
             3764** ;
0B21BA 4C    3765** db 0x4c ; 041FB9 4C      5409 DB	"L","D"+80H,40H		; 67h
0B21BB C4    3766** db 0xc4 ; 041FBA
0B21BC 40    3767** db 0x40 ; 041FBB
             3768** ;
             3769** ; Group 17: (1 opcode)
             3770** ;
0B21BD 54    3771** db 0x54 ; 041FBC 54      5413 DB	"TS","T"+80H,04H	; 68h
0B21BE 53    3772** db 0x53 ; 041FBD
0B21BF D4    3773** db 0xd4 ; 041FBE
0B21C0 04    3774** db 0x04 ; 041FBF
             3775** ;
             3776** ; Assembler Directives
             3777** ;
0B21C1 4F    3778** db 0x4f ; 041FC0 4F      5418 DB	"OP","T"+80H,00H	; 69h OPT
0B21C2 50    3779** db 0x50 ; 041FC1
0B21C3 D4    3780** db 0xd4 ; 041FC2
0B21C4 00    3781** db 0x00 ; 041FC3
0B21C5 41    3782** db 0x41 ; 041FC4 41      5419 DB	"AD","L"+80H,00H	; 6Ah ADL
0B21C6 44    3783** db 0x44 ; 041FC5
0B21C7 CC    3784** db 0xcc ; 041FC6
0B21C8 00    3785** db 0x00 ; 041FC7
0B21C9 5D    3786** db 0x5d ; 041FC8 5D      5421 DB	DEF_ & 7FH,"B"+80H,00H	; 6Bh Tokenised DEF + B
0B21CA C2    3787** db 0xc2 ; 041FC9
0B21CB 00    3788** db 0x00 ; 041FCA
0B21CC 5D    3789** db 0x5d ; 041FCB 5D      5422 DB	DEF_ & 7FH,"W"+80H,00H	; 6Ch Tokenised DEF + W
0B21CD D7    3790** db 0xd7 ; 041FCC
0B21CE 00    3791** db 0x00 ; 041FCD
0B21CF 5D    3792** db 0x5d ; 041FCE 5D      5423 DB	DEF_ & 7FH,"L"+80H,00H	; 6Dh Tokenised DEF + L
0B21D0 CC    3793** db 0xcc ; 041FCF
0B21D1 00    3794** db 0x00 ; 041FD0
0B21D2 5D    3795** db 0x5d ; 041FD1 5D      5424 DB 	DEF_ & 7FH,"M"+80H,00H	; 6Eh Tokenised DEF + M
0B21D3 CD    3796** db 0xcd ; 041FD2
0B21D4 00    3797** db 0x00 ; 041FD3
0B21D5 00    3798** db 0x00 ; 041FD4 00      5426 DB	0
             3799** ;
             3800** ; Operands
             3801** ;
             3802** OPRNDS:
0B21D6 C2    3803** db 0xc2 ; 041FD5 42      5430 OPRNDS:			DB	"B"+80H, 00H
0B21D7 00    3804** db 0x00 ; 041FD6
0B21D8 C3    3805** db 0xc3 ; 041FD7 43      5431 DB	"C"+80H, 01H
0B21D9 01    3806** db 0x01 ; 041FD8
0B21DA C4    3807** db 0xc4 ; 041FD9 44      5432 DB	"D"+80H, 02H
0B21DB 02    3808** db 0x02 ; 041FDA
0B21DC C5    3809** db 0xc5 ; 041FDB 45      5433 DB	"E"+80H, 03H
0B21DD 03    3810** db 0x03 ; 041FDC
0B21DE C8    3811** db 0xc8 ; 041FDD 48      5434 DB	"H"+80H, 04H
0B21DF 04    3812** db 0x04 ; 041FDE
0B21E0 CC    3813** db 0xcc ; 041FDF 4C      5435 DB	"L"+80H, 05H
0B21E1 05    3814** db 0x05 ; 041FE0
0B21E2 28    3815** db 0x28 ; 041FE1 28      5436 DB	"(H","L"+80H,06H
0B21E3 48    3816** db 0x48 ; 041FE2
0B21E4 CC    3817** db 0xcc ; 041FE3
0B21E5 06    3818** db 0x06 ; 041FE4
0B21E6 C1    3819** db 0xc1 ; 041FE5 41      5437 DB	"A"+80H, 07H
0B21E7 07    3820** db 0x07 ; 041FE6
0B21E8 28    3821** db 0x28 ; 041FE7 28      5438 DB	"(I","X"+80H,86H
0B21E9 49    3822** db 0x49 ; 041FE8
0B21EA D8    3823** db 0xd8 ; 041FE9
0B21EB 86    3824** db 0x86 ; 041FEA
0B21EC 28    3825** db 0x28 ; 041FEB 28      5439 DB	"(I","Y"+80H,C6H
0B21ED 49    3826** db 0x49 ; 041FEC
0B21EE D9    3827** db 0xd9 ; 041FED
0B21EF C6    3828** db 0xc6 ; 041FEE
0B21F0 42    3829** db 0x42 ; 041FEF 42      5441 DB	"B","C"+80H,08H
0B21F1 C3    3830** db 0xc3 ; 041FF0
0B21F2 08    3831** db 0x08 ; 041FF1
0B21F3 44    3832** db 0x44 ; 041FF2 44      5442 DB	"D","E"+80H,0AH
0B21F4 C5    3833** db 0xc5 ; 041FF3
0B21F5 0A    3834** db 0x0a ; 041FF4
0B21F6 48    3835** db 0x48 ; 041FF5 48      5443 DB	"H","L"+80H,0CH
0B21F7 CC    3836** db 0xcc ; 041FF6
0B21F8 0C    3837** db 0x0c ; 041FF7
0B21F9 49    3838** db 0x49 ; 041FF8 49      5444 DB	"I","X"+80H,8CH
0B21FA D8    3839** db 0xd8 ; 041FF9
0B21FB 8C    3840** db 0x8c ; 041FFA
0B21FC 49    3841** db 0x49 ; 041FFB 49      5445 DB	"I","Y"+80H,CCH
0B21FD D9    3842** db 0xd9 ; 041FFC
0B21FE CC    3843** db 0xcc ; 041FFD
0B21FF 41    3844** db 0x41 ; 041FFE 41      5446 DB	"A","F"+80H,0EH
0B2200 C6    3845** db 0xc6 ; 041FFF
0B2201 0E    3846** db 0x0e ; 042000
0B2202 53    3847** db 0x53 ; 042001 53      5447 DB	"S","P"+80H,0EH
0B2203 D0    3848** db 0xd0 ; 042002
0B2204 0E    3849** db 0x0e ; 042003
0B2205 4E    3850** db 0x4e ; 042004 4E      5449 DB	"N","Z"+80H,10H
0B2206 DA    3851** db 0xda ; 042005
0B2207 10    3852** db 0x10 ; 042006
0B2208 DA    3853** db 0xda ; 042007 5A      5450 DB	"Z"+80H,11H
0B2209 11    3854** db 0x11 ; 042008
0B220A 4E    3855** db 0x4e ; 042009 4E      5451 DB	"N","C"+80H,12H
0B220B C3    3856** db 0xc3 ; 04200A
0B220C 12    3857** db 0x12 ; 04200B
0B220D 50    3858** db 0x50 ; 04200C 50      5452 DB	"P","O"+80H,14H
0B220E CF    3859** db 0xcf ; 04200D
0B220F 14    3860** db 0x14 ; 04200E
0B2210 50    3861** db 0x50 ; 04200F 50      5453 DB	"P","E"+80H,15H
0B2211 C5    3862** db 0xc5 ; 042010
0B2212 15    3863** db 0x15 ; 042011
0B2213 D0    3864** db 0xd0 ; 042012 50      5454 DB	"P"+80H,16H
0B2214 16    3865** db 0x16 ; 042013
0B2215 CD    3866** db 0xcd ; 042014 4D      5455 DB	"M"+80H,17H
0B2216 17    3867** db 0x17 ; 042015
0B2217 28    3868** db 0x28 ; 042016 28      5457 DB	"(","C"+80H,20H
0B2218 C3    3869** db 0xc3 ; 042017
0B2219 20    3870** db 0x20 ; 042018
0B221A 00    3871** db 0x00 ; 042019 00      5459 DB	0
             3872** ;
             3873** ; Load operations
             3874** ;
             3875** LDOPS:
0B221B 49    3876** db 0x49 ; 04201A 49      5463 LDOPS:			DB	"I",0,"A"+80H,47H
0B221C 00    3877** db 0x00 ; 04201B
0B221D C1    3878** db 0xc1 ; 04201C
0B221E 47    3879** db 0x47 ; 04201D
0B221F 52    3880** db 0x52 ; 04201E 52      5464 DB	"R",0,"A"+80H,4FH
0B2220 00    3881** db 0x00 ; 04201F
0B2221 C1    3882** db 0xc1 ; 042020
0B2222 4F    3883** db 0x4f ; 042021
0B2223 41    3884** db 0x41 ; 042022 41      5465 DB	"A",0,"I"+80H,57H
0B2224 00    3885** db 0x00 ; 042023
0B2225 C9    3886** db 0xc9 ; 042024
0B2226 57    3887** db 0x57 ; 042025
0B2227 41    3888** db 0x41 ; 042026 41      5466 DB	"A",0,"R"+80H,5FH
0B2228 00    3889** db 0x00 ; 042027
0B2229 D2    3890** db 0xd2 ; 042028
0B222A 5F    3891** db 0x5f ; 042029
0B222B 28    3892** db 0x28 ; 04202A 28      5467 DB	"(BC",0,"A"+80H,02h
0B222C 42    3893** db 0x42 ; 04202B
0B222D 43    3894** db 0x43 ; 04202C
0B222E 00    3895** db 0x00 ; 04202D
0B222F C1    3896** db 0xc1 ; 04202E
0B2230 02    3897** db 0x02 ; 04202F
0B2231 28    3898** db 0x28 ; 042030 28      5468 DB	"(DE",0,"A"+80H,12H
0B2232 44    3899** db 0x44 ; 042031
0B2233 45    3900** db 0x45 ; 042032
0B2234 00    3901** db 0x00 ; 042033
0B2235 C1    3902** db 0xc1 ; 042034
0B2236 12    3903** db 0x12 ; 042035
0B2237 41    3904** db 0x41 ; 042036 41      5469 DB	"A",0,"(B","C"+80H,0AH
0B2238 00    3905** db 0x00 ; 042037
0B2239 28    3906** db 0x28 ; 042038
0B223A 42    3907** db 0x42 ; 042039
0B223B C3    3908** db 0xc3 ; 04203A
0B223C 0A    3909** db 0x0a ; 04203B
0B223D 41    3910** db 0x41 ; 04203C 41      5470 DB	"A",0,"(D","E"+80H,1AH
0B223E 00    3911** db 0x00 ; 04203D
0B223F 28    3912** db 0x28 ; 04203E
0B2240 44    3913** db 0x44 ; 04203F
0B2241 C5    3914** db 0xc5 ; 042040
0B2242 1A    3915** db 0x1a ; 042041
0B2243 00    3916** db 0x00 ; 042042 00      5472 DB	0
             3917** ;
             3918** ; eZ80 addressing mode suffixes
             3919** ;
             3920** ; Fully qualified suffixes
             3921** ;
             3922** EZ80SFS_1:
0B2244 4C    3923** db 0x4c ; 042043 4C      5478 EZ80SFS_1:		DB	"LI","S"+80H,49H
0B2245 49    3924** db 0x49 ; 042044
0B2246 D3    3925** db 0xd3 ; 042045
0B2247 49    3926** db 0x49 ; 042046
0B2248 53    3927** db 0x53 ; 042047 53      5479 DB	"SI","L"+80H,52H
0B2249 49    3928** db 0x49 ; 042048
0B224A CC    3929** db 0xcc ; 042049
0B224B 52    3930** db 0x52 ; 04204A
             3931** 
             3932** EZ80SFS_2:
0B224C 53    3933** db 0x53 ; 04204B 53      5480 EZ80SFS_2:		DB	"SI","S"+80H,40H
0B224D 49    3934** db 0x49 ; 04204C
0B224E D3    3935** db 0xd3 ; 04204D
0B224F 40    3936** db 0x40 ; 04204E
0B2250 4C    3937** db 0x4c ; 04204F 4C      5481 DB	"LI","L"+80H,5BH
0B2251 49    3938** db 0x49 ; 042050
0B2252 CC    3939** db 0xcc ; 042051
0B2253 5B    3940** db 0x5b ; 042052
0B2254 00    3941** db 0x00 ; 042053 00      5483 DB	0
             3942** ;
             3943** ; Shortcuts when ADL mode is 0
             3944** ;
             3945** EZ80SFS_ADL0:
0B2255 D3    3946** db 0xd3 ; 042054 53      5487 EZ80SFS_ADL0:		DB	"S"+80H,40H		; Equivalent to .SIS
0B2256 40    3947** db 0x40 ; 042055
0B2257 CC    3948** db 0xcc ; 042056 4C      5488 DB	"L"+80H,49H		; Equivalent to .LIS
0B2258 49    3949** db 0x49 ; 042057
0B2259 49    3950** db 0x49 ; 042058 49      5489 DB	"I","S"+80H,40H		; Equivalent to .SIS
0B225A D3    3951** db 0xd3 ; 042059
0B225B 40    3952** db 0x40 ; 04205A
0B225C 49    3953** db 0x49 ; 04205B 49      5490 DB	"I","L"+80H,52H		; Equivalent to .SIL
0B225D CC    3954** db 0xcc ; 04205C
0B225E 52    3955** db 0x52 ; 04205D
0B225F 00    3956** db 0x00 ; 04205E 00      5492 DB	0
             3957** ;
             3958** ; Shortcuts when ADL mode is 1
             3959** ;
             3960** EZ80SFS_ADL1:
0B2260 D3    3961** db 0xd3 ; 04205F 53      5496 EZ80SFS_ADL1:		DB	"S"+80H,52H		; Equivalent to .SIL
0B2261 52    3962** db 0x52 ; 042060
0B2262 CC    3963** db 0xcc ; 042061 4C      5497 DB	"L"+80H,5BH		; Equivalent to .LIL
0B2263 5B    3964** db 0x5b ; 042062
0B2264 49    3965** db 0x49 ; 042063 49      5498 DB	"I","S"+80H,49H		; Equivalent to .LIS
0B2265 D3    3966** db 0xd3 ; 042064
0B2266 49    3967** db 0x49 ; 042065
0B2267 49    3968** db 0x49 ; 042066 49      5499 DB	"I","L"+80H,5BH		; Equivalent to .LIL
0B2268 CC    3969** db 0xcc ; 042067
0B2269 5B    3970** db 0x5b ; 042068
0B226A 00    3971** db 0x00 ; 042069 00      5501 DB	0
             3972** ; END INSERT FROM BINARY
             3973** ;
             3974** ; .LIST
             3975** ;
             3976** ; already defined in equs.inc
             3977** ; LF:			EQU     0AH
             3978** ; CR:			EQU     0DH
              0007* include "basic/fpp.asm"
             0001** ;
             0002** ; Title:	BBC Basic Interpreter - Z80 version
             0003** ;		Z80 Floating Point Package
             0004** ; Author:	(C) Copyright  R.T.Russell  1986
             0005** ; Modified By:	Dean Belfield
             0006** ; Created:	03/05/2022
             0007** ; Last Updated:	07/06/2023
             0008** ;
             0009** ; Modinfo:
             0010** ; 26/10/1986:	Version 0.0
             0011** ; 14/12/1988:	Vesion 0.1 (Bug Fix)
             0012** ; 12/05/2023:	Modified by Dean Belfield
             0013** ; 07/06/2023:	Modified to run in ADL mode
             0014** 
             0015** ; .ASSUME	ADL = 1
             0016** 
             0017** ; SEGMENT CODE
             0018** 
             0019** ; XDEF	FPP
             0020** ; XDEF	DLOAD5
             0021** ; XDEF	DLOAD5_SPL
             0022** ;
             0023** ;BINARY FLOATING POINT REPRESENTATION:
             0024** ;   32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
             0025** ;    8 BIT EXCESS-128 SIGNED EXPONENT
             0026** ;   SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
             0027** ;   MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
             0028** ;
             0029** ;BINARY INTEGER REPRESENTATION:
             0030** ;   32 BIT 2'S-COMPLEMENT SIGNED INTEGER
             0031** ;    "EXPONENT" BYTE = 0 (WHEN PRESENT)
             0032** ;
             0033** ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
             0034** ;                            EXPONENT - C
             0035** ;ALTERNATE REGISTER ALLOCATION: MANTISSA - DED'E'
             0036** ;                               EXPONENT - B
             0037** 
             0038** ;
             0039** ;Error codes:
             0040** ;
             0041** 
             0042** BADOP:			EQU     1               ;Bad operation code
             0043** DIVBY0:			EQU     18              ;Division by zero
             0044** TOOBIG_FP:			EQU     20              ;Too big
             0045** NGROOT:			EQU     21              ;Negative root
             0046** LOGRNG:			EQU     22              ;Log range
             0047** ACLOST:			EQU     23              ;Accuracy lost
             0048** EXPRNG:			EQU     24              ;Exp range
             0049** ;
             0050** ;Call entry and despatch code:
             0051** ;
0B226B FD    0052** FPP:			PUSH    IY              ;Save IY
0B226C E5 
0B226D FD    0053** LD      IY,0
0B226E 21 
0B226F 00 
0B2270 00 
0B2270 00   
0B2272 FD    0054** ADD     IY,SP           ;Save SP in IY
0B2273 39 
0B2274 CD    0055** CALL    OP              ;Perform operation
0B2275 84 
0B2276 22 
0B2277 0B 
0B2278 BF    0056** CP      A               ;Good return (Z, NC)
0B2279 FD    0057** EXIT_FP_:			POP     IY              ;Restore IY
0B227A E1 
0B227B C9    0058** RET                     ;Return to caller
             0059** ;
             0060** ;Error exit:
             0061** ;
0B227C 3E    0062** BAD_FP:			LD      A,BADOP         ;"Bad operation code"
0B227D 01 
0B227E FD    0063** ERROR_FP_:			LD      SP,IY           ;Restore SP from IY
0B227F F9 
0B2280 B7    0064** OR      A               ;Set NZ
0B2281 37    0065** SCF                     ;Set C
0B2282 18    0066** JR      EXIT_FP_
0B2283 F5 
             0067** ;
             0068** ;Perform operation or function:
             0069** ;
             0070** ; OP:			CP      (RTABLE-DTABLE)/3
0B2284 FE    0071** OP:				CP      RTABLE-DTABLE/3 ; ez80asm doesn't do nested expressions
0B2285 2A 
             0072** 
0B2286 30    0073** JR      NC,BAD_FP
0B2287 F4 
             0074** ; CP      (FTABLE-DTABLE)/3
0B2288 FE    0075** CP      FTABLE-DTABLE/3 ; ditto
0B2289 10 
0B228A 30    0076** JR      NC,DISPAT_FP
0B228B 08 
0B228C 08    0077** EX      AF,AF'
0B228D 78    0078** LD      A,B
0B228E B1    0079** OR      C               ;Both integer?
0B228F C4    0080** CALL    NZ,FLOATA       ;No, so float both
0B2290 97 
0B2291 2D 
0B2292 0B 
0B2293 08    0081** EX      AF,AF'
0B2294 E5    0082** DISPAT_FP:			PUSH    HL
0B2295 21    0083** LD      HL,DTABLE
0B2296 A7 
0B2297 22 
0B2298 0B 
0B2299 C5    0084** PUSH    BC
0B229A 01    0085** LD	BC, 3		; C = 3
0B229B 03 
0B229C 00 
0B229D 00 
0B229E 47    0086** LD	B, A 		; B = op-code
0B229F ED    0087** MLT 	BC 		;BC = op-code * 3
0B22A0 4C 
0B22A1 09    0088** ADD	HL, BC 		;Add to table base
0B22A2 ED    0089** LD	HL, (HL)	;Get the routine address (24-bit)
0B22A3 27 
             0090** 
             0091** ;        		ADD     A, A            ;A = op-code * 2
             0092** ;        		LD      C,A
             0093** ;        		LD      B,0             ;BC = op-code * 2
             0094** ;        		ADD     HL,BC
             0095** ;        		LD      A,(HL)          ;Get low byte
             0096** ;        		INC     HL
             0097** ;        		LD      H,(HL)          ;Get high byte
             0098** ;        		LD      L,A
             0099** 
0B22A4 C1    0100** POP     BC
0B22A5 E3    0101** EX      (SP),HL
0B22A6 C9    0102** RET                     ;Off to routine
             0103** ;
             0104** ;Despatch table:
             0105** ;
0B22A7 59    0106** DTABLE:			DW24  IAND            ;AND (INTEGER)
0B22A8 23 
0B22A9 0B 
0B22AA C7    0107** DW24  IBDIV           ;DIV
0B22AB 23 
0B22AC 0B 
0B22AD 6C    0108** DW24  IEOR            ;EOR
0B22AE 23 
0B22AF 0B 
0B22B0 92    0109** DW24  IMOD            ;MOD
0B22B1 23 
0B22B2 0B 
0B22B3 7F    0110** DW24  IOR             ;OR
0B22B4 23 
0B22B5 0B 
0B22B6 4D    0111** DW24  ILE             ;<=
0B22B7 26 
0B22B8 0B 
0B22B9 5C    0112** DW24  INE             ;<>
0B22BA 26 
0B22BB 0B 
0B22BC 40    0113** DW24  IGE             ;>=
0B22BD 26 
0B22BE 0B 
0B22BF 25    0114** DW24  ILT             ;<
0B22C0 26 
0B22C1 0B 
0B22C2 69    0115** DW24  IEQ             ;=
0B22C3 26 
0B22C4 0B 
0B22C5 B5    0116** DW24  IMUL            ;*
0B22C6 24 
0B22C7 0B 
0B22C8 F0    0117** DW24  IADD            ;+
0B22C9 23 
0B22CA 0B 
0B22CB 32    0118** DW24  IGT             ;>
0B22CC 26 
0B22CD 0B 
0B22CE D7    0119** DW24  ISUB            ;-
0B22CF 23 
0B22D0 0B 
0B22D1 6C    0120** DW24  IPOW            ;^
0B22D2 25 
0B22D3 0B 
0B22D4 62    0121** DW24  IDIV            ;/
0B22D5 24 
0B22D6 0B 
             0122** ;
             0123** FTABLE:
0B22D7 7B    0124** DW24  ABSV_FP            ;ABS
0B22D8 26 
0B22D9 0B 
0B22DA 61    0125** DW24  ACS_FP             ;ACS
0B22DB 2A 
0B22DC 0B 
0B22DD 9F    0126** DW24  ASN_FP             ;ASN
0B22DE 29 
0B22DF 0B 
0B22E0 CF    0127** DW24  ATN_FP             ;ATN
0B22E1 29 
0B22E2 0B 
0B22E3 9A    0128** DW24  COS_FP             ;COS
0B22E4 27 
0B22E5 0B 
0B22E6 A9    0129** DW24  DEG_FP             ;DEG
0B22E7 26 
0B22E8 0B 
0B22E9 56    0130** DW24  EXP_FP             ;EXP
0B22EA 28 
0B22EB 0B 
0B22EC FD    0131** DW24  INT_FP_            ;INT
0B22ED 26 
0B22EE 0B 
0B22EF F4    0132** DW24  LN_FP              ;LN
0B22F0 28 
0B22F1 0B 
0B22F2 89    0133** DW24  LOG_FP             ;LOG
0B22F3 29 
0B22F4 0B 
0B22F5 87    0134** DW24  NOTK_FP            ;NOT
0B22F6 26 
0B22F7 0B 
0B22F8 B3    0135** DW24  RAD_FP             ;RAD
0B22F9 26 
0B22FA 0B 
0B22FB CE    0136** DW24  SGN_FP             ;SGN
0B22FC 26 
0B22FD 0B 
0B22FE A7    0137** DW24  SIN_FP             ;SIN
0B22FF 27 
0B2300 0B 
0B2301 16    0138** DW24  SQR_FP             ;SQR
0B2302 27 
0B2303 0B 
0B2304 74    0139** DW24  TAN_FP             ;TAN
0B2305 27 
0B2306 0B 
             0140** ;
0B2307 24    0141** DW24  ZERO_FP            ;ZERO
0B2308 2E 
0B2309 0B 
0B230A 2F    0142** DW24  FONE_FP            ;FONE
0B230B 28 
0B230C 0B 
0B230D 6E    0143** DW24  TRUE_FP            ;TRUE
0B230E 26 
0B230F 0B 
0B2310 9B    0144** DW24  PI_FP              ;PI
0B2311 26 
0B2312 0B 
             0145** ;
0B2313 E2    0146** DW24  VAL_FP             ;VAL
0B2314 26 
0B2315 0B 
0B2316 6A    0147** DW24  STR_FP             ;STR$
0B2317 2A 
0B2318 0B 
             0148** ;
0B2319 CB    0149** DW24  SFIX_FP            ;FIX
0B231A 2C 
0B231B 0B 
0B231C A7    0150** DW24  SFLOAT_FP          ;FLOAT
0B231D 2D 
0B231E 0B 
             0151** ;
0B231F F5    0152** DW24  FTEST_FP           ;TEST
0B2320 2D 
0B2321 0B 
0B2322 07    0153** DW24  FCOMP_FP           ;COMPARE
0B2323 2E 
0B2324 0B 
             0154** ;
0B2325 55    0155** RTABLE:			DW24  FAND            ;AND (FLOATING-POINT)
0B2326 23 
0B2327 0B 
0B2328 C3    0156** DW24  FBDIV           ;DIV
0B2329 23 
0B232A 0B 
0B232B 68    0157** DW24  FEOR            ;EOR
0B232C 23 
0B232D 0B 
0B232E 8E    0158** DW24  FMOD            ;MOD
0B232F 23 
0B2330 0B 
0B2331 7B    0159** DW24  FFOR             ;OR
0B2332 23 
0B2333 0B 
0B2334 47    0160** DW24  FLE             ;<=
0B2335 26 
0B2336 0B 
0B2337 56    0161** DW24  FNE             ;<>
0B2338 26 
0B2339 0B 
0B233A 3A    0162** DW24  FGE             ;>=
0B233B 26 
0B233C 0B 
0B233D 1F    0163** DW24  FLT             ;<
0B233E 26 
0B233F 0B 
0B2340 63    0164** DW24  FEQ             ;=
0B2341 26 
0B2342 0B 
0B2343 0F    0165** DW24  FMUL            ;*
0B2344 25 
0B2345 0B 
0B2346 FD    0166** DW24  FADD            ;+
0B2347 23 
0B2348 0B 
0B2349 2C    0167** DW24  FGT             ;>
0B234A 26 
0B234B 0B 
0B234C E4    0168** DW24  FSUB            ;-
0B234D 23 
0B234E 0B 
0B234F EC    0169** DW24  FPOW            ;^
0B2350 25 
0B2351 0B 
0B2352 66    0170** DW24  FDIV            ;/
0B2353 24 
0B2354 0B 
             0171** ;
             0172** ;       PAGE
             0173** ;
             0174** ;ARITHMETIC AND LOGICAL OPERATORS:
             0175** ;All take two arguments, in HLH'L'C & DED'E'B.
             0176** ;Output in HLH'L'C
             0177** ;All registers except IX, IY destroyed.
             0178** ; (N.B. FPOW destroys IX).
             0179** ;
             0180** ;FAND - Floating-point AND.
             0181** ;IAND - Integer AND.
             0182** ;
0B2355 CD    0183** FAND:			CALL    FIX2
0B2356 BF 
0B2357 2C 
0B2358 0B 
0B2359 7C    0184** IAND:			LD      A,H
0B235A A2    0185** AND     D
0B235B 67    0186** LD      H,A
0B235C 7D    0187** LD      A,L
0B235D A3    0188** AND     E
0B235E 6F    0189** LD      L,A
0B235F D9    0190** EXX
0B2360 7C    0191** LD      A,H
0B2361 A2    0192** AND     D
0B2362 67    0193** LD      H,A
0B2363 7D    0194** LD      A,L
0B2364 A3    0195** AND     E
0B2365 6F    0196** LD      L,A
0B2366 D9    0197** EXX
0B2367 C9    0198** RET
             0199** ;
             0200** ;FEOR - Floating-point exclusive-OR.
             0201** ;IEOR - Integer exclusive-OR.
             0202** ;
0B2368 CD    0203** FEOR:			CALL    FIX2
0B2369 BF 
0B236A 2C 
0B236B 0B 
0B236C 7C    0204** IEOR:			LD      A,H
0B236D AA    0205** XOR     D
0B236E 67    0206** LD      H,A
0B236F 7D    0207** LD      A,L
0B2370 AB    0208** XOR     E
0B2371 6F    0209** LD      L,A
0B2372 D9    0210** EXX
0B2373 7C    0211** LD      A,H
0B2374 AA    0212** XOR     D
0B2375 67    0213** LD      H,A
0B2376 7D    0214** LD      A,L
0B2377 AB    0215** XOR     E
0B2378 6F    0216** LD      L,A
0B2379 D9    0217** EXX
0B237A C9    0218** RET
             0219** ;
             0220** ;FOR - Floating-point OR.
             0221** ;IOR - Integer OR.
             0222** ;
0B237B CD    0223** FFOR:			CALL    FIX2
0B237C BF 
0B237D 2C 
0B237E 0B 
0B237F 7C    0224** IOR:			LD      A,H
0B2380 B2    0225** OR      D
0B2381 67    0226** LD      H,A
0B2382 7D    0227** LD      A,L
0B2383 B3    0228** OR      E
0B2384 6F    0229** LD      L,A
0B2385 D9    0230** EXX
0B2386 7C    0231** LD      A,H
0B2387 B2    0232** OR      D
0B2388 67    0233** LD      H,A
0B2389 7D    0234** LD      A,L
0B238A B3    0235** OR      E
0B238B 6F    0236** LD      L,A
0B238C D9    0237** EXX
0B238D C9    0238** RET
             0239** ;
             0240** ;FMOD - Floating-point remainder.
             0241** ;IMOD - Integer remainder.
             0242** ;
0B238E CD    0243** FMOD:			CALL    FIX2
0B238F BF 
0B2390 2C 
0B2391 0B 
0B2392 7C    0244** IMOD:			LD      A,H
0B2393 AA    0245** XOR     D               ;DIV RESULT SIGN
0B2394 CB    0246** BIT     7,H
0B2395 7C 
0B2396 08    0247** EX      AF,AF'
0B2397 CB    0248** BIT     7,H
0B2398 7C 
0B2399 C4    0249** CALL    NZ,NEGATE       ;MAKE ARGUMENTS +VE
0B239A DB 
0B239B 2C 
0B239C 0B 
0B239D CD    0250** CALL    SWAP_FP
0B239E D8 
0B239F 2D 
0B23A0 0B 
0B23A1 CB    0251** BIT     7,H
0B23A2 7C 
0B23A3 C4    0252** CALL    NZ,NEGATE
0B23A4 DB 
0B23A5 2C 
0B23A6 0B 
0B23A7 44    0253** LD      B,H
0B23A8 4D    0254** LD      C,L
0B23A9 21    0255** LD      HL,0
0B23AA 00 
0B23AB 00 
0B23AC 00 
0B23AD D9    0256** EXX
0B23AE 44    0257** LD      B,H
0B23AF 4D    0258** LD      C,L
0B23B0 21    0259** LD      HL,0
0B23B1 00 
0B23B2 00 
0B23B3 00 
0B23B4 3E    0260** LD      A,-33
0B23B5 DF 
0B23B6 CD    0261** CALL    DIVA            ;DIVIDE
0B23B7 65 
0B23B8 2F 
0B23B9 0B 
0B23BA D9    0262** EXX
0B23BB 0E    0263** LD      C,0             ;INTEGER MARKER
0B23BC 00 
0B23BD 08    0264** EX      AF,AF'
0B23BE C8    0265** RET     Z
0B23BF C3    0266** JP      NEGATE
0B23C0 DB 
0B23C1 2C 
0B23C2 0B 
             0267** ;
             0268** ;BDIV - Integer division.
             0269** ;
0B23C3 CD    0270** FBDIV:			CALL    FIX2
0B23C4 BF 
0B23C5 2C 
0B23C6 0B 
0B23C7 CD    0271** IBDIV:			CALL    IMOD
0B23C8 92 
0B23C9 23 
0B23CA 0B 
0B23CB B7    0272** OR      A
0B23CC CD    0273** CALL    SWAP_FP
0B23CD D8 
0B23CE 2D 
0B23CF 0B 
0B23D0 0E    0274** LD      C,0
0B23D1 00 
0B23D2 F0    0275** RET     P
0B23D3 C3    0276** JP      NEGATE
0B23D4 DB 
0B23D5 2C 
0B23D6 0B 
             0277** ;
             0278** ;ISUB - Integer subtraction.
             0279** ;FSUB - Floating point subtraction with rounding.
             0280** ;
0B23D7 CD    0281** ISUB:			CALL    SUB_
0B23D8 73 
0B23D9 2E 
0B23DA 0B 
0B23DB E0    0282** RET     PO
0B23DC CD    0283** CALL    ADD_
0B23DD 6B 
0B23DE 2E 
0B23DF 0B 
0B23E0 CD    0284** CALL    FLOAT2
0B23E1 9B 
0B23E2 2D 
0B23E3 0B 
0B23E4 7A    0285** FSUB:			LD      A,D
0B23E5 EE    0286** XOR     80H             ;CHANGE SIGN THEN ADD
0B23E6 80 
0B23E7 57    0287** LD      D,A
0B23E8 18    0288** JR      FADD
0B23E9 13 
             0289** ;
             0290** ;Reverse subtract.
             0291** ;
0B23EA 7C    0292** RSUB:			LD      A,H
0B23EB EE    0293** XOR     80H
0B23EC 80 
0B23ED 67    0294** LD      H,A
0B23EE 18    0295** JR      FADD
0B23EF 0D 
             0296** ;
             0297** ;IADD - Integer addition.
             0298** ;FADD - Floating point addition with rounding.
             0299** ;
0B23F0 CD    0300** IADD:			CALL    ADD_
0B23F1 6B 
0B23F2 2E 
0B23F3 0B 
0B23F4 E0    0301** RET     PO
0B23F5 CD    0302** CALL    SUB_
0B23F6 73 
0B23F7 2E 
0B23F8 0B 
0B23F9 CD    0303** CALL    FLOAT2
0B23FA 9B 
0B23FB 2D 
0B23FC 0B 
0B23FD 05    0304** FADD:			DEC     B
0B23FE 04    0305** INC     B
0B23FF C8    0306** RET     Z               ;ARG 2 ZERO
0B2400 0D    0307** DEC     C
0B2401 0C    0308** INC     C
0B2402 CA    0309** JP      Z,SWAP_FP          ;ARG 1 ZERO
0B2403 D8 
0B2404 2D 
0B2405 0B 
0B2406 D9    0310** EXX
0B2407 01    0311** LD      BC,0            ;INITIALISE
0B2408 00 
0B2409 00 
0B240A 00 
0B240B D9    0312** EXX
0B240C 7C    0313** LD      A,H
0B240D AA    0314** XOR     D               ;XOR SIGNS
0B240E F5    0315** PUSH    AF
0B240F 78    0316** LD      A,B
0B2410 B9    0317** CP      C               ;COMPARE EXPONENTS
0B2411 DC    0318** CALL    C,SWAP_FP          ;MAKE DED'E'B LARGEST
0B2412 D8 
0B2413 2D 
0B2414 0B 
0B2415 78    0319** LD      A,B
0B2416 CB    0320** SET     7,H             ;IMPLIED 1
0B2417 FC 
0B2418 C4    0321** CALL    NZ,FIX          ;ALIGN
0B2419 AC 
0B241A 2C 
0B241B 0B 
0B241C F1    0322** POP     AF
0B241D 7A    0323** LD      A,D             ;SIGN OF LARGER
0B241E CB    0324** SET     7,D             ;IMPLIED 1
0B241F FA 
0B2420 FA    0325** JP      M,FADD3         ;SIGNS DIFFERENT
0B2421 30 
0B2422 24 
0B2423 0B 
0B2424 CD    0326** CALL    ADD_             ;HLH'L'=HLH'L'+DED'E'
0B2425 6B 
0B2426 2E 
0B2427 0B 
0B2428 DC    0327** CALL    C,DIV2          ;NORMALISE
0B2429 E0 
0B242A 2D 
0B242B 0B 
0B242C CB    0328** SET     7,H
0B242D FC 
0B242E 18    0329** JR      FADD4
0B242F 0D 
             0330** ;
0B2430 CD    0331** FADD3:			CALL    SUB_             ;HLH'L'=HLH'L'-DED'E'
0B2431 73 
0B2432 2E 
0B2433 0B 
0B2434 DC    0332** CALL    C,NEG_           ;NEGATE HLH'L'B'C'
0B2435 F3 
0B2436 2C 
0B2437 0B 
0B2438 CD    0333** CALL    FLO48
0B2439 72 
0B243A 2D 
0B243B 0B 
0B243C 2F    0334** CPL                     ;CHANGE RESULT SIGN
0B243D D9    0335** FADD4:			EXX
0B243E EB    0336** EX      DE,HL
0B243F 21    0337** LD      HL,8000H
0B2440 00 
0B2441 80 
0B2442 00 
0B2443 B7    0338** OR      A               ;CLEAR CARRY
0B2444 52    0339** SBC.S   HL,BC
0B2445 ED 
0B2446 42 
0B2447 EB    0340** EX      DE,HL
0B2448 D9    0341** EXX
0B2449 CC    0342** CALL    Z,ODD           ;ROUND UNBIASSED
0B244A D2 
0B244B 2D 
0B244C 0B 
0B244D DC    0343** CALL    C,ADD1_FP          ;ROUND UP
0B244E C0 
0B244F 2D 
0B2450 0B 
0B2451 DC    0344** CALL    C,INCC
0B2452 ED 
0B2453 2D 
0B2454 0B 
0B2455 CB    0345** RES     7,H
0B2456 BC 
0B2457 0D    0346** DEC     C
0B2458 0C    0347** INC     C
0B2459 CA    0348** JP      Z,ZERO_FP
0B245A 24 
0B245B 2E 
0B245C 0B 
0B245D B7    0349** OR      A               ;RESULT SIGNQ
0B245E F0    0350** RET     P               ;POSITIVE
0B245F CB    0351** SET     7,H             ;NEGATIVE
0B2460 FC 
0B2461 C9    0352** RET
             0353** ;
             0354** ;IDIV - Integer division.
             0355** ;FDIV - Floating point division with rounding.
             0356** ;
0B2462 CD    0357** IDIV:			CALL    FLOAT2
0B2463 9B 
0B2464 2D 
0B2465 0B 
0B2466 05    0358** FDIV:			DEC     B               ;TEST FOR ZERO
0B2467 04    0359** INC     B
0B2468 3E    0360** LD      A,DIVBY0
0B2469 12 
0B246A CA    0361** JP      Z,ERROR_FP_         ;"Division by zero"
0B246B 7E 
0B246C 22 
0B246D 0B 
0B246E 0D    0362** DEC     C               ;TEST FOR ZERO
0B246F 0C    0363** INC     C
0B2470 C8    0364** RET     Z
0B2471 7C    0365** LD      A,H
0B2472 AA    0366** XOR     D               ;CALC. RESULT SIGN
0B2473 08    0367** EX      AF,AF'          ;SAVE SIGN
0B2474 CB    0368** SET     7,D             ;REPLACE IMPLIED 1's
0B2475 FA 
0B2476 CB    0369** SET     7,H
0B2477 FC 
0B2478 C5    0370** PUSH    BC              ;SAVE EXPONENTS
0B2479 42    0371** LD      B,D             ;LOAD REGISTERS
0B247A 4B    0372** LD      C,E
0B247B 11    0373** LD      DE,0
0B247C 00 
0B247D 00 
0B247E 00 
0B247F D9    0374** EXX
0B2480 42    0375** LD      B,D
0B2481 4B    0376** LD      C,E
0B2482 11    0377** LD      DE,0
0B2483 00 
0B2484 00 
0B2485 00 
0B2486 3E    0378** LD      A,-32           ;LOOP COUNTER
0B2487 E0 
0B2488 CD    0379** CALL    DIVA            ;DIVIDE
0B2489 65 
0B248A 2F 
0B248B 0B 
0B248C D9    0380** EXX
0B248D CB    0381** BIT     7,D
0B248E 7A 
0B248F D9    0382** EXX
0B2490 CC    0383** CALL    Z,DIVB          ;NORMALISE & INC A
0B2491 84 
0B2492 2F 
0B2493 0B 
0B2494 EB    0384** EX      DE,HL
0B2495 D9    0385** EXX
0B2496 CB    0386** SRL     B               ;DIVISOR/2
0B2497 38 
0B2498 CB    0387** RR      C
0B2499 19 
0B249A B7    0388** OR      A               ;CLEAR CARRY
0B249B 52    0389** SBC.S   HL,BC           ;REMAINDER-DIVISOR/2
0B249C ED 
0B249D 42 
0B249E 3F    0390** CCF
0B249F EB    0391** EX      DE,HL           ;RESULT IN HLH'L'
0B24A0 CC    0392** CALL    Z,ODD           ;ROUND UNBIASSED
0B24A1 D2 
0B24A2 2D 
0B24A3 0B 
0B24A4 DC    0393** CALL    C,ADD1_FP          ;ROUND UP
0B24A5 C0 
0B24A6 2D 
0B24A7 0B 
0B24A8 C1    0394** POP     BC              ;RESTORE EXPONENTS
0B24A9 DC    0395** CALL    C,INCC
0B24AA ED 
0B24AB 2D 
0B24AC 0B 
0B24AD 1F    0396** RRA                     ;LSB OF A TO CARRY
0B24AE 79    0397** LD      A,C             ;COMPUTE NEW EXPONENT
0B24AF 98    0398** SBC     A,B
0B24B0 3F    0399** CCF
0B24B1 C3    0400** JP      CHKOVF
0B24B2 52 
0B24B3 25 
0B24B4 0B 
             0401** ;
             0402** ;IMUL - Integer multiplication.
             0403** ;
0B24B5 7C    0404** IMUL:			LD      A,H
0B24B6 AA    0405** XOR     D
0B24B7 08    0406** EX      AF,AF'          ;SAVE RESULT SIGN
0B24B8 CB    0407** BIT     7,H
0B24B9 7C 
0B24BA C4    0408** CALL    NZ,NEGATE
0B24BB DB 
0B24BC 2C 
0B24BD 0B 
0B24BE CD    0409** CALL    SWAP_FP
0B24BF D8 
0B24C0 2D 
0B24C1 0B 
0B24C2 CB    0410** BIT     7,H
0B24C3 7C 
0B24C4 C4    0411** CALL    NZ,NEGATE
0B24C5 DB 
0B24C6 2C 
0B24C7 0B 
0B24C8 44    0412** LD      B,H
0B24C9 4D    0413** LD      C,L
0B24CA 21    0414** LD      HL,0
0B24CB 00 
0B24CC 00 
0B24CD 00 
0B24CE D9    0415** EXX
0B24CF 44    0416** LD      B,H
0B24D0 4D    0417** LD      C,L
0B24D1 21    0418** LD      HL,0
0B24D2 00 
0B24D3 00 
0B24D4 00 
0B24D5 3E    0419** LD      A,-33
0B24D6 DF 
0B24D7 CD    0420** CALL    MULA            ;MULTIPLY
0B24D8 9C 
0B24D9 2F 
0B24DA 0B 
0B24DB D9    0421** EXX
0B24DC 0E    0422** LD      C,191           ;PRESET EXPONENT
0B24DD BF 
0B24DE CD    0423** CALL    TEST_FP            ;TEST RANGE
0B24DF 00 
0B24E0 2E 
0B24E1 0B 
0B24E2 20    0424** JR      NZ,IMUL1        ;TOO BIG
0B24E3 0F 
0B24E4 CB    0425** BIT     7,D
0B24E5 7A 
0B24E6 20    0426** JR      NZ,IMUL1
0B24E7 0B 
0B24E8 CD    0427** CALL    SWAP_FP
0B24E9 D8 
0B24EA 2D 
0B24EB 0B 
0B24EC 4A    0428** LD      C,D             ;INTEGER MARKER
0B24ED 08    0429** EX      AF,AF'
0B24EE F0    0430** RET     P
0B24EF C3    0431** JP      NEGATE
0B24F0 DB 
0B24F1 2C 
0B24F2 0B 
             0432** ;
0B24F3 0D    0433** IMUL1:			DEC     C
0B24F4 D9    0434** EXX
0B24F5 CB    0435** SLA     E
0B24F6 23 
0B24F7 CB    0436** RL      D
0B24F8 12 
0B24F9 D9    0437** EXX
0B24FA CB    0438** RL      E
0B24FB 13 
0B24FC CB    0439** RL      D
0B24FD 12 
0B24FE D9    0440** EXX
0B24FF 52    0441** ADC.S   HL,HL
0B2500 ED 
0B2501 6A 
0B2502 D9    0442** EXX
0B2503 52    0443** ADC.S   HL,HL
0B2504 ED 
0B2505 6A 
0B2506 F2    0444** JP      P,IMUL1         ;NORMALISE
0B2507 F3 
0B2508 24 
0B2509 0B 
0B250A 08    0445** EX      AF,AF'
0B250B F8    0446** RET     M
0B250C CB    0447** RES     7,H             ;POSITIVE
0B250D BC 
0B250E C9    0448** RET
             0449** ;
             0450** ;FMUL - Floating point multiplication with rounding.
             0451** ;
0B250F 05    0452** FMUL:			DEC     B               ;TEST FOR ZERO
0B2510 04    0453** INC     B
0B2511 CA    0454** JP      Z,ZERO_FP
0B2512 24 
0B2513 2E 
0B2514 0B 
0B2515 0D    0455** DEC     C               ;TEST FOR ZERO
0B2516 0C    0456** INC     C
0B2517 C8    0457** RET     Z
0B2518 7C    0458** LD      A,H
0B2519 AA    0459** XOR     D               ;CALC. RESULT SIGN
0B251A 08    0460** EX      AF,AF'
0B251B CB    0461** SET     7,D             ;REPLACE IMPLIED 1's
0B251C FA 
0B251D CB    0462** SET     7,H
0B251E FC 
0B251F C5    0463** PUSH    BC              ;SAVE EXPONENTS
0B2520 44    0464** LD      B,H             ;LOAD REGISTERS
0B2521 4D    0465** LD      C,L
0B2522 21    0466** LD      HL,0
0B2523 00 
0B2524 00 
0B2525 00 
0B2526 D9    0467** EXX
0B2527 44    0468** LD      B,H
0B2528 4D    0469** LD      C,L
0B2529 21    0470** LD      HL,0
0B252A 00 
0B252B 00 
0B252C 00 
0B252D 3E    0471** LD      A,-32           ;LOOP COUNTER
0B252E E0 
0B252F CD    0472** CALL    MULA            ;MULTIPLY
0B2530 9C 
0B2531 2F 
0B2532 0B 
0B2533 DC    0473** CALL    C,MULB          ;NORMALISE & INC A
0B2534 B2 
0B2535 2F 
0B2536 0B 
0B2537 D9    0474** EXX
0B2538 E5    0475** PUSH    HL
0B2539 21    0476** LD      HL,8000H
0B253A 00 
0B253B 80 
0B253C 00 
0B253D B7    0477** OR      A               ;CLEAR CARRY
0B253E 52    0478** SBC.S   HL,DE
0B253F ED 
0B2540 52 
0B2541 E1    0479** POP     HL
0B2542 CC    0480** CALL    Z,ODD           ;ROUND UNBIASSED
0B2543 D2 
0B2544 2D 
0B2545 0B 
0B2546 DC    0481** CALL    C,ADD1_FP          ;ROUND UP
0B2547 C0 
0B2548 2D 
0B2549 0B 
0B254A C1    0482** POP     BC              ;RESTORE EXPONENTS
0B254B DC    0483** CALL    C,INCC
0B254C ED 
0B254D 2D 
0B254E 0B 
0B254F 1F    0484** RRA                     ;LSB OF A TO CARRY
0B2550 79    0485** LD      A,C             ;COMPUTE NEW EXPONENT
0B2551 88    0486** ADC     A,B
0B2552 38    0487** CHKOVF:			JR      C,CHKO1
0B2553 06 
0B2554 F2    0488** JP      P,ZERO_FP          ;UNDERFLOW
0B2555 24 
0B2556 2E 
0B2557 0B 
0B2558 18    0489** JR      CHKO2
0B2559 04 
0B255A FA    0490** CHKO1:			JP      M,OFLOW         ;OVERFLOW
0B255B EF 
0B255C 2D 
0B255D 0B 
0B255E C6    0491** CHKO2:			ADD     A,80H
0B255F 80 
0B2560 4F    0492** LD      C,A
0B2561 CA    0493** JP      Z,ZERO_FP
0B2562 24 
0B2563 2E 
0B2564 0B 
0B2565 08    0494** EX      AF,AF'          ;RESTORE SIGN BIT
0B2566 CB    0495** RES     7,H
0B2567 BC 
0B2568 F0    0496** RET     P
0B2569 CB    0497** SET     7,H
0B256A FC 
0B256B C9    0498** RET
             0499** ;
             0500** ;IPOW - Integer involution.
             0501** ;
0B256C CD    0502** IPOW:			CALL    SWAP_FP
0B256D D8 
0B256E 2D 
0B256F 0B 
0B2570 CB    0503** BIT     7,H
0B2571 7C 
0B2572 F5    0504** PUSH    AF              ;SAVE SIGN
0B2573 C4    0505** CALL    NZ,NEGATE
0B2574 DB 
0B2575 2C 
0B2576 0B 
0B2577 48    0506** IPOW0:			LD      C,B
0B2578 06    0507** LD      B,32            ;LOOP COUNTER
0B2579 20 
0B257A CD    0508** IPOW1:			CALL    X2
0B257B 90 
0B257C 2E 
0B257D 0B 
0B257E 38    0509** JR      C,IPOW2
0B257F 08 
0B2580 10    0510** DJNZ    IPOW1
0B2581 F8 
0B2582 F1    0511** POP     AF
0B2583 D9    0512** EXX
0B2584 2C    0513** INC     L               ;RESULT=1
0B2585 D9    0514** EXX
0B2586 4C    0515** LD      C,H
0B2587 C9    0516** RET
             0517** ;
0B2588 F1    0518** IPOW2:			POP     AF
0B2589 C5    0519** PUSH    BC
0B258A EB    0520** EX      DE,HL
0B258B E5    0521** PUSH    HL
0B258C D9    0522** EXX
0B258D EB    0523** EX      DE,HL
0B258E E5    0524** PUSH    HL
0B258F D9    0525** EXX
0B2590 DD    0526** LD      IX,0
0B2591 21 
0B2592 00 
0B2593 00 
0B2593 00   
0B2595 DD    0527** ADD     IX,SP
0B2596 39 
0B2597 28    0528** JR      Z,IPOW4
0B2598 48 
0B2599 C5    0529** PUSH    BC
0B259A D9    0530** EXX
0B259B D5    0531** PUSH    DE
0B259C D9    0532** EXX
0B259D D5    0533** PUSH    DE
0B259E CD    0534** CALL    SFLOAT_FP
0B259F A7 
0B25A0 2D 
0B25A1 0B 
0B25A2 CD    0535** CALL    RECIP
0B25A3 DB 
0B25A4 28 
0B25A5 0B 
0B25A6 DD    0536** LD      (IX+4),C
0B25A7 71 
0B25A8 04 
0B25A9 D9    0537** EXX
0B25AA DD    0538** LD      (IX+0),L
0B25AB 75 
0B25AC 00 
0B25AD DD    0539** LD      (IX+1),H
0B25AE 74 
0B25AF 01 
0B25B0 D9    0540** EXX
0B25B1 DD    0541** LD      (IX+2),L
0B25B2 75 
0B25B3 02 
0B25B4 DD    0542** LD      (IX+3),H
0B25B5 74 
0B25B6 03 
0B25B7 18    0543** JR      IPOW5
0B25B8 21 
             0544** ;
0B25B9 C5    0545** IPOW3:			PUSH    BC
0B25BA D9    0546** EXX
0B25BB CB    0547** SLA     E
0B25BC 23 
0B25BD CB    0548** RL      D
0B25BE 12 
0B25BF D5    0549** PUSH    DE
0B25C0 D9    0550** EXX
0B25C1 CB    0551** RL      E
0B25C2 13 
0B25C3 CB    0552** RL      D
0B25C4 12 
0B25C5 D5    0553** PUSH    DE
0B25C6 3E    0554** LD      A,'*' & 0FH
0B25C7 0A 
0B25C8 F5    0555** PUSH    AF
0B25C9 CD    0556** CALL    COPY_
0B25CA A4 
0B25CB 2E 
0B25CC 0B 
0B25CD CD    0557** CALL    OP              ;SQUARE
0B25CE 84 
0B25CF 22 
0B25D0 0B 
0B25D1 F1    0558** POP     AF
0B25D2 CD    0559** CALL    DLOAD5
0B25D3 D0 
0B25D4 2B 
0B25D5 0B 
0B25D6 DC    0560** CALL    C,OP            ;MULTIPLY BY X
0B25D7 84 
0B25D8 22 
0B25D9 0B 
0B25DA D1    0561** IPOW5:			POP     DE
0B25DB D9    0562** EXX
0B25DC D1    0563** POP     DE
0B25DD D9    0564** EXX
0B25DE 79    0565** LD      A,C
0B25DF C1    0566** POP     BC
0B25E0 4F    0567** LD      C,A
0B25E1 10    0568** IPOW4:			DJNZ    IPOW3
0B25E2 D6 
0B25E3 F1    0569** POP     AF
0B25E4 F1    0570** POP     AF
0B25E5 F1    0571** POP     AF
0B25E6 C9    0572** RET
             0573** ;
0B25E7 F1    0574** FPOW0:			POP     AF
0B25E8 F1    0575** POP     AF
0B25E9 F1    0576** POP     AF
0B25EA 18    0577** JR      IPOW0
0B25EB 8B 
             0578** ;
             0579** ;FPOW - Floating-point involution.
             0580** ;
0B25EC CB    0581** FPOW:			BIT     7,D
0B25ED 7A 
0B25EE F5    0582** PUSH    AF
0B25EF CD    0583** CALL    SWAP_FP
0B25F0 D8 
0B25F1 2D 
0B25F2 0B 
0B25F3 CD    0584** CALL    PUSH5
0B25F4 B4 
0B25F5 2E 
0B25F6 0B 
0B25F7 0D    0585** DEC     C
0B25F8 0C    0586** INC     C
0B25F9 28    0587** JR      Z,FPOW0
0B25FA EC 
0B25FB 3E    0588** LD      A,158
0B25FC 9E 
0B25FD B9    0589** CP      C
0B25FE 38    0590** JR      C,FPOW1
0B25FF 0A 
0B2600 3C    0591** INC     A
0B2601 CD    0592** CALL    FIX
0B2602 AC 
0B2603 2C 
0B2604 0B 
0B2605 08    0593** EX      AF,AF'
0B2606 F2    0594** JP      P,FPOW0
0B2607 E7 
0B2608 25 
0B2609 0B 
0B260A CD    0595** FPOW1:			CALL    SWAP_FP
0B260B D8 
0B260C 2D 
0B260D 0B 
0B260E CD    0596** CALL    LN0
0B260F F8 
0B2610 28 
0B2611 0B 
0B2612 CD    0597** CALL    POP5
0B2613 BD 
0B2614 2E 
0B2615 0B 
0B2616 F1    0598** POP     AF
0B2617 CD    0599** CALL    FMUL
0B2618 0F 
0B2619 25 
0B261A 0B 
0B261B C3    0600** JP      EXP0
0B261C 5A 
0B261D 28 
0B261E 0B 
             0601** ;
             0602** ;Integer and floating-point compare.
             0603** ;Result is TRUE (-1) or FALSE (0).
             0604** ;
0B261F CD    0605** FLT:			CALL    FCP
0B2620 2E 
0B2621 2E 
0B2622 0B 
0B2623 18    0606** JR      ILT1
0B2624 04 
0B2625 CD    0607** ILT:			CALL    ICP
0B2626 20 
0B2627 2E 
0B2628 0B 
0B2629 D0    0608** ILT1:			RET     NC
0B262A 18    0609** JR      TRUE_FP
0B262B 42 
             0610** ;
0B262C CD    0611** FGT:			CALL    FCP
0B262D 2E 
0B262E 2E 
0B262F 0B 
0B2630 18    0612** JR      IGT1
0B2631 04 
0B2632 CD    0613** IGT:			CALL    ICP
0B2633 20 
0B2634 2E 
0B2635 0B 
0B2636 C8    0614** IGT1:			RET     Z
0B2637 D8    0615** RET     C
0B2638 18    0616** JR      TRUE_FP
0B2639 34 
             0617** ;
0B263A CD    0618** FGE:			CALL    FCP
0B263B 2E 
0B263C 2E 
0B263D 0B 
0B263E 18    0619** JR      IGE1
0B263F 04 
0B2640 CD    0620** IGE:			CALL    ICP
0B2641 20 
0B2642 2E 
0B2643 0B 
0B2644 D8    0621** IGE1:			RET     C
0B2645 18    0622** JR      TRUE_FP
0B2646 27 
             0623** ;
0B2647 CD    0624** FLE:			CALL    FCP
0B2648 2E 
0B2649 2E 
0B264A 0B 
0B264B 18    0625** JR      ILE1
0B264C 04 
0B264D CD    0626** ILE:			CALL    ICP
0B264E 20 
0B264F 2E 
0B2650 0B 
0B2651 28    0627** ILE1:			JR      Z,TRUE_FP
0B2652 1B 
0B2653 D0    0628** RET     NC
0B2654 18    0629** JR      TRUE_FP
0B2655 18 
             0630** ;
0B2656 CD    0631** FNE:			CALL    FCP
0B2657 2E 
0B2658 2E 
0B2659 0B 
0B265A 18    0632** JR      INE1
0B265B 04 
0B265C CD    0633** INE:			CALL    ICP
0B265D 20 
0B265E 2E 
0B265F 0B 
0B2660 C8    0634** INE1:			RET     Z
0B2661 18    0635** JR      TRUE_FP
0B2662 0B 
             0636** ;
0B2663 CD    0637** FEQ:			CALL    FCP
0B2664 2E 
0B2665 2E 
0B2666 0B 
0B2667 18    0638** JR      IEQ1
0B2668 04 
0B2669 CD    0639** IEQ:			CALL    ICP
0B266A 20 
0B266B 2E 
0B266C 0B 
0B266D C0    0640** IEQ1:			RET     NZ
0B266E 21    0641** TRUE_FP:			LD      HL,-1
0B266F FF 
0B2670 FF 
0B2671 FF 
0B2672 D9    0642** EXX
0B2673 21    0643** LD      HL,-1
0B2674 FF 
0B2675 FF 
0B2676 FF 
0B2677 D9    0644** EXX
0B2678 AF    0645** XOR     A
0B2679 4F    0646** LD      C,A
0B267A C9    0647** RET
             0648** ;
             0649** ;FUNCTIONS:
             0650** ;
             0651** ;Result returned in HLH'L'C (floating point)
             0652** ;Result returned in HLH'L' (C=0) (integer)
             0653** ;All registers except IY destroyed.
             0654** ;
             0655** ;ABS - Absolute value
             0656** ;Result is numeric, variable type.
             0657** ;
0B267B CB    0658** ABSV_FP:			BIT     7,H
0B267C 7C 
0B267D C8    0659** RET     Z               ;POSITIVE/ZERO
0B267E 0D    0660** DEC     C
0B267F 0C    0661** INC     C
0B2680 CA    0662** JP      Z,NEGATE        ;INTEGER
0B2681 DB 
0B2682 2C 
0B2683 0B 
0B2684 CB    0663** RES     7,H
0B2685 BC 
0B2686 C9    0664** RET
             0665** ;
             0666** ;NOT - Complement integer.
             0667** ;Result is integer numeric.
             0668** ;
0B2687 CD    0669** NOTK_FP:			CALL    SFIX_FP
0B2688 CB 
0B2689 2C 
0B268A 0B 
0B268B 7C    0670** LD      A,H
0B268C 2F    0671** CPL
0B268D 67    0672** LD      H,A
0B268E 7D    0673** LD      A,L
0B268F 2F    0674** CPL
0B2690 6F    0675** LD      L,A
0B2691 D9    0676** EXX
0B2692 7C    0677** LD      A,H
0B2693 2F    0678** CPL
0B2694 67    0679** LD      H,A
0B2695 7D    0680** LD      A,L
0B2696 2F    0681** CPL
0B2697 6F    0682** LD      L,A
0B2698 D9    0683** EXX
0B2699 AF    0684** XOR     A               ;NUMERIC MARKER
0B269A C9    0685** RET
             0686** ;
             0687** ;PI - Return PI (3.141592654)
             0688** ;Result is floating-point numeric.
             0689** ;
0B269B 21    0690** PI_FP:			LD      HL,490FH
0B269C 0F 
0B269D 49 
0B269E 00 
0B269F D9    0691** EXX
0B26A0 21    0692** LD      HL,0DAA2H
0B26A1 A2 
0B26A2 DA 
0B26A3 00 
0B26A4 D9    0693** EXX
0B26A5 0E    0694** LD      C,81H
0B26A6 81 
0B26A7 AF    0695** XOR     A               ;NUMERIC MARKER
0B26A8 C9    0696** RET
             0697** ;
             0698** ;DEG - Convert radians to degrees
             0699** ;Result is floating-point numeric.
             0700** ;
0B26A9 CD    0701** DEG_FP:			CALL    FPI180
0B26AA BD 
0B26AB 26 
0B26AC 0B 
0B26AD CD    0702** CALL    FMUL
0B26AE 0F 
0B26AF 25 
0B26B0 0B 
0B26B1 AF    0703** XOR     A
0B26B2 C9    0704** RET
             0705** ;
             0706** ;RAD - Convert degrees to radians
             0707** ;Result is floating-point numeric.
             0708** ;
0B26B3 CD    0709** RAD_FP:			CALL    FPI180
0B26B4 BD 
0B26B5 26 
0B26B6 0B 
0B26B7 CD    0710** CALL    FDIV
0B26B8 66 
0B26B9 24 
0B26BA 0B 
0B26BB AF    0711** XOR     A
0B26BC C9    0712** RET
             0713** ;
             0714** ;180/PI
             0715** ;
0B26BD CD    0716** FPI180:			CALL    SFLOAT_FP
0B26BE A7 
0B26BF 2D 
0B26C0 0B 
0B26C1 11    0717** LD      DE,652EH
0B26C2 2E 
0B26C3 65 
0B26C4 00 
0B26C5 D9    0718** EXX
0B26C6 11    0719** LD      DE,0E0D3H
0B26C7 D3 
0B26C8 E0 
0B26C9 00 
0B26CA D9    0720** EXX
0B26CB 06    0721** LD      B,85H
0B26CC 85 
0B26CD C9    0722** RET
             0723** ;
             0724** ;SGN - Return -1, 0 or +1
             0725** ;Result is integer numeric.
             0726** ;
0B26CE CD    0727** SGN_FP:			CALL    TEST_FP
0B26CF 00 
0B26D0 2E 
0B26D1 0B 
0B26D2 B1    0728** OR      C
0B26D3 C8    0729** RET     Z               ;ZERO
0B26D4 CB    0730** BIT     7,H
0B26D5 7C 
0B26D6 C2    0731** JP      NZ,TRUE_FP         ;-1
0B26D7 6E 
0B26D8 26 
0B26D9 0B 
0B26DA CD    0732** CALL    ZERO_FP
0B26DB 24 
0B26DC 2E 
0B26DD 0B 
0B26DE C3    0733** JP      ADD1_FP            ;1
0B26DF C0 
0B26E0 2D 
0B26E1 0B 
             0734** ;
             0735** ;VAL - Return numeric value of string.
             0736** ;Input: ASCII string at IX
             0737** ;Result is variable type numeric.
             0738** ;
0B26E2 CD    0739** VAL_FP:			CALL    SIGNQ
0B26E3 3E 
0B26E4 30 
0B26E5 0B 
0B26E6 F5    0740** PUSH    AF
0B26E7 CD    0741** CALL    CON_FP
0B26E8 EE 
0B26E9 2B 
0B26EA 0B 
0B26EB F1    0742** POP     AF
0B26EC FE    0743** CP      '-'
0B26ED 2D 
0B26EE 3E    0744** LD      A,0             ;NUMERIC MARKER
0B26EF 00 
0B26F0 C0    0745** RET     NZ
0B26F1 0D    0746** DEC     C
0B26F2 0C    0747** INC     C
0B26F3 CA    0748** JP      Z,NEGATE        ;ZERO/INTEGER
0B26F4 DB 
0B26F5 2C 
0B26F6 0B 
0B26F7 7C    0749** LD      A,H
0B26F8 EE    0750** XOR     80H             ;CHANGE SIGN (FP)
0B26F9 80 
0B26FA 67    0751** LD      H,A
0B26FB AF    0752** XOR     A
0B26FC C9    0753** RET
             0754** ;
             0755** ;INT - Floor function
             0756** ;Result is integer numeric.
             0757** ;
0B26FD 0D    0758** INT_FP_:			DEC     C
0B26FE 0C    0759** INC     C
0B26FF C8    0760** RET     Z               ;ZERO/INTEGER
0B2700 3E    0761** LD      A,159
0B2701 9F 
0B2702 44    0762** LD      B,H             ;B7=SIGN BIT
0B2703 CD    0763** CALL    FIX
0B2704 AC 
0B2705 2C 
0B2706 0B 
0B2707 08    0764** EX      AF,AF'
0B2708 A0    0765** AND     B
0B2709 FC    0766** CALL    M,ADD1_FP          ;NEGATIVE NON-INTEGER
0B270A C0 
0B270B 2D 
0B270C 0B 
0B270D 78    0767** LD      A,B
0B270E B7    0768** OR      A
0B270F FC    0769** CALL    M,NEGATE
0B2710 DB 
0B2711 2C 
0B2712 0B 
0B2713 AF    0770** XOR     A
0B2714 4F    0771** LD      C,A
0B2715 C9    0772** RET
             0773** ;
             0774** ;SQR - square root
             0775** ;Result is floating-point numeric.
             0776** ;
0B2716 CD    0777** SQR_FP:			CALL    SFLOAT_FP
0B2717 A7 
0B2718 2D 
0B2719 0B 
0B271A CB    0778** SQR0:			BIT     7,H
0B271B 7C 
0B271C 3E    0779** LD      A,NGROOT
0B271D 15 
0B271E C2    0780** JP      NZ,ERROR_FP_        ;"-ve root"
0B271F 7E 
0B2720 22 
0B2721 0B 
0B2722 0D    0781** DEC     C
0B2723 0C    0782** INC     C
0B2724 C8    0783** RET     Z               ;ZERO
0B2725 CB    0784** SET     7,H             ;IMPLIED 1
0B2726 FC 
0B2727 CB    0785** BIT     0,C
0B2728 41 
0B2729 CC    0786** CALL    Z,DIV2          ;MAKE EXPONENT ODD
0B272A E0 
0B272B 2D 
0B272C 0B 
0B272D 79    0787** LD      A,C
0B272E D6    0788** SUB     80H
0B272F 80 
0B2730 CB    0789** SRA     A               ;HALVE EXPONENT
0B2731 2F 
0B2732 C6    0790** ADD     A,80H
0B2733 80 
0B2734 4F    0791** LD      C,A
0B2735 C5    0792** PUSH    BC              ;SAVE EXPONENT
0B2736 EB    0793** EX      DE,HL
0B2737 21    0794** LD      HL,0
0B2738 00 
0B2739 00 
0B273A 00 
0B273B 44    0795** LD      B,H
0B273C 4D    0796** LD      C,L
0B273D D9    0797** EXX
0B273E EB    0798** EX      DE,HL
0B273F 21    0799** LD      HL,0
0B2740 00 
0B2741 00 
0B2742 00 
0B2743 44    0800** LD      B,H
0B2744 4D    0801** LD      C,L
0B2745 3E    0802** LD      A,-31
0B2746 E1 
0B2747 CD    0803** CALL    SQRA            ;ROOT
0B2748 D6 
0B2749 2F 
0B274A 0B 
0B274B D9    0804** EXX
0B274C CB    0805** BIT     7,B
0B274D 78 
0B274E D9    0806** EXX
0B274F CC    0807** CALL    Z,SQRA          ;NORMALISE & INC A
0B2750 D6 
0B2751 2F 
0B2752 0B 
0B2753 CD    0808** CALL    SQRB
0B2754 17 
0B2755 30 
0B2756 0B 
0B2757 B7    0809** OR      A               ;CLEAR CARRY
0B2758 CD    0810** CALL    DIVB
0B2759 84 
0B275A 2F 
0B275B 0B 
0B275C CB    0811** RR      E               ;LSB TO CARRY
0B275D 1B 
0B275E 60    0812** LD      H,B
0B275F 69    0813** LD      L,C
0B2760 D9    0814** EXX
0B2761 60    0815** LD      H,B
0B2762 69    0816** LD      L,C
0B2763 DC    0817** CALL    C,ADD1_FP          ;ROUND UP
0B2764 C0 
0B2765 2D 
0B2766 0B 
0B2767 C1    0818** POP     BC              ;RESTORE EXPONENT
0B2768 DC    0819** CALL    C,INCC
0B2769 ED 
0B276A 2D 
0B276B 0B 
0B276C 1F    0820** RRA
0B276D 9F    0821** SBC     A,A
0B276E 81    0822** ADD     A,C
0B276F 4F    0823** LD      C,A
0B2770 CB    0824** RES     7,H             ;POSITIVE
0B2771 BC 
0B2772 AF    0825** XOR     A
0B2773 C9    0826** RET
             0827** ;
             0828** ;TAN - Tangent function
             0829** ;Result is floating-point numeric.
             0830** ;
0B2774 CD    0831** TAN_FP:			CALL    SFLOAT_FP
0B2775 A7 
0B2776 2D 
0B2777 0B 
0B2778 CD    0832** CALL    PUSH5
0B2779 B4 
0B277A 2E 
0B277B 0B 
0B277C CD    0833** CALL    COS0
0B277D 9E 
0B277E 27 
0B277F 0B 
0B2780 CD    0834** CALL    POP5
0B2781 BD 
0B2782 2E 
0B2783 0B 
0B2784 CD    0835** CALL    PUSH5
0B2785 B4 
0B2786 2E 
0B2787 0B 
0B2788 CD    0836** CALL    SWAP_FP
0B2789 D8 
0B278A 2D 
0B278B 0B 
0B278C CD    0837** CALL    SIN0
0B278D AB 
0B278E 27 
0B278F 0B 
0B2790 CD    0838** CALL    POP5
0B2791 BD 
0B2792 2E 
0B2793 0B 
0B2794 CD    0839** CALL    FDIV
0B2795 66 
0B2796 24 
0B2797 0B 
0B2798 AF    0840** XOR     A               ;NUMERIC MARKER
0B2799 C9    0841** RET
             0842** ;
             0843** ;COS - Cosine function
             0844** ;Result is floating-point numeric.
             0845** ;
0B279A CD    0846** COS_FP:			CALL    SFLOAT_FP
0B279B A7 
0B279C 2D 
0B279D 0B 
0B279E CD    0847** COS0:			CALL    SCALE
0B279F 03 
0B27A0 2D 
0B27A1 0B 
0B27A2 1C    0848** INC     E
0B27A3 1C    0849** INC     E
0B27A4 7B    0850** LD      A,E
0B27A5 18    0851** JR      SIN1
0B27A6 10 
             0852** ;
             0853** ;SIN - Sine function
             0854** ;Result is floating-point numeric.
             0855** ;
0B27A7 CD    0856** SIN_FP:			CALL    SFLOAT_FP
0B27A8 A7 
0B27A9 2D 
0B27AA 0B 
0B27AB E5    0857** SIN0:			PUSH    HL              ;H7=SIGN
0B27AC CD    0858** CALL    SCALE
0B27AD 03 
0B27AE 2D 
0B27AF 0B 
0B27B0 F1    0859** POP     AF
0B27B1 07    0860** RLCA
0B27B2 07    0861** RLCA
0B27B3 07    0862** RLCA
0B27B4 E6    0863** AND     4
0B27B5 04 
0B27B6 AB    0864** XOR     E
0B27B7 F5    0865** SIN1:			PUSH    AF              ;OCTANT
0B27B8 CB    0866** RES     7,H
0B27B9 BC 
0B27BA 1F    0867** RRA
0B27BB CD    0868** CALL    PIBY4
0B27BC 49 
0B27BD 28 
0B27BE 0B 
0B27BF DC    0869** CALL    C,RSUB          ;X=(PI/4)-X
0B27C0 EA 
0B27C1 23 
0B27C2 0B 
0B27C3 F1    0870** POP     AF
0B27C4 F5    0871** PUSH    AF
0B27C5 E6    0872** AND     3
0B27C6 03 
0B27C7 E2    0873** JP      PO,SIN2         ;USE COSINE APPROX.
0B27C8 00 
0B27C9 28 
0B27CA 0B 
0B27CB CD    0874** CALL    PUSH5           ;SAVE X
0B27CC B4 
0B27CD 2E 
0B27CE 0B 
0B27CF CD    0875** CALL    SQUARE          ;PUSH X*X
0B27D0 AC 
0B27D1 2E 
0B27D2 0B 
0B27D3 CD    0876** CALL    POLY
0B27D4 F1 
0B27D5 2E 
0B27D6 0B 
0B27D7 B7    0877** DW	0A8B7H          ;a(8)
0B27D8 A8 
0B27D9 11    0878** DW	3611H
0B27DA 36 
0B27DB 6D    0879** DB	6DH
0B27DC 26    0880** DW	0DE26H          ;a(6)
0B27DD DE 
0B27DE 05    0881** DW	0D005H
0B27DF D0 
0B27E0 73    0882** DB	73H
0B27E1 C0    0883** DW	80C0H           ;a(4)
0B27E2 80 
0B27E3 88    0884** DW	888H
0B27E4 08 
0B27E5 79    0885** DB	79H
0B27E6 9D    0886** DW	0AA9DH          ;a(2)
0B27E7 AA 
0B27E8 AA    0887** DW	0AAAAH
0B27E9 AA 
0B27EA 7D    0888** DB	7DH
0B27EB 00    0889** DW	0               ;a(0)
0B27EC 00 
0B27ED 00    0890** DW	0
0B27EE 00 
0B27EF 80    0891** DB	80H
0B27F0 CD    0892** CALL    POP5
0B27F1 BD 
0B27F2 2E 
0B27F3 0B 
0B27F4 CD    0893** CALL    POP5
0B27F5 BD 
0B27F6 2E 
0B27F7 0B 
0B27F8 CD    0894** CALL    FMUL
0B27F9 0F 
0B27FA 25 
0B27FB 0B 
0B27FC C3    0895** JP      SIN3
0B27FD 25 
0B27FE 28 
0B27FF 0B 
             0896** ;
0B2800 CD    0897** SIN2:			CALL    SQUARE          ;PUSH X*X
0B2801 AC 
0B2802 2E 
0B2803 0B 
0B2804 CD    0898** CALL    POLY
0B2805 F1 
0B2806 2E 
0B2807 0B 
0B2808 71    0899** DW	0D571H          ;b(8)
0B2809 D5 
0B280A 78    0900** DW	4C78H
0B280B 4C 
0B280C 70    0901** DB	70H
0B280D AF    0902** DW	94AFH           ;b(6)
0B280E 94 
0B280F 03    0903** DW	0B603H
0B2810 B6 
0B2811 76    0904** DB	76H
0B2812 C8    0905** DW	9CC8H           ;b(4)
0B2813 9C 
0B2814 AA    0906** DW	2AAAH
0B2815 2A 
0B2816 7B    0907** DB	7BH
0B2817 DD    0908** DW	0FFDDH          ;b(2)
0B2818 FF 
0B2819 FF    0909** DW	0FFFFH
0B281A FF 
0B281B 7E    0910** DB	7EH
0B281C 00    0911** DW	0               ;b(0)
0B281D 00 
0B281E 00    0912** DW	0
0B281F 00 
0B2820 80    0913** DB	80H
0B2821 CD    0914** CALL    POP5
0B2822 BD 
0B2823 2E 
0B2824 0B 
0B2825 F1    0915** SIN3:			POP     AF
0B2826 E6    0916** AND     4
0B2827 04 
0B2828 C8    0917** RET     Z
0B2829 0D    0918** DEC     C
0B282A 0C    0919** INC     C
0B282B C8    0920** RET     Z               ;ZERO
0B282C CB    0921** SET     7,H             ;MAKE NEGATIVE
0B282D FC 
0B282E C9    0922** RET
             0923** ;
             0924** ;Floating-point one:
             0925** ;
0B282F 21    0926** FONE_FP:			LD      HL,0
0B2830 00 
0B2831 00 
0B2832 00 
0B2833 D9    0927** EXX
0B2834 21    0928** LD      HL,0
0B2835 00 
0B2836 00 
0B2837 00 
0B2838 D9    0929** EXX
0B2839 0E    0930** LD      C,80H
0B283A 80 
0B283B C9    0931** RET
             0932** ;
0B283C 11    0933** DONE:			LD      DE,0
0B283D 00 
0B283E 00 
0B283F 00 
0B2840 D9    0934** EXX
0B2841 11    0935** LD      DE,0
0B2842 00 
0B2843 00 
0B2844 00 
0B2845 D9    0936** EXX
0B2846 06    0937** LD      B,80H
0B2847 80 
0B2848 C9    0938** RET
             0939** ;
0B2849 11    0940** PIBY4:			LD      DE,490FH
0B284A 0F 
0B284B 49 
0B284C 00 
0B284D D9    0941** EXX
0B284E 11    0942** LD      DE,0DAA2H
0B284F A2 
0B2850 DA 
0B2851 00 
0B2852 D9    0943** EXX
0B2853 06    0944** LD      B,7FH
0B2854 7F 
0B2855 C9    0945** RET
             0946** ;
             0947** ;EXP - Exponential function
             0948** ;Result is floating-point numeric.
             0949** ;
0B2856 CD    0950** EXP_FP:			CALL    SFLOAT_FP
0B2857 A7 
0B2858 2D 
0B2859 0B 
0B285A CD    0951** EXP0:			CALL    LN2             ;LN(2)
0B285B E7 
0B285C 28 
0B285D 0B 
0B285E D9    0952** EXX
0B285F 1D    0953** DEC     E
0B2860 01    0954** LD      BC,0D1CFH       ;0.6931471805599453
0B2861 CF 
0B2862 D1 
0B2863 00 
0B2864 D9    0955** EXX
0B2865 E5    0956** PUSH    HL              ;H7=SIGN
0B2866 CD    0957** CALL    MOD48           ;"MODULUS"
0B2867 16 
0B2868 2D 
0B2869 0B 
0B286A F1    0958** POP     AF
0B286B CB    0959** BIT     7,E
0B286C 7B 
0B286D 28    0960** JR      Z,EXP1
0B286E 0B 
0B286F 17    0961** RLA
0B2870 DA    0962** JP      C,ZERO_FP
0B2871 24 
0B2872 2E 
0B2873 0B 
0B2874 3E    0963** LD      A,EXPRNG
0B2875 18 
0B2876 C3    0964** JP      ERROR_FP_           ;"Exp range"
0B2877 7E 
0B2878 22 
0B2879 0B 
             0965** ;
0B287A E6    0966** EXP1:			AND     80H
0B287B 80 
0B287C B3    0967** OR      E
0B287D F5    0968** PUSH    AF              ;INTEGER PART
0B287E CB    0969** RES     7,H
0B287F BC 
0B2880 CD    0970** CALL    PUSH5           ;PUSH X*LN(2)
0B2881 B4 
0B2882 2E 
0B2883 0B 
0B2884 CD    0971** CALL    POLY
0B2885 F1 
0B2886 2E 
0B2887 0B 
0B2888 72    0972** DW	4072H           ;a(7)
0B2889 40 
0B288A 2E    0973** DW	942EH
0B288B 94 
0B288C 73    0974** DB	73H
0B288D 65    0975** DW	6F65H           ;a(6)
0B288E 6F 
0B288F 4F    0976** DW	2E4FH
0B2890 2E 
0B2891 76    0977** DB	76H
0B2892 37    0978** DW	6D37H           ;a(5)
0B2893 6D 
0B2894 02    0979** DW	8802H
0B2895 88 
0B2896 79    0980** DB	79H
0B2897 12    0981** DW	0E512H          ;a(4)
0B2898 E5 
0B2899 A0    0982** DW	2AA0H
0B289A 2A 
0B289B 7B    0983** DB	7BH
0B289C 14    0984** DW	4F14H           ;a(3)
0B289D 4F 
0B289E AA    0985** DW	0AAAAH
0B289F AA 
0B28A0 7D    0986** DB	7DH
0B28A1 56    0987** DW	0FD56H          ;a(2)
0B28A2 FD 
0B28A3 FF    0988** DW	7FFFH
0B28A4 7F 
0B28A5 7E    0989** DB	7EH
0B28A6 FE    0990** DW	0FFFEH          ;a(1)
0B28A7 FF 
0B28A8 FF    0991** DW	0FFFFH
0B28A9 FF 
0B28AA 7F    0992** DB	7FH
0B28AB 00    0993** DW	0               ;a(0)
0B28AC 00 
0B28AD 00    0994** DW	0
0B28AE 00 
0B28AF 80    0995** DB	80H
0B28B0 CD    0996** CALL    POP5
0B28B1 BD 
0B28B2 2E 
0B28B3 0B 
0B28B4 F1    0997** POP     AF
0B28B5 F5    0998** PUSH    AF
0B28B6 F4    0999** CALL    P,RECIP         ;X=1/X
0B28B7 DB 
0B28B8 28 
0B28B9 0B 
0B28BA F1    1000** POP     AF
0B28BB F2    1001** JP      P,EXP4
0B28BC C3 
0B28BD 28 
0B28BE 0B 
0B28BF E6    1002** AND     7FH
0B28C0 7F 
0B28C1 ED    1003** NEG
0B28C2 44 
0B28C3 C6    1004** EXP4:			ADD     A,80H
0B28C4 80 
0B28C5 81    1005** ADD     A,C
0B28C6 38    1006** JR      C,EXP2
0B28C7 06 
0B28C8 F2    1007** JP      P,ZERO_FP          ;UNDERFLOW
0B28C9 24 
0B28CA 2E 
0B28CB 0B 
0B28CC 18    1008** JR      EXP3
0B28CD 04 
0B28CE FA    1009** EXP2:			JP      M,OFLOW         ;OVERFLOW
0B28CF EF 
0B28D0 2D 
0B28D1 0B 
0B28D2 C6    1010** EXP3:			ADD     A,80H
0B28D3 80 
0B28D4 CA    1011** JP      Z,ZERO_FP
0B28D5 24 
0B28D6 2E 
0B28D7 0B 
0B28D8 4F    1012** LD      C,A
0B28D9 AF    1013** XOR     A               ;NUMERIC MARKER
0B28DA C9    1014** RET
             1015** ;
0B28DB CD    1016** RECIP:			CALL    DONE
0B28DC 3C 
0B28DD 28 
0B28DE 0B 
0B28DF CD    1017** RDIV:			CALL    SWAP_FP
0B28E0 D8 
0B28E1 2D 
0B28E2 0B 
0B28E3 C3    1018** JP      FDIV            ;RECIPROCAL
0B28E4 66 
0B28E5 24 
0B28E6 0B 
             1019** ;
0B28E7 11    1020** LN2:			LD      DE,3172H        ;LN(2)
0B28E8 72 
0B28E9 31 
0B28EA 00 
0B28EB D9    1021** EXX
0B28EC 11    1022** LD      DE,17F8H
0B28ED F8 
0B28EE 17 
0B28EF 00 
0B28F0 D9    1023** EXX
0B28F1 06    1024** LD      B,7FH
0B28F2 7F 
0B28F3 C9    1025** RET
             1026** ;
             1027** ;LN - Natural log.
             1028** ;Result is floating-point numeric.
             1029** ;
0B28F4 CD    1030** LN_FP:			CALL    SFLOAT_FP
0B28F5 A7 
0B28F6 2D 
0B28F7 0B 
0B28F8 3E    1031** LN0:			LD      A,LOGRNG
0B28F9 16 
0B28FA CB    1032** BIT     7,H
0B28FB 7C 
0B28FC C2    1033** JP      NZ,ERROR_FP_        ;"Log range"
0B28FD 7E 
0B28FE 22 
0B28FF 0B 
0B2900 0C    1034** INC     C
0B2901 0D    1035** DEC     C
0B2902 CA    1036** JP      Z,ERROR_FP_
0B2903 7E 
0B2904 22 
0B2905 0B 
0B2906 11    1037** LD      DE,3504H        ;SQR(2)
0B2907 04 
0B2908 35 
0B2909 00 
0B290A D9    1038** EXX
0B290B 11    1039** LD      DE,0F333H       ;1.41421356237
0B290C 33 
0B290D F3 
0B290E 00 
0B290F D9    1040** EXX
0B2910 CD    1041** CALL    ICP0            ;MANTISSA>SQR(2)?
0B2911 37 
0B2912 2E 
0B2913 0B 
0B2914 79    1042** LD      A,C             ;EXPONENT
0B2915 0E    1043** LD      C,80H           ;1 <= X < 2
0B2916 80 
0B2917 38    1044** JR      C,LN4
0B2918 02 
0B2919 0D    1045** DEC     C
0B291A 3C    1046** INC     A
0B291B F5    1047** LN4:			PUSH    AF              ;SAVE EXPONENT
0B291C CD    1048** CALL    RATIO           ;X=(X-1)/(X+1)
0B291D C9 
0B291E 2E 
0B291F 0B 
0B2920 CD    1049** CALL    PUSH5
0B2921 B4 
0B2922 2E 
0B2923 0B 
0B2924 CD    1050** CALL    SQUARE          ;PUSH X*X
0B2925 AC 
0B2926 2E 
0B2927 0B 
0B2928 CD    1051** CALL    POLY
0B2929 F1 
0B292A 2E 
0B292B 0B 
0B292C 48    1052** DW	0CC48H          ;a(9)
0B292D CC 
0B292E FB    1053** DW	74FBH
0B292F 74 
0B2930 7D    1054** DB	7DH
0B2931 AF    1055** DW	0AEAFH          ;a(7)
0B2932 AE 
0B2933 FF    1056** DW	11FFH
0B2934 11 
0B2935 7E    1057** DB	7EH
0B2936 8C    1058** DW	0D98CH          ;a(5)
0B2937 D9 
0B2938 CD    1059** DW	4CCDH
0B2939 4C 
0B293A 7E    1060** DB	7EH
0B293B E3    1061** DW	0A9E3H          ;a(3)
0B293C A9 
0B293D AA    1062** DW	2AAAH
0B293E 2A 
0B293F 7F    1063** DB	7FH
0B2940 00    1064** DW	0               ;a(1)
0B2941 00 
0B2942 00    1065** DW	0
0B2943 00 
0B2944 81    1066** DB	81H
0B2945 CD    1067** CALL    POP5
0B2946 BD 
0B2947 2E 
0B2948 0B 
0B2949 CD    1068** CALL    POP5
0B294A BD 
0B294B 2E 
0B294C 0B 
0B294D CD    1069** CALL    FMUL
0B294E 0F 
0B294F 25 
0B2950 0B 
0B2951 F1    1070** POP     AF              ;EXPONENT
0B2952 CD    1071** CALL    PUSH5
0B2953 B4 
0B2954 2E 
0B2955 0B 
0B2956 08    1072** EX      AF,AF'
0B2957 CD    1073** CALL    ZERO_FP
0B2958 24 
0B2959 2E 
0B295A 0B 
0B295B 08    1074** EX      AF,AF'
0B295C D6    1075** SUB     80H
0B295D 80 
0B295E 28    1076** JR      Z,LN3
0B295F 1F 
0B2960 30    1077** JR      NC,LN1
0B2961 02 
0B2962 2F    1078** CPL
0B2963 3C    1079** INC     A
0B2964 67    1080** LN1:			LD      H,A
0B2965 0E    1081** LD      C,87H
0B2966 87 
0B2967 F5    1082** PUSH    AF
0B2968 CD    1083** CALL    FLOAT_
0B2969 87 
0B296A 2D 
0B296B 0B 
0B296C CB    1084** RES     7,H
0B296D BC 
0B296E CD    1085** CALL    LN2
0B296F E7 
0B2970 28 
0B2971 0B 
0B2972 CD    1086** CALL    FMUL
0B2973 0F 
0B2974 25 
0B2975 0B 
0B2976 F1    1087** POP     AF
0B2977 30    1088** JR      NC,LN3
0B2978 06 
0B2979 FA    1089** JP      M,LN3
0B297A 7F 
0B297B 29 
0B297C 0B 
0B297D CB    1090** SET     7,H
0B297E FC 
0B297F CD    1091** LN3:			CALL    POP5
0B2980 BD 
0B2981 2E 
0B2982 0B 
0B2983 CD    1092** CALL    FADD
0B2984 FD 
0B2985 23 
0B2986 0B 
0B2987 AF    1093** XOR     A
0B2988 C9    1094** RET
             1095** ;
             1096** ;LOG - base-10 logarithm.
             1097** ;Result is floating-point numeric.
             1098** ;
0B2989 CD    1099** LOG_FP:			CALL    LN_FP
0B298A F4 
0B298B 28 
0B298C 0B 
0B298D 11    1100** LD      DE,5E5BH        ;LOG(e)
0B298E 5B 
0B298F 5E 
0B2990 00 
0B2991 D9    1101** EXX
0B2992 11    1102** LD      DE,0D8A9H
0B2993 A9 
0B2994 D8 
0B2995 00 
0B2996 D9    1103** EXX
0B2997 06    1104** LD      B,7EH
0B2998 7E 
0B2999 CD    1105** CALL    FMUL
0B299A 0F 
0B299B 25 
0B299C 0B 
0B299D AF    1106** XOR     A
0B299E C9    1107** RET
             1108** ;
             1109** ;ASN - Arc-sine
             1110** ;Result is floating-point numeric.
             1111** ;
0B299F CD    1112** ASN_FP:			CALL    SFLOAT_FP
0B29A0 A7 
0B29A1 2D 
0B29A2 0B 
0B29A3 CD    1113** CALL    PUSH5
0B29A4 B4 
0B29A5 2E 
0B29A6 0B 
0B29A7 CD    1114** CALL    COPY_
0B29A8 A4 
0B29A9 2E 
0B29AA 0B 
0B29AB CD    1115** CALL    FMUL
0B29AC 0F 
0B29AD 25 
0B29AE 0B 
0B29AF CD    1116** CALL    DONE
0B29B0 3C 
0B29B1 28 
0B29B2 0B 
0B29B3 CD    1117** CALL    RSUB
0B29B4 EA 
0B29B5 23 
0B29B6 0B 
0B29B7 CD    1118** CALL    SQR0
0B29B8 1A 
0B29B9 27 
0B29BA 0B 
0B29BB CD    1119** CALL    POP5
0B29BC BD 
0B29BD 2E 
0B29BE 0B 
0B29BF 0C    1120** INC     C
0B29C0 0D    1121** DEC     C
0B29C1 3E    1122** LD      A,2
0B29C2 02 
0B29C3 D5    1123** PUSH    DE
0B29C4 CA    1124** JP      Z,ACS1
0B29C5 49 
0B29C6 2A 
0B29C7 0B 
0B29C8 D1    1125** POP     DE
0B29C9 CD    1126** CALL    RDIV
0B29CA DF 
0B29CB 28 
0B29CC 0B 
0B29CD 18    1127** JR      ATN0
0B29CE 04 
             1128** ;
             1129** ;ATN - arc-tangent
             1130** ;Result is floating-point numeric.
             1131** ;
0B29CF CD    1132** ATN_FP:			CALL    SFLOAT_FP
0B29D0 A7 
0B29D1 2D 
0B29D2 0B 
0B29D3 E5    1133** ATN0:			PUSH    HL              ;SAVE SIGN
0B29D4 CB    1134** RES     7,H
0B29D5 BC 
0B29D6 11    1135** LD      DE,5413H        ;TAN(PI/8)=SQR(2)-1
0B29D7 13 
0B29D8 54 
0B29D9 00 
0B29DA D9    1136** EXX
0B29DB 11    1137** LD      DE,0CCD0H
0B29DC D0 
0B29DD CC 
0B29DE 00 
0B29DF D9    1138** EXX
0B29E0 06    1139** LD      B,7EH
0B29E1 7E 
0B29E2 CD    1140** CALL    FCP0            ;COMPARE
0B29E3 34 
0B29E4 2E 
0B29E5 0B 
0B29E6 06    1141** LD      B,0
0B29E7 00 
0B29E8 38    1142** JR      C,ATN2
0B29E9 22 
0B29EA 11    1143** LD      DE,1A82H        ;TAN(3*PI/8)=SQR(2)+1
0B29EB 82 
0B29EC 1A 
0B29ED 00 
0B29EE D9    1144** EXX
0B29EF 11    1145** LD      DE,799AH
0B29F0 9A 
0B29F1 79 
0B29F2 00 
0B29F3 D9    1146** EXX
0B29F4 06    1147** LD      B,81H
0B29F5 81 
0B29F6 CD    1148** CALL    FCP0            ;COMPARE
0B29F7 34 
0B29F8 2E 
0B29F9 0B 
0B29FA 38    1149** JR      C,ATN1
0B29FB 0A 
0B29FC CD    1150** CALL    RECIP           ;X=1/X
0B29FD DB 
0B29FE 28 
0B29FF 0B 
0B2A00 06    1151** LD      B,2
0B2A01 02 
0B2A02 C3    1152** JP      ATN2
0B2A03 0C 
0B2A04 2A 
0B2A05 0B 
0B2A06 CD    1153** ATN1:			CALL    RATIO           ;X=(X-1)/(X+1)
0B2A07 C9 
0B2A08 2E 
0B2A09 0B 
0B2A0A 06    1154** LD      B,1
0B2A0B 01 
0B2A0C C5    1155** ATN2:			PUSH    BC              ;SAVE FLAG
0B2A0D CD    1156** CALL    PUSH5
0B2A0E B4 
0B2A0F 2E 
0B2A10 0B 
0B2A11 CD    1157** CALL    SQUARE          ;PUSH X*X
0B2A12 AC 
0B2A13 2E 
0B2A14 0B 
0B2A15 CD    1158** CALL    POLY
0B2A16 F1 
0B2A17 2E 
0B2A18 0B 
0B2A19 35    1159** DW	0F335H          ;a(13)
0B2A1A F3 
0B2A1B D8    1160** DW	37D8H
0B2A1C 37 
0B2A1D 7B    1161** DB	7BH
0B2A1E 91    1162** DW	6B91H           ;a(11)
0B2A1F 6B 
0B2A20 B9    1163** DW	0AAB9H
0B2A21 AA 
0B2A22 7C    1164** DB	7CH
0B2A23 DE    1165** DW	41DEH           ;a(9)
0B2A24 41 
0B2A25 97    1166** DW	6197H
0B2A26 61 
0B2A27 7C    1167** DB	7CH
0B2A28 7B    1168** DW	9D7BH           ;a(7)
0B2A29 9D 
0B2A2A 37    1169** DW	9237H
0B2A2B 92 
0B2A2C 7D    1170** DB	7DH
0B2A2D 5A    1171** DW	2A5AH           ;a(5)
0B2A2E 2A 
0B2A2F CC    1172** DW	4CCCH
0B2A30 4C 
0B2A31 7D    1173** DB	7DH
0B2A32 5C    1174** DW	0A95CH          ;a(3)
0B2A33 A9 
0B2A34 AA    1175** DW	0AAAAH
0B2A35 AA 
0B2A36 7E    1176** DB	7EH
0B2A37 00    1177** DW	0               ;a(1)
0B2A38 00 
0B2A39 00    1178** DW	0
0B2A3A 00 
0B2A3B 80    1179** DB	80H
0B2A3C CD    1180** CALL    POP5
0B2A3D BD 
0B2A3E 2E 
0B2A3F 0B 
0B2A40 CD    1181** CALL    POP5
0B2A41 BD 
0B2A42 2E 
0B2A43 0B 
0B2A44 CD    1182** CALL    FMUL
0B2A45 0F 
0B2A46 25 
0B2A47 0B 
0B2A48 F1    1183** POP     AF
0B2A49 CD    1184** ACS1:			CALL    PIBY4           ;PI/4
0B2A4A 49 
0B2A4B 28 
0B2A4C 0B 
0B2A4D 1F    1185** RRA
0B2A4E F5    1186** PUSH    AF
0B2A4F DC    1187** CALL    C,FADD
0B2A50 FD 
0B2A51 23 
0B2A52 0B 
0B2A53 F1    1188** POP     AF
0B2A54 04    1189** INC     B
0B2A55 1F    1190** RRA
0B2A56 DC    1191** CALL    C,RSUB
0B2A57 EA 
0B2A58 23 
0B2A59 0B 
0B2A5A F1    1192** POP     AF
0B2A5B B7    1193** OR      A
0B2A5C F0    1194** RET     P
0B2A5D CB    1195** SET     7,H             ;MAKE NEGATIVE
0B2A5E FC 
0B2A5F AF    1196** XOR     A
0B2A60 C9    1197** RET
             1198** ;
             1199** ;ACS - Arc cosine=PI/2-ASN.
             1200** ;Result is floating point numeric.
             1201** ;
0B2A61 CD    1202** ACS_FP:			CALL    ASN_FP
0B2A62 9F 
0B2A63 29 
0B2A64 0B 
0B2A65 3E    1203** LD      A,2
0B2A66 02 
0B2A67 F5    1204** PUSH    AF
0B2A68 18    1205** JR      ACS1
0B2A69 DF 
             1206** ;
             1207** ;Function STR - convert numeric value to ASCII string.
             1208** ;   Inputs: HLH'L'C = integer or floating-point number
             1209** ;           DE = address at which to store string
             1210** ;           IX = address of @% format control
             1211** ;  Outputs: String stored, with NUL terminator
             1212** ;
             1213** ;First normalise for decimal output:
             1214** ;
0B2A6A CD    1215** STR_FP:			CALL    SFLOAT_FP
0B2A6B A7 
0B2A6C 2D 
0B2A6D 0B 
0B2A6E 06    1216** LD      B,0             ;DEFAULT PT. POSITION
0B2A6F 00 
0B2A70 CB    1217** BIT     7,H             ;NEGATIVE?
0B2A71 7C 
0B2A72 28    1218** JR      Z,STR10
0B2A73 06 
0B2A74 CB    1219** RES     7,H
0B2A75 BC 
0B2A76 3E    1220** LD      A,'-'
0B2A77 2D 
0B2A78 12    1221** LD      (DE),A          ;STORE SIGN
0B2A79 13    1222** INC     DE
0B2A7A AF    1223** STR10:			XOR     A               ;CLEAR A
0B2A7B B9    1224** CP      C
0B2A7C 28    1225** JR      Z,STR02          ;ZERO
0B2A7D 4E 
0B2A7E D5    1226** PUSH    DE              ;SAVE TEXT POINTER
0B2A7F 78    1227** LD      A,B
0B2A80 F5    1228** STR11:			PUSH    AF              ;SAVE DECIMAL COUNTER
0B2A81 79    1229** LD      A,C             ;BINARY EXPONENT
0B2A82 FE    1230** CP      161
0B2A83 A1 
0B2A84 30    1231** JR      NC,STR14
0B2A85 1C 
0B2A86 FE    1232** CP      155
0B2A87 9B 
0B2A88 30    1233** JR      NC,STR15
0B2A89 29 
0B2A8A 2F    1234** CPL
0B2A8B FE    1235** CP      225
0B2A8C E1 
0B2A8D 38    1236** JR      C,STR13
0B2A8E 02 
0B2A8F 3E    1237** LD      A,-8
0B2A90 F8 
0B2A91 C6    1238** STR13:			ADD     A,28
0B2A92 1C 
0B2A93 CD    1239** CALL    POWR10
0B2A94 20 
0B2A95 2F 
0B2A96 0B 
0B2A97 F5    1240** PUSH    AF
0B2A98 CD    1241** CALL    FMUL
0B2A99 0F 
0B2A9A 25 
0B2A9B 0B 
0B2A9C F1    1242** POP     AF
0B2A9D 47    1243** LD      B,A
0B2A9E F1    1244** POP     AF
0B2A9F 90    1245** SUB     B
0B2AA0 18    1246** JR      STR11
0B2AA1 DE 
0B2AA2 D6    1247** STR14:			SUB     32
0B2AA3 20 
0B2AA4 CD    1248** CALL    POWR10
0B2AA5 20 
0B2AA6 2F 
0B2AA7 0B 
0B2AA8 F5    1249** PUSH    AF
0B2AA9 CD    1250** CALL    FDIV
0B2AAA 66 
0B2AAB 24 
0B2AAC 0B 
0B2AAD F1    1251** POP     AF
0B2AAE 47    1252** LD      B,A
0B2AAF F1    1253** POP     AF
0B2AB0 80    1254** ADD     A,B
0B2AB1 18    1255** JR      STR11
0B2AB2 CD 
0B2AB3 3E    1256** STR15:			LD      A,9
0B2AB4 09 
0B2AB5 CD    1257** CALL    POWR10          ;10^9
0B2AB6 20 
0B2AB7 2F 
0B2AB8 0B 
0B2AB9 CD    1258** CALL    FCP0
0B2ABA 34 
0B2ABB 2E 
0B2ABC 0B 
0B2ABD 79    1259** LD      A,C
0B2ABE C1    1260** POP     BC
0B2ABF 4F    1261** LD      C,A
0B2AC0 CB    1262** SET     7,H             ;IMPLIED 1
0B2AC1 FC 
0B2AC2 DC    1263** CALL    C,X10B          ;X10, DEC B
0B2AC3 5C 
0B2AC4 2E 
0B2AC5 0B 
0B2AC6 D1    1264** POP     DE              ;RESTORE TEXT POINTER
0B2AC7 CB    1265** RES     7,C
0B2AC8 B9 
0B2AC9 3E    1266** LD      A,0
0B2ACA 00 
0B2ACB 17    1267** RLA                     ;PUT CARRY IN LSB
             1268** ;
             1269** ;At this point decimal normalisation has been done,
             1270** ;now convert to decimal digits:
             1271** ;      AHLH'L' = number in normalised integer form
             1272** ;            B = decimal place adjustment
             1273** ;            C = binary place adjustment (29-33)
             1274** ;
0B2ACC 0C    1275** STR02:			INC     C
0B2ACD 08    1276** EX      AF,AF'          ;SAVE A
0B2ACE 78    1277** LD      A,B
0B2ACF DD    1278** BIT     1,(IX+2)
0B2AD0 CB 
0B2AD1 02 
0B2AD2 4E 
0B2AD3 20    1279** JR      NZ,STR20
0B2AD4 08 
0B2AD5 AF    1280** XOR     A
0B2AD6 DD    1281** CP      (IX+1)
0B2AD7 BE 
0B2AD8 01 
0B2AD9 28    1282** JR      Z,STR21
0B2ADA 0B 
0B2ADB 3E    1283** LD      A,-10
0B2ADC F6 
0B2ADD DD    1284** STR20:			ADD     A,(IX+1)        ;SIG. FIG. COUNT
0B2ADE 86 
0B2ADF 01 
0B2AE0 B7    1285** OR      A               ;CLEAR CARRY
0B2AE1 FA    1286** JP      M,STR21
0B2AE2 E6 
0B2AE3 2A 
0B2AE4 0B 
0B2AE5 AF    1287** XOR     A
0B2AE6 F5    1288** STR21:			PUSH    AF
0B2AE7 08    1289** EX      AF,AF'          ;RESTORE A
0B2AE8 CD    1290** STR22:			CALL    X2              ;RL AHLH'L'
0B2AE9 90 
0B2AEA 2E 
0B2AEB 0B 
0B2AEC 8F    1291** ADC     A,A
0B2AED FE    1292** CP      10
0B2AEE 0A 
0B2AEF 38    1293** JR      C,STR23
0B2AF0 05 
0B2AF1 D6    1294** SUB     10
0B2AF2 0A 
0B2AF3 D9    1295** EXX
0B2AF4 2C    1296** INC     L               ;SET RESULT BIT
0B2AF5 D9    1297** EXX
0B2AF6 0D    1298** STR23:			DEC     C
0B2AF7 20    1299** JR      NZ,STR22        ;32 TIMES
0B2AF8 EF 
0B2AF9 4F    1300** LD      C,A             ;REMAINDER
0B2AFA 7C    1301** LD      A,H
0B2AFB E6    1302** AND     3FH             ;CLEAR OUT JUNK
0B2AFC 3F 
0B2AFD 67    1303** LD      H,A
0B2AFE F1    1304** POP     AF
0B2AFF F2    1305** JP      P,STR24
0B2B00 0D 
0B2B01 2B 
0B2B02 0B 
0B2B03 3C    1306** INC     A
0B2B04 20    1307** JR      NZ,STR26
0B2B05 1C 
0B2B06 3E    1308** LD      A,4
0B2B07 04 
0B2B08 B9    1309** CP      C               ;ROUND UP?
0B2B09 3E    1310** LD      A,0
0B2B0A 00 
0B2B0B 18    1311** JR      STR26
0B2B0C 15 
0B2B0D F5    1312** STR24:			PUSH    AF
0B2B0E 79    1313** LD      A,C
0B2B0F CE    1314** ADC     A,'0'           ;ADD CARRY
0B2B10 30 
0B2B11 FE    1315** CP      '0'
0B2B12 30 
0B2B13 28    1316** JR      Z,STR25         ;SUPPRESS ZERO
0B2B14 05 
0B2B15 FE    1317** CP      '9'+1
0B2B16 3A 
0B2B17 3F    1318** CCF
0B2B18 30    1319** JR      NC,STR26
0B2B19 08 
0B2B1A E3    1320** STR25:			EX      (SP),HL
0B2B1B CB    1321** BIT     6,L             ;ZERO FLAG
0B2B1C 75 
0B2B1D E3    1322** EX      (SP),HL
0B2B1E 20    1323** JR      NZ,STR27
0B2B1F 05 
0B2B20 3E    1324** LD      A,'0'
0B2B21 30 
0B2B22 3C    1325** STR26:			INC     A               ;SET +VE
0B2B23 3D    1326** DEC     A
0B2B24 F5    1327** PUSH    AF              ;PUT ON STACK + CARRY
0B2B25 04    1328** STR27:			INC     B
0B2B26 CD    1329** CALL    TEST_FP            ;IS HLH'L' ZERO?
0B2B27 00 
0B2B28 2E 
0B2B29 0B 
0B2B2A 0E    1330** LD      C,32
0B2B2B 20 
0B2B2C 3E    1331** LD      A,0
0B2B2D 00 
0B2B2E 20    1332** JR      NZ,STR22
0B2B2F B8 
0B2B30 F1    1333** POP     AF
0B2B31 F5    1334** PUSH    AF
0B2B32 3E    1335** LD      A,0
0B2B33 00 
0B2B34 38    1336** JR      C,STR22
0B2B35 B2 
             1337** ;
             1338** ;At this point, the decimal character string is stored
             1339** ; on the stack. Trailing zeroes are suppressed and may
             1340** ; need to be replaced.
             1341** ;B register holds decimal point position.
             1342** ;Now format number and store as ASCII string:
             1343** ;
0B2B36 EB    1344** STR3:			EX      DE,HL           ;STRING POINTER
0B2B37 0E    1345** LD      C,-1            ;FLAG "E"
0B2B38 FF 
0B2B39 16    1346** LD      D,1
0B2B3A 01 
0B2B3B DD    1347** LD      E,(IX+1)        ;f2
0B2B3C 5E 
0B2B3D 01 
0B2B3E DD    1348** BIT     0,(IX+2)
0B2B3F CB 
0B2B40 02 
0B2B41 46 
0B2B42 20    1349** JR      NZ,STR34        ;E MODE
0B2B43 35 
0B2B44 DD    1350** BIT     1,(IX+2)
0B2B45 CB 
0B2B46 02 
0B2B47 4E 
0B2B48 28    1351** JR      Z,STR31
0B2B49 12 
0B2B4A 78    1352** LD      A,B             ;F MODE
0B2B4B B7    1353** OR      A
0B2B4C 28    1354** JR      Z,STR30
0B2B4D 05 
0B2B4E FA    1355** JP      M,STR30
0B2B4F 53 
0B2B50 2B 
0B2B51 0B 
0B2B52 50    1356** LD      D,B
0B2B53 7A    1357** STR30:			LD      A,D
0B2B54 DD    1358** ADD     A,(IX+1)
0B2B55 86 
0B2B56 01 
0B2B57 5F    1359** LD      E,A
0B2B58 FE    1360** CP      11
0B2B59 0B 
0B2B5A 38    1361** JR      C,STR32
0B2B5B 19 
0B2B5C 78    1362** STR31:			LD      A,B             ;G MODE
0B2B5D 11    1363** LD      DE,101H
0B2B5E 01 
0B2B5F 01 
0B2B60 00 
0B2B61 B7    1364** OR      A
0B2B62 FA    1365** JP      M,STR34
0B2B63 79 
0B2B64 2B 
0B2B65 0B 
0B2B66 28    1366** JR      Z,STR32
0B2B67 0D 
0B2B68 DD    1367** LD      A,(IX+1)
0B2B69 7E 
0B2B6A 01 
0B2B6B B7    1368** OR      A
0B2B6C 20    1369** JR      NZ,STR3A
0B2B6D 02 
0B2B6E 3E    1370** LD      A,10
0B2B6F 0A 
0B2B70 B8    1371** STR3A:			CP      B
0B2B71 38    1372** JR      C,STR34
0B2B72 06 
0B2B73 50    1373** LD      D,B
0B2B74 58    1374** LD      E,B
0B2B75 78    1375** STR32:			LD      A,B
0B2B76 C6    1376** ADD     A,129
0B2B77 81 
0B2B78 4F    1377** LD      C,A
0B2B79 CB    1378** STR34:			SET     7,D
0B2B7A FA 
0B2B7B 1D    1379** DEC     E
0B2B7C 7A    1380** STR35:			LD      A,D
0B2B7D B9    1381** CP      C
0B2B7E 30    1382** JR      NC,STR33
0B2B7F 0E 
0B2B80 F1    1383** STR36:			POP     AF
0B2B81 28    1384** JR      Z,STR37
0B2B82 04 
0B2B83 F2    1385** JP      P,STR38
0B2B84 90 
0B2B85 2B 
0B2B86 0B 
0B2B87 F5    1386** STR37:			PUSH    AF
0B2B88 1C    1387** INC     E
0B2B89 1D    1388** DEC     E
0B2B8A FA    1389** JP      M,STR4
0B2B8B A1 
0B2B8C 2B 
0B2B8D 0B 
0B2B8E 3E    1390** STR33:			LD      A,'0'
0B2B8F 30 
0B2B90 15    1391** STR38:			DEC     D
0B2B91 E2    1392** JP      PO,STR39
0B2B92 98 
0B2B93 2B 
0B2B94 0B 
0B2B95 36    1393** LD      (HL),'.'
0B2B96 2E 
0B2B97 23    1394** INC     HL
0B2B98 77    1395** STR39:			LD      (HL),A
0B2B99 23    1396** INC     HL
0B2B9A 1D    1397** DEC     E
0B2B9B F2    1398** JP      P,STR35
0B2B9C 7C 
0B2B9D 2B 
0B2B9E 0B 
0B2B9F 18    1399** JR      STR36
0B2BA0 DF 
             1400** ;
0B2BA1 F1    1401** STR4:			POP     AF
0B2BA2 0C    1402** STR40:			INC     C
0B2BA3 4D    1403** LD      C,L
0B2BA4 20    1404** JR      NZ,STR44
0B2BA5 28 
0B2BA6 36    1405** LD      (HL),'E'        ;EXPONENT
0B2BA7 45 
0B2BA8 23    1406** INC     HL
0B2BA9 78    1407** LD      A,B
0B2BAA 3D    1408** DEC     A
0B2BAB F2    1409** JP      P,STR41
0B2BAC B4 
0B2BAD 2B 
0B2BAE 0B 
0B2BAF 36    1410** LD      (HL),'-'
0B2BB0 2D 
0B2BB1 23    1411** INC     HL
0B2BB2 ED    1412** NEG
0B2BB3 44 
0B2BB4 36    1413** STR41:			LD      (HL),'0'
0B2BB5 30 
0B2BB6 28    1414** JR      Z,STR47
0B2BB7 15 
0B2BB8 FE    1415** CP      10
0B2BB9 0A 
0B2BBA 47    1416** LD      B,A
0B2BBB 3E    1417** LD      A,':'
0B2BBC 3A 
0B2BBD 38    1418** JR      C,STR42
0B2BBE 03 
0B2BBF 23    1419** INC     HL
0B2BC0 36    1420** LD      (HL),'0'
0B2BC1 30 
0B2BC2 34    1421** STR42:			INC     (HL)
0B2BC3 BE    1422** CP      (HL)
0B2BC4 20    1423** JR      NZ,STR43
0B2BC5 05 
0B2BC6 36    1424** LD      (HL),'0'
0B2BC7 30 
0B2BC8 2B    1425** DEC     HL
0B2BC9 34    1426** INC     (HL)
0B2BCA 23    1427** INC     HL
0B2BCB 10    1428** STR43:			DJNZ    STR42
0B2BCC F5 
0B2BCD 23    1429** STR47:			INC     HL
0B2BCE EB    1430** STR44:			EX      DE,HL
0B2BCF C9    1431** RET
             1432** ;
             1433** ;Support subroutines:
             1434** ;
0B2BD0 DD    1435** DLOAD5:			LD      B,(IX+4)
0B2BD1 46 
0B2BD2 04 
0B2BD3 D9    1436** EXX
0B2BD4 DD    1437** LD      E,(IX+0)
0B2BD5 5E 
0B2BD6 00 
0B2BD7 DD    1438** LD      D,(IX+1)
0B2BD8 56 
0B2BD9 01 
0B2BDA D9    1439** EXX
0B2BDB DD    1440** LD      E,(IX+2)
0B2BDC 5E 
0B2BDD 02 
0B2BDE DD    1441** LD      D,(IX+3)
0B2BDF 56 
0B2BE0 03 
0B2BE1 C9    1442** RET
             1443** ;
0B2BE2 DD    1444** DLOAD5_SPL:		LD      B,(IX+6)
0B2BE3 46 
0B2BE4 06 
0B2BE5 D9    1445** EXX
0B2BE6 DD    1446** LD	DE, (IX+0)
0B2BE7 17 
0B2BE8 00 
0B2BE9 D9    1447** EXX
0B2BEA DD    1448** LD	DE, (IX+3)
0B2BEB 17 
0B2BEC 03 
0B2BED C9    1449** RET
             1450** ;
             1451** ;CON_FP - Get unsigned numeric constant from ASCII string.
             1452** ;   Inputs: ASCII string at (IX).
             1453** ;  Outputs: Variable-type result in HLH'L'C
             1454** ;           IX updated (points to delimiter)
             1455** ;           A7 = 0 (numeric marker)
             1456** ;
0B2BEE CD    1457** CON_FP:			CALL    ZERO_FP            ;INITIALISE TO ZERO
0B2BEF 24 
0B2BF0 2E 
0B2BF1 0B 
0B2BF2 0E    1458** LD      C,0             ;TRUNCATION COUNTER
0B2BF3 00 
0B2BF4 CD    1459** CALL    UINT          ;GET INTEGER PART
0B2BF5 82 
0B2BF6 2C 
0B2BF7 0B 
0B2BF8 FE    1460** CP      '.'
0B2BF9 2E 
0B2BFA 06    1461** LD      B,0             ;DECL. PLACE COUNTER
0B2BFB 00 
0B2BFC CC    1462** CALL    Z,NUMBIX        ;GET FRACTION PART
0B2BFD 80 
0B2BFE 2C 
0B2BFF 0B 
0B2C00 FE    1463** CP      'E'
0B2C01 45 
0B2C02 3E    1464** LD      A,0             ;INITIALISE EXPONENT
0B2C03 00 
0B2C04 CC    1465** CALL    Z,GETEXP        ;GET EXPONENT
0B2C05 4E 
0B2C06 2C 
0B2C07 0B 
0B2C08 CB    1466** BIT     7,H
0B2C09 7C 
0B2C0A 20    1467** JR      NZ,CON0         ;INTEGER OVERFLOW
0B2C0B 08 
0B2C0C B7    1468** OR      A
0B2C0D 20    1469** JR      NZ,CON0         ;EXPONENT NON-ZERO
0B2C0E 05 
0B2C0F B8    1470** CP      B
0B2C10 20    1471** JR      NZ,CON0         ;DECIMAL POINT
0B2C11 02 
0B2C12 B9    1472** CP      C
0B2C13 C8    1473** RET     Z               ;INTEGER
0B2C14 90    1474** CON0:			SUB     B
0B2C15 81    1475** ADD     A,C
0B2C16 0E    1476** LD      C,159
0B2C17 9F 
0B2C18 CD    1477** CALL    FLOAT_
0B2C19 87 
0B2C1A 2D 
0B2C1B 0B 
0B2C1C CB    1478** RES     7,H             ;DITCH IMPLIED 1
0B2C1D BC 
0B2C1E B7    1479** OR      A
0B2C1F C8    1480** RET     Z               ;DONE
0B2C20 FA    1481** JP      M,CON2          ;NEGATIVE EXPONENT
0B2C21 2E 
0B2C22 2C 
0B2C23 0B 
0B2C24 CD    1482** CALL    POWR10
0B2C25 20 
0B2C26 2F 
0B2C27 0B 
0B2C28 CD    1483** CALL    FMUL            ;SCALE
0B2C29 0F 
0B2C2A 25 
0B2C2B 0B 
0B2C2C AF    1484** XOR     A
0B2C2D C9    1485** RET
0B2C2E FE    1486** CON2:			CP      -38
0B2C2F DA 
0B2C30 38    1487** JR      C,CON3          ;CAN'T SCALE IN ONE GO
0B2C31 0C 
0B2C32 ED    1488** NEG
0B2C33 44 
0B2C34 CD    1489** CALL    POWR10
0B2C35 20 
0B2C36 2F 
0B2C37 0B 
0B2C38 CD    1490** CALL    FDIV            ;SCALE
0B2C39 66 
0B2C3A 24 
0B2C3B 0B 
0B2C3C AF    1491** XOR     A
0B2C3D C9    1492** RET
0B2C3E F5    1493** CON3:			PUSH    AF
0B2C3F 3E    1494** LD      A,38
0B2C40 26 
0B2C41 CD    1495** CALL    POWR10
0B2C42 20 
0B2C43 2F 
0B2C44 0B 
0B2C45 CD    1496** CALL    FDIV
0B2C46 66 
0B2C47 24 
0B2C48 0B 
0B2C49 F1    1497** POP     AF
0B2C4A C6    1498** ADD     A,38
0B2C4B 26 
0B2C4C 18    1499** JR      CON2
0B2C4D E0 
             1500** ;
             1501** ;GETEXP - Get decimal exponent from string
             1502** ;     Inputs: ASCII string at (IX)
             1503** ;             (IX points at 'E')
             1504** ;             A = initial value
             1505** ;    Outputs: A = new exponent
             1506** ;             IX updated.
             1507** ;   Destroys: A,A',IX,F,F'
             1508** ;
0B2C4E C5    1509** GETEXP:			PUSH    BC              ;SAVE REGISTERS
0B2C4F 47    1510** LD      B,A             ;INITIAL VALUE
0B2C50 0E    1511** LD      C,2             ;2 DIGITS MAX
0B2C51 02 
0B2C52 DD    1512** INC     IX              ;BUMP PAST 'E'
0B2C53 23 
0B2C54 CD    1513** CALL    SIGNQ
0B2C55 3E 
0B2C56 30 
0B2C57 0B 
0B2C58 08    1514** EX      AF,AF'          ;SAVE EXPONENT SIGN
0B2C59 CD    1515** GETEX1:			CALL    DIGITQ
0B2C5A 34 
0B2C5B 30 
0B2C5C 0B 
0B2C5D 38    1516** JR      C,GETEX2
0B2C5E 18 
0B2C5F 78    1517** LD      A,B             ;B=B*10
0B2C60 87    1518** ADD     A,A
0B2C61 87    1519** ADD     A,A
0B2C62 80    1520** ADD     A,B
0B2C63 87    1521** ADD     A,A
0B2C64 47    1522** LD      B,A
0B2C65 DD    1523** LD      A,(IX)          ;GET BACK DIGIT
0B2C66 7E 
0B2C67 00 
0B2C68 DD    1524** INC     IX
0B2C69 23 
0B2C6A E6    1525** AND     0FH             ;MASK UNWANTED BITS
0B2C6B 0F 
0B2C6C 80    1526** ADD     A,B             ;ADD IN DIGIT
0B2C6D 47    1527** LD      B,A
0B2C6E 0D    1528** DEC     C
0B2C6F F2    1529** JP      P,GETEX1
0B2C70 59 
0B2C71 2C 
0B2C72 0B 
0B2C73 06    1530** LD      B,100           ;FORCE OVERFLOW
0B2C74 64 
0B2C75 18    1531** JR      GETEX1
0B2C76 E2 
0B2C77 08    1532** GETEX2:			EX      AF,AF'          ;RESTORE SIGN
0B2C78 FE    1533** CP      '-'
0B2C79 2D 
0B2C7A 78    1534** LD      A,B
0B2C7B C1    1535** POP     BC              ;RESTORE
0B2C7C C0    1536** RET     NZ
0B2C7D ED    1537** NEG                     ;NEGATE EXPONENT
0B2C7E 44 
0B2C7F C9    1538** RET
             1539** ;
             1540** ;UINT: Get unsigned integer from string.
             1541** ;    Inputs: string at (IX)
             1542** ;            C = truncated digit count
             1543** ;                (initially zero)
             1544** ;            B = total digit count
             1545** ;            HLH'L' = initial value
             1546** ;   Outputs: HLH'L' = number (binary integer)
             1547** ;            A = delimiter.
             1548** ;            B, C & IX updated
             1549** ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
             1550** ;
0B2C80 DD    1551** NUMBIX:			INC     IX
0B2C81 23 
0B2C82 CD    1552** UINT:			CALL    DIGITQ
0B2C83 34 
0B2C84 30 
0B2C85 0B 
0B2C86 D8    1553** RET     C
0B2C87 04    1554** INC     B               ;INCREMENT DIGIT COUNT
0B2C88 DD    1555** INC     IX
0B2C89 23 
0B2C8A CD    1556** CALL    X10             ;*10 & COPY OLD VALUE
0B2C8B 7D 
0B2C8C 2E 
0B2C8D 0B 
0B2C8E 38    1557** JR      C,NUMB1         ;OVERFLOW
0B2C8F 15 
0B2C90 0D    1558** DEC     C               ;SEE IF TRUNCATED
0B2C91 0C    1559** INC     C
0B2C92 20    1560** JR      NZ,NUMB1        ;IMPORTANT!
0B2C93 11 
0B2C94 E6    1561** AND     0FH
0B2C95 0F 
0B2C96 D9    1562** EXX
0B2C97 06    1563** LD      B,0
0B2C98 00 
0B2C99 4F    1564** LD      C,A
0B2C9A 52    1565** ADD.S   HL,BC           ;ADD IN DIGIT
0B2C9B 09 
0B2C9C D9    1566** EXX
0B2C9D 30    1567** JR      NC,UINT
0B2C9E E3 
0B2C9F 52    1568** INC.S   HL              ;CARRY
0B2CA0 23 
0B2CA1 7C    1569** LD      A,H
0B2CA2 B5    1570** OR      L
0B2CA3 20    1571** JR      NZ,UINT
0B2CA4 DD 
0B2CA5 0C    1572** NUMB1:			INC     C               ;TRUNCATION COUNTER
0B2CA6 CD    1573** CALL    SWAP1           ;RESTORE PREVIOUS VALUE
0B2CA7 DB 
0B2CA8 2D 
0B2CA9 0B 
0B2CAA 18    1574** JR      UINT
0B2CAB D6 
             1575** ;
             1576** ;FIX - Fix number to specified exponent value.
             1577** ;    Inputs: HLH'L'C = +ve non-zero number (floated)
             1578** ;            A = desired exponent (A>C)
             1579** ;   Outputs: HLH'L'C = fixed number (unsigned)
             1580** ;            fraction shifted into B'C'
             1581** ;            A'F' positive if integer input
             1582** ;  Destroys: C,H,L,A',B',C',H',L',F,F'
             1583** ;
0B2CAC 08    1584** FIX:			EX      AF,AF'
0B2CAD AF    1585** XOR     A
0B2CAE 08    1586** EX      AF,AF'
0B2CAF CB    1587** SET     7,H             ;IMPLIED 1
0B2CB0 FC 
0B2CB1 CD    1588** FIX1:			CALL    DIV2
0B2CB2 E0 
0B2CB3 2D 
0B2CB4 0B 
0B2CB5 B9    1589** CP      C
0B2CB6 C8    1590** RET     Z
0B2CB7 D2    1591** JP      NC,FIX1
0B2CB8 B1 
0B2CB9 2C 
0B2CBA 0B 
0B2CBB C3    1592** JP      OFLOW
0B2CBC EF 
0B2CBD 2D 
0B2CBE 0B 
             1593** ;
             1594** ;SFIX - Convert to integer if necessary.
             1595** ;    Input: Variable-type number in HLH'L'C
             1596** ;   Output: Integer in HLH'L', C=0
             1597** ; Destroys: A,C,H,L,A',B',C',H',L',F,F'
             1598** ;
             1599** ;NEGATE - Negate HLH'L'
             1600** ;    Destroys: H,L,H',L',F
             1601** ;
0B2CBF CD    1602** FIX2:			CALL    SWAP_FP
0B2CC0 D8 
0B2CC1 2D 
0B2CC2 0B 
0B2CC3 CD    1603** CALL    SFIX_FP
0B2CC4 CB 
0B2CC5 2C 
0B2CC6 0B 
0B2CC7 CD    1604** CALL    SWAP_FP
0B2CC8 D8 
0B2CC9 2D 
0B2CCA 0B 
0B2CCB 0D    1605** SFIX_FP:			DEC     C
0B2CCC 0C    1606** INC     C
0B2CCD C8    1607** RET     Z               ;INTEGER/ZERO
0B2CCE CB    1608** BIT     7,H             ;SIGN
0B2CCF 7C 
0B2CD0 F5    1609** PUSH    AF
0B2CD1 3E    1610** LD      A,159
0B2CD2 9F 
0B2CD3 CD    1611** CALL    FIX
0B2CD4 AC 
0B2CD5 2C 
0B2CD6 0B 
0B2CD7 F1    1612** POP     AF
0B2CD8 0E    1613** LD      C,0
0B2CD9 00 
0B2CDA C8    1614** RET     Z
0B2CDB B7    1615** NEGATE:			OR      A               ;CLEAR CARRY
0B2CDC D9    1616** EXX
0B2CDD D5    1617** NEG0:			PUSH    DE
0B2CDE EB    1618** EX      DE,HL
0B2CDF 21    1619** LD      HL,0
0B2CE0 00 
0B2CE1 00 
0B2CE2 00 
0B2CE3 52    1620** SBC.S   HL,DE
0B2CE4 ED 
0B2CE5 52 
0B2CE6 D1    1621** POP     DE
0B2CE7 D9    1622** EXX
0B2CE8 D5    1623** PUSH    DE
0B2CE9 EB    1624** EX      DE,HL
0B2CEA 21    1625** LD      HL,0
0B2CEB 00 
0B2CEC 00 
0B2CED 00 
0B2CEE 52    1626** SBC.S   HL,DE
0B2CEF ED 
0B2CF0 52 
0B2CF1 D1    1627** POP     DE
0B2CF2 C9    1628** RET
             1629** ;
             1630** ;NEG - Negate HLH'L'B'C'
             1631** ;    Also complements A (used in FADD)
             1632** ;    Destroys: A,H,L,B',C',H',L',F
             1633** ;
0B2CF3 D9    1634** NEG_:			EXX
0B2CF4 2F    1635** CPL
0B2CF5 E5    1636** PUSH    HL
0B2CF6 B7    1637** OR      A               ;CLEAR CARRY
0B2CF7 21    1638** LD      HL,0
0B2CF8 00 
0B2CF9 00 
0B2CFA 00 
0B2CFB 52    1639** SBC.S   HL,BC
0B2CFC ED 
0B2CFD 42 
0B2CFE 44    1640** LD      B,H
0B2CFF 4D    1641** LD      C,L
0B2D00 E1    1642** POP     HL
0B2D01 18    1643** JR      NEG0
0B2D02 DA 
             1644** ;
             1645** ;SCALE - Trig scaling.
             1646** ;MOD48 - 48-bit floating-point "modulus" (remainder).
             1647** ;   Inputs: HLH'L'C unsigned floating-point dividend
             1648** ;           DED'E'B'C'B unsigned 48-bit FP divisor
             1649** ;  Outputs: HLH'L'C floating point remainder (H7=1)
             1650** ;           E = quotient (bit 7 is sticky)
             1651** ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
             1652** ;FLO48 - Float unsigned number (48 bits)
             1653** ;    Input/output in HLH'L'B'C'C
             1654** ;   Destroys: C,H,L,B',C',H',L',F
             1655** ;
0B2D03 3E    1656** SCALE:			LD      A,150
0B2D04 96 
0B2D05 B9    1657** CP      C
0B2D06 3E    1658** LD      A,ACLOST
0B2D07 17 
0B2D08 DA    1659** JP      C,ERROR_FP_         ;"Accuracy lost"
0B2D09 7E 
0B2D0A 22 
0B2D0B 0B 
0B2D0C CD    1660** CALL    PIBY4
0B2D0D 49 
0B2D0E 28 
0B2D0F 0B 
0B2D10 D9    1661** EXX
0B2D11 01    1662** LD      BC,2169H        ;3.141592653589793238
0B2D12 69 
0B2D13 21 
0B2D14 00 
0B2D15 D9    1663** EXX
0B2D16 CB    1664** MOD48:			SET     7,D             ;IMPLIED 1
0B2D17 FA 
0B2D18 CB    1665** SET     7,H
0B2D19 FC 
0B2D1A 79    1666** LD      A,C
0B2D1B 0E    1667** LD      C,0             ;INIT QUOTIENT
0B2D1C 00 
0B2D1D DD    1668** LD      IX,0
0B2D1E 21 
0B2D1F 00 
0B2D20 00 
0B2D20 00   
0B2D22 DD    1669** PUSH    IX              ;PUT ZERO ON STACK
0B2D23 E5 
0B2D24 B8    1670** CP      B
0B2D25 38    1671** JR      C,MOD485        ;DIVIDEND<DIVISOR
0B2D26 46 
0B2D27 D9    1672** MOD481:			EXX                     ;CARRY=0 HERE
0B2D28 E3    1673** EX      (SP),HL
0B2D29 52    1674** SBC.S   HL,BC
0B2D2A ED 
0B2D2B 42 
0B2D2C E3    1675** EX      (SP),HL
0B2D2D 52    1676** SBC.S   HL,DE
0B2D2E ED 
0B2D2F 52 
0B2D30 D9    1677** EXX
0B2D31 52    1678** SBC.S   HL,DE
0B2D32 ED 
0B2D33 52 
0B2D34 30    1679** JR      NC,MOD482       ;DIVIDEND>=DIVISOR
0B2D35 0C 
0B2D36 D9    1680** EXX
0B2D37 E3    1681** EX      (SP),HL
0B2D38 52    1682** ADD.S   HL,BC
0B2D39 09 
0B2D3A E3    1683** EX      (SP),HL
0B2D3B 52    1684** ADC.S   HL,DE
0B2D3C ED 
0B2D3D 5A 
0B2D3E D9    1685** EXX
0B2D3F 52    1686** ADC.S   HL,DE
0B2D40 ED 
0B2D41 5A 
0B2D42 3F    1687** MOD482:			CCF
0B2D43 CB    1688** RL      C               ;QUOTIENT
0B2D44 11 
0B2D45 30    1689** JR      NC,MOD483
0B2D46 02 
0B2D47 CB    1690** SET     7,C             ;STICKY BIT
0B2D48 F9 
0B2D49 3D    1691** MOD483:			DEC     A
0B2D4A B8    1692** CP      B
0B2D4B 38    1693** JR      C,MOD484        ;DIVIDEND<DIVISOR
0B2D4C 1F 
0B2D4D E3    1694** EX      (SP),HL
0B2D4E 52    1695** ADD.S   HL,HL           ;DIVIDEND * 2
0B2D4F 29 
0B2D50 E3    1696** EX      (SP),HL
0B2D51 D9    1697** EXX
0B2D52 52    1698** ADC.S   HL,HL
0B2D53 ED 
0B2D54 6A 
0B2D55 D9    1699** EXX
0B2D56 52    1700** ADC.S   HL,HL
0B2D57 ED 
0B2D58 6A 
0B2D59 30    1701** JR      NC,MOD481       ;AGAIN
0B2D5A CC 
0B2D5B B7    1702** OR      A
0B2D5C D9    1703** EXX
0B2D5D E3    1704** EX      (SP),HL
0B2D5E 52    1705** SBC.S   HL,BC           ;OVERFLOW, SO SUBTRACT
0B2D5F ED 
0B2D60 42 
0B2D61 E3    1706** EX      (SP),HL
0B2D62 52    1707** SBC.S   HL,DE
0B2D63 ED 
0B2D64 52 
0B2D65 D9    1708** EXX
0B2D66 52    1709** SBC.S   HL,DE
0B2D67 ED 
0B2D68 52 
0B2D69 B7    1710** OR      A
0B2D6A 18    1711** JR      MOD482
0B2D6B D6 
             1712** ;
0B2D6C 3C    1713** MOD484:			INC     A
0B2D6D 59    1714** MOD485:			LD      E,C             ;QUOTIENT
0B2D6E 4F    1715** LD      C,A             ;REMAINDER EXPONENT
0B2D6F D9    1716** EXX
0B2D70 C1    1717** POP     BC
0B2D71 D9    1718** EXX
0B2D72 CB    1719** FLO48:			BIT     7,H
0B2D73 7C 
0B2D74 C0    1720** RET     NZ
0B2D75 D9    1721** EXX
0B2D76 CB    1722** SLA     C
0B2D77 21 
0B2D78 CB    1723** RL      B
0B2D79 10 
0B2D7A 52    1724** ADC.S   HL,HL
0B2D7B ED 
0B2D7C 6A 
0B2D7D D9    1725** EXX
0B2D7E 52    1726** ADC.S   HL,HL
0B2D7F ED 
0B2D80 6A 
0B2D81 0D    1727** DEC     C
0B2D82 C2    1728** JP      NZ,FLO48
0B2D83 72 
0B2D84 2D 
0B2D85 0B 
0B2D86 C9    1729** RET
             1730** ;
             1731** ;Float unsigned number
             1732** ;    Input/output in HLH'L'C
             1733** ;   Destroys: C,H,L,H',L',F
             1734** ;
0B2D87 CB    1735** FLOAT_:			BIT     7,H
0B2D88 7C 
0B2D89 C0    1736** RET     NZ
0B2D8A D9    1737** EXX                     ;SAME AS "X2"
0B2D8B 52    1738** ADD.S   HL,HL           ;TIME-CRITICAL
0B2D8C 29 
0B2D8D D9    1739** EXX                     ;REGION
0B2D8E 52    1740** ADC.S   HL,HL           ;(BENCHMARKS)
0B2D8F ED 
0B2D90 6A 
0B2D91 0D    1741** DEC     C
0B2D92 C2    1742** JP      NZ,FLOAT_
0B2D93 87 
0B2D94 2D 
0B2D95 0B 
0B2D96 C9    1743** RET
             1744** ;
             1745** ;SFLOAT - Convert to floating-point if necessary.
             1746** ;    Input: Variable-type number in HLH'L'C
             1747** ;    Output: Floating-point in HLH'L'C
             1748** ;    Destroys: A,C,H,L,H',L',F
             1749** ;
0B2D97 08    1750** FLOATA:			EX      AF,AF'
             1751** ; ADD     A,(RTABLE-DTABLE)/3
0B2D98 C6    1752** ADD     A,RTABLE-DTABLE/3 ; ez80asm doesn't do nested expressions
0B2D99 2A 
0B2D9A 08    1753** EX      AF,AF'
0B2D9B CD    1754** FLOAT2:			CALL    SWAP_FP
0B2D9C D8 
0B2D9D 2D 
0B2D9E 0B 
0B2D9F CD    1755** CALL    SFLOAT_FP
0B2DA0 A7 
0B2DA1 2D 
0B2DA2 0B 
0B2DA3 CD    1756** CALL    SWAP_FP
0B2DA4 D8 
0B2DA5 2D 
0B2DA6 0B 
0B2DA7 0D    1757** SFLOAT_FP:			DEC     C
0B2DA8 0C    1758** INC     C
0B2DA9 C0    1759** RET     NZ              ;ALREADY FLOATING-POINT
0B2DAA CD    1760** CALL    TEST_FP
0B2DAB 00 
0B2DAC 2E 
0B2DAD 0B 
0B2DAE C8    1761** RET     Z               ;ZERO
0B2DAF 7C    1762** LD      A,H
0B2DB0 B7    1763** OR      A
0B2DB1 FC    1764** CALL    M,NEGATE
0B2DB2 DB 
0B2DB3 2C 
0B2DB4 0B 
0B2DB5 0E    1765** LD      C,159
0B2DB6 9F 
0B2DB7 CD    1766** CALL    FLOAT_
0B2DB8 87 
0B2DB9 2D 
0B2DBA 0B 
0B2DBB B7    1767** OR      A
0B2DBC F8    1768** RET     M               ;NEGATIVE
0B2DBD CB    1769** RES     7,H
0B2DBE BC 
0B2DBF C9    1770** RET
             1771** ;
             1772** ;ROUND UP
             1773** ;Return with carry set if 32-bit overflow
             1774** ;   Destroys: H,L,B',C',H',L',F
             1775** ;
0B2DC0 D9    1776** ADD1_FP:			EXX
0B2DC1 01    1777** LD      BC,1
0B2DC2 01 
0B2DC3 00 
0B2DC4 00 
0B2DC5 52    1778** ADD.S   HL,BC
0B2DC6 09 
0B2DC7 D9    1779** EXX
0B2DC8 D0    1780** RET     NC
0B2DC9 C5    1781** PUSH    BC
0B2DCA 01    1782** LD      BC,1
0B2DCB 01 
0B2DCC 00 
0B2DCD 00 
0B2DCE 52    1783** ADD.S   HL,BC
0B2DCF 09 
0B2DD0 C1    1784** POP     BC
0B2DD1 C9    1785** RET
             1786** ;
             1787** ;ODD - Add one if even, leave alone if odd.
             1788** ; (Used to perform unbiassed rounding, i.e.
             1789** ;  number is rounded up half the time)
             1790** ;    Destroys: L',F (carry cleared)
             1791** ;
0B2DD2 B7    1792** ODD:			OR      A               ;CLEAR CARRY
0B2DD3 D9    1793** EXX
0B2DD4 CB    1794** SET     0,L             ;MAKE ODD
0B2DD5 C5 
0B2DD6 D9    1795** EXX
0B2DD7 C9    1796** RET
             1797** ;
             1798** ;SWAP_FP - Swap arguments.
             1799** ;    Exchanges DE,HL D'E',H'L' and B,C
             1800** ;    Destroys: A,B,C,D,E,H,L,D',E',H',L'
             1801** ;SWAP1 - Swap DEHL with D'E'H'L'
             1802** ;    Destroys: D,E,H,L,D',E',H',L'
             1803** ;
0B2DD8 79    1804** SWAP_FP:			LD      A,C
0B2DD9 48    1805** LD      C,B
0B2DDA 47    1806** LD      B,A
0B2DDB EB    1807** SWAP1:			EX      DE,HL
0B2DDC D9    1808** EXX
0B2DDD EB    1809** EX      DE,HL
0B2DDE D9    1810** EXX
0B2DDF C9    1811** RET
             1812** ;
             1813** ; DIV2 - destroys C,H,L,A',B',C',H',L',F,F'
             1814** ; INCC - destroys C,F
             1815** ; OFLOW
             1816** ;
0B2DE0 CD    1817** DIV2:			CALL    D2
0B2DE1 99 
0B2DE2 2E 
0B2DE3 0B 
0B2DE4 D9    1818** EXX
0B2DE5 CB    1819** RR      B
0B2DE6 18 
0B2DE7 CB    1820** RR      C
0B2DE8 19 
0B2DE9 08    1821** EX      AF,AF'
0B2DEA B0    1822** OR      B
0B2DEB 08    1823** EX      AF,AF'
0B2DEC D9    1824** EXX
0B2DED 0C    1825** INCC:			INC     C
0B2DEE C0    1826** RET     NZ
0B2DEF 3E    1827** OFLOW:			LD      A,TOOBIG_FP
0B2DF0 14 
0B2DF1 C3    1828** JP      ERROR_FP_           ;"Too big"
0B2DF2 7E 
0B2DF3 22 
0B2DF4 0B 
             1829** ;
             1830** ; FTEST - Test for zero & sign
             1831** ;     Output: A=0 if zero, A=&40 if +ve, A=&C0 if -ve
             1832** ;
0B2DF5 CD    1833** FTEST_FP:			CALL    TEST_FP
0B2DF6 00 
0B2DF7 2E 
0B2DF8 0B 
0B2DF9 C8    1834** RET     Z
0B2DFA 7C    1835** LD      A,H
0B2DFB E6    1836** AND     10000000B
0B2DFC 80 
0B2DFD F6    1837** OR      01000000B
0B2DFE 40 
0B2DFF C9    1838** RET
             1839** ;
             1840** ; TEST_FP - Test HLH'L' for zero.
             1841** ;     Output: Z-flag set & A=0 if HLH'L'=0
             1842** ;     Destroys: A,F
             1843** ;
0B2E00 7C    1844** TEST_FP:			LD      A,H
0B2E01 B5    1845** OR      L
0B2E02 D9    1846** EXX
0B2E03 B4    1847** OR      H
0B2E04 B5    1848** OR      L
0B2E05 D9    1849** EXX
0B2E06 C9    1850** RET
             1851** ;
             1852** ; FCOMP - Compare two numbers
             1853** ;     Output: A=0 if equal, A=&40 if L>R, A=&C0 if L<R
             1854** ;
0B2E07 78    1855** FCOMP_FP:			LD      A,B
0B2E08 B1    1856** OR      C               ;Both integer?
0B2E09 20    1857** JR      NZ,FCOMP1
0B2E0A 0B 
0B2E0B CD    1858** CALL    ICP
0B2E0C 20 
0B2E0D 2E 
0B2E0E 0B 
0B2E0F 3E    1859** FCOMP0:			LD      A,0
0B2E10 00 
0B2E11 C8    1860** RET     Z               ;Equal
0B2E12 3E    1861** LD      A,80H
0B2E13 80 
0B2E14 1F    1862** RRA
0B2E15 C9    1863** RET
             1864** ;
0B2E16 CD    1865** FCOMP1:			CALL    FLOAT2          ;Float both
0B2E17 9B 
0B2E18 2D 
0B2E19 0B 
0B2E1A CD    1866** CALL    FCP
0B2E1B 2E 
0B2E1C 2E 
0B2E1D 0B 
0B2E1E 18    1867** JR      FCOMP0
0B2E1F EF 
             1868** ;
             1869** ; Integer and floating point compare.
             1870** ; Sets carry & zero flags according to HLH'L'C-DED'E'B
             1871** ; Result pre-set to FALSE
             1872** ; ICP1, FCP1 destroy A,F
             1873** ;
             1874** ; ZERO - Return zero.
             1875** ;  Destroys: A,C,H,L,H',L'
             1876** ;
0B2E20 CD    1877** ICP:			CALL    ICP1
0B2E21 53 
0B2E22 2E 
0B2E23 0B 
0B2E24 3E    1878** ZERO_FP:			LD      A,0
0B2E25 00 
0B2E26 D9    1879** EXX
0B2E27 67    1880** LD      H,A
0B2E28 6F    1881** LD      L,A
0B2E29 D9    1882** EXX
0B2E2A 67    1883** LD      H,A
0B2E2B 6F    1884** LD      L,A
0B2E2C 4F    1885** LD      C,A
0B2E2D C9    1886** RET
             1887** ;
0B2E2E CD    1888** FCP:			CALL    FCP1
0B2E2F 45 
0B2E30 2E 
0B2E31 0B 
0B2E32 18    1889** JR      ZERO_FP            ;PRESET FALSE
0B2E33 F0 
             1890** ;
0B2E34 79    1891** FCP0:			LD      A,C
0B2E35 B8    1892** CP      B               ;COMPARE EXPONENTS
0B2E36 C0    1893** RET     NZ
             1894** ICP0:
0B2E37 52    1895** SBC.S   HL,DE           ;COMP MANTISSA MSB
0B2E38 ED 
0B2E39 52 
0B2E3A 52    1896** ADD.S   HL,DE
0B2E3B 19 
0B2E3C C0    1897** RET     NZ
0B2E3D D9    1898** EXX
0B2E3E 52    1899** SBC.S   HL,DE           ;COMP MANTISSA LSB
0B2E3F ED 
0B2E40 52 
0B2E41 52    1900** ADD.S   HL,DE
0B2E42 19 
0B2E43 D9    1901** EXX
0B2E44 C9    1902** RET
             1903** ;
0B2E45 7C    1904** FCP1:			LD      A,H
0B2E46 AA    1905** XOR     D
0B2E47 7C    1906** LD      A,H
0B2E48 17    1907** RLA
0B2E49 F8    1908** RET     M
0B2E4A 30    1909** JR      NC,FCP0
0B2E4B E8 
0B2E4C CD    1910** CALL    FCP0
0B2E4D 34 
0B2E4E 2E 
0B2E4F 0B 
0B2E50 C8    1911** RET     Z               ;** V0.1 BUG FIX
0B2E51 3F    1912** CCF
0B2E52 C9    1913** RET
             1914** ;
0B2E53 7C    1915** ICP1:			LD      A,H
0B2E54 AA    1916** XOR     D
0B2E55 F2    1917** JP      P,ICP0
0B2E56 37 
0B2E57 2E 
0B2E58 0B 
0B2E59 7C    1918** LD      A,H
0B2E5A 17    1919** RLA
0B2E5B C9    1920** RET
             1921** ;
             1922** ; ADD - Integer add.
             1923** ; Carry, sign & zero flags valid on exit
             1924** ;     Destroys: H,L,H',L',F
             1925** ;
0B2E5C 05    1926** X10B:			DEC     B
0B2E5D 0C    1927** INC     C
0B2E5E CD    1928** X5:			CALL    COPY0
0B2E5F A5 
0B2E60 2E 
0B2E61 0B 
0B2E62 CD    1929** CALL    D2C
0B2E63 98 
0B2E64 2E 
0B2E65 0B 
0B2E66 CD    1930** CALL    D2C
0B2E67 98 
0B2E68 2E 
0B2E69 0B 
0B2E6A 08    1931** EX      AF,AF'          ;SAVE CARRY
0B2E6B D9    1932** ADD_:			EXX
0B2E6C 52    1933** ADD.S   HL,DE
0B2E6D 19 
0B2E6E D9    1934** EXX
0B2E6F 52    1935** ADC.S   HL,DE
0B2E70 ED 
0B2E71 5A 
0B2E72 C9    1936** RET
             1937** ;
             1938** ; SUB - Integer subtract.
             1939** ; Carry, sign & zero flags valid on exit
             1940** ;     Destroys: H,L,H',L',F
             1941** ;
0B2E73 D9    1942** SUB_:			EXX
0B2E74 B7    1943** OR      A
0B2E75 52    1944** SBC.S   HL,DE
0B2E76 ED 
0B2E77 52 
0B2E78 D9    1945** EXX
0B2E79 52    1946** SBC.S   HL,DE
0B2E7A ED 
0B2E7B 52 
0B2E7C C9    1947** RET
             1948** ;
             1949** ; X10 - unsigned integer * 10
             1950** ;    Inputs: HLH'L' initial value
             1951** ;   Outputs: DED'E' = initial HLH'L'
             1952** ;            Carry bit set if overflow
             1953** ;            If carry not set HLH'L'=result
             1954** ;  Destroys: D,E,H,L,D',E',H',L',F
             1955** ; X2 - Multiply HLH'L' by 2 as 32-bit integer.
             1956** ;     Carry set if MSB=1 before shift.
             1957** ;     Sign set if MSB=1 after shift.
             1958** ;     Destroys: H,L,H',L',F
             1959** ;
0B2E7D CD    1960** X10:			CALL    COPY0           ;DED'E'=HLH'L'
0B2E7E A5 
0B2E7F 2E 
0B2E80 0B 
0B2E81 CD    1961** CALL    X2
0B2E82 90 
0B2E83 2E 
0B2E84 0B 
0B2E85 D8    1962** RET     C               ;TOO BIG
0B2E86 CD    1963** CALL    X2
0B2E87 90 
0B2E88 2E 
0B2E89 0B 
0B2E8A D8    1964** RET     C
0B2E8B CD    1965** CALL    ADD_
0B2E8C 6B 
0B2E8D 2E 
0B2E8E 0B 
0B2E8F D8    1966** RET     C
0B2E90 D9    1967** X2:			EXX
0B2E91 52    1968** ADD.S   HL,HL
0B2E92 29 
0B2E93 D9    1969** EXX
0B2E94 52    1970** ADC.S   HL,HL
0B2E95 ED 
0B2E96 6A 
0B2E97 C9    1971** RET
             1972** ;
             1973** ; D2 - Divide HLH'L' by 2 as 32-bit integer.
             1974** ;     Carry set if LSB=1 before shift.
             1975** ;     Destroys: H,L,H',L',F
             1976** ;
0B2E98 0C    1977** D2C:			INC     C
0B2E99 CB    1978** D2:			SRL     H
0B2E9A 3C 
0B2E9B CB    1979** RR      L
0B2E9C 1D 
0B2E9D D9    1980** EXX
0B2E9E CB    1981** RR      H
0B2E9F 1C 
0B2EA0 CB    1982** RR      L
0B2EA1 1D 
0B2EA2 D9    1983** EXX
0B2EA3 C9    1984** RET
             1985** ;
             1986** ; COPY - COPY HLH'L'C INTO DED'E'B
             1987** ;   Destroys: B,C,D,E,H,L,D',E',H',L'
             1988** ;
0B2EA4 41    1989** COPY_:			LD      B,C
0B2EA5 54    1990** COPY0:			LD      D,H
0B2EA6 5D    1991** LD      E,L
0B2EA7 D9    1992** EXX
0B2EA8 54    1993** LD      D,H
0B2EA9 5D    1994** LD      E,L
0B2EAA D9    1995** EXX
0B2EAB C9    1996** RET
             1997** ;
             1998** ; SQUARE - PUSH X*X
             1999** ; PUSH5 - PUSH HLH'L'C ONTO STACK.
             2000** ;   Destroys: SP,IX
             2001** ;
0B2EAC CD    2002** SQUARE:			CALL    COPY_
0B2EAD A4 
0B2EAE 2E 
0B2EAF 0B 
0B2EB0 CD    2003** CALL    FMUL
0B2EB1 0F 
0B2EB2 25 
0B2EB3 0B 
0B2EB4 DD    2004** PUSH5:			POP     IX              ;RETURN ADDRESS
0B2EB5 E1 
0B2EB6 C5    2005** PUSH    BC
0B2EB7 E5    2006** PUSH    HL
0B2EB8 D9    2007** EXX
0B2EB9 E5    2008** PUSH    HL
0B2EBA D9    2009** EXX
0B2EBB DD    2010** JP      (IX)            ;"RETURN"
0B2EBC E9 
             2011** ;
             2012** ; POP5 - POP DED'E'B OFF STACK.
             2013** ;   Destroys: A,B,D,E,D',E',SP,IX
             2014** ;
0B2EBD DD    2015** POP5:			POP     IX              ;RETURN ADDRESS
0B2EBE E1 
0B2EBF D9    2016** EXX
0B2EC0 D1    2017** POP     DE
0B2EC1 D9    2018** EXX
0B2EC2 D1    2019** POP     DE
0B2EC3 79    2020** LD      A,C
0B2EC4 C1    2021** POP     BC
0B2EC5 41    2022** LD      B,C
0B2EC6 4F    2023** LD      C,A
0B2EC7 DD    2024** JP      (IX)            ;"RETURN"
0B2EC8 E9 
             2025** ;
             2026** ; RATIO - Calculate (X-1)/(X+1)
             2027** ;     Inputs: X in HLH'L'C
             2028** ;    Outputs: (X-1)/(X+1) in HLH'L'C
             2029** ;   Destroys: Everything except IY,SP,I
             2030** ;
0B2EC9 CD    2031** RATIO:			CALL    PUSH5           ;SAVE X
0B2ECA B4 
0B2ECB 2E 
0B2ECC 0B 
0B2ECD CD    2032** CALL    DONE
0B2ECE 3C 
0B2ECF 28 
0B2ED0 0B 
0B2ED1 CD    2033** CALL    FADD
0B2ED2 FD 
0B2ED3 23 
0B2ED4 0B 
0B2ED5 CD    2034** CALL    POP5            ;RESTORE X
0B2ED6 BD 
0B2ED7 2E 
0B2ED8 0B 
0B2ED9 CD    2035** CALL    PUSH5           ;SAVE X+1
0B2EDA B4 
0B2EDB 2E 
0B2EDC 0B 
0B2EDD CD    2036** CALL    SWAP_FP
0B2EDE D8 
0B2EDF 2D 
0B2EE0 0B 
0B2EE1 CD    2037** CALL    DONE
0B2EE2 3C 
0B2EE3 28 
0B2EE4 0B 
0B2EE5 CD    2038** CALL    FSUB
0B2EE6 E4 
0B2EE7 23 
0B2EE8 0B 
0B2EE9 CD    2039** CALL    POP5            ;RESTORE X+1
0B2EEA BD 
0B2EEB 2E 
0B2EEC 0B 
0B2EED C3    2040** JP      FDIV
0B2EEE 66 
0B2EEF 24 
0B2EF0 0B 
             2041** ;
             2042** ; POLY - Evaluate a polynomial.
             2043** ;     Inputs: X in HLH'L'C and also stored at (SP+2)
             2044** ;             Polynomial coefficients follow call.
             2045** ;    Outputs: Result in HLH'L'C
             2046** ;   Destroys: Everything except IY,SP,I
             2047** ; Routine terminates on finding a coefficient >=1.
             2048** ; Note: The last coefficient is EXECUTED on return
             2049** ;       so must contain only innocuous bytes!
             2050** ;
0B2EF1 DD    2051** POLY:			LD      IX, 3				; Advance the SP to the return address
0B2EF2 21 
0B2EF3 03 
0B2EF4 00 
0B2EF4 00   
0B2EF6 DD    2052** ADD     IX, SP
0B2EF7 39 
0B2EF8 DD    2053** EX      (SP), IX			; IX: Points to the inline list of coefficients
0B2EF9 E3 
             2054** ;
0B2EFA CD    2055** CALL    DLOAD5          		; Load the first coefficient from (IX)
0B2EFB D0 
0B2EFC 2B 
0B2EFD 0B 
0B2EFE CD    2056** POLY1:			CALL    FMUL
0B2EFF 0F 
0B2F00 25 
0B2F01 0B 
0B2F02 11    2057** LD      DE, 5				; Skip to the next coefficient
0B2F03 05 
0B2F04 00 
0B2F05 00 
0B2F06 DD    2058** ADD     IX, DE
0B2F07 19 
0B2F08 CD    2059** CALL    DLOAD5          		; Load the second coefficient from (IX)
0B2F09 D0 
0B2F0A 2B 
0B2F0B 0B 
0B2F0C DD    2060** EX      (SP), IX			; Restore the SP just in case we need to return
0B2F0D E3 
0B2F0E 04    2061** INC     B
0B2F0F 05    2062** DEC     B               		; Test B for end byte (80h)
0B2F10 FA    2063** JP      M,FADD				; Yes, so add and return
0B2F11 FD 
0B2F12 23 
0B2F13 0B 
0B2F14 CD    2064** CALL    FADD				; No, so add
0B2F15 FD 
0B2F16 23 
0B2F17 0B 
0B2F18 CD    2065** CALL    DLOAD5_SPL			; Load X from SP
0B2F19 E2 
0B2F1A 2B 
0B2F1B 0B 
0B2F1C DD    2066** EX      (SP), IX			; IX: Points to the inline list of coefficients
0B2F1D E3 
0B2F1E 18    2067** JR      POLY1				; And loop
0B2F1F DE 
             2068** ;
             2069** ; POWR10 - Calculate power of ten.
             2070** ;     Inputs: A=power of 10 required (A<128)
             2071** ;             A=binary exponent to be exceeded (A>=128)
             2072** ;    Outputs: DED'E'B = result
             2073** ;             A = actual power of ten returned
             2074** ;   Destroys: A,B,D,E,A',D',E',F,F'
             2075** ;
0B2F20 3C    2076** POWR10:			INC     A
0B2F21 08    2077** EX      AF,AF'
0B2F22 E5    2078** PUSH    HL
0B2F23 D9    2079** EXX
0B2F24 E5    2080** PUSH    HL
0B2F25 D9    2081** EXX
0B2F26 CD    2082** CALL    DONE
0B2F27 3C 
0B2F28 28 
0B2F29 0B 
0B2F2A CD    2083** CALL    SWAP_FP
0B2F2B D8 
0B2F2C 2D 
0B2F2D 0B 
0B2F2E AF    2084** XOR     A
0B2F2F 08    2085** POWR11:			EX      AF,AF'
0B2F30 3D    2086** DEC     A
0B2F31 28    2087** JR      Z,POWR14        ;EXIT TYPE 1
0B2F32 26 
0B2F33 F2    2088** JP      P,POWR13
0B2F34 3B 
0B2F35 2F 
0B2F36 0B 
0B2F37 B9    2089** CP      C
0B2F38 38    2090** JR      C,POWR14        ;EXIT TYPE 2
0B2F39 1F 
0B2F3A 3C    2091** INC     A
0B2F3B 08    2092** POWR13:			EX      AF,AF'
0B2F3C 3C    2093** INC     A
0B2F3D CB    2094** SET     7,H
0B2F3E FC 
0B2F3F CD    2095** CALL    X5
0B2F40 5E 
0B2F41 2E 
0B2F42 0B 
0B2F43 30    2096** JR      NC,POWR12
0B2F44 06 
0B2F45 08    2097** EX      AF,AF'
0B2F46 CD    2098** CALL    D2C
0B2F47 98 
0B2F48 2E 
0B2F49 0B 
0B2F4A 08    2099** EX      AF,AF'
0B2F4B 08    2100** POWR12:			EX      AF,AF'
0B2F4C DC    2101** CALL    C,ADD1_FP          ;ROUND UP
0B2F4D C0 
0B2F4E 2D 
0B2F4F 0B 
0B2F50 0C    2102** INC     C
0B2F51 FA    2103** JP      M,POWR11
0B2F52 2F 
0B2F53 2F 
0B2F54 0B 
0B2F55 C3    2104** JP      OFLOW
0B2F56 EF 
0B2F57 2D 
0B2F58 0B 
0B2F59 CD    2105** POWR14:			CALL    SWAP_FP
0B2F5A D8 
0B2F5B 2D 
0B2F5C 0B 
0B2F5D CB    2106** RES     7,D
0B2F5E BA 
0B2F5F D9    2107** EXX
0B2F60 E1    2108** POP     HL
0B2F61 D9    2109** EXX
0B2F62 E1    2110** POP     HL
0B2F63 08    2111** EX      AF,AF'
0B2F64 C9    2112** RET
             2113** ;
             2114** ; DIVA, DIVB - DIVISION PRIMITIVE.
             2115** ;     Function: D'E'DE = H'L'HLD'E'DE / B'C'BC
             2116** ;               Remainder in H'L'HL
             2117** ;     Inputs: A = loop counter (normally -32)
             2118** ;     Destroys: A,D,E,H,L,D',E',H',L',F
             2119** ;
0B2F65 B7    2120** DIVA:			OR      A               ;CLEAR CARRY
             2121** DIV0:
0B2F66 52    2122** SBC.S   HL,BC           ;DIVIDEND-DIVISOR
0B2F67 ED 
0B2F68 42 
0B2F69 D9    2123** EXX
0B2F6A 52    2124** SBC.S   HL,BC
0B2F6B ED 
0B2F6C 42 
0B2F6D D9    2125** EXX
0B2F6E 30    2126** JR      NC,DIV1
0B2F6F 07 
0B2F70 52    2127** ADD.S   HL,BC           ;DIVIDEND+DIVISOR
0B2F71 09 
0B2F72 D9    2128** EXX
0B2F73 52    2129** ADC.S   HL,BC
0B2F74 ED 
0B2F75 4A 
0B2F76 D9    2130** EXX
0B2F77 3F    2131** DIV1:			CCF
0B2F78 CB    2132** DIVC:			RL      E               ;SHIFT RESULT INTO DE
0B2F79 13 
0B2F7A CB    2133** RL      D
0B2F7B 12 
0B2F7C D9    2134** EXX
0B2F7D CB    2135** RL      E
0B2F7E 13 
0B2F7F CB    2136** RL      D
0B2F80 12 
0B2F81 D9    2137** EXX
0B2F82 3C    2138** INC     A
0B2F83 F0    2139** RET     P
             2140** DIVB:
0B2F84 52    2141** ADC.S   HL,HL           ;DIVIDEND*2
0B2F85 ED 
0B2F86 6A 
0B2F87 D9    2142** EXX
0B2F88 52    2143** ADC.S   HL,HL
0B2F89 ED 
0B2F8A 6A 
0B2F8B D9    2144** EXX
0B2F8C 30    2145** JR      NC,DIV0
0B2F8D D8 
0B2F8E B7    2146** OR      A
0B2F8F 52    2147** SBC.S   HL,BC           ;DIVIDEND-DIVISOR
0B2F90 ED 
0B2F91 42 
0B2F92 D9    2148** EXX
0B2F93 52    2149** SBC.S   HL,BC
0B2F94 ED 
0B2F95 42 
0B2F96 D9    2150** EXX
0B2F97 37    2151** SCF
0B2F98 C3    2152** JP      DIVC
0B2F99 78 
0B2F9A 2F 
0B2F9B 0B 
             2153** ;
             2154** ;MULA, MULB - MULTIPLICATION PRIMITIVE.
             2155** ;    Function: H'L'HLD'E'DE = B'C'BC * D'E'DE
             2156** ;    Inputs: A = loop counter (usually -32)
             2157** ;            H'L'HL = 0
             2158** ;    Destroys: D,E,H,L,D',E',H',L',A,F
             2159** ;
0B2F9C B7    2160** MULA:			OR      A               ;CLEAR CARRY
0B2F9D D9    2161** MUL0:			EXX
0B2F9E CB    2162** RR      D               ;MULTIPLIER/2
0B2F9F 1A 
0B2FA0 CB    2163** RR      E
0B2FA1 1B 
0B2FA2 D9    2164** EXX
0B2FA3 CB    2165** RR      D
0B2FA4 1A 
0B2FA5 CB    2166** RR      E
0B2FA6 1B 
0B2FA7 30    2167** JR      NC,MUL1
0B2FA8 07 
0B2FA9 52    2168** ADD.S   HL,BC           ;ADD IN MULTIPLICAND
0B2FAA 09 
0B2FAB D9    2169** EXX
0B2FAC 52    2170** ADC.S   HL,BC
0B2FAD ED 
0B2FAE 4A 
0B2FAF D9    2171** EXX
0B2FB0 3C    2172** MUL1:			INC     A
0B2FB1 F0    2173** RET     P
0B2FB2 D9    2174** MULB:			EXX
0B2FB3 CB    2175** RR      H               ;PRODUCT/2
0B2FB4 1C 
0B2FB5 CB    2176** RR      L
0B2FB6 1D 
0B2FB7 D9    2177** EXX
0B2FB8 CB    2178** RR      H
0B2FB9 1C 
0B2FBA CB    2179** RR      L
0B2FBB 1D 
0B2FBC C3    2180** JP      MUL0
0B2FBD 9D 
0B2FBE 2F 
0B2FBF 0B 
             2181** ;
             2182** ; SQRA, SQRB - SQUARE ROOT PRIMITIVES
             2183** ;     Function: B'C'BC = SQR (D'E'DE)
             2184** ;     Inputs: A = loop counter (normally -31)
             2185** ;             B'C'BCH'L'HL initialised to 0
             2186** ;   Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',F
             2187** ;
             2188** SQR1:
0B2FC0 52    2189** SBC.S   HL,BC
0B2FC1 ED 
0B2FC2 42 
0B2FC3 D9    2190** EXX
0B2FC4 52    2191** SBC.S   HL,BC
0B2FC5 ED 
0B2FC6 42 
0B2FC7 D9    2192** EXX
0B2FC8 0C    2193** INC     C
0B2FC9 30    2194** JR      NC,SQR2
0B2FCA 09 
0B2FCB 0D    2195** DEC     C
0B2FCC 52    2196** ADD.S   HL,BC
0B2FCD 09 
0B2FCE D9    2197** EXX
0B2FCF 52    2198** ADC.S   HL,BC
0B2FD0 ED 
0B2FD1 4A 
0B2FD2 D9    2199** EXX
0B2FD3 0D    2200** DEC     C
0B2FD4 3C    2201** SQR2:			INC     A
0B2FD5 F0    2202** RET     P
0B2FD6 CB    2203** SQRA:			SLA     C
0B2FD7 21 
0B2FD8 CB    2204** RL      B
0B2FD9 10 
0B2FDA D9    2205** EXX
0B2FDB CB    2206** RL      C
0B2FDC 11 
0B2FDD CB    2207** RL      B
0B2FDE 10 
0B2FDF D9    2208** EXX
0B2FE0 0C    2209** INC     C
0B2FE1 CB    2210** SLA     E
0B2FE2 23 
0B2FE3 CB    2211** RL      D
0B2FE4 12 
0B2FE5 D9    2212** EXX
0B2FE6 CB    2213** RL      E
0B2FE7 13 
0B2FE8 CB    2214** RL      D
0B2FE9 12 
0B2FEA D9    2215** EXX
0B2FEB 52    2216** ADC.S   HL,HL
0B2FEC ED 
0B2FED 6A 
0B2FEE D9    2217** EXX
0B2FEF 52    2218** ADC.S   HL,HL
0B2FF0 ED 
0B2FF1 6A 
0B2FF2 D9    2219** EXX
0B2FF3 CB    2220** SLA     E
0B2FF4 23 
0B2FF5 CB    2221** RL      D
0B2FF6 12 
0B2FF7 D9    2222** EXX
0B2FF8 CB    2223** RL      E
0B2FF9 13 
0B2FFA CB    2224** RL      D
0B2FFB 12 
0B2FFC D9    2225** EXX
0B2FFD 52    2226** ADC.S   HL,HL
0B2FFE ED 
0B2FFF 6A 
0B3000 D9    2227** EXX
0B3001 52    2228** ADC.S   HL,HL
0B3002 ED 
0B3003 6A 
0B3004 D9    2229** EXX
0B3005 D2    2230** JP      NC,SQR1
0B3006 C0 
0B3007 2F 
0B3008 0B 
0B3009 B7    2231** SQR3:			OR      A
0B300A 52    2232** SBC.S   HL,BC
0B300B ED 
0B300C 42 
0B300D D9    2233** EXX
0B300E 52    2234** SBC.S   HL,BC
0B300F ED 
0B3010 42 
0B3011 D9    2235** EXX
0B3012 0C    2236** INC     C
0B3013 C3    2237** JP      SQR2
0B3014 D4 
0B3015 2F 
0B3016 0B 
             2238** ;
             2239** SQRB:
0B3017 52    2240** ADD.S   HL,HL
0B3018 29 
0B3019 D9    2241** EXX
0B301A 52    2242** ADC.S   HL,HL
0B301B ED 
0B301C 6A 
0B301D D9    2243** EXX
0B301E 38    2244** JR      C,SQR3
0B301F E9 
0B3020 3C    2245** INC     A
0B3021 0C    2246** INC     C
0B3022 52    2247** SBC.S   HL,BC
0B3023 ED 
0B3024 42 
0B3025 D9    2248** EXX
0B3026 52    2249** SBC.S   HL,BC
0B3027 ED 
0B3028 42 
0B3029 D9    2250** EXX
0B302A D0    2251** RET     NC
0B302B 52    2252** ADD.S   HL,BC
0B302C 09 
0B302D D9    2253** EXX
0B302E 52    2254** ADC.S   HL,BC
0B302F ED 
0B3030 4A 
0B3031 D9    2255** EXX
0B3032 0D    2256** DEC     C
0B3033 C9    2257** RET
             2258** ;
0B3034 DD    2259** DIGITQ:			LD      A,(IX)
0B3035 7E 
0B3036 00 
0B3037 FE    2260** CP      '9'+1
0B3038 3A 
0B3039 3F    2261** CCF
0B303A D8    2262** RET     C
0B303B FE    2263** CP      '0'
0B303C 30 
0B303D C9    2264** RET
             2265** ;
0B303E DD    2266** SIGNQ:			LD      A,(IX)
0B303F 7E 
0B3040 00 
0B3041 DD    2267** INC     IX
0B3042 23 
0B3043 FE    2268** CP      ' '
0B3044 20 
0B3045 28    2269** JR      Z,SIGNQ
0B3046 F7 
0B3047 FE    2270** CP      '+'
0B3048 2B 
0B3049 C8    2271** RET     Z
0B304A FE    2272** CP      '-'
0B304B 2D 
0B304C C8    2273** RET     Z
0B304D DD    2274** DEC     IX
0B304E 2B 
0B304F C9    2275** RET
              0008* include "basic/gpio.asm"
             0001** ;
             0002** ; Title:	BBC Basic for AGON - GPIO functions
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	12/05/2023
             0006** ;
             0007** ; Modinfo:
             0008** 
             0009** ; INCLUDE	"macros.inc"
             0010** ; INCLUDE	"equs.inc"
             0011** 
             0012** ; .ASSUME	ADL = 1
             0013** 
             0014** ; SEGMENT CODE
             0015** 
             0016** ; XDEF	GPIOB_SETMODE
             0017** 
             0018** ; XREF	SWITCH_A
             0019** 
             0020** ;  A: Mode
             0021** ;  B: Pins
             0022** ;
0B3050 CD    0023** GPIOB_SETMODE:		CALL	SWITCH_A
0B3051 F5 
0B3052 3F 
0B3053 0B 
0B3054 68    0024** DW	GPIOB_M0	; Output
0B3055 30 
0B3056 8D    0025** DW	GPIOB_M1	; Input
0B3057 30 
0B3058 AD    0026** DW	GPIOB_M2	; Open Drain IO
0B3059 30 
0B305A CD    0027** DW	GPIOB_M3	; Open Source IO
0B305B 30 
0B305C E8    0028** DW	GPIOB_M4	; Interrupt, Dual Edge
0B305D 30 
0B305E 14    0029** DW	GPIOB_M5	; Alt Function
0B305F 31 
0B3060 2F    0030** DW	GPIOB_M6	; Interrupt, Active Low
0B3061 31 
0B3062 56    0031** DW	GPIOB_M7	; Interrupt, Active High
0B3063 31 
0B3064 78    0032** DW	GPIOB_M8	; Interrupt, Falling Edge
0B3065 31 
0B3066 9A    0033** DW	GPIOB_M9	; Interrupt, Rising Edge
0B3067 31 
             0034** 
             0035** ; Output
             0036** ;
             0037** GPIOB_M0:		RES_GPIO PB_DDR,  B
0B3068 C5   0001**M PUSH	BC
0B3069 78   0002**M LD	A, val
0B306A 2F   0003**M CPL
0B306B 4F   0004**M LD	C, A
0B306C ED   0005**M IN0	A, (reg)
0B306D 38 
0B306E 9B 
0B306F A1   0006**M AND	C
0B3070 ED   0007**M OUT0	(reg), A
0B3071 39 
0B3072 9B 
0B3073 C1   0008**M POP	BC
             0038** RES_GPIO PB_ALT1, B
0B3074 C5   0001**M PUSH	BC
0B3075 78   0002**M LD	A, val
0B3076 2F   0003**M CPL
0B3077 4F   0004**M LD	C, A
0B3078 ED   0005**M IN0	A, (reg)
0B3079 38 
0B307A 9C 
0B307B A1   0006**M AND	C
0B307C ED   0007**M OUT0	(reg), A
0B307D 39 
0B307E 9C 
0B307F C1   0008**M POP	BC
             0039** RES_GPIO PB_ALT2, B
0B3080 C5   0001**M PUSH	BC
0B3081 78   0002**M LD	A, val
0B3082 2F   0003**M CPL
0B3083 4F   0004**M LD	C, A
0B3084 ED   0005**M IN0	A, (reg)
0B3085 38 
0B3086 9D 
0B3087 A1   0006**M AND	C
0B3088 ED   0007**M OUT0	(reg), A
0B3089 39 
0B308A 9D 
0B308B C1   0008**M POP	BC
0B308C C9    0040** RET
             0041** 
             0042** ; Input
             0043** ;
             0044** GPIOB_M1:		SET_GPIO PB_DDR,  B
0B308D ED   0001**M IN0	A, (reg)
0B308E 38 
0B308F 9B 
0B3090 B0   0002**M OR	val
0B3091 ED   0003**M OUT0	(reg), A
0B3092 39 
0B3093 9B 
             0045** RES_GPIO PB_ALT1, B
0B3094 C5   0001**M PUSH	BC
0B3095 78   0002**M LD	A, val
0B3096 2F   0003**M CPL
0B3097 4F   0004**M LD	C, A
0B3098 ED   0005**M IN0	A, (reg)
0B3099 38 
0B309A 9C 
0B309B A1   0006**M AND	C
0B309C ED   0007**M OUT0	(reg), A
0B309D 39 
0B309E 9C 
0B309F C1   0008**M POP	BC
             0046** RES_GPIO PB_ALT2, B
0B30A0 C5   0001**M PUSH	BC
0B30A1 78   0002**M LD	A, val
0B30A2 2F   0003**M CPL
0B30A3 4F   0004**M LD	C, A
0B30A4 ED   0005**M IN0	A, (reg)
0B30A5 38 
0B30A6 9D 
0B30A7 A1   0006**M AND	C
0B30A8 ED   0007**M OUT0	(reg), A
0B30A9 39 
0B30AA 9D 
0B30AB C1   0008**M POP	BC
0B30AC C9    0047** RET
             0048** 
             0049** ; Open Drain IO
             0050** ;
             0051** GPIOB_M2:		RES_GPIO PB_DDR,  B
0B30AD C5   0001**M PUSH	BC
0B30AE 78   0002**M LD	A, val
0B30AF 2F   0003**M CPL
0B30B0 4F   0004**M LD	C, A
0B30B1 ED   0005**M IN0	A, (reg)
0B30B2 38 
0B30B3 9B 
0B30B4 A1   0006**M AND	C
0B30B5 ED   0007**M OUT0	(reg), A
0B30B6 39 
0B30B7 9B 
0B30B8 C1   0008**M POP	BC
             0052** SET_GPIO PB_ALT1, B
0B30B9 ED   0001**M IN0	A, (reg)
0B30BA 38 
0B30BB 9C 
0B30BC B0   0002**M OR	val
0B30BD ED   0003**M OUT0	(reg), A
0B30BE 39 
0B30BF 9C 
             0053** RES_GPIO PB_ALT2, B
0B30C0 C5   0001**M PUSH	BC
0B30C1 78   0002**M LD	A, val
0B30C2 2F   0003**M CPL
0B30C3 4F   0004**M LD	C, A
0B30C4 ED   0005**M IN0	A, (reg)
0B30C5 38 
0B30C6 9D 
0B30C7 A1   0006**M AND	C
0B30C8 ED   0007**M OUT0	(reg), A
0B30C9 39 
0B30CA 9D 
0B30CB C1   0008**M POP	BC
0B30CC C9    0054** RET
             0055** 
             0056** ; Open Source IO
             0057** ;
             0058** GPIOB_M3:		SET_GPIO PB_DDR,  B
0B30CD ED   0001**M IN0	A, (reg)
0B30CE 38 
0B30CF 9B 
0B30D0 B0   0002**M OR	val
0B30D1 ED   0003**M OUT0	(reg), A
0B30D2 39 
0B30D3 9B 
             0059** SET_GPIO PB_ALT1, B
0B30D4 ED   0001**M IN0	A, (reg)
0B30D5 38 
0B30D6 9C 
0B30D7 B0   0002**M OR	val
0B30D8 ED   0003**M OUT0	(reg), A
0B30D9 39 
0B30DA 9C 
             0060** RES_GPIO PB_ALT2, B
0B30DB C5   0001**M PUSH	BC
0B30DC 78   0002**M LD	A, val
0B30DD 2F   0003**M CPL
0B30DE 4F   0004**M LD	C, A
0B30DF ED   0005**M IN0	A, (reg)
0B30E0 38 
0B30E1 9D 
0B30E2 A1   0006**M AND	C
0B30E3 ED   0007**M OUT0	(reg), A
0B30E4 39 
0B30E5 9D 
0B30E6 C1   0008**M POP	BC
0B30E7 C9    0061** RET
             0062** 
             0063** ; Interrupt, Dual Edge
             0064** ;
             0065** GPIOB_M4:		SET_GPIO PB_DR,   B
0B30E8 ED   0001**M IN0	A, (reg)
0B30E9 38 
0B30EA 9A 
0B30EB B0   0002**M OR	val
0B30EC ED   0003**M OUT0	(reg), A
0B30ED 39 
0B30EE 9A 
             0066** RES_GPIO PB_DDR,  B
0B30EF C5   0001**M PUSH	BC
0B30F0 78   0002**M LD	A, val
0B30F1 2F   0003**M CPL
0B30F2 4F   0004**M LD	C, A
0B30F3 ED   0005**M IN0	A, (reg)
0B30F4 38 
0B30F5 9B 
0B30F6 A1   0006**M AND	C
0B30F7 ED   0007**M OUT0	(reg), A
0B30F8 39 
0B30F9 9B 
0B30FA C1   0008**M POP	BC
             0067** RES_GPIO PB_ALT1, B
0B30FB C5   0001**M PUSH	BC
0B30FC 78   0002**M LD	A, val
0B30FD 2F   0003**M CPL
0B30FE 4F   0004**M LD	C, A
0B30FF ED   0005**M IN0	A, (reg)
0B3100 38 
0B3101 9C 
0B3102 A1   0006**M AND	C
0B3103 ED   0007**M OUT0	(reg), A
0B3104 39 
0B3105 9C 
0B3106 C1   0008**M POP	BC
             0068** RES_GPIO PB_ALT2, B
0B3107 C5   0001**M PUSH	BC
0B3108 78   0002**M LD	A, val
0B3109 2F   0003**M CPL
0B310A 4F   0004**M LD	C, A
0B310B ED   0005**M IN0	A, (reg)
0B310C 38 
0B310D 9D 
0B310E A1   0006**M AND	C
0B310F ED   0007**M OUT0	(reg), A
0B3110 39 
0B3111 9D 
0B3112 C1   0008**M POP	BC
0B3113 C9    0069** RET
             0070** 
             0071** ; Alt Function
             0072** ;
             0073** GPIOB_M5:		SET_GPIO PB_DDR,  B
0B3114 ED   0001**M IN0	A, (reg)
0B3115 38 
0B3116 9B 
0B3117 B0   0002**M OR	val
0B3118 ED   0003**M OUT0	(reg), A
0B3119 39 
0B311A 9B 
             0074** RES_GPIO PB_ALT1, B
0B311B C5   0001**M PUSH	BC
0B311C 78   0002**M LD	A, val
0B311D 2F   0003**M CPL
0B311E 4F   0004**M LD	C, A
0B311F ED   0005**M IN0	A, (reg)
0B3120 38 
0B3121 9C 
0B3122 A1   0006**M AND	C
0B3123 ED   0007**M OUT0	(reg), A
0B3124 39 
0B3125 9C 
0B3126 C1   0008**M POP	BC
             0075** SET_GPIO PB_ALT2, B
0B3127 ED   0001**M IN0	A, (reg)
0B3128 38 
0B3129 9D 
0B312A B0   0002**M OR	val
0B312B ED   0003**M OUT0	(reg), A
0B312C 39 
0B312D 9D 
0B312E C9    0076** RET
             0077** 
             0078** ; Interrupt, Active Low
             0079** ;
             0080** GPIOB_M6:		RES_GPIO PB_DR,   B
0B312F C5   0001**M PUSH	BC
0B3130 78   0002**M LD	A, val
0B3131 2F   0003**M CPL
0B3132 4F   0004**M LD	C, A
0B3133 ED   0005**M IN0	A, (reg)
0B3134 38 
0B3135 9A 
0B3136 A1   0006**M AND	C
0B3137 ED   0007**M OUT0	(reg), A
0B3138 39 
0B3139 9A 
0B313A C1   0008**M POP	BC
             0081** RES_GPIO PB_DDR,  B
0B313B C5   0001**M PUSH	BC
0B313C 78   0002**M LD	A, val
0B313D 2F   0003**M CPL
0B313E 4F   0004**M LD	C, A
0B313F ED   0005**M IN0	A, (reg)
0B3140 38 
0B3141 9B 
0B3142 A1   0006**M AND	C
0B3143 ED   0007**M OUT0	(reg), A
0B3144 39 
0B3145 9B 
0B3146 C1   0008**M POP	BC
             0082** SET_GPIO PB_ALT1, B
0B3147 ED   0001**M IN0	A, (reg)
0B3148 38 
0B3149 9C 
0B314A B0   0002**M OR	val
0B314B ED   0003**M OUT0	(reg), A
0B314C 39 
0B314D 9C 
             0083** SET_GPIO PB_ALT2, B
0B314E ED   0001**M IN0	A, (reg)
0B314F 38 
0B3150 9D 
0B3151 B0   0002**M OR	val
0B3152 ED   0003**M OUT0	(reg), A
0B3153 39 
0B3154 9D 
0B3155 C9    0084** RET
             0085** 
             0086** 
             0087** ; Interrupt, Active High
             0088** ;
             0089** GPIOB_M7:		SET_GPIO PB_DR,   B
0B3156 ED   0001**M IN0	A, (reg)
0B3157 38 
0B3158 9A 
0B3159 B0   0002**M OR	val
0B315A ED   0003**M OUT0	(reg), A
0B315B 39 
0B315C 9A 
             0090** RES_GPIO PB_DDR,  B
0B315D C5   0001**M PUSH	BC
0B315E 78   0002**M LD	A, val
0B315F 2F   0003**M CPL
0B3160 4F   0004**M LD	C, A
0B3161 ED   0005**M IN0	A, (reg)
0B3162 38 
0B3163 9B 
0B3164 A1   0006**M AND	C
0B3165 ED   0007**M OUT0	(reg), A
0B3166 39 
0B3167 9B 
0B3168 C1   0008**M POP	BC
             0091** SET_GPIO PB_ALT1, B
0B3169 ED   0001**M IN0	A, (reg)
0B316A 38 
0B316B 9C 
0B316C B0   0002**M OR	val
0B316D ED   0003**M OUT0	(reg), A
0B316E 39 
0B316F 9C 
             0092** SET_GPIO PB_ALT2, B
0B3170 ED   0001**M IN0	A, (reg)
0B3171 38 
0B3172 9D 
0B3173 B0   0002**M OR	val
0B3174 ED   0003**M OUT0	(reg), A
0B3175 39 
0B3176 9D 
0B3177 C9    0093** RET
             0094** 
             0095** 
             0096** ; Interrupt, Falling Edge
             0097** ;
             0098** GPIOB_M8:		RES_GPIO PB_DR,   B
0B3178 C5   0001**M PUSH	BC
0B3179 78   0002**M LD	A, val
0B317A 2F   0003**M CPL
0B317B 4F   0004**M LD	C, A
0B317C ED   0005**M IN0	A, (reg)
0B317D 38 
0B317E 9A 
0B317F A1   0006**M AND	C
0B3180 ED   0007**M OUT0	(reg), A
0B3181 39 
0B3182 9A 
0B3183 C1   0008**M POP	BC
             0099** SET_GPIO PB_DDR,  B
0B3184 ED   0001**M IN0	A, (reg)
0B3185 38 
0B3186 9B 
0B3187 B0   0002**M OR	val
0B3188 ED   0003**M OUT0	(reg), A
0B3189 39 
0B318A 9B 
             0100** SET_GPIO PB_ALT1, B
0B318B ED   0001**M IN0	A, (reg)
0B318C 38 
0B318D 9C 
0B318E B0   0002**M OR	val
0B318F ED   0003**M OUT0	(reg), A
0B3190 39 
0B3191 9C 
             0101** SET_GPIO PB_ALT2, B
0B3192 ED   0001**M IN0	A, (reg)
0B3193 38 
0B3194 9D 
0B3195 B0   0002**M OR	val
0B3196 ED   0003**M OUT0	(reg), A
0B3197 39 
0B3198 9D 
0B3199 C9    0102** RET
             0103** 
             0104** ; Interrupt, Rising Edge
             0105** ;
             0106** GPIOB_M9:		SET_GPIO PB_DR,   B
0B319A ED   0001**M IN0	A, (reg)
0B319B 38 
0B319C 9A 
0B319D B0   0002**M OR	val
0B319E ED   0003**M OUT0	(reg), A
0B319F 39 
0B31A0 9A 
             0107** SET_GPIO PB_DDR,  B
0B31A1 ED   0001**M IN0	A, (reg)
0B31A2 38 
0B31A3 9B 
0B31A4 B0   0002**M OR	val
0B31A5 ED   0003**M OUT0	(reg), A
0B31A6 39 
0B31A7 9B 
             0108** SET_GPIO PB_ALT1, B
0B31A8 ED   0001**M IN0	A, (reg)
0B31A9 38 
0B31AA 9C 
0B31AB B0   0002**M OR	val
0B31AC ED   0003**M OUT0	(reg), A
0B31AD 39 
0B31AE 9C 
             0109** SET_GPIO PB_ALT2, B
0B31AF ED   0001**M IN0	A, (reg)
0B31B0 38 
0B31B1 9D 
0B31B2 B0   0002**M OR	val
0B31B3 ED   0003**M OUT0	(reg), A
0B31B4 39 
0B31B5 9D 
0B31B6 C9    0110** RET
              0009* include "basic/main.asm"
             0001** ;
             0002** ; Title:	BBC Basic Interpreter - Z80 version
             0003** ;		Command, Error and Lexical Analysis Module - "MAIN"
             0004** ; Author:	(C) Copyright  R.T.Russell  1984
             0005** ; Modified By:	Dean Belfield
             0006** ; Created:	12/05/2023
             0007** ; Last Updated:	26/11/2023
             0008** ;
             0009** ; Modinfo:
             0010** ; 07/05/1984:	Version 2.3
             0011** ; 01/03/1987:	Version 3.0
             0012** ; 03/05/2022:	Modified by Dean Belfield
             0013** ; 06/06/2023:	Modified to run in ADL mode
             0014** ; 26/06/2023:	Fixed binary and unary indirection
             0015** ; 17/08/2023:	Added binary constants
             0016** ; 15/11/2023:	Fixed bug in ONEDIT1 for OSLOAD_TXT, Startup message now includes Agon version
             0017** ; 26/11/2023:	Fixed bug in AUTOLOAD
             0018** 
             0019** ; .ASSUME	ADL = 1
             0020** 
             0021** ; INCLUDE	"equs.inc"
             0022** 
             0023** ; SEGMENT CODE
             0024** 
             0025** ; XDEF	_basic_main
             0026** 
             0027** ; XDEF	COLD
             0028** ; XDEF	WARM
             0029** ; XDEF	CLOOP
             0030** ; XDEF	DELETE
             0031** ; XDEF	LIST_
             0032** ; XDEF	RENUM
             0033** ; XDEF	AUTO
             0034** ; XDEF	NEW
             0035** ; XDEF	OLD
             0036** ; XDEF	LOAD
             0037** ; XDEF	SAVE
             0038** ; XDEF	ERROR_
             0039** ; XDEF	EXTERR
             0040** ; XDEF	LOAD0
             0041** ; XDEF	CLEAR
             0042** ; XDEF	CRLF
             0043** ; XDEF	OUTCHR
             0044** ; XDEF	OUT_
             0045** ; XDEF	FINDL
             0046** ; XDEF	SETLIN
             0047** ; XDEF	PBCDL
             0048** ; XDEF	SAYLN
             0049** ; XDEF	PUTVAR
             0050** ; XDEF	GETVAR
             0051** ; XDEF	GETDEF
             0052** ; XDEF	CREATE
             0053** ; XDEF	RANGE
             0054** ; XDEF	LEXAN2
             0055** ; XDEF	REPORT
             0056** ; XDEF	TELL
             0057** ; XDEF	SPACE_
             0058** ; XDEF	KEYWDS
             0059** ; XDEF	KEYWDL
             0060** ; XDEF	ONEDIT
             0061** ; XDEF	ONEDIT1
             0062** ; XDEF	LISTIT
             0063** ; XDEF	CLEAN
             0064** 
             0065** ; XREF	LISTON
             0066** ; XREF	ERRTXT
             0067** ; XREF	OSINIT
             0068** ; XREF	HIMEM
             0069** ; XREF	PAGE_
             0070** ; XREF	CHAIN0
             0071** ; XREF	PROMPT
             0072** ; XREF	ERRTRP
             0073** ; XREF	ERRLIN
             0074** ; XREF	AUTONO
             0075** ; XREF	LINENO
             0076** ; XREF	INCREM
             0077** ; XREF	OSLINE
             0078** ; XREF	COUNT
             0079** ; XREF	NXT
             0080** ; XREF	BUFFER
             0081** ; XREF	XEQ
             0082** ; XREF	TOP
             0083** ; XREF	EXPRI
             0084** ; XREF	SEARCH
             0085** ; XREF	LTRAP
             0086** ; XREF	LOMEM
             0087** ; XREF	DECODE
             0088** ; XREF	EXPRS
             0089** ; XREF	OSSAVE
             0090** ; XREF	ERR
             0091** ; XREF	ERL
             0092** ; XREF	TRACEN
             0093** ; XREF	RESET
             0094** ; XREF	OSSHUT
             0095** ; XREF	OSLOAD
             0096** ; XREF	FREE
             0097** ; XREF	DYNVAR
             0098** ; XREF	FILL
             0099** ; XREF	OSWRCH
             0100** ; XREF	WIDTH
             0101** ; XREF	COMMA
             0102** ; XREF	MUL16
             0103** ; XREF	BRAKET
             0104** ; XREF	X4OR5
             0105** ; XREF	LOADN
             0106** ; XREF	SFIX
             0107** ; XREF	ITEMI
             0108** ; XREF	FNPTR
             0109** ; XREF	PROPTR
             0110** ; XREF	CHECK
             0111** ; XREF	TERMQ
             0112** ; XREF	OSWRCHCH
             0113** ; XREF	NEWIT
             0114** ; XREF	BAD
             0115** ; XREF	RAM_START
             0116** ; XREF	RAM_END
             0117** ; XREF	R0
             0118** ; XREF	STAR_VERSION
             0119** 
             0120** ; XREF	_basic_end			; In init.asm
             0121** ;
             0122** ; A handful of common token IDs
             0123** ;
             0124** TERROR_MN:			EQU     85H
             0125** LINE_MN_:			EQU     86H
             0126** ELSE_MN_:			EQU     8BH
             0127** THEN_MN_:			EQU     8CH
             0128** LINO_MN:			EQU     8DH
             0129** FN:			EQU     A4H
             0130** TO_MN:			EQU     B8H
             0131** REN:			EQU     CCH
             0132** DATA_MN_:			EQU     DCH
             0133** DIM:			EQU     DEH
             0134** FOR:			EQU     E3H
             0135** GOSUB:			EQU     E4H
             0136** GOTO:			EQU     E5H
             0137** TIF:			EQU     E7H
             0138** LOCAL_:			EQU     EAH
             0139** NEXT:			EQU     EDH
             0140** ON_:			EQU     EEH
             0141** PROC:			EQU     F2H
             0142** REM:			EQU     F4H
             0143** REPEAT:			EQU     F5H
             0144** RESTOR:			EQU     F7H
             0145** TRACE:			EQU     FCH
             0146** UNTIL:			EQU     FDH
             0147** ;
             0148** ; This defines the block of tokens that are pseudo-variables.
             0149** ; There are two versions of each token, a GET and a SET
             0150** 
             0151** ; Name  : GET : SET
             0152** ; ------:-----:----
             0153** ; PTR   : 8Fh : CFh
             0154** ; PAGE  : 90h : D0h
             0155** ; TIME  : 91h : D1h
             0156** ; LOMEM : 92h : D2h
             0157** ; HIMEM : 93h : D3h
             0158** ;
             0159** ; Examples:
             0160** ;   LET A% = PAGE : REM This is the GET version
             0161** ;   PAGE = 40000  : REM This is the SET version
             0162** ;
             0163** TOKLO:			EQU     8FH			; This defines the block of tokens that are pseudo-variables
             0164** TOKHI:			EQU     93H			; PTR, PAGE, TIME, LOMEM, HIMEM
             0165** OFFSET:			EQU     CFH-TOKLO		; Offset to the parameterised SET versions
             0166** 
             0167** ; The main routine
             0168** ; IXU: argv - pointer to array of parameters
             0169** ;   C: argc - number of parameters
             0170** ; Returns:
             0171** ;  HL: Error code, or 0 if OK
             0172** ;
0B31B7 21    0173** _basic_main:			LD	HL, ACCS		; Clear the ACCS
0B31B8 00 
0B31B9 4C 
0B31BA 0B 
0B31BB 36    0174** LD	(HL), 0
0B31BC 00 
0B31BD 79    0175** LD	A, C
0B31BE FE    0176** CP	2
0B31BF 02 
0B31C0 28    0177** JR	Z, AUTOLOAD		; 2 parameters = autoload
0B31C1 2D 
0B31C2 38    0178** JR	C, COLD			; 1 parameter = normal start
0B31C3 3F 
0B31C4 CD    0179** CALL	STAR_VERSION
0B31C5 39 
0B31C6 42 
0B31C7 0B 
0B31C8 CD    0180** CALL	TELL
0B31C9 91 
0B31CA 3F 
0B31CB 0B 
0B31CC 55    0181** DB	"Usage:\n\r"
0B31CD 73 
0B31CE 61 
0B31CF 67 
0B31CF 65   
0B31D0 3A 
0B31D1 0A 
0B31D2 0D 
0B31D4 52    0182** DB	"RUN . <filename>\n\r", 0
0B31D5 55 
0B31D6 4E 
0B31D7 20 
0B31D7 2E   
0B31D8 20 
0B31D9 3C 
0B31DA 66 
0B31DA 69   
0B31DB 6C 
0B31DC 65 
0B31DD 6E 
0B31DD 61   
0B31DE 6D 
0B31DF 65 
0B31E0 3E 
0B31E0 0A   
0B31E1 0D 
0B31E2 00 
0B31E7 21    0183** LD	HL, 0			; The error code
0B31E8 00 
0B31E9 00 
0B31EA 00 
0B31EB C3    0184** JP	_basic_end
0B31EC 79 
0B31ED 50 
0B31EE 0B 
             0185** ;
0B31EF DD    0186** AUTOLOAD:		LD	HL, (IX+3)		; HLU: Address of filename
0B31F0 27 
0B31F1 03 
0B31F2 11    0187** LD	DE, ACCS		;  DE: Destination address
0B31F3 00 
0B31F4 4C 
0B31F5 0B 
0B31F6 7E    0188** AUTOLOAD_1:		LD	A, (HL)			; Fetch the filename byte
0B31F7 12    0189** LD	(DE), A			;
0B31F8 23    0190** INC	HL			; Increase the source pointer
0B31F9 1C    0191** INC	E			; We only need to increase E as ACCS is on a page boundary
0B31FA 28    0192** JR	Z, AUTOLOAD_2		; End if we hit the page boundary
0B31FB 03 
0B31FC B7    0193** OR	A
0B31FD 20    0194** JR	NZ, AUTOLOAD_1		; Loop until we hit a 0 byte
0B31FE F7 
0B31FF 1D    0195** AUTOLOAD_2:		DEC	E
0B3200 3E    0196** LD	A, CR
0B3201 0D 
0B3202 12    0197** LD	(DE), A			; Replace the 0 byte with a CR for BBC BASIC
             0198** ;
0B3203 E1    0199** COLD:			POP	HL			; Pop the return address to init off SPS
0B3204 E5    0200** PUSH	HL 			; Stack it on SPL (*BYE will use this as the return address)
0B3205 21    0201** LD	HL, STAVAR		; Cold start
0B3206 00 
0B3207 4E 
0B3208 0B 
0B3209 F9    0202** LD	SP, HL
0B320A 36    0203** LD	(HL), 10
0B320B 0A 
0B320C 23    0204** INC	HL
0B320D 36    0205** LD	(HL),9
0B320E 09 
0B320F CD    0206** CALL    OSINIT			; Call the machine specific OS initialisation routines
0B3210 82 
0B3211 41 
0B3212 0B 
0B3213 ED    0207** LD      (HIMEM),DE		; This returns HIMEM (ramtop) in DE - store in the HIMEM sysvar
0B3214 53 
0B3215 20 
0B3216 4F 
0B3216 0B   
0B3218 22    0208** LD      (PAGE_),HL		; And PAGE in HL (where BASIC program storage starts) - store in PAGE sysvar
0B3219 14 
0B321A 4F 
0B321B 0B 
0B321C 3E    0209** LD      A,B7H           	; Set LISTO sysvar; the bottom nibble is LISTO (7), top nibble is OPT (B)
0B321D B7 
0B321E 32    0210** LD      (LISTON),A
0B321F 40 
0B3220 4F 
0B3221 0B 
0B3222 21    0211** LD      HL,NOTICE
0B3223 5D 
0B3224 32 
0B3225 0B 
0B3226 22    0212** LD      (ERRTXT),HL
0B3227 2F 
0B3228 4F 
0B3229 0B 
0B322A CD    0213** CALL    NEWIT			; From what I can determine, NEWIT always returns with Z flag set
0B322B 6D 
0B322C 3A 
0B322D 0B 
0B322E 3A    0214** LD	A,(ACCS)		; Check if there is a filename in ACCS
0B322F 00 
0B3230 4C 
0B3231 0B 
0B3232 B7    0215** OR	A
0B3233 C2    0216** JP	NZ,CHAIN0		; Yes, so load and run
0B3234 54 
0B3235 0D 
0B3236 0B 
0B3237 CD    0217** CALL	STAR_VERSION		;
0B3238 39 
0B3239 42 
0B323A 0B 
0B323B CD    0218** CALL    TELL			; Output the welcome message
0B323C 91 
0B323D 3F 
0B323E 0B 
0B323F 42    0219** DB    	"BBC BASIC (Z80) Version 3.00\n\r"
0B3240 42 
0B3241 43 
0B3242 20 
0B3242 42   
0B3243 41 
0B3244 53 
0B3245 49 
0B3245 43   
0B3246 20 
0B3247 28 
0B3248 5A 
0B3248 38   
0B3249 30 
0B324A 29 
0B324B 20 
0B324B 56   
0B324C 65 
0B324D 72 
0B324E 73 
0B324E 69   
0B324F 6F 
0B3250 6E 
0B3251 20 
0B3251 33   
0B3252 2E 
0B3253 30 
0B3254 30 
0B3254 0A   
0B3255 0D 
0B325D 28    0220** NOTICE:			DB    	"(C) Copyright R.T.Russell 1987\n\r"
0B325E 43 
0B325F 29 
0B3260 20 
0B3260 43   
0B3261 6F 
0B3262 70 
0B3263 79 
0B3263 72   
0B3264 69 
0B3265 67 
0B3266 68 
0B3266 74   
0B3267 20 
0B3268 52 
0B3269 2E 
0B3269 54   
0B326A 2E 
0B326B 52 
0B326C 75 
0B326C 73   
0B326D 73 
0B326E 65 
0B326F 6C 
0B326F 6C   
0B3270 20 
0B3271 31 
0B3272 39 
0B3272 38   
0B3273 37 
0B3274 0A 
0B3275 0D 
0B327D 0A    0221** DB	"\n\r", 0
0B327E 0D 
0B327F 00 
             0222** ;
0B3280 F6    0223** WARM:			DB 	F6H			; Opcode for OR? Maybe to CCF (the following SCF will be the operand)
             0224** ;
             0225** ; This is the main entry point for BASIC
             0226** ;
0B3281 37    0227** CLOOP:			SCF				; See above - not sure why this is here!
0B3282 ED    0228** LD      SP,(HIMEM)
0B3283 7B 
0B3284 20 
0B3285 4F 
0B3285 0B   
0B3287 CD    0229** CALL    PROMPT          	; Prompt user
0B3288 FB 
0B3289 40 
0B328A 0B 
0B328B 21    0230** LD      HL,LISTON		; Pointer to the LISTO/OPT sysvar
0B328C 40 
0B328D 4F 
0B328E 0B 
0B328F 7E    0231** LD      A,(HL)			; Fetch the value
0B3290 E6    0232** AND     0FH             	; Bottom nibble: LISTO
0B3291 0F 
0B3292 F6    0233** OR      B0H             	; Top nibble: Default to OPT (3) with ADL mode bit set to 1 for assembler
0B3293 B0 
0B3294 77    0234** LD      (HL),A			; Store back in
0B3295 ED    0235** SBC     HL,HL           	; HL: 0
0B3296 62 
0B3297 22    0236** LD      (ERRTRP),HL		; Clear ERRTRP sysvar
0B3298 2C 
0B3299 4F 
0B329A 0B 
0B329B 22    0237** LD      (ERRLIN),HL		; Clear ERRLIN sysvar (ON ERROR)
0B329C 35 
0B329D 4F 
0B329E 0B 
             0238** ;
0B329F 2A    0239** LD      HL,(AUTONO)		; Get the auto line number
0B32A0 29 
0B32A1 4F 
0B32A2 0B 
0B32A3 22    0240** LD      (LINENO),HL		; Store in line number
0B32A4 23 
0B32A5 4F 
0B32A6 0B 
0B32A7 7C    0241** LD      A,H			; If the auto line number is zero then
0B32A8 B5    0242** OR      L
0B32A9 28    0243** JR      Z,NOAUTO		; We're not auto line numbering, so skip the next bit
0B32AA 1E 
             0244** ;
             0245** ; This section handles auto line numbering
             0246** ;
0B32AB E5    0247** PUSH    HL			; Stack the line number
0B32AC CD    0248** CALL    PBCD           	 	; Output the line number
0B32AD FC 
0B32AE 3B 
0B32AF 0B 
0B32B0 E1    0249** POP     HL			; Pop the line number back off the stack
             0250** ;			LD      BC,(INCREM)		; Load BC with Increment - but INCREM is just a byte; C is the value
             0251** ;			LD      B,0			; So clear B
0B32B1 01    0252** LD	BC, 0			; Load BC with Increment
0B32B2 00 
0B32B3 00 
0B32B4 00 
0B32B5 3A    0253** LD	A,(INCREM)
0B32B6 41 
0B32B7 4F 
0B32B8 0B 
0B32B9 4F    0254** LD	C, A
0B32BA 09    0255** ADD     HL,BC			; Add the increment to the line number
0B32BB DA    0256** JP      C,TOOBIG		; And error if we wrap
0B32BC 26 
0B32BD 3E 
0B32BE 0B 
0B32BF 22    0257** LD      (AUTONO),HL		; Store the new auto line number
0B32C0 29 
0B32C1 4F 
0B32C2 0B 
0B32C3 3E    0258** LD      A,' '			; Print a space
0B32C4 20 
0B32C5 CD    0259** CALL    OUTCHR
0B32C6 50 
0B32C7 3B 
0B32C8 0B 
             0260** ;
             0261** ; This section invokes the line editor
             0262** ;
0B32C9 21    0263** NOAUTO:			LD      HL,ACCS			; Storage for the line editor (256 bytes)
0B32CA 00 
0B32CB 4C 
0B32CC 0B 
0B32CD CD    0264** CALL    OSLINE          	; Call the line editor in MOS
0B32CE 60 
0B32CF 40 
0B32D0 0B 
0B32D1 CD    0265** ONEDIT:			CALL	ONEDIT1			; Enter the line into memory
0B32D2 DD 
0B32D3 32 
0B32D4 0B 
0B32D5 DC    0266** CALL    C,CLEAN			; Set TOP, write out &FFFF end of program marker
0B32D6 40 
0B32D7 3A 
0B32D8 0B 
0B32D9 C3    0267** JP      CLOOP			; Jump back to immediate mode
0B32DA 81 
0B32DB 32 
0B32DC 0B 
             0268** ;
             0269** ; This bit enters the line into memory
             0270** ; Also called from OSLOAD_TXT
             0271** ; Returns:
             0272** ; F: C if a new line has been entered (CLEAN will need to be called)
             0273** ;
0B32DD AF    0274** ONEDIT1:		XOR     A			; Entry point after *EDIT
0B32DE 32    0275** LD      (COUNT),A
0B32DF 3D 
0B32E0 4F 
0B32E1 0B 
0B32E2 FD    0276** LD      IY,ACCS
0B32E3 21 
0B32E4 00 
0B32E5 4C 
0B32E5 0B   
0B32E7 CD    0277** CALL    LINNUM			; HL: The line number from the input buffer
0B32E8 FA 
0B32E9 3D 
0B32EA 0B 
0B32EB CD    0278** CALL    NXT			; Skip spaces
0B32EC 71 
0B32ED 0C 
0B32EE 0B 
0B32EF 7C    0279** LD      A,H			; HL: The line number will be 0 for immediate mode or when auto line numbering is used
0B32F0 B5    0280** OR      L
0B32F1 28    0281** JR      Z,LNZERO        	; Skip if there is no line number in the input buffer
0B32F2 04 
0B32F3 22    0282** LD      (LINENO),HL		; Otherwise store it
0B32F4 23 
0B32F5 4F 
0B32F6 0B 
             0283** ;
             0284** ; This bit does the lexical analysis and tokenisation
             0285** ;
0B32F7 0E    0286** LNZERO:			LD	C,1			; Left mode
0B32F8 01 
0B32F9 11    0287** LD      DE,BUFFER		; Buffer for tokenised BASIC
0B32FA 00 
0B32FB 4D 
0B32FC 0B 
0B32FD CD    0288** CALL    LEXAN2          	; Lexical analysis on the user input
0B32FE A0 
0B32FF 3E 
0B3300 0B 
0B3301 12    0289** LD      (DE),A          	; Terminator
0B3302 AF    0290** XOR     A
             0291** ;			LD      B,A
             0292** ;			LD      C,E             	; BC: Line length
0B3303 01    0293** LD	BC,0
0B3304 00 
0B3305 00 
0B3306 00 
0B3307 4B    0294** LD	C,E			; BC: Line length
0B3308 13    0295** INC     DE
0B3309 12    0296** LD      (DE),A          	; Zero next
0B330A 2A    0297** LD      HL,(LINENO)		; Get the line number
0B330B 23 
0B330C 4F 
0B330D 0B 
0B330E 7C    0298** LD      A,H			; Is it zero, i.e. a command with no line number?
0B330F B5    0299** OR      L
0B3310 FD    0300** LD      IY,BUFFER       	; Yes, so we're in immediate mode
0B3311 21 
0B3312 00 
0B3313 4D 
0B3313 0B   
0B3315 CA    0301** JP      Z,XEQ           	; Execute it
0B3316 97 
0B3317 0D 
0B3318 0B 
             0302** ;
             0303** ; This section stores the BASIC line in memory
             0304** ;
0B3319 C5    0305** PUSH    BC
0B331A E5    0306** PUSH    HL
0B331B CD    0307** CALL    SETTOP          	; Set TOP sysvar
0B331C 4C 
0B331D 3A 
0B331E 0B 
0B331F E1    0308** POP     HL
0B3320 CD    0309** CALL    FINDL			; Find the address of the line
0B3321 90 
0B3322 3B 
0B3323 0B 
0B3324 CC    0310** CALL    Z,DEL			; Delete the existing line if found
0B3325 03 
0B3326 3A 
0B3327 0B 
0B3328 C1    0311** POP     BC
0B3329 79    0312** LD      A,C			; Check for the line length being zero, i.e.
0B332A B7    0313** OR      A			; the user has just entered a line number in the command line
0B332B C8    0314** RET	Z 	         	; If so, then don't do anything else
0B332C C6    0315** ADD     A,4
0B332D 04 
0B332E 4F    0316** LD      C,A             	; Length inclusive
0B332F D5    0317** PUSH    DE              	; DE: Line number (fetched from the call to FINDL)
0B3330 C5    0318** PUSH    BC              	; BC: Line length
0B3331 EB    0319** EX      DE,HL			; DE: Address of the line in memory
0B3332 2A    0320** LD      HL,(TOP)		; HL: TOP (the first free location after the end of the BASIC program)
0B3333 17 
0B3334 4F 
0B3335 0B 
0B3336 E5    0321** PUSH    HL			; Stack TOP (current TOP value)
0B3337 09    0322** ADD     HL,BC			; Add the line length to HL, the new TOP value
0B3338 E5    0323** PUSH    HL			; Stack HL (new TOP value)
0B3339 24    0324** INC     H			; Add 256 to HL
0B333A AF    0325** XOR     A
0B333B ED    0326** SBC     HL,SP			; Check whether HL is in the same page as the current stack pointer
0B333C 72 
0B333D E1    0327** POP     HL			; Pop HL (new TOP value)
0B333E D2    0328** JP      NC,ERROR_        	; If HL is in the stack page, then error: "No room"
0B333F 61 
0B3340 39 
0B3341 0B 
0B3342 22    0329** LD      (TOP),HL		; Store new value of TOP
0B3343 17 
0B3344 4F 
0B3345 0B 
0B3346 E3    0330** EX      (SP),HL			; HL: TOP (current TOP value), top of stack now contains new TOP value
0B3347 E5    0331** PUSH    HL			; PUSH current TOP value
0B3348 23    0332** INC     HL
0B3349 B7    0333** OR      A
0B334A ED    0334** SBC     HL,DE			; DE: Address of the line in memory
0B334B 52 
0B334C 44    0335** LD      B,H             	; BC: Amount to move
0B334D 4D    0336** LD      C,L
0B334E E1    0337** POP     HL			; HL: Destination (current TOP value)
0B334F D1    0338** POP     DE			; DE: Source (new TOP value)
0B3350 28    0339** JR      Z,ATEND			; If current TOP and new TOP are the same, i.e. adding a line at the end, then skip...
0B3351 02 
0B3352 ED    0340** LDDR                    	; Otherwise, make space for the new line in the program
0B3353 B8 
0B3354 C1    0341** ATEND:			POP     BC              	; BC: Line length
0B3355 D1    0342** POP     DE              	; DE: Line number
0B3356 23    0343** INC     HL			; HL: Destination address
0B3357 71    0344** LD      (HL),C          	; Store length
0B3358 23    0345** INC     HL
0B3359 73    0346** LD      (HL),E          	; Store line number
0B335A 23    0347** INC     HL
0B335B 72    0348** LD      (HL),D
0B335C 23    0349** INC     HL
0B335D 11    0350** LD      DE,BUFFER		; DE: Location of the new, tokenised line
0B335E 00 
0B335F 4D 
0B3360 0B 
0B3361 EB    0351** EX      DE,HL			; HL: Location of the new, tokensied line, DE: Destination address in BASIC program
0B3362 0D    0352** DEC     C			; Subtract 3 from the number of bytes to copy to
0B3363 0D    0353** DEC     C			; compensate for the 3 bytes stored above (length and line number)
0B3364 0D    0354** DEC     C
0B3365 ED    0355** LDIR                    	; Add the line to the BASIC program
0B3366 B0 
0B3367 37    0356** SCF				; To flag we need to call CLEAN
0B3368 C9    0357** RET
             0358** ;
             0359** ; List of tokens and keywords. If a keyword is followed by 0 then
             0360** ; it will only match with the keyword followed immediately by
             0361** ; a delimiter
             0362** ;
0B3369 80    0363** KEYWDS:			DB    80H, "AND"
0B336A 41 
0B336B 4E 
0B336C 44 
0B336D 94    0364** DB    94H, "ABS"
0B336E 41 
0B336F 42 
0B3370 53 
0B3371 95    0365** DB    95H, "ACS"
0B3372 41 
0B3373 43 
0B3374 53 
0B3375 96    0366** DB    96H, "ADVAL"
0B3376 41 
0B3377 44 
0B3378 56 
0B3378 41   
0B3379 4C 
0B337B 97    0367** DB    97H, "ASC"
0B337C 41 
0B337D 53 
0B337E 43 
0B337F 98    0368** DB    98H, "ASN"
0B3380 41 
0B3381 53 
0B3382 4E 
0B3383 99    0369** DB    99H, "ATN"
0B3384 41 
0B3385 54 
0B3386 4E 
0B3387 C6    0370** DB    C6H, "AUTO"
0B3388 41 
0B3389 55 
0B338A 54 
0B338A 4F   
0B338C 9A    0371** DB    9AH, "BGET", 0
0B338D 42 
0B338E 47 
0B338F 45 
0B338F 54   
0B3390 00 
0B3392 D5    0372** DB    D5H, "BPUT", 0
0B3393 42 
0B3394 50 
0B3395 55 
0B3395 54   
0B3396 00 
0B3398 FB    0373** DB    FBH, "COLOUR"
0B3399 43 
0B339A 4F 
0B339B 4C 
0B339B 4F   
0B339C 55 
0B339D 52 
0B339F FB    0374** DB    FBH, "COLOR"
0B33A0 43 
0B33A1 4F 
0B33A2 4C 
0B33A2 4F   
0B33A3 52 
0B33A5 D6    0375** DB    D6H, "CALL"
0B33A6 43 
0B33A7 41 
0B33A8 4C 
0B33A8 4C   
0B33AA D7    0376** DB    D7H, "CHAIN"
0B33AB 43 
0B33AC 48 
0B33AD 41 
0B33AD 49   
0B33AE 4E 
0B33B0 BD    0377** DB    BDH, "CHR$"
0B33B1 43 
0B33B2 48 
0B33B3 52 
0B33B3 24   
0B33B5 D8    0378** DB    D8H, "CLEAR", 0
0B33B6 43 
0B33B7 4C 
0B33B8 45 
0B33B8 41   
0B33B9 52 
0B33BA 00 
0B33BC D9    0379** DB    D9H, "CLOSE", 0
0B33BD 43 
0B33BE 4C 
0B33BF 4F 
0B33BF 53   
0B33C0 45 
0B33C1 00 
0B33C3 DA    0380** DB    DAH, "CLG", 0
0B33C4 43 
0B33C5 4C 
0B33C6 47 
0B33C6 00   
0B33C8 DB    0381** DB    DBH, "CLS", 0
0B33C9 43 
0B33CA 4C 
0B33CB 53 
0B33CB 00   
0B33CD 9B    0382** DB    9BH, "COS"
0B33CE 43 
0B33CF 4F 
0B33D0 53 
0B33D1 9C    0383** DB    9CH, "COUNT", 0
0B33D2 43 
0B33D3 4F 
0B33D4 55 
0B33D4 4E   
0B33D5 54 
0B33D6 00 
0B33D8 DC    0384** DB    DCH, "DATA"
0B33D9 44 
0B33DA 41 
0B33DB 54 
0B33DB 41   
0B33DD 9D    0385** DB    9DH, "DEG"
0B33DE 44 
0B33DF 45 
0B33E0 47 
0B33E1 DD    0386** DB    DDH, "DEF"
0B33E2 44 
0B33E3 45 
0B33E4 46 
0B33E5 C7    0387** DB    C7H, "DELETE"
0B33E6 44 
0B33E7 45 
0B33E8 4C 
0B33E8 45   
0B33E9 54 
0B33EA 45 
0B33EC 81    0388** DB    81H, "DIV"
0B33ED 44 
0B33EE 49 
0B33EF 56 
0B33F0 DE    0389** DB    DEH, "DIM"
0B33F1 44 
0B33F2 49 
0B33F3 4D 
0B33F4 DF    0390** DB    DFH, "DRAW"
0B33F5 44 
0B33F6 52 
0B33F7 41 
0B33F7 57   
0B33F9 E1    0391** DB    E1H, "ENDPROC", 0
0B33FA 45 
0B33FB 4E 
0B33FC 44 
0B33FC 50   
0B33FD 52 
0B33FE 4F 
0B33FF 43 
0B33FF 00   
0B3402 E0    0392** DB    E0H, "END", 0
0B3403 45 
0B3404 4E 
0B3405 44 
0B3405 00   
0B3407 E2    0393** DB    E2H, "ENVELOPE"
0B3408 45 
0B3409 4E 
0B340A 56 
0B340A 45   
0B340B 4C 
0B340C 4F 
0B340D 50 
0B340D 45   
0B3410 8B    0394** DB    8BH, "ELSE"
0B3411 45 
0B3412 4C 
0B3413 53 
0B3413 45   
0B3415 A0    0395** DB    A0H, "EVAL"
0B3416 45 
0B3417 56 
0B3418 41 
0B3418 4C   
0B341A 9E    0396** DB    9EH, "ERL", 0
0B341B 45 
0B341C 52 
0B341D 4C 
0B341D 00   
0B341F 85    0397** DB    85H, "ERROR"
0B3420 45 
0B3421 52 
0B3422 52 
0B3422 4F   
0B3423 52 
0B3425 C5    0398** DB    C5H, "EOF", 0
0B3426 45 
0B3427 4F 
0B3428 46 
0B3428 00   
0B342A 82    0399** DB    82H, "EOR"
0B342B 45 
0B342C 4F 
0B342D 52 
0B342E 9F    0400** DB    9FH, "ERR", 0
0B342F 45 
0B3430 52 
0B3431 52 
0B3431 00   
0B3433 A1    0401** DB    A1H, "EXP"
0B3434 45 
0B3435 58 
0B3436 50 
0B3437 A2    0402** DB    A2H, "EXT", 0
0B3438 45 
0B3439 58 
0B343A 54 
0B343A 00   
0B343C E3    0403** DB    E3H, "FOR"
0B343D 46 
0B343E 4F 
0B343F 52 
0B3440 A3    0404** DB    A3H, "FALSE", 0
0B3441 46 
0B3442 41 
0B3443 4C 
0B3443 53   
0B3444 45 
0B3445 00 
0B3447 A4    0405** DB    A4H, "FN"
0B3448 46 
0B3449 4E 
0B344A E5    0406** DB    E5H, "GOTO"
0B344B 47 
0B344C 4F 
0B344D 54 
0B344D 4F   
0B344F BE    0407** DB    BEH, "GET$"
0B3450 47 
0B3451 45 
0B3452 54 
0B3452 24   
0B3454 A5    0408** DB    A5H, "GET"
0B3455 47 
0B3456 45 
0B3457 54 
0B3458 E4    0409** DB    E4H, "GOSUB"
0B3459 47 
0B345A 4F 
0B345B 53 
0B345B 55   
0B345C 42 
0B345E E6    0410** DB    E6H, "GCOL"
0B345F 47 
0B3460 43 
0B3461 4F 
0B3461 4C   
0B3463 93    0411** DB    93H, "HIMEM", 0
0B3464 48 
0B3465 49 
0B3466 4D 
0B3466 45   
0B3467 4D 
0B3468 00 
0B346A E8    0412** DB    E8H, "INPUT"
0B346B 49 
0B346C 4E 
0B346D 50 
0B346D 55   
0B346E 54 
0B3470 E7    0413** DB    E7H, "IF"
0B3471 49 
0B3472 46 
0B3473 BF    0414** DB    BFH, "INKEY$"
0B3474 49 
0B3475 4E 
0B3476 4B 
0B3476 45   
0B3477 59 
0B3478 24 
0B347A A6    0415** DB    A6H, "INKEY"
0B347B 49 
0B347C 4E 
0B347D 4B 
0B347D 45   
0B347E 59 
0B3480 A8    0416** DB    A8H, "INT"
0B3481 49 
0B3482 4E 
0B3483 54 
0B3484 A7    0417** DB    A7H, "INSTR("
0B3485 49 
0B3486 4E 
0B3487 53 
0B3487 54   
0B3488 52 
0B3489 28 
0B348B C9    0418** DB    C9H, "LIST"
0B348C 4C 
0B348D 49 
0B348E 53 
0B348E 54   
0B3490 86    0419** DB    86H, "LINE"
0B3491 4C 
0B3492 49 
0B3493 4E 
0B3493 45   
0B3495 C8    0420** DB    C8H, "LOAD"
0B3496 4C 
0B3497 4F 
0B3498 41 
0B3498 44   
0B349A 92    0421** DB    92H, "LOMEM", 0
0B349B 4C 
0B349C 4F 
0B349D 4D 
0B349D 45   
0B349E 4D 
0B349F 00 
0B34A1 EA    0422** DB    EAH, "LOCAL"
0B34A2 4C 
0B34A3 4F 
0B34A4 43 
0B34A4 41   
0B34A5 4C 
0B34A7 C0    0423** DB    C0H, "LEFT$("
0B34A8 4C 
0B34A9 45 
0B34AA 46 
0B34AA 54   
0B34AB 24 
0B34AC 28 
0B34AE A9    0424** DB    A9H, "LEN"
0B34AF 4C 
0B34B0 45 
0B34B1 4E 
0B34B2 E9    0425** DB    E9H, "LET"
0B34B3 4C 
0B34B4 45 
0B34B5 54 
0B34B6 AB    0426** DB    ABH, "LOG"
0B34B7 4C 
0B34B8 4F 
0B34B9 47 
0B34BA AA    0427** DB    AAH, "LN"
0B34BB 4C 
0B34BC 4E 
0B34BD C1    0428** DB    C1H, "MID$("
0B34BE 4D 
0B34BF 49 
0B34C0 44 
0B34C0 24   
0B34C1 28 
0B34C3 EB    0429** DB    EBH, "MODE"
0B34C4 4D 
0B34C5 4F 
0B34C6 44 
0B34C6 45   
0B34C8 83    0430** DB    83H, "MOD"
0B34C9 4D 
0B34CA 4F 
0B34CB 44 
0B34CC EC    0431** DB    ECH, "MOVE"
0B34CD 4D 
0B34CE 4F 
0B34CF 56 
0B34CF 45   
0B34D1 ED    0432** DB    EDH, "NEXT"
0B34D2 4E 
0B34D3 45 
0B34D4 58 
0B34D4 54   
0B34D6 CA    0433** DB    CAH, "NEW", 0
0B34D7 4E 
0B34D8 45 
0B34D9 57 
0B34D9 00   
0B34DB AC    0434** DB    ACH, "NOT"
0B34DC 4E 
0B34DD 4F 
0B34DE 54 
0B34DF CB    0435** DB    CBH, "OLD", 0
0B34E0 4F 
0B34E1 4C 
0B34E2 44 
0B34E2 00   
0B34E4 EE    0436** DB    EEH, "ON"
0B34E5 4F 
0B34E6 4E 
0B34E7 87    0437** DB    87H, "OFF"
0B34E8 4F 
0B34E9 46 
0B34EA 46 
0B34EB 84    0438** DB    84H, "OR"
0B34EC 4F 
0B34ED 52 
0B34EE 8E    0439** DB    8EH, "OPENIN"
0B34EF 4F 
0B34F0 50 
0B34F1 45 
0B34F1 4E   
0B34F2 49 
0B34F3 4E 
0B34F5 AE    0440** DB    AEH, "OPENOUT"
0B34F6 4F 
0B34F7 50 
0B34F8 45 
0B34F8 4E   
0B34F9 4F 
0B34FA 55 
0B34FB 54 
0B34FD AD    0441** DB    ADH, "OPENUP"
0B34FE 4F 
0B34FF 50 
0B3500 45 
0B3500 4E   
0B3501 55 
0B3502 50 
0B3504 FF    0442** DB    FFH, "OSCLI"
0B3505 4F 
0B3506 53 
0B3507 43 
0B3507 4C   
0B3508 49 
0B350A F1    0443** DB    F1H, "PRINT"
0B350B 50 
0B350C 52 
0B350D 49 
0B350D 4E   
0B350E 54 
0B3510 90    0444** DB    90H, "PAGE", 0
0B3511 50 
0B3512 41 
0B3513 47 
0B3513 45   
0B3514 00 
0B3516 8F    0445** DB    8FH, "PTR", 0
0B3517 50 
0B3518 54 
0B3519 52 
0B3519 00   
0B351B AF    0446** DB    AFH, "PI", 0
0B351C 50 
0B351D 49 
0B351E 00 
0B351F F0    0447** DB    F0H, "PLOT"
0B3520 50 
0B3521 4C 
0B3522 4F 
0B3522 54   
0B3524 B0    0448** DB    B0H, "POINT("
0B3525 50 
0B3526 4F 
0B3527 49 
0B3527 4E   
0B3528 54 
0B3529 28 
0B352B F2    0449** DB    F2H, "PROC"
0B352C 50 
0B352D 52 
0B352E 4F 
0B352E 43   
0B3530 B1    0450** DB    B1H, "POS", 0
0B3531 50 
0B3532 4F 
0B3533 53 
0B3533 00   
0B3535 CE    0451** DB    CEH, "PUT"
0B3536 50 
0B3537 55 
0B3538 54 
0B3539 F8    0452** DB    F8H, "RETURN", 0
0B353A 52 
0B353B 45 
0B353C 54 
0B353C 55   
0B353D 52 
0B353E 4E 
0B353F 00 
0B3541 F5    0453** DB    F5H, "REPEAT"
0B3542 52 
0B3543 45 
0B3544 50 
0B3544 45   
0B3545 41 
0B3546 54 
0B3548 F6    0454** DB    F6H, "REPORT", 0
0B3549 52 
0B354A 45 
0B354B 50 
0B354B 4F   
0B354C 52 
0B354D 54 
0B354E 00 
0B3550 F3    0455** DB    F3H, "READ"
0B3551 52 
0B3552 45 
0B3553 41 
0B3553 44   
0B3555 F4    0456** DB    F4H, "REM"
0B3556 52 
0B3557 45 
0B3558 4D 
0B3559 F9    0457** DB    F9H, "RUN", 0
0B355A 52 
0B355B 55 
0B355C 4E 
0B355C 00   
0B355E B2    0458** DB    B2H, "RAD"
0B355F 52 
0B3560 41 
0B3561 44 
0B3562 F7    0459** DB    F7H, "RESTORE"
0B3563 52 
0B3564 45 
0B3565 53 
0B3565 54   
0B3566 4F 
0B3567 52 
0B3568 45 
0B356A C2    0460** DB    C2H, "RIGHT$("
0B356B 52 
0B356C 49 
0B356D 47 
0B356D 48   
0B356E 54 
0B356F 24 
0B3570 28 
0B3572 B3    0461** DB    B3H, "RND", 0
0B3573 52 
0B3574 4E 
0B3575 44 
0B3575 00   
0B3577 CC    0462** DB    CCH, "RENUMBER"
0B3578 52 
0B3579 45 
0B357A 4E 
0B357A 55   
0B357B 4D 
0B357C 42 
0B357D 45 
0B357D 52   
0B3580 88    0463** DB    88H, "STEP"
0B3581 53 
0B3582 54 
0B3583 45 
0B3583 50   
0B3585 CD    0464** DB    CDH, "SAVE"
0B3586 53 
0B3587 41 
0B3588 56 
0B3588 45   
0B358A B4    0465** DB    B4H, "SGN"
0B358B 53 
0B358C 47 
0B358D 4E 
0B358E B5    0466** DB    B5H, "SIN"
0B358F 53 
0B3590 49 
0B3591 4E 
0B3592 B6    0467** DB    B6H, "SQR"
0B3593 53 
0B3594 51 
0B3595 52 
0B3596 89    0468** DB    89H, "SPC"
0B3597 53 
0B3598 50 
0B3599 43 
0B359A C3    0469** DB    C3H, "STR$"
0B359B 53 
0B359C 54 
0B359D 52 
0B359D 24   
0B359F C4    0470** DB    C4H, "STRING$("
0B35A0 53 
0B35A1 54 
0B35A2 52 
0B35A2 49   
0B35A3 4E 
0B35A4 47 
0B35A5 24 
0B35A5 28   
0B35A8 D4    0471** DB    D4H, "SOUND"
0B35A9 53 
0B35AA 4F 
0B35AB 55 
0B35AB 4E   
0B35AC 44 
0B35AE FA    0472** DB    FAH, "STOP", 0
0B35AF 53 
0B35B0 54 
0B35B1 4F 
0B35B1 50   
0B35B2 00 
0B35B4 B7    0473** DB    B7H, "TAN"
0B35B5 54 
0B35B6 41 
0B35B7 4E 
0B35B8 8C    0474** DB    8CH, "THEN"
0B35B9 54 
0B35BA 48 
0B35BB 45 
0B35BB 4E   
0B35BD B8    0475** DB    B8H, "TO"
0B35BE 54 
0B35BF 4F 
0B35C0 8A    0476** DB    8AH, "TAB("
0B35C1 54 
0B35C2 41 
0B35C3 42 
0B35C3 28   
0B35C5 FC    0477** DB    FCH, "TRACE"
0B35C6 54 
0B35C7 52 
0B35C8 41 
0B35C8 43   
0B35C9 45 
0B35CB 91    0478** DB    91H, "TIME", 0
0B35CC 54 
0B35CD 49 
0B35CE 4D 
0B35CE 45   
0B35CF 00 
0B35D1 B9    0479** DB    B9H, "TRUE", 0
0B35D2 54 
0B35D3 52 
0B35D4 55 
0B35D4 45   
0B35D5 00 
0B35D7 FD    0480** DB    FDH, "UNTIL"
0B35D8 55 
0B35D9 4E 
0B35DA 54 
0B35DA 49   
0B35DB 4C 
0B35DD BA    0481** DB    BAH, "USR"
0B35DE 55 
0B35DF 53 
0B35E0 52 
0B35E1 EF    0482** DB    EFH, "VDU"
0B35E2 56 
0B35E3 44 
0B35E4 55 
0B35E5 BB    0483** DB    BBH, "VAL"
0B35E6 56 
0B35E7 41 
0B35E8 4C 
0B35E9 BC    0484** DB    BCH, "VPOS", 0
0B35EA 56 
0B35EB 50 
0B35EC 4F 
0B35EC 53   
0B35ED 00 
0B35EF FE    0485** DB    FEH, "WIDTH"
0B35F0 57 
0B35F1 49 
0B35F2 44 
0B35F2 54   
0B35F3 48 
0B35F5 D3    0486** DB    D3H, "HIMEM"
0B35F6 48 
0B35F7 49 
0B35F8 4D 
0B35F8 45   
0B35F9 4D 
0B35FB D2    0487** DB    D2H, "LOMEM"
0B35FC 4C 
0B35FD 4F 
0B35FE 4D 
0B35FE 45   
0B35FF 4D 
0B3601 D0    0488** DB    D0H, "PAGE"
0B3602 50 
0B3603 41 
0B3604 47 
0B3604 45   
0B3606 CF    0489** DB    CFH, "PTR"
0B3607 50 
0B3608 54 
0B3609 52 
0B360A D1    0490** DB    D1H, "TIME"
0B360B 54 
0B360C 49 
0B360D 4D 
0B360D 45   
             0491** ;
             0492** ; These are indexed from the ERRWDS table
             0493** ;
0B360F 01    0494** DB    01H, "Missing "
0B3610 4D 
0B3611 69 
0B3612 73 
0B3612 73   
0B3613 69 
0B3614 6E 
0B3615 67 
0B3615 20   
0B3618 02    0495** DB    02H, "No such "
0B3619 4E 
0B361A 6F 
0B361B 20 
0B361B 73   
0B361C 75 
0B361D 63 
0B361E 68 
0B361E 20   
0B3621 03    0496** DB    03H, "Bad "
0B3622 42 
0B3623 61 
0B3624 64 
0B3624 20   
0B3626 04    0497** DB    04H, " range"
0B3627 20 
0B3628 72 
0B3629 61 
0B3629 6E   
0B362A 67 
0B362B 65 
0B362D 05    0498** DB    05H, "variable"
0B362E 76 
0B362F 61 
0B3630 72 
0B3630 69   
0B3631 61 
0B3632 62 
0B3633 6C 
0B3633 65   
0B3636 06    0499** DB    06H, "Out of"
0B3637 4F 
0B3638 75 
0B3639 74 
0B3639 20   
0B363A 6F 
0B363B 66 
0B363D 07    0500** DB    07H, "No "
0B363E 4E 
0B363F 6F 
0B3640 20 
0B3641 08    0501** DB    08H, " space"
0B3642 20 
0B3643 73 
0B3644 70 
0B3644 61   
0B3645 63 
0B3646 65 
             0502** 
             0503** KEYWDL:			EQU     $-KEYWDS
0B3648 FF    0504** DW    -1
0B3649 FF 
             0505** ;
             0506** ; Error messages
             0507** ;
0B364A 07    0508** ERRWDS:			DB    7, "room", 0		;  0: No room
0B364B 72 
0B364C 6F 
0B364D 6F 
0B364D 6D   
0B364E 00 
0B3650 06    0509** DB    6, 4, 0			;  1: Out of range
0B3651 04 
0B3652 00 
0B3653 00    0510** DB    0				;  2: *
0B3654 00    0511** DB    0				;  3: *
0B3655 4D    0512** DB    "Mistake", 0		;  4: Mistake
0B3656 69 
0B3657 73 
0B3658 74 
0B3658 61   
0B3659 6B 
0B365A 65 
0B365B 00 
0B365D 01    0513** DB    1, ",", 0			;  5: Missing ,
0B365E 2C 
0B365F 00 
0B3660 54    0514** DB    "Type mismatch", 0	;  6: Type mismatch
0B3661 79 
0B3662 70 
0B3663 65 
0B3663 20   
0B3664 6D 
0B3665 69 
0B3666 73 
0B3666 6D   
0B3667 61 
0B3668 74 
0B3669 63 
0B3669 68   
0B366A 00 
0B366E 07    0515** DB    7, FN, 0			;  7: No FN
0B366F A4 
0B3670 00 
0B3671 00    0516** DB    0				;  8: *
0B3672 01    0517** DB    1, 34, 0			;  9: Missing "
0B3673 22 
0B3674 00 
0B3675 03    0518** DB    3, DIM, 0			; 10: Bad DIM
0B3676 DE 
0B3677 00 
0B3678 DE    0519** DB    DIM, 8, 0			; 11: DIM space
0B3679 08 
0B367A 00 
0B367B 4E    0520** DB    "Not ", LOCAL_, 0		; 12: Not LOCAL
0B367C 6F 
0B367D 74 
0B367E 20 
0B367E EA   
0B367F 00 
0B3681 07    0521** DB    7, PROC, 0		; 13: No PROC
0B3682 F2 
0B3683 00 
0B3684 41    0522** DB    "Array", 0		; 14: Array
0B3685 72 
0B3686 72 
0B3687 61 
0B3687 79   
0B3688 00 
0B368A 53    0523** DB    "Subscript", 0		; 15: Subscript
0B368B 75 
0B368C 62 
0B368D 73 
0B368D 63   
0B368E 72 
0B368F 69 
0B3690 70 
0B3690 74   
0B3691 00 
0B3694 53    0524** DB    "Syntax error", 0		; 16: Syntax error
0B3695 79 
0B3696 6E 
0B3697 74 
0B3697 61   
0B3698 78 
0B3699 20 
0B369A 65 
0B369A 72   
0B369B 72 
0B369C 6F 
0B369D 72 
0B369D 00   
0B36A1 45    0525** DB    "Escape", 0		; 17: Escape
0B36A2 73 
0B36A3 63 
0B36A4 61 
0B36A4 70   
0B36A5 65 
0B36A6 00 
0B36A8 44    0526** DB    "Division by zero", 0	; 18: Division by zero
0B36A9 69 
0B36AA 76 
0B36AB 69 
0B36AB 73   
0B36AC 69 
0B36AD 6F 
0B36AE 6E 
0B36AE 20   
0B36AF 62 
0B36B0 79 
0B36B1 20 
0B36B1 7A   
0B36B2 65 
0B36B3 72 
0B36B4 6F 
0B36B4 00   
0B36B9 53    0527** DB    "String too long", 0	; 19: String too long
0B36BA 74 
0B36BB 72 
0B36BC 69 
0B36BC 6E   
0B36BD 67 
0B36BE 20 
0B36BF 74 
0B36BF 6F   
0B36C0 6F 
0B36C1 20 
0B36C2 6C 
0B36C2 6F   
0B36C3 6E 
0B36C4 67 
0B36C5 00 
0B36C9 54    0528** DB    "Too big", 0		; 20: Too big
0B36CA 6F 
0B36CB 6F 
0B36CC 20 
0B36CC 62   
0B36CD 69 
0B36CE 67 
0B36CF 00 
0B36D1 2D    0529** DB    "-ve root", 0		; 21: -ve root
0B36D2 76 
0B36D3 65 
0B36D4 20 
0B36D4 72   
0B36D5 6F 
0B36D6 6F 
0B36D7 74 
0B36D7 00   
0B36DA 4C    0530** DB    "Log", 4, 0		; 22: Log range
0B36DB 6F 
0B36DC 67 
0B36DD 04 
0B36DD 00   
0B36DF 41    0531** DB    "Accuracy lost", 0	; 23: Accuracy lost
0B36E0 63 
0B36E1 63 
0B36E2 75 
0B36E2 72   
0B36E3 61 
0B36E4 63 
0B36E5 79 
0B36E5 20   
0B36E6 6C 
0B36E7 6F 
0B36E8 73 
0B36E8 74   
0B36E9 00 
0B36ED 45    0532** DB    "Exp", 4, 0		; 24: Exp range
0B36EE 78 
0B36EF 70 
0B36F0 04 
0B36F0 00   
0B36F2 00    0533** DB    0				; 25: *
0B36F3 02    0534** DB    2, 5, 0			; 26: No such variable
0B36F4 05 
0B36F5 00 
0B36F6 01    0535** DB    1, ")", 0			; 27: Missing )
0B36F7 29 
0B36F8 00 
0B36F9 03    0536** DB    3, "HEX", 0		; 28: Bad HEX
0B36FA 48 
0B36FB 45 
0B36FC 58 
0B36FC 00   
0B36FE 02    0537** DB    2, FN, "/", PROC, 0	; 29: No such FN/PROC
0B36FF A4 
0B3700 2F 
0B3701 F2 
0B3701 00   
0B3703 03    0538** DB    3, "call", 0		; 30: Bad call
0B3704 63 
0B3705 61 
0B3706 6C 
0B3706 6C   
0B3707 00 
0B3709 41    0539** DB    "Arguments", 0		; 31: Arguments
0B370A 72 
0B370B 67 
0B370C 75 
0B370C 6D   
0B370D 65 
0B370E 6E 
0B370F 74 
0B370F 73   
0B3710 00 
0B3713 07    0540** DB    7, FOR, 0			; 32: No FOR
0B3714 E3 
0B3715 00 
0B3716 43    0541** DB    "Can't match ", FOR, 0	; 33: Can't match FOR
0B3717 61 
0B3718 6E 
0B3719 27 
0B3719 74   
0B371A 20 
0B371B 6D 
0B371C 61 
0B371C 74   
0B371D 63 
0B371E 68 
0B371F 20 
0B371F E3   
0B3720 00 
0B3724 E3    0542** DB    FOR, " ", 5, 0		; 34: FOR variable
0B3725 20 
0B3726 05 
0B3727 00 
0B3728 00    0543** DB    0				; 35: *
0B3729 07    0544** DB    7, TO_MN, 0			; 36: No TO
0B372A B8 
0B372B 00 
0B372C 00    0545** DB    0				; 37: *
0B372D 07    0546** DB    7, GOSUB, 0		; 38: No GOSUB
0B372E E4 
0B372F 00 
0B3730 EE    0547** DB    ON_, " syntax", 0		; 39: ON syntax
0B3731 20 
0B3732 73 
0B3733 79 
0B3733 6E   
0B3734 74 
0B3735 61 
0B3736 78 
0B3736 00   
0B3739 EE    0548** DB    ON_, 4, 0			; 40: ON range
0B373A 04 
0B373B 00 
0B373C 02    0549** DB    2, "line", 0		; 41: No such line
0B373D 6C 
0B373E 69 
0B373F 6E 
0B373F 65   
0B3740 00 
0B3742 06    0550** DB    6, " ", DATA_MN_, 0		; 42: Out of DATA
0B3743 20 
0B3744 DC 
0B3745 00 
0B3746 07    0551** DB    7, REPEAT, 0		; 43: No REPEAT
0B3747 F5 
0B3748 00 
0B3749 00    0552** DB    0				; 44: *
0B374A 01    0553** DB    1, "#", 0			; 45: Missing #
0B374B 23 
0B374C 00 
             0554** ;
             0555** ; COMMANDS:
             0556** ;
             0557** ; DELETE line,line
             0558** ;
0B374D CD    0559** DELETE:			CALL    SETTOP          	; Set TOP sysvar (first free byte at end of BASIC program)
0B374E 4C 
0B374F 3A 
0B3750 0B 
0B3751 CD    0560** CALL    DLPAIR			; Get the line number pair - HL: BASIC program address, BC: second number (or 0 if missing)
0B3752 54 
0B3753 3E 
0B3754 0B 
0B3755 7E    0561** DELET1:			LD      A,(HL)			; Check whether it's the last line
0B3756 B7    0562** OR      A
0B3757 CA    0563** JP      Z,WARMNC		; Yes, so do nothing
0B3758 DE 
0B3759 37 
0B375A 0B 
0B375B 23    0564** INC     HL			; Skip the line length byte
0B375C 11    0565** LD	DE, 0			; Clear DE
0B375D 00 
0B375E 00 
0B375F 00 
0B3760 5E    0566** LD      E,(HL)			; Fetch the line number in DE
0B3761 23    0567** INC     HL
0B3762 56    0568** LD      D,(HL)
0B3763 7A    0569** LD      A,D			; If the line number is zero then
0B3764 B3    0570** OR      E
0B3765 28    0571** JR      Z,CLOOP1        	; Do nothing
0B3766 1D 
0B3767 2B    0572** DEC     HL			; Decrement BASIC program pointer back to length
0B3768 2B    0573** DEC     HL
0B3769 EB    0574** EX      DE,HL			; Check if we've gone past the terminating line
0B376A 37    0575** SCF
0B376B ED    0576** SBC     HL,BC
0B376C 42 
0B376D EB    0577** EX      DE,HL
0B376E 30    0578** JR      NC,WARMNC		; Yes, so exit back to BASIC prompt
0B376F 6E 
0B3770 C5    0579** PUSH    BC
0B3771 CD    0580** CALL    DEL			; Delete the line pointed to by HL
0B3772 03 
0B3773 3A 
0B3774 0B 
0B3775 C1    0581** POP     BC
0B3776 18    0582** JR      DELET1			; And loop round to the next line
0B3777 DD 
             0583** ;
             0584** ; LISTO expr
             0585** ;
0B3778 FD    0586** LISTO:			INC     IY              	; Skip "O" byte
0B3779 23 
0B377A CD    0587** CALL    EXPRI			; Get expr
0B377B 0B 
0B377C 05 
0B377D 0B 
0B377E D9    0588** EXX
0B377F 7D    0589** LD      A,L
0B3780 32    0590** LD      (LISTON),A		; Store in LISTON sysvar
0B3781 40 
0B3782 4F 
0B3783 0B 
0B3784 C3    0591** CLOOP1:			JP      CLOOP
0B3785 81 
0B3786 32 
0B3787 0B 
             0592** ;
             0593** ; LIST
             0594** ; LIST line
             0595** ; LIST line,line [IF string]
             0596** ; LIST ,line
             0597** ; LIST line,
             0598** ;
0B3788 FE    0599** LIST_:			CP      'O'			; Check for O (LISTO)
0B3789 4F 
0B378A 28    0600** JR      Z,LISTO			; and jump to LISTO if zero
0B378B EC 
0B378C CD    0601** CALL    DLPAIR			; Get the line number pair - HL: BASIC program address, BC: second number (or 0 if missing)
0B378D 54 
0B378E 3E 
0B378F 0B 
0B3790 CD    0602** CALL    NXT			; Skip space
0B3791 71 
0B3792 0C 
0B3793 0B 
0B3794 FE    0603** CP      TIF             	; Check for IF clause (token IF)
0B3795 E7 
0B3796 3E    0604** LD      A,0             	; Initialise the IF clause string length
0B3797 00 
0B3798 20    0605** JR      NZ,LISTB		; If there is no IF clause, skip the next bit
0B3799 17 
             0606** ;
0B379A FD    0607** INC     IY              	; Skip the IF token
0B379B 23 
0B379C CD    0608** CALL    NXT             	; And skip any spaces
0B379D 71 
0B379E 0C 
0B379F 0B 
0B37A0 EB    0609** EX      DE,HL			; DE: Address in memory
0B37A1 FD    0610** PUSH    IY			; LD IY, HL
0B37A2 E5 
0B37A3 E1    0611** POP     HL              	; HL is now the address of the tokenised line
0B37A4 3E    0612** LD      A,CR
0B37A5 0D 
0B37A6 C5    0613** PUSH    BC			; Stack the second line number arg
0B37A7 01    0614** LD      BC,256
0B37A8 00 
0B37A9 01 
0B37AA 00 
0B37AB ED    0615** CPIR                    	; Locate CR byte
0B37AC B1 
0B37AD 79    0616** LD      A,C
0B37AE 2F    0617** CPL                    	 	; A: Substring length (of IF clause)
0B37AF C1    0618** POP     BC			; Restore the second line number arg
0B37B0 EB    0619** EX      DE,HL			; HL: Address in memory
             0620** ;
0B37B1 5F    0621** LISTB:			LD      E,A             	; E: IF clause string length
0B37B2 78    0622** LD      A,B			; Check whether a second line number was passed (BC!=0)
0B37B3 B1    0623** OR      C
0B37B4 20    0624** JR      NZ,LISTA		; If there isn't a second line number
0B37B5 01 
0B37B6 0B    0625** DEC     BC			; then we set it to the maximum of 65535
             0626** ;
0B37B7 D9    0627** LISTA:			EXX
0B37B8 DD    0628** LD      IX,LISTON		; IX : Pointer to the LISTON (LISTO and OPT) sysvar
0B37B9 21 
0B37BA 40 
0B37BB 4F 
0B37BB 0B   
0B37BD 01    0629** LD      BC,0            	; BC': Indentation counter (C: FOR/NEXT, B: REPEAT/UNTIL)
0B37BE 00 
0B37BF 00 
0B37C0 00 
0B37C1 D9    0630** EXX
0B37C2 3E    0631** LD      A,20			; Number of lines to list
0B37C3 14 
             0632** ;
0B37C4 C5    0633** LISTC:			PUSH    BC              	; Save second line number
0B37C5 D5    0634** PUSH    DE              	; Save IF clause length
0B37C6 E5    0635** PUSH    HL              	; Save BASIC program counter
0B37C7 08    0636** EX      AF,AF'
             0637** ;
             0638** ; BBC BASIC for Z80 lines are stored as follows:
             0639** ;
             0640** ; - [LEN] [LSB] [MSB] [DATA...] [0x0D]: LSB, MSB = line number
             0641** ; - [&00] [&FF] [&FF]: End of program marker
             0642** ;
             0643** ; This is the Russell format and different to the Wilson/Acorn format: https://www.beebwiki.mdfs.net/Program_format
             0644** ;
0B37C8 7E    0645** LD      A,(HL)			; Check for end of program marker
0B37C9 B7    0646** OR      A			; If found
0B37CA 28    0647** JR      Z,WARMNC		; Jump to WARMNC (F=NC, so will jump to WARM)
0B37CB 12 
             0648** ;
             0649** ; Check if past terminating line number
             0650** ;
0B37CC 7B    0651** LD      A,E             	; A: IF clause length
0B37CD 23    0652** INC     HL			; Skip the length byte
0B37CE 11    0653** LD	DE,0			; Clear DE
0B37CF 00 
0B37D0 00 
0B37D1 00 
0B37D2 5E    0654** LD      E,(HL)			; Fetch the line number in DE
0B37D3 23    0655** INC     HL
0B37D4 56    0656** LD      D,(HL)
0B37D5 2B    0657** DEC     HL			; Step HL back to the length byte
0B37D6 2B    0658** DEC     HL
0B37D7 D5    0659** PUSH    DE             	 	; Push the line number on the stack
0B37D8 EB    0660** EX      DE,HL			; HL: line number
0B37D9 37    0661** SCF				; Do a 16-bit compare of HL and DE
0B37DA ED    0662** SBC     HL,BC
0B37DB 42 
0B37DC EB    0663** EX      DE,HL
0B37DD D1    0664** POP     DE              	; Restore the line number
0B37DE D2    0665** WARMNC:			JP      NC,WARM			; If exceeded the terminating line number then jump to WARM
0B37DF 80 
0B37E0 32 
0B37E1 0B 
0B37E2 4E    0666** LD      C,(HL)          	; C: Line length + 4
0B37E3 47    0667** LD      B,A             	; B: IF clause length
             0668** ;
             0669** ; Check if "UNLISTABLE":
             0670** ;
0B37E4 7A    0671** LD      A,D			; TODO: What is "UNLISTABLE?"
0B37E5 B3    0672** OR      E
0B37E6 CA    0673** JP      Z,CLOOP
0B37E7 81 
0B37E8 32 
0B37E9 0B 
             0674** ;
             0675** ; Check for IF clause:
             0676** ;
0B37EA 23    0677** INC     HL			; Skip the length
0B37EB 23    0678** INC     HL			; Skip the line number
0B37EC 23    0679** INC     HL              	; HL: Address of the tokenised BASIC line
0B37ED 0D    0680** DEC     C			;  C: Line length
0B37EE 0D    0681** DEC     C
0B37EF 0D    0682** DEC     C
0B37F0 0D    0683** DEC     C
0B37F1 D5    0684** PUSH    DE              	; Save the line number
0B37F2 E5    0685** PUSH    HL              	; Save the BASIC program address
0B37F3 AF    0686** XOR     A               	;
0B37F4 B8    0687** CP      B              	 	; Check for an IF clause (B!=0)
0B37F5 FD    0688** PUSH    IY			; LD IY, DE
0B37F6 E5 
0B37F7 D1    0689** POP     DE              	; DE: Address of the IF clause string in the input buffer
0B37F8 C4    0690** CALL    NZ,SEARCH      		; If there is an IF clause (B!=0) then search for it
0B37F9 86 
0B37FA 09 
0B37FB 0B 
0B37FC E1    0691** POP     HL              	; Restore BASIC program address
0B37FD D1    0692** POP     DE              	; Restore line number
0B37FE FD    0693** PUSH    IY
0B37FF E5 
0B3800 CC    0694** CALL    Z,LISTIT        	; List if no IF clause OR there is an IF clause match
0B3801 93 
0B3802 3A 
0B3803 0B 
0B3804 FD    0695** POP     IY
0B3805 E1 
             0696** ;
0B3806 08    0697** EX      AF,AF'
0B3807 3D    0698** DEC     A			; Decrement line list counter
0B3808 CD    0699** CALL    LTRAP			; TODO: This destroys A - is this a bug I've introduced in LTRAP?
0B3809 72 
0B380A 41 
0B380B 0B 
0B380C E1    0700** POP     HL             	 	; Restore BASIC program address to beginning of line
0B380D 11    0701** LD	DE,0
0B380E 00 
0B380F 00 
0B3810 00 
0B3811 5E    0702** LD      E,(HL)			; Fetch the length of line in DE
0B3812 19    0703** ADD     HL,DE           	; Go to the next line
0B3813 D1    0704** POP     DE              	; Restore IF clause length
0B3814 C1    0705** POP     BC              	; Restore second line number
0B3815 18    0706** JR      LISTC			; Loop back to do next line
0B3816 AD 
             0707** ;
             0708** ; RENUMBER
             0709** ; RENUMBER start
             0710** ; RENUMBER start,increment
             0711** ; RENUMBER ,increment
             0712** ;
0B3817 CD    0713** RENUM:			CALL    CLEAR           	; Uses the heap so clear all dynamic variables and function/procedure pointers
0B3818 77 
0B3819 3A 
0B381A 0B 
0B381B CD    0714** CALL    PAIR            	; Fetch the parameters - HL: start (NEW line number), BC: increment
0B381C 2C 
0B381D 3E 
0B381E 0B 
0B381F D9    0715** EXX
0B3820 2A    0716** LD      HL,(PAGE_)		; HL: Top of program
0B3821 14 
0B3822 4F 
0B3823 0B 
0B3824 ED    0717** LD      DE,(LOMEM)		; DE: Start address of the heap
0B3825 5B 
0B3826 1A 
0B3827 4F 
0B3827 0B   
             0718** ;
             0719** ; Build the table
             0720** ;
0B3829 7E    0721** RENUM1:			LD      A,(HL)          	; Fetch the line length byte
0B382A B7    0722** OR      A			; Is it zero, i.e. the end of program marker?
0B382B 28    0723** JR      Z,RENUM2		; Yes, so skip to the next part
0B382C 36 
0B382D 23    0724** INC     HL
0B382E 4E    0725** LD      C,(HL)          	; BC: The OLD line number
0B382F 23    0726** INC     HL
0B3830 46    0727** LD      B,(HL)
0B3831 78    0728** LD      A,B			; Check whether the line number is zero - we only need to check the LSW
0B3832 B1    0729** OR      C
0B3833 CA    0730** JP      Z,CLOOP        		; If the line number is zero, then exit back to the command line
0B3834 81 
0B3835 32 
0B3836 0B 
0B3837 EB    0731** EX      DE,HL			; DE: Pointer to BASIC program, HL: Pointer to heap
0B3838 71    0732** LD      (HL),C			; Store the OLD line number in the heap
0B3839 23    0733** INC     HL
0B383A 70    0734** LD      (HL),B
0B383B 23    0735** INC     HL
0B383C D9    0736** EXX				; HL: line number, BC: increment (16-bit values)
0B383D E5    0737** PUSH    HL			; HL: Stack the NEW line number value
0B383E 52    0738** ADD.S   HL,BC           	; Add the increment
0B383F 09 
0B3840 DA    0739** JP      C,TOOBIG        	; If > 65535, then error: "Too big"
0B3841 26 
0B3842 3E 
0B3843 0B 
0B3844 D9    0740** EXX				; DE: Pointer to BASIC program, HL: Pointer to heap
0B3845 C1    0741** POP     BC			; BC: Pop the NEW line number value off the stack
0B3846 71    0742** LD      (HL),C			; Store the NEW line number in the heap
0B3847 23    0743** INC     HL
0B3848 70    0744** LD      (HL),B
0B3849 23    0745** INC     HL
0B384A EB    0746** EX      DE,HL			; HL: Pointer to BASIC program, DE: Pointer to heap
0B384B 2B    0747** DEC     HL			; Back up to the line length byte
0B384C 2B    0748** DEC     HL
0B384D 01    0749** LD	BC, 0
0B384E 00 
0B384F 00 
0B3850 00 
0B3851 4E    0750** LD      C,(HL)			; BC: Line length
0B3852 09    0751** ADD	HL,BC           	; Advance HL to next line
0B3853 EB    0752** EX      DE,HL			; DE: Pointer to BASIC program, HL: Pointer to heap
0B3854 E5    0753** PUSH    HL
0B3855 24    0754** INC     H			; Increment to next page
0B3856 ED    0755** SBC     HL,SP			; Subtract from SP
0B3857 72 
0B3858 E1    0756** POP     HL
0B3859 EB    0757** EX      DE, HL			; HL: Pointer to BASIC program, DE: Pointer to heap
0B385A 38    0758** JR      C,RENUM1        	; Loop, as the heap pointer has not strayed into the stack page
0B385B CD 
0B385C CD    0759** CALL    EXTERR          	; Otherwise throw error: "RENUMBER space'
0B385D 78 
0B385E 39 
0B385F 0B 
0B3860 CC    0760** DB    	REN
0B3861 08    0761** DB    	8
0B3862 00    0762** DB    	0
             0763** ;
             0764** ; At this point a list of BASIC line numbers have been written to the heap
             0765** ; as word pairs:
             0766** ; - DW: The OLD line number
             0767** ; - DW: The NEW line number
             0768** ;
0B3863 EB    0769** RENUM2:			EX      DE,HL			; HL: Pointer to the end of the heap
0B3864 36    0770** LD      (HL),-1			; Mark the end with FFFFh
0B3865 FF 
0B3866 23    0771** INC     HL
0B3867 36    0772** LD      (HL),-1
0B3868 FF 
0B3869 ED    0773** LD      DE,(LOMEM)		; DE: Pointer to the start of the heap
0B386A 5B 
0B386B 1A 
0B386C 4F 
0B386C 0B   
0B386E D9    0774** EXX
0B386F 2A    0775** LD      HL,(PAGE_)		; HL: Start of the BASIC program area
0B3870 14 
0B3871 4F 
0B3872 0B 
0B3873 4E    0776** RENUM3:			LD      C,(HL)			; Fetch the first line length byte
0B3874 79    0777** LD      A,C			; If it is zero, then no program, so...
0B3875 B7    0778** OR      A
0B3876 CA    0779** JP      Z,WARM			; Jump to warm start
0B3877 80 
0B3878 32 
0B3879 0B 
0B387A D9    0780** EXX				; HL: Pointer to end of heap, DE: Pointer to start of heap
0B387B EB    0781** EX      DE,HL			; DE: Pointer to end of heap, HL: Pointer to start of heap
0B387C 23    0782** INC     HL			; Skip to the NEW line number
0B387D 23    0783** INC     HL
0B387E 5E    0784** LD      E,(HL)			; DE: The NEW line number
0B387F 23    0785** INC     HL
0B3880 56    0786** LD      D,(HL)
0B3881 23    0787** INC     HL
0B3882 D5    0788** PUSH    DE			; Stack the NEW line number
0B3883 EB    0789** EX      DE,HL			; HL: The NEW line number, DE: Pointer to the end of heap
0B3884 22    0790** LD      (LINENO),HL		; Store the line number in LINENO
0B3885 23 
0B3886 4F 
0B3887 0B 
0B3888 D9    0791** EXX				; HL: Pointer to the BASIC program area
0B3889 D1    0792** POP     DE			; DE: The NEW line number
0B388A 23    0793** INC     HL
0B388B 73    0794** LD      (HL),E          	; Write out the NEW line number to the BASIC program
0B388C 23    0795** INC     HL
0B388D 72    0796** LD      (HL),D
0B388E 23    0797** INC     HL
0B388F 0D    0798** DEC     C			; Subtract 3 from the line length to compensate for increasing HL by 3 above
0B3890 0D    0799** DEC     C
0B3891 0D    0800** DEC     C
0B3892 79    0801** LD	A,C
0B3893 01    0802** LD	BC,0
0B3894 00 
0B3895 00 
0B3896 00 
0B3897 4F    0803** LD	C,A			; BC: Line length
             0804** ;
0B3898 3E    0805** RENUM7:			LD      A,LINO_MN			; A: The token code that precedes any line number encoded in BASIC (i.e. GOTO/GOSUB)
0B3899 8D 
0B389A ED    0806** CPIR                    	; Search for the token
0B389B B1 
0B389C 20    0807** JR      NZ,RENUM3		; If not found, then loop to process the next line
0B389D D5 
             0808** ;
             0809** ; Having established this line contains at least one encoded line number, we need to update it to point to the new line number
             0810** ;
0B389E C5    0811** PUSH    BC			; Stack everything
0B389F E5    0812** PUSH    HL
0B38A0 E5    0813** PUSH    HL			; HL: Pointer to encoded line number
0B38A1 FD    0814** POP     IY			; IY: Pointer to encoded line number
0B38A2 E1 
0B38A3 D9    0815** EXX
0B38A4 CD    0816** CALL    DECODE			; Decode the encoded line number (in HL')
0B38A5 E7 
0B38A6 0A 
0B38A7 0B 
0B38A8 D9    0817** EXX				; HL: Decoded line number
0B38A9 44    0818** LD      B,H			; BC: Decoded line number
0B38AA 4D    0819** LD      C,L
0B38AB 2A    0820** LD      HL,(LOMEM)		; HL: Pointer to heap
0B38AC 1A 
0B38AD 4F 
0B38AE 0B 
             0821** ;
             0822** ; This section of code cross-references the decoded (OLD) line number with the list
             0823** ; created previously in the global heap
             0824** ;
0B38AF 5E    0825** RENUM4:			LD      E,(HL)          	; DE: The OLD line number
0B38B0 23    0826** INC     HL
0B38B1 56    0827** LD      D,(HL)
0B38B2 23    0828** INC     HL
0B38B3 EB    0829** EX      DE,HL			; HL: The OLD line number, DE: Pointer in the global heap
0B38B4 B7    0830** OR      A               	; Clear the carry and...
0B38B5 52    0831** SBC.S   HL,BC			; Compare by means of subtraction the OLD line number against the one in the heap
0B38B6 ED 
0B38B7 42 
0B38B8 EB    0832** EX      DE,HL			; HL: Pointer in the global heap
0B38B9 5E    0833** LD      E,(HL)          	; DE: The NEW line number
0B38BA 23    0834** INC     HL
0B38BB 56    0835** LD      D,(HL)
0B38BC 23    0836** INC     HL
0B38BD 38    0837** JR      C,RENUM4		; Loop until there is a match (Z) or not (NC)
0B38BE F0 
0B38BF EB    0838** EX      DE,HL			; DE: Pointer in the global heap
0B38C0 28    0839** JR      Z,RENUM5        	; If Z flag is set, there is an exact match to the decoded line number on the heap
0B38C1 1D 
             0840** ;
0B38C2 CD    0841** CALL    TELL			; Display this error if the line number is not found
0B38C3 91 
0B38C4 3F 
0B38C5 0B 
0B38C6 46    0842** DB    	"Failed at "
0B38C7 61 
0B38C8 69 
0B38C9 6C 
0B38C9 65   
0B38CA 64 
0B38CB 20 
0B38CC 61 
0B38CC 74   
0B38CD 20 
0B38D0 00    0843** DB    	0
0B38D1 2A    0844** LD      HL,(LINENO)
0B38D2 23 
0B38D3 4F 
0B38D4 0B 
0B38D5 CD    0845** CALL    PBCDL
0B38D6 F8 
0B38D7 3B 
0B38D8 0B 
0B38D9 CD    0846** CALL    CRLF
0B38DA 48 
0B38DB 3B 
0B38DC 0B 
0B38DD 18    0847** JR      RENUM6			; And carry on renumbering
0B38DE 07 
             0848** ;
             0849** ; This snippet re-encodes the line number in the BASIC program
             0850** ;
0B38DF D1    0851** RENUM5:			POP     DE			; DE: Pointer to the encoded line number in the listing
0B38E0 D5    0852** PUSH    DE
0B38E1 1B    0853** DEC     DE			; Back up a byte to the LINO token
0B38E2 CD    0854** CALL    ENCODE          	; Re-write the new line number out
0B38E3 5D 
0B38E4 3F 
0B38E5 0B 
0B38E6 E1    0855** RENUM6:			POP     HL			; HL: Pointer to the encoded line number in the listing
0B38E7 C1    0856** POP     BC			; BC: The remaining line length
0B38E8 18    0857** JR      RENUM7			; Carry on checking for any more encoded line numbers in this line
0B38E9 AE 
             0858** ;
             0859** ; AUTO
             0860** ; AUTO start,increment
             0861** ; AUTO start
             0862** ; AUTO ,increment
             0863** ;
0B38EA CD    0864** AUTO:			CALL    PAIR			; Get the parameter pair (HL: first parameter, BC: second parameter)
0B38EB 2C 
0B38EC 3E 
0B38ED 0B 
0B38EE 22    0865** LD      (AUTONO),HL		; Store the start in AUTONO
0B38EF 29 
0B38F0 4F 
0B38F1 0B 
0B38F2 79    0866** LD      A,C			; Increment is 8 bit (0-255)
0B38F3 32    0867** LD      (INCREM),A		; Store that in INCREM
0B38F4 41 
0B38F5 4F 
0B38F6 0B 
0B38F7 18    0868** JR      CLOOP0			; Jump back indirectly to the command loop via CLOOP0 (optimisation for size)
0B38F8 2E 
             0869** ;
             0870** ; BAD
             0871** ; NEW
             0872** ;
0B38F9 CD    0873** BAD:			CALL    TELL            	; Output "Bad program" error
0B38FA 91 
0B38FB 3F 
0B38FC 0B 
0B38FD 03    0874** DB    3				; Token for "BAD"
0B38FE 70    0875** DB    "program"
0B38FF 72 
0B3900 6F 
0B3901 67 
0B3901 72   
0B3902 61 
0B3903 6D 
0B3905 0D    0876** DB    CR
0B3906 0A    0877** DB    LF
0B3907 00    0878** DB    0				; Falls through to NEW
             0879** ;
0B3908 CD    0880** NEW:			CALL    NEWIT			; Call NEWIT (clears program area and variables)
0B3909 6D 
0B390A 3A 
0B390B 0B 
0B390C 18    0881** JR      CLOOP0			; Jump back indirectly to the command loop via CLOOP0 (optimisation for size)
0B390D 19 
             0882** ;
             0883** ; OLD
             0884** ;
0B390E 2A    0885** OLD:			LD      HL,(PAGE_)		; HL: The start of the BASIC program area
0B390F 14 
0B3910 4F 
0B3911 0B 
0B3912 E5    0886** PUSH    HL			; Stack it
0B3913 23    0887** INC     HL			; Skip the potential length byte of first line of code
0B3914 23    0888** INC     HL			; And the line number word
0B3915 23    0889** INC     HL
0B3916 01    0890** LD      BC,252			; Look for a CR in the first 252 bytes of code; maximum line length
0B3917 FC 
0B3918 00 
0B3919 00 
0B391A 3E    0891** LD      A,CR
0B391B 0D 
0B391C ED    0892** CPIR
0B391D B1 
0B391E 20    0893** JR      NZ,BAD			; If not found, then the first line of code is not a valid BBC BASIC code
0B391F D9 
0B3920 7D    0894** LD      A,L			; It could still be garbage though! Store the position in A; this requires
0B3921 E1    0895** POP     HL			; PAGE to be on a 256 page boundary, and is now the length of the first line
0B3922 77    0896** LD      (HL),A			; Restore the length byte (this will have been set to 0 by NEW)
0B3923 CD    0897** CALL    CLEAN			; Further checks for bad program, set TOP, write out &FFFF end of program marker
0B3924 40 
0B3925 3A 
0B3926 0B 
0B3927 C3    0898** CLOOP0:			JP      CLOOP			; Jump back to the command loop
0B3928 81 
0B3929 32 
0B392A 0B 
             0899** ;
             0900** ; LOAD filename
             0901** ;
0B392B CD    0902** LOAD:			CALL    EXPRS           	; Get the filename
0B392C 16 
0B392D 05 
0B392E 0B 
0B392F 3E    0903** LD      A,CR			; DE points to the last byte of filename in ACCS
0B3930 0D 
0B3931 12    0904** LD      (DE),A			; Terminate filename with a CR
0B3932 CD    0905** CALL    LOAD0			; Load the file in, then CLEAN
0B3933 20 
0B3934 3A 
0B3935 0B 
0B3936 CD    0906** CALL    CLEAR			; Further checks for bad program, set TOP, write out &FFFF end of program marker
0B3937 77 
0B3938 3A 
0B3939 0B 
0B393A 18    0907** JR      WARM0			; Jump back to the command loop
0B393B 21 
             0908** ;
             0909** ; SAVE filename
             0910** ;
0B393C CD    0911** SAVE:			CALL    SETTOP          	; Set TOP sysvar
0B393D 4C 
0B393E 3A 
0B393F 0B 
0B3940 CD    0912** CALL    EXPRS           	; Get the filename
0B3941 16 
0B3942 05 
0B3943 0B 
0B3944 3E    0913** LD      A,CR			; Terminate the filename with a CR
0B3945 0D 
0B3946 12    0914** LD      (DE),A
0B3947 ED    0915** LD      DE,(PAGE_)		; DE: Start of program memory
0B3948 5B 
0B3949 14 
0B394A 4F 
0B394A 0B   
0B394C 2A    0916** LD      HL,(TOP)		; HL: Top of program memory
0B394D 17 
0B394E 4F 
0B394F 0B 
0B3950 B7    0917** OR      A			; Calculate program size (TOP-PAGE)
0B3951 ED    0918** SBC     HL,DE
0B3952 52 
0B3953 44    0919** LD      B,H             	; BC: Length of program in bytes
0B3954 4D    0920** LD      C,L
0B3955 21    0921** LD      HL,ACCS			; HL: Address of the filename
0B3956 00 
0B3957 4C 
0B3958 0B 
0B3959 CD    0922** CALL    OSSAVE			; Call the SAVE routine in patch.asm
0B395A 2E 
0B395B 44 
0B395C 0B 
0B395D C3    0923** WARM0:			JP      WARM			; Jump back to the command loop
0B395E 80 
0B395F 32 
0B3960 0B 
             0924** 
             0925** ;
             0926** ; ERROR
             0927** ; Called whenever BASIC needs to halt with an error
             0928** ; Error messages are indexed from 0
             0929** ; Inputs:
             0930** ;  A: Error number
             0931** ;
0B3961 ED    0932** ERROR_:			LD      SP,(HIMEM)		; Set SP to HIMEM
0B3962 7B 
0B3963 20 
0B3964 4F 
0B3964 0B   
0B3966 21    0933** LD      HL,ERRWDS		; Index into the error string table
0B3967 4A 
0B3968 36 
0B3969 0B 
0B396A B7    0934** OR      A			; We don't need to search for the first error
0B396B 28    0935** JR      Z,ERROR1		; So skip the search routine
0B396C 0A 
             0936** ;
             0937** ; Search the error table for error #A
             0938** ; HL will end up being the pointer into the correct error
             0939** ; There is no bounds checking on this, so invalid error numbers will probably output garbage
             0940** ;
0B396D 47    0941** LD      B,A             	; Store error number in B
0B396E 08    0942** EX      AF,AF'			; Store error number in AF'
0B396F AF    0943** XOR     A
0B3970 BE    0944** ERROR0:			CP      (HL)			; Compare the character with 0 (the terminator byte)
0B3971 23    0945** INC     HL			; Increment the string pointer
0B3972 20    0946** JR      NZ,ERROR0		; Loop until with hit a 0
0B3973 FC 
0B3974 10    0947** DJNZ    ERROR0			; Decrements the error number and loop until 0
0B3975 FA 
0B3976 08    0948** EX      AF,AF'			; Restore the error number from AF'
             0949** ;
             0950** ; At this point HL points to the tokenised error string
             0951** ;
0B3977 E5    0952** ERROR1:			PUSH    HL			; Stack the error string pointer and fall through to EXTERR
             0953** 
             0954** ;
             0955** ; EXTERR
             0956** ; Inputs:
             0957** ;  A: Error number
             0958** ;
             0959** ; This is the entry point for external errors, i.e. ones not in the ERRWDS table
             0960** ; The error text immediately follows the CALL to EXTERR, for example:
             0961** ; > CALL  EXTERR
             0962** ; > DB    "Silly", 0
             0963** ; So we can get the address of the string by popping the return address off the stack
             0964** ;
0B3978 E1    0965** EXTERR:			POP     HL			; Pop the error string pointer
0B3979 22    0966** LD      (ERRTXT),HL		; Store in ERRTXT sysvar
0B397A 2F 
0B397B 4F 
0B397C 0B 
0B397D ED    0967** LD      SP,(HIMEM)		; Set SP to HIMEM
0B397E 7B 
0B397F 20 
0B3980 4F 
0B3980 0B   
0B3982 32    0968** LD      (ERR),A			; Store error number in ERR sysvar
0B3983 3F 
0B3984 4F 
0B3985 0B 
0B3986 CD    0969** CALL    SETLIN			; Get line number
0B3987 AF 
0B3988 3B 
0B3989 0B 
0B398A 22    0970** LD      (ERL),HL		; Store in ERL sysvar
0B398B 33 
0B398C 4F 
0B398D 0B 
0B398E B7    0971** OR      A			; Is error number 0?
0B398F 28    0972** JR      Z,ERROR2		; Yes, so skip the next bit as error number 0 is untrappable
0B3990 0D 
             0973** ;
0B3991 2A    0974** LD      HL,(ERRTRP)		; Check whether the error is trapped
0B3992 2C 
0B3993 4F 
0B3994 0B 
0B3995 7C    0975** LD      A,H
0B3996 B5    0976** OR      L
0B3997 E5    0977** PUSH    HL			; HL: Error line
0B3998 FD    0978** POP     IY			; IY: HL
0B3999 E1 
0B399A C2    0979** JP      NZ,XEQ         	 	; If error trapped, jump to XEQ
0B399B 97 
0B399C 0D 
0B399D 0B 
             0980** ;
0B399E 21    0981** ERROR2:			LD      HL,0
0B399F 00 
0B39A0 00 
0B39A1 00 
0B39A2 22    0982** LD      (AUTONO),HL		; Cancel AUTO
0B39A3 29 
0B39A4 4F 
0B39A5 0B 
0B39A6 22    0983** LD      (TRACEN),HL     	; Cancel TRACE
0B39A7 26 
0B39A8 4F 
0B39A9 0B 
0B39AA CD    0984** CALL    RESET           	; Reset OPSYS
0B39AB B7 
0B39AC 45 
0B39AD 0B 
0B39AE CD    0985** CALL    CRLF			; Output newline
0B39AF 48 
0B39B0 3B 
0B39B1 0B 
0B39B2 CD    0986** CALL    REPORT          	; Output the error message
0B39B3 83 
0B39B4 3F 
0B39B5 0B 
0B39B6 CD    0987** CALL    SAYLN			; Output " at line nnnn" message.
0B39B7 E3 
0B39B8 3B 
0B39B9 0B 
0B39BA 1E    0988** LD      E,0			; Close all files
0B39BB 00 
0B39BC DC    0989** CALL    C,OSSHUT
0B39BD 2C 
0B39BE 45 
0B39BF 0B 
0B39C0 CD    0990** CALL    CRLF			; Output newline
0B39C1 48 
0B39C2 3B 
0B39C3 0B 
0B39C4 C3    0991** JP      CLOOP			; Back to CLOOP
0B39C5 81 
0B39C6 32 
0B39C7 0B 
             0992** ;
             0993** ; SUBROUTINES:
             0994** ;
             0995** ; LEX - SEARCH FOR KEYWORDS
             0996** ;   Inputs: HL = start of keyword table
             0997** ;           IY = start of match text
             0998** ;  Outputs: If found, Z-flag set, A=token.
             0999** ;           If not found, Z-flag reset, A=(IY).
             1000** ;           IY updated (if NZ, IY unchanged).
             1001** ; Destroys: A,B,H,L,IY,F
             1002** ;
0B39C8 21    1003** LEX:			LD      HL,KEYWDS		; Address of the keywords table
0B39C9 69 
0B39CA 33 
0B39CB 0B 
             1004** ;
0B39CC FD    1005** LEX0:			LD      A,(IY)			; Fetch the character to match
0B39CD 7E 
0B39CE 00 
0B39CF 46    1006** LD      B,(HL)			; B: The token from the keywords table
0B39D0 23    1007** INC     HL			; Increment the pointer in the keywords table
0B39D1 BE    1008** CP      (HL)			; Compare the first characters
0B39D2 28    1009** JR      Z,LEX2			; If there is a match, then skip to LEX2
0B39D3 08 
0B39D4 D8    1010** RET     C               	; No match, so fail
             1011** ;
             1012** ; This snippet of code skips to the next token in the KEYWDS table
             1013** ;
0B39D5 23    1014** LEX1:			INC     HL			; Increment the pointer
0B39D6 CB    1015** BIT     7,(HL)			; Check if bit 7 set (all token IDs have bit 7 set)
0B39D7 7E 
0B39D8 28    1016** JR      Z,LEX1			; No, so loop
0B39D9 FB 
0B39DA 18    1017** JR      LEX0			; At this point HL is pointing to the start of the next keyword
0B39DB F0 
             1018** ;
0B39DC FD    1019** LEX2:			PUSH    IY              	; Save the input pointer
0B39DD E5 
0B39DE 23    1020** LEX3:			INC     HL			; Increment the keyword pointer
0B39DF CB    1021** BIT     7,(HL)			; If we've reached the end (marked by the start of the next token) then
0B39E0 7E 
0B39E1 20    1022** JR      NZ,LEX6         	; Jump to here as we've found a token
0B39E2 1C 
0B39E3 FD    1023** INC     IY			; Increment the text pointer
0B39E4 23 
0B39E5 FD    1024** LD      A,(IY)			; Fetch the character
0B39E6 7E 
0B39E7 00 
0B39E8 FE    1025** CP      '.'			; Is it an abbreviated keyword?
0B39E9 2E 
0B39EA 28    1026** JR      Z,LEX6          	; Yes, so we'll return with the token we've found
0B39EB 13 
0B39EC BE    1027** CP      (HL)			; Compare with the keywords list
0B39ED 28    1028** JR      Z,LEX3			; It's a match, so continue checking this keyword
0B39EE EF 
0B39EF CD    1029** CALL    RANGE1			; Is it alphanumeric, '@', '_' or '`'
0B39F0 7C 
0B39F1 3E 
0B39F2 0B 
0B39F3 38    1030** JR      C,LEX5			; No, so check whether keyword needs to be immediately delimited
0B39F4 04 
             1031** ;
0B39F5 FD    1032** LEX4:			POP     IY              	; Restore the input pointer ready for the next search
0B39F6 E1 
0B39F7 18    1033** JR      LEX1			; And loop back to start again
0B39F8 DC 
             1034** ;
             1035** ; This section handles the 0 byte at the end of keywords that indicate the keyword needs to be
             1036** ; immediately delimited
             1037** ;
0B39F9 7E    1038** LEX5:			LD      A,(HL)			; Fetch the byte from the keywords table
0B39FA B7    1039** OR      A			; If it is not zero, then...
0B39FB 20    1040** JR      NZ,LEX4			; Keep searching
0B39FC F8 
0B39FD FD    1041** DEC     IY			; If it is zero, then skip the input pointer back one byte
0B39FE 2B 
             1042** ;
             1043** ; We've found a token at this point
             1044** ;
0B39FF F1    1045** LEX6:			POP     AF			; Discard IY input pointer pushed on the stack
0B3A00 AF    1046** XOR     A			; Set the Z flag
0B3A01 78    1047** LD      A,B			; A: The token
0B3A02 C9    1048** RET
             1049** ;
             1050** ; DEL - DELETE A PROGRAM LINE.
             1051** ;   Inputs: HL addresses program line.
             1052** ; Destroys: B,C,F
             1053** ;
             1054** ; This simply erases the line by moving all of the code after the line to be deleted back over
             1055** ; it using an LDIR
             1056** ;
0B3A03 D5    1057** DEL:			PUSH    DE
0B3A04 E5    1058** PUSH    HL
0B3A05 E5    1059** PUSH    HL			; HL: Address of the program line
0B3A06 06    1060** LD      B,0			; BC: Length of the line
0B3A07 00 
0B3A08 4E    1061** LD      C,(HL)
0B3A09 09    1062** ADD     HL,BC			; HL: Advanced to the start of the next line
0B3A0A E5    1063** PUSH    HL
0B3A0B EB    1064** EX      DE,HL			; DE: Pointer to the next line
0B3A0C 2A    1065** LD      HL,(TOP)		; HL: Pointer to the end of the program
0B3A0D 17 
0B3A0E 4F 
0B3A0F 0B 
0B3A10 ED    1066** SBC     HL,DE
0B3A11 52 
0B3A12 44    1067** LD      B,H			; BC: Size of block to move
0B3A13 4D    1068** LD      C,L
0B3A14 E1    1069** POP     HL			; HL: Pointer to next line
0B3A15 D1    1070** POP     DE			; DE: Pointer to this line
0B3A16 ED    1071** LDIR                    	; Delete the line
0B3A17 B0 
0B3A18 ED    1072** LD      (TOP),DE		; Adjust TOP
0B3A19 53 
0B3A1A 17 
0B3A1B 4F 
0B3A1B 0B   
0B3A1D E1    1073** POP     HL
0B3A1E D1    1074** POP     DE
0B3A1F C9    1075** RET
             1076** ;
             1077** ;LOAD0 - LOAD A DISK FILE THEN CLEAN.
             1078** ;   Inputs: Filename in ACCS (term CR)
             1079** ; Destroys: A,B,C,D,E,H,L,F
             1080** ;
             1081** ;CLEAN - CHECK FOR BAD PROGRAM, FIND END OF TEXT
             1082** ; AND WRITE FF FF, THEN LOAD (TOP).
             1083** ; Destroys: A,B,C,H,L,F
             1084** ;
0B3A20 ED    1085** LOAD0: 			LD      DE,(PAGE_)		; DE: Beginning of BASIC program area
0B3A21 5B 
0B3A22 14 
0B3A23 4F 
0B3A23 0B   
0B3A25 21    1086** LD      HL,-256
0B3A26 00 
0B3A27 FF 
0B3A28 FF 
0B3A29 39    1087** ADD     HL,SP
0B3A2A ED    1088** SBC     HL,DE           	; Find available space
0B3A2B 52 
0B3A2C 44    1089** LD      B,H
0B3A2D 4D    1090** LD      C,L
0B3A2E 21    1091** LD      HL,ACCS
0B3A2F 00 
0B3A30 4C 
0B3A31 0B 
0B3A32 CD    1092** CALL    OSLOAD          	; Call the OSLOAD function in patch
0B3A33 95 
0B3A34 43 
0B3A35 0B 
0B3A36 D4    1093** CALL    NC,NEWIT		; If NC then NEW
0B3A37 6D 
0B3A38 3A 
0B3A39 0B 
0B3A3A 3E    1094** LD      A,0
0B3A3B 00 
0B3A3C D2    1095** JP      NC,ERROR_        	; And trigger a "No room" error, otherwise...
0B3A3D 61 
0B3A3E 39 
0B3A3F 0B 
             1096** ;
0B3A40 CD    1097** CLEAN:			CALL    SETTOP			; Set TOP sysvar
0B3A41 4C 
0B3A42 3A 
0B3A43 0B 
0B3A44 2B    1098** DEC     HL			; Write out the end of program markers
0B3A45 36    1099** LD      (HL),-1
0B3A46 FF 
0B3A47 2B    1100** DEC     HL
0B3A48 36    1101** LD      (HL),-1
0B3A49 FF 
0B3A4A 18    1102** JR      CLEAR			; Clear all dynamic variables and function/procedure pointers
0B3A4B 2B 
             1103** ;
             1104** ; Set the TOP sysvar; the first free location after the end of the current program
             1105** ; Returns:
             1106** ; - HL: TOP
             1107** ;
0B3A4C 2A    1108** SETTOP:			LD      HL,(PAGE_)		; Start at beginning of BASIC program area
0B3A4D 14 
0B3A4E 4F 
0B3A4F 0B 
0B3A50 01    1109** LD	BC, 0			; BC: 0
0B3A51 00 
0B3A52 00 
0B3A53 00 
0B3A54 3E    1110** LD      A,CR			; End of line marker
0B3A55 0D 
0B3A56 4E    1111** SETOP1:			LD      C,(HL)			; BC: Get first byte of program line (line length)
0B3A57 0C    1112** INC     C			; Check for zero
0B3A58 0D    1113** DEC     C
0B3A59 28    1114** JR      Z,SETOP2		; If it is zero, we've reached the end
0B3A5A 0A 
0B3A5B 09    1115** ADD     HL,BC			; Skip to next line
0B3A5C 2B    1116** DEC     HL			; Check end of previous line
0B3A5D BE    1117** CP      (HL)
0B3A5E 23    1118** INC     HL
0B3A5F 28    1119** JR      Z,SETOP1		; If CR then loop
0B3A60 F5 
0B3A61 C3    1120** JP      BAD			; If anything else, then something has gone wrong - trip a Bad Program error
0B3A62 F9 
0B3A63 38 
0B3A64 0B 
             1121** ;
0B3A65 23    1122** SETOP2:			INC     HL             		; Skip the 3 byte end of program marker (&00, &FF, &FF)
0B3A66 23    1123** INC     HL			; NB: Called from NEWIT
0B3A67 23    1124** INC     HL
0B3A68 22    1125** LD      (TOP),HL		; Store in TOP sysvar
0B3A69 17 
0B3A6A 4F 
0B3A6B 0B 
0B3A6C C9    1126** RET
             1127** ;
             1128** ; NEWIT - NEW PROGRAM THEN CLEAR
             1129** ;   Destroys: H,L
             1130** ;
             1131** ; CLEAR - CLEAR ALL DYNAMIC VARIABLES INCLUDING
             1132** ; FUNCTION AND PROCEDURE POINTERS.
             1133** ;   Destroys: Nothing
             1134** ;
0B3A6D 2A    1135** NEWIT:			LD      HL,(PAGE_)		; HL: First byte of BASIC program area
0B3A6E 14 
0B3A6F 4F 
0B3A70 0B 
0B3A71 36    1136** LD      (HL),0			; Stick a 0 in there
0B3A72 00 
0B3A73 CD    1137** CALL    SETOP2			; Skip three bytes to get to end of empty BASIC program area and set TOP sysvar
0B3A74 65 
0B3A75 3A 
0B3A76 0B 
             1138** ;
0B3A77 E5    1139** CLEAR:			PUSH    HL			; Stack the BASIC program pointer
0B3A78 2A    1140** LD      HL,(TOP)		; Get the TOP sysvar - first available byte after BASIC
0B3A79 17 
0B3A7A 4F 
0B3A7B 0B 
0B3A7C 22    1141** LD      (LOMEM),HL		; Set the LOMEM sysvar
0B3A7D 1A 
0B3A7E 4F 
0B3A7F 0B 
0B3A80 22    1142** LD      (FREE),HL		; And the FREE sysvar with that value
0B3A81 1D 
0B3A82 4F 
0B3A83 0B 
0B3A84 21    1143** LD      HL,DYNVAR		; Get the pointer to the dynamic variable pointers buffer in RAM
0B3A85 6C 
0B3A86 4E 
0B3A87 0B 
0B3A88 C5    1144** PUSH    BC
             1145** ; LD      B,3*(54+2)		; Loop counter
0B3A89 06    1146** LD      B,54+2*3		; ez80asm doesn't do () in expressions
0B3A8A A8 
0B3A8B 36    1147** CLEAR1:			LD      (HL),0			; Clear the dynamic variable pointers
0B3A8C 00 
0B3A8D 23    1148** INC     HL
0B3A8E 10    1149** DJNZ    CLEAR1
0B3A8F FB 
0B3A90 C1    1150** POP     BC
0B3A91 E1    1151** POP     HL			; Restore the BASIC program pointer
0B3A92 C9    1152** RET
             1153** ;
             1154** ;LISTIT - LIST A PROGRAM LINE.
             1155** ;    Inputs: HL addresses line
             1156** ;            DE = line number (binary)
             1157** ;            IX = Pointer to LISTON
             1158** ;             B = FOR/NEXT indent level
             1159** ;             C = REPEAT/UNTIL indent level
             1160** ;  Destroys: A,D,E,B',C',D',E',H',L',IY,F
             1161** ;
0B3A93 E5    1162** LISTIT:			PUSH    HL			; Stack the address of the line
0B3A94 EB    1163** EX      DE,HL			; HL: Line number
0B3A95 C5    1164** PUSH    BC
0B3A96 CD    1165** CALL    PBCD			; Print the line number
0B3A97 FC 
0B3A98 3B 
0B3A99 0B 
0B3A9A C1    1166** POP     BC
0B3A9B E1    1167** POP     HL			; HL: Address of the first token/character
0B3A9C 7E    1168** LD      A,(HL)			; Fetch the token
0B3A9D FE    1169** CP      NEXT			; Is it NEXT...
0B3A9E ED 
0B3A9F CC    1170** CALL    Z,INDENT		; Yes, so indent in
0B3AA0 29 
0B3AA1 3B 
0B3AA2 0B 
0B3AA3 FE    1171** CP      UNTIL			; Or is it UNTIL...
0B3AA4 FD 
0B3AA5 CC    1172** CALL    Z,INDENT		; Yes, so indent in
0B3AA6 29 
0B3AA7 3B 
0B3AA8 0B 
0B3AA9 D9    1173** EXX
0B3AAA 3E    1174** LD      A,' '
0B3AAB 20 
0B3AAC DD    1175** BIT     0,(IX)			; If BIT 0 of LISTON is set
0B3AAD CB 
0B3AAE 00 
0B3AAF 46 
0B3AB0 C4    1176** CALL    NZ,OUTCHR		; Then print a space after the line number
0B3AB1 50 
0B3AB2 3B 
0B3AB3 0B 
0B3AB4 78    1177** LD      A,B			; Fetch the FOR/NEXT indent level
0B3AB5 87    1178** ADD     A,A			; Multiply by 2
0B3AB6 DD    1179** BIT     1,(IX)			; If BIT 1 of LISTON is set
0B3AB7 CB 
0B3AB8 00 
0B3AB9 4E 
0B3ABA C4    1180** CALL    NZ,FILL			; Then print the FOR/NEXT indent
0B3ABB F0 
0B3ABC 19 
0B3ABD 0B 
0B3ABE 79    1181** LD      A,C			; Fetch the REPEAT/UNTIL indent level
0B3ABF 87    1182** ADD     A,A			; Multiply by 2
0B3AC0 DD    1183** BIT     2,(IX)			; If BIT 2 of LISTON is set
0B3AC1 CB 
0B3AC2 00 
0B3AC3 56 
0B3AC4 C4    1184** CALL    NZ,FILL			; Then print the REPEAT/UNTIL indent
0B3AC5 F0 
0B3AC6 19 
0B3AC7 0B 
0B3AC8 D9    1185** EXX
0B3AC9 7E    1186** LD      A,(HL)			; Fetch the token
0B3ACA FE    1187** CP      FOR			; Is it FOR?
0B3ACB E3 
0B3ACC CC    1188** CALL    Z,INDENT		; Yes, so indent
0B3ACD 29 
0B3ACE 3B 
0B3ACF 0B 
0B3AD0 FE    1189** CP      REPEAT			; Is it REPEAT?
0B3AD1 F5 
0B3AD2 CC    1190** CALL    Z,INDENT		; Yes, so indent
0B3AD3 29 
0B3AD4 3B 
0B3AD5 0B 
0B3AD6 1E    1191** LD      E,0			; E: The quote counter - reset to 0
0B3AD7 00 
0B3AD8 7E    1192** LIST8:			LD      A,(HL)			; Fetch a character / token byte
0B3AD9 23    1193** INC     HL
0B3ADA FE    1194** CP      CR			; Is it end of line?
0B3ADB 0D 
0B3ADC 28    1195** JR      Z,LISTE			; Yes, so finish (DB: Used to jump to CRLF, modified for *EDIT)
0B3ADD 0B 
0B3ADE FE    1196** CP      34			; Is it a quote character?
0B3ADF 22 
0B3AE0 20    1197** JR      NZ,LIST7		; No, so skip to next bit
0B3AE1 01 
0B3AE2 1C    1198** INC     E			; Otherwise increment quote counter
0B3AE3 CD    1199** LIST7:			CALL    LOUT			; Output the character / token
0B3AE4 18 
0B3AE5 3B 
0B3AE6 0B 
0B3AE7 18    1200** JR      LIST8			; And repeat
0B3AE8 EF 
             1201** ;
             1202** ; DB: Modification for *EDIT
             1203** ; Terminate the line with either a CRLF or a NUL character
             1204** ;
0B3AE9 DD    1205** LISTE:			BIT 	3,(IX)			; Are we printing to buffer?
0B3AEA CB 
0B3AEB 00 
0B3AEC 5E 
0B3AED 28    1206** JR	Z, CRLF			; Yes, so print a CRLF
0B3AEE 59 
0B3AEF AF    1207** XOR	A			; Otherwise print a NUL (0)
0B3AF0 C3    1208** JP	OSWRCH
0B3AF1 01 
0B3AF2 41 
0B3AF3 0B 
             1209** ;
             1210** ; Decode the 3 byte GOTO type line number
             1211** ;
0B3AF4 E5    1212** PRLINO:			PUSH    HL			; Swap HL and IY
0B3AF5 FD    1213** POP     IY			; IY: Pointer to the line number
0B3AF6 E1 
0B3AF7 C5    1214** PUSH    BC
0B3AF8 CD    1215** CALL    DECODE			; Decode
0B3AF9 E7 
0B3AFA 0A 
0B3AFB 0B 
0B3AFC C1    1216** POP     BC
0B3AFD D9    1217** EXX
0B3AFE C5    1218** PUSH    BC
0B3AFF CD    1219** CALL    PBCDL			; Output the line number
0B3B00 F8 
0B3B01 3B 
0B3B02 0B 
0B3B03 C1    1220** POP     BC
0B3B04 D9    1221** EXX
0B3B05 FD    1222** PUSH    IY			; Swap HL and IY
0B3B06 E5 
0B3B07 E1    1223** POP     HL			; HL: Pointer to the next character in the line
0B3B08 C9    1224** RET
             1225** ;
             1226** ; DB: Modification for internationalisation
             1227** ;
0B3B09 CD    1228** PRREM:			CALL	OUT_			; Output the REM token
0B3B0A 6D 
0B3B0B 3B 
0B3B0C 0B 
0B3B0D 7E    1229** @@:			LD	A, (HL)			; Fetch the character
0B3B0E FE    1230** CP	CR			; If it is end of line, then
0B3B0F 0D 
0B3B10 C8    1231** RET	Z			; we have finished
0B3B11 CD    1232** CALL	OUTCHR			; Ouput the character
0B3B12 50 
0B3B13 3B 
0B3B14 0B 
0B3B15 23    1233** INC	HL
0B3B16 18    1234** JR	@B			; And loop
0B3B17 F5 
             1235** ;
             1236** ; DB: End of modification
             1237** ;
0B3B18 CB    1238** LOUT:			BIT     0,E			; If the quote counter is odd (bit 1 set) then
0B3B19 43 
0B3B1A 20    1239** JR      NZ,OUTCHR		; don't tokenise, just output the character
0B3B1B 34 
0B3B1C FE    1240** CP	REM			; DB: Is it REM
0B3B1D F4 
0B3B1E 28    1241** JR	Z, PRREM		; DB: Yes so jump to the special case for REM
0B3B1F E9 
0B3B20 FE    1242** CP      LINO_MN			; Is it a line number (following GOTO/GOSUB etc)?
0B3B21 8D 
0B3B22 28    1243** JR      Z,PRLINO		; Yes, so decode and print the line number
0B3B23 D0 
0B3B24 CD    1244** CALL    OUT_			; Output a character / keyword
0B3B25 6D 
0B3B26 3B 
0B3B27 0B 
0B3B28 7E    1245** LD      A,(HL)			; Fetch the next character
             1246** ;
             1247** ; This block of code handles the indentation
             1248** ; B: Counter for FOR/NEXT indent
             1249** ; C: Counter for REPEAT/UNTIL indent
             1250** ;
0B3B29 D9    1251** INDENT:			EXX
0B3B2A FE    1252** CP      FOR			; If the token is FOR
0B3B2B E3 
0B3B2C 28    1253** JR      Z,IND1			; Then INC B
0B3B2D 09 
0B3B2E FE    1254** CP      NEXT			; If it is NEXT
0B3B2F ED 
0B3B30 20    1255** JR      NZ,IND2_		; Then...
0B3B31 06 
0B3B32 05    1256** DEC     B			; DEC B
0B3B33 F2    1257** JP      P,IND2_			; If we have gone below 0 then
0B3B34 38 
0B3B35 3B 
0B3B36 0B 
0B3B37 04    1258** IND1:			INC     B			; Increment back to 0
             1259** ;
0B3B38 FE    1260** IND2_:			CP      REPEAT			; If the token is REPEAT
0B3B39 F5 
0B3B3A 28    1261** JR      Z,IND3			; Then INC C
0B3B3B 09 
0B3B3C FE    1262** CP      UNTIL			; If it is UNTIL
0B3B3D FD 
0B3B3E 20    1263** JR      NZ,IND4			; Then...
0B3B3F 06 
0B3B40 0D    1264** DEC     C			; DEC C
0B3B41 F2    1265** JP      P,IND4			; If we have gone below 0 then
0B3B42 46 
0B3B43 3B 
0B3B44 0B 
0B3B45 0C    1266** IND3:			INC     C			; Incremet back to 0
0B3B46 D9    1267** IND4:			EXX
0B3B47 C9    1268** RET
             1269** ;
             1270** ;CRLF - SEND CARRIAGE RETURN, LINE FEED.
             1271** ;  Destroys: A,F
             1272** ;OUTCHR - OUTPUT A CHARACTER TO CONSOLE.
             1273** ;    Inputs: A = character
             1274** ;  Destroys: A,F
             1275** ;
0B3B48 3E    1276** CRLF:			LD      A,CR			; Output CR
0B3B49 0D 
0B3B4A CD    1277** CALL    OUTCHR
0B3B4B 50 
0B3B4C 3B 
0B3B4D 0B 
0B3B4E 3E    1278** LD      A,LF			; Output LF
0B3B4F 0A 
             1279** ;
0B3B50 CD    1280** OUTCHR:			CALL    OSWRCH			; Output the character in A
0B3B51 01 
0B3B52 41 
0B3B53 0B 
0B3B54 D6    1281** SUB     CR			; Check for CR
0B3B55 0D 
0B3B56 28    1282** JR      Z,CARRET		; If it is CR then A will be 0, this will clear the count
0B3B57 06 
0B3B58 D8    1283** RET     C              		; If it is less than CR, it is non-printing, so don't increment the count
0B3B59 3A    1284** LD      A,(COUNT)		; Increment the count
0B3B5A 3D 
0B3B5B 4F 
0B3B5C 0B 
0B3B5D 3C    1285** INC     A
             1286** ;
0B3B5E 32    1287** CARRET:			LD      (COUNT),A		; Store the new count value
0B3B5F 3D 
0B3B60 4F 
0B3B61 0B 
0B3B62 C8    1288** RET     Z			; Return if the count has wrapped to 0
0B3B63 E5    1289** PUSH    HL			; Now check if count = print width
0B3B64 2A    1290** LD      HL,(WIDTH)		; Get the print width; it's a byte value, so
0B3B65 3E 
0B3B66 4F 
0B3B67 0B 
0B3B68 BD    1291** CP      L			; L is the width. Compare it with count.
0B3B69 E1    1292** POP     HL
0B3B6A C0    1293** RET     NZ			; If we've not hit print width, then just return
0B3B6B 18    1294** JR      CRLF			; Otherwise output CRLF
0B3B6C DB 
             1295** ;
             1296** ; OUT - SEND CHARACTER OR KEYWORD
             1297** ;   Inputs: A = character (>=10, <128)
             1298** ;           A = Token (<10, >=128)
             1299** ;  Destroys: A,F
             1300** ;
0B3B6D FE    1301** OUT_:			CP      138			; Neat trick to do condition: If A >= 10 or < 128 then PE flag is set
0B3B6E 8A 
0B3B6F EA    1302** JP      PE,OUTCHR		; If so, then it's a character, so just output it
0B3B70 50 
0B3B71 3B 
0B3B72 0B 
             1303** ;
             1304** ; This bit looks up the character in the KEYWDS token table and expands it
             1305** ; Note the CP 138; this sets the overflow flag as follows:
             1306** ;
             1307** ; NB:
             1308** ;  1. Any 8-bit number between 128 and 255 is negative (two's complement) so 138 is -118, 128 = -128
             1309** ;  2. CP is effectively a SUB; sets the flags without affecting A
             1310** ;  3. The operation n - -118 ~ n + 118
             1311** ;
             1312** ; So:
             1313** ;  *   9 CP 138 ~    9 + 118 = 127 = no overflow : token
             1314** ;  *  10 CP 138 ~   10 + 118 = 128 =    overflow : character
             1315** ;  * 127 CP 138 ~  127 + 118 = 245 =    overflow : character
             1316** ;  * 128 CP 138 ~ -128 + 118 = -10 = no overflow : token
             1317** ;
0B3B73 C5    1318** PUSH    BC			; Preserve BC and HL
0B3B74 E5    1319** PUSH    HL
0B3B75 21    1320** LD      HL,KEYWDS		; The list of tokens and keywords
0B3B76 69 
0B3B77 33 
0B3B78 0B 
0B3B79 01    1321** LD      BC,KEYWDL		; The length of the keyword list
0B3B7A DF 
0B3B7B 02 
0B3B7C 00 
0B3B7D ED    1322** CPIR				; We can just do a straight CPIR as the token characters are unique in the list
0B3B7E B1 
             1323** ;							; At this point HL points to the next byte, the first character of the token
0B3B7F 7E    1324** TOKEN1:			LD      A,(HL)			; Fetch the character
0B3B80 23    1325** INC     HL			; Increment to the next byte in the token table
0B3B81 FE    1326** CP      138			; If A >= 10 or < 128, i.e. we've not hit the token code for the next token
0B3B82 8A 
0B3B83 F5    1327** PUSH    AF			; Then...
0B3B84 EC    1328** CALL    PE,OUTCHR		; Output the character...
0B3B85 50 
0B3B86 3B 
0B3B87 0B 
0B3B88 F1    1329** POP     AF			;
0B3B89 EA    1330** JP      PE,TOKEN1		; And loop to the next character
0B3B8A 7F 
0B3B8B 3B 
0B3B8C 0B 
0B3B8D E1    1331** POP     HL			; Done, so tidy up the stack and exit
0B3B8E C1    1332** POP     BC
0B3B8F C9    1333** RET
             1334** ;
             1335** ; FINDL - FIND PROGRAM LINE
             1336** ;   Inputs: HL = line number (binary)
             1337** ;  Outputs: HL addresses line (if found)
             1338** ;           DE = line number
             1339** ;           Z-flag set if found.
             1340** ; Destroys: A,B,C,D,E,H,L,F
             1341** ;
0B3B90 EB    1342** FINDL:			EX      DE,HL			; DE: Line number (binary)
0B3B91 2A    1343** LD      HL,(PAGE_)		; HL: Top of BASIC program area
0B3B92 14 
0B3B93 4F 
0B3B94 0B 
0B3B95 AF    1344** XOR     A               	;  A: 0
0B3B96 BE    1345** CP      (HL)			; Check for end of program marker
0B3B97 3C    1346** INC     A			;  A: 1
0B3B98 D0    1347** RET     NC			; Return with 1 if 0
0B3B99 AF    1348** XOR     A               	; Clear the carry flag
             1349** ;			LD      B,A			;  B: 0
0B3B9A 01    1350** LD	BC, 0			; BC: 0
0B3B9B 00 
0B3B9C 00 
0B3B9D 00 
             1351** ;
0B3B9E 4E    1352** FINDL1:			LD      C,(HL)			;  C: The line length
0B3B9F E5    1353** PUSH    HL			; Stack the current program counter
0B3BA0 23    1354** INC     HL			; Skip to the line number bytes
0B3BA1 7E    1355** LD      A,(HL)			; Fetch the line number (in binary) from the BASIC line in HL
0B3BA2 23    1356** INC     HL
0B3BA3 66    1357** LD      H,(HL)
0B3BA4 6F    1358** LD      L,A
0B3BA5 52    1359** SBC.S   HL,DE			; Compare with the line number we're searching for
0B3BA6 ED 
0B3BA7 52 
0B3BA8 E1    1360** POP     HL			; Get the current program counter
0B3BA9 D0    1361** RET     NC              	; Then return if found or past (Z flag will be set if line number matches)
0B3BAA 09    1362** ADD     HL,BC			; Skip to the next line (B was set to 0 before the loop was entered)
0B3BAB C3    1363** JP      FINDL1			; And loop
0B3BAC 9E 
0B3BAD 3B 
0B3BAE 0B 
             1364** ;
             1365** ; SETLIN - Search program for line containing address
             1366** ;          Update (LINENO)
             1367** ;   Inputs: Address in (ERRLIN)
             1368** ;  Outputs: Line number in HL and (LINENO)
             1369** ; Destroys: B,C,D,E,H,L,F
             1370** ;
0B3BAF 01    1371** SETLIN:			LD	BC, 0			; Zero BC for later
0B3BB0 00 
0B3BB1 00 
0B3BB2 00 
             1372** ;			LD      B, 0			; Zero B for later
0B3BB3 ED    1373** LD      DE, (ERRLIN)		; DE: Address of line
0B3BB4 5B 
0B3BB5 35 
0B3BB6 4F 
0B3BB6 0B   
0B3BB8 2A    1374** LD      HL, (PAGE_)		; HL: Start of user program area
0B3BB9 14 
0B3BBA 4F 
0B3BBB 0B 
0B3BBC B7    1375** OR      A			; Do a 24 bit compare without destroying HL
0B3BBD ED    1376** SBC     HL, DE			;  Z: DE = HL, NC: DE <= HL
0B3BBE 52 
0B3BBF 19    1377** ADD     HL, DE			;  C: DE > HL
0B3BC0 30    1378** JR      NC, SET3		; So skip, as the address is less than or equal to the top of program area
0B3BC1 1B 
             1379** ;
0B3BC2 4E    1380** SET1:			LD      C, (HL)			; Get the length of the line; zero indicates the end of the BASIC program
0B3BC3 0C    1381** INC     C			; This is a way to check for zero without using the accumulator
0B3BC4 0D    1382** DEC     C			; If it is zero, then...
0B3BC5 28    1383** JR      Z, SET3			; We've reached the end of the current BASIC program, not found the line
0B3BC6 16 
0B3BC7 09    1384** ADD     HL, BC			; Skip to the next line (we set B to 0 at the top of this subroutine)
0B3BC8 ED    1385** SBC     HL, DE			; Do a 24-bit compare; the previous ADD will have cleared the carry flag
0B3BC9 52 
0B3BCA 19    1386** ADD     HL, DE
0B3BCB 38    1387** JR      C, SET1			; Loop whilst DE (the address to search for) is > HL (the current line)
0B3BCC F5 
0B3BCD ED    1388** SBC     HL, BC			; We've found it, so back up to the beginning of the line
0B3BCE 42 
0B3BCF 23    1389** INC     HL			; Skip the length counter
0B3BD0 11    1390** LD	DE, 0			; Zero DE
0B3BD1 00 
0B3BD2 00 
0B3BD3 00 
0B3BD4 5E    1391** LD      E, (HL)          	; Fetch the line number
0B3BD5 23    1392** INC     HL
0B3BD6 56    1393** LD      D, (HL)
0B3BD7 EB    1394** EX      DE, HL			; HL: The line number
0B3BD8 22    1395** SET2:			LD      (LINENO), HL		; Store in the variable LINENO
0B3BD9 23 
0B3BDA 4F 
0B3BDB 0B 
0B3BDC C9    1396** RET
             1397** ;
0B3BDD 21    1398** SET3:			LD      HL, 0			; We've not found the line at this point so
0B3BDE 00 
0B3BDF 00 
0B3BE0 00 
0B3BE1 18    1399** JR      SET2			; Set LINENO to 0
0B3BE2 F5 
             1400** ;
             1401** ;SAYLN - PRINT " at line nnnn" MESSAGE.
             1402** ;  Outputs: Carry=0 if line number is zero.
             1403** ;           Carry=1 if line number is non-zero.
             1404** ; Destroys: A,B,C,D,E,H,L,F
             1405** ;
0B3BE3 2A    1406** SAYLN:			LD      HL,(LINENO)		; Get the LINENO sysvar
0B3BE4 23 
0B3BE5 4F 
0B3BE6 0B 
0B3BE7 7C    1407** LD      A,H			; If it is zero then
0B3BE8 B5    1408** OR      L
0B3BE9 C8    1409** RET     Z			; Don't need to do anything; return with F:C set to 0
0B3BEA CD    1410** CALL    TELL			; Output the error message
0B3BEB 91 
0B3BEC 3F 
0B3BED 0B 
0B3BEE 20    1411** DB    	" at line ", 0
0B3BEF 61 
0B3BF0 74 
0B3BF1 20 
0B3BF1 6C   
0B3BF2 69 
0B3BF3 6E 
0B3BF4 65 
0B3BF4 20   
0B3BF5 00 
0B3BF8 0E    1412** PBCDL:			LD      C,0			; C: Leading character (NUL)
0B3BF9 00 
0B3BFA 18    1413** JR      PBCD0			; Output the line number; return with F:C set to 1
0B3BFB 02 
             1414** ;
             1415** ; PBCD - PRINT NUMBER AS DECIMAL INTEGER.
             1416** ;   Inputs: HL = number (binary).
             1417** ;  Outputs: Carry = 1
             1418** ; Destroys: A,B,C,D,E,H,L,F
             1419** ;
0B3BFC 0E    1420** PBCD:			LD      C,' '			; C: Leading character (" ")
0B3BFD 20 
0B3BFE 06    1421** PBCD0:			LD      B,5			; Number of digits in result
0B3BFF 05 
0B3C00 11    1422** LD      DE,10000		; Start off with the 10,000 column
0B3C01 10 
0B3C02 27 
0B3C03 00 
0B3C04 AF    1423** PBCD1:			XOR     A			; Counter
0B3C05 ED    1424** PBCD2:			SBC     HL,DE			; Loop and count how many 10,000s we have
0B3C06 52 
0B3C07 3C    1425** INC     A
0B3C08 30    1426** JR      NC,PBCD2
0B3C09 FB 
0B3C0A 19    1427** ADD     HL,DE			; The loop overruns by one, so adjust here
0B3C0B 3D    1428** DEC     A			; A: Number of 10,000s
0B3C0C 28    1429** JR      Z,PBCD3			; If it is 0, then skip the next bit
0B3C0D 04 
0B3C0E CB    1430** SET     4,C			; C: Set to '0' ASCII (30h)
0B3C0F E1 
0B3C10 CB    1431** SET     5,C
0B3C11 E9 
0B3C12 B1    1432** PBCD3:			OR      C			; A is then an ASCII character, or 00h if we've not processed any non-zero digits yet
0B3C13 C4    1433** CALL    NZ,OUTCHR		; If it is not a leading NUL character then output it
0B3C14 50 
0B3C15 3B 
0B3C16 0B 
0B3C17 78    1434** LD      A,B			; If on first transition, skip this
0B3C18 FE    1435** CP      5			; TODO: Need to find out why
0B3C19 05 
0B3C1A 28    1436** JR      Z,PBCD4
0B3C1B 06 
0B3C1C 29    1437** ADD     HL,HL			; HL x  2 : We shift the number being tested left,
0B3C1D 54    1438** LD      D,H			;         : rather than shifting DE right
0B3C1E 5D    1439** LD      E,L			;         : This makes a lot of sense
0B3C1F 29    1440** ADD     HL,HL			; HL x  4
0B3C20 29    1441** ADD     HL,HL			; HL x  8
0B3C21 19    1442** ADD     HL,DE			; HL x 10
0B3C22 11    1443** PBCD4:			LD      DE,1000			; Set the column heading to 1,000s for subsequent runs
0B3C23 E8 
0B3C24 03 
0B3C25 00 
0B3C26 10    1444** DJNZ    PBCD1			; Loop until done
0B3C27 DC 
0B3C28 37    1445** SCF				; SCF set for SAYLN in this module
0B3C29 C9    1446** RET
             1447** ;
             1448** ; PUTVAR - CREATE VARIABLE AND INITIALISE TO ZERO.
             1449** ;   Inputs: HL, IY as returned from GETVAR (NZ).
             1450** ;  Outputs: As GETVAR.
             1451** ; Destroys: everything
             1452** ;
0B3C2A CD    1453** PUTVAR:			CALL    CREATE			; Create the variable
0B3C2B AF 
0B3C2C 3D 
0B3C2D 0B 
0B3C2E FD    1454** LD      A,(IY)			; Fetch the next character
0B3C2F 7E 
0B3C30 00 
0B3C31 FE    1455** CP      '('			; Check for bad use of array
0B3C32 28 
0B3C33 20    1456** JR      NZ,GETVZ        	; It's fine, so set the exit conditions
0B3C34 70 
0B3C35 3E    1457** ARRAY:			LD      A,14            	; Otherwise Error: 'Array'
0B3C36 0E 
0B3C37 C3    1458** ERROR3:			JP      ERROR_
0B3C38 61 
0B3C39 39 
0B3C3A 0B 
             1459** ;
             1460** ;GETVAR - GET LOCATION OF VARIABLE, RETURN IN HL & IX
             1461** ;   Inputs: IY addresses first character.
             1462** ;  Outputs: Carry set and NZ if illegal character.
             1463** ;           Z-flag set if variable found, then:
             1464** ;            A = variable type (0,4,5,128 or 129)
             1465** ;            HL = IX = variable pointer.
             1466** ;            IY updated
             1467** ;           If Z-flag & carry reset, then:
             1468** ;            HL, IY set for subsequent PUTVAR call.
             1469** ; Destroys: everything
             1470** ;
0B3C3B FD    1471** GETVAR:			LD      A,(IY)			; Get the first character
0B3C3C 7E 
0B3C3D 00 
0B3C3E FE    1472** CP      '$'			; Is it a string?
0B3C3F 24 
0B3C40 28    1473** JR      Z,GETV4			; Yes, so branch here
0B3C41 69 
0B3C42 FE    1474** CP      '!'			; Is it indirection (32-bit)?
0B3C43 21 
0B3C44 28    1475** JR      Z,GETV5			; Yes, so branch here
0B3C45 69 
0B3C46 FE    1476** CP      '?'			; Is it indirection (8-bit)?
0B3C47 3F 
0B3C48 28    1477** JR      Z,GETV6			; Yes, so branch here
0B3C49 69 
             1478** ;
0B3C4A CD    1479** CALL    LOCATE			; Locate the variable
0B3C4B 19 
0B3C4C 3D 
0B3C4D 0B 
0B3C4E C0    1480** RET     NZ			; And exit here if not found
             1481** ;
             1482** ; At this point:
             1483** ;  HL: Address of variable in memory
             1484** ;   D: Variable type (4 = Integer, 5 = Floating point, 129 = String)
             1485** ;
0B3C4F FD    1486** LD      A,(IY)			; Further checks
0B3C50 7E 
0B3C51 00 
0B3C52 FE    1487** CP      '('             	; Is it an array?
0B3C53 28 
0B3C54 20    1488** JR      NZ,GETVX        	; No, so exit
0B3C55 47 
             1489** ;
             1490** ; We are processing an array at this point
             1491** ;
0B3C56 D5    1492** PUSH    DE              	; Save the variable type (in D)
0B3C57 7E    1493** LD      A,(HL)          	; Fetch the number of dimensions
0B3C58 B7    1494** OR      A
0B3C59 28    1495** JR      Z,ARRAY			; If there are none, then Error: 'Array'
0B3C5A DA 
0B3C5B 23    1496** INC     HL			;
0B3C5C 11    1497** LD      DE,0            	; Accumulator
0B3C5D 00 
0B3C5E 00 
0B3C5F 00 
0B3C60 F5    1498** PUSH    AF
0B3C61 FD    1499** INC     IY              	; Skip "("
0B3C62 23 
0B3C63 18    1500** JR      GETV3
0B3C64 05 
             1501** ;
0B3C65 F5    1502** GETV2:			PUSH    AF
0B3C66 CD    1503** CALL    COMMA
0B3C67 23 
0B3C68 0C 
0B3C69 0B 
0B3C6A E5    1504** GETV3:			PUSH    HL
0B3C6B D5    1505** PUSH    DE
0B3C6C CD    1506** CALL    EXPRI			; Get the subscript
0B3C6D 0B 
0B3C6E 05 
0B3C6F 0B 
0B3C70 D9    1507** EXX
0B3C71 D1    1508** POP     DE
0B3C72 E3    1509** EX      (SP),HL
0B3C73 4E    1510** LD      C,(HL)
0B3C74 23    1511** INC     HL
0B3C75 46    1512** LD      B,(HL)
0B3C76 23    1513** INC     HL
0B3C77 E3    1514** EX      (SP),HL
0B3C78 EB    1515** EX      DE,HL
0B3C79 D5    1516** PUSH    DE
0B3C7A CD    1517** CALL    MUL16			; HL=HL*BC
0B3C7B 73 
0B3C7C 1A 
0B3C7D 0B 
0B3C7E D1    1518** POP     DE
0B3C7F 19    1519** ADD     HL,DE
0B3C80 EB    1520** EX      DE,HL
0B3C81 B7    1521** OR      A
0B3C82 ED    1522** SBC     HL,BC
0B3C83 42 
0B3C84 3E    1523** LD      A,15
0B3C85 0F 
0B3C86 30    1524** JR      NC,ERROR3		; Throw a "Subscript" error
0B3C87 AF 
0B3C88 E1    1525** POP     HL
0B3C89 F1    1526** POP     AF
0B3C8A 3D    1527** DEC     A               	; Dimension counter
0B3C8B 20    1528** JR      NZ,GETV2
0B3C8C D8 
0B3C8D CD    1529** CALL    BRAKET          	; Check for closing bracket
0B3C8E 30 
0B3C8F 0C 
0B3C90 0B 
0B3C91 F1    1530** POP     AF              	; Restore the type
0B3C92 E5    1531** PUSH    HL
0B3C93 CD    1532** CALL    X4OR5           	; DE=DE*n
0B3C94 66 
0B3C95 1A 
0B3C96 0B 
0B3C97 E1    1533** POP     HL
0B3C98 19    1534** ADD     HL,DE
0B3C99 57    1535** LD      D,A             	; The type
0B3C9A FD    1536** LD      A,(IY)
0B3C9B 7E 
0B3C9C 00 
0B3C9D FE    1537** GETVX:			CP      '?'
0B3C9E 3F 
0B3C9F 28    1538** JR      Z,GETV9
0B3CA0 1E 
0B3CA1 FE    1539** CP      '!'
0B3CA2 21 
0B3CA3 28    1540** JR      Z,GETV8
0B3CA4 16 
0B3CA5 E5    1541** GETVZ:			PUSH    HL              	; Set exit conditions
0B3CA6 DD    1542** POP     IX
0B3CA7 E1 
0B3CA8 7A    1543** LD      A,D
0B3CA9 BF    1544** CP      A
0B3CAA C9    1545** RET
             1546** ;
             1547** ; Process strings, unary & binary indirection:
             1548** ;
0B3CAB 3E    1549** GETV4:			LD      A,128           	; Static strings
0B3CAC 80 
0B3CAD 18    1550** JR      GETV7
0B3CAE 05 
             1551** ;
0B3CAF 3E    1552** GETV5:			LD      A,4             	; Unary 32-bit indirection
0B3CB0 04 
0B3CB1 18    1553** JR      GETV7
0B3CB2 01 
             1554** ;
0B3CB3 AF    1555** GETV6:			XOR     A               	; Unary 8-bit indirection
             1556** ;
0B3CB4 21    1557** GETV7:			LD      HL,0
0B3CB5 00 
0B3CB6 00 
0B3CB7 00 
0B3CB8 F5    1558** PUSH    AF
0B3CB9 18    1559** JR      GETV0
0B3CBA 24 
             1560** ;
0B3CBB 06    1561** GETV8:			LD      B,4             	; Binary 32-bt indirection
0B3CBC 04 
0B3CBD 18    1562** JR      GETVA
0B3CBE 02 
             1563** ;
0B3CBF 06    1564** GETV9:			LD      B,0             	; Binary 8-bit indirection
0B3CC0 00 
             1565** ;
0B3CC1 E5    1566** GETVA:			PUSH    HL
0B3CC2 DD    1567** POP     IX
0B3CC3 E1 
0B3CC4 7A    1568** LD      A,D            		; Fetch the variable type
0B3CC5 FE    1569** CP      129			; Is it a string?
0B3CC6 81 
0B3CC7 C8    1570** RET     Z               	; Yes, so exit here
0B3CC8 C5    1571** PUSH    BC
0B3CC9 CD    1572** CALL    LOADN           	; Left operand of the binary indirection (var?index or var!index)
0B3CCA 17 
0B3CCB 06 
0B3CCC 0B 
0B3CCD CD    1573** CALL    SFIX
0B3CCE 63 
0B3CCF 08 
0B3CD0 0B 
0B3CD1 7D    1574** LD	A,L
0B3CD2 D9    1575** EXX
0B3CD3 22    1576** LD	(R0+0),HL
0B3CD4 4A 
0B3CD5 4F 
0B3CD6 0B 
0B3CD7 32    1577** LD	(R0+2),A
0B3CD8 4C 
0B3CD9 4F 
0B3CDA 0B 
0B3CDB 2A    1578** LD	HL,(R0)			; HL: 24-bit address of the variable in memory
0B3CDC 4A 
0B3CDD 4F 
0B3CDE 0B 
             1579** ;
0B3CDF E5    1580** GETV0:			PUSH    HL			; HL will be 0 for a unary indirection, or the address of the variable for a binary indirection
0B3CE0 FD    1581** INC     IY
0B3CE1 23 
0B3CE2 CD    1582** CALL    ITEMI
0B3CE3 26 
0B3CE4 05 
0B3CE5 0B 
0B3CE6 7D    1583** LD	A,L			;  A: The MSB of the address
0B3CE7 D9    1584** EXX
0B3CE8 22    1585** LD	(R0+0),HL		; HL: The LSW of the address
0B3CE9 4A 
0B3CEA 4F 
0B3CEB 0B 
0B3CEC 32    1586** LD	(R0+2),A		; R0: L'HL or the 24-bit address
0B3CED 4C 
0B3CEE 4F 
0B3CEF 0B 
0B3CF0 D1    1587** POP     DE
0B3CF1 F1    1588** POP     AF
0B3CF2 2A    1589** LD	HL,(R0)			; HL: L'HL
0B3CF3 4A 
0B3CF4 4F 
0B3CF5 0B 
0B3CF6 19    1590** ADD     HL,DE
0B3CF7 E5    1591** PUSH    HL
0B3CF8 DD    1592** POP     IX
0B3CF9 E1 
0B3CFA BF    1593** CP      A
0B3CFB C9    1594** RET
             1595** ;
             1596** ;GETDEF - Find entry for FN or PROC in dynamic area.
             1597** ;   Inputs: IY addresses byte following "DEF" token.
             1598** ;  Outputs: Z flag set if found
             1599** ;           Carry set if neither FN or PROC first.
             1600** ;           If Z: HL points to entry
             1601** ;                 IY addresses delimiter
             1602** ; Destroys: A,D,E,H,L,IY,F
             1603** ;
0B3CFC FD    1604** GETDEF:			LD      A,(IY+1)		; Get the next character from the tokenised line (the start of the procedure name)
0B3CFD 7E 
0B3CFE 01 
0B3CFF CD    1605** CALL    RANGE1			; Is it in range: "0" to "9", "A" to "Z", "a' to "z", "@", "_" or "`"?
0B3D00 7C 
0B3D01 3E 
0B3D02 0B 
0B3D03 D8    1606** RET     C			; No so return with C set
0B3D04 FD    1607** LD      A,(IY)			; Fetch the current character from the tokenised line
0B3D05 7E 
0B3D06 00 
0B3D07 21    1608** LD      HL,FNPTR		; HL: Address of the dynamic function pointer in ram.asm
0B3D08 0E 
0B3D09 4F 
0B3D0A 0B 
0B3D0B FE    1609** CP      FN			; Is it the token FN?
0B3D0C A4 
0B3D0D 28    1610** JR      Z,LOC2			; Yes, so skip to LOC2 with that pointer to find a match
0B3D0E 4A 
0B3D0F 21    1611** LD      HL,PROPTR		; HL: Address of the dynamic procedure pointer in ram.asm
0B3D10 11 
0B3D11 4F 
0B3D12 0B 
0B3D13 FE    1612** CP      PROC			; Is it the token PROC?
0B3D14 F2 
0B3D15 28    1613** JR      Z,LOC2			; Yes, so skip to LOC2 with that pointer to find a match
0B3D16 42 
0B3D17 37    1614** SCF				; No, so just return with C set
0B3D18 C9    1615** RET
             1616** ;
             1617** ; LOCATE - Try to locate variable name in static or dynamic variables.
             1618** ; If illegal first character return carry, non-zero.
             1619** ; If found, return no-carry, zero.
             1620** ; If not found, return no-carry, non-zero.
             1621** ;   Inputs: IY=Addresses first character of name.
             1622** ;            A=(IY)
             1623** ;  Outputs:  F=Z set if found, then:
             1624** ;           IY=addresses terminator
             1625** ;           HL=addresses location of variable
             1626** ;            D=type of variable: 4 = integer
             1627** ;                                5 = floating point
             1628** ;                              129 = string
             1629** ; Destroys: A,D,E,H,L,IY,F
             1630** ;
             1631** ; Variable names can start with any letter of the alphabet (upper or lower case), underscore (_), or the grave accent (`)
             1632** ; They can contain any alphanumeric character and underscore (_)
             1633** ; String variables are postfixed with the dollar ($) character
             1634** ; Integer variables are postfixed with the percent (%) character
             1635** ; Static integer variables are named @%, A% to Z%
             1636** ; All other variables are dynamic
             1637** ;
0B3D19 D6    1638** LOCATE:			SUB     '@'			; Check for valid range
0B3D1A 40 
0B3D1B D8    1639** RET     C			; First character not "@", "A" to "Z" or "a" to "z", so not a variable
0B3D1C 21    1640** LD      HL, 0			; Clear HL
0B3D1D 00 
0B3D1E 00 
0B3D1F 00 
0B3D20 FE    1641** CP      'Z'-'@'+1		; Check for static ("@", "A" to "Z"); if it is not static...
0B3D21 1B 
0B3D22 30    1642** JR      NC,LOC0         	; Then branch here
0B3D23 1E 
0B3D24 6F    1643** LD	L, A			; HL = A
0B3D25 FD    1644** LD      A,(IY+1)        	; Check the 2nd character
0B3D26 7E 
0B3D27 01 
0B3D28 FE    1645** CP      '%'			; If not "%" then it is not static...
0B3D29 25 
0B3D2A 20    1646** JR      NZ,LOC1         	; Branch here
0B3D2B 21 
0B3D2C FD    1647** LD      A,(IY+2)		; Check the 3rd character
0B3D2D 7E 
0B3D2E 02 
0B3D2F FE    1648** CP      '('			; If it is "(" (array) then it is not static...
0B3D30 28 
0B3D31 28    1649** JR      Z,LOC1          	; Branch here
0B3D32 1A 
             1650** ;
             1651** ; At this point we're dealing with a static variable
             1652** ;
0B3D33 29    1653** ADD     HL,HL			; HL: Variable index * 4
0B3D34 29    1654** ADD	HL,HL
0B3D35 11    1655** LD      DE,STAVAR       	; The static variable area in memory
0B3D36 00 
0B3D37 4E 
0B3D38 0B 
0B3D39 19    1656** ADD     HL,DE			; HL: The address of the static variable
0B3D3A FD    1657** INC     IY			; Skip the program pointer past the static variable name
0B3D3B 23 
0B3D3C FD    1658** INC     IY
0B3D3D 23 
0B3D3E 16    1659** LD      D,4             	; Set the type to be integer
0B3D3F 04 
0B3D40 AF    1660** XOR     A			; Set the Z flag
0B3D41 C9    1661** RET
             1662** ;
             1663** ; At this point it's potentially a dynamic variable, just need to do a few more checks
             1664** ;
0B3D42 FE    1665** LOC0:			CP      '_'-'@'			; Check the first character is in
0B3D43 1F 
0B3D44 D8    1666** RET     C			; the range "_" to
0B3D45 FE    1667** CP      'z'-'@'+1		; "z" (lowercase characters only)
0B3D46 3B 
0B3D47 3F    1668** CCF				; If it is not in range then
0B3D48 3D    1669** DEC     A               	; Set NZ flag and
0B3D49 D8    1670** RET     C			; Exit here
0B3D4A D6    1671** SUB     3			; This brings it in the range of 27 upwards (need to confirm)
0B3D4B 03 
0B3D4C 6F    1672** LD	L, A			; HL = A
             1673** ;
             1674** ; Yes, it's definitely a dynamic variable at this point...
             1675** ;
0B3D4D 7D    1676** LOC1:			LD	A, L			; Fetch variable index
0B3D4E 87    1677** ADD	A, A			; x 2
0B3D4F 85    1678** ADD	A, L			; x 3
0B3D50 D6    1679** SUB	3			; Subtract 2 TODO: Should be 3
0B3D51 03 
0B3D52 6F    1680** LD	L, A
0B3D53 11    1681** LD      DE, DYNVAR       	; The dynamic variable storage
0B3D54 6C 
0B3D55 4E 
0B3D56 0B 
0B3D57 D8    1682** RET	C			; Bounds check to trap for variable '@'
0B3D58 19    1683** ADD     HL, DE			; HL: Address of first entry
             1684** ;
             1685** ; Loop through the linked list of variables to find a match
             1686** ;
0B3D59 ED    1687** LOC2:			LD	DE, (HL)		; Fetch the original pointer
0B3D5A 17 
0B3D5B E5    1688** PUSH	HL			; Need to preserve HL for LOC6
0B3D5C AF    1689** XOR	A			; Reset carry flag
0B3D5D ED    1690** SBC	HL, HL			; Set HL to 0
0B3D5E 62 
0B3D5F ED    1691** SBC	HL, DE			; Compare with 0
0B3D60 52 
0B3D61 E1    1692** POP	HL			; Restore the original pointer
0B3D62 28    1693** JR	Z, LOC6			; If the pointer in DE is zero, the variable is undefined at this point
0B3D63 49 
             1694** ; LD	HL, DE			; Make a copy of this pointer in HL
0B3D64 D5    1695** push de
0B3D65 E1    1696** pop hl ; how was that even possible?
0B3D66 23    1697** INC     HL              	; Skip the link (24-bits)
0B3D67 23    1698** INC     HL
0B3D68 23    1699** INC	HL			; HL: Address of the variable name in DYNVARS
0B3D69 FD    1700** PUSH    IY			; IY: Address of the variable name in the program
0B3D6A E5 
             1701** ;
0B3D6B 7E    1702** LOC3:			LD      A,(HL)         		; Compare
0B3D6C 23    1703** INC     HL
0B3D6D FD    1704** INC     IY
0B3D6E 23 
0B3D6F FD    1705** CP      (IY)
0B3D70 BE 
0B3D71 00 
0B3D72 28    1706** JR      Z, LOC3			; Keep looping whilst we've got a match...
0B3D73 F7 
0B3D74 B7    1707** OR      A               	; Have we hit a terminator?
0B3D75 28    1708** JR      Z,LOC5          	; Yes, so maybe we've found a variable
0B3D76 07 
             1709** ;
0B3D77 FD    1710** LOC4:			POP     IY			; Restore the pointer in the program
0B3D78 E1 
0B3D79 EB    1711** EX      DE, HL			; HL: New pointer in DYNVARS
0B3D7A C3    1712** JP      LOC2            	; Loop round and try again
0B3D7B 59 
0B3D7C 3D 
0B3D7D 0B 
             1713** ;
             1714** ; We might have located a variable at this point, just need to do a few more tests
             1715** ;
0B3D7E FD    1716** LOC5:			DEC     IY
0B3D7F 2B 
0B3D80 FD    1717** LD      A,(IY)
0B3D81 7E 
0B3D82 00 
0B3D83 FE    1718** CP      '('
0B3D84 28 
0B3D85 28    1719** JR      Z,LOC5A         	; FOUND
0B3D86 15 
0B3D87 FD    1720** INC     IY
0B3D88 23 
0B3D89 CD    1721** CALL    RANGE
0B3D8A 70 
0B3D8B 3E 
0B3D8C 0B 
0B3D8D 38    1722** JR      C,LOC5A         	; FOUND
0B3D8E 0D 
0B3D8F FE    1723** CP      '('
0B3D90 28 
0B3D91 28    1724** JR      Z,LOC4          	; KEEP LOOKING
0B3D92 E4 
0B3D93 FD    1725** LD      A,(IY-1)
0B3D94 7E 
0B3D95 FF 
0B3D96 CD    1726** CALL    RANGE1
0B3D97 7C 
0B3D98 3E 
0B3D99 0B 
0B3D9A 30    1727** JR      NC,LOC4         	; KEEP LOOKING
0B3D9B DB 
0B3D9C D1    1728** LOC5A:			POP     DE
0B3D9D FD    1729** TYPE_:			LD      A,(IY-1)		; Check the string type postfix
0B3D9E 7E 
0B3D9F FF 
0B3DA0 FE    1730** CP      '$'			; Is it a string?
0B3DA1 24 
0B3DA2 16    1731** LD      D,129			; Yes, so return D = 129
0B3DA3 81 
0B3DA4 C8    1732** RET     Z
0B3DA5 FE    1733** CP      '%'			; Is it an integer?
0B3DA6 25 
0B3DA7 16    1734** LD      D,4			; Yes, so return D = 4
0B3DA8 04 
0B3DA9 C8    1735** RET     Z
0B3DAA 14    1736** INC     D			; At this point it must be a float
0B3DAB BF    1737** CP      A			; Set the flags
0B3DAC C9    1738** RET
             1739** ;
             1740** ; The variable is undefined at this point; HL will be zero
             1741** ;
0B3DAD 3C    1742** LOC6:			INC     A               	; Set NZ flag
0B3DAE C9    1743** RET
             1744** ;
             1745** ; CREATE - CREATE NEW ENTRY, INITIALISE TO ZERO.
             1746** ;   Inputs: HL, IY as returned from LOCATE (NZ).
             1747** ;  Outputs: As LOCATE, GETDEF.
             1748** ; Destroys: As LOCATE, GETDEF.
             1749** ;
0B3DAF AF    1750** CREATE:			XOR     A
0B3DB0 ED    1751** LD      DE,(FREE)		; Get the last byte of available RAM
0B3DB1 5B 
0B3DB2 1D 
0B3DB3 4F 
0B3DB3 0B   
0B3DB5 ED    1752** LD	(HL), DE		; Store
0B3DB6 1F 
0B3DB7 EB    1753** EX      DE,HL
0B3DB8 77    1754** LD      (HL),A			; Clear the link of the new entity
0B3DB9 23    1755** INC     HL
0B3DBA 77    1756** LD      (HL),A
0B3DBB 23    1757** INC     HL
0B3DBC 77    1758** LD      (HL),A
0B3DBD 23    1759** INC     HL
0B3DBE FD    1760** LOC7:			INC     IY
0B3DBF 23 
0B3DC0 CD    1761** CALL    RANGE           	; END OF VARIABLE?
0B3DC1 70 
0B3DC2 3E 
0B3DC3 0B 
0B3DC4 38    1762** JR      C,LOC8
0B3DC5 15 
0B3DC6 77    1763** LD      (HL),A
0B3DC7 23    1764** INC     HL
0B3DC8 CD    1765** CALL    RANGE1
0B3DC9 7C 
0B3DCA 3E 
0B3DCB 0B 
0B3DCC 30    1766** JR      NC,LOC7
0B3DCD F0 
0B3DCE FE    1767** CP      '('
0B3DCF 28 
0B3DD0 28    1768** JR      Z,LOC8
0B3DD1 09 
0B3DD2 FD    1769** LD      A,(IY+1)
0B3DD3 7E 
0B3DD4 01 
0B3DD5 FE    1770** CP      '('
0B3DD6 28 
0B3DD7 28    1771** JR      Z,LOC7
0B3DD8 E5 
0B3DD9 FD    1772** INC     IY
0B3DDA 23 
0B3DDB 36    1773** LOC8:			LD      (HL),0          	; TERMINATOR
0B3DDC 00 
0B3DDD 23    1774** INC     HL
0B3DDE E5    1775** PUSH    HL
0B3DDF CD    1776** CALL    TYPE_			; Get the variable type in D
0B3DE0 9D 
0B3DE1 3D 
0B3DE2 0B 
0B3DE3 3E    1777** LD      A,4			; If it is an integer then it takes up 4 bytes
0B3DE4 04 
0B3DE5 BA    1778** CP      D
0B3DE6 28    1779** JR      Z,LOC9			; So skip the next bit
0B3DE7 01 
0B3DE8 3C    1780** INC     A			; Strings and floats take up 5 bytes (NB: Strings take up 4 in BBC BASIC for Z80)
0B3DE9 36    1781** LOC9:			LD      (HL),0          	; Initialise the memory to zero
0B3DEA 00 
0B3DEB 23    1782** INC     HL
0B3DEC 3D    1783** DEC     A
0B3DED 20    1784** JR      NZ,LOC9
0B3DEE FA 
0B3DEF 22    1785** LD      (FREE),HL		; Adjust the stack
0B3DF0 1D 
0B3DF1 4F 
0B3DF2 0B 
0B3DF3 CD    1786** CALL    CHECK			; Check whether we are out of space
0B3DF4 50 
0B3DF5 18 
0B3DF6 0B 
0B3DF7 E1    1787** POP     HL
0B3DF8 AF    1788** XOR     A
0B3DF9 C9    1789** RET
             1790** ;
             1791** ; LINNUM - GET LINE NUMBER FROM TEXT STRING
             1792** ;   Inputs: IY = Text Pointer
             1793** ;  Outputs: HL = Line number (zero if none)
             1794** ;           IY updated
             1795** ; Destroys: A,D,E,H,L,IY,F
             1796** ;
             1797** ; This bit of code performs a BASE 10 shift to build up the number
             1798** ; So if the string passed is "345", the algorithm does this:
             1799** ;
             1800** ;    HL : Digit	: Operation
             1801** ; ----- : ----- : ---------
             1802** ; 00000 :	:
             1803** ; 00003 :     3	: Multiply HL  (0) by 10   (0) and add 3   (3)
             1804** ; 00034 :     4 : Multiply HL  (3) by 10  (30) and add 4  (34)
             1805** ; 00345 :     5	: Multiply HL (34) by 10 (340) and add 5 (345)
             1806** ;
             1807** ; The multiply by 10 is done by an unrolled shift and add loop
             1808** ;
0B3DFA CD    1809** LINNUM:			CALL    NXT			; Skip whitespace to the first character
0B3DFB 71 
0B3DFC 0C 
0B3DFD 0B 
0B3DFE 40    1810** LD.SIS  HL,0			; The running total
0B3DFF 21 
0B3E00 00 
0B3E01 00 
0B3E02 FD    1811** LINNM1:			LD      A,(IY)			; A: Fetch the digit to add in
0B3E03 7E 
0B3E04 00 
0B3E05 D6    1812** SUB     '0'			; Sub ASCII '0' to make a binary number (0-9)
0B3E06 30 
0B3E07 D8    1813** RET     C			; And return if less than 0
0B3E08 FE    1814** CP      10			; Or greater than or equal to 10
0B3E09 0A 
0B3E0A D0    1815** RET     NC			; As we've hit a non-numeric character (end of number) at this point
0B3E0B FD    1816** INC     IY			; Increment the string pointer
0B3E0C 23 
0B3E0D 54    1817** LD      D,H			; This next block multiplys HL by 10, shifting the result left in BASE 10
0B3E0E 5D    1818** LD      E,L			; Store the original number in DE
0B3E0F 52    1819** ADD.S   HL,HL           	; *2
0B3E10 29 
0B3E11 38    1820** JR      C,TOOBIG		; At each point, error if > 65535 (carry flag set)
0B3E12 13 
0B3E13 52    1821** ADD.S   HL,HL           	; *4S
0B3E14 29 
0B3E15 38    1822** JR      C,TOOBIG
0B3E16 0F 
0B3E17 52    1823** ADD.S   HL,DE           	; *5
0B3E18 19 
0B3E19 38    1824** JR      C,TOOBIG
0B3E1A 0B 
0B3E1B 52    1825** ADD.S   HL,HL           	; *10
0B3E1C 29 
0B3E1D 38    1826** JR      C,TOOBIG
0B3E1E 07 
0B3E1F 5F    1827** LD      E,A			; A->DE: the digit to add in
0B3E20 16    1828** LD      D,0
0B3E21 00 
0B3E22 52    1829** ADD.S   HL,DE           	; Add in the digit to the running total
0B3E23 19 
0B3E24 30    1830** JR      NC,LINNM1       	; And if it is still <= 65535, loop
0B3E25 DC 
             1831** ;
0B3E26 3E    1832** TOOBIG:			LD      A,20
0B3E27 14 
0B3E28 C3    1833** JP      ERROR_           	; Error: "Too big"
0B3E29 61 
0B3E2A 39 
0B3E2B 0B 
             1834** ;
             1835** ; PAIR - GET PAIR OF LINE NUMBERS FOR RENUMBER/AUTO.
             1836** ;   Inputs: IY = text pointer
             1837** ;  Outputs: HL = first number (10 by default)
             1838** ;           BC = second number (10 by default)
             1839** ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IY,F
             1840** ;
0B3E2C CD    1841** PAIR:			CALL    LINNUM          	; Parse the first line number
0B3E2D FA 
0B3E2E 3D 
0B3E2F 0B 
0B3E30 7C    1842** LD      A,H			; If it is not zero, then...
0B3E31 B5    1843** OR      L
0B3E32 20    1844** JR      NZ,PAIR1		; Skip...
0B3E33 02 
0B3E34 2E    1845** LD      L,10			; HL: the default value (10)
0B3E35 0A 
             1846** ;
0B3E36 CD    1847** PAIR1:			CALL    TERMQ			; Check for ELSE, : or CR
0B3E37 7B 
0B3E38 19 
0B3E39 0B 
0B3E3A FD    1848** INC     IY			; Skip to next character
0B3E3B 23 
0B3E3C E5    1849** PUSH    HL			; Stack the first line number
0B3E3D 21    1850** LD      HL,10			; HL: the second default (10)
0B3E3E 0A 
0B3E3F 00 
0B3E40 00 
0B3E41 C4    1851** CALL    NZ,LINNUM       	; Parse the second line number
0B3E42 FA 
0B3E43 3D 
0B3E44 0B 
0B3E45 E3    1852** EX      (SP),HL			; HL: The first line number (off the stack)
0B3E46 C1    1853** POP     BC			; BC: Second line number
0B3E47 78    1854** LD      A,B			; If the second line number is not zero then...
0B3E48 B1    1855** OR      C			; We're good...
0B3E49 C0    1856** RET     NZ			; Exit, otherwise...
0B3E4A CD    1857** CALL    EXTERR			; Throw error: "Silly"
0B3E4B 78 
0B3E4C 39 
0B3E4D 0B 
0B3E4E 53    1858** DB    	"Silly", 0
0B3E4F 69 
0B3E50 6C 
0B3E51 6C 
0B3E51 79   
0B3E52 00 
             1859** ;
             1860** ; DLPAIR - GET PAIR OF LINE NUMBERS FOR DELETE/LIST.
             1861** ;   Inputs: IY = text pointer
             1862** ;  Outputs: HL = points to program text
             1863** ;           BC = second number (0 by default)
             1864** ; Destroys: A,B,C,D,E,H,L,IY,F
             1865** ;
0B3E54 CD    1866** DLPAIR:			CALL    LINNUM			; Parse the first line number
0B3E55 FA 
0B3E56 3D 
0B3E57 0B 
0B3E58 E5    1867** PUSH    HL			; Stack it
0B3E59 CD    1868** CALL    TERMQ			; Check for ELSE, : or CR
0B3E5A 7B 
0B3E5B 19 
0B3E5C 0B 
0B3E5D 28    1869** JR      Z,DLP1			; And exit if so
0B3E5E 0A 
0B3E5F FE    1870** CP      TIF			; Is the token IF?
0B3E60 E7 
0B3E61 28    1871** JR      Z,DLP1			; Yes, so skip the next bit...
0B3E62 06 
0B3E63 FD    1872** INC     IY			; Otherwise...
0B3E64 23 
0B3E65 CD    1873** CALL    LINNUM			; Fetch the second line number
0B3E66 FA 
0B3E67 3D 
0B3E68 0B 
0B3E69 E3    1874** DLP1:			EX      (SP),HL			; HL: The first line number (off the stack)
0B3E6A CD    1875** CALL    FINDL			; HL: Find the address of the line
0B3E6B 90 
0B3E6C 3B 
0B3E6D 0B 
0B3E6E C1    1876** POP     BC			; BC: The second number
0B3E6F C9    1877** RET
             1878** ;
             1879** ; TEST FOR VALID CHARACTER IN VARIABLE NAME:
             1880** ;   Inputs: IY addresses character
             1881** ;  Outputs: Carry set if out-of-range.
             1882** ; Destroys: A,F
             1883** ;
             1884** ; It is called here to check the following
             1885** ; In range: "$", "%" and "("
             1886** ;   Plus all characters in RANGE1 and RANGE2
             1887** ;
0B3E70 FD    1888** RANGE:			LD      A,(IY)			; Fetch the character
0B3E71 7E 
0B3E72 00 
0B3E73 FE    1889** CP      '$'			; Postfix for string variable is valid
0B3E74 24 
0B3E75 C8    1890** RET     Z
0B3E76 FE    1891** CP      '%'			; Postfix for integer variable is valid
0B3E77 25 
0B3E78 C8    1892** RET     Z
0B3E79 FE    1893** CP      '('			; Postfix for array is valid
0B3E7A 28 
0B3E7B C8    1894** RET     Z
             1895** ;
             1896** ; It is called here to check the following
             1897** ; In range: "0" to "9" and "@"
             1898** ;   Plus all characters in RANGE2
             1899** ;
0B3E7C FE    1900** RANGE1:			CP      '0'			; If it is between '0'...
0B3E7D 30 
0B3E7E D8    1901** RET     C
0B3E7F FE    1902** CP      '9'+1			; And '9'...
0B3E80 3A 
0B3E81 3F    1903** CCF
0B3E82 D0    1904** RET     NC			; Then it is valid
0B3E83 FE    1905** CP      '@'             	; The prefix @ is valid (@% controls numeric print formatting - v2.4)
0B3E84 40 
0B3E85 C8    1906** RET     Z
             1907** ;
             1908** ; It is called here to check the following
             1909** ; In range: "A" to "Z", "a' to "z", "_" and "`"
             1910** ;
0B3E86 FE    1911** RANGE2:			CP      'A'			; If it is between 'A'...
0B3E87 41 
0B3E88 D8    1912** RET     C
0B3E89 FE    1913** CP      'Z'+1			; And 'Z'...
0B3E8A 5B 
0B3E8B 3F    1914** CCF
0B3E8C D0    1915** RET     NC			; Then it is valid
0B3E8D FE    1916** CP      '_'			; If it is underscore, grave, or between 'a'
0B3E8E 5F 
0B3E8F D8    1917** RET     C
0B3E90 FE    1918** CP      'z'+1			; And 'z'
0B3E91 7B 
0B3E92 3F    1919** CCF				; Then it is valid
0B3E93 C9    1920** RET
             1921** ;
             1922** ; Throw a 'LINE space' error (line too long)
             1923** ; This is called from LEXAN
             1924** ;
0B3E94 AF    1925** SPACE_: 		XOR     A
0B3E95 CD    1926** CALL    EXTERR          	; "LINE space"
0B3E96 78 
0B3E97 39 
0B3E98 0B 
0B3E99 86    1927** DB    	LINE_MN_, 8, 0
0B3E9A 08 
0B3E9B 00 
             1928** ;
             1929** ; LEXAN - LEXICAL ANALYSIS.
             1930** ;  Bit 0,C: 1=left, 0=right
             1931** ;  Bit 2,C: 1=in BINARY
             1932** ;  Bit 3,C: 1=in HEX
             1933** ;  Bit 4,C: 1=accept line number
             1934** ;  Bit 5,C: 1=in variable, FN, PROC
             1935** ;  Bit 6,C: 1=in REM, DATA, *
             1936** ;  Bit 7,C: 1=in quotes
             1937** ;   Inputs: IY addresses source string
             1938** ;           DE addresses destination string (must be page boundary)
             1939** ;            C sets initial mode
             1940** ;  Outputs: DE, IY updated
             1941** ;            A holds carriage return
             1942** ;
0B3E9C 12    1943** LEXAN1:			LD      (DE),A          	; Transfer to buffer
0B3E9D 13    1944** INC     DE              	; Increment the pointers
0B3E9E FD    1945** INC     IY			; And fall through to the main function
0B3E9F 23 
             1946** ;
             1947** ; This is the main entry point
             1948** ;
0B3EA0 7B    1949** LEXAN2:			LD      A,E             	; Destination buffer on page boundary, so E can be used as length
0B3EA1 FE    1950** CP      252             	; If it is >= 252 bytes, then...
0B3EA2 FC 
0B3EA3 30    1951** JR      NC,SPACE_        	; Throw a 'LINE space' error (line too long)
0B3EA4 EF 
0B3EA5 FD    1952** LD      A,(IY)			; Fetch character from source string
0B3EA6 7E 
0B3EA7 00 
0B3EA8 FE    1953** CP      CR			; If it is a CR
0B3EA9 0D 
0B3EAA C8    1954** RET     Z               	; Then it is end of line; we're done parsing
0B3EAB CD    1955** CALL    RANGE1			; Is it alphanumeric, '@', '_' or '`'
0B3EAC 7C 
0B3EAD 3E 
0B3EAE 0B 
0B3EAF 30    1956** JR      NC,LEXAN3		; Yes, so skip
0B3EB0 06 
0B3EB1 CB    1957** RES     5,C             	; FLAG: NOT IN VARIABLE
0B3EB2 A9 
0B3EB3 CB    1958** RES     3,C             	; FLAG: NOT IN HEX
0B3EB4 99 
0B3EB5 CB    1959** RES	2,C			; FLAG: NOT IN BINARY
0B3EB6 91 
             1960** ;
0B3EB7 FE    1961** LEXAN3:			CP      ' '			; Ignore spaces
0B3EB8 20 
0B3EB9 28    1962** JR      Z,LEXAN1
0B3EBA E1 
0B3EBB FE    1963** CP      ','			; Ignore commas
0B3EBC 2C 
0B3EBD 28    1964** JR      Z,LEXAN1
0B3EBE DD 
0B3EBF FE    1965** CP	'2'			; If less than '2'
0B3EC0 32 
0B3EC1 30    1966** JR	NC, @F			; No, so skip
0B3EC2 02 
0B3EC3 CB    1967** RES	2,C			; FLAG: NOT IN BINARY
0B3EC4 91 
0B3EC5 FE    1968** @@:			CP      'G'			; If less then 'G'
0B3EC6 47 
0B3EC7 38    1969** JR      C,LEXAN4		; Yes, so skip
0B3EC8 02 
0B3EC9 CB    1970** RES     3,C             	; FLAG: NOT IN HEX
0B3ECA 99 
             1971** ;
0B3ECB FE    1972** LEXAN4:			CP      34			; Is it a quote character?
0B3ECC 22 
0B3ECD 20    1973** JR      NZ,LEXAN5		; No, so skip
0B3ECE 05 
0B3ECF CB    1974** RL      C			; Toggle bit 7 of C by shifting it into carry flag
0B3ED0 11 
0B3ED1 3F    1975** CCF                     	; Toggle the carry
0B3ED2 CB    1976** RR      C			; And then shifting it back into bit 7 of C
0B3ED3 19 
             1977** ;
0B3ED4 CB    1978** LEXAN5:			BIT     4,C			; Accept line number?
0B3ED5 61 
0B3ED6 28    1979** JR      Z,LEXAN6		; No, so skip
0B3ED7 12 
0B3ED8 CB    1980** RES     4,C			; FLAG: DON'T ACCEPT LINE NUMBER
0B3ED9 A1 
0B3EDA C5    1981** PUSH    BC
0B3EDB D5    1982** PUSH    DE
0B3EDC CD    1983** CALL    LINNUM         		; Parse the line number to HL
0B3EDD FA 
0B3EDE 3D 
0B3EDF 0B 
0B3EE0 D1    1984** POP     DE
0B3EE1 C1    1985** POP     BC
0B3EE2 7C    1986** LD      A,H			; If it is not zero
0B3EE3 B5    1987** OR      L
0B3EE4 C4    1988** CALL    NZ,ENCODE       	; Then encode the line number HL to the destination (DE)
0B3EE5 5D 
0B3EE6 3F 
0B3EE7 0B 
0B3EE8 18    1989** JR      LEXAN2          	; And loop
0B3EE9 B6 
             1990** ;
0B3EEA 0D    1991** LEXAN6:			DEC     C			; Check for C=1 (LEFT)
0B3EEB 28    1992** JR      Z,LEXAN7        	; If so, skip
0B3EEC 0A 
0B3EED 0C    1993** INC     C			; Otherwise restore C
0B3EEE 20    1994** JR      NZ,LEXAN1		; If C was 0 (RIGHT) then...
0B3EEF AC 
0B3EF0 B7    1995** OR      A			; Set the flags based on the character
0B3EF1 F4    1996** CALL    P,LEX           	; Tokenise if A < 128
0B3EF2 C8 
0B3EF3 39 
0B3EF4 0B 
0B3EF5 18    1997** JR      LEXAN8			; And skip
0B3EF6 13 
             1998** ;
             1999** ; Processing the LEFT hand side here
             2000** ;
0B3EF7 FE    2001** LEXAN7:			CP      '*'			; Is it a '*' (for star commands)
0B3EF8 2A 
0B3EF9 28    2002** JR      Z,LEXAN9		; Yes, so skip to quit tokenising
0B3EFA 17 
0B3EFB B7    2003** OR      A			; Set the flags based on the character
0B3EFC F4    2004** CALL    P,LEX           	; Tokenise if A < 128
0B3EFD C8 
0B3EFE 39 
0B3EFF 0B 
             2005** ;
             2006** ; This bit of code checks if the tokens are one of the pseudo-variables PTR, PAGE, TIME, LOMEM, HIMEM
             2007** ; These tokens are duplicate in the table with a GET version and a SET version offset by the define OFFSET (40h)
             2008** ; Examples:
             2009** ;   LET A% = PAGE : REM This is the GET version
             2010** ;   PAGE = 40000  : REM This is the SET version
             2011** ;
0B3F00 FE    2012** CP      TOKLO			; TOKLO is 8Fh
0B3F01 8F 
0B3F02 38    2013** JR      C,LEXAN8		; If A is < 8Fh then skip to LEX8
0B3F03 06 
0B3F04 FE    2014** CP      TOKHI+1			; TOKHI is 93h
0B3F05 94 
0B3F06 30    2015** JR      NC,LEXAN8		; If A is >= 94h then skip to LEX8
0B3F07 02 
0B3F08 C6    2016** ADD     A,OFFSET       		; Add OFFSET (40h) to make the token the SET version
0B3F09 40 
             2017** ;
0B3F0A FE    2018** LEXAN8:			CP      REM			; If the token is REM
0B3F0B F4 
0B3F0C 28    2019** JR      Z,LEXAN9		; Then stop tokenising
0B3F0D 04 
0B3F0E FE    2020** CP      DATA_MN_			; If it is not DATA then
0B3F0F DC 
0B3F10 20    2021** JR      NZ,LEXANA		; Skip
0B3F11 02 
0B3F12 CB    2022** LEXAN9:			SET     6,C             	; FLAG: STOP TOKENISING
0B3F13 F1 
             2023** ;
0B3F14 FE    2024** LEXANA:			CP      FN			; If the token is FN
0B3F15 A4 
0B3F16 28    2025** JR      Z,LEXANB
0B3F17 0A 
0B3F18 FE    2026** CP      PROC			; Or the token is PROC
0B3F19 F2 
0B3F1A 28    2027** JR      Z,LEXANB		; Then jump to here
0B3F1B 06 
0B3F1C CD    2028** CALL    RANGE2			; Otherwise check the input is alphanumeric, "_" or "`"
0B3F1D 86 
0B3F1E 3E 
0B3F1F 0B 
0B3F20 38    2029** JR      C,LEXANC		; Jump here if out of range
0B3F21 02 
             2030** ;
0B3F22 CB    2031** LEXANB:			SET     5,C             	; FLAG: IN VARIABLE/FN/PROC
0B3F23 E9 
0B3F24 FE    2032** LEXANC:			CP      '&'			; Check for hex prefix
0B3F25 26 
0B3F26 20    2033** JR      NZ,LEXAND		; If not, skip
0B3F27 02 
0B3F28 CB    2034** SET     3,C             	; FLAG: IN HEX
0B3F29 D9 
             2035** ;
0B3F2A FE    2036** LEXAND:			CP	'%'			; Check for binary prefix
0B3F2B 25 
0B3F2C 20    2037** JR	NZ,LEXANE		; If not, skip
0B3F2D 02 
0B3F2E CB    2038** SET	2,C			; FLAG: IN BINARY
0B3F2F D1 
             2039** ;
0B3F30 21    2040** LEXANE:			LD      HL,LIST1		; List of tokens that must be followed by a line number
0B3F31 54 
0B3F32 3F 
0B3F33 0B 
0B3F34 C5    2041** PUSH    BC
0B3F35 01    2042** LD      BC,LIST1L		; The list length
0B3F36 06 
0B3F37 00 
0B3F38 00 
0B3F39 ED    2043** CPIR				; Check if the token is in this list
0B3F3A B1 
0B3F3B C1    2044** POP     BC
0B3F3C 20    2045** JR      NZ,LEXANF		; If not, then skip
0B3F3D 02 
0B3F3E CB    2046** SET     4,C             	; FLAG: ACCEPT LINE NUMBER
0B3F3F E1 
             2047** ;
0B3F40 21    2048** LEXANF:			LD      HL,LIST2		; List of tokens that switch the lexical analysis back to LEFT mode
0B3F41 58 
0B3F42 3F 
0B3F43 0B 
0B3F44 C5    2049** PUSH    BC
0B3F45 01    2050** LD      BC,LIST2L		; The list length
0B3F46 05 
0B3F47 00 
0B3F48 00 
0B3F49 ED    2051** CPIR				; Check if the token is in this list
0B3F4A B1 
0B3F4B C1    2052** POP     BC
0B3F4C 20    2053** JR      NZ,LEXANG		; If not, then skip
0B3F4D 02 
0B3F4E CB    2054** SET     0,C             	; FLAG: ENTER LEFT MODE
0B3F4F C1 
0B3F50 C3    2055** LEXANG:			JP      LEXAN1			; And loop
0B3F51 9C 
0B3F52 3E 
0B3F53 0B 
             2056** 
             2057** ;
             2058** ; LIST1: List of tokens that must be followed by line numbers
             2059** ; LIST2: List of tokens that switch the lexical analysis back to LEFT mode
             2060** ;
0B3F54 E5    2061** LIST1:			DB	GOTO
0B3F55 E4    2062** DB	GOSUB
0B3F56 F7    2063** DB	RESTOR
0B3F57 FC    2064** DB	TRACE
0B3F58 8C    2065** LIST2:			DB	THEN_MN_
0B3F59 8B    2066** DB	ELSE_MN_
             2067** LIST1L:			EQU     $-LIST1
0B3F5A F5    2068** DB	REPEAT
0B3F5B 85    2069** DB	TERROR_MN
0B3F5C 3A    2070** DB    	':'
             2071** LIST2L:			EQU     $-LIST2
             2072** ;
             2073** ; ENCODE - ENCODE LINE NUMBER INTO PSEUDO-BINARY FORM.
             2074** ;   Inputs: HL=line number, DE=string pointer
             2075** ;  Outputs: DE updated, BIT 4,C set.
             2076** ; Destroys: A,B,C,D,E,F
             2077** ;
             2078** ; Thanks to Matt Godblot for this explanation (https://xania.org/200711/bbc-basic-line-number-format)
             2079** ;
             2080** ; The line number is spread over three bytes and kept in the range of normal ASCII values so the interpreter
             2081** ; can make this short cut in skipping to the non-ASCII token ELSE. The algorithm used splits the top two bits off
             2082** ; each of the two bytes of the 16-bit line number. These bits are combined (in binary as 00LlHh00),
             2083** ; exclusive-ORred with 0x54, and stored as the first byte of the 3-byte sequence. The remaining six bits of
             2084** ; each byte are then stored, in LO/HI order, ORred with 0x40.
             2085** ;
0B3F5D CB    2086** ENCODE:			SET     4,C			; Set bit 4 of C (for lexical analysis - accept line number)
0B3F5E E1 
0B3F5F EB    2087** EX      DE, HL			; HL: string pointer, DE: line number
0B3F60 36    2088** LD      (HL), LINO_MN		; Store 8Dh first to flag next bytes as an encoded line number
0B3F61 8D 
0B3F62 23    2089** INC     HL
0B3F63 7A    2090** LD      A,D			; Get the high byte
0B3F64 E6    2091** AND     0C0H			; Get the top two bits	DD000000
0B3F65 C0 
0B3F66 0F    2092** RRCA				; Shift right		00DD0000
0B3F67 0F    2093** RRCA
0B3F68 47    2094** LD      B,A			; Store in B
0B3F69 7B    2095** LD      A,E			; Get the low byte
0B3F6A E6    2096** AND     0C0H			; Get the top two bits	EE000000
0B3F6B C0 
0B3F6C B0    2097** OR      B			; Combine with D	EEDD0000
0B3F6D 0F    2098** RRCA				; Shift right		00EEDD00
0B3F6E 0F    2099** RRCA
0B3F6F EE    2100** XOR     01010100B		; XOR with 54h
0B3F70 54 
0B3F71 77    2101** LD      (HL),A			; Store this as the second byte
0B3F72 23    2102** INC     HL
0B3F73 7B    2103** LD      A,E			; Get the low byte
0B3F74 E6    2104** AND     3FH			; Strip the top two bits off
0B3F75 3F 
0B3F76 F6    2105** OR      '@'			; OR with 40h
0B3F77 40 
0B3F78 77    2106** LD      (HL),A			; Store
0B3F79 23    2107** INC     HL
0B3F7A 7A    2108** LD      A,D			; Get the high byte
0B3F7B E6    2109** AND     3FH			; Strip the top two bits off
0B3F7C 3F 
0B3F7D F6    2110** OR      '@'			; OR with 40h
0B3F7E 40 
0B3F7F 77    2111** LD      (HL),A			; Store
0B3F80 23    2112** INC     HL
0B3F81 EB    2113** EX      DE,HL			; DE: string pointer, HL: line number
0B3F82 C9    2114** RET
             2115** ;
             2116** ; TEXT - OUTPUT MESSAGE.
             2117** ;   Inputs: HL addresses text (terminated by nul)
             2118** ;  Outputs: HL addresses character following nul.
             2119** ; Destroys: A,H,L,F
             2120** ;
0B3F83 2A    2121** REPORT:			LD      HL, (ERRTXT)		; Output an error message pointed to by ERRTXT
0B3F84 2F 
0B3F85 4F 
0B3F86 0B 
             2122** ;
0B3F87 7E    2123** TEXT_:			LD      A, (HL)			; Fetch the character
0B3F88 23    2124** INC     HL			; Increment pointer to next character
0B3F89 B7    2125** OR      A			; Check for the nul (0) string terminator
0B3F8A C8    2126** RET     Z			; And return if so
0B3F8B CD    2127** CALL    OUT_			; Output the character; note that OUT_ will detokenise tokens
0B3F8C 6D 
0B3F8D 3B 
0B3F8E 0B 
0B3F8F 18    2128** JR      TEXT_			; And loop
0B3F90 F6 
             2129** ;
             2130** ; TELL - OUTPUT MESSAGE.
             2131** ;   Inputs: Text follows subroutine call (term=nul)
             2132** ; Destroys: A,F
             2133** ;
             2134** ; Example usage:
             2135** ;
             2136** ;	CALL	TELL			Call the function
             2137** ;	DB	"Hello World", 0	Followed by a zero terminated string
             2138** ;	LD	A, (1234H)		Program execution will carry on here after the message is output
             2139** ;
0B3F91 E3    2140** TELL:			EX      (SP), HL		; Get the return address off the stack into HL, this is the
0B3F92 CD    2141** CALL    TEXT_			; first byte of the string that follows it. Print it, then
0B3F93 87 
0B3F94 3F 
0B3F95 0B 
0B3F96 E3    2142** EX      (SP), HL		; HL will point to the next instruction, swap this back onto the stack
0B3F97 C9    2143** RET				; at this point we'll return to the first instruction after the message
              0010* include "basic/misc.asm"
             0001** ;
             0002** ; Title:	BBC Basic for AGON - Miscellaneous helper functions
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	12/05/2023
             0006** ;
             0007** ; Modinfo:
             0008** 
             0009** ; INCLUDE	"equs.inc"
             0010** ; INCLUDE	"macros.inc"
             0011** 
             0012** ; .ASSUME	ADL = 1
             0013** 
             0014** ; SEGMENT CODE
             0015** 
             0016** ; XDEF	ASC_TO_NUMBER
             0017** ; XDEF	SWITCH_A
             0018** ; XDEF	NULLTOCR
             0019** ; XDEF	CRTONULL
             0020** ; XDEF	CSTR_FNAME
             0021** ; XDEF	CSTR_LINE
             0022** ; XDEF	CSTR_FINDCH
             0023** ; XDEF	CSTR_ENDSWITH
             0024** ; XDEF	CSTR_CAT
             0025** 
             0026** ; XREF	OSWRCH
             0027** ; XREF	KEYWDS
             0028** ; XREF	KEYWDL
             0029** 
             0030** ; Read a number and convert to binary
             0031** ; If prefixed with &, will read as hex, otherwise decimal
             0032** ;   Inputs: HL: Pointer in string buffer
             0033** ;  Outputs: HL: Updated text pointer
             0034** ;           DE: Value
             0035** ;            A: Terminator (spaces skipped)
             0036** ; Destroys: A,D,E,H,L,F
             0037** ;
0B3F98 C5    0038** ASC_TO_NUMBER:		PUSH	BC			; Preserve BC
0B3F99 11    0039** LD	DE, 0			; Initialise DE
0B3F9A 00 
0B3F9B 00 
0B3F9C 00 
0B3F9D CD    0040** CALL	SKIPSPC			; Skip whitespace
0B3F9E DF 
0B3F9F 3F 
0B3FA0 0B 
0B3FA1 7E    0041** LD	A, (HL)			; Read first character
0B3FA2 FE    0042** CP	'&'			; Is it prefixed with '&' (HEX number)?
0B3FA3 26 
0B3FA4 20    0043** JR	NZ, ASC_TO_NUMBER3	; Jump to decimal parser if not
0B3FA5 1F 
0B3FA6 23    0044** INC	HL			; Otherwise fall through to ASC_TO_HEX
             0045** ;
0B3FA7 7E    0046** ASC_TO_NUMBER1:		LD	A, (HL)			; Fetch the character
0B3FA8 CD    0047** CALL    UPPERC			; Convert to uppercase
0B3FA9 ED 
0B3FAA 3F 
0B3FAB 0B 
0B3FAC D6    0048** SUB	'0'			; Normalise to 0
0B3FAD 30 
0B3FAE 38    0049** JR 	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0B3FAF 2E 
0B3FB0 FE    0050** CP 	10			; Check if >= 10
0B3FB1 0A 
0B3FB2 38    0051** JR 	C,ASC_TO_NUMBER2	; No, so skip next bit
0B3FB3 06 
0B3FB4 D6    0052** SUB 	7			; Adjust ASCII A-F to nibble
0B3FB5 07 
0B3FB6 FE    0053** CP 	16			; Check for > F
0B3FB7 10 
0B3FB8 30    0054** JR 	NC, ASC_TO_NUMBER4	; Return if out of range
0B3FB9 24 
0B3FBA EB    0055** ASC_TO_NUMBER2:		EX 	DE, HL 			; Shift DE left 4 times
0B3FBB 29    0056** ADD	HL, HL
0B3FBC 29    0057** ADD	HL, HL
0B3FBD 29    0058** ADD	HL, HL
0B3FBE 29    0059** ADD	HL, HL
0B3FBF EB    0060** EX	DE, HL
0B3FC0 B3    0061** OR      E			; OR the new digit in to the least significant nibble
0B3FC1 5F    0062** LD      E, A
0B3FC2 23    0063** INC     HL			; Onto the next character
0B3FC3 18    0064** JR      ASC_TO_NUMBER1		; And loop
0B3FC4 E2 
             0065** ;
0B3FC5 7E    0066** ASC_TO_NUMBER3:		LD	A, (HL)
0B3FC6 D6    0067** SUB	'0'			; Normalise to 0
0B3FC7 30 
0B3FC8 38    0068** JR	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0B3FC9 14 
0B3FCA FE    0069** CP	10			; Check if >= 10
0B3FCB 0A 
0B3FCC 30    0070** JR	NC, ASC_TO_NUMBER4	; Return if >= 10
0B3FCD 10 
0B3FCE EB    0071** EX 	DE, HL 			; Stick DE in HL
0B3FCF 44    0072** LD	B, H 			; And copy HL into BC
0B3FD0 4D    0073** LD	C, L
0B3FD1 29    0074** ADD	HL, HL 			; x 2
0B3FD2 29    0075** ADD	HL, HL 			; x 4
0B3FD3 09    0076** ADD	HL, BC 			; x 5
0B3FD4 29    0077** ADD	HL, HL 			; x 10
0B3FD5 EB    0078** EX	DE, HL
             0079** ADD8U_DE 			; Add A to DE (macro)
0B3FD6 83   0001**M ADD	A, E
0B3FD7 5F   0002**M LD	E, A
0B3FD8 8A   0003**M ADC	A, D
0B3FD9 93   0004**M SUB	E
0B3FDA 57   0005**M LD	D, A
0B3FDB 23    0080** INC	HL
0B3FDC 18    0081** JR	ASC_TO_NUMBER3
0B3FDD E7 
0B3FDE C1    0082** ASC_TO_NUMBER4:		POP	BC 			; Fall through to SKIPSPC here
             0083** 
             0084** ; Skip a space
             0085** ; HL: Pointer in string buffer
             0086** ;
0B3FDF 7E    0087** SKIPSPC:			LD      A, (HL)
0B3FE0 FE    0088** CP      ' '
0B3FE1 20 
0B3FE2 C0    0089** RET     NZ
0B3FE3 23    0090** INC     HL
0B3FE4 18    0091** JR      SKIPSPC
0B3FE5 F9 
             0092** 
             0093** ; Skip a string
             0094** ; HL: Pointer in string buffer
             0095** ;
0B3FE6 7E    0096** SKIPNOTSP:		LD	A, (HL)
0B3FE7 FE    0097** CP	' '
0B3FE8 20 
0B3FE9 C8    0098** RET	Z
0B3FEA 23    0099** INC	HL
0B3FEB 18    0100** JR	SKIPNOTSP
0B3FEC F9 
             0101** 
             0102** ; Convert a character to upper case
             0103** ;  A: Character to convert
             0104** ;
0B3FED E6    0105** UPPERC:  		AND     7FH
0B3FEE 7F 
0B3FEF FE    0106** CP      '`'
0B3FF0 60 
0B3FF1 D8    0107** RET     C
0B3FF2 E6    0108** AND     5FH			; Convert to upper case
0B3FF3 5F 
0B3FF4 C9    0109** RET
             0110** 
             0111** ; Switch on A - lookup table immediately after call
             0112** ;  A: Index into lookup table
             0113** ;
0B3FF5 E3    0114** SWITCH_A:		EX	(SP), HL		; Swap HL with the contents of the top of the stack
0B3FF6 87    0115** ADD	A, A			; Multiply A by two
             0116** ADD8U_HL 			; Add to HL (macro)
0B3FF7 85   0001**M ADD	A, L
0B3FF8 6F   0002**M LD	L, A
0B3FF9 8C   0003**M ADC	A, H
0B3FFA 95   0004**M SUB	L
0B3FFB 67   0005**M LD	H, A
0B3FFC 7E    0117** LD	A, (HL)			; follow the call. Fetch an address from the
0B3FFD 23    0118** INC	HL 			; table.
0B3FFE 66    0119** LD	H, (HL)
0B3FFF 6F    0120** LD	L, A
0B4000 E3    0121** EX	(SP), HL		; Swap this new address back, restores HL
0B4001 C9    0122** RET				; Return program control to this new address
             0123** 
             0124** ; Convert the buffer to a null terminated string and back
             0125** ; HL: Buffer address
             0126** ;
0B4002 C5    0127** NULLTOCR:		PUSH 	BC
0B4003 06    0128** LD	B, 0
0B4004 00 
0B4005 0E    0129** LD	C, CR
0B4006 0D 
0B4007 18    0130** JR	CRTONULL0
0B4008 05 
             0131** ;
0B4009 C5    0132** CRTONULL:		PUSH	BC
0B400A 06    0133** LD	B, CR
0B400B 0D 
0B400C 0E    0134** LD	C, 0
0B400D 00 
             0135** ;
0B400E E5    0136** CRTONULL0:		PUSH	HL
0B400F 7E    0137** CRTONULL1:		LD	A, (HL)
0B4010 B8    0138** CP 	B
0B4011 28    0139** JR	Z, CRTONULL2
0B4012 03 
0B4013 23    0140** INC	HL
0B4014 18    0141** JR	CRTONULL1
0B4015 F9 
0B4016 71    0142** CRTONULL2:		LD	(HL), C
0B4017 E1    0143** POP 	HL
0B4018 C1    0144** POP	BC
0B4019 C9    0145** RET
             0146** 
             0147** ; Copy a filename to DE and zero terminate it
             0148** ; HL: Source
             0149** ; DE: Destination (ACCS)
             0150** ;
0B401A 7E    0151** CSTR_FNAME:		LD	A, (HL)			; Get source
0B401B FE    0152** CP	32			; Is it space
0B401C 20 
0B401D 28    0153** JR	Z, @F
0B401E 09 
0B401F FE    0154** CP	CR			; Or is it CR
0B4020 0D 
0B4021 28    0155** JR	Z, @F
0B4022 05 
0B4023 12    0156** LD	(DE), A			; No, so store
0B4024 23    0157** INC	HL			; Increment
0B4025 13    0158** INC	DE
0B4026 18    0159** JR	CSTR_FNAME		; And loop
0B4027 F2 
0B4028 AF    0160** @@:			XOR	A			; Zero terminate the target string
0B4029 12    0161** LD	(DE), A
0B402A 13    0162** INC	DE			; And point to next free address
0B402B C9    0163** RET
             0164** 
             0165** ; Copy a CR terminated line to DE and zero terminate it
             0166** ; HL: Source
             0167** ; DE: Destination (ACCS)
             0168** ;
0B402C 7E    0169** CSTR_LINE:		LD	A, (HL)			; Get source
0B402D FE    0170** CP	CR			; Is it CR
0B402E 0D 
0B402F 28    0171** JR	Z, @F
0B4030 05 
0B4031 12    0172** LD	(DE), A			; No, so store
0B4032 23    0173** INC	HL			; Increment
0B4033 13    0174** INC	DE
0B4034 18    0175** JR	CSTR_LINE		; And loop
0B4035 F6 
0B4036 AF    0176** @@:			XOR	A			; Zero terminate the target string
0B4037 12    0177** LD	(DE), A
0B4038 13    0178** INC	DE			; And point to next free address
0B4039 C9    0179** RET
             0180** 
             0181** ; Find the first occurrence of a character (case sensitive)
             0182** ; HL: Source
             0183** ;  C: Character to find
             0184** ; Returns:
             0185** ; HL: Pointer to character, or end of string marker
             0186** ;
0B403A 7E    0187** CSTR_FINDCH:		LD	A, (HL)			; Get source
0B403B B9    0188** CP	C			; Is it our character?
0B403C C8    0189** RET	Z			; Yes, so exit
0B403D B7    0190** OR	A			; Is it the end of string?
0B403E C8    0191** RET	Z			; Yes, so exit
0B403F 23    0192** INC	HL
0B4040 18    0193** JR	CSTR_FINDCH
0B4041 F8 
             0194** 
             0195** ; Check whether a string ends with another string (case insensitive)
             0196** ; HL: Source
             0197** ; DE: The substring we want to test with
             0198** ; Returns:
             0199** ;  F: Z if HL ends with DE, otherwise NZ
             0200** ;
0B4042 7E    0201** CSTR_ENDSWITH:		LD	A, (HL)			; Get the source string byte
0B4043 CD    0202** CALL	UPPERC			; Convert to upper case
0B4044 ED 
0B4045 3F 
0B4046 0B 
0B4047 4F    0203** LD	C, A
0B4048 1A    0204** LD	A, (DE)			; Get the substring byte
0B4049 B9    0205** CP	C
0B404A C0    0206** RET	NZ			; Return NZ if at any point the strings don't match
0B404B B1    0207** OR	C			; Check whether both bytes are zero
0B404C C8    0208** RET	Z			; If so, return, as we have reached the end of both strings
0B404D 23    0209** INC	HL
0B404E 13    0210** INC	DE
0B404F 18    0211** JR	CSTR_ENDSWITH		; And loop
0B4050 F1 
             0212** 
             0213** ; Concatenate a string onto the end of another string
             0214** ; HL: Source
             0215** ; DE: Second string
             0216** ;
0B4051 7E    0217** CSTR_CAT:		LD	A, (HL)			; Loop until we find the end of the first string
0B4052 B7    0218** OR	A
0B4053 28    0219** JR	Z, CSTR_CAT_1
0B4054 03 
0B4055 23    0220** INC	HL
0B4056 18    0221** JR	CSTR_CAT
0B4057 F9 
             0222** ;
0B4058 1A    0223** CSTR_CAT_1:		LD	A, (DE)			; Copy the second string onto the end of the first string
0B4059 77    0224** LD	(HL), A
0B405A B7    0225** OR	A			; Check for end of string
0B405B C8    0226** RET	Z			; And return
0B405C 23    0227** INC	HL
0B405D 13    0228** INC	DE
0B405E 18    0229** JR	CSTR_CAT_1		; Loop until finished
0B405F F8 
              0011* include "basic/patch.asm"
             0001** ;
             0002** ; Title:	BBC Basic for AGON
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	15/11/2023
             0006** ;
             0007** ; Modinfo:
             0008** ; 11/07/2023:	Fixed *BYE for ADL mode
             0009** ; 15/11/2023:	Improved OSLOAD_TXT; now handles LF terminated files, files with no trailing LF or CR/LF at end
             0010** 
             0011** ; .ASSUME	ADL = 1
             0012** 
             0013** ; INCLUDE	"equs.inc"
             0014** ; INCLUDE "macros.inc"
             0015** ; INCLUDE "mos_api.inc"	; In MOS/src
             0016** 
             0017** ; SEGMENT CODE
             0018** 
             0019** ; XDEF	OSWRCH
             0020** ; XDEF	OSLINE
             0021** ; XDEF	ESCSET
             0022** ; XDEF	PUTIME
             0023** ; XDEF	GETIME
             0024** ; XDEF	PUTCSR
             0025** ; XDEF 	GETCSR
             0026** ; XDEF	OSRDCH
             0027** ; XDEF	PROMPT
             0028** ; XDEF	OSKEY
             0029** ; XDEF	TRAP
             0030** ; XDEF	LTRAP
             0031** ; XDEF	OSINIT
             0032** ; XDEF	OSCLI
             0033** ; XDEF	OSBPUT
             0034** ; XDEF	OSBGET
             0035** ; XDEF	OSSTAT
             0036** ; XDEF	OSSHUT
             0037** ; XDEF	OSOPEN
             0038** ; XDEF	OSCALL
             0039** ; XDEF	GETPTR
             0040** ; XDEF	PUTPTR
             0041** ; XDEF	GETEXT
             0042** ; XDEF	GETIMS
             0043** ; XDEF	RESET
             0044** ; XDEF	OSLOAD
             0045** ; XDEF	OSSAVE
             0046** ; XDEF	EXPR_W2
             0047** ; XDEF	STAR_VERSION
             0048** 
             0049** ; XREF	_basic_end			; In init.asm
             0050** 
             0051** ; XREF	ASC_TO_NUMBER
             0052** ; XREF	RAM_START
             0053** ; XREF	RAM_END
             0054** ; XREF	FLAGS
             0055** ; XREF	ESCAPE
             0056** ; XREF	USER
             0057** ; XREF	RAM_Top
             0058** ; XREF	EXTERR
             0059** ; XREF	COUNT0
             0060** ; XREF	EXPRI
             0061** ; XREF	COMMA
             0062** ; XREF	XEQ
             0063** ; XREF	NXT
             0064** ; XREF	NULLTOCR
             0065** ; XREF	CRLF
             0066** ; XREF	CSTR_FNAME
             0067** ; XREF	CSTR_LINE
             0068** ; XREF	CSTR_FINDCH
             0069** ; XREF	CSTR_ENDSWITH
             0070** ; XREF	CSTR_CAT
             0071** ; XREF	FINDL
             0072** ; XREF	OUT_
             0073** ; XREF	ERROR_
             0074** ; XREF	ONEDIT
             0075** ; XREF	TELL
             0076** ; XREF	OSWRCHPT
             0077** ; XREF	OSWRCHCH
             0078** ; XREF	OSWRCHFH
             0079** ; XREF	LISTON
             0080** ; XREF	LISTIT
             0081** ; XREF	PAGE_
             0082** ; XREF	ONEDIT1
             0083** ; XREF	CLEAN
             0084** ; XREF	NEWIT
             0085** ; XREF	BAD
             0086** ; XREF	VBLANK_INIT
             0087** ; XREF	VBLANK_STOP
             0088** ; XREF	KEYDOWN
             0089** ; XREF	KEYASCII
             0090** ; XREF	WIDTH
             0091** ; XREF	ASSEM
             0092** 
             0093** ; OSLINE: Invoke the line editor
             0094** ;
0B4060 1E    0095** OSLINE:			LD 	E, 1			; Default is to clear the buffer
0B4061 01 
             0096** 
             0097** ; Entry point to line editor that does not clear the buffer
             0098** ;
0B4062 FD    0099** OSLINE1:		PUSH	IY
0B4063 E5 
0B4064 E5    0100** PUSH	HL			; Buffer address
0B4065 01    0101** LD	BC, 256			; Buffer length
0B4066 00 
0B4067 01 
0B4068 00 
             0102** MOSCALL	mos_editline		; Call the MOS line editor
0B4069 3E   0001**M LD	A, function
0B406A 09 
0B406B 49   0002**M RST.LIS	08h
0B406C CF 
0B406D E1    0103** POP	HL			; Pop the address
0B406E FD    0104** POP	IY
0B406F E1 
0B4070 F5    0105** PUSH	AF			; Stack the return value (key pressed)
0B4071 CD    0106** CALL	NULLTOCR		; Turn the 0 character to a CR
0B4072 02 
0B4073 40 
0B4074 0B 
0B4075 CD    0107** CALL	CRLF			; Display CRLF
0B4076 48 
0B4077 3B 
0B4078 0B 
0B4079 F1    0108** POP	AF
0B407A FE    0109** CP	1Bh 			; Check if ESC terminated the input
0B407B 1B 
0B407C CA    0110** JP	Z, LTRAP1 		; Yes, so do the ESC thing
0B407D 78 
0B407E 41 
0B407F 0B 
0B4080 3A    0111** LD	A, (FLAGS)		; Otherwise
0B4081 42 
0B4082 4F 
0B4083 0B 
0B4084 CB    0112** RES	7, A 			; Clear the escape flag
0B4085 BF 
0B4086 32    0113** LD	(FLAGS), A
0B4087 42 
0B4088 4F 
0B4089 0B 
0B408A CD    0114** CALL	WAIT_VBLANK 		; Wait a frame
0B408B 3E 
0B408C 43 
0B408D 0B 
0B408E AF    0115** XOR	A			; Return A = 0
0B408F 32    0116** LD	(KEYDOWN), A
0B4090 47 
0B4091 4F 
0B4092 0B 
0B4093 32    0117** LD	(KEYASCII), A
0B4094 48 
0B4095 4F 
0B4096 0B 
0B4097 C9    0118** RET
             0119** 
             0120** ; PUTIME: set current time to DE:HL, in centiseconds.
             0121** ;
0B4098 DD    0122** PUTIME:			PUSH 	IX
0B4099 E5 
             0123** MOSCALL	mos_sysvars
0B409A 3E   0001**M LD	A, function
0B409B 08 
0B409C 49   0002**M RST.LIS	08h
0B409D CF 
0B409E DD    0124** LD	(IX + sysvar_time + 0), L
0B409F 75 
0B40A0 00 
0B40A1 DD    0125** LD	(IX + sysvar_time + 1), H
0B40A2 74 
0B40A3 01 
0B40A4 DD    0126** LD	(IX + sysvar_time + 2), E
0B40A5 73 
0B40A6 02 
0B40A7 DD    0127** LD	(IX + sysvar_time + 3), D
0B40A8 72 
0B40A9 03 
0B40AA DD    0128** POP	IX
0B40AB E1 
0B40AC C9    0129** RET
             0130** 
             0131** ; GETIME: return current time in DE:HL, in centiseconds
             0132** ;
0B40AD DD    0133** GETIME:			PUSH 	IX
0B40AE E5 
             0134** MOSCALL	mos_sysvars
0B40AF 3E   0001**M LD	A, function
0B40B0 08 
0B40B1 49   0002**M RST.LIS	08h
0B40B2 CF 
0B40B3 DD    0135** LD	L, (IX + sysvar_time + 0)
0B40B4 6E 
0B40B5 00 
0B40B6 DD    0136** LD	H, (IX + sysvar_time + 1)
0B40B7 66 
0B40B8 01 
0B40B9 DD    0137** LD	E, (IX + sysvar_time + 2)
0B40BA 5E 
0B40BB 02 
0B40BC DD    0138** LD	D, (IX + sysvar_time + 3)
0B40BD 56 
0B40BE 03 
0B40BF DD    0139** POP	IX
0B40C0 E1 
0B40C1 C9    0140** RET
             0141** 
             0142** ; PUTCSR: move to cursor to x=DE, y=HL
             0143** ;
0B40C2 3E    0144** PUTCSR:			LD	A, 1Fh			; TAB
0B40C3 1F 
0B40C4 5B    0145** RST.LIL	10h
0B40C5 D7 
0B40C6 7B    0146** LD	A, E			; X
0B40C7 5B    0147** RST.LIL 10h
0B40C8 D7 
0B40C9 7D    0148** LD	A, L			; Y
0B40CA 5B    0149** RST.LIL 10h
0B40CB D7 
0B40CC C9    0150** RET
             0151** 
             0152** ; GETCSR: return cursor position in x=DE, y=HL
             0153** ;
0B40CD DD    0154** GETCSR:			PUSH	IX			; Get the system vars in IX
0B40CE E5 
             0155** MOSCALL	mos_sysvars		; Reset the semaphore
0B40CF 3E   0001**M LD	A, function
0B40D0 08 
0B40D1 49   0002**M RST.LIS	08h
0B40D2 CF 
0B40D3 DD    0156** RES	0, (IX+sysvar_vpd_pflags)
0B40D4 CB 
0B40D5 04 
0B40D6 86 
             0157** VDU	23
0B40D7 3E   0001**M LD	A, val
0B40D8 17 
0B40D9 CD   0002**M CALL	OSWRCH
0B40DA 01 
0B40DB 41 
0B40DC 0B 
             0158** VDU	0
0B40DD 3E   0001**M LD	A, val
0B40DE 00 
0B40DF CD   0002**M CALL	OSWRCH
0B40E0 01 
0B40E1 41 
0B40E2 0B 
             0159** VDU	vdp_cursor
0B40E3 3E   0001**M LD	A, val
0B40E4 82 
0B40E5 CD   0002**M CALL	OSWRCH
0B40E6 01 
0B40E7 41 
0B40E8 0B 
0B40E9 DD    0160** @@:			BIT	0, (IX+sysvar_vpd_pflags)
0B40EA CB 
0B40EB 04 
0B40EC 46 
0B40ED 28    0161** JR	Z, @B			; Wait for the result
0B40EE FA 
0B40EF 16    0162** LD 	D, 0
0B40F0 00 
0B40F1 62    0163** LD	H, D
0B40F2 DD    0164** LD	E, (IX + sysvar_cursorX)
0B40F3 5E 
0B40F4 07 
0B40F5 DD    0165** LD	L, (IX + sysvar_cursorY)
0B40F6 6E 
0B40F7 08 
0B40F8 DD    0166** POP	IX
0B40F9 E1 
0B40FA C9    0167** RET
             0168** 
             0169** ; PROMPT: output the input prompt
             0170** ;
0B40FB 3E    0171** PROMPT: 		LD	A,'>'
0B40FC 3E 
0B40FD C3    0172** JP	OSWRCH
0B40FE 01 
0B40FF 41 
0B4100 0B 
             0173** 
             0174** ; OSWRCH: Write a character out to the ESP32 VDU handler via the MOS
             0175** ; A: Character to write
             0176** ;
0B4101 E5    0177** OSWRCH:			PUSH	HL
0B4102 21    0178** LD	HL, LISTON		; Fetch the LISTON variable
0B4103 40 
0B4104 4F 
0B4105 0B 
0B4106 CB    0179** BIT	3, (HL)			; Check whether we are in *EDIT mode
0B4107 5E 
0B4108 20    0180** JR	NZ, OSWRCH_BUFFER	; Yes, so just output to buffer
0B4109 0B 
             0181** ;
0B410A 2A    0182** LD	HL, (OSWRCHCH)		; L: Channel #
0B410B 45 
0B410C 4F 
0B410D 0B 
0B410E 2D    0183** DEC	L			; If it is 1
0B410F 28    0184** JR	Z, OSWRCH_FILE		; Then we are outputting to a file
0B4110 10 
             0185** ;
0B4111 E1    0186** POP	HL			; Otherwise
0B4112 5B    0187** RST.LIL	10h			; Output the character to MOS
0B4113 D7 
0B4114 C9    0188** RET
             0189** ;
0B4115 2A    0190** OSWRCH_BUFFER:		LD	HL, (OSWRCHPT)		; Fetch the pointer buffer
0B4116 43 
0B4117 4F 
0B4118 0B 
0B4119 77    0191** LD	(HL), A			; Echo the character into the buffer
0B411A 23    0192** INC	HL			; Increment pointer
0B411B 22    0193** LD	(OSWRCHPT), HL		; Write pointer back
0B411C 43 
0B411D 4F 
0B411E 0B 
0B411F E1    0194** POP	HL
0B4120 C9    0195** RET
             0196** ;
0B4121 D5    0197** OSWRCH_FILE:		PUSH	DE
0B4122 5C    0198** LD	E, H			; Filehandle to E
0B4123 CD    0199** CALL	OSBPUT			; Write the byte out
0B4124 3C 
0B4125 45 
0B4126 0B 
0B4127 D1    0200** POP	DE
0B4128 E1    0201** POP	HL
0B4129 C9    0202** RET
             0203** 
             0204** ; OSRDCH: Read a character in from the ESP32 keyboard handler
             0205** ; This is only called in GETS (eval.asm)
             0206** ;
             0207** OSRDCH:			MOSCALL	mos_getkey		; Read keyboard
0B412A 3E   0001**M LD	A, function
0B412B 00 
0B412C 49   0002**M RST.LIS	08h
0B412D CF 
0B412E FE    0208** CP	1Bh
0B412F 1B 
0B4130 28    0209** JR	Z, LTRAP1
0B4131 46 
0B4132 C9    0210** RET
             0211** 
             0212** 
             0213** ;OSKEY - Read key with time-limit, test for ESCape.
             0214** ;Main function is carried out in user patch.
             0215** ;   Inputs: HL = time limit (centiseconds)
             0216** ;  Outputs: Carry reset if time-out
             0217** ;           If carry set A = character
             0218** ; Destroys: A,H,L,F
             0219** ;
0B4133 CD    0220** OSKEY:			CALL	READKEY			; Read the keyboard
0B4134 64 
0B4135 41 
0B4136 0B 
0B4137 28    0221** JR	Z, @F 			; Skip if we have a key
0B4138 0A 
0B4139 7C    0222** LD	A, H 			; Check loop counter
0B413A B5    0223** OR 	L
0B413B C8    0224** RET 	Z 			; Return, we've not got a key at this point
0B413C CD    0225** CALL	WAIT_VBLANK 		; Wait a frame
0B413D 3E 
0B413E 43 
0B413F 0B 
0B4140 2B    0226** DEC 	HL			; Decrement
0B4141 18    0227** JR	OSKEY 			; And loop
0B4142 F0 
             0228** ;
0B4143 21    0229** @@:			LD	HL, KEYDOWN		; We have a key, so
0B4144 47 
0B4145 4F 
0B4146 0B 
0B4147 36    0230** LD	(HL), 0			; clear the keydown flag
0B4148 00 
0B4149 FE    0231** CP	1BH			; If we are not pressing ESC,
0B414A 1B 
0B414B 37    0232** SCF 				; then flag we've got a character
0B414C C0    0233** RET	NZ
             0234** ;
             0235** ; ESCSET
             0236** ; Set the escape flag (bit 7 of FLAGS = 1) if escape is enabled (bit 6 of FLAGS = 0)
             0237** ;
0B414D E5    0238** ESCSET: 		PUSH    HL
0B414E 21    0239** LD      HL,FLAGS		; Pointer to FLAGS
0B414F 42 
0B4150 4F 
0B4151 0B 
0B4152 CB    0240** BIT     6,(HL)			; If bit 6 is set, then
0B4153 76 
0B4154 20    0241** JR      NZ,ESCDIS		; escape is disabled, so skip
0B4155 02 
0B4156 CB    0242** SET     7,(HL)			; Set bit 7, the escape flag
0B4157 FE 
0B4158 E1    0243** ESCDIS: 		POP     HL
0B4159 C9    0244** RET
             0245** ;
             0246** ; ESCTEST
             0247** ; Test for ESC key
             0248** ;
0B415A CD    0249** ESCTEST:		CALL	READKEY			; Read the keyboard
0B415B 64 
0B415C 41 
0B415D 0B 
0B415E C0    0250** RET	NZ			; Skip if no key is pressed
0B415F FE    0251** CP	1BH			; If ESC pressed then
0B4160 1B 
0B4161 28    0252** JR	Z,ESCSET		; jump to the escape set routine
0B4162 EA 
0B4163 C9    0253** RET
             0254** 
             0255** ; Read the keyboard
             0256** ; Returns:
             0257** ; - A: ASCII of the pressed key
             0258** ; - F: Z if the key is pressed, otherwise NZ
             0259** ;
0B4164 3A    0260** READKEY:		LD	A, (KEYDOWN)		; Get key down
0B4165 47 
0B4166 4F 
0B4167 0B 
0B4168 3D    0261** DEC	A 			; Set Z flag if keydown is 1
0B4169 3A    0262** LD	A, (KEYASCII)		; Get key ASCII value
0B416A 48 
0B416B 4F 
0B416C 0B 
0B416D C9    0263** RET
             0264** ;
             0265** ; TRAP
             0266** ; This is called whenever BASIC needs to check for ESC
             0267** ;
0B416E CD    0268** TRAP:			CALL	ESCTEST			; Read keyboard, test for ESC, set FLAGS
0B416F 5A 
0B4170 41 
0B4171 0B 
             0269** ;
0B4172 3A    0270** LTRAP:			LD	A,(FLAGS)		; Get FLAGS
0B4173 42 
0B4174 4F 
0B4175 0B 
0B4176 B7    0271** OR	A			; This checks for bit 7; if it is not set then the result will
0B4177 F0    0272** RET	P			; be positive (bit 7 is the sign bit in Z80), so return
0B4178 21    0273** LTRAP1:			LD	HL,FLAGS 		; Escape is pressed at this point, so
0B4179 42 
0B417A 4F 
0B417B 0B 
0B417C CB    0274** RES	7,(HL)			; Clear the escape pressed flag and
0B417D BE 
0B417E C3    0275** JP	ESCAPE			; Jump to the ESCAPE error routine in exec.asm
0B417F 9C 
0B4180 0E 
0B4181 0B 
             0276** 
             0277** ;OSINIT - Initialise RAM mapping etc.
             0278** ;If BASIC is entered by BBCBASIC FILENAME then file
             0279** ;FILENAME.BBC is automatically CHAINed.
             0280** ;   Outputs: DE = initial value of HIMEM (top of RAM)
             0281** ;            HL = initial value of PAGE (user program)
             0282** ;            Z-flag reset indicates AUTO-RUN.
             0283** ;  Destroys: A,D,E,H,L,F
             0284** ;
0B4182 CD    0285** OSINIT:			CALL	VBLANK_INIT
0B4183 E1 
0B4184 4A 
0B4185 0B 
0B4186 AF    0286** XOR	A
0B4187 21    0287** LD 	HL, USER
0B4188 00 
0B4189 50 
0B418A 0B 
0B418B 11    0288** LD	DE, RAM_Top
0B418C 00 
0B418D 00 
0B418E 0B 
0B418F 5F    0289** LD	E, A			; Page boundary
0B4190 C9    0290** RET
             0291** 
             0292** ;
             0293** ;OSCLI - Process a MOS command
             0294** ;
0B4191 CD    0295** OSCLI: 			CALL    SKIPSP
0B4192 05 
0B4193 42 
0B4194 0B 
0B4195 FE    0296** CP      CR
0B4196 0D 
0B4197 C8    0297** RET     Z
0B4198 FE    0298** CP      '|'
0B4199 7C 
0B419A C8    0299** RET     Z
0B419B EB    0300** EX      DE,HL
0B419C 21    0301** LD      HL,COMDS
0B419D 14 
0B419E 42 
0B419F 0B 
0B41A0 1A    0302** OSCLI0:			LD      A,(DE)
0B41A1 CD    0303** CALL    UPPRC
0B41A2 0C 
0B41A3 42 
0B41A4 0B 
0B41A5 BE    0304** CP      (HL)
0B41A6 28    0305** JR      Z,OSCLI2
0B41A7 0B 
0B41A8 38    0306** JR      C,OSCLI6
0B41A9 30 
0B41AA CB    0307** OSCLI1:			BIT     7,(HL)
0B41AB 7E 
0B41AC 23    0308** INC     HL
0B41AD 28    0309** JR      Z,OSCLI1
0B41AE FB 
0B41AF 23    0310** INC     HL
0B41B0 23    0311** INC     HL
0B41B1 18    0312** JR      OSCLI0
0B41B2 ED 
             0313** ;
0B41B3 D5    0314** OSCLI2:			PUSH    DE
0B41B4 13    0315** OSCLI3:			INC     DE
0B41B5 23    0316** INC     HL
0B41B6 1A    0317** LD      A,(DE)
0B41B7 CD    0318** CALL    UPPRC
0B41B8 0C 
0B41B9 42 
0B41BA 0B 
0B41BB FE    0319** CP      '.'			; ABBREVIATED?
0B41BC 2E 
0B41BD 28    0320** JR      Z,OSCLI4
0B41BE 0A 
0B41BF AE    0321** XOR     (HL)
0B41C0 28    0322** JR      Z,OSCLI3
0B41C1 F2 
0B41C2 FE    0323** CP      80H
0B41C3 80 
0B41C4 28    0324** JR      Z,OSCLI4
0B41C5 03 
0B41C6 D1    0325** POP     DE
0B41C7 18    0326** JR      OSCLI1
0B41C8 E1 
             0327** ;
0B41C9 F1    0328** OSCLI4:			POP     AF
0B41CA 13    0329** INC     DE
0B41CB CB    0330** OSCLI5:			BIT     7,(HL)
0B41CC 7E 
0B41CD 23    0331** INC     HL
0B41CE 28    0332** JR      Z,OSCLI5
0B41CF FB 
0B41D0 7E    0333** LD      A,(HL)
0B41D1 23    0334** INC     HL
0B41D2 66    0335** LD      H,(HL)
0B41D3 6F    0336** LD      L,A
0B41D4 E5    0337** PUSH    HL
0B41D5 EB    0338** EX      DE,HL
0B41D6 C3    0339** JP      SKIPSP
0B41D7 05 
0B41D8 42 
0B41D9 0B 
             0340** ;
0B41DA EB    0341** OSCLI6:			EX	DE, HL			; HL: Buffer for command
0B41DB 11    0342** LD	DE, ACCS		; Buffer for command string is ACCS (the string accumulator)
0B41DC 00 
0B41DD 4C 
0B41DE 0B 
0B41DF D5    0343** PUSH	DE			; Store buffer address
0B41E0 CD    0344** CALL	CSTR_LINE		; Fetch the line
0B41E1 2C 
0B41E2 40 
0B41E3 0B 
0B41E4 E1    0345** POP	HL			; HL: Pointer to command string in ACCS
0B41E5 FD    0346** PUSH	IY
0B41E6 E5 
             0347** MOSCALL	mos_oscli		; Returns OSCLI error in A
0B41E7 3E   0001**M LD	A, function
0B41E8 10 
0B41E9 49   0002**M RST.LIS	08h
0B41EA CF 
0B41EB FD    0348** POP	IY
0B41EC E1 
0B41ED B7    0349** OR	A			; 0 means MOS returned OK
0B41EE C8    0350** RET	Z			; So don't do anything
0B41EF C3    0351** JP 	OSERROR			; Otherwise it's a MOS error
0B41F0 18 
0B41F1 44 
0B41F2 0B 
             0352** 
0B41F3 3E    0353** HUH:    		LD      A,254			; Bad command error
0B41F4 FE 
0B41F5 CD    0354** CALL    EXTERR
0B41F6 78 
0B41F7 39 
0B41F8 0B 
0B41F9 42    0355** DB    	"Bad command"
0B41FA 61 
0B41FB 64 
0B41FC 20 
0B41FC 63   
0B41FD 6F 
0B41FE 6D 
0B41FF 6D 
0B41FF 61   
0B4200 6E 
0B4201 64 
0B4204 00    0356** DEFB    0
             0357** 
0B4205 7E    0358** SKIPSP:			LD      A,(HL)
0B4206 FE    0359** CP      ' '
0B4207 20 
0B4208 C0    0360** RET     NZ
0B4209 23    0361** INC     HL
0B420A 18    0362** JR      SKIPSP
0B420B F9 
             0363** 
0B420C E6    0364** UPPRC:  		AND     7FH
0B420D 7F 
0B420E FE    0365** CP      '`'
0B420F 60 
0B4210 D8    0366** RET     C
0B4211 E6    0367** AND     5FH			; CONVERT TO UPPER CASE
0B4212 5F 
0B4213 C9    0368** RET
             0369** 
             0370** ; Each command has bit 7 of the last character set, and is followed by the address of the handler
             0371** ; These must be in alphabetical order
             0372** ;
             0373** ; BEGIN NOT FOUND IN BINARY
             0374** ; COMDS:  		DB	"AS","M"+80h		; ASM
             0375** ; 			DW	STAR_ASM
             0376** ; 			DB	"BY","E"+80h		; BYE
             0377** ; 			DW	STAR_BYE
             0378** ; 			DB	"EDI","T"+80h		; EDIT
             0379** ; 			DW	STAR_EDIT
             0380** ; 			DB	"F","X"+80h		; FX
             0381** ; 			DW	STAR_FX
             0382** ; 			DB	"VERSIO","N"+80h	; VERSION
             0383** ; 			DW	STAR_VERSION
             0384** ; 			DB	FFh
             0385** ; END NOT FOUND IN BINARY
             0386** ; BEGIN INSERTED FROM BINARY
             0387** ; Each command has bit 7 of the last character set, and is followed by the address of the handler
             0388** ; These must be in alphabetical order
             0389** ;
             0390** COMDS:
0B4214 42    0391** db 0x42 ; 044013 41     11404 COMDS:  		DB	"AS","M"+80h		; ASM
0B4215 59    0392** db 0x59 ; 044014
0B4216 C5    0393** db 0xc5 ; 044015
0B4217 2C    0394** db 0x2c ; 044016 31     11405 DW	STAR_ASM
0B4218 40    0395** db 0x40 ; 044017
0B4219 45    0396** db 0x45 ; 044018 42     11406 DB	"BY","E"+80h		; BYE
0B421A 44    0397** db 0x44 ; 044019
0B421B 49    0398** db 0x49 ; 04401A
0B421C D4    0399** db 0xd4 ; 04401B 3D     11407 DW	STAR_BYE
0B421D 61    0400** db 0x61 ; 04401C
0B421E 40    0401** db 0x40 ; 04401D 45     11408 DB	"EDI","T"+80h		; EDIT
0B421F 46    0402** db 0x46 ; 04401E
0B4220 D8    0403** db 0xd8 ; 04401F
0B4221 A1    0404** db 0xa1 ; 044020
0B4222 40    0405** db 0x40 ; 044021 72     11409 DW	STAR_EDIT
0B4223 56    0406** db 0x56 ; 044022
0B4224 45    0407** db 0x45 ; 044023 46     11410 DB	"F","X"+80h		; FX
0B4225 52    0408** db 0x52 ; 044024
0B4226 53    0409** db 0x53 ; 044025 B2     11411 DW	STAR_FX
0B4227 49    0410** db 0x49 ; 044026
0B4228 4F    0411** db 0x4f ; 044027 56     11412 DB	"VERSIO","N"+80h	; VERSION
0B4229 CE    0412** db 0xce ; 044028
0B422A 38    0413** db 0x38 ; 044029
0B422B 40    0414** db 0x40 ; 04402A
0B422C FF    0415** db 0xff ; 04402B
             0416** ; END INSERTED FROM BINARY
             0417** 
             0418** ; BEGIN NOT FOUND IN BINARY
             0419** ; ; *ASM string
             0420** ; ;
             0421** ; STAR_ASM:		PUSH	IY			; Stack the BASIC pointer
             0422** ; 			PUSH	HL			; HL = IY
             0423** ; 			POP	IY
             0424** ; 			CALL	ASSEM			; Invoke the assembler
             0425** ; 			POP	IY
             0426** ; 			RET
             0427** ; END NOT FOUND IN BINARY
             0428** 
             0429** ; *BYE
             0430** ;
0B422D CD    0431** STAR_BYE:		CALL	VBLANK_STOP		; Restore MOS interrupts
0B422E F5 
0B422F 4A 
0B4230 0B 
0B4231 21    0432** LD	HL, 0			; The return value
0B4232 00 
0B4233 00 
0B4234 00 
0B4235 C3    0433** JP	_basic_end 			; Jump back to the end routine in init.asm
0B4236 79 
0B4237 50 
0B4238 0B 
             0434** 
             0435** ; *VERSION
             0436** ;
0B4239 CD    0437** STAR_VERSION:		CALL    TELL			; Output the welcome message
0B423A 91 
0B423B 3F 
0B423C 0B 
0B423D 42    0438** DB    	"BBC BASIC (Agon ADL) Version 1.03\n\r",0
0B423E 42 
0B423F 43 
0B4240 20 
0B4240 42   
0B4241 41 
0B4242 53 
0B4243 49 
0B4243 43   
0B4244 20 
0B4245 28 
0B4246 41 
0B4246 67   
0B4247 6F 
0B4248 6E 
0B4249 20 
0B4249 41   
0B424A 44 
0B424B 4C 
0B424C 29 
0B424C 20   
0B424D 56 
0B424E 65 
0B424F 72 
0B424F 73   
0B4250 69 
0B4251 6F 
0B4252 6E 
0B4252 20   
0B4253 31 
0B4254 2E 
0B4255 30 
0B4255 33   
0B4256 0A 
0B4257 0D 
0B4258 00 
0B4261 C9    0439** RET
             0440** 
             0441** ; *EDIT linenum
             0442** ;
0B4262 CD    0443** STAR_EDIT:		CALL	ASC_TO_NUMBER		; DE: Line number to edit
0B4263 98 
0B4264 3F 
0B4265 0B 
0B4266 EB    0444** EX	DE, HL			; HL: Line number
0B4267 CD    0445** CALL	FINDL			; HL: Address in RAM of tokenised line
0B4268 90 
0B4269 3B 
0B426A 0B 
0B426B 3E    0446** LD	A, 41			; F:NZ If the line is not found
0B426C 29 
0B426D C2    0447** JP	NZ, ERROR_		; Do error 41: No such line in that case
0B426E 61 
0B426F 39 
0B4270 0B 
             0448** ;
             0449** ; Use LISTIT to output the line to the ACCS buffer
             0450** ;
0B4271 23    0451** INC	HL			; Skip the length byte
0B4272 5E    0452** LD	E, (HL)			; Fetch the line number
0B4273 23    0453** INC	HL
0B4274 56    0454** LD	D, (HL)
0B4275 23    0455** INC	HL
0B4276 DD    0456** LD	IX, ACCS		; Pointer to where the copy is to be stored
0B4277 21 
0B4278 00 
0B4279 4C 
0B4279 0B   
0B427B DD    0457** LD	(OSWRCHPT), IX
0B427C 22 
0B427D 43 
0B427E 4F 
0B427E 0B   
0B4280 DD    0458** LD	IX, LISTON		; Pointer to LISTON variable in RAM
0B4281 21 
0B4282 40 
0B4283 4F 
0B4283 0B   
0B4285 DD    0459** LD	A, (IX)			; Store that variable
0B4286 7E 
0B4287 00 
0B4288 F5    0460** PUSH	AF
0B4289 DD    0461** LD	(IX), 09h		; Set to echo to buffer
0B428A 36 
0B428B 00 
0B428C 09 
0B428D CD    0462** CALL	LISTIT
0B428E 93 
0B428F 3A 
0B4290 0B 
0B4291 F1    0463** POP	AF
0B4292 DD    0464** LD	(IX), A			; Restore the original LISTON variable
0B4293 77 
0B4294 00 
0B4295 21    0465** LD	HL, ACCS		; HL: ACCS
0B4296 00 
0B4297 4C 
0B4298 0B 
0B4299 5D    0466** LD	E, L			;  E: 0 - Don't clear the buffer; ACCS is on a page boundary so L is 0
0B429A CD    0467** CALL	OSLINE1			; Invoke the editor
0B429B 62 
0B429C 40 
0B429D 0B 
0B429E C3    0468** JP	ONEDIT			; Jump back to the BASIC loop just after the normal line edit
0B429F D1 
0B42A0 32 
0B42A1 0B 
             0469** 
             0470** ; OSCLI FX n
             0471** ;
0B42A2 CD    0472** STAR_FX:		CALL	ASC_TO_NUMBER
0B42A3 98 
0B42A4 3F 
0B42A5 0B 
0B42A6 4B    0473** LD	C, E			; C: Save FX #
0B42A7 CD    0474** CALL	ASC_TO_NUMBER
0B42A8 98 
0B42A9 3F 
0B42AA 0B 
0B42AB 7A    0475** LD	A, D  			; Is first parameter > 255?
0B42AC B7    0476** OR 	A
0B42AD 28    0477** JR	Z, STAR_FX1		; Yes, so skip next bit
0B42AE 03 
0B42AF EB    0478** EX	DE, HL 			; Parameter is 16-bit
0B42B0 18    0479** JR	STAR_FX2
0B42B1 07 
             0480** ;
0B42B2 43    0481** STAR_FX1:		LD	B, E 			; B: Save First parameter
0B42B3 CD    0482** CALL	ASC_TO_NUMBER		; Fetch second parameter
0B42B4 98 
0B42B5 3F 
0B42B6 0B 
0B42B7 68    0483** LD	L, B 			; L: First parameter
0B42B8 63    0484** LD	H, E 			; H: Second parameter
             0485** ;
0B42B9 79    0486** STAR_FX2:		LD	A, C 			; A: FX #, and fall through to OSBYTE
             0487** ;
             0488** ; OSBYTE
             0489** ;  A: FX #
             0490** ;  L: First parameter
             0491** ;  H: Second parameter
             0492** ;
0B42BA FE    0493** OSBYTE:			CP	0BH			; *FX 11, n: Keyboard auto-repeat delay
0B42BB 0B 
0B42BC 28    0494** JR	Z, OSBYTE_0B
0B42BD 18 
0B42BE FE    0495** CP	0CH			; *FX 12, n: Keyboard auto-repeat rate
0B42BF 0C 
0B42C0 28    0496** JR	Z, OSBYTE_0C
0B42C1 43 
0B42C2 FE    0497** CP	13H			; *FX 19: Wait for vblank
0B42C3 13 
0B42C4 28    0498** JR	Z, OSBYTE_13
0B42C5 6E 
0B42C6 FE    0499** CP	76H			; *FX 118, n: Set keyboard LED
0B42C7 76 
0B42C8 CA    0500** JP	Z, OSBYTE_76
0B42C9 4F 
0B42CA 43 
0B42CB 0B 
0B42CC FE    0501** CP	A0H
0B42CD A0 
0B42CE CA    0502** JP	Z, OSBYTE_A0
0B42CF 7F 
0B42D0 43 
0B42D1 0B 
0B42D2 C3    0503** JP	HUH			; Anything else trips an error
0B42D3 F3 
0B42D4 41 
0B42D5 0B 
             0504** 
             0505** ; OSBYTE 0x0B (FX 11,n): Keyboard auto-repeat delay
             0506** ; Parameters:
             0507** ; - HL: Repeat delay
             0508** ;
             0509** OSBYTE_0B:		VDU	23
0B42D6 3E   0001**M LD	A, val
0B42D7 17 
0B42D8 CD   0002**M CALL	OSWRCH
0B42D9 01 
0B42DA 41 
0B42DB 0B 
             0510** VDU	0
0B42DC 3E   0001**M LD	A, val
0B42DD 00 
0B42DE CD   0002**M CALL	OSWRCH
0B42DF 01 
0B42E0 41 
0B42E1 0B 
             0511** VDU	vdp_keystate
0B42E2 3E   0001**M LD	A, val
0B42E3 88 
0B42E4 CD   0002**M CALL	OSWRCH
0B42E5 01 
0B42E6 41 
0B42E7 0B 
             0512** VDU	L
0B42E8 7D   0001**M LD	A, val
0B42E9 CD   0002**M CALL	OSWRCH
0B42EA 01 
0B42EB 41 
0B42EC 0B 
             0513** VDU	H
0B42ED 7C   0001**M LD	A, val
0B42EE CD   0002**M CALL	OSWRCH
0B42EF 01 
0B42F0 41 
0B42F1 0B 
             0514** VDU	0
0B42F2 3E   0001**M LD	A, val
0B42F3 00 
0B42F4 CD   0002**M CALL	OSWRCH
0B42F5 01 
0B42F6 41 
0B42F7 0B 
             0515** VDU 	0
0B42F8 3E   0001**M LD	A, val
0B42F9 00 
0B42FA CD   0002**M CALL	OSWRCH
0B42FB 01 
0B42FC 41 
0B42FD 0B 
             0516** VDU	255
0B42FE 3E   0001**M LD	A, val
0B42FF FF 
0B4300 CD   0002**M CALL	OSWRCH
0B4301 01 
0B4302 41 
0B4303 0B 
0B4304 C9    0517** RET
             0518** 
             0519** ; OSBYTE 0x0C (FX 12,n): Keyboard auto-repeat rate
             0520** ; Parameters:
             0521** ; - HL: Repeat rate
             0522** ;
             0523** OSBYTE_0C:		VDU	23
0B4305 3E   0001**M LD	A, val
0B4306 17 
0B4307 CD   0002**M CALL	OSWRCH
0B4308 01 
0B4309 41 
0B430A 0B 
             0524** VDU	0
0B430B 3E   0001**M LD	A, val
0B430C 00 
0B430D CD   0002**M CALL	OSWRCH
0B430E 01 
0B430F 41 
0B4310 0B 
             0525** VDU	vdp_keystate
0B4311 3E   0001**M LD	A, val
0B4312 88 
0B4313 CD   0002**M CALL	OSWRCH
0B4314 01 
0B4315 41 
0B4316 0B 
             0526** VDU	0
0B4317 3E   0001**M LD	A, val
0B4318 00 
0B4319 CD   0002**M CALL	OSWRCH
0B431A 01 
0B431B 41 
0B431C 0B 
             0527** VDU 	0
0B431D 3E   0001**M LD	A, val
0B431E 00 
0B431F CD   0002**M CALL	OSWRCH
0B4320 01 
0B4321 41 
0B4322 0B 
             0528** VDU	L
0B4323 7D   0001**M LD	A, val
0B4324 CD   0002**M CALL	OSWRCH
0B4325 01 
0B4326 41 
0B4327 0B 
             0529** VDU	H
0B4328 7C   0001**M LD	A, val
0B4329 CD   0002**M CALL	OSWRCH
0B432A 01 
0B432B 41 
0B432C 0B 
             0530** VDU	255
0B432D 3E   0001**M LD	A, val
0B432E FF 
0B432F CD   0002**M CALL	OSWRCH
0B4330 01 
0B4331 41 
0B4332 0B 
0B4333 C9    0531** RET
             0532** 
             0533** ; OSBYTE 0x13 (FX 19): Wait for vertical blank interrupt
             0534** ;
0B4334 CD    0535** OSBYTE_13:		CALL	WAIT_VBLANK
0B4335 3E 
0B4336 43 
0B4337 0B 
0B4338 2E    0536** LD	L, 0			; Returns 0
0B4339 00 
0B433A C3    0537** JP	COUNT0
0B433B 80 
0B433C 07 
0B433D 0B 
             0538** ;
0B433E DD    0539** WAIT_VBLANK:		PUSH 	IX			; Wait for VBLANK interrupt
0B433F E5 
             0540** MOSCALL	mos_sysvars		; Fetch pointer to system variables
0B4340 3E   0001**M LD	A, function
0B4341 08 
0B4342 49   0002**M RST.LIS	08h
0B4343 CF 
0B4344 DD    0541** LD	A, (IX + sysvar_time + 0)
0B4345 7E 
0B4346 00 
0B4347 DD    0542** @@:			CP 	A, (IX + sysvar_time + 0)
0B4348 BE 
0B4349 00 
0B434A 28    0543** JR	Z, @B
0B434B FB 
0B434C DD    0544** POP	IX
0B434D E1 
0B434E C9    0545** RET
             0546** 
             0547** ; OSBYTE 0x76 (FX 118,n): Set Keyboard LED
             0548** ; Parameters:
             0549** ; - L: LED (Bit 0: Scroll Lock, Bit 1: Caps Lock, Bit 2: Num Lock)
             0550** ;
             0551** OSBYTE_76:		VDU	23
0B434F 3E   0001**M LD	A, val
0B4350 17 
0B4351 CD   0002**M CALL	OSWRCH
0B4352 01 
0B4353 41 
0B4354 0B 
             0552** VDU	0
0B4355 3E   0001**M LD	A, val
0B4356 00 
0B4357 CD   0002**M CALL	OSWRCH
0B4358 01 
0B4359 41 
0B435A 0B 
             0553** VDU	vdp_keystate
0B435B 3E   0001**M LD	A, val
0B435C 88 
0B435D CD   0002**M CALL	OSWRCH
0B435E 01 
0B435F 41 
0B4360 0B 
             0554** VDU	0
0B4361 3E   0001**M LD	A, val
0B4362 00 
0B4363 CD   0002**M CALL	OSWRCH
0B4364 01 
0B4365 41 
0B4366 0B 
             0555** VDU 	0
0B4367 3E   0001**M LD	A, val
0B4368 00 
0B4369 CD   0002**M CALL	OSWRCH
0B436A 01 
0B436B 41 
0B436C 0B 
             0556** VDU	0
0B436D 3E   0001**M LD	A, val
0B436E 00 
0B436F CD   0002**M CALL	OSWRCH
0B4370 01 
0B4371 41 
0B4372 0B 
             0557** VDU	0
0B4373 3E   0001**M LD	A, val
0B4374 00 
0B4375 CD   0002**M CALL	OSWRCH
0B4376 01 
0B4377 41 
0B4378 0B 
             0558** VDU	L
0B4379 7D   0001**M LD	A, val
0B437A CD   0002**M CALL	OSWRCH
0B437B 01 
0B437C 41 
0B437D 0B 
0B437E C9    0559** RET
             0560** 
             0561** ; OSBYTE 0xA0: Fetch system variable
             0562** ; Parameters:
             0563** ; - L: The system variable to fetch
             0564** ;
0B437F DD    0565** OSBYTE_A0:		PUSH	IX
0B4380 E5 
             0566** MOSCALL	mos_sysvars		; Fetch pointer to system variables
0B4381 3E   0001**M LD	A, function
0B4382 08 
0B4383 49   0002**M RST.LIS	08h
0B4384 CF 
0B4385 01    0567** LD	BC, 0
0B4386 00 
0B4387 00 
0B4388 00 
0B4389 4D    0568** LD	C, L			; BCU = L
0B438A DD    0569** ADD	IX, BC			; Add to IX
0B438B 09 
0B438C DD    0570** LD	L, (IX + 0)		; Fetch the return value
0B438D 6E 
0B438E 00 
0B438F DD    0571** POP	IX
0B4390 E1 
0B4391 C3    0572** JP 	COUNT0
0B4392 80 
0B4393 07 
0B4394 0B 
             0573** 
             0574** ;OSLOAD - Load an area of memory from a file.
             0575** ;   Inputs: HL addresses filename (CR terminated)
             0576** ;           DE = address at which to load
             0577** ;           BC = maximum allowed size (bytes)
             0578** ;  Outputs: Carry reset indicates no room for file.
             0579** ; Destroys: A,B,C,D,E,H,L,F
             0580** ;
0B4395 C5    0581** OSLOAD:			PUSH	BC			; Stack the size
0B4396 D5    0582** PUSH	DE			; Stack the load address
0B4397 11    0583** LD	DE, ACCS		; Buffer address for filename
0B4398 00 
0B4399 4C 
0B439A 0B 
0B439B CD    0584** CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0B439C 1A 
0B439D 40 
0B439E 0B 
0B439F 21    0585** LD	HL, ACCS		; HL: Filename
0B43A0 00 
0B43A1 4C 
0B43A2 0B 
0B43A3 CD    0586** CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0B43A4 95 
0B43A5 44 
0B43A6 0B 
0B43A7 CD    0587** CALL	EXT_HANDLER		; Get the default handler
0B43A8 A9 
0B43A9 44 
0B43AA 0B 
0B43AB D1    0588** POP	DE			; Restore the load address
0B43AC C1    0589** POP	BC			; Restore the size
0B43AD B7    0590** OR	A
0B43AE 28    0591** JR 	Z, OSLOAD_BBC
0B43AF 60 
             0592** ;
             0593** ; Load the file in as a text file
             0594** ;
0B43B0 AF    0595** OSLOAD_TXT:		XOR	A			; Set file attributes to read
0B43B1 CD    0596** CALL	OSOPEN			; Open the file
0B43B2 1D 
0B43B3 45 
0B43B4 0B 
0B43B5 5F    0597** LD 	E, A 			; The filehandle
0B43B6 B7    0598** OR	A
0B43B7 3E    0599** LD	A, 4			; File not found error
0B43B8 04 
0B43B9 28    0600** JR	Z, OSERROR		; Jump to error handler
0B43BA 5D 
0B43BB CD    0601** CALL	NEWIT			; Call NEW to clear the program space
0B43BC 6D 
0B43BD 3A 
0B43BE 0B 
             0602** ;
0B43BF 21    0603** OSLOAD_TXT1:		LD	HL, ACCS 		; Where the input is going to be stored
0B43C0 00 
0B43C1 4C 
0B43C2 0B 
             0604** ;
             0605** ; First skip any whitespace (indents) at the beginning of the input
             0606** ;
0B43C3 CD    0607** @@:			CALL	OSBGET			; Read the byte into A
0B43C4 34 
0B43C5 45 
0B43C6 0B 
0B43C7 38    0608** JR	C, OSLOAD_TXT3		; Is it EOF?
0B43C8 1E 
0B43C9 FE    0609** CP	LF 			; Is it LF?
0B43CA 0A 
0B43CB 28    0610** JR	Z, OSLOAD_TXT3 		; Yes, so skip to the next line
0B43CC 1A 
0B43CD FE    0611** CP	21h			; Is it less than or equal to ASCII space?
0B43CE 21 
0B43CF 38    0612** JR	C, @B 			; Yes, so keep looping
0B43D0 F2 
0B43D1 77    0613** LD	(HL), A 		; Store the first character
0B43D2 2C    0614** INC	L
             0615** ;
             0616** ; Now read the rest of the line in
             0617** ;
0B43D3 CD    0618** OSLOAD_TXT2:		CALL	OSBGET			; Read the byte into A
0B43D4 34 
0B43D5 45 
0B43D6 0B 
0B43D7 38    0619** JR	C, OSLOAD_TXT4		; Is it EOF?
0B43D8 2B 
0B43D9 FE    0620** CP	20h			; Skip if not an ASCII character
0B43DA 20 
0B43DB 38    0621** JR	C, @F
0B43DC 06 
0B43DD 77    0622** LD	(HL), A 		; Store in the input buffer
0B43DE 2C    0623** INC	L			; Increment the buffer pointer
0B43DF CA    0624** JP	Z, BAD			; If the buffer is full (wrapped to 0) then jump to Bad Program error
0B43E0 F9 
0B43E1 38 
0B43E2 0B 
0B43E3 FE    0625** @@:			CP	LF			; Check for LF
0B43E4 0A 
0B43E5 20    0626** JR	NZ, OSLOAD_TXT2		; If not, then loop to read the rest of the characters in
0B43E6 EC 
             0627** ;
             0628** ; Finally, handle EOL/EOF
             0629** ;
0B43E7 36    0630** OSLOAD_TXT3:		LD	(HL), CR		; Store a CR for BBC BASIC
0B43E8 0D 
0B43E9 7D    0631** LD	A, L			; Check for minimum line length
0B43EA FE    0632** CP	2			; If it is 2 characters or less (including CR)
0B43EB 02 
0B43EC 38    0633** JR	C, @F			; Then don't bother entering it
0B43ED 0A 
0B43EE D5    0634** PUSH	DE			; Preserve the filehandle
0B43EF CD    0635** CALL	ONEDIT1			; Enter the line in memory
0B43F0 DD 
0B43F1 32 
0B43F2 0B 
0B43F3 DC    0636** CALL	C,CLEAN			; If a new line has been entered, then call CLEAN to set TOP and write &FFFF end of program marker
0B43F4 40 
0B43F5 3A 
0B43F6 0B 
0B43F7 D1    0637** POP	DE
0B43F8 CD    0638** @@:			CALL	OSSTAT			; End of file?
0B43F9 45 
0B43FA 45 
0B43FB 0B 
0B43FC 20    0639** JR	NZ, OSLOAD_TXT1		; No, so loop
0B43FD C1 
0B43FE CD    0640** CALL	OSSHUT			; Close the file
0B43FF 2C 
0B4400 45 
0B4401 0B 
0B4402 37    0641** SCF				; Flag to BASIC that we're good
0B4403 C9    0642** RET
             0643** ;
             0644** ; Special case for BASIC programs with no blank line at the end
             0645** ;
0B4404 FE    0646** OSLOAD_TXT4:		CP	20h			; Skip if not an ASCII character
0B4405 20 
0B4406 38    0647** JR	C, @F
0B4407 06 
0B4408 77    0648** LD	(HL), A			; Store the character
0B4409 2C    0649** INC	L
0B440A CA    0650** JP	Z, BAD
0B440B F9 
0B440C 38 
0B440D 0B 
0B440E 18    0651** @@:			JR	OSLOAD_TXT3
0B440F D7 
             0652** 
             0653** ;
             0654** ; Load the file in as a tokenised binary blob
             0655** ;
             0656** OSLOAD_BBC:		MOSCALL	mos_load		; Call LOAD in MOS
0B4410 3E   0001**M LD	A, function
0B4411 01 
0B4412 49   0002**M RST.LIS	08h
0B4413 CF 
0B4414 D0    0657** RET	NC			; If load returns with carry reset - NO ROOM
0B4415 B7    0658** OR	A			; If there is no error (A=0)
0B4416 37    0659** SCF				; Need to set carry indicating there was room
0B4417 C8    0660** RET	Z			; Return
             0661** ;
0B4418 F5    0662** OSERROR:		PUSH	AF			; Handle the MOS error
0B4419 21    0663** LD	HL, ACCS		; Address of the buffer
0B441A 00 
0B441B 4C 
0B441C 0B 
0B441D 01    0664** LD	BC, 256			; Length of the buffer
0B441E 00 
0B441F 01 
0B4420 00 
0B4421 5F    0665** LD	E, A			; The error code
             0666** MOSCALL	mos_getError		; Copy the error message into the buffer
0B4422 3E   0001**M LD	A, function
0B4423 0F 
0B4424 49   0002**M RST.LIS	08h
0B4425 CF 
0B4426 F1    0667** POP	AF
0B4427 E5    0668** PUSH	HL			; Stack the address of the error (now in ACCS)
0B4428 C6    0669** ADD	A, 127			; Add 127 to the error code (MOS errors start at 128, and are trappable)
0B4429 7F 
0B442A C3    0670** JP	EXTERR			; Trigger an external error
0B442B 78 
0B442C 39 
0B442D 0B 
             0671** 
             0672** ;OSSAVE - Save an area of memory to a file.
             0673** ;   Inputs: HL addresses filename (term CR)
             0674** ;           DE = start address of data to save
             0675** ;           BC = length of data to save (bytes)
             0676** ; Destroys: A,B,C,D,E,H,L,F
             0677** ;
0B442E C5    0678** OSSAVE:			PUSH	BC			; Stack the size
0B442F D5    0679** PUSH	DE			; Stack the save address
0B4430 11    0680** LD	DE, ACCS		; Buffer address for filename
0B4431 00 
0B4432 4C 
0B4433 0B 
0B4434 CD    0681** CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0B4435 1A 
0B4436 40 
0B4437 0B 
0B4438 21    0682** LD	HL, ACCS		; HL: Filename
0B4439 00 
0B443A 4C 
0B443B 0B 
0B443C CD    0683** CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0B443D 95 
0B443E 44 
0B443F 0B 
0B4440 CD    0684** CALL	EXT_HANDLER		; Get the default handler
0B4441 A9 
0B4442 44 
0B4443 0B 
0B4444 D1    0685** POP	DE			; Restore the save address
0B4445 C1    0686** POP	BC			; Restore the size
0B4446 B7    0687** OR	A			; Is the extension .BBC
0B4447 28    0688** JR	Z, OSSAVE_BBC		; Yes, so use that
0B4448 44 
             0689** ;
             0690** ; Save the file out as a text file
             0691** ;
0B4449 3A    0692** OSSAVE_TXT:		LD 	A, (OSWRCHCH)		; Stack the current channel
0B444A 45 
0B444B 4F 
0B444C 0B 
0B444D F5    0693** PUSH	AF
0B444E AF    0694** XOR	A
0B444F 3C    0695** INC	A			; Make sure C is clear, A is 1, for OPENOUT
0B4450 32    0696** LD	(OSWRCHCH), A
0B4451 45 
0B4452 4F 
0B4453 0B 
0B4454 CD    0697** CALL	OSOPEN			; Open the file
0B4455 1D 
0B4456 45 
0B4457 0B 
0B4458 32    0698** LD	(OSWRCHFH), A		; Store the file handle for OSWRCH
0B4459 46 
0B445A 4F 
0B445B 0B 
0B445C DD    0699** LD	IX, LISTON		; Required for LISTIT
0B445D 21 
0B445E 40 
0B445F 4F 
0B445F 0B   
0B4461 2A    0700** LD	HL, (PAGE_)		; Get start of program area
0B4462 14 
0B4463 4F 
0B4464 0B 
0B4465 D9    0701** EXX
0B4466 01    0702** LD	BC, 0			; Set the initial indent counters
0B4467 00 
0B4468 00 
0B4469 00 
0B446A D9    0703** EXX
0B446B 7E    0704** OSSAVE_TXT1:		LD	A, (HL)			; Check for end of program marker
0B446C B7    0705** OR	A
0B446D 28    0706** JR	Z, OSSAVE_TXT2
0B446E 0F 
0B446F 23    0707** INC	HL			; Skip the length byte
0B4470 11    0708** LD	DE, 0			; Clear DE to ensure we get a 16-bit line number
0B4471 00 
0B4472 00 
0B4473 00 
0B4474 5E    0709** LD	E, (HL)			; Get the line number
0B4475 23    0710** INC	HL
0B4476 56    0711** LD	D, (HL)
0B4477 23    0712** INC	HL
0B4478 CD    0713** CALL	LISTIT			; List the line
0B4479 93 
0B447A 3A 
0B447B 0B 
0B447C 18    0714** JR	OSSAVE_TXT1
0B447D ED 
0B447E 3A    0715** OSSAVE_TXT2:		LD	A, (OSWRCHFH)		; Get the file handle
0B447F 46 
0B4480 4F 
0B4481 0B 
0B4482 5F    0716** LD	E, A
0B4483 CD    0717** CALL	OSSHUT			; Close it
0B4484 2C 
0B4485 45 
0B4486 0B 
0B4487 F1    0718** POP	AF			; Restore the channel
0B4488 32    0719** LD	(OSWRCHCH), A
0B4489 45 
0B448A 4F 
0B448B 0B 
0B448C C9    0720** RET
             0721** ;
             0722** ; Save the file out as a tokenised binary blob
             0723** ;
             0724** OSSAVE_BBC:		MOSCALL	mos_save		; Call SAVE in MOS
0B448D 3E   0001**M LD	A, function
0B448E 02 
0B448F 49   0002**M RST.LIS	08h
0B4490 CF 
0B4491 B7    0725** OR	A			; If there is no error (A=0)
0B4492 C8    0726** RET	Z			; Just return
0B4493 18    0727** JR	OSERROR			; Trip an error
0B4494 83 
             0728** 
             0729** ; Check if an extension is specified in the filename
             0730** ; Add a default if not specified
             0731** ; HL: Filename (CSTR format)
             0732** ;
0B4495 E5    0733** EXT_DEFAULT:		PUSH	HL			; Stack the filename pointer
0B4496 0E    0734** LD	C, '.'			; Search for dot (marks start of extension)
0B4497 2E 
0B4498 CD    0735** CALL	CSTR_FINDCH
0B4499 3A 
0B449A 40 
0B449B 0B 
0B449C B7    0736** OR	A			; Check for end of string marker
0B449D 20    0737** JR	NZ, @F			; No, so skip as we have an extension at this point
0B449E 08 
0B449F 11    0738** LD	DE, EXT_LOOKUP		; Get the first (default extension)
0B44A0 D9 
0B44A1 44 
0B44A2 0B 
0B44A3 CD    0739** CALL	CSTR_CAT		; Concat it to string pointed to by HL
0B44A4 51 
0B44A5 40 
0B44A6 0B 
0B44A7 E1    0740** @@:			POP	HL			; Restore the filename pointer
0B44A8 C9    0741** RET
             0742** 
             0743** ; Check if an extension is valid and, if so, provide a pointer to a handler
             0744** ; HL: Filename (CSTR format)
             0745** ; Returns:
             0746** ;  A: Filename extension type (0=BBC tokenised, 1=ASCII untokenised)
             0747** ;
0B44A9 E5    0748** EXT_HANDLER:		PUSH	HL			; Stack the filename pointer
0B44AA 0E    0749** LD	C, '.'			; Find the '.'
0B44AB 2E 
0B44AC CD    0750** CALL	CSTR_FINDCH
0B44AD 3A 
0B44AE 40 
0B44AF 0B 
0B44B0 11    0751** LD	DE, EXT_LOOKUP		; The lookup table
0B44B1 D9 
0B44B2 44 
0B44B3 0B 
             0752** ;
0B44B4 E5    0753** EXT_HANDLER_1:		PUSH	HL			; Stack the pointer to the extension
0B44B5 CD    0754** CALL	CSTR_ENDSWITH		; Check whether the string ends with the entry in the lookup
0B44B6 42 
0B44B7 40 
0B44B8 0B 
0B44B9 E1    0755** POP	HL			; Restore the pointer to the extension
0B44BA 28    0756** JR	Z, EXT_HANDLER_2	; We have a match!
0B44BB 19 
             0757** ;
0B44BC 1A    0758** @@:			LD	A, (DE)			; Skip to the end of the entry in the lookup
0B44BD 13    0759** INC	DE
0B44BE B7    0760** OR	A
0B44BF 20    0761** JR	NZ, @B
0B44C0 FB 
0B44C1 13    0762** INC	DE			; Skip the file extension # byte
             0763** ;
0B44C2 1A    0764** LD	A, (DE)			; Are we at the end of the table?
0B44C3 B7    0765** OR	A
0B44C4 20    0766** JR	NZ, EXT_HANDLER_1	; No, so loop
0B44C5 EE 
             0767** ;
0B44C6 3E    0768** LD      A,204			; Throw a "Bad name" error
0B44C7 CC 
0B44C8 CD    0769** CALL    EXTERR
0B44C9 78 
0B44CA 39 
0B44CB 0B 
0B44CC 42    0770** DB    	"Bad name", 0
0B44CD 61 
0B44CE 64 
0B44CF 20 
0B44CF 6E   
0B44D0 61 
0B44D1 6D 
0B44D2 65 
0B44D2 00   
             0771** ;
0B44D5 13    0772** EXT_HANDLER_2:		INC	DE			; Skip to the file extension # byte
0B44D6 1A    0773** LD	A, (DE)
0B44D7 E1    0774** POP	HL			; Restore the filename pointer
0B44D8 C9    0775** RET
             0776** ;
             0777** 
             0778** 
             0779** ; Extension lookup table
             0780** ; CSTR, TYPE
             0781** ; 	- 0: BBC (tokenised BBC BASIC for Z80 format)
             0782** ; 	- 1: Human readable plain text
             0783** ;
0B44D9 2E    0784** EXT_LOOKUP:		DB	".BBC", 0, 0		; First entry is the default extension
0B44DA 42 
0B44DB 42 
0B44DC 43 
0B44DC 00   
0B44DD 00 
0B44DF 2E    0785** DB	".TXT", 0, 1
0B44E0 54 
0B44E1 58 
0B44E2 54 
0B44E2 00   
0B44E3 01 
0B44E5 2E    0786** DB	".ASC", 0, 1
0B44E6 41 
0B44E7 53 
0B44E8 43 
0B44E8 00   
0B44E9 01 
0B44EB 2E    0787** DB	".BAS", 0, 1
0B44EC 42 
0B44ED 41 
0B44EE 53 
0B44EE 00   
0B44EF 01 
0B44F1 00    0788** DB	0			; End of table
             0789** 
             0790** ;OSCALL - Intercept page &FF calls and provide an alternative address
             0791** ;
             0792** ;&FFF7:	OSCLI	Execute *command.
             0793** ;&FFF4:	OSBYTE	Various byte-wide functions.
             0794** ;&FFF1:	OSWORD	Various control block functions.
             0795** ;&FFEE:	OSWRCH	Write character to output stream.
             0796** ;&FFE7:	OSNEWL	Write NewLine to output stream.
             0797** ;&FFE3:	OSASCI	Write character or NewLine to output stream.
             0798** ;&FFE0:	OSRDCH	Wait for character from input stream.
             0799** ;&FFDD:	OSFILE	Perform actions on whole files or directories.
             0800** ;&FFDA:	OSARGS	Read and write information on open files or filing systems.
             0801** ;&FFD7:	OSBGET	Read a byte from an a channel.
             0802** ;&FFD4:	OSBPUT	Write a byte to a channel.
             0803** ;&FFD1:	OSGBPB	Read and write blocks of data.
             0804** ;&FFCE:	OSFIND	Open or close a file.
             0805** ;
0B44F2 21    0806** OSCALL:			LD	HL, OSCALL_TABLE
0B44F3 08 
0B44F4 45 
0B44F5 0B 
0B44F6 7E    0807** OSCALL_1:		LD	A, (HL)
0B44F7 23    0808** INC	HL
0B44F8 FE    0809** CP	FFh
0B44F9 FF 
0B44FA C8    0810** RET	Z
0B44FB FD    0811** CP	A, IYL
0B44FC BD 
0B44FD 28    0812** JR	Z, OSCALL_2
0B44FE 06 
0B44FF D0    0813** RET	NC
0B4500 23    0814** INC	HL
0B4501 23    0815** INC	HL
0B4502 23    0816** INC	HL
0B4503 18    0817** JR	OSCALL_1
0B4504 F1 
0B4505 ED    0818** OSCALL_2:		LD	IY,(HL)
0B4506 31 
0B4507 C9    0819** RET
0B4508 D4    0820** OSCALL_TABLE:		DB 	D4h
0B4509 3C    0821** DW24 	OSBPUT
0B450A 45 
0B450B 0B 
0B450C D7    0822** DB 	D7h
0B450D 34    0823** DW24 	OSBGET
0B450E 45 
0B450F 0B 
0B4510 EE    0824** DB 	EEh
0B4511 01    0825** DW24 	OSWRCH
0B4512 41 
0B4513 0B 
0B4514 F4    0826** DB	F4h
0B4515 BA    0827** DW24 	OSBYTE
0B4516 42 
0B4517 0B 
0B4518 F7    0828** DB	F7h
0B4519 91    0829** DW24	OSCLI
0B451A 41 
0B451B 0B 
0B451C FF    0830** DB	FFh
             0831** 
             0832** ; OSOPEN
             0833** ; HL: Pointer to path
             0834** ;  F: C Z
             0835** ;     x x OPENIN
             0836** ; 	  OPENOUT
             0837** ;     x	  OPENUP
             0838** ; Returns:
             0839** ;  A: Filehandle, 0 if cannot open
             0840** ;
0B451D 0E    0841** OSOPEN:			LD	C, fa_read
0B451E 01 
0B451F 28    0842** JR	Z, @F
0B4520 06 
0B4521 0E    0843** LD	C, fa_write | fa_open_append
0B4522 32 
0B4523 38    0844** JR	C, @F
0B4524 02 
0B4525 0E    0845** LD	C, fa_write | fa_create_always
0B4526 0A 
             0846** @@:			MOSCALL	mos_fopen
0B4527 3E   0001**M LD	A, function
0B4528 0A 
0B4529 49   0002**M RST.LIS	08h
0B452A CF 
0B452B C9    0847** RET
             0848** 
             0849** ;OSSHUT - Close disk file(s).
             0850** ; E = file channel
             0851** ;  If E=0 all files are closed (except SPOOL)
             0852** ; Destroys: A,B,C,D,E,H,L,F
             0853** ;
0B452C C5    0854** OSSHUT:			PUSH	BC
0B452D 4B    0855** LD	C, E
             0856** MOSCALL	mos_fclose
0B452E 3E   0001**M LD	A, function
0B452F 0B 
0B4530 49   0002**M RST.LIS	08h
0B4531 CF 
0B4532 C1    0857** POP	BC
0B4533 C9    0858** RET
             0859** 
             0860** ; OSBGET - Read a byte from a random disk file.
             0861** ;  E = file channel
             0862** ; Returns
             0863** ;  A = byte read
             0864** ;  Carry set if LAST BYTE of file
             0865** ; Destroys: A,B,C,F
             0866** ;
0B4534 C5    0867** OSBGET:			PUSH	BC
0B4535 4B    0868** LD	C, E
             0869** MOSCALL	mos_fgetc
0B4536 3E   0001**M LD	A, function
0B4537 0C 
0B4538 49   0002**M RST.LIS	08h
0B4539 CF 
0B453A C1    0870** POP	BC
0B453B C9    0871** RET
             0872** 
             0873** ; OSBPUT - Write a byte to a random disk file.
             0874** ;  E = file channel
             0875** ;  A = byte to write
             0876** ; Destroys: A,B,C,F
             0877** ;
0B453C C5    0878** OSBPUT:			PUSH	BC
0B453D 4B    0879** LD	C, E
0B453E 47    0880** LD	B, A
             0881** MOSCALL	mos_fputc
0B453F 3E   0001**M LD	A, function
0B4540 0D 
0B4541 49   0002**M RST.LIS	08h
0B4542 CF 
0B4543 C1    0882** POP	BC
0B4544 C9    0883** RET
             0884** 
             0885** ; OSSTAT - Read file status
             0886** ;  E = file channel
             0887** ; Returns
             0888** ;  F: Z flag set - EOF
             0889** ;  A: If Z then A = 0
             0890** ; Destroys: A,D,E,H,L,F
             0891** ;
0B4545 C5    0892** OSSTAT:			PUSH	BC
0B4546 4B    0893** LD	C, E
             0894** MOSCALL	mos_feof
0B4547 3E   0001**M LD	A, function
0B4548 0E 
0B4549 49   0002**M RST.LIS	08h
0B454A CF 
0B454B C1    0895** POP	BC
0B454C FE    0896** CP	1
0B454D 01 
0B454E C9    0897** RET
             0898** 
             0899** ; GETPTR - Return file pointer.
             0900** ;    E = file channel
             0901** ; Returns:
             0902** ; DEHL = pointer (0-&7FFFFF)
             0903** ; Destroys: A,B,C,D,E,H,L,F
             0904** ;
0B454F FD    0905** GETPTR:			PUSH		IY
0B4550 E5 
0B4551 4B    0906** LD		C, E
             0907** MOSCALL		mos_getfil 	; HLU: Pointer to FIL structure
0B4552 3E   0001**M LD	A, function
0B4553 19 
0B4554 49   0002**M RST.LIS	08h
0B4555 CF 
0B4556 E5    0908** PUSH		HL
0B4557 FD    0909** POP		IY		; IYU: Pointer to FIL structure
0B4558 E1 
0B4559 FD    0910** LD		L, (IY + FIL.fptr + 0)
0B455A 6E 
0B455B 11 
0B455C FD    0911** LD		H, (IY + FIL.fptr + 1)
0B455D 66 
0B455E 12 
0B455F FD    0912** LD		E, (IY + FIL.fptr + 2)
0B4560 5E 
0B4561 13 
0B4562 FD    0913** LD		D, (IY + FIL.fptr + 3)
0B4563 56 
0B4564 14 
0B4565 FD    0914** POP		IY
0B4566 E1 
0B4567 C9    0915** RET
             0916** 
             0917** ; PUTPTR - Update file pointer.
             0918** ;    A = file channel
             0919** ; DEHL = new pointer (0-&7FFFFF)
             0920** ; Destroys: A,B,C,D,E,H,L,F
             0921** ;
0B4568 FD    0922** PUTPTR:			PUSH		IY
0B4569 E5 
0B456A 4F    0923** LD		C, A  		; C: Filehandle
0B456B E5    0924** PUSH		HL
0B456C 21    0925** LD		HL, 2
0B456D 02 
0B456E 00 
0B456F 00 
0B4570 39    0926** ADD		HL, SP
0B4571 73    0927** LD		(HL), E 	; 3rd byte of DWORD set to E
0B4572 E1    0928** POP		HL
0B4573 5A    0929** LD		E, D  		; 4th byte passed as E
             0930** MOSCALL		mos_flseek
0B4574 3E   0001**M LD	A, function
0B4575 1C 
0B4576 49   0002**M RST.LIS	08h
0B4577 CF 
0B4578 FD    0931** POP		IY
0B4579 E1 
0B457A C9    0932** RET
             0933** 
             0934** ; GETEXT - Find file size.
             0935** ;    E = file channel
             0936** ; Returns:
             0937** ; DEHL = file size (0-&800000)
             0938** ; Destroys: A,B,C,D,E,H,L,F
             0939** ;
0B457B FD    0940** GETEXT:         PUSH    IY
0B457C E5 
0B457D 4B    0941** LD      C, E
             0942** MOSCALL mos_getfil  ; HLU: Pointer to FIL structure
0B457E 3E   0001**M LD	A, function
0B457F 19 
0B4580 49   0002**M RST.LIS	08h
0B4581 CF 
0B4582 E5    0943** PUSH    HL
0B4583 FD    0944** POP     IY          ; IYU: Pointer to FIL structure
0B4584 E1 
             0945** ; Access the obj.objsize field using the offset values
0B4585 FD    0946** LD      L, (IY + FIL.obj + FFOBJID.objsize + 0)
0B4586 6E 
0B4587 0B 
0B4588 FD    0947** LD      H, (IY + FIL.obj + FFOBJID.objsize + 1)
0B4589 66 
0B458A 0C 
0B458B FD    0948** LD      E, (IY + FIL.obj + FFOBJID.objsize + 2)
0B458C 5E 
0B458D 0D 
0B458E FD    0949** LD      D, (IY + FIL.obj + FFOBJID.objsize + 3)
0B458F 56 
0B4590 0E 
             0950** 
0B4591 FD    0951** POP     IY
0B4592 E1 
0B4593 C9    0952** RET
             0953** 
             0954** ; GETIMS - Get time from RTC
             0955** ;
0B4594 FD    0956** GETIMS:			PUSH	IY
0B4595 E5 
0B4596 21    0957** LD	HL, ACCS 		; Where to store the time string
0B4597 00 
0B4598 4C 
0B4599 0B 
             0958** MOSCALL	mos_getrtc
0B459A 3E   0001**M LD	A, function
0B459B 12 
0B459C 49   0002**M RST.LIS	08h
0B459D CF 
0B459E 11    0959** LD	DE, ACCS		; DE: pointer to start of string accumulator
0B459F 00 
0B45A0 4C 
0B45A1 0B 
0B45A2 5F    0960** LD	E, A 			;  E: now points to the end of the string
0B45A3 FD    0961** POP	IY
0B45A4 E1 
0B45A5 C9    0962** RET
             0963** 
             0964** ; Get two word values from EXPR in DE, HL
             0965** ; IY: Pointer to expression string
             0966** ; Returns:
             0967** ; DE: P1
             0968** ; HL: P2
             0969** ;
0B45A6 CD    0970** EXPR_W2:		CALL	EXPRI			; Get first parameter
0B45A7 0B 
0B45A8 05 
0B45A9 0B 
0B45AA D9    0971** EXX
0B45AB E5    0972** PUSH	HL
0B45AC CD    0973** CALL	COMMA
0B45AD 23 
0B45AE 0C 
0B45AF 0B 
0B45B0 CD    0974** CALL	EXPRI			; Get second parameter
0B45B1 0B 
0B45B2 05 
0B45B3 0B 
0B45B4 D9    0975** EXX
0B45B5 D1    0976** POP	DE
0B45B6 C9    0977** RET
             0978** 
             0979** ; Stuff not implemented yet
             0980** ;
0B45B7 C9    0981** RESET:			RET
              0012* include "basic/sorry.asm"
             0001** ;
             0002** ; Title:	BBC Basic Interpreter - Z80 version
             0003** ;		Catch-all for unimplemented functionality
             0004** ; Author:	Dean Belfield
             0005** ; Created:	12/05/2023
             0006** ; Last Updated:	12/05/2023
             0007** ;
             0008** ; Modinfo:
             0009** 
             0010** ; .ASSUME	ADL = 1
             0011** 
             0012** ; SEGMENT CODE
             0013** 
             0014** ; XDEF	ENVEL
             0015** ; XDEF	ADVAL
             0016** ; XDEF	PUTIMS
             0017** 
             0018** ; XREF	EXTERR
             0019** 
             0020** ENVEL:
             0021** ADVAL:
             0022** PUTIMS:
0B45B8 AF    0023** XOR     A
0B45B9 CD    0024** CALL    EXTERR
0B45BA 78 
0B45BB 39 
0B45BC 0B 
0B45BD 53    0025** DEFB    "Sorry"
0B45BE 6F 
0B45BF 72 
0B45C0 72 
0B45C0 79   
0B45C2 00    0026** DEFB    0
              0013* include "basic/agon_graphics.asm"
             0001** ;
             0002** ; Title:	BBC Basic for AGON - Graphics stuff
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	07/06/2023
             0006** ;
             0007** ; Modinfo:
             0008** ; 07/06/2023:	Modified to run in ADL mode
             0009** 
             0010** ; .ASSUME	ADL = 1
             0011** 
             0012** ; INCLUDE	"equs.inc"
             0013** ; INCLUDE "macros.inc"
             0014** ; INCLUDE "mos_api.inc"	; In MOS/src
             0015** 
             0016** ; SEGMENT CODE
             0017** 
             0018** ; XDEF	CLG
             0019** ; XDEF	CLRSCN
             0020** ; XDEF	MODE
             0021** ; XDEF	COLOUR
             0022** ; XDEF	GCOL
             0023** ; XDEF	MOVE
             0024** ; XDEF	PLOT
             0025** ; XDEF	DRAW
             0026** ; XDEF	POINT
             0027** ; XDEF	GETSCHR
             0028** 
             0029** ; XREF	OSWRCH
             0030** ; XREF	ASC_TO_NUMBER
             0031** ; XREF	EXTERR
             0032** ; XREF	EXPRI
             0033** ; XREF	COMMA
             0034** ; XREF	XEQ
             0035** ; XREF	NXT
             0036** ; XREF	BRAKET
             0037** ; XREF	COUNT0
             0038** ; XREF	CRTONULL
             0039** ; XREF	NULLTOCR
             0040** ; XREF	CRLF
             0041** ; XREF	EXPR_W2
             0042** ; XREF	INKEY1
             0043** 
             0044** ; CLG: clears the graphics area
             0045** ;
             0046** CLG:
             0047** 
             0048** VDU	10h
0B45C3 3E   0001**M LD	A, val
0B45C4 10 
0B45C5 CD   0002**M CALL	OSWRCH
0B45C6 01 
0B45C7 41 
0B45C8 0B 
0B45C9 C3    0049** JP	XEQ
0B45CA 97 
0B45CB 0D 
0B45CC 0B 
             0050** 
             0051** ; CLS: clears the text area
             0052** ;
0B45CD 3E    0053** CLRSCN:			LD	A, 0Ch
0B45CE 0C 
0B45CF C3    0054** JP	OSWRCH
0B45D0 01 
0B45D1 41 
0B45D2 0B 
             0055** 
             0056** ; MODE n: Set video mode
             0057** ;
0B45D3 DD    0058** MODE:			PUSH	IX			; Get the system vars in IX
0B45D4 E5 
             0059** MOSCALL	mos_sysvars		; Reset the semaphore
0B45D5 3E   0001**M LD	A, function
0B45D6 08 
0B45D7 49   0002**M RST.LIS	08h
0B45D8 CF 
0B45D9 DD    0060** RES	4, (IX+sysvar_vpd_pflags)
0B45DA CB 
0B45DB 04 
0B45DC A6 
0B45DD CD    0061** CALL    EXPRI
0B45DE 0B 
0B45DF 05 
0B45E0 0B 
0B45E1 D9    0062** EXX
             0063** VDU	16H			; Mode change
0B45E2 3E   0001**M LD	A, val
0B45E3 16 
0B45E4 CD   0002**M CALL	OSWRCH
0B45E5 01 
0B45E6 41 
0B45E7 0B 
             0064** VDU	L
0B45E8 7D   0001**M LD	A, val
0B45E9 CD   0002**M CALL	OSWRCH
0B45EA 01 
0B45EB 41 
0B45EC 0B 
             0065** MOSCALL	mos_sysvars
0B45ED 3E   0001**M LD	A, function
0B45EE 08 
0B45EF 49   0002**M RST.LIS	08h
0B45F0 CF 
0B45F1 DD    0066** @@:			BIT	4, (IX+sysvar_vpd_pflags)
0B45F2 CB 
0B45F3 04 
0B45F4 66 
0B45F5 28    0067** JR	Z, @B			; Wait for the result
0B45F6 FA 
0B45F7 DD    0068** POP	IX
0B45F8 E1 
0B45F9 C3    0069** JP	XEQ
0B45FA 97 
0B45FB 0D 
0B45FC 0B 
             0070** 
             0071** ; GET(x,y): Get the ASCII code of a character on screen
             0072** ;
0B45FD FD    0073** GETSCHR:		INC	IY
0B45FE 23 
0B45FF CD    0074** CALL    EXPRI      		; Get X coordinate
0B4600 0B 
0B4601 05 
0B4602 0B 
0B4603 D9    0075** EXX
0B4604 22    0076** LD	(VDU_BUFFER+0), HL
0B4605 00 
0B4606 4C 
0B4607 0B 
0B4608 CD    0077** CALL	COMMA
0B4609 23 
0B460A 0C 
0B460B 0B 
0B460C CD    0078** CALL	EXPRI			; Get Y coordinate
0B460D 0B 
0B460E 05 
0B460F 0B 
0B4610 D9    0079** EXX
0B4611 22    0080** LD	(VDU_BUFFER+2), HL
0B4612 02 
0B4613 4C 
0B4614 0B 
0B4615 CD    0081** CALL	BRAKET			; Closing bracket
0B4616 30 
0B4617 0C 
0B4618 0B 
             0082** ;
0B4619 DD    0083** PUSH	IX			; Get the system vars in IX
0B461A E5 
             0084** MOSCALL	mos_sysvars		; Reset the semaphore
0B461B 3E   0001**M LD	A, function
0B461C 08 
0B461D 49   0002**M RST.LIS	08h
0B461E CF 
0B461F DD    0085** RES	1, (IX+sysvar_vpd_pflags)
0B4620 CB 
0B4621 04 
0B4622 8E 
             0086** VDU	23
0B4623 3E   0001**M LD	A, val
0B4624 17 
0B4625 CD   0002**M CALL	OSWRCH
0B4626 01 
0B4627 41 
0B4628 0B 
             0087** VDU	0
0B4629 3E   0001**M LD	A, val
0B462A 00 
0B462B CD   0002**M CALL	OSWRCH
0B462C 01 
0B462D 41 
0B462E 0B 
             0088** VDU	vdp_scrchar
0B462F 3E   0001**M LD	A, val
0B4630 83 
0B4631 CD   0002**M CALL	OSWRCH
0B4632 01 
0B4633 41 
0B4634 0B 
             0089** VDU	(VDU_BUFFER+0)
0B4635 3A   0001**M LD	A, val
0B4636 00 
0B4637 4C 
0B4638 0B 
0B4639 CD   0002**M CALL	OSWRCH
0B463A 01 
0B463B 41 
0B463C 0B 
             0090** VDU	(VDU_BUFFER+1)
0B463D 3A   0001**M LD	A, val
0B463E 01 
0B463F 4C 
0B4640 0B 
0B4641 CD   0002**M CALL	OSWRCH
0B4642 01 
0B4643 41 
0B4644 0B 
             0091** VDU	(VDU_BUFFER+2)
0B4645 3A   0001**M LD	A, val
0B4646 02 
0B4647 4C 
0B4648 0B 
0B4649 CD   0002**M CALL	OSWRCH
0B464A 01 
0B464B 41 
0B464C 0B 
             0092** VDU	(VDU_BUFFER+3)
0B464D 3A   0001**M LD	A, val
0B464E 03 
0B464F 4C 
0B4650 0B 
0B4651 CD   0002**M CALL	OSWRCH
0B4652 01 
0B4653 41 
0B4654 0B 
0B4655 DD    0093** @@:			BIT	1, (IX+sysvar_vpd_pflags)
0B4656 CB 
0B4657 04 
0B4658 4E 
0B4659 28    0094** JR	Z, @B			; Wait for the result
0B465A FA 
0B465B DD    0095** LD	A, (IX+sysvar_scrchar)	; Fetch the result in A
0B465C 7E 
0B465D 09 
0B465E B7    0096** OR	A			; Check for 00h
0B465F 37    0097** SCF				; C = character map
0B4660 20    0098** JR	NZ, @F			; We have a character, so skip next bit
0B4661 02 
0B4662 AF    0099** XOR	A			; Clear carry
0B4663 3D    0100** DEC	A			; Set A to FFh
0B4664 DD    0101** @@:			POP	IX
0B4665 E1 
0B4666 C3    0102** JP	INKEY1			; Jump back to the GET command
0B4667 E2 
0B4668 09 
0B4669 0B 
             0103** 
             0104** ; POINT(x,y): Get the pixel colour of a point on screen
             0105** ;
0B466A CD    0106** POINT:			CALL    EXPRI      		; Get X coordinate
0B466B 0B 
0B466C 05 
0B466D 0B 
0B466E D9    0107** EXX
0B466F 22    0108** LD	(VDU_BUFFER+0), HL
0B4670 00 
0B4671 4C 
0B4672 0B 
0B4673 CD    0109** CALL	COMMA
0B4674 23 
0B4675 0C 
0B4676 0B 
0B4677 CD    0110** CALL	EXPRI			; Get Y coordinate
0B4678 0B 
0B4679 05 
0B467A 0B 
0B467B D9    0111** EXX
0B467C 22    0112** LD	(VDU_BUFFER+2), HL
0B467D 02 
0B467E 4C 
0B467F 0B 
0B4680 CD    0113** CALL	BRAKET			; Closing bracket
0B4681 30 
0B4682 0C 
0B4683 0B 
             0114** ;
0B4684 DD    0115** PUSH	IX			; Get the system vars in IX
0B4685 E5 
             0116** MOSCALL	mos_sysvars		; Reset the semaphore
0B4686 3E   0001**M LD	A, function
0B4687 08 
0B4688 49   0002**M RST.LIS	08h
0B4689 CF 
0B468A DD    0117** RES	2, (IX+sysvar_vpd_pflags)
0B468B CB 
0B468C 04 
0B468D 96 
             0118** VDU	23
0B468E 3E   0001**M LD	A, val
0B468F 17 
0B4690 CD   0002**M CALL	OSWRCH
0B4691 01 
0B4692 41 
0B4693 0B 
             0119** VDU	0
0B4694 3E   0001**M LD	A, val
0B4695 00 
0B4696 CD   0002**M CALL	OSWRCH
0B4697 01 
0B4698 41 
0B4699 0B 
             0120** VDU	vdp_scrpixel
0B469A 3E   0001**M LD	A, val
0B469B 84 
0B469C CD   0002**M CALL	OSWRCH
0B469D 01 
0B469E 41 
0B469F 0B 
             0121** VDU	(VDU_BUFFER+0)
0B46A0 3A   0001**M LD	A, val
0B46A1 00 
0B46A2 4C 
0B46A3 0B 
0B46A4 CD   0002**M CALL	OSWRCH
0B46A5 01 
0B46A6 41 
0B46A7 0B 
             0122** VDU	(VDU_BUFFER+1)
0B46A8 3A   0001**M LD	A, val
0B46A9 01 
0B46AA 4C 
0B46AB 0B 
0B46AC CD   0002**M CALL	OSWRCH
0B46AD 01 
0B46AE 41 
0B46AF 0B 
             0123** VDU	(VDU_BUFFER+2)
0B46B0 3A   0001**M LD	A, val
0B46B1 02 
0B46B2 4C 
0B46B3 0B 
0B46B4 CD   0002**M CALL	OSWRCH
0B46B5 01 
0B46B6 41 
0B46B7 0B 
             0124** VDU	(VDU_BUFFER+3)
0B46B8 3A   0001**M LD	A, val
0B46B9 03 
0B46BA 4C 
0B46BB 0B 
0B46BC CD   0002**M CALL	OSWRCH
0B46BD 01 
0B46BE 41 
0B46BF 0B 
0B46C0 DD    0125** @@:			BIT	2, (IX+sysvar_vpd_pflags)
0B46C1 CB 
0B46C2 04 
0B46C3 56 
0B46C4 28    0126** JR	Z, @B			; Wait for the result
0B46C5 FA 
             0127** ;
             0128** ; Return the data as a 1 byte index
             0129** ;
0B46C6 DD    0130** LD	L, (IX+sysvar_scrpixelIndex)
0B46C7 6E 
0B46C8 16 
0B46C9 DD    0131** POP	IX
0B46CA E1 
0B46CB C3    0132** JP	COUNT0
0B46CC 80 
0B46CD 07 
0B46CE 0B 
             0133** 
             0134** 
             0135** ; COLOUR colour
             0136** ; COLOUR L,P
             0137** ; COLOUR L,R,G,B
             0138** ;
0B46CF CD    0139** COLOUR:			CALL	EXPRI			; The colour / mode
0B46D0 0B 
0B46D1 05 
0B46D2 0B 
0B46D3 D9    0140** EXX
0B46D4 7D    0141** LD	A, L
0B46D5 32    0142** LD	(VDU_BUFFER+0), A	; Store first parameter
0B46D6 00 
0B46D7 4C 
0B46D8 0B 
0B46D9 CD    0143** CALL	NXT			; Are there any more parameters?
0B46DA 71 
0B46DB 0C 
0B46DC 0B 
0B46DD FE    0144** CP	','
0B46DE 2C 
0B46DF 28    0145** JR	Z, COLOUR_1		; Yes, so we're doing a palette change next
0B46E0 12 
             0146** ;
             0147** VDU	11h			; Just set the colour
0B46E1 3E   0001**M LD	A, val
0B46E2 11 
0B46E3 CD   0002**M CALL	OSWRCH
0B46E4 01 
0B46E5 41 
0B46E6 0B 
             0148** VDU	(VDU_BUFFER+0)
0B46E7 3A   0001**M LD	A, val
0B46E8 00 
0B46E9 4C 
0B46EA 0B 
0B46EB CD   0002**M CALL	OSWRCH
0B46EC 01 
0B46ED 41 
0B46EE 0B 
0B46EF C3    0149** JP	XEQ
0B46F0 97 
0B46F1 0D 
0B46F2 0B 
             0150** ;
0B46F3 CD    0151** COLOUR_1:		CALL	COMMA
0B46F4 23 
0B46F5 0C 
0B46F6 0B 
0B46F7 CD    0152** CALL	EXPRI			; Parse R (OR P)
0B46F8 0B 
0B46F9 05 
0B46FA 0B 
0B46FB D9    0153** EXX
0B46FC 7D    0154** LD	A, L
0B46FD 32    0155** LD	(VDU_BUFFER+1), A
0B46FE 01 
0B46FF 4C 
0B4700 0B 
0B4701 CD    0156** CALL	NXT			; Are there any more parameters?
0B4702 71 
0B4703 0C 
0B4704 0B 
0B4705 FE    0157** CP	','
0B4706 2C 
0B4707 28    0158** JR	Z, COLOUR_2		; Yes, so we're doing COLOUR L,R,G,B
0B4708 2C 
             0159** ;
             0160** VDU	13h			; VDU:COLOUR
0B4709 3E   0001**M LD	A, val
0B470A 13 
0B470B CD   0002**M CALL	OSWRCH
0B470C 01 
0B470D 41 
0B470E 0B 
             0161** VDU	(VDU_BUFFER+0)		; Logical Colour
0B470F 3A   0001**M LD	A, val
0B4710 00 
0B4711 4C 
0B4712 0B 
0B4713 CD   0002**M CALL	OSWRCH
0B4714 01 
0B4715 41 
0B4716 0B 
             0162** VDU	(VDU_BUFFER+1)		; Palette Colour
0B4717 3A   0001**M LD	A, val
0B4718 01 
0B4719 4C 
0B471A 0B 
0B471B CD   0002**M CALL	OSWRCH
0B471C 01 
0B471D 41 
0B471E 0B 
             0163** VDU	0			; RGB set to 0
0B471F 3E   0001**M LD	A, val
0B4720 00 
0B4721 CD   0002**M CALL	OSWRCH
0B4722 01 
0B4723 41 
0B4724 0B 
             0164** VDU	0
0B4725 3E   0001**M LD	A, val
0B4726 00 
0B4727 CD   0002**M CALL	OSWRCH
0B4728 01 
0B4729 41 
0B472A 0B 
             0165** VDU	0
0B472B 3E   0001**M LD	A, val
0B472C 00 
0B472D CD   0002**M CALL	OSWRCH
0B472E 01 
0B472F 41 
0B4730 0B 
0B4731 C3    0166** JP	XEQ
0B4732 97 
0B4733 0D 
0B4734 0B 
             0167** ;
0B4735 CD    0168** COLOUR_2:		CALL	COMMA
0B4736 23 
0B4737 0C 
0B4738 0B 
0B4739 CD    0169** CALL	EXPRI			; Parse G
0B473A 0B 
0B473B 05 
0B473C 0B 
0B473D D9    0170** EXX
0B473E 7D    0171** LD	A, L
0B473F 32    0172** LD	(VDU_BUFFER+2), A
0B4740 02 
0B4741 4C 
0B4742 0B 
0B4743 CD    0173** CALL	COMMA
0B4744 23 
0B4745 0C 
0B4746 0B 
0B4747 CD    0174** CALL	EXPRI			; Parse B
0B4748 0B 
0B4749 05 
0B474A 0B 
0B474B D9    0175** EXX
0B474C 7D    0176** LD	A, L
0B474D 32    0177** LD	(VDU_BUFFER+3), A
0B474E 03 
0B474F 4C 
0B4750 0B 
             0178** VDU	13h			; VDU:COLOUR
0B4751 3E   0001**M LD	A, val
0B4752 13 
0B4753 CD   0002**M CALL	OSWRCH
0B4754 01 
0B4755 41 
0B4756 0B 
             0179** VDU	(VDU_BUFFER+0)		; Logical Colour
0B4757 3A   0001**M LD	A, val
0B4758 00 
0B4759 4C 
0B475A 0B 
0B475B CD   0002**M CALL	OSWRCH
0B475C 01 
0B475D 41 
0B475E 0B 
             0180** VDU	FFh			; Physical Colour (-1 for RGB mode)
0B475F 3E   0001**M LD	A, val
0B4760 FF 
0B4761 CD   0002**M CALL	OSWRCH
0B4762 01 
0B4763 41 
0B4764 0B 
             0181** VDU	(VDU_BUFFER+1)		; R
0B4765 3A   0001**M LD	A, val
0B4766 01 
0B4767 4C 
0B4768 0B 
0B4769 CD   0002**M CALL	OSWRCH
0B476A 01 
0B476B 41 
0B476C 0B 
             0182** VDU	(VDU_BUFFER+2)		; G
0B476D 3A   0001**M LD	A, val
0B476E 02 
0B476F 4C 
0B4770 0B 
0B4771 CD   0002**M CALL	OSWRCH
0B4772 01 
0B4773 41 
0B4774 0B 
             0183** VDU	(VDU_BUFFER+3)		; B
0B4775 3A   0001**M LD	A, val
0B4776 03 
0B4777 4C 
0B4778 0B 
0B4779 CD   0002**M CALL	OSWRCH
0B477A 01 
0B477B 41 
0B477C 0B 
0B477D C3    0184** JP	XEQ
0B477E 97 
0B477F 0D 
0B4780 0B 
             0185** 
             0186** ; GCOL mode,colour
             0187** ;
0B4781 CD    0188** GCOL:			CALL	EXPRI			; Parse MODE
0B4782 0B 
0B4783 05 
0B4784 0B 
0B4785 D9    0189** EXX
0B4786 7D    0190** LD	A, L
0B4787 32    0191** LD	(VDU_BUFFER+0), A
0B4788 00 
0B4789 4C 
0B478A 0B 
0B478B CD    0192** CALL	COMMA
0B478C 23 
0B478D 0C 
0B478E 0B 
             0193** ;
0B478F CD    0194** CALL	EXPRI			; Parse Colour
0B4790 0B 
0B4791 05 
0B4792 0B 
0B4793 D9    0195** EXX
0B4794 7D    0196** LD	A, L
0B4795 32    0197** LD	(VDU_BUFFER+1), A
0B4796 01 
0B4797 4C 
0B4798 0B 
             0198** ;
             0199** VDU	12h			; VDU:GCOL
0B4799 3E   0001**M LD	A, val
0B479A 12 
0B479B CD   0002**M CALL	OSWRCH
0B479C 01 
0B479D 41 
0B479E 0B 
             0200** VDU	(VDU_BUFFER+0)		; Mode
0B479F 3A   0001**M LD	A, val
0B47A0 00 
0B47A1 4C 
0B47A2 0B 
0B47A3 CD   0002**M CALL	OSWRCH
0B47A4 01 
0B47A5 41 
0B47A6 0B 
             0201** VDU	(VDU_BUFFER+1)		; Colour
0B47A7 3A   0001**M LD	A, val
0B47A8 01 
0B47A9 4C 
0B47AA 0B 
0B47AB CD   0002**M CALL	OSWRCH
0B47AC 01 
0B47AD 41 
0B47AE 0B 
0B47AF C3    0202** JP	XEQ
0B47B0 97 
0B47B1 0D 
0B47B2 0B 
             0203** 
             0204** ; PLOT mode,x,y
             0205** ;
0B47B3 CD    0206** PLOT:			CALL	EXPRI		; Parse mode
0B47B4 0B 
0B47B5 05 
0B47B6 0B 
0B47B7 D9    0207** EXX
0B47B8 E5    0208** PUSH	HL		; Push mode (L) onto stack
0B47B9 CD    0209** CALL	COMMA
0B47BA 23 
0B47BB 0C 
0B47BC 0B 
0B47BD CD    0210** CALL	EXPR_W2		; Parse X and Y
0B47BE A6 
0B47BF 45 
0B47C0 0B 
0B47C1 C1    0211** POP	BC		; Pop mode (C) off stack
             0212** PLOT_1:			VDU	19H		; VDU code for PLOT
0B47C2 3E   0001**M LD	A, val
0B47C3 19 
0B47C4 CD   0002**M CALL	OSWRCH
0B47C5 01 
0B47C6 41 
0B47C7 0B 
             0213** VDU	C		;  C: Mode
0B47C8 79   0001**M LD	A, val
0B47C9 CD   0002**M CALL	OSWRCH
0B47CA 01 
0B47CB 41 
0B47CC 0B 
             0214** VDU	E		; DE: X
0B47CD 7B   0001**M LD	A, val
0B47CE CD   0002**M CALL	OSWRCH
0B47CF 01 
0B47D0 41 
0B47D1 0B 
             0215** VDU	D
0B47D2 7A   0001**M LD	A, val
0B47D3 CD   0002**M CALL	OSWRCH
0B47D4 01 
0B47D5 41 
0B47D6 0B 
             0216** VDU	L		; HL: Y
0B47D7 7D   0001**M LD	A, val
0B47D8 CD   0002**M CALL	OSWRCH
0B47D9 01 
0B47DA 41 
0B47DB 0B 
             0217** VDU	H
0B47DC 7C   0001**M LD	A, val
0B47DD CD   0002**M CALL	OSWRCH
0B47DE 01 
0B47DF 41 
0B47E0 0B 
0B47E1 C3    0218** JP	XEQ
0B47E2 97 
0B47E3 0D 
0B47E4 0B 
             0219** 
             0220** ; MOVE x,y
             0221** ;
0B47E5 CD    0222** MOVE:			CALL	EXPR_W2		; Parse X and Y
0B47E6 A6 
0B47E7 45 
0B47E8 0B 
0B47E9 0E    0223** LD	C, 04H		; Plot mode 04H (Move)
0B47EA 04 
0B47EB 18    0224** JR	PLOT_1		; Plot
0B47EC D5 
             0225** 
             0226** ; DRAW x1,y1
             0227** ; DRAW x1,y1,x2,y2
             0228** ;
0B47ED CD    0229** DRAW:			CALL	EXPR_W2		; Get X1 and Y1
0B47EE A6 
0B47EF 45 
0B47F0 0B 
0B47F1 CD    0230** CALL	NXT		; Are there any more parameters?
0B47F2 71 
0B47F3 0C 
0B47F4 0B 
0B47F5 FE    0231** CP	','
0B47F6 2C 
0B47F7 0E    0232** LD	C, 05h		; Code for LINE
0B47F8 05 
0B47F9 20    0233** JR	NZ, PLOT_1	; No, so just do DRAW x1,y1
0B47FA C7 
             0234** VDU	19h		; Move to the first coordinates
0B47FB 3E   0001**M LD	A, val
0B47FC 19 
0B47FD CD   0002**M CALL	OSWRCH
0B47FE 01 
0B47FF 41 
0B4800 0B 
             0235** VDU	04h
0B4801 3E   0001**M LD	A, val
0B4802 04 
0B4803 CD   0002**M CALL	OSWRCH
0B4804 01 
0B4805 41 
0B4806 0B 
             0236** VDU	E
0B4807 7B   0001**M LD	A, val
0B4808 CD   0002**M CALL	OSWRCH
0B4809 01 
0B480A 41 
0B480B 0B 
             0237** VDU	D
0B480C 7A   0001**M LD	A, val
0B480D CD   0002**M CALL	OSWRCH
0B480E 01 
0B480F 41 
0B4810 0B 
             0238** VDU	L
0B4811 7D   0001**M LD	A, val
0B4812 CD   0002**M CALL	OSWRCH
0B4813 01 
0B4814 41 
0B4815 0B 
             0239** VDU	H
0B4816 7C   0001**M LD	A, val
0B4817 CD   0002**M CALL	OSWRCH
0B4818 01 
0B4819 41 
0B481A 0B 
0B481B CD    0240** CALL	COMMA
0B481C 23 
0B481D 0C 
0B481E 0B 
0B481F C5    0241** PUSH	BC
0B4820 CD    0242** CALL	EXPR_W2		; Get X2 and Y2
0B4821 A6 
0B4822 45 
0B4823 0B 
0B4824 C1    0243** POP	BC
0B4825 18    0244** JR	PLOT_1		; Now DRAW the line to those positions
0B4826 9B 
             0245** 
             0246** 
             0247** 
              0014* include "basic/agon_sound.asm"
             0001** ;
             0002** ; Title:	BBC Basic for AGON - Audio stuff
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	12/05/2023
             0006** ;
             0007** ; Modinfo:
             0008** 
             0009** ; .ASSUME	ADL = 1
             0010** 
             0011** ; INCLUDE	"equs.inc"
             0012** ; INCLUDE "macros.inc"
             0013** ; INCLUDE "mos_api.inc"	; In MOS/src
             0014** 
             0015** ; SEGMENT CODE
             0016** 
             0017** ; XDEF	SOUND
             0018** 
             0019** ; XREF	COMMA
             0020** ; XREF	EXPR_W2
             0021** ; XREF	XEQ
             0022** ; XREF	LTRAP
             0023** ; XREF	OSWRCH
             0024** ; XREF	VDU_BUFFER
             0025** 
             0026** 
             0027** ; SOUND channel,volume,pitch,duration
             0028** ; volume: 0 (off) to -15 (full volume)
             0029** ; pitch: 0 - 255
             0030** ; duration: -1 to 254 (duration in 20ths of a second, -1 = play forever)
             0031** ;
0B4827 CD    0032** SOUND:			CALL	EXPR_W2			; DE: Channel/Control, HL: Volume
0B4828 A6 
0B4829 45 
0B482A 0B 
0B482B 7D    0033** LD	A, L 			;  A: Volume
0B482C F5    0034** PUSH	AF
0B482D D5    0035** PUSH	DE
0B482E CD    0036** CALL	COMMA
0B482F 23 
0B4830 0C 
0B4831 0B 
0B4832 CD    0037** CALL	EXPR_W2			; DE: Pitch, HL: Duration
0B4833 A6 
0B4834 45 
0B4835 0B 
0B4836 53    0038** LD	D, E			;  D: Pitch
0B4837 5D    0039** LD	E, L 			;  E: Duration
0B4838 E1    0040** POP	HL 			; HL: Channel/Control
0B4839 F1    0041** POP	AF
0B483A ED    0042** NEG
0B483B 44 
0B483C FE    0043** CP	16			; Check volume is in bounds
0B483D 10 
0B483E D2    0044** JP	NC, XEQ			; Out of bounds, do nothing
0B483F 97 
0B4840 0D 
0B4841 0B 
             0045** ;
             0046** ; Store	in VDU vars
             0047** ;
0B4842 4F    0048** LD	C, A			; Store Volume in C
0B4843 7D    0049** LD	A, L
0B4844 32    0050** LD	(VDU_BUFFER+0), A	; Channel
0B4845 00 
0B4846 4C 
0B4847 0B 
0B4848 AF    0051** XOR	A
0B4849 32    0052** LD	(VDU_BUFFER+1), A	; Waveform
0B484A 01 
0B484B 4C 
0B484C 0B 
             0053** ;
             0054** ; Calculate the volume
             0055** ;
0B484D 06    0056** LD	B, 6			; C already contains the volume
0B484E 06 
0B484F ED    0057** MLT	BC			; Multiply by 6 (0-15 scales to 0-90)
0B4850 4C 
0B4851 79    0058** LD	A, C
0B4852 32    0059** LD	(VDU_BUFFER+2), A
0B4853 02 
0B4854 4C 
0B4855 0B 
             0060** ;
             0061** ; And the frequency
             0062** ;
0B4856 4B    0063** LD	C, E			; Store duration in C
0B4857 26    0064** LD	H, 0			; Lookup the frequency
0B4858 00 
0B4859 6A    0065** LD	L, D
0B485A 11    0066** LD	DE, SOUND_FREQ_LOOKUP
0B485B E1 
0B485C 48 
0B485D 0B 
0B485E 29    0067** ADD	HL, HL
0B485F 19    0068** ADD	HL, DE
0B4860 7E    0069** LD	A, (HL)
0B4861 32    0070** LD	(VDU_BUFFER+3), A
0B4862 03 
0B4863 4C 
0B4864 0B 
0B4865 23    0071** INC	HL
0B4866 7E    0072** LD	A, (HL)
0B4867 32    0073** LD	(VDU_BUFFER+4), A
0B4868 04 
0B4869 4C 
0B486A 0B 
             0074** ;
             0075** ; And now the duration - multiply it by 50 to convert from 1/20ths of seconds to milliseconds
             0076** ;
0B486B 06    0077** LD	B, 50			; C contains the duration, so MLT by 50
0B486C 32 
0B486D ED    0078** MLT	BC
0B486E 4C 
0B486F ED    0079** LD	(VDU_BUFFER+5), BC
0B4870 43 
0B4871 05 
0B4872 4C 
0B4872 0B   
             0080** ;
0B4874 DD    0081** PUSH	IX			; Get the system vars in IX
0B4875 E5 
             0082** MOSCALL	mos_sysvars		; Reset the semaphore
0B4876 3E   0001**M LD	A, function
0B4877 08 
0B4878 49   0002**M RST.LIS	08h
0B4879 CF 
0B487A 5B    0083** SOUND0:			RES.LIL	3, (IX+sysvar_vpd_pflags)
0B487B DD 
0B487C CB 
0B487D 04 
0B487D 9E   
             0084** ;
             0085** VDU	23			; Send the sound command
0B487F 3E   0001**M LD	A, val
0B4880 17 
0B4881 CD   0002**M CALL	OSWRCH
0B4882 01 
0B4883 41 
0B4884 0B 
             0086** VDU	0
0B4885 3E   0001**M LD	A, val
0B4886 00 
0B4887 CD   0002**M CALL	OSWRCH
0B4888 01 
0B4889 41 
0B488A 0B 
             0087** VDU	vdp_audio
0B488B 3E   0001**M LD	A, val
0B488C 85 
0B488D CD   0002**M CALL	OSWRCH
0B488E 01 
0B488F 41 
0B4890 0B 
             0088** VDU	(VDU_BUFFER+0)		; 0: Channel
0B4891 3A   0001**M LD	A, val
0B4892 00 
0B4893 4C 
0B4894 0B 
0B4895 CD   0002**M CALL	OSWRCH
0B4896 01 
0B4897 41 
0B4898 0B 
             0089** VDU	(VDU_BUFFER+1)		; 1: Waveform (0)
0B4899 3A   0001**M LD	A, val
0B489A 01 
0B489B 4C 
0B489C 0B 
0B489D CD   0002**M CALL	OSWRCH
0B489E 01 
0B489F 41 
0B48A0 0B 
             0090** VDU	(VDU_BUFFER+2)		; 2: Volume (0-100)
0B48A1 3A   0001**M LD	A, val
0B48A2 02 
0B48A3 4C 
0B48A4 0B 
0B48A5 CD   0002**M CALL	OSWRCH
0B48A6 01 
0B48A7 41 
0B48A8 0B 
             0091** VDU	(VDU_BUFFER+3)		; 3: Frequency L
0B48A9 3A   0001**M LD	A, val
0B48AA 03 
0B48AB 4C 
0B48AC 0B 
0B48AD CD   0002**M CALL	OSWRCH
0B48AE 01 
0B48AF 41 
0B48B0 0B 
             0092** VDU	(VDU_BUFFER+4)		; 4: Frequency H
0B48B1 3A   0001**M LD	A, val
0B48B2 04 
0B48B3 4C 
0B48B4 0B 
0B48B5 CD   0002**M CALL	OSWRCH
0B48B6 01 
0B48B7 41 
0B48B8 0B 
             0093** VDU	(VDU_BUFFER+5)		; 5: Duration L
0B48B9 3A   0001**M LD	A, val
0B48BA 05 
0B48BB 4C 
0B48BC 0B 
0B48BD CD   0002**M CALL	OSWRCH
0B48BE 01 
0B48BF 41 
0B48C0 0B 
             0094** VDU	(VDU_BUFFER+6)		; 6: Duration H
0B48C1 3A   0001**M LD	A, val
0B48C2 06 
0B48C3 4C 
0B48C4 0B 
0B48C5 CD   0002**M CALL	OSWRCH
0B48C6 01 
0B48C7 41 
0B48C8 0B 
             0095** ;
             0096** ; Wait for acknowledgement
             0097** ;
0B48C9 5B    0098** @@:			BIT.LIL	3, (IX+sysvar_vpd_pflags)
0B48CA DD 
0B48CB CB 
0B48CC 04 
0B48CC 5E   
0B48CE 28    0099** JR	Z, @B			; Wait for the result
0B48CF F9 
0B48D0 CD    0100** CALL	LTRAP			; Check for ESC
0B48D1 72 
0B48D2 41 
0B48D3 0B 
0B48D4 5B    0101** LD.LIL	A, (IX+sysvar_audioSuccess)
0B48D5 DD 
0B48D6 7E 
0B48D7 0E 
0B48D8 A7    0102** AND	A			; Check if VDP has queued the note
0B48D9 28    0103** JR	Z, SOUND0		; No, so loop back and send again
0B48DA 9F 
             0104** ;
0B48DB DD    0105** POP	IX
0B48DC E1 
0B48DD C3    0106** JP	XEQ
0B48DE 97 
0B48DF 0D 
0B48E0 0B 
             0107** 
             0108** ; Frequency Lookup Table
             0109** ; Set up to replicate the BBC Micro audio frequencies
             0110** ;
             0111** ; Split over 5 complete octaves, with 53 being middle C
             0112** ; * C4: 262hz
             0113** ; + A4: 440hz
             0114** ;
             0115** ;	2	3	4	5	6	7	8
             0116** ;
             0117** ; B	1	49	97	145	193	241
             0118** ; A#	0	45	93	141	189	237
             0119** ; A		41	89+	137	185	233
             0120** ; G#		37	85	133	181	229
             0121** ; G		33	81	129	177	225
             0122** ; F#		29	77	125	173	221
             0123** ; F		25	73	121	169	217
             0124** ; E		21	69	117	165	213
             0125** ; D#		17	65	113	161	209
             0126** ; D		13	61	109	157	205	253
             0127** ; C#		9	57	105	153	201	249
             0128** ; C		5	53*	101	149	197	245
             0129** ;
0B48E1 75    0130** SOUND_FREQ_LOOKUP:	DW	 117,  118,  120,  122,  123,  131,  133,  135
0B48E2 00 
0B48E3 76 
0B48E4 00 
0B48E4 78   
0B48E5 00 
0B48E6 7A 
0B48E7 00 
0B48E7 7B   
0B48E8 00 
0B48E9 83 
0B48EA 00 
0B48EA 85   
0B48EB 00 
0B48EC 87 
0B48ED 00 
0B48F1 89    0131** DW	 137,  139,  141,  143,  145,  147,  149,  151
0B48F2 00 
0B48F3 8B 
0B48F4 00 
0B48F4 8D   
0B48F5 00 
0B48F6 8F 
0B48F7 00 
0B48F7 91   
0B48F8 00 
0B48F9 93 
0B48FA 00 
0B48FA 95   
0B48FB 00 
0B48FC 97 
0B48FD 00 
0B4901 99    0132** DW	 153,  156,  158,  160,  162,  165,  167,  170
0B4902 00 
0B4903 9C 
0B4904 00 
0B4904 9E   
0B4905 00 
0B4906 A0 
0B4907 00 
0B4907 A2   
0B4908 00 
0B4909 A5 
0B490A 00 
0B490A A7   
0B490B 00 
0B490C AA 
0B490D 00 
0B4911 AC    0133** DW	 172,  175,  177,  180,  182,  185,  188,  190
0B4912 00 
0B4913 AF 
0B4914 00 
0B4914 B1   
0B4915 00 
0B4916 B4 
0B4917 00 
0B4917 B6   
0B4918 00 
0B4919 B9 
0B491A 00 
0B491A BC   
0B491B 00 
0B491C BE 
0B491D 00 
0B4921 C1    0134** DW	 193,  196,  199,  202,  205,  208,  211,  214
0B4922 00 
0B4923 C4 
0B4924 00 
0B4924 C7   
0B4925 00 
0B4926 CA 
0B4927 00 
0B4927 CD   
0B4928 00 
0B4929 D0 
0B492A 00 
0B492A D3   
0B492B 00 
0B492C D6 
0B492D 00 
0B4931 D9    0135** DW	 217,  220,  223,  226,  230,  233,  236,  240
0B4932 00 
0B4933 DC 
0B4934 00 
0B4934 DF   
0B4935 00 
0B4936 E2 
0B4937 00 
0B4937 E6   
0B4938 00 
0B4939 E9 
0B493A 00 
0B493A EC   
0B493B 00 
0B493C F0 
0B493D 00 
0B4941 F3    0136** DW	 243,  247,  251,  254,  258,  262,  265,  269
0B4942 00 
0B4943 F7 
0B4944 00 
0B4944 FB   
0B4945 00 
0B4946 FE 
0B4947 00 
0B4947 02   
0B4948 01 
0B4949 06 
0B494A 01 
0B494A 09   
0B494B 01 
0B494C 0D 
0B494D 01 
0B4951 11    0137** DW	 273,  277,  281,  285,  289,  294,  298,  302
0B4952 01 
0B4953 15 
0B4954 01 
0B4954 19   
0B4955 01 
0B4956 1D 
0B4957 01 
0B4957 21   
0B4958 01 
0B4959 26 
0B495A 01 
0B495A 2A   
0B495B 01 
0B495C 2E 
0B495D 01 
0B4961 33    0138** DW	 307,  311,  316,  320,  325,  330,  334,  339
0B4962 01 
0B4963 37 
0B4964 01 
0B4964 3C   
0B4965 01 
0B4966 40 
0B4967 01 
0B4967 45   
0B4968 01 
0B4969 4A 
0B496A 01 
0B496A 4E   
0B496B 01 
0B496C 53 
0B496D 01 
0B4971 58    0139** DW	 344,  349,  354,  359,  365,  370,  375,  381
0B4972 01 
0B4973 5D 
0B4974 01 
0B4974 62   
0B4975 01 
0B4976 67 
0B4977 01 
0B4977 6D   
0B4978 01 
0B4979 72 
0B497A 01 
0B497A 77   
0B497B 01 
0B497C 7D 
0B497D 01 
0B4981 82    0140** DW	 386,  392,  398,  403,  409,  415,  421,  427
0B4982 01 
0B4983 88 
0B4984 01 
0B4984 8E   
0B4985 01 
0B4986 93 
0B4987 01 
0B4987 99   
0B4988 01 
0B4989 9F 
0B498A 01 
0B498A A5   
0B498B 01 
0B498C AB 
0B498D 01 
0B4991 B2    0141** DW	 434,  440,  446,  453,  459,  466,  473,  480
0B4992 01 
0B4993 B8 
0B4994 01 
0B4994 BE   
0B4995 01 
0B4996 C5 
0B4997 01 
0B4997 CB   
0B4998 01 
0B4999 D2 
0B499A 01 
0B499A D9   
0B499B 01 
0B499C E0 
0B499D 01 
0B49A1 E7    0142** DW	 487,  494,  501,  508,  516,  523,  531,  539
0B49A2 01 
0B49A3 EE 
0B49A4 01 
0B49A4 F5   
0B49A5 01 
0B49A6 FC 
0B49A7 01 
0B49A7 04   
0B49A8 02 
0B49A9 0B 
0B49AA 02 
0B49AA 13   
0B49AB 02 
0B49AC 1B 
0B49AD 02 
0B49B1 22    0143** DW	 546,  554,  562,  571,  579,  587,  596,  605
0B49B2 02 
0B49B3 2A 
0B49B4 02 
0B49B4 32   
0B49B5 02 
0B49B6 3B 
0B49B7 02 
0B49B7 43   
0B49B8 02 
0B49B9 4B 
0B49BA 02 
0B49BA 54   
0B49BB 02 
0B49BC 5D 
0B49BD 02 
0B49C1 65    0144** DW	 613,  622,  631,  641,  650,  659,  669,  679
0B49C2 02 
0B49C3 6E 
0B49C4 02 
0B49C4 77   
0B49C5 02 
0B49C6 81 
0B49C7 02 
0B49C7 8A   
0B49C8 02 
0B49C9 93 
0B49CA 02 
0B49CA 9D   
0B49CB 02 
0B49CC A7 
0B49CD 02 
0B49D1 B1    0145** DW	 689,  699,  709,  719,  729,  740,  751,  762
0B49D2 02 
0B49D3 BB 
0B49D4 02 
0B49D4 C5   
0B49D5 02 
0B49D6 CF 
0B49D7 02 
0B49D7 D9   
0B49D8 02 
0B49D9 E4 
0B49DA 02 
0B49DA EF   
0B49DB 02 
0B49DC FA 
0B49DD 02 
0B49E1 05    0146** DW	 773,  784,  795,  807,  819,  831,  843,  855
0B49E2 03 
0B49E3 10 
0B49E4 03 
0B49E4 1B   
0B49E5 03 
0B49E6 27 
0B49E7 03 
0B49E7 33   
0B49E8 03 
0B49E9 3F 
0B49EA 03 
0B49EA 4B   
0B49EB 03 
0B49EC 57 
0B49ED 03 
0B49F1 63    0147** DW	 867,  880,  893,  906,  919,  932,  946,  960
0B49F2 03 
0B49F3 70 
0B49F4 03 
0B49F4 7D   
0B49F5 03 
0B49F6 8A 
0B49F7 03 
0B49F7 97   
0B49F8 03 
0B49F9 A4 
0B49FA 03 
0B49FA B2   
0B49FB 03 
0B49FC C0 
0B49FD 03 
0B4A01 CE    0148** DW	 974,  988, 1002, 1017, 1032, 1047, 1062, 1078
0B4A02 03 
0B4A03 DC 
0B4A04 03 
0B4A04 EA   
0B4A05 03 
0B4A06 F9 
0B4A07 03 
0B4A07 08   
0B4A08 04 
0B4A09 17 
0B4A0A 04 
0B4A0A 26   
0B4A0B 04 
0B4A0C 36 
0B4A0D 04 
0B4A11 45    0149** DW	1093, 1109, 1125, 1142, 1158, 1175, 1192, 1210
0B4A12 04 
0B4A13 55 
0B4A14 04 
0B4A14 65   
0B4A15 04 
0B4A16 76 
0B4A17 04 
0B4A17 86   
0B4A18 04 
0B4A19 97 
0B4A1A 04 
0B4A1A A8   
0B4A1B 04 
0B4A1C BA 
0B4A1D 04 
0B4A21 CB    0150** DW	1227, 1245, 1263, 1282, 1300, 1319, 1338, 1358
0B4A22 04 
0B4A23 DD 
0B4A24 04 
0B4A24 EF   
0B4A25 04 
0B4A26 02 
0B4A27 05 
0B4A27 14   
0B4A28 05 
0B4A29 27 
0B4A2A 05 
0B4A2A 3A   
0B4A2B 05 
0B4A2C 4E 
0B4A2D 05 
0B4A31 62    0151** DW	1378, 1398, 1418, 1439, 1459, 1481, 1502, 1524
0B4A32 05 
0B4A33 76 
0B4A34 05 
0B4A34 8A   
0B4A35 05 
0B4A36 9F 
0B4A37 05 
0B4A37 B3   
0B4A38 05 
0B4A39 C9 
0B4A3A 05 
0B4A3A DE   
0B4A3B 05 
0B4A3C F4 
0B4A3D 05 
0B4A41 0A    0152** DW	1546, 1569, 1592, 1615, 1638, 1662, 1686, 1711
0B4A42 06 
0B4A43 21 
0B4A44 06 
0B4A44 38   
0B4A45 06 
0B4A46 4F 
0B4A47 06 
0B4A47 66   
0B4A48 06 
0B4A49 7E 
0B4A4A 06 
0B4A4A 96   
0B4A4B 06 
0B4A4C AF 
0B4A4D 06 
0B4A51 C8    0153** DW	1736, 1761, 1786, 1812, 1839, 1866, 1893, 1920
0B4A52 06 
0B4A53 E1 
0B4A54 06 
0B4A54 FA   
0B4A55 06 
0B4A56 14 
0B4A57 07 
0B4A57 2F   
0B4A58 07 
0B4A59 4A 
0B4A5A 07 
0B4A5A 65   
0B4A5B 07 
0B4A5C 80 
0B4A5D 07 
0B4A61 9C    0154** DW	1948, 1976, 2005, 2034, 2064, 2093, 2123, 2154
0B4A62 07 
0B4A63 B8 
0B4A64 07 
0B4A64 D5   
0B4A65 07 
0B4A66 F2 
0B4A67 07 
0B4A67 10   
0B4A68 08 
0B4A69 2D 
0B4A6A 08 
0B4A6A 4B   
0B4A6B 08 
0B4A6C 6A 
0B4A6D 08 
0B4A71 8A    0155** DW	2186, 2217, 2250, 2282, 2316, 2349, 2383, 2418
0B4A72 08 
0B4A73 A9 
0B4A74 08 
0B4A74 CA   
0B4A75 08 
0B4A76 EA 
0B4A77 08 
0B4A77 0C   
0B4A78 09 
0B4A79 2D 
0B4A7A 09 
0B4A7A 4F   
0B4A7B 09 
0B4A7C 72 
0B4A7D 09 
0B4A81 95    0156** DW	2453, 2489, 2525, 2562, 2599, 2637, 2675, 2714
0B4A82 09 
0B4A83 B9 
0B4A84 09 
0B4A84 DD   
0B4A85 09 
0B4A86 02 
0B4A87 0A 
0B4A87 27   
0B4A88 0A 
0B4A89 4D 
0B4A8A 0A 
0B4A8A 73   
0B4A8B 0A 
0B4A8C 9A 
0B4A8D 0A 
0B4A91 C2    0157** DW	2754, 2794, 2834, 2876, 2918, 2960, 3003, 3047
0B4A92 0A 
0B4A93 EA 
0B4A94 0A 
0B4A94 12   
0B4A95 0B 
0B4A96 3C 
0B4A97 0B 
0B4A97 66   
0B4A98 0B 
0B4A99 90 
0B4A9A 0B 
0B4A9A BB   
0B4A9B 0B 
0B4A9C E7 
0B4A9D 0B 
0B4AA1 13    0158** DW	3091, 3136, 3182, 3228, 3275, 3322, 3371, 3420
0B4AA2 0C 
0B4AA3 40 
0B4AA4 0C 
0B4AA4 6E   
0B4AA5 0C 
0B4AA6 9C 
0B4AA7 0C 
0B4AA7 CB   
0B4AA8 0C 
0B4AA9 FA 
0B4AAA 0C 
0B4AAA 2B   
0B4AAB 0D 
0B4AAC 5C 
0B4AAD 0D 
0B4AB1 8E    0159** DW	3470, 3520, 3571, 3623, 3676, 3729, 3784, 3839
0B4AB2 0D 
0B4AB3 C0 
0B4AB4 0D 
0B4AB4 F3   
0B4AB5 0D 
0B4AB6 27 
0B4AB7 0E 
0B4AB7 5C   
0B4AB8 0E 
0B4AB9 91 
0B4ABA 0E 
0B4ABA C8   
0B4ABB 0E 
0B4ABC FF 
0B4ABD 0E 
0B4AC1 36    0160** DW	3894, 3951, 4009, 4067, 4126, 4186, 4247, 4309
0B4AC2 0F 
0B4AC3 6F 
0B4AC4 0F 
0B4AC4 A9   
0B4AC5 0F 
0B4AC6 E3 
0B4AC7 0F 
0B4AC7 1E   
0B4AC8 10 
0B4AC9 5A 
0B4ACA 10 
0B4ACA 97   
0B4ACB 10 
0B4ACC D5 
0B4ACD 10 
0B4AD1 13    0161** DW	4371, 4435, 4499, 4565, 4631, 4699, 4767, 4836
0B4AD2 11 
0B4AD3 53 
0B4AD4 11 
0B4AD4 93   
0B4AD5 11 
0B4AD6 D5 
0B4AD7 11 
0B4AD7 17   
0B4AD8 12 
0B4AD9 5B 
0B4ADA 12 
0B4ADA 9F   
0B4ADB 12 
0B4ADC E4 
0B4ADD 12 
             0162** 
             0163** 
              0015* include "basic/interrupts.asm"
             0001** ;
             0002** ; Title:	BBC Basic for AGON - Interrupts
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	07/06/2023
             0006** ;
             0007** ; Modinfo:
             0008** ; 07/06/2023:	Modified to run in ADL mode
             0009** 
             0010** ; .ASSUME	ADL = 1
             0011** 
             0012** ; INCLUDE	"macros.inc"
             0013** ; INCLUDE	"equs.inc"
             0014** ; INCLUDE "mos_api.inc"	; In MOS/src
             0015** 
             0016** ; SEGMENT CODE
             0017** 
             0018** ; XDEF	VBLANK_INIT
             0019** ; XDEF	VBLANK_STOP
             0020** ; XDEF	VBLANK_HANDLER
             0021** 
             0022** ; XREF	ESCSET
             0023** ; XREF	KEYDOWN		; In ram.asm
             0024** ; XREF	KEYASCII 	; In ram.asm
             0025** ; XREF	KEYCOUNT	; In ram.asm
             0026** 
             0027** ; Hook into the MOS VBLANK interrupt
             0028** ;
0B4AE1 F3    0029** VBLANK_INIT:		DI
0B4AE2 21    0030** LD		HL, VBLANK_HANDLER		; this interrupt handler routine who's
0B4AE3 36 
0B4AE4 4B 
0B4AE5 0B 
0B4AE6 1E    0031** LD		E, 32h				; Set up the VBlank Interrupt Vector
0B4AE7 32 
             0032** MOSCALL		mos_setintvector
0B4AE8 3E   0001**M LD	A, function
0B4AE9 14 
0B4AEA 49   0002**M RST.LIS	08h
0B4AEB CF 
             0033** ; EX		HL, DE 				; DEU: Pointer to the MOS interrupt vector
0B4AEC EB    0034** ex de,hl
0B4AED 21    0035** LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
0B4AEE 44 
0B4AEF 4B 
0B4AF0 0B 
0B4AF1 ED    0036** LD		(HL), DE			; Self-modify the code
0B4AF2 1F 
0B4AF3 FB    0037** EI
0B4AF4 C9    0038** RET
             0039** 
             0040** ; Unhook the custom VBLANK interrupt
             0041** ;
0B4AF5 F3    0042** VBLANK_STOP:		DI
0B4AF6 21    0043** LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
0B4AF7 44 
0B4AF8 4B 
0B4AF9 0B 
0B4AFA ED    0044** LD		DE, (HL)
0B4AFB 17 
0B4AFC EB    0045** EX		DE, HL 				; HLU: Address of MOS interrupt vector
0B4AFD 1E    0046** LD		E, 32h
0B4AFE 32 
             0047** MOSCALL		mos_setintvector		; Restore the MOS interrupt vector
0B4AFF 3E   0001**M LD	A, function
0B4B00 14 
0B4B01 49   0002**M RST.LIS	08h
0B4B02 CF 
0B4B03 FB    0048** EI
0B4B04 C9    0049** RET
             0050** 
             0051** ; A safe LIS call to ESCSET
             0052** ;
             0053** DO_KEYBOARD:		MOSCALL		mos_sysvars			; Get the system variables
0B4B05 3E   0001**M LD	A, function
0B4B06 08 
0B4B07 49   0002**M RST.LIS	08h
0B4B08 CF 
0B4B09 21    0054** LD		HL, KEYCOUNT 			; Check whether the keycount has changed
0B4B0A 49 
0B4B0B 4F 
0B4B0C 0B 
0B4B0D DD    0055** LD		A, (IX + sysvar_vkeycount)	; by comparing the MOS copy
0B4B0E 7E 
0B4B0F 19 
0B4B10 BE    0056** CP 		(HL)				; with our local copy
0B4B11 20    0057** JR		NZ, DO_KEYBOARD_1		; Yes it has, so jump to the next bit
0B4B12 0A 
             0058** ;
0B4B13 AF    0059** DO_KEYBOARD_0:		XOR		A 				; Clear the keyboard values
0B4B14 32    0060** LD		(KEYASCII), A
0B4B15 48 
0B4B16 4F 
0B4B17 0B 
0B4B18 32    0061** LD		(KEYDOWN), A
0B4B19 47 
0B4B1A 4F 
0B4B1B 0B 
0B4B1C C9    0062** RET	 					; And return
             0063** ;
0B4B1D 77    0064** DO_KEYBOARD_1:		LD		(HL), A 			; Store the updated local copy of keycount
0B4B1E DD    0065** LD		A, (IX + sysvar_vkeydown)	; Fetch key down value (1 = key down, 0 = key up)
0B4B1F 7E 
0B4B20 18 
0B4B21 B7    0066** OR		A
0B4B22 28    0067** JR		Z, DO_KEYBOARD_0		; If it is key up, then clear the keyboard values
0B4B23 EF 
             0068** ;
0B4B24 32    0069** LD		(KEYDOWN), A 			; Store the keydown value
0B4B25 47 
0B4B26 4F 
0B4B27 0B 
0B4B28 DD    0070** LD		A, (IX + sysvar_keyascii)	; Fetch key ASCII value
0B4B29 7E 
0B4B2A 05 
0B4B2B 32    0071** LD		(KEYASCII), A 			; Store locally
0B4B2C 48 
0B4B2D 4F 
0B4B2E 0B 
0B4B2F FE    0072** CP		1Bh				; Is it escape?
0B4B30 1B 
0B4B31 CC    0073** CALL		Z, ESCSET			; Yes, so set the escape flags
0B4B32 4D 
0B4B33 41 
0B4B34 0B 
0B4B35 C9    0074** RET						; Return to the interrupt handler
             0075** 
0B4B36 F3    0076** VBLANK_HANDLER:		DI
0B4B37 F5    0077** PUSH		AF
0B4B38 E5    0078** PUSH		HL
0B4B39 DD    0079** PUSH		IX
0B4B3A E5 
0B4B3B CD    0080** CALL		DO_KEYBOARD
0B4B3C 05 
0B4B3D 4B 
0B4B3E 0B 
0B4B3F DD    0081** POP		IX
0B4B40 E1 
0B4B41 E1    0082** POP		HL
0B4B42 F1    0083** POP		AF
             0084** ;
             0085** ; Finally jump to the MOS interrupt
             0086** ;
0B4B43 C3    0087** VBLANK_HANDLER_JP:	JP		0				; This is self-modified by VBLANK_INIT
0B4B44 00 
0B4B45 00 
0B4B46 00 
              0016* include "basic/ram.asm"
             0001** ;
             0002** ; Title:	BBC Basic Interpreter - Z80 version
             0003** ;		RAM Module for BBC Basic Interpreter
             0004** ;		For use with Version 2.0 of BBC BASIC
             0005** ;		Standard CP/M Distribution Version
             0006** ; Author:	(C) Copyright  R.T.Russell 31-12-1983
             0007** ; Modified By:	Dean Belfield
             0008** ; Created:	12/05/2023
             0009** ; Last Updated:	26/06/2023
             0010** ;
             0011** ; Modinfo:
             0012** ; 06/06/2023:	Modified to run in ADL mode
             0013** ; 26/06/2023:	Added temporary stores R0 and R1
             0014** 
             0015** ; .ASSUME	ADL = 1
             0016** 
             0017** ; DEFINE	LORAM, SPACE = ROM
             0018** ; SEGMENT LORAM
             0019** 
             0020** ; XDEF	ACCS
             0021** ; XDEF	BUFFER
             0022** ; XDEF	STAVAR
             0023** ; XDEF	DYNVAR
             0024** ; XDEF	FNPTR
             0025** ; XDEF	PROPTR
             0026** ; XDEF	PAGE_
             0027** ; XDEF	TOP
             0028** ; XDEF	LOMEM
             0029** ; XDEF 	FREE
             0030** ; XDEF	HIMEM
             0031** ; XDEF	LINENO
             0032** ; XDEF	TRACEN
             0033** ; XDEF	AUTONO
             0034** ; XDEF	ERRTRP
             0035** ; XDEF	ERRTXT
             0036** ; XDEF	DATPTR
             0037** ; XDEF	ERL
             0038** ; XDEF	ERRLIN
             0039** ; XDEF	RANDOM
             0040** ; XDEF	COUNT
             0041** ; XDEF	WIDTH
             0042** ; XDEF	ERR
             0043** ; XDEF	LISTON
             0044** ; XDEF	INCREM
             0045** 
             0046** ; XDEF	FLAGS
             0047** ; XDEF	OSWRCHPT
             0048** ; XDEF	OSWRCHCH
             0049** ; XDEF	OSWRCHFH
             0050** ; XDEF	KEYDOWN
             0051** ; XDEF	KEYASCII
             0052** ; XDEF	KEYCOUNT
             0053** 
             0054** ; XDEF	R0
             0055** ; XDEF	R1
             0056** 
             0057** ; XDEF	RAM_START
             0058** ; XDEF	RAM_END
             0059** ; XDEF	USER
             0060** 
             0061** end_binary: ;  for assemble.py to know where to truncate the binary file
0B4B47 FF    0062** ALIGN 		256		; ACCS, BUFFER & STAVAR must be on page boundaries
0B4B48 FF 
0B4B49 FF 
0B4B4A FF 
0B4B4A FF   
0B4B4B FF 
0B4B4C FF 
0B4B4D FF 
0B4B4D FF   
0B4B4E FF 
0B4B4F FF 
0B4B50 FF 
0B4B50 FF   
0B4B51 FF 
0B4B52 FF 
0B4B53 FF 
0B4B53 FF   
0B4B54 FF 
0B4B55 FF 
0B4B56 FF 
0B4B56 FF   
0B4B57 FF 
0B4B58 FF 
0B4B59 FF 
0B4B59 FF   
0B4B5A FF 
0B4B5B FF 
0B4B5C FF 
0B4B5C FF   
0B4B5D FF 
0B4B5E FF 
0B4B5F FF 
0B4B5F FF   
0B4B60 FF 
0B4B61 FF 
0B4B62 FF 
0B4B62 FF   
0B4B63 FF 
0B4B64 FF 
0B4B65 FF 
0B4B65 FF   
0B4B66 FF 
0B4B67 FF 
0B4B68 FF 
0B4B68 FF   
0B4B69 FF 
0B4B6A FF 
0B4B6B FF 
0B4B6B FF   
0B4B6C FF 
0B4B6D FF 
0B4B6E FF 
0B4B6E FF   
0B4B6F FF 
0B4B70 FF 
0B4B71 FF 
0B4B71 FF   
0B4B72 FF 
0B4B73 FF 
0B4B74 FF 
0B4B74 FF   
0B4B75 FF 
0B4B76 FF 
0B4B77 FF 
0B4B77 FF   
0B4B78 FF 
0B4B79 FF 
0B4B7A FF 
0B4B7A FF   
0B4B7B FF 
0B4B7C FF 
0B4B7D FF 
0B4B7D FF   
0B4B7E FF 
0B4B7F FF 
0B4B80 FF 
0B4B80 FF   
0B4B81 FF 
0B4B82 FF 
0B4B83 FF 
0B4B83 FF   
0B4B84 FF 
0B4B85 FF 
0B4B86 FF 
0B4B86 FF   
0B4B87 FF 
0B4B88 FF 
0B4B89 FF 
0B4B89 FF   
0B4B8A FF 
0B4B8B FF 
0B4B8C FF 
0B4B8C FF   
0B4B8D FF 
0B4B8E FF 
0B4B8F FF 
0B4B8F FF   
0B4B90 FF 
0B4B91 FF 
0B4B92 FF 
0B4B92 FF   
0B4B93 FF 
0B4B94 FF 
0B4B95 FF 
0B4B95 FF   
0B4B96 FF 
0B4B97 FF 
0B4B98 FF 
0B4B98 FF   
0B4B99 FF 
0B4B9A FF 
0B4B9B FF 
0B4B9B FF   
0B4B9C FF 
0B4B9D FF 
0B4B9E FF 
0B4B9E FF   
0B4B9F FF 
0B4BA0 FF 
0B4BA1 FF 
0B4BA1 FF   
0B4BA2 FF 
0B4BA3 FF 
0B4BA4 FF 
0B4BA4 FF   
0B4BA5 FF 
0B4BA6 FF 
0B4BA7 FF 
0B4BA7 FF   
0B4BA8 FF 
0B4BA9 FF 
0B4BAA FF 
0B4BAA FF   
0B4BAB FF 
0B4BAC FF 
0B4BAD FF 
0B4BAD FF   
0B4BAE FF 
0B4BAF FF 
0B4BB0 FF 
0B4BB0 FF   
0B4BB1 FF 
0B4BB2 FF 
0B4BB3 FF 
0B4BB3 FF   
0B4BB4 FF 
0B4BB5 FF 
0B4BB6 FF 
0B4BB6 FF   
0B4BB7 FF 
0B4BB8 FF 
0B4BB9 FF 
0B4BB9 FF   
0B4BBA FF 
0B4BBB FF 
0B4BBC FF 
0B4BBC FF   
0B4BBD FF 
0B4BBE FF 
0B4BBF FF 
0B4BBF FF   
0B4BC0 FF 
0B4BC1 FF 
0B4BC2 FF 
0B4BC2 FF   
0B4BC3 FF 
0B4BC4 FF 
0B4BC5 FF 
0B4BC5 FF   
0B4BC6 FF 
0B4BC7 FF 
0B4BC8 FF 
0B4BC8 FF   
0B4BC9 FF 
0B4BCA FF 
0B4BCB FF 
0B4BCB FF   
0B4BCC FF 
0B4BCD FF 
0B4BCE FF 
0B4BCE FF   
0B4BCF FF 
0B4BD0 FF 
0B4BD1 FF 
0B4BD1 FF   
             0063** RAM_START:
             0064** ;
0B4C00 00    0065** ACCS:           BLKB    256,0             ; String Accumulator
0B4C01 00 
0B4C02 00 
0B4C03 00 
0B4C03 00   
0B4C04 00 
0B4C05 00 
0B4C06 00 
0B4C06 00   
0B4C07 00 
0B4C08 00 
0B4C09 00 
0B4C09 00   
0B4C0A 00 
0B4C0B 00 
0B4C0C 00 
0B4C0C 00   
0B4C0D 00 
0B4C0E 00 
0B4C0F 00 
0B4C0F 00   
0B4C10 00 
0B4C11 00 
0B4C12 00 
0B4C12 00   
0B4C13 00 
0B4C14 00 
0B4C15 00 
0B4C15 00   
0B4C16 00 
0B4C17 00 
0B4C18 00 
0B4C18 00   
0B4C19 00 
0B4C1A 00 
0B4C1B 00 
0B4C1B 00   
0B4C1C 00 
0B4C1D 00 
0B4C1E 00 
0B4C1E 00   
0B4C1F 00 
0B4C20 00 
0B4C21 00 
0B4C21 00   
0B4C22 00 
0B4C23 00 
0B4C24 00 
0B4C24 00   
0B4C25 00 
0B4C26 00 
0B4C27 00 
0B4C27 00   
0B4C28 00 
0B4C29 00 
0B4C2A 00 
0B4C2A 00   
0B4C2B 00 
0B4C2C 00 
0B4C2D 00 
0B4C2D 00   
0B4C2E 00 
0B4C2F 00 
0B4C30 00 
0B4C30 00   
0B4C31 00 
0B4C32 00 
0B4C33 00 
0B4C33 00   
0B4C34 00 
0B4C35 00 
0B4C36 00 
0B4C36 00   
0B4C37 00 
0B4C38 00 
0B4C39 00 
0B4C39 00   
0B4C3A 00 
0B4C3B 00 
0B4C3C 00 
0B4C3C 00   
0B4C3D 00 
0B4C3E 00 
0B4C3F 00 
0B4C3F 00   
0B4C40 00 
0B4C41 00 
0B4C42 00 
0B4C42 00   
0B4C43 00 
0B4C44 00 
0B4C45 00 
0B4C45 00   
0B4C46 00 
0B4C47 00 
0B4C48 00 
0B4C48 00   
0B4C49 00 
0B4C4A 00 
0B4C4B 00 
0B4C4B 00   
0B4C4C 00 
0B4C4D 00 
0B4C4E 00 
0B4C4E 00   
0B4C4F 00 
0B4C50 00 
0B4C51 00 
0B4C51 00   
0B4C52 00 
0B4C53 00 
0B4C54 00 
0B4C54 00   
0B4C55 00 
0B4C56 00 
0B4C57 00 
0B4C57 00   
0B4C58 00 
0B4C59 00 
0B4C5A 00 
0B4C5A 00   
0B4C5B 00 
0B4C5C 00 
0B4C5D 00 
0B4C5D 00   
0B4C5E 00 
0B4C5F 00 
0B4C60 00 
0B4C60 00   
0B4C61 00 
0B4C62 00 
0B4C63 00 
0B4C63 00   
0B4C64 00 
0B4C65 00 
0B4C66 00 
0B4C66 00   
0B4C67 00 
0B4C68 00 
0B4C69 00 
0B4C69 00   
0B4C6A 00 
0B4C6B 00 
0B4C6C 00 
0B4C6C 00   
0B4C6D 00 
0B4C6E 00 
0B4C6F 00 
0B4C6F 00   
0B4C70 00 
0B4C71 00 
0B4C72 00 
0B4C72 00   
0B4C73 00 
0B4C74 00 
0B4C75 00 
0B4C75 00   
0B4C76 00 
0B4C77 00 
0B4C78 00 
0B4C78 00   
0B4C79 00 
0B4C7A 00 
0B4C7B 00 
0B4C7B 00   
0B4C7C 00 
0B4C7D 00 
0B4C7E 00 
0B4C7E 00   
0B4C7F 00 
0B4C80 00 
0B4C81 00 
0B4C81 00   
0B4C82 00 
0B4C83 00 
0B4C84 00 
0B4C84 00   
0B4C85 00 
0B4C86 00 
0B4C87 00 
0B4C87 00   
0B4C88 00 
0B4C89 00 
0B4C8A 00 
0B4C8A 00   
0B4C8B 00 
0B4C8C 00 
0B4C8D 00 
0B4C8D 00   
0B4C8E 00 
0B4C8F 00 
0B4C90 00 
0B4C90 00   
0B4C91 00 
0B4C92 00 
0B4C93 00 
0B4C93 00   
0B4C94 00 
0B4C95 00 
0B4C96 00 
0B4C96 00   
0B4C97 00 
0B4C98 00 
0B4C99 00 
0B4C99 00   
0B4C9A 00 
0B4C9B 00 
0B4C9C 00 
0B4C9C 00   
0B4C9D 00 
0B4C9E 00 
0B4C9F 00 
0B4C9F 00   
0B4CA0 00 
0B4CA1 00 
0B4CA2 00 
0B4CA2 00   
0B4CA3 00 
0B4CA4 00 
0B4CA5 00 
0B4CA5 00   
0B4CA6 00 
0B4CA7 00 
0B4CA8 00 
0B4CA8 00   
0B4CA9 00 
0B4CAA 00 
0B4CAB 00 
0B4CAB 00   
0B4CAC 00 
0B4CAD 00 
0B4CAE 00 
0B4CAE 00   
0B4CAF 00 
0B4CB0 00 
0B4CB1 00 
0B4CB1 00   
0B4CB2 00 
0B4CB3 00 
0B4CB4 00 
0B4CB4 00   
0B4CB5 00 
0B4CB6 00 
0B4CB7 00 
0B4CB7 00   
0B4CB8 00 
0B4CB9 00 
0B4CBA 00 
0B4CBA 00   
0B4CBB 00 
0B4CBC 00 
0B4CBD 00 
0B4CBD 00   
0B4CBE 00 
0B4CBF 00 
0B4CC0 00 
0B4D00 00    0066** BUFFER:         BLKB    256,0             ; String Input Buffer
0B4D01 00 
0B4D02 00 
0B4D03 00 
0B4D03 00   
0B4D04 00 
0B4D05 00 
0B4D06 00 
0B4D06 00   
0B4D07 00 
0B4D08 00 
0B4D09 00 
0B4D09 00   
0B4D0A 00 
0B4D0B 00 
0B4D0C 00 
0B4D0C 00   
0B4D0D 00 
0B4D0E 00 
0B4D0F 00 
0B4D0F 00   
0B4D10 00 
0B4D11 00 
0B4D12 00 
0B4D12 00   
0B4D13 00 
0B4D14 00 
0B4D15 00 
0B4D15 00   
0B4D16 00 
0B4D17 00 
0B4D18 00 
0B4D18 00   
0B4D19 00 
0B4D1A 00 
0B4D1B 00 
0B4D1B 00   
0B4D1C 00 
0B4D1D 00 
0B4D1E 00 
0B4D1E 00   
0B4D1F 00 
0B4D20 00 
0B4D21 00 
0B4D21 00   
0B4D22 00 
0B4D23 00 
0B4D24 00 
0B4D24 00   
0B4D25 00 
0B4D26 00 
0B4D27 00 
0B4D27 00   
0B4D28 00 
0B4D29 00 
0B4D2A 00 
0B4D2A 00   
0B4D2B 00 
0B4D2C 00 
0B4D2D 00 
0B4D2D 00   
0B4D2E 00 
0B4D2F 00 
0B4D30 00 
0B4D30 00   
0B4D31 00 
0B4D32 00 
0B4D33 00 
0B4D33 00   
0B4D34 00 
0B4D35 00 
0B4D36 00 
0B4D36 00   
0B4D37 00 
0B4D38 00 
0B4D39 00 
0B4D39 00   
0B4D3A 00 
0B4D3B 00 
0B4D3C 00 
0B4D3C 00   
0B4D3D 00 
0B4D3E 00 
0B4D3F 00 
0B4D3F 00   
0B4D40 00 
0B4D41 00 
0B4D42 00 
0B4D42 00   
0B4D43 00 
0B4D44 00 
0B4D45 00 
0B4D45 00   
0B4D46 00 
0B4D47 00 
0B4D48 00 
0B4D48 00   
0B4D49 00 
0B4D4A 00 
0B4D4B 00 
0B4D4B 00   
0B4D4C 00 
0B4D4D 00 
0B4D4E 00 
0B4D4E 00   
0B4D4F 00 
0B4D50 00 
0B4D51 00 
0B4D51 00   
0B4D52 00 
0B4D53 00 
0B4D54 00 
0B4D54 00   
0B4D55 00 
0B4D56 00 
0B4D57 00 
0B4D57 00   
0B4D58 00 
0B4D59 00 
0B4D5A 00 
0B4D5A 00   
0B4D5B 00 
0B4D5C 00 
0B4D5D 00 
0B4D5D 00   
0B4D5E 00 
0B4D5F 00 
0B4D60 00 
0B4D60 00   
0B4D61 00 
0B4D62 00 
0B4D63 00 
0B4D63 00   
0B4D64 00 
0B4D65 00 
0B4D66 00 
0B4D66 00   
0B4D67 00 
0B4D68 00 
0B4D69 00 
0B4D69 00   
0B4D6A 00 
0B4D6B 00 
0B4D6C 00 
0B4D6C 00   
0B4D6D 00 
0B4D6E 00 
0B4D6F 00 
0B4D6F 00   
0B4D70 00 
0B4D71 00 
0B4D72 00 
0B4D72 00   
0B4D73 00 
0B4D74 00 
0B4D75 00 
0B4D75 00   
0B4D76 00 
0B4D77 00 
0B4D78 00 
0B4D78 00   
0B4D79 00 
0B4D7A 00 
0B4D7B 00 
0B4D7B 00   
0B4D7C 00 
0B4D7D 00 
0B4D7E 00 
0B4D7E 00   
0B4D7F 00 
0B4D80 00 
0B4D81 00 
0B4D81 00   
0B4D82 00 
0B4D83 00 
0B4D84 00 
0B4D84 00   
0B4D85 00 
0B4D86 00 
0B4D87 00 
0B4D87 00   
0B4D88 00 
0B4D89 00 
0B4D8A 00 
0B4D8A 00   
0B4D8B 00 
0B4D8C 00 
0B4D8D 00 
0B4D8D 00   
0B4D8E 00 
0B4D8F 00 
0B4D90 00 
0B4D90 00   
0B4D91 00 
0B4D92 00 
0B4D93 00 
0B4D93 00   
0B4D94 00 
0B4D95 00 
0B4D96 00 
0B4D96 00   
0B4D97 00 
0B4D98 00 
0B4D99 00 
0B4D99 00   
0B4D9A 00 
0B4D9B 00 
0B4D9C 00 
0B4D9C 00   
0B4D9D 00 
0B4D9E 00 
0B4D9F 00 
0B4D9F 00   
0B4DA0 00 
0B4DA1 00 
0B4DA2 00 
0B4DA2 00   
0B4DA3 00 
0B4DA4 00 
0B4DA5 00 
0B4DA5 00   
0B4DA6 00 
0B4DA7 00 
0B4DA8 00 
0B4DA8 00   
0B4DA9 00 
0B4DAA 00 
0B4DAB 00 
0B4DAB 00   
0B4DAC 00 
0B4DAD 00 
0B4DAE 00 
0B4DAE 00   
0B4DAF 00 
0B4DB0 00 
0B4DB1 00 
0B4DB1 00   
0B4DB2 00 
0B4DB3 00 
0B4DB4 00 
0B4DB4 00   
0B4DB5 00 
0B4DB6 00 
0B4DB7 00 
0B4DB7 00   
0B4DB8 00 
0B4DB9 00 
0B4DBA 00 
0B4DBA 00   
0B4DBB 00 
0B4DBC 00 
0B4DBD 00 
0B4DBD 00   
0B4DBE 00 
0B4DBF 00 
0B4DC0 00 
0B4E00 00    0067** STAVAR:         BLKB    27*4,0            ; Static Variables
0B4E01 00 
0B4E02 00 
0B4E03 00 
0B4E03 00   
0B4E04 00 
0B4E05 00 
0B4E06 00 
0B4E06 00   
0B4E07 00 
0B4E08 00 
0B4E09 00 
0B4E09 00   
0B4E0A 00 
0B4E0B 00 
0B4E0C 00 
0B4E0C 00   
0B4E0D 00 
0B4E0E 00 
0B4E0F 00 
0B4E0F 00   
0B4E10 00 
0B4E11 00 
0B4E12 00 
0B4E12 00   
0B4E13 00 
0B4E14 00 
0B4E15 00 
0B4E15 00   
0B4E16 00 
0B4E17 00 
0B4E18 00 
0B4E18 00   
0B4E19 00 
0B4E1A 00 
0B4E1B 00 
0B4E1B 00   
0B4E1C 00 
0B4E1D 00 
0B4E1E 00 
0B4E1E 00   
0B4E1F 00 
0B4E20 00 
0B4E21 00 
0B4E21 00   
0B4E22 00 
0B4E23 00 
0B4E24 00 
0B4E24 00   
0B4E25 00 
0B4E26 00 
0B4E27 00 
0B4E27 00   
0B4E28 00 
0B4E29 00 
0B4E2A 00 
0B4E2A 00   
0B4E2B 00 
0B4E2C 00 
0B4E2D 00 
0B4E2D 00   
0B4E2E 00 
0B4E2F 00 
0B4E30 00 
0B4E30 00   
0B4E31 00 
0B4E32 00 
0B4E33 00 
0B4E33 00   
0B4E34 00 
0B4E35 00 
0B4E36 00 
0B4E36 00   
0B4E37 00 
0B4E38 00 
0B4E39 00 
0B4E39 00   
0B4E3A 00 
0B4E3B 00 
0B4E3C 00 
0B4E3C 00   
0B4E3D 00 
0B4E3E 00 
0B4E3F 00 
0B4E3F 00   
0B4E40 00 
0B4E41 00 
0B4E42 00 
0B4E42 00   
0B4E43 00 
0B4E44 00 
0B4E45 00 
0B4E45 00   
0B4E46 00 
0B4E47 00 
0B4E48 00 
0B4E48 00   
0B4E49 00 
0B4E4A 00 
0B4E4B 00 
0B4E4B 00   
0B4E4C 00 
0B4E4D 00 
0B4E4E 00 
0B4E4E 00   
0B4E4F 00 
0B4E50 00 
0B4E51 00 
0B4E6C 00    0068** DYNVAR:         BLKB    54*3,0            ; Dynamic Variable Pointers
0B4E6D 00 
0B4E6E 00 
0B4E6F 00 
0B4E6F 00   
0B4E70 00 
0B4E71 00 
0B4E72 00 
0B4E72 00   
0B4E73 00 
0B4E74 00 
0B4E75 00 
0B4E75 00   
0B4E76 00 
0B4E77 00 
0B4E78 00 
0B4E78 00   
0B4E79 00 
0B4E7A 00 
0B4E7B 00 
0B4E7B 00   
0B4E7C 00 
0B4E7D 00 
0B4E7E 00 
0B4E7E 00   
0B4E7F 00 
0B4E80 00 
0B4E81 00 
0B4E81 00   
0B4E82 00 
0B4E83 00 
0B4E84 00 
0B4E84 00   
0B4E85 00 
0B4E86 00 
0B4E87 00 
0B4E87 00   
0B4E88 00 
0B4E89 00 
0B4E8A 00 
0B4E8A 00   
0B4E8B 00 
0B4E8C 00 
0B4E8D 00 
0B4E8D 00   
0B4E8E 00 
0B4E8F 00 
0B4E90 00 
0B4E90 00   
0B4E91 00 
0B4E92 00 
0B4E93 00 
0B4E93 00   
0B4E94 00 
0B4E95 00 
0B4E96 00 
0B4E96 00   
0B4E97 00 
0B4E98 00 
0B4E99 00 
0B4E99 00   
0B4E9A 00 
0B4E9B 00 
0B4E9C 00 
0B4E9C 00   
0B4E9D 00 
0B4E9E 00 
0B4E9F 00 
0B4E9F 00   
0B4EA0 00 
0B4EA1 00 
0B4EA2 00 
0B4EA2 00   
0B4EA3 00 
0B4EA4 00 
0B4EA5 00 
0B4EA5 00   
0B4EA6 00 
0B4EA7 00 
0B4EA8 00 
0B4EA8 00   
0B4EA9 00 
0B4EAA 00 
0B4EAB 00 
0B4EAB 00   
0B4EAC 00 
0B4EAD 00 
0B4EAE 00 
0B4EAE 00   
0B4EAF 00 
0B4EB0 00 
0B4EB1 00 
0B4EB1 00   
0B4EB2 00 
0B4EB3 00 
0B4EB4 00 
0B4EB4 00   
0B4EB5 00 
0B4EB6 00 
0B4EB7 00 
0B4EB7 00   
0B4EB8 00 
0B4EB9 00 
0B4EBA 00 
0B4EBA 00   
0B4EBB 00 
0B4EBC 00 
0B4EBD 00 
0B4EBD 00   
0B4EBE 00 
0B4EBF 00 
0B4EC0 00 
0B4EC0 00   
0B4EC1 00 
0B4EC2 00 
0B4EC3 00 
0B4EC3 00   
0B4EC4 00 
0B4EC5 00 
0B4EC6 00 
0B4EC6 00   
0B4EC7 00 
0B4EC8 00 
0B4EC9 00 
0B4EC9 00   
0B4ECA 00 
0B4ECB 00 
0B4ECC 00 
0B4ECC 00   
0B4ECD 00 
0B4ECE 00 
0B4ECF 00 
0B4ECF 00   
0B4ED0 00 
0B4ED1 00 
0B4ED2 00 
0B4ED2 00   
0B4ED3 00 
0B4ED4 00 
0B4ED5 00 
0B4ED5 00   
0B4ED6 00 
0B4ED7 00 
0B4ED8 00 
0B4ED8 00   
0B4ED9 00 
0B4EDA 00 
0B4EDB 00 
0B4EDB 00   
0B4EDC 00 
0B4EDD 00 
0B4EDE 00 
0B4EDE 00   
0B4EDF 00 
0B4EE0 00 
0B4EE1 00 
0B4EE1 00   
0B4EE2 00 
0B4EE3 00 
0B4EE4 00 
0B4EE4 00   
0B4EE5 00 
0B4F0E 00    0069** FNPTR:          BLKB    3,0               ; Dynamic Function Pointers
0B4F0F 00 
0B4F10 00 
0B4F11 00    0070** PROPTR:         BLKB    3,0               ; Dynamic Procedure Pointers
0B4F12 00 
0B4F13 00 
             0071** ;
0B4F14 00    0072** PAGE_:          BLKB    3,0               ; Start of User Program
0B4F15 00 
0B4F16 00 
0B4F17 00    0073** TOP:            BLKB    3,0               ; First Location after User Program
0B4F18 00 
0B4F19 00 
0B4F1A 00    0074** LOMEM:          BLKB    3,0               ; Start of Dynamic Storage
0B4F1B 00 
0B4F1C 00 
0B4F1D 00    0075** FREE:           BLKB    3,0               ; First Free Space Byte
0B4F1E 00 
0B4F1F 00 
0B4F20 00    0076** HIMEM:          BLKB    3,0               ; First Protected Byte
0B4F21 00 
0B4F22 00 
             0077** ;
0B4F23 00    0078** LINENO:         BLKB    3,0               ; Line Number
0B4F24 00 
0B4F25 00 
0B4F26 00    0079** TRACEN:         BLKB    3,0               ; Trace Flag
0B4F27 00 
0B4F28 00 
0B4F29 00    0080** AUTONO:         BLKB    3,0               ; Auto Flag
0B4F2A 00 
0B4F2B 00 
0B4F2C 00    0081** ERRTRP:         BLKB    3,0               ; Error Trap
0B4F2D 00 
0B4F2E 00 
0B4F2F 00    0082** ERRTXT:         BLKB    2,0               ; Error Message Pointer
0B4F30 00 
0B4F31 00    0083** DATPTR:         BLKB    2,0               ; Data Pointer
0B4F32 00 
0B4F33 00    0084** ERL:            BLKB    2,0               ; Error Line
0B4F34 00 
0B4F35 00    0085** ERRLIN:         BLKB    3,0               ; The "ON ERROR" Line
0B4F36 00 
0B4F37 00 
0B4F38 00    0086** RANDOM:         BLKB    5,0               ; Random Number
0B4F39 00 
0B4F3A 00 
0B4F3B 00 
0B4F3B 00   
0B4F3D 00    0087** COUNT:          BLKB    1,0               ; Print Position
0B4F3E 00    0088** WIDTH:          BLKB    1,0               ; Print Width
0B4F3F 00    0089** ERR:            BLKB    1,0               ; Error Number
0B4F40 00    0090** LISTON:         BLKB    1,0               ; LISTO (bottom nibble)
             0091** ; - BIT 0: If set, output a space after the line number
             0092** ; - BIT 1: If set, then indent FOR/NEXT loops
             0093** ; - BIT 2: If set, then indent REPEAT/UNTIL loops
             0094** ; - BIT 3: If set, then output to buffer for *EDIT
             0095** ; OPT FLAG (top nibble)
             0096** ; - BIT 4: If set, then list whilst assembling
             0097** ; - BIT 5: If set, then assembler errors are reported
             0098** ; - BIT 6: If set, then place the code starting at address pointed to by O%
             0099** ; - BIT 7: If set, then assemble in ADL mode, otherwise assemble in Z80 mode
0B4F41 00    0100** INCREM:         BLKB    1,0               ; Auto-Increment Value
             0101** ;
             0102** ; --------------------------------------------------------------------------------------------
             0103** ; BEGIN MODIFIED CODE
             0104** ; --------------------------------------------------------------------------------------------
             0105** ; Originally in equs.inc
             0106** ;
             0107** OC:			EQU     15*4+STAVAR     ; CODE ORIGIN (O%)
             0108** PC:			EQU     16*4+STAVAR     ; PROGRAM COUNTER (P%)
             0109** VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands
             0110** ; --------------------------------------------------------------------------------------------
             0111** ; END MODIFIED CODE
             0112** ; --------------------------------------------------------------------------------------------
             0113** 
             0114** ; Extra Agon-implementation specific system variables
             0115** ;
0B4F42 00    0116** FLAGS:          BLKB    1,0       ; Miscellaneous flags
             0117** ; - BIT 7: Set if ESC pressed
             0118** ; - BIT 6: Set to disable ESC
0B4F43 00    0119** OSWRCHPT:       BLKB    2,0       ; Pointer for *EDIT
0B4F44 00 
0B4F45 00    0120** OSWRCHCH:       BLKB    1,0       ; Channel of OSWRCH
             0121** ; - 0: Console
             0122** ; - 1: File
0B4F46 00    0123** OSWRCHFH:       BLKB    1,0       ; File handle for OSWRCHCHN
0B4F47 00    0124** KEYDOWN:        BLKB    1,0       ; Keydown flag
0B4F48 00    0125** KEYASCII:       BLKB    1,0       ; ASCII code of pressed key
0B4F49 00    0126** KEYCOUNT:       BLKB    1,0       ; Counts every time a key is pressed
0B4F4A 00    0127** R0:             BLKB    3,0       ; General purpose storage for 8/16 to 24 bit operations
0B4F4B 00 
0B4F4C 00 
0B4F4D 00    0128** R1:             BLKB    3,0
0B4F4E 00 
0B4F4F 00 
             0129** 
             0130** ;
             0131** ; This must be at the end
             0132** ;
             0133** RAM_END:
0B4F50 FF    0134** ALIGN	256
0B4F51 FF 
0B4F52 FF 
0B4F53 FF 
0B4F53 FF   
0B4F54 FF 
0B4F55 FF 
0B4F56 FF 
0B4F56 FF   
0B4F57 FF 
0B4F58 FF 
0B4F59 FF 
0B4F59 FF   
0B4F5A FF 
0B4F5B FF 
0B4F5C FF 
0B4F5C FF   
0B4F5D FF 
0B4F5E FF 
0B4F5F FF 
0B4F5F FF   
0B4F60 FF 
0B4F61 FF 
0B4F62 FF 
0B4F62 FF   
0B4F63 FF 
0B4F64 FF 
0B4F65 FF 
0B4F65 FF   
0B4F66 FF 
0B4F67 FF 
0B4F68 FF 
0B4F68 FF   
0B4F69 FF 
0B4F6A FF 
0B4F6B FF 
0B4F6B FF   
0B4F6C FF 
0B4F6D FF 
0B4F6E FF 
0B4F6E FF   
0B4F6F FF 
0B4F70 FF 
0B4F71 FF 
0B4F71 FF   
0B4F72 FF 
0B4F73 FF 
0B4F74 FF 
0B4F74 FF   
0B4F75 FF 
0B4F76 FF 
0B4F77 FF 
0B4F77 FF   
0B4F78 FF 
0B4F79 FF 
0B4F7A FF 
0B4F7A FF   
0B4F7B FF 
0B4F7C FF 
0B4F7D FF 
0B4F7D FF   
0B4F7E FF 
0B4F7F FF 
0B4F80 FF 
0B4F80 FF   
0B4F81 FF 
0B4F82 FF 
0B4F83 FF 
0B4F83 FF   
0B4F84 FF 
0B4F85 FF 
0B4F86 FF 
0B4F86 FF   
0B4F87 FF 
0B4F88 FF 
0B4F89 FF 
0B4F89 FF   
0B4F8A FF 
0B4F8B FF 
0B4F8C FF 
0B4F8C FF   
0B4F8D FF 
0B4F8E FF 
0B4F8F FF 
0B4F8F FF   
0B4F90 FF 
0B4F91 FF 
0B4F92 FF 
0B4F92 FF   
0B4F93 FF 
0B4F94 FF 
0B4F95 FF 
0B4F95 FF   
0B4F96 FF 
0B4F97 FF 
0B4F98 FF 
0B4F98 FF   
0B4F99 FF 
0B4F9A FF 
0B4F9B FF 
0B4F9B FF   
0B4F9C FF 
0B4F9D FF 
0B4F9E FF 
0B4F9E FF   
0B4F9F FF 
0B4FA0 FF 
0B4FA1 FF 
0B4FA1 FF   
0B4FA2 FF 
0B4FA3 FF 
0B4FA4 FF 
0B4FA4 FF   
0B4FA5 FF 
0B4FA6 FF 
0B4FA7 FF 
0B4FA7 FF   
0B4FA8 FF 
0B4FA9 FF 
0B4FAA FF 
0B4FAA FF   
0B4FAB FF 
0B4FAC FF 
0B4FAD FF 
0B4FAD FF   
0B4FAE FF 
0B4FAF FF 
0B4FB0 FF 
0B4FB0 FF   
0B4FB1 FF 
0B4FB2 FF 
0B4FB3 FF 
0B4FB3 FF   
0B4FB4 FF 
0B4FB5 FF 
0B4FB6 FF 
0B4FB6 FF   
0B4FB7 FF 
0B4FB8 FF 
0B4FB9 FF 
0B4FB9 FF   
0B4FBA FF 
0B4FBB FF 
0B4FBC FF 
0B4FBC FF   
0B4FBD FF 
0B4FBE FF 
0B4FBF FF 
0B4FBF FF   
0B4FC0 FF 
0B4FC1 FF 
0B4FC2 FF 
0B4FC2 FF   
0B4FC3 FF 
0B4FC4 FF 
0B4FC5 FF 
0B4FC5 FF   
0B4FC6 FF 
0B4FC7 FF 
0B4FC8 FF 
0B4FC8 FF   
0B4FC9 FF 
0B4FCA FF 
0B4FCB FF 
0B4FCB FF   
0B4FCC FF 
0B4FCD FF 
0B4FCE FF 
0B4FCE FF   
0B4FCF FF 
0B4FD0 FF 
0B4FD1 FF 
0B4FD1 FF   
0B4FD2 FF 
0B4FD3 FF 
0B4FD4 FF 
             0135** USER:							; Must be aligned on a page boundary
             0136** 
               0160 
               0161 ; Storage for the argv array pointers
               0162 min_args: equ 2
               0163 argv_ptrs_max:		EQU	16			; Maximum number of arguments allowed in argv
0B5000 00      0164 argv_ptrs:		    BLKP	argv_ptrs_max, 0
0B5001 00 
0B5002 00 
0B5003 00 
0B5003 00   
0B5004 00 
0B5005 00 
0B5006 00 
0B5006 00   
0B5007 00 
0B5008 00 
0B5009 00 
0B5009 00   
0B500A 00 
0B500B 00 
0B500C 00 
0B500C 00   
0B500D 00 
0B500E 00 
0B500F 00 
0B500F 00   
0B5010 00 
0B5011 00 
0B5012 00 
0B5012 00   
0B5013 00 
0B5014 00 
0B5015 00 
0B5015 00   
0B5016 00 
0B5017 00 
0B5018 00 
0B5018 00   
0B5019 00 
0B501A 00 
0B501B 00 
0B501B 00   
0B501C 00 
0B501D 00 
0B501E 00 
0B501E 00   
0B501F 00 
0B5020 00 
0B5021 00 
0B5021 00   
0B5022 00 
0B5023 00 
0B5024 00 
               0165 _sps:			DS	3			; Storage for the stack pointer (used by BASIC)
               0166 
               0167 ; GLOBAL MESSAGE STRINGS
0B5033 55      0168 str_usage: ASCIZ "Usage: scratch <args>\r\n"
0B5034 73 
0B5035 61 
0B5036 67 
0B5036 65   
0B5037 3A 
0B5038 20 
0B5039 73 
0B5039 63   
0B503A 72 
0B503B 61 
0B503C 74 
0B503C 63   
0B503D 68 
0B503E 20 
0B503F 3C 
0B503F 61   
0B5040 72 
0B5041 67 
0B5042 73 
0B5042 3E   
0B5043 0D 
0B5044 0A 
0B5045 00 
0B504B 45      0169 str_error: ASCIZ "Error!\r\n"
0B504C 72 
0B504D 72 
0B504E 6F 
0B504E 72   
0B504F 21 
0B5050 0D 
0B5051 0A 
0B5051 00   
0B5054 53      0170 str_success: ASCIZ "Success!\r\n"
0B5055 75 
0B5056 63 
0B5057 63 
0B5057 65   
0B5058 73 
0B5059 73 
0B505A 21 
0B505A 0D   
0B505B 0A 
0B505C 00 
               0171 
               0172 ; ========= MAIN LOOP =========
               0173 ; The main routine
               0174 ; IXU: argv - pointer to array of parameters
               0175 ;   C: argc - number of parameters
               0176 ; Returns:
               0177 ;  HL: Error code, or 0 if OK
               0178 
               0179 _main:
0B505F 79      0180 ld a,c              ; how many arguments?
0B5060 FE      0181 cp min_args         ; not enough?
0B5061 02 
0B5062 30      0182 jr nc,main          ; if enough, go to main loop
0B5063 27 
0B5064 21      0183 ld hl,str_usage     ; if not enough, print usage
0B5065 33 
0B5066 50 
0B5067 0B 
0B5068 CD      0184 call printString
0B5069 16 
0B506A 01 
0B506B 0B 
               0185 ; fall through to _main_end_error
               0186 
               0187 _main_end_error:
0B506C 21      0188 ld hl,str_error     ; print error message
0B506D 4B 
0B506E 50 
0B506F 0B 
0B5070 CD      0189 call printString
0B5071 16 
0B5072 01 
0B5073 0B 
0B5074 21      0190 ld hl,19            ; return error code 19
0B5075 13 
0B5076 00 
0B5077 00 
0B5078 C9      0191 ret
               0192 
               0193 ; begin BASIC-specific end code
               0194 ; This bit of code is called from STAR_BYE and returns us safely to MOS
0B5079 ED      0195 _basic_end:			LD		SP, (_sps)		; Restore the stack pointer
0B507A 7B 
0B507B 30 
0B507C 50 
0B507C 0B   
               0196 ; fall through to _main_end_ok
               0197 ; end BASIC-specific end code
               0198 
               0199 _main_end_ok:
0B507E 21      0200 ld hl,str_success   ; print success message
0B507F 54 
0B5080 50 
0B5081 0B 
0B5082 CD      0201 call printString
0B5083 16 
0B5084 01 
0B5085 0B 
0B5086 21      0202 ld hl,0             ; return 0 for success
0B5087 00 
0B5088 00 
0B5089 00 
0B508A C9      0203 ret
               0204 
               0205 ; ========= BEGIN CUSTOM MAIN LOOP =========
               0206 main:
0B508B 0D      0207 dec c               ; decrement the argument count to skip the program name
0B508C ED      0208 lea ix,ix+3         ; point to the first real argument (argv_ptrs+3)
0B508D 32 
0B508E 03 
0B508F DD      0209 ld hl,(ix)          ; get the first argument in case hl doesn't land here with it
0B5090 27 
0B5091 00 
               0210 
0B5092 3E      0211 ld a,0 ; DEBUG
0B5093 00 
               0212 ; call dumpMemoryHex ; DEBUG
               0213 ; call dumpRegistersHex ; DEBUG
0B5094 CD      0214 call printString  ; DEBUG
0B5095 16 
0B5096 01 
0B5097 0B 
0B5098 CD      0215 call printNewLine ; DEBUG
0B5099 2B 
0B509A 01 
0B509B 0B 
               0216 ; call print_params   ; DEBUG
               0217 
0B509C DD      0218 ld iy,(ix)           ; point to the expression
0B509D 31 
0B509E 00 
0B509F CD      0219 call EXPR ; send the expression to the BASIC interpreter for evaluation and execution
0B50A0 C8 
0B50A1 03 
0B50A2 0B 
0B50A3 F2      0220 jp p,@print_dec
0B50A4 B7 
0B50A5 50 
0B50A6 0B 
0B50A7 21      0221 ld hl,ACCS ; result is a string
0B50A8 00 
0B50A9 4C 
0B50AA 0B 
0B50AB CD      0222 call printString
0B50AC 16 
0B50AD 01 
0B50AE 0B 
0B50AF CD      0223 call printNewLine
0B50B0 2B 
0B50B1 01 
0B50B2 0B 
0B50B3 C3      0224 jp _main_end_ok     ; return success
0B50B4 7E 
0B50B5 50 
0B50B6 0B 
               0225 
               0226 @print_dec:
0B50B7 CD      0227 call print_float_dec ; print the result
0B50B8 FB 
0B50B9 01 
0B50BA 0B 
0B50BB CD      0228 call printNewLine
0B50BC 2B 
0B50BD 01 
0B50BE 0B 
0B50BF C3      0229 jp _main_end_ok     ; return success
0B50C0 7E 
0B50C1 50 
0B50C2 0B 
               0230 
               0231 ; call dumpRegistersHex ; DEBUG
               0232 ; call printNewLine
               0233 ; call dumpRegistersHex ; DEBUG
               0234 
               0235 
               0236 ; ========== HELPER FUNCTIONS ==========
               0237 ;
               0238 ; ; get the next argument after ix as a floating point number
               0239 ; ; inputs: ix = pointer to the argument string
               0240 ; ; outputs: HLH'L'C = floating point number, ix points to the next argument
               0241 ; ; destroys: everything except iy, including prime registers
               0242 ; get_arg_float:
               0243 ;     lea ix,ix+3 ; point to the next argument
               0244 ;     push ix ; preserve
               0245 ;     ld ix,(ix)  ; point to argument string
               0246 ;     call VAL ; convert the string to a float
               0247 ;     pop ix ; restore
               0248 ;     ret ; return with the value in HLH'L'C
               0249 ;
               0250 ; get the next argument after ix as a string
               0251 ; inputs: ix = pointer to the argument string
               0252 ; outputs: HL = pointer to the argument string, ix points to the next argument
               0253 ; destroys: a, h, l, f
               0254 get_arg_text:
0B50C3 ED      0255 lea ix,ix+3 ; point to the next argument
0B50C4 32 
0B50C5 03 
0B50C6 DD      0256 ld hl,(ix)  ; get the argument string
0B50C7 27 
0B50C8 00 
0B50C9 C9      0257 ret
               0258 ;
               0259 ; ; match the next argument after ix to the dispatch table at iy
               0260 ; ;   - arguments and dispatch entries are zero-terminated, case-sensitive strings
               0261 ; ;   - final entry of dispatch table must be a 3-byte zero or bad things will happen
               0262 ; ; returns: NO MATCH: iy=dispatch list terminator a=1 and zero flag reset
               0263 ; ;          ON MATCH: iy=dispatch address, a=0 and zero flag set
               0264 ; ; destroys: a, hl, de, ix, iy, flags
               0265 ; match_next:
               0266 ;     lea ix,ix+3         ; point to the next argument
               0267 ; @loop:
               0268 ;     ld hl,(iy)          ; pointer argument dispatch record
               0269 ;     sign_hlu            ; check for list terminator
               0270 ;     jp z,@no_match      ; if a=0, return error
               0271 ;     inc hl              ; skip over jp instruction
               0272 ;     inc hl
               0273 ;     ld de,(ix)          ; pointer to the argument string
               0274 ;     call str_equal      ; compare the argument to the dispatch table entry
               0275 ;     jp z,@match         ; if equal, return success
               0276 ;     lea iy,iy+3         ; if not equal, bump iy to next dispatch table entry
               0277 ;     jp @loop            ; and loop
               0278 ; @no_match:
               0279 ;     inc a               ; no match so return a=1 and zero flag reset
               0280 ;     ret
               0281 ; @match:
               0282 ;     ld iy,(iy)          ; get the function pointer
               0283 ;     ret                 ; return a=0 and zero flag set
               0284 
               0285 ; ; same as match_next, but prints the parameter if a match is found
               0286 ; match_next_and_print:
               0287 ;     call match_next
               0288 ;     ret nz ; no match found
               0289 ;     lea ix,ix-3
               0290 ;     call get_arg_text ; hl points to the operator string
               0291 ;     call print_param
               0292 ;     ret
               0293 
               0294 ; ; compare two zero-terminated strings for equality, case-sensitive
               0295 ; ; hl: pointer to first string, de: pointer to second string
               0296 ; ; returns: z if equal, nz if not equal
               0297 ; ; destroys: a, hl, de
               0298 ; str_equal:
               0299 ;     ld a,(de)           ; get the first character
               0300 ;     cp (hl)             ; compare to the second character
               0301 ;     ret nz              ; if not equal, return
               0302 ;     or a
               0303 ;     ret z               ; if equal and zero, return
               0304 ;     inc hl              ; next character
               0305 ;     inc de
               0306 ;     jp str_equal        ; loop until end of string
               0307 
               0308 ; ; print the parameter string pointed to by ix
               0309 ; ; destroys: a, hl
               0310 ; print_param:
               0311 ;     ld hl,(ix)          ; get the parameter pointer
               0312 ;     call printString    ; print the parameter string
               0313 ;     ld a,' '            ; print a space separator
               0314 ;     rst.lil $10
               0315 ;     ret
               0316 
               0317 ; ; print the parameters
               0318 ; ; inputs: b = number of parameters, ix = pointer to the parameters
               0319 ; ; destroys: a, hl, bc
               0320 ; print_params:
               0321 ;     ld b,c              ; loop counter = number of parameters
               0322 ;     push ix             ; save the pointer to the parameters
               0323 ; @loop:
               0324 ;     push bc             ; save the loop counter
               0325 ;     call print_param    ; print the parameter
               0326 ;     lea ix,ix+3         ; next parameter pointer
               0327 ;     pop bc              ; get back the loop counter
               0328 ;     djnz @loop          ; loop until done
               0329 ;     pop ix              ; restore the pointer to the parameters
               0330 ;     ret
               0331 
               0332 ; debug_print:
               0333 ;     call printNewLine
               0334 ;     call dumpRegistersHexAll
               0335 ;     call printNewLine
               0336 ;     ret
               0337 
