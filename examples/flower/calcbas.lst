        Output     Line 
       
               0001 ;
               0002 ; Title:	calcbas
               0003 ; Author:	Brandon R. Gates
               0004 ; Created:	29/10/2024
               0005 
               0006 ; ========================================
               0007 ; MODIFIED MOSLET INITIALIZATION CODE
               0008 ; ========================================
               0009 ;
               0010 ; Title:	Copy - Initialisation Code
               0011 ; Author:	Dean Belfield, Lennart Benschop
               0012 ; Created:	06/11/2022
               0013 ; Last Updated:	26/12/2022
               0014 ;
               0015 ; Modinfo:
               0016 ; 17/12/2022:	Added parameter processing
               0017 ; 26/12/2022:   Adapted to Copy program, use LEA instead of 3x INC IX, Save/restore MB
               0018 ; Changed:      08/04/2924 adapt to ez80asm
               0019 ;
               0020 ASSUME	ADL = 1
               0021 INCLUDE "mos_api.inc"
              0001* ;
              0002* ; Title:	AGON MOS - API for user projects
              0003* ; Author:	Dean Belfield
              0004* ; Created:	03/08/2022
              0005* ; Last Updated:	11/11/2023
              0006* ;
              0007* ; Modified: 11/14/2024 by Brandon R. Gates for ez80asm compatibility
              0008* ;
              0009* ; Modinfo:
              0010* ; 05/08/2022:	Added mos_feof
              0011* ; 09/08/2022:	Added system variables: cursorX, cursorY
              0012* ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
              0013* ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
              0014* ; 24/09/2022:	Added mos_getError, mos_mkdir
              0015* ; 13/10/2022:	Added mos_oscli
              0016* ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
              0017* ; 04/03/2023:	Added sysvar_scrpixelIndex
              0018* ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
              0019* ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
              0020* ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
              0021* ; 22/03/2023:	The VDP commands are now indexed from 0x80
              0022* ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
              0023* ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
              0024* ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
              0025* ; 19/05/2023:	Added sysvar_scrMode
              0026* ; 05/06/2023:	Added sysvar_rtcEnable
              0027* ; 03/08/2023:	Added mos_setkbvector
              0028* ; 10/08/2023:	Added mos_getkbmap
              0029* ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
              0030* ; 11/14/2024:   FatFS structs modified for ez80asm compatibility
              0031* ;
              0032* ; VDP control (VDU 23, 0, n)
              0033* ;
              0034* vdp_gp:			EQU 	80h
              0035* vdp_keycode:		EQU 	81h
              0036* vdp_cursor:		EQU	82h
              0037* vdp_scrchar:		EQU	83h
              0038* vdp_scrpixel:		EQU	84h
              0039* vdp_audio:		EQU	85h
              0040* vdp_mode:		EQU	86h
              0041* vdp_rtc:		EQU	87h
              0042* vdp_keystate:		EQU	88h
              0043* vdp_logicalcoords:	EQU	C0h
              0044* vdp_terminalmode:	EQU	FFh
              0045* 
              0046* ; MOS high level functions
              0047* ;
              0048* mos_getkey:		EQU	00h
              0049* mos_load:		EQU	01h
              0050* mos_save:		EQU	02h
              0051* mos_cd:			EQU	03h
              0052* mos_dir:		EQU	04h
              0053* mos_del:		EQU	05h
              0054* mos_ren:		EQU	06h
              0055* mos_mkdir:		EQU	07h
              0056* mos_sysvars:		EQU	08h
              0057* mos_editline:		EQU	09h
              0058* mos_fopen:		EQU	0Ah
              0059* mos_fclose:		EQU	0Bh
              0060* mos_fgetc:		EQU	0Ch
              0061* mos_fputc:		EQU	0Dh
              0062* mos_feof:		EQU	0Eh
              0063* mos_getError:		EQU	0Fh
              0064* mos_oscli:		EQU	10h
              0065* mos_copy:		EQU	11h
              0066* mos_getrtc:		EQU	12h
              0067* mos_setrtc:		EQU	13h
              0068* mos_setintvector:	EQU	14h
              0069* mos_uopen:		EQU	15h
              0070* mos_uclose:		EQU	16h
              0071* mos_ugetc:		EQU	17h
              0072* mos_uputc:		EQU 	18h
              0073* mos_getfil:		EQU	19h
              0074* mos_fread:		EQU	1Ah
              0075* mos_fwrite:		EQU	1Bh
              0076* mos_flseek:		EQU	1Ch
              0077* mos_setkbvector:	EQU	1Dh
              0078* mos_getkbmap:		EQU	1Eh
              0079* mos_i2c_open:		EQU	1Fh
              0080* mos_i2c_close:		EQU	20h
              0081* mos_i2c_write:		EQU	21h
              0082* mos_i2c_read:		EQU	22h
              0083* 
              0084* 
              0085* ; FatFS file access functions
              0086* ;
              0087* ffs_fopen:		EQU	80h
              0088* ffs_fclose:		EQU	81h
              0089* ffs_fread:		EQU	82h
              0090* ffs_fwrite:		EQU	83h
              0091* ffs_flseek:		EQU	84h
              0092* ffs_ftruncate:		EQU	85h
              0093* ffs_fsync:		EQU	86h
              0094* ffs_fforward:		EQU	87h
              0095* ffs_fexpand:		EQU	88h
              0096* ffs_fgets:		EQU	89h
              0097* ffs_fputc:		EQU	8Ah
              0098* ffs_fputs:		EQU	8Bh
              0099* ffs_fprintf:		EQU	8Ch
              0100* ffs_ftell:		EQU	8Dh
              0101* ffs_feof:		EQU	8Eh
              0102* ffs_fsize:		EQU	8Fh
              0103* ffs_ferror:		EQU	90h
              0104* 
              0105* ; FatFS directory access functions
              0106* ;
              0107* ffs_dopen:		EQU	91h
              0108* ffs_dclose:		EQU	92h
              0109* ffs_dread:		EQU	93h
              0110* ffs_dfindfirst:		EQU	94h
              0111* ffs_dfindnext:		EQU	95h
              0112* 
              0113* ; FatFS file and directory management functions
              0114* ;
              0115* ffs_stat:		EQU	96h
              0116* ffs_unlink:		EQU	97h
              0117* ffs_rename:		EQU	98h
              0118* ffs_chmod:		EQU	99h
              0119* ffs_utime:		EQU	9Ah
              0120* ffs_mkdir:		EQU	9Bh
              0121* ffs_chdir:		EQU	9Ch
              0122* ffs_chdrive:		EQU	9Dh
              0123* ffs_getcwd:		EQU	9Eh
              0124* 
              0125* ; FatFS volume management and system configuration functions
              0126* ;
              0127* ffs_mount:		EQU	9Fh
              0128* ffs_mkfs:		EQU	A0h
              0129* ffs_fdisk:		EQU	A1h
              0130* ffs_getfree:		EQU	A2h
              0131* ffs_getlabel:		EQU	A3h
              0132* ffs_setlabel:		EQU	A4h
              0133* ffs_setcp:		EQU	A5h
              0134* 
              0135* ; File access modes
              0136* ;
              0137* fa_read:		EQU	01h
              0138* fa_write:		EQU	02h
              0139* fa_open_existing:	EQU	00h
              0140* fa_create_new:		EQU	04h
              0141* fa_create_always:	EQU	08h
              0142* fa_open_always:		EQU	10h
              0143* fa_open_append:		EQU	30h
              0144* 
              0145* ; System variable indexes for api_sysvars
              0146* ; Index into _sysvars in globals.asm
              0147* ;
              0148* sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
              0149* sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
              0150* sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
              0151* sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
              0152* sysvar_cursorX:		EQU	07h	; 1: Cursor X position
              0153* sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
              0154* sysvar_scrchar:		EQU	09h	; 1: Character read from screen
              0155* sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
              0156* sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
              0157* sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
              0158* sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
              0159* sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
              0160* sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
              0161* sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
              0162* sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
              0163* sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
              0164* sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
              0165* sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
              0166* sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
              0167* sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
              0168* sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
              0169* sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
              0170* sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
              0171* sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
              0172* sysvar_scrMode:		EQU	27h	; 1: Screen mode
              0173* sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
              0174* sysvar_mouseX:		EQU	29h	; 2: Mouse X position
              0175* sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
              0176* sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
              0177* sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
              0178* sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
              0179* sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
              0180* ;
              0181* ; Flags for the VPD protocol
              0182* ;
              0183* vdp_pflag_cursor:	EQU	00000001b
              0184* vdp_pflag_scrchar:	EQU	00000010b
              0185* vdp_pflag_point:	EQU	00000100b
              0186* vdp_pflag_audio:	EQU	00001000b
              0187* vdp_pflag_mode:		EQU	00010000b
              0188* vdp_pflag_rtc:		EQU	00100000b
              0189* vdp_pflag_mouse:	EQU	01000000b
              0190* ; vdp_pflag_buffered:	EQU	10000000b
              0191* 
              0192* 
              0193* ; FatFS structures
              0194* ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
              0195* ;
              0196* ; Object ID and allocation information (FFOBJID)
              0197* FFOBJID.fs:       EQU 0    ; Pointer to the hosting volume of this object
              0198* FFOBJID.id:       EQU 3    ; Hosting volume mount ID
              0199* FFOBJID.attr:     EQU 5    ; Object attribute
              0200* FFOBJID.stat:     EQU 6    ; Object chain status
              0201* FFOBJID.sclust:   EQU 7    ; Object data start cluster
              0202* FFOBJID.objsize:  EQU 11   ; Object size
              0203* FFOBJID_SIZE:     EQU 15   ; Total size of FFOBJID structure
              0204* ;
              0205* ; File object structure (FIL)
              0206* ;
              0207* FIL.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
              0208* FIL.flag:         EQU FFOBJID_SIZE       ; File status flags
              0209* FIL.err:          EQU FFOBJID_SIZE + 1   ; Abort flag (error code)
              0210* FIL.fptr:         EQU FFOBJID_SIZE + 2   ; File read/write pointer
              0211* FIL.clust:        EQU FFOBJID_SIZE + 6   ; Current cluster of fptr
              0212* FIL.sect:         EQU FFOBJID_SIZE + 10  ; Sector number appearing in buf[]
              0213* FIL.dir_sect:     EQU FFOBJID_SIZE + 14  ; Sector number containing the directory entry
              0214* FIL.dir_ptr:      EQU FFOBJID_SIZE + 18  ; Pointer to the directory entry in the win[]
              0215* FIL_SIZE:         EQU FFOBJID_SIZE + 21  ; Total size of FIL structure
              0216* ;
              0217* ; Directory object structure (DIR)
              0218* ;
              0219* DIR.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
              0220* DIR.dptr:         EQU FFOBJID_SIZE       ; Current read/write offset
              0221* DIR.clust:        EQU FFOBJID_SIZE + 4   ; Current cluster
              0222* DIR.sect:         EQU FFOBJID_SIZE + 8   ; Current sector
              0223* DIR.dir:          EQU FFOBJID_SIZE + 12  ; Pointer to the directory item in the win[]
              0224* DIR.fn:           EQU FFOBJID_SIZE + 15  ; SFN (in/out) {body[8],ext[3],status[1]}
              0225* DIR.blk_ofs:      EQU FFOBJID_SIZE + 27  ; Offset of current entry block being processed
              0226* DIR_SIZE:         EQU FFOBJID_SIZE + 31  ; Total size of DIR structure
              0227* ;
              0228* ; File information structure (FILINFO)
              0229* ;
              0230* FILINFO.fsize:    EQU 0    ; File size
              0231* FILINFO.fdate:    EQU 4    ; Modified date
              0232* FILINFO.ftime:    EQU 6    ; Modified time
              0233* FILINFO.fattrib:  EQU 8    ; File attribute
              0234* FILINFO.altname:  EQU 9    ; Alternative file name
              0235* FILINFO.fname:    EQU 22   ; Primary file name
              0236* FILINFO_SIZE:     EQU 278  ; Total size of FILINFO structure
              0237* ;
              0238* ; Macro for calling the API
              0239* ; Parameters:
              0240* ; - function: One of the function numbers listed above
              0241* ;
              0242* MACRO MOSCALL	function
              0243* LD	A, function
              0244* RST.LIS	08h
              0245* ENDMACRO
               0022 ORG 0x0B0000 ; Is a moslet
               0023 
               0024 MACRO PROGNAME
               0025 ASCIZ "calcbas"
               0026 ENDMACRO
               0027 ;
               0028 ; Start in ADL mode
               0029 ;
0B0000 C3      0030 JP	_start
0B0001 45 
0B0002 00 
0B0003 0B 
               0031 ;
               0032 ; The header stuff is from byte 64 onwards
               0033 ;
               0034 _exec_name:
               0035 PROGNAME			; The executable name, only used in argv
0B0004 63     0001M ASCIZ "calcbas"
0B0005 61 
0B0006 6C 
0B0007 63 
0B0007 62   
0B0008 61 
0B0009 73 
0B000A 00 
               0036 
0B000C FF      0037 ALIGN	64
0B000D FF 
0B000E FF 
0B000F FF 
0B000F FF   
0B0010 FF 
0B0011 FF 
0B0012 FF 
0B0012 FF   
0B0013 FF 
0B0014 FF 
0B0015 FF 
0B0015 FF   
0B0016 FF 
0B0017 FF 
0B0018 FF 
0B0018 FF   
0B0019 FF 
0B001A FF 
0B001B FF 
0B001B FF   
0B001C FF 
0B001D FF 
0B001E FF 
0B001E FF   
0B001F FF 
0B0020 FF 
0B0021 FF 
0B0021 FF   
0B0022 FF 
0B0023 FF 
0B0024 FF 
0B0024 FF   
0B0025 FF 
0B0026 FF 
0B0027 FF 
0B0027 FF   
0B0028 FF 
0B0029 FF 
0B002A FF 
0B002A FF   
0B002B FF 
0B002C FF 
0B002D FF 
0B002D FF   
0B002E FF 
0B002F FF 
0B0030 FF 
0B0030 FF   
0B0031 FF 
0B0032 FF 
0B0033 FF 
               0038 
0B0040 4D      0039 DB	"MOS"			; Flag for MOS - to confirm this is a valid MOS command
0B0041 4F 
0B0042 53 
0B0043 00      0040 DB	00h			; MOS header version 0
0B0044 01      0041 DB	01h			; Flag for run mode (0: Z80, 1: ADL)
               0042 ;
               0043 ; And the code follows on immediately after the header
               0044 ;
               0045 _start:
0B0045 F5      0046 PUSH	AF			; Preserve the registers
0B0046 C5      0047 PUSH	BC
0B0047 D5      0048 PUSH	DE
0B0048 DD      0049 PUSH	IX
0B0049 E5 
0B004A FD      0050 PUSH	IY
0B004B E5 
0B004C ED      0051 LD	A, MB			; Save MB
0B004D 6E 
0B004E F5      0052 PUSH 	AF
0B004F AF      0053 XOR 	A
0B0050 ED      0054 LD 	MB, A                   ; Clear to zero so MOS API calls know how to use 24-bit addresses.
0B0051 6D 
               0055 
               0056 ; intialize BASIC-specific stuff
0B0052 ED      0057 LD		(_sps), SP 		; Preserve the 24-bit stack pointer (SPS)
0B0053 73 
0B0054 69 
0B0055 03 
0B0055 0B   
0B0057 CD      0058 CALL		_clear_ram
0B0058 A8 
0B0059 00 
0B005A 0B 
               0059 ; end of BASIC-specific initialization
               0060 
0B005B DD      0061 LD	IX, argv_ptrs		; The argv array pointer address
0B005C 21 
0B005D 39 
0B005E 03 
0B005E 0B   
0B0060 DD      0062 PUSH	IX
0B0061 E5 
0B0062 CD      0063 CALL	_parse_params		; Parse the parameters
0B0063 79 
0B0064 00 
0B0065 0B 
0B0066 DD      0064 POP	IX			; IX: argv
0B0067 E1 
0B0068 06      0065 LD	B, 0			;  C: argc
0B0069 00 
0B006A CD      0066 CALL	_main			; Start user code
0B006B 98 
0B006C 03 
0B006D 0B 
               0067 
0B006E F1      0068 POP 	AF
0B006F ED      0069 LD	MB, A
0B0070 6D 
0B0071 FD      0070 POP	IY			; Restore registers
0B0072 E1 
0B0073 DD      0071 POP	IX
0B0074 E1 
0B0075 D1      0072 POP	DE
0B0076 C1      0073 POP	BC
0B0077 F1      0074 POP	AF
0B0078 C9      0075 RET
               0076 
               0077 ; Parse the parameter string into a C array
               0078 ; Parameters
               0079 ; - HL: Address of parameter string
               0080 ; - IX: Address for array pointer storage
               0081 ; Returns:
               0082 ; -  C: Number of parameters parsed
               0083 ;
0B0079 01      0084 _parse_params:		LD	BC, _exec_name
0B007A 04 
0B007B 00 
0B007C 0B 
0B007D DD      0085 LD	(IX+0), BC		; ARGV[0] = the executable name
0B007E 0F 
0B007F 00 
0B0080 ED      0086 LEA     IX, IX+3
0B0081 32 
0B0082 03 
0B0083 CD      0087 CALL	_skip_spaces		; Skip HL past any leading spaces
0B0084 A1 
0B0085 00 
0B0086 0B 
               0088 ;
0B0087 01      0089 LD	BC, 1			; C: ARGC = 1 - also clears out top 16 bits of BCU
0B0088 01 
0B0089 00 
0B008A 00 
0B008B 06      0090 LD	B, argv_ptrs_max - 1	; B: Maximum number of argv_ptrs
0B008C 0F 
               0091 
               0092 ; drop hl into (ix) leaving two parameters:
               0093 ; - the app name
               0094 ; - whatever the user entered
0B008D DD      0095 ld (ix),hl
0B008E 2F 
0B008F 00 
0B0090 0C      0096 INC	C			; Increment ARGC
0B0091 C9      0097 ret
               0098 
               0099 ; Get the next token
               0100 ; Parameters:
               0101 ; - HL: Address of parameter string
               0102 ; Returns:
               0103 ; - HL: Address of first character after token
               0104 ; -  C: Length of token (in characters)
               0105 ;
0B0092 0E      0106 _get_token:		LD	C, 0			; Initialise length
0B0093 00 
0B0094 7E      0107 @@:			LD	A, (HL)			; Get the character from the parameter string
0B0095 B7      0108 OR	A			; Exit if 0 (end of parameter string in MOS)
0B0096 C8      0109 RET 	Z
0B0097 FE      0110 CP	13			; Exit if CR (end of parameter string in BBC BASIC)
0B0098 0D 
0B0099 C8      0111 RET	Z
0B009A FE      0112 CP	' '			; Exit if space (end of token)
0B009B 20 
0B009C C8      0113 RET	Z
0B009D 23      0114 INC	HL			; Advance to next character
0B009E 0C      0115 INC 	C			; Increment length
0B009F 18      0116 JR	@B
0B00A0 F3 
               0117 
               0118 ; Skip spaces in the parameter string
               0119 ; Parameters:
               0120 ; - HL: Address of parameter string
               0121 ; Returns:
               0122 ; - HL: Address of next none-space character
               0123 ;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
               0124 ;
0B00A1 7E      0125 _skip_spaces:		LD	A, (HL)			; Get the character from the parameter string
0B00A2 FE      0126 CP	' '			; Exit if not space
0B00A3 20 
0B00A4 C0      0127 RET	NZ
0B00A5 23      0128 INC	HL			; Advance to next character
0B00A6 18      0129 JR	_skip_spaces		; Increment length
0B00A7 F9 
               0130 
               0131 ; ========================================
               0132 ; BASIC INITIALIZATION CODE FROM basic/init.asm
               0133 ; ========================================
               0134 ;
               0135 ;Clear the application memory
               0136 ;
               0137 _clear_ram:
0B00A8 E5      0138 push hl
0B00A9 C5      0139 PUSH		BC
0B00AA 21      0140 LD		HL, RAM_START
0B00AB 00 
0B00AC 4D 
0B00AD 0B 
0B00AE 11      0141 LD		DE, RAM_START + 1
0B00AF 01 
0B00B0 4D 
0B00B1 0B 
0B00B2 01      0142 LD		BC, RAM_END - RAM_START - 1
0B00B3 4F 
0B00B4 03 
0B00B5 00 
0B00B6 AF      0143 XOR		A
0B00B7 77      0144 LD		(HL), A
0B00B8 ED      0145 LDIR
0B00B9 B0 
0B00BA C1      0146 POP		BC
0B00BB E1      0147 pop hl
0B00BC C9      0148 RET
               0149 
               0150 ; ========================================
               0151 ; BEGIN APPLICATION CODE
               0152 ; ========================================
               0153 
               0154 ; API INCLUDES
               0155 
               0156 ; APPLICATION INCLUDES
               0157 include "calcbas.inc"
              0001* 
              0002* ; global scratch memory for registers
0B00BD 00     0003* uaf: dl 0
0B00BE 00 
0B00BF 00 
0B00C0 00     0004* uhl: dl 0
0B00C1 00 
0B00C2 00 
0B00C3 00     0005* ubc: dl 0
0B00C4 00 
0B00C5 00 
0B00C6 00     0006* ude: dl 0
0B00C7 00 
0B00C8 00 
0B00C9 00     0007* uix: dl 0
0B00CA 00 
0B00CB 00 
0B00CC 00     0008* uiy: dl 0
0B00CD 00 
0B00CE 00 
0B00CF 00     0009* usp: dl 0
0B00D0 00 
0B00D1 00 
0B00D2 00     0010* upc: dl 0
0B00D3 00 
0B00D4 00 
              0011* 
0B00D5 20     0012* str_afu: db " af=",0
0B00D6 61 
0B00D7 66 
0B00D8 3D 
0B00D8 00   
0B00DA 20     0013* str_hlu: db " hl=",0
0B00DB 68 
0B00DC 6C 
0B00DD 3D 
0B00DD 00   
0B00DF 20     0014* str_bcu: db " bc=",0
0B00E0 62 
0B00E1 63 
0B00E2 3D 
0B00E2 00   
0B00E4 20     0015* str_deu: db " de=",0
0B00E5 64 
0B00E6 65 
0B00E7 3D 
0B00E7 00   
0B00E9 20     0016* str_ixu: db " ix=",0
0B00EA 69 
0B00EB 78 
0B00EC 3D 
0B00EC 00   
0B00EE 20     0017* str_iyu: db " iy=",0
0B00EF 69 
0B00F0 79 
0B00F1 3D 
0B00F1 00   
              0018* 
              0019* ; test the sign of HL
              0020* ; inputs: HL obviously
              0021* ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
              0022* ; destroys: flags
              0023* MACRO sign_hlu
              0024* add hl,de
              0025* or a
              0026* sbc hl,de
              0027* ENDMACRO
              0028* 
              0029* MACRO PUSH_ALL
              0030* ex af,af'
              0031* exx
              0032* push af
              0033* push hl
              0034* push bc
              0035* push de
              0036* 
              0037* ex af,af'
              0038* exx
              0039* push af
              0040* push hl
              0041* push bc
              0042* push de
              0043* push ix
              0044* push iy
              0045* ENDMACRO
              0046* 
              0047* MACRO POP_ALL
              0048* pop iy
              0049* pop ix
              0050* pop de
              0051* pop bc
              0052* pop hl
              0053* pop af
              0054* ex af,af'
              0055* exx
              0056* 
              0057* pop de
              0058* pop bc
              0059* pop hl
              0060* pop af
              0061* ex af,af'
              0062* exx
              0063* ENDMACRO
              0064* 
              0065* ; put the value in HLU into the accumulator
              0066* ; destroys: af
              0067* MACRO HLU_TO_A
              0068* push hl ; 4 cycles
              0069* inc sp ; 1 cycle
              0070* pop af  ; 4 cycles
              0071* dec sp ; 1 cycle
              0072* ; 10 cycles total
              0073* ENDMACRO
              0074* 
              0075* ; Print a 24-bit HEX number
              0076* ; HLU: Number to print
              0077* printHex24:
              0078* HLU_TO_A
0B00F3 E5    0001*M push hl ; 4 cycles
0B00F4 33    0002*M inc sp ; 1 cycle
0B00F5 F1    0003*M pop af  ; 4 cycles
0B00F6 3B    0004*M dec sp ; 1 cycle
             0005*M ; 10 cycles total
0B00F7 CD     0079* CALL	printHex8
0B00F8 01 
0B00F9 01 
0B00FA 0B 
              0080* ; Print a 16-bit HEX number
              0081* ; HL: Number to print
              0082* printHex16:
0B00FB 7C     0083* LD		A,H
0B00FC CD     0084* CALL	printHex8
0B00FD 01 
0B00FE 01 
0B00FF 0B 
0B0100 7D     0085* LD		A,L
              0086* ; Print an 8-bit HEX number
              0087* ; A: Number to print
              0088* printHex8:
              0089* ; LD		C,A
0B0101 32     0090* ld (uaf+1),a
0B0102 BE 
0B0103 00 
0B0104 0B 
0B0105 1F     0091* RRA
0B0106 1F     0092* RRA
0B0107 1F     0093* RRA
0B0108 1F     0094* RRA
0B0109 CD     0095* CALL	@F
0B010A 11 
0B010B 01 
0B010C 0B 
              0096* ; LD		A,C
0B010D 3A     0097* ld a,(uaf+1)
0B010E BE 
0B010F 00 
0B0110 0B 
              0098* @@:
0B0111 E6     0099* AND		0Fh
0B0112 0F 
0B0113 C6     0100* ADD		A,90h
0B0114 90 
0B0115 27     0101* DAA
0B0116 CE     0102* ADC		A,40h
0B0117 40 
0B0118 27     0103* DAA
0B0119 5B     0104* RST.LIL	10h
0B011A D7 
0B011B C9     0105* RET
              0106* 
              0107* ; print the binary representation of the 8-bit value in a
              0108* ; destroys a, hl, bc
              0109* printBin8:
0B011C 06     0110* ld b,8      ; loop counter for 8 bits
0B011D 08 
0B011E 21     0111* ld hl,@cmd  ; set hl to the low byte of the output string
0B011F 39 
0B0120 01 
0B0121 0B 
              0112* ; (which will be the high bit of the value in a)
              0113* @loop:
0B0122 07     0114* rlca ; put the next highest bit into carry
0B0123 38     0115* jr c,@one
0B0124 04 
0B0125 36     0116* ld (hl),'0'
0B0126 30 
0B0127 18     0117* jr @next_bit
0B0128 02 
              0118* @one:
0B0129 36     0119* ld (hl),'1'
0B012A 31 
              0120* @next_bit:
0B012B 23     0121* inc hl
0B012C 10     0122* djnz @loop
0B012D F4 
              0123* ; print it
0B012E 21     0124* ld hl,@cmd
0B012F 39 
0B0130 01 
0B0131 0B 
0B0132 01     0125* ld bc,@end-@cmd
0B0133 08 
0B0134 00 
0B0135 00 
0B0136 5B     0126* rst.lil $18
0B0137 DF 
0B0138 C9     0127* ret
              0128* @cmd: ds 8 ; eight bytes for eight bits
              0129* @end:
              0130* 
              0131* ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
              0132* ; Print a zero-terminated string
              0133* ; HL: Pointer to string
              0134* printString:
0B0141 C5     0135* PUSH	BC
0B0142 01     0136* LD		BC,0
0B0143 00 
0B0144 00 
0B0145 00 
0B0146 3E     0137* LD 	 	A,0
0B0147 00 
0B0148 5B     0138* RST.LIL 18h
0B0149 DF 
0B014A C1     0139* POP		BC
0B014B C9     0140* RET
              0141* ; print a VDU sequence
              0142* ; HL: Pointer to VDU sequence - <1 byte length> <data>
              0143* sendVDUsequence:
0B014C C5     0144* PUSH	BC
0B014D 01     0145* LD		BC, 0
0B014E 00 
0B014F 00 
0B0150 00 
0B0151 4E     0146* LD		C, (HL)
0B0152 5B     0147* RST.LIL	18h
0B0153 DF 
0B0154 C1     0148* POP		BC
0B0155 C9     0149* RET
              0150* ; Print Newline sequence to VDP
              0151* printNewLine:
0B0156 F5     0152* push af ; for some reason rst.lil 10h sets carry flag
0B0157 3E     0153* LD	A, '\r'
0B0158 0D 
0B0159 5B     0154* RST.LIL 10h
0B015A D7 
0B015B 3E     0155* LD	A, '\n'
0B015C 0A 
0B015D 5B     0156* RST.LIL 10h
0B015E D7 
0B015F F1     0157* pop af
0B0160 C9     0158* RET
              0159* 
              0160* ; Print a zero-terminated string inline with code, e.g.:
              0161* ;
              0162* ;    call printInline
              0163* ;    ASCIZ "Hello, world!\r\n"
              0164* ;
              0165* ; Destroys: HL,AF
              0166* printInline:
0B0161 E1     0167* pop hl ; get the return address = pointer to start of string
0B0162 CD     0168* call printString ; HL advances to end of string
0B0163 41 
0B0164 01 
0B0165 0B 
0B0166 E5     0169* push hl ; restore the return address = pointer to end of string
0B0167 C9     0170* ret
              0171* 
              0172* ; inputs: whatever is in the flags register
              0173* ; outputs: binary representation of flags
              0174* ;          with a header so we know which is what
              0175* ; destroys: nothing
              0176* ; preserves: everything
              0177* dumpFlags:
              0178* ; first we curse zilog for not giving direct access to flags
0B0168 F5     0179* push af ; this is so we can send it back unharmed
0B0169 F5     0180* push af ; this is so we can pop it to hl
              0181* ; store everything in scratch
0B016A 22     0182* ld (uhl),hl
0B016B C0 
0B016C 00 
0B016D 0B 
0B016E ED     0183* ld (ubc),bc
0B016F 43 
0B0170 C3 
0B0171 00 
0B0171 0B   
0B0173 ED     0184* ld (ude),de
0B0174 53 
0B0175 C6 
0B0176 00 
0B0176 0B   
0B0178 DD     0185* ld (uix),ix
0B0179 22 
0B017A C9 
0B017B 00 
0B017B 0B   
0B017D FD     0186* ld (uiy),iy
0B017E 22 
0B017F CC 
0B0180 00 
0B0180 0B   
              0187* ; next we print the header
0B0182 21     0188* ld hl,@header
0B0183 AE 
0B0184 01 
0B0185 0B 
0B0186 CD     0189* call printString
0B0187 41 
0B0188 01 
0B0189 0B 
0B018A E1     0190* pop hl ; flags are now in l
0B018B 7D     0191* ld a,l ; flags are now in a
0B018C CD     0192* call printBin8
0B018D 1C 
0B018E 01 
0B018F 0B 
0B0190 CD     0193* call printNewLine
0B0191 56 
0B0192 01 
0B0193 0B 
              0194* ; restore everything
0B0194 2A     0195* ld hl, (uhl)
0B0195 C0 
0B0196 00 
0B0197 0B 
0B0198 ED     0196* ld bc, (ubc)
0B0199 4B 
0B019A C3 
0B019B 00 
0B019B 0B   
0B019D ED     0197* ld de, (ude)
0B019E 5B 
0B019F C6 
0B01A0 00 
0B01A0 0B   
0B01A2 DD     0198* ld ix, (uix)
0B01A3 2A 
0B01A4 C9 
0B01A5 00 
0B01A5 0B   
0B01A7 FD     0199* ld iy, (uiy)
0B01A8 2A 
0B01A9 CC 
0B01AA 00 
0B01AA 0B   
0B01AC F1     0200* pop af ; send her home the way she came
0B01AD C9     0201* ret
              0202* ; Bit 7 (S): Sign flag
              0203* ; Bit 6 (Z): Zero flag
              0204* ; Bit 5 (5): Reserved (copy of bit 5 of the result)
              0205* ; Bit 4 (H): Half Carry flag
              0206* ; Bit 3 (3): Reserved (copy of bit 3 of the result)
              0207* ; Bit 2 (PV): Parity/Overflow flag
              0208* ; Bit 1 (N): Subtract flag
              0209* ; Bit 0 (C): Carry flag
0B01AE 53     0210* @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
0B01AF 5A 
0B01B0 78 
0B01B1 48 
0B01B1 78   
0B01B2 50 
0B01B3 4E 
0B01B4 43 
0B01B4 0D   
0B01B5 0A 
0B01B6 00 
              0211* 
              0212* ; print registers to screen in hexidecimal format
              0213* ; inputs: none
              0214* ; outputs: values of every register printed to screen
              0215* ;    values of each register in global scratch memory
              0216* ; destroys: nothing
              0217* dumpRegistersHex:
              0218* ; store everything in scratch
0B01B9 22     0219* ld (uhl),hl
0B01BA C0 
0B01BB 00 
0B01BC 0B 
0B01BD ED     0220* ld (ubc),bc
0B01BE 43 
0B01BF C3 
0B01C0 00 
0B01C0 0B   
0B01C2 ED     0221* ld (ude),de
0B01C3 53 
0B01C4 C6 
0B01C5 00 
0B01C5 0B   
0B01C7 DD     0222* ld (uix),ix
0B01C8 22 
0B01C9 C9 
0B01CA 00 
0B01CA 0B   
0B01CC FD     0223* ld (uiy),iy
0B01CD 22 
0B01CE CC 
0B01CF 00 
0B01CF 0B   
0B01D1 F5     0224* push af ; fml
0B01D2 E1     0225* pop hl  ; thanks, zilog
0B01D3 22     0226* ld (uaf),hl
0B01D4 BD 
0B01D5 00 
0B01D6 0B 
0B01D7 F5     0227* push af ; dammit
              0228* 
              0229* ; home the cursor
              0230* ; call vdu_home_cursor
              0231* ; call printNewLine
              0232* 
              0233* ; print each register
0B01D8 21     0234* ld hl,str_afu
0B01D9 D5 
0B01DA 00 
0B01DB 0B 
0B01DC CD     0235* call printString
0B01DD 41 
0B01DE 01 
0B01DF 0B 
0B01E0 2A     0236* ld hl,(uaf)
0B01E1 BD 
0B01E2 00 
0B01E3 0B 
0B01E4 CD     0237* call printHex24
0B01E5 F3 
0B01E6 00 
0B01E7 0B 
              0238* ; call printNewLine
              0239* 
0B01E8 21     0240* ld hl,str_hlu
0B01E9 DA 
0B01EA 00 
0B01EB 0B 
0B01EC CD     0241* call printString
0B01ED 41 
0B01EE 01 
0B01EF 0B 
0B01F0 2A     0242* ld hl,(uhl)
0B01F1 C0 
0B01F2 00 
0B01F3 0B 
0B01F4 CD     0243* call printHex24
0B01F5 F3 
0B01F6 00 
0B01F7 0B 
              0244* ; call printNewLine
              0245* 
0B01F8 21     0246* ld hl,str_bcu
0B01F9 DF 
0B01FA 00 
0B01FB 0B 
0B01FC CD     0247* call printString
0B01FD 41 
0B01FE 01 
0B01FF 0B 
0B0200 2A     0248* ld hl,(ubc)
0B0201 C3 
0B0202 00 
0B0203 0B 
0B0204 CD     0249* call printHex24
0B0205 F3 
0B0206 00 
0B0207 0B 
              0250* ; call printNewLine
              0251* 
0B0208 21     0252* ld hl,str_deu
0B0209 E4 
0B020A 00 
0B020B 0B 
0B020C CD     0253* call printString
0B020D 41 
0B020E 01 
0B020F 0B 
0B0210 2A     0254* ld hl,(ude)
0B0211 C6 
0B0212 00 
0B0213 0B 
0B0214 CD     0255* call printHex24
0B0215 F3 
0B0216 00 
0B0217 0B 
              0256* ; call printNewLine
              0257* 
0B0218 21     0258* ld hl,str_ixu
0B0219 E9 
0B021A 00 
0B021B 0B 
0B021C CD     0259* call printString
0B021D 41 
0B021E 01 
0B021F 0B 
0B0220 2A     0260* ld hl,(uix)
0B0221 C9 
0B0222 00 
0B0223 0B 
0B0224 CD     0261* call printHex24
0B0225 F3 
0B0226 00 
0B0227 0B 
              0262* ; call printNewLine
              0263* 
0B0228 21     0264* ld hl,str_iyu
0B0229 EE 
0B022A 00 
0B022B 0B 
0B022C CD     0265* call printString
0B022D 41 
0B022E 01 
0B022F 0B 
0B0230 2A     0266* ld hl,(uiy)
0B0231 CC 
0B0232 00 
0B0233 0B 
0B0234 CD     0267* call printHex24
0B0235 F3 
0B0236 00 
0B0237 0B 
              0268* ; call printNewLine
              0269* 
              0270* ; call vdu_vblank
              0271* 
0B0238 CD     0272* call printNewLine
0B0239 56 
0B023A 01 
0B023B 0B 
              0273* ; restore everything
0B023C 2A     0274* ld hl, (uhl)
0B023D C0 
0B023E 00 
0B023F 0B 
0B0240 ED     0275* ld bc, (ubc)
0B0241 4B 
0B0242 C3 
0B0243 00 
0B0243 0B   
0B0245 ED     0276* ld de, (ude)
0B0246 5B 
0B0247 C6 
0B0248 00 
0B0248 0B   
0B024A DD     0277* ld ix, (uix)
0B024B 2A 
0B024C C9 
0B024D 00 
0B024D 0B   
0B024F FD     0278* ld iy, (uiy)
0B0250 2A 
0B0251 CC 
0B0252 00 
0B0252 0B   
0B0254 F1     0279* pop af
              0280* ; all done
0B0255 C9     0281* ret
              0282* 
              0283* dumpRegistersHexPrime:
0B0256 D9     0284* exx
0B0257 08     0285* ex af,af'
0B0258 CD     0286* call dumpRegistersHex
0B0259 B9 
0B025A 01 
0B025B 0B 
0B025C 08     0287* ex af,af'
0B025D D9     0288* exx
0B025E C9     0289* ret
              0290* 
              0291* ; additionally dump prime registers
              0292* ; inputs: none
              0293* ; outputs: values of every register printed to screen
              0294* ; destroys: nothing
              0295* dumpRegistersHexAll:
0B025F CD     0296* call dumpRegistersHex
0B0260 B9 
0B0261 01 
0B0262 0B 
0B0263 08     0297* ex af,af'
0B0264 D9     0298* exx
0B0265 CD     0299* call dumpRegistersHex
0B0266 B9 
0B0267 01 
0B0268 0B 
0B0269 08     0300* ex af,af'
0B026A D9     0301* exx
0B026B C9     0302* ret
              0303* 
              0304* ; print bytes from an address to the screen in hexidecimal format
              0305* ; inputs: hl = address of first byte to print, a = number of bytes to print
              0306* ; outputs: values of each byte printed to screen separated by spaces
              0307* ; destroys: nothing
              0308* dumpMemoryHex:
              0309* ; save registers to the stack
0B026C C5     0310* push bc
0B026D E5     0311* push hl
0B026E F5     0312* push af
              0313* 
              0314* ; print the address and separator
0B026F CD     0315* call printHex24
0B0270 F3 
0B0271 00 
0B0272 0B 
0B0273 3E     0316* ld a,':'
0B0274 3A 
0B0275 5B     0317* rst.lil 10h
0B0276 D7 
0B0277 3E     0318* ld a,' '
0B0278 20 
0B0279 5B     0319* rst.lil 10h
0B027A D7 
              0320* 
              0321* ; set b to be our loop counter
0B027B F1     0322* pop af
0B027C 47     0323* ld b,a
0B027D E1     0324* pop hl
0B027E E5     0325* push hl
0B027F F5     0326* push af
              0327* @loop:
              0328* ; print the byte
0B0280 7E     0329* ld a,(hl)
0B0281 CD     0330* call printHex8
0B0282 01 
0B0283 01 
0B0284 0B 
              0331* ; print a space
0B0285 3E     0332* ld a,' '
0B0286 20 
0B0287 5B     0333* rst.lil 10h
0B0288 D7 
0B0289 23     0334* inc hl
0B028A 10     0335* djnz @loop
0B028B F4 
0B028C CD     0336* call printNewLine
0B028D 56 
0B028E 01 
0B028F 0B 
              0337* 
              0338* ; restore everything
0B0290 F1     0339* pop af
0B0291 E1     0340* pop hl
0B0292 C1     0341* pop bc
              0342* 
              0343* ; all done
0B0293 C9     0344* ret
              0345* 
              0346* ; store HLH'L'C floating point number in a 40-bit buffer
              0347* ; inputs: HLH'L'C = floating point number
              0348* ;         ix = buffer address
              0349* ; outputs: buffer filled with floating point number
              0350* ; destroys: nothing
              0351* store_float_pri:
0B0294 DD     0352* ld (ix+0),c
0B0295 71 
0B0296 00 
0B0297 DD     0353* ld (ix+3),l
0B0298 75 
0B0299 03 
0B029A DD     0354* ld (ix+4),h
0B029B 74 
0B029C 04 
0B029D D9     0355* exx
0B029E DD     0356* ld (ix+1),l
0B029F 75 
0B02A0 01 
0B02A1 DD     0357* ld (ix+2),h
0B02A2 74 
0B02A3 02 
0B02A4 D9     0358* exx
0B02A5 C9     0359* ret
              0360* 
              0361* ; store DED'E'B floating point number in a 40-bit buffer
              0362* ; inputs: DED'E'B = floating point number
              0363* ;         ix = buffer address
              0364* ; outputs: buffer filled with floating point number
              0365* ; destroys: nothing
              0366* store_float_sec:
0B02A6 DD     0367* ld (ix+0),b
0B02A7 70 
0B02A8 00 
0B02A9 DD     0368* ld (ix+3),e
0B02AA 73 
0B02AB 03 
0B02AC DD     0369* ld (ix+4),d
0B02AD 72 
0B02AE 04 
0B02AF D9     0370* exx
0B02B0 DD     0371* ld (ix+1),e
0B02B1 73 
0B02B2 01 
0B02B3 DD     0372* ld (ix+2),d
0B02B4 72 
0B02B5 02 
0B02B6 D9     0373* exx
0B02B7 C9     0374* ret
              0375* 
              0376* ; fetch HLH'L'C floating point number from a 40-bit buffer
              0377* ; inputs: ix = buffer address
              0378* ; outputs: HLH'L'C = floating point number
              0379* ; destroys: HLH'L'C
              0380* fetch_float_nor:
0B02B8 DD     0381* ld c,(ix+0)
0B02B9 4E 
0B02BA 00 
0B02BB DD     0382* ld l,(ix+3)
0B02BC 6E 
0B02BD 03 
0B02BE DD     0383* ld h,(ix+4)
0B02BF 66 
0B02C0 04 
0B02C1 D9     0384* exx
0B02C2 DD     0385* ld l,(ix+1)
0B02C3 6E 
0B02C4 01 
0B02C5 DD     0386* ld h,(ix+2)
0B02C6 66 
0B02C7 02 
0B02C8 D9     0387* exx
0B02C9 C9     0388* ret
              0389* 
              0390* ; fetch DED'E'B floating point number from a 40-bit buffer
              0391* ; inputs: ix = buffer address
              0392* ; outputs: DED'E'B = floating point number
              0393* ; destroys: DED'E'B
              0394* fetch_float_alt:
0B02CA DD     0395* ld b,(ix+0)
0B02CB 46 
0B02CC 00 
0B02CD DD     0396* ld e,(ix+3)
0B02CE 5E 
0B02CF 03 
0B02D0 DD     0397* ld d,(ix+4)
0B02D1 56 
0B02D2 04 
0B02D3 D9     0398* exx
0B02D4 DD     0399* ld e,(ix+1)
0B02D5 5E 
0B02D6 01 
0B02D7 DD     0400* ld d,(ix+2)
0B02D8 56 
0B02D9 02 
0B02DA D9     0401* exx
0B02DB C9     0402* ret
              0403* 
              0404* ; print HLH'L'C floating point number in hex format
              0405* ; inputs: HLH'L'C = floating point number
              0406* print_float_hex_nor:
0B02DC CD     0407* call printHex16
0B02DD FB 
0B02DE 00 
0B02DF 0B 
0B02E0 3E     0408* ld a,'.'
0B02E1 2E 
0B02E2 5B     0409* rst.lil 10h
0B02E3 D7 
0B02E4 D9     0410* exx
0B02E5 CD     0411* call printHex16
0B02E6 FB 
0B02E7 00 
0B02E8 0B 
0B02E9 D9     0412* exx
0B02EA 3E     0413* ld a,'^'
0B02EB 5E 
0B02EC 5B     0414* rst.lil 10h
0B02ED D7 
0B02EE 79     0415* ld a,c
0B02EF CD     0416* call printHex8
0B02F0 01 
0B02F1 01 
0B02F2 0B 
0B02F3 C9     0417* ret
              0418* 
              0419* ; print DED'E'B floating point number in hex format
              0420* ; inputs: DED'E'B = floating point number
              0421* print_float_hex_alt:
0B02F4 EB     0422* ex de,hl
0B02F5 CD     0423* call printHex16
0B02F6 FB 
0B02F7 00 
0B02F8 0B 
0B02F9 EB     0424* ex de,hl
0B02FA 3E     0425* ld a,'.'
0B02FB 2E 
0B02FC 5B     0426* rst.lil 10h
0B02FD D7 
0B02FE D9     0427* exx
0B02FF EB     0428* ex de,hl
0B0300 CD     0429* call printHex16
0B0301 FB 
0B0302 00 
0B0303 0B 
0B0304 EB     0430* ex de,hl
0B0305 D9     0431* exx
0B0306 3E     0432* ld a,'^'
0B0307 5E 
0B0308 5B     0433* rst.lil 10h
0B0309 D7 
0B030A 78     0434* ld a,b
0B030B CD     0435* call printHex8
0B030C 01 
0B030D 01 
0B030E 0B 
0B030F C9     0436* ret
              0437* 
              0438* print_floats_hex:
0B0310 CD     0439* call print_float_hex_nor
0B0311 DC 
0B0312 02 
0B0313 0B 
0B0314 3E     0440* ld a,' '
0B0315 20 
0B0316 5B     0441* rst.lil 10h
0B0317 D7 
0B0318 CD     0442* call print_float_hex_alt
0B0319 F4 
0B031A 02 
0B031B 0B 
0B031C C9     0443* ret
              0444* 
              0445* ; print a floating point number in decimal format
              0446* ; inputs: HL'H'L'C is the number to print
              0447* ; outputs: number printed to screen
              0448* ;          ACCS null-terminated string representation of the number
              0449* ; destroys: everything except ix
              0450* print_float_dec:
              0451* print_float_dec_nor:
0B031D DD     0452* push ix             ; save the pointer to the parameters
0B031E E5 
0B031F 11     0453* ld de,ACCS          ; point to the string accumulator
0B0320 00 
0B0321 4D 
0B0322 0B 
0B0323 DD     0454* ld ix,@G9-1         ; get the format code for the number
0B0324 21 
0B0325 36 
0B0326 03 
0B0326 0B   
0B0328 CD     0455* call STR ; convert the number to a string
0B0329 57 
0B032A 0C 
0B032B 0B 
0B032C 21     0456* ld hl,ACCS ; point to the string accumulator
0B032D 00 
0B032E 4D 
0B032F 0B 
0B0330 CD     0457* call printString
0B0331 41 
0B0332 01 
0B0333 0B 
0B0334 DD     0458* pop ix              ; restore the pointer to the parameters
0B0335 E1 
0B0336 C9     0459* ret
0B0337 09     0460* @G9:			DW    9
0B0338 00 
               0158 include "mathfpp.inc"
              0001* ; integer operations
              0002* iand:	EQU 0x00	; AND (INTEGER)
              0003* ibdiv:	EQU 0x01	; DIV
              0004* ieor:	EQU 0x02	; EOR
              0005* imod:	EQU 0x03	; MOD
              0006* ior:	EQU 0x04	; OR
              0007* ile:	EQU 0x05	; <=
              0008* ine:	EQU 0x06	; <>
              0009* ige:	EQU 0x07	; >=
              0010* ilt:	EQU 0x08	; <
              0011* ieq:	EQU 0x09	; =
              0012* imul:	EQU 0x0A	; *
              0013* iadd:	EQU 0x0B	; +
              0014* igt:	EQU 0x0C	; >
              0015* isub:	EQU 0x0D	; -
              0016* ipow:	EQU 0x0E	; ^
              0017* idiv:	EQU 0x0F	; /
              0018* ;
              0019* ; floating point functions
              0020* absv:	EQU 0x00	; ABS
              0021* acs:	EQU 0x01	; ACS
              0022* asn:	EQU 0x02	; ASN
              0023* atn:	EQU 0x03	; ATN
              0024* cos:	EQU 0x04	; COS
              0025* deg:	EQU 0x05	; DEG
              0026* exp:	EQU 0x06	; EXP
              0027* int_:	EQU 0x07	; INT
              0028* ln:	EQU 0x08	; LN
              0029* log:	EQU 0x09	; LOG
              0030* notk:	EQU 0x0A	; NOT
              0031* rad:	EQU 0x0B	; RAD
              0032* sgn:	EQU 0x0C	; SGN
              0033* sin:	EQU 0x0D	; SIN
              0034* sqr:	EQU 0x0E	; SQR
              0035* tan:	EQU 0x0F	; TAN
              0036* zero:	EQU 0x10	; ZERO
              0037* fone:	EQU 0x11	; FONE
              0038* true:	EQU 0x12	; TRUE
              0039* pi:	EQU 0x13	; PI
              0040* val:	EQU 0x14	; VAL
              0041* str:	EQU 0x15	; STR$
              0042* sfix:	EQU 0x16	; FIX
              0043* sfloat:	EQU 0x17	; FLOAT
              0044* ftest:	EQU 0x18	; TEST
              0045* fcomp:	EQU 0x19	; COMPARE
              0046* ;
              0047* ; floating point operations
              0048* fand:	EQU 0x00	; AND (FLOATING-POINT)
              0049* fbdiv:	EQU 0x01	; DIV
              0050* feor:	EQU 0x02	; EOR
              0051* fmod:	EQU 0x03	; MOD
              0052* ffor:	EQU 0x04	; OR
              0053* fle:	EQU 0x05	; <=
              0054* fne:	EQU 0x06	; <>
              0055* fge:	EQU 0x07	; >=
              0056* flt:	EQU 0x08	; <
              0057* feq:	EQU 0x09	; =
              0058* fmul:	EQU 0x0A	; *
              0059* fadd:	EQU 0x0B	; +
              0060* fgt:	EQU 0x0C	; >
              0061* fsub:	EQU 0x0D	; -
              0062* fpow:	EQU 0x0E	; ^
              0063* fdiv:	EQU 0x0F	; /
               0159 
               0160 ; Storage for the argv array pointers
               0161 min_args: equ 2
               0162 argv_ptrs_max:		EQU	16			; Maximum number of arguments allowed in argv
0B0339 00      0163 argv_ptrs:		    BLKP	argv_ptrs_max, 0
0B033A 00 
0B033B 00 
0B033C 00 
0B033C 00   
0B033D 00 
0B033E 00 
0B033F 00 
0B033F 00   
0B0340 00 
0B0341 00 
0B0342 00 
0B0342 00   
0B0343 00 
0B0344 00 
0B0345 00 
0B0345 00   
0B0346 00 
0B0347 00 
0B0348 00 
0B0348 00   
0B0349 00 
0B034A 00 
0B034B 00 
0B034B 00   
0B034C 00 
0B034D 00 
0B034E 00 
0B034E 00   
0B034F 00 
0B0350 00 
0B0351 00 
0B0351 00   
0B0352 00 
0B0353 00 
0B0354 00 
0B0354 00   
0B0355 00 
0B0356 00 
0B0357 00 
0B0357 00   
0B0358 00 
0B0359 00 
0B035A 00 
0B035A 00   
0B035B 00 
0B035C 00 
0B035D 00 
               0164 _sps:			DS	3			; Storage for the stack pointer (used by BASIC)
               0165 
               0166 ; GLOBAL MESSAGE STRINGS
0B036C 55      0167 str_usage: ASCIZ "Usage: scratch <args>\r\n"
0B036D 73 
0B036E 61 
0B036F 67 
0B036F 65   
0B0370 3A 
0B0371 20 
0B0372 73 
0B0372 63   
0B0373 72 
0B0374 61 
0B0375 74 
0B0375 63   
0B0376 68 
0B0377 20 
0B0378 3C 
0B0378 61   
0B0379 72 
0B037A 67 
0B037B 73 
0B037B 3E   
0B037C 0D 
0B037D 0A 
0B037E 00 
0B0384 45      0168 str_error: ASCIZ "Error!\r\n"
0B0385 72 
0B0386 72 
0B0387 6F 
0B0387 72   
0B0388 21 
0B0389 0D 
0B038A 0A 
0B038A 00   
0B038D 53      0169 str_success: ASCIZ "Success!\r\n"
0B038E 75 
0B038F 63 
0B0390 63 
0B0390 65   
0B0391 73 
0B0392 73 
0B0393 21 
0B0393 0D   
0B0394 0A 
0B0395 00 
               0170 
               0171 ; ========= MAIN LOOP =========
               0172 ; The main routine
               0173 ; IXU: argv - pointer to array of parameters
               0174 ;   C: argc - number of parameters
               0175 ; Returns:
               0176 ;  HL: Error code, or 0 if OK
               0177 
               0178 _main:
0B0398 79      0179 ld a,c              ; how many arguments?
0B0399 FE      0180 cp min_args         ; not enough?
0B039A 02 
0B039B 30      0181 jr nc,main          ; if enough, go to main loop
0B039C 27 
0B039D 21      0182 ld hl,str_usage     ; if not enough, print usage
0B039E 6C 
0B039F 03 
0B03A0 0B 
0B03A1 CD      0183 call printString
0B03A2 41 
0B03A3 01 
0B03A4 0B 
               0184 ; fall through to _main_end_error
               0185 
               0186 _main_end_error:
0B03A5 21      0187 ld hl,str_error     ; print error message
0B03A6 84 
0B03A7 03 
0B03A8 0B 
0B03A9 CD      0188 call printString
0B03AA 41 
0B03AB 01 
0B03AC 0B 
0B03AD 21      0189 ld hl,19            ; return error code 19
0B03AE 13 
0B03AF 00 
0B03B0 00 
0B03B1 C9      0190 ret
               0191 
               0192 ; begin BASIC-specific end code
               0193 ; This bit of code is called from STAR_BYE and returns us safely to MOS
0B03B2 ED      0194 _basic_end:			LD		SP, (_sps)		; Restore the stack pointer
0B03B3 7B 
0B03B4 69 
0B03B5 03 
0B03B5 0B   
               0195 ; fall through to _main_end_ok
               0196 ; end BASIC-specific end code
               0197 
               0198 _main_end_ok:
               0199 ; ld hl,str_success   ; print success message
               0200 ; call printString
0B03B7 CD      0201 call printNewLine
0B03B8 56 
0B03B9 01 
0B03BA 0B 
0B03BB CD      0202 call printNewLine
0B03BC 56 
0B03BD 01 
0B03BE 0B 
0B03BF 21      0203 ld hl,0             ; return 0 for success
0B03C0 00 
0B03C1 00 
0B03C2 00 
0B03C3 C9      0204 ret
               0205 
               0206 ; ========= BEGIN CUSTOM MAIN LOOP =========
               0207 main:
0B03C4 0D      0208 dec c               ; decrement the argument count to skip the program name
0B03C5 ED      0209 lea ix,ix+3         ; point to the first real argument (argv_ptrs+3)
0B03C6 32 
0B03C7 03 
0B03C8 DD      0210 ld hl,(ix)          ; get the first argument in case hl doesn't land here with it
0B03C9 27 
0B03CA 00 
               0211 
0B03CB 3E      0212 ld a,0 ; DEBUG
0B03CC 00 
               0213 ; call dumpMemoryHex ; DEBUG
               0214 ; call dumpRegistersHex ; DEBUG
0B03CD CD      0215 call printString  ; DEBUG
0B03CE 41 
0B03CF 01 
0B03D0 0B 
0B03D1 CD      0216 call printNewLine ; DEBUG
0B03D2 56 
0B03D3 01 
0B03D4 0B 
               0217 ; call print_params   ; DEBUG
               0218 
0B03D5 DD      0219 ld iy,(ix)           ; point to the expression
0B03D6 31 
0B03D7 00 
0B03D8 CD      0220 call EXPR ; send the expression to the BASIC interpreter for evaluation and execution
0B03D9 B8 
0B03DA 04 
0B03DB 0B 
0B03DC F2      0221 jp p,@print_dec
0B03DD EC 
0B03DE 03 
0B03DF 0B 
0B03E0 21      0222 ld hl,ACCS ; result is a string
0B03E1 00 
0B03E2 4D 
0B03E3 0B 
0B03E4 CD      0223 call printString
0B03E5 41 
0B03E6 01 
0B03E7 0B 
0B03E8 C3      0224 jp _main_end_ok     ; return success
0B03E9 B7 
0B03EA 03 
0B03EB 0B 
               0225 
               0226 @print_dec:
0B03EC CD      0227 call print_float_dec ; print the result
0B03ED 1D 
0B03EE 03 
0B03EF 0B 
0B03F0 C3      0228 jp _main_end_ok     ; return success
0B03F1 B7 
0B03F2 03 
0B03F3 0B 
               0229 
               0230 ; call dumpRegistersHex ; DEBUG
               0231 ; call printNewLine
               0232 ; call dumpRegistersHex ; DEBUG
               0233 
               0234 
               0235 ; ========== HELPER FUNCTIONS ==========
               0236 ;
               0237 ; ; get the next argument after ix as a floating point number
               0238 ; ; inputs: ix = pointer to the argument string
               0239 ; ; outputs: HLH'L'C = floating point number, ix points to the next argument
               0240 ; ; destroys: everything except iy, including prime registers
               0241 ; get_arg_float:
               0242 ;     lea ix,ix+3 ; point to the next argument
               0243 ;     push ix ; preserve
               0244 ;     ld ix,(ix)  ; point to argument string
               0245 ;     call VAL ; convert the string to a float
               0246 ;     pop ix ; restore
               0247 ;     ret ; return with the value in HLH'L'C
               0248 ;
               0249 ; get the next argument after ix as a string
               0250 ; inputs: ix = pointer to the argument string
               0251 ; outputs: HL = pointer to the argument string, ix points to the next argument
               0252 ; destroys: a, h, l, f
               0253 get_arg_text:
0B03F4 ED      0254 lea ix,ix+3 ; point to the next argument
0B03F5 32 
0B03F6 03 
0B03F7 DD      0255 ld hl,(ix)  ; get the argument string
0B03F8 27 
0B03F9 00 
0B03FA C9      0256 ret
               0257 ;
               0258 ; ; match the next argument after ix to the dispatch table at iy
               0259 ; ;   - arguments and dispatch entries are zero-terminated, case-sensitive strings
               0260 ; ;   - final entry of dispatch table must be a 3-byte zero or bad things will happen
               0261 ; ; returns: NO MATCH: iy=dispatch list terminator a=1 and zero flag reset
               0262 ; ;          ON MATCH: iy=dispatch address, a=0 and zero flag set
               0263 ; ; destroys: a, hl, de, ix, iy, flags
               0264 ; match_next:
               0265 ;     lea ix,ix+3         ; point to the next argument
               0266 ; @loop:
               0267 ;     ld hl,(iy)          ; pointer argument dispatch record
               0268 ;     sign_hlu            ; check for list terminator
               0269 ;     jp z,@no_match      ; if a=0, return error
               0270 ;     inc hl              ; skip over jp instruction
               0271 ;     inc hl
               0272 ;     ld de,(ix)          ; pointer to the argument string
               0273 ;     call str_equal      ; compare the argument to the dispatch table entry
               0274 ;     jp z,@match         ; if equal, return success
               0275 ;     lea iy,iy+3         ; if not equal, bump iy to next dispatch table entry
               0276 ;     jp @loop            ; and loop
               0277 ; @no_match:
               0278 ;     inc a               ; no match so return a=1 and zero flag reset
               0279 ;     ret
               0280 ; @match:
               0281 ;     ld iy,(iy)          ; get the function pointer
               0282 ;     ret                 ; return a=0 and zero flag set
               0283 
               0284 ; ; same as match_next, but prints the parameter if a match is found
               0285 ; match_next_and_print:
               0286 ;     call match_next
               0287 ;     ret nz ; no match found
               0288 ;     lea ix,ix-3
               0289 ;     call get_arg_text ; hl points to the operator string
               0290 ;     call print_param
               0291 ;     ret
               0292 
               0293 ; ; compare two zero-terminated strings for equality, case-sensitive
               0294 ; ; hl: pointer to first string, de: pointer to second string
               0295 ; ; returns: z if equal, nz if not equal
               0296 ; ; destroys: a, hl, de
               0297 ; str_equal:
               0298 ;     ld a,(de)           ; get the first character
               0299 ;     cp (hl)             ; compare to the second character
               0300 ;     ret nz              ; if not equal, return
               0301 ;     or a
               0302 ;     ret z               ; if equal and zero, return
               0303 ;     inc hl              ; next character
               0304 ;     inc de
               0305 ;     jp str_equal        ; loop until end of string
               0306 
               0307 ; ; print the parameter string pointed to by ix
               0308 ; ; destroys: a, hl
               0309 ; print_param:
               0310 ;     ld hl,(ix)          ; get the parameter pointer
               0311 ;     call printString    ; print the parameter string
               0312 ;     ld a,' '            ; print a space separator
               0313 ;     rst.lil $10
               0314 ;     ret
               0315 
               0316 ; ; print the parameters
               0317 ; ; inputs: b = number of parameters, ix = pointer to the parameters
               0318 ; ; destroys: a, hl, bc
               0319 ; print_params:
               0320 ;     ld b,c              ; loop counter = number of parameters
               0321 ;     push ix             ; save the pointer to the parameters
               0322 ; @loop:
               0323 ;     push bc             ; save the loop counter
               0324 ;     call print_param    ; print the parameter
               0325 ;     lea ix,ix+3         ; next parameter pointer
               0326 ;     pop bc              ; get back the loop counter
               0327 ;     djnz @loop          ; loop until done
               0328 ;     pop ix              ; restore the pointer to the parameters
               0329 ;     ret
               0330 
               0331 ; debug_print:
               0332 ;     call printNewLine
               0333 ;     call dumpRegistersHexAll
               0334 ;     call printNewLine
               0335 ;     ret
               0336 
               0337 include "basic.inc" ; must be last so that RAM has room for BASIC operations
              0001* ; include "basic/mos_api.inc"
              0002* include "basic/macros.inc"
             0001** ; Title:	BBC Basic Interpreter - Z80 version
             0002** ;		Useful macros
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	11/06/2023
             0006** ;
             0007** ; Modinfo:
             0008** ; 11/06/2023:	Modified to run in ADL mode
             0009** ; 11/06/2024:   Make compatible with ez80asm by Brandon R. Gates
             0010** 
             0011** MACRO EXREG	rp1, rp2
             0012** PUSH	rp1
             0013** POP	rp2
             0014** ENDMACRO
             0015** 
             0016** ; MACRO ADD8U_DE	reg
             0017** MACRO ADD8U_DE
             0018** ADD	A, E
             0019** LD	E, A
             0020** ADC	A, D
             0021** SUB	E
             0022** LD	D, A
             0023** ENDMACRO
             0024** 
             0025** ; MACRO ADD8U_HL	reg
             0026** MACRO ADD8U_HL
             0027** ADD	A, L
             0028** LD	L, A
             0029** ADC	A, H
             0030** SUB	L
             0031** LD	H, A
             0032** ENDMACRO
             0033** 
             0034** MACRO VDU	val
             0035** LD	A, val
             0036** CALL	OSWRCH
             0037** ENDMACRO
             0038** 
             0039** MACRO SET_GPIO	reg, val
             0040** IN0	A, (reg)
             0041** OR	val
             0042** OUT0	(reg), A
             0043** ENDMACRO
             0044** 
             0045** MACRO RES_GPIO	reg, val
             0046** PUSH	BC
             0047** LD	A, val
             0048** CPL
             0049** LD	C, A
             0050** IN0	A, (reg)
             0051** AND	C
             0052** OUT0	(reg), A
             0053** POP	BC
             0054** ENDMACRO
              0003* include "basic/equs.inc"
             0001** ;
             0002** ; Title:	BBC Basic for AGON - Equs
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	08/06/2023
             0006** ;
             0007** ; Modinfo:
             0008** ; 08/06/2023:	Added SIZEW
             0009** 
             0010** ; XREF		STAVAR
             0011** ; XREF		ACCS
             0012** 
             0013** RAM_Top:		EQU		0B0000h	; Initial value of HIMEM
             0014** ;Stack_Top:		EQU		0000h	; Stack at top
             0015** SIZEW:			EQU		3	; Size of a word (3 for ADL mode)
             0016** 
             0017** ; For GPIO
             0018** ; PA not available on eZ80L92
             0019** ;
             0020** PA_DR:			EQU		96h
             0021** PA_DDR:			EQU		97h
             0022** PA_ALT1:		EQU		98h
             0023** PA_ALT2:		EQU		99h
             0024** PB_DR:          	EQU		9Ah
             0025** PB_DDR:        	 	EQU		9Bh
             0026** PB_ALT1:        	EQU		9Ch
             0027** PB_ALT2:        	EQU		9Dh
             0028** PC_DR:          	EQU		9Eh
             0029** PC_DDR:         	EQU		9Fh
             0030** PC_ALT1:        	EQU		A0h
             0031** PC_ALT2:        	EQU		A1h
             0032** PD_DR:          	EQU		A2h
             0033** PD_DDR:			EQU		A3h
             0034** PD_ALT1:		EQU		A4h
             0035** PD_ALT2:		EQU		A5h
             0036** 
             0037** GPIOMODE_OUT:		EQU		0	; Output
             0038** GPIOMODE_IN:		EQU		1	; Input
             0039** GPIOMODE_DIO:		EQU		2	; Open Drain IO
             0040** GPIOMODE_SIO:		EQU		3	; Open Source IO
             0041** GPIOMODE_INTD:		EQU		4	; Interrupt, Dual Edge
             0042** GPIOMODE_ALTF:		EQU		5;	; Alt Function
             0043** GPIOMODE_INTAL:		EQU		6	; Interrupt, Active Low
             0044** GPIOMODE_INTAH:		EQU		7	; Interrupt, Active High
             0045** GPIOMODE_INTFE:		EQU		8	; Interrupt, Falling Edge
             0046** GPIOMODE_INTRE:		EQU		9	; Interrupt, Rising Edge
             0047** 
             0048** ; ; Originally in ram.asm
             0049** ; ;
             0050** ; OC:			EQU     STAVAR+15*4     ; CODE ORIGIN (O%)
             0051** ; PC:			EQU     STAVAR+16*4     ; PROGRAM COUNTER (P%)
             0052** ; VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands
             0053** 
             0054** ; Originally in main.asm
             0055** ;
             0056** CR:			EQU     0DH
             0057** LF:			EQU     0AH
             0058** ESC:			EQU     1BH
              0004* ; include "basic/init.asm" ; relevant bits folded into calcbas.asm
              0005* include "basic/eval.asm"
             0001** ;
             0002** ; Title:	BBC Basic Interpreter - Z80 version
             0003** ;		Expression Evaluation & Arithmetic Module - "EVAL"
             0004** ; Author:	(C) Copyright  R.T.Russell  1984
             0005** ; Modified By:	Dean Belfield
             0006** ; Created:	12/05/2023
             0007** ; Last Updated:	17/08/2023
             0008** ;
             0009** ; Modinfo:
             0010** ; 07/06/2023:	Modified to run in ADL mode
             0011** ; 26/06/2023:	Fixed HEX and HEXSTR
             0012** ; 13/08/2023:	Added INKEY(-n) support (requires MOS 1.04)
             0013** ; 17/08/2023:	Added binary constants
             0014** 
             0015** ; .ASSUME	ADL = 1
             0016** 
             0017** ; INCLUDE	"equs.inc"
             0018** ; INCLUDE "macros.inc"
             0019** ; INCLUDE "mos_api.inc"	; In MOS/src
             0020** 
             0021** ; SEGMENT CODE
             0022** 
             0023** ; XDEF	EXPR
             0024** ; XDEF	EXPRN
             0025** ; XDEF	EXPRI
             0026** ; XDEF	EXPRS
             0027** ; XDEF	ITEMI
             0028** ; XDEF	LOADN
             0029** ; XDEF	LOAD4
             0030** ; XDEF	CONS
             0031** ; XDEF	LOADS
             0032** ; XDEF	SFIX
             0033** ; XDEF	VAL0
             0034** ; XDEF	SEARCH
             0035** ; XDEF	SWAP
             0036** ; XDEF	TEST
             0037** ; XDEF	DECODE
             0038** ; XDEF	HEXSTR
             0039** ; XDEF	STR
             0040** ; XDEF	ZERO
             0041** ; XDEF	PUSHS
             0042** ; XDEF	POPS
             0043** ; XDEF	COMMA
             0044** ; XDEF	BRAKET
             0045** ; XDEF	NXT
             0046** ; XDEF	COUNT0
             0047** 
             0048** ; XREF	ADVAL
             0049** ; XREF	FN_EX
             0050** ; XREF	POINT
             0051** ; XREF	USR
             0052** ; XREF	SYNTAX
             0053** ; XREF	ERROR_
             0054** ; XREF	CHECK
             0055** ; XREF	GETVAR
             0056** ; XREF	LISTON
             0057** ; XREF	RANGE
             0058** ; XREF	FPP
             0059** ; XREF	GETCSR
             0060** ; XREF	CHANEL
             0061** ; XREF	OSSTAT
             0062** ; XREF	OSBGET
             0063** ; XREF	LOMEM
             0064** ; XREF	HIMEM
             0065** ; XREF	PAGE_
             0066** ; XREF	TOP
             0067** ; XREF	ERL
             0068** ; XREF	ERR
             0069** ; XREF	COUNT
             0070** ; XREF	OSOPEN
             0071** ; XREF	GETEXT
             0072** ; XREF	GETPTR
             0073** ; XREF	GETIME
             0074** ; XREF	GETIMS
             0075** ; XREF	LEXAN2
             0076** ; XREF	RANDOM
             0077** ; XREF	STORE5
             0078** ; XREF	GETSCHR
             0079** ; XREF	OSRDCH
             0080** ; XREF	OSKEY
             0081** ; XREF	INKEY1
             0082** ; XREF	EXTERR
             0083** ;
             0084** ; BINARY FLOATING POINT REPRESENTATION:
             0085** ;    32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
             0086** ;     8 BIT EXCESS-128 SIGNED EXPONENT
             0087** ;    SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
             0088** ;    MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
             0089** ;
             0090** ; BINARY INTEGER REPRESENTATION:
             0091** ;    32 BIT 2'S-COMPLEMENT SIGNED INTEGER
             0092** ;     "EXPONENT" BYTE = 0 (WHEN PRESENT)
             0093** ;
             0094** ; NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
             0095** ;                             EXPONENT - C
             0096** ;
             0097** 
             0098** ;
             0099** ; Table of addresses for functions
             0100** ;
             0101** FUNTOK:			EQU	8DH			; First token number
             0102** ;
0B03FB D7    0103** FUNTBL:			DW24	DECODE			; Line number
0B03FC 0B 
0B03FD 0B 
0B03FE 85    0104** DW24	OPENIN			; OPENIN
0B03FF 08 
0B0400 0B 
0B0401 A7    0105** DW24	PTR_EV			; PTR
0B0402 08 
0B0403 0B 
0B0404 41    0106** DW24	PAGEV			; PAGE
0B0405 08 
0B0406 0B 
0B0407 B1    0107** DW24	TIMEV			; TIME
0B0408 08 
0B0409 0B 
0B040A 2D    0108** DW24	LOMEMV			; LOMEM
0B040B 08 
0B040C 0B 
0B040D 37    0109** DW24	HIMEMV			; HIMEM
0B040E 08 
0B040F 0B 
0B0410 05    0110** DW24	ABSV			; ABS
0B0411 09 
0B0412 0B 
0B0413 41    0111** DW24	ACS			; ACS
0B0414 09 
0B0415 0B 
0B0416 A8    0112** DW24	ADVAL			; ADVAL
0B0417 46 
0B0418 0B 
0B0419 16    0113** DW24	ASC			; ASC
0B041A 08 
0B041B 0B 
0B041C 39    0114** DW24	ASN			; ASN
0B041D 09 
0B041E 0B 
0B041F 3D    0115** DW24	ATN			; ATN
0B0420 09 
0B0421 0B 
0B0422 DF    0116** DW24	BGET			; BGET
0B0423 07 
0B0424 0B 
0B0425 25    0117** DW24	COS			; COS
0B0426 09 
0B0427 0B 
0B0428 6C    0118** DW24	COUNTV			; COUNT
0B0429 08 
0B042A 0B 
0B042B 0D    0119** DW24	DEG			; DEG
0B042C 09 
0B042D 0B 
0B042E 60    0120** DW24	ERLV			; ERL
0B042F 08 
0B0430 0B 
0B0431 66    0121** DW24	ERRV			; ERR
0B0432 08 
0B0433 0B 
0B0434 6A    0122** DW24	EVAL_			; EVAL
0B0435 09 
0B0436 0B 
0B0437 2D    0123** DW24	EXP			; EXP
0B0438 09 
0B0439 0B 
0B043A 9D    0124** DW24	EXT			; EXT
0B043B 08 
0B043C 0B 
0B043D 84    0125** DW24	ZERO			; FALSE
0B043E 0C 
0B043F 0B 
0B0440 70    0126** DW24	FN_EX			; FN
0B0441 13 
0B0442 0B 
0B0443 FD    0127** DW24	GET			; GET
0B0444 07 
0B0445 0B 
0B0446 EC    0128** DW24	INKEY			; INKEY
0B0447 07 
0B0448 0B 
0B0449 1C    0129** DW24	INSTR			; INSTR(
0B044A 0A 
0B044B 0B 
0B044C 19    0130** DW24	INT_			; INT
0B044D 09 
0B044E 0B 
0B044F 26    0131** DW24	LEN			; LEN
0B0450 08 
0B0451 0B 
0B0452 31    0132** DW24	LN			; LN
0B0453 09 
0B0454 0B 
0B0455 35    0133** DW24	LOG			; LOG
0B0456 09 
0B0457 0B 
0B0458 09    0134** DW24	NOTK			; NOT
0B0459 09 
0B045A 0B 
0B045B 81    0135** DW24	OPENUP			; OPENUP
0B045C 08 
0B045D 0B 
0B045E 7E    0136** DW24	OPENOT			; OPENOUT
0B045F 08 
0B0460 0B 
0B0461 01    0137** DW24	PI			; PI
0B0462 09 
0B0463 0B 
0B0464 5A    0138** DW24	POINT			; POINT(
0B0465 47 
0B0466 0B 
0B0467 BE    0139** DW24	POS			; POS
0B0468 07 
0B0469 0B 
0B046A 11    0140** DW24	RAD			; RAD
0B046B 09 
0B046C 0B 
0B046D 9E    0141** DW24	RND			; RND
0B046E 09 
0B046F 0B 
0B0470 15    0142** DW24	SGN			; SGN
0B0471 09 
0B0472 0B 
0B0473 29    0143** DW24	SIN			; SIN
0B0474 09 
0B0475 0B 
0B0476 1D    0144** DW24	SQR			; SQR
0B0477 09 
0B0478 0B 
0B0479 21    0145** DW24	TAN			; TAN
0B047A 09 
0B047B 0B 
0B047C 4B    0146** DW24	TOPV			; TO(P)
0B047D 08 
0B047E 0B 
0B047F F6    0147** DW24	TRUE			; TRUE
0B0480 08 
0B0481 0B 
0B0482 13    0148** DW24	USR			; USR
0B0483 18 
0B0484 0B 
0B0485 5B    0149** DW24	VAL			; VAL
0B0486 09 
0B0487 0B 
0B0488 C7    0150** DW24	VPOS			; VPOS
0B0489 07 
0B048A 0B 
0B048B B0    0151** DW24	CHRS			; CHRS
0B048C 0A 
0B048D 0B 
0B048E B8    0152** DW24	GETS			; GETS
0B048F 0A 
0B0490 0B 
0B0491 C9    0153** DW24	INKEYS			; INKEYS
0B0492 0A 
0B0493 0B 
0B0494 4E    0154** DW24	LEFTS			; LEFTS(
0B0495 0B 
0B0496 0B 
0B0497 16    0155** DW24	MIDS			; MIDS(
0B0498 0B 
0B0499 0B 
0B049A 6E    0156** DW24	RIGHTS			; RIGHTS(
0B049B 0B 
0B049C 0B 
0B049D 3B    0157** DW24	STRS			; STR$
0B049E 0C 
0B049F 0B 
0B04A0 8F    0158** DW24	STRING_			; STRINGS(
0B04A1 0B 
0B04A2 0B 
0B04A3 CF    0159** DW24	EOF			; EOF
0B04A4 07 
0B04A5 0B 
             0160** ;
             0161** FUNTBL_END:		EQU	$
             0162** ; TCMD:			EQU     FUNTOK+(FUNTBL_END-FUNTBL)/3
             0163** TCMD_EV:			EQU     FUNTBL_END-FUNTBL/3+FUNTOK ; reorder because ez80asm doesn't do order of operations
             0164** 
             0165** ANDK:			EQU     80H
             0166** DIVK:			EQU     81H
             0167** EORK:			EQU     82H
             0168** MODK:			EQU     83H
             0169** ORK:			EQU     84H
             0170** ;
0B04A6 E1    0171** SOPTBL:			DW24	SLE			; <= (STRING)
0B04A7 08 
0B04A8 0B 
0B04A9 EA    0172** DW24	SNE			; <>
0B04AA 08 
0B04AB 0B 
0B04AC DA    0173** DW24	SGE			; >=
0B04AD 08 
0B04AE 0B 
0B04AF CB    0174** DW24	SLT			; <
0B04B0 08 
0B04B1 0B 
0B04B2 F1    0175** DW24	SEQ			; =
0B04B3 08 
0B04B4 0B 
0B04B5 D2    0176** DW24	SGT			; >
0B04B6 08 
0B04B7 0B 
             0177** ;
             0178** ; EXPR - VARIABLE-TYPE EXPRESSION EVALUATION
             0179** ;     Expression type is returned in A'F':
             0180** ;        Numeric - A' bit 7=0, F' sign bit cleared.
             0181** ;         String - A' bit 7=1, F' sign bit set.
             0182** ; Floating-point or integer result returned in HLH'L'C
             0183** ; Integer result denoted by C=0 and HLH'L' non-zero.
             0184** ; String result returned in string accumulator, DE set.
             0185** ;
             0186** ; Hierarchy is: (1) Variables, functions, constants, bracketed expressions.
             0187** ;               (2) ^
             0188** ;               (3) * / MOD DIV
             0189** ;               (4) + -
             0190** ;               (5) = <> <= >= > <
             0191** ;               (6) AND
             0192** ;               (7) EOR OR
             0193** 
             0194** ;
             0195** ; Level 7: EOR and OR
             0196** ;
0B04B8 CD    0197** EXPR:			CALL    EXPR1			; Get first operator by calling Level 6
0B04B9 D1 
0B04BA 04 
0B04BB 0B 
0B04BC FE    0198** EXPR0A:			CP      EORK            	; Is operator EOR?
0B04BD 82 
0B04BE 28    0199** JR      Z,EXPR0B		; Yes, so skip to next bit
0B04BF 03 
0B04C0 FE    0200** CP      ORK			; Is operator OR
0B04C1 84 
0B04C2 C0    0201** RET     NZ			; No, so return
             0202** ;
0B04C3 CD    0203** EXPR0B:			CALL    SAVE_EV            	; Save first operand
0B04C4 2F 
0B04C5 0D 
0B04C6 0B 
0B04C7 CD    0204** CALL    EXPR1           	; Get second operand
0B04C8 D1 
0B04C9 04 
0B04CA 0B 
0B04CB CD    0205** CALL    DOIT            	; Do the operation
0B04CC 3E 
0B04CD 0D 
0B04CE 0B 
0B04CF 18    0206** JR      EXPR0A          	; And continue
0B04D0 EB 
             0207** ;
             0208** ; Level 6: AND
             0209** ;
0B04D1 CD    0210** EXPR1:			CALL    EXPR2			; Get first operator by calling Level 5
0B04D2 E6 
0B04D3 04 
0B04D4 0B 
0B04D5 FE    0211** EXPR1A:			CP      ANDK			; Is operator AND?
0B04D6 80 
0B04D7 C0    0212** RET     NZ			; No, so return
0B04D8 CD    0213** CALL    SAVE_EV			; Save first operand
0B04D9 2F 
0B04DA 0D 
0B04DB 0B 
0B04DC CD    0214** CALL    EXPR2			; Get second operand
0B04DD E6 
0B04DE 04 
0B04DF 0B 
0B04E0 CD    0215** CALL    DOIT			; Do the operation
0B04E1 3E 
0B04E2 0D 
0B04E3 0B 
0B04E4 18    0216** JR      EXPR1A			; And continue
0B04E5 EF 
             0217** ;
             0218** ; Level 5: Comparisons
             0219** ;
0B04E6 CD    0220** EXPR2:			CALL    EXPR3			; Get first operator by calling Level 4
0B04E7 58 
0B04E8 05 
0B04E9 0B 
0B04EA CD    0221** CALL    RELOP?			; Is it ">", "=" or "<"?
0B04EB 06 
0B04EC 0D 
0B04ED 0B 
0B04EE C0    0222** RET     NZ			; No, so return
0B04EF 47    0223** LD      B,A			; Store the first operator in B
0B04F0 FD    0224** INC     IY              	; Bump over operator
0B04F1 23 
0B04F2 CD    0225** CALL    NXT			;
0B04F3 61 
0B04F4 0D 
0B04F5 0B 
0B04F6 CD    0226** CALL    RELOP?          	; Is it a compound operator?
0B04F7 06 
0B04F8 0D 
0B04F9 0B 
0B04FA 20    0227** JR      NZ,EXPR2B		; No, so skip next bit
0B04FB 09 
0B04FC FD    0228** INC     IY			; Bump over operator
0B04FD 23 
0B04FE B8    0229** CP      B			; Compare with first
0B04FF CA    0230** JP      Z,SYNTAX        	; Trap illegal combinations ">>", "==", "<<" (but not "><", "=>", "=<")
0B0500 88 
0B0501 0F 
0B0502 0B 
0B0503 80    0231** ADD     A,B
0B0504 47    0232** LD      B,A			; B: Unique code for the compound operator
0B0505 78    0233** EXPR2B:			LD      A,B			; A: Code for the operator/compound operator
0B0506 08    0234** EX      AF,AF'
0B0507 FA    0235** JP      M,EXPR2S		; If it is a string, then branch here to handle it
0B0508 21 
0B0509 05 
0B050A 0B 
0B050B 08    0236** EX      AF,AF'
0B050C D6    0237** SUB     4
0B050D 04 
0B050E FE    0238** CP      '>'-4
0B050F 3A 
0B0510 20    0239** JR      NZ,EXPR2C
0B0511 02 
0B0512 C6    0240** ADD     A,2
0B0513 02 
0B0514 CD    0241** EXPR2C:			CALL    SAVE1
0B0515 31 
0B0516 0D 
0B0517 0B 
0B0518 CD    0242** CALL    EXPR3
0B0519 58 
0B051A 05 
0B051B 0B 
0B051C CD    0243** CALL    DOIT            	; NB: Must NOT be "JP DOIT"
0B051D 3E 
0B051E 0D 
0B051F 0B 
0B0520 C9    0244** RET
             0245** ;
0B0521 08    0246** EXPR2S:			EX      AF,AF'			; Handle string comparisons
0B0522 3D    0247** DEC     A
0B0523 E6    0248** AND     7
0B0524 07 
0B0525 CD    0249** CALL    PUSHS           	; Save string on the stack
0B0526 A5 
0B0527 0C 
0B0528 0B 
0B0529 F5    0250** PUSH    AF              	; Save the operator
0B052A CD    0251** CALL    EXPR3           	; Get the second string
0B052B 58 
0B052C 05 
0B052D 0B 
0B052E 08    0252** EX      AF,AF'
0B052F F2    0253** JP      P,TYPE_EV_
0B0530 27 
0B0531 06 
0B0532 0B 
0B0533 F1    0254** POP     AF
0B0534 4B    0255** LD      C,E             	; Length of string #2
0B0535 D1    0256** POP     DE
0B0536 21    0257** LD      HL,0
0B0537 00 
0B0538 00 
0B0539 00 
0B053A 39    0258** ADD     HL,SP
0B053B 43    0259** LD      B,E             	; Length of string #1
0B053C D5    0260** PUSH    DE
0B053D 11    0261** LD      DE,ACCS
0B053E 00 
0B053F 4D 
0B0540 0B 
0B0541 EB    0262** EX      DE,HL
0B0542 CD    0263** CALL    DISPT2
0B0543 6D 
0B0544 0D 
0B0545 0B 
0B0546 D1    0264** POP     DE
0B0547 EB    0265** EX      DE,HL
0B0548 7D    0266** LD	A,L
0B0549 21    0267** LD	HL,0
0B054A 00 
0B054B 00 
0B054C 00 
0B054D 6F    0268** LD	L,A
0B054E 39    0269** ADD     HL,SP
0B054F F9    0270** LD      SP,HL
0B0550 EB    0271** EX      DE,HL
0B0551 AF    0272** XOR     A               	; Numeric marker
0B0552 4F    0273** LD      C,A             	; Integer marker
0B0553 08    0274** EX      AF,AF'
0B0554 FD    0275** LD      A,(IY)
0B0555 7E 
0B0556 00 
0B0557 C9    0276** RET
             0277** ;
             0278** ; Level 4: + and -
             0279** ;
0B0558 CD    0280** EXPR3:			CALL    EXPR4			; Get first operator by calling Level 3
0B0559 B5 
0B055A 05 
0B055B 0B 
0B055C FE    0281** EXPR3A:			CP      '-'			; Is it "-"?
0B055D 2D 
0B055E 28    0282** JR      Z,EXPR3B		; Yes, so skip the next bit
0B055F 09 
0B0560 FE    0283** CP      '+'			; Is it "+"?
0B0561 2B 
0B0562 C0    0284** RET     NZ			; No, so return
0B0563 08    0285** EX      AF,AF'			; Get the type
0B0564 FA    0286** JP      M,EXPR3S		; Branch here if string
0B0565 77 
0B0566 05 
0B0567 0B 
0B0568 08    0287** EX      AF,AF'
0B0569 CD    0288** EXPR3B:			CALL    SAVE_EV			; Save the first operator
0B056A 2F 
0B056B 0D 
0B056C 0B 
0B056D CD    0289** CALL    EXPR4			; Fetch the second operator
0B056E B5 
0B056F 05 
0B0570 0B 
0B0571 CD    0290** CALL    DOIT			; Do the operation
0B0572 3E 
0B0573 0D 
0B0574 0B 
0B0575 18    0291** JR      EXPR3A			; And continue
0B0576 E5 
             0292** ;
0B0577 08    0293** EXPR3S:			EX      AF,AF'			; Handle string concatenation
0B0578 FD    0294** INC     IY              	; Bump past the "+"
0B0579 23 
0B057A CD    0295** CALL    PUSHS           	; Save the string on the stack
0B057B A5 
0B057C 0C 
0B057D 0B 
0B057E CD    0296** CALL    EXPR4           	; Fetch the second operator
0B057F B5 
0B0580 05 
0B0581 0B 
0B0582 08    0297** EX      AF,AF'
0B0583 F2    0298** JP      P,TYPE_EV_			; If it is not a string, then Error: "Type mismatch"
0B0584 27 
0B0585 06 
0B0586 0B 
0B0587 01    0299** LD	BC, 0			; Clear BC
0B0588 00 
0B0589 00 
0B058A 00 
0B058B 4B    0300** LD      C,E             	; C: Length of the second string
0B058C D1    0301** POP     DE
0B058D D5    0302** PUSH    DE
0B058E 21    0303** LD      HL,ACCS
0B058F 00 
0B0590 4D 
0B0591 0B 
             0304** ; BEGIN MISSING FROM BINARY
             0305** ; LD	A,E			;  E: Length of the first string
             0306** ; LD      DE,ACCS
             0307** ; LD	E,A 			; DE: Pointer to the end of the first string
             0308** ; END MISSING FROM BINARY
0B0592 54    0309** LD		D,H ; ADDED FROM BINARY
0B0593 79    0310** LD      A,C
0B0594 B7    0311** OR      A
0B0595 28    0312** JR      Z,EXP3S3
0B0596 0F 
0B0597 6F    0313** LD      L,A             	; Source
0B0598 83    0314** ADD     A,E
0B0599 5F    0315** LD      E,A             	; Destination
0B059A 3E    0316** LD      A,19
0B059B 13 
0B059C DA    0317** JP      C,ERROR_         	; A carry indicates string > 255 bytes, so Error: "String too long"
0B059D 51 
0B059E 3A 
0B059F 0B 
0B05A0 D5    0318** PUSH    DE
0B05A1 1D    0319** DEC     E
0B05A2 2D    0320** DEC     L
0B05A3 ED    0321** LDDR                    	; Copy
0B05A4 B8 
0B05A5 D1    0322** POP     DE
0B05A6 D9    0323** EXP3S3:			EXX
0B05A7 C1    0324** POP     BC
0B05A8 CD    0325** CALL    POPS            	; Restore from stack
0B05A9 CF 
0B05AA 0C 
0B05AB 0B 
0B05AC D9    0326** EXX
0B05AD F6    0327** OR      80H             	; Flag as a string
0B05AE 80 
0B05AF 08    0328** EX      AF,AF'
0B05B0 FD    0329** LD      A,(IY)			; Fetch the next character
0B05B1 7E 
0B05B2 00 
0B05B3 18    0330** JR      EXPR3A			; And continue
0B05B4 A7 
             0331** ;
             0332** ; Level 3: * / MOD DIV
             0333** ;
0B05B5 CD    0334** EXPR4:			CALL    EXPR5			; Get first operator by calling Level 2
0B05B6 D6 
0B05B7 05 
0B05B8 0B 
0B05B9 FE    0335** EXPR4A:			CP      '*'			; "*" is valid
0B05BA 2A 
0B05BB 28    0336** JR      Z,EXPR4B
0B05BC 0B 
0B05BD FE    0337** CP      '/'			; "/" is valid
0B05BE 2F 
0B05BF 28    0338** JR      Z,EXPR4B
0B05C0 07 
0B05C1 FE    0339** CP      MODK			; MOD token is valid
0B05C2 83 
0B05C3 28    0340** JR      Z,EXPR4B
0B05C4 03 
0B05C5 FE    0341** CP      DIVK			; DIV token is valid
0B05C6 81 
0B05C7 C0    0342** RET     NZ			; And return if it is anything else
0B05C8 CD    0343** EXPR4B:			CALL    SAVE_EV
0B05C9 2F 
0B05CA 0D 
0B05CB 0B 
0B05CC CD    0344** CALL    EXPR5
0B05CD D6 
0B05CE 05 
0B05CF 0B 
0B05D0 CD    0345** CALL    DOIT
0B05D1 3E 
0B05D2 0D 
0B05D3 0B 
0B05D4 18    0346** JR      EXPR4A
0B05D5 E3 
             0347** ;
             0348** ; Level 2: ^
             0349** ;
0B05D6 CD    0350** EXPR5:			CALL    ITEM			; Get variable
0B05D7 B6 
0B05D8 06 
0B05D9 0B 
0B05DA B7    0351** OR      A               	; Test type
0B05DB 08    0352** EX      AF,AF'          	; Save type
0B05DC CD    0353** EXPR5A:			CALL    NXT			; Skip spaces
0B05DD 61 
0B05DE 0D 
0B05DF 0B 
0B05E0 FE    0354** CP      '^'			; Is the operator "^"?
0B05E1 5E 
0B05E2 C0    0355** RET     NZ			; No, so return
0B05E3 CD    0356** CALL    SAVE_EV			; Save first operand
0B05E4 2F 
0B05E5 0D 
0B05E6 0B 
0B05E7 CD    0357** CALL    ITEM			; Get second operand
0B05E8 B6 
0B05E9 06 
0B05EA 0B 
0B05EB B7    0358** OR      A			; Test type
0B05EC 08    0359** EX      AF,AF'			; Save type
0B05ED CD    0360** CALL    DOIT			; Do the operation
0B05EE 3E 
0B05EF 0D 
0B05F0 0B 
0B05F1 18    0361** JR      EXPR5A			; And continue
0B05F2 E9 
             0362** ;
             0363** ; Evaluate a numeric expression
             0364** ;
0B05F3 CD    0365** EXPRN:			CALL    EXPR			; Evaluate expression
0B05F4 B8 
0B05F5 04 
0B05F6 0B 
0B05F7 08    0366** EX      AF,AF'			; Get the type
0B05F8 F0    0367** RET     P			; And return if it is a number
0B05F9 18    0368** JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B05FA 2C 
             0369** ;
             0370** ; Evaluate a fixed-point expression
             0371** ;
0B05FB CD    0372** EXPRI:			CALL    EXPR			; Evaluate the expression
0B05FC B8 
0B05FD 04 
0B05FE 0B 
0B05FF 08    0373** EX      AF,AF'			; Get the type
0B0600 F2    0374** JP      P,SFIX			; If it is numeric, then convert to fixed-point notation
0B0601 53 
0B0602 09 
0B0603 0B 
0B0604 18    0375** JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B0605 21 
             0376** ;
             0377** ; Evaluate a string expression
             0378** ;
0B0606 CD    0379** EXPRS:			CALL    EXPR			; Evaluate the expression
0B0607 B8 
0B0608 04 
0B0609 0B 
0B060A 08    0380** EX      AF,AF'			; Get the type
0B060B F8    0381** RET     M			; And return if it is a string
0B060C 18    0382** JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B060D 19 
             0383** ;
             0384** ; Get a numeric variable
             0385** ;
0B060E CD    0386** ITEMN:			CALL    ITEM			; Get the variable
0B060F B6 
0B0610 06 
0B0611 0B 
0B0612 B7    0387** OR      A			; Test the type
0B0613 F0    0388** RET     P			; And return if it is a number
0B0614 18    0389** JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B0615 11 
             0390** ;
             0391** ; Get a fixed-point variable
             0392** ;
0B0616 CD    0393** ITEMI:			CALL    ITEM			; Get the variable
0B0617 B6 
0B0618 06 
0B0619 0B 
0B061A B7    0394** OR      A			; Test the type
0B061B F2    0395** JP      P,SFIX			; If it is numeric, then convert to fixed-point notation
0B061C 53 
0B061D 09 
0B061E 0B 
0B061F 18    0396** JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B0620 06 
             0397** ;
             0398** ; Get a string variable
             0399** ;
0B0621 CD    0400** ITEMS:			CALL    ITEM			; Get the variable
0B0622 B6 
0B0623 06 
0B0624 0B 
0B0625 B7    0401** OR      A			; Test the type
0B0626 F8    0402** RET     M			; If it is a string, then return
             0403** ;							; Otherwise
0B0627 3E    0404** TYPE_EV_:			LD      A,6			; Error: "Type mismatch"
0B0628 06 
0B0629 C3    0405** JP      ERROR_
0B062A 51 
0B062B 3A 
0B062C 0B 
             0406** ;
             0407** ; Evaluate a bracketed expression
             0408** ;
0B062D CD    0409** ITEM1:			CALL    EXPR            	; Evaluate the expression
0B062E B8 
0B062F 04 
0B0630 0B 
0B0631 CD    0410** CALL    BRAKET			; Check for closing bracket
0B0632 20 
0B0633 0D 
0B0634 0B 
0B0635 08    0411** EX      AF,AF'
0B0636 C9    0412** RET
             0413** ;
             0414** ; HEX - Get hexadecimal constant.
             0415** ;   Inputs: ASCII string at (IY)
             0416** ;  Outputs: Integer result in H'L'HL, C=0, A7=0.
             0417** ;           IY updated (points to delimiter)
             0418** ;
0B0637 CD    0419** HEX:			CALL    ZERO			; Set result to 0
0B0638 84 
0B0639 0C 
0B063A 0B 
0B063B CD    0420** CALL    HEXDIG			; Fetch the character from IY
0B063C E9 
0B063D 0C 
0B063E 0B 
0B063F 38    0421** JR      C,BADHEX		; If invalid HEX character, then Error: "Bad HEX"
0B0640 1B 
0B0641 FD    0422** HEX1:			INC     IY			; Move pointer to next character
0B0642 23 
0B0643 E6    0423** AND     0FH			; Clear the top nibble
0B0644 0F 
0B0645 06    0424** LD      B,4			; Loop counter
0B0646 04 
             0425** ;
0B0647 D9    0426** HEX2:			EXX				; Shift the result left B (4) times. This makes
0B0648 52    0427** ADD.S   HL,HL			; space for the incoming nibble in the least significant 4 bits
0B0649 29 
0B064A D9    0428** EXX				; .
0B064B 52    0429** ADC.S   HL,HL			; .
0B064C ED 
0B064D 6A 
0B064E 10    0430** DJNZ    HEX2			; And loop
0B064F F7 
0B0650 D9    0431** EXX
0B0651 B5    0432** OR      L			; OR in the digit
0B0652 6F    0433** LD      L,A
0B0653 D9    0434** EXX
             0435** ;
0B0654 CD    0436** CALL    HEXDIG			; Fetch the next character
0B0655 E9 
0B0656 0C 
0B0657 0B 
0B0658 30    0437** JR      NC,HEX1			; If it is a HEX digit then loop
0B0659 E7 
0B065A AF    0438** XOR     A			; Clear A
0B065B C9    0439** RET
             0440** ;
0B065C 3E    0441** BADHEX:			LD      A,28
0B065D 1C 
0B065E C3    0442** JP      ERROR_          	; Error: "Bad HEX"
0B065F 51 
0B0660 3A 
0B0661 0B 
             0443** ;
             0444** ; BIN - Get binary constant.
             0445** ;   Inputs: ASCII string at (IY)
             0446** ;  Outputs: Integer result in H'L'HL, C=0, A7=0.
             0447** ;           IY updated (points to delimiter)
             0448** ;
0B0662 CD    0449** BIN:			CALL    ZERO			; Set result to 0
0B0663 84 
0B0664 0C 
0B0665 0B 
0B0666 CD    0450** CALL	BINDIG			; Fetch the character from IY
0B0667 FC 
0B0668 0C 
0B0669 0B 
0B066A 38    0451** JR	C,BADBIN		; If invalid BIN character then Error: "Bad Binary"
0B066B 13 
0B066C FD    0452** BIN1:			INC	IY			; Move pointer to next character
0B066D 23 
0B066E 0F    0453** RRCA				; Bit 0 of ASCII '0' is 0, and ASCII '1' is 1, so shift that bit into carry
0B066F D9    0454** EXX				;
0B0670 52    0455** ADC.S	HL,HL			; And shift back into into H'L'HL (note the ADC)
0B0671 ED 
0B0672 6A 
0B0673 D9    0456** EXX
0B0674 52    0457** ADC.S	HL,HL
0B0675 ED 
0B0676 6A 
0B0677 CD    0458** CALL	BINDIG			; Fetch the next character
0B0678 FC 
0B0679 0C 
0B067A 0B 
0B067B 30    0459** JR	NC,BIN1
0B067C EF 
0B067D AF    0460** XOR	A			; Clear A
0B067E C9    0461** RET
             0462** ;
0B067F 3E    0463** BADBIN:			LD	A, 28			; Error: "Bad Binary" - reuses same error code as Bad HEX
0B0680 1C 
0B0681 CD    0464** CALL	EXTERR
0B0682 68 
0B0683 3A 
0B0684 0B 
0B0685 42    0465** DB	"Bad Binary", 0
0B0686 61 
0B0687 64 
0B0688 20 
0B0688 42   
0B0689 69 
0B068A 6E 
0B068B 61 
0B068B 72   
0B068C 79 
0B068D 00 
             0466** ;
             0467** ; MINUS - Unary minus.
             0468** ;   Inputs: IY = text pointer
             0469** ;  Outputs: Numeric result, same type as argument.
             0470** ;           Result in H'L'HLC
             0471** ;
0B0690 CD    0472** MINUS:			CALL    ITEMN			; Get the numeric argument
0B0691 0E 
0B0692 06 
0B0693 0B 
0B0694 0D    0473** MINUS0:			DEC     C			; Check exponent (C)
0B0695 0C    0474** INC     C			; If it is zero, then it's either a FP zero or an integer
0B0696 28    0475** JR      Z,NEGATE_EV        	; So do an integer negation
0B0697 06 
             0476** ;
0B0698 7C    0477** LD      A,H			; Do a FP negation by
0B0699 EE    0478** XOR     80H             	; Toggling the sign bit (H)
0B069A 80 
0B069B 67    0479** LD      H,A
0B069C AF    0480** XOR     A               	; Numeric marker
0B069D C9    0481** RET
             0482** ;
0B069E D9    0483** NEGATE_EV:			EXX				; This section does a two's complement negation on H'L'HLC
0B069F 7C    0484** LD      A,H			; First do a one's complement by negating all the bytes
0B06A0 2F    0485** CPL
0B06A1 67    0486** LD      H,A
0B06A2 7D    0487** LD      A,L
0B06A3 2F    0488** CPL
0B06A4 6F    0489** LD      L,A
0B06A5 D9    0490** EXX
0B06A6 7C    0491** LD      A,H
0B06A7 2F    0492** CPL
0B06A8 67    0493** LD      H,A
0B06A9 7D    0494** LD      A,L
0B06AA 2F    0495** CPL
0B06AB 6F    0496** LD      L,A
0B06AC D9    0497** ADD1:			EXX				; Then add 1
0B06AD 23    0498** INC     HL
0B06AE 7C    0499** LD      A,H
0B06AF B5    0500** OR      L
0B06B0 D9    0501** EXX
0B06B1 3E    0502** LD      A,0             	; Numeric marker
0B06B2 00 
0B06B3 C0    0503** RET     NZ
0B06B4 23    0504** INC     HL
0B06B5 C9    0505** RET
             0506** ;
             0507** ; ITEM - VARIABLE TYPE NUMERIC OR STRING ITEM.
             0508** ; Item type is returned in A:  Bit 7=0 numeric.
             0509** ;                              Bit 7=1 string.
             0510** ; Numeric item returned in HLH'L'C.
             0511** ; String item returned in string accumulator,
             0512** ;   DE addresses byte after last (E=length).
             0513** ;
0B06B6 CD    0514** ITEM:			CALL    CHECK			; Check there's at least a page of free memory left and Error: "No room" if not
0B06B7 40 
0B06B8 19 
0B06B9 0B 
0B06BA CD    0515** CALL    NXT			; Skip spaces
0B06BB 61 
0B06BC 0D 
0B06BD 0B 
0B06BE FD    0516** INC     IY			; Move to the prefix character
0B06BF 23 
0B06C0 FE    0517** CP      '&'			; If `&`
0B06C1 26 
0B06C2 CA    0518** JP      Z,HEX           	; Then get a HEX constant
0B06C3 37 
0B06C4 06 
0B06C5 0B 
0B06C6 FE    0519** CP	'%'			; If '%'
0B06C7 25 
0B06C8 28    0520** JR	Z,BIN			; Then get a BINARY constant
0B06C9 98 
0B06CA FE    0521** CP      '-'			; If `-`
0B06CB 2D 
0B06CC 28    0522** JR      Z,MINUS         	; Then get a negative number
0B06CD C2 
0B06CE FE    0523** CP      '+'			; If `+`
0B06CF 2B 
0B06D0 CA    0524** JP      Z,ITEMN         	; Then just fetch the number (unary plus)
0B06D1 0E 
0B06D2 06 
0B06D3 0B 
0B06D4 FE    0525** CP      '('			; If `(`
0B06D5 28 
0B06D6 CA    0526** JP      Z,ITEM1         	; Start of a bracketed expression
0B06D7 2D 
0B06D8 06 
0B06D9 0B 
0B06DA FE    0527** CP      34			; If `"`
0B06DB 22 
0B06DC 28    0528** JR      Z,CONS          	; Start of a string constant
0B06DD 7A 
0B06DE FE    0529** CP      TCMD_EV			; Is it out of range of the function table?
0B06DF C6 
0B06E0 D2    0530** JP      NC,SYNTAX       	; Error: "Syntax Error"
0B06E1 88 
0B06E2 0F 
0B06E3 0B 
0B06E4 FE    0531** CP      FUNTOK			; If it is in range, then
0B06E5 8D 
0B06E6 D2    0532** JP      NC,DISPAT       	; It's a function
0B06E7 74 
0B06E8 0D 
0B06E9 0B 
0B06EA FD    0533** DEC     IY
0B06EB 2B 
0B06EC FE    0534** CP      ':'
0B06ED 3A 
0B06EE 30    0535** JR      NC,ITEM2		; VARIABLE?
0B06EF 0C 
0B06F0 FE    0536** CP      '0'
0B06F1 30 
0B06F2 D2    0537** JP      NC,CON			; NUMERIC CONSTANT
0B06F3 7F 
0B06F4 07 
0B06F5 0B 
0B06F6 FE    0538** CP      '.'
0B06F7 2E 
0B06F8 CA    0539** JP      Z,CON			; NUMERIC CONSTANT
0B06F9 7F 
0B06FA 07 
0B06FB 0B 
0B06FC CD    0540** ITEM2:			CALL    GETVAR			; VARIABLE
0B06FD 2B 
0B06FE 3D 
0B06FF 0B 
0B0700 20    0541** JR      NZ,NOSUCH
0B0701 37 
0B0702 B7    0542** OR      A
0B0703 FA    0543** JP      M,LOADS			; STRING VARIABLE
0B0704 91 
0B0705 07 
0B0706 0B 
0B0707 B7    0544** LOADN:			OR      A
0B0708 28    0545** JR      Z,LOAD1			; BYTE VARIABLE
0B0709 20 
0B070A 0E    0546** LD      C,0
0B070B 00 
0B070C CB    0547** BIT     0,A
0B070D 47 
0B070E 28    0548** JR      Z,LOAD4			; INTEGER VARIABLE
0B070F 03 
0B0710 DD    0549** LOAD5:			LD      C,(IX+4)
0B0711 4E 
0B0712 04 
0B0713 D9    0550** LOAD4:			EXX
0B0714 21    0551** LD	HL, 0			; TODO: Optimise
0B0715 00 
0B0716 00 
0B0717 00 
0B0718 DD    0552** LD      L,(IX+0)
0B0719 6E 
0B071A 00 
0B071B DD    0553** LD      H,(IX+1)
0B071C 66 
0B071D 01 
0B071E D9    0554** EXX
0B071F 21    0555** LD	HL, 0			; TODO: Optimise
0B0720 00 
0B0721 00 
0B0722 00 
0B0723 DD    0556** LD      L,(IX+2)
0B0724 6E 
0B0725 02 
0B0726 DD    0557** LD      H,(IX+3)
0B0727 66 
0B0728 03 
0B0729 C9    0558** RET
             0559** ;
0B072A 21    0560** LOAD1:			LD      HL,0
0B072B 00 
0B072C 00 
0B072D 00 
0B072E D9    0561** EXX
0B072F 21    0562** LD      HL,0			; TODO: Optimise
0B0730 00 
0B0731 00 
0B0732 00 
0B0733 DD    0563** LD      L,(IX+0)
0B0734 6E 
0B0735 00 
0B0736 D9    0564** EXX
0B0737 4C    0565** LD      C,H
0B0738 C9    0566** RET
             0567** ;
0B0739 DA    0568** NOSUCH:			JP      C,SYNTAX
0B073A 88 
0B073B 0F 
0B073C 0B 
0B073D 3A    0569** LD      A,(LISTON)
0B073E 40 
0B073F 50 
0B0740 0B 
0B0741 CB    0570** BIT     5,A
0B0742 6F 
0B0743 3E    0571** LD      A,26
0B0744 1A 
0B0745 20    0572** JR      NZ,ERROR0_EV		; Throw "No such variable"
0B0746 26 
0B0747 FD    0573** NOS1:			INC     IY
0B0748 23 
0B0749 CD    0574** CALL    RANGE
0B074A 60 
0B074B 3F 
0B074C 0B 
0B074D 30    0575** JR      NC,NOS1
0B074E F8 
0B074F DD    0576** LD      IX,PC
0B0750 21 
0B0751 40 
0B0752 4F 
0B0752 0B   
0B0754 AF    0577** XOR     A
0B0755 4F    0578** LD      C,A
0B0756 18    0579** JR      LOAD4
0B0757 BB 
             0580** ;
             0581** ;CONS - Get string constant from ASCII string.
             0582** ;   Inputs: ASCII string at (IY)
             0583** ;  Outputs: Result in string accumulator.
             0584** ;           D = MS byte of ACCS, E = string length
             0585** ;           A7 = 1 (string marker)
             0586** ;           IY updated
             0587** ;
0B0758 11    0588** CONS:			LD      DE,ACCS			; DE: Pointer to the string accumulator
0B0759 00 
0B075A 4D 
0B075B 0B 
0B075C FD    0589** CONS3:			LD      A,(IY)			; Fetch the first character and
0B075D 7E 
0B075E 00 
0B075F FD    0590** INC     IY			; Increment the pointer
0B0760 23 
0B0761 FE    0591** CP      '"'			; Check for start quote
0B0762 22 
0B0763 28    0592** JR      Z,CONS2			; Yes, so jump to the bit that parses the string
0B0764 0C 
             0593** ;
0B0765 12    0594** CONS1:			LD      (DE),A			; Store the character in the string accumulator
0B0766 1C    0595** INC     E			; Increment the string accumulator pointer
0B0767 FE    0596** CP      CR			; Is it CR
0B0768 0D 
0B0769 20    0597** JR      NZ,CONS3		; No, so keep looping
0B076A F1 
             0598** ;
0B076B 3E    0599** LD      A,9
0B076C 09 
0B076D C3    0600** ERROR0_EV:			JP      ERROR_           	; Throw error "Missing '"'
0B076E 51 
0B076F 3A 
0B0770 0B 
             0601** ;
0B0771 FD    0602** CONS2:			LD      A,(IY)			; Fetch the next character
0B0772 7E 
0B0773 00 
0B0774 FE    0603** CP      '"'			; Check for end quote?
0B0775 22 
0B0776 FD    0604** INC     IY			; Increment the pointer
0B0777 23 
0B0778 28    0605** JR      Z,CONS1			; It is the end of string marker so jump to the end routine
0B0779 EB 
0B077A FD    0606** DEC     IY			;
0B077B 2B 
0B077C 3E    0607** LD      A,80H           	; String marker
0B077D 80 
0B077E C9    0608** RET
             0609** ;
             0610** ;CON - Get unsigned numeric constant from ASCII string.
             0611** ;   Inputs: ASCII string at (IY).
             0612** ;  Outputs: Variable-type result in HLH'L'C
             0613** ;           IY updated (points to delimiter)
             0614** ;           A7 = 0 (numeric marker)
             0615** ;
0B077F FD    0616** CON:			PUSH    IY
0B0780 E5 
0B0781 DD    0617** POP     IX
0B0782 E1 
0B0783 3E    0618** LD      A,36
0B0784 24 
0B0785 CD    0619** CALL    FPP
0B0786 5B 
0B0787 23 
0B0788 0B 
0B0789 38    0620** JR      C,ERROR0_EV
0B078A E2 
0B078B DD    0621** PUSH    IX
0B078C E5 
0B078D FD    0622** POP     IY
0B078E E1 
0B078F AF    0623** XOR     A
0B0790 C9    0624** RET
             0625** ;
0B0791 11    0626** LOADS:			LD      DE,ACCS			; Where to store the string
0B0792 00 
0B0793 4D 
0B0794 0B 
0B0795 1F    0627** RRA
0B0796 30    0628** JR      NC,LOADS2       	; Skip if it is a fixed string
0B0797 1A 
             0629** ;
0B0798 D9    0630** EXX				; This block was a call to LOAD4
0B0799 DD    0631** LD      L,(IX+0)		; The length of the string currently stored in the allocated space
0B079A 6E 
0B079B 00 
0B079C DD    0632** LD      H,(IX+1)		; The maximum original string length
0B079D 66 
0B079E 01 
0B079F D9    0633** EXX
0B07A0 DD    0634** LD	HL,(IX+2)		; Address of the string (24-bit)
0B07A1 27 
0B07A2 02 
             0635** ;
0B07A3 D9    0636** EXX
0B07A4 7D    0637** LD      A,L
0B07A5 D9    0638** EXX
0B07A6 B7    0639** OR      A
0B07A7 01    0640** LD	BC,0			; BC: Number of bytes to copy
0B07A8 00 
0B07A9 00 
0B07AA 00 
0B07AB 4F    0641** LD      C,A
0B07AC 3E    0642** LD      A,80H           	; String marker
0B07AD 80 
0B07AE C8    0643** RET     Z
0B07AF ED    0644** LDIR
0B07B0 B0 
0B07B1 C9    0645** RET
0B07B2 7E    0646** LOADS2:			LD      A,(HL)
0B07B3 12    0647** LD      (DE),A
0B07B4 23    0648** INC     HL
0B07B5 FE    0649** CP      CR
0B07B6 0D 
0B07B7 3E    0650** LD      A,80H           	; String marker
0B07B8 80 
0B07B9 C8    0651** RET     Z
0B07BA 1C    0652** INC     E
0B07BB 20    0653** JR      NZ,LOADS2
0B07BC F5 
0B07BD C9    0654** RET                     	; Return null string
             0655** ;
             0656** ;VARIABLE-TYPE FUNCTIONS:
             0657** ;
             0658** ;Result returned in HLH'L'C (floating point)
             0659** ;Result returned in HLH'L' (C=0) (integer)
             0660** ;Result returned in string accumulator & DE (string)
             0661** ;All registers destroyed.
             0662** ;IY (text pointer) updated.
             0663** ;Bit 7 of A indicates type: 0 = numeric, 1 = string.
             0664** ;
             0665** ;POS - horizontal cursor position.
             0666** ;VPOS - vertical cursor position.
             0667** ;EOF - return status of file.
             0668** ;BGET - read byte from file.
             0669** ;INKEY - as GET but wait only n centiseconds.
             0670** ;GET - wait for keypress and return ASCII value.
             0671** ;GET(n) - input from Z80 port n.
             0672** ;ASC - ASCII value of string.
             0673** ;LEN - length of string.
             0674** ;LOMEM - location of dynamic variables.
             0675** ;HIMEM - top of available RAM.
             0676** ;PAGE - start of current text page.
             0677** ;TOP - address of first free byte after program.
             0678** ;ERL - line number where last error occurred.
             0679** ;ERR - number of last error.
             0680** ;COUNT - number of printing characters since CR.
             0681** ;Results are integer numeric.
             0682** ;
0B07BE CD    0683** POS:			CALL    GETCSR			; Return the horizontal cursor position
0B07BF BD 
0B07C0 41 
0B07C1 0B 
0B07C2 EB    0684** EX      DE,HL			;  L: The X cursor position
0B07C3 C3    0685** JP      COUNT1			; Return an 8-bit value
0B07C4 72 
0B07C5 08 
0B07C6 0B 
             0686** ;
0B07C7 CD    0687** VPOS:			CALL    GETCSR			; Return the vertical cursor position
0B07C8 BD 
0B07C9 41 
0B07CA 0B 
0B07CB C3    0688** JP      COUNT1			; Return an 8-bit value
0B07CC 72 
0B07CD 08 
0B07CE 0B 
             0689** ;
0B07CF CD    0690** EOF:			CALL    CHANEL			; Check for EOF
0B07D0 77 
0B07D1 1B 
0B07D2 0B 
0B07D3 CD    0691** CALL    OSSTAT
0B07D4 35 
0B07D5 46 
0B07D6 0B 
0B07D7 CA    0692** JP      Z,TRUE			; Yes, so return true
0B07D8 F6 
0B07D9 08 
0B07DA 0B 
0B07DB C3    0693** JP      ZERO			; Otherwise return false (zero)
0B07DC 84 
0B07DD 0C 
0B07DE 0B 
             0694** ;
0B07DF CD    0695** BGET:			CALL    CHANEL          	; Channel number
0B07E0 77 
0B07E1 1B 
0B07E2 0B 
0B07E3 CD    0696** CALL    OSBGET
0B07E4 24 
0B07E5 46 
0B07E6 0B 
0B07E7 6F    0697** LD      L,A
0B07E8 C3    0698** JP      COUNT0			; Return an 8-bit value
0B07E9 70 
0B07EA 08 
0B07EB 0B 
             0699** ;
0B07EC CD    0700** INKEY:			CALL    ITEMI			; Get the argument
0B07ED 16 
0B07EE 06 
0B07EF 0B 
0B07F0 CB    0701** BIT	7, H			; Check the sign
0B07F1 7C 
0B07F2 D9    0702** EXX				; HL: The argument
0B07F3 C2    0703** JP	NZ, INKEYM		; It's negative, so do INKEY(-n)
0B07F4 DC 
0B07F5 0A 
0B07F6 0B 
0B07F7 CD    0704** CALL	INKEY0 			; Do INKEY(n)
0B07F8 CE 
0B07F9 0A 
0B07FA 0B 
0B07FB 18    0705** JR      ASC0			; Return a numeric value
0B07FC 1D 
             0706** ;
0B07FD CD    0707** GET:			CALL    NXT			; Skip whitespace
0B07FE 61 
0B07FF 0D 
0B0800 0B 
0B0801 FE    0708** CP      '('			; Is it GET(
0B0802 28 
0B0803 20    0709** JR      NZ,GET0			; No, so get a keyboard character
0B0804 0B 
0B0805 CD    0710** CALL    ITEMI           	; Yes, so fetch the port address
0B0806 16 
0B0807 06 
0B0808 0B 
0B0809 D9    0711** EXX
0B080A 44    0712** LD      B,H			; BC: The port address
0B080B 4D    0713** LD      C,L
0B080C ED    0714** IN      L,(C)           	;  L: Input from port BC
0B080D 68 
0B080E 18    0715** JR      COUNT0			; Return an 8-bit value
0B080F 60 
             0716** ;
0B0810 CD    0717** GET0:			CALL    GETS			; Read the keyboard character
0B0811 B8 
0B0812 0A 
0B0813 0B 
0B0814 18    0718** JR      ASC1			; And return the value
0B0815 0A 
             0719** ;
0B0816 CD    0720** ASC:			CALL    ITEMS			; Get the string argument argument
0B0817 21 
0B0818 06 
0B0819 0B 
0B081A AF    0721** ASC0:			XOR     A			; Quickly check the length of the string in ACCS
0B081B BB    0722** CP      E			; Is the pointer 0
0B081C CA    0723** JP      Z,TRUE          	; Yes, so return -1 as it is a null string
0B081D F6 
0B081E 08 
0B081F 0B 
0B0820 2A    0724** ASC1:			LD      HL,(ACCS)		;  L: The first character (H will be discarded in COUNT0
0B0821 00 
0B0822 4D 
0B0823 0B 
0B0824 18    0725** JR      COUNT0			; An 8-bit value
0B0825 4A 
             0726** ;
0B0826 CD    0727** LEN:			CALL    ITEMS			; Get the string argument
0B0827 21 
0B0828 06 
0B0829 0B 
0B082A EB    0728** EX      DE,HL			; HL: Pointer into ACCS
0B082B 18    0729** JR      COUNT0			; Return L
0B082C 43 
             0730** ;
0B082D 2A    0731** LOMEMV:			LD      HL,(LOMEM)		; Return the LOMEM system variable
0B082E 1A 
0B082F 50 
0B0830 0B 
0B0831 3A    0732** LD	A, (LOMEM+2)
0B0832 1C 
0B0833 50 
0B0834 0B 
0B0835 18    0733** JR      COUNT2			; A 24-bit value
0B0836 41 
             0734** ;
0B0837 2A    0735** HIMEMV:			LD      HL,(HIMEM)		; Return the HIMEM system variable
0B0838 20 
0B0839 50 
0B083A 0B 
0B083B 3A    0736** LD	A, (HIMEM+2)
0B083C 22 
0B083D 50 
0B083E 0B 
0B083F 18    0737** JR      COUNT2			; A 24-bit value
0B0840 37 
             0738** ;
0B0841 2A    0739** PAGEV:			LD    	HL,(PAGE_)		; Return the PAGE system variable
0B0842 14 
0B0843 50 
0B0844 0B 
0B0845 3A    0740** LD	A, (PAGE_+2)		; A 24-bit value
0B0846 16 
0B0847 50 
0B0848 0B 
0B0849 18    0741** JR      COUNT2
0B084A 2D 
             0742** ;
0B084B FD    0743** TOPV:			LD      A,(IY)			; Return the TOP system variable
0B084C 7E 
0B084D 00 
0B084E FD    0744** INC     IY              	; Skip "P"
0B084F 23 
0B0850 FE    0745** CP      'P'
0B0851 50 
0B0852 C2    0746** JP      NZ,SYNTAX       	; Throw "Syntax Error"
0B0853 88 
0B0854 0F 
0B0855 0B 
0B0856 2A    0747** LD      HL,(TOP)
0B0857 17 
0B0858 50 
0B0859 0B 
0B085A 3A    0748** LD	A, (TOP+2)
0B085B 19 
0B085C 50 
0B085D 0B 
0B085E 18    0749** JR      COUNT2
0B085F 18 
             0750** ;
0B0860 2A    0751** ERLV:			LD      HL,(ERL)		; Return the error line
0B0861 33 
0B0862 50 
0B0863 0B 
0B0864 18    0752** JR      COUNT1			; A 16-bit value
0B0865 0C 
             0753** ;
0B0866 2A    0754** ERRV:			LD      HL,(ERR)		; Return the error value
0B0867 3F 
0B0868 50 
0B0869 0B 
0B086A 18    0755** JR      COUNT0			; An 8-bit value
0B086B 04 
             0756** ;
0B086C 2A    0757** COUNTV:			LD      HL,(COUNT)		; Return the print position sysvar
0B086D 3D 
0B086E 50 
0B086F 0B 
             0758** 
0B0870 26    0759** COUNT0:			LD      H,0			; Return L
0B0871 00 
0B0872 D9    0760** COUNT1:			EXX				; Return HL
0B0873 AF    0761** XOR     A
0B0874 4F    0762** LD      C,A             	; Integer marker
0B0875 67    0763** LD      H,A
0B0876 6F    0764** LD      L,A
0B0877 C9    0765** RET
0B0878 D9    0766** COUNT2:			EXX
0B0879 6F    0767** LD	L,A
0B087A AF    0768** XOR	A
0B087B 4F    0769** LD	C,A			; Integer marker
0B087C 67    0770** LD	H,A
0B087D C9    0771** RET
             0772** ;
             0773** ;OPENIN - Open a file for reading.
             0774** ;OPENOT - Open a file for writing.
             0775** ;OPENUP - Open a file for reading or writing.
             0776** ;Result is integer channel number (0 if error)
             0777** ;
0B087E AF    0778** OPENOT:			XOR     A			; Open for writing
0B087F 18    0779** JR	OPENIN_1
0B0880 06 
             0780** ;
0B0881 3E    0781** OPENUP:			LD      A,2			; Open for reading / writing
0B0882 02 
0B0883 18    0782** JR	OPENIN_1
0B0884 02 
             0783** ;
0B0885 3E    0784** OPENIN:			LD      A,1			; Open for reading
0B0886 01 
             0785** ;
0B0887 F5    0786** OPENIN_1:		PUSH    AF              	; Save OPEN type
0B0888 CD    0787** CALL    ITEMS           	; Fetch the filename
0B0889 21 
0B088A 06 
0B088B 0B 
0B088C 3E    0788** LD      A,CR
0B088D 0D 
0B088E 12    0789** LD      (DE),A
0B088F F1    0790** POP     AF              	; Restore the OPEN type
0B0890 C6    0791** ADD     A,-1            	; Affect the flags
0B0891 FF 
0B0892 21    0792** LD      HL,ACCS
0B0893 00 
0B0894 4D 
0B0895 0B 
0B0896 CD    0793** CALL    OSOPEN			; Call the OS specific OPEN routine in patch.asm
0B0897 0D 
0B0898 46 
0B0899 0B 
0B089A 6F    0794** LD      L,A			; L: Channel number
0B089B 18    0795** JR      COUNT0			; Return channel number to BASIC
0B089C D3 
             0796** ;
             0797** ;EXT - Return length of file.
             0798** ;PTR_EV - Return current file pointer.
             0799** ;Results are integer numeric.
             0800** ;
0B089D CD    0801** EXT:			CALL    CHANEL
0B089E 77 
0B089F 1B 
0B08A0 0B 
0B08A1 CD    0802** CALL    GETEXT
0B08A2 6B 
0B08A3 46 
0B08A4 0B 
0B08A5 18    0803** JR      TIME0
0B08A6 15 
             0804** ;
0B08A7 CD    0805** PTR_EV:			CALL    CHANEL
0B08A8 77 
0B08A9 1B 
0B08AA 0B 
0B08AB CD    0806** CALL    GETPTR
0B08AC 3F 
0B08AD 46 
0B08AE 0B 
0B08AF 18    0807** JR      TIME0
0B08B0 0B 
             0808** ;
             0809** ;TIME - Return current value of elapsed time.
             0810** ;Result is integer numeric.
             0811** ;
0B08B1 FD    0812** TIMEV:			LD      A,(IY)
0B08B2 7E 
0B08B3 00 
0B08B4 FE    0813** CP      '$'
0B08B5 24 
0B08B6 28    0814** JR      Z,TIMEVS
0B08B7 0A 
0B08B8 CD    0815** CALL    GETIME
0B08B9 9D 
0B08BA 41 
0B08BB 0B 
0B08BC D5    0816** TIME0:			PUSH    DE
0B08BD D9    0817** EXX
0B08BE E1    0818** POP     HL
0B08BF AF    0819** XOR     A
0B08C0 4F    0820** LD      C,A
0B08C1 C9    0821** RET
             0822** ;
             0823** ;TIME$ - Return date/time string.
             0824** ;Result is string
             0825** ;
0B08C2 FD    0826** TIMEVS:			INC     IY              ;SKIP $
0B08C3 23 
0B08C4 CD    0827** CALL    GETIMS
0B08C5 84 
0B08C6 46 
0B08C7 0B 
0B08C8 3E    0828** LD      A,80H           ;MARK STRING
0B08C9 80 
0B08CA C9    0829** RET
             0830** ;
             0831** ;String comparison:
             0832** ;
0B08CB CD    0833** SLT:			CALL    SCP
0B08CC 80 
0B08CD 0C 
0B08CE 0B 
0B08CF D0    0834** RET     NC
0B08D0 18    0835** JR      TRUE
0B08D1 24 
             0836** ;
0B08D2 CD    0837** SGT:			CALL    SCP
0B08D3 80 
0B08D4 0C 
0B08D5 0B 
0B08D6 C8    0838** RET     Z
0B08D7 D8    0839** RET     C
0B08D8 18    0840** JR      TRUE
0B08D9 1C 
             0841** ;
0B08DA CD    0842** SGE:			CALL    SCP
0B08DB 80 
0B08DC 0C 
0B08DD 0B 
0B08DE D8    0843** RET     C
0B08DF 18    0844** JR      TRUE
0B08E0 15 
             0845** ;
0B08E1 CD    0846** SLE:			CALL    SCP
0B08E2 80 
0B08E3 0C 
0B08E4 0B 
0B08E5 28    0847** JR      Z,TRUE
0B08E6 0F 
0B08E7 D0    0848** RET     NC
0B08E8 18    0849** JR      TRUE
0B08E9 0C 
             0850** ;
0B08EA CD    0851** SNE:			CALL    SCP
0B08EB 80 
0B08EC 0C 
0B08ED 0B 
0B08EE C8    0852** RET     Z
0B08EF 18    0853** JR      TRUE
0B08F0 05 
             0854** ;
0B08F1 CD    0855** SEQ:			CALL    SCP
0B08F2 80 
0B08F3 0C 
0B08F4 0B 
0B08F5 C0    0856** RET     NZ
0B08F6 3E    0857** TRUE:			LD      A,-1
0B08F7 FF 
0B08F8 D9    0858** EXX
0B08F9 67    0859** LD      H,A
0B08FA 6F    0860** LD      L,A
0B08FB D9    0861** EXX
0B08FC 67    0862** LD      H,A
0B08FD 6F    0863** LD      L,A
0B08FE 3C    0864** INC     A
0B08FF 4F    0865** LD      C,A
0B0900 C9    0866** RET
             0867** ;
             0868** ;PI - Return PI (3.141592654)
             0869** ;Result is floating-point numeric.
             0870** ;
0B0901 3E    0871** PI:			LD      A,35
0B0902 23 
0B0903 18    0872** JR      FPP1
0B0904 44 
             0873** ;
             0874** ;ABS - Absolute value
             0875** ;Result is numeric, variable type.
             0876** ;
0B0905 3E    0877** ABSV:			LD      A,16
0B0906 10 
0B0907 18    0878** JR      FPPN
0B0908 3A 
             0879** ;
             0880** ;NOT - Complement integer.
             0881** ;Result is integer numeric.
             0882** ;
0B0909 3E    0883** NOTK:			LD      A,26
0B090A 1A 
0B090B 18    0884** JR      FPPN
0B090C 36 
             0885** ;
             0886** ;DEG - Convert radians to degrees
             0887** ;Result is floating-point numeric.
             0888** ;
0B090D 3E    0889** DEG:			LD      A,21
0B090E 15 
0B090F 18    0890** JR      FPPN
0B0910 32 
             0891** ;
             0892** ;RAD - Convert degrees to radians
             0893** ;Result is floating-point numeric.
             0894** ;
0B0911 3E    0895** RAD:			LD      A,27
0B0912 1B 
0B0913 18    0896** JR      FPPN
0B0914 2E 
             0897** ;
             0898** ;SGN - Return -1, 0 or +1
             0899** ;Result is integer numeric.
             0900** ;
0B0915 3E    0901** SGN:			LD      A,28
0B0916 1C 
0B0917 18    0902** JR      FPPN
0B0918 2A 
             0903** ;
             0904** ;INT - Floor function
             0905** ;Result is integer numeric.
             0906** ;
0B0919 3E    0907** INT_:			LD      A,23
0B091A 17 
0B091B 18    0908** JR      FPPN
0B091C 26 
             0909** ;
             0910** ;SQR - square root
             0911** ;Result is floating-point numeric.
             0912** ;
0B091D 3E    0913** SQR:			LD      A,30
0B091E 1E 
0B091F 18    0914** JR      FPPN
0B0920 22 
             0915** ;
             0916** ;TAN - Tangent function
             0917** ;Result is floating-point numeric.
             0918** ;
0B0921 3E    0919** TAN:			LD      A,31
0B0922 1F 
0B0923 18    0920** JR      FPPN
0B0924 1E 
             0921** ;
             0922** ;COS - Cosine function
             0923** ;Result is floating-point numeric.
             0924** ;
0B0925 3E    0925** COS:			LD      A,20
0B0926 14 
0B0927 18    0926** JR      FPPN
0B0928 1A 
             0927** ;
             0928** ;SIN - Sine function
             0929** ;Result is floating-point numeric.
             0930** ;
0B0929 3E    0931** SIN:			LD      A,29
0B092A 1D 
0B092B 18    0932** JR      FPPN
0B092C 16 
             0933** ;
             0934** ;EXP - Exponential function
             0935** ;Result is floating-point numeric.
             0936** ;
0B092D 3E    0937** EXP:			LD      A,22
0B092E 16 
0B092F 18    0938** JR      FPPN
0B0930 12 
             0939** ;
             0940** ;LN - Natural log.
             0941** ;Result is floating-point numeric.
             0942** ;
0B0931 3E    0943** LN:			LD      A,24
0B0932 18 
0B0933 18    0944** JR      FPPN
0B0934 0E 
             0945** ;
             0946** ;LOG - base-10 logarithm.
             0947** ;Result is floating-point numeric.
             0948** ;
0B0935 3E    0949** LOG:			LD      A,25
0B0936 19 
0B0937 18    0950** JR      FPPN
0B0938 0A 
             0951** ;
             0952** ;ASN - Arc-sine
             0953** ;Result is floating-point numeric.
             0954** ;
0B0939 3E    0955** ASN:			LD      A,18
0B093A 12 
0B093B 18    0956** JR      FPPN
0B093C 06 
             0957** ;
             0958** ;ATN - arc-tangent
             0959** ;Result is floating-point numeric.
             0960** ;
0B093D 3E    0961** ATN:			LD      A,19
0B093E 13 
0B093F 18    0962** JR      FPPN
0B0940 02 
             0963** ;
             0964** ;ACS - arc-cosine
             0965** ;Result is floating point numeric.
             0966** ;
0B0941 3E    0967** ACS:			LD      A,17
0B0942 11 
0B0943 F5    0968** FPPN:			PUSH    AF
0B0944 CD    0969** CALL    ITEMN
0B0945 0E 
0B0946 06 
0B0947 0B 
0B0948 F1    0970** POP     AF
0B0949 CD    0971** FPP1:			CALL    FPP
0B094A 5B 
0B094B 23 
0B094C 0B 
0B094D DA    0972** JP      C,ERROR_
0B094E 51 
0B094F 3A 
0B0950 0B 
0B0951 AF    0973** XOR     A
0B0952 C9    0974** RET
             0975** ;
             0976** ;SFIX - Convert to fixed-point notation
             0977** ;
0B0953 3E    0978** SFIX:			LD      A,38
0B0954 26 
0B0955 18    0979** JR      FPP1
0B0956 F2 
             0980** ;
             0981** ;SFLOAT - Convert to floating-point notation
             0982** ;
0B0957 3E    0983** SFLOAT:			LD      A,39
0B0958 27 
0B0959 18    0984** JR      FPP1
0B095A EE 
             0985** ;
             0986** ;VAL - Return numeric value of string.
             0987** ;Result is variable type numeric.
             0988** ;
0B095B CD    0989** VAL:			CALL    ITEMS
0B095C 21 
0B095D 06 
0B095E 0B 
0B095F AF    0990** VAL0:			XOR     A
0B0960 12    0991** LD      (DE),A
0B0961 DD    0992** LD      IX,ACCS
0B0962 21 
0B0963 00 
0B0964 4D 
0B0964 0B   
0B0966 3E    0993** LD      A,36
0B0967 24 
0B0968 18    0994** JR      FPP1
0B0969 DF 
             0995** ;
             0996** ;EVAL - Pass string to expression evaluator.
             0997** ;Result is variable type (numeric or string).
             0998** ;
0B096A CD    0999** EVAL_:			CALL    ITEMS
0B096B 21 
0B096C 06 
0B096D 0B 
0B096E 3E    1000** LD      A,CR
0B096F 0D 
0B0970 12    1001** LD      (DE),A
0B0971 FD    1002** PUSH    IY
0B0972 E5 
0B0973 11    1003** LD      DE,ACCS
0B0974 00 
0B0975 4D 
0B0976 0B 
0B0977 FD    1004** LD      IY,ACCS
0B0978 21 
0B0979 00 
0B097A 4D 
0B097A 0B   
0B097C 0E    1005** LD      C,0
0B097D 00 
0B097E CD    1006** CALL    LEXAN2          ;TOKENISE
0B097F 90 
0B0980 3F 
0B0981 0B 
0B0982 12    1007** LD      (DE),A
0B0983 13    1008** INC     DE
0B0984 AF    1009** XOR     A
0B0985 CD    1010** CALL    PUSHS           ;PUT ON STACK
0B0986 A5 
0B0987 0C 
0B0988 0B 
0B0989 FD    1011** LD      IY,SIZEW	;WAS 2
0B098A 21 
0B098B 03 
0B098C 00 
0B098C 00   
0B098E FD    1012** ADD     IY,SP
0B098F 39 
0B0990 CD    1013** CALL    EXPR
0B0991 B8 
0B0992 04 
0B0993 0B 
0B0994 FD    1014** POP     IY
0B0995 E1 
0B0996 FD    1015** ADD     IY,SP
0B0997 39 
0B0998 FD    1016** LD      SP,IY           ;ADJUST STACK POINTER
0B0999 F9 
0B099A FD    1017** POP     IY
0B099B E1 
0B099C 08    1018** EX      AF,AF'
0B099D C9    1019** RET
             1020** ;
             1021** ;RND - Random number function.
             1022** ; RND gives random integer 0-&FFFFFFFF
             1023** ; RND(-n) seeds random number & returns -n.
             1024** ; RND(0) returns last value in RND(1) form.
             1025** ; RND(1) returns floating-point 0-0.99999999.
             1026** ; RND(n) returns random integer 1-n.
             1027** ;
0B099E DD    1028** RND:			LD      IX,RANDOM
0B099F 21 
0B09A0 38 
0B09A1 50 
0B09A1 0B   
0B09A3 CD    1029** CALL    NXT
0B09A4 61 
0B09A5 0D 
0B09A6 0B 
0B09A7 FE    1030** CP      '('
0B09A8 28 
0B09A9 28    1031** JR      Z,RND5          ;ARGUMENT FOLLOWS
0B09AA 20 
0B09AB CD    1032** CALL    LOAD5
0B09AC 10 
0B09AD 07 
0B09AE 0B 
0B09AF CB    1033** RND1:			RR      C
0B09B0 19 
0B09B1 06    1034** LD      B,32
0B09B2 20 
0B09B3 D9    1035** RND2:			EXX                     ;CALCULATE NEXT
0B09B4 52    1036** ADC.S   HL,HL
0B09B5 ED 
0B09B6 6A 
0B09B7 D9    1037** EXX
0B09B8 52    1038** ADC.S   HL,HL
0B09B9 ED 
0B09BA 6A 
0B09BB CB    1039** BIT     3,L
0B09BC 5D 
0B09BD 28    1040** JR      Z,RND3
0B09BE 01 
0B09BF 3F    1041** CCF
0B09C0 10    1042** RND3:			DJNZ    RND2
0B09C1 F1 
0B09C2 CB    1043** RND4:			RL      C               ;SAVE CARRY
0B09C3 11 
0B09C4 CD    1044** CALL    STORE5          ;STORE NEW NUMBER
0B09C5 CC 
0B09C6 18 
0B09C7 0B 
0B09C8 AF    1045** XOR     A
0B09C9 4F    1046** LD      C,A
0B09CA C9    1047** RET
0B09CB CD    1048** RND5:			CALL    ITEMI
0B09CC 16 
0B09CD 06 
0B09CE 0B 
0B09CF DD    1049** LD      IX,RANDOM
0B09D0 21 
0B09D1 38 
0B09D2 50 
0B09D2 0B   
0B09D4 CB    1050** BIT     7,H             ;NEGATIVE?
0B09D5 7C 
0B09D6 37    1051** SCF
0B09D7 20    1052** JR      NZ,RND4         ;SEED
0B09D8 E9 
0B09D9 CD    1053** CALL    TEST
0B09DA D0 
0B09DB 0B 
0B09DC 0B 
0B09DD F5    1054** PUSH    AF
0B09DE CD    1055** CALL    SWAP
0B09DF C8 
0B09E0 0B 
0B09E1 0B 
0B09E2 D9    1056** EXX
0B09E3 CD    1057** CALL    LOAD5
0B09E4 10 
0B09E5 07 
0B09E6 0B 
0B09E7 C4    1058** CALL    NZ,RND1         ;NEXT IF NON-ZERO
0B09E8 AF 
0B09E9 09 
0B09EA 0B 
0B09EB D9    1059** EXX                     ;SCRAMBLE (CARE!)
0B09EC 0E    1060** LD      C,7FH
0B09ED 7F 
0B09EE CB    1061** RND6:			BIT     7,H             ;FLOAT
0B09EF 7C 
0B09F0 20    1062** JR      NZ,RND7
0B09F1 0A 
0B09F2 D9    1063** EXX
0B09F3 52    1064** ADD.S   HL,HL
0B09F4 29 
0B09F5 D9    1065** EXX
0B09F6 52    1066** ADC.S   HL,HL
0B09F7 ED 
0B09F8 6A 
0B09F9 0D    1067** DEC     C
0B09FA 20    1068** JR      NZ,RND6
0B09FB F2 
0B09FC CB    1069** RND7:			RES     7,H             ;POSITIVE 0-0.999999
0B09FD BC 
0B09FE F1    1070** POP     AF
0B09FF C8    1071** RET     Z               ;ZERO ARGUMENT
0B0A00 D9    1072** EXX
0B0A01 7B    1073** LD      A,E
0B0A02 3D    1074** DEC     A
0B0A03 B2    1075** OR      D
0B0A04 D9    1076** EXX
0B0A05 B3    1077** OR      E
0B0A06 B2    1078** OR      D
0B0A07 C8    1079** RET     Z               ;ARGUMENT=1
0B0A08 06    1080** LD      B,0             ;INTEGER MARKER
0B0A09 00 
0B0A0A 3E    1081** LD      A,10
0B0A0B 0A 
0B0A0C CD    1082** CALL    FPP             ;MULTIPLY
0B0A0D 5B 
0B0A0E 23 
0B0A0F 0B 
0B0A10 DA    1083** JP      C,ERROR_
0B0A11 51 
0B0A12 3A 
0B0A13 0B 
0B0A14 CD    1084** CALL    SFIX
0B0A15 53 
0B0A16 09 
0B0A17 0B 
0B0A18 C3    1085** JP      ADD1
0B0A19 AC 
0B0A1A 06 
0B0A1B 0B 
             1086** ;
             1087** ; INSTR - String search.
             1088** ; Result is integer numeric.
             1089** ;
0B0A1C CD    1090** INSTR:			CALL    EXPRSC			; Get the first string expression
0B0A1D 0F 
0B0A1E 0D 
0B0A1F 0B 
0B0A20 CD    1091** CALL    PUSHS           	; Push the string onto the stack
0B0A21 A5 
0B0A22 0C 
0B0A23 0B 
0B0A24 CD    1092** CALL    EXPRS           	; Get the second string expression
0B0A25 06 
0B0A26 06 
0B0A27 0B 
0B0A28 C1    1093** POP     BC			;  C: String length, B: Value of A before PUSHS was called
0B0A29 21    1094** LD      HL,0
0B0A2A 00 
0B0A2B 00 
0B0A2C 00 
0B0A2D 39    1095** ADD     HL,SP           	; HL: Pointer to main string
0B0A2E C5    1096** PUSH    BC              	;  C: Main string length
0B0A2F 43    1097** LD      B,E             	;  B: Sub-string length
0B0A30 CD    1098** CALL    NXT			; Skip whitespace
0B0A31 61 
0B0A32 0D 
0B0A33 0B 
0B0A34 FE    1099** CP      ','			; Check if there is a comma for the third parameter
0B0A35 2C 
0B0A36 3E    1100** LD      A,0			;  A: Default start position in string
0B0A37 00 
0B0A38 20    1101** JR      NZ,INSTR1		; No, so skip the next bit
0B0A39 1A 
0B0A3A FD    1102** INC     IY              	; Skip the comma
0B0A3B 23 
0B0A3C C5    1103** PUSH    BC              	; Save the lengths
0B0A3D E5    1104** PUSH    HL              	; Save the pointer to the main string
0B0A3E CD    1105** CALL    PUSHS			; Push the string onto the stack
0B0A3F A5 
0B0A40 0C 
0B0A41 0B 
0B0A42 CD    1106** CALL    EXPRI			; Get the third (numeric) parameter - the starting position
0B0A43 FB 
0B0A44 05 
0B0A45 0B 
0B0A46 C1    1107** POP     BC			;  C: String length, B: Value of A before PUSHS was called (discarded)
0B0A47 CD    1108** CALL    POPS			; Pop the string off the stack
0B0A48 CF 
0B0A49 0C 
0B0A4A 0B 
0B0A4B E1    1109** POP     HL              	; Restore the pointer to the main string
0B0A4C C1    1110** POP     BC              	; Restore the lengths
0B0A4D D9    1111** EXX
0B0A4E 7D    1112** LD      A,L			; A: The start position in the  string
0B0A4F D9    1113** EXX
0B0A50 B7    1114** OR      A			; Set the flags
0B0A51 28    1115** JR      Z,INSTR1		; If it is zero, then skip
0B0A52 01 
0B0A53 3D    1116** DEC     A
0B0A54 11    1117** INSTR1:			LD      DE,ACCS         	; DE: Pointer to the sub string
0B0A55 00 
0B0A56 4D 
0B0A57 0B 
0B0A58 CD    1118** CALL    SEARCH			; Do the search
0B0A59 76 
0B0A5A 0A 
0B0A5B 0B 
0B0A5C D1    1119** POP     DE
0B0A5D 28    1120** JR      Z,INSTR2        	; NB: Carry cleared
0B0A5E 03 
0B0A5F ED    1121** SBC     HL,HL
0B0A60 62 
0B0A61 39    1122** ADD     HL,SP
0B0A62 ED    1123** INSTR2:			SBC     HL,SP
0B0A63 72 
0B0A64 EB    1124** EX      DE,HL
0B0A65 7D    1125** LD	A,L
0B0A66 21    1126** LD      HL,0
0B0A67 00 
0B0A68 00 
0B0A69 00 
0B0A6A 6F    1127** LD	L,A
0B0A6B 39    1128** ADD     HL,SP
0B0A6C F9    1129** LD      SP,HL
0B0A6D EB    1130** EX      DE,HL
0B0A6E CD    1131** CALL    BRAKET			; Check for closing bracket
0B0A6F 20 
0B0A70 0D 
0B0A71 0B 
0B0A72 C3    1132** JP      COUNT1			; Return a numeric integer
0B0A73 72 
0B0A74 08 
0B0A75 0B 
             1133** ;
             1134** ; SEARCH - Search string for sub-string
             1135** ;    Inputs: Main string at HL length C
             1136** ;            Sub-string  at DE length B
             1137** ;            Starting offset A
             1138** ;   Outputs: NZ - not found
             1139** ;            Z - found at location HL-1
             1140** ;            Carry always cleared
             1141** ;
0B0A76 C5    1142** SEARCH:			PUSH    BC			; Add the starting offset to HL
0B0A77 01    1143** LD      BC,0
0B0A78 00 
0B0A79 00 
0B0A7A 00 
0B0A7B 4F    1144** LD      C,A
0B0A7C 09    1145** ADD     HL,BC           	; New start address
0B0A7D C1    1146** POP     BC
0B0A7E 91    1147** SUB     C			; If the starting offset > main string length, then do nothing
0B0A7F 30    1148** JR      NC,SRCH4
0B0A80 2C 
0B0A81 ED    1149** NEG
0B0A82 44 
0B0A83 4F    1150** LD      C,A             	; Remaining length
             1151** ;
0B0A84 C5    1152** SRCH1:			PUSH    BC
0B0A85 79    1153** LD	A,C
0B0A86 01    1154** LD	BC,0
0B0A87 00 
0B0A88 00 
0B0A89 00 
0B0A8A 4F    1155** LD	C,A
0B0A8B 1A    1156** LD      A,(DE)
0B0A8C ED    1157** CPIR                    	; Find the first character
0B0A8D B1 
0B0A8E 79    1158** LD      A,C
0B0A8F C1    1159** POP     BC
0B0A90 20    1160** JR      NZ,SRCH4
0B0A91 1B 
0B0A92 4F    1161** LD      C,A
             1162** ;
             1163** ; This block of four instructions was commented as a bug fix by R.T.Russell
             1164** ;
0B0A93 05    1165** DEC     B			; Bug fix
0B0A94 B8    1166** CP      B			; Bug fix
0B0A95 04    1167** INC     B			; Bug fix
0B0A96 38    1168** JR      C,SRCH4			; Bug fix
0B0A97 15 
             1169** ;
0B0A98 C5    1170** PUSH    BC
0B0A99 D5    1171** PUSH    DE
0B0A9A E5    1172** PUSH    HL
0B0A9B 05    1173** DEC     B
0B0A9C 28    1174** JR      Z,SRCH3         	; Found!
0B0A9D 08 
0B0A9E 13    1175** SRCH2:			INC     DE
0B0A9F 1A    1176** LD      A,(DE)
0B0AA0 BE    1177** CP      (HL)
0B0AA1 20    1178** JR      NZ,SRCH3
0B0AA2 03 
0B0AA3 23    1179** INC     HL
0B0AA4 10    1180** DJNZ    SRCH2
0B0AA5 F8 
0B0AA6 E1    1181** SRCH3:			POP     HL
0B0AA7 D1    1182** POP     DE
0B0AA8 C1    1183** POP     BC
0B0AA9 20    1184** JR      NZ,SRCH1
0B0AAA D9 
0B0AAB AF    1185** XOR     A               	; Flags: Z, NC
0B0AAC C9    1186** RET                     	; Found
             1187** ;
0B0AAD F6    1188** SRCH4:			OR      0FFH            	; Flags: NZ, NC
0B0AAE FF 
0B0AAF C9    1189** RET                     	; Not found
             1190** ;
             1191** ;CHRS - Return character with given ASCII value.
             1192** ;Result is string.
             1193** ;
0B0AB0 CD    1194** CHRS:			CALL    ITEMI
0B0AB1 16 
0B0AB2 06 
0B0AB3 0B 
0B0AB4 D9    1195** EXX
0B0AB5 7D    1196** LD      A,L
0B0AB6 18    1197** JR      GET1
0B0AB7 0E 
             1198** ;
             1199** ;GETS - Return key pressed as stringor character at position (X,Y).
             1200** ;Result is string.
             1201** ;
0B0AB8 CD    1202** GETS:			CALL	NXT		;NEW CODE FOR GET$(X,Y)
0B0AB9 61 
0B0ABA 0D 
0B0ABB 0B 
0B0ABC FE    1203** CP	'('
0B0ABD 28 
0B0ABE CA    1204** JP	Z, GETSCHR	;CALL FUNCTION IN PATCH.Z80
0B0ABF ED 
0B0AC0 46 
0B0AC1 0B 
0B0AC2 CD    1205** CALL    OSRDCH
0B0AC3 1A 
0B0AC4 42 
0B0AC5 0B 
0B0AC6 37    1206** GET1:			SCF
0B0AC7 18    1207** JR      INKEY1
0B0AC8 09 
             1208** ;
             1209** ; INKEYS - Wait up to n centiseconds for keypress.
             1210** ;          Return key pressed as string or null
             1211** ;          string if time elapsed.
             1212** ; Result is string.
             1213** ;
0B0AC9 CD    1214** INKEYS:			CALL    ITEMI			; Fetch the argument
0B0ACA 16 
0B0ACB 06 
0B0ACC 0B 
0B0ACD D9    1215** EXX
0B0ACE CD    1216** INKEY0:			CALL    OSKEY			; This is the entry point for INKEY(n)
0B0ACF 23 
0B0AD0 42 
0B0AD1 0B 
0B0AD2 11    1217** INKEY1:			LD      DE,ACCS			; Store the result in the string accumulator
0B0AD3 00 
0B0AD4 4D 
0B0AD5 0B 
0B0AD6 12    1218** LD      (DE),A
0B0AD7 3E    1219** LD      A,80H
0B0AD8 80 
0B0AD9 D0    1220** RET     NC
0B0ADA 1C    1221** INC     E
0B0ADB C9    1222** RET
             1223** ;
             1224** ; INKEYM - Check immediately whether a given key is being pressed
             1225** ; Result is integer numeric
             1226** ;
             1227** INKEYM:			MOSCALL	mos_getkbmap		; Get the base address of the keyboard
0B0ADC 3E   0001**M LD	A, function
0B0ADD 1E 
0B0ADE 49   0002**M RST.LIS	08h
0B0ADF CF 
0B0AE0 23    1228** INC	HL			; Index from 0
0B0AE1 7D    1229** LD	A, L			; Negate the LSB of the answer
0B0AE2 ED    1230** NEG
0B0AE3 44 
0B0AE4 4F    1231** LD	C, A			;  E: The positive keycode value
0B0AE5 3E    1232** LD	A, 1			; Throw an "Out of range" error
0B0AE6 01 
0B0AE7 FA    1233** JP	M, ERROR_		; if the argument < - 128
0B0AE8 51 
0B0AE9 3A 
0B0AEA 0B 
             1234** ;
0B0AEB 21    1235** LD	HL, BITLOOKUP		; HL: The bit lookup table
0B0AEC 0E 
0B0AED 0B 
0B0AEE 0B 
0B0AEF 11    1236** LD	DE, 0
0B0AF0 00 
0B0AF1 00 
0B0AF2 00 
0B0AF3 79    1237** LD	A, C
0B0AF4 E6    1238** AND	00000111b		; Just need the first three bits
0B0AF5 07 
0B0AF6 5F    1239** LD	E, A			; DE: The bit number
0B0AF7 19    1240** ADD	HL, DE
0B0AF8 46    1241** LD	B, (HL)			;  B: The mask
             1242** ;
0B0AF9 79    1243** LD	A, C			; Fetch the keycode again
0B0AFA E6    1244** AND	01111000b		; And divide by 8
0B0AFB 78 
0B0AFC 0F    1245** RRCA
0B0AFD 0F    1246** RRCA
0B0AFE 0F    1247** RRCA
0B0AFF 5F    1248** LD	E, A			; DE: The offset (the MSW has already been cleared previously)
0B0B00 DD    1249** ADD	IX, DE			; IX: The address
0B0B01 19 
0B0B02 78    1250** LD	A, B			;  B: The mask
0B0B03 DD    1251** AND	(IX+0)			; Check whether the bit is set
0B0B04 A6 
0B0B05 00 
0B0B06 CA    1252** JP	Z, ZERO			; No, so return 0
0B0B07 84 
0B0B08 0C 
0B0B09 0B 
0B0B0A C3    1253** JP	TRUE			; Otherwise return -1
0B0B0B F6 
0B0B0C 08 
0B0B0D 0B 
             1254** ;
             1255** ; A bit lookup table
             1256** ;
0B0B0E 01    1257** BITLOOKUP:		DB	01h, 02h, 04h, 08h
0B0B0F 02 
0B0B10 04 
0B0B11 08 
0B0B12 10    1258** DB	10h, 20h, 40h, 80h
0B0B13 20 
0B0B14 40 
0B0B15 80 
             1259** ;
             1260** ; MID$ - Return sub-string.
             1261** ; Result is string.
             1262** ;
0B0B16 CD    1263** MIDS:			CALL    EXPRSC			; Get the first string expression
0B0B17 0F 
0B0B18 0D 
0B0B19 0B 
0B0B1A CD    1264** CALL    PUSHS           	; Push the string onto the stack from the string accumulator (ACCS)
0B0B1B A5 
0B0B1C 0C 
0B0B1D 0B 
0B0B1E CD    1265** CALL    EXPRI			; Get the second expression
0B0B1F FB 
0B0B20 05 
0B0B21 0B 
0B0B22 C1    1266** POP     BC			; C: String length, B: Value of A before PUSHS was called
0B0B23 CD    1267** CALL    POPS			; Pop the string back off the stack to the string accumulator
0B0B24 CF 
0B0B25 0C 
0B0B26 0B 
0B0B27 D9    1268** EXX
0B0B28 7D    1269** LD      A,L			; A: The start index
0B0B29 D9    1270** EXX
0B0B2A B7    1271** OR      A			; If the start index is 0, then we don't need to do the next bit
0B0B2B 28    1272** JR      Z,MIDS1
0B0B2C 0E 
0B0B2D 3D    1273** DEC     A
0B0B2E 6F    1274** LD      L,A			; L: The start index - 1
0B0B2F 93    1275** SUB     E			; Subtract from the string length
0B0B30 1E    1276** LD      E,0			; Preemptively set the string length to 0
0B0B31 00 
0B0B32 30    1277** JR      NC,MIDS1		; If the first parameter is greater than the string length, then do nothing
0B0B33 07 
0B0B34 ED    1278** NEG				; Negate the answer and
0B0B35 44 
0B0B36 4F    1279** LD      C,A			; C: Number of bytes to copy
0B0B37 CD    1280** CALL    RIGHT1			; We can do a RIGHT$ at this point with the result
0B0B38 7A 
0B0B39 0B 
0B0B3A 0B 
0B0B3B CD    1281** MIDS1:			CALL    NXT			; Skip whitespace
0B0B3C 61 
0B0B3D 0D 
0B0B3E 0B 
0B0B3F FE    1282** CP      ','			; Check for a comma
0B0B40 2C 
0B0B41 FD    1283** INC     IY			; Advance to the next character in the BASIC line
0B0B42 23 
0B0B43 28    1284** JR      Z,LEFT1			; If there is a comma then we do a LEFT$ on the remainder
0B0B44 0D 
0B0B45 FD    1285** DEC     IY			; Restore the BASIC program pointer
0B0B46 2B 
0B0B47 CD    1286** CALL    BRAKET			; Check for a bracket
0B0B48 20 
0B0B49 0D 
0B0B4A 0B 
0B0B4B 3E    1287** LD      A,80H			; String marker
0B0B4C 80 
0B0B4D C9    1288** RET
             1289** ;
             1290** ; LEFT$ - Return left part of string.
             1291** ; Carry cleared if entire string returned.
             1292** ; Result is string.
             1293** ;
0B0B4E CD    1294** LEFTS:			CALL    EXPRSC			; Get the first string expression
0B0B4F 0F 
0B0B50 0D 
0B0B51 0B 
0B0B52 CD    1295** LEFT1:			CALL    PUSHS           	; Push the string onto the stack from the string accumulator (ACCS)
0B0B53 A5 
0B0B54 0C 
0B0B55 0B 
0B0B56 CD    1296** CALL    EXPRI			; Get the second expression
0B0B57 FB 
0B0B58 05 
0B0B59 0B 
0B0B5A C1    1297** POP     BC			; C: String length, B: Value of A before PUSHS was called
0B0B5B CD    1298** CALL    POPS			; Pop the string back off the stack to the string accumulator (ACCS)
0B0B5C CF 
0B0B5D 0C 
0B0B5E 0B 
0B0B5F CD    1299** CALL    BRAKET			; Check for closing bracket
0B0B60 20 
0B0B61 0D 
0B0B62 0B 
0B0B63 D9    1300** EXX
0B0B64 7D    1301** LD      A,L			; L: The second parameter
0B0B65 D9    1302** EXX
0B0B66 BB    1303** CP      E			; Compare with the string length
0B0B67 30    1304** JR      NC,LEFT3		; If it is greater than or equal then do nothing
0B0B68 02 
0B0B69 6B    1305** LD      L,E             	; For RIGHTS, no effect in LEFTS
0B0B6A 5F    1306** LEFT2:			LD      E,A			; E: The new length of string
0B0B6B 3E    1307** LEFT3:			LD      A,80H           	; String marker
0B0B6C 80 
0B0B6D C9    1308** RET
             1309** ;
             1310** ; RIGHT$ - Return right part of string.
             1311** ; Result is string.
             1312** ;
0B0B6E CD    1313** RIGHTS:			CALL    LEFTS			; Call LEFTS to get the string
0B0B6F 4E 
0B0B70 0B 
0B0B71 0B 
0B0B72 D0    1314** RET     NC			; Do nothing if the second parameter is >= string length
0B0B73 1C    1315** INC     E			; Check for a zero length string
0B0B74 1D    1316** DEC     E
0B0B75 C8    1317** RET     Z			; Yes, so do nothing
0B0B76 4B    1318** LD      C,E			;  C: Number of bytes to copy
0B0B77 7D    1319** LD      A,L
0B0B78 93    1320** SUB     E
0B0B79 6F    1321** LD      L,A			;  L: Index into the string
0B0B7A 79    1322** RIGHT1:			LD	A,C
0B0B7B 01    1323** LD	BC,0
0B0B7C 00 
0B0B7D 00 
0B0B7E 00 
0B0B7F 4F    1324** LD	C,A			; BC: Number of bytes to copy (with top word cleared)
0B0B80 7D    1325** LD	A,L
0B0B81 21    1326** LD	HL,ACCS
0B0B82 00 
0B0B83 4D 
0B0B84 0B 
0B0B85 6F    1327** LD	L,A			; HL: Source (in ACCS)
0B0B86 11    1328** LD      DE,ACCS			; DE: Destination (start of ACCS)
0B0B87 00 
0B0B88 4D 
0B0B89 0B 
0B0B8A ED    1329** LDIR                    	; Copy
0B0B8B B0 
0B0B8C 3E    1330** LD      A,80H			; String marker
0B0B8D 80 
0B0B8E C9    1331** RET
             1332** ;
             1333** ; STRINGS - Return n concatenations of a string.
             1334** ; Result is string.
             1335** ;
0B0B8F CD    1336** STRING_:		CALL    EXPRI			; Get number of times to replicate
0B0B90 FB 
0B0B91 05 
0B0B92 0B 
0B0B93 CD    1337** CALL    COMMA			; Check for comma
0B0B94 13 
0B0B95 0D 
0B0B96 0B 
0B0B97 D9    1338** EXX
0B0B98 7D    1339** LD      A,L			; L: Number of iterations of string
0B0B99 D9    1340** EXX
0B0B9A F5    1341** PUSH    AF
0B0B9B CD    1342** CALL    EXPRS			; Get the string
0B0B9C 06 
0B0B9D 06 
0B0B9E 0B 
0B0B9F CD    1343** CALL    BRAKET			; Check for closing bracket
0B0BA0 20 
0B0BA1 0D 
0B0BA2 0B 
0B0BA3 F1    1344** POP     AF			; A: Number of iterations of string
0B0BA4 B7    1345** OR      A			; Set flags
0B0BA5 28    1346** JR      Z,LEFT2         	; If iterations is 0, then this will return an empty string
0B0BA6 C3 
0B0BA7 3D    1347** DEC     A
0B0BA8 4F    1348** LD      C,A			; C: Loop counter
0B0BA9 3E    1349** LD      A,80H			; String marker
0B0BAA 80 
0B0BAB C8    1350** RET     Z
0B0BAC 1C    1351** INC     E			; Check for empty string
0B0BAD 1D    1352** DEC     E
0B0BAE C8    1353** RET     Z              		; And return
0B0BAF 43    1354** LD      B,E			; B: String length tally
0B0BB0 21    1355** LD	HL,ACCS
0B0BB1 00 
0B0BB2 4D 
0B0BB3 0B 
0B0BB4 C5    1356** STRIN1:			PUSH    BC
0B0BB5 7E    1357** STRIN2:			LD      A,(HL)
0B0BB6 23    1358** INC     HL
0B0BB7 12    1359** LD      (DE),A
0B0BB8 1C    1360** INC     E
0B0BB9 3E    1361** LD      A,19
0B0BBA 13 
0B0BBB CA    1362** JP      Z,ERROR_         	; Throw a "String too long" error
0B0BBC 51 
0B0BBD 3A 
0B0BBE 0B 
0B0BBF 10    1363** DJNZ    STRIN2
0B0BC0 F4 
0B0BC1 C1    1364** POP     BC
0B0BC2 0D    1365** DEC     C
0B0BC3 20    1366** JR      NZ,STRIN1
0B0BC4 EF 
0B0BC5 3E    1367** LD      A,80H
0B0BC6 80 
0B0BC7 C9    1368** RET
             1369** ;
             1370** ;SUBROUTINES
             1371** ;
             1372** ;SWAP - Swap arguments
             1373** ;Exchanges DE,HL D'E',H'L' and B,C
             1374** ;Destroys: A,B,C,D,E,H,L,D',E',H',L'
             1375** ;
0B0BC8 79    1376** SWAP:			LD      A,C
0B0BC9 48    1377** LD      C,B
0B0BCA 47    1378** LD      B,A
0B0BCB EB    1379** EX      DE,HL
0B0BCC D9    1380** EXX
0B0BCD EB    1381** EX      DE,HL
0B0BCE D9    1382** EXX
0B0BCF C9    1383** RET
             1384** ;
             1385** ;TEST - Test HLH'L' for zero
             1386** ;Outputs: Z-flag set & A=0 if zero
             1387** ;Destroys: A,F
             1388** ;
0B0BD0 7C    1389** TEST:			LD      A,H
0B0BD1 B5    1390** OR      L
0B0BD2 D9    1391** EXX
0B0BD3 B4    1392** OR      H
0B0BD4 B5    1393** OR      L
0B0BD5 D9    1394** EXX
0B0BD6 C9    1395** RET
             1396** ;
             1397** ;DECODE - Decode line number in pseudo-binary.
             1398** ;   Inputs: IY = Text pointer.
             1399** ;   Outputs: HL=0, H'L'=line number, C=0.
             1400** ;   Destroys: A,C,H,L,H',L',IY,F
             1401** ;
0B0BD7 D9    1402** DECODE:			EXX
0B0BD8 21    1403** LD	HL, 0
0B0BD9 00 
0B0BDA 00 
0B0BDB 00 
0B0BDC FD    1404** LD      A,(IY)
0B0BDD 7E 
0B0BDE 00 
0B0BDF FD    1405** INC     IY
0B0BE0 23 
0B0BE1 17    1406** RLA
0B0BE2 17    1407** RLA
0B0BE3 67    1408** LD      H,A
0B0BE4 E6    1409** AND     0C0H
0B0BE5 C0 
0B0BE6 FD    1410** XOR     (IY)
0B0BE7 AE 
0B0BE8 00 
0B0BE9 FD    1411** INC     IY
0B0BEA 23 
0B0BEB 6F    1412** LD      L,A
0B0BEC 7C    1413** LD      A,H
0B0BED 17    1414** RLA
0B0BEE 17    1415** RLA
0B0BEF E6    1416** AND     0C0H
0B0BF0 C0 
0B0BF1 FD    1417** XOR     (IY)
0B0BF2 AE 
0B0BF3 00 
0B0BF4 FD    1418** INC     IY
0B0BF5 23 
0B0BF6 67    1419** LD      H,A
0B0BF7 D9    1420** EXX
             1421** ;			XOR     A
             1422** ;			LD      C,A
             1423** ;			LD      H,A
             1424** ;			LD      L,A
0B0BF8 21    1425** LD	HL, 0
0B0BF9 00 
0B0BFA 00 
0B0BFB 00 
0B0BFC 4D    1426** LD	C, L
0B0BFD C9    1427** RET
             1428** ;
             1429** ;HEXSTR - convert numeric value to HEX string.
             1430** ;   Inputs: HLH'L'C = integer or floating-point number
             1431** ;  Outputs: String in string accumulator.
             1432** ;           E = string length.  D = ACCS/256
             1433** ;
0B0BFE FD    1434** HEXSTS:			INC     IY              ;SKIP TILDE
0B0BFF 23 
0B0C00 CD    1435** CALL    ITEMN
0B0C01 0E 
0B0C02 06 
0B0C03 0B 
0B0C04 CD    1436** CALL    HEXSTR
0B0C05 0B 
0B0C06 0C 
0B0C07 0B 
0B0C08 3E    1437** LD      A,80H
0B0C09 80 
0B0C0A C9    1438** RET
             1439** ;
0B0C0B CD    1440** HEXSTR:			CALL    SFIX
0B0C0C 53 
0B0C0D 09 
0B0C0E 0B 
0B0C0F 01    1441** LD      BC,8
0B0C10 08 
0B0C11 00 
0B0C12 00 
0B0C13 11    1442** LD      DE,ACCS
0B0C14 00 
0B0C15 4D 
0B0C16 0B 
0B0C17 C5    1443** HEXST1:			PUSH    BC
0B0C18 06    1444** LD      B,4
0B0C19 04 
0B0C1A AF    1445** XOR     A
0B0C1B D9    1446** HEXST2:			EXX
0B0C1C 52    1447** ADD.S	HL,HL
0B0C1D 29 
0B0C1E D9    1448** EXX
0B0C1F 52    1449** ADC.S	HL,HL
0B0C20 ED 
0B0C21 6A 
0B0C22 17    1450** RLA
0B0C23 10    1451** DJNZ    HEXST2
0B0C24 F6 
0B0C25 C1    1452** POP     BC
0B0C26 0D    1453** DEC     C
0B0C27 F8    1454** RET     M
0B0C28 28    1455** JR      Z,HEXST3
0B0C29 06 
0B0C2A B7    1456** OR      A
0B0C2B 20    1457** JR      NZ,HEXST3
0B0C2C 03 
0B0C2D B8    1458** CP      B
0B0C2E 28    1459** JR      Z,HEXST1
0B0C2F E7 
0B0C30 C6    1460** HEXST3:			ADD     A,90H
0B0C31 90 
0B0C32 27    1461** DAA
0B0C33 CE    1462** ADC     A,40H
0B0C34 40 
0B0C35 27    1463** DAA
0B0C36 12    1464** LD      (DE),A
0B0C37 13    1465** INC     DE
0B0C38 47    1466** LD      B,A
0B0C39 18    1467** JR      HEXST1
0B0C3A DC 
             1468** ;
             1469** ;Function STR - convert numeric value to ASCII string.
             1470** ;   Inputs: HLH'L'C = integer or floating-point number.
             1471** ;  Outputs: String in string accumulator.
             1472** ;           E = length, D = ACCS/256
             1473** ;           A = 80H (type=string)
             1474** ;
             1475** ;First normalise for decimal output:
             1476** ;
0B0C3B CD    1477** STRS:			CALL    NXT
0B0C3C 61 
0B0C3D 0D 
0B0C3E 0B 
0B0C3F FE    1478** CP      '~'
0B0C40 7E 
0B0C41 28    1479** JR      Z,HEXSTS
0B0C42 BB 
0B0C43 CD    1480** CALL    ITEMN
0B0C44 0E 
0B0C45 06 
0B0C46 0B 
0B0C47 DD    1481** LD      IX,STAVAR
0B0C48 21 
0B0C49 00 
0B0C4A 4F 
0B0C4A 0B   
0B0C4C DD    1482** LD      A,(IX+3)
0B0C4D 7E 
0B0C4E 03 
0B0C4F B7    1483** OR      A
0B0C50 DD    1484** LD      IX,G9-1         ;G9 FORMAT
0B0C51 21 
0B0C52 7D 
0B0C53 0C 
0B0C53 0B   
0B0C55 28    1485** JR      Z,STR0
0B0C56 05 
0B0C57 DD    1486** STR:			LD      IX,STAVAR
0B0C58 21 
0B0C59 00 
0B0C5A 4F 
0B0C5A 0B   
0B0C5C 11    1487** STR0:			LD      DE,ACCS
0B0C5D 00 
0B0C5E 4D 
0B0C5F 0B 
0B0C60 3E    1488** LD      A,37
0B0C61 25 
0B0C62 CD    1489** CALL    FPP
0B0C63 5B 
0B0C64 23 
0B0C65 0B 
0B0C66 DA    1490** JP      C,ERROR_
0B0C67 51 
0B0C68 3A 
0B0C69 0B 
0B0C6A DD    1491** BIT     0,(IX+2)
0B0C6B CB 
0B0C6C 02 
0B0C6D 46 
0B0C6E 3E    1492** STR1:			LD      A,80H           ;STRING MARKER
0B0C6F 80 
0B0C70 C8    1493** RET     Z
0B0C71 79    1494** LD      A,C
0B0C72 C6    1495** ADD     A,4
0B0C73 04 
0B0C74 BB    1496** STR2:			CP      E
0B0C75 28    1497** JR      Z,STR1
0B0C76 F7 
0B0C77 EB    1498** EX      DE,HL
0B0C78 36    1499** LD      (HL),' '        ;TRAILING SPACE
0B0C79 20 
0B0C7A 23    1500** INC     HL
0B0C7B EB    1501** EX      DE,HL
0B0C7C 18    1502** JR      STR2
0B0C7D F6 
             1503** ;
0B0C7E 09    1504** G9:			DW    9
0B0C7F 00 
             1505** ;
             1506** ;STRING COMPARE
             1507** ;Compare string (DE) length B with string (HL) length C.
             1508** ;Result preset to false.
             1509** ;
0B0C80 CD    1510** SCP:			CALL	SCP0
0B0C81 8E 
0B0C82 0C 
0B0C83 0B 
             1511** ;
0B0C84 3E    1512** ZERO:			LD      A,0
0B0C85 00 
0B0C86 D9    1513** EXX
0B0C87 67    1514** LD      H,A
0B0C88 6F    1515** LD      L,A
0B0C89 D9    1516** EXX
0B0C8A 67    1517** LD      H,A
0B0C8B 6F    1518** LD      L,A
0B0C8C 4F    1519** LD      C,A
0B0C8D C9    1520** RET
             1521** ;
0B0C8E 04    1522** SCP0:			INC     B
0B0C8F 0C    1523** INC     C
0B0C90 05    1524** SCP1:			DEC     B
0B0C91 28    1525** JR      Z,SCP2
0B0C92 0A 
0B0C93 0D    1526** DEC     C
0B0C94 28    1527** JR      Z,SCP3
0B0C95 0C 
0B0C96 1A    1528** LD      A,(DE)
0B0C97 BE    1529** CP      (HL)
0B0C98 C0    1530** RET     NZ
0B0C99 13    1531** INC     DE
0B0C9A 23    1532** INC     HL
0B0C9B 18    1533** JR      SCP1
0B0C9C F3 
0B0C9D B7    1534** SCP2:			OR      A
0B0C9E 0D    1535** DEC     C
0B0C9F C8    1536** RET     Z
0B0CA0 37    1537** SCF
0B0CA1 C9    1538** RET
0B0CA2 B7    1539** SCP3:			OR      A
0B0CA3 0C    1540** INC     C
0B0CA4 C9    1541** RET
             1542** ;
             1543** ; PUSHS - SAVE STRING ON STACK.
             1544** ;     Inputs: String in string accumulator.
             1545** ;             E = string length.
             1546** ;             A - saved on stack.
             1547** ;   Destroys: B,C,D,E,H,L,IX,SP,F
             1548** ;
0B0CA5 CD    1549** PUSHS:			CALL    CHECK			; Check if there is sufficient space on the stack
0B0CA6 40 
0B0CA7 19 
0B0CA8 0B 
0B0CA9 DD    1550** POP     IX              	; IX: Return address
0B0CAA E1 
0B0CAB B7    1551** OR      A               	; Clear the carry flag
0B0CAC 01    1552** LD	BC,0			; BC: Length of the string
0B0CAD 00 
0B0CAE 00 
0B0CAF 00 
0B0CB0 4B    1553** LD	C,E
0B0CB1 21    1554** LD      HL,ACCS			; HL: Pointer to the string accumulator
0B0CB2 00 
0B0CB3 4D 
0B0CB4 0B 
0B0CB5 11    1555** LD	DE,ACCS
0B0CB6 00 
0B0CB7 4D 
0B0CB8 0B 
0B0CB9 59    1556** LD	E,C 			; DE: Pointer to the end of the string in the accumulator
0B0CBA ED    1557** SBC     HL,DE			; HL: Number of bytes to reserve on the stack (a negative number)
0B0CBB 52 
0B0CBC 39    1558** ADD     HL,SP			; Grow the stack
0B0CBD F9    1559** LD      SP,HL
0B0CBE 57    1560** LD      D,A			;  D: This needs to be set to A for some functions
             1561** ; BEGIN MISSING FROM BINARY
             1562** ; LD	B,A			; Stack A and C (the string length)
             1563** ; PUSH    BC			; Note that this stacks 3 bytes, not 2; the MSB is irrelevant
             1564** ; LD	B,0			; Reset B to 0 for the LDIR in this function
             1565** ; END MISSING FROM BINARY
0B0CBF D5    1566** PUSH 	DE ; ADDED FROM BINARY
0B0CC0 28    1567** JR      Z,PUSHS1        	; Is it zero length?
0B0CC1 0B 
0B0CC2 11    1568** LD      DE,ACCS			; DE: Destination
0B0CC3 00 
0B0CC4 4D 
0B0CC5 0B 
0B0CC6 EB    1569** EX      DE,HL			; HL: Destination, DE: Address on stack
0B0CC7 ED    1570** LDIR	                    	; Copy to stack
0B0CC8 B0 
0B0CC9 CD    1571** CALL    CHECK			; Final check to see if there is sufficient space on the stack
0B0CCA 40 
0B0CCB 19 
0B0CCC 0B 
0B0CCD DD    1572** PUSHS1:			JP      (IX)            	; Effectively "RET" (IX contains the return address)
0B0CCE E9 
             1573** ;
             1574** ; POPS - RESTORE STRING FROM STACK.
             1575** ;     Inputs: C = string length.
             1576** ;    Outputs: String in string accumulator.
             1577** ;             E = string length.
             1578** ;   Destroys: B,C,D,E,H,L,IX,SP,F
             1579** ;
0B0CCF DD    1580** POPS:			POP     IX              	; IX: Return address
0B0CD0 E1 
0B0CD1 69    1581** LD	L,C			; Temporarily store string length in L
0B0CD2 01    1582** LD	BC,0
0B0CD3 00 
0B0CD4 00 
0B0CD5 00 
0B0CD6 4D    1583** LD	C,L			; BC: Number of bytes to copy
0B0CD7 21    1584** LD      HL,0			; HL: 0
0B0CD8 00 
0B0CD9 00 
0B0CDA 00 
0B0CDB 39    1585** ADD     HL,SP			; HL: Stack address
0B0CDC 11    1586** LD      DE,ACCS			; DE: Destination
0B0CDD 00 
0B0CDE 4D 
0B0CDF 0B 
0B0CE0 0C    1587** INC     C			; Quick check to see if this is a zero length string
0B0CE1 0D    1588** DEC     C
0B0CE2 28    1589** JR      Z,POPS1         	; Yes it is, so skip
0B0CE3 02 
0B0CE4 ED    1590** LDIR                    	; No, so copy from the stack
0B0CE5 B0 
0B0CE6 F9    1591** POPS1:			LD      SP,HL			; Shrink the stack
0B0CE7 DD    1592** JP      (IX)            	; Effectively "RET" (IX contains the return address)
0B0CE8 E9 
             1593** ;
0B0CE9 FD    1594** HEXDIG:			LD      A,(IY)
0B0CEA 7E 
0B0CEB 00 
0B0CEC FE    1595** CP      '0'
0B0CED 30 
0B0CEE D8    1596** RET     C
0B0CEF FE    1597** CP      '9'+1
0B0CF0 3A 
0B0CF1 3F    1598** CCF
0B0CF2 D0    1599** RET     NC
0B0CF3 FE    1600** CP      'A'
0B0CF4 41 
0B0CF5 D8    1601** RET     C
0B0CF6 D6    1602** SUB     'A'-10
0B0CF7 37 
0B0CF8 FE    1603** CP      16
0B0CF9 10 
0B0CFA 3F    1604** CCF
0B0CFB C9    1605** RET
             1606** ;
0B0CFC FD    1607** BINDIG:			LD	A,(IY)
0B0CFD 7E 
0B0CFE 00 
0B0CFF FE    1608** CP	'0'
0B0D00 30 
0B0D01 D8    1609** RET	C
0B0D02 FE    1610** CP	'1'+1
0B0D03 32 
0B0D04 3F    1611** CCF
0B0D05 C9    1612** RET
             1613** ;
0B0D06 FE    1614** RELOP?:			CP      '>'
0B0D07 3E 
0B0D08 D0    1615** RET     NC
0B0D09 FE    1616** CP      '='
0B0D0A 3D 
0B0D0B D0    1617** RET     NC
0B0D0C FE    1618** CP      '<'
0B0D0D 3C 
0B0D0E C9    1619** RET
             1620** ;
0B0D0F CD    1621** EXPRSC:			CALL    EXPRS
0B0D10 06 
0B0D11 06 
0B0D12 0B 
0B0D13 CD    1622** COMMA:			CALL    NXT
0B0D14 61 
0B0D15 0D 
0B0D16 0B 
0B0D17 FD    1623** INC     IY
0B0D18 23 
0B0D19 FE    1624** CP      ','
0B0D1A 2C 
0B0D1B C8    1625** RET     Z
0B0D1C 3E    1626** LD      A,5
0B0D1D 05 
0B0D1E 18    1627** JR      ERROR1_EV          ;"Missing ,"
0B0D1F 0B 
             1628** ;
0B0D20 CD    1629** BRAKET:			CALL    NXT
0B0D21 61 
0B0D22 0D 
0B0D23 0B 
0B0D24 FD    1630** INC     IY
0B0D25 23 
0B0D26 FE    1631** CP      ')'
0B0D27 29 
0B0D28 C8    1632** RET     Z
0B0D29 3E    1633** LD      A,27
0B0D2A 1B 
0B0D2B C3    1634** ERROR1_EV:			JP      ERROR_           ;"Missing )"
0B0D2C 51 
0B0D2D 3A 
0B0D2E 0B 
             1635** ;
0B0D2F FD    1636** SAVE_EV:			INC     IY
0B0D30 23 
0B0D31 08    1637** SAVE1:			EX      AF,AF'
0B0D32 FA    1638** JP      M,TYPE_EV_
0B0D33 27 
0B0D34 06 
0B0D35 0B 
0B0D36 08    1639** EX      AF,AF'
0B0D37 E3    1640** EX      (SP),HL
0B0D38 D9    1641** EXX
0B0D39 E5    1642** PUSH    HL
0B0D3A D9    1643** EXX
0B0D3B F5    1644** PUSH    AF
0B0D3C C5    1645** PUSH    BC
0B0D3D E9    1646** JP      (HL)
             1647** ;
0B0D3E 08    1648** DOIT:			EX      AF,AF'
0B0D3F FA    1649** JP      M,TYPE_EV_
0B0D40 27 
0B0D41 06 
0B0D42 0B 
0B0D43 D9    1650** EXX
0B0D44 C1    1651** POP     BC              ;RETURN ADDRESS
0B0D45 D9    1652** EXX
0B0D46 79    1653** LD      A,C
0B0D47 C1    1654** POP     BC
0B0D48 47    1655** LD      B,A
0B0D49 F1    1656** POP     AF              ;OPERATOR
0B0D4A D9    1657** EXX
0B0D4B EB    1658** EX      DE,HL
0B0D4C E1    1659** POP     HL
0B0D4D D9    1660** EXX
0B0D4E EB    1661** EX      DE,HL
0B0D4F E1    1662** POP     HL
0B0D50 D9    1663** EXX
0B0D51 C5    1664** PUSH    BC
0B0D52 D9    1665** EXX
0B0D53 E6    1666** AND     0FH
0B0D54 0F 
0B0D55 CD    1667** CALL    FPP
0B0D56 5B 
0B0D57 23 
0B0D58 0B 
0B0D59 38    1668** JR      C,ERROR1_EV
0B0D5A D0 
0B0D5B AF    1669** XOR     A
0B0D5C 08    1670** EX      AF,AF'          ;TYPE
0B0D5D FD    1671** LD      A,(IY)
0B0D5E 7E 
0B0D5F 00 
0B0D60 C9    1672** RET
             1673** ;
             1674** ; Skip spaces
             1675** ; - IY: String pointer
             1676** ; Returns:
             1677** ;  - A: The non-space character found
             1678** ; - IY: Points to the character before that
             1679** ;
0B0D61 FD    1680** NXT:			LD      A,(IY)			; Fetch the character
0B0D62 7E 
0B0D63 00 
0B0D64 FE    1681** CP      ' '			; If it is space, then return
0B0D65 20 
0B0D66 C0    1682** RET     NZ
0B0D67 FD    1683** INC     IY			; Increment the pointer and
0B0D68 23 
0B0D69 C3    1684** JP      NXT			; Loop
0B0D6A 61 
0B0D6B 0D 
0B0D6C 0B 
             1685** ;
0B0D6D E5    1686** DISPT2:			PUSH    HL
0B0D6E 21    1687** LD      HL,SOPTBL
0B0D6F A6 
0B0D70 04 
0B0D71 0B 
0B0D72 18    1688** JR      DISPT0
0B0D73 07 
             1689** ;
0B0D74 E5    1690** DISPAT:			PUSH    HL
0B0D75 D6    1691** SUB     FUNTOK
0B0D76 8D 
0B0D77 21    1692** LD      HL,FUNTBL
0B0D78 FB 
0B0D79 03 
0B0D7A 0B 
0B0D7B C5    1693** DISPT0:			PUSH    BC
             1694** 
0B0D7C 01    1695** LD	BC, 3
0B0D7D 03 
0B0D7E 00 
0B0D7F 00 
0B0D80 47    1696** LD	B, A
0B0D81 ED    1697** MLT	BC
0B0D82 4C 
0B0D83 09    1698** ADD	HL, BC
0B0D84 ED    1699** LD	HL, (HL)
0B0D85 27 
             1700** 
             1701** ;			ADD     A,A
             1702** ;			LD      C,A
             1703** ;			LD      B,0
             1704** ;			ADD     HL,BC
             1705** ;			LD      A,(HL)
             1706** ;			INC     HL
             1707** ;			LD      H,(HL)
             1708** ;			LD      L,A
             1709** 
0B0D86 C1    1710** POP     BC
0B0D87 E3    1711** EX      (SP),HL
0B0D88 C9    1712** RET                     ;OFF TO ROUTINE
             1713** 
              0006* include "basic/exec.asm"
             0001** ;
             0002** ; Title:	BBC Basic Interpreter - Z80 version
             0003** ;		Statement Execution & Assembler Module - "EXEC"
             0004** ; Author:	(C) Copyright  R.T.Russell  1984
             0005** ; Modified By:	Dean Belfield
             0006** ; Created:	12/05/2023
             0007** ; Last Updated:	26/06/2023
             0008** ;
             0009** ; Modinfo:
             0010** ; 27/01/1984:	Version 2.1
             0011** ; 02/03/1987:	Version 3.0
             0012** ; 11/06/1987:	Version 3.1
             0013** ; 12/05/2023:	Modified by Dean Belfield
             0014** ; 07/06/2023:	Modified to run in ADL mode
             0015** ; 26/06/2023:	Fixed DIM, USR, and address output of inline assembler
             0016** 
             0017** ; .ASSUME	ADL = 1
             0018** 
             0019** ; INCLUDE	"equs.inc"
             0020** 
             0021** ; SEGMENT CODE
             0022** 
             0023** ; XDEF	XEQ
             0024** ; XDEF	CHAIN0
             0025** ; XDEF	RUN
             0026** ; XDEF	SYNTAX
             0027** ; XDEF	ESCAPE
             0028** ; XDEF	FN_EX
             0029** ; XDEF	USR
             0030** ; XDEF	STORE5
             0031** ; XDEF	STORE4
             0032** ; XDEF	CHECK
             0033** ; XDEF	TERMQ
             0034** ; XDEF	FILL
             0035** ; XDEF	X4OR5
             0036** ; XDEF	MUL16
             0037** ; XDEF	CHANEL
             0038** ; XDEF	ASSEM
             0039** 
             0040** ; XREF	AUTO
             0041** ; XREF	DELETE
             0042** ; XREF	LOAD
             0043** ; XREF	LIST_
             0044** ; XREF	NEW
             0045** ; XREF	OLD
             0046** ; XREF	RENUM
             0047** ; XREF	SAVE
             0048** ; XREF	SOUND
             0049** ; XREF	CLG
             0050** ; XREF	DRAW
             0051** ; XREF	ENVEL
             0052** ; XREF	GCOL
             0053** ; XREF	MODE
             0054** ; XREF	MOVE
             0055** ; XREF	PLOT
             0056** ; XREF	COLOUR
             0057** ; XREF	EXPRS
             0058** ; XREF	HIMEM
             0059** ; XREF	LOAD0
             0060** ; XREF	RANDOM
             0061** ; XREF	CLEAR
             0062** ; XREF	ERRTRP
             0063** ; XREF	PAGE_
             0064** ; XREF	DATAPTR
             0065** ; XREF	ERRLIN
             0066** ; XREF	TRAP
             0067** ; XREF	NXT
             0068** ; XREF	SETLIN
             0069** ; XREF	CLOOP
             0070** ; XREF	OSSHUT
             0071** ; XREF	WARM
             0072** ; XREF	TRACEN
             0073** ; XREF	OUTCHR
             0074** ; XREF	PBCDL
             0075** ; XREF	OSCLI
             0076** ; XREF	LISTON
             0077** ; XREF	GETVAR
             0078** ; XREF	PUTVAR
             0079** ; XREF	DATPTR
             0080** ; XREF	ERROR_
             0081** ; XREF	EXPR
             0082** ; XREF	CREATE
             0083** ; XREF	EXPRI
             0084** ; XREF	BRAKET
             0085** ; XREF	FREE
             0086** ; XREF	OSBPUT
             0087** ; XREF	COUNT
             0088** ; XREF	STR
             0089** ; XREF	HEXSTR
             0090** ; XREF	CRLF
             0091** ; XREF	ITEMI
             0092** ; XREF	FINDL
             0093** ; XREF	TEST
             0094** ; XREF	EXPRN
             0095** ; XREF	DLOAD5
             0096** ; XREF	DLOAD5_SPL
             0097** ; XREF	LOADN
             0098** ; XREF	FPP
             0099** ; XREF	SWAP
             0100** ; XREF	GETDEF
             0101** ; XREF	ZERO
             0102** ; XREF	OSBGET
             0103** ; XREF	BUFFER
             0104** ; XREF	CONS
             0105** ; XREF	VAL0
             0106** ; XREF	OSLINE
             0107** ; XREF	CLRSCN
             0108** ; XREF	TELL
             0109** ; XREF	SAYLN
             0110** ; XREF	REPORT
             0111** ; XREF	PUTPTR
             0112** ; XREF	PUTIME
             0113** ; XREF	PUTIMS
             0114** ; XREF	LOMEM
             0115** ; XREF	WIDTH
             0116** ; XREF	OSWRCH
             0117** ; XREF	COMMA
             0118** ; XREF	OSCALL
             0119** ; XREF	SFIX
             0120** ; XREF	LOAD4
             0121** ; XREF	PUSHS
             0122** ; XREF	POPS
             0123** ; XREF	LOADS
             0124** ; XREF	PUTCSR
             0125** ; XREF	OUT_
             0126** ; XREF	R0
             0127** ;
             0128** ; List of token values used in this module
             0129** ;
             0130** TAND:			EQU     80H
             0131** TOR:			EQU     84H
             0132** TERROR_EX:			EQU     85H
             0133** LINE_EX_:			EQU     86H
             0134** OFF_:			EQU     87H
             0135** STEP:			EQU     88H
             0136** SPC:			EQU     89H
             0137** TAB:			EQU     8AH
             0138** ELSE_EX_:			EQU     8BH
             0139** THEN_EX_:			EQU     8CH
             0140** LINO_EX:			EQU     8DH
             0141** TO_EX:			EQU     B8H
             0142** TCMD_EX:			EQU     C6H
             0143** TCALL:			EQU     D6H
             0144** DATA_EX_:			EQU     DCH
             0145** DEF_:			EQU     DDH
             0146** TGOSUB:			EQU     E4H
             0147** TGOTO:			EQU     E5H
             0148** TON:			EQU     EEH
             0149** TPROC:			EQU     F2H
             0150** TSTOP:			EQU     FAH
             0151** 
             0152** ; The command table
             0153** ; Commands are tokens from C6H onwards; this lookup table is used to
             0154** ; run the corresponding function; Note that DATA and DEF both use the same
             0155** ; code as REM
             0156** ;
0B0D89 DA    0157** CMDTAB:			DW24  AUTO			; C6H
0B0D8A 39 
0B0D8B 0B 
0B0D8C 3D    0158** DW24  DELETE			; C7H
0B0D8D 38 
0B0D8E 0B 
0B0D8F 1B    0159** DW24  LOAD			; C8H
0B0D90 3A 
0B0D91 0B 
0B0D92 78    0160** DW24  LIST_			; C9H
0B0D93 38 
0B0D94 0B 
0B0D95 F8    0161** DW24  NEW			; CAH
0B0D96 39 
0B0D97 0B 
0B0D98 FE    0162** DW24  OLD			; CBH
0B0D99 39 
0B0D9A 0B 
0B0D9B 07    0163** DW24  RENUM			; CCH
0B0D9C 39 
0B0D9D 0B 
0B0D9E 2C    0164** DW24  SAVE			; CDH
0B0D9F 3A 
0B0DA0 0B 
0B0DA1 99    0165** DW24  PUT			; CEH
0B0DA2 18 
0B0DA3 0B 
0B0DA4 B9    0166** DW24  PTR_EX			; CFH
0B0DA5 16 
0B0DA6 0B 
0B0DA7 D3    0167** DW24  PAGEV_EX			; D0H
0B0DA8 16 
0B0DA9 0B 
0B0DAA E6    0168** DW24  TIMEV_EX			; D1H
0B0DAB 16 
0B0DAC 0B 
0B0DAD 0F    0169** DW24  LOMEMV_EX			; D2H
0B0DAE 17 
0B0DAF 0B 
0B0DB0 28    0170** DW24  HIMEMV_EX			; D3H
0B0DB1 17 
0B0DB2 0B 
0B0DB3 17    0171** DW24  SOUND			; D4H
0B0DB4 49 
0B0DB5 0B 
0B0DB6 B3    0172** DW24  BPUT			; D5H
0B0DB7 17 
0B0DB8 0B 
0B0DB9 CB    0173** DW24  CALL_			; D6H
0B0DBA 17 
0B0DBB 0B 
0B0DBC 3D    0174** DW24  CHAIN			; D7H
0B0DBD 0E 
0B0DBE 0B 
0B0DBF 88    0175** DW24  CLR			; D8H
0B0DC0 16 
0B0DC1 0B 
0B0DC2 A7    0176** DW24  CLOSE			; D9H
0B0DC3 17 
0B0DC4 0B 
0B0DC5 B3    0177** DW24  CLG			; DAH
0B0DC6 46 
0B0DC7 0B 
0B0DC8 5B    0178** DW24  CLS			; DBH
0B0DC9 16 
0B0DCA 0B 
0B0DCB 1C    0179** DW24  REM_EX             		; DCH: DATA
0B0DCC 0F 
0B0DCD 0B 
0B0DCE 1C    0180** DW24  REM_EX             		; DDH: DEF
0B0DCF 0F 
0B0DD0 0B 
0B0DD1 E2    0181** DW24  DIM_EX			; DEH
0B0DD2 0F 
0B0DD3 0B 
0B0DD4 DD    0182** DW24  DRAW			; DFH
0B0DD5 48 
0B0DD6 0B 
0B0DD7 B7    0183** DW24  END_			; E0H
0B0DD8 0E 
0B0DD9 0B 
0B0DDA 73    0184** DW24  ENDPRO			; E1H
0B0DDB 14 
0B0DDC 0B 
0B0DDD A8    0185** DW24  ENVEL			; E2H
0B0DDE 46 
0B0DDF 0B 
0B0DE0 88    0186** DW24  FOR_EX			; E3H
0B0DE1 12 
0B0DE2 0B 
0B0DE3 38    0187** DW24  GOSUB_EX			; E4H
0B0DE4 12 
0B0DE5 0B 
0B0DE6 1C    0188** DW24  GOTO_EX			; E5H
0B0DE7 12 
0B0DE8 0B 
0B0DE9 71    0189** DW24  GCOL			; E6H
0B0DEA 48 
0B0DEB 0B 
0B0DEC 27    0190** DW24  IF_			; E7H
0B0DED 16 
0B0DEE 0B 
0B0DEF 15    0191** DW24  INPUT			; E8H
0B0DF0 15 
0B0DF1 0B 
0B0DF2 3D    0192** DW24  LET			; E9H
0B0DF3 0F 
0B0DF4 0B 
0B0DF5 18    0193** DW24  LOCAL_EX_			; EAH
0B0DF6 14 
0B0DF7 0B 
0B0DF8 C3    0194** DW24  MODE			; EBH
0B0DF9 46 
0B0DFA 0B 
0B0DFB D5    0195** DW24  MOVE			; ECH
0B0DFC 48 
0B0DFD 0B 
0B0DFE D6    0196** DW24  NEXT_EX			; EDH
0B0DFF 12 
0B0E00 0B 
0B0E01 AF    0197** DW24  ON_EX_			; EEH
0B0E02 11 
0B0E03 0B 
0B0E04 81    0198** DW24  VDU			; EFH
0B0E05 17 
0B0E06 0B 
0B0E07 A3    0199** DW24  PLOT			; F0H
0B0E08 48 
0B0E09 0B 
0B0E0A B8    0200** DW24  PRINT_			; F1H
0B0E0B 10 
0B0E0C 0B 
0B0E0D 75    0201** DW24  PROC_EX			; F2H
0B0E0E 13 
0B0E0F 0B 
0B0E10 C7    0202** DW24  READ			; F3H
0B0E11 15 
0B0E12 0B 
0B0E13 1C    0203** DW24  REM_EX			; F4H
0B0E14 0F 
0B0E15 0B 
0B0E16 58    0204** DW24  REPEAT_EX			; F5H
0B0E17 12 
0B0E18 0B 
0B0E19 80    0205** DW24  REPOR			; F6H
0B0E1A 16 
0B0E1B 0B 
0B0E1C 92    0206** DW24  RESTOR_EX			; F7H
0B0E1D 16 
0B0E1E 0B 
0B0E1F 46    0207** DW24  RETURN			; F8H
0B0E20 12 
0B0E21 0B 
0B0E22 37    0208** DW24  RUN			; F9H
0B0E23 0E 
0B0E24 0B 
0B0E25 68    0209** DW24  STOP			; FAH
0B0E26 16 
0B0E27 0B 
0B0E28 BF    0210** DW24  COLOUR			; FBH
0B0E29 47 
0B0E2A 0B 
0B0E2B 63    0211** DW24  TRACE_EX			; FCH
0B0E2C 17 
0B0E2D 0B 
0B0E2E 62    0212** DW24  UNTIL_EX			; FDH
0B0E2F 12 
0B0E30 0B 
0B0E31 55    0213** DW24  WIDTHV			; FEH
0B0E32 17 
0B0E33 0B 
0B0E34 02    0214** DW24  CLI             		; FFH: OSCLI
0B0E35 0F 
0B0E36 0B 
             0215** 
             0216** ; RUN
             0217** ; RUN "filename"
             0218** ;
0B0E37 CD    0219** RUN:			CALL    TERMQ			; Standalone RUN command?
0B0E38 6B 
0B0E39 1A 
0B0E3A 0B 
0B0E3B 28    0220** JR      Z,RUN0			; Yes, so just RUN the code
0B0E3C 10 
             0221** 
             0222** ; CHAIN "filename"
             0223** ;
0B0E3D CD    0224** CHAIN:			CALL    EXPRS			; Get the filename
0B0E3E 06 
0B0E3F 06 
0B0E40 0B 
0B0E41 3E    0225** LD      A,CR			; Terminate it with a CR
0B0E42 0D 
0B0E43 12    0226** LD      (DE),A
0B0E44 ED    0227** CHAIN0:			LD      SP,(HIMEM)		; Reset SP
0B0E45 7B 
0B0E46 20 
0B0E47 50 
0B0E47 0B   
0B0E49 CD    0228** CALL    LOAD0			; And load the file in
0B0E4A 10 
0B0E4B 3B 
0B0E4C 0B 
             0229** ;
0B0E4D ED    0230** RUN0:			LD      SP,(HIMEM)      	; Prepare for RUN
0B0E4E 7B 
0B0E4F 20 
0B0E50 50 
0B0E50 0B   
0B0E52 DD    0231** LD      IX,RANDOM		; Pointer to the RANDOM sysvar
0B0E53 21 
0B0E54 38 
0B0E55 50 
0B0E55 0B   
0B0E57 ED    0232** @@:			LD      A, R			; Use the R register to seed the random number generator
0B0E58 5F 
0B0E59 28    0233** JR      Z, @B			; Loop unti we get a non-zero value in A
0B0E5A FC 
0B0E5B 07    0234** RLCA				; Rotate it
0B0E5C 07    0235** RLCA
0B0E5D DD    0236** LD      (IX+3),A		; And store
0B0E5E 77 
0B0E5F 03 
0B0E60 9F    0237** SBC     A,A			; Depending upon the C flag, this will either be 00h or FFh
0B0E61 DD    0238** LD      (IX+4),A		; And store
0B0E62 77 
0B0E63 04 
0B0E64 CD    0239** CALL    CLEAR
0B0E65 67 
0B0E66 3B 
0B0E67 0B 
0B0E68 21    0240** LD      HL,0			; Clear the error trap sysvar
0B0E69 00 
0B0E6A 00 
0B0E6B 00 
0B0E6C 22    0241** LD      (ERRTRP),HL
0B0E6D 2C 
0B0E6E 50 
0B0E6F 0B 
0B0E70 2A    0242** LD      HL,(PAGE_)		; Load HL with the start of program memory (PAGE)
0B0E71 14 
0B0E72 50 
0B0E73 0B 
0B0E74 3E    0243** LD      A,DATA_EX_			; The DATA token value
0B0E75 DC 
0B0E76 CD    0244** CALL    SEARCH_EX          	; Search for the first DATA token in the tokenised listing
0B0E77 3F 
0B0E78 1B 
0B0E79 0B 
0B0E7A 22    0245** LD      (DATPTR),HL     	; Set data pointer
0B0E7B 31 
0B0E7C 50 
0B0E7D 0B 
0B0E7E FD    0246** LD      IY,(PAGE_)		; Load IY with the start of program memory
0B0E7F 2A 
0B0E80 14 
0B0E81 50 
0B0E81 0B   
             0247** ;
0B0E83 CD    0248** XEQ0:			CALL    NEWLIN
0B0E84 CB 
0B0E85 0E 
0B0E86 0B 
0B0E87 FD    0249** XEQ:			LD      (ERRLIN),IY     	; Error pointer
0B0E88 22 
0B0E89 35 
0B0E8A 50 
0B0E8A 0B   
0B0E8C CD    0250** CALL    TRAP           		; Check keyboard
0B0E8D 5E 
0B0E8E 42 
0B0E8F 0B 
0B0E90 CD    0251** XEQ1:			CALL    NXT
0B0E91 61 
0B0E92 0D 
0B0E93 0B 
0B0E94 FD    0252** INC     IY
0B0E95 23 
0B0E96 FE    0253** CP      ':'             	; Seperator
0B0E97 3A 
0B0E98 28    0254** JR      Z,XEQ1
0B0E99 F6 
0B0E9A FE    0255** CP      CR
0B0E9B 0D 
0B0E9C 28    0256** JR      Z,XEQ0          	; New program line
0B0E9D E5 
0B0E9E D6    0257** SUB     TCMD_EX
0B0E9F C6 
0B0EA0 DA    0258** JP      C,LET0          	; Implied "LET"
0B0EA1 2B 
0B0EA2 0F 
0B0EA3 0B 
             0259** 
0B0EA4 01    0260** LD	BC, 3
0B0EA5 03 
0B0EA6 00 
0B0EA7 00 
0B0EA8 47    0261** LD	B, A
0B0EA9 ED    0262** MLT	BC
0B0EAA 4C 
0B0EAB 21    0263** LD	HL,CMDTAB
0B0EAC 89 
0B0EAD 0D 
0B0EAE 0B 
0B0EAF 09    0264** ADD	HL, BC
0B0EB0 ED    0265** LD	HL, (HL)		; Table entry
0B0EB1 27 
             0266** 
             0267** ;			ADD     A,A
             0268** ;			LD      C,A
             0269** ;			LD      B,0
             0270** ;			LD      HL,CMDTAB
             0271** ;			ADD     HL,BC
             0272** ;			LD      A,(HL)          	; Table entry
             0273** ;			INC     HL
             0274** ;			LD      H,(HL)
             0275** ;			LD      L,A
             0276** 
0B0EB2 CD    0277** CALL    NXT
0B0EB3 61 
0B0EB4 0D 
0B0EB5 0B 
0B0EB6 E9    0278** JP      (HL)            	; Execute the statement
             0279** 
             0280** ;END
             0281** ;
0B0EB7 CD    0282** END_:			CALL    SETLIN          ;FIND CURRENT LINE
0B0EB8 9F 
0B0EB9 3C 
0B0EBA 0B 
0B0EBB 7C    0283** LD      A,H
0B0EBC B5    0284** OR      L               ;DIRECT?
0B0EBD CA    0285** JP      Z,CLOOP
0B0EBE 71 
0B0EBF 33 
0B0EC0 0B 
0B0EC1 1E    0286** LD      E,0
0B0EC2 00 
0B0EC3 CD    0287** CALL    OSSHUT          ;CLOSE ALL FILES
0B0EC4 1C 
0B0EC5 46 
0B0EC6 0B 
0B0EC7 C3    0288** JP      WARM            ;"Ready"
0B0EC8 70 
0B0EC9 33 
0B0ECA 0B 
             0289** ;
0B0ECB FD    0290** NEWLIN:			LD      A,(IY+0)        ;A=LINE LENGTH
0B0ECC 7E 
0B0ECD 00 
0B0ECE 01    0291** LD      BC,3
0B0ECF 03 
0B0ED0 00 
0B0ED1 00 
0B0ED2 FD    0292** ADD     IY,BC
0B0ED3 09 
0B0ED4 B7    0293** OR      A
0B0ED5 28    0294** JR      Z,END_           ;LENGTH=0, EXIT
0B0ED6 E0 
0B0ED7 2A    0295** LD      HL,(TRACEN)
0B0ED8 26 
0B0ED9 50 
0B0EDA 0B 
0B0EDB 7C    0296** LD      A,H
0B0EDC B5    0297** OR      L
0B0EDD C8    0298** RET     Z
0B0EDE 11    0299** LD	DE, 0		;Clear DE
0B0EDF 00 
0B0EE0 00 
0B0EE1 00 
0B0EE2 FD    0300** LD      D,(IY-1)        ;DE = LINE NUMBER
0B0EE3 56 
0B0EE4 FF 
0B0EE5 FD    0301** LD      E,(IY-2)
0B0EE6 5E 
0B0EE7 FE 
0B0EE8 ED    0302** SBC     HL,DE
0B0EE9 52 
0B0EEA D8    0303** RET     C
0B0EEB EB    0304** EX      DE,HL
0B0EEC 3E    0305** LD      A,'['           ;TRACE
0B0EED 5B 
0B0EEE CD    0306** CALL    OUTCHR
0B0EEF 40 
0B0EF0 3C 
0B0EF1 0B 
0B0EF2 CD    0307** CALL    PBCDL
0B0EF3 E8 
0B0EF4 3C 
0B0EF5 0B 
0B0EF6 3E    0308** LD      A,']'
0B0EF7 5D 
0B0EF8 CD    0309** CALL    OUTCHR
0B0EF9 40 
0B0EFA 3C 
0B0EFB 0B 
0B0EFC 3E    0310** LD      A,' '
0B0EFD 20 
0B0EFE C3    0311** JP      OUTCHR
0B0EFF 40 
0B0F00 3C 
0B0F01 0B 
             0312** 
             0313** ; Routines for each statement -------------------------------------------------
             0314** 
             0315** ; OSCLI
             0316** ;
0B0F02 CD    0317** CLI:			CALL    EXPRS
0B0F03 06 
0B0F04 06 
0B0F05 0B 
0B0F06 3E    0318** LD      A,CR
0B0F07 0D 
0B0F08 12    0319** LD      (DE),A
0B0F09 21    0320** LD      HL,ACCS
0B0F0A 00 
0B0F0B 4D 
0B0F0C 0B 
0B0F0D CD    0321** CALL    OSCLI
0B0F0E 81 
0B0F0F 42 
0B0F10 0B 
0B0F11 C3    0322** JP      XEQ
0B0F12 87 
0B0F13 0E 
0B0F14 0B 
             0323** 
             0324** ; REM, *
             0325** ;
0B0F15 FD    0326** EXT_EX:			PUSH    IY
0B0F16 E5 
0B0F17 E1    0327** POP     HL
0B0F18 CD    0328** CALL    OSCLI
0B0F19 81 
0B0F1A 42 
0B0F1B 0B 
0B0F1C FD    0329** REM_EX:			PUSH    IY
0B0F1D E5 
0B0F1E E1    0330** POP     HL
0B0F1F 3E    0331** LD      A,CR
0B0F20 0D 
0B0F21 47    0332** LD      B,A
0B0F22 ED    0333** CPIR                    ;FIND LINE END
0B0F23 B1 
0B0F24 E5    0334** PUSH    HL
0B0F25 FD    0335** POP     IY
0B0F26 E1 
0B0F27 C3    0336** JP      XEQ0
0B0F28 83 
0B0F29 0E 
0B0F2A 0B 
             0337** 
             0338** ; [LET] var = expr
             0339** ;
0B0F2B FE    0340** LET0:			CP      ELSE_EX_-TCMD_EX
0B0F2C C5 
0B0F2D 28    0341** JR      Z,REM_EX
0B0F2E ED 
             0342** ; CP      ('*'-TCMD) & 0FFH
             0343** ; JR      Z,EXT_EX
             0344** ; CP      ('='-TCMD) & 0FFH
             0345** ; JR      Z,FNEND
             0346** ; CP      ('['-TCMD) & 0FFH
             0347** ; ez80asm doesn't like () in expressions
0B0F2F FE    0348** CP      '*'-TCMD_EX & 0FFH
0B0F30 64 
0B0F31 28    0349** JR      Z,EXT_EX
0B0F32 E2 
0B0F33 FE    0350** CP      '='-TCMD_EX & 0FFH
0B0F34 77 
0B0F35 28    0351** JR      Z,FNEND
0B0F36 5B 
0B0F37 FE    0352** CP      '['-TCMD_EX & 0FFH
0B0F38 95 
0B0F39 28    0353** JR      Z,ASM
0B0F3A 25 
0B0F3B FD    0354** DEC     IY
0B0F3C 2B 
0B0F3D CD    0355** LET:			CALL    ASSIGN			; Assign the variable
0B0F3E AF 
0B0F3F 18 
0B0F40 0B 
0B0F41 CA    0356** JP      Z,XEQ			; Return if Z as it is a numeric variable that has been assigned in ASSIGN
0B0F42 87 
0B0F43 0E 
0B0F44 0B 
0B0F45 38    0357** JR      C,SYNTAX        	; Return if C as it is an illegal variable
0B0F46 41 
             0358** ;
0B0F47 F5    0359** PUSH    AF              	; At this point we're dealing with a string type (A=81h)
0B0F48 CD    0360** CALL    EQUALS			; Check if the variable is followed by an '=' symbol; this will throw a 'Mistake' error if not
0B0F49 81 
0B0F4A 1A 
0B0F4B 0B 
0B0F4C E5    0361** PUSH    HL			; HL: Address of the variable
0B0F4D CD    0362** CALL    EXPRS
0B0F4E 06 
0B0F4F 06 
0B0F50 0B 
0B0F51 DD    0363** POP     IX			; IX: Address of the variable
0B0F52 E1 
0B0F53 F1    0364** POP     AF			; AF: The variable type
0B0F54 CD    0365** CALL    STACCS			; Copy the string from ACCS to the variable area
0B0F55 F1 
0B0F56 18 
0B0F57 0B 
0B0F58 C3    0366** XEQR:			JP      XEQ
0B0F59 87 
0B0F5A 0E 
0B0F5B 0B 
             0367** ;
0B0F5C CD    0368** ASM0:			CALL    NEWLIN
0B0F5D CB 
0B0F5E 0E 
0B0F5F 0B 
0B0F60 FD    0369** ASM:			LD      (ERRLIN),IY
0B0F61 22 
0B0F62 35 
0B0F63 50 
0B0F63 0B   
0B0F65 CD    0370** CALL    TRAP
0B0F66 5E 
0B0F67 42 
0B0F68 0B 
0B0F69 CD    0371** CALL    ASSEM
0B0F6A 8C 
0B0F6B 1B 
0B0F6C 0B 
0B0F6D 38    0372** JR      C,SYNTAX
0B0F6E 19 
0B0F6F FE    0373** CP      CR
0B0F70 0D 
0B0F71 28    0374** JR      Z,ASM0
0B0F72 E9 
0B0F73 21    0375** LD      HL,LISTON
0B0F74 40 
0B0F75 50 
0B0F76 0B 
0B0F77 7E    0376** LD      A,(HL)
0B0F78 E6    0377** AND     0FH
0B0F79 0F 
0B0F7A F6    0378** OR      B0H
0B0F7B B0 
0B0F7C 77    0379** LD      (HL),A
0B0F7D 18    0380** JR      XEQR
0B0F7E D9 
             0381** ;
0B0F7F CD    0382** VAR_:			CALL    GETVAR
0B0F80 2B 
0B0F81 3D 
0B0F82 0B 
0B0F83 C8    0383** RET     Z
0B0F84 D2    0384** JP      NC,PUTVAR
0B0F85 1A 
0B0F86 3D 
0B0F87 0B 
0B0F88 3E    0385** SYNTAX:			LD      A,16            ;"Syntax error"
0B0F89 10 
0B0F8A 18    0386** JR	ERROR0_EX
0B0F8B 02 
0B0F8C 3E    0387** ESCAPE:			LD      A,17            ;"Escape"
0B0F8D 11 
0B0F8E C3    0388** ERROR0_EX:			JP      ERROR_
0B0F8F 51 
0B0F90 3A 
0B0F91 0B 
             0389** 
             0390** ; =
             0391** ;
0B0F92 CD    0392** FNEND:			CALL    EXPR            ;FUNCTION RESULT
0B0F93 B8 
0B0F94 04 
0B0F95 0B 
0B0F96 43    0393** LD      B,E
0B0F97 EB    0394** EX      DE,HL
0B0F98 D9    0395** EXX                     ;SAVE RESULT
0B0F99 EB    0396** EX      DE,HL           ; IN DEB'C'D'E'
0B0F9A C1    0397** FNEND5:			POP     BC
0B0F9B 21    0398** LD      HL,LOCCHK
0B0F9C 49 
0B0F9D 1A 
0B0F9E 0B 
0B0F9F B7    0399** OR      A
0B0FA0 ED    0400** SBC     HL,BC
0B0FA1 42 
0B0FA2 28    0401** JR      Z,FNEND0        ;LOCAL VARIABLE
0B0FA3 1C 
0B0FA4 21    0402** LD      HL,FNCHK
0B0FA5 75 
0B0FA6 13 
0B0FA7 0B 
0B0FA8 B7    0403** OR      A
0B0FA9 ED    0404** SBC     HL,BC
0B0FAA 42 
0B0FAB 3E    0405** LD      A,7
0B0FAC 07 
0B0FAD 20    0406** JR      NZ,ERROR0_EX       ;"No FN"
0B0FAE DF 
0B0FAF FD    0407** POP     IY
0B0FB0 E1 
0B0FB1 FD    0408** LD      (ERRLIN),IY     ;IN CASE OF ERROR
0B0FB2 22 
0B0FB3 35 
0B0FB4 50 
0B0FB4 0B   
0B0FB6 EB    0409** EX      DE,HL
0B0FB7 D9    0410** EXX
0B0FB8 EB    0411** EX      DE,HL
0B0FB9 11    0412** LD      DE,ACCS
0B0FBA 00 
0B0FBB 4D 
0B0FBC 0B 
0B0FBD 58    0413** LD      E,B
0B0FBE 08    0414** EX      AF,AF'
0B0FBF C9    0415** RET
             0416** ;
0B0FC0 DD    0417** FNEND0:			POP     IX
0B0FC1 E1 
0B0FC2 C1    0418** POP     BC
0B0FC3 78    0419** LD      A,B
0B0FC4 B7    0420** OR      A
0B0FC5 FA    0421** JP      M,FNEND1        ;STRING
0B0FC6 D3 
0B0FC7 0F 
0B0FC8 0B 
0B0FC9 E1    0422** POP     HL
0B0FCA D9    0423** EXX
0B0FCB E1    0424** POP     HL
0B0FCC D9    0425** EXX
0B0FCD CD    0426** CALL    STORE
0B0FCE C7 
0B0FCF 18 
0B0FD0 0B 
0B0FD1 18    0427** JR      FNEND5
0B0FD2 C7 
0B0FD3 21    0428** FNEND1:			LD      HL,0
0B0FD4 00 
0B0FD5 00 
0B0FD6 00 
0B0FD7 39    0429** ADD     HL,SP
0B0FD8 D5    0430** PUSH    DE
0B0FD9 59    0431** LD      E,C
0B0FDA CD    0432** CALL    STORES
0B0FDB F5 
0B0FDC 18 
0B0FDD 0B 
0B0FDE D1    0433** POP     DE
0B0FDF F9    0434** LD      SP,HL
0B0FE0 18    0435** JR      FNEND5
0B0FE1 B8 
             0436** 
             0437** ; DIM var(dim1[,dim2[,...]])[,var(...]
             0438** ; DIM var expr[,var expr...]
             0439** ;
0B0FE2 CD    0440** DIM_EX:			CALL    GETVAR          	; Get the variable
0B0FE3 2B 
0B0FE4 3D 
0B0FE5 0B 
0B0FE6 DA    0441** JP      C,BADDIM		; Throw a "Bad Dim" error
0B0FE7 72 
0B0FE8 10 
0B0FE9 0B 
0B0FEA CA    0442** JP      Z,DIM4			; If Z then the command is DIM var% expr, so don't need to create an entity
0B0FEB 7C 
0B0FEC 10 
0B0FED 0B 
0B0FEE CD    0443** CALL    CREATE			; Create a new entity
0B0FEF 9F 
0B0FF0 3E 
0B0FF1 0B 
0B0FF2 E5    0444** PUSH    HL			; HL: Address of the entity
0B0FF3 DD    0445** POP     IX			; IX: Address of the entity
0B0FF4 E1 
0B0FF5 FD    0446** LD      A,(IY)			; Fetch the next character from the tokenised string
0B0FF6 7E 
0B0FF7 00 
0B0FF8 FE    0447** CP      '('			; Check for opening brackets
0B0FF9 28 
0B0FFA 7A    0448** LD      A,D			;  A: The dimension variable type (04h = Integer, 05h = Float, 81h = String)
0B0FFB 20    0449** JR      NZ,DIM4			; It is not a bracket; the command is DIM var expr
0B0FFC 7F 
             0450** ;
             0451** ; At this point we're reserving a variable array
             0452** ;
0B0FFD E5    0453** PUSH    HL			; HL: Address of the entity
0B0FFE F5    0454** PUSH    AF           	   	;  A: Entity type (04h = Integer, 05h = Float, 81h = String)
0B0FFF 11    0455** LD      DE,1			; DE: Total size of array accumulator (important for multi-dimensioned arrays)
0B1000 01 
0B1001 00 
0B1002 00 
0B1003 42    0456** LD      B,D			;  B: The number of dimensions in the array
             0457** ;
0B1004 FD    0458** DIM1:			INC     IY			; Skip to the next token
0B1005 23 
0B1006 C5    0459** PUSH    BC			; Stack the dimension counter
0B1007 D5    0460** PUSH    DE			; Stack the total size of array accumulator
0B1008 DD    0461** PUSH    IX			; Stack the entity address
0B1009 E5 
0B100A CD    0462** CALL    EXPRI           	; Fetch the size of this dimension
0B100B FB 
0B100C 05 
0B100D 0B 
0B100E CB    0463** BIT     7,H			; If it is negative then
0B100F 7C 
0B1010 20    0464** JR      NZ,BADDIM		; Throw a "Bad Dim" error
0B1011 60 
0B1012 D9    0465** EXX
0B1013 23    0466** INC     HL			; HL: Size of this dimension; increment (BBC BASIC DIMs are always one bigger)
0B1014 DD    0467** POP     IX			; IX: The entity address
0B1015 E1 
0B1016 DD    0468** INC     IX
0B1017 23 
0B1018 DD    0469** LD      (IX),L          	; Save the size of this dimension in the entity
0B1019 75 
0B101A 00 
0B101B DD    0470** INC     IX
0B101C 23 
0B101D DD    0471** LD      (IX),H
0B101E 74 
0B101F 00 
0B1020 C1    0472** POP     BC
0B1021 CD    0473** CALL    MUL16           	; HL = HL * BC (Number of Dimensions * Total size of array accumulator)
0B1022 63 
0B1023 1B 
0B1024 0B 
0B1025 38    0474** JR      C,NOROOM        	; Throw a "No Room" error if overflow
0B1026 4F 
0B1027 EB    0475** EX      DE,HL           	; DE: The new total size of array accumulator
0B1028 C1    0476** POP     BC
0B1029 04    0477** INC     B               	;  B: The dimension counter; increment
0B102A FD    0478** LD      A,(IY)			; Fetch the nex token
0B102B 7E 
0B102C 00 
0B102D FE    0479** CP      ','             	; Check for another dimension in the array
0B102E 2C 
0B102F 28    0480** JR      Z,DIM1			; And loop
0B1030 D3 
             0481** ;
0B1031 CD    0482** CALL    BRAKET          	; Check for closing bracket
0B1032 20 
0B1033 0D 
0B1034 0B 
0B1035 F1    0483** POP     AF              	; Restore the type
0B1036 DD    0484** INC     IX
0B1037 23 
0B1038 DD    0485** EX      (SP),IX
0B1039 E3 
0B103A DD    0486** LD      (IX),B          	; Number of dimensions
0B103B 70 
0B103C 00 
0B103D CD    0487** CALL    X4OR5           	; Dimension Accumulator Value * 4 or * 5 depending on type
0B103E 56 
0B103F 1B 
0B1040 0B 
0B1041 E1    0488** POP     HL			; Restore the entity address
0B1042 38    0489** JR      C,NOROOM		; Throw a "No Room" error if there is an overflow
0B1043 32 
             0490** ;
             0491** ; We now allocate the memory for the array
             0492** ;
0B1044 19    0493** DIM3:			ADD     HL,DE
0B1045 38    0494** JR      C,NOROOM
0B1046 2F 
0B1047 E5    0495** PUSH    HL
0B1048 24    0496** INC     H
0B1049 28    0497** JR      Z,NOROOM
0B104A 2B 
0B104B ED    0498** SBC     HL,SP
0B104C 72 
0B104D 30    0499** JR      NC,NOROOM       	; Throw an "Out of Space" error
0B104E 27 
0B104F E1    0500** POP     HL
0B1050 22    0501** LD      (FREE),HL
0B1051 1D 
0B1052 50 
0B1053 0B 
0B1054 7A    0502** DIM2:			LD      A,D
0B1055 B3    0503** OR      E
0B1056 28    0504** JR      Z,DIM5
0B1057 06 
0B1058 2B    0505** DEC     HL
0B1059 36    0506** LD      (HL),0         		; Initialise the array
0B105A 00 
0B105B 1B    0507** DEC     DE
0B105C 18    0508** JR      DIM2
0B105D F6 
0B105E CD    0509** DIM5:			CALL    NXT
0B105F 61 
0B1060 0D 
0B1061 0B 
0B1062 FE    0510** CP      ','            		; Another variable?
0B1063 2C 
0B1064 C2    0511** JP      NZ,XEQ
0B1065 87 
0B1066 0E 
0B1067 0B 
0B1068 FD    0512** INC     IY
0B1069 23 
0B106A CD    0513** CALL    NXT
0B106B 61 
0B106C 0D 
0B106D 0B 
0B106E C3    0514** JP      DIM_EX
0B106F E2 
0B1070 0F 
0B1071 0B 
             0515** ;
             0516** ; DIM errors
             0517** ;
0B1072 3E    0518** BADDIM:			LD      A,10            	; Throw a "Bad DIM" error
0B1073 0A 
0B1074 18    0519** JR	ERROR1_EX
0B1075 02 
0B1076 3E    0520** NOROOM:			LD      A,11            	; Throw a "DIM space" error
0B1077 0B 
0B1078 C3    0521** ERROR1_EX:			JP      ERROR_
0B1079 51 
0B107A 3A 
0B107B 0B 
             0522** ;
             0523** ; At this point we're reserving a block of memory, i.e.
             0524** ; DIM var expr[,var expr...]
             0525** ;
0B107C B7    0526** DIM4:			OR      A			;  A: The dimension variable type
0B107D 28    0527** JR      Z,BADDIM		; Throw "Bad Dim" if variable is an 8-bit indirection
0B107E F3 
0B107F FA    0528** JP      M,BADDIM        	; or a string
0B1080 72 
0B1081 10 
0B1082 0B 
0B1083 47    0529** LD      B,A			; Temporarily store the dimension variable type in B
0B1084 FD    0530** LD      A,(IY-1)		; Get the last character but one
0B1085 7E 
0B1086 FF 
0B1087 FE    0531** CP      ')'			; Check if it is a trailing bracket
0B1088 29 
0B1089 28    0532** JR      Z,BADDIM		; And throw a "Bad Dim" error if there is a trailing bracket
0B108A E7 
             0533** ;
0B108B 21    0534** LD	HL,0			; Clear HL
0B108C 00 
0B108D 00 
0B108E 00 
0B108F 3A    0535** LD	A,(FREE+0)		; HL: Lower 16 bits of FREE
0B1090 1D 
0B1091 50 
0B1092 0B 
0B1093 6F    0536** LD	L,A
0B1094 3A    0537** LD	A,(FREE+1)
0B1095 1E 
0B1096 50 
0B1097 0B 
0B1098 67    0538** LD	H,A
0B1099 78    0539** LD	A,B			; Restore the dimension variable type
0B109A D9    0540** EXX
0B109B 21    0541** LD	HL,0			; Clear HL
0B109C 00 
0B109D 00 
0B109E 00 
0B109F 47    0542** LD	B,A			; Temporarily store the dimension variable type in B
0B10A0 3A    0543** LD	A,(FREE+2)		; HL: Upper 8 bits of FREE (bits 16-23)
0B10A1 1F 
0B10A2 50 
0B10A3 0B 
0B10A4 6F    0544** LD	L,A
0B10A5 78    0545** LD	A,B			; Restore the dimension variable type
0B10A6 4C    0546** LD	C,H
0B10A7 CD    0547** CALL    STORE           	; Store the address
0B10A8 C7 
0B10A9 18 
0B10AA 0B 
0B10AB CD    0548** CALL    EXPRI			; Get the number of bytes to store
0B10AC FB 
0B10AD 05 
0B10AE 0B 
0B10AF D9    0549** EXX
0B10B0 23    0550** INC     HL			; Add one to it
0B10B1 EB    0551** EX      DE,HL
0B10B2 2A    0552** LD      HL,(FREE)
0B10B3 1D 
0B10B4 50 
0B10B5 0B 
0B10B6 18    0553** JR      DIM3			; Continue with the DIM
0B10B7 8C 
             0554** 
             0555** ; PRINT list...
             0556** ; PRINT #channel,list...
             0557** ;
0B10B8 FE    0558** PRINT_:			CP      '#'
0B10B9 23 
0B10BA 20    0559** JR      NZ,PRINT0
0B10BB 7C 
0B10BC CD    0560** CALL    CHNL            ;CHANNEL NO. = E
0B10BD 83 
0B10BE 1B 
0B10BF 0B 
0B10C0 CD    0561** PRNTN1:			CALL    NXT
0B10C1 61 
0B10C2 0D 
0B10C3 0B 
0B10C4 FE    0562** CP      ','
0B10C5 2C 
0B10C6 C2    0563** JP      NZ,XEQ
0B10C7 87 
0B10C8 0E 
0B10C9 0B 
0B10CA FD    0564** INC     IY
0B10CB 23 
0B10CC D5    0565** PUSH    DE
0B10CD CD    0566** CALL    EXPR            ;ITEM TO PRINT
0B10CE B8 
0B10CF 04 
0B10D0 0B 
0B10D1 08    0567** EX      AF,AF'
0B10D2 FA    0568** JP      M,PRNTN2        ;STRING
0B10D3 F8 
0B10D4 10 
0B10D5 0B 
0B10D6 D1    0569** POP     DE
0B10D7 C5    0570** PUSH    BC
0B10D8 D9    0571** EXX
0B10D9 7D    0572** LD      A,L
0B10DA D9    0573** EXX
0B10DB CD    0574** CALL    OSBPUT
0B10DC 2C 
0B10DD 46 
0B10DE 0B 
0B10DF D9    0575** EXX
0B10E0 7C    0576** LD      A,H
0B10E1 D9    0577** EXX
0B10E2 CD    0578** CALL    OSBPUT
0B10E3 2C 
0B10E4 46 
0B10E5 0B 
0B10E6 7D    0579** LD      A,L
0B10E7 CD    0580** CALL    OSBPUT
0B10E8 2C 
0B10E9 46 
0B10EA 0B 
0B10EB 7C    0581** LD      A,H
0B10EC CD    0582** CALL    OSBPUT
0B10ED 2C 
0B10EE 46 
0B10EF 0B 
0B10F0 C1    0583** POP     BC
0B10F1 79    0584** LD      A,C
0B10F2 CD    0585** CALL    OSBPUT
0B10F3 2C 
0B10F4 46 
0B10F5 0B 
0B10F6 18    0586** JR      PRNTN1
0B10F7 C8 
0B10F8 4B    0587** PRNTN2:			LD      C,E
0B10F9 D1    0588** POP     DE
0B10FA 21    0589** LD      HL,ACCS
0B10FB 00 
0B10FC 4D 
0B10FD 0B 
0B10FE 0C    0590** INC     C
0B10FF 0D    0591** PRNTN3:			DEC     C
0B1100 28    0592** JR      Z,PRNTN4
0B1101 0A 
0B1102 7E    0593** LD      A,(HL)
0B1103 23    0594** INC     HL
0B1104 C5    0595** PUSH    BC
0B1105 CD    0596** CALL    OSBPUT
0B1106 2C 
0B1107 46 
0B1108 0B 
0B1109 C1    0597** POP     BC
0B110A 18    0598** JR      PRNTN3
0B110B F3 
0B110C 3E    0599** PRNTN4:			LD      A,CR
0B110D 0D 
0B110E CD    0600** CALL    OSBPUT
0B110F 2C 
0B1110 46 
0B1111 0B 
0B1112 18    0601** JR      PRNTN1
0B1113 AC 
             0602** ;
0B1114 06    0603** PRINT6:			LD      B,2
0B1115 02 
0B1116 18    0604** JR      PRINTC
0B1117 27 
0B1118 01    0605** PRINT8:			LD      BC,100H
0B1119 00 
0B111A 01 
0B111B 00 
0B111C 18    0606** JR      PRINTC
0B111D 21 
0B111E 21    0607** PRINT9:			LD      HL,STAVAR
0B111F 00 
0B1120 4F 
0B1121 0B 
0B1122 AF    0608** XOR     A
0B1123 BE    0609** CP      (HL)
0B1124 28    0610** JR      Z,PRINT0
0B1125 12 
0B1126 3A    0611** LD      A,(COUNT)
0B1127 3D 
0B1128 50 
0B1129 0B 
0B112A B7    0612** OR      A
0B112B 28    0613** JR      Z,PRINT0
0B112C 0B 
0B112D 96    0614** PRINTA:			SUB     (HL)
0B112E 28    0615** JR      Z,PRINT0
0B112F 08 
0B1130 30    0616** JR      NC,PRINTA
0B1131 FB 
0B1132 ED    0617** NEG
0B1133 44 
0B1134 CD    0618** CALL    FILL
0B1135 E0 
0B1136 1A 
0B1137 0B 
0B1138 3A    0619** PRINT0:			LD      A,(STAVAR)
0B1139 00 
0B113A 4F 
0B113B 0B 
0B113C 4F    0620** LD      C,A             ;PRINTS
0B113D 06    0621** LD      B,0             ;PRINTF
0B113E 00 
0B113F CD    0622** PRINTC:			CALL    TERMQ
0B1140 6B 
0B1141 1A 
0B1142 0B 
0B1143 28    0623** JR      Z,PRINT4
0B1144 3F 
0B1145 CB    0624** RES     0,B
0B1146 80 
0B1147 FD    0625** INC     IY
0B1148 23 
0B1149 FE    0626** CP      '~'
0B114A 7E 
0B114B 28    0627** JR      Z,PRINT6
0B114C C7 
0B114D FE    0628** CP      ';'
0B114E 3B 
0B114F 28    0629** JR      Z,PRINT8
0B1150 C7 
0B1151 FE    0630** CP      ','
0B1152 2C 
0B1153 28    0631** JR      Z,PRINT9
0B1154 C9 
0B1155 CD    0632** CALL    FORMAT          ;SPC, TAB, '
0B1156 90 
0B1157 1A 
0B1158 0B 
0B1159 28    0633** JR      Z,PRINTC
0B115A E4 
0B115B FD    0634** DEC     IY
0B115C 2B 
0B115D C5    0635** PUSH    BC
0B115E CD    0636** CALL    EXPR            ;VARIABLE TYPE
0B115F B8 
0B1160 04 
0B1161 0B 
0B1162 08    0637** EX      AF,AF'
0B1163 FA    0638** JP      M,PRINT3        ;STRING
0B1164 7D 
0B1165 11 
0B1166 0B 
0B1167 D1    0639** POP     DE
0B1168 D5    0640** PUSH    DE
0B1169 CB    0641** BIT     1,D
0B116A 4A 
0B116B F5    0642** PUSH    AF
0B116C CC    0643** CALL    Z,STR           ;DECIMAL
0B116D 57 
0B116E 0C 
0B116F 0B 
0B1170 F1    0644** POP     AF
0B1171 C4    0645** CALL    NZ,HEXSTR       ;HEX
0B1172 0B 
0B1173 0C 
0B1174 0B 
0B1175 C1    0646** POP     BC
0B1176 C5    0647** PUSH    BC
0B1177 79    0648** LD      A,C
0B1178 93    0649** SUB     E
0B1179 D4    0650** CALL    NC,FILL         ;RIGHT JUSTIFY
0B117A E0 
0B117B 1A 
0B117C 0B 
0B117D C1    0651** PRINT3:			POP     BC
0B117E CD    0652** CALL    PTEXT           ;PRINT
0B117F EF 
0B1180 1A 
0B1181 0B 
0B1182 18    0653** JR      PRINTC
0B1183 BB 
0B1184 CB    0654** PRINT4:			BIT     0,B
0B1185 40 
0B1186 CC    0655** CALL    Z,CRLF
0B1187 38 
0B1188 3C 
0B1189 0B 
0B118A C3    0656** JP      XEQ
0B118B 87 
0B118C 0E 
0B118D 0B 
             0657** 
             0658** ; ON ERROR statement [:statement...]
             0659** ; ON ERROR OFF
             0660** ;
0B118E FD    0661** ONERR:			INC     IY              ;SKIP "ERROR"
0B118F 23 
0B1190 21    0662** LD      HL,0
0B1191 00 
0B1192 00 
0B1193 00 
0B1194 22    0663** LD      (ERRTRP),HL
0B1195 2C 
0B1196 50 
0B1197 0B 
0B1198 CD    0664** CALL    NXT
0B1199 61 
0B119A 0D 
0B119B 0B 
0B119C FE    0665** CP      OFF_
0B119D 87 
0B119E FD    0666** INC     IY
0B119F 23 
0B11A0 CA    0667** JP      Z,XEQ
0B11A1 87 
0B11A2 0E 
0B11A3 0B 
0B11A4 FD    0668** DEC     IY
0B11A5 2B 
0B11A6 FD    0669** LD      (ERRTRP),IY
0B11A7 22 
0B11A8 2C 
0B11A9 50 
0B11A9 0B   
0B11AB C3    0670** JP      REM_EX
0B11AC 1C 
0B11AD 0F 
0B11AE 0B 
             0671** 
             0672** ; ON expr GOTO line[,line...] [ELSE statement]
             0673** ; ON expr GOTO line[,line...] [ELSE line]
             0674** ; ON expr GOSUB line[,line...] [ELSE statement]
             0675** ; ON expr GOSUB line[,line...] [ELSE line]
             0676** ; ON expr PROCone [,PROCtwo..] [ELSE PROCotherwise]
             0677** ;
0B11AF FE    0678** ON_EX_:			CP      TERROR_EX
0B11B0 85 
0B11B1 28    0679** JR      Z,ONERR         ;"ON ERROR"
0B11B2 DB 
0B11B3 CD    0680** CALL    EXPRI
0B11B4 FB 
0B11B5 05 
0B11B6 0B 
0B11B7 FD    0681** LD      A,(IY)
0B11B8 7E 
0B11B9 00 
0B11BA FD    0682** INC     IY
0B11BB 23 
0B11BC 1E    0683** LD      E,','           ;SEPARATOR
0B11BD 2C 
0B11BE FE    0684** CP      TGOTO
0B11BF E5 
0B11C0 28    0685** JR      Z,ON1
0B11C1 0B 
0B11C2 FE    0686** CP      TGOSUB
0B11C3 E4 
0B11C4 28    0687** JR      Z,ON1
0B11C5 07 
0B11C6 1E    0688** LD      E,TPROC
0B11C7 F2 
0B11C8 BB    0689** CP      E
0B11C9 3E    0690** LD      A,39
0B11CA 27 
0B11CB 20    0691** JR      NZ,ERROR2_EX       ;"ON syntax"
0B11CC 45 
0B11CD 57    0692** ON1:			LD      D,A
0B11CE D9    0693** EXX
0B11CF E5    0694** PUSH    HL
0B11D0 D9    0695** EXX
0B11D1 C1    0696** POP     BC              ;ON INDEX
0B11D2 78    0697** LD      A,B
0B11D3 B4    0698** OR      H
0B11D4 B5    0699** OR      L
0B11D5 20    0700** JR      NZ,ON4          ;OUT OF RANGE
0B11D6 2A 
0B11D7 B1    0701** OR      C
0B11D8 28    0702** JR      Z,ON4
0B11D9 27 
0B11DA 0D    0703** DEC     C
0B11DB 28    0704** JR      Z,ON3           ;INDEX=1
0B11DC 0E 
0B11DD CD    0705** ON2:			CALL    TERMQ
0B11DE 6B 
0B11DF 1A 
0B11E0 0B 
0B11E1 28    0706** JR      Z,ON4           ;OUT OF RANGE
0B11E2 1E 
0B11E3 FD    0707** INC     IY              ;SKIP DELIMITER
0B11E4 23 
0B11E5 BB    0708** CP      E
0B11E6 20    0709** JR      NZ,ON2
0B11E7 F5 
0B11E8 0D    0710** DEC     C
0B11E9 20    0711** JR      NZ,ON2
0B11EA F2 
0B11EB 7B    0712** ON3:			LD      A,E
0B11EC FE    0713** CP      TPROC
0B11ED F2 
0B11EE 28    0714** JR      Z,ONPROC
0B11EF 26 
0B11F0 D5    0715** PUSH    DE
0B11F1 CD    0716** CALL    ITEMI           ;LINE NUMBER
0B11F2 16 
0B11F3 06 
0B11F4 0B 
0B11F5 D1    0717** POP     DE
0B11F6 7A    0718** LD      A,D
0B11F7 FE    0719** CP      TGOTO
0B11F8 E5 
0B11F9 28    0720** JR      Z,GOTO2
0B11FA 2D 
0B11FB CD    0721** CALL    SPAN            ;SKIP REST OF LIST
0B11FC 78 
0B11FD 1A 
0B11FE 0B 
0B11FF 18    0722** JR      GOSUB1
0B1200 3B 
             0723** ;
0B1201 FD    0724** ON4:			LD      A,(IY)
0B1202 7E 
0B1203 00 
0B1204 FD    0725** INC     IY
0B1205 23 
0B1206 FE    0726** CP      ELSE_EX_
0B1207 8B 
0B1208 CA    0727** JP      Z,IF1           ;ELSE CLAUSE
0B1209 3C 
0B120A 16 
0B120B 0B 
0B120C FE    0728** CP      CR
0B120D 0D 
0B120E 20    0729** JR      NZ,ON4
0B120F F1 
0B1210 3E    0730** LD      A,40
0B1211 28 
0B1212 C3    0731** ERROR2_EX:			JP      ERROR_           ;"ON range"
0B1213 51 
0B1214 3A 
0B1215 0B 
             0732** ;
0B1216 3E    0733** ONPROC:			LD      A,TON
0B1217 EE 
0B1218 C3    0734** JP      PROC_EX
0B1219 75 
0B121A 13 
0B121B 0B 
             0735** 
             0736** ; GOTO line
             0737** ;
0B121C CD    0738** GOTO_EX:			CALL    ITEMI           	; Fetch the line number
0B121D 16 
0B121E 06 
0B121F 0B 
0B1220 CD    0739** GOTO1:			CALL    TERMQ			; Check for terminator
0B1221 6B 
0B1222 1A 
0B1223 0B 
0B1224 C2    0740** JP      NZ,SYNTAX		; Throw a "Syntax Error" if not found
0B1225 88 
0B1226 0F 
0B1227 0B 
0B1228 D9    0741** GOTO2:			EXX
0B1229 CD    0742** CALL    FINDL			; HL: Line number - Find the line
0B122A 80 
0B122B 3C 
0B122C 0B 
0B122D E5    0743** PUSH    HL			; HL: Address of the line
0B122E FD    0744** POP     IY			; IY = HL
0B122F E1 
0B1230 CA    0745** JP      Z,XEQ0			; If the line is found, then continue execution at that point
0B1231 83 
0B1232 0E 
0B1233 0B 
0B1234 3E    0746** LD      A,41			; Otherwise throw a "No such line" error
0B1235 29 
0B1236 18    0747** JR      ERROR2_EX
0B1237 DA 
             0748** 
             0749** ; GOSUB line
             0750** ; This pushes the following data onto the execution stack
             0751** ; - 3 bytes: Current execution address
             0752** ; - 3 bytes: Marker (the address of label GOSCHK)
             0753** ;
0B1238 CD    0754** GOSUB_EX:			CALL    ITEMI			; Fetch the line number
0B1239 16 
0B123A 06 
0B123B 0B 
0B123C FD    0755** GOSUB1:			PUSH    IY              	; Push the current execution address onto the execution stack
0B123D E5 
0B123E CD    0756** CALL    CHECK           	; Check there is enough room
0B123F 40 
0B1240 19 
0B1241 0B 
0B1242 CD    0757** CALL    GOTO1           	; Push the marker (address of GOSCHK) onto the execution stack and GOTO the line number
0B1243 20 
0B1244 12 
0B1245 0B 
             0758** GOSCHK:			EQU     $
             0759** 
             0760** ; RETURN
             0761** ; This pops the following data off the execution stack as pushed by GOSUB
             0762** ; - 3 bytes: Marker (should be the address of label GOSCHK)
             0763** ; - 3 bytes: The return execution address
             0764** ;
0B1246 D1    0765** RETURN:			POP     DE			; Pop the marker off the execution stack
0B1247 21    0766** LD      HL,GOSCHK		; Compare with GOSCHK
0B1248 46 
0B1249 12 
0B124A 0B 
0B124B B7    0767** OR      A
0B124C ED    0768** SBC     HL,DE
0B124D 52 
0B124E FD    0769** POP     IY			; Pop the return address off the execution stack
0B124F E1 
0B1250 CA    0770** JP      Z,XEQ			; Provided this has been called by a GOSUB then continue execution at the return address
0B1251 87 
0B1252 0E 
0B1253 0B 
0B1254 3E    0771** LD      A,38			; Otherwise throw a "No GOSUB" error
0B1255 26 
0B1256 18    0772** JR      ERROR2_EX
0B1257 BA 
             0773** 
             0774** ; REPEAT
             0775** ; This pushes the following data onto the execution stack
             0776** ; - 3 bytes: Current execution address
             0777** ; - 3 bytes: Marker (the address of label REPCHK)
             0778** ;
0B1258 FD    0779** REPEAT_EX:			PUSH    IY			; Push the current execution address onto the execution stack
0B1259 E5 
0B125A CD    0780** CALL    CHECK			; Check if there is enough room
0B125B 40 
0B125C 19 
0B125D 0B 
0B125E CD    0781** CALL    XEQ			; Push the marker (address of REPCHK) onto the execution stack and continue execution
0B125F 87 
0B1260 0E 
0B1261 0B 
             0782** REPCHK:			EQU     $
             0783** 
             0784** ; UNTIL expr
             0785** ; This pops the following data off the execution stack
             0786** ; - 3 bytes: Marker (should be the address of label REPCHK)
             0787** ; - 3 bytes: The address of the REPEAT instruction
             0788** ; It also ensures that the data is pushed back on for subsequent UNTIL instructions
             0789** ;
0B1262 C1    0790** UNTIL_EX:			POP     BC			; Fetch the marker
0B1263 C5    0791** PUSH    BC			; And push it back onto the execution stack
0B1264 21    0792** LD      HL,REPCHK		; Compare with REPCHK
0B1265 62 
0B1266 12 
0B1267 0B 
0B1268 B7    0793** OR      A
0B1269 ED    0794** SBC     HL,BC
0B126A 42 
0B126B 3E    0795** LD      A,43
0B126C 2B 
0B126D 20    0796** JR      NZ,ERROR2_EX		; Throw a "No REPEAT" if this value does not match
0B126E A3 
0B126F CD    0797** CALL    EXPRI			; Fetch the expression
0B1270 FB 
0B1271 05 
0B1272 0B 
0B1273 CD    0798** CALL    TEST			; Test if the expression evaluates to zero
0B1274 D0 
0B1275 0B 
0B1276 0B 
0B1277 C1    0799** POP     BC			; Pop the marker
0B1278 D1    0800** POP     DE			; Pop the address of the REPEAT instruction
0B1279 20    0801** JR      NZ,XEQ2         	; If it is TRUE, then continue execution after the UNTIL instruction (we're done looping)
0B127A 05 
0B127B D5    0802** PUSH    DE			; Push the address of the REPEAT instruction back on the stack
0B127C C5    0803** PUSH    BC			; Push the marker back on the stack
0B127D D5    0804** PUSH    DE			; IY = DE
0B127E FD    0805** POP     IY			; This sets the execution address back to the REPEAT instruction
0B127F E1 
0B1280 C3    0806** XEQ2:			JP      XEQ			; Continue execution
0B1281 87 
0B1282 0E 
0B1283 0B 
             0807** 
             0808** ; FOR var = expr TO expr [STEP expr]
             0809** ; This pushes the following data onto the execution stack
             0810** ; - 3 bytes: The limit value
             0811** ; - 3 bytes: The step value
             0812** ; - 3 bytes: The current execution address
             0813** ; - 3 bytes: The address of the loop variable
             0814** ; - 3 bytes: Marker (the address of FORCHK)
             0815** ;
0B1284 3E    0816** FORVAR:			LD      A,34
0B1285 22 
0B1286 18    0817** JR      ERROR2_EX          	; Throw "FOR variable" error
0B1287 8A 
             0818** ;
0B1288 CD    0819** FOR_EX:			CALL    ASSIGN			; Assign the START expression value to a variable
0B1289 AF 
0B128A 18 
0B128B 0B 
0B128C 20    0820** JR      NZ,FORVAR       	; If the variable is a string, or invalid, then throw a "FOR variable" error
0B128D F6 
0B128E F5    0821** PUSH    AF              	; Save the variable type
0B128F FD    0822** LD      A,(IY)			; Check the next token
0B1290 7E 
0B1291 00 
0B1292 FE    0823** CP      TO_EX			; Compare with the token value for "TO"
0B1293 B8 
0B1294 3E    0824** LD      A,36			; Set the error code to 36 ("No TO")
0B1295 24 
0B1296 C2    0825** JP      NZ,ERROR2_EX       	; And throw the error if that token is missing
0B1297 12 
0B1298 12 
0B1299 0B 
0B129A FD    0826** INC     IY			; Skip to the next token
0B129B 23 
             0827** ;
0B129C DD    0828** PUSH    IX
0B129D E5 
0B129E CD    0829** CALL    EXPRN           	; Fetch the LIMIT expression value
0B129F F3 
0B12A0 05 
0B12A1 0B 
0B12A2 DD    0830** POP     IX
0B12A3 E1 
0B12A4 F1    0831** POP     AF
0B12A5 47    0832** LD      B,A             	; B: LIMIT value type (04h = Integer, 05h = Float)
0B12A6 C5    0833** PUSH    BC              	; Stack the LIMIT value
0B12A7 E5    0834** PUSH    HL
0B12A8 21    0835** LD      HL,0
0B12A9 00 
0B12AA 00 
0B12AB 00 
0B12AC 4C    0836** LD      C,H
0B12AD D9    0837** EXX
0B12AE E5    0838** PUSH    HL
             0839** ;
0B12AF 21    0840** LD      HL,1            	; The preset STEP value is 1
0B12B0 01 
0B12B1 00 
0B12B2 00 
0B12B3 D9    0841** EXX
0B12B4 FD    0842** LD      A,(IY)			; Fetch the next token
0B12B5 7E 
0B12B6 00 
0B12B7 FE    0843** CP      STEP			; Compare with the token value for "STEP"
0B12B8 88 
0B12B9 20    0844** JR      NZ,FOR1			; If there is no STEP token, then skip the next bit
0B12BA 0A 
             0845** ;
0B12BB FD    0846** INC     IY			; Skip past the STEP token
0B12BC 23 
0B12BD DD    0847** PUSH    IX
0B12BE E5 
0B12BF CD    0848** CALL    EXPRN          		; Fetch the STEP expression value
0B12C0 F3 
0B12C1 05 
0B12C2 0B 
0B12C3 DD    0849** POP     IX
0B12C4 E1 
             0850** ;
0B12C5 C5    0851** FOR1:			PUSH    BC			; Stack the STEP value
0B12C6 E5    0852** PUSH    HL
0B12C7 D9    0853** EXX
0B12C8 E5    0854** PUSH    HL
0B12C9 D9    0855** EXX
             0856** ;
0B12CA FD    0857** PUSH    IY              	; Stack the current execution address
0B12CB E5 
0B12CC DD    0858** PUSH    IX              	; Stack the loop variable
0B12CD E5 
0B12CE CD    0859** CALL    CHECK
0B12CF 40 
0B12D0 19 
0B12D1 0B 
0B12D2 CD    0860** CALL    XEQ
0B12D3 87 
0B12D4 0E 
0B12D5 0B 
             0861** FORCHK:			EQU     $
             0862** 
             0863** ; NEXT [var[,var...]]
             0864** ; This pops the following data off the execution stack
             0865** ; - 3 bytes: Marker (the address of FORCHK)
             0866** ; - 3 bytes: The address of the loop variable
             0867** ; - 3 bytes: The current execution address
             0868** ; - 3 bytes: The step value
             0869** ; - 3 bytes: The limit value
             0870** ; It also ensures that the data is pushed back on for subsequent NEXT instructions
             0871** ;
0B12D6 C1    0872** NEXT_EX:			POP     BC              	; Pop the marker off the execution stack
0B12D7 21    0873** LD      HL,FORCHK		; Compare with FORCHK
0B12D8 D6 
0B12D9 12 
0B12DA 0B 
0B12DB B7    0874** OR      A
0B12DC ED    0875** SBC     HL,BC
0B12DD 42 
0B12DE 3E    0876** LD      A,32
0B12DF 20 
0B12E0 C2    0877** JP      NZ,ERROR3_EX      		; If this does not match, throw a "No FOR" error
0B12E1 6C 
0B12E2 13 
0B12E3 0B 
0B12E4 CD    0878** CALL    TERMQ			; Check for terminator (a NEXT without a variable)
0B12E5 6B 
0B12E6 1A 
0B12E7 0B 
0B12E8 E1    0879** POP     HL			; Pop the address of the loop variable off the execution stack
0B12E9 E5    0880** PUSH    HL			; Push it back onto the execution stack
0B12EA C5    0881** PUSH    BC			; Push the marker back onto the execution stack
0B12EB E5    0882** PUSH    HL			; HL: Address of the loop variable off the stack
0B12EC C4    0883** CALL    NZ,GETVAR       	; If there is no terminator, get the variable from the args
0B12ED 2B 
0B12EE 3D 
0B12EF 0B 
0B12F0 D1    0884** POP     DE			; DE: Address of the loop variable off the stack
0B12F1 EB    0885** EX      DE,HL			; HL: Address of the loop variable off the stack, DE: Address of the variable from args
0B12F2 B7    0886** OR      A
0B12F3 ED    0887** NEXT0:			SBC     HL,DE			; Compare to make sure that the variables match
0B12F4 52 
0B12F5 20    0888** JR      NZ,NEXT1		; They don't, so jump to NEXT1
0B12F6 61 
0B12F7 D5    0889** PUSH    DE
0B12F8 DD    0890** LD      IX,9+3			; IX: Address of the STEP value on the execution stack
0B12F9 21 
0B12FA 0C 
0B12FB 00 
0B12FB 00   
0B12FD DD    0891** ADD     IX,SP
0B12FE 39 
0B12FF CD    0892** CALL    DLOAD5_SPL      	; Load the STEP value
0B1300 D2 
0B1301 2C 
0B1302 0B 
0B1303 DD    0893** LD      A,(IX+16)       	; Get the STEP type
0B1304 7E 
0B1305 10 
0B1306 DD    0894** POP     IX
0B1307 E1 
0B1308 CD    0895** CALL    LOADN           	; Load the LOOP variable
0B1309 07 
0B130A 07 
0B130B 0B 
0B130C CB    0896** BIT     7,D             	; Check the sign
0B130D 7A 
0B130E F5    0897** PUSH    AF
0B130F 3E    0898** LD      A,'+' & 0FH
0B1310 0B 
0B1311 CD    0899** CALL    FPP             	; Add the STEP
0B1312 5B 
0B1313 23 
0B1314 0B 
0B1315 38    0900** JR      C,ERROR3_EX
0B1316 55 
0B1317 F1    0901** POP     AF              	; Restore TYPE
0B1318 F5    0902** PUSH    AF
0B1319 CD    0903** CALL    STORE           	; Update the variable
0B131A C7 
0B131B 18 
0B131C 0B 
0B131D DD    0904** LD      IX,18+3			; IX: Address of the LIMIT value on the execution stack
0B131E 21 
0B131F 15 
0B1320 00 
0B1320 00   
0B1322 DD    0905** ADD     IX,SP
0B1323 39 
0B1324 CD    0906** CALL    DLOAD5_SPL      	; Load the LIMIT value
0B1325 D2 
0B1326 2C 
0B1327 0B 
0B1328 F1    0907** POP     AF
0B1329 CC    0908** CALL    Z,SWAP			; Swap the arguments if the sign is ?
0B132A C8 
0B132B 0B 
0B132C 0B 
             0909** ; LD      A,0+('<'-4) & 0FH
0B132D 3E    0910** LD      A,0+'<'-4 & 0FH ; ez80asm doesn't do () in expressions
0B132E 08 
0B132F CD    0911** CALL    FPP             	; Test against the limit
0B1330 5B 
0B1331 23 
0B1332 0B 
0B1333 38    0912** JR      C,ERROR3_EX		; Throw an error if FPP returns bad
0B1334 37 
0B1335 24    0913** INC     H
0B1336 20    0914** JR      NZ,LOOP_        	; Keep looping
0B1337 14 
0B1338 21    0915** LD      HL,27			; Adjust the stack
0B1339 1B 
0B133A 00 
0B133B 00 
0B133C 39    0916** ADD     HL,SP
0B133D F9    0917** LD      SP,HL
0B133E CD    0918** CALL    NXT
0B133F 61 
0B1340 0D 
0B1341 0B 
0B1342 FE    0919** CP      ','			; Check for multiple variables
0B1343 2C 
0B1344 C2    0920** JP      NZ,XEQ			; No, so we are done at ths point
0B1345 87 
0B1346 0E 
0B1347 0B 
0B1348 FD    0921** INC     IY			; Increment to the next variable
0B1349 23 
0B134A 18    0922** JR      NEXT_EX			; And continue
0B134B 8A 
             0923** ;
0B134C C1    0924** LOOP_:			POP     BC
0B134D D1    0925** POP     DE
0B134E FD    0926** POP     IY
0B134F E1 
0B1350 FD    0927** PUSH    IY
0B1351 E5 
0B1352 D5    0928** PUSH    DE
0B1353 C5    0929** PUSH    BC
0B1354 C3    0930** JP      XEQ
0B1355 87 
0B1356 0E 
0B1357 0B 
             0931** ;
0B1358 21    0932** NEXT1:			LD      HL,27			; TODO: What does this do?
0B1359 1B 
0B135A 00 
0B135B 00 
0B135C 39    0933** ADD     HL,SP
0B135D F9    0934** LD      SP,HL			; Adjust the stack
0B135E C1    0935** POP     BC
0B135F 21    0936** LD      HL,FORCHK
0B1360 D6 
0B1361 12 
0B1362 0B 
0B1363 ED    0937** SBC     HL,BC
0B1364 42 
0B1365 E1    0938** POP     HL              	; Variable pointer
0B1366 E5    0939** PUSH    HL
0B1367 C5    0940** PUSH    BC
0B1368 28    0941** JR      Z,NEXT0
0B1369 89 
             0942** ;
0B136A 3E    0943** LD      A,33
0B136B 21 
0B136C C3    0944** ERROR3_EX:			JP      ERROR_           	; Throw the error "Can't match FOR"
0B136D 51 
0B136E 3A 
0B136F 0B 
             0945** 
             0946** ; FNname
             0947** ; N.B. ENTERED WITH A <> TON
             0948** ;
0B1370 F5    0949** FN_EX:			PUSH    AF              	; Push A onto the stack; this'll be checked for the token ON (TON) in PROC5
0B1371 CD    0950** CALL    PROC1
0B1372 7A 
0B1373 13 
0B1374 0B 
             0951** FNCHK:			EQU     $			; This will never fall through as PROC1 will do a JP XEQ
             0952** 
             0953** ; PROCname
             0954** ; N.B. ENTERED WITH A = ON PROC FLAG (EEh or the first character of the token name)
             0955** ; This pushes the following data onto the execution stack
             0956** ; - 3 bytes: The return address for ENDPROC (initially the ON PROC FLAG)
             0957** ; - 3 bytes: Marker (the address of PROCHK)
             0958** ;
0B1375 F5    0959** PROC_EX:			PUSH    AF			; Push A onto the stack; this'll be checked for the token ON (TON) in PROC5,
0B1376 CD    0960** CALL    PROC1			; and is also space reserved on the stack for the return address
0B1377 7A 
0B1378 13 
0B1379 0B 
             0961** PROCHK:			EQU     $			; This will never fall through as PROC1 will do a JP XEQ
             0962** ;
0B137A CD    0963** PROC1:			CALL    CHECK			; Check there is space for this
0B137B 40 
0B137C 19 
0B137D 0B 
0B137E FD    0964** DEC     IY			; Decrement IY to the PROC token
0B137F 2B 
0B1380 FD    0965** PUSH    IY			; Stack the pointer
0B1381 E5 
0B1382 CD    0966** CALL    GETDEF			; Search for this PROC/FN entry in the dynamic area
0B1383 EC 
0B1384 3D 
0B1385 0B 
0B1386 C1    0967** POP     BC			; BC = IY
0B1387 28    0968** JR      Z,PROC4			; If found in the dynamic area then skip to PROC4
0B1388 41 
0B1389 3E    0969** LD      A,30
0B138A 1E 
0B138B 38    0970** JR      C,ERROR3_EX        	; Throw error "Bad call" if invalid PROC/FN call
0B138C DF 
             0971** ;
             0972** ; At this point the PROC/FN has not yet been registered in the dynamic area
             0973** ; So we need to search through the listing and find where the DEFPROC/FN is and save the address
             0974** ;
0B138D C5    0975** PUSH    BC			; BC: Still pointing to the PROC token in the tokenised line
0B138E 2A    0976** LD      HL,(PAGE_)		; HL: Start of program memory
0B138F 14 
0B1390 50 
0B1391 0B 
             0977** ;
0B1392 3E    0978** PROC2:			LD      A,DEF_			;  A: The token to search for
0B1393 DD 
0B1394 CD    0979** CALL    SEARCH_EX          	; Look for "DEF" as the first token in a program line
0B1395 3F 
0B1396 1B 
0B1397 0B 
0B1398 38    0980** JR      C,PROC3			; Not found, so jump to PROC3
0B1399 26 
0B139A E5    0981** PUSH    HL			; HL: Points to the DEF token in the DEFPROC
0B139B FD    0982** POP     IY			; IY = HL
0B139C E1 
0B139D FD    0983** INC     IY              	; Skip the DEF token
0B139E 23 
0B139F CD    0984** CALL    NXT			; And any whitespace
0B13A0 61 
0B13A1 0D 
0B13A2 0B 
0B13A3 CD    0985** CALL    GETDEF			; Search for this PROC/FN entry in the dynamic area
0B13A4 EC 
0B13A5 3D 
0B13A6 0B 
0B13A7 FD    0986** PUSH    IY
0B13A8 E5 
0B13A9 D1    0987** POP     DE			; DE: Points to the PROC/FN token in tokenised line of the DEFPROC
0B13AA 38    0988** JR      C,PROC6			; Skip if there is an error (neither FN or PROC first)
0B13AB 09 
0B13AC C4    0989** CALL    NZ,CREATE		; Create an entity in the dynamic area
0B13AD 9F 
0B13AE 3E 
0B13AF 0B 
0B13B0 FD    0990** PUSH    IY			; IY: Pointer to the DEFPROC/FN arguments
0B13B1 E5 
0B13B2 D1    0991** POP     DE			; DE = IY
0B13B3 ED    0992** LD	(HL),DE			; Save address
0B13B4 1F 
             0993** ;
0B13B5 EB    0994** PROC6:			EX      DE,HL			; HL: Address of the procedure
0B13B6 3E    0995** LD      A,CR			; The character to search for
0B13B7 0D 
0B13B8 01    0996** LD	BC,100h			; Only need to search 256 bytes or so ahead; maximum line length
0B13B9 00 
0B13BA 01 
0B13BB 00 
0B13BC ED    0997** CPIR                    	; Skip to next line
0B13BD B1 
0B13BE 18    0998** JR      PROC2			; Rinse, lather and repeat
0B13BF D2 
             0999** ;
             1000** ; At this point a DEF has not been found for the PROC/FN
             1001** ;
0B13C0 FD    1002** PROC3:			POP     IY              	; Restore the execution address
0B13C1 E1 
0B13C2 CD    1003** CALL    GETDEF			; Search for this PROC/FN entry in the dynamic area
0B13C3 EC 
0B13C4 3D 
0B13C5 0B 
0B13C6 3E    1004** LD      A,29
0B13C7 1D 
0B13C8 20    1005** JR      NZ,ERROR3_EX      		; Throw error "No such FN/PROC" if not found
0B13C9 A2 
             1006** ;
             1007** ; At this point we have a PROC/FN entry in the dynamic area
             1008** ;
0B13CA ED    1009** PROC4:			LD	DE,(HL)			; HL: Address of pointer; fetch entity address in DE
0B13CB 17 
0B13CC 21    1010** LD	HL,3
0B13CD 03 
0B13CE 00 
0B13CF 00 
0B13D0 39    1011** ADD     HL,SP
0B13D1 CD    1012** CALL    NXT             	; Allow space before "("
0B13D2 61 
0B13D3 0D 
0B13D4 0B 
0B13D5 D5    1013** PUSH    DE              	; Exchange DE and IY
0B13D6 FD    1014** EX      (SP),IY
0B13D7 E3 
0B13D8 FE    1015** CP      '('             	; Arguments?
0B13D9 28 
0B13DA D1    1016** POP     DE			; NB: This has been moved after the compare otherwise DE gets corrupted later? IDK why!?!
0B13DB 20    1017** JR      NZ,PROC5
0B13DC 20 
0B13DD CD    1018** CALL    NXT             	; Allow space before "("
0B13DE 61 
0B13DF 0D 
0B13E0 0B 
0B13E1 FE    1019** CP      '('
0B13E2 28 
0B13E3 C2    1020** JP      NZ,SYNTAX       	; Throw "Syntax error"
0B13E4 88 
0B13E5 0F 
0B13E6 0B 
0B13E7 FD    1021** PUSH    IY
0B13E8 E5 
0B13E9 C1    1022** POP     BC              	; Save IY in BC
0B13EA D9    1023** EXX
0B13EB CD    1024** CALL    SAVLOC          	; Save local parameters
0B13EC EB 
0B13ED 19 
0B13EE 0B 
0B13EF CD    1025** CALL    BRAKET          	; Closing bracket
0B13F0 20 
0B13F1 0D 
0B13F2 0B 
0B13F3 D9    1026** EXX
0B13F4 C5    1027** PUSH    BC
0B13F5 FD    1028** POP     IY              	; Restore IY
0B13F6 E1 
0B13F7 E5    1029** PUSH    HL
0B13F8 CD    1030** CALL    ARGUE           	; Transfer arguments
0B13F9 67 
0B13FA 19 
0B13FB 0B 
0B13FC E1    1031** POP     HL
             1032** ;
0B13FD 23    1033** PROC5:			INC	HL			; Increment to the ON PROC flag address
0B13FE 7E    1034** LD	A, (HL)			; And fetch the value
0B13FF 2B    1035** DEC 	HL
0B1400 ED    1036** LD	(HL), DE		; Save the ENDPROC return address pointer in the BASIC listing
0B1401 1F 
0B1402 FE    1037** CP	TON			; Was it "ON PROC"?
0B1403 EE 
0B1404 C2    1038** JP	NZ, XEQ			; No, so back to XEQ
0B1405 87 
0B1406 0E 
0B1407 0B 
0B1408 D5    1039** PUSH    DE			; Exchange DE and IY
0B1409 FD    1040** EX      (SP),IY
0B140A E3 
0B140B CD    1041** CALL    SPAN            	; Skip rest of ON list
0B140C 78 
0B140D 1A 
0B140E 0B 
0B140F FD    1042** EX      (SP),IY			; Exchange DE and IY
0B1410 E3 
0B1411 D1    1043** POP     DE
0B1412 ED    1044** LD	(HL), DE		; Save the return address
0B1413 1F 
0B1414 C3    1045** JP      XEQ
0B1415 87 
0B1416 0E 
0B1417 0B 
             1046** 
             1047** ; LOCAL var[,var...]
             1048** ;
0B1418 C1    1049** LOCAL_EX_:			POP     BC			; BC: The current check marker (on the stack)
0B1419 C5    1050** PUSH    BC
0B141A 21    1051** LD      HL,FNCHK		; Check if we are in a FN
0B141B 75 
0B141C 13 
0B141D 0B 
0B141E B7    1052** OR      A
0B141F ED    1053** SBC     HL,BC
0B1420 42 
0B1421 28    1054** JR      Z,LOCAL1		; Yes, so all good, we can use local
0B1422 16 
0B1423 21    1055** LD      HL,PROCHK		; Now check if we are in a PROC
0B1424 7A 
0B1425 13 
0B1426 0B 
0B1427 B7    1056** OR      A
0B1428 ED    1057** SBC     HL,BC
0B1429 42 
0B142A 28    1058** JR      Z,LOCAL1		; Again, all good, we can use local
0B142B 0D 
0B142C 21    1059** LD      HL,LOCCHK		; Finally check for the local parameters marker
0B142D 49 
0B142E 1A 
0B142F 0B 
0B1430 B7    1060** OR      A
0B1431 ED    1061** SBC     HL,BC			; If it is not present, then
0B1432 42 
0B1433 3E    1062** LD      A,12
0B1434 0C 
0B1435 C2    1063** JP      NZ,ERROR_        	; Then throw a "Not LOCAL" errr
0B1436 51 
0B1437 3A 
0B1438 0B 
             1064** ;
             1065** ; At this point we are adding a local variable into a PROC or FN
             1066** ;
0B1439 FD    1067** LOCAL1:			PUSH    IY			; IY: BASIC pointer
0B143A E5 
0B143B C1    1068** POP     BC			; BC: Copy of the BASIC pointer
0B143C D9    1069** EXX
0B143D FD    1070** DEC     IY
0B143E 2B 
0B143F CD    1071** CALL    SAVLOC
0B1440 EB 
0B1441 19 
0B1442 0B 
0B1443 D9    1072** EXX
0B1444 C5    1073** PUSH    BC
0B1445 FD    1074** POP     IY
0B1446 E1 
             1075** ;
0B1447 CD    1076** LOCAL2:			CALL    GETVAR			; Get the variable location
0B1448 2B 
0B1449 3D 
0B144A 0B 
0B144B C2    1077** JP      NZ,SYNTAX
0B144C 88 
0B144D 0F 
0B144E 0B 
0B144F B7    1078** OR      A               	; Check the variable type (80h = string)
0B1450 08    1079** EX      AF,AF'
0B1451 CD    1080** CALL    ZERO			; Zero the variable anyway
0B1452 84 
0B1453 0C 
0B1454 0B 
0B1455 08    1081** EX      AF,AF'
0B1456 F5    1082** PUSH    AF
0B1457 F4    1083** CALL    P,STORE         	; Call STORE if it is not a string
0B1458 C7 
0B1459 18 
0B145A 0B 
0B145B F1    1084** POP     AF
0B145C 59    1085** LD      E,C
0B145D FC    1086** CALL    M,STORES		; Call STORES if it is a string
0B145E F5 
0B145F 18 
0B1460 0B 
0B1461 CD    1087** CALL    NXT			; Skip to the next character in the expression
0B1462 61 
0B1463 0D 
0B1464 0B 
0B1465 FE    1088** CP      ','			; Is it a comma?
0B1466 2C 
0B1467 C2    1089** JP      NZ,XEQ			; No, so we're done, carry on executing
0B1468 87 
0B1469 0E 
0B146A 0B 
0B146B FD    1090** INC     IY			; Yes, so skip the comma
0B146C 23 
0B146D CD    1091** CALL    NXT			; And any whitespace
0B146E 61 
0B146F 0D 
0B1470 0B 
0B1471 18    1092** JR      LOCAL2			; Then loop back and handle any further local variables
0B1472 D4 
             1093** 
             1094** ; ENDPROC
             1095** ;
0B1473 C1    1096** ENDPRO:			POP     BC			; Pop the check value off the stack
0B1474 21    1097** LD      HL,LOCCHK		; Check if it is the LOCAL Marker
0B1475 49 
0B1476 1A 
0B1477 0B 
0B1478 B7    1098** OR      A
0B1479 ED    1099** SBC     HL,BC
0B147A 42 
0B147B 28    1100** JR      Z,UNSTK         	; Yes, it is, so first need to unstack the local variables
0B147C 13 
             1101** ;
0B147D 21    1102** LD      HL,PROCHK       	; Check if it is the PROC marker
0B147E 7A 
0B147F 13 
0B1480 0B 
0B1481 B7    1103** OR      A
0B1482 ED    1104** SBC     HL,BC
0B1483 42 
0B1484 FD    1105** POP     IY
0B1485 E1 
0B1486 CA    1106** JP      Z,XEQ			; Yes, it is, so carry on, all is good
0B1487 87 
0B1488 0E 
0B1489 0B 
0B148A 3E    1107** LD      A,13			; Otherwise throw the "No PROC" error
0B148B 0D 
0B148C C3    1108** JP      ERROR_
0B148D 51 
0B148E 3A 
0B148F 0B 
             1109** ;
0B1490 DD    1110** UNSTK:			POP     IX			; Unstack a single local variable
0B1491 E1 
0B1492 C1    1111** POP     BC
0B1493 78    1112** LD      A,B
0B1494 B7    1113** OR      A
0B1495 FA    1114** JP      M,UNSTK1        	; Jump here if it is a string? (80h)
0B1496 A3 
0B1497 14 
0B1498 0B 
0B1499 E1    1115** POP     HL			; Unstack a normal variable
0B149A D9    1116** EXX
0B149B E1    1117** POP     HL
0B149C D9    1118** EXX
0B149D CD    1119** CALL    STORE			; TODO: Not sure why or where it is being stored at this point
0B149E C7 
0B149F 18 
0B14A0 0B 
0B14A1 18    1120** JR      ENDPRO			; And loop back to ENDPRO
0B14A2 D0 
             1121** ;
0B14A3 21    1122** UNSTK1:			LD      HL,0			; Unstack a string
0B14A4 00 
0B14A5 00 
0B14A6 00 
0B14A7 39    1123** ADD     HL,SP
0B14A8 59    1124** LD      E,C
0B14A9 CD    1125** CALL    STORES			; TODO: Not sure why or where it is being stored at this point
0B14AA F5 
0B14AB 18 
0B14AC 0B 
0B14AD F9    1126** LD      SP,HL
0B14AE 18    1127** JR      ENDPRO
0B14AF C3 
             1128** 
             1129** ; INPUT #channel,var,var...
             1130** ;
0B14B0 CD    1131** INPUTN:			CALL    CHNL            ;E = CHANNEL NUMBER
0B14B1 83 
0B14B2 1B 
0B14B3 0B 
0B14B4 CD    1132** INPN1:			CALL    NXT
0B14B5 61 
0B14B6 0D 
0B14B7 0B 
0B14B8 FE    1133** CP      ','
0B14B9 2C 
0B14BA C2    1134** JP      NZ,XEQ
0B14BB 87 
0B14BC 0E 
0B14BD 0B 
0B14BE FD    1135** INC     IY
0B14BF 23 
0B14C0 CD    1136** CALL    NXT
0B14C1 61 
0B14C2 0D 
0B14C3 0B 
0B14C4 D5    1137** PUSH    DE
0B14C5 CD    1138** CALL    VAR_
0B14C6 7F 
0B14C7 0F 
0B14C8 0B 
0B14C9 D1    1139** POP     DE
0B14CA F5    1140** PUSH    AF              ;SAVE TYPE
0B14CB E5    1141** PUSH    HL              ;VARPTR
0B14CC B7    1142** OR      A
0B14CD FA    1143** JP      M,INPN2         ;STRING
0B14CE F9 
0B14CF 14 
0B14D0 0B 
0B14D1 CD    1144** CALL    OSBGET
0B14D2 24 
0B14D3 46 
0B14D4 0B 
0B14D5 D9    1145** EXX
0B14D6 6F    1146** LD      L,A
0B14D7 D9    1147** EXX
0B14D8 CD    1148** CALL    OSBGET
0B14D9 24 
0B14DA 46 
0B14DB 0B 
0B14DC D9    1149** EXX
0B14DD 67    1150** LD      H,A
0B14DE D9    1151** EXX
0B14DF CD    1152** CALL    OSBGET
0B14E0 24 
0B14E1 46 
0B14E2 0B 
0B14E3 6F    1153** LD      L,A
0B14E4 CD    1154** CALL    OSBGET
0B14E5 24 
0B14E6 46 
0B14E7 0B 
0B14E8 67    1155** LD      H,A
0B14E9 CD    1156** CALL    OSBGET
0B14EA 24 
0B14EB 46 
0B14EC 0B 
0B14ED 4F    1157** LD      C,A
0B14EE DD    1158** POP     IX
0B14EF E1 
0B14F0 F1    1159** POP     AF              ;RESTORE TYPE
0B14F1 D5    1160** PUSH    DE              ;SAVE CHANNEL
0B14F2 CD    1161** CALL    STORE
0B14F3 C7 
0B14F4 18 
0B14F5 0B 
0B14F6 D1    1162** POP     DE
0B14F7 18    1163** JR      INPN1
0B14F8 BB 
0B14F9 21    1164** INPN2:			LD      HL,ACCS
0B14FA 00 
0B14FB 4D 
0B14FC 0B 
0B14FD CD    1165** INPN3:			CALL    OSBGET
0B14FE 24 
0B14FF 46 
0B1500 0B 
0B1501 FE    1166** CP      CR
0B1502 0D 
0B1503 28    1167** JR      Z,INPN4
0B1504 04 
0B1505 77    1168** LD      (HL),A
0B1506 2C    1169** INC     L
0B1507 20    1170** JR      NZ,INPN3
0B1508 F4 
0B1509 DD    1171** INPN4:			POP     IX
0B150A E1 
0B150B F1    1172** POP     AF
0B150C D5    1173** PUSH    DE
0B150D EB    1174** EX      DE,HL
0B150E CD    1175** CALL    STACCS
0B150F F1 
0B1510 18 
0B1511 0B 
0B1512 D1    1176** POP     DE
0B1513 18    1177** JR      INPN1
0B1514 9F 
             1178** 
             1179** ; INPUT ['][SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
             1180** ; INPUT LINE [SPC(x)][TAB(x[,y])]["prompt",]var[,var...]
             1181** ;
0B1515 FE    1182** INPUT:			CP      '#'
0B1516 23 
0B1517 28    1183** JR      Z,INPUTN
0B1518 97 
0B1519 0E    1184** LD      C,0             ;FLAG PROMPT
0B151A 00 
0B151B FE    1185** CP      LINE_EX_
0B151C 86 
0B151D 20    1186** JR      NZ,INPUT0
0B151E 04 
0B151F FD    1187** INC     IY              ;SKIP "LINE"
0B1520 23 
0B1521 0E    1188** LD      C,80H
0B1522 80 
0B1523 21    1189** INPUT0:			LD      HL,BUFFER
0B1524 00 
0B1525 4E 
0B1526 0B 
0B1527 36    1190** LD      (HL),CR         ;INITIALISE EMPTY
0B1528 0D 
0B1529 CD    1191** INPUT1:			CALL    TERMQ
0B152A 6B 
0B152B 1A 
0B152C 0B 
0B152D CA    1192** JP      Z,XEQ           ;DONE
0B152E 87 
0B152F 0E 
0B1530 0B 
0B1531 FD    1193** INC     IY
0B1532 23 
0B1533 FE    1194** CP      ','
0B1534 2C 
0B1535 28    1195** JR      Z,INPUT3        ;SKIP COMMA
0B1536 5C 
0B1537 FE    1196** CP      ';'
0B1538 3B 
0B1539 28    1197** JR      Z,INPUT3
0B153A 58 
0B153B E5    1198** PUSH    HL              ;SAVE BUFFER POINTER
0B153C FE    1199** CP      34		;ASCII ""
0B153D 22 
0B153E 20    1200** JR      NZ,INPUT6
0B153F 0C 
0B1540 C5    1201** PUSH    BC
0B1541 CD    1202** CALL    CONS
0B1542 58 
0B1543 07 
0B1544 0B 
0B1545 C1    1203** POP     BC
0B1546 CD    1204** CALL    PTEXT           ;PRINT PROMPT
0B1547 EF 
0B1548 1A 
0B1549 0B 
0B154A 18    1205** JR      INPUT9
0B154B 06 
0B154C CD    1206** INPUT6:			CALL    FORMAT          ;SPC, TAB, '
0B154D 90 
0B154E 1A 
0B154F 0B 
0B1550 20    1207** JR      NZ,INPUT2
0B1551 05 
0B1552 E1    1208** INPUT9:			POP     HL
0B1553 CB    1209** SET     0,C             ;FLAG NO PROMPT
0B1554 C1 
0B1555 18    1210** JR      INPUT0
0B1556 CC 
0B1557 FD    1211** INPUT2:			DEC     IY
0B1558 2B 
0B1559 C5    1212** PUSH    BC
0B155A CD    1213** CALL    VAR_
0B155B 7F 
0B155C 0F 
0B155D 0B 
0B155E C1    1214** POP     BC
0B155F E1    1215** POP     HL
0B1560 F5    1216** PUSH    AF              ;SAVE TYPE
0B1561 7E    1217** LD      A,(HL)
0B1562 23    1218** INC     HL
0B1563 FE    1219** CP      CR              ;BUFFER EMPTY?
0B1564 0D 
0B1565 CC    1220** CALL    Z,REFILL
0B1566 97 
0B1567 15 
0B1568 0B 
0B1569 CB    1221** BIT     7,C
0B156A 79 
0B156B F5    1222** PUSH    AF
0B156C C4    1223** CALL    NZ,LINES
0B156D 11 
0B156E 1B 
0B156F 0B 
0B1570 F1    1224** POP     AF
0B1571 CC    1225** CALL    Z,FETCHS
0B1572 FE 
0B1573 1A 
0B1574 0B 
0B1575 F1    1226** POP     AF              ;RESTORE TYPE
0B1576 C5    1227** PUSH    BC
0B1577 E5    1228** PUSH    HL
0B1578 B7    1229** OR      A
0B1579 FA    1230** JP      M,INPUT4        ;STRING
0B157A 8D 
0B157B 15 
0B157C 0B 
0B157D F5    1231** PUSH    AF
0B157E DD    1232** PUSH    IX
0B157F E5 
0B1580 CD    1233** CALL    VAL0
0B1581 5F 
0B1582 09 
0B1583 0B 
0B1584 DD    1234** POP     IX
0B1585 E1 
0B1586 F1    1235** POP     AF
0B1587 CD    1236** CALL    STORE
0B1588 C7 
0B1589 18 
0B158A 0B 
0B158B 18    1237** JR      INPUT5
0B158C 04 
0B158D CD    1238** INPUT4:			CALL    STACCS
0B158E F1 
0B158F 18 
0B1590 0B 
0B1591 E1    1239** INPUT5:			POP     HL
0B1592 C1    1240** POP     BC
0B1593 CB    1241** INPUT3:			RES     0,C
0B1594 81 
0B1595 18    1242** JR      INPUT1
0B1596 92 
             1243** ;
0B1597 CB    1244** REFILL:			BIT     0,C
0B1598 41 
0B1599 20    1245** JR      NZ,REFIL0       ;NO PROMPT
0B159A 0C 
0B159B 3E    1246** LD      A,'?'
0B159C 3F 
0B159D CD    1247** CALL    OUTCHR          ;PROMPT
0B159E 40 
0B159F 3C 
0B15A0 0B 
0B15A1 3E    1248** LD      A,' '
0B15A2 20 
0B15A3 CD    1249** CALL    OUTCHR
0B15A4 40 
0B15A5 3C 
0B15A6 0B 
0B15A7 21    1250** REFIL0:			LD      HL,BUFFER
0B15A8 00 
0B15A9 4E 
0B15AA 0B 
0B15AB C5    1251** PUSH    BC
0B15AC E5    1252** PUSH    HL
0B15AD DD    1253** PUSH    IX
0B15AE E5 
0B15AF CD    1254** CALL    OSLINE
0B15B0 50 
0B15B1 41 
0B15B2 0B 
0B15B3 DD    1255** POP     IX
0B15B4 E1 
0B15B5 E1    1256** POP     HL
0B15B6 C1    1257** POP     BC
0B15B7 47    1258** LD      B,A             ;POS AT ENTRY
0B15B8 AF    1259** XOR     A
0B15B9 32    1260** LD      (COUNT),A
0B15BA 3D 
0B15BB 50 
0B15BC 0B 
0B15BD B8    1261** CP      B
0B15BE C8    1262** RET     Z
0B15BF 7E    1263** REFIL1:			LD      A,(HL)
0B15C0 FE    1264** CP      CR
0B15C1 0D 
0B15C2 C8    1265** RET     Z
0B15C3 23    1266** INC     HL
0B15C4 10    1267** DJNZ    REFIL1
0B15C5 F9 
0B15C6 C9    1268** RET
             1269** 
             1270** ; READ var[,var...]
             1271** ;
0B15C7 FE    1272** READ:			CP      '#'
0B15C8 23 
0B15C9 CA    1273** JP      Z,INPUTN
0B15CA B0 
0B15CB 14 
0B15CC 0B 
0B15CD 2A    1274** LD      HL,(DATPTR)
0B15CE 31 
0B15CF 50 
0B15D0 0B 
0B15D1 7E    1275** READ0:			LD      A,(HL)
0B15D2 23    1276** INC     HL              ;SKIP COMMA OR "DATA"
0B15D3 FE    1277** CP      CR              ;END OF DATA STMT?
0B15D4 0D 
0B15D5 CC    1278** CALL    Z,GETDAT
0B15D6 19 
0B15D7 16 
0B15D8 0B 
0B15D9 E5    1279** PUSH    HL
0B15DA CD    1280** CALL    VAR_
0B15DB 7F 
0B15DC 0F 
0B15DD 0B 
0B15DE E1    1281** POP     HL
0B15DF B7    1282** OR      A
0B15E0 FA    1283** JP      M,READ1         ;STRING
0B15E1 F9 
0B15E2 15 
0B15E3 0B 
0B15E4 E5    1284** PUSH    HL
0B15E5 FD    1285** EX      (SP),IY
0B15E6 E3 
0B15E7 F5    1286** PUSH    AF              ;SAVE TYPE
0B15E8 DD    1287** PUSH    IX
0B15E9 E5 
0B15EA CD    1288** CALL    EXPRN
0B15EB F3 
0B15EC 05 
0B15ED 0B 
0B15EE DD    1289** POP     IX
0B15EF E1 
0B15F0 F1    1290** POP     AF
0B15F1 CD    1291** CALL    STORE
0B15F2 C7 
0B15F3 18 
0B15F4 0B 
0B15F5 FD    1292** EX      (SP),IY
0B15F6 E3 
0B15F7 18    1293** JR      READ2
0B15F8 09 
0B15F9 CD    1294** READ1:			CALL    FETCHS
0B15FA FE 
0B15FB 1A 
0B15FC 0B 
0B15FD E5    1295** PUSH    HL
0B15FE CD    1296** CALL    STACCS
0B15FF F1 
0B1600 18 
0B1601 0B 
0B1602 E1    1297** READ2:			POP     HL
0B1603 22    1298** LD      (DATPTR),HL
0B1604 31 
0B1605 50 
0B1606 0B 
0B1607 CD    1299** CALL    NXT
0B1608 61 
0B1609 0D 
0B160A 0B 
0B160B FE    1300** CP      ','
0B160C 2C 
0B160D C2    1301** JP      NZ,XEQ
0B160E 87 
0B160F 0E 
0B1610 0B 
0B1611 FD    1302** INC     IY
0B1612 23 
0B1613 CD    1303** CALL    NXT
0B1614 61 
0B1615 0D 
0B1616 0B 
0B1617 18    1304** JR      READ0
0B1618 B8 
             1305** ;
0B1619 3E    1306** GETDAT:			LD      A,DATA_EX_
0B161A DC 
0B161B CD    1307** CALL    SEARCH_EX
0B161C 3F 
0B161D 1B 
0B161E 0B 
0B161F 23    1308** INC     HL
0B1620 D0    1309** RET     NC
0B1621 3E    1310** LD      A,42
0B1622 2A 
0B1623 C3    1311** ERROR4:			JP      ERROR_           ;"Out of DATA"
0B1624 51 
0B1625 3A 
0B1626 0B 
             1312** 
             1313** ; IF expr statement
             1314** ; IF expr THEN statement [ELSE statement]
             1315** ; IF expr THEN line [ELSE line]
             1316** ;
0B1627 CD    1317** IF_:			CALL    EXPRI
0B1628 FB 
0B1629 05 
0B162A 0B 
0B162B CD    1318** CALL    TEST
0B162C D0 
0B162D 0B 
0B162E 0B 
0B162F 28    1319** JR      Z,IFNOT         ;FALSE
0B1630 19 
0B1631 FD    1320** LD      A,(IY)
0B1632 7E 
0B1633 00 
0B1634 FE    1321** CP      THEN_EX_
0B1635 8C 
0B1636 C2    1322** JP      NZ,XEQ
0B1637 87 
0B1638 0E 
0B1639 0B 
0B163A FD    1323** INC     IY              ;SKIP "THEN"
0B163B 23 
0B163C CD    1324** IF1:			CALL    NXT
0B163D 61 
0B163E 0D 
0B163F 0B 
0B1640 FE    1325** CP      LINO_EX
0B1641 8D 
0B1642 C2    1326** JP      NZ,XEQ          ;STATEMENT FOLLOWS
0B1643 87 
0B1644 0E 
0B1645 0B 
0B1646 C3    1327** JP      GOTO_EX            ;LINE NO. FOLLOWS
0B1647 1C 
0B1648 12 
0B1649 0B 
0B164A FD    1328** IFNOT:			LD      A,(IY)
0B164B 7E 
0B164C 00 
0B164D FE    1329** CP      CR
0B164E 0D 
0B164F FD    1330** INC     IY
0B1650 23 
0B1651 CA    1331** JP      Z,XEQ0          ;END OF LINE
0B1652 83 
0B1653 0E 
0B1654 0B 
0B1655 FE    1332** CP      ELSE_EX_
0B1656 8B 
0B1657 20    1333** JR      NZ,IFNOT
0B1658 F1 
0B1659 18    1334** JR      IF1
0B165A E1 
             1335** 
             1336** ; CLS
             1337** ;
0B165B CD    1338** CLS:		CALL    CLRSCN
0B165C BD 
0B165D 46 
0B165E 0B 
0B165F AF    1339** XOR     A
0B1660 32    1340** LD      (COUNT),A
0B1661 3D 
0B1662 50 
0B1663 0B 
0B1664 C3    1341** JP      XEQ
0B1665 87 
0B1666 0E 
0B1667 0B 
             1342** 
             1343** ; STOP
             1344** ;
0B1668 CD    1345** STOP:			CALL    TELL
0B1669 81 
0B166A 40 
0B166B 0B 
0B166C 0D    1346** DB	CR
0B166D 0A    1347** DB	LF
0B166E FA    1348** DB	TSTOP
0B166F 00    1349** DB	0
0B1670 CD    1350** CALL    SETLIN          ;FIND CURRENT LINE
0B1671 9F 
0B1672 3C 
0B1673 0B 
0B1674 CD    1351** CALL    SAYLN
0B1675 D3 
0B1676 3C 
0B1677 0B 
0B1678 CD    1352** CALL    CRLF
0B1679 38 
0B167A 3C 
0B167B 0B 
0B167C C3    1353** JP      CLOOP
0B167D 71 
0B167E 33 
0B167F 0B 
             1354** 
             1355** ; REPORT
             1356** ;
0B1680 CD    1357** REPOR:			CALL    REPORT
0B1681 73 
0B1682 40 
0B1683 0B 
0B1684 C3    1358** JP      XEQ
0B1685 87 
0B1686 0E 
0B1687 0B 
             1359** 
             1360** ; CLEAR
             1361** ;
0B1688 CD    1362** CLR:			CALL    CLEAR
0B1689 67 
0B168A 3B 
0B168B 0B 
0B168C 2A    1363** LD      HL,(PAGE_)
0B168D 14 
0B168E 50 
0B168F 0B 
0B1690 18    1364** JR      RESTR1
0B1691 19 
             1365** 
             1366** ; RESTORE [line]
             1367** ;
0B1692 2A    1368** RESTOR_EX:			LD      HL,(PAGE_)
0B1693 14 
0B1694 50 
0B1695 0B 
0B1696 CD    1369** CALL    TERMQ
0B1697 6B 
0B1698 1A 
0B1699 0B 
0B169A 28    1370** JR      Z,RESTR1
0B169B 0F 
0B169C CD    1371** CALL    ITEMI
0B169D 16 
0B169E 06 
0B169F 0B 
0B16A0 D9    1372** EXX
0B16A1 CD    1373** CALL    FINDL           ;SEARCH FOR LINE
0B16A2 80 
0B16A3 3C 
0B16A4 0B 
0B16A5 3E    1374** LD      A,41
0B16A6 29 
0B16A7 C2    1375** JP      NZ,ERROR4       ;"No such line"
0B16A8 23 
0B16A9 16 
0B16AA 0B 
0B16AB 3E    1376** RESTR1:			LD      A,DATA_EX_
0B16AC DC 
0B16AD CD    1377** CALL    SEARCH_EX
0B16AE 3F 
0B16AF 1B 
0B16B0 0B 
0B16B1 22    1378** LD      (DATPTR),HL
0B16B2 31 
0B16B3 50 
0B16B4 0B 
0B16B5 C3    1379** JP      XEQ
0B16B6 87 
0B16B7 0E 
0B16B8 0B 
             1380** 
             1381** ; PTR#channel=expr
             1382** ; PAGE=expr
             1383** ; TIME=expr
             1384** ; LOMEM=expr
             1385** ; HIMEM=expr
             1386** ;
0B16B9 CD    1387** PTR_EX:			CALL    CHANEL
0B16BA 77 
0B16BB 1B 
0B16BC 0B 
0B16BD CD    1388** CALL    EQUALS
0B16BE 81 
0B16BF 1A 
0B16C0 0B 
0B16C1 7B    1389** LD      A,E
0B16C2 F5    1390** PUSH    AF
0B16C3 CD    1391** CALL    EXPRI
0B16C4 FB 
0B16C5 05 
0B16C6 0B 
0B16C7 E5    1392** PUSH    HL
0B16C8 D9    1393** EXX
0B16C9 D1    1394** POP     DE
0B16CA F1    1395** POP     AF
0B16CB CD    1396** CALL    PUTPTR
0B16CC 58 
0B16CD 46 
0B16CE 0B 
0B16CF C3    1397** JP      XEQ
0B16D0 87 
0B16D1 0E 
0B16D2 0B 
             1398** ;
0B16D3 CD    1399** PAGEV_EX:			CALL    EQUALS
0B16D4 81 
0B16D5 1A 
0B16D6 0B 
0B16D7 CD    1400** CALL    EXPRI
0B16D8 FB 
0B16D9 05 
0B16DA 0B 
0B16DB D9    1401** EXX
0B16DC 2E    1402** LD      L,0
0B16DD 00 
0B16DE 22    1403** LD      (PAGE_),HL
0B16DF 14 
0B16E0 50 
0B16E1 0B 
0B16E2 C3    1404** JP      XEQ
0B16E3 87 
0B16E4 0E 
0B16E5 0B 
             1405** ;
0B16E6 FE    1406** TIMEV_EX:			CP      '$'
0B16E7 24 
0B16E8 28    1407** JR      Z,TIMEVS_EX
0B16E9 13 
0B16EA CD    1408** CALL    EQUALS
0B16EB 81 
0B16EC 1A 
0B16ED 0B 
0B16EE CD    1409** CALL    EXPRI
0B16EF FB 
0B16F0 05 
0B16F1 0B 
0B16F2 E5    1410** PUSH    HL
0B16F3 D9    1411** EXX
0B16F4 D1    1412** POP     DE
0B16F5 CD    1413** CALL    PUTIME
0B16F6 88 
0B16F7 41 
0B16F8 0B 
0B16F9 C3    1414** JP      XEQ
0B16FA 87 
0B16FB 0E 
0B16FC 0B 
             1415** ;
0B16FD FD    1416** TIMEVS_EX:			INC     IY              ;SKIP '$'
0B16FE 23 
0B16FF CD    1417** CALL    EQUALS
0B1700 81 
0B1701 1A 
0B1702 0B 
0B1703 CD    1418** CALL    EXPRS
0B1704 06 
0B1705 06 
0B1706 0B 
0B1707 CD    1419** CALL    PUTIMS
0B1708 A8 
0B1709 46 
0B170A 0B 
0B170B C3    1420** JP      XEQ
0B170C 87 
0B170D 0E 
0B170E 0B 
             1421** ;
0B170F CD    1422** LOMEMV_EX:			CALL    EQUALS
0B1710 81 
0B1711 1A 
0B1712 0B 
0B1713 CD    1423** CALL    EXPRI
0B1714 FB 
0B1715 05 
0B1716 0B 
0B1717 CD    1424** CALL    CLEAR
0B1718 67 
0B1719 3B 
0B171A 0B 
0B171B D9    1425** EXX
0B171C 22    1426** LD      (LOMEM),HL
0B171D 1A 
0B171E 50 
0B171F 0B 
0B1720 22    1427** LD      (FREE),HL
0B1721 1D 
0B1722 50 
0B1723 0B 
0B1724 C3    1428** JP      XEQ
0B1725 87 
0B1726 0E 
0B1727 0B 
             1429** ;
0B1728 CD    1430** HIMEMV_EX:			CALL    EQUALS			; Check for '=' and throw an error if not found
0B1729 81 
0B172A 1A 
0B172B 0B 
0B172C CD    1431** CALL    EXPRI			; Load the expression into registers
0B172D FB 
0B172E 05 
0B172F 0B 
             1432** ; BEGIN MISSING FROM BINARY
             1433** ; LD	A,L			;  A: The MSB of the 24-bit value
             1434** ; EXX				; HL: The LSW of the 24-bit value
             1435** ; LD	(R0),HL
             1436** ; LD	(R0+2),A
             1437** ; LD	HL,(FREE)
             1438** ; LD      DE,256
             1439** ; ADD	HL,DE
             1440** ; EX	DE,HL			; DE: FREE + 256
             1441** ; LD	HL,(R0)			; HL: The passed expression
             1442** ; END MISSING FROM BINARY
             1443** ; BEGIN ADDED FROM BINARY
0B1730 D9    1444** exx
0B1731 ED    1445** ld de,(FREE)
0B1732 5B 
0B1733 1D 
0B1734 50 
0B1734 0B   
0B1736 14    1446** inc d
             1447** ; END ADDED FROM BINARY
0B1737 AF    1448** XOR     A
0B1738 ED    1449** SBC     HL,DE
0B1739 52 
0B173A 19    1450** ADD     HL,DE			; Do a bounds check
0B173B DA    1451** JP      C,ERROR_         	; Throw the error: "No room"
0B173C 51 
0B173D 3A 
0B173E 0B 
0B173F ED    1452** LD      DE,(HIMEM)
0B1740 5B 
0B1741 20 
0B1742 50 
0B1742 0B   
0B1744 22    1453** LD      (HIMEM),HL
0B1745 20 
0B1746 50 
0B1747 0B 
0B1748 EB    1454** EX      DE,HL
0B1749 ED    1455** SBC     HL,SP			; Adjust the stack
0B174A 72 
0B174B C2    1456** JP      NZ,XEQ
0B174C 87 
0B174D 0E 
0B174E 0B 
0B174F EB    1457** EX      DE,HL
0B1750 F9    1458** LD      SP,HL           	; Load the SP
0B1751 C3    1459** JP      XEQ
0B1752 87 
0B1753 0E 
0B1754 0B 
             1460** 
             1461** ; WIDTH expr
             1462** ;
0B1755 CD    1463** WIDTHV:			CALL    EXPRI
0B1756 FB 
0B1757 05 
0B1758 0B 
0B1759 D9    1464** EXX
0B175A 7D    1465** LD      A,L
0B175B 32    1466** LD      (WIDTH),A
0B175C 3E 
0B175D 50 
0B175E 0B 
0B175F C3    1467** JP      XEQ
0B1760 87 
0B1761 0E 
0B1762 0B 
             1468** 
             1469** ; TRACE ON
             1470** ; TRACE OFF
             1471** ; TRACE line
             1472** ;
0B1763 FD    1473** TRACE_EX:			INC     IY
0B1764 23 
0B1765 21    1474** LD      HL,0
0B1766 00 
0B1767 00 
0B1768 00 
0B1769 FE    1475** CP      TON
0B176A EE 
0B176B 28    1476** JR      Z,TRACE0
0B176C 0B 
0B176D FE    1477** CP      OFF_
0B176E 87 
0B176F 28    1478** JR      Z,TRACE1
0B1770 08 
0B1771 FD    1479** DEC     IY
0B1772 2B 
0B1773 CD    1480** CALL    EXPRI
0B1774 FB 
0B1775 05 
0B1776 0B 
0B1777 D9    1481** EXX
0B1778 2B    1482** TRACE0:			DEC     HL
0B1779 22    1483** TRACE1:			LD      (TRACEN),HL
0B177A 26 
0B177B 50 
0B177C 0B 
0B177D C3    1484** JP      XEQ
0B177E 87 
0B177F 0E 
0B1780 0B 
             1485** 
             1486** ; VDU expr,expr;....
             1487** ;
             1488** ; BEGIN MISSING FROM BINARY
             1489** ; VDU:			LD	IX,BUFFER		; Storage for the VDU stream
             1490** ; VDU1:			PUSH	IX
             1491** ; 			CALL    EXPRI			; Fetch the VDU character
             1492** ; 			POP	IX
             1493** ; 			EXX
             1494** ; 			LD	(IX+0),L		; Write out the character to the buffer
             1495** ; 			INC	IX
             1496** ; 			LD      A,(IY)			;  A: The separator character
             1497** ; 			CP      ','			; Is it a comma?
             1498** ; 			JR      Z,VDU2			; Yes, so it's a byte value - skip to next expression
             1499** ; 			CP      ';'			; Is it a semicolon?
             1500** ; 			JR      NZ,VDU3			; No, so skip to the next expression
             1501** ; 			LD	(IX+0),H		; Write out the high byte to the buffer
             1502** ; 			INC	IX
             1503** ; VDU2:			INC     IY			; Skip to the next character
             1504** ; VDU3:			CALL    TERMQ			; Skip past white space
             1505** ; 			JR      NZ,VDU1			; Loop unti reached end of the VDU command
             1506** ; 			LD	A,IXL			;  A: Number of bytes to write out
             1507** ; 			OR	A
             1508** ; 			JR 	Z,VDU4			; No bytes to write, so skip the next bit
             1509** ; 			LD	HL,BUFFER		; HL: Start of stream
             1510** ; 			LD	BC,0
             1511** ; 			LD	C,A			; BC: Number of bytes to write out
             1512** ; 			RST.LIL	18h			; Output the buffer to MOS
             1513** ; END MISSING FROM BINARY
             1514** ; BEGIN ADDED FROM BINARY
             1515** VDU:
0B1781 CD    1516** call EXPRI
0B1782 FB 
0B1783 05 
0B1784 0B 
0B1785 D9    1517** exx
0B1786 7D    1518** ld a,l
0B1787 CD    1519** call OSWRCH
0B1788 F1 
0B1789 41 
0B178A 0B 
0B178B FD    1520** ld a,(iy)
0B178C 7E 
0B178D 00 
0B178E FE    1521** cp $2c
0B178F 2C 
0B1790 28    1522** jr z,$+$0b
0B1791 09 
0B1792 FE    1523** cp $3b
0B1793 3B 
0B1794 20    1524** jr nz,$+$09
0B1795 07 
0B1796 7C    1525** ld a,h
0B1797 CD    1526** call OSWRCH
0B1798 F1 
0B1799 41 
0B179A 0B 
0B179B FD    1527** inc iy
0B179C 23 
0B179D CD    1528** call TERMQ
0B179E 6B 
0B179F 1A 
0B17A0 0B 
0B17A1 20    1529** jr nz,$-$20
0B17A2 DE 
             1530** ; END ADDED FROM BINARY
0B17A3 C3    1531** VDU4:			JP      XEQ
0B17A4 87 
0B17A5 0E 
0B17A6 0B 
             1532** 
             1533** ; CLOSE channel number
             1534** ;
0B17A7 CD    1535** CLOSE:			CALL    CHANEL			; Fetch the channel number
0B17A8 77 
0B17A9 1B 
0B17AA 0B 
0B17AB CD    1536** CALL    OSSHUT			; Close the channel
0B17AC 1C 
0B17AD 46 
0B17AE 0B 
0B17AF C3    1537** JP      XEQ
0B17B0 87 
0B17B1 0E 
0B17B2 0B 
             1538** 
             1539** ; BPUT channel,byte
             1540** ;
0B17B3 CD    1541** BPUT:			CALL    CHANEL          	; Fetch the channel number
0B17B4 77 
0B17B5 1B 
0B17B6 0B 
0B17B7 D5    1542** PUSH    DE			; DE: Channel number
0B17B8 CD    1543** CALL    COMMA			; Skip to the next expression
0B17B9 13 
0B17BA 0D 
0B17BB 0B 
0B17BC CD    1544** CALL    EXPRI           	; Feth the data
0B17BD FB 
0B17BE 05 
0B17BF 0B 
0B17C0 D9    1545** EXX
0B17C1 7D    1546** LD      A,L			; A: The byte to write
0B17C2 D1    1547** POP     DE
0B17C3 CD    1548** CALL    OSBPUT			; Write the byte out
0B17C4 2C 
0B17C5 46 
0B17C6 0B 
0B17C7 C3    1549** JP      XEQ
0B17C8 87 
0B17C9 0E 
0B17CA 0B 
             1550** 
             1551** ; CALL address[,var[,var...]]
             1552** ;
             1553** ; Note that the parameter table differs from the Z80 version
             1554** ; Each entry now takes up 4 bytes, not 3, so the table is now:
             1555** ;  -1 byte:  Number of parameters
             1556** ; Then, for each parameter:
             1557** ;  -1 byte:  Parameter type (00h: byte, 04h: word, 05h: real, 80h: fixed string, 81h: dynamic string)
             1558** ;  -3 bytes: Parameter address
             1559** ;
             1560** ; See https://www.bbcbasic.co.uk/bbcbasic/mancpm/bbckey1.html#callparms for more information
             1561** ;
0B17CB CD    1562** CALL_:			CALL    EXPRI           	; Fetch the address
0B17CC FB 
0B17CD 05 
0B17CE 0B 
0B17CF 7D    1563** LD	A,L			;  A: MSB of address
0B17D0 D9    1564** EXX
0B17D1 22    1565** LD	(R0+0),HL		; HL: LSW of address
0B17D2 4A 
0B17D3 50 
0B17D4 0B 
0B17D5 32    1566** LD	(R0+2),A
0B17D6 4C 
0B17D7 50 
0B17D8 0B 
0B17D9 06    1567** LD      B,0             	;  B: The parameter counter
0B17DA 00 
0B17DB 11    1568** LD      DE,BUFFER       	; DE: Vector
0B17DC 00 
0B17DD 4E 
0B17DE 0B 
             1569** ;
0B17DF CD    1570** CALL1:			CALL    NXT			; Skip whitespace
0B17E0 61 
0B17E1 0D 
0B17E2 0B 
0B17E3 FE    1571** CP      ','			; Check for comma
0B17E4 2C 
0B17E5 20    1572** JR      NZ,CALL2		; If no more parameters, then jump here
0B17E6 1B 
0B17E7 FD    1573** INC     IY			; Skip to the next character
0B17E8 23 
0B17E9 04    1574** INC     B			; Increment the parameter count
0B17EA CD    1575** CALL    NXT			; Skip whitespace
0B17EB 61 
0B17EC 0D 
0B17ED 0B 
0B17EE C5    1576** PUSH    BC
0B17EF D5    1577** PUSH    DE
0B17F0 CD    1578** CALL    VAR_
0B17F1 7F 
0B17F2 0F 
0B17F3 0B 
0B17F4 D1    1579** POP     DE
0B17F5 C1    1580** POP     BC
0B17F6 13    1581** INC     DE
0B17F7 12    1582** LD      (DE),A			; Save the parameter type
0B17F8 13    1583** INC     DE
0B17F9 EB    1584** EX      DE,HL
0B17FA ED    1585** LD	(HL),DE			; Save the parameter address (3 bytes)
0B17FB 1F 
0B17FC 23    1586** INC	HL
0B17FD 23    1587** INC	HL
0B17FE 23    1588** INC	HL
0B17FF EB    1589** EX      DE,HL
0B1800 18    1590** JR      CALL1
0B1801 DD 
             1591** ;
0B1802 78    1592** CALL2:			LD      A,B
0B1803 32    1593** LD      (BUFFER),A      	; Save the parameter count
0B1804 00 
0B1805 4E 
0B1806 0B 
0B1807 2A    1594** LD	HL,(R0)			; HL: Address of the code
0B1808 4A 
0B1809 50 
0B180A 0B 
0B180B CD    1595** CALL    USR1			; And call it
0B180C 25 
0B180D 18 
0B180E 0B 
0B180F C3    1596** JP      XEQ
0B1810 87 
0B1811 0E 
0B1812 0B 
             1597** 
             1598** ; USR(address)
             1599** ;
0B1813 CD    1600** USR:			CALL    ITEMI			; Evaluate the expression
0B1814 16 
0B1815 06 
0B1816 0B 
0B1817 7D    1601** LD	A,L			;  A: MSB of address
0B1818 D9    1602** EXX
0B1819 22    1603** LD	(R0+0),HL		; HL: LSW of address
0B181A 4A 
0B181B 50 
0B181C 0B 
0B181D 32    1604** LD	(R0+2),A
0B181E 4C 
0B181F 50 
0B1820 0B 
0B1821 2A    1605** LD	HL,(R0)			; Get the 24-bit address in HL
0B1822 4A 
0B1823 50 
0B1824 0B 
             1606** ;
0B1825 E5    1607** USR1:			PUSH    HL              	; Address on stack
0B1826 FD    1608** EX      (SP),IY
0B1827 E3 
0B1828 24    1609** INC     H               	; Check for PAGE &00FFxx
0B1829 B4    1610** OR	H
0B182A 21    1611** LD      HL,USR2         	; Return address
0B182B 94 
0B182C 18 
0B182D 0B 
0B182E E5    1612** PUSH    HL
0B182F DD    1613** LD      IX,STAVAR
0B1830 21 
0B1831 00 
0B1832 4F 
0B1832 0B   
0B1834 CC    1614** CALL    Z,OSCALL        	; Intercept &00FFxx
0B1835 E2 
0B1836 45 
0B1837 0B 
             1615** ;
0B1838 DD    1616** LD      C, (IX+24)		; F%
0B1839 4E 
0B183A 18 
0B183B C5    1617** PUSH    BC
             1618** ;
0B183C DD    1619** LD	A, (IX+8)		; B% -> MSW
0B183D 7E 
0B183E 08 
0B183F 32    1620** LD	(R0+1), A
0B1840 4B 
0B1841 50 
0B1842 0B 
0B1843 DD    1621** LD	A, (IX+9)
0B1844 7E 
0B1845 09 
0B1846 32    1622** LD	(R0+2), A
0B1847 4C 
0B1848 50 
0B1849 0B 
0B184A DD    1623** LD	A, (IX+12)		; C% -> LSB
0B184B 7E 
0B184C 0C 
0B184D 32    1624** LD	(R0+0), A
0B184E 4A 
0B184F 50 
0B1850 0B 
0B1851 ED    1625** LD	BC, (R0)
0B1852 4B 
0B1853 4A 
0B1854 50 
0B1854 0B   
             1626** ;
0B1856 DD    1627** LD	A, (IX+16)		; D% -> MSW
0B1857 7E 
0B1858 10 
0B1859 32    1628** LD	(R0+1), A
0B185A 4B 
0B185B 50 
0B185C 0B 
0B185D DD    1629** LD	A, (IX+17)
0B185E 7E 
0B185F 11 
0B1860 32    1630** LD	(R0+2), A
0B1861 4C 
0B1862 50 
0B1863 0B 
0B1864 DD    1631** LD	A, (IX+20)		; E% -> LSB
0B1865 7E 
0B1866 14 
0B1867 32    1632** LD	(R0+0), A
0B1868 4A 
0B1869 50 
0B186A 0B 
0B186B ED    1633** LD	DE, (R0)
0B186C 5B 
0B186D 4A 
0B186E 50 
0B186E 0B   
             1634** ;
0B1870 DD    1635** LD	A, (IX+32)		; H% -> MSW
0B1871 7E 
0B1872 20 
0B1873 32    1636** LD	(R0+1), A
0B1874 4B 
0B1875 50 
0B1876 0B 
0B1877 DD    1637** LD	A, (IX+33)
0B1878 7E 
0B1879 21 
0B187A 32    1638** LD	(R0+2), A
0B187B 4C 
0B187C 50 
0B187D 0B 
0B187E DD    1639** LD	A, (IX+48)		; L% -> LSB
0B187F 7E 
0B1880 30 
0B1881 32    1640** LD	(R0+0), A
0B1882 4A 
0B1883 50 
0B1884 0B 
0B1885 2A    1641** LD	HL, (R0)
0B1886 4A 
0B1887 50 
0B1888 0B 
             1642** ;
0B1889 F1    1643** POP     AF			; F%
0B188A DD    1644** LD      A, (IX+4)        	; A%
0B188B 7E 
0B188C 04 
             1645** 
0B188D DD    1646** LD      IX,BUFFER
0B188E 21 
0B188F 00 
0B1890 4E 
0B1890 0B   
0B1892 FD    1647** JP      (IY)            	; Off to user routine
0B1893 E9 
             1648** ;
0B1894 FD    1649** USR2:			POP     IY
0B1895 E1 
0B1896 AF    1650** XOR     A
0B1897 4F    1651** LD      C,A
0B1898 C9    1652** RET
             1653** 
             1654** ; PUT port,data
             1655** ;
0B1899 CD    1656** PUT:			CALL    EXPRI           ;PORT ADDRESS
0B189A FB 
0B189B 05 
0B189C 0B 
0B189D D9    1657** EXX
0B189E E5    1658** PUSH    HL
0B189F CD    1659** CALL    COMMA
0B18A0 13 
0B18A1 0D 
0B18A2 0B 
0B18A3 CD    1660** CALL    EXPRI           ;DATA
0B18A4 FB 
0B18A5 05 
0B18A6 0B 
0B18A7 D9    1661** EXX
0B18A8 C1    1662** POP     BC
0B18A9 ED    1663** OUT     (C),L           ;OUTPUT TO PORT BC
0B18AA 69 
0B18AB C3    1664** JP      XEQ
0B18AC 87 
0B18AD 0E 
0B18AE 0B 
             1665** 
             1666** ; SUBROUTINES -----------------------------------------------------------------
             1667** 
             1668** ; ASSIGN - Assign a numeric value to a variable.
             1669** ; Outputs: NC,  Z - OK, numeric.
             1670** ;          NC, NZ - OK, string.
             1671** ;           C, NZ - illegal
             1672** ;
0B18AF CD    1673** ASSIGN:			CALL    GETVAR          	; Try to get the variable
0B18B0 2B 
0B18B1 3D 
0B18B2 0B 
0B18B3 D8    1674** RET     C               	; Return with C if it is an illegal variable
0B18B4 C4    1675** CALL    NZ,PUTVAR		; If it does not exist, then create the variable
0B18B5 1A 
0B18B6 3D 
0B18B7 0B 
0B18B8 B7    1676** OR      A
0B18B9 F8    1677** RET     M               	; Return if type is string (81h)
0B18BA F5    1678** PUSH    AF              	; It's a numeric type from this point on
0B18BB CD    1679** CALL    EQUALS			; Check if the variable is followed by an '=' symbol; this will throw a 'Mistake' error if not
0B18BC 81 
0B18BD 1A 
0B18BE 0B 
0B18BF E5    1680** PUSH    HL
0B18C0 CD    1681** CALL    EXPRN
0B18C1 F3 
0B18C2 05 
0B18C3 0B 
0B18C4 DD    1682** POP     IX
0B18C5 E1 
0B18C6 F1    1683** POP     AF
0B18C7 CB    1684** STORE:			BIT     0,A
0B18C8 47 
0B18C9 28    1685** JR      Z,STOREI
0B18CA 13 
0B18CB BF    1686** CP      A               	; Set the variable to 0
0B18CC DD    1687** STORE5:			LD      (IX+4),C
0B18CD 71 
0B18CE 04 
0B18CF D9    1688** STORE4:			EXX
0B18D0 DD    1689** LD      (IX+0),L
0B18D1 75 
0B18D2 00 
0B18D3 DD    1690** LD      (IX+1),H
0B18D4 74 
0B18D5 01 
0B18D6 D9    1691** EXX
0B18D7 DD    1692** LD      (IX+2),L
0B18D8 75 
0B18D9 02 
0B18DA DD    1693** LD      (IX+3),H
0B18DB 74 
0B18DC 03 
0B18DD C9    1694** RET
0B18DE F5    1695** STOREI:			PUSH    AF
0B18DF 0C    1696** INC     C               ;SPEED - & PRESERVE F'
0B18E0 0D    1697** DEC     C               ; WHEN CALLED BY FNEND0
0B18E1 C4    1698** CALL    NZ,SFIX         ;CONVERT TO INTEGER
0B18E2 53 
0B18E3 09 
0B18E4 0B 
0B18E5 F1    1699** POP     AF
0B18E6 FE    1700** CP      4
0B18E7 04 
0B18E8 28    1701** JR      Z,STORE4
0B18E9 E5 
0B18EA BF    1702** CP      A               ;SET ZERO
0B18EB D9    1703** STORE1:			EXX
0B18EC DD    1704** LD      (IX+0),L
0B18ED 75 
0B18EE 00 
0B18EF D9    1705** EXX
0B18F0 C9    1706** RET
             1707** ;
             1708** ; Copy a string from the string accumulator to variable storage on the stack
             1709** ; Parameters:
             1710** ; - AF: The variable type (should be 81h for a string, 80h for a fixed/static string)
             1711** ; - IX: Address of the variable storage on the stack
             1712** ;
0B18F1 21    1713** STACCS:			LD      HL,ACCS			; HL: Pointer to the string accumulator
0B18F2 00 
0B18F3 4D 
0B18F4 0B 
             1714** ;
             1715** ; Parameters:
             1716** ; As above, but:
             1717** ; - HL: Address of the string to be stored
             1718** ; -  E: The string length
             1719** ; NB:
             1720** ; Strings are mutable
             1721** ; Strings are stored in the following format in the variable:
             1722** ; - Address of the next variable (3 bytes)
             1723** ; - The rest of the variable name - this is zero terminated
             1724** ; - Current string length (byte)
             1725** ; - Maximum (original) string length (byte)
             1726** ; - String start address (3 bytes for BBC BASIC for eZ80, 2 bytes for standard BBC BASIC for Z80)
             1727** ; See https://www.bbcbasic.co.uk/bbcbasic/mancpm/annexd.html#string for more details
             1728** ;
0B18F5 1F    1729** STORES:			RRA				; Rotate right to shift bit 0 into carry
0B18F6 30    1730** JR      NC,STORS3		; It's a fixed/static string, so skip the next bit
0B18F7 5D 
0B18F8 E5    1731** PUSH    HL			; Stack ACCS
             1732** ;
             1733** ; Load the string pointer and lengths into registers - these are all zeroed for new strings
             1734** ;
0B18F9 D9    1735** EXX				; This block was a call to LOAD4
0B18FA DD    1736** LD      L,(IX+0)		; The length of the string currently stored in the allocated space
0B18FB 6E 
0B18FC 00 
0B18FD DD    1737** LD      H,(IX+1)		; The maximum original string length
0B18FE 66 
0B18FF 01 
0B1900 D9    1738** EXX
0B1901 DD    1739** LD	HL,(IX+2)		; Address of the string (24-bit)
0B1902 27 
0B1903 02 
             1740** ;
0B1904 7B    1741** LD      A,E             	; E : Length of string in ACCS (as passed to the function)
0B1905 D9    1742** EXX
0B1906 6F    1743** LD      L,A			; L': Length of string currently stored on the stack
0B1907 7C    1744** LD      A,H             	; H': The maximum (original) string length
0B1908 D9    1745** EXX
0B1909 BB    1746** CP      E			; Check whether there is enough room for the string in ACCS in the allocated space
0B190A 30    1747** JR      NC,STORS1       	; Yes there is, so skip the next bit
0B190B 17 
             1748** ;
             1749** ; At this point we're either initialising a new string or assigning more memory to an existing string
             1750** ; Note that there is no garbage collection here, so if a string is reassigned and the new string is longer
             1751** ; then the existing and new strings may both exist in memory.
             1752** ;
0B190C D9    1753** EXX
0B190D 65    1754** LD      H,L			; H: Set the maximum string length to the string length
0B190E D9    1755** EXX
0B190F E5    1756** PUSH    HL
0B1910 01    1757** LD	BC, 0
0B1911 00 
0B1912 00 
0B1913 00 
0B1914 4F    1758** LD      C,A			; BC: The maximum (original) string length
0B1915 09    1759** ADD     HL,BC			; Work out whether this is the last string in memory
0B1916 ED    1760** LD      BC,(FREE)
0B1917 4B 
0B1918 1D 
0B1919 50 
0B1919 0B   
0B191B ED    1761** SBC     HL,BC			; Is string last?
0B191C 42 
0B191D E1    1762** POP     HL
0B191E 37    1763** SCF
0B191F 28    1764** JR      Z,STORS1
0B1920 02 
             1765** ; LD	HL, BC			; HL=BC
0B1921 C5    1766** push bc
0B1922 E1    1767** pop hl
             1768** ;
             1769** ; At this point carry flag will be clear if the string can be replaced in memory, otherwise will be set
             1770** ; - H': The maximum (original) string length
             1771** ; - L': The actual string length (must be less than H')
             1772** ; - HL: Address of the string in memory
             1773** ;
0B1923 D9    1774** STORS1:			EXX				; This block was a call to STORE4
0B1924 DD    1775** LD      (IX+0),L		; The actual string length (must be less then H')
0B1925 75 
0B1926 00 
0B1927 DD    1776** LD      (IX+1),H		; The maximum (original) string length
0B1928 74 
0B1929 01 
0B192A D9    1777** EXX
0B192B DD    1778** LD	(IX+2),HL		; The pointer to the original string
0B192C 2F 
0B192D 02 
             1779** ;
0B192E 01    1780** LD	BC, 0
0B192F 00 
0B1930 00 
0B1931 00 
0B1932 4B    1781** LD      C,E			; BC: The new string length
0B1933 EB    1782** EX      DE,HL
0B1934 E1    1783** POP     HL
0B1935 0D    1784** DEC     C			; Strings can only be 255 bytes long, so this is a quick way to
0B1936 0C    1785** INC     C			; check whether BC is 0 without affecting the carry flag
0B1937 C8    1786** RET     Z               	; It is, so it's a NULL string, don't need to do anything else here
0B1938 ED    1787** LDIR				; Replace the string in memory
0B1939 B0 
0B193A D0    1788** RET     NC
0B193B ED    1789** LD      (FREE),DE		; Set the new value of FREE and fall through to CHECK
0B193C 53 
0B193D 1D 
0B193E 50 
0B193E 0B   
             1790** ;
             1791** ; Check whether the stack is full
             1792** ;
0B1940 E5    1793** CHECK:			PUSH    HL
0B1941 C5    1794** PUSH	BC
0B1942 2A    1795** LD      HL,(FREE)		; HL: Address of first free space byte
0B1943 1D 
0B1944 50 
0B1945 0B 
0B1946 01    1796** LD	BC,100h			; BC: One page of memory
0B1947 00 
0B1948 01 
0B1949 00 
0B194A 09    1797** ADD	HL,BC			; Add a page to FREE
0B194B ED    1798** SBC     HL,SP			; And subtract the current SP
0B194C 72 
0B194D C1    1799** POP	BC
0B194E E1    1800** POP     HL
0B194F D8    1801** RET     C			; The SP is not in the same page, so just return
0B1950 AF    1802** XOR     A			; Otherwise
0B1951 C3    1803** JP      ERROR_			; Throw error "No room"
0B1952 51 
0B1953 3A 
0B1954 0B 
             1804** ;
0B1955 01    1805** STORS3:			LD	BC,0
0B1956 00 
0B1957 00 
0B1958 00 
0B1959 4B    1806** LD      C,E			; BC: String length
0B195A DD    1807** PUSH    IX
0B195B E5 
0B195C D1    1808** POP     DE			; DE: Destination
0B195D AF    1809** XOR     A			; Check if string length is 0
0B195E B9    1810** CP      C
0B195F 28    1811** JR      Z,STORS5		; Yes, so don't copy
0B1960 02 
0B1961 ED    1812** LDIR
0B1962 B0 
0B1963 3E    1813** STORS5:			LD      A,CR			; Finally add the terminator
0B1964 0D 
0B1965 12    1814** LD      (DE),A
0B1966 C9    1815** RET
             1816** 
             1817** ; ARGUE: TRANSFER FN OR PROC ARGUMENTS FROM THE
             1818** ;  CALLING STATEMENT TO THE DUMMY VARIABLES VIA
             1819** ;  THE STACK.  IT MUST BE DONE THIS WAY TO MAKE
             1820** ;  PROCFRED(A,B)    DEF PROCFRED(B,A)     WORK.
             1821** ;    Inputs: DE addresses parameter list
             1822** ;            IY addresses dummy variable list
             1823** ;   Outputs: DE,IY updated
             1824** ;  Destroys: Everything
             1825** ;
0B1967 3E    1826** ARGUE:			LD      A,-1
0B1968 FF 
0B1969 F5    1827** PUSH    AF              	; Put marker on the stack
0B196A FD    1828** ARGUE1:			INC     IY              	; Bump past '(' or ',''
0B196B 23 
0B196C 13    1829** INC     DE
0B196D D5    1830** PUSH    DE
0B196E CD    1831** CALL    NXT			; Skip any whitespace
0B196F 61 
0B1970 0D 
0B1971 0B 
0B1972 CD    1832** CALL    GETVAR			; Get the location of the variable in HL/IX
0B1973 2B 
0B1974 3D 
0B1975 0B 
0B1976 38    1833** JR      C,ARGERR		; If the parameter contains an illegal character then throw an error
0B1977 3F 
0B1978 C4    1834** CALL    NZ,PUTVAR
0B1979 1A 
0B197A 3D 
0B197B 0B 
0B197C D1    1835** POP     DE
0B197D E5    1836** PUSH    HL              	; VARPTR
0B197E B7    1837** OR      A               	; Check the variable type
0B197F F5    1838** PUSH    AF
0B1980 D5    1839** PUSH    DE
0B1981 FD    1840** EX      (SP),IY
0B1982 E3 
0B1983 FA    1841** JP      M,ARGUE2        	; Jump here if it is a string
0B1984 9B 
0B1985 19 
0B1986 0B 
             1842** ;
0B1987 CD    1843** CALL    EXPRN           	; At this point it is numeric, so get the numeric expression value
0B1988 F3 
0B1989 05 
0B198A 0B 
0B198B FD    1844** EX      (SP),IY
0B198C E3 
0B198D D1    1845** POP     DE
0B198E F1    1846** POP     AF
0B198F D9    1847** EXX
0B1990 E5    1848** PUSH    HL
0B1991 D9    1849** EXX
0B1992 E5    1850** PUSH    HL
0B1993 47    1851** LD      B,A
0B1994 C5    1852** PUSH    BC
0B1995 CD    1853** CALL    CHECK           	; Check room
0B1996 40 
0B1997 19 
0B1998 0B 
0B1999 18    1854** JR      ARGUE4
0B199A 0F 
             1855** ;
0B199B CD    1856** ARGUE2:			CALL    EXPRS			; At this point it is a string variable, so get the string expression value
0B199C 06 
0B199D 06 
0B199E 0B 
0B199F FD    1857** EX      (SP),IY
0B19A0 E3 
0B19A1 D9    1858** EXX
0B19A2 D1    1859** POP     DE
0B19A3 D9    1860** EXX
0B19A4 F1    1861** POP     AF
0B19A5 CD    1862** CALL    PUSHS
0B19A6 A5 
0B19A7 0C 
0B19A8 0B 
0B19A9 D9    1863** EXX
             1864** ;
0B19AA CD    1865** ARGUE4:			CALL    NXT			; Skip whitespace
0B19AB 61 
0B19AC 0D 
0B19AD 0B 
0B19AE FE    1866** CP      ','			; Check to see if the next value is a comma
0B19AF 2C 
0B19B0 20    1867** JR      NZ,ARGUE5		; No, so jump here
0B19B1 0B 
0B19B2 1A    1868** LD      A,(DE)
0B19B3 FE    1869** CP      ','			; Are there any more arguments?
0B19B4 2C 
0B19B5 28    1870** JR      Z,ARGUE1        	; Yes, so loop
0B19B6 B3 
             1871** ;
0B19B7 3E    1872** ARGERR:			LD      A,31
0B19B8 1F 
0B19B9 C3    1873** JP      ERROR_           	; Throw error "Arguments"
0B19BA 51 
0B19BB 3A 
0B19BC 0B 
             1874** ;
0B19BD CD    1875** ARGUE5:			CALL    BRAKET			; Check for end bracket (throws an error if missing)
0B19BE 20 
0B19BF 0D 
0B19C0 0B 
0B19C1 1A    1876** LD      A,(DE)
0B19C2 FE    1877** CP      ')'
0B19C3 29 
0B19C4 20    1878** JR      NZ,ARGERR
0B19C5 F1 
0B19C6 13    1879** INC     DE
0B19C7 D9    1880** EXX
0B19C8 C1    1881** ARGUE6:			POP     BC
0B19C9 78    1882** LD      A,B
0B19CA 3C    1883** INC     A
0B19CB D9    1884** EXX
0B19CC C8    1885** RET     Z               	; Marker popped
0B19CD D9    1886** EXX
0B19CE 3D    1887** DEC     A
0B19CF FA    1888** JP      M,ARGUE7        	; If it is a string, then jump here
0B19D0 DF 
0B19D1 19 
0B19D2 0B 
0B19D3 E1    1889** POP     HL
0B19D4 D9    1890** EXX
0B19D5 E1    1891** POP     HL
0B19D6 D9    1892** EXX
0B19D7 DD    1893** POP     IX
0B19D8 E1 
0B19D9 CD    1894** CALL    STORE	           	; Write to dummy variable
0B19DA C7 
0B19DB 18 
0B19DC 0B 
0B19DD 18    1895** JR      ARGUE6
0B19DE E9 
             1896** ;
0B19DF CD    1897** ARGUE7:			CALL    POPS
0B19E0 CF 
0B19E1 0C 
0B19E2 0B 
0B19E3 DD    1898** POP     IX
0B19E4 E1 
0B19E5 CD    1899** CALL    STACCS
0B19E6 F1 
0B19E7 18 
0B19E8 0B 
0B19E9 18    1900** JR      ARGUE6
0B19EA DD 
             1901** 
             1902** ; SAVLOC: SUBROUTINE TO STACK LOCAL PARAMETERS
             1903** ;   OF A FUNCTION OR PROCEDURE.
             1904** ; THERE IS A LOT OF STACK MANIPULATION - CARE!!
             1905** ;    Inputs: IY is parameters pointer
             1906** ;   Outputs: IY updated
             1907** ;  Destroys: A,B,C,D,E,H,L,IX,IY,F,SP
             1908** ;
0B19EB D1    1909** SAVLOC:			POP     DE              	; DE: Return address (from the CALL)
             1910** ;
0B19EC FD    1911** SAVLO1:			INC     IY              	; Bump past '(' or ','
0B19ED 23 
0B19EE CD    1912** CALL    NXT			; And also any whitespace
0B19EF 61 
0B19F0 0D 
0B19F1 0B 
0B19F2 D5    1913** PUSH    DE			; Push the return address back onto the stack
0B19F3 D9    1914** EXX
0B19F4 C5    1915** PUSH    BC
0B19F5 D5    1916** PUSH    DE
0B19F6 E5    1917** PUSH    HL
0B19F7 D9    1918** EXX
0B19F8 CD    1919** CALL    VAR_             	; Dummy variable
0B19F9 7F 
0B19FA 0F 
0B19FB 0B 
0B19FC D9    1920** EXX
0B19FD E1    1921** POP     HL
0B19FE D1    1922** POP     DE
0B19FF C1    1923** POP     BC
0B1A00 D9    1924** EXX
0B1A01 D1    1925** POP     DE
0B1A02 B7    1926** OR      A               	; Check the variable type
0B1A03 FA    1927** JP      M,SAVLO2        	; 80h = string, so jump to save a local string
0B1A04 16 
0B1A05 1A 
0B1A06 0B 
0B1A07 D9    1928** EXX
0B1A08 E5    1929** PUSH    HL              	; Save H'L'
0B1A09 D9    1930** EXX
0B1A0A 47    1931** LD      B,A             	;  B: Variable type
0B1A0B CD    1932** CALL    LOADN
0B1A0C 07 
0B1A0D 07 
0B1A0E 0B 
0B1A0F D9    1933** EXX
0B1A10 E3    1934** EX      (SP),HL
0B1A11 D9    1935** EXX
0B1A12 E5    1936** PUSH    HL
0B1A13 C5    1937** PUSH    BC
0B1A14 18    1938** JR      SAVLO4
0B1A15 2D 
             1939** ;
0B1A16 F5    1940** SAVLO2:			PUSH    AF              	; Save the type (string)
0B1A17 D5    1941** PUSH    DE
0B1A18 D9    1942** EXX
0B1A19 E5    1943** PUSH    HL
0B1A1A D9    1944** EXX
0B1A1B CD    1945** CALL    LOADS
0B1A1C 91 
0B1A1D 07 
0B1A1E 0B 
0B1A1F D9    1946** EXX
0B1A20 E1    1947** POP     HL
0B1A21 D9    1948** EXX
0B1A22 01    1949** LD	BC,0
0B1A23 00 
0B1A24 00 
0B1A25 00 
0B1A26 4B    1950** LD      C,E			; BC: String length
0B1A27 D1    1951** POP     DE
0B1A28 CD    1952** CALL    CHECK			; Check if there is space on the stack
0B1A29 40 
0B1A2A 19 
0B1A2B 0B 
0B1A2C F1    1953** POP     AF              	; Level stack
0B1A2D 21    1954** LD      HL,0
0B1A2E 00 
0B1A2F 00 
0B1A30 00 
0B1A31 ED    1955** SBC     HL,BC			; HL: Number of bytes required on the stack for the string
0B1A32 42 
0B1A33 39    1956** ADD     HL,SP			; Make space for the string on the stack
0B1A34 F9    1957** LD      SP,HL
0B1A35 47    1958** LD      B,A             	;  B: Variable type
0B1A36 C5    1959** PUSH    BC
0B1A37 28    1960** JR      Z,SAVLO4
0B1A38 0A 
0B1A39 D5    1961** PUSH    DE
0B1A3A 11    1962** LD      DE,ACCS
0B1A3B 00 
0B1A3C 4D 
0B1A3D 0B 
0B1A3E EB    1963** EX      DE,HL
0B1A3F 45    1964** LD      B,L
0B1A40 ED    1965** LDIR                    	; Save the string onto the stack
0B1A41 B0 
0B1A42 D1    1966** POP     DE
             1967** ;
0B1A43 DD    1968** SAVLO4:			PUSH    IX			; VARPTR
0B1A44 E5 
0B1A45 CD    1969** CALL    SAVLO5
0B1A46 49 
0B1A47 1A 
0B1A48 0B 
             1970** LOCCHK:			EQU     $
0B1A49 CD    1971** SAVLO5:			CALL    CHECK
0B1A4A 40 
0B1A4B 19 
0B1A4C 0B 
0B1A4D CD    1972** CALL    NXT
0B1A4E 61 
0B1A4F 0D 
0B1A50 0B 
0B1A51 FE    1973** CP      ','             	; Are there any more local variables?
0B1A52 2C 
0B1A53 28    1974** JR      Z,SAVLO1		; Yes, so loop
0B1A54 97 
0B1A55 EB    1975** EX      DE,HL			; DE -> HL: The return address
0B1A56 E9    1976** JP      (HL)            	; And effectvely return
             1977** ;
0B1A57 FD    1978** DELIM:			LD      A,(IY)          	; Assembler delimiter
0B1A58 7E 
0B1A59 00 
0B1A5A FE    1979** CP      ' '
0B1A5B 20 
0B1A5C C8    1980** RET     Z
0B1A5D FE    1981** CP      ','
0B1A5E 2C 
0B1A5F C8    1982** RET     Z
0B1A60 FE    1983** CP      ')'
0B1A61 29 
0B1A62 C8    1984** RET     Z
0B1A63 FE    1985** TERM:			CP      ';'             	; Assembler terminator
0B1A64 3B 
0B1A65 C8    1986** RET     Z
0B1A66 FE    1987** CP      '\'
0B1A67 5C 
0B1A68 C8    1988** RET     Z
0B1A69 18    1989** JR      TERM0
0B1A6A 07 
             1990** ;
0B1A6B CD    1991** TERMQ:			CALL    NXT
0B1A6C 61 
0B1A6D 0D 
0B1A6E 0B 
0B1A6F FE    1992** CP      ELSE_EX_
0B1A70 8B 
0B1A71 D0    1993** RET     NC
0B1A72 FE    1994** TERM0:			CP      ':'             	; Assembler seperator
0B1A73 3A 
0B1A74 D0    1995** RET     NC
0B1A75 FE    1996** CP      CR
0B1A76 0D 
0B1A77 C9    1997** RET
             1998** ;
0B1A78 CD    1999** SPAN:			CALL    TERMQ
0B1A79 6B 
0B1A7A 1A 
0B1A7B 0B 
0B1A7C C8    2000** RET     Z
0B1A7D FD    2001** INC     IY
0B1A7E 23 
0B1A7F 18    2002** JR      SPAN
0B1A80 F7 
             2003** ;
             2004** ; This snippet is used to check whether an expression is followed by an '=' symbol
             2005** ;
0B1A81 CD    2006** EQUALS:			CALL    NXT			; Skip whitespace
0B1A82 61 
0B1A83 0D 
0B1A84 0B 
0B1A85 FD    2007** INC     IY			; Skip past the character in question
0B1A86 23 
0B1A87 FE    2008** CP      '='			; Is it '='
0B1A88 3D 
0B1A89 C8    2009** RET     Z			; Yes, so return
0B1A8A 3E    2010** LD      A,4			; Otherwise
0B1A8B 04 
0B1A8C C3    2011** JP      ERROR_           	; Throw error "Mistake"
0B1A8D 51 
0B1A8E 3A 
0B1A8F 0B 
             2012** ;
0B1A90 FE    2013** FORMAT:			CP      TAB
0B1A91 8A 
0B1A92 28    2014** JR      Z,DOTAB
0B1A93 0D 
0B1A94 FE    2015** CP      SPC
0B1A95 89 
0B1A96 28    2016** JR      Z,DOSPC
0B1A97 40 
0B1A98 FE    2017** CP      '''
0B1A99 27 
0B1A9A C0    2018** RET     NZ
0B1A9B CD    2019** CALL    CRLF
0B1A9C 38 
0B1A9D 3C 
0B1A9E 0B 
0B1A9F AF    2020** XOR     A
0B1AA0 C9    2021** RET
             2022** ;
0B1AA1 C5    2023** DOTAB:			PUSH    BC
0B1AA2 CD    2024** CALL    EXPRI
0B1AA3 FB 
0B1AA4 05 
0B1AA5 0B 
0B1AA6 D9    2025** EXX
0B1AA7 C1    2026** POP     BC
0B1AA8 FD    2027** LD      A,(IY)
0B1AA9 7E 
0B1AAA 00 
0B1AAB FE    2028** CP      ','
0B1AAC 2C 
0B1AAD 28    2029** JR      Z,DOTAB1
0B1AAE 14 
0B1AAF CD    2030** CALL    BRAKET
0B1AB0 20 
0B1AB1 0D 
0B1AB2 0B 
0B1AB3 7D    2031** LD      A,L
0B1AB4 21    2032** TABIT:			LD      HL,COUNT
0B1AB5 3D 
0B1AB6 50 
0B1AB7 0B 
0B1AB8 BE    2033** CP      (HL)
0B1AB9 C8    2034** RET     Z
0B1ABA F5    2035** PUSH    AF
0B1ABB DC    2036** CALL    C,CRLF
0B1ABC 38 
0B1ABD 3C 
0B1ABE 0B 
0B1ABF F1    2037** POP     AF
0B1AC0 96    2038** SUB     (HL)
0B1AC1 18    2039** JR      FILL
0B1AC2 1D 
0B1AC3 FD    2040** DOTAB1:			INC     IY
0B1AC4 23 
0B1AC5 C5    2041** PUSH    BC
0B1AC6 E5    2042** PUSH    HL
0B1AC7 CD    2043** CALL    EXPRI
0B1AC8 FB 
0B1AC9 05 
0B1ACA 0B 
0B1ACB D9    2044** EXX
0B1ACC D1    2045** POP     DE
0B1ACD C1    2046** POP     BC
0B1ACE CD    2047** CALL    BRAKET
0B1ACF 20 
0B1AD0 0D 
0B1AD1 0B 
0B1AD2 CD    2048** CALL    PUTCSR
0B1AD3 B2 
0B1AD4 41 
0B1AD5 0B 
0B1AD6 AF    2049** XOR     A
0B1AD7 C9    2050** RET
             2051** ;
0B1AD8 C5    2052** DOSPC:			PUSH    BC
0B1AD9 CD    2053** CALL    ITEMI
0B1ADA 16 
0B1ADB 06 
0B1ADC 0B 
0B1ADD D9    2054** EXX
0B1ADE 7D    2055** LD      A,L
0B1ADF C1    2056** POP     BC
0B1AE0 B7    2057** FILL:			OR      A
0B1AE1 C8    2058** RET     Z
0B1AE2 C5    2059** PUSH    BC
0B1AE3 47    2060** LD      B,A
0B1AE4 3E    2061** FILL1:			LD      A,' '
0B1AE5 20 
0B1AE6 CD    2062** CALL    OUTCHR
0B1AE7 40 
0B1AE8 3C 
0B1AE9 0B 
0B1AEA 10    2063** DJNZ    FILL1
0B1AEB F8 
0B1AEC C1    2064** POP     BC
0B1AED AF    2065** XOR     A
0B1AEE C9    2066** RET
             2067** ;
0B1AEF 21    2068** PTEXT:			LD      HL,ACCS
0B1AF0 00 
0B1AF1 4D 
0B1AF2 0B 
0B1AF3 1C    2069** INC     E
0B1AF4 1D    2070** PTEXT1:			DEC     E
0B1AF5 C8    2071** RET     Z
0B1AF6 7E    2072** LD      A,(HL)
0B1AF7 23    2073** INC     HL
0B1AF8 CD    2074** CALL    OUTCHR
0B1AF9 40 
0B1AFA 3C 
0B1AFB 0B 
0B1AFC 18    2075** JR      PTEXT1
0B1AFD F6 
             2076** ;
0B1AFE F5    2077** FETCHS:			PUSH    AF
0B1AFF C5    2078** PUSH    BC
0B1B00 E5    2079** PUSH    HL
0B1B01 FD    2080** EX      (SP),IY
0B1B02 E3 
0B1B03 CD    2081** CALL    XTRACT
0B1B04 1E 
0B1B05 1B 
0B1B06 0B 
0B1B07 CD    2082** CALL    NXT
0B1B08 61 
0B1B09 0D 
0B1B0A 0B 
0B1B0B FD    2083** EX      (SP),IY
0B1B0C E3 
0B1B0D E1    2084** POP     HL
0B1B0E C1    2085** POP     BC
0B1B0F F1    2086** POP     AF
0B1B10 C9    2087** RET
             2088** ;
0B1B11 11    2089** LINES:			LD      DE,ACCS
0B1B12 00 
0B1B13 4D 
0B1B14 0B 
0B1B15 7E    2090** LINE1S:			LD      A,(HL)
0B1B16 12    2091** LD      (DE),A
0B1B17 FE    2092** CP      CR
0B1B18 0D 
0B1B19 C8    2093** RET     Z
0B1B1A 23    2094** INC     HL
0B1B1B 1C    2095** INC     E
0B1B1C 18    2096** JR      LINE1S
0B1B1D F7 
             2097** ;
0B1B1E CD    2098** XTRACT:			CALL    NXT
0B1B1F 61 
0B1B20 0D 
0B1B21 0B 
0B1B22 FE    2099** CP      '"'
0B1B23 22 
0B1B24 FD    2100** INC     IY
0B1B25 23 
0B1B26 CA    2101** JP      Z,CONS
0B1B27 58 
0B1B28 07 
0B1B29 0B 
0B1B2A FD    2102** DEC     IY
0B1B2B 2B 
0B1B2C 11    2103** LD      DE,ACCS
0B1B2D 00 
0B1B2E 4D 
0B1B2F 0B 
0B1B30 FD    2104** XTRAC1:			LD      A,(IY)
0B1B31 7E 
0B1B32 00 
0B1B33 12    2105** LD      (DE),A
0B1B34 FE    2106** CP      ','
0B1B35 2C 
0B1B36 C8    2107** RET     Z
0B1B37 FE    2108** CP      CR
0B1B38 0D 
0B1B39 C8    2109** RET     Z
0B1B3A FD    2110** INC     IY
0B1B3B 23 
0B1B3C 1C    2111** INC     E
0B1B3D 18    2112** JR      XTRAC1
0B1B3E F1 
             2113** 
             2114** ; Search for a token at the start of a program line
             2115** ; - HL: Pointer to the start of a tokenised line in the program area
             2116** ; Returns:
             2117** ; - HL: Pointer to the
             2118** ; -  F: Carry set if not found
             2119** ; Corrupts:
             2120** ; - BC
             2121** ;
0B1B3F 01    2122** SEARCH_EX:			LD      BC,0			; Clear BC
0B1B40 00 
0B1B41 00 
0B1B42 00 
             2123** ;
0B1B43 4E    2124** SRCH1_EX:			LD      C,(HL)			;  C: Fetch the line length
0B1B44 0C    2125** INC     C			; Check for 0, i.e. end of program marker
0B1B45 0D    2126** DEC     C
0B1B46 28    2127** JR      Z,SRCH2_EX         	; Not found the token, so end
0B1B47 0B 
0B1B48 23    2128** INC     HL			; Skip the line length and line number
0B1B49 23    2129** INC     HL
0B1B4A 23    2130** INC     HL
0B1B4B BE    2131** CP      (HL)			; Compare with the token
0B1B4C C8    2132** RET     Z			; Found it, so return with carry not set
0B1B4D 0D    2133** DEC     C			; Skip to the next line
0B1B4E 0D    2134** DEC     C
0B1B4F 0D    2135** DEC     C
0B1B50 09    2136** ADD     HL,BC
0B1B51 18    2137** JR      SRCH1_EX			; Rinse, lather and repeat
0B1B52 F0 
             2138** ;
0B1B53 2B    2139** SRCH2_EX:			DEC     HL              	; Token not found, so back up to the CR at the end of the last line
0B1B54 37    2140** SCF				; And set the carry flag
0B1B55 C9    2141** RET
             2142** 
             2143** ; Multiply by 4 or 5
             2144** ; This function is used to allocate space for dimensioned variables
             2145** ; This is a 24-bit operation
             2146** ; - DE: Number to multiple
             2147** ; -  A: 04h (Integer) - takes up 4 bytes
             2148** ;       05h (Float)   - takes up 5 bytes
             2149** ;       81h (String)  - takes up 5 bytes - this is different from BBC BASIC for Z80 where strings only take up 4 bytes
             2150** ; Returns:
             2151** ; - DE: Multiplied by 4 if A = 4, otherwise multiplies by 5
             2152** ; -  F: Carry if overflow
             2153** ; Corrupts:
             2154** ; - HL
0B1B56 FE    2155** X4OR5:			CP      4			; Check A = 4 (Z flag is used later)
0B1B57 04 
             2156** ; LD	HL,DE
0B1B58 D5    2157** push de
0B1B59 E1    2158** pop hl
0B1B5A 29    2159** ADD     HL,HL			; Multiply by 2 (note this operation preserves the zero flag)
0B1B5B D8    2160** RET     C			; Exit if overflow
0B1B5C 29    2161** ADD     HL,HL			; Multiply by 2 again
0B1B5D D8    2162** RET     C			; Exit if overflow
0B1B5E EB    2163** EX      DE,HL			; DE: Product
0B1B5F C8    2164** RET     Z			; Exit if A = 4
0B1B60 19    2165** ADD     HL,DE			; Add original value to HL (effectively multiplying by 5)
0B1B61 EB    2166** EX      DE,HL			; DE: Product
0B1B62 C9    2167** RET
             2168** 
             2169** ; 16-bit unsigned multiply
             2170** ; - HL: Operand 1
             2171** ; - BC: Operand 2
             2172** ; Returns:
             2173** ; - HL: Result
             2174** ; -  F: C if overflow
             2175** ;
0B1B63 C5    2176** MUL16:			PUSH	BC
0B1B64 51    2177** LD	D, C			; Set up the registers for the multiplies
0B1B65 5D    2178** LD	E, L
0B1B66 69    2179** LD	L, C
0B1B67 4B    2180** LD	C, E
0B1B68 ED    2181** MLT	HL			; HL = H * C (*256)
0B1B69 6C 
0B1B6A ED    2182** MLT	DE			; DE = L * C
0B1B6B 5C 
0B1B6C ED    2183** MLT	BC			; BC = B * L (*256)
0B1B6D 4C 
0B1B6E 09    2184** ADD	HL, BC			; HL = The sum of the two most significant multiplications
0B1B6F C1    2185** POP	BC
0B1B70 AF    2186** XOR	A
0B1B71 9C    2187** SBC	H			; If H is not zero then it's an overflow
0B1B72 D8    2188** RET	C
0B1B73 65    2189** LD	H, L			; HL = ((H * C) + (B * L) * 256) + (L * C)
0B1B74 6F    2190** LD	L, A
0B1B75 19    2191** ADD	HL, DE
0B1B76 C9    2192** RET
             2193** ;
0B1B77 CD    2194** CHANEL:			CALL    NXT			; Skip whitespace
0B1B78 61 
0B1B79 0D 
0B1B7A 0B 
0B1B7B FE    2195** CP      '#'			; Check for the '#' symbol
0B1B7C 23 
0B1B7D 3E    2196** LD      A,45
0B1B7E 2D 
0B1B7F C2    2197** JP      NZ,ERROR_        	; If it is missing, then throw a "Missing #" error
0B1B80 51 
0B1B81 3A 
0B1B82 0B 
0B1B83 FD    2198** CHNL:			INC     IY             		; Bump past the '#'
0B1B84 23 
0B1B85 CD    2199** CALL    ITEMI			; Get the channel number
0B1B86 16 
0B1B87 06 
0B1B88 0B 
0B1B89 D9    2200** EXX
0B1B8A EB    2201** EX      DE,HL			; DE: The channel number
0B1B8B C9    2202** RET
             2203** 
             2204** ; ASSEMBLER -------------------------------------------------------------------
             2205** 
             2206** ; Language independant control section:
             2207** ;  Outputs: A=delimiter, carry set if syntax error.
             2208** ;
0B1B8C CD    2209** ASSEM:			CALL    SKIP
0B1B8D A6 
0B1B8E 20 
0B1B8F 0B 
0B1B90 FD    2210** INC     IY
0B1B91 23 
0B1B92 FE    2211** CP      ':'
0B1B93 3A 
0B1B94 28    2212** JR      Z,ASSEM
0B1B95 F6 
0B1B96 FE    2213** CP      ']'
0B1B97 5D 
0B1B98 C8    2214** RET     Z
0B1B99 FE    2215** CP      CR
0B1B9A 0D 
0B1B9B C8    2216** RET     Z
0B1B9C FD    2217** DEC     IY
0B1B9D 2B 
0B1B9E DD    2218** LD      IX,(PC)         	; Program counter (P% - defined in equs.inc)
0B1B9F 2A 
0B1BA0 40 
0B1BA1 4F 
0B1BA1 0B   
0B1BA3 21    2219** LD      HL,LISTON
0B1BA4 40 
0B1BA5 50 
0B1BA6 0B 
0B1BA7 CB    2220** BIT     6,(HL)
0B1BA8 76 
0B1BA9 28    2221** JR      Z,ASSEM0
0B1BAA 05 
0B1BAB DD    2222** LD      IX,(OC)         	; Code origin (O% - defined in equs.inc)
0B1BAC 2A 
0B1BAD 3C 
0B1BAE 4F 
0B1BAE 0B   
0B1BB0 DD    2223** ASSEM0:			PUSH    IX
0B1BB1 E5 
0B1BB2 FD    2224** PUSH    IY
0B1BB3 E5 
0B1BB4 CD    2225** CALL    ASMB
0B1BB5 64 
0B1BB6 1C 
0B1BB7 0B 
0B1BB8 C1    2226** POP     BC
0B1BB9 D1    2227** POP     DE
0B1BBA D8    2228** RET     C
0B1BBB CD    2229** CALL    SKIP
0B1BBC A6 
0B1BBD 20 
0B1BBE 0B 
0B1BBF 37    2230** SCF
0B1BC0 C0    2231** RET     NZ
0B1BC1 FD    2232** DEC     IY
0B1BC2 2B 
0B1BC3 FD    2233** ASSEM3:			INC     IY
0B1BC4 23 
0B1BC5 FD    2234** LD      A,(IY)
0B1BC6 7E 
0B1BC7 00 
0B1BC8 CD    2235** CALL    TERM0
0B1BC9 72 
0B1BCA 1A 
0B1BCB 0B 
0B1BCC 20    2236** JR      NZ,ASSEM3
0B1BCD F5 
0B1BCE 3A    2237** LD      A,(LISTON)
0B1BCF 40 
0B1BD0 50 
0B1BD1 0B 
0B1BD2 DD    2238** PUSH    IX
0B1BD3 E5 
0B1BD4 E1    2239** POP     HL
0B1BD5 B7    2240** OR      A
0B1BD6 ED    2241** SBC     HL,DE
0B1BD7 52 
0B1BD8 EB    2242** EX      DE,HL           	; DE: Number of bytes
0B1BD9 E5    2243** PUSH    HL
0B1BDA 2A    2244** LD      HL,(PC)
0B1BDB 40 
0B1BDC 4F 
0B1BDD 0B 
0B1BDE E5    2245** PUSH    HL
0B1BDF 19    2246** ADD     HL,DE
0B1BE0 22    2247** LD      (PC),HL         	; Update PC
0B1BE1 40 
0B1BE2 4F 
0B1BE3 0B 
0B1BE4 CB    2248** BIT     6,A
0B1BE5 77 
0B1BE6 28    2249** JR      Z,ASSEM5
0B1BE7 09 
0B1BE8 2A    2250** LD      HL,(OC)
0B1BE9 3C 
0B1BEA 4F 
0B1BEB 0B 
0B1BEC 19    2251** ADD     HL,DE
0B1BED 22    2252** LD      (OC),HL         	; Update OC
0B1BEE 3C 
0B1BEF 4F 
0B1BF0 0B 
0B1BF1 E1    2253** ASSEM5:			POP     HL              	; Old PC
0B1BF2 DD    2254** POP     IX              	; Code here
0B1BF3 E1 
0B1BF4 CB    2255** BIT     4,A
0B1BF5 67 
0B1BF6 28    2256** JR      Z,ASSEM
0B1BF7 94 
0B1BF8 22    2257** LD	(R0),HL			; Store HL in R0 so we can access the MSB
0B1BF9 4A 
0B1BFA 50 
0B1BFB 0B 
0B1BFC 3A    2258** LD	A,(R0+2)		; Print out the address
0B1BFD 4C 
0B1BFE 50 
0B1BFF 0B 
0B1C00 CD    2259** CALL	HEX_EX
0B1C01 4E 
0B1C02 1C 
0B1C03 0B 
0B1C04 7C    2260** LD      A,H
0B1C05 CD    2261** CALL    HEX_EX
0B1C06 4E 
0B1C07 1C 
0B1C08 0B 
0B1C09 7D    2262** LD      A,L
0B1C0A CD    2263** CALL    HEXSP
0B1C0B 46 
0B1C0C 1C 
0B1C0D 0B 
0B1C0E AF    2264** XOR     A
0B1C0F BB    2265** CP      E
0B1C10 28    2266** JR      Z,ASSEM2
0B1C11 18 
             2267** ;
0B1C12 3A    2268** ASSEM1:			LD      A,(COUNT)
0B1C13 3D 
0B1C14 50 
0B1C15 0B 
0B1C16 FE    2269** CP      20
0B1C17 14 
0B1C18 3E    2270** LD      A,7
0B1C19 07 
0B1C1A D4    2271** CALL    NC,TABIT        	; Next line
0B1C1B B4 
0B1C1C 1A 
0B1C1D 0B 
0B1C1E DD    2272** LD      A,(IX)
0B1C1F 7E 
0B1C20 00 
0B1C21 CD    2273** CALL    HEXSP
0B1C22 46 
0B1C23 1C 
0B1C24 0B 
0B1C25 DD    2274** INC     IX
0B1C26 23 
0B1C27 1D    2275** DEC     E
0B1C28 20    2276** JR      NZ,ASSEM1
0B1C29 E8 
             2277** ;
0B1C2A 3E    2278** ASSEM2:			LD      A,22			; Tab to the disassembly field
0B1C2B 16 
0B1C2C CD    2279** CALL    TABIT
0B1C2D B4 
0B1C2E 1A 
0B1C2F 0B 
0B1C30 FD    2280** PUSH    IY
0B1C31 E5 
0B1C32 E1    2281** POP     HL
0B1C33 ED    2282** SBC     HL,BC
0B1C34 42 
0B1C35 0A    2283** ASSEM4:			LD      A,(BC)
0B1C36 CD    2284** CALL    OUT_
0B1C37 5D 
0B1C38 3C 
0B1C39 0B 
0B1C3A 03    2285** INC     BC
0B1C3B 2D    2286** DEC     L
0B1C3C 20    2287** JR      NZ,ASSEM4
0B1C3D F7 
0B1C3E CD    2288** CALL    CRLF
0B1C3F 38 
0B1C40 3C 
0B1C41 0B 
0B1C42 C3    2289** JP      ASSEM
0B1C43 8C 
0B1C44 1B 
0B1C45 0B 
             2290** ;
0B1C46 CD    2291** HEXSP:			CALL    HEX_EX
0B1C47 4E 
0B1C48 1C 
0B1C49 0B 
0B1C4A 3E    2292** LD      A,' '
0B1C4B 20 
0B1C4C 18    2293** JR      OUTCH1
0B1C4D 12 
0B1C4E F5    2294** HEX_EX:			PUSH    AF
0B1C4F 0F    2295** RRCA
0B1C50 0F    2296** RRCA
0B1C51 0F    2297** RRCA
0B1C52 0F    2298** RRCA
0B1C53 CD    2299** CALL    HEXOUT
0B1C54 58 
0B1C55 1C 
0B1C56 0B 
0B1C57 F1    2300** POP     AF
0B1C58 E6    2301** HEXOUT:			AND     0FH
0B1C59 0F 
0B1C5A C6    2302** ADD     A,90H
0B1C5B 90 
0B1C5C 27    2303** DAA
0B1C5D CE    2304** ADC     A,40H
0B1C5E 40 
0B1C5F 27    2305** DAA
0B1C60 C3    2306** OUTCH1:			JP      OUT_
0B1C61 5D 
0B1C62 3C 
0B1C63 0B 
             2307** 
             2308** ; Processor Specific Translation Section:
             2309** ;
             2310** ; Register Usage: B: Type of most recent operand (the base value selected from the opcode table)
             2311** ;                 C: Opcode beig built
             2312** ;                 D: Flags
             2313** ;			Bit 7: Set to 1 if the instruction uses long addressing
             2314** ;			Bit 6: Set to 1 if the instruction is an index instruction with offset
             2315** ;                 E: Offset from IX or IY
             2316** ;                HL: Numeric operand value
             2317** ;                IX: Code destination pointer
             2318** ;                IY: Source text pointer
             2319** ;    Inputs: A = initial character
             2320** ;   Outputs: Carry set if syntax error.
             2321** ;
0B1C64 FE    2322** ASMB:			CP      '.'			; Check for a dot; this indicates a label
0B1C65 2E 
0B1C66 20    2323** JR      NZ,ASMB1		; No, so just process the instruction
0B1C67 1F 
0B1C68 FD    2324** INC     IY			; Skip past the dot to the label name
0B1C69 23 
0B1C6A DD    2325** PUSH    IX			; Store the code destination pointer
0B1C6B E5 
0B1C6C CD    2326** CALL    VAR_			; Create a variable
0B1C6D 7F 
0B1C6E 0F 
0B1C6F 0B 
0B1C70 F5    2327** PUSH    AF
0B1C71 CD    2328** CALL    ZERO			; Zero it
0B1C72 84 
0B1C73 0C 
0B1C74 0B 
0B1C75 3A    2329** LD	A,(PC+2)
0B1C76 42 
0B1C77 4F 
0B1C78 0B 
0B1C79 6F    2330** LD	L,A			; The MSB of the 24-bit address
0B1C7A D9    2331** EXX
0B1C7B 2A    2332** LD      HL,(PC)			; The LSW of the 24-bit address (only 16-bits used)
0B1C7C 40 
0B1C7D 4F 
0B1C7E 0B 
0B1C7F D9    2333** EXX
0B1C80 F1    2334** POP     AF
0B1C81 CD    2335** CALL    STORE			; Store the program counter
0B1C82 C7 
0B1C83 18 
0B1C84 0B 
0B1C85 DD    2336** POP     IX			; Restore the code destination pointer
0B1C86 E1 
             2337** ;
0B1C87 3A    2338** ASMB1:			LD	A,(LISTON)		; Get the OPT flags
0B1C88 40 
0B1C89 50 
0B1C8A 0B 
0B1C8B E6    2339** AND	80H
0B1C8C 80 
0B1C8D 57    2340** LD      D,A     		;  D: Clear the flags and set the initial ADL mode (copied from bit 7 of LISTON)
0B1C8E CD    2341** CALL    SKIP			; Skip any whitespace
0B1C8F A6 
0B1C90 20 
0B1C91 0B 
0B1C92 C8    2342** RET     Z			; And return if there is nothing further to process
0B1C93 FE    2343** CP      TCALL			; Check if it is the token CALL (it will have been tokenised by BASIC)
0B1C94 D6 
0B1C95 0E    2344** LD      C,0C4H			;  A: The base operand
0B1C96 C4 
0B1C97 FD    2345** INC     IY			; Skip past the token
0B1C98 23 
0B1C99 CA    2346** JP      Z,GROUP13_1		; And jump to GROUP13, which handles CALL
0B1C9A DB 
0B1C9B 1D 
0B1C9C 0B 
0B1C9D FD    2347** DEC     IY			; Skip back, as we're not doing the above at this point
0B1C9E 2B 
0B1C9F 21    2348** LD      HL,OPCODS		; HL: Pointer to the eZ80 opcodes table
0B1CA0 BD 
0B1CA1 20 
0B1CA2 0B 
0B1CA3 CD    2349** CALL    FIND			; Find the opcode
0B1CA4 55 
0B1CA5 20 
0B1CA6 0B 
0B1CA7 D8    2350** RET     C			; If not found, then return; carry indicates an error condition
0B1CA8 48    2351** LD      C,B     		;  C: A copy of the opcode
             2352** ;
             2353** ; GROUP 0: Trivial cases requiring no computation
             2354** ; GROUP 1: As Group 0, but with "ED" prefix
             2355** ;
0B1CA9 D6    2356** SUB     68			; The number of opcodes in GROUP0 and GROUP1
0B1CAA 44 
0B1CAB 30    2357** JR      NC,GROUP02		; If not in that range, then check GROUP2
0B1CAC 08 
0B1CAD FE    2358** CP      15-68			; Anything between 15 and 68 (neat compare trick here)
0B1CAE CB 
0B1CAF D4    2359** CALL    NC,ED			; Needs to be prefixed with ED
0B1CB0 AE 
0B1CB1 1F 
0B1CB2 0B 
0B1CB3 18    2360** JR      BYTE0			; Then write the opcode byte
0B1CB4 76 
             2361** ;
             2362** ; GROUP 2: BIT, RES, SET
             2363** ; GROUP 3: RLC, RRC, RL, RR, SLA, SRA, SRL
             2364** ;
0B1CB5 D6    2365** GROUP02:		SUB     10			; The number of opcodes in GROUP2 and GROUP3
0B1CB6 0A 
0B1CB7 30    2366** JR      NC,GROUP04		; If not in that range, then check GROUP4
0B1CB8 12 
0B1CB9 FE    2367** CP      3-10			;
0B1CBA F9 
0B1CBB DC    2368** CALL    C,BIT_
0B1CBC 43 
0B1CBD 20 
0B1CBE 0B 
0B1CBF D8    2369** RET     C
0B1CC0 CD    2370** CALL    REGLO
0B1CC1 14 
0B1CC2 20 
0B1CC3 0B 
0B1CC4 D8    2371** RET     C
0B1CC5 CD    2372** CALL    CB
0B1CC6 B2 
0B1CC7 1F 
0B1CC8 0B 
0B1CC9 18    2373** JR      BYTE0
0B1CCA 60 
             2374** ;
             2375** ; GROUP 4 - PUSH, POP, EX (SP)
             2376** ;
0B1CCB D6    2377** GROUP04:		SUB     3			; The number of opcodes in GROUP4
0B1CCC 03 
0B1CCD 30    2378** JR      NC,GROUP05		; If not in that range, then check GROUP5
0B1CCE 07 
0B1CCF CD    2379** GROUP04_1:		CALL    PAIR_EX
0B1CD0 36 
0B1CD1 20 
0B1CD2 0B 
0B1CD3 D8    2380** RET     C
0B1CD4 18    2381** JR      BYTE0
0B1CD5 55 
             2382** ;
             2383** ; GROUP 5 - SUB, AND, XOR, OR, CP
             2384** ; GROUP 6 - ADD, ADC, SBC
             2385** ;
0B1CD6 D6    2386** GROUP05:		SUB     8+2			; The number of opcodes in GROUP5 and GROUP6
0B1CD7 0A 
0B1CD8 30    2387** JR      NC,GROUP07
0B1CD9 39 
0B1CDA FE    2388** CP      5-8
0B1CDB FD 
0B1CDC 06    2389** LD      B,7
0B1CDD 07 
0B1CDE D4    2390** CALL    NC,OPND			; Get the first operand
0B1CDF C2 
0B1CE0 1F 
0B1CE1 0B 
0B1CE2 78    2391** LD      A,B
0B1CE3 FE    2392** CP      7			; Is the operand 'A'?
0B1CE4 07 
0B1CE5 20    2393** JR      NZ,GROUP05_HL		; No, so check for HL, IX or IY
0B1CE6 15 
             2394** ;
0B1CE7 CD    2395** GROUP05_1:		CALL    REGLO			; Handle ADD A,?
0B1CE8 14 
0B1CE9 20 
0B1CEA 0B 
0B1CEB 79    2396** LD      A,C
0B1CEC 30    2397** JR      NC,BIND1		; If it is a register, then write that out
0B1CED 2E 
0B1CEE EE    2398** XOR     46H			; Handle ADD A,n
0B1CEF 46 
0B1CF0 CD    2399** CALL    BIND
0B1CF1 B4 
0B1CF2 1F 
0B1CF3 0B 
0B1CF4 CD    2400** DB_:			CALL    NUMBER
0B1CF5 F4 
0B1CF6 1F 
0B1CF7 0B 
0B1CF8 C3    2401** JP      VAL8
0B1CF9 AD 
0B1CFA 1D 
0B1CFB 0B 
             2402** ;
0B1CFC E6    2403** GROUP05_HL:		AND     3FH
0B1CFD 3F 
0B1CFE FE    2404** CP      12
0B1CFF 0C 
0B1D00 37    2405** SCF
0B1D01 C0    2406** RET     NZ
0B1D02 79    2407** LD      A,C
0B1D03 FE    2408** CP      80H
0B1D04 80 
0B1D05 0E    2409** LD      C,9
0B1D06 09 
0B1D07 28    2410** JR      Z,GROUP04_1
0B1D08 C6 
0B1D09 EE    2411** XOR     1CH
0B1D0A 1C 
0B1D0B 0F    2412** RRCA
0B1D0C 4F    2413** LD      C,A
0B1D0D CD    2414** CALL    ED
0B1D0E AE 
0B1D0F 1F 
0B1D10 0B 
0B1D11 18    2415** JR      GROUP04_1
0B1D12 BC 
             2416** ;
             2417** ; GROUP 7 - INC, DEC
             2418** ;
0B1D13 D6    2419** GROUP07:		SUB     2			; The number of opcodes in GROUP7
0B1D14 02 
0B1D15 30    2420** JR      NC,GROUP08
0B1D16 19 
0B1D17 CD    2421** CALL    REGHI
0B1D18 1B 
0B1D19 20 
0B1D1A 0B 
0B1D1B 79    2422** LD      A,C
0B1D1C D2    2423** BIND1:			JP      NC,BIND
0B1D1D B4 
0B1D1E 1F 
0B1D1F 0B 
0B1D20 EE    2424** XOR     64H
0B1D21 64 
0B1D22 07    2425** RLCA
0B1D23 07    2426** RLCA
0B1D24 07    2427** RLCA
0B1D25 4F    2428** LD      C,A
0B1D26 CD    2429** CALL    PAIR1_EX
0B1D27 3B 
0B1D28 20 
0B1D29 0B 
0B1D2A D8    2430** RET     C
0B1D2B 79    2431** BYTE0:			LD      A,C
0B1D2C C3    2432** JP      BYTE_
0B1D2D E3 
0B1D2E 1F 
0B1D2F 0B 
             2433** ;
             2434** ; Group 8: IN0, OUT0
             2435** ;
0B1D30 D6    2436** GROUP08:		SUB	2			; The number of opcodes in GROUP8
0B1D31 02 
0B1D32 30    2437** JR	NC,GROUP09
0B1D33 26 
0B1D34 FE    2438** CP	1-2
0B1D35 FF 
0B1D36 CC    2439** CALL    Z,NUMBER		; Fetch number first if OUT
0B1D37 F4 
0B1D38 1F 
0B1D39 0B 
0B1D3A 08    2440** EX      AF,AF'			; Save flags
0B1D3B CD    2441** CALL    REG			; Get the register value regardless
0B1D3C 08 
0B1D3D 20 
0B1D3E 0B 
0B1D3F D8    2442** RET     C			; Return if not a register
0B1D40 08    2443** EX      AF,AF'			; Restore the flags
0B1D41 DC    2444** CALL    C,NUMBER		; Fetch number last if IN
0B1D42 F4 
0B1D43 1F 
0B1D44 0B 
0B1D45 78    2445** LD	A,B			; Get the register number
0B1D46 FE    2446** CP	6			; Fail on (HL)
0B1D47 06 
0B1D48 37    2447** SCF
0B1D49 C8    2448** RET	Z
0B1D4A FE    2449** CP	8			; Check it is just single pairs only
0B1D4B 08 
0B1D4C 3F    2450** CCF
0B1D4D D8    2451** RET	C			; And return if it is an invalid register
0B1D4E 07    2452** RLCA				; Bind with the operand
0B1D4F 07    2453** RLCA
0B1D50 07    2454** RLCA
0B1D51 81    2455** ADD	A,C
             2456** ; BEGIN NOT IN BINARY
             2457** ; LD	C,A
             2458** ; CALL	ED			; Prefix with ED
             2459** ; LD	A,C
             2460** ; END NOT IN BINARY
0B1D52 CD    2461** CALL	BYTE_			; Write out the operand
0B1D53 E3 
0B1D54 1F 
0B1D55 0B 
0B1D56 C3    2462** JP	VAL8			; Write out the value
0B1D57 AD 
0B1D58 1D 
0B1D59 0B 
             2463** ;
             2464** ; GROUP 9 - IN
             2465** ; GROUP 10 - OUT
             2466** ;
0B1D5A D6    2467** GROUP09:		SUB     2			; The number of opcodes in GROUP09 amd GROUP10
0B1D5B 02 
0B1D5C 30    2468** JR      NC,GROUP11
0B1D5D 25 
0B1D5E FE    2469** CP      1-2			; Check if Group 9 or Group 1
0B1D5F FF 
0B1D60 CC    2470** CALL    Z,CORN			; Call CORN if Group 10 (OUT)
0B1D61 A2 
0B1D62 1F 
0B1D63 0B 
0B1D64 08    2471** EX      AF,AF'			; Save flags
0B1D65 CD    2472** CALL    REGHI			; Get the register value regardless
0B1D66 1B 
0B1D67 20 
0B1D68 0B 
0B1D69 D8    2473** RET     C			; Return if not a register
0B1D6A 08    2474** EX      AF,AF'			; Restore the flags
0B1D6B DC    2475** CALL    C,CORN			; Call CORN if Group 9 (IN)
0B1D6C A2 
0B1D6D 1F 
0B1D6E 0B 
0B1D6F 24    2476** INC     H			; If it is IN r,(C) or OUT (C),r then
0B1D70 28    2477** JR      Z,BYTE0			; Just write the operand out
0B1D71 B9 
             2478** ;
0B1D72 78    2479** LD      A,B			; Check the register
0B1D73 FE    2480** CP      7
0B1D74 07 
0B1D75 37    2481** SCF
0B1D76 C0    2482** RET     NZ			; If it is not A, then return
             2483** ;
0B1D77 79    2484** LD      A,C			; Bind the register with the operand
0B1D78 EE    2485** XOR     3
0B1D79 03 
0B1D7A 07    2486** RLCA
0B1D7B 07    2487** RLCA
0B1D7C 07    2488** RLCA
0B1D7D CD    2489** CALL    BYTE_			; Write out the operand
0B1D7E E3 
0B1D7F 1F 
0B1D80 0B 
0B1D81 18    2490** JR      VAL8			; And the value
0B1D82 2A 
             2491** ;
             2492** ; GROUP 11 - JR, DJNZ
             2493** ;
0B1D83 D6    2494** GROUP11:		SUB     2			; The number of opcodes in GROUP11
0B1D84 02 
0B1D85 30    2495** JR      NC,GROUP12
0B1D86 2B 
0B1D87 FE    2496** CP      1-2
0B1D88 FF 
0B1D89 C4    2497** CALL    NZ,COND_
0B1D8A 22 
0B1D8B 20 
0B1D8C 0B 
0B1D8D 79    2498** LD      A,C
0B1D8E 30    2499** JR      NC,@F
0B1D8F 02 
0B1D90 3E    2500** LD      A,18H
0B1D91 18 
0B1D92 CD    2501** @@:			CALL    BYTE_
0B1D93 E3 
0B1D94 1F 
0B1D95 0B 
0B1D96 CD    2502** CALL    NUMBER
0B1D97 F4 
0B1D98 1F 
0B1D99 0B 
0B1D9A ED    2503** LD      DE,(PC)
0B1D9B 5B 
0B1D9C 40 
0B1D9D 4F 
0B1D9D 0B   
0B1D9F 13    2504** INC     DE
0B1DA0 37    2505** SCF
0B1DA1 ED    2506** SBC     HL,DE
0B1DA2 52 
0B1DA3 7D    2507** LD      A,L
0B1DA4 17    2508** RLA
0B1DA5 9F    2509** SBC     A,A
0B1DA6 BC    2510** CP      H
0B1DA7 3E    2511** TOOFAR:			LD      A,1
0B1DA8 01 
0B1DA9 C2    2512** JP      NZ,ERROR_		; Throw an "Out of range" error
0B1DAA 51 
0B1DAB 3A 
0B1DAC 0B 
0B1DAD 7D    2513** VAL8:			LD      A,L
0B1DAE C3    2514** JP      BYTE_
0B1DAF E3 
0B1DB0 1F 
0B1DB1 0B 
             2515** ;
             2516** ; GROUP 12 - JP
             2517** ;
0B1DB2 D6    2518** GROUP12:		SUB	1			; The number of opcodes in GROUP12
0B1DB3 01 
0B1DB4 30    2519** JR	NC,GROUP13
0B1DB5 21 
0B1DB6 CD    2520** CALL	EZ80SF_PART		; Evaluate the suffix (just LIL and SIS)
0B1DB7 08 
0B1DB8 1F 
0B1DB9 0B 
0B1DBA D8    2521** RET	C			; Exit if an invalid suffix is provided
0B1DBB CD    2522** CALL    COND_			; Evaluate the conditions
0B1DBC 22 
0B1DBD 20 
0B1DBE 0B 
0B1DBF 79    2523** LD      A,C
0B1DC0 30    2524** JR      NC,GROUP12_1
0B1DC1 0D 
0B1DC2 78    2525** LD      A,B
0B1DC3 E6    2526** AND     3FH
0B1DC4 3F 
0B1DC5 FE    2527** CP      6
0B1DC6 06 
0B1DC7 3E    2528** LD      A,0E9H
0B1DC8 E9 
0B1DC9 CA    2529** JP      Z,BYTE_
0B1DCA E3 
0B1DCB 1F 
0B1DCC 0B 
0B1DCD 3E    2530** LD      A,0C3H
0B1DCE C3 
0B1DCF CD    2531** GROUP12_1:		CALL    BYTE_			; Output the opcode (with conditions)
0B1DD0 E3 
0B1DD1 1F 
0B1DD2 0B 
0B1DD3 C3    2532** JP	ADDR_			; Output the address
0B1DD4 5D 
0B1DD5 1F 
0B1DD6 0B 
             2533** ;
             2534** ; GROUP 13 - CALL
             2535** ;
0B1DD7 D6    2536** GROUP13:		SUB	1			; The number of opcodes in GROUP13
0B1DD8 01 
0B1DD9 30    2537** JR	NC,GROUP14
0B1DDA 0C 
0B1DDB CD    2538** GROUP13_1:		CALL	EZ80SF_FULL		; Evaluate the suffix
0B1DDC 20 
0B1DDD 1F 
0B1DDE 0B 
0B1DDF CD    2539** CALL    GROUP15_1		; Output the opcode (with conditions)
0B1DE0 02 
0B1DE1 1E 
0B1DE2 0B 
0B1DE3 C3    2540** JP	ADDR_			; Output the address
0B1DE4 5D 
0B1DE5 1F 
0B1DE6 0B 
             2541** ;
             2542** ; GROUP 14 - RST
             2543** ;
0B1DE7 D6    2544** GROUP14:		SUB	1			; The number of opcodes in GROUP14
0B1DE8 01 
0B1DE9 30    2545** JR	NC,GROUP15
0B1DEA 13 
0B1DEB CD    2546** CALL	EZ80SF_FULL		; Evaluate the suffix
0B1DEC 20 
0B1DED 1F 
0B1DEE 0B 
0B1DEF D8    2547** RET	C			; Exit if an invalid suffix provided
0B1DF0 CD    2548** CALL    NUMBER
0B1DF1 F4 
0B1DF2 1F 
0B1DF3 0B 
0B1DF4 A1    2549** AND     C
0B1DF5 B4    2550** OR      H
0B1DF6 20    2551** JR      NZ,TOOFAR
0B1DF7 AF 
0B1DF8 7D    2552** LD      A,L
0B1DF9 B1    2553** OR      C
0B1DFA C3    2554** JP      BYTE_
0B1DFB E3 
0B1DFC 1F 
0B1DFD 0B 
             2555** ;
             2556** ; GROUP 15 - RET
             2557** ;
0B1DFE D6    2558** GROUP15:		SUB	1			; The number of opcodes in GROUP15
0B1DFF 01 
0B1E00 30    2559** JR	NC,GROUP16
0B1E01 0F 
0B1E02 CD    2560** GROUP15_1:		CALL    COND_
0B1E03 22 
0B1E04 20 
0B1E05 0B 
0B1E06 79    2561** LD      A,C
0B1E07 D2    2562** JP      NC,BYTE_
0B1E08 E3 
0B1E09 1F 
0B1E0A 0B 
0B1E0B F6    2563** OR      9
0B1E0C 09 
0B1E0D C3    2564** JP      BYTE_
0B1E0E E3 
0B1E0F 1F 
0B1E10 0B 
             2565** ;
             2566** ; GROUP 16 - LD
             2567** ;
0B1E11 D6    2568** GROUP16:		SUB	1			; The number of opcodes in GROUP16
0B1E12 01 
0B1E13 30    2569** JR	NC,GROUP17
0B1E14 74 
0B1E15 CD    2570** CALL	EZ80SF_FULL		; Evaluate the suffix
0B1E16 20 
0B1E17 1F 
0B1E18 0B 
0B1E19 CD    2571** CALL    LDOP			; Check for accumulator loads
0B1E1A 51 
0B1E1B 20 
0B1E1C 0B 
0B1E1D D2    2572** JP      NC,LDA			; Yes, so jump here
0B1E1E 7D 
0B1E1F 1F 
0B1E20 0B 
0B1E21 CD    2573** CALL    REGHI
0B1E22 1B 
0B1E23 20 
0B1E24 0B 
0B1E25 08    2574** EX      AF,AF'
0B1E26 CD    2575** CALL    SKIP
0B1E27 A6 
0B1E28 20 
0B1E29 0B 
0B1E2A FE    2576** CP      '('			; Check for bracket
0B1E2B 28 
0B1E2C 28    2577** JR      Z,LDIN			; Yes, so we're doing an indirect load from memory
0B1E2D 24 
0B1E2E 08    2578** EX      AF,AF'
0B1E2F D2    2579** JP      NC,GROUP05_1		; Load single register direct; go here
0B1E30 E7 
0B1E31 1C 
0B1E32 0B 
0B1E33 0E    2580** LD      C,1
0B1E34 01 
0B1E35 CD    2581** CALL    PAIR1_EX
0B1E36 3B 
0B1E37 20 
0B1E38 0B 
0B1E39 D8    2582** RET     C
0B1E3A 3E    2583** LD      A,14
0B1E3B 0E 
0B1E3C B8    2584** CP      B
0B1E3D 47    2585** LD      B,A
0B1E3E CC    2586** CALL    Z,PAIR_EX
0B1E3F 36 
0B1E40 20 
0B1E41 0B 
0B1E42 78    2587** LD      A,B
0B1E43 E6    2588** AND     3FH
0B1E44 3F 
0B1E45 FE    2589** CP      12
0B1E46 0C 
0B1E47 79    2590** LD      A,C
0B1E48 C2    2591** JP      NZ,GROUP12_1		; Load register pair direct; go here
0B1E49 CF 
0B1E4A 1D 
0B1E4B 0B 
0B1E4C 3E    2592** LD      A,0F9H
0B1E4D F9 
0B1E4E C3    2593** JP      BYTE_
0B1E4F E3 
0B1E50 1F 
0B1E51 0B 
             2594** ;
0B1E52 08    2595** LDIN:			EX      AF,AF'
0B1E53 C5    2596** PUSH    BC
0B1E54 D4    2597** CALL    NC,REGLO
0B1E55 14 
0B1E56 20 
0B1E57 0B 
0B1E58 79    2598** LD      A,C
0B1E59 C1    2599** POP     BC
0B1E5A D2    2600** JP      NC,BIND
0B1E5B B4 
0B1E5C 1F 
0B1E5D 0B 
0B1E5E 0E    2601** LD      C,0AH
0B1E5F 0A 
0B1E60 CD    2602** CALL    PAIR1_EX
0B1E61 3B 
0B1E62 20 
0B1E63 0B 
0B1E64 CD    2603** CALL    LD16
0B1E65 88 
0B1E66 1F 
0B1E67 0B 
0B1E68 D2    2604** JP      NC,GROUP12_1
0B1E69 CF 
0B1E6A 1D 
0B1E6B 0B 
0B1E6C CD    2605** CALL    NUMBER
0B1E6D F4 
0B1E6E 1F 
0B1E6F 0B 
0B1E70 0E    2606** LD      C,2
0B1E71 02 
0B1E72 CD    2607** CALL    PAIR_EX
0B1E73 36 
0B1E74 20 
0B1E75 0B 
0B1E76 CD    2608** CALL    LD16
0B1E77 88 
0B1E78 1F 
0B1E79 0B 
0B1E7A D8    2609** RET     C
0B1E7B CD    2610** CALL    BYTE_
0B1E7C E3 
0B1E7D 1F 
0B1E7E 0B 
0B1E7F CB    2611** BIT	7,D			; Check the ADL flag
0B1E80 7A 
0B1E81 C2    2612** JP	NZ,VAL24 		; If it is set, then use 24-bit addresses
0B1E82 72 
0B1E83 1F 
0B1E84 0B 
0B1E85 C3    2613** JP      VAL16			; Otherwise use 16-bit addresses
0B1E86 65 
0B1E87 1F 
0B1E88 0B 
             2614** ;
             2615** ; Group 17 - TST
             2616** ;
0B1E89 D6    2617** GROUP17:		SUB	1			; The number of opcodes in GROUP17
0B1E8A 01 
0B1E8B 30    2618** JR	NC,OPTS
0B1E8C 25 
0B1E8D CD    2619** CALL	ED			; Needs to be prefixed with ED
0B1E8E AE 
0B1E8F 1F 
0B1E90 0B 
0B1E91 CD    2620** CALL	REG			; Fetch the register
0B1E92 08 
0B1E93 20 
0B1E94 0B 
0B1E95 30    2621** JR	NC,GROUP17_1		; It's just a register
0B1E96 0E 
             2622** ;
0B1E97 3E    2623** LD	A,64H			; Opcode for TST n
0B1E98 64 
0B1E99 CD    2624** CALL	BYTE_			; Write out the opcode
0B1E9A E3 
0B1E9B 1F 
0B1E9C 0B 
0B1E9D CD    2625** CALL	NUMBER			; Get the number
0B1E9E F4 
0B1E9F 1F 
0B1EA0 0B 
0B1EA1 C3    2626** JP	VAL8			; And write that out
0B1EA2 AD 
0B1EA3 1D 
0B1EA4 0B 
             2627** ;
0B1EA5 78    2628** GROUP17_1:		LD	A,B			; Check the register rangs
0B1EA6 FE    2629** CP	8
0B1EA7 08 
0B1EA8 3F    2630** CCF
0B1EA9 D8    2631** RET	C			; Ret with carry flag set for error if out of range
0B1EAA 07    2632** RLCA				; Get the opcode value
0B1EAB 07    2633** RLCA
0B1EAC 07    2634** RLCA
0B1EAD 81    2635** ADD	A,C			; Add the opcode base in
0B1EAE C3    2636** JP	BYTE_
0B1EAF E3 
0B1EB0 1F 
0B1EB1 0B 
             2637** 
             2638** ;
             2639** ; Assembler directives - OPT, ADL
             2640** ;
0B1EB2 D6    2641** OPTS:			SUB	2
0B1EB3 02 
0B1EB4 30    2642** JR	NC, DEFS
0B1EB5 2B 
0B1EB6 FE    2643** CP	1-2			; Check for ADL opcode
0B1EB7 FF 
0B1EB8 28    2644** JR	Z, ADL_
0B1EB9 13 
             2645** ;
0B1EBA CD    2646** OPT:			CALL    NUMBER			; Fetch the OPT value
0B1EBB F4 
0B1EBC 1F 
0B1EBD 0B 
0B1EBE 21    2647** LD      HL,LISTON		; Address of the LISTON/OPT flag
0B1EBF 40 
0B1EC0 50 
0B1EC1 0B 
0B1EC2 E6    2648** AND	7			; Only interested in the first three bits
0B1EC3 07 
0B1EC4 4F    2649** LD      C,A			; Store the new OPT value in C
0B1EC5 ED    2650** RLD				; Shift the top nibble of LISTON (OPT) into A
0B1EC6 6F 
0B1EC7 E6    2651** AND	8			; Clear the bottom three bits, preserving the ADL bit
0B1EC8 08 
0B1EC9 B1    2652** OR	C			; OR in the new value
0B1ECA ED    2653** RRD				; And shift the nibble back in
0B1ECB 67 
0B1ECC C9    2654** RET
             2655** ;
0B1ECD CD    2656** ADL_:			CALL	NUMBER			; Fetch the ADL value
0B1ECE F4 
0B1ECF 1F 
0B1ED0 0B 
0B1ED1 E6    2657** AND	1			; Only interested if it is 0 or 1
0B1ED2 01 
0B1ED3 0F    2658** RRCA				; Rotate to bit 7
0B1ED4 4F    2659** LD	C,A			; Store in C
0B1ED5 3A    2660** LD	A,(LISTON)		; Get the LISTON system variable
0B1ED6 40 
0B1ED7 50 
0B1ED8 0B 
0B1ED9 E6    2661** AND	7Fh			; Clear bit 7
0B1EDA 7F 
0B1EDB B1    2662** OR	C			; OR in the ADL value
0B1EDC 32    2663** LD	(LISTON),A		; Store
0B1EDD 40 
0B1EDE 50 
0B1EDF 0B 
0B1EE0 C9    2664** RET
             2665** ;
             2666** ; DEFB, DEFW, DEFL, DEFM
             2667** ;
0B1EE1 B7    2668** DEFS:			OR	A			; Handle DEFB
0B1EE2 CA    2669** JP	Z, DB_
0B1EE3 F4 
0B1EE4 1C 
0B1EE5 0B 
0B1EE6 3D    2670** DEC	A			; Handle DEFW
0B1EE7 CA    2671** JP	Z, ADDR16
0B1EE8 61 
0B1EE9 1F 
0B1EEA 0B 
0B1EEB 3D    2672** DEC	A			; Handle DEFL
0B1EEC CA    2673** JP	Z, ADDR24
0B1EED 6E 
0B1EEE 1F 
0B1EEF 0B 
             2674** ;
0B1EF0 DD    2675** PUSH    IX			; Handle DEFM
0B1EF1 E5 
0B1EF2 CD    2676** CALL    EXPRS
0B1EF3 06 
0B1EF4 06 
0B1EF5 0B 
0B1EF6 DD    2677** POP     IX
0B1EF7 E1 
0B1EF8 21    2678** LD      HL,ACCS
0B1EF9 00 
0B1EFA 4D 
0B1EFB 0B 
0B1EFC AF    2679** @@:			XOR     A
0B1EFD BB    2680** CP      E
0B1EFE C8    2681** RET     Z
0B1EFF 7E    2682** LD      A,(HL)
0B1F00 23    2683** INC     HL
0B1F01 CD    2684** CALL    BYTE_
0B1F02 E3 
0B1F03 1F 
0B1F04 0B 
0B1F05 1D    2685** DEC     E
0B1F06 18    2686** JR      @B
0B1F07 F4 
             2687** 
             2688** ;
             2689** ;SUBROUTINES:
             2690** ;
0B1F08 FD    2691** EZ80SF_PART:		LD	A,(IY)			; Check for a dot
0B1F09 7E 
0B1F0A 00 
0B1F0B FE    2692** CP	'.'
0B1F0C 2E 
0B1F0D 28    2693** JR	Z, @F			; If present, then carry on processing the eZ80 suffix
0B1F0E 02 
0B1F0F B7    2694** OR	A			; Reset the carry flag (no error)
0B1F10 C9    2695** RET				; And return
0B1F11 FD    2696** @@:			INC	IY			; Skip the dot
0B1F12 23 
0B1F13 C5    2697** PUSH	BC			; Push the operand
0B1F14 21    2698** LD	HL,EZ80SFS_2		; Check the shorter fully qualified table (just LIL and SIS)
0B1F15 3C 
0B1F16 23 
0B1F17 0B 
0B1F18 CD    2699** CALL	FIND			; Look up the operand
0B1F19 55 
0B1F1A 20 
0B1F1B 0B 
0B1F1C 30    2700** JR	NC,EZ80SF_OK
0B1F1D 24 
0B1F1E C1    2701** POP	BC			; Not found at this point, so will return with a C (error)
0B1F1F C9    2702** RET
             2703** ;
0B1F20 FD    2704** EZ80SF_FULL:		LD	A,(IY)			; Check for a dot
0B1F21 7E 
0B1F22 00 
0B1F23 FE    2705** CP	'.'
0B1F24 2E 
0B1F25 28    2706** JR	Z,@F			; If present, then carry on processing the eZ80 suffix
0B1F26 02 
0B1F27 B7    2707** OR	A			; Reset the carry flag (no error)
0B1F28 C9    2708** RET				; And return
0B1F29 FD    2709** @@:			INC	IY 			; Skip the dot
0B1F2A 23 
0B1F2B C5    2710** PUSH	BC			; Push the operand
0B1F2C 21    2711** LD	HL,EZ80SFS_1		; First check the fully qualified table
0B1F2D 34 
0B1F2E 23 
0B1F2F 0B 
0B1F30 CD    2712** CALL	FIND 			; Look up the operand
0B1F31 55 
0B1F32 20 
0B1F33 0B 
0B1F34 30    2713** JR	NC,EZ80SF_OK		; Yes, we've found it, so go write it out
0B1F35 0C 
0B1F36 CD    2714** CALL	EZ80SF_TABLE		; Get the correct shortcut table in HL based upon the ADL mode
0B1F37 51 
0B1F38 1F 
0B1F39 0B 
0B1F3A CD    2715** CALL	FIND
0B1F3B 55 
0B1F3C 20 
0B1F3D 0B 
0B1F3E 30    2716** JR	NC,EZ80SF_OK
0B1F3F 02 
0B1F40 C1    2717** POP	BC			; Not found at this point, so will return with a C (error)
0B1F41 C9    2718** RET
             2719** ;
0B1F42 78    2720** EZ80SF_OK:		LD	A,B			; The operand value
0B1F43 D4    2721** CALL	NC,BYTE_ 		; Write it out if found
0B1F44 E3 
0B1F45 1F 
0B1F46 0B 
0B1F47 CB    2722** RES	7,D			; Clear the default ADL mode from the flags
0B1F48 BA 
0B1F49 E6    2723** AND	2			; Check the second half of the suffix (.xxL)
0B1F4A 02 
0B1F4B 0F    2724** RRCA				; Shift into bit 7
0B1F4C 0F    2725** RRCA
0B1F4D B2    2726** OR	D			; Or into bit 7 of D
0B1F4E 57    2727** LD	D,A
0B1F4F C1    2728** POP	BC 			; Restore the operand
0B1F50 C9    2729** RET
             2730** ;
0B1F51 21    2731** EZ80SF_TABLE:		LD	HL,EZ80SFS_ADL0		; Return with the ADL0 lookup table
0B1F52 45 
0B1F53 23 
0B1F54 0B 
0B1F55 CB    2732** BIT 	7,D			; if bit 7 of D is 0
0B1F56 7A 
0B1F57 C8    2733** RET	Z
0B1F58 21    2734** LD	HL,EZ80SFS_ADL1		; Otherwise return with the ADL1 lookup table
0B1F59 50 
0B1F5A 23 
0B1F5B 0B 
0B1F5C C9    2735** RET
             2736** ;
0B1F5D CB    2737** ADDR_:			BIT	7,D			; Check the ADL flag
0B1F5E 7A 
0B1F5F 20    2738** JR	NZ,ADDR24 		; If it is set, then use 24-bit addresses
0B1F60 0D 
             2739** ;
0B1F61 CD    2740** ADDR16:			CALL	NUMBER			; Fetch an address (16-bit) and fall through to VAL16
0B1F62 F4 
0B1F63 1F 
0B1F64 0B 
0B1F65 CD    2741** VAL16:			CALL    VAL8			; Write out a 16-bit value (HL)
0B1F66 AD 
0B1F67 1D 
0B1F68 0B 
0B1F69 7C    2742** LD      A,H
0B1F6A C3    2743** JP      BYTE_
0B1F6B E3 
0B1F6C 1F 
0B1F6D 0B 
             2744** ;
0B1F6E CD    2745** ADDR24:			CALL    NUMBER			; Fetch an address (24-bit) and fall through to VAL24
0B1F6F F4 
0B1F70 1F 
0B1F71 0B 
0B1F72 CD    2746** VAL24:			CALL	VAL16			; Lower 16-bits are in HL
0B1F73 65 
0B1F74 1F 
0B1F75 0B 
0B1F76 D9    2747** EXX
0B1F77 7D    2748** LD	A,L			; Upper 16-bits are in HL', just need L' to make up 24-bit value
0B1F78 D9    2749** EXX
0B1F79 C3    2750** JP	BYTE_
0B1F7A E3 
0B1F7B 1F 
0B1F7C 0B 
             2751** ;
0B1F7D FE    2752** LDA:			CP      4
0B1F7E 04 
0B1F7F DC    2753** CALL    C,ED
0B1F80 AE 
0B1F81 1F 
0B1F82 0B 
0B1F83 78    2754** LD      A,B
0B1F84 C3    2755** JP      BYTE_
0B1F85 E3 
0B1F86 1F 
0B1F87 0B 
             2756** ;
0B1F88 78    2757** LD16:			LD      A,B
0B1F89 38    2758** JR      C,LD8
0B1F8A 0F 
0B1F8B 78    2759** LD      A,B
0B1F8C E6    2760** AND     3FH
0B1F8D 3F 
0B1F8E FE    2761** CP      12
0B1F8F 0C 
0B1F90 79    2762** LD      A,C
0B1F91 C8    2763** RET     Z
0B1F92 CD    2764** CALL    ED
0B1F93 AE 
0B1F94 1F 
0B1F95 0B 
0B1F96 79    2765** LD      A,C
0B1F97 F6    2766** OR      43H
0B1F98 43 
0B1F99 C9    2767** RET
             2768** ;
0B1F9A FE    2769** LD8:			CP      7
0B1F9B 07 
0B1F9C 37    2770** SCF
0B1F9D C0    2771** RET     NZ
0B1F9E 79    2772** LD      A,C
0B1F9F F6    2773** OR      30H
0B1FA0 30 
0B1FA1 C9    2774** RET
             2775** ;
             2776** ; Used in IN and OUT to handle whether the operand is C or a number
             2777** ;
0B1FA2 C5    2778** CORN:			PUSH    BC
0B1FA3 CD    2779** CALL    OPND			; Get the operand
0B1FA4 C2 
0B1FA5 1F 
0B1FA6 0B 
0B1FA7 CB    2780** BIT     5,B
0B1FA8 68 
0B1FA9 C1    2781** POP     BC
0B1FAA 28    2782** JR      Z,NUMBER		; If bit 5 is clear, then it's IN A,(N) or OUT (N),A, so fetch the port number
0B1FAB 48 
0B1FAC 26    2783** LD      H,-1			; At this point it's IN r,(C) or OUT (C),r, so flag by setting H to &FF
0B1FAD FF 
             2784** ;
0B1FAE 3E    2785** ED:			LD      A,0EDH			; Write an ED prefix out
0B1FAF ED 
0B1FB0 18    2786** JR      BYTE_
0B1FB1 31 
             2787** ;
0B1FB2 3E    2788** CB:			LD      A,0CBH
0B1FB3 CB 
0B1FB4 FE    2789** BIND:			CP      76H
0B1FB5 76 
0B1FB6 37    2790** SCF
0B1FB7 C8    2791** RET     Z               	; Reject LD (HL),(HL)
0B1FB8 CD    2792** CALL    BYTE_
0B1FB9 E3 
0B1FBA 1F 
0B1FBB 0B 
0B1FBC CB    2793** BIT	6,D			; Check the index bit in flags
0B1FBD 72 
0B1FBE C8    2794** RET     Z
0B1FBF 7B    2795** LD      A,E			; If there is an index, output the offset
0B1FC0 18    2796** JR      BYTE_
0B1FC1 21 
             2797** ;
             2798** ; Search through the operand table
             2799** ; Returns:
             2800** ; - B: The operand type
             2801** ; - D: Bit 7: 0 = no prefix, 1 = prefix
             2802** ; - E: The IX/IY offset
             2803** ; - F: Carry if not found
             2804** ;
0B1FC2 E5    2805** OPND:			PUSH    HL			; Preserve HL
0B1FC3 21    2806** LD      HL,OPRNDS		; The operands table
0B1FC4 C6 
0B1FC5 22 
0B1FC6 0B 
0B1FC7 CD    2807** CALL    FIND			; Find the operand
0B1FC8 55 
0B1FC9 20 
0B1FCA 0B 
0B1FCB E1    2808** POP     HL
0B1FCC D8    2809** RET     C			; Return if not found
0B1FCD CB    2810** BIT     7,B			; Check if it is an index register (IX, IY)
0B1FCE 78 
0B1FCF C8    2811** RET     Z			; Return if it isn't
0B1FD0 CB    2812** SET	6,D			; Set flag to indicate we've got an index
0B1FD1 F2 
0B1FD2 CB    2813** BIT     3,B			; Check if an offset is required
0B1FD3 58 
0B1FD4 E5    2814** PUSH    HL
0B1FD5 CC    2815** CALL    Z,OFFSET_EX		; If bit 3 of B is zero, then get the offset
0B1FD6 EA 
0B1FD7 1F 
0B1FD8 0B 
0B1FD9 5D    2816** LD      E,L			; E: The offset
0B1FDA E1    2817** POP     HL
0B1FDB 3E    2818** LD	A,DDH			; IX prefix
0B1FDC DD 
0B1FDD CB    2819** BIT     6,B			; If bit 6 is reset then
0B1FDE 70 
0B1FDF 28    2820** JR      Z,BYTE_			; It's an IX instruction, otherwise set
0B1FE0 02 
0B1FE1 3E    2821** LD	A,FDH			; IY prefix
0B1FE2 FD 
             2822** ;
0B1FE3 DD    2823** BYTE_:			LD      (IX),A			; Write a byte out
0B1FE4 77 
0B1FE5 00 
0B1FE6 DD    2824** INC     IX
0B1FE7 23 
0B1FE8 B7    2825** OR      A
0B1FE9 C9    2826** RET
             2827** ;
0B1FEA FD    2828** OFFSET_EX:			LD      A,(IY)
0B1FEB 7E 
0B1FEC 00 
0B1FED FE    2829** CP      ')'
0B1FEE 29 
0B1FEF 21    2830** LD      HL,0
0B1FF0 00 
0B1FF1 00 
0B1FF2 00 
0B1FF3 C8    2831** RET     Z
0B1FF4 CD    2832** NUMBER:			CALL    SKIP
0B1FF5 A6 
0B1FF6 20 
0B1FF7 0B 
0B1FF8 C5    2833** PUSH    BC
0B1FF9 D5    2834** PUSH    DE
0B1FFA DD    2835** PUSH    IX
0B1FFB E5 
0B1FFC CD    2836** CALL    EXPRI
0B1FFD FB 
0B1FFE 05 
0B1FFF 0B 
0B2000 DD    2837** POP     IX
0B2001 E1 
0B2002 D9    2838** EXX
0B2003 D1    2839** POP     DE
0B2004 C1    2840** POP     BC
0B2005 7D    2841** LD      A,L
0B2006 B7    2842** OR      A
0B2007 C9    2843** RET
             2844** ;
0B2008 CD    2845** REG:			CALL    OPND
0B2009 C2 
0B200A 1F 
0B200B 0B 
0B200C D8    2846** RET     C
0B200D 78    2847** LD      A,B
0B200E E6    2848** AND     3FH
0B200F 3F 
0B2010 FE    2849** CP      8
0B2011 08 
0B2012 3F    2850** CCF
0B2013 C9    2851** RET
             2852** ;
0B2014 CD    2853** REGLO:			CALL    REG
0B2015 08 
0B2016 20 
0B2017 0B 
0B2018 D8    2854** RET     C
0B2019 18    2855** JR      ORC
0B201A 33 
             2856** ;
0B201B CD    2857** REGHI:			CALL    REG
0B201C 08 
0B201D 20 
0B201E 0B 
0B201F D8    2858** RET     C
0B2020 18    2859** JR      SHL3
0B2021 29 
             2860** ;
0B2022 CD    2861** COND_:			CALL    OPND
0B2023 C2 
0B2024 1F 
0B2025 0B 
0B2026 D8    2862** RET     C
0B2027 78    2863** LD      A,B
0B2028 E6    2864** AND     1FH
0B2029 1F 
0B202A D6    2865** SUB     16
0B202B 10 
0B202C 30    2866** JR      NC,SHL3
0B202D 1D 
0B202E FE    2867** CP      -15
0B202F F1 
0B2030 37    2868** SCF
0B2031 C0    2869** RET     NZ
0B2032 3E    2870** LD      A,3
0B2033 03 
0B2034 18    2871** JR      SHL3
0B2035 15 
             2872** ;
0B2036 CD    2873** PAIR_EX:			CALL    OPND
0B2037 C2 
0B2038 1F 
0B2039 0B 
0B203A D8    2874** RET     C
0B203B 78    2875** PAIR1_EX:			LD      A,B
0B203C E6    2876** AND     0FH
0B203D 0F 
0B203E D6    2877** SUB     8
0B203F 08 
0B2040 D8    2878** RET     C
0B2041 18    2879** JR      SHL3
0B2042 08 
             2880** ;
0B2043 CD    2881** BIT_:			CALL    NUMBER
0B2044 F4 
0B2045 1F 
0B2046 0B 
0B2047 FE    2882** CP      8
0B2048 08 
0B2049 3F    2883** CCF
0B204A D8    2884** RET     C
0B204B 07    2885** SHL3:			RLCA
0B204C 07    2886** RLCA
0B204D 07    2887** RLCA
0B204E B1    2888** ORC:			OR      C
0B204F 4F    2889** LD      C,A
0B2050 C9    2890** RET
             2891** ;
0B2051 21    2892** LDOP:			LD      HL,LDOPS
0B2052 0B 
0B2053 23 
0B2054 0B 
             2893** 
             2894** ;
             2895** ; Look up a value in a table
             2896** ; Parameters:
             2897** ; - IY: Address of the assembly language line in the BASIC program area
             2898** ; - HL: Address of the table
             2899** ; Returns:
             2900** ; - B: The operand code
             2901** ; - F: Carry set if not found
             2902** ;
0B2055 CD    2903** FIND:			CALL    SKIP			; Skip delimiters
0B2056 A6 
0B2057 20 
0B2058 0B 
             2904** ;
0B2059 06    2905** EXIT_:			LD      B,0			; Set B to 0
0B205A 00 
0B205B 37    2906** SCF				; Set the carry flag
0B205C C8    2907** RET     Z			; Returns if Z
             2908** ;
0B205D FE    2909** CP      DEF_			; Special case for token DEF (used in DEFB, DEFW, DEFL, DEFM)
0B205E DD 
0B205F 28    2910** JR      Z,FIND0
0B2060 04 
0B2061 FE    2911** CP      TOR+1			; Special case for tokens AND and OR
0B2062 85 
0B2063 3F    2912** CCF
0B2064 D8    2913** RET     C
0B2065 7E    2914** FIND0:			LD      A,(HL)			; Check for the end of the table (0 byte marker)
0B2066 B7    2915** OR      A
0B2067 28    2916** JR      Z,EXIT_			; Exit
0B2068 F0 
0B2069 FD    2917** XOR     (IY)
0B206A AE 
0B206B 00 
0B206C E6    2918** AND     01011111B
0B206D 5F 
0B206E 28    2919** JR      Z,FIND2
0B206F 09 
0B2070 CB    2920** FIND1:			BIT     7,(HL)
0B2071 7E 
0B2072 23    2921** INC     HL
0B2073 28    2922** JR      Z,FIND1
0B2074 FB 
0B2075 23    2923** INC     HL
0B2076 04    2924** INC     B
0B2077 18    2925** JR      FIND0
0B2078 EC 
             2926** ;
0B2079 FD    2927** FIND2:			PUSH    IY
0B207A E5 
0B207B CB    2928** FIND3:			BIT     7,(HL)			; Is this the end of token marker?
0B207C 7E 
0B207D FD    2929** INC     IY
0B207E 23 
0B207F 23    2930** INC     HL
0B2080 20    2931** JR      NZ,FIND5		; Yes
0B2081 11 
0B2082 BE    2932** CP      (HL)
0B2083 CC    2933** CALL    Z,SKIP0
0B2084 A5 
0B2085 20 
0B2086 0B 
0B2087 7E    2934** LD      A,(HL)
0B2088 FD    2935** XOR     (IY)
0B2089 AE 
0B208A 00 
0B208B E6    2936** AND     01011111B
0B208C 5F 
0B208D 28    2937** JR      Z,FIND3
0B208E EC 
0B208F FD    2938** FIND4:			POP     IY
0B2090 E1 
0B2091 18    2939** JR      FIND1
0B2092 DD 
             2940** ;
0B2093 CD    2941** FIND5:			CALL    DELIM			; Is it a delimiter?
0B2094 57 
0B2095 1A 
0B2096 0B 
0B2097 C4    2942** CALL	NZ,DOT 			; No, so also check whether it is a dot character (for suffixes)
0B2098 BA 
0B2099 20 
0B209A 0B 
0B209B C4    2943** CALL    NZ,SIGN			; No, so also check whether it is a SIGN character ('+' or '-')
0B209C B4 
0B209D 20 
0B209E 0B 
0B209F 20    2944** JR      NZ,FIND4		; If it is not a sign or a delimiter, then loop
0B20A0 EE 
             2945** ;
0B20A1 78    2946** FIND6:			LD      A,B			; At this point we have a token
0B20A2 46    2947** LD      B,(HL)			; Fetch the token type code
0B20A3 E1    2948** POP     HL			; Restore the stack
0B20A4 C9    2949** RET
             2950** ;
0B20A5 23    2951** SKIP0:			INC     HL
0B20A6 CD    2952** SKIP:			CALL    DELIM			; Is it a delimiter?
0B20A7 57 
0B20A8 1A 
0B20A9 0B 
0B20AA C0    2953** RET     NZ			; No, so return
0B20AB CD    2954** CALL    TERM			; Is it a terminator?
0B20AC 63 
0B20AD 1A 
0B20AE 0B 
0B20AF C8    2955** RET     Z			; Yes, so return
0B20B0 FD    2956** INC     IY			; Increment the basic program counter
0B20B1 23 
0B20B2 18    2957** JR      SKIP			; And loop
0B20B3 F2 
             2958** ;
0B20B4 FE    2959** SIGN:			CP      '+'			; Check whether the character is a sign symbol
0B20B5 2B 
0B20B6 C8    2960** RET     Z
0B20B7 FE    2961** CP      '-'
0B20B8 2D 
0B20B9 C9    2962** RET
             2963** ;
0B20BA FE    2964** DOT:			CP	'.'			; Check if it is a dot character
0B20BB 2E 
0B20BC C9    2965** RET
             2966** ; Z80 opcode list
             2967** ;
             2968** ; Group 0: (15 opcodes)
             2969** ; Trivial cases requiring no computation
             2970** ;
             2971** ; BEGIN REFACTOR FROM BINARY
             2972** ; OPCODS:
             2973** ; 			DB	"NO","P"+80H,00h	; # 00h
             2974** ; 			DB	"RLC","A"+80H,07h
             2975** ; 			DB	"EX",0,"AF",0,"AF","'"+80H,08h
             2976** ; 			DB	"RRC","A"+80H,0FH
             2977** ; 			DB	"RL","A"+80H,17H
             2978** ; 			DB	"RR","A"+80H,1FH
             2979** ; 			DB	"DA","A"+80H,27H
             2980** ; 			DB	"CP","L"+80H,2FH
             2981** ; 			DB	"SC","F"+80H,37H
             2982** ; 			DB	"CC","F"+80H,3FH
             2983** ; 			DB	"HAL","T"+80H,76H
             2984** ; 			DB	"EX","X"+80H,D9H
             2985** ; 			DB	"EX",0,"DE",0,"H","L"+80H,EBH
             2986** ; 			DB	"D","I"+80H,F3H
             2987** ; 			DB	"E","I"+80H,FBH
             2988** ; ;
             2989** ; ; Group 1: (53 opcodes)
             2990** ; ; As Group 0, but with an ED prefix
             2991** ; ;
             2992** ; 			DB	"NE","G"+80H,44H	; 0Fh
             2993** ; 			DB	"IM",0,"0"+80H,46H
             2994** ; 			DB	"RET","N"+80H,45H
             2995** ; 			DB	"MLT",0,"B","C"+80H,4CH
             2996** ; 			DB	"RET","I"+80H,4DH
             2997** ; 			DB	"IM",0,"1"+80H,56H
             2998** ; 			DB	"MLT",0,"D","E"+80H,5CH
             2999** ; 			DB	"IM",0,"2"+80H,5EH
             3000** ; 			DB	"RR","D"+80H,67H
             3001** ; 			DB	"MLT",0,"H","L"+80H,6CH
             3002** ; 			DB	"LD",0,"MB",0,"A"+80H,6DH
             3003** ; 			DB	"LD",0,"A",0,"M","B"+80H,6EH
             3004** ; 			DB	"RL","D"+80H,6FH
             3005** ; 			DB	"SL","P"+80H,76H
             3006** ; 			DB	"MLT",0,"S","P"+80H,7CH
             3007** ; 			DB	"STMI","X"+80H,7DH
             3008** ; 			DB	"RSMI","X"+80H,7EH
             3009** ; 			DB	"INI","M"+80H,82H
             3010** ; 			DB	"OTI","M"+80H,83H
             3011** ; 			DB	"INI","2"+80H,84H
             3012** ; 			DB	"IND","M"+80H,8AH
             3013** ; 			DB	"OTD","M"+80H,8BH
             3014** ; 			DB	"IND","2"+80H,8CH
             3015** ; 			DB	"INIM","R"+80H,92H
             3016** ; 			DB	"OTIM","R"+80H,93H
             3017** ; 			DB	"INI2","R"+80H,94H
             3018** ; 			DB	"INDM","R"+80H,9AH
             3019** ; 			DB	"OTDM","R"+80H,9BH
             3020** ; 			DB	"IND2","R"+80H,9CH
             3021** ; 			DB	"LD","I"+80H,A0H
             3022** ; 			DB	"CP","I"+80H,A1H
             3023** ; 			DB	"IN","I"+80H,A2H
             3024** ; 			DB	"OUTI","2"+80H,A4H	; These are swapped round so that FIND will find
             3025** ; 			DB	"OUT","I"+80H,A3H	; OUTI2 before OUTI
             3026** ; 			DB	"LD","D"+80H,A8H
             3027** ; 			DB	"CP","D"+80H,A9H
             3028** ; 			DB	"IN","D"+80H,AAH
             3029** ; 			DB	"OUTD","2"+80H,ACH	; Similarly these are swapped round so that FIND
             3030** ; 			DB	"OUT","D"+80H,ABH	; will find OUTD2 before OUTD
             3031** ; 			DB	"LDI","R"+80H,B0H
             3032** ; 			DB	"CPI","R"+80H,B1H
             3033** ; 			DB	"INI","R"+80H,B2H
             3034** ; 			DB	"OTI","R"+80H,B3H
             3035** ; 			DB	"OTI2","R"+80H,B4H
             3036** ; 			DB	"LDD","R"+80H,B8H
             3037** ; 			DB	"CPD","R"+80H,B9H
             3038** ; 			DB	"IND","R"+80H,BAH
             3039** ; 			DB	"OTD","R"+80H,BBH
             3040** ; 			DB	"OTD2","R"+80H,BCH
             3041** ; 			DB	"INIR","X"+80H,C2H
             3042** ; 			DB	"OTIR","X"+80H,C3H
             3043** ; 			DB	"INDR","X"+80H,CAH
             3044** ; 			DB	"OTDR","X"+80H,CBH
             3045** ; ;
             3046** ; ; Group 2: (3 opcodes)
             3047** ; ;
             3048** ; 			DB	"BI","T"+80H,40H	; 44h
             3049** ; 			DB	"RE","S"+80H,80H
             3050** ; 			DB	"SE","T"+80H,C0H
             3051** ; ;
             3052** ; ; Group 3: (7 opcodes)
             3053** ; ;
             3054** ; 			DB	"RL","C"+80H,00H	; 47h
             3055** ; 			DB	"RR","C"+80H,08H
             3056** ; 			DB	"R","L"+80H,10H
             3057** ; 			DB	"R","R"+80H,18H
             3058** ; 			DB	"SL","A"+80H,20H
             3059** ; 			DB	"SR","A"+80H,28H
             3060** ; 			DB	"SR","L"+80H,38H
             3061** ; ;
             3062** ; ; Group 4: (3 opcodes)
             3063** ; ;
             3064** ; 			DB	"PO","P"+80H,C1H	; 4Eh
             3065** ; 			DB	"PUS","H"+80H,C5H
             3066** ; 			DB	"EX",0,"(S","P"+80H,E3H
             3067** ; ;
             3068** ; ; Group 5: (7 opcodes)
             3069** ; ;
             3070** ; 			DB	"SU","B"+80H,90H	; 51h
             3071** ; 			DB	"AN","D"+80H,A0H
             3072** ; 			DB	"XO","R"+80H,A8H
             3073** ; 			DB	"O","R"+80H,B0H
             3074** ; 			DB	"C","P"+80H,B8H
             3075** ; 			DB	TAND,A0H		; 56h TAND: Tokenised AND
             3076** ; 			DB	TOR,B0H			; 57h TOR: Tokenised OR
             3077** ; ;
             3078** ; ; Group 6 (3 opcodes)
             3079** ; ;
             3080** ; 			DB	"AD","D"+80H,80H	; 58h
             3081** ; 			DB	"AD","C"+80H,88H
             3082** ; 			DB	"SB","C"+80H,98H
             3083** ; ;
             3084** ; ; Group 7: (2 opcodes)
             3085** ; ;
             3086** ; 			DB	"IN","C"+80H,04H	; 5Bh
             3087** ; 			DB	"DE","C"+80H,05H
             3088** ; ;
             3089** ; ; Group 8: (2 opcodes)
             3090** ; ;
             3091** ; 			DB	"IN","0"+80H,00H	; 5Dh
             3092** ; 			DB	"OUT","0"+80H,01H
             3093** ; ;
             3094** ; ; Group 9: (1 opcode)
             3095** ; ;
             3096** ; 			DB	"I","N"+80H,40H		; 5Fh
             3097** ; ;
             3098** ; ; Group 10: (1 opcode)
             3099** ; ;
             3100** ; 			DB	"OU","T"+80H,41H	; 60h
             3101** ; ;
             3102** ; ; Group 11: (2 opcodes)
             3103** ; ;
             3104** ; 			DB	"J","R"+80H,20H		; 61h
             3105** ; 			DB	"DJN","Z"+80H,10H
             3106** ; ;
             3107** ; ; Group 12: (1 opcode)
             3108** ; ;
             3109** ; 			DB	"J","P"+80H,C2H		; 63h
             3110** ; ;
             3111** ; ; Group 13: (1 opcode)
             3112** ; ;
             3113** ; 			DB	"CAL","L"+80H,C4H	; 64h
             3114** ; ;
             3115** ; ; Group 14: (1 opcode)
             3116** ; ;
             3117** ; 			DB	"RS","T"+80H,C7H	; 65h
             3118** ; ;
             3119** ; ; Group 15: (1 opcode)
             3120** ; ;
             3121** ; 			DB	"RE","T"+80H,C0H	; 66h
             3122** ; ;
             3123** ; ; Group 16: (1 opcode)
             3124** ; ;
             3125** ; 			DB	"L","D"+80H,40H		; 67h
             3126** ; ;
             3127** ; ; Group 17: (1 opcode)
             3128** ; ;
             3129** ; 			DB	"TS","T"+80H,04H	; 68h
             3130** 
             3131** ; ;
             3132** ; ; Assembler Directives
             3133** ; ;
             3134** ; 			DB	"OP","T"+80H,00H	; 69h OPT
             3135** ; 			DB	"AD","L"+80H,00H	; 6Ah ADL
             3136** ; ;
             3137** ; 			DB	DEF_ & 7FH,"B"+80H,00H	; 6Bh Tokenised DEF + B
             3138** ; 			DB	DEF_ & 7FH,"W"+80H,00H	; 6Ch Tokenised DEF + W
             3139** ; 			DB	DEF_ & 7FH,"L"+80H,00H	; 6Dh Tokenised DEF + L
             3140** ; 			DB 	DEF_ & 7FH,"M"+80H,00H	; 6Eh Tokenised DEF + M
             3141** ; ;
             3142** ; 			DB	0
             3143** ; ;
             3144** ; ; Operands
             3145** ; ;
             3146** ; OPRNDS:			DB	"B"+80H, 00H
             3147** ; 			DB	"C"+80H, 01H
             3148** ; 			DB	"D"+80H, 02H
             3149** ; 			DB	"E"+80H, 03H
             3150** ; 			DB	"H"+80H, 04H
             3151** ; 			DB	"L"+80H, 05H
             3152** ; 			DB	"(H","L"+80H,06H
             3153** ; 			DB	"A"+80H, 07H
             3154** ; 			DB	"(I","X"+80H,86H
             3155** ; 			DB	"(I","Y"+80H,C6H
             3156** ; ;
             3157** ; 			DB	"B","C"+80H,08H
             3158** ; 			DB	"D","E"+80H,0AH
             3159** ; 			DB	"H","L"+80H,0CH
             3160** ; 			DB	"I","X"+80H,8CH
             3161** ; 			DB	"I","Y"+80H,CCH
             3162** ; 			DB	"A","F"+80H,0EH
             3163** ; 			DB	"S","P"+80H,0EH
             3164** ; ;
             3165** ; 			DB	"N","Z"+80H,10H
             3166** ; 			DB	"Z"+80H,11H
             3167** ; 			DB	"N","C"+80H,12H
             3168** ; 			DB	"P","O"+80H,14H
             3169** ; 			DB	"P","E"+80H,15H
             3170** ; 			DB	"P"+80H,16H
             3171** ; 			DB	"M"+80H,17H
             3172** ; ;
             3173** ; 			DB	"(","C"+80H,20H
             3174** ; ;
             3175** ; 			DB	0
             3176** ; ;
             3177** ; ; Load operations
             3178** ; ;
             3179** ; LDOPS:			DB	"I",0,"A"+80H,47H
             3180** ; 			DB	"R",0,"A"+80H,4FH
             3181** ; 			DB	"A",0,"I"+80H,57H
             3182** ; 			DB	"A",0,"R"+80H,5FH
             3183** ; 			DB	"(BC",0,"A"+80H,02h
             3184** ; 			DB	"(DE",0,"A"+80H,12H
             3185** ; 			DB	"A",0,"(B","C"+80H,0AH
             3186** ; 			DB	"A",0,"(D","E"+80H,1AH
             3187** ; ;
             3188** ; 			DB	0
             3189** ; ;
             3190** ; ; eZ80 addressing mode suffixes
             3191** ; ;
             3192** ; ; Fully qualified suffixes
             3193** ; ;
             3194** ; EZ80SFS_1:		DB	"LI","S"+80H,49H
             3195** ; 			DB	"SI","L"+80H,52H
             3196** ; EZ80SFS_2:		DB	"SI","S"+80H,40H
             3197** ; 			DB	"LI","L"+80H,5BH
             3198** ; ;
             3199** ; 			DB	0
             3200** ; ;
             3201** ; ; Shortcuts when ADL mode is 0
             3202** ; ;
             3203** ; EZ80SFS_ADL0:		DB	"S"+80H,40H		; Equivalent to .SIS
             3204** ; 			DB	"L"+80H,49H		; Equivalent to .LIS
             3205** ; 			DB	"I","S"+80H,40H		; Equivalent to .SIS
             3206** ; 			DB	"I","L"+80H,52H		; Equivalent to .SIL
             3207** ; ;
             3208** ; 			DB	0
             3209** ; ;
             3210** ; ; Shortcuts when ADL mode is 1
             3211** ; ;
             3212** ; EZ80SFS_ADL1:		DB	"S"+80H,52H		; Equivalent to .SIL
             3213** ; 			DB	"L"+80H,5BH		; Equivalent to .LIL
             3214** ; 			DB	"I","S"+80H,49H		; Equivalent to .LIS
             3215** ; 			DB	"I","L"+80H,5BH		; Equivalent to .LIL
             3216** ; ;
             3217** ; 			DB	0
             3218** ; END REFACTOR FROM BINARY
             3219** ; BEGIN INSERT FROM BINARY
             3220** ;
             3221** ; Trivial cases requiring no computation
             3222** OPCODS:
0B20BD 4E    3223** db 0x4e ; 041DCC 4E      5258 DB	"NO","P"+80H,00h	; # 00h
0B20BE 4F    3224** db 0x4f ; 041DCD
0B20BF D0    3225** db 0xd0 ; 041DCE
0B20C0 00    3226** db 0x00 ; 041DCF
0B20C1 52    3227** db 0x52 ; 041DD0 52      5259 DB	"RLC","A"+80H,07h
0B20C2 4C    3228** db 0x4c ; 041DD1
0B20C3 43    3229** db 0x43 ; 041DD2
0B20C4 C1    3230** db 0xc1 ; 041DD3
0B20C5 07    3231** db 0x07 ; 041DD4
0B20C6 45    3232** db 0x45 ; 041DD5 45      5260 DB	"EX",0,"AF",0,"AF","'"+80H,08h
0B20C7 58    3233** db 0x58 ; 041DD6
0B20C8 00    3234** db 0x00 ; 041DD7
0B20C9 41    3235** db 0x41 ; 041DD8
0B20CA 46    3236** db 0x46 ; 041DD9
0B20CB 00    3237** db 0x00 ; 041DDA
0B20CC 41    3238** db 0x41 ; 041DDB
0B20CD 46    3239** db 0x46 ; 041DDC
0B20CE A7    3240** db 0xa7 ; 041DDD
0B20CF 08    3241** db 0x08 ; 041DDE
0B20D0 52    3242** db 0x52 ; 041DDF 52      5261 DB	"RRC","A"+80H,0FH
0B20D1 52    3243** db 0x52 ; 041DE0
0B20D2 43    3244** db 0x43 ; 041DE1
0B20D3 C1    3245** db 0xc1 ; 041DE2
0B20D4 0F    3246** db 0x0f ; 041DE3
0B20D5 52    3247** db 0x52 ; 041DE4 52      5262 DB	"RL","A"+80H,17H
0B20D6 4C    3248** db 0x4c ; 041DE5
0B20D7 C1    3249** db 0xc1 ; 041DE6
0B20D8 17    3250** db 0x17 ; 041DE7
0B20D9 52    3251** db 0x52 ; 041DE8 52      5263 DB	"RR","A"+80H,1FH
0B20DA 52    3252** db 0x52 ; 041DE9
0B20DB C1    3253** db 0xc1 ; 041DEA
0B20DC 1F    3254** db 0x1f ; 041DEB
0B20DD 44    3255** db 0x44 ; 041DEC 44      5264 DB	"DA","A"+80H,27H
0B20DE 41    3256** db 0x41 ; 041DED
0B20DF C1    3257** db 0xc1 ; 041DEE
0B20E0 27    3258** db 0x27 ; 041DEF
0B20E1 43    3259** db 0x43 ; 041DF0 43      5265 DB	"CP","L"+80H,2FH
0B20E2 50    3260** db 0x50 ; 041DF1
0B20E3 CC    3261** db 0xcc ; 041DF2
0B20E4 2F    3262** db 0x2f ; 041DF3
0B20E5 53    3263** db 0x53 ; 041DF4 53      5266 DB	"SC","F"+80H,37H
0B20E6 43    3264** db 0x43 ; 041DF5
0B20E7 C6    3265** db 0xc6 ; 041DF6
0B20E8 37    3266** db 0x37 ; 041DF7
0B20E9 43    3267** db 0x43 ; 041DF8 43      5267 DB	"CC","F"+80H,3FH
0B20EA 43    3268** db 0x43 ; 041DF9
0B20EB C6    3269** db 0xc6 ; 041DFA
0B20EC 3F    3270** db 0x3f ; 041DFB
0B20ED 48    3271** db 0x48 ; 041DFC 48      5268 DB	"HAL","T"+80H,76H
0B20EE 41    3272** db 0x41 ; 041DFD
0B20EF 4C    3273** db 0x4c ; 041DFE
0B20F0 D4    3274** db 0xd4 ; 041DFF
0B20F1 76    3275** db 0x76 ; 041E00
0B20F2 45    3276** db 0x45 ; 041E01 45      5269 DB	"EX","X"+80H,D9H
0B20F3 58    3277** db 0x58 ; 041E02
0B20F4 D8    3278** db 0xd8 ; 041E03
0B20F5 D9    3279** db 0xd9 ; 041E04
0B20F6 45    3280** db 0x45 ; 041E05 45      5270 DB	"EX",0,"DE",0,"H","L"+80H,EBH
0B20F7 58    3281** db 0x58 ; 041E06
0B20F8 00    3282** db 0x00 ; 041E07
0B20F9 44    3283** db 0x44 ; 041E08
0B20FA 45    3284** db 0x45 ; 041E09
0B20FB 00    3285** db 0x00 ; 041E0A
0B20FC 48    3286** db 0x48 ; 041E0B
0B20FD CC    3287** db 0xcc ; 041E0C
0B20FE EB    3288** db 0xeb ; 041E0D
0B20FF 44    3289** db 0x44 ; 041E0E 44      5271 DB	"D","I"+80H,F3H
0B2100 C9    3290** db 0xc9 ; 041E0F
0B2101 F3    3291** db 0xf3 ; 041E10
0B2102 45    3292** db 0x45 ; 041E11 45      5272 DB	"E","I"+80H,FBH
0B2103 C9    3293** db 0xc9 ; 041E12
0B2104 FB    3294** db 0xfb ; 041E13
             3295** ;
             3296** ; Group 1: (53 opcodes)
             3297** ; As Group 0, but with an ED prefix
             3298** ;
0B2105 4E    3299** db 0x4e ; 041E14 4E      5277 DB	"NE","G"+80H,44H	; 0Fh
0B2106 45    3300** db 0x45 ; 041E15
0B2107 C7    3301** db 0xc7 ; 041E16
0B2108 44    3302** db 0x44 ; 041E17
0B2109 49    3303** db 0x49 ; 041E18 49      5278 DB	"IM",0,"0"+80H,46H
0B210A 4D    3304** db 0x4d ; 041E19
0B210B 00    3305** db 0x00 ; 041E1A
0B210C B0    3306** db 0xb0 ; 041E1B
0B210D 46    3307** db 0x46 ; 041E1C
0B210E 52    3308** db 0x52 ; 041E1D 52      5279 DB	"RET","N"+80H,45H
0B210F 45    3309** db 0x45 ; 041E1E
0B2110 54    3310** db 0x54 ; 041E1F
0B2111 CE    3311** db 0xce ; 041E20
0B2112 45    3312** db 0x45 ; 041E21
0B2113 4D    3313** db 0x4d ; 041E22 4D      5280 DB	"MLT",0,"B","C"+80H,4CH
0B2114 4C    3314** db 0x4c ; 041E23
0B2115 54    3315** db 0x54 ; 041E24
0B2116 00    3316** db 0x00 ; 041E25
0B2117 42    3317** db 0x42 ; 041E26
0B2118 C3    3318** db 0xc3 ; 041E27
0B2119 4C    3319** db 0x4c ; 041E28
0B211A 52    3320** db 0x52 ; 041E29 52      5281 DB	"RET","I"+80H,4DH
0B211B 45    3321** db 0x45 ; 041E2A
0B211C 54    3322** db 0x54 ; 041E2B
0B211D C9    3323** db 0xc9 ; 041E2C
0B211E 4D    3324** db 0x4d ; 041E2D
0B211F 49    3325** db 0x49 ; 041E2E 49      5282 DB	"IM",0,"1"+80H,56H
0B2120 4D    3326** db 0x4d ; 041E2F
0B2121 00    3327** db 0x00 ; 041E30
0B2122 B1    3328** db 0xb1 ; 041E31
0B2123 56    3329** db 0x56 ; 041E32
0B2124 4D    3330** db 0x4d ; 041E33 4D      5283 DB	"MLT",0,"D","E"+80H,5CH
0B2125 4C    3331** db 0x4c ; 041E34
0B2126 54    3332** db 0x54 ; 041E35
0B2127 00    3333** db 0x00 ; 041E36
0B2128 44    3334** db 0x44 ; 041E37
0B2129 C5    3335** db 0xc5 ; 041E38
0B212A 5C    3336** db 0x5c ; 041E39
0B212B 49    3337** db 0x49 ; 041E3A 49      5284 DB	"IM",0,"2"+80H,5EH
0B212C 4D    3338** db 0x4d ; 041E3B
0B212D 00    3339** db 0x00 ; 041E3C
0B212E B2    3340** db 0xb2 ; 041E3D
0B212F 5E    3341** db 0x5e ; 041E3E
0B2130 52    3342** db 0x52 ; 041E3F 52      5285 DB	"RR","D"+80H,67H
0B2131 52    3343** db 0x52 ; 041E40
0B2132 C4    3344** db 0xc4 ; 041E41
0B2133 67    3345** db 0x67 ; 041E42
0B2134 4D    3346** db 0x4d ; 041E43 4D      5286 DB	"MLT",0,"H","L"+80H,6CH
0B2135 4C    3347** db 0x4c ; 041E44
0B2136 54    3348** db 0x54 ; 041E45
0B2137 00    3349** db 0x00 ; 041E46
0B2138 48    3350** db 0x48 ; 041E47
0B2139 CC    3351** db 0xcc ; 041E48
0B213A 6C    3352** db 0x6c ; 041E49
0B213B 4C    3353** db 0x4c ; 041E4A 4C      5287 DB	"LD",0,"MB",0,"A"+80H,6DH
0B213C 44    3354** db 0x44 ; 041E4B
0B213D 00    3355** db 0x00 ; 041E4C
0B213E 4D    3356** db 0x4d ; 041E4D
0B213F 42    3357** db 0x42 ; 041E4E
0B2140 00    3358** db 0x00 ; 041E4F
0B2141 C1    3359** db 0xc1 ; 041E50
0B2142 6D    3360** db 0x6d ; 041E51
0B2143 4C    3361** db 0x4c ; 041E52 4C      5288 DB	"LD",0,"A",0,"M","B"+80H,6EH
0B2144 44    3362** db 0x44 ; 041E53
0B2145 00    3363** db 0x00 ; 041E54
0B2146 41    3364** db 0x41 ; 041E55
0B2147 00    3365** db 0x00 ; 041E56
0B2148 4D    3366** db 0x4d ; 041E57
0B2149 C2    3367** db 0xc2 ; 041E58
0B214A 6E    3368** db 0x6e ; 041E59
0B214B 52    3369** db 0x52 ; 041E5A 52      5289 DB	"RL","D"+80H,6FH
0B214C 4C    3370** db 0x4c ; 041E5B
0B214D C4    3371** db 0xc4 ; 041E5C
0B214E 6F    3372** db 0x6f ; 041E5D
0B214F 53    3373** db 0x53 ; 041E5E 53      5290 DB	"SL","P"+80H,76H
0B2150 4C    3374** db 0x4c ; 041E5F
0B2151 D0    3375** db 0xd0 ; 041E60
0B2152 76    3376** db 0x76 ; 041E61
0B2153 4D    3377** db 0x4d ; 041E62 4D      5291 DB	"MLT",0,"S","P"+80H,7CH
0B2154 4C    3378** db 0x4c ; 041E63
0B2155 54    3379** db 0x54 ; 041E64
0B2156 00    3380** db 0x00 ; 041E65
0B2157 53    3381** db 0x53 ; 041E66
0B2158 D0    3382** db 0xd0 ; 041E67
0B2159 7C    3383** db 0x7c ; 041E68
0B215A 53    3384** db 0x53 ; 041E69 53      5292 DB	"STMI","X"+80H,7DH
0B215B 54    3385** db 0x54 ; 041E6A
0B215C 4D    3386** db 0x4d ; 041E6B
0B215D 49    3387** db 0x49 ; 041E6C
0B215E D8    3388** db 0xd8 ; 041E6D
0B215F 7D    3389** db 0x7d ; 041E6E
0B2160 52    3390** db 0x52 ; 041E6F 52      5293 DB	"RSMI","X"+80H,7EH
0B2161 53    3391** db 0x53 ; 041E70
0B2162 4D    3392** db 0x4d ; 041E71
0B2163 49    3393** db 0x49 ; 041E72
0B2164 D8    3394** db 0xd8 ; 041E73
0B2165 7E    3395** db 0x7e ; 041E74
0B2166 49    3396** db 0x49 ; 041E75 49      5294 DB	"INI","M"+80H,82H
0B2167 4E    3397** db 0x4e ; 041E76
0B2168 49    3398** db 0x49 ; 041E77
0B2169 CD    3399** db 0xcd ; 041E78
0B216A 82    3400** db 0x82 ; 041E79
0B216B 4F    3401** db 0x4f ; 041E7A 4F      5295 DB	"OTI","M"+80H,83H
0B216C 54    3402** db 0x54 ; 041E7B
0B216D 49    3403** db 0x49 ; 041E7C
0B216E CD    3404** db 0xcd ; 041E7D
0B216F 83    3405** db 0x83 ; 041E7E
0B2170 49    3406** db 0x49 ; 041E7F 49      5296 DB	"INI","2"+80H,84H
0B2171 4E    3407** db 0x4e ; 041E80
0B2172 49    3408** db 0x49 ; 041E81
0B2173 B2    3409** db 0xb2 ; 041E82
0B2174 84    3410** db 0x84 ; 041E83
0B2175 49    3411** db 0x49 ; 041E84 49      5297 DB	"IND","M"+80H,8AH
0B2176 4E    3412** db 0x4e ; 041E85
0B2177 44    3413** db 0x44 ; 041E86
0B2178 CD    3414** db 0xcd ; 041E87
0B2179 8A    3415** db 0x8a ; 041E88
0B217A 4F    3416** db 0x4f ; 041E89 4F      5298 DB	"OTD","M"+80H,8BH
0B217B 54    3417** db 0x54 ; 041E8A
0B217C 44    3418** db 0x44 ; 041E8B
0B217D CD    3419** db 0xcd ; 041E8C
0B217E 8B    3420** db 0x8b ; 041E8D
0B217F 49    3421** db 0x49 ; 041E8E 49      5299 DB	"IND","2"+80H,8CH
0B2180 4E    3422** db 0x4e ; 041E8F
0B2181 44    3423** db 0x44 ; 041E90
0B2182 B2    3424** db 0xb2 ; 041E91
0B2183 8C    3425** db 0x8c ; 041E92
0B2184 49    3426** db 0x49 ; 041E93 49      5300 DB	"INIM","R"+80H,92H
0B2185 4E    3427** db 0x4e ; 041E94
0B2186 49    3428** db 0x49 ; 041E95
0B2187 4D    3429** db 0x4d ; 041E96
0B2188 D2    3430** db 0xd2 ; 041E97
0B2189 92    3431** db 0x92 ; 041E98
0B218A 4F    3432** db 0x4f ; 041E99 4F      5301 DB	"OTIM","R"+80H,93H
0B218B 54    3433** db 0x54 ; 041E9A
0B218C 49    3434** db 0x49 ; 041E9B
0B218D 4D    3435** db 0x4d ; 041E9C
0B218E D2    3436** db 0xd2 ; 041E9D
0B218F 93    3437** db 0x93 ; 041E9E
0B2190 49    3438** db 0x49 ; 041E9F 49      5302 DB	"INI2","R"+80H,94H
0B2191 4E    3439** db 0x4e ; 041EA0
0B2192 49    3440** db 0x49 ; 041EA1
0B2193 32    3441** db 0x32 ; 041EA2
0B2194 D2    3442** db 0xd2 ; 041EA3
0B2195 94    3443** db 0x94 ; 041EA4
0B2196 49    3444** db 0x49 ; 041EA5 49      5303 DB	"INDM","R"+80H,9AH
0B2197 4E    3445** db 0x4e ; 041EA6
0B2198 44    3446** db 0x44 ; 041EA7
0B2199 4D    3447** db 0x4d ; 041EA8
0B219A D2    3448** db 0xd2 ; 041EA9
0B219B 9A    3449** db 0x9a ; 041EAA
0B219C 4F    3450** db 0x4f ; 041EAB 4F      5304 DB	"OTDM","R"+80H,9BH
0B219D 54    3451** db 0x54 ; 041EAC
0B219E 44    3452** db 0x44 ; 041EAD
0B219F 4D    3453** db 0x4d ; 041EAE
0B21A0 D2    3454** db 0xd2 ; 041EAF
0B21A1 9B    3455** db 0x9b ; 041EB0
0B21A2 49    3456** db 0x49 ; 041EB1 49      5305 DB	"IND2","R"+80H,9CH
0B21A3 4E    3457** db 0x4e ; 041EB2
0B21A4 44    3458** db 0x44 ; 041EB3
0B21A5 32    3459** db 0x32 ; 041EB4
0B21A6 D2    3460** db 0xd2 ; 041EB5
0B21A7 9C    3461** db 0x9c ; 041EB6
0B21A8 4C    3462** db 0x4c ; 041EB7 4C      5306 DB	"LD","I"+80H,A0H
0B21A9 44    3463** db 0x44 ; 041EB8
0B21AA C9    3464** db 0xc9 ; 041EB9
0B21AB A0    3465** db 0xa0 ; 041EBA
0B21AC 43    3466** db 0x43 ; 041EBB 43      5307 DB	"CP","I"+80H,A1H
0B21AD 50    3467** db 0x50 ; 041EBC
0B21AE C9    3468** db 0xc9 ; 041EBD
0B21AF A1    3469** db 0xa1 ; 041EBE
0B21B0 49    3470** db 0x49 ; 041EBF 49      5308 DB	"IN","I"+80H,A2H
0B21B1 4E    3471** db 0x4e ; 041EC0
0B21B2 C9    3472** db 0xc9 ; 041EC1
0B21B3 A2    3473** db 0xa2 ; 041EC2
0B21B4 4F    3474** db 0x4f ; 041EC3 4F      5309 DB	"OUTI","2"+80H,A4H	; These are swapped round so that FIND will find
0B21B5 55    3475** db 0x55 ; 041EC4
0B21B6 54    3476** db 0x54 ; 041EC5
0B21B7 49    3477** db 0x49 ; 041EC6
0B21B8 B2    3478** db 0xb2 ; 041EC7
0B21B9 A4    3479** db 0xa4 ; 041EC8
0B21BA 4F    3480** db 0x4f ; 041EC9 4F      5310 DB	"OUT","I"+80H,A3H	; OUTI2 before OUTI
0B21BB 55    3481** db 0x55 ; 041ECA
0B21BC 54    3482** db 0x54 ; 041ECB
0B21BD C9    3483** db 0xc9 ; 041ECC
0B21BE A3    3484** db 0xa3 ; 041ECD
0B21BF 4C    3485** db 0x4c ; 041ECE 4C      5311 DB	"LD","D"+80H,A8H
0B21C0 44    3486** db 0x44 ; 041ECF
0B21C1 C4    3487** db 0xc4 ; 041ED0
0B21C2 A8    3488** db 0xa8 ; 041ED1
0B21C3 43    3489** db 0x43 ; 041ED2 43      5312 DB	"CP","D"+80H,A9H
0B21C4 50    3490** db 0x50 ; 041ED3
0B21C5 C4    3491** db 0xc4 ; 041ED4
0B21C6 A9    3492** db 0xa9 ; 041ED5
0B21C7 49    3493** db 0x49 ; 041ED6 49      5313 DB	"IN","D"+80H,AAH
0B21C8 4E    3494** db 0x4e ; 041ED7
0B21C9 C4    3495** db 0xc4 ; 041ED8
0B21CA AA    3496** db 0xaa ; 041ED9
0B21CB 4F    3497** db 0x4f ; 041EDA 4F      5314 DB	"OUTD","2"+80H,ACH	; Similarly these are swapped round so that FIND
0B21CC 55    3498** db 0x55 ; 041EDB
0B21CD 54    3499** db 0x54 ; 041EDC
0B21CE 44    3500** db 0x44 ; 041EDD
0B21CF B2    3501** db 0xb2 ; 041EDE
0B21D0 AC    3502** db 0xac ; 041EDF
0B21D1 4F    3503** db 0x4f ; 041EE0 4F      5315 DB	"OUT","D"+80H,ABH	; will find OUTD2 before OUTD
0B21D2 55    3504** db 0x55 ; 041EE1
0B21D3 54    3505** db 0x54 ; 041EE2
0B21D4 C4    3506** db 0xc4 ; 041EE3
0B21D5 AB    3507** db 0xab ; 041EE4
0B21D6 4C    3508** db 0x4c ; 041EE5 4C      5316 DB	"LDI","R"+80H,B0H
0B21D7 44    3509** db 0x44 ; 041EE6
0B21D8 49    3510** db 0x49 ; 041EE7
0B21D9 D2    3511** db 0xd2 ; 041EE8
0B21DA B0    3512** db 0xb0 ; 041EE9
0B21DB 43    3513** db 0x43 ; 041EEA 43      5317 DB	"CPI","R"+80H,B1H
0B21DC 50    3514** db 0x50 ; 041EEB
0B21DD 49    3515** db 0x49 ; 041EEC
0B21DE D2    3516** db 0xd2 ; 041EED
0B21DF B1    3517** db 0xb1 ; 041EEE
0B21E0 49    3518** db 0x49 ; 041EEF 49      5318 DB	"INI","R"+80H,B2H
0B21E1 4E    3519** db 0x4e ; 041EF0
0B21E2 49    3520** db 0x49 ; 041EF1
0B21E3 D2    3521** db 0xd2 ; 041EF2
0B21E4 B2    3522** db 0xb2 ; 041EF3
0B21E5 4F    3523** db 0x4f ; 041EF4 4F      5319 DB	"OTI","R"+80H,B3H
0B21E6 54    3524** db 0x54 ; 041EF5
0B21E7 49    3525** db 0x49 ; 041EF6
0B21E8 D2    3526** db 0xd2 ; 041EF7
0B21E9 B3    3527** db 0xb3 ; 041EF8
0B21EA 4F    3528** db 0x4f ; 041EF9 4F      5320 DB	"OTI2","R"+80H,B4H
0B21EB 54    3529** db 0x54 ; 041EFA
0B21EC 49    3530** db 0x49 ; 041EFB
0B21ED 32    3531** db 0x32 ; 041EFC
0B21EE D2    3532** db 0xd2 ; 041EFD
0B21EF B4    3533** db 0xb4 ; 041EFE
0B21F0 4C    3534** db 0x4c ; 041EFF 4C      5321 DB	"LDD","R"+80H,B8H
0B21F1 44    3535** db 0x44 ; 041F00
0B21F2 44    3536** db 0x44 ; 041F01
0B21F3 D2    3537** db 0xd2 ; 041F02
0B21F4 B8    3538** db 0xb8 ; 041F03
0B21F5 43    3539** db 0x43 ; 041F04 43      5322 DB	"CPD","R"+80H,B9H
0B21F6 50    3540** db 0x50 ; 041F05
0B21F7 44    3541** db 0x44 ; 041F06
0B21F8 D2    3542** db 0xd2 ; 041F07
0B21F9 B9    3543** db 0xb9 ; 041F08
0B21FA 49    3544** db 0x49 ; 041F09 49      5323 DB	"IND","R"+80H,BAH
0B21FB 4E    3545** db 0x4e ; 041F0A
0B21FC 44    3546** db 0x44 ; 041F0B
0B21FD D2    3547** db 0xd2 ; 041F0C
0B21FE BA    3548** db 0xba ; 041F0D
0B21FF 4F    3549** db 0x4f ; 041F0E 4F      5324 DB	"OTD","R"+80H,BBH
0B2200 54    3550** db 0x54 ; 041F0F
0B2201 44    3551** db 0x44 ; 041F10
0B2202 D2    3552** db 0xd2 ; 041F11
0B2203 BB    3553** db 0xbb ; 041F12
0B2204 4F    3554** db 0x4f ; 041F13 4F      5325 DB	"OTD2","R"+80H,BCH
0B2205 54    3555** db 0x54 ; 041F14
0B2206 44    3556** db 0x44 ; 041F15
0B2207 32    3557** db 0x32 ; 041F16
0B2208 D2    3558** db 0xd2 ; 041F17
0B2209 BC    3559** db 0xbc ; 041F18
0B220A 49    3560** db 0x49 ; 041F19 49      5326 DB	"INIR","X"+80H,C2H
0B220B 4E    3561** db 0x4e ; 041F1A
0B220C 49    3562** db 0x49 ; 041F1B
0B220D 52    3563** db 0x52 ; 041F1C
0B220E D8    3564** db 0xd8 ; 041F1D
0B220F C2    3565** db 0xc2 ; 041F1E
0B2210 4F    3566** db 0x4f ; 041F1F 4F      5327 DB	"OTIR","X"+80H,C3H
0B2211 54    3567** db 0x54 ; 041F20
0B2212 49    3568** db 0x49 ; 041F21
0B2213 52    3569** db 0x52 ; 041F22
0B2214 D8    3570** db 0xd8 ; 041F23
0B2215 C3    3571** db 0xc3 ; 041F24
0B2216 49    3572** db 0x49 ; 041F25 49      5328 DB	"INDR","X"+80H,CAH
0B2217 4E    3573** db 0x4e ; 041F26
0B2218 44    3574** db 0x44 ; 041F27
0B2219 52    3575** db 0x52 ; 041F28
0B221A D8    3576** db 0xd8 ; 041F29
0B221B CA    3577** db 0xca ; 041F2A
0B221C 4F    3578** db 0x4f ; 041F2B 4F      5329 DB	"OTDR","X"+80H,CBH
0B221D 54    3579** db 0x54 ; 041F2C
0B221E 44    3580** db 0x44 ; 041F2D
0B221F 52    3581** db 0x52 ; 041F2E
0B2220 D8    3582** db 0xd8 ; 041F2F
0B2221 CB    3583** db 0xcb ; 041F30
             3584** ;
             3585** ; Group 2: (3 opcodes)
             3586** ;
0B2222 42    3587** db 0x42 ; 041F31 42      5333 DB	"BI","T"+80H,40H	; 44h
0B2223 49    3588** db 0x49 ; 041F32
0B2224 D4    3589** db 0xd4 ; 041F33
0B2225 40    3590** db 0x40 ; 041F34
0B2226 52    3591** db 0x52 ; 041F35 52      5333 DB	"RE","S"+80H,80H
0B2227 45    3592** db 0x45 ; 041F36
0B2228 D3    3593** db 0xd3 ; 041F37
0B2229 80    3594** db 0x80 ; 041F38
0B222A 53    3595** db 0x53 ; 041F39 53      5334 DB	"SE","T"+80H,C0H
0B222B 45    3596** db 0x45 ; 041F3A
0B222C D4    3597** db 0xd4 ; 041F3B
0B222D C0    3598** db 0xc0 ; 041F3C
             3599** ;
             3600** ; Group 3: (7 opcodes)
             3601** ;
0B222E 52    3602** db 0x52 ; 041F3D 52      5338 DB	"RL","C"+80H,00H	; 47h
0B222F 4C    3603** db 0x4c ; 041F3E
0B2230 C3    3604** db 0xc3 ; 041F3F
0B2231 00    3605** db 0x00 ; 041F40
0B2232 52    3606** db 0x52 ; 041F41 52      5339 DB	"RR","C"+80H,08H
0B2233 52    3607** db 0x52 ; 041F42
0B2234 C3    3608** db 0xc3 ; 041F43
0B2235 08    3609** db 0x08 ; 041F44
0B2236 52    3610** db 0x52 ; 041F45 52      5340 DB	"R","L"+80H,10H
0B2237 CC    3611** db 0xcc ; 041F46
0B2238 10    3612** db 0x10 ; 041F47
0B2239 52    3613** db 0x52 ; 041F48 52      5341 DB	"R","R"+80H,18H
0B223A D2    3614** db 0xd2 ; 041F49
0B223B 18    3615** db 0x18 ; 041F4A
0B223C 53    3616** db 0x53 ; 041F4B 53      5342 DB	"SL","A"+80H,20H
0B223D 4C    3617** db 0x4c ; 041F4C
0B223E C1    3618** db 0xc1 ; 041F4D
0B223F 20    3619** db 0x20 ; 041F4E
0B2240 53    3620** db 0x53 ; 041F4F 53      5343 DB	"SR","A"+80H,28H
0B2241 52    3621** db 0x52 ; 041F50
0B2242 C1    3622** db 0xc1 ; 041F51
0B2243 28    3623** db 0x28 ; 041F52
0B2244 53    3624** db 0x53 ; 041F53 53      5344 DB	"SR","L"+80H,38H
0B2245 52    3625** db 0x52 ; 041F54
0B2246 CC    3626** db 0xcc ; 041F55
0B2247 38    3627** db 0x38 ; 041F56
             3628** ;
             3629** ; Group 4: (3 opcodes)
             3630** ;
0B2248 50    3631** db 0x50 ; 041F57 50      5348 DB	"PO","P"+80H,C1H	; 4Eh
0B2249 4F    3632** db 0x4f ; 041F58
0B224A D0    3633** db 0xd0 ; 041F59
0B224B C1    3634** db 0xc1 ; 041F5A
0B224C 50    3635** db 0x50 ; 041F5B 50      5349 DB	"PUS","H"+80H,C5H
0B224D 55    3636** db 0x55 ; 041F5C
0B224E 53    3637** db 0x53 ; 041F5D
0B224F C8    3638** db 0xc8 ; 041F5E
0B2250 C5    3639** db 0xc5 ; 041F5F
0B2251 45    3640** db 0x45 ; 041F60 45      5350 DB	"EX",0,"(S","P"+80H,E3H
0B2252 58    3641** db 0x58 ; 041F61
0B2253 00    3642** db 0x00 ; 041F62
0B2254 28    3643** db 0x28 ; 041F63
0B2255 53    3644** db 0x53 ; 041F64
0B2256 D0    3645** db 0xd0 ; 041F65
0B2257 E3    3646** db 0xe3 ; 041F66
             3647** ;
             3648** ; Group 5: (7 opcodes)
             3649** ;
0B2258 53    3650** db 0x53 ; 041F67 53      5354 DB	"SU","B"+80H,90H	; 51h
0B2259 55    3651** db 0x55 ; 041F68
0B225A C2    3652** db 0xc2 ; 041F69
0B225B 90    3653** db 0x90 ; 041F6A
0B225C 41    3654** db 0x41 ; 041F6B 41      5355 DB	"AN","D"+80H,A0H
0B225D 4E    3655** db 0x4e ; 041F6C
0B225E C4    3656** db 0xc4 ; 041F6D
0B225F A0    3657** db 0xa0 ; 041F6E
0B2260 58    3658** db 0x58 ; 041F6F 58      5356 DB	"XO","R"+80H,A8H
0B2261 4F    3659** db 0x4f ; 041F70
0B2262 D2    3660** db 0xd2 ; 041F71
0B2263 A8    3661** db 0xa8 ; 041F72
0B2264 4F    3662** db 0x4f ; 041F73 4F      5357 DB	"O","R"+80H,B0H
0B2265 D2    3663** db 0xd2 ; 041F74
0B2266 B0    3664** db 0xb0 ; 041F75
0B2267 43    3665** db 0x43 ; 041F76 43      5358 DB	"C","P"+80H,B8H
0B2268 D0    3666** db 0xd0 ; 041F77
0B2269 B8    3667** db 0xb8 ; 041F78
0B226A 80    3668** db 0x80 ; 041F79 80      5359 DB	TAND,A0H		; 56h TAND: Tokenised AND
0B226B A0    3669** db 0xa0 ; 041F7A
0B226C 84    3670** db 0x84 ; 041F7B 84      5360 DB	TOR,B0H			; 57h TOR: Tokenised OR
0B226D B0    3671** db 0xb0 ; 041F7C
             3672** ;
             3673** ; Group 6 (3 opcodes)
             3674** ;
0B226E 41    3675** db 0x41 ; 041F7D 41      5364 DB	"AD","D"+80H,80H	; 58h
0B226F 44    3676** db 0x44 ; 041F7E
0B2270 C4    3677** db 0xc4 ; 041F7F
0B2271 80    3678** db 0x80 ; 041F80
0B2272 41    3679** db 0x41 ; 041F81 41      5365 DB	"AD","C"+80H,88H
0B2273 44    3680** db 0x44 ; 041F82
0B2274 C3    3681** db 0xc3 ; 041F83
0B2275 88    3682** db 0x88 ; 041F84
0B2276 53    3683** db 0x53 ; 041F85 53      5366 DB	"SB","C"+80H,98H
0B2277 42    3684** db 0x42 ; 041F86
0B2278 C3    3685** db 0xc3 ; 041F87
0B2279 98    3686** db 0x98 ; 041F88
             3687** ;
             3688** ; Group 7: (2 opcodes)
             3689** ;
0B227A 49    3690** db 0x49 ; 041F89 49      5370 DB	"IN","C"+80H,04H	; 5Bh
0B227B 4E    3691** db 0x4e ; 041F8A
0B227C C3    3692** db 0xc3 ; 041F8B
0B227D 04    3693** db 0x04 ; 041F8C
0B227E 44    3694** db 0x44 ; 041F8D 44      5371 DB	"DE","C"+80H,05H
0B227F 45    3695** db 0x45 ; 041F8E
0B2280 C3    3696** db 0xc3 ; 041F8F
0B2281 05    3697** db 0x05 ; 041F90
             3698** ;
             3699** ; Group 8: (2 opcodes)
             3700** ;
0B2282 49    3701** db 0x49 ; 041F91 49      5375 DB	"IN","0"+80H,00H	; 5Dh
0B2283 4E    3702** db 0x4e ; 041F92
0B2284 B0    3703** db 0xb0 ; 041F93
0B2285 00    3704** db 0x00 ; 041F94
0B2286 4F    3705** db 0x4f ; 041F95 4F      5376 DB	"OUT","0"+80H,01H
0B2287 55    3706** db 0x55 ; 041F96
0B2288 54    3707** db 0x54 ; 041F97
0B2289 B0    3708** db 0xb0 ; 041F98
0B228A 01    3709** db 0x01 ; 041F99
             3710** ;
             3711** ; Group 9: (1 opcode)
             3712** ;
0B228B 49    3713** db 0x49 ; 041F9A 49      5380 DB	"I","N"+80H,40H		; 5Fh
0B228C CE    3714** db 0xce ; 041F9B
0B228D 40    3715** db 0x40 ; 041F9C
             3716** ;
             3717** ; Group 10: (1 opcode)
             3718** ;
0B228E 4F    3719** db 0x4f ; 041F9D 4F      5384 DB	"OU","T"+80H,41H	; 60h
0B228F 55    3720** db 0x55 ; 041F9E
0B2290 D4    3721** db 0xd4 ; 041F9F
0B2291 41    3722** db 0x41 ; 041FA0
             3723** ;
             3724** ; Group 11: (2 opcodes)
             3725** ;
0B2292 4A    3726** db 0x4a ; 041FA1 4A      5388 DB	"J","R"+80H,20H		; 61h
0B2293 D2    3727** db 0xd2 ; 041FA2
0B2294 20    3728** db 0x20 ; 041FA3
0B2295 44    3729** db 0x44 ; 041FA4 44      5389 DB	"DJN","Z"+80H,10H
0B2296 4A    3730** db 0x4a ; 041FA5
0B2297 4E    3731** db 0x4e ; 041FA6
0B2298 DA    3732** db 0xda ; 041FA7
0B2299 10    3733** db 0x10 ; 041FA8
             3734** ;
             3735** ; Group 12: (1 opcode)
             3736** ;
0B229A 4A    3737** db 0x4a ; 041FA9 4A      5393 DB	"J","P"+80H,C2H		; 63h
0B229B D0    3738** db 0xd0 ; 041FAA
0B229C C2    3739** db 0xc2 ; 041FAB
             3740** ;
             3741** ; Group 13: (1 opcode)
             3742** ;
0B229D 43    3743** db 0x43 ; 041FAC 43      5397 DB	"CAL","L"+80H,C4H	; 64h
0B229E 41    3744** db 0x41 ; 041FAD
0B229F 4C    3745** db 0x4c ; 041FAE
0B22A0 CC    3746** db 0xcc ; 041FAF
0B22A1 C4    3747** db 0xc4 ; 041FB0
             3748** ;
             3749** ; Group 14: (1 opcode)
             3750** ;
0B22A2 52    3751** db 0x52 ; 041FB1 52      5401 DB	"RS","T"+80H,C7H	; 65h
0B22A3 53    3752** db 0x53 ; 041FB2
0B22A4 D4    3753** db 0xd4 ; 041FB3
0B22A5 C7    3754** db 0xc7 ; 041FB4
             3755** ;
             3756** ; Group 15: (1 opcode)
             3757** ;
0B22A6 52    3758** db 0x52 ; 041FB5 52      5405 DB	"RE","T"+80H,C0H	; 66h
0B22A7 45    3759** db 0x45 ; 041FB6
0B22A8 D4    3760** db 0xd4 ; 041FB7
0B22A9 C0    3761** db 0xc0 ; 041FB8
             3762** ;
             3763** ; Group 16: (1 opcode)
             3764** ;
0B22AA 4C    3765** db 0x4c ; 041FB9 4C      5409 DB	"L","D"+80H,40H		; 67h
0B22AB C4    3766** db 0xc4 ; 041FBA
0B22AC 40    3767** db 0x40 ; 041FBB
             3768** ;
             3769** ; Group 17: (1 opcode)
             3770** ;
0B22AD 54    3771** db 0x54 ; 041FBC 54      5413 DB	"TS","T"+80H,04H	; 68h
0B22AE 53    3772** db 0x53 ; 041FBD
0B22AF D4    3773** db 0xd4 ; 041FBE
0B22B0 04    3774** db 0x04 ; 041FBF
             3775** ;
             3776** ; Assembler Directives
             3777** ;
0B22B1 4F    3778** db 0x4f ; 041FC0 4F      5418 DB	"OP","T"+80H,00H	; 69h OPT
0B22B2 50    3779** db 0x50 ; 041FC1
0B22B3 D4    3780** db 0xd4 ; 041FC2
0B22B4 00    3781** db 0x00 ; 041FC3
0B22B5 41    3782** db 0x41 ; 041FC4 41      5419 DB	"AD","L"+80H,00H	; 6Ah ADL
0B22B6 44    3783** db 0x44 ; 041FC5
0B22B7 CC    3784** db 0xcc ; 041FC6
0B22B8 00    3785** db 0x00 ; 041FC7
0B22B9 5D    3786** db 0x5d ; 041FC8 5D      5421 DB	DEF_ & 7FH,"B"+80H,00H	; 6Bh Tokenised DEF + B
0B22BA C2    3787** db 0xc2 ; 041FC9
0B22BB 00    3788** db 0x00 ; 041FCA
0B22BC 5D    3789** db 0x5d ; 041FCB 5D      5422 DB	DEF_ & 7FH,"W"+80H,00H	; 6Ch Tokenised DEF + W
0B22BD D7    3790** db 0xd7 ; 041FCC
0B22BE 00    3791** db 0x00 ; 041FCD
0B22BF 5D    3792** db 0x5d ; 041FCE 5D      5423 DB	DEF_ & 7FH,"L"+80H,00H	; 6Dh Tokenised DEF + L
0B22C0 CC    3793** db 0xcc ; 041FCF
0B22C1 00    3794** db 0x00 ; 041FD0
0B22C2 5D    3795** db 0x5d ; 041FD1 5D      5424 DB 	DEF_ & 7FH,"M"+80H,00H	; 6Eh Tokenised DEF + M
0B22C3 CD    3796** db 0xcd ; 041FD2
0B22C4 00    3797** db 0x00 ; 041FD3
0B22C5 00    3798** db 0x00 ; 041FD4 00      5426 DB	0
             3799** ;
             3800** ; Operands
             3801** ;
             3802** OPRNDS:
0B22C6 C2    3803** db 0xc2 ; 041FD5 42      5430 OPRNDS:			DB	"B"+80H, 00H
0B22C7 00    3804** db 0x00 ; 041FD6
0B22C8 C3    3805** db 0xc3 ; 041FD7 43      5431 DB	"C"+80H, 01H
0B22C9 01    3806** db 0x01 ; 041FD8
0B22CA C4    3807** db 0xc4 ; 041FD9 44      5432 DB	"D"+80H, 02H
0B22CB 02    3808** db 0x02 ; 041FDA
0B22CC C5    3809** db 0xc5 ; 041FDB 45      5433 DB	"E"+80H, 03H
0B22CD 03    3810** db 0x03 ; 041FDC
0B22CE C8    3811** db 0xc8 ; 041FDD 48      5434 DB	"H"+80H, 04H
0B22CF 04    3812** db 0x04 ; 041FDE
0B22D0 CC    3813** db 0xcc ; 041FDF 4C      5435 DB	"L"+80H, 05H
0B22D1 05    3814** db 0x05 ; 041FE0
0B22D2 28    3815** db 0x28 ; 041FE1 28      5436 DB	"(H","L"+80H,06H
0B22D3 48    3816** db 0x48 ; 041FE2
0B22D4 CC    3817** db 0xcc ; 041FE3
0B22D5 06    3818** db 0x06 ; 041FE4
0B22D6 C1    3819** db 0xc1 ; 041FE5 41      5437 DB	"A"+80H, 07H
0B22D7 07    3820** db 0x07 ; 041FE6
0B22D8 28    3821** db 0x28 ; 041FE7 28      5438 DB	"(I","X"+80H,86H
0B22D9 49    3822** db 0x49 ; 041FE8
0B22DA D8    3823** db 0xd8 ; 041FE9
0B22DB 86    3824** db 0x86 ; 041FEA
0B22DC 28    3825** db 0x28 ; 041FEB 28      5439 DB	"(I","Y"+80H,C6H
0B22DD 49    3826** db 0x49 ; 041FEC
0B22DE D9    3827** db 0xd9 ; 041FED
0B22DF C6    3828** db 0xc6 ; 041FEE
0B22E0 42    3829** db 0x42 ; 041FEF 42      5441 DB	"B","C"+80H,08H
0B22E1 C3    3830** db 0xc3 ; 041FF0
0B22E2 08    3831** db 0x08 ; 041FF1
0B22E3 44    3832** db 0x44 ; 041FF2 44      5442 DB	"D","E"+80H,0AH
0B22E4 C5    3833** db 0xc5 ; 041FF3
0B22E5 0A    3834** db 0x0a ; 041FF4
0B22E6 48    3835** db 0x48 ; 041FF5 48      5443 DB	"H","L"+80H,0CH
0B22E7 CC    3836** db 0xcc ; 041FF6
0B22E8 0C    3837** db 0x0c ; 041FF7
0B22E9 49    3838** db 0x49 ; 041FF8 49      5444 DB	"I","X"+80H,8CH
0B22EA D8    3839** db 0xd8 ; 041FF9
0B22EB 8C    3840** db 0x8c ; 041FFA
0B22EC 49    3841** db 0x49 ; 041FFB 49      5445 DB	"I","Y"+80H,CCH
0B22ED D9    3842** db 0xd9 ; 041FFC
0B22EE CC    3843** db 0xcc ; 041FFD
0B22EF 41    3844** db 0x41 ; 041FFE 41      5446 DB	"A","F"+80H,0EH
0B22F0 C6    3845** db 0xc6 ; 041FFF
0B22F1 0E    3846** db 0x0e ; 042000
0B22F2 53    3847** db 0x53 ; 042001 53      5447 DB	"S","P"+80H,0EH
0B22F3 D0    3848** db 0xd0 ; 042002
0B22F4 0E    3849** db 0x0e ; 042003
0B22F5 4E    3850** db 0x4e ; 042004 4E      5449 DB	"N","Z"+80H,10H
0B22F6 DA    3851** db 0xda ; 042005
0B22F7 10    3852** db 0x10 ; 042006
0B22F8 DA    3853** db 0xda ; 042007 5A      5450 DB	"Z"+80H,11H
0B22F9 11    3854** db 0x11 ; 042008
0B22FA 4E    3855** db 0x4e ; 042009 4E      5451 DB	"N","C"+80H,12H
0B22FB C3    3856** db 0xc3 ; 04200A
0B22FC 12    3857** db 0x12 ; 04200B
0B22FD 50    3858** db 0x50 ; 04200C 50      5452 DB	"P","O"+80H,14H
0B22FE CF    3859** db 0xcf ; 04200D
0B22FF 14    3860** db 0x14 ; 04200E
0B2300 50    3861** db 0x50 ; 04200F 50      5453 DB	"P","E"+80H,15H
0B2301 C5    3862** db 0xc5 ; 042010
0B2302 15    3863** db 0x15 ; 042011
0B2303 D0    3864** db 0xd0 ; 042012 50      5454 DB	"P"+80H,16H
0B2304 16    3865** db 0x16 ; 042013
0B2305 CD    3866** db 0xcd ; 042014 4D      5455 DB	"M"+80H,17H
0B2306 17    3867** db 0x17 ; 042015
0B2307 28    3868** db 0x28 ; 042016 28      5457 DB	"(","C"+80H,20H
0B2308 C3    3869** db 0xc3 ; 042017
0B2309 20    3870** db 0x20 ; 042018
0B230A 00    3871** db 0x00 ; 042019 00      5459 DB	0
             3872** ;
             3873** ; Load operations
             3874** ;
             3875** LDOPS:
0B230B 49    3876** db 0x49 ; 04201A 49      5463 LDOPS:			DB	"I",0,"A"+80H,47H
0B230C 00    3877** db 0x00 ; 04201B
0B230D C1    3878** db 0xc1 ; 04201C
0B230E 47    3879** db 0x47 ; 04201D
0B230F 52    3880** db 0x52 ; 04201E 52      5464 DB	"R",0,"A"+80H,4FH
0B2310 00    3881** db 0x00 ; 04201F
0B2311 C1    3882** db 0xc1 ; 042020
0B2312 4F    3883** db 0x4f ; 042021
0B2313 41    3884** db 0x41 ; 042022 41      5465 DB	"A",0,"I"+80H,57H
0B2314 00    3885** db 0x00 ; 042023
0B2315 C9    3886** db 0xc9 ; 042024
0B2316 57    3887** db 0x57 ; 042025
0B2317 41    3888** db 0x41 ; 042026 41      5466 DB	"A",0,"R"+80H,5FH
0B2318 00    3889** db 0x00 ; 042027
0B2319 D2    3890** db 0xd2 ; 042028
0B231A 5F    3891** db 0x5f ; 042029
0B231B 28    3892** db 0x28 ; 04202A 28      5467 DB	"(BC",0,"A"+80H,02h
0B231C 42    3893** db 0x42 ; 04202B
0B231D 43    3894** db 0x43 ; 04202C
0B231E 00    3895** db 0x00 ; 04202D
0B231F C1    3896** db 0xc1 ; 04202E
0B2320 02    3897** db 0x02 ; 04202F
0B2321 28    3898** db 0x28 ; 042030 28      5468 DB	"(DE",0,"A"+80H,12H
0B2322 44    3899** db 0x44 ; 042031
0B2323 45    3900** db 0x45 ; 042032
0B2324 00    3901** db 0x00 ; 042033
0B2325 C1    3902** db 0xc1 ; 042034
0B2326 12    3903** db 0x12 ; 042035
0B2327 41    3904** db 0x41 ; 042036 41      5469 DB	"A",0,"(B","C"+80H,0AH
0B2328 00    3905** db 0x00 ; 042037
0B2329 28    3906** db 0x28 ; 042038
0B232A 42    3907** db 0x42 ; 042039
0B232B C3    3908** db 0xc3 ; 04203A
0B232C 0A    3909** db 0x0a ; 04203B
0B232D 41    3910** db 0x41 ; 04203C 41      5470 DB	"A",0,"(D","E"+80H,1AH
0B232E 00    3911** db 0x00 ; 04203D
0B232F 28    3912** db 0x28 ; 04203E
0B2330 44    3913** db 0x44 ; 04203F
0B2331 C5    3914** db 0xc5 ; 042040
0B2332 1A    3915** db 0x1a ; 042041
0B2333 00    3916** db 0x00 ; 042042 00      5472 DB	0
             3917** ;
             3918** ; eZ80 addressing mode suffixes
             3919** ;
             3920** ; Fully qualified suffixes
             3921** ;
             3922** EZ80SFS_1:
0B2334 4C    3923** db 0x4c ; 042043 4C      5478 EZ80SFS_1:		DB	"LI","S"+80H,49H
0B2335 49    3924** db 0x49 ; 042044
0B2336 D3    3925** db 0xd3 ; 042045
0B2337 49    3926** db 0x49 ; 042046
0B2338 53    3927** db 0x53 ; 042047 53      5479 DB	"SI","L"+80H,52H
0B2339 49    3928** db 0x49 ; 042048
0B233A CC    3929** db 0xcc ; 042049
0B233B 52    3930** db 0x52 ; 04204A
             3931** 
             3932** EZ80SFS_2:
0B233C 53    3933** db 0x53 ; 04204B 53      5480 EZ80SFS_2:		DB	"SI","S"+80H,40H
0B233D 49    3934** db 0x49 ; 04204C
0B233E D3    3935** db 0xd3 ; 04204D
0B233F 40    3936** db 0x40 ; 04204E
0B2340 4C    3937** db 0x4c ; 04204F 4C      5481 DB	"LI","L"+80H,5BH
0B2341 49    3938** db 0x49 ; 042050
0B2342 CC    3939** db 0xcc ; 042051
0B2343 5B    3940** db 0x5b ; 042052
0B2344 00    3941** db 0x00 ; 042053 00      5483 DB	0
             3942** ;
             3943** ; Shortcuts when ADL mode is 0
             3944** ;
             3945** EZ80SFS_ADL0:
0B2345 D3    3946** db 0xd3 ; 042054 53      5487 EZ80SFS_ADL0:		DB	"S"+80H,40H		; Equivalent to .SIS
0B2346 40    3947** db 0x40 ; 042055
0B2347 CC    3948** db 0xcc ; 042056 4C      5488 DB	"L"+80H,49H		; Equivalent to .LIS
0B2348 49    3949** db 0x49 ; 042057
0B2349 49    3950** db 0x49 ; 042058 49      5489 DB	"I","S"+80H,40H		; Equivalent to .SIS
0B234A D3    3951** db 0xd3 ; 042059
0B234B 40    3952** db 0x40 ; 04205A
0B234C 49    3953** db 0x49 ; 04205B 49      5490 DB	"I","L"+80H,52H		; Equivalent to .SIL
0B234D CC    3954** db 0xcc ; 04205C
0B234E 52    3955** db 0x52 ; 04205D
0B234F 00    3956** db 0x00 ; 04205E 00      5492 DB	0
             3957** ;
             3958** ; Shortcuts when ADL mode is 1
             3959** ;
             3960** EZ80SFS_ADL1:
0B2350 D3    3961** db 0xd3 ; 04205F 53      5496 EZ80SFS_ADL1:		DB	"S"+80H,52H		; Equivalent to .SIL
0B2351 52    3962** db 0x52 ; 042060
0B2352 CC    3963** db 0xcc ; 042061 4C      5497 DB	"L"+80H,5BH		; Equivalent to .LIL
0B2353 5B    3964** db 0x5b ; 042062
0B2354 49    3965** db 0x49 ; 042063 49      5498 DB	"I","S"+80H,49H		; Equivalent to .LIS
0B2355 D3    3966** db 0xd3 ; 042064
0B2356 49    3967** db 0x49 ; 042065
0B2357 49    3968** db 0x49 ; 042066 49      5499 DB	"I","L"+80H,5BH		; Equivalent to .LIL
0B2358 CC    3969** db 0xcc ; 042067
0B2359 5B    3970** db 0x5b ; 042068
0B235A 00    3971** db 0x00 ; 042069 00      5501 DB	0
             3972** ; END INSERT FROM BINARY
             3973** ;
             3974** ; .LIST
             3975** ;
             3976** ; already defined in equs.inc
             3977** ; LF:			EQU     0AH
             3978** ; CR:			EQU     0DH
              0007* include "fpp.asm"
             0001** ;
             0002** ; Title:	BBC Basic Interpreter - Z80 version
             0003** ;		Z80 Floating Point Package
             0004** ; Author:	(C) Copyright  R.T.Russell  1986
             0005** ; Modified By:	Dean Belfield
             0006** ; Created:	03/05/2022
             0007** ; Last Updated:	07/06/2023
             0008** ;
             0009** ; Modinfo:
             0010** ; 26/10/1986:	Version 0.0
             0011** ; 14/12/1988:	Vesion 0.1 (Bug Fix)
             0012** ; 12/05/2023:	Modified by Dean Belfield
             0013** ; 07/06/2023:	Modified to run in ADL mode
             0014** 
             0015** ; .ASSUME	ADL = 1
             0016** 
             0017** ; SEGMENT CODE
             0018** 
             0019** ; XDEF	FPP
             0020** ; XDEF	DLOAD5
             0021** ; XDEF	DLOAD5_SPL
             0022** ;
             0023** ;BINARY FLOATING POINT REPRESENTATION:
             0024** ;   32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
             0025** ;    8 BIT EXCESS-128 SIGNED EXPONENT
             0026** ;   SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
             0027** ;   MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
             0028** ;
             0029** ;BINARY INTEGER REPRESENTATION:
             0030** ;   32 BIT 2'S-COMPLEMENT SIGNED INTEGER
             0031** ;    "EXPONENT" BYTE = 0 (WHEN PRESENT)
             0032** ;
             0033** ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
             0034** ;                            EXPONENT - C
             0035** ;ALTERNATE REGISTER ALLOCATION: MANTISSA - DED'E'
             0036** ;                               EXPONENT - B
             0037** 
             0038** ;
             0039** ;Error codes:
             0040** ;
             0041** 
             0042** BADOP:			EQU     1               ;Bad operation code
             0043** DIVBY0:			EQU     18              ;Division by zero
             0044** TOOBIG_FP:			EQU     20              ;Too big
             0045** NGROOT:			EQU     21              ;Negative root
             0046** LOGRNG:			EQU     22              ;Log range
             0047** ACLOST:			EQU     23              ;Accuracy lost
             0048** EXPRNG:			EQU     24              ;Exp range
             0049** ;
             0050** ;Call entry and despatch code:
             0051** ;
             0052** FPP:
             0053** ; call dumpRegistersHexAll ; DEBUG
             0054** ; call printNewLine ; DEBUG
             0055** 
0B235B FD    0056** PUSH    IY              ;Save IY
0B235C E5 
0B235D FD    0057** LD      IY,0
0B235E 21 
0B235F 00 
0B2360 00 
0B2360 00   
0B2362 FD    0058** ADD     IY,SP           ;Save SP in IY
0B2363 39 
0B2364 CD    0059** CALL    OP              ;Perform operation
0B2365 74 
0B2366 23 
0B2367 0B 
0B2368 BF    0060** CP      A               ;Good return (Z, NC)
0B2369 FD    0061** EXIT_FP_:			POP     IY              ;Restore IY
0B236A E1 
0B236B C9    0062** RET                     ;Return to caller
             0063** ;
             0064** ;Error exit:
             0065** ;
0B236C 3E    0066** BAD_FP:			LD      A,BADOP         ;"Bad operation code"
0B236D 01 
0B236E FD    0067** ERROR_FP_:			LD      SP,IY           ;Restore SP from IY
0B236F F9 
0B2370 B7    0068** OR      A               ;Set NZ
0B2371 37    0069** SCF                     ;Set C
0B2372 18    0070** JR      EXIT_FP_
0B2373 F5 
             0071** ;
             0072** ;Perform operation or function:
             0073** ;
             0074** ; OP:			CP      (RTABLE-DTABLE)/3
0B2374 FE    0075** OP:				CP      RTABLE-DTABLE/3 ; ez80asm doesn't do nested expressions
0B2375 2A 
             0076** 
0B2376 30    0077** JR      NC,BAD_FP
0B2377 F4 
             0078** ; CP      (FTABLE-DTABLE)/3
0B2378 FE    0079** CP      FTABLE-DTABLE/3 ; ditto
0B2379 10 
0B237A 30    0080** JR      NC,DISPAT_FP
0B237B 08 
0B237C 08    0081** EX      AF,AF'
0B237D 78    0082** LD      A,B
0B237E B1    0083** OR      C               ;Both integer?
0B237F C4    0084** CALL    NZ,FLOATA       ;No, so float both
0B2380 87 
0B2381 2E 
0B2382 0B 
0B2383 08    0085** EX      AF,AF'
0B2384 E5    0086** DISPAT_FP:			PUSH    HL
0B2385 21    0087** LD      HL,DTABLE
0B2386 97 
0B2387 23 
0B2388 0B 
0B2389 C5    0088** PUSH    BC
0B238A 01    0089** LD	BC, 3		; C = 3
0B238B 03 
0B238C 00 
0B238D 00 
0B238E 47    0090** LD	B, A 		; B = op-code
0B238F ED    0091** MLT 	BC 		;BC = op-code * 3
0B2390 4C 
0B2391 09    0092** ADD	HL, BC 		;Add to table base
0B2392 ED    0093** LD	HL, (HL)	;Get the routine address (24-bit)
0B2393 27 
             0094** 
             0095** ;        		ADD     A, A            ;A = op-code * 2
             0096** ;        		LD      C,A
             0097** ;        		LD      B,0             ;BC = op-code * 2
             0098** ;        		ADD     HL,BC
             0099** ;        		LD      A,(HL)          ;Get low byte
             0100** ;        		INC     HL
             0101** ;        		LD      H,(HL)          ;Get high byte
             0102** ;        		LD      L,A
             0103** 
0B2394 C1    0104** POP     BC
0B2395 E3    0105** EX      (SP),HL
0B2396 C9    0106** RET                     ;Off to routine
             0107** ;
             0108** ;Despatch table:
             0109** ;
0B2397 49    0110** DTABLE:			DW24  IAND            ;AND (INTEGER)
0B2398 24 
0B2399 0B 
0B239A B7    0111** DW24  IBDIV           ;DIV
0B239B 24 
0B239C 0B 
0B239D 5C    0112** DW24  IEOR            ;EOR
0B239E 24 
0B239F 0B 
0B23A0 82    0113** DW24  IMOD            ;MOD
0B23A1 24 
0B23A2 0B 
0B23A3 6F    0114** DW24  IOR             ;OR
0B23A4 24 
0B23A5 0B 
0B23A6 3D    0115** DW24  ILE             ;<=
0B23A7 27 
0B23A8 0B 
0B23A9 4C    0116** DW24  INE             ;<>
0B23AA 27 
0B23AB 0B 
0B23AC 30    0117** DW24  IGE             ;>=
0B23AD 27 
0B23AE 0B 
0B23AF 15    0118** DW24  ILT             ;<
0B23B0 27 
0B23B1 0B 
0B23B2 59    0119** DW24  IEQ             ;=
0B23B3 27 
0B23B4 0B 
0B23B5 A5    0120** DW24  IMUL            ;*
0B23B6 25 
0B23B7 0B 
0B23B8 E0    0121** DW24  IADD            ;+
0B23B9 24 
0B23BA 0B 
0B23BB 22    0122** DW24  IGT             ;>
0B23BC 27 
0B23BD 0B 
0B23BE C7    0123** DW24  ISUB            ;-
0B23BF 24 
0B23C0 0B 
0B23C1 5C    0124** DW24  IPOW            ;^
0B23C2 26 
0B23C3 0B 
0B23C4 52    0125** DW24  IDIV            ;/
0B23C5 25 
0B23C6 0B 
             0126** ;
             0127** FTABLE:
0B23C7 6B    0128** DW24  ABSV_FP            ;ABS
0B23C8 27 
0B23C9 0B 
0B23CA 51    0129** DW24  ACS_FP             ;ACS
0B23CB 2B 
0B23CC 0B 
0B23CD 8F    0130** DW24  ASN_FP             ;ASN
0B23CE 2A 
0B23CF 0B 
0B23D0 BF    0131** DW24  ATN_FP             ;ATN
0B23D1 2A 
0B23D2 0B 
0B23D3 8A    0132** DW24  COS_FP             ;COS
0B23D4 28 
0B23D5 0B 
0B23D6 99    0133** DW24  DEG_FP             ;DEG
0B23D7 27 
0B23D8 0B 
0B23D9 46    0134** DW24  EXP_FP             ;EXP
0B23DA 29 
0B23DB 0B 
0B23DC ED    0135** DW24  INT_FP_            ;INT
0B23DD 27 
0B23DE 0B 
0B23DF E4    0136** DW24  LN_FP              ;LN
0B23E0 29 
0B23E1 0B 
0B23E2 79    0137** DW24  LOG_FP             ;LOG
0B23E3 2A 
0B23E4 0B 
0B23E5 77    0138** DW24  NOTK_FP            ;NOT
0B23E6 27 
0B23E7 0B 
0B23E8 A3    0139** DW24  RAD_FP             ;RAD
0B23E9 27 
0B23EA 0B 
0B23EB BE    0140** DW24  SGN_FP             ;SGN
0B23EC 27 
0B23ED 0B 
0B23EE 97    0141** DW24  SIN_FP             ;SIN
0B23EF 28 
0B23F0 0B 
0B23F1 06    0142** DW24  SQR_FP             ;SQR
0B23F2 28 
0B23F3 0B 
0B23F4 64    0143** DW24  TAN_FP             ;TAN
0B23F5 28 
0B23F6 0B 
             0144** ;
0B23F7 14    0145** DW24  ZERO_FP            ;ZERO
0B23F8 2F 
0B23F9 0B 
0B23FA 1F    0146** DW24  FONE_FP            ;FONE
0B23FB 29 
0B23FC 0B 
0B23FD 5E    0147** DW24  TRUE_FP            ;TRUE
0B23FE 27 
0B23FF 0B 
0B2400 8B    0148** DW24  PI_FP              ;PI
0B2401 27 
0B2402 0B 
             0149** ;
0B2403 D2    0150** DW24  VAL_FP             ;VAL
0B2404 27 
0B2405 0B 
0B2406 5A    0151** DW24  STR_FP             ;STR$
0B2407 2B 
0B2408 0B 
             0152** ;
0B2409 BB    0153** DW24  SFIX_FP            ;FIX
0B240A 2D 
0B240B 0B 
0B240C 97    0154** DW24  SFLOAT_FP          ;FLOAT
0B240D 2E 
0B240E 0B 
             0155** ;
0B240F E5    0156** DW24  FTEST_FP           ;TEST
0B2410 2E 
0B2411 0B 
0B2412 F7    0157** DW24  FCOMP_FP           ;COMPARE
0B2413 2E 
0B2414 0B 
             0158** ;
0B2415 45    0159** RTABLE:			DW24  FAND            ;AND (FLOATING-POINT)
0B2416 24 
0B2417 0B 
0B2418 B3    0160** DW24  FBDIV           ;DIV
0B2419 24 
0B241A 0B 
0B241B 58    0161** DW24  FEOR            ;EOR
0B241C 24 
0B241D 0B 
0B241E 7E    0162** DW24  FMOD            ;MOD
0B241F 24 
0B2420 0B 
0B2421 6B    0163** DW24  FFOR             ;OR
0B2422 24 
0B2423 0B 
0B2424 37    0164** DW24  FLE             ;<=
0B2425 27 
0B2426 0B 
0B2427 46    0165** DW24  FNE             ;<>
0B2428 27 
0B2429 0B 
0B242A 2A    0166** DW24  FGE             ;>=
0B242B 27 
0B242C 0B 
0B242D 0F    0167** DW24  FLT             ;<
0B242E 27 
0B242F 0B 
0B2430 53    0168** DW24  FEQ             ;=
0B2431 27 
0B2432 0B 
0B2433 FF    0169** DW24  FMUL            ;*
0B2434 25 
0B2435 0B 
0B2436 ED    0170** DW24  FADD            ;+
0B2437 24 
0B2438 0B 
0B2439 1C    0171** DW24  FGT             ;>
0B243A 27 
0B243B 0B 
0B243C D4    0172** DW24  FSUB            ;-
0B243D 24 
0B243E 0B 
0B243F DC    0173** DW24  FPOW            ;^
0B2440 26 
0B2441 0B 
0B2442 56    0174** DW24  FDIV            ;/
0B2443 25 
0B2444 0B 
             0175** ;
             0176** ;       PAGE
             0177** ;
             0178** ;ARITHMETIC AND LOGICAL OPERATORS:
             0179** ;All take two arguments, in HLH'L'C & DED'E'B.
             0180** ;Output in HLH'L'C
             0181** ;All registers except IX, IY destroyed.
             0182** ; (N.B. FPOW destroys IX).
             0183** ;
             0184** ;FAND - Floating-point AND.
             0185** ;IAND - Integer AND.
             0186** ;
0B2445 CD    0187** FAND:			CALL    FIX2
0B2446 AF 
0B2447 2D 
0B2448 0B 
0B2449 7C    0188** IAND:			LD      A,H
0B244A A2    0189** AND     D
0B244B 67    0190** LD      H,A
0B244C 7D    0191** LD      A,L
0B244D A3    0192** AND     E
0B244E 6F    0193** LD      L,A
0B244F D9    0194** EXX
0B2450 7C    0195** LD      A,H
0B2451 A2    0196** AND     D
0B2452 67    0197** LD      H,A
0B2453 7D    0198** LD      A,L
0B2454 A3    0199** AND     E
0B2455 6F    0200** LD      L,A
0B2456 D9    0201** EXX
0B2457 C9    0202** RET
             0203** ;
             0204** ;FEOR - Floating-point exclusive-OR.
             0205** ;IEOR - Integer exclusive-OR.
             0206** ;
0B2458 CD    0207** FEOR:			CALL    FIX2
0B2459 AF 
0B245A 2D 
0B245B 0B 
0B245C 7C    0208** IEOR:			LD      A,H
0B245D AA    0209** XOR     D
0B245E 67    0210** LD      H,A
0B245F 7D    0211** LD      A,L
0B2460 AB    0212** XOR     E
0B2461 6F    0213** LD      L,A
0B2462 D9    0214** EXX
0B2463 7C    0215** LD      A,H
0B2464 AA    0216** XOR     D
0B2465 67    0217** LD      H,A
0B2466 7D    0218** LD      A,L
0B2467 AB    0219** XOR     E
0B2468 6F    0220** LD      L,A
0B2469 D9    0221** EXX
0B246A C9    0222** RET
             0223** ;
             0224** ;FOR - Floating-point OR.
             0225** ;IOR - Integer OR.
             0226** ;
0B246B CD    0227** FFOR:			CALL    FIX2
0B246C AF 
0B246D 2D 
0B246E 0B 
0B246F 7C    0228** IOR:			LD      A,H
0B2470 B2    0229** OR      D
0B2471 67    0230** LD      H,A
0B2472 7D    0231** LD      A,L
0B2473 B3    0232** OR      E
0B2474 6F    0233** LD      L,A
0B2475 D9    0234** EXX
0B2476 7C    0235** LD      A,H
0B2477 B2    0236** OR      D
0B2478 67    0237** LD      H,A
0B2479 7D    0238** LD      A,L
0B247A B3    0239** OR      E
0B247B 6F    0240** LD      L,A
0B247C D9    0241** EXX
0B247D C9    0242** RET
             0243** ;
             0244** ;FMOD - Floating-point remainder.
             0245** ;IMOD - Integer remainder.
             0246** ;
0B247E CD    0247** FMOD:			CALL    FIX2
0B247F AF 
0B2480 2D 
0B2481 0B 
0B2482 7C    0248** IMOD:			LD      A,H
0B2483 AA    0249** XOR     D               ;DIV RESULT SIGN
0B2484 CB    0250** BIT     7,H
0B2485 7C 
0B2486 08    0251** EX      AF,AF'
0B2487 CB    0252** BIT     7,H
0B2488 7C 
0B2489 C4    0253** CALL    NZ,NEGATE       ;MAKE ARGUMENTS +VE
0B248A CB 
0B248B 2D 
0B248C 0B 
0B248D CD    0254** CALL    SWAP_FP
0B248E C8 
0B248F 2E 
0B2490 0B 
0B2491 CB    0255** BIT     7,H
0B2492 7C 
0B2493 C4    0256** CALL    NZ,NEGATE
0B2494 CB 
0B2495 2D 
0B2496 0B 
0B2497 44    0257** LD      B,H
0B2498 4D    0258** LD      C,L
0B2499 21    0259** LD      HL,0
0B249A 00 
0B249B 00 
0B249C 00 
0B249D D9    0260** EXX
0B249E 44    0261** LD      B,H
0B249F 4D    0262** LD      C,L
0B24A0 21    0263** LD      HL,0
0B24A1 00 
0B24A2 00 
0B24A3 00 
0B24A4 3E    0264** LD      A,-33
0B24A5 DF 
0B24A6 CD    0265** CALL    DIVA            ;DIVIDE
0B24A7 55 
0B24A8 30 
0B24A9 0B 
0B24AA D9    0266** EXX
0B24AB 0E    0267** LD      C,0             ;INTEGER MARKER
0B24AC 00 
0B24AD 08    0268** EX      AF,AF'
0B24AE C8    0269** RET     Z
0B24AF C3    0270** JP      NEGATE
0B24B0 CB 
0B24B1 2D 
0B24B2 0B 
             0271** ;
             0272** ;BDIV - Integer division.
             0273** ;
0B24B3 CD    0274** FBDIV:			CALL    FIX2
0B24B4 AF 
0B24B5 2D 
0B24B6 0B 
0B24B7 CD    0275** IBDIV:			CALL    IMOD
0B24B8 82 
0B24B9 24 
0B24BA 0B 
0B24BB B7    0276** OR      A
0B24BC CD    0277** CALL    SWAP_FP
0B24BD C8 
0B24BE 2E 
0B24BF 0B 
0B24C0 0E    0278** LD      C,0
0B24C1 00 
0B24C2 F0    0279** RET     P
0B24C3 C3    0280** JP      NEGATE
0B24C4 CB 
0B24C5 2D 
0B24C6 0B 
             0281** ;
             0282** ;ISUB - Integer subtraction.
             0283** ;FSUB - Floating point subtraction with rounding.
             0284** ;
0B24C7 CD    0285** ISUB:			CALL    SUB_
0B24C8 63 
0B24C9 2F 
0B24CA 0B 
0B24CB E0    0286** RET     PO
0B24CC CD    0287** CALL    ADD_
0B24CD 5B 
0B24CE 2F 
0B24CF 0B 
0B24D0 CD    0288** CALL    FLOAT2
0B24D1 8B 
0B24D2 2E 
0B24D3 0B 
0B24D4 7A    0289** FSUB:			LD      A,D
0B24D5 EE    0290** XOR     80H             ;CHANGE SIGN THEN ADD
0B24D6 80 
0B24D7 57    0291** LD      D,A
0B24D8 18    0292** JR      FADD
0B24D9 13 
             0293** ;
             0294** ;Reverse subtract.
             0295** ;
0B24DA 7C    0296** RSUB:			LD      A,H
0B24DB EE    0297** XOR     80H
0B24DC 80 
0B24DD 67    0298** LD      H,A
0B24DE 18    0299** JR      FADD
0B24DF 0D 
             0300** ;
             0301** ;IADD - Integer addition.
             0302** ;FADD - Floating point addition with rounding.
             0303** ;
0B24E0 CD    0304** IADD:			CALL    ADD_
0B24E1 5B 
0B24E2 2F 
0B24E3 0B 
0B24E4 E0    0305** RET     PO
0B24E5 CD    0306** CALL    SUB_
0B24E6 63 
0B24E7 2F 
0B24E8 0B 
0B24E9 CD    0307** CALL    FLOAT2
0B24EA 8B 
0B24EB 2E 
0B24EC 0B 
0B24ED 05    0308** FADD:			DEC     B
0B24EE 04    0309** INC     B
0B24EF C8    0310** RET     Z               ;ARG 2 ZERO
0B24F0 0D    0311** DEC     C
0B24F1 0C    0312** INC     C
0B24F2 CA    0313** JP      Z,SWAP_FP          ;ARG 1 ZERO
0B24F3 C8 
0B24F4 2E 
0B24F5 0B 
0B24F6 D9    0314** EXX
0B24F7 01    0315** LD      BC,0            ;INITIALISE
0B24F8 00 
0B24F9 00 
0B24FA 00 
0B24FB D9    0316** EXX
0B24FC 7C    0317** LD      A,H
0B24FD AA    0318** XOR     D               ;XOR SIGNS
0B24FE F5    0319** PUSH    AF
0B24FF 78    0320** LD      A,B
0B2500 B9    0321** CP      C               ;COMPARE EXPONENTS
0B2501 DC    0322** CALL    C,SWAP_FP          ;MAKE DED'E'B LARGEST
0B2502 C8 
0B2503 2E 
0B2504 0B 
0B2505 78    0323** LD      A,B
0B2506 CB    0324** SET     7,H             ;IMPLIED 1
0B2507 FC 
0B2508 C4    0325** CALL    NZ,FIX          ;ALIGN
0B2509 9C 
0B250A 2D 
0B250B 0B 
0B250C F1    0326** POP     AF
0B250D 7A    0327** LD      A,D             ;SIGN OF LARGER
0B250E CB    0328** SET     7,D             ;IMPLIED 1
0B250F FA 
0B2510 FA    0329** JP      M,FADD3         ;SIGNS DIFFERENT
0B2511 20 
0B2512 25 
0B2513 0B 
0B2514 CD    0330** CALL    ADD_             ;HLH'L'=HLH'L'+DED'E'
0B2515 5B 
0B2516 2F 
0B2517 0B 
0B2518 DC    0331** CALL    C,DIV2          ;NORMALISE
0B2519 D0 
0B251A 2E 
0B251B 0B 
0B251C CB    0332** SET     7,H
0B251D FC 
0B251E 18    0333** JR      FADD4
0B251F 0D 
             0334** ;
0B2520 CD    0335** FADD3:			CALL    SUB_             ;HLH'L'=HLH'L'-DED'E'
0B2521 63 
0B2522 2F 
0B2523 0B 
0B2524 DC    0336** CALL    C,NEG_           ;NEGATE HLH'L'B'C'
0B2525 E3 
0B2526 2D 
0B2527 0B 
0B2528 CD    0337** CALL    FLO48
0B2529 62 
0B252A 2E 
0B252B 0B 
0B252C 2F    0338** CPL                     ;CHANGE RESULT SIGN
0B252D D9    0339** FADD4:			EXX
0B252E EB    0340** EX      DE,HL
0B252F 21    0341** LD      HL,8000H
0B2530 00 
0B2531 80 
0B2532 00 
0B2533 B7    0342** OR      A               ;CLEAR CARRY
0B2534 52    0343** SBC.S   HL,BC
0B2535 ED 
0B2536 42 
0B2537 EB    0344** EX      DE,HL
0B2538 D9    0345** EXX
0B2539 CC    0346** CALL    Z,ODD           ;ROUND UNBIASSED
0B253A C2 
0B253B 2E 
0B253C 0B 
0B253D DC    0347** CALL    C,ADD1_FP          ;ROUND UP
0B253E B0 
0B253F 2E 
0B2540 0B 
0B2541 DC    0348** CALL    C,INCC
0B2542 DD 
0B2543 2E 
0B2544 0B 
0B2545 CB    0349** RES     7,H
0B2546 BC 
0B2547 0D    0350** DEC     C
0B2548 0C    0351** INC     C
0B2549 CA    0352** JP      Z,ZERO_FP
0B254A 14 
0B254B 2F 
0B254C 0B 
0B254D B7    0353** OR      A               ;RESULT SIGNQ
0B254E F0    0354** RET     P               ;POSITIVE
0B254F CB    0355** SET     7,H             ;NEGATIVE
0B2550 FC 
0B2551 C9    0356** RET
             0357** ;
             0358** ;IDIV - Integer division.
             0359** ;FDIV - Floating point division with rounding.
             0360** ;
0B2552 CD    0361** IDIV:			CALL    FLOAT2
0B2553 8B 
0B2554 2E 
0B2555 0B 
0B2556 05    0362** FDIV:			DEC     B               ;TEST FOR ZERO
0B2557 04    0363** INC     B
0B2558 3E    0364** LD      A,DIVBY0
0B2559 12 
0B255A CA    0365** JP      Z,ERROR_FP_         ;"Division by zero"
0B255B 6E 
0B255C 23 
0B255D 0B 
0B255E 0D    0366** DEC     C               ;TEST FOR ZERO
0B255F 0C    0367** INC     C
0B2560 C8    0368** RET     Z
0B2561 7C    0369** LD      A,H
0B2562 AA    0370** XOR     D               ;CALC. RESULT SIGN
0B2563 08    0371** EX      AF,AF'          ;SAVE SIGN
0B2564 CB    0372** SET     7,D             ;REPLACE IMPLIED 1's
0B2565 FA 
0B2566 CB    0373** SET     7,H
0B2567 FC 
0B2568 C5    0374** PUSH    BC              ;SAVE EXPONENTS
0B2569 42    0375** LD      B,D             ;LOAD REGISTERS
0B256A 4B    0376** LD      C,E
0B256B 11    0377** LD      DE,0
0B256C 00 
0B256D 00 
0B256E 00 
0B256F D9    0378** EXX
0B2570 42    0379** LD      B,D
0B2571 4B    0380** LD      C,E
0B2572 11    0381** LD      DE,0
0B2573 00 
0B2574 00 
0B2575 00 
0B2576 3E    0382** LD      A,-32           ;LOOP COUNTER
0B2577 E0 
0B2578 CD    0383** CALL    DIVA            ;DIVIDE
0B2579 55 
0B257A 30 
0B257B 0B 
0B257C D9    0384** EXX
0B257D CB    0385** BIT     7,D
0B257E 7A 
0B257F D9    0386** EXX
0B2580 CC    0387** CALL    Z,DIVB          ;NORMALISE & INC A
0B2581 74 
0B2582 30 
0B2583 0B 
0B2584 EB    0388** EX      DE,HL
0B2585 D9    0389** EXX
0B2586 CB    0390** SRL     B               ;DIVISOR/2
0B2587 38 
0B2588 CB    0391** RR      C
0B2589 19 
0B258A B7    0392** OR      A               ;CLEAR CARRY
0B258B 52    0393** SBC.S   HL,BC           ;REMAINDER-DIVISOR/2
0B258C ED 
0B258D 42 
0B258E 3F    0394** CCF
0B258F EB    0395** EX      DE,HL           ;RESULT IN HLH'L'
0B2590 CC    0396** CALL    Z,ODD           ;ROUND UNBIASSED
0B2591 C2 
0B2592 2E 
0B2593 0B 
0B2594 DC    0397** CALL    C,ADD1_FP          ;ROUND UP
0B2595 B0 
0B2596 2E 
0B2597 0B 
0B2598 C1    0398** POP     BC              ;RESTORE EXPONENTS
0B2599 DC    0399** CALL    C,INCC
0B259A DD 
0B259B 2E 
0B259C 0B 
0B259D 1F    0400** RRA                     ;LSB OF A TO CARRY
0B259E 79    0401** LD      A,C             ;COMPUTE NEW EXPONENT
0B259F 98    0402** SBC     A,B
0B25A0 3F    0403** CCF
0B25A1 C3    0404** JP      CHKOVF
0B25A2 42 
0B25A3 26 
0B25A4 0B 
             0405** ;
             0406** ;IMUL - Integer multiplication.
             0407** ;
0B25A5 7C    0408** IMUL:			LD      A,H
0B25A6 AA    0409** XOR     D
0B25A7 08    0410** EX      AF,AF'          ;SAVE RESULT SIGN
0B25A8 CB    0411** BIT     7,H
0B25A9 7C 
0B25AA C4    0412** CALL    NZ,NEGATE
0B25AB CB 
0B25AC 2D 
0B25AD 0B 
0B25AE CD    0413** CALL    SWAP_FP
0B25AF C8 
0B25B0 2E 
0B25B1 0B 
0B25B2 CB    0414** BIT     7,H
0B25B3 7C 
0B25B4 C4    0415** CALL    NZ,NEGATE
0B25B5 CB 
0B25B6 2D 
0B25B7 0B 
0B25B8 44    0416** LD      B,H
0B25B9 4D    0417** LD      C,L
0B25BA 21    0418** LD      HL,0
0B25BB 00 
0B25BC 00 
0B25BD 00 
0B25BE D9    0419** EXX
0B25BF 44    0420** LD      B,H
0B25C0 4D    0421** LD      C,L
0B25C1 21    0422** LD      HL,0
0B25C2 00 
0B25C3 00 
0B25C4 00 
0B25C5 3E    0423** LD      A,-33
0B25C6 DF 
0B25C7 CD    0424** CALL    MULA            ;MULTIPLY
0B25C8 8C 
0B25C9 30 
0B25CA 0B 
0B25CB D9    0425** EXX
0B25CC 0E    0426** LD      C,191           ;PRESET EXPONENT
0B25CD BF 
0B25CE CD    0427** CALL    TEST_FP            ;TEST RANGE
0B25CF F0 
0B25D0 2E 
0B25D1 0B 
0B25D2 20    0428** JR      NZ,IMUL1        ;TOO BIG
0B25D3 0F 
0B25D4 CB    0429** BIT     7,D
0B25D5 7A 
0B25D6 20    0430** JR      NZ,IMUL1
0B25D7 0B 
0B25D8 CD    0431** CALL    SWAP_FP
0B25D9 C8 
0B25DA 2E 
0B25DB 0B 
0B25DC 4A    0432** LD      C,D             ;INTEGER MARKER
0B25DD 08    0433** EX      AF,AF'
0B25DE F0    0434** RET     P
0B25DF C3    0435** JP      NEGATE
0B25E0 CB 
0B25E1 2D 
0B25E2 0B 
             0436** ;
0B25E3 0D    0437** IMUL1:			DEC     C
0B25E4 D9    0438** EXX
0B25E5 CB    0439** SLA     E
0B25E6 23 
0B25E7 CB    0440** RL      D
0B25E8 12 
0B25E9 D9    0441** EXX
0B25EA CB    0442** RL      E
0B25EB 13 
0B25EC CB    0443** RL      D
0B25ED 12 
0B25EE D9    0444** EXX
0B25EF 52    0445** ADC.S   HL,HL
0B25F0 ED 
0B25F1 6A 
0B25F2 D9    0446** EXX
0B25F3 52    0447** ADC.S   HL,HL
0B25F4 ED 
0B25F5 6A 
0B25F6 F2    0448** JP      P,IMUL1         ;NORMALISE
0B25F7 E3 
0B25F8 25 
0B25F9 0B 
0B25FA 08    0449** EX      AF,AF'
0B25FB F8    0450** RET     M
0B25FC CB    0451** RES     7,H             ;POSITIVE
0B25FD BC 
0B25FE C9    0452** RET
             0453** ;
             0454** ;FMUL - Floating point multiplication with rounding.
             0455** ;
             0456** FMUL:
             0457** ; call dumpRegistersHexAll ; DEBUG
             0458** ; call printNewLine ; DEBUG
             0459** 
0B25FF 05    0460** DEC     B               ;TEST FOR ZERO
0B2600 04    0461** INC     B
0B2601 CA    0462** JP      Z,ZERO_FP
0B2602 14 
0B2603 2F 
0B2604 0B 
0B2605 0D    0463** DEC     C               ;TEST FOR ZERO
0B2606 0C    0464** INC     C
0B2607 C8    0465** RET     Z
0B2608 7C    0466** LD      A,H
0B2609 AA    0467** XOR     D               ;CALC. RESULT SIGN
0B260A 08    0468** EX      AF,AF'
0B260B CB    0469** SET     7,D             ;REPLACE IMPLIED 1's
0B260C FA 
0B260D CB    0470** SET     7,H
0B260E FC 
0B260F C5    0471** PUSH    BC              ;SAVE EXPONENTS
0B2610 44    0472** LD      B,H             ;LOAD REGISTERS
0B2611 4D    0473** LD      C,L
0B2612 21    0474** LD      HL,0
0B2613 00 
0B2614 00 
0B2615 00 
0B2616 D9    0475** EXX
0B2617 44    0476** LD      B,H
0B2618 4D    0477** LD      C,L
0B2619 21    0478** LD      HL,0
0B261A 00 
0B261B 00 
0B261C 00 
0B261D 3E    0479** LD      A,-32           ;LOOP COUNTER
0B261E E0 
0B261F CD    0480** CALL    MULA            ;MULTIPLY
0B2620 8C 
0B2621 30 
0B2622 0B 
0B2623 DC    0481** CALL    C,MULB          ;NORMALISE & INC A
0B2624 A2 
0B2625 30 
0B2626 0B 
0B2627 D9    0482** EXX
0B2628 E5    0483** PUSH    HL
0B2629 21    0484** LD      HL,8000H
0B262A 00 
0B262B 80 
0B262C 00 
0B262D B7    0485** OR      A               ;CLEAR CARRY
0B262E 52    0486** SBC.S   HL,DE
0B262F ED 
0B2630 52 
0B2631 E1    0487** POP     HL
0B2632 CC    0488** CALL    Z,ODD           ;ROUND UNBIASSED
0B2633 C2 
0B2634 2E 
0B2635 0B 
0B2636 DC    0489** CALL    C,ADD1_FP          ;ROUND UP
0B2637 B0 
0B2638 2E 
0B2639 0B 
0B263A C1    0490** POP     BC              ;RESTORE EXPONENTS
0B263B DC    0491** CALL    C,INCC
0B263C DD 
0B263D 2E 
0B263E 0B 
0B263F 1F    0492** RRA                     ;LSB OF A TO CARRY
0B2640 79    0493** LD      A,C             ;COMPUTE NEW EXPONENT
0B2641 88    0494** ADC     A,B
0B2642 38    0495** CHKOVF:			JR      C,CHKO1
0B2643 06 
0B2644 F2    0496** JP      P,ZERO_FP          ;UNDERFLOW
0B2645 14 
0B2646 2F 
0B2647 0B 
0B2648 18    0497** JR      CHKO2
0B2649 04 
0B264A FA    0498** CHKO1:			JP      M,OFLOW         ;OVERFLOW
0B264B DF 
0B264C 2E 
0B264D 0B 
0B264E C6    0499** CHKO2:			ADD     A,80H
0B264F 80 
0B2650 4F    0500** LD      C,A
0B2651 CA    0501** JP      Z,ZERO_FP
0B2652 14 
0B2653 2F 
0B2654 0B 
0B2655 08    0502** EX      AF,AF'          ;RESTORE SIGN BIT
0B2656 CB    0503** RES     7,H
0B2657 BC 
0B2658 F0    0504** RET     P
0B2659 CB    0505** SET     7,H
0B265A FC 
0B265B C9    0506** RET
             0507** ;
             0508** ;IPOW - Integer involution.
             0509** ;
0B265C CD    0510** IPOW:			CALL    SWAP_FP
0B265D C8 
0B265E 2E 
0B265F 0B 
0B2660 CB    0511** BIT     7,H
0B2661 7C 
0B2662 F5    0512** PUSH    AF              ;SAVE SIGN
0B2663 C4    0513** CALL    NZ,NEGATE
0B2664 CB 
0B2665 2D 
0B2666 0B 
0B2667 48    0514** IPOW0:			LD      C,B
0B2668 06    0515** LD      B,32            ;LOOP COUNTER
0B2669 20 
0B266A CD    0516** IPOW1:			CALL    X2
0B266B 80 
0B266C 2F 
0B266D 0B 
0B266E 38    0517** JR      C,IPOW2
0B266F 08 
0B2670 10    0518** DJNZ    IPOW1
0B2671 F8 
0B2672 F1    0519** POP     AF
0B2673 D9    0520** EXX
0B2674 2C    0521** INC     L               ;RESULT=1
0B2675 D9    0522** EXX
0B2676 4C    0523** LD      C,H
0B2677 C9    0524** RET
             0525** ;
0B2678 F1    0526** IPOW2:			POP     AF
0B2679 C5    0527** PUSH    BC
0B267A EB    0528** EX      DE,HL
0B267B E5    0529** PUSH    HL
0B267C D9    0530** EXX
0B267D EB    0531** EX      DE,HL
0B267E E5    0532** PUSH    HL
0B267F D9    0533** EXX
0B2680 DD    0534** LD      IX,0
0B2681 21 
0B2682 00 
0B2683 00 
0B2683 00   
0B2685 DD    0535** ADD     IX,SP
0B2686 39 
0B2687 28    0536** JR      Z,IPOW4
0B2688 48 
0B2689 C5    0537** PUSH    BC
0B268A D9    0538** EXX
0B268B D5    0539** PUSH    DE
0B268C D9    0540** EXX
0B268D D5    0541** PUSH    DE
0B268E CD    0542** CALL    SFLOAT_FP
0B268F 97 
0B2690 2E 
0B2691 0B 
0B2692 CD    0543** CALL    RECIP
0B2693 CB 
0B2694 29 
0B2695 0B 
0B2696 DD    0544** LD      (IX+4),C
0B2697 71 
0B2698 04 
0B2699 D9    0545** EXX
0B269A DD    0546** LD      (IX+0),L
0B269B 75 
0B269C 00 
0B269D DD    0547** LD      (IX+1),H
0B269E 74 
0B269F 01 
0B26A0 D9    0548** EXX
0B26A1 DD    0549** LD      (IX+2),L
0B26A2 75 
0B26A3 02 
0B26A4 DD    0550** LD      (IX+3),H
0B26A5 74 
0B26A6 03 
0B26A7 18    0551** JR      IPOW5
0B26A8 21 
             0552** ;
0B26A9 C5    0553** IPOW3:			PUSH    BC
0B26AA D9    0554** EXX
0B26AB CB    0555** SLA     E
0B26AC 23 
0B26AD CB    0556** RL      D
0B26AE 12 
0B26AF D5    0557** PUSH    DE
0B26B0 D9    0558** EXX
0B26B1 CB    0559** RL      E
0B26B2 13 
0B26B3 CB    0560** RL      D
0B26B4 12 
0B26B5 D5    0561** PUSH    DE
0B26B6 3E    0562** LD      A,'*' & 0FH
0B26B7 0A 
0B26B8 F5    0563** PUSH    AF
0B26B9 CD    0564** CALL    COPY_
0B26BA 94 
0B26BB 2F 
0B26BC 0B 
0B26BD CD    0565** CALL    OP              ;SQUARE
0B26BE 74 
0B26BF 23 
0B26C0 0B 
0B26C1 F1    0566** POP     AF
0B26C2 CD    0567** CALL    DLOAD5
0B26C3 C0 
0B26C4 2C 
0B26C5 0B 
0B26C6 DC    0568** CALL    C,OP            ;MULTIPLY BY X
0B26C7 74 
0B26C8 23 
0B26C9 0B 
0B26CA D1    0569** IPOW5:			POP     DE
0B26CB D9    0570** EXX
0B26CC D1    0571** POP     DE
0B26CD D9    0572** EXX
0B26CE 79    0573** LD      A,C
0B26CF C1    0574** POP     BC
0B26D0 4F    0575** LD      C,A
0B26D1 10    0576** IPOW4:			DJNZ    IPOW3
0B26D2 D6 
0B26D3 F1    0577** POP     AF
0B26D4 F1    0578** POP     AF
0B26D5 F1    0579** POP     AF
0B26D6 C9    0580** RET
             0581** ;
0B26D7 F1    0582** FPOW0:			POP     AF
0B26D8 F1    0583** POP     AF
0B26D9 F1    0584** POP     AF
0B26DA 18    0585** JR      IPOW0
0B26DB 8B 
             0586** ;
             0587** ;FPOW - Floating-point involution.
             0588** ;
0B26DC CB    0589** FPOW:			BIT     7,D
0B26DD 7A 
0B26DE F5    0590** PUSH    AF
0B26DF CD    0591** CALL    SWAP_FP
0B26E0 C8 
0B26E1 2E 
0B26E2 0B 
0B26E3 CD    0592** CALL    PUSH5
0B26E4 A4 
0B26E5 2F 
0B26E6 0B 
0B26E7 0D    0593** DEC     C
0B26E8 0C    0594** INC     C
0B26E9 28    0595** JR      Z,FPOW0
0B26EA EC 
0B26EB 3E    0596** LD      A,158
0B26EC 9E 
0B26ED B9    0597** CP      C
0B26EE 38    0598** JR      C,FPOW1
0B26EF 0A 
0B26F0 3C    0599** INC     A
0B26F1 CD    0600** CALL    FIX
0B26F2 9C 
0B26F3 2D 
0B26F4 0B 
0B26F5 08    0601** EX      AF,AF'
0B26F6 F2    0602** JP      P,FPOW0
0B26F7 D7 
0B26F8 26 
0B26F9 0B 
0B26FA CD    0603** FPOW1:			CALL    SWAP_FP
0B26FB C8 
0B26FC 2E 
0B26FD 0B 
0B26FE CD    0604** CALL    LN0
0B26FF E8 
0B2700 29 
0B2701 0B 
0B2702 CD    0605** CALL    POP5
0B2703 AD 
0B2704 2F 
0B2705 0B 
0B2706 F1    0606** POP     AF
0B2707 CD    0607** CALL    FMUL
0B2708 FF 
0B2709 25 
0B270A 0B 
0B270B C3    0608** JP      EXP0
0B270C 4A 
0B270D 29 
0B270E 0B 
             0609** ;
             0610** ;Integer and floating-point compare.
             0611** ;Result is TRUE (-1) or FALSE (0).
             0612** ;
0B270F CD    0613** FLT:			CALL    FCP
0B2710 1E 
0B2711 2F 
0B2712 0B 
0B2713 18    0614** JR      ILT1
0B2714 04 
0B2715 CD    0615** ILT:			CALL    ICP
0B2716 10 
0B2717 2F 
0B2718 0B 
0B2719 D0    0616** ILT1:			RET     NC
0B271A 18    0617** JR      TRUE_FP
0B271B 42 
             0618** ;
0B271C CD    0619** FGT:			CALL    FCP
0B271D 1E 
0B271E 2F 
0B271F 0B 
0B2720 18    0620** JR      IGT1
0B2721 04 
0B2722 CD    0621** IGT:			CALL    ICP
0B2723 10 
0B2724 2F 
0B2725 0B 
0B2726 C8    0622** IGT1:			RET     Z
0B2727 D8    0623** RET     C
0B2728 18    0624** JR      TRUE_FP
0B2729 34 
             0625** ;
0B272A CD    0626** FGE:			CALL    FCP
0B272B 1E 
0B272C 2F 
0B272D 0B 
0B272E 18    0627** JR      IGE1
0B272F 04 
0B2730 CD    0628** IGE:			CALL    ICP
0B2731 10 
0B2732 2F 
0B2733 0B 
0B2734 D8    0629** IGE1:			RET     C
0B2735 18    0630** JR      TRUE_FP
0B2736 27 
             0631** ;
0B2737 CD    0632** FLE:			CALL    FCP
0B2738 1E 
0B2739 2F 
0B273A 0B 
0B273B 18    0633** JR      ILE1
0B273C 04 
0B273D CD    0634** ILE:			CALL    ICP
0B273E 10 
0B273F 2F 
0B2740 0B 
0B2741 28    0635** ILE1:			JR      Z,TRUE_FP
0B2742 1B 
0B2743 D0    0636** RET     NC
0B2744 18    0637** JR      TRUE_FP
0B2745 18 
             0638** ;
0B2746 CD    0639** FNE:			CALL    FCP
0B2747 1E 
0B2748 2F 
0B2749 0B 
0B274A 18    0640** JR      INE1
0B274B 04 
0B274C CD    0641** INE:			CALL    ICP
0B274D 10 
0B274E 2F 
0B274F 0B 
0B2750 C8    0642** INE1:			RET     Z
0B2751 18    0643** JR      TRUE_FP
0B2752 0B 
             0644** ;
0B2753 CD    0645** FEQ:			CALL    FCP
0B2754 1E 
0B2755 2F 
0B2756 0B 
0B2757 18    0646** JR      IEQ1
0B2758 04 
0B2759 CD    0647** IEQ:			CALL    ICP
0B275A 10 
0B275B 2F 
0B275C 0B 
0B275D C0    0648** IEQ1:			RET     NZ
0B275E 21    0649** TRUE_FP:			LD      HL,-1
0B275F FF 
0B2760 FF 
0B2761 FF 
0B2762 D9    0650** EXX
0B2763 21    0651** LD      HL,-1
0B2764 FF 
0B2765 FF 
0B2766 FF 
0B2767 D9    0652** EXX
0B2768 AF    0653** XOR     A
0B2769 4F    0654** LD      C,A
0B276A C9    0655** RET
             0656** ;
             0657** ;FUNCTIONS:
             0658** ;
             0659** ;Result returned in HLH'L'C (floating point)
             0660** ;Result returned in HLH'L' (C=0) (integer)
             0661** ;All registers except IY destroyed.
             0662** ;
             0663** ;ABS - Absolute value
             0664** ;Result is numeric, variable type.
             0665** ;
0B276B CB    0666** ABSV_FP:			BIT     7,H
0B276C 7C 
0B276D C8    0667** RET     Z               ;POSITIVE/ZERO
0B276E 0D    0668** DEC     C
0B276F 0C    0669** INC     C
0B2770 CA    0670** JP      Z,NEGATE        ;INTEGER
0B2771 CB 
0B2772 2D 
0B2773 0B 
0B2774 CB    0671** RES     7,H
0B2775 BC 
0B2776 C9    0672** RET
             0673** ;
             0674** ;NOT - Complement integer.
             0675** ;Result is integer numeric.
             0676** ;
0B2777 CD    0677** NOTK_FP:			CALL    SFIX_FP
0B2778 BB 
0B2779 2D 
0B277A 0B 
0B277B 7C    0678** LD      A,H
0B277C 2F    0679** CPL
0B277D 67    0680** LD      H,A
0B277E 7D    0681** LD      A,L
0B277F 2F    0682** CPL
0B2780 6F    0683** LD      L,A
0B2781 D9    0684** EXX
0B2782 7C    0685** LD      A,H
0B2783 2F    0686** CPL
0B2784 67    0687** LD      H,A
0B2785 7D    0688** LD      A,L
0B2786 2F    0689** CPL
0B2787 6F    0690** LD      L,A
0B2788 D9    0691** EXX
0B2789 AF    0692** XOR     A               ;NUMERIC MARKER
0B278A C9    0693** RET
             0694** ;
             0695** ;PI - Return PI (3.141592654)
             0696** ;Result is floating-point numeric.
             0697** ;
0B278B 21    0698** PI_FP:			LD      HL,490FH
0B278C 0F 
0B278D 49 
0B278E 00 
0B278F D9    0699** EXX
0B2790 21    0700** LD      HL,0DAA2H
0B2791 A2 
0B2792 DA 
0B2793 00 
0B2794 D9    0701** EXX
0B2795 0E    0702** LD      C,81H
0B2796 81 
0B2797 AF    0703** XOR     A               ;NUMERIC MARKER
0B2798 C9    0704** RET
             0705** ;
             0706** ;DEG - Convert radians to degrees
             0707** ;Result is floating-point numeric.
             0708** ;
0B2799 CD    0709** DEG_FP:			CALL    FPI180
0B279A AD 
0B279B 27 
0B279C 0B 
0B279D CD    0710** CALL    FMUL
0B279E FF 
0B279F 25 
0B27A0 0B 
0B27A1 AF    0711** XOR     A
0B27A2 C9    0712** RET
             0713** ;
             0714** ;RAD - Convert degrees to radians
             0715** ;Result is floating-point numeric.
             0716** ;
0B27A3 CD    0717** RAD_FP:			CALL    FPI180
0B27A4 AD 
0B27A5 27 
0B27A6 0B 
0B27A7 CD    0718** CALL    FDIV
0B27A8 56 
0B27A9 25 
0B27AA 0B 
0B27AB AF    0719** XOR     A
0B27AC C9    0720** RET
             0721** ;
             0722** ;180/PI
             0723** ;
0B27AD CD    0724** FPI180:			CALL    SFLOAT_FP
0B27AE 97 
0B27AF 2E 
0B27B0 0B 
0B27B1 11    0725** LD      DE,652EH
0B27B2 2E 
0B27B3 65 
0B27B4 00 
0B27B5 D9    0726** EXX
0B27B6 11    0727** LD      DE,0E0D3H
0B27B7 D3 
0B27B8 E0 
0B27B9 00 
0B27BA D9    0728** EXX
0B27BB 06    0729** LD      B,85H
0B27BC 85 
0B27BD C9    0730** RET
             0731** ;
             0732** ;SGN - Return -1, 0 or +1
             0733** ;Result is integer numeric.
             0734** ;
0B27BE CD    0735** SGN_FP:			CALL    TEST_FP
0B27BF F0 
0B27C0 2E 
0B27C1 0B 
0B27C2 B1    0736** OR      C
0B27C3 C8    0737** RET     Z               ;ZERO
0B27C4 CB    0738** BIT     7,H
0B27C5 7C 
0B27C6 C2    0739** JP      NZ,TRUE_FP         ;-1
0B27C7 5E 
0B27C8 27 
0B27C9 0B 
0B27CA CD    0740** CALL    ZERO_FP
0B27CB 14 
0B27CC 2F 
0B27CD 0B 
0B27CE C3    0741** JP      ADD1_FP            ;1
0B27CF B0 
0B27D0 2E 
0B27D1 0B 
             0742** ;
             0743** ;VAL - Return numeric value of string.
             0744** ;Input: ASCII string at IX
             0745** ;Result is variable type numeric.
             0746** ;
0B27D2 CD    0747** VAL_FP:			CALL    SIGNQ
0B27D3 2E 
0B27D4 31 
0B27D5 0B 
0B27D6 F5    0748** PUSH    AF
0B27D7 CD    0749** CALL    CON_FP
0B27D8 DE 
0B27D9 2C 
0B27DA 0B 
0B27DB F1    0750** POP     AF
0B27DC FE    0751** CP      '-'
0B27DD 2D 
0B27DE 3E    0752** LD      A,0             ;NUMERIC MARKER
0B27DF 00 
0B27E0 C0    0753** RET     NZ
0B27E1 0D    0754** DEC     C
0B27E2 0C    0755** INC     C
0B27E3 CA    0756** JP      Z,NEGATE        ;ZERO/INTEGER
0B27E4 CB 
0B27E5 2D 
0B27E6 0B 
0B27E7 7C    0757** LD      A,H
0B27E8 EE    0758** XOR     80H             ;CHANGE SIGN (FP)
0B27E9 80 
0B27EA 67    0759** LD      H,A
0B27EB AF    0760** XOR     A
0B27EC C9    0761** RET
             0762** ;
             0763** ;INT - Floor function
             0764** ;Result is integer numeric.
             0765** ;
0B27ED 0D    0766** INT_FP_:			DEC     C
0B27EE 0C    0767** INC     C
0B27EF C8    0768** RET     Z               ;ZERO/INTEGER
0B27F0 3E    0769** LD      A,159
0B27F1 9F 
0B27F2 44    0770** LD      B,H             ;B7=SIGN BIT
0B27F3 CD    0771** CALL    FIX
0B27F4 9C 
0B27F5 2D 
0B27F6 0B 
0B27F7 08    0772** EX      AF,AF'
0B27F8 A0    0773** AND     B
0B27F9 FC    0774** CALL    M,ADD1_FP          ;NEGATIVE NON-INTEGER
0B27FA B0 
0B27FB 2E 
0B27FC 0B 
0B27FD 78    0775** LD      A,B
0B27FE B7    0776** OR      A
0B27FF FC    0777** CALL    M,NEGATE
0B2800 CB 
0B2801 2D 
0B2802 0B 
0B2803 AF    0778** XOR     A
0B2804 4F    0779** LD      C,A
0B2805 C9    0780** RET
             0781** ;
             0782** ;SQR - square root
             0783** ;Result is floating-point numeric.
             0784** ;
0B2806 CD    0785** SQR_FP:			CALL    SFLOAT_FP
0B2807 97 
0B2808 2E 
0B2809 0B 
0B280A CB    0786** SQR0:			BIT     7,H
0B280B 7C 
0B280C 3E    0787** LD      A,NGROOT
0B280D 15 
0B280E C2    0788** JP      NZ,ERROR_FP_        ;"-ve root"
0B280F 6E 
0B2810 23 
0B2811 0B 
0B2812 0D    0789** DEC     C
0B2813 0C    0790** INC     C
0B2814 C8    0791** RET     Z               ;ZERO
0B2815 CB    0792** SET     7,H             ;IMPLIED 1
0B2816 FC 
0B2817 CB    0793** BIT     0,C
0B2818 41 
0B2819 CC    0794** CALL    Z,DIV2          ;MAKE EXPONENT ODD
0B281A D0 
0B281B 2E 
0B281C 0B 
0B281D 79    0795** LD      A,C
0B281E D6    0796** SUB     80H
0B281F 80 
0B2820 CB    0797** SRA     A               ;HALVE EXPONENT
0B2821 2F 
0B2822 C6    0798** ADD     A,80H
0B2823 80 
0B2824 4F    0799** LD      C,A
0B2825 C5    0800** PUSH    BC              ;SAVE EXPONENT
0B2826 EB    0801** EX      DE,HL
0B2827 21    0802** LD      HL,0
0B2828 00 
0B2829 00 
0B282A 00 
0B282B 44    0803** LD      B,H
0B282C 4D    0804** LD      C,L
0B282D D9    0805** EXX
0B282E EB    0806** EX      DE,HL
0B282F 21    0807** LD      HL,0
0B2830 00 
0B2831 00 
0B2832 00 
0B2833 44    0808** LD      B,H
0B2834 4D    0809** LD      C,L
0B2835 3E    0810** LD      A,-31
0B2836 E1 
0B2837 CD    0811** CALL    SQRA            ;ROOT
0B2838 C6 
0B2839 30 
0B283A 0B 
0B283B D9    0812** EXX
0B283C CB    0813** BIT     7,B
0B283D 78 
0B283E D9    0814** EXX
0B283F CC    0815** CALL    Z,SQRA          ;NORMALISE & INC A
0B2840 C6 
0B2841 30 
0B2842 0B 
0B2843 CD    0816** CALL    SQRB
0B2844 07 
0B2845 31 
0B2846 0B 
0B2847 B7    0817** OR      A               ;CLEAR CARRY
0B2848 CD    0818** CALL    DIVB
0B2849 74 
0B284A 30 
0B284B 0B 
0B284C CB    0819** RR      E               ;LSB TO CARRY
0B284D 1B 
0B284E 60    0820** LD      H,B
0B284F 69    0821** LD      L,C
0B2850 D9    0822** EXX
0B2851 60    0823** LD      H,B
0B2852 69    0824** LD      L,C
0B2853 DC    0825** CALL    C,ADD1_FP          ;ROUND UP
0B2854 B0 
0B2855 2E 
0B2856 0B 
0B2857 C1    0826** POP     BC              ;RESTORE EXPONENT
0B2858 DC    0827** CALL    C,INCC
0B2859 DD 
0B285A 2E 
0B285B 0B 
0B285C 1F    0828** RRA
0B285D 9F    0829** SBC     A,A
0B285E 81    0830** ADD     A,C
0B285F 4F    0831** LD      C,A
0B2860 CB    0832** RES     7,H             ;POSITIVE
0B2861 BC 
0B2862 AF    0833** XOR     A
0B2863 C9    0834** RET
             0835** ;
             0836** ;TAN - Tangent function
             0837** ;Result is floating-point numeric.
             0838** ;
0B2864 CD    0839** TAN_FP:			CALL    SFLOAT_FP
0B2865 97 
0B2866 2E 
0B2867 0B 
0B2868 CD    0840** CALL    PUSH5
0B2869 A4 
0B286A 2F 
0B286B 0B 
0B286C CD    0841** CALL    COS0
0B286D 8E 
0B286E 28 
0B286F 0B 
0B2870 CD    0842** CALL    POP5
0B2871 AD 
0B2872 2F 
0B2873 0B 
0B2874 CD    0843** CALL    PUSH5
0B2875 A4 
0B2876 2F 
0B2877 0B 
0B2878 CD    0844** CALL    SWAP_FP
0B2879 C8 
0B287A 2E 
0B287B 0B 
0B287C CD    0845** CALL    SIN0
0B287D 9B 
0B287E 28 
0B287F 0B 
0B2880 CD    0846** CALL    POP5
0B2881 AD 
0B2882 2F 
0B2883 0B 
0B2884 CD    0847** CALL    FDIV
0B2885 56 
0B2886 25 
0B2887 0B 
0B2888 AF    0848** XOR     A               ;NUMERIC MARKER
0B2889 C9    0849** RET
             0850** ;
             0851** ;COS - Cosine function
             0852** ;Result is floating-point numeric.
             0853** ;
0B288A CD    0854** COS_FP:			CALL    SFLOAT_FP
0B288B 97 
0B288C 2E 
0B288D 0B 
0B288E CD    0855** COS0:			CALL    SCALE
0B288F F3 
0B2890 2D 
0B2891 0B 
0B2892 1C    0856** INC     E
0B2893 1C    0857** INC     E
0B2894 7B    0858** LD      A,E
0B2895 18    0859** JR      SIN1
0B2896 10 
             0860** ;
             0861** ;SIN - Sine function
             0862** ;Result is floating-point numeric.
             0863** ;
0B2897 CD    0864** SIN_FP:			CALL    SFLOAT_FP
0B2898 97 
0B2899 2E 
0B289A 0B 
0B289B E5    0865** SIN0:			PUSH    HL              ;H7=SIGN
0B289C CD    0866** CALL    SCALE
0B289D F3 
0B289E 2D 
0B289F 0B 
0B28A0 F1    0867** POP     AF
0B28A1 07    0868** RLCA
0B28A2 07    0869** RLCA
0B28A3 07    0870** RLCA
0B28A4 E6    0871** AND     4
0B28A5 04 
0B28A6 AB    0872** XOR     E
0B28A7 F5    0873** SIN1:			PUSH    AF              ;OCTANT
0B28A8 CB    0874** RES     7,H
0B28A9 BC 
0B28AA 1F    0875** RRA
0B28AB CD    0876** CALL    PIBY4
0B28AC 39 
0B28AD 29 
0B28AE 0B 
0B28AF DC    0877** CALL    C,RSUB          ;X=(PI/4)-X
0B28B0 DA 
0B28B1 24 
0B28B2 0B 
0B28B3 F1    0878** POP     AF
0B28B4 F5    0879** PUSH    AF
0B28B5 E6    0880** AND     3
0B28B6 03 
0B28B7 E2    0881** JP      PO,SIN2         ;USE COSINE APPROX.
0B28B8 F0 
0B28B9 28 
0B28BA 0B 
0B28BB CD    0882** CALL    PUSH5           ;SAVE X
0B28BC A4 
0B28BD 2F 
0B28BE 0B 
0B28BF CD    0883** CALL    SQUARE          ;PUSH X*X
0B28C0 9C 
0B28C1 2F 
0B28C2 0B 
0B28C3 CD    0884** CALL    POLY
0B28C4 E1 
0B28C5 2F 
0B28C6 0B 
0B28C7 B7    0885** DW	0A8B7H          ;a(8)
0B28C8 A8 
0B28C9 11    0886** DW	3611H
0B28CA 36 
0B28CB 6D    0887** DB	6DH
0B28CC 26    0888** DW	0DE26H          ;a(6)
0B28CD DE 
0B28CE 05    0889** DW	0D005H
0B28CF D0 
0B28D0 73    0890** DB	73H
0B28D1 C0    0891** DW	80C0H           ;a(4)
0B28D2 80 
0B28D3 88    0892** DW	888H
0B28D4 08 
0B28D5 79    0893** DB	79H
0B28D6 9D    0894** DW	0AA9DH          ;a(2)
0B28D7 AA 
0B28D8 AA    0895** DW	0AAAAH
0B28D9 AA 
0B28DA 7D    0896** DB	7DH
0B28DB 00    0897** DW	0               ;a(0)
0B28DC 00 
0B28DD 00    0898** DW	0
0B28DE 00 
0B28DF 80    0899** DB	80H
0B28E0 CD    0900** CALL    POP5
0B28E1 AD 
0B28E2 2F 
0B28E3 0B 
0B28E4 CD    0901** CALL    POP5
0B28E5 AD 
0B28E6 2F 
0B28E7 0B 
0B28E8 CD    0902** CALL    FMUL
0B28E9 FF 
0B28EA 25 
0B28EB 0B 
0B28EC C3    0903** JP      SIN3
0B28ED 15 
0B28EE 29 
0B28EF 0B 
             0904** ;
0B28F0 CD    0905** SIN2:			CALL    SQUARE          ;PUSH X*X
0B28F1 9C 
0B28F2 2F 
0B28F3 0B 
0B28F4 CD    0906** CALL    POLY
0B28F5 E1 
0B28F6 2F 
0B28F7 0B 
0B28F8 71    0907** DW	0D571H          ;b(8)
0B28F9 D5 
0B28FA 78    0908** DW	4C78H
0B28FB 4C 
0B28FC 70    0909** DB	70H
0B28FD AF    0910** DW	94AFH           ;b(6)
0B28FE 94 
0B28FF 03    0911** DW	0B603H
0B2900 B6 
0B2901 76    0912** DB	76H
0B2902 C8    0913** DW	9CC8H           ;b(4)
0B2903 9C 
0B2904 AA    0914** DW	2AAAH
0B2905 2A 
0B2906 7B    0915** DB	7BH
0B2907 DD    0916** DW	0FFDDH          ;b(2)
0B2908 FF 
0B2909 FF    0917** DW	0FFFFH
0B290A FF 
0B290B 7E    0918** DB	7EH
0B290C 00    0919** DW	0               ;b(0)
0B290D 00 
0B290E 00    0920** DW	0
0B290F 00 
0B2910 80    0921** DB	80H
0B2911 CD    0922** CALL    POP5
0B2912 AD 
0B2913 2F 
0B2914 0B 
0B2915 F1    0923** SIN3:			POP     AF
0B2916 E6    0924** AND     4
0B2917 04 
0B2918 C8    0925** RET     Z
0B2919 0D    0926** DEC     C
0B291A 0C    0927** INC     C
0B291B C8    0928** RET     Z               ;ZERO
0B291C CB    0929** SET     7,H             ;MAKE NEGATIVE
0B291D FC 
0B291E C9    0930** RET
             0931** ;
             0932** ;Floating-point one:
             0933** ;
0B291F 21    0934** FONE_FP:			LD      HL,0
0B2920 00 
0B2921 00 
0B2922 00 
0B2923 D9    0935** EXX
0B2924 21    0936** LD      HL,0
0B2925 00 
0B2926 00 
0B2927 00 
0B2928 D9    0937** EXX
0B2929 0E    0938** LD      C,80H
0B292A 80 
0B292B C9    0939** RET
             0940** ;
0B292C 11    0941** DONE:			LD      DE,0
0B292D 00 
0B292E 00 
0B292F 00 
0B2930 D9    0942** EXX
0B2931 11    0943** LD      DE,0
0B2932 00 
0B2933 00 
0B2934 00 
0B2935 D9    0944** EXX
0B2936 06    0945** LD      B,80H
0B2937 80 
0B2938 C9    0946** RET
             0947** ;
0B2939 11    0948** PIBY4:			LD      DE,490FH
0B293A 0F 
0B293B 49 
0B293C 00 
0B293D D9    0949** EXX
0B293E 11    0950** LD      DE,0DAA2H
0B293F A2 
0B2940 DA 
0B2941 00 
0B2942 D9    0951** EXX
0B2943 06    0952** LD      B,7FH
0B2944 7F 
0B2945 C9    0953** RET
             0954** ;
             0955** ;EXP - Exponential function
             0956** ;Result is floating-point numeric.
             0957** ;
0B2946 CD    0958** EXP_FP:			CALL    SFLOAT_FP
0B2947 97 
0B2948 2E 
0B2949 0B 
0B294A CD    0959** EXP0:			CALL    LN2             ;LN(2)
0B294B D7 
0B294C 29 
0B294D 0B 
0B294E D9    0960** EXX
0B294F 1D    0961** DEC     E
0B2950 01    0962** LD      BC,0D1CFH       ;0.6931471805599453
0B2951 CF 
0B2952 D1 
0B2953 00 
0B2954 D9    0963** EXX
0B2955 E5    0964** PUSH    HL              ;H7=SIGN
0B2956 CD    0965** CALL    MOD48           ;"MODULUS"
0B2957 06 
0B2958 2E 
0B2959 0B 
0B295A F1    0966** POP     AF
0B295B CB    0967** BIT     7,E
0B295C 7B 
0B295D 28    0968** JR      Z,EXP1
0B295E 0B 
0B295F 17    0969** RLA
0B2960 DA    0970** JP      C,ZERO_FP
0B2961 14 
0B2962 2F 
0B2963 0B 
0B2964 3E    0971** LD      A,EXPRNG
0B2965 18 
0B2966 C3    0972** JP      ERROR_FP_           ;"Exp range"
0B2967 6E 
0B2968 23 
0B2969 0B 
             0973** ;
0B296A E6    0974** EXP1:			AND     80H
0B296B 80 
0B296C B3    0975** OR      E
0B296D F5    0976** PUSH    AF              ;INTEGER PART
0B296E CB    0977** RES     7,H
0B296F BC 
0B2970 CD    0978** CALL    PUSH5           ;PUSH X*LN(2)
0B2971 A4 
0B2972 2F 
0B2973 0B 
0B2974 CD    0979** CALL    POLY
0B2975 E1 
0B2976 2F 
0B2977 0B 
0B2978 72    0980** DW	4072H           ;a(7)
0B2979 40 
0B297A 2E    0981** DW	942EH
0B297B 94 
0B297C 73    0982** DB	73H
0B297D 65    0983** DW	6F65H           ;a(6)
0B297E 6F 
0B297F 4F    0984** DW	2E4FH
0B2980 2E 
0B2981 76    0985** DB	76H
0B2982 37    0986** DW	6D37H           ;a(5)
0B2983 6D 
0B2984 02    0987** DW	8802H
0B2985 88 
0B2986 79    0988** DB	79H
0B2987 12    0989** DW	0E512H          ;a(4)
0B2988 E5 
0B2989 A0    0990** DW	2AA0H
0B298A 2A 
0B298B 7B    0991** DB	7BH
0B298C 14    0992** DW	4F14H           ;a(3)
0B298D 4F 
0B298E AA    0993** DW	0AAAAH
0B298F AA 
0B2990 7D    0994** DB	7DH
0B2991 56    0995** DW	0FD56H          ;a(2)
0B2992 FD 
0B2993 FF    0996** DW	7FFFH
0B2994 7F 
0B2995 7E    0997** DB	7EH
0B2996 FE    0998** DW	0FFFEH          ;a(1)
0B2997 FF 
0B2998 FF    0999** DW	0FFFFH
0B2999 FF 
0B299A 7F    1000** DB	7FH
0B299B 00    1001** DW	0               ;a(0)
0B299C 00 
0B299D 00    1002** DW	0
0B299E 00 
0B299F 80    1003** DB	80H
0B29A0 CD    1004** CALL    POP5
0B29A1 AD 
0B29A2 2F 
0B29A3 0B 
0B29A4 F1    1005** POP     AF
0B29A5 F5    1006** PUSH    AF
0B29A6 F4    1007** CALL    P,RECIP         ;X=1/X
0B29A7 CB 
0B29A8 29 
0B29A9 0B 
0B29AA F1    1008** POP     AF
0B29AB F2    1009** JP      P,EXP4
0B29AC B3 
0B29AD 29 
0B29AE 0B 
0B29AF E6    1010** AND     7FH
0B29B0 7F 
0B29B1 ED    1011** NEG
0B29B2 44 
0B29B3 C6    1012** EXP4:			ADD     A,80H
0B29B4 80 
0B29B5 81    1013** ADD     A,C
0B29B6 38    1014** JR      C,EXP2
0B29B7 06 
0B29B8 F2    1015** JP      P,ZERO_FP          ;UNDERFLOW
0B29B9 14 
0B29BA 2F 
0B29BB 0B 
0B29BC 18    1016** JR      EXP3
0B29BD 04 
0B29BE FA    1017** EXP2:			JP      M,OFLOW         ;OVERFLOW
0B29BF DF 
0B29C0 2E 
0B29C1 0B 
0B29C2 C6    1018** EXP3:			ADD     A,80H
0B29C3 80 
0B29C4 CA    1019** JP      Z,ZERO_FP
0B29C5 14 
0B29C6 2F 
0B29C7 0B 
0B29C8 4F    1020** LD      C,A
0B29C9 AF    1021** XOR     A               ;NUMERIC MARKER
0B29CA C9    1022** RET
             1023** ;
0B29CB CD    1024** RECIP:			CALL    DONE
0B29CC 2C 
0B29CD 29 
0B29CE 0B 
0B29CF CD    1025** RDIV:			CALL    SWAP_FP
0B29D0 C8 
0B29D1 2E 
0B29D2 0B 
0B29D3 C3    1026** JP      FDIV            ;RECIPROCAL
0B29D4 56 
0B29D5 25 
0B29D6 0B 
             1027** ;
0B29D7 11    1028** LN2:			LD      DE,3172H        ;LN(2)
0B29D8 72 
0B29D9 31 
0B29DA 00 
0B29DB D9    1029** EXX
0B29DC 11    1030** LD      DE,17F8H
0B29DD F8 
0B29DE 17 
0B29DF 00 
0B29E0 D9    1031** EXX
0B29E1 06    1032** LD      B,7FH
0B29E2 7F 
0B29E3 C9    1033** RET
             1034** ;
             1035** ;LN - Natural log.
             1036** ;Result is floating-point numeric.
             1037** ;
0B29E4 CD    1038** LN_FP:			CALL    SFLOAT_FP
0B29E5 97 
0B29E6 2E 
0B29E7 0B 
0B29E8 3E    1039** LN0:			LD      A,LOGRNG
0B29E9 16 
0B29EA CB    1040** BIT     7,H
0B29EB 7C 
0B29EC C2    1041** JP      NZ,ERROR_FP_        ;"Log range"
0B29ED 6E 
0B29EE 23 
0B29EF 0B 
0B29F0 0C    1042** INC     C
0B29F1 0D    1043** DEC     C
0B29F2 CA    1044** JP      Z,ERROR_FP_
0B29F3 6E 
0B29F4 23 
0B29F5 0B 
0B29F6 11    1045** LD      DE,3504H        ;SQR(2)
0B29F7 04 
0B29F8 35 
0B29F9 00 
0B29FA D9    1046** EXX
0B29FB 11    1047** LD      DE,0F333H       ;1.41421356237
0B29FC 33 
0B29FD F3 
0B29FE 00 
0B29FF D9    1048** EXX
0B2A00 CD    1049** CALL    ICP0            ;MANTISSA>SQR(2)?
0B2A01 27 
0B2A02 2F 
0B2A03 0B 
0B2A04 79    1050** LD      A,C             ;EXPONENT
0B2A05 0E    1051** LD      C,80H           ;1 <= X < 2
0B2A06 80 
0B2A07 38    1052** JR      C,LN4
0B2A08 02 
0B2A09 0D    1053** DEC     C
0B2A0A 3C    1054** INC     A
0B2A0B F5    1055** LN4:			PUSH    AF              ;SAVE EXPONENT
0B2A0C CD    1056** CALL    RATIO           ;X=(X-1)/(X+1)
0B2A0D B9 
0B2A0E 2F 
0B2A0F 0B 
0B2A10 CD    1057** CALL    PUSH5
0B2A11 A4 
0B2A12 2F 
0B2A13 0B 
0B2A14 CD    1058** CALL    SQUARE          ;PUSH X*X
0B2A15 9C 
0B2A16 2F 
0B2A17 0B 
0B2A18 CD    1059** CALL    POLY
0B2A19 E1 
0B2A1A 2F 
0B2A1B 0B 
0B2A1C 48    1060** DW	0CC48H          ;a(9)
0B2A1D CC 
0B2A1E FB    1061** DW	74FBH
0B2A1F 74 
0B2A20 7D    1062** DB	7DH
0B2A21 AF    1063** DW	0AEAFH          ;a(7)
0B2A22 AE 
0B2A23 FF    1064** DW	11FFH
0B2A24 11 
0B2A25 7E    1065** DB	7EH
0B2A26 8C    1066** DW	0D98CH          ;a(5)
0B2A27 D9 
0B2A28 CD    1067** DW	4CCDH
0B2A29 4C 
0B2A2A 7E    1068** DB	7EH
0B2A2B E3    1069** DW	0A9E3H          ;a(3)
0B2A2C A9 
0B2A2D AA    1070** DW	2AAAH
0B2A2E 2A 
0B2A2F 7F    1071** DB	7FH
0B2A30 00    1072** DW	0               ;a(1)
0B2A31 00 
0B2A32 00    1073** DW	0
0B2A33 00 
0B2A34 81    1074** DB	81H
0B2A35 CD    1075** CALL    POP5
0B2A36 AD 
0B2A37 2F 
0B2A38 0B 
0B2A39 CD    1076** CALL    POP5
0B2A3A AD 
0B2A3B 2F 
0B2A3C 0B 
0B2A3D CD    1077** CALL    FMUL
0B2A3E FF 
0B2A3F 25 
0B2A40 0B 
0B2A41 F1    1078** POP     AF              ;EXPONENT
0B2A42 CD    1079** CALL    PUSH5
0B2A43 A4 
0B2A44 2F 
0B2A45 0B 
0B2A46 08    1080** EX      AF,AF'
0B2A47 CD    1081** CALL    ZERO_FP
0B2A48 14 
0B2A49 2F 
0B2A4A 0B 
0B2A4B 08    1082** EX      AF,AF'
0B2A4C D6    1083** SUB     80H
0B2A4D 80 
0B2A4E 28    1084** JR      Z,LN3
0B2A4F 1F 
0B2A50 30    1085** JR      NC,LN1
0B2A51 02 
0B2A52 2F    1086** CPL
0B2A53 3C    1087** INC     A
0B2A54 67    1088** LN1:			LD      H,A
0B2A55 0E    1089** LD      C,87H
0B2A56 87 
0B2A57 F5    1090** PUSH    AF
0B2A58 CD    1091** CALL    FLOAT_
0B2A59 77 
0B2A5A 2E 
0B2A5B 0B 
0B2A5C CB    1092** RES     7,H
0B2A5D BC 
0B2A5E CD    1093** CALL    LN2
0B2A5F D7 
0B2A60 29 
0B2A61 0B 
0B2A62 CD    1094** CALL    FMUL
0B2A63 FF 
0B2A64 25 
0B2A65 0B 
0B2A66 F1    1095** POP     AF
0B2A67 30    1096** JR      NC,LN3
0B2A68 06 
0B2A69 FA    1097** JP      M,LN3
0B2A6A 6F 
0B2A6B 2A 
0B2A6C 0B 
0B2A6D CB    1098** SET     7,H
0B2A6E FC 
0B2A6F CD    1099** LN3:			CALL    POP5
0B2A70 AD 
0B2A71 2F 
0B2A72 0B 
0B2A73 CD    1100** CALL    FADD
0B2A74 ED 
0B2A75 24 
0B2A76 0B 
0B2A77 AF    1101** XOR     A
0B2A78 C9    1102** RET
             1103** ;
             1104** ;LOG - base-10 logarithm.
             1105** ;Result is floating-point numeric.
             1106** ;
0B2A79 CD    1107** LOG_FP:			CALL    LN_FP
0B2A7A E4 
0B2A7B 29 
0B2A7C 0B 
0B2A7D 11    1108** LD      DE,5E5BH        ;LOG(e)
0B2A7E 5B 
0B2A7F 5E 
0B2A80 00 
0B2A81 D9    1109** EXX
0B2A82 11    1110** LD      DE,0D8A9H
0B2A83 A9 
0B2A84 D8 
0B2A85 00 
0B2A86 D9    1111** EXX
0B2A87 06    1112** LD      B,7EH
0B2A88 7E 
0B2A89 CD    1113** CALL    FMUL
0B2A8A FF 
0B2A8B 25 
0B2A8C 0B 
0B2A8D AF    1114** XOR     A
0B2A8E C9    1115** RET
             1116** ;
             1117** ;ASN - Arc-sine
             1118** ;Result is floating-point numeric.
             1119** ;
0B2A8F CD    1120** ASN_FP:			CALL    SFLOAT_FP
0B2A90 97 
0B2A91 2E 
0B2A92 0B 
0B2A93 CD    1121** CALL    PUSH5
0B2A94 A4 
0B2A95 2F 
0B2A96 0B 
0B2A97 CD    1122** CALL    COPY_
0B2A98 94 
0B2A99 2F 
0B2A9A 0B 
0B2A9B CD    1123** CALL    FMUL
0B2A9C FF 
0B2A9D 25 
0B2A9E 0B 
0B2A9F CD    1124** CALL    DONE
0B2AA0 2C 
0B2AA1 29 
0B2AA2 0B 
0B2AA3 CD    1125** CALL    RSUB
0B2AA4 DA 
0B2AA5 24 
0B2AA6 0B 
0B2AA7 CD    1126** CALL    SQR0
0B2AA8 0A 
0B2AA9 28 
0B2AAA 0B 
0B2AAB CD    1127** CALL    POP5
0B2AAC AD 
0B2AAD 2F 
0B2AAE 0B 
0B2AAF 0C    1128** INC     C
0B2AB0 0D    1129** DEC     C
0B2AB1 3E    1130** LD      A,2
0B2AB2 02 
0B2AB3 D5    1131** PUSH    DE
0B2AB4 CA    1132** JP      Z,ACS1
0B2AB5 39 
0B2AB6 2B 
0B2AB7 0B 
0B2AB8 D1    1133** POP     DE
0B2AB9 CD    1134** CALL    RDIV
0B2ABA CF 
0B2ABB 29 
0B2ABC 0B 
0B2ABD 18    1135** JR      ATN0
0B2ABE 04 
             1136** ;
             1137** ;ATN - arc-tangent
             1138** ;Result is floating-point numeric.
             1139** ;
0B2ABF CD    1140** ATN_FP:			CALL    SFLOAT_FP
0B2AC0 97 
0B2AC1 2E 
0B2AC2 0B 
0B2AC3 E5    1141** ATN0:			PUSH    HL              ;SAVE SIGN
0B2AC4 CB    1142** RES     7,H
0B2AC5 BC 
0B2AC6 11    1143** LD      DE,5413H        ;TAN(PI/8)=SQR(2)-1
0B2AC7 13 
0B2AC8 54 
0B2AC9 00 
0B2ACA D9    1144** EXX
0B2ACB 11    1145** LD      DE,0CCD0H
0B2ACC D0 
0B2ACD CC 
0B2ACE 00 
0B2ACF D9    1146** EXX
0B2AD0 06    1147** LD      B,7EH
0B2AD1 7E 
0B2AD2 CD    1148** CALL    FCP0            ;COMPARE
0B2AD3 24 
0B2AD4 2F 
0B2AD5 0B 
0B2AD6 06    1149** LD      B,0
0B2AD7 00 
0B2AD8 38    1150** JR      C,ATN2
0B2AD9 22 
0B2ADA 11    1151** LD      DE,1A82H        ;TAN(3*PI/8)=SQR(2)+1
0B2ADB 82 
0B2ADC 1A 
0B2ADD 00 
0B2ADE D9    1152** EXX
0B2ADF 11    1153** LD      DE,799AH
0B2AE0 9A 
0B2AE1 79 
0B2AE2 00 
0B2AE3 D9    1154** EXX
0B2AE4 06    1155** LD      B,81H
0B2AE5 81 
0B2AE6 CD    1156** CALL    FCP0            ;COMPARE
0B2AE7 24 
0B2AE8 2F 
0B2AE9 0B 
0B2AEA 38    1157** JR      C,ATN1
0B2AEB 0A 
0B2AEC CD    1158** CALL    RECIP           ;X=1/X
0B2AED CB 
0B2AEE 29 
0B2AEF 0B 
0B2AF0 06    1159** LD      B,2
0B2AF1 02 
0B2AF2 C3    1160** JP      ATN2
0B2AF3 FC 
0B2AF4 2A 
0B2AF5 0B 
0B2AF6 CD    1161** ATN1:			CALL    RATIO           ;X=(X-1)/(X+1)
0B2AF7 B9 
0B2AF8 2F 
0B2AF9 0B 
0B2AFA 06    1162** LD      B,1
0B2AFB 01 
0B2AFC C5    1163** ATN2:			PUSH    BC              ;SAVE FLAG
0B2AFD CD    1164** CALL    PUSH5
0B2AFE A4 
0B2AFF 2F 
0B2B00 0B 
0B2B01 CD    1165** CALL    SQUARE          ;PUSH X*X
0B2B02 9C 
0B2B03 2F 
0B2B04 0B 
0B2B05 CD    1166** CALL    POLY
0B2B06 E1 
0B2B07 2F 
0B2B08 0B 
0B2B09 35    1167** DW	0F335H          ;a(13)
0B2B0A F3 
0B2B0B D8    1168** DW	37D8H
0B2B0C 37 
0B2B0D 7B    1169** DB	7BH
0B2B0E 91    1170** DW	6B91H           ;a(11)
0B2B0F 6B 
0B2B10 B9    1171** DW	0AAB9H
0B2B11 AA 
0B2B12 7C    1172** DB	7CH
0B2B13 DE    1173** DW	41DEH           ;a(9)
0B2B14 41 
0B2B15 97    1174** DW	6197H
0B2B16 61 
0B2B17 7C    1175** DB	7CH
0B2B18 7B    1176** DW	9D7BH           ;a(7)
0B2B19 9D 
0B2B1A 37    1177** DW	9237H
0B2B1B 92 
0B2B1C 7D    1178** DB	7DH
0B2B1D 5A    1179** DW	2A5AH           ;a(5)
0B2B1E 2A 
0B2B1F CC    1180** DW	4CCCH
0B2B20 4C 
0B2B21 7D    1181** DB	7DH
0B2B22 5C    1182** DW	0A95CH          ;a(3)
0B2B23 A9 
0B2B24 AA    1183** DW	0AAAAH
0B2B25 AA 
0B2B26 7E    1184** DB	7EH
0B2B27 00    1185** DW	0               ;a(1)
0B2B28 00 
0B2B29 00    1186** DW	0
0B2B2A 00 
0B2B2B 80    1187** DB	80H
0B2B2C CD    1188** CALL    POP5
0B2B2D AD 
0B2B2E 2F 
0B2B2F 0B 
0B2B30 CD    1189** CALL    POP5
0B2B31 AD 
0B2B32 2F 
0B2B33 0B 
0B2B34 CD    1190** CALL    FMUL
0B2B35 FF 
0B2B36 25 
0B2B37 0B 
0B2B38 F1    1191** POP     AF
0B2B39 CD    1192** ACS1:			CALL    PIBY4           ;PI/4
0B2B3A 39 
0B2B3B 29 
0B2B3C 0B 
0B2B3D 1F    1193** RRA
0B2B3E F5    1194** PUSH    AF
0B2B3F DC    1195** CALL    C,FADD
0B2B40 ED 
0B2B41 24 
0B2B42 0B 
0B2B43 F1    1196** POP     AF
0B2B44 04    1197** INC     B
0B2B45 1F    1198** RRA
0B2B46 DC    1199** CALL    C,RSUB
0B2B47 DA 
0B2B48 24 
0B2B49 0B 
0B2B4A F1    1200** POP     AF
0B2B4B B7    1201** OR      A
0B2B4C F0    1202** RET     P
0B2B4D CB    1203** SET     7,H             ;MAKE NEGATIVE
0B2B4E FC 
0B2B4F AF    1204** XOR     A
0B2B50 C9    1205** RET
             1206** ;
             1207** ;ACS - Arc cosine=PI/2-ASN.
             1208** ;Result is floating point numeric.
             1209** ;
0B2B51 CD    1210** ACS_FP:			CALL    ASN_FP
0B2B52 8F 
0B2B53 2A 
0B2B54 0B 
0B2B55 3E    1211** LD      A,2
0B2B56 02 
0B2B57 F5    1212** PUSH    AF
0B2B58 18    1213** JR      ACS1
0B2B59 DF 
             1214** ;
             1215** ;Function STR - convert numeric value to ASCII string.
             1216** ;   Inputs: HLH'L'C = integer or floating-point number
             1217** ;           DE = address at which to store string
             1218** ;           IX = address of @% format control
             1219** ;  Outputs: String stored, with NUL terminator
             1220** ;
             1221** ;First normalise for decimal output:
             1222** ;
0B2B5A CD    1223** STR_FP:			CALL    SFLOAT_FP
0B2B5B 97 
0B2B5C 2E 
0B2B5D 0B 
0B2B5E 06    1224** LD      B,0             ;DEFAULT PT. POSITION
0B2B5F 00 
0B2B60 CB    1225** BIT     7,H             ;NEGATIVE?
0B2B61 7C 
0B2B62 28    1226** JR      Z,STR10
0B2B63 06 
0B2B64 CB    1227** RES     7,H
0B2B65 BC 
0B2B66 3E    1228** LD      A,'-'
0B2B67 2D 
0B2B68 12    1229** LD      (DE),A          ;STORE SIGN
0B2B69 13    1230** INC     DE
0B2B6A AF    1231** STR10:			XOR     A               ;CLEAR A
0B2B6B B9    1232** CP      C
0B2B6C 28    1233** JR      Z,STR02          ;ZERO
0B2B6D 4E 
0B2B6E D5    1234** PUSH    DE              ;SAVE TEXT POINTER
0B2B6F 78    1235** LD      A,B
0B2B70 F5    1236** STR11:			PUSH    AF              ;SAVE DECIMAL COUNTER
0B2B71 79    1237** LD      A,C             ;BINARY EXPONENT
0B2B72 FE    1238** CP      161
0B2B73 A1 
0B2B74 30    1239** JR      NC,STR14
0B2B75 1C 
0B2B76 FE    1240** CP      155
0B2B77 9B 
0B2B78 30    1241** JR      NC,STR15
0B2B79 29 
0B2B7A 2F    1242** CPL
0B2B7B FE    1243** CP      225
0B2B7C E1 
0B2B7D 38    1244** JR      C,STR13
0B2B7E 02 
0B2B7F 3E    1245** LD      A,-8
0B2B80 F8 
0B2B81 C6    1246** STR13:			ADD     A,28
0B2B82 1C 
0B2B83 CD    1247** CALL    POWR10
0B2B84 10 
0B2B85 30 
0B2B86 0B 
0B2B87 F5    1248** PUSH    AF
0B2B88 CD    1249** CALL    FMUL
0B2B89 FF 
0B2B8A 25 
0B2B8B 0B 
0B2B8C F1    1250** POP     AF
0B2B8D 47    1251** LD      B,A
0B2B8E F1    1252** POP     AF
0B2B8F 90    1253** SUB     B
0B2B90 18    1254** JR      STR11
0B2B91 DE 
0B2B92 D6    1255** STR14:			SUB     32
0B2B93 20 
0B2B94 CD    1256** CALL    POWR10
0B2B95 10 
0B2B96 30 
0B2B97 0B 
0B2B98 F5    1257** PUSH    AF
0B2B99 CD    1258** CALL    FDIV
0B2B9A 56 
0B2B9B 25 
0B2B9C 0B 
0B2B9D F1    1259** POP     AF
0B2B9E 47    1260** LD      B,A
0B2B9F F1    1261** POP     AF
0B2BA0 80    1262** ADD     A,B
0B2BA1 18    1263** JR      STR11
0B2BA2 CD 
0B2BA3 3E    1264** STR15:			LD      A,9
0B2BA4 09 
0B2BA5 CD    1265** CALL    POWR10          ;10^9
0B2BA6 10 
0B2BA7 30 
0B2BA8 0B 
0B2BA9 CD    1266** CALL    FCP0
0B2BAA 24 
0B2BAB 2F 
0B2BAC 0B 
0B2BAD 79    1267** LD      A,C
0B2BAE C1    1268** POP     BC
0B2BAF 4F    1269** LD      C,A
0B2BB0 CB    1270** SET     7,H             ;IMPLIED 1
0B2BB1 FC 
0B2BB2 DC    1271** CALL    C,X10B          ;X10, DEC B
0B2BB3 4C 
0B2BB4 2F 
0B2BB5 0B 
0B2BB6 D1    1272** POP     DE              ;RESTORE TEXT POINTER
0B2BB7 CB    1273** RES     7,C
0B2BB8 B9 
0B2BB9 3E    1274** LD      A,0
0B2BBA 00 
0B2BBB 17    1275** RLA                     ;PUT CARRY IN LSB
             1276** ;
             1277** ;At this point decimal normalisation has been done,
             1278** ;now convert to decimal digits:
             1279** ;      AHLH'L' = number in normalised integer form
             1280** ;            B = decimal place adjustment
             1281** ;            C = binary place adjustment (29-33)
             1282** ;
0B2BBC 0C    1283** STR02:			INC     C
0B2BBD 08    1284** EX      AF,AF'          ;SAVE A
0B2BBE 78    1285** LD      A,B
0B2BBF DD    1286** BIT     1,(IX+2)
0B2BC0 CB 
0B2BC1 02 
0B2BC2 4E 
0B2BC3 20    1287** JR      NZ,STR20
0B2BC4 08 
0B2BC5 AF    1288** XOR     A
0B2BC6 DD    1289** CP      (IX+1)
0B2BC7 BE 
0B2BC8 01 
0B2BC9 28    1290** JR      Z,STR21
0B2BCA 0B 
0B2BCB 3E    1291** LD      A,-10
0B2BCC F6 
0B2BCD DD    1292** STR20:			ADD     A,(IX+1)        ;SIG. FIG. COUNT
0B2BCE 86 
0B2BCF 01 
0B2BD0 B7    1293** OR      A               ;CLEAR CARRY
0B2BD1 FA    1294** JP      M,STR21
0B2BD2 D6 
0B2BD3 2B 
0B2BD4 0B 
0B2BD5 AF    1295** XOR     A
0B2BD6 F5    1296** STR21:			PUSH    AF
0B2BD7 08    1297** EX      AF,AF'          ;RESTORE A
0B2BD8 CD    1298** STR22:			CALL    X2              ;RL AHLH'L'
0B2BD9 80 
0B2BDA 2F 
0B2BDB 0B 
0B2BDC 8F    1299** ADC     A,A
0B2BDD FE    1300** CP      10
0B2BDE 0A 
0B2BDF 38    1301** JR      C,STR23
0B2BE0 05 
0B2BE1 D6    1302** SUB     10
0B2BE2 0A 
0B2BE3 D9    1303** EXX
0B2BE4 2C    1304** INC     L               ;SET RESULT BIT
0B2BE5 D9    1305** EXX
0B2BE6 0D    1306** STR23:			DEC     C
0B2BE7 20    1307** JR      NZ,STR22        ;32 TIMES
0B2BE8 EF 
0B2BE9 4F    1308** LD      C,A             ;REMAINDER
0B2BEA 7C    1309** LD      A,H
0B2BEB E6    1310** AND     3FH             ;CLEAR OUT JUNK
0B2BEC 3F 
0B2BED 67    1311** LD      H,A
0B2BEE F1    1312** POP     AF
0B2BEF F2    1313** JP      P,STR24
0B2BF0 FD 
0B2BF1 2B 
0B2BF2 0B 
0B2BF3 3C    1314** INC     A
0B2BF4 20    1315** JR      NZ,STR26
0B2BF5 1C 
0B2BF6 3E    1316** LD      A,4
0B2BF7 04 
0B2BF8 B9    1317** CP      C               ;ROUND UP?
0B2BF9 3E    1318** LD      A,0
0B2BFA 00 
0B2BFB 18    1319** JR      STR26
0B2BFC 15 
0B2BFD F5    1320** STR24:			PUSH    AF
0B2BFE 79    1321** LD      A,C
0B2BFF CE    1322** ADC     A,'0'           ;ADD CARRY
0B2C00 30 
0B2C01 FE    1323** CP      '0'
0B2C02 30 
0B2C03 28    1324** JR      Z,STR25         ;SUPPRESS ZERO
0B2C04 05 
0B2C05 FE    1325** CP      '9'+1
0B2C06 3A 
0B2C07 3F    1326** CCF
0B2C08 30    1327** JR      NC,STR26
0B2C09 08 
0B2C0A E3    1328** STR25:			EX      (SP),HL
0B2C0B CB    1329** BIT     6,L             ;ZERO FLAG
0B2C0C 75 
0B2C0D E3    1330** EX      (SP),HL
0B2C0E 20    1331** JR      NZ,STR27
0B2C0F 05 
0B2C10 3E    1332** LD      A,'0'
0B2C11 30 
0B2C12 3C    1333** STR26:			INC     A               ;SET +VE
0B2C13 3D    1334** DEC     A
0B2C14 F5    1335** PUSH    AF              ;PUT ON STACK + CARRY
0B2C15 04    1336** STR27:			INC     B
0B2C16 CD    1337** CALL    TEST_FP            ;IS HLH'L' ZERO?
0B2C17 F0 
0B2C18 2E 
0B2C19 0B 
0B2C1A 0E    1338** LD      C,32
0B2C1B 20 
0B2C1C 3E    1339** LD      A,0
0B2C1D 00 
0B2C1E 20    1340** JR      NZ,STR22
0B2C1F B8 
0B2C20 F1    1341** POP     AF
0B2C21 F5    1342** PUSH    AF
0B2C22 3E    1343** LD      A,0
0B2C23 00 
0B2C24 38    1344** JR      C,STR22
0B2C25 B2 
             1345** ;
             1346** ;At this point, the decimal character string is stored
             1347** ; on the stack. Trailing zeroes are suppressed and may
             1348** ; need to be replaced.
             1349** ;B register holds decimal point position.
             1350** ;Now format number and store as ASCII string:
             1351** ;
0B2C26 EB    1352** STR3:			EX      DE,HL           ;STRING POINTER
0B2C27 0E    1353** LD      C,-1            ;FLAG "E"
0B2C28 FF 
0B2C29 16    1354** LD      D,1
0B2C2A 01 
0B2C2B DD    1355** LD      E,(IX+1)        ;f2
0B2C2C 5E 
0B2C2D 01 
0B2C2E DD    1356** BIT     0,(IX+2)
0B2C2F CB 
0B2C30 02 
0B2C31 46 
0B2C32 20    1357** JR      NZ,STR34        ;E MODE
0B2C33 35 
0B2C34 DD    1358** BIT     1,(IX+2)
0B2C35 CB 
0B2C36 02 
0B2C37 4E 
0B2C38 28    1359** JR      Z,STR31
0B2C39 12 
0B2C3A 78    1360** LD      A,B             ;F MODE
0B2C3B B7    1361** OR      A
0B2C3C 28    1362** JR      Z,STR30
0B2C3D 05 
0B2C3E FA    1363** JP      M,STR30
0B2C3F 43 
0B2C40 2C 
0B2C41 0B 
0B2C42 50    1364** LD      D,B
0B2C43 7A    1365** STR30:			LD      A,D
0B2C44 DD    1366** ADD     A,(IX+1)
0B2C45 86 
0B2C46 01 
0B2C47 5F    1367** LD      E,A
0B2C48 FE    1368** CP      11
0B2C49 0B 
0B2C4A 38    1369** JR      C,STR32
0B2C4B 19 
0B2C4C 78    1370** STR31:			LD      A,B             ;G MODE
0B2C4D 11    1371** LD      DE,101H
0B2C4E 01 
0B2C4F 01 
0B2C50 00 
0B2C51 B7    1372** OR      A
0B2C52 FA    1373** JP      M,STR34
0B2C53 69 
0B2C54 2C 
0B2C55 0B 
0B2C56 28    1374** JR      Z,STR32
0B2C57 0D 
0B2C58 DD    1375** LD      A,(IX+1)
0B2C59 7E 
0B2C5A 01 
0B2C5B B7    1376** OR      A
0B2C5C 20    1377** JR      NZ,STR3A
0B2C5D 02 
0B2C5E 3E    1378** LD      A,10
0B2C5F 0A 
0B2C60 B8    1379** STR3A:			CP      B
0B2C61 38    1380** JR      C,STR34
0B2C62 06 
0B2C63 50    1381** LD      D,B
0B2C64 58    1382** LD      E,B
0B2C65 78    1383** STR32:			LD      A,B
0B2C66 C6    1384** ADD     A,129
0B2C67 81 
0B2C68 4F    1385** LD      C,A
0B2C69 CB    1386** STR34:			SET     7,D
0B2C6A FA 
0B2C6B 1D    1387** DEC     E
0B2C6C 7A    1388** STR35:			LD      A,D
0B2C6D B9    1389** CP      C
0B2C6E 30    1390** JR      NC,STR33
0B2C6F 0E 
0B2C70 F1    1391** STR36:			POP     AF
0B2C71 28    1392** JR      Z,STR37
0B2C72 04 
0B2C73 F2    1393** JP      P,STR38
0B2C74 80 
0B2C75 2C 
0B2C76 0B 
0B2C77 F5    1394** STR37:			PUSH    AF
0B2C78 1C    1395** INC     E
0B2C79 1D    1396** DEC     E
0B2C7A FA    1397** JP      M,STR4
0B2C7B 91 
0B2C7C 2C 
0B2C7D 0B 
0B2C7E 3E    1398** STR33:			LD      A,'0'
0B2C7F 30 
0B2C80 15    1399** STR38:			DEC     D
0B2C81 E2    1400** JP      PO,STR39
0B2C82 88 
0B2C83 2C 
0B2C84 0B 
0B2C85 36    1401** LD      (HL),'.'
0B2C86 2E 
0B2C87 23    1402** INC     HL
0B2C88 77    1403** STR39:			LD      (HL),A
0B2C89 23    1404** INC     HL
0B2C8A 1D    1405** DEC     E
0B2C8B F2    1406** JP      P,STR35
0B2C8C 6C 
0B2C8D 2C 
0B2C8E 0B 
0B2C8F 18    1407** JR      STR36
0B2C90 DF 
             1408** ;
0B2C91 F1    1409** STR4:			POP     AF
0B2C92 0C    1410** STR40:			INC     C
0B2C93 4D    1411** LD      C,L
0B2C94 20    1412** JR      NZ,STR44
0B2C95 28 
0B2C96 36    1413** LD      (HL),'E'        ;EXPONENT
0B2C97 45 
0B2C98 23    1414** INC     HL
0B2C99 78    1415** LD      A,B
0B2C9A 3D    1416** DEC     A
0B2C9B F2    1417** JP      P,STR41
0B2C9C A4 
0B2C9D 2C 
0B2C9E 0B 
0B2C9F 36    1418** LD      (HL),'-'
0B2CA0 2D 
0B2CA1 23    1419** INC     HL
0B2CA2 ED    1420** NEG
0B2CA3 44 
0B2CA4 36    1421** STR41:			LD      (HL),'0'
0B2CA5 30 
0B2CA6 28    1422** JR      Z,STR47
0B2CA7 15 
0B2CA8 FE    1423** CP      10
0B2CA9 0A 
0B2CAA 47    1424** LD      B,A
0B2CAB 3E    1425** LD      A,':'
0B2CAC 3A 
0B2CAD 38    1426** JR      C,STR42
0B2CAE 03 
0B2CAF 23    1427** INC     HL
0B2CB0 36    1428** LD      (HL),'0'
0B2CB1 30 
0B2CB2 34    1429** STR42:			INC     (HL)
0B2CB3 BE    1430** CP      (HL)
0B2CB4 20    1431** JR      NZ,STR43
0B2CB5 05 
0B2CB6 36    1432** LD      (HL),'0'
0B2CB7 30 
0B2CB8 2B    1433** DEC     HL
0B2CB9 34    1434** INC     (HL)
0B2CBA 23    1435** INC     HL
0B2CBB 10    1436** STR43:			DJNZ    STR42
0B2CBC F5 
0B2CBD 23    1437** STR47:			INC     HL
0B2CBE EB    1438** STR44:			EX      DE,HL
0B2CBF C9    1439** RET
             1440** ;
             1441** ;Support subroutines:
             1442** ;
0B2CC0 DD    1443** DLOAD5:			LD      B,(IX+4)
0B2CC1 46 
0B2CC2 04 
0B2CC3 D9    1444** EXX
0B2CC4 DD    1445** LD      E,(IX+0)
0B2CC5 5E 
0B2CC6 00 
0B2CC7 DD    1446** LD      D,(IX+1)
0B2CC8 56 
0B2CC9 01 
0B2CCA D9    1447** EXX
0B2CCB DD    1448** LD      E,(IX+2)
0B2CCC 5E 
0B2CCD 02 
0B2CCE DD    1449** LD      D,(IX+3)
0B2CCF 56 
0B2CD0 03 
0B2CD1 C9    1450** RET
             1451** ;
0B2CD2 DD    1452** DLOAD5_SPL:		LD      B,(IX+6)
0B2CD3 46 
0B2CD4 06 
0B2CD5 D9    1453** EXX
0B2CD6 DD    1454** LD	DE, (IX+0)
0B2CD7 17 
0B2CD8 00 
0B2CD9 D9    1455** EXX
0B2CDA DD    1456** LD	DE, (IX+3)
0B2CDB 17 
0B2CDC 03 
0B2CDD C9    1457** RET
             1458** ;
             1459** ;CON_FP - Get unsigned numeric constant from ASCII string.
             1460** ;   Inputs: ASCII string at (IX).
             1461** ;  Outputs: Variable-type result in HLH'L'C
             1462** ;           IX updated (points to delimiter)
             1463** ;           A7 = 0 (numeric marker)
             1464** ;
0B2CDE CD    1465** CON_FP:			CALL    ZERO_FP            ;INITIALISE TO ZERO
0B2CDF 14 
0B2CE0 2F 
0B2CE1 0B 
0B2CE2 0E    1466** LD      C,0             ;TRUNCATION COUNTER
0B2CE3 00 
0B2CE4 CD    1467** CALL    UINT          ;GET INTEGER PART
0B2CE5 72 
0B2CE6 2D 
0B2CE7 0B 
0B2CE8 FE    1468** CP      '.'
0B2CE9 2E 
0B2CEA 06    1469** LD      B,0             ;DECL. PLACE COUNTER
0B2CEB 00 
0B2CEC CC    1470** CALL    Z,NUMBIX        ;GET FRACTION PART
0B2CED 70 
0B2CEE 2D 
0B2CEF 0B 
0B2CF0 FE    1471** CP      'E'
0B2CF1 45 
0B2CF2 3E    1472** LD      A,0             ;INITIALISE EXPONENT
0B2CF3 00 
0B2CF4 CC    1473** CALL    Z,GETEXP        ;GET EXPONENT
0B2CF5 3E 
0B2CF6 2D 
0B2CF7 0B 
0B2CF8 CB    1474** BIT     7,H
0B2CF9 7C 
0B2CFA 20    1475** JR      NZ,CON0         ;INTEGER OVERFLOW
0B2CFB 08 
0B2CFC B7    1476** OR      A
0B2CFD 20    1477** JR      NZ,CON0         ;EXPONENT NON-ZERO
0B2CFE 05 
0B2CFF B8    1478** CP      B
0B2D00 20    1479** JR      NZ,CON0         ;DECIMAL POINT
0B2D01 02 
0B2D02 B9    1480** CP      C
0B2D03 C8    1481** RET     Z               ;INTEGER
0B2D04 90    1482** CON0:			SUB     B
0B2D05 81    1483** ADD     A,C
0B2D06 0E    1484** LD      C,159
0B2D07 9F 
0B2D08 CD    1485** CALL    FLOAT_
0B2D09 77 
0B2D0A 2E 
0B2D0B 0B 
0B2D0C CB    1486** RES     7,H             ;DITCH IMPLIED 1
0B2D0D BC 
0B2D0E B7    1487** OR      A
0B2D0F C8    1488** RET     Z               ;DONE
0B2D10 FA    1489** JP      M,CON2          ;NEGATIVE EXPONENT
0B2D11 1E 
0B2D12 2D 
0B2D13 0B 
0B2D14 CD    1490** CALL    POWR10
0B2D15 10 
0B2D16 30 
0B2D17 0B 
0B2D18 CD    1491** CALL    FMUL            ;SCALE
0B2D19 FF 
0B2D1A 25 
0B2D1B 0B 
0B2D1C AF    1492** XOR     A
0B2D1D C9    1493** RET
0B2D1E FE    1494** CON2:			CP      -38
0B2D1F DA 
0B2D20 38    1495** JR      C,CON3          ;CAN'T SCALE IN ONE GO
0B2D21 0C 
0B2D22 ED    1496** NEG
0B2D23 44 
0B2D24 CD    1497** CALL    POWR10
0B2D25 10 
0B2D26 30 
0B2D27 0B 
0B2D28 CD    1498** CALL    FDIV            ;SCALE
0B2D29 56 
0B2D2A 25 
0B2D2B 0B 
0B2D2C AF    1499** XOR     A
0B2D2D C9    1500** RET
0B2D2E F5    1501** CON3:			PUSH    AF
0B2D2F 3E    1502** LD      A,38
0B2D30 26 
0B2D31 CD    1503** CALL    POWR10
0B2D32 10 
0B2D33 30 
0B2D34 0B 
0B2D35 CD    1504** CALL    FDIV
0B2D36 56 
0B2D37 25 
0B2D38 0B 
0B2D39 F1    1505** POP     AF
0B2D3A C6    1506** ADD     A,38
0B2D3B 26 
0B2D3C 18    1507** JR      CON2
0B2D3D E0 
             1508** ;
             1509** ;GETEXP - Get decimal exponent from string
             1510** ;     Inputs: ASCII string at (IX)
             1511** ;             (IX points at 'E')
             1512** ;             A = initial value
             1513** ;    Outputs: A = new exponent
             1514** ;             IX updated.
             1515** ;   Destroys: A,A',IX,F,F'
             1516** ;
0B2D3E C5    1517** GETEXP:			PUSH    BC              ;SAVE REGISTERS
0B2D3F 47    1518** LD      B,A             ;INITIAL VALUE
0B2D40 0E    1519** LD      C,2             ;2 DIGITS MAX
0B2D41 02 
0B2D42 DD    1520** INC     IX              ;BUMP PAST 'E'
0B2D43 23 
0B2D44 CD    1521** CALL    SIGNQ
0B2D45 2E 
0B2D46 31 
0B2D47 0B 
0B2D48 08    1522** EX      AF,AF'          ;SAVE EXPONENT SIGN
0B2D49 CD    1523** GETEX1:			CALL    DIGITQ
0B2D4A 24 
0B2D4B 31 
0B2D4C 0B 
0B2D4D 38    1524** JR      C,GETEX2
0B2D4E 18 
0B2D4F 78    1525** LD      A,B             ;B=B*10
0B2D50 87    1526** ADD     A,A
0B2D51 87    1527** ADD     A,A
0B2D52 80    1528** ADD     A,B
0B2D53 87    1529** ADD     A,A
0B2D54 47    1530** LD      B,A
0B2D55 DD    1531** LD      A,(IX)          ;GET BACK DIGIT
0B2D56 7E 
0B2D57 00 
0B2D58 DD    1532** INC     IX
0B2D59 23 
0B2D5A E6    1533** AND     0FH             ;MASK UNWANTED BITS
0B2D5B 0F 
0B2D5C 80    1534** ADD     A,B             ;ADD IN DIGIT
0B2D5D 47    1535** LD      B,A
0B2D5E 0D    1536** DEC     C
0B2D5F F2    1537** JP      P,GETEX1
0B2D60 49 
0B2D61 2D 
0B2D62 0B 
0B2D63 06    1538** LD      B,100           ;FORCE OVERFLOW
0B2D64 64 
0B2D65 18    1539** JR      GETEX1
0B2D66 E2 
0B2D67 08    1540** GETEX2:			EX      AF,AF'          ;RESTORE SIGN
0B2D68 FE    1541** CP      '-'
0B2D69 2D 
0B2D6A 78    1542** LD      A,B
0B2D6B C1    1543** POP     BC              ;RESTORE
0B2D6C C0    1544** RET     NZ
0B2D6D ED    1545** NEG                     ;NEGATE EXPONENT
0B2D6E 44 
0B2D6F C9    1546** RET
             1547** ;
             1548** ;UINT: Get unsigned integer from string.
             1549** ;    Inputs: string at (IX)
             1550** ;            C = truncated digit count
             1551** ;                (initially zero)
             1552** ;            B = total digit count
             1553** ;            HLH'L' = initial value
             1554** ;   Outputs: HLH'L' = number (binary integer)
             1555** ;            A = delimiter.
             1556** ;            B, C & IX updated
             1557** ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
             1558** ;
0B2D70 DD    1559** NUMBIX:			INC     IX
0B2D71 23 
0B2D72 CD    1560** UINT:			CALL    DIGITQ
0B2D73 24 
0B2D74 31 
0B2D75 0B 
0B2D76 D8    1561** RET     C
0B2D77 04    1562** INC     B               ;INCREMENT DIGIT COUNT
0B2D78 DD    1563** INC     IX
0B2D79 23 
0B2D7A CD    1564** CALL    X10             ;*10 & COPY OLD VALUE
0B2D7B 6D 
0B2D7C 2F 
0B2D7D 0B 
0B2D7E 38    1565** JR      C,NUMB1         ;OVERFLOW
0B2D7F 15 
0B2D80 0D    1566** DEC     C               ;SEE IF TRUNCATED
0B2D81 0C    1567** INC     C
0B2D82 20    1568** JR      NZ,NUMB1        ;IMPORTANT!
0B2D83 11 
0B2D84 E6    1569** AND     0FH
0B2D85 0F 
0B2D86 D9    1570** EXX
0B2D87 06    1571** LD      B,0
0B2D88 00 
0B2D89 4F    1572** LD      C,A
0B2D8A 52    1573** ADD.S   HL,BC           ;ADD IN DIGIT
0B2D8B 09 
0B2D8C D9    1574** EXX
0B2D8D 30    1575** JR      NC,UINT
0B2D8E E3 
0B2D8F 52    1576** INC.S   HL              ;CARRY
0B2D90 23 
0B2D91 7C    1577** LD      A,H
0B2D92 B5    1578** OR      L
0B2D93 20    1579** JR      NZ,UINT
0B2D94 DD 
0B2D95 0C    1580** NUMB1:			INC     C               ;TRUNCATION COUNTER
0B2D96 CD    1581** CALL    SWAP1           ;RESTORE PREVIOUS VALUE
0B2D97 CB 
0B2D98 2E 
0B2D99 0B 
0B2D9A 18    1582** JR      UINT
0B2D9B D6 
             1583** ;
             1584** ;FIX - Fix number to specified exponent value.
             1585** ;    Inputs: HLH'L'C = +ve non-zero number (floated)
             1586** ;            A = desired exponent (A>C)
             1587** ;   Outputs: HLH'L'C = fixed number (unsigned)
             1588** ;            fraction shifted into B'C'
             1589** ;            A'F' positive if integer input
             1590** ;  Destroys: C,H,L,A',B',C',H',L',F,F'
             1591** ;
0B2D9C 08    1592** FIX:			EX      AF,AF'
0B2D9D AF    1593** XOR     A
0B2D9E 08    1594** EX      AF,AF'
0B2D9F CB    1595** SET     7,H             ;IMPLIED 1
0B2DA0 FC 
0B2DA1 CD    1596** FIX1:			CALL    DIV2
0B2DA2 D0 
0B2DA3 2E 
0B2DA4 0B 
0B2DA5 B9    1597** CP      C
0B2DA6 C8    1598** RET     Z
0B2DA7 D2    1599** JP      NC,FIX1
0B2DA8 A1 
0B2DA9 2D 
0B2DAA 0B 
0B2DAB C3    1600** JP      OFLOW
0B2DAC DF 
0B2DAD 2E 
0B2DAE 0B 
             1601** ;
             1602** ;SFIX - Convert to integer if necessary.
             1603** ;    Input: Variable-type number in HLH'L'C
             1604** ;   Output: Integer in HLH'L', C=0
             1605** ; Destroys: A,C,H,L,A',B',C',H',L',F,F'
             1606** ;
             1607** ;NEGATE - Negate HLH'L'
             1608** ;    Destroys: H,L,H',L',F
             1609** ;
0B2DAF CD    1610** FIX2:			CALL    SWAP_FP
0B2DB0 C8 
0B2DB1 2E 
0B2DB2 0B 
0B2DB3 CD    1611** CALL    SFIX_FP
0B2DB4 BB 
0B2DB5 2D 
0B2DB6 0B 
0B2DB7 CD    1612** CALL    SWAP_FP
0B2DB8 C8 
0B2DB9 2E 
0B2DBA 0B 
0B2DBB 0D    1613** SFIX_FP:			DEC     C
0B2DBC 0C    1614** INC     C
0B2DBD C8    1615** RET     Z               ;INTEGER/ZERO
0B2DBE CB    1616** BIT     7,H             ;SIGN
0B2DBF 7C 
0B2DC0 F5    1617** PUSH    AF
0B2DC1 3E    1618** LD      A,159
0B2DC2 9F 
0B2DC3 CD    1619** CALL    FIX
0B2DC4 9C 
0B2DC5 2D 
0B2DC6 0B 
0B2DC7 F1    1620** POP     AF
0B2DC8 0E    1621** LD      C,0
0B2DC9 00 
0B2DCA C8    1622** RET     Z
0B2DCB B7    1623** NEGATE:			OR      A               ;CLEAR CARRY
0B2DCC D9    1624** EXX
0B2DCD D5    1625** NEG0:			PUSH    DE
0B2DCE EB    1626** EX      DE,HL
0B2DCF 21    1627** LD      HL,0
0B2DD0 00 
0B2DD1 00 
0B2DD2 00 
0B2DD3 52    1628** SBC.S   HL,DE
0B2DD4 ED 
0B2DD5 52 
0B2DD6 D1    1629** POP     DE
0B2DD7 D9    1630** EXX
0B2DD8 D5    1631** PUSH    DE
0B2DD9 EB    1632** EX      DE,HL
0B2DDA 21    1633** LD      HL,0
0B2DDB 00 
0B2DDC 00 
0B2DDD 00 
0B2DDE 52    1634** SBC.S   HL,DE
0B2DDF ED 
0B2DE0 52 
0B2DE1 D1    1635** POP     DE
0B2DE2 C9    1636** RET
             1637** ;
             1638** ;NEG - Negate HLH'L'B'C'
             1639** ;    Also complements A (used in FADD)
             1640** ;    Destroys: A,H,L,B',C',H',L',F
             1641** ;
0B2DE3 D9    1642** NEG_:			EXX
0B2DE4 2F    1643** CPL
0B2DE5 E5    1644** PUSH    HL
0B2DE6 B7    1645** OR      A               ;CLEAR CARRY
0B2DE7 21    1646** LD      HL,0
0B2DE8 00 
0B2DE9 00 
0B2DEA 00 
0B2DEB 52    1647** SBC.S   HL,BC
0B2DEC ED 
0B2DED 42 
0B2DEE 44    1648** LD      B,H
0B2DEF 4D    1649** LD      C,L
0B2DF0 E1    1650** POP     HL
0B2DF1 18    1651** JR      NEG0
0B2DF2 DA 
             1652** ;
             1653** ;SCALE - Trig scaling.
             1654** ;MOD48 - 48-bit floating-point "modulus" (remainder).
             1655** ;   Inputs: HLH'L'C unsigned floating-point dividend
             1656** ;           DED'E'B'C'B unsigned 48-bit FP divisor
             1657** ;  Outputs: HLH'L'C floating point remainder (H7=1)
             1658** ;           E = quotient (bit 7 is sticky)
             1659** ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
             1660** ;FLO48 - Float unsigned number (48 bits)
             1661** ;    Input/output in HLH'L'B'C'C
             1662** ;   Destroys: C,H,L,B',C',H',L',F
             1663** ;
0B2DF3 3E    1664** SCALE:			LD      A,150
0B2DF4 96 
0B2DF5 B9    1665** CP      C
0B2DF6 3E    1666** LD      A,ACLOST
0B2DF7 17 
0B2DF8 DA    1667** JP      C,ERROR_FP_         ;"Accuracy lost"
0B2DF9 6E 
0B2DFA 23 
0B2DFB 0B 
0B2DFC CD    1668** CALL    PIBY4
0B2DFD 39 
0B2DFE 29 
0B2DFF 0B 
0B2E00 D9    1669** EXX
0B2E01 01    1670** LD      BC,2169H        ;3.141592653589793238
0B2E02 69 
0B2E03 21 
0B2E04 00 
0B2E05 D9    1671** EXX
0B2E06 CB    1672** MOD48:			SET     7,D             ;IMPLIED 1
0B2E07 FA 
0B2E08 CB    1673** SET     7,H
0B2E09 FC 
0B2E0A 79    1674** LD      A,C
0B2E0B 0E    1675** LD      C,0             ;INIT QUOTIENT
0B2E0C 00 
0B2E0D DD    1676** LD      IX,0
0B2E0E 21 
0B2E0F 00 
0B2E10 00 
0B2E10 00   
0B2E12 DD    1677** PUSH    IX              ;PUT ZERO ON STACK
0B2E13 E5 
0B2E14 B8    1678** CP      B
0B2E15 38    1679** JR      C,MOD485        ;DIVIDEND<DIVISOR
0B2E16 46 
0B2E17 D9    1680** MOD481:			EXX                     ;CARRY=0 HERE
0B2E18 E3    1681** EX      (SP),HL
0B2E19 52    1682** SBC.S   HL,BC
0B2E1A ED 
0B2E1B 42 
0B2E1C E3    1683** EX      (SP),HL
0B2E1D 52    1684** SBC.S   HL,DE
0B2E1E ED 
0B2E1F 52 
0B2E20 D9    1685** EXX
0B2E21 52    1686** SBC.S   HL,DE
0B2E22 ED 
0B2E23 52 
0B2E24 30    1687** JR      NC,MOD482       ;DIVIDEND>=DIVISOR
0B2E25 0C 
0B2E26 D9    1688** EXX
0B2E27 E3    1689** EX      (SP),HL
0B2E28 52    1690** ADD.S   HL,BC
0B2E29 09 
0B2E2A E3    1691** EX      (SP),HL
0B2E2B 52    1692** ADC.S   HL,DE
0B2E2C ED 
0B2E2D 5A 
0B2E2E D9    1693** EXX
0B2E2F 52    1694** ADC.S   HL,DE
0B2E30 ED 
0B2E31 5A 
0B2E32 3F    1695** MOD482:			CCF
0B2E33 CB    1696** RL      C               ;QUOTIENT
0B2E34 11 
0B2E35 30    1697** JR      NC,MOD483
0B2E36 02 
0B2E37 CB    1698** SET     7,C             ;STICKY BIT
0B2E38 F9 
0B2E39 3D    1699** MOD483:			DEC     A
0B2E3A B8    1700** CP      B
0B2E3B 38    1701** JR      C,MOD484        ;DIVIDEND<DIVISOR
0B2E3C 1F 
0B2E3D E3    1702** EX      (SP),HL
0B2E3E 52    1703** ADD.S   HL,HL           ;DIVIDEND * 2
0B2E3F 29 
0B2E40 E3    1704** EX      (SP),HL
0B2E41 D9    1705** EXX
0B2E42 52    1706** ADC.S   HL,HL
0B2E43 ED 
0B2E44 6A 
0B2E45 D9    1707** EXX
0B2E46 52    1708** ADC.S   HL,HL
0B2E47 ED 
0B2E48 6A 
0B2E49 30    1709** JR      NC,MOD481       ;AGAIN
0B2E4A CC 
0B2E4B B7    1710** OR      A
0B2E4C D9    1711** EXX
0B2E4D E3    1712** EX      (SP),HL
0B2E4E 52    1713** SBC.S   HL,BC           ;OVERFLOW, SO SUBTRACT
0B2E4F ED 
0B2E50 42 
0B2E51 E3    1714** EX      (SP),HL
0B2E52 52    1715** SBC.S   HL,DE
0B2E53 ED 
0B2E54 52 
0B2E55 D9    1716** EXX
0B2E56 52    1717** SBC.S   HL,DE
0B2E57 ED 
0B2E58 52 
0B2E59 B7    1718** OR      A
0B2E5A 18    1719** JR      MOD482
0B2E5B D6 
             1720** ;
0B2E5C 3C    1721** MOD484:			INC     A
0B2E5D 59    1722** MOD485:			LD      E,C             ;QUOTIENT
0B2E5E 4F    1723** LD      C,A             ;REMAINDER EXPONENT
0B2E5F D9    1724** EXX
0B2E60 C1    1725** POP     BC
0B2E61 D9    1726** EXX
0B2E62 CB    1727** FLO48:			BIT     7,H
0B2E63 7C 
0B2E64 C0    1728** RET     NZ
0B2E65 D9    1729** EXX
0B2E66 CB    1730** SLA     C
0B2E67 21 
0B2E68 CB    1731** RL      B
0B2E69 10 
0B2E6A 52    1732** ADC.S   HL,HL
0B2E6B ED 
0B2E6C 6A 
0B2E6D D9    1733** EXX
0B2E6E 52    1734** ADC.S   HL,HL
0B2E6F ED 
0B2E70 6A 
0B2E71 0D    1735** DEC     C
0B2E72 C2    1736** JP      NZ,FLO48
0B2E73 62 
0B2E74 2E 
0B2E75 0B 
0B2E76 C9    1737** RET
             1738** ;
             1739** ;Float unsigned number
             1740** ;    Input/output in HLH'L'C
             1741** ;   Destroys: C,H,L,H',L',F
             1742** ;
0B2E77 CB    1743** FLOAT_:			BIT     7,H
0B2E78 7C 
0B2E79 C0    1744** RET     NZ
0B2E7A D9    1745** EXX                     ;SAME AS "X2"
0B2E7B 52    1746** ADD.S   HL,HL           ;TIME-CRITICAL
0B2E7C 29 
0B2E7D D9    1747** EXX                     ;REGION
0B2E7E 52    1748** ADC.S   HL,HL           ;(BENCHMARKS)
0B2E7F ED 
0B2E80 6A 
0B2E81 0D    1749** DEC     C
0B2E82 C2    1750** JP      NZ,FLOAT_
0B2E83 77 
0B2E84 2E 
0B2E85 0B 
0B2E86 C9    1751** RET
             1752** ;
             1753** ;SFLOAT - Convert to floating-point if necessary.
             1754** ;    Input: Variable-type number in HLH'L'C
             1755** ;    Output: Floating-point in HLH'L'C
             1756** ;    Destroys: A,C,H,L,H',L',F
             1757** ;
0B2E87 08    1758** FLOATA:			EX      AF,AF'
             1759** ; ADD     A,(RTABLE-DTABLE)/3
0B2E88 C6    1760** ADD     A,RTABLE-DTABLE/3 ; ez80asm doesn't do nested expressions
0B2E89 2A 
0B2E8A 08    1761** EX      AF,AF'
0B2E8B CD    1762** FLOAT2:			CALL    SWAP_FP
0B2E8C C8 
0B2E8D 2E 
0B2E8E 0B 
0B2E8F CD    1763** CALL    SFLOAT_FP
0B2E90 97 
0B2E91 2E 
0B2E92 0B 
0B2E93 CD    1764** CALL    SWAP_FP
0B2E94 C8 
0B2E95 2E 
0B2E96 0B 
0B2E97 0D    1765** SFLOAT_FP:			DEC     C
0B2E98 0C    1766** INC     C
0B2E99 C0    1767** RET     NZ              ;ALREADY FLOATING-POINT
0B2E9A CD    1768** CALL    TEST_FP
0B2E9B F0 
0B2E9C 2E 
0B2E9D 0B 
0B2E9E C8    1769** RET     Z               ;ZERO
0B2E9F 7C    1770** LD      A,H
0B2EA0 B7    1771** OR      A
0B2EA1 FC    1772** CALL    M,NEGATE
0B2EA2 CB 
0B2EA3 2D 
0B2EA4 0B 
0B2EA5 0E    1773** LD      C,159
0B2EA6 9F 
0B2EA7 CD    1774** CALL    FLOAT_
0B2EA8 77 
0B2EA9 2E 
0B2EAA 0B 
0B2EAB B7    1775** OR      A
0B2EAC F8    1776** RET     M               ;NEGATIVE
0B2EAD CB    1777** RES     7,H
0B2EAE BC 
0B2EAF C9    1778** RET
             1779** ;
             1780** ;ROUND UP
             1781** ;Return with carry set if 32-bit overflow
             1782** ;   Destroys: H,L,B',C',H',L',F
             1783** ;
0B2EB0 D9    1784** ADD1_FP:			EXX
0B2EB1 01    1785** LD      BC,1
0B2EB2 01 
0B2EB3 00 
0B2EB4 00 
0B2EB5 52    1786** ADD.S   HL,BC
0B2EB6 09 
0B2EB7 D9    1787** EXX
0B2EB8 D0    1788** RET     NC
0B2EB9 C5    1789** PUSH    BC
0B2EBA 01    1790** LD      BC,1
0B2EBB 01 
0B2EBC 00 
0B2EBD 00 
0B2EBE 52    1791** ADD.S   HL,BC
0B2EBF 09 
0B2EC0 C1    1792** POP     BC
0B2EC1 C9    1793** RET
             1794** ;
             1795** ;ODD - Add one if even, leave alone if odd.
             1796** ; (Used to perform unbiassed rounding, i.e.
             1797** ;  number is rounded up half the time)
             1798** ;    Destroys: L',F (carry cleared)
             1799** ;
0B2EC2 B7    1800** ODD:			OR      A               ;CLEAR CARRY
0B2EC3 D9    1801** EXX
0B2EC4 CB    1802** SET     0,L             ;MAKE ODD
0B2EC5 C5 
0B2EC6 D9    1803** EXX
0B2EC7 C9    1804** RET
             1805** ;
             1806** ;SWAP_FP - Swap arguments.
             1807** ;    Exchanges DE,HL D'E',H'L' and B,C
             1808** ;    Destroys: A,B,C,D,E,H,L,D',E',H',L'
             1809** ;SWAP1 - Swap DEHL with D'E'H'L'
             1810** ;    Destroys: D,E,H,L,D',E',H',L'
             1811** ;
0B2EC8 79    1812** SWAP_FP:			LD      A,C
0B2EC9 48    1813** LD      C,B
0B2ECA 47    1814** LD      B,A
0B2ECB EB    1815** SWAP1:			EX      DE,HL
0B2ECC D9    1816** EXX
0B2ECD EB    1817** EX      DE,HL
0B2ECE D9    1818** EXX
0B2ECF C9    1819** RET
             1820** ;
             1821** ; DIV2 - destroys C,H,L,A',B',C',H',L',F,F'
             1822** ; INCC - destroys C,F
             1823** ; OFLOW
             1824** ;
0B2ED0 CD    1825** DIV2:			CALL    D2
0B2ED1 89 
0B2ED2 2F 
0B2ED3 0B 
0B2ED4 D9    1826** EXX
0B2ED5 CB    1827** RR      B
0B2ED6 18 
0B2ED7 CB    1828** RR      C
0B2ED8 19 
0B2ED9 08    1829** EX      AF,AF'
0B2EDA B0    1830** OR      B
0B2EDB 08    1831** EX      AF,AF'
0B2EDC D9    1832** EXX
0B2EDD 0C    1833** INCC:			INC     C
0B2EDE C0    1834** RET     NZ
0B2EDF 3E    1835** OFLOW:			LD      A,TOOBIG_FP
0B2EE0 14 
0B2EE1 C3    1836** JP      ERROR_FP_           ;"Too big"
0B2EE2 6E 
0B2EE3 23 
0B2EE4 0B 
             1837** ;
             1838** ; FTEST - Test for zero & sign
             1839** ;     Output: A=0 if zero, A=&40 if +ve, A=&C0 if -ve
             1840** ;
0B2EE5 CD    1841** FTEST_FP:			CALL    TEST_FP
0B2EE6 F0 
0B2EE7 2E 
0B2EE8 0B 
0B2EE9 C8    1842** RET     Z
0B2EEA 7C    1843** LD      A,H
0B2EEB E6    1844** AND     10000000B
0B2EEC 80 
0B2EED F6    1845** OR      01000000B
0B2EEE 40 
0B2EEF C9    1846** RET
             1847** ;
             1848** ; TEST_FP - Test HLH'L' for zero.
             1849** ;     Output: Z-flag set & A=0 if HLH'L'=0
             1850** ;     Destroys: A,F
             1851** ;
0B2EF0 7C    1852** TEST_FP:			LD      A,H
0B2EF1 B5    1853** OR      L
0B2EF2 D9    1854** EXX
0B2EF3 B4    1855** OR      H
0B2EF4 B5    1856** OR      L
0B2EF5 D9    1857** EXX
0B2EF6 C9    1858** RET
             1859** ;
             1860** ; FCOMP - Compare two numbers
             1861** ;     Output: A=0 if equal, A=&40 if L>R, A=&C0 if L<R
             1862** ;
0B2EF7 78    1863** FCOMP_FP:			LD      A,B
0B2EF8 B1    1864** OR      C               ;Both integer?
0B2EF9 20    1865** JR      NZ,FCOMP1
0B2EFA 0B 
0B2EFB CD    1866** CALL    ICP
0B2EFC 10 
0B2EFD 2F 
0B2EFE 0B 
0B2EFF 3E    1867** FCOMP0:			LD      A,0
0B2F00 00 
0B2F01 C8    1868** RET     Z               ;Equal
0B2F02 3E    1869** LD      A,80H
0B2F03 80 
0B2F04 1F    1870** RRA
0B2F05 C9    1871** RET
             1872** ;
0B2F06 CD    1873** FCOMP1:			CALL    FLOAT2          ;Float both
0B2F07 8B 
0B2F08 2E 
0B2F09 0B 
0B2F0A CD    1874** CALL    FCP
0B2F0B 1E 
0B2F0C 2F 
0B2F0D 0B 
0B2F0E 18    1875** JR      FCOMP0
0B2F0F EF 
             1876** ;
             1877** ; Integer and floating point compare.
             1878** ; Sets carry & zero flags according to HLH'L'C-DED'E'B
             1879** ; Result pre-set to FALSE
             1880** ; ICP1, FCP1 destroy A,F
             1881** ;
             1882** ; ZERO - Return zero.
             1883** ;  Destroys: A,C,H,L,H',L'
             1884** ;
0B2F10 CD    1885** ICP:			CALL    ICP1
0B2F11 43 
0B2F12 2F 
0B2F13 0B 
0B2F14 3E    1886** ZERO_FP:			LD      A,0
0B2F15 00 
0B2F16 D9    1887** EXX
0B2F17 67    1888** LD      H,A
0B2F18 6F    1889** LD      L,A
0B2F19 D9    1890** EXX
0B2F1A 67    1891** LD      H,A
0B2F1B 6F    1892** LD      L,A
0B2F1C 4F    1893** LD      C,A
0B2F1D C9    1894** RET
             1895** ;
0B2F1E CD    1896** FCP:			CALL    FCP1
0B2F1F 35 
0B2F20 2F 
0B2F21 0B 
0B2F22 18    1897** JR      ZERO_FP            ;PRESET FALSE
0B2F23 F0 
             1898** ;
0B2F24 79    1899** FCP0:			LD      A,C
0B2F25 B8    1900** CP      B               ;COMPARE EXPONENTS
0B2F26 C0    1901** RET     NZ
             1902** ICP0:
0B2F27 52    1903** SBC.S   HL,DE           ;COMP MANTISSA MSB
0B2F28 ED 
0B2F29 52 
0B2F2A 52    1904** ADD.S   HL,DE
0B2F2B 19 
0B2F2C C0    1905** RET     NZ
0B2F2D D9    1906** EXX
0B2F2E 52    1907** SBC.S   HL,DE           ;COMP MANTISSA LSB
0B2F2F ED 
0B2F30 52 
0B2F31 52    1908** ADD.S   HL,DE
0B2F32 19 
0B2F33 D9    1909** EXX
0B2F34 C9    1910** RET
             1911** ;
0B2F35 7C    1912** FCP1:			LD      A,H
0B2F36 AA    1913** XOR     D
0B2F37 7C    1914** LD      A,H
0B2F38 17    1915** RLA
0B2F39 F8    1916** RET     M
0B2F3A 30    1917** JR      NC,FCP0
0B2F3B E8 
0B2F3C CD    1918** CALL    FCP0
0B2F3D 24 
0B2F3E 2F 
0B2F3F 0B 
0B2F40 C8    1919** RET     Z               ;** V0.1 BUG FIX
0B2F41 3F    1920** CCF
0B2F42 C9    1921** RET
             1922** ;
0B2F43 7C    1923** ICP1:			LD      A,H
0B2F44 AA    1924** XOR     D
0B2F45 F2    1925** JP      P,ICP0
0B2F46 27 
0B2F47 2F 
0B2F48 0B 
0B2F49 7C    1926** LD      A,H
0B2F4A 17    1927** RLA
0B2F4B C9    1928** RET
             1929** ;
             1930** ; ADD - Integer add.
             1931** ; Carry, sign & zero flags valid on exit
             1932** ;     Destroys: H,L,H',L',F
             1933** ;
0B2F4C 05    1934** X10B:			DEC     B
0B2F4D 0C    1935** INC     C
0B2F4E CD    1936** X5:			CALL    COPY0
0B2F4F 95 
0B2F50 2F 
0B2F51 0B 
0B2F52 CD    1937** CALL    D2C
0B2F53 88 
0B2F54 2F 
0B2F55 0B 
0B2F56 CD    1938** CALL    D2C
0B2F57 88 
0B2F58 2F 
0B2F59 0B 
0B2F5A 08    1939** EX      AF,AF'          ;SAVE CARRY
0B2F5B D9    1940** ADD_:			EXX
0B2F5C 52    1941** ADD.S   HL,DE
0B2F5D 19 
0B2F5E D9    1942** EXX
0B2F5F 52    1943** ADC.S   HL,DE
0B2F60 ED 
0B2F61 5A 
0B2F62 C9    1944** RET
             1945** ;
             1946** ; SUB - Integer subtract.
             1947** ; Carry, sign & zero flags valid on exit
             1948** ;     Destroys: H,L,H',L',F
             1949** ;
0B2F63 D9    1950** SUB_:			EXX
0B2F64 B7    1951** OR      A
0B2F65 52    1952** SBC.S   HL,DE
0B2F66 ED 
0B2F67 52 
0B2F68 D9    1953** EXX
0B2F69 52    1954** SBC.S   HL,DE
0B2F6A ED 
0B2F6B 52 
0B2F6C C9    1955** RET
             1956** ;
             1957** ; X10 - unsigned integer * 10
             1958** ;    Inputs: HLH'L' initial value
             1959** ;   Outputs: DED'E' = initial HLH'L'
             1960** ;            Carry bit set if overflow
             1961** ;            If carry not set HLH'L'=result
             1962** ;  Destroys: D,E,H,L,D',E',H',L',F
             1963** ; X2 - Multiply HLH'L' by 2 as 32-bit integer.
             1964** ;     Carry set if MSB=1 before shift.
             1965** ;     Sign set if MSB=1 after shift.
             1966** ;     Destroys: H,L,H',L',F
             1967** ;
0B2F6D CD    1968** X10:			CALL    COPY0           ;DED'E'=HLH'L'
0B2F6E 95 
0B2F6F 2F 
0B2F70 0B 
0B2F71 CD    1969** CALL    X2
0B2F72 80 
0B2F73 2F 
0B2F74 0B 
0B2F75 D8    1970** RET     C               ;TOO BIG
0B2F76 CD    1971** CALL    X2
0B2F77 80 
0B2F78 2F 
0B2F79 0B 
0B2F7A D8    1972** RET     C
0B2F7B CD    1973** CALL    ADD_
0B2F7C 5B 
0B2F7D 2F 
0B2F7E 0B 
0B2F7F D8    1974** RET     C
0B2F80 D9    1975** X2:			EXX
0B2F81 52    1976** ADD.S   HL,HL
0B2F82 29 
0B2F83 D9    1977** EXX
0B2F84 52    1978** ADC.S   HL,HL
0B2F85 ED 
0B2F86 6A 
0B2F87 C9    1979** RET
             1980** ;
             1981** ; D2 - Divide HLH'L' by 2 as 32-bit integer.
             1982** ;     Carry set if LSB=1 before shift.
             1983** ;     Destroys: H,L,H',L',F
             1984** ;
0B2F88 0C    1985** D2C:			INC     C
0B2F89 CB    1986** D2:			SRL     H
0B2F8A 3C 
0B2F8B CB    1987** RR      L
0B2F8C 1D 
0B2F8D D9    1988** EXX
0B2F8E CB    1989** RR      H
0B2F8F 1C 
0B2F90 CB    1990** RR      L
0B2F91 1D 
0B2F92 D9    1991** EXX
0B2F93 C9    1992** RET
             1993** ;
             1994** ; COPY - COPY HLH'L'C INTO DED'E'B
             1995** ;   Destroys: B,C,D,E,H,L,D',E',H',L'
             1996** ;
0B2F94 41    1997** COPY_:			LD      B,C
0B2F95 54    1998** COPY0:			LD      D,H
0B2F96 5D    1999** LD      E,L
0B2F97 D9    2000** EXX
0B2F98 54    2001** LD      D,H
0B2F99 5D    2002** LD      E,L
0B2F9A D9    2003** EXX
0B2F9B C9    2004** RET
             2005** ;
             2006** ; SQUARE - PUSH X*X
             2007** ; PUSH5 - PUSH HLH'L'C ONTO STACK.
             2008** ;   Destroys: SP,IX
             2009** ;
0B2F9C CD    2010** SQUARE:			CALL    COPY_
0B2F9D 94 
0B2F9E 2F 
0B2F9F 0B 
0B2FA0 CD    2011** CALL    FMUL
0B2FA1 FF 
0B2FA2 25 
0B2FA3 0B 
0B2FA4 DD    2012** PUSH5:			POP     IX              ;RETURN ADDRESS
0B2FA5 E1 
0B2FA6 C5    2013** PUSH    BC
0B2FA7 E5    2014** PUSH    HL
0B2FA8 D9    2015** EXX
0B2FA9 E5    2016** PUSH    HL
0B2FAA D9    2017** EXX
0B2FAB DD    2018** JP      (IX)            ;"RETURN"
0B2FAC E9 
             2019** ;
             2020** ; POP5 - POP DED'E'B OFF STACK.
             2021** ;   Destroys: A,B,D,E,D',E',SP,IX
             2022** ;
0B2FAD DD    2023** POP5:			POP     IX              ;RETURN ADDRESS
0B2FAE E1 
0B2FAF D9    2024** EXX
0B2FB0 D1    2025** POP     DE
0B2FB1 D9    2026** EXX
0B2FB2 D1    2027** POP     DE
0B2FB3 79    2028** LD      A,C
0B2FB4 C1    2029** POP     BC
0B2FB5 41    2030** LD      B,C
0B2FB6 4F    2031** LD      C,A
0B2FB7 DD    2032** JP      (IX)            ;"RETURN"
0B2FB8 E9 
             2033** ;
             2034** ; RATIO - Calculate (X-1)/(X+1)
             2035** ;     Inputs: X in HLH'L'C
             2036** ;    Outputs: (X-1)/(X+1) in HLH'L'C
             2037** ;   Destroys: Everything except IY,SP,I
             2038** ;
0B2FB9 CD    2039** RATIO:			CALL    PUSH5           ;SAVE X
0B2FBA A4 
0B2FBB 2F 
0B2FBC 0B 
0B2FBD CD    2040** CALL    DONE
0B2FBE 2C 
0B2FBF 29 
0B2FC0 0B 
0B2FC1 CD    2041** CALL    FADD
0B2FC2 ED 
0B2FC3 24 
0B2FC4 0B 
0B2FC5 CD    2042** CALL    POP5            ;RESTORE X
0B2FC6 AD 
0B2FC7 2F 
0B2FC8 0B 
0B2FC9 CD    2043** CALL    PUSH5           ;SAVE X+1
0B2FCA A4 
0B2FCB 2F 
0B2FCC 0B 
0B2FCD CD    2044** CALL    SWAP_FP
0B2FCE C8 
0B2FCF 2E 
0B2FD0 0B 
0B2FD1 CD    2045** CALL    DONE
0B2FD2 2C 
0B2FD3 29 
0B2FD4 0B 
0B2FD5 CD    2046** CALL    FSUB
0B2FD6 D4 
0B2FD7 24 
0B2FD8 0B 
0B2FD9 CD    2047** CALL    POP5            ;RESTORE X+1
0B2FDA AD 
0B2FDB 2F 
0B2FDC 0B 
0B2FDD C3    2048** JP      FDIV
0B2FDE 56 
0B2FDF 25 
0B2FE0 0B 
             2049** ;
             2050** ; POLY - Evaluate a polynomial.
             2051** ;     Inputs: X in HLH'L'C and also stored at (SP+2)
             2052** ;             Polynomial coefficients follow call.
             2053** ;    Outputs: Result in HLH'L'C
             2054** ;   Destroys: Everything except IY,SP,I
             2055** ; Routine terminates on finding a coefficient >=1.
             2056** ; Note: The last coefficient is EXECUTED on return
             2057** ;       so must contain only innocuous bytes!
             2058** ;
0B2FE1 DD    2059** POLY:			LD      IX, 3				; Advance the SP to the return address
0B2FE2 21 
0B2FE3 03 
0B2FE4 00 
0B2FE4 00   
0B2FE6 DD    2060** ADD     IX, SP
0B2FE7 39 
0B2FE8 DD    2061** EX      (SP), IX			; IX: Points to the inline list of coefficients
0B2FE9 E3 
             2062** ;
0B2FEA CD    2063** CALL    DLOAD5          		; Load the first coefficient from (IX)
0B2FEB C0 
0B2FEC 2C 
0B2FED 0B 
0B2FEE CD    2064** POLY1:			CALL    FMUL
0B2FEF FF 
0B2FF0 25 
0B2FF1 0B 
0B2FF2 11    2065** LD      DE, 5				; Skip to the next coefficient
0B2FF3 05 
0B2FF4 00 
0B2FF5 00 
0B2FF6 DD    2066** ADD     IX, DE
0B2FF7 19 
0B2FF8 CD    2067** CALL    DLOAD5          		; Load the second coefficient from (IX)
0B2FF9 C0 
0B2FFA 2C 
0B2FFB 0B 
0B2FFC DD    2068** EX      (SP), IX			; Restore the SP just in case we need to return
0B2FFD E3 
0B2FFE 04    2069** INC     B
0B2FFF 05    2070** DEC     B               		; Test B for end byte (80h)
0B3000 FA    2071** JP      M,FADD				; Yes, so add and return
0B3001 ED 
0B3002 24 
0B3003 0B 
0B3004 CD    2072** CALL    FADD				; No, so add
0B3005 ED 
0B3006 24 
0B3007 0B 
0B3008 CD    2073** CALL    DLOAD5_SPL			; Load X from SP
0B3009 D2 
0B300A 2C 
0B300B 0B 
0B300C DD    2074** EX      (SP), IX			; IX: Points to the inline list of coefficients
0B300D E3 
0B300E 18    2075** JR      POLY1				; And loop
0B300F DE 
             2076** ;
             2077** ; POWR10 - Calculate power of ten.
             2078** ;     Inputs: A=power of 10 required (A<128)
             2079** ;             A=binary exponent to be exceeded (A>=128)
             2080** ;    Outputs: DED'E'B = result
             2081** ;             A = actual power of ten returned
             2082** ;   Destroys: A,B,D,E,A',D',E',F,F'
             2083** ;
0B3010 3C    2084** POWR10:			INC     A
0B3011 08    2085** EX      AF,AF'
0B3012 E5    2086** PUSH    HL
0B3013 D9    2087** EXX
0B3014 E5    2088** PUSH    HL
0B3015 D9    2089** EXX
0B3016 CD    2090** CALL    DONE
0B3017 2C 
0B3018 29 
0B3019 0B 
0B301A CD    2091** CALL    SWAP_FP
0B301B C8 
0B301C 2E 
0B301D 0B 
0B301E AF    2092** XOR     A
0B301F 08    2093** POWR11:			EX      AF,AF'
0B3020 3D    2094** DEC     A
0B3021 28    2095** JR      Z,POWR14        ;EXIT TYPE 1
0B3022 26 
0B3023 F2    2096** JP      P,POWR13
0B3024 2B 
0B3025 30 
0B3026 0B 
0B3027 B9    2097** CP      C
0B3028 38    2098** JR      C,POWR14        ;EXIT TYPE 2
0B3029 1F 
0B302A 3C    2099** INC     A
0B302B 08    2100** POWR13:			EX      AF,AF'
0B302C 3C    2101** INC     A
0B302D CB    2102** SET     7,H
0B302E FC 
0B302F CD    2103** CALL    X5
0B3030 4E 
0B3031 2F 
0B3032 0B 
0B3033 30    2104** JR      NC,POWR12
0B3034 06 
0B3035 08    2105** EX      AF,AF'
0B3036 CD    2106** CALL    D2C
0B3037 88 
0B3038 2F 
0B3039 0B 
0B303A 08    2107** EX      AF,AF'
0B303B 08    2108** POWR12:			EX      AF,AF'
0B303C DC    2109** CALL    C,ADD1_FP          ;ROUND UP
0B303D B0 
0B303E 2E 
0B303F 0B 
0B3040 0C    2110** INC     C
0B3041 FA    2111** JP      M,POWR11
0B3042 1F 
0B3043 30 
0B3044 0B 
0B3045 C3    2112** JP      OFLOW
0B3046 DF 
0B3047 2E 
0B3048 0B 
0B3049 CD    2113** POWR14:			CALL    SWAP_FP
0B304A C8 
0B304B 2E 
0B304C 0B 
0B304D CB    2114** RES     7,D
0B304E BA 
0B304F D9    2115** EXX
0B3050 E1    2116** POP     HL
0B3051 D9    2117** EXX
0B3052 E1    2118** POP     HL
0B3053 08    2119** EX      AF,AF'
0B3054 C9    2120** RET
             2121** ;
             2122** ; DIVA, DIVB - DIVISION PRIMITIVE.
             2123** ;     Function: D'E'DE = H'L'HLD'E'DE / B'C'BC
             2124** ;               Remainder in H'L'HL
             2125** ;     Inputs: A = loop counter (normally -32)
             2126** ;     Destroys: A,D,E,H,L,D',E',H',L',F
             2127** ;
0B3055 B7    2128** DIVA:			OR      A               ;CLEAR CARRY
             2129** DIV0:
0B3056 52    2130** SBC.S   HL,BC           ;DIVIDEND-DIVISOR
0B3057 ED 
0B3058 42 
0B3059 D9    2131** EXX
0B305A 52    2132** SBC.S   HL,BC
0B305B ED 
0B305C 42 
0B305D D9    2133** EXX
0B305E 30    2134** JR      NC,DIV1
0B305F 07 
0B3060 52    2135** ADD.S   HL,BC           ;DIVIDEND+DIVISOR
0B3061 09 
0B3062 D9    2136** EXX
0B3063 52    2137** ADC.S   HL,BC
0B3064 ED 
0B3065 4A 
0B3066 D9    2138** EXX
0B3067 3F    2139** DIV1:			CCF
0B3068 CB    2140** DIVC:			RL      E               ;SHIFT RESULT INTO DE
0B3069 13 
0B306A CB    2141** RL      D
0B306B 12 
0B306C D9    2142** EXX
0B306D CB    2143** RL      E
0B306E 13 
0B306F CB    2144** RL      D
0B3070 12 
0B3071 D9    2145** EXX
0B3072 3C    2146** INC     A
0B3073 F0    2147** RET     P
             2148** DIVB:
0B3074 52    2149** ADC.S   HL,HL           ;DIVIDEND*2
0B3075 ED 
0B3076 6A 
0B3077 D9    2150** EXX
0B3078 52    2151** ADC.S   HL,HL
0B3079 ED 
0B307A 6A 
0B307B D9    2152** EXX
0B307C 30    2153** JR      NC,DIV0
0B307D D8 
0B307E B7    2154** OR      A
0B307F 52    2155** SBC.S   HL,BC           ;DIVIDEND-DIVISOR
0B3080 ED 
0B3081 42 
0B3082 D9    2156** EXX
0B3083 52    2157** SBC.S   HL,BC
0B3084 ED 
0B3085 42 
0B3086 D9    2158** EXX
0B3087 37    2159** SCF
0B3088 C3    2160** JP      DIVC
0B3089 68 
0B308A 30 
0B308B 0B 
             2161** ;
             2162** ;MULA, MULB - MULTIPLICATION PRIMITIVE.
             2163** ;    Function: H'L'HLD'E'DE = B'C'BC * D'E'DE
             2164** ;    Inputs: A = loop counter (usually -32)
             2165** ;            H'L'HL = 0
             2166** ;    Destroys: D,E,H,L,D',E',H',L',A,F
             2167** ;
0B308C B7    2168** MULA:			OR      A               ;CLEAR CARRY
0B308D D9    2169** MUL0:			EXX
0B308E CB    2170** RR      D               ;MULTIPLIER/2
0B308F 1A 
0B3090 CB    2171** RR      E
0B3091 1B 
0B3092 D9    2172** EXX
0B3093 CB    2173** RR      D
0B3094 1A 
0B3095 CB    2174** RR      E
0B3096 1B 
0B3097 30    2175** JR      NC,MUL1
0B3098 07 
0B3099 52    2176** ADD.S   HL,BC           ;ADD IN MULTIPLICAND
0B309A 09 
0B309B D9    2177** EXX
0B309C 52    2178** ADC.S   HL,BC
0B309D ED 
0B309E 4A 
0B309F D9    2179** EXX
0B30A0 3C    2180** MUL1:			INC     A
0B30A1 F0    2181** RET     P
0B30A2 D9    2182** MULB:			EXX
0B30A3 CB    2183** RR      H               ;PRODUCT/2
0B30A4 1C 
0B30A5 CB    2184** RR      L
0B30A6 1D 
0B30A7 D9    2185** EXX
0B30A8 CB    2186** RR      H
0B30A9 1C 
0B30AA CB    2187** RR      L
0B30AB 1D 
0B30AC C3    2188** JP      MUL0
0B30AD 8D 
0B30AE 30 
0B30AF 0B 
             2189** ;
             2190** ; SQRA, SQRB - SQUARE ROOT PRIMITIVES
             2191** ;     Function: B'C'BC = SQR (D'E'DE)
             2192** ;     Inputs: A = loop counter (normally -31)
             2193** ;             B'C'BCH'L'HL initialised to 0
             2194** ;   Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',F
             2195** ;
             2196** SQR1:
0B30B0 52    2197** SBC.S   HL,BC
0B30B1 ED 
0B30B2 42 
0B30B3 D9    2198** EXX
0B30B4 52    2199** SBC.S   HL,BC
0B30B5 ED 
0B30B6 42 
0B30B7 D9    2200** EXX
0B30B8 0C    2201** INC     C
0B30B9 30    2202** JR      NC,SQR2
0B30BA 09 
0B30BB 0D    2203** DEC     C
0B30BC 52    2204** ADD.S   HL,BC
0B30BD 09 
0B30BE D9    2205** EXX
0B30BF 52    2206** ADC.S   HL,BC
0B30C0 ED 
0B30C1 4A 
0B30C2 D9    2207** EXX
0B30C3 0D    2208** DEC     C
0B30C4 3C    2209** SQR2:			INC     A
0B30C5 F0    2210** RET     P
0B30C6 CB    2211** SQRA:			SLA     C
0B30C7 21 
0B30C8 CB    2212** RL      B
0B30C9 10 
0B30CA D9    2213** EXX
0B30CB CB    2214** RL      C
0B30CC 11 
0B30CD CB    2215** RL      B
0B30CE 10 
0B30CF D9    2216** EXX
0B30D0 0C    2217** INC     C
0B30D1 CB    2218** SLA     E
0B30D2 23 
0B30D3 CB    2219** RL      D
0B30D4 12 
0B30D5 D9    2220** EXX
0B30D6 CB    2221** RL      E
0B30D7 13 
0B30D8 CB    2222** RL      D
0B30D9 12 
0B30DA D9    2223** EXX
0B30DB 52    2224** ADC.S   HL,HL
0B30DC ED 
0B30DD 6A 
0B30DE D9    2225** EXX
0B30DF 52    2226** ADC.S   HL,HL
0B30E0 ED 
0B30E1 6A 
0B30E2 D9    2227** EXX
0B30E3 CB    2228** SLA     E
0B30E4 23 
0B30E5 CB    2229** RL      D
0B30E6 12 
0B30E7 D9    2230** EXX
0B30E8 CB    2231** RL      E
0B30E9 13 
0B30EA CB    2232** RL      D
0B30EB 12 
0B30EC D9    2233** EXX
0B30ED 52    2234** ADC.S   HL,HL
0B30EE ED 
0B30EF 6A 
0B30F0 D9    2235** EXX
0B30F1 52    2236** ADC.S   HL,HL
0B30F2 ED 
0B30F3 6A 
0B30F4 D9    2237** EXX
0B30F5 D2    2238** JP      NC,SQR1
0B30F6 B0 
0B30F7 30 
0B30F8 0B 
0B30F9 B7    2239** SQR3:			OR      A
0B30FA 52    2240** SBC.S   HL,BC
0B30FB ED 
0B30FC 42 
0B30FD D9    2241** EXX
0B30FE 52    2242** SBC.S   HL,BC
0B30FF ED 
0B3100 42 
0B3101 D9    2243** EXX
0B3102 0C    2244** INC     C
0B3103 C3    2245** JP      SQR2
0B3104 C4 
0B3105 30 
0B3106 0B 
             2246** ;
             2247** SQRB:
0B3107 52    2248** ADD.S   HL,HL
0B3108 29 
0B3109 D9    2249** EXX
0B310A 52    2250** ADC.S   HL,HL
0B310B ED 
0B310C 6A 
0B310D D9    2251** EXX
0B310E 38    2252** JR      C,SQR3
0B310F E9 
0B3110 3C    2253** INC     A
0B3111 0C    2254** INC     C
0B3112 52    2255** SBC.S   HL,BC
0B3113 ED 
0B3114 42 
0B3115 D9    2256** EXX
0B3116 52    2257** SBC.S   HL,BC
0B3117 ED 
0B3118 42 
0B3119 D9    2258** EXX
0B311A D0    2259** RET     NC
0B311B 52    2260** ADD.S   HL,BC
0B311C 09 
0B311D D9    2261** EXX
0B311E 52    2262** ADC.S   HL,BC
0B311F ED 
0B3120 4A 
0B3121 D9    2263** EXX
0B3122 0D    2264** DEC     C
0B3123 C9    2265** RET
             2266** ;
0B3124 DD    2267** DIGITQ:			LD      A,(IX)
0B3125 7E 
0B3126 00 
0B3127 FE    2268** CP      '9'+1
0B3128 3A 
0B3129 3F    2269** CCF
0B312A D8    2270** RET     C
0B312B FE    2271** CP      '0'
0B312C 30 
0B312D C9    2272** RET
             2273** ;
0B312E DD    2274** SIGNQ:			LD      A,(IX)
0B312F 7E 
0B3130 00 
0B3131 DD    2275** INC     IX
0B3132 23 
0B3133 FE    2276** CP      ' '
0B3134 20 
0B3135 28    2277** JR      Z,SIGNQ
0B3136 F7 
0B3137 FE    2278** CP      '+'
0B3138 2B 
0B3139 C8    2279** RET     Z
0B313A FE    2280** CP      '-'
0B313B 2D 
0B313C C8    2281** RET     Z
0B313D DD    2282** DEC     IX
0B313E 2B 
0B313F C9    2283** RET
              0008* include "basic/gpio.asm"
             0001** ;
             0002** ; Title:	BBC Basic for AGON - GPIO functions
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	12/05/2023
             0006** ;
             0007** ; Modinfo:
             0008** 
             0009** ; INCLUDE	"macros.inc"
             0010** ; INCLUDE	"equs.inc"
             0011** 
             0012** ; .ASSUME	ADL = 1
             0013** 
             0014** ; SEGMENT CODE
             0015** 
             0016** ; XDEF	GPIOB_SETMODE
             0017** 
             0018** ; XREF	SWITCH_A
             0019** 
             0020** ;  A: Mode
             0021** ;  B: Pins
             0022** ;
0B3140 CD    0023** GPIOB_SETMODE:		CALL	SWITCH_A
0B3141 E5 
0B3142 40 
0B3143 0B 
0B3144 58    0024** DW	GPIOB_M0	; Output
0B3145 31 
0B3146 7D    0025** DW	GPIOB_M1	; Input
0B3147 31 
0B3148 9D    0026** DW	GPIOB_M2	; Open Drain IO
0B3149 31 
0B314A BD    0027** DW	GPIOB_M3	; Open Source IO
0B314B 31 
0B314C D8    0028** DW	GPIOB_M4	; Interrupt, Dual Edge
0B314D 31 
0B314E 04    0029** DW	GPIOB_M5	; Alt Function
0B314F 32 
0B3150 1F    0030** DW	GPIOB_M6	; Interrupt, Active Low
0B3151 32 
0B3152 46    0031** DW	GPIOB_M7	; Interrupt, Active High
0B3153 32 
0B3154 68    0032** DW	GPIOB_M8	; Interrupt, Falling Edge
0B3155 32 
0B3156 8A    0033** DW	GPIOB_M9	; Interrupt, Rising Edge
0B3157 32 
             0034** 
             0035** ; Output
             0036** ;
             0037** GPIOB_M0:		RES_GPIO PB_DDR,  B
0B3158 C5   0001**M PUSH	BC
0B3159 78   0002**M LD	A, val
0B315A 2F   0003**M CPL
0B315B 4F   0004**M LD	C, A
0B315C ED   0005**M IN0	A, (reg)
0B315D 38 
0B315E 9B 
0B315F A1   0006**M AND	C
0B3160 ED   0007**M OUT0	(reg), A
0B3161 39 
0B3162 9B 
0B3163 C1   0008**M POP	BC
             0038** RES_GPIO PB_ALT1, B
0B3164 C5   0001**M PUSH	BC
0B3165 78   0002**M LD	A, val
0B3166 2F   0003**M CPL
0B3167 4F   0004**M LD	C, A
0B3168 ED   0005**M IN0	A, (reg)
0B3169 38 
0B316A 9C 
0B316B A1   0006**M AND	C
0B316C ED   0007**M OUT0	(reg), A
0B316D 39 
0B316E 9C 
0B316F C1   0008**M POP	BC
             0039** RES_GPIO PB_ALT2, B
0B3170 C5   0001**M PUSH	BC
0B3171 78   0002**M LD	A, val
0B3172 2F   0003**M CPL
0B3173 4F   0004**M LD	C, A
0B3174 ED   0005**M IN0	A, (reg)
0B3175 38 
0B3176 9D 
0B3177 A1   0006**M AND	C
0B3178 ED   0007**M OUT0	(reg), A
0B3179 39 
0B317A 9D 
0B317B C1   0008**M POP	BC
0B317C C9    0040** RET
             0041** 
             0042** ; Input
             0043** ;
             0044** GPIOB_M1:		SET_GPIO PB_DDR,  B
0B317D ED   0001**M IN0	A, (reg)
0B317E 38 
0B317F 9B 
0B3180 B0   0002**M OR	val
0B3181 ED   0003**M OUT0	(reg), A
0B3182 39 
0B3183 9B 
             0045** RES_GPIO PB_ALT1, B
0B3184 C5   0001**M PUSH	BC
0B3185 78   0002**M LD	A, val
0B3186 2F   0003**M CPL
0B3187 4F   0004**M LD	C, A
0B3188 ED   0005**M IN0	A, (reg)
0B3189 38 
0B318A 9C 
0B318B A1   0006**M AND	C
0B318C ED   0007**M OUT0	(reg), A
0B318D 39 
0B318E 9C 
0B318F C1   0008**M POP	BC
             0046** RES_GPIO PB_ALT2, B
0B3190 C5   0001**M PUSH	BC
0B3191 78   0002**M LD	A, val
0B3192 2F   0003**M CPL
0B3193 4F   0004**M LD	C, A
0B3194 ED   0005**M IN0	A, (reg)
0B3195 38 
0B3196 9D 
0B3197 A1   0006**M AND	C
0B3198 ED   0007**M OUT0	(reg), A
0B3199 39 
0B319A 9D 
0B319B C1   0008**M POP	BC
0B319C C9    0047** RET
             0048** 
             0049** ; Open Drain IO
             0050** ;
             0051** GPIOB_M2:		RES_GPIO PB_DDR,  B
0B319D C5   0001**M PUSH	BC
0B319E 78   0002**M LD	A, val
0B319F 2F   0003**M CPL
0B31A0 4F   0004**M LD	C, A
0B31A1 ED   0005**M IN0	A, (reg)
0B31A2 38 
0B31A3 9B 
0B31A4 A1   0006**M AND	C
0B31A5 ED   0007**M OUT0	(reg), A
0B31A6 39 
0B31A7 9B 
0B31A8 C1   0008**M POP	BC
             0052** SET_GPIO PB_ALT1, B
0B31A9 ED   0001**M IN0	A, (reg)
0B31AA 38 
0B31AB 9C 
0B31AC B0   0002**M OR	val
0B31AD ED   0003**M OUT0	(reg), A
0B31AE 39 
0B31AF 9C 
             0053** RES_GPIO PB_ALT2, B
0B31B0 C5   0001**M PUSH	BC
0B31B1 78   0002**M LD	A, val
0B31B2 2F   0003**M CPL
0B31B3 4F   0004**M LD	C, A
0B31B4 ED   0005**M IN0	A, (reg)
0B31B5 38 
0B31B6 9D 
0B31B7 A1   0006**M AND	C
0B31B8 ED   0007**M OUT0	(reg), A
0B31B9 39 
0B31BA 9D 
0B31BB C1   0008**M POP	BC
0B31BC C9    0054** RET
             0055** 
             0056** ; Open Source IO
             0057** ;
             0058** GPIOB_M3:		SET_GPIO PB_DDR,  B
0B31BD ED   0001**M IN0	A, (reg)
0B31BE 38 
0B31BF 9B 
0B31C0 B0   0002**M OR	val
0B31C1 ED   0003**M OUT0	(reg), A
0B31C2 39 
0B31C3 9B 
             0059** SET_GPIO PB_ALT1, B
0B31C4 ED   0001**M IN0	A, (reg)
0B31C5 38 
0B31C6 9C 
0B31C7 B0   0002**M OR	val
0B31C8 ED   0003**M OUT0	(reg), A
0B31C9 39 
0B31CA 9C 
             0060** RES_GPIO PB_ALT2, B
0B31CB C5   0001**M PUSH	BC
0B31CC 78   0002**M LD	A, val
0B31CD 2F   0003**M CPL
0B31CE 4F   0004**M LD	C, A
0B31CF ED   0005**M IN0	A, (reg)
0B31D0 38 
0B31D1 9D 
0B31D2 A1   0006**M AND	C
0B31D3 ED   0007**M OUT0	(reg), A
0B31D4 39 
0B31D5 9D 
0B31D6 C1   0008**M POP	BC
0B31D7 C9    0061** RET
             0062** 
             0063** ; Interrupt, Dual Edge
             0064** ;
             0065** GPIOB_M4:		SET_GPIO PB_DR,   B
0B31D8 ED   0001**M IN0	A, (reg)
0B31D9 38 
0B31DA 9A 
0B31DB B0   0002**M OR	val
0B31DC ED   0003**M OUT0	(reg), A
0B31DD 39 
0B31DE 9A 
             0066** RES_GPIO PB_DDR,  B
0B31DF C5   0001**M PUSH	BC
0B31E0 78   0002**M LD	A, val
0B31E1 2F   0003**M CPL
0B31E2 4F   0004**M LD	C, A
0B31E3 ED   0005**M IN0	A, (reg)
0B31E4 38 
0B31E5 9B 
0B31E6 A1   0006**M AND	C
0B31E7 ED   0007**M OUT0	(reg), A
0B31E8 39 
0B31E9 9B 
0B31EA C1   0008**M POP	BC
             0067** RES_GPIO PB_ALT1, B
0B31EB C5   0001**M PUSH	BC
0B31EC 78   0002**M LD	A, val
0B31ED 2F   0003**M CPL
0B31EE 4F   0004**M LD	C, A
0B31EF ED   0005**M IN0	A, (reg)
0B31F0 38 
0B31F1 9C 
0B31F2 A1   0006**M AND	C
0B31F3 ED   0007**M OUT0	(reg), A
0B31F4 39 
0B31F5 9C 
0B31F6 C1   0008**M POP	BC
             0068** RES_GPIO PB_ALT2, B
0B31F7 C5   0001**M PUSH	BC
0B31F8 78   0002**M LD	A, val
0B31F9 2F   0003**M CPL
0B31FA 4F   0004**M LD	C, A
0B31FB ED   0005**M IN0	A, (reg)
0B31FC 38 
0B31FD 9D 
0B31FE A1   0006**M AND	C
0B31FF ED   0007**M OUT0	(reg), A
0B3200 39 
0B3201 9D 
0B3202 C1   0008**M POP	BC
0B3203 C9    0069** RET
             0070** 
             0071** ; Alt Function
             0072** ;
             0073** GPIOB_M5:		SET_GPIO PB_DDR,  B
0B3204 ED   0001**M IN0	A, (reg)
0B3205 38 
0B3206 9B 
0B3207 B0   0002**M OR	val
0B3208 ED   0003**M OUT0	(reg), A
0B3209 39 
0B320A 9B 
             0074** RES_GPIO PB_ALT1, B
0B320B C5   0001**M PUSH	BC
0B320C 78   0002**M LD	A, val
0B320D 2F   0003**M CPL
0B320E 4F   0004**M LD	C, A
0B320F ED   0005**M IN0	A, (reg)
0B3210 38 
0B3211 9C 
0B3212 A1   0006**M AND	C
0B3213 ED   0007**M OUT0	(reg), A
0B3214 39 
0B3215 9C 
0B3216 C1   0008**M POP	BC
             0075** SET_GPIO PB_ALT2, B
0B3217 ED   0001**M IN0	A, (reg)
0B3218 38 
0B3219 9D 
0B321A B0   0002**M OR	val
0B321B ED   0003**M OUT0	(reg), A
0B321C 39 
0B321D 9D 
0B321E C9    0076** RET
             0077** 
             0078** ; Interrupt, Active Low
             0079** ;
             0080** GPIOB_M6:		RES_GPIO PB_DR,   B
0B321F C5   0001**M PUSH	BC
0B3220 78   0002**M LD	A, val
0B3221 2F   0003**M CPL
0B3222 4F   0004**M LD	C, A
0B3223 ED   0005**M IN0	A, (reg)
0B3224 38 
0B3225 9A 
0B3226 A1   0006**M AND	C
0B3227 ED   0007**M OUT0	(reg), A
0B3228 39 
0B3229 9A 
0B322A C1   0008**M POP	BC
             0081** RES_GPIO PB_DDR,  B
0B322B C5   0001**M PUSH	BC
0B322C 78   0002**M LD	A, val
0B322D 2F   0003**M CPL
0B322E 4F   0004**M LD	C, A
0B322F ED   0005**M IN0	A, (reg)
0B3230 38 
0B3231 9B 
0B3232 A1   0006**M AND	C
0B3233 ED   0007**M OUT0	(reg), A
0B3234 39 
0B3235 9B 
0B3236 C1   0008**M POP	BC
             0082** SET_GPIO PB_ALT1, B
0B3237 ED   0001**M IN0	A, (reg)
0B3238 38 
0B3239 9C 
0B323A B0   0002**M OR	val
0B323B ED   0003**M OUT0	(reg), A
0B323C 39 
0B323D 9C 
             0083** SET_GPIO PB_ALT2, B
0B323E ED   0001**M IN0	A, (reg)
0B323F 38 
0B3240 9D 
0B3241 B0   0002**M OR	val
0B3242 ED   0003**M OUT0	(reg), A
0B3243 39 
0B3244 9D 
0B3245 C9    0084** RET
             0085** 
             0086** 
             0087** ; Interrupt, Active High
             0088** ;
             0089** GPIOB_M7:		SET_GPIO PB_DR,   B
0B3246 ED   0001**M IN0	A, (reg)
0B3247 38 
0B3248 9A 
0B3249 B0   0002**M OR	val
0B324A ED   0003**M OUT0	(reg), A
0B324B 39 
0B324C 9A 
             0090** RES_GPIO PB_DDR,  B
0B324D C5   0001**M PUSH	BC
0B324E 78   0002**M LD	A, val
0B324F 2F   0003**M CPL
0B3250 4F   0004**M LD	C, A
0B3251 ED   0005**M IN0	A, (reg)
0B3252 38 
0B3253 9B 
0B3254 A1   0006**M AND	C
0B3255 ED   0007**M OUT0	(reg), A
0B3256 39 
0B3257 9B 
0B3258 C1   0008**M POP	BC
             0091** SET_GPIO PB_ALT1, B
0B3259 ED   0001**M IN0	A, (reg)
0B325A 38 
0B325B 9C 
0B325C B0   0002**M OR	val
0B325D ED   0003**M OUT0	(reg), A
0B325E 39 
0B325F 9C 
             0092** SET_GPIO PB_ALT2, B
0B3260 ED   0001**M IN0	A, (reg)
0B3261 38 
0B3262 9D 
0B3263 B0   0002**M OR	val
0B3264 ED   0003**M OUT0	(reg), A
0B3265 39 
0B3266 9D 
0B3267 C9    0093** RET
             0094** 
             0095** 
             0096** ; Interrupt, Falling Edge
             0097** ;
             0098** GPIOB_M8:		RES_GPIO PB_DR,   B
0B3268 C5   0001**M PUSH	BC
0B3269 78   0002**M LD	A, val
0B326A 2F   0003**M CPL
0B326B 4F   0004**M LD	C, A
0B326C ED   0005**M IN0	A, (reg)
0B326D 38 
0B326E 9A 
0B326F A1   0006**M AND	C
0B3270 ED   0007**M OUT0	(reg), A
0B3271 39 
0B3272 9A 
0B3273 C1   0008**M POP	BC
             0099** SET_GPIO PB_DDR,  B
0B3274 ED   0001**M IN0	A, (reg)
0B3275 38 
0B3276 9B 
0B3277 B0   0002**M OR	val
0B3278 ED   0003**M OUT0	(reg), A
0B3279 39 
0B327A 9B 
             0100** SET_GPIO PB_ALT1, B
0B327B ED   0001**M IN0	A, (reg)
0B327C 38 
0B327D 9C 
0B327E B0   0002**M OR	val
0B327F ED   0003**M OUT0	(reg), A
0B3280 39 
0B3281 9C 
             0101** SET_GPIO PB_ALT2, B
0B3282 ED   0001**M IN0	A, (reg)
0B3283 38 
0B3284 9D 
0B3285 B0   0002**M OR	val
0B3286 ED   0003**M OUT0	(reg), A
0B3287 39 
0B3288 9D 
0B3289 C9    0102** RET
             0103** 
             0104** ; Interrupt, Rising Edge
             0105** ;
             0106** GPIOB_M9:		SET_GPIO PB_DR,   B
0B328A ED   0001**M IN0	A, (reg)
0B328B 38 
0B328C 9A 
0B328D B0   0002**M OR	val
0B328E ED   0003**M OUT0	(reg), A
0B328F 39 
0B3290 9A 
             0107** SET_GPIO PB_DDR,  B
0B3291 ED   0001**M IN0	A, (reg)
0B3292 38 
0B3293 9B 
0B3294 B0   0002**M OR	val
0B3295 ED   0003**M OUT0	(reg), A
0B3296 39 
0B3297 9B 
             0108** SET_GPIO PB_ALT1, B
0B3298 ED   0001**M IN0	A, (reg)
0B3299 38 
0B329A 9C 
0B329B B0   0002**M OR	val
0B329C ED   0003**M OUT0	(reg), A
0B329D 39 
0B329E 9C 
             0109** SET_GPIO PB_ALT2, B
0B329F ED   0001**M IN0	A, (reg)
0B32A0 38 
0B32A1 9D 
0B32A2 B0   0002**M OR	val
0B32A3 ED   0003**M OUT0	(reg), A
0B32A4 39 
0B32A5 9D 
0B32A6 C9    0110** RET
              0009* include "basic/main.asm"
             0001** ;
             0002** ; Title:	BBC Basic Interpreter - Z80 version
             0003** ;		Command, Error and Lexical Analysis Module - "MAIN"
             0004** ; Author:	(C) Copyright  R.T.Russell  1984
             0005** ; Modified By:	Dean Belfield
             0006** ; Created:	12/05/2023
             0007** ; Last Updated:	26/11/2023
             0008** ;
             0009** ; Modinfo:
             0010** ; 07/05/1984:	Version 2.3
             0011** ; 01/03/1987:	Version 3.0
             0012** ; 03/05/2022:	Modified by Dean Belfield
             0013** ; 06/06/2023:	Modified to run in ADL mode
             0014** ; 26/06/2023:	Fixed binary and unary indirection
             0015** ; 17/08/2023:	Added binary constants
             0016** ; 15/11/2023:	Fixed bug in ONEDIT1 for OSLOAD_TXT, Startup message now includes Agon version
             0017** ; 26/11/2023:	Fixed bug in AUTOLOAD
             0018** 
             0019** ; .ASSUME	ADL = 1
             0020** 
             0021** ; INCLUDE	"equs.inc"
             0022** 
             0023** ; SEGMENT CODE
             0024** 
             0025** ; XDEF	_basic_main
             0026** 
             0027** ; XDEF	COLD
             0028** ; XDEF	WARM
             0029** ; XDEF	CLOOP
             0030** ; XDEF	DELETE
             0031** ; XDEF	LIST_
             0032** ; XDEF	RENUM
             0033** ; XDEF	AUTO
             0034** ; XDEF	NEW
             0035** ; XDEF	OLD
             0036** ; XDEF	LOAD
             0037** ; XDEF	SAVE
             0038** ; XDEF	ERROR_
             0039** ; XDEF	EXTERR
             0040** ; XDEF	LOAD0
             0041** ; XDEF	CLEAR
             0042** ; XDEF	CRLF
             0043** ; XDEF	OUTCHR
             0044** ; XDEF	OUT_
             0045** ; XDEF	FINDL
             0046** ; XDEF	SETLIN
             0047** ; XDEF	PBCDL
             0048** ; XDEF	SAYLN
             0049** ; XDEF	PUTVAR
             0050** ; XDEF	GETVAR
             0051** ; XDEF	GETDEF
             0052** ; XDEF	CREATE
             0053** ; XDEF	RANGE
             0054** ; XDEF	LEXAN2
             0055** ; XDEF	REPORT
             0056** ; XDEF	TELL
             0057** ; XDEF	SPACE_
             0058** ; XDEF	KEYWDS
             0059** ; XDEF	KEYWDL
             0060** ; XDEF	ONEDIT
             0061** ; XDEF	ONEDIT1
             0062** ; XDEF	LISTIT
             0063** ; XDEF	CLEAN
             0064** 
             0065** ; XREF	LISTON
             0066** ; XREF	ERRTXT
             0067** ; XREF	OSINIT
             0068** ; XREF	HIMEM
             0069** ; XREF	PAGE_
             0070** ; XREF	CHAIN0
             0071** ; XREF	PROMPT
             0072** ; XREF	ERRTRP
             0073** ; XREF	ERRLIN
             0074** ; XREF	AUTONO
             0075** ; XREF	LINENO
             0076** ; XREF	INCREM
             0077** ; XREF	OSLINE
             0078** ; XREF	COUNT
             0079** ; XREF	NXT
             0080** ; XREF	BUFFER
             0081** ; XREF	XEQ
             0082** ; XREF	TOP
             0083** ; XREF	EXPRI
             0084** ; XREF	SEARCH
             0085** ; XREF	LTRAP
             0086** ; XREF	LOMEM
             0087** ; XREF	DECODE
             0088** ; XREF	EXPRS
             0089** ; XREF	OSSAVE
             0090** ; XREF	ERR
             0091** ; XREF	ERL
             0092** ; XREF	TRACEN
             0093** ; XREF	RESET
             0094** ; XREF	OSSHUT
             0095** ; XREF	OSLOAD
             0096** ; XREF	FREE
             0097** ; XREF	DYNVAR
             0098** ; XREF	FILL
             0099** ; XREF	OSWRCH
             0100** ; XREF	WIDTH
             0101** ; XREF	COMMA
             0102** ; XREF	MUL16
             0103** ; XREF	BRAKET
             0104** ; XREF	X4OR5
             0105** ; XREF	LOADN
             0106** ; XREF	SFIX
             0107** ; XREF	ITEMI
             0108** ; XREF	FNPTR
             0109** ; XREF	PROPTR
             0110** ; XREF	CHECK
             0111** ; XREF	TERMQ
             0112** ; XREF	OSWRCHCH
             0113** ; XREF	NEWIT
             0114** ; XREF	BAD
             0115** ; XREF	RAM_START
             0116** ; XREF	RAM_END
             0117** ; XREF	R0
             0118** ; XREF	STAR_VERSION
             0119** 
             0120** ; XREF	_basic_end			; In init.asm
             0121** ;
             0122** ; A handful of common token IDs
             0123** ;
             0124** TERROR_MN:			EQU     85H
             0125** LINE_MN_:			EQU     86H
             0126** ELSE_MN_:			EQU     8BH
             0127** THEN_MN_:			EQU     8CH
             0128** LINO_MN:			EQU     8DH
             0129** FN:			EQU     A4H
             0130** TO_MN:			EQU     B8H
             0131** REN:			EQU     CCH
             0132** DATA_MN_:			EQU     DCH
             0133** DIM:			EQU     DEH
             0134** FOR:			EQU     E3H
             0135** GOSUB:			EQU     E4H
             0136** GOTO:			EQU     E5H
             0137** TIF:			EQU     E7H
             0138** LOCAL_:			EQU     EAH
             0139** NEXT:			EQU     EDH
             0140** ON_:			EQU     EEH
             0141** PROC:			EQU     F2H
             0142** REM:			EQU     F4H
             0143** REPEAT:			EQU     F5H
             0144** RESTOR:			EQU     F7H
             0145** TRACE:			EQU     FCH
             0146** UNTIL:			EQU     FDH
             0147** ;
             0148** ; This defines the block of tokens that are pseudo-variables.
             0149** ; There are two versions of each token, a GET and a SET
             0150** 
             0151** ; Name  : GET : SET
             0152** ; ------:-----:----
             0153** ; PTR   : 8Fh : CFh
             0154** ; PAGE  : 90h : D0h
             0155** ; TIME  : 91h : D1h
             0156** ; LOMEM : 92h : D2h
             0157** ; HIMEM : 93h : D3h
             0158** ;
             0159** ; Examples:
             0160** ;   LET A% = PAGE : REM This is the GET version
             0161** ;   PAGE = 40000  : REM This is the SET version
             0162** ;
             0163** TOKLO:			EQU     8FH			; This defines the block of tokens that are pseudo-variables
             0164** TOKHI:			EQU     93H			; PTR, PAGE, TIME, LOMEM, HIMEM
             0165** OFFSET:			EQU     CFH-TOKLO		; Offset to the parameterised SET versions
             0166** 
             0167** ; The main routine
             0168** ; IXU: argv - pointer to array of parameters
             0169** ;   C: argc - number of parameters
             0170** ; Returns:
             0171** ;  HL: Error code, or 0 if OK
             0172** ;
0B32A7 21    0173** _basic_main:			LD	HL, ACCS		; Clear the ACCS
0B32A8 00 
0B32A9 4D 
0B32AA 0B 
0B32AB 36    0174** LD	(HL), 0
0B32AC 00 
0B32AD 79    0175** LD	A, C
0B32AE FE    0176** CP	2
0B32AF 02 
0B32B0 28    0177** JR	Z, AUTOLOAD		; 2 parameters = autoload
0B32B1 2D 
0B32B2 38    0178** JR	C, COLD			; 1 parameter = normal start
0B32B3 3F 
0B32B4 CD    0179** CALL	STAR_VERSION
0B32B5 29 
0B32B6 43 
0B32B7 0B 
0B32B8 CD    0180** CALL	TELL
0B32B9 81 
0B32BA 40 
0B32BB 0B 
0B32BC 55    0181** DB	"Usage:\n\r"
0B32BD 73 
0B32BE 61 
0B32BF 67 
0B32BF 65   
0B32C0 3A 
0B32C1 0A 
0B32C2 0D 
0B32C4 52    0182** DB	"RUN . <filename>\n\r", 0
0B32C5 55 
0B32C6 4E 
0B32C7 20 
0B32C7 2E   
0B32C8 20 
0B32C9 3C 
0B32CA 66 
0B32CA 69   
0B32CB 6C 
0B32CC 65 
0B32CD 6E 
0B32CD 61   
0B32CE 6D 
0B32CF 65 
0B32D0 3E 
0B32D0 0A   
0B32D1 0D 
0B32D2 00 
0B32D7 21    0183** LD	HL, 0			; The error code
0B32D8 00 
0B32D9 00 
0B32DA 00 
0B32DB C3    0184** JP	_basic_end
0B32DC B2 
0B32DD 03 
0B32DE 0B 
             0185** ;
0B32DF DD    0186** AUTOLOAD:		LD	HL, (IX+3)		; HLU: Address of filename
0B32E0 27 
0B32E1 03 
0B32E2 11    0187** LD	DE, ACCS		;  DE: Destination address
0B32E3 00 
0B32E4 4D 
0B32E5 0B 
0B32E6 7E    0188** AUTOLOAD_1:		LD	A, (HL)			; Fetch the filename byte
0B32E7 12    0189** LD	(DE), A			;
0B32E8 23    0190** INC	HL			; Increase the source pointer
0B32E9 1C    0191** INC	E			; We only need to increase E as ACCS is on a page boundary
0B32EA 28    0192** JR	Z, AUTOLOAD_2		; End if we hit the page boundary
0B32EB 03 
0B32EC B7    0193** OR	A
0B32ED 20    0194** JR	NZ, AUTOLOAD_1		; Loop until we hit a 0 byte
0B32EE F7 
0B32EF 1D    0195** AUTOLOAD_2:		DEC	E
0B32F0 3E    0196** LD	A, CR
0B32F1 0D 
0B32F2 12    0197** LD	(DE), A			; Replace the 0 byte with a CR for BBC BASIC
             0198** ;
0B32F3 E1    0199** COLD:			POP	HL			; Pop the return address to init off SPS
0B32F4 E5    0200** PUSH	HL 			; Stack it on SPL (*BYE will use this as the return address)
0B32F5 21    0201** LD	HL, STAVAR		; Cold start
0B32F6 00 
0B32F7 4F 
0B32F8 0B 
0B32F9 F9    0202** LD	SP, HL
0B32FA 36    0203** LD	(HL), 10
0B32FB 0A 
0B32FC 23    0204** INC	HL
0B32FD 36    0205** LD	(HL),9
0B32FE 09 
0B32FF CD    0206** CALL    OSINIT			; Call the machine specific OS initialisation routines
0B3300 72 
0B3301 42 
0B3302 0B 
0B3303 ED    0207** LD      (HIMEM),DE		; This returns HIMEM (ramtop) in DE - store in the HIMEM sysvar
0B3304 53 
0B3305 20 
0B3306 50 
0B3306 0B   
0B3308 22    0208** LD      (PAGE_),HL		; And PAGE in HL (where BASIC program storage starts) - store in PAGE sysvar
0B3309 14 
0B330A 50 
0B330B 0B 
0B330C 3E    0209** LD      A,B7H           	; Set LISTO sysvar; the bottom nibble is LISTO (7), top nibble is OPT (B)
0B330D B7 
0B330E 32    0210** LD      (LISTON),A
0B330F 40 
0B3310 50 
0B3311 0B 
0B3312 21    0211** LD      HL,NOTICE
0B3313 4D 
0B3314 33 
0B3315 0B 
0B3316 22    0212** LD      (ERRTXT),HL
0B3317 2F 
0B3318 50 
0B3319 0B 
0B331A CD    0213** CALL    NEWIT			; From what I can determine, NEWIT always returns with Z flag set
0B331B 5D 
0B331C 3B 
0B331D 0B 
0B331E 3A    0214** LD	A,(ACCS)		; Check if there is a filename in ACCS
0B331F 00 
0B3320 4D 
0B3321 0B 
0B3322 B7    0215** OR	A
0B3323 C2    0216** JP	NZ,CHAIN0		; Yes, so load and run
0B3324 44 
0B3325 0E 
0B3326 0B 
0B3327 CD    0217** CALL	STAR_VERSION		;
0B3328 29 
0B3329 43 
0B332A 0B 
0B332B CD    0218** CALL    TELL			; Output the welcome message
0B332C 81 
0B332D 40 
0B332E 0B 
0B332F 42    0219** DB    	"BBC BASIC (Z80) Version 3.00\n\r"
0B3330 42 
0B3331 43 
0B3332 20 
0B3332 42   
0B3333 41 
0B3334 53 
0B3335 49 
0B3335 43   
0B3336 20 
0B3337 28 
0B3338 5A 
0B3338 38   
0B3339 30 
0B333A 29 
0B333B 20 
0B333B 56   
0B333C 65 
0B333D 72 
0B333E 73 
0B333E 69   
0B333F 6F 
0B3340 6E 
0B3341 20 
0B3341 33   
0B3342 2E 
0B3343 30 
0B3344 30 
0B3344 0A   
0B3345 0D 
0B334D 28    0220** NOTICE:			DB    	"(C) Copyright R.T.Russell 1987\n\r"
0B334E 43 
0B334F 29 
0B3350 20 
0B3350 43   
0B3351 6F 
0B3352 70 
0B3353 79 
0B3353 72   
0B3354 69 
0B3355 67 
0B3356 68 
0B3356 74   
0B3357 20 
0B3358 52 
0B3359 2E 
0B3359 54   
0B335A 2E 
0B335B 52 
0B335C 75 
0B335C 73   
0B335D 73 
0B335E 65 
0B335F 6C 
0B335F 6C   
0B3360 20 
0B3361 31 
0B3362 39 
0B3362 38   
0B3363 37 
0B3364 0A 
0B3365 0D 
0B336D 0A    0221** DB	"\n\r", 0
0B336E 0D 
0B336F 00 
             0222** ;
0B3370 F6    0223** WARM:			DB 	F6H			; Opcode for OR? Maybe to CCF (the following SCF will be the operand)
             0224** ;
             0225** ; This is the main entry point for BASIC
             0226** ;
0B3371 37    0227** CLOOP:			SCF				; See above - not sure why this is here!
0B3372 ED    0228** LD      SP,(HIMEM)
0B3373 7B 
0B3374 20 
0B3375 50 
0B3375 0B   
0B3377 CD    0229** CALL    PROMPT          	; Prompt user
0B3378 EB 
0B3379 41 
0B337A 0B 
0B337B 21    0230** LD      HL,LISTON		; Pointer to the LISTO/OPT sysvar
0B337C 40 
0B337D 50 
0B337E 0B 
0B337F 7E    0231** LD      A,(HL)			; Fetch the value
0B3380 E6    0232** AND     0FH             	; Bottom nibble: LISTO
0B3381 0F 
0B3382 F6    0233** OR      B0H             	; Top nibble: Default to OPT (3) with ADL mode bit set to 1 for assembler
0B3383 B0 
0B3384 77    0234** LD      (HL),A			; Store back in
0B3385 ED    0235** SBC     HL,HL           	; HL: 0
0B3386 62 
0B3387 22    0236** LD      (ERRTRP),HL		; Clear ERRTRP sysvar
0B3388 2C 
0B3389 50 
0B338A 0B 
0B338B 22    0237** LD      (ERRLIN),HL		; Clear ERRLIN sysvar (ON ERROR)
0B338C 35 
0B338D 50 
0B338E 0B 
             0238** ;
0B338F 2A    0239** LD      HL,(AUTONO)		; Get the auto line number
0B3390 29 
0B3391 50 
0B3392 0B 
0B3393 22    0240** LD      (LINENO),HL		; Store in line number
0B3394 23 
0B3395 50 
0B3396 0B 
0B3397 7C    0241** LD      A,H			; If the auto line number is zero then
0B3398 B5    0242** OR      L
0B3399 28    0243** JR      Z,NOAUTO		; We're not auto line numbering, so skip the next bit
0B339A 1E 
             0244** ;
             0245** ; This section handles auto line numbering
             0246** ;
0B339B E5    0247** PUSH    HL			; Stack the line number
0B339C CD    0248** CALL    PBCD           	 	; Output the line number
0B339D EC 
0B339E 3C 
0B339F 0B 
0B33A0 E1    0249** POP     HL			; Pop the line number back off the stack
             0250** ;			LD      BC,(INCREM)		; Load BC with Increment - but INCREM is just a byte; C is the value
             0251** ;			LD      B,0			; So clear B
0B33A1 01    0252** LD	BC, 0			; Load BC with Increment
0B33A2 00 
0B33A3 00 
0B33A4 00 
0B33A5 3A    0253** LD	A,(INCREM)
0B33A6 41 
0B33A7 50 
0B33A8 0B 
0B33A9 4F    0254** LD	C, A
0B33AA 09    0255** ADD     HL,BC			; Add the increment to the line number
0B33AB DA    0256** JP      C,TOOBIG		; And error if we wrap
0B33AC 16 
0B33AD 3F 
0B33AE 0B 
0B33AF 22    0257** LD      (AUTONO),HL		; Store the new auto line number
0B33B0 29 
0B33B1 50 
0B33B2 0B 
0B33B3 3E    0258** LD      A,' '			; Print a space
0B33B4 20 
0B33B5 CD    0259** CALL    OUTCHR
0B33B6 40 
0B33B7 3C 
0B33B8 0B 
             0260** ;
             0261** ; This section invokes the line editor
             0262** ;
0B33B9 21    0263** NOAUTO:			LD      HL,ACCS			; Storage for the line editor (256 bytes)
0B33BA 00 
0B33BB 4D 
0B33BC 0B 
0B33BD CD    0264** CALL    OSLINE          	; Call the line editor in MOS
0B33BE 50 
0B33BF 41 
0B33C0 0B 
0B33C1 CD    0265** ONEDIT:			CALL	ONEDIT1			; Enter the line into memory
0B33C2 CD 
0B33C3 33 
0B33C4 0B 
0B33C5 DC    0266** CALL    C,CLEAN			; Set TOP, write out &FFFF end of program marker
0B33C6 30 
0B33C7 3B 
0B33C8 0B 
0B33C9 C3    0267** JP      CLOOP			; Jump back to immediate mode
0B33CA 71 
0B33CB 33 
0B33CC 0B 
             0268** ;
             0269** ; This bit enters the line into memory
             0270** ; Also called from OSLOAD_TXT
             0271** ; Returns:
             0272** ; F: C if a new line has been entered (CLEAN will need to be called)
             0273** ;
0B33CD AF    0274** ONEDIT1:		XOR     A			; Entry point after *EDIT
0B33CE 32    0275** LD      (COUNT),A
0B33CF 3D 
0B33D0 50 
0B33D1 0B 
0B33D2 FD    0276** LD      IY,ACCS
0B33D3 21 
0B33D4 00 
0B33D5 4D 
0B33D5 0B   
0B33D7 CD    0277** CALL    LINNUM			; HL: The line number from the input buffer
0B33D8 EA 
0B33D9 3E 
0B33DA 0B 
0B33DB CD    0278** CALL    NXT			; Skip spaces
0B33DC 61 
0B33DD 0D 
0B33DE 0B 
0B33DF 7C    0279** LD      A,H			; HL: The line number will be 0 for immediate mode or when auto line numbering is used
0B33E0 B5    0280** OR      L
0B33E1 28    0281** JR      Z,LNZERO        	; Skip if there is no line number in the input buffer
0B33E2 04 
0B33E3 22    0282** LD      (LINENO),HL		; Otherwise store it
0B33E4 23 
0B33E5 50 
0B33E6 0B 
             0283** ;
             0284** ; This bit does the lexical analysis and tokenisation
             0285** ;
0B33E7 0E    0286** LNZERO:			LD	C,1			; Left mode
0B33E8 01 
0B33E9 11    0287** LD      DE,BUFFER		; Buffer for tokenised BASIC
0B33EA 00 
0B33EB 4E 
0B33EC 0B 
0B33ED CD    0288** CALL    LEXAN2          	; Lexical analysis on the user input
0B33EE 90 
0B33EF 3F 
0B33F0 0B 
0B33F1 12    0289** LD      (DE),A          	; Terminator
0B33F2 AF    0290** XOR     A
             0291** ;			LD      B,A
             0292** ;			LD      C,E             	; BC: Line length
0B33F3 01    0293** LD	BC,0
0B33F4 00 
0B33F5 00 
0B33F6 00 
0B33F7 4B    0294** LD	C,E			; BC: Line length
0B33F8 13    0295** INC     DE
0B33F9 12    0296** LD      (DE),A          	; Zero next
0B33FA 2A    0297** LD      HL,(LINENO)		; Get the line number
0B33FB 23 
0B33FC 50 
0B33FD 0B 
0B33FE 7C    0298** LD      A,H			; Is it zero, i.e. a command with no line number?
0B33FF B5    0299** OR      L
0B3400 FD    0300** LD      IY,BUFFER       	; Yes, so we're in immediate mode
0B3401 21 
0B3402 00 
0B3403 4E 
0B3403 0B   
0B3405 CA    0301** JP      Z,XEQ           	; Execute it
0B3406 87 
0B3407 0E 
0B3408 0B 
             0302** ;
             0303** ; This section stores the BASIC line in memory
             0304** ;
0B3409 C5    0305** PUSH    BC
0B340A E5    0306** PUSH    HL
0B340B CD    0307** CALL    SETTOP          	; Set TOP sysvar
0B340C 3C 
0B340D 3B 
0B340E 0B 
0B340F E1    0308** POP     HL
0B3410 CD    0309** CALL    FINDL			; Find the address of the line
0B3411 80 
0B3412 3C 
0B3413 0B 
0B3414 CC    0310** CALL    Z,DEL			; Delete the existing line if found
0B3415 F3 
0B3416 3A 
0B3417 0B 
0B3418 C1    0311** POP     BC
0B3419 79    0312** LD      A,C			; Check for the line length being zero, i.e.
0B341A B7    0313** OR      A			; the user has just entered a line number in the command line
0B341B C8    0314** RET	Z 	         	; If so, then don't do anything else
0B341C C6    0315** ADD     A,4
0B341D 04 
0B341E 4F    0316** LD      C,A             	; Length inclusive
0B341F D5    0317** PUSH    DE              	; DE: Line number (fetched from the call to FINDL)
0B3420 C5    0318** PUSH    BC              	; BC: Line length
0B3421 EB    0319** EX      DE,HL			; DE: Address of the line in memory
0B3422 2A    0320** LD      HL,(TOP)		; HL: TOP (the first free location after the end of the BASIC program)
0B3423 17 
0B3424 50 
0B3425 0B 
0B3426 E5    0321** PUSH    HL			; Stack TOP (current TOP value)
0B3427 09    0322** ADD     HL,BC			; Add the line length to HL, the new TOP value
0B3428 E5    0323** PUSH    HL			; Stack HL (new TOP value)
0B3429 24    0324** INC     H			; Add 256 to HL
0B342A AF    0325** XOR     A
0B342B ED    0326** SBC     HL,SP			; Check whether HL is in the same page as the current stack pointer
0B342C 72 
0B342D E1    0327** POP     HL			; Pop HL (new TOP value)
0B342E D2    0328** JP      NC,ERROR_        	; If HL is in the stack page, then error: "No room"
0B342F 51 
0B3430 3A 
0B3431 0B 
0B3432 22    0329** LD      (TOP),HL		; Store new value of TOP
0B3433 17 
0B3434 50 
0B3435 0B 
0B3436 E3    0330** EX      (SP),HL			; HL: TOP (current TOP value), top of stack now contains new TOP value
0B3437 E5    0331** PUSH    HL			; PUSH current TOP value
0B3438 23    0332** INC     HL
0B3439 B7    0333** OR      A
0B343A ED    0334** SBC     HL,DE			; DE: Address of the line in memory
0B343B 52 
0B343C 44    0335** LD      B,H             	; BC: Amount to move
0B343D 4D    0336** LD      C,L
0B343E E1    0337** POP     HL			; HL: Destination (current TOP value)
0B343F D1    0338** POP     DE			; DE: Source (new TOP value)
0B3440 28    0339** JR      Z,ATEND			; If current TOP and new TOP are the same, i.e. adding a line at the end, then skip...
0B3441 02 
0B3442 ED    0340** LDDR                    	; Otherwise, make space for the new line in the program
0B3443 B8 
0B3444 C1    0341** ATEND:			POP     BC              	; BC: Line length
0B3445 D1    0342** POP     DE              	; DE: Line number
0B3446 23    0343** INC     HL			; HL: Destination address
0B3447 71    0344** LD      (HL),C          	; Store length
0B3448 23    0345** INC     HL
0B3449 73    0346** LD      (HL),E          	; Store line number
0B344A 23    0347** INC     HL
0B344B 72    0348** LD      (HL),D
0B344C 23    0349** INC     HL
0B344D 11    0350** LD      DE,BUFFER		; DE: Location of the new, tokenised line
0B344E 00 
0B344F 4E 
0B3450 0B 
0B3451 EB    0351** EX      DE,HL			; HL: Location of the new, tokensied line, DE: Destination address in BASIC program
0B3452 0D    0352** DEC     C			; Subtract 3 from the number of bytes to copy to
0B3453 0D    0353** DEC     C			; compensate for the 3 bytes stored above (length and line number)
0B3454 0D    0354** DEC     C
0B3455 ED    0355** LDIR                    	; Add the line to the BASIC program
0B3456 B0 
0B3457 37    0356** SCF				; To flag we need to call CLEAN
0B3458 C9    0357** RET
             0358** ;
             0359** ; List of tokens and keywords. If a keyword is followed by 0 then
             0360** ; it will only match with the keyword followed immediately by
             0361** ; a delimiter
             0362** ;
0B3459 80    0363** KEYWDS:			DB    80H, "AND"
0B345A 41 
0B345B 4E 
0B345C 44 
0B345D 94    0364** DB    94H, "ABS"
0B345E 41 
0B345F 42 
0B3460 53 
0B3461 95    0365** DB    95H, "ACS"
0B3462 41 
0B3463 43 
0B3464 53 
0B3465 96    0366** DB    96H, "ADVAL"
0B3466 41 
0B3467 44 
0B3468 56 
0B3468 41   
0B3469 4C 
0B346B 97    0367** DB    97H, "ASC"
0B346C 41 
0B346D 53 
0B346E 43 
0B346F 98    0368** DB    98H, "ASN"
0B3470 41 
0B3471 53 
0B3472 4E 
0B3473 99    0369** DB    99H, "ATN"
0B3474 41 
0B3475 54 
0B3476 4E 
0B3477 C6    0370** DB    C6H, "AUTO"
0B3478 41 
0B3479 55 
0B347A 54 
0B347A 4F   
0B347C 9A    0371** DB    9AH, "BGET", 0
0B347D 42 
0B347E 47 
0B347F 45 
0B347F 54   
0B3480 00 
0B3482 D5    0372** DB    D5H, "BPUT", 0
0B3483 42 
0B3484 50 
0B3485 55 
0B3485 54   
0B3486 00 
0B3488 FB    0373** DB    FBH, "COLOUR"
0B3489 43 
0B348A 4F 
0B348B 4C 
0B348B 4F   
0B348C 55 
0B348D 52 
0B348F FB    0374** DB    FBH, "COLOR"
0B3490 43 
0B3491 4F 
0B3492 4C 
0B3492 4F   
0B3493 52 
0B3495 D6    0375** DB    D6H, "CALL"
0B3496 43 
0B3497 41 
0B3498 4C 
0B3498 4C   
0B349A D7    0376** DB    D7H, "CHAIN"
0B349B 43 
0B349C 48 
0B349D 41 
0B349D 49   
0B349E 4E 
0B34A0 BD    0377** DB    BDH, "CHR$"
0B34A1 43 
0B34A2 48 
0B34A3 52 
0B34A3 24   
0B34A5 D8    0378** DB    D8H, "CLEAR", 0
0B34A6 43 
0B34A7 4C 
0B34A8 45 
0B34A8 41   
0B34A9 52 
0B34AA 00 
0B34AC D9    0379** DB    D9H, "CLOSE", 0
0B34AD 43 
0B34AE 4C 
0B34AF 4F 
0B34AF 53   
0B34B0 45 
0B34B1 00 
0B34B3 DA    0380** DB    DAH, "CLG", 0
0B34B4 43 
0B34B5 4C 
0B34B6 47 
0B34B6 00   
0B34B8 DB    0381** DB    DBH, "CLS", 0
0B34B9 43 
0B34BA 4C 
0B34BB 53 
0B34BB 00   
0B34BD 9B    0382** DB    9BH, "COS"
0B34BE 43 
0B34BF 4F 
0B34C0 53 
0B34C1 9C    0383** DB    9CH, "COUNT", 0
0B34C2 43 
0B34C3 4F 
0B34C4 55 
0B34C4 4E   
0B34C5 54 
0B34C6 00 
0B34C8 DC    0384** DB    DCH, "DATA"
0B34C9 44 
0B34CA 41 
0B34CB 54 
0B34CB 41   
0B34CD 9D    0385** DB    9DH, "DEG"
0B34CE 44 
0B34CF 45 
0B34D0 47 
0B34D1 DD    0386** DB    DDH, "DEF"
0B34D2 44 
0B34D3 45 
0B34D4 46 
0B34D5 C7    0387** DB    C7H, "DELETE"
0B34D6 44 
0B34D7 45 
0B34D8 4C 
0B34D8 45   
0B34D9 54 
0B34DA 45 
0B34DC 81    0388** DB    81H, "DIV"
0B34DD 44 
0B34DE 49 
0B34DF 56 
0B34E0 DE    0389** DB    DEH, "DIM"
0B34E1 44 
0B34E2 49 
0B34E3 4D 
0B34E4 DF    0390** DB    DFH, "DRAW"
0B34E5 44 
0B34E6 52 
0B34E7 41 
0B34E7 57   
0B34E9 E1    0391** DB    E1H, "ENDPROC", 0
0B34EA 45 
0B34EB 4E 
0B34EC 44 
0B34EC 50   
0B34ED 52 
0B34EE 4F 
0B34EF 43 
0B34EF 00   
0B34F2 E0    0392** DB    E0H, "END", 0
0B34F3 45 
0B34F4 4E 
0B34F5 44 
0B34F5 00   
0B34F7 E2    0393** DB    E2H, "ENVELOPE"
0B34F8 45 
0B34F9 4E 
0B34FA 56 
0B34FA 45   
0B34FB 4C 
0B34FC 4F 
0B34FD 50 
0B34FD 45   
0B3500 8B    0394** DB    8BH, "ELSE"
0B3501 45 
0B3502 4C 
0B3503 53 
0B3503 45   
0B3505 A0    0395** DB    A0H, "EVAL"
0B3506 45 
0B3507 56 
0B3508 41 
0B3508 4C   
0B350A 9E    0396** DB    9EH, "ERL", 0
0B350B 45 
0B350C 52 
0B350D 4C 
0B350D 00   
0B350F 85    0397** DB    85H, "ERROR"
0B3510 45 
0B3511 52 
0B3512 52 
0B3512 4F   
0B3513 52 
0B3515 C5    0398** DB    C5H, "EOF", 0
0B3516 45 
0B3517 4F 
0B3518 46 
0B3518 00   
0B351A 82    0399** DB    82H, "EOR"
0B351B 45 
0B351C 4F 
0B351D 52 
0B351E 9F    0400** DB    9FH, "ERR", 0
0B351F 45 
0B3520 52 
0B3521 52 
0B3521 00   
0B3523 A1    0401** DB    A1H, "EXP"
0B3524 45 
0B3525 58 
0B3526 50 
0B3527 A2    0402** DB    A2H, "EXT", 0
0B3528 45 
0B3529 58 
0B352A 54 
0B352A 00   
0B352C E3    0403** DB    E3H, "FOR"
0B352D 46 
0B352E 4F 
0B352F 52 
0B3530 A3    0404** DB    A3H, "FALSE", 0
0B3531 46 
0B3532 41 
0B3533 4C 
0B3533 53   
0B3534 45 
0B3535 00 
0B3537 A4    0405** DB    A4H, "FN"
0B3538 46 
0B3539 4E 
0B353A E5    0406** DB    E5H, "GOTO"
0B353B 47 
0B353C 4F 
0B353D 54 
0B353D 4F   
0B353F BE    0407** DB    BEH, "GET$"
0B3540 47 
0B3541 45 
0B3542 54 
0B3542 24   
0B3544 A5    0408** DB    A5H, "GET"
0B3545 47 
0B3546 45 
0B3547 54 
0B3548 E4    0409** DB    E4H, "GOSUB"
0B3549 47 
0B354A 4F 
0B354B 53 
0B354B 55   
0B354C 42 
0B354E E6    0410** DB    E6H, "GCOL"
0B354F 47 
0B3550 43 
0B3551 4F 
0B3551 4C   
0B3553 93    0411** DB    93H, "HIMEM", 0
0B3554 48 
0B3555 49 
0B3556 4D 
0B3556 45   
0B3557 4D 
0B3558 00 
0B355A E8    0412** DB    E8H, "INPUT"
0B355B 49 
0B355C 4E 
0B355D 50 
0B355D 55   
0B355E 54 
0B3560 E7    0413** DB    E7H, "IF"
0B3561 49 
0B3562 46 
0B3563 BF    0414** DB    BFH, "INKEY$"
0B3564 49 
0B3565 4E 
0B3566 4B 
0B3566 45   
0B3567 59 
0B3568 24 
0B356A A6    0415** DB    A6H, "INKEY"
0B356B 49 
0B356C 4E 
0B356D 4B 
0B356D 45   
0B356E 59 
0B3570 A8    0416** DB    A8H, "INT"
0B3571 49 
0B3572 4E 
0B3573 54 
0B3574 A7    0417** DB    A7H, "INSTR("
0B3575 49 
0B3576 4E 
0B3577 53 
0B3577 54   
0B3578 52 
0B3579 28 
0B357B C9    0418** DB    C9H, "LIST"
0B357C 4C 
0B357D 49 
0B357E 53 
0B357E 54   
0B3580 86    0419** DB    86H, "LINE"
0B3581 4C 
0B3582 49 
0B3583 4E 
0B3583 45   
0B3585 C8    0420** DB    C8H, "LOAD"
0B3586 4C 
0B3587 4F 
0B3588 41 
0B3588 44   
0B358A 92    0421** DB    92H, "LOMEM", 0
0B358B 4C 
0B358C 4F 
0B358D 4D 
0B358D 45   
0B358E 4D 
0B358F 00 
0B3591 EA    0422** DB    EAH, "LOCAL"
0B3592 4C 
0B3593 4F 
0B3594 43 
0B3594 41   
0B3595 4C 
0B3597 C0    0423** DB    C0H, "LEFT$("
0B3598 4C 
0B3599 45 
0B359A 46 
0B359A 54   
0B359B 24 
0B359C 28 
0B359E A9    0424** DB    A9H, "LEN"
0B359F 4C 
0B35A0 45 
0B35A1 4E 
0B35A2 E9    0425** DB    E9H, "LET"
0B35A3 4C 
0B35A4 45 
0B35A5 54 
0B35A6 AB    0426** DB    ABH, "LOG"
0B35A7 4C 
0B35A8 4F 
0B35A9 47 
0B35AA AA    0427** DB    AAH, "LN"
0B35AB 4C 
0B35AC 4E 
0B35AD C1    0428** DB    C1H, "MID$("
0B35AE 4D 
0B35AF 49 
0B35B0 44 
0B35B0 24   
0B35B1 28 
0B35B3 EB    0429** DB    EBH, "MODE"
0B35B4 4D 
0B35B5 4F 
0B35B6 44 
0B35B6 45   
0B35B8 83    0430** DB    83H, "MOD"
0B35B9 4D 
0B35BA 4F 
0B35BB 44 
0B35BC EC    0431** DB    ECH, "MOVE"
0B35BD 4D 
0B35BE 4F 
0B35BF 56 
0B35BF 45   
0B35C1 ED    0432** DB    EDH, "NEXT"
0B35C2 4E 
0B35C3 45 
0B35C4 58 
0B35C4 54   
0B35C6 CA    0433** DB    CAH, "NEW", 0
0B35C7 4E 
0B35C8 45 
0B35C9 57 
0B35C9 00   
0B35CB AC    0434** DB    ACH, "NOT"
0B35CC 4E 
0B35CD 4F 
0B35CE 54 
0B35CF CB    0435** DB    CBH, "OLD", 0
0B35D0 4F 
0B35D1 4C 
0B35D2 44 
0B35D2 00   
0B35D4 EE    0436** DB    EEH, "ON"
0B35D5 4F 
0B35D6 4E 
0B35D7 87    0437** DB    87H, "OFF"
0B35D8 4F 
0B35D9 46 
0B35DA 46 
0B35DB 84    0438** DB    84H, "OR"
0B35DC 4F 
0B35DD 52 
0B35DE 8E    0439** DB    8EH, "OPENIN"
0B35DF 4F 
0B35E0 50 
0B35E1 45 
0B35E1 4E   
0B35E2 49 
0B35E3 4E 
0B35E5 AE    0440** DB    AEH, "OPENOUT"
0B35E6 4F 
0B35E7 50 
0B35E8 45 
0B35E8 4E   
0B35E9 4F 
0B35EA 55 
0B35EB 54 
0B35ED AD    0441** DB    ADH, "OPENUP"
0B35EE 4F 
0B35EF 50 
0B35F0 45 
0B35F0 4E   
0B35F1 55 
0B35F2 50 
0B35F4 FF    0442** DB    FFH, "OSCLI"
0B35F5 4F 
0B35F6 53 
0B35F7 43 
0B35F7 4C   
0B35F8 49 
0B35FA F1    0443** DB    F1H, "PRINT"
0B35FB 50 
0B35FC 52 
0B35FD 49 
0B35FD 4E   
0B35FE 54 
0B3600 90    0444** DB    90H, "PAGE", 0
0B3601 50 
0B3602 41 
0B3603 47 
0B3603 45   
0B3604 00 
0B3606 8F    0445** DB    8FH, "PTR", 0
0B3607 50 
0B3608 54 
0B3609 52 
0B3609 00   
0B360B AF    0446** DB    AFH, "PI", 0
0B360C 50 
0B360D 49 
0B360E 00 
0B360F F0    0447** DB    F0H, "PLOT"
0B3610 50 
0B3611 4C 
0B3612 4F 
0B3612 54   
0B3614 B0    0448** DB    B0H, "POINT("
0B3615 50 
0B3616 4F 
0B3617 49 
0B3617 4E   
0B3618 54 
0B3619 28 
0B361B F2    0449** DB    F2H, "PROC"
0B361C 50 
0B361D 52 
0B361E 4F 
0B361E 43   
0B3620 B1    0450** DB    B1H, "POS", 0
0B3621 50 
0B3622 4F 
0B3623 53 
0B3623 00   
0B3625 CE    0451** DB    CEH, "PUT"
0B3626 50 
0B3627 55 
0B3628 54 
0B3629 F8    0452** DB    F8H, "RETURN", 0
0B362A 52 
0B362B 45 
0B362C 54 
0B362C 55   
0B362D 52 
0B362E 4E 
0B362F 00 
0B3631 F5    0453** DB    F5H, "REPEAT"
0B3632 52 
0B3633 45 
0B3634 50 
0B3634 45   
0B3635 41 
0B3636 54 
0B3638 F6    0454** DB    F6H, "REPORT", 0
0B3639 52 
0B363A 45 
0B363B 50 
0B363B 4F   
0B363C 52 
0B363D 54 
0B363E 00 
0B3640 F3    0455** DB    F3H, "READ"
0B3641 52 
0B3642 45 
0B3643 41 
0B3643 44   
0B3645 F4    0456** DB    F4H, "REM"
0B3646 52 
0B3647 45 
0B3648 4D 
0B3649 F9    0457** DB    F9H, "RUN", 0
0B364A 52 
0B364B 55 
0B364C 4E 
0B364C 00   
0B364E B2    0458** DB    B2H, "RAD"
0B364F 52 
0B3650 41 
0B3651 44 
0B3652 F7    0459** DB    F7H, "RESTORE"
0B3653 52 
0B3654 45 
0B3655 53 
0B3655 54   
0B3656 4F 
0B3657 52 
0B3658 45 
0B365A C2    0460** DB    C2H, "RIGHT$("
0B365B 52 
0B365C 49 
0B365D 47 
0B365D 48   
0B365E 54 
0B365F 24 
0B3660 28 
0B3662 B3    0461** DB    B3H, "RND", 0
0B3663 52 
0B3664 4E 
0B3665 44 
0B3665 00   
0B3667 CC    0462** DB    CCH, "RENUMBER"
0B3668 52 
0B3669 45 
0B366A 4E 
0B366A 55   
0B366B 4D 
0B366C 42 
0B366D 45 
0B366D 52   
0B3670 88    0463** DB    88H, "STEP"
0B3671 53 
0B3672 54 
0B3673 45 
0B3673 50   
0B3675 CD    0464** DB    CDH, "SAVE"
0B3676 53 
0B3677 41 
0B3678 56 
0B3678 45   
0B367A B4    0465** DB    B4H, "SGN"
0B367B 53 
0B367C 47 
0B367D 4E 
0B367E B5    0466** DB    B5H, "SIN"
0B367F 53 
0B3680 49 
0B3681 4E 
0B3682 B6    0467** DB    B6H, "SQR"
0B3683 53 
0B3684 51 
0B3685 52 
0B3686 89    0468** DB    89H, "SPC"
0B3687 53 
0B3688 50 
0B3689 43 
0B368A C3    0469** DB    C3H, "STR$"
0B368B 53 
0B368C 54 
0B368D 52 
0B368D 24   
0B368F C4    0470** DB    C4H, "STRING$("
0B3690 53 
0B3691 54 
0B3692 52 
0B3692 49   
0B3693 4E 
0B3694 47 
0B3695 24 
0B3695 28   
0B3698 D4    0471** DB    D4H, "SOUND"
0B3699 53 
0B369A 4F 
0B369B 55 
0B369B 4E   
0B369C 44 
0B369E FA    0472** DB    FAH, "STOP", 0
0B369F 53 
0B36A0 54 
0B36A1 4F 
0B36A1 50   
0B36A2 00 
0B36A4 B7    0473** DB    B7H, "TAN"
0B36A5 54 
0B36A6 41 
0B36A7 4E 
0B36A8 8C    0474** DB    8CH, "THEN"
0B36A9 54 
0B36AA 48 
0B36AB 45 
0B36AB 4E   
0B36AD B8    0475** DB    B8H, "TO"
0B36AE 54 
0B36AF 4F 
0B36B0 8A    0476** DB    8AH, "TAB("
0B36B1 54 
0B36B2 41 
0B36B3 42 
0B36B3 28   
0B36B5 FC    0477** DB    FCH, "TRACE"
0B36B6 54 
0B36B7 52 
0B36B8 41 
0B36B8 43   
0B36B9 45 
0B36BB 91    0478** DB    91H, "TIME", 0
0B36BC 54 
0B36BD 49 
0B36BE 4D 
0B36BE 45   
0B36BF 00 
0B36C1 B9    0479** DB    B9H, "TRUE", 0
0B36C2 54 
0B36C3 52 
0B36C4 55 
0B36C4 45   
0B36C5 00 
0B36C7 FD    0480** DB    FDH, "UNTIL"
0B36C8 55 
0B36C9 4E 
0B36CA 54 
0B36CA 49   
0B36CB 4C 
0B36CD BA    0481** DB    BAH, "USR"
0B36CE 55 
0B36CF 53 
0B36D0 52 
0B36D1 EF    0482** DB    EFH, "VDU"
0B36D2 56 
0B36D3 44 
0B36D4 55 
0B36D5 BB    0483** DB    BBH, "VAL"
0B36D6 56 
0B36D7 41 
0B36D8 4C 
0B36D9 BC    0484** DB    BCH, "VPOS", 0
0B36DA 56 
0B36DB 50 
0B36DC 4F 
0B36DC 53   
0B36DD 00 
0B36DF FE    0485** DB    FEH, "WIDTH"
0B36E0 57 
0B36E1 49 
0B36E2 44 
0B36E2 54   
0B36E3 48 
0B36E5 D3    0486** DB    D3H, "HIMEM"
0B36E6 48 
0B36E7 49 
0B36E8 4D 
0B36E8 45   
0B36E9 4D 
0B36EB D2    0487** DB    D2H, "LOMEM"
0B36EC 4C 
0B36ED 4F 
0B36EE 4D 
0B36EE 45   
0B36EF 4D 
0B36F1 D0    0488** DB    D0H, "PAGE"
0B36F2 50 
0B36F3 41 
0B36F4 47 
0B36F4 45   
0B36F6 CF    0489** DB    CFH, "PTR"
0B36F7 50 
0B36F8 54 
0B36F9 52 
0B36FA D1    0490** DB    D1H, "TIME"
0B36FB 54 
0B36FC 49 
0B36FD 4D 
0B36FD 45   
             0491** ;
             0492** ; These are indexed from the ERRWDS table
             0493** ;
0B36FF 01    0494** DB    01H, "Missing "
0B3700 4D 
0B3701 69 
0B3702 73 
0B3702 73   
0B3703 69 
0B3704 6E 
0B3705 67 
0B3705 20   
0B3708 02    0495** DB    02H, "No such "
0B3709 4E 
0B370A 6F 
0B370B 20 
0B370B 73   
0B370C 75 
0B370D 63 
0B370E 68 
0B370E 20   
0B3711 03    0496** DB    03H, "Bad "
0B3712 42 
0B3713 61 
0B3714 64 
0B3714 20   
0B3716 04    0497** DB    04H, " range"
0B3717 20 
0B3718 72 
0B3719 61 
0B3719 6E   
0B371A 67 
0B371B 65 
0B371D 05    0498** DB    05H, "variable"
0B371E 76 
0B371F 61 
0B3720 72 
0B3720 69   
0B3721 61 
0B3722 62 
0B3723 6C 
0B3723 65   
0B3726 06    0499** DB    06H, "Out of"
0B3727 4F 
0B3728 75 
0B3729 74 
0B3729 20   
0B372A 6F 
0B372B 66 
0B372D 07    0500** DB    07H, "No "
0B372E 4E 
0B372F 6F 
0B3730 20 
0B3731 08    0501** DB    08H, " space"
0B3732 20 
0B3733 73 
0B3734 70 
0B3734 61   
0B3735 63 
0B3736 65 
             0502** 
             0503** KEYWDL:			EQU     $-KEYWDS
0B3738 FF    0504** DW    -1
0B3739 FF 
             0505** ;
             0506** ; Error messages
             0507** ;
0B373A 07    0508** ERRWDS:			DB    7, "room", 0		;  0: No room
0B373B 72 
0B373C 6F 
0B373D 6F 
0B373D 6D   
0B373E 00 
0B3740 06    0509** DB    6, 4, 0			;  1: Out of range
0B3741 04 
0B3742 00 
0B3743 00    0510** DB    0				;  2: *
0B3744 00    0511** DB    0				;  3: *
0B3745 4D    0512** DB    "Mistake", 0		;  4: Mistake
0B3746 69 
0B3747 73 
0B3748 74 
0B3748 61   
0B3749 6B 
0B374A 65 
0B374B 00 
0B374D 01    0513** DB    1, ",", 0			;  5: Missing ,
0B374E 2C 
0B374F 00 
0B3750 54    0514** DB    "Type mismatch", 0	;  6: Type mismatch
0B3751 79 
0B3752 70 
0B3753 65 
0B3753 20   
0B3754 6D 
0B3755 69 
0B3756 73 
0B3756 6D   
0B3757 61 
0B3758 74 
0B3759 63 
0B3759 68   
0B375A 00 
0B375E 07    0515** DB    7, FN, 0			;  7: No FN
0B375F A4 
0B3760 00 
0B3761 00    0516** DB    0				;  8: *
0B3762 01    0517** DB    1, 34, 0			;  9: Missing "
0B3763 22 
0B3764 00 
0B3765 03    0518** DB    3, DIM, 0			; 10: Bad DIM
0B3766 DE 
0B3767 00 
0B3768 DE    0519** DB    DIM, 8, 0			; 11: DIM space
0B3769 08 
0B376A 00 
0B376B 4E    0520** DB    "Not ", LOCAL_, 0		; 12: Not LOCAL
0B376C 6F 
0B376D 74 
0B376E 20 
0B376E EA   
0B376F 00 
0B3771 07    0521** DB    7, PROC, 0		; 13: No PROC
0B3772 F2 
0B3773 00 
0B3774 41    0522** DB    "Array", 0		; 14: Array
0B3775 72 
0B3776 72 
0B3777 61 
0B3777 79   
0B3778 00 
0B377A 53    0523** DB    "Subscript", 0		; 15: Subscript
0B377B 75 
0B377C 62 
0B377D 73 
0B377D 63   
0B377E 72 
0B377F 69 
0B3780 70 
0B3780 74   
0B3781 00 
0B3784 53    0524** DB    "Syntax error", 0		; 16: Syntax error
0B3785 79 
0B3786 6E 
0B3787 74 
0B3787 61   
0B3788 78 
0B3789 20 
0B378A 65 
0B378A 72   
0B378B 72 
0B378C 6F 
0B378D 72 
0B378D 00   
0B3791 45    0525** DB    "Escape", 0		; 17: Escape
0B3792 73 
0B3793 63 
0B3794 61 
0B3794 70   
0B3795 65 
0B3796 00 
0B3798 44    0526** DB    "Division by zero", 0	; 18: Division by zero
0B3799 69 
0B379A 76 
0B379B 69 
0B379B 73   
0B379C 69 
0B379D 6F 
0B379E 6E 
0B379E 20   
0B379F 62 
0B37A0 79 
0B37A1 20 
0B37A1 7A   
0B37A2 65 
0B37A3 72 
0B37A4 6F 
0B37A4 00   
0B37A9 53    0527** DB    "String too long", 0	; 19: String too long
0B37AA 74 
0B37AB 72 
0B37AC 69 
0B37AC 6E   
0B37AD 67 
0B37AE 20 
0B37AF 74 
0B37AF 6F   
0B37B0 6F 
0B37B1 20 
0B37B2 6C 
0B37B2 6F   
0B37B3 6E 
0B37B4 67 
0B37B5 00 
0B37B9 54    0528** DB    "Too big", 0		; 20: Too big
0B37BA 6F 
0B37BB 6F 
0B37BC 20 
0B37BC 62   
0B37BD 69 
0B37BE 67 
0B37BF 00 
0B37C1 2D    0529** DB    "-ve root", 0		; 21: -ve root
0B37C2 76 
0B37C3 65 
0B37C4 20 
0B37C4 72   
0B37C5 6F 
0B37C6 6F 
0B37C7 74 
0B37C7 00   
0B37CA 4C    0530** DB    "Log", 4, 0		; 22: Log range
0B37CB 6F 
0B37CC 67 
0B37CD 04 
0B37CD 00   
0B37CF 41    0531** DB    "Accuracy lost", 0	; 23: Accuracy lost
0B37D0 63 
0B37D1 63 
0B37D2 75 
0B37D2 72   
0B37D3 61 
0B37D4 63 
0B37D5 79 
0B37D5 20   
0B37D6 6C 
0B37D7 6F 
0B37D8 73 
0B37D8 74   
0B37D9 00 
0B37DD 45    0532** DB    "Exp", 4, 0		; 24: Exp range
0B37DE 78 
0B37DF 70 
0B37E0 04 
0B37E0 00   
0B37E2 00    0533** DB    0				; 25: *
0B37E3 02    0534** DB    2, 5, 0			; 26: No such variable
0B37E4 05 
0B37E5 00 
0B37E6 01    0535** DB    1, ")", 0			; 27: Missing )
0B37E7 29 
0B37E8 00 
0B37E9 03    0536** DB    3, "HEX", 0		; 28: Bad HEX
0B37EA 48 
0B37EB 45 
0B37EC 58 
0B37EC 00   
0B37EE 02    0537** DB    2, FN, "/", PROC, 0	; 29: No such FN/PROC
0B37EF A4 
0B37F0 2F 
0B37F1 F2 
0B37F1 00   
0B37F3 03    0538** DB    3, "call", 0		; 30: Bad call
0B37F4 63 
0B37F5 61 
0B37F6 6C 
0B37F6 6C   
0B37F7 00 
0B37F9 41    0539** DB    "Arguments", 0		; 31: Arguments
0B37FA 72 
0B37FB 67 
0B37FC 75 
0B37FC 6D   
0B37FD 65 
0B37FE 6E 
0B37FF 74 
0B37FF 73   
0B3800 00 
0B3803 07    0540** DB    7, FOR, 0			; 32: No FOR
0B3804 E3 
0B3805 00 
0B3806 43    0541** DB    "Can't match ", FOR, 0	; 33: Can't match FOR
0B3807 61 
0B3808 6E 
0B3809 27 
0B3809 74   
0B380A 20 
0B380B 6D 
0B380C 61 
0B380C 74   
0B380D 63 
0B380E 68 
0B380F 20 
0B380F E3   
0B3810 00 
0B3814 E3    0542** DB    FOR, " ", 5, 0		; 34: FOR variable
0B3815 20 
0B3816 05 
0B3817 00 
0B3818 00    0543** DB    0				; 35: *
0B3819 07    0544** DB    7, TO_MN, 0			; 36: No TO
0B381A B8 
0B381B 00 
0B381C 00    0545** DB    0				; 37: *
0B381D 07    0546** DB    7, GOSUB, 0		; 38: No GOSUB
0B381E E4 
0B381F 00 
0B3820 EE    0547** DB    ON_, " syntax", 0		; 39: ON syntax
0B3821 20 
0B3822 73 
0B3823 79 
0B3823 6E   
0B3824 74 
0B3825 61 
0B3826 78 
0B3826 00   
0B3829 EE    0548** DB    ON_, 4, 0			; 40: ON range
0B382A 04 
0B382B 00 
0B382C 02    0549** DB    2, "line", 0		; 41: No such line
0B382D 6C 
0B382E 69 
0B382F 6E 
0B382F 65   
0B3830 00 
0B3832 06    0550** DB    6, " ", DATA_MN_, 0		; 42: Out of DATA
0B3833 20 
0B3834 DC 
0B3835 00 
0B3836 07    0551** DB    7, REPEAT, 0		; 43: No REPEAT
0B3837 F5 
0B3838 00 
0B3839 00    0552** DB    0				; 44: *
0B383A 01    0553** DB    1, "#", 0			; 45: Missing #
0B383B 23 
0B383C 00 
             0554** ;
             0555** ; COMMANDS:
             0556** ;
             0557** ; DELETE line,line
             0558** ;
0B383D CD    0559** DELETE:			CALL    SETTOP          	; Set TOP sysvar (first free byte at end of BASIC program)
0B383E 3C 
0B383F 3B 
0B3840 0B 
0B3841 CD    0560** CALL    DLPAIR			; Get the line number pair - HL: BASIC program address, BC: second number (or 0 if missing)
0B3842 44 
0B3843 3F 
0B3844 0B 
0B3845 7E    0561** DELET1:			LD      A,(HL)			; Check whether it's the last line
0B3846 B7    0562** OR      A
0B3847 CA    0563** JP      Z,WARMNC		; Yes, so do nothing
0B3848 CE 
0B3849 38 
0B384A 0B 
0B384B 23    0564** INC     HL			; Skip the line length byte
0B384C 11    0565** LD	DE, 0			; Clear DE
0B384D 00 
0B384E 00 
0B384F 00 
0B3850 5E    0566** LD      E,(HL)			; Fetch the line number in DE
0B3851 23    0567** INC     HL
0B3852 56    0568** LD      D,(HL)
0B3853 7A    0569** LD      A,D			; If the line number is zero then
0B3854 B3    0570** OR      E
0B3855 28    0571** JR      Z,CLOOP1        	; Do nothing
0B3856 1D 
0B3857 2B    0572** DEC     HL			; Decrement BASIC program pointer back to length
0B3858 2B    0573** DEC     HL
0B3859 EB    0574** EX      DE,HL			; Check if we've gone past the terminating line
0B385A 37    0575** SCF
0B385B ED    0576** SBC     HL,BC
0B385C 42 
0B385D EB    0577** EX      DE,HL
0B385E 30    0578** JR      NC,WARMNC		; Yes, so exit back to BASIC prompt
0B385F 6E 
0B3860 C5    0579** PUSH    BC
0B3861 CD    0580** CALL    DEL			; Delete the line pointed to by HL
0B3862 F3 
0B3863 3A 
0B3864 0B 
0B3865 C1    0581** POP     BC
0B3866 18    0582** JR      DELET1			; And loop round to the next line
0B3867 DD 
             0583** ;
             0584** ; LISTO expr
             0585** ;
0B3868 FD    0586** LISTO:			INC     IY              	; Skip "O" byte
0B3869 23 
0B386A CD    0587** CALL    EXPRI			; Get expr
0B386B FB 
0B386C 05 
0B386D 0B 
0B386E D9    0588** EXX
0B386F 7D    0589** LD      A,L
0B3870 32    0590** LD      (LISTON),A		; Store in LISTON sysvar
0B3871 40 
0B3872 50 
0B3873 0B 
0B3874 C3    0591** CLOOP1:			JP      CLOOP
0B3875 71 
0B3876 33 
0B3877 0B 
             0592** ;
             0593** ; LIST
             0594** ; LIST line
             0595** ; LIST line,line [IF string]
             0596** ; LIST ,line
             0597** ; LIST line,
             0598** ;
0B3878 FE    0599** LIST_:			CP      'O'			; Check for O (LISTO)
0B3879 4F 
0B387A 28    0600** JR      Z,LISTO			; and jump to LISTO if zero
0B387B EC 
0B387C CD    0601** CALL    DLPAIR			; Get the line number pair - HL: BASIC program address, BC: second number (or 0 if missing)
0B387D 44 
0B387E 3F 
0B387F 0B 
0B3880 CD    0602** CALL    NXT			; Skip space
0B3881 61 
0B3882 0D 
0B3883 0B 
0B3884 FE    0603** CP      TIF             	; Check for IF clause (token IF)
0B3885 E7 
0B3886 3E    0604** LD      A,0             	; Initialise the IF clause string length
0B3887 00 
0B3888 20    0605** JR      NZ,LISTB		; If there is no IF clause, skip the next bit
0B3889 17 
             0606** ;
0B388A FD    0607** INC     IY              	; Skip the IF token
0B388B 23 
0B388C CD    0608** CALL    NXT             	; And skip any spaces
0B388D 61 
0B388E 0D 
0B388F 0B 
0B3890 EB    0609** EX      DE,HL			; DE: Address in memory
0B3891 FD    0610** PUSH    IY			; LD IY, HL
0B3892 E5 
0B3893 E1    0611** POP     HL              	; HL is now the address of the tokenised line
0B3894 3E    0612** LD      A,CR
0B3895 0D 
0B3896 C5    0613** PUSH    BC			; Stack the second line number arg
0B3897 01    0614** LD      BC,256
0B3898 00 
0B3899 01 
0B389A 00 
0B389B ED    0615** CPIR                    	; Locate CR byte
0B389C B1 
0B389D 79    0616** LD      A,C
0B389E 2F    0617** CPL                    	 	; A: Substring length (of IF clause)
0B389F C1    0618** POP     BC			; Restore the second line number arg
0B38A0 EB    0619** EX      DE,HL			; HL: Address in memory
             0620** ;
0B38A1 5F    0621** LISTB:			LD      E,A             	; E: IF clause string length
0B38A2 78    0622** LD      A,B			; Check whether a second line number was passed (BC!=0)
0B38A3 B1    0623** OR      C
0B38A4 20    0624** JR      NZ,LISTA		; If there isn't a second line number
0B38A5 01 
0B38A6 0B    0625** DEC     BC			; then we set it to the maximum of 65535
             0626** ;
0B38A7 D9    0627** LISTA:			EXX
0B38A8 DD    0628** LD      IX,LISTON		; IX : Pointer to the LISTON (LISTO and OPT) sysvar
0B38A9 21 
0B38AA 40 
0B38AB 50 
0B38AB 0B   
0B38AD 01    0629** LD      BC,0            	; BC': Indentation counter (C: FOR/NEXT, B: REPEAT/UNTIL)
0B38AE 00 
0B38AF 00 
0B38B0 00 
0B38B1 D9    0630** EXX
0B38B2 3E    0631** LD      A,20			; Number of lines to list
0B38B3 14 
             0632** ;
0B38B4 C5    0633** LISTC:			PUSH    BC              	; Save second line number
0B38B5 D5    0634** PUSH    DE              	; Save IF clause length
0B38B6 E5    0635** PUSH    HL              	; Save BASIC program counter
0B38B7 08    0636** EX      AF,AF'
             0637** ;
             0638** ; BBC BASIC for Z80 lines are stored as follows:
             0639** ;
             0640** ; - [LEN] [LSB] [MSB] [DATA...] [0x0D]: LSB, MSB = line number
             0641** ; - [&00] [&FF] [&FF]: End of program marker
             0642** ;
             0643** ; This is the Russell format and different to the Wilson/Acorn format: https://www.beebwiki.mdfs.net/Program_format
             0644** ;
0B38B8 7E    0645** LD      A,(HL)			; Check for end of program marker
0B38B9 B7    0646** OR      A			; If found
0B38BA 28    0647** JR      Z,WARMNC		; Jump to WARMNC (F=NC, so will jump to WARM)
0B38BB 12 
             0648** ;
             0649** ; Check if past terminating line number
             0650** ;
0B38BC 7B    0651** LD      A,E             	; A: IF clause length
0B38BD 23    0652** INC     HL			; Skip the length byte
0B38BE 11    0653** LD	DE,0			; Clear DE
0B38BF 00 
0B38C0 00 
0B38C1 00 
0B38C2 5E    0654** LD      E,(HL)			; Fetch the line number in DE
0B38C3 23    0655** INC     HL
0B38C4 56    0656** LD      D,(HL)
0B38C5 2B    0657** DEC     HL			; Step HL back to the length byte
0B38C6 2B    0658** DEC     HL
0B38C7 D5    0659** PUSH    DE             	 	; Push the line number on the stack
0B38C8 EB    0660** EX      DE,HL			; HL: line number
0B38C9 37    0661** SCF				; Do a 16-bit compare of HL and DE
0B38CA ED    0662** SBC     HL,BC
0B38CB 42 
0B38CC EB    0663** EX      DE,HL
0B38CD D1    0664** POP     DE              	; Restore the line number
0B38CE D2    0665** WARMNC:			JP      NC,WARM			; If exceeded the terminating line number then jump to WARM
0B38CF 70 
0B38D0 33 
0B38D1 0B 
0B38D2 4E    0666** LD      C,(HL)          	; C: Line length + 4
0B38D3 47    0667** LD      B,A             	; B: IF clause length
             0668** ;
             0669** ; Check if "UNLISTABLE":
             0670** ;
0B38D4 7A    0671** LD      A,D			; TODO: What is "UNLISTABLE?"
0B38D5 B3    0672** OR      E
0B38D6 CA    0673** JP      Z,CLOOP
0B38D7 71 
0B38D8 33 
0B38D9 0B 
             0674** ;
             0675** ; Check for IF clause:
             0676** ;
0B38DA 23    0677** INC     HL			; Skip the length
0B38DB 23    0678** INC     HL			; Skip the line number
0B38DC 23    0679** INC     HL              	; HL: Address of the tokenised BASIC line
0B38DD 0D    0680** DEC     C			;  C: Line length
0B38DE 0D    0681** DEC     C
0B38DF 0D    0682** DEC     C
0B38E0 0D    0683** DEC     C
0B38E1 D5    0684** PUSH    DE              	; Save the line number
0B38E2 E5    0685** PUSH    HL              	; Save the BASIC program address
0B38E3 AF    0686** XOR     A               	;
0B38E4 B8    0687** CP      B              	 	; Check for an IF clause (B!=0)
0B38E5 FD    0688** PUSH    IY			; LD IY, DE
0B38E6 E5 
0B38E7 D1    0689** POP     DE              	; DE: Address of the IF clause string in the input buffer
0B38E8 C4    0690** CALL    NZ,SEARCH      		; If there is an IF clause (B!=0) then search for it
0B38E9 76 
0B38EA 0A 
0B38EB 0B 
0B38EC E1    0691** POP     HL              	; Restore BASIC program address
0B38ED D1    0692** POP     DE              	; Restore line number
0B38EE FD    0693** PUSH    IY
0B38EF E5 
0B38F0 CC    0694** CALL    Z,LISTIT        	; List if no IF clause OR there is an IF clause match
0B38F1 83 
0B38F2 3B 
0B38F3 0B 
0B38F4 FD    0695** POP     IY
0B38F5 E1 
             0696** ;
0B38F6 08    0697** EX      AF,AF'
0B38F7 3D    0698** DEC     A			; Decrement line list counter
0B38F8 CD    0699** CALL    LTRAP			; TODO: This destroys A - is this a bug I've introduced in LTRAP?
0B38F9 62 
0B38FA 42 
0B38FB 0B 
0B38FC E1    0700** POP     HL             	 	; Restore BASIC program address to beginning of line
0B38FD 11    0701** LD	DE,0
0B38FE 00 
0B38FF 00 
0B3900 00 
0B3901 5E    0702** LD      E,(HL)			; Fetch the length of line in DE
0B3902 19    0703** ADD     HL,DE           	; Go to the next line
0B3903 D1    0704** POP     DE              	; Restore IF clause length
0B3904 C1    0705** POP     BC              	; Restore second line number
0B3905 18    0706** JR      LISTC			; Loop back to do next line
0B3906 AD 
             0707** ;
             0708** ; RENUMBER
             0709** ; RENUMBER start
             0710** ; RENUMBER start,increment
             0711** ; RENUMBER ,increment
             0712** ;
0B3907 CD    0713** RENUM:			CALL    CLEAR           	; Uses the heap so clear all dynamic variables and function/procedure pointers
0B3908 67 
0B3909 3B 
0B390A 0B 
0B390B CD    0714** CALL    PAIR            	; Fetch the parameters - HL: start (NEW line number), BC: increment
0B390C 1C 
0B390D 3F 
0B390E 0B 
0B390F D9    0715** EXX
0B3910 2A    0716** LD      HL,(PAGE_)		; HL: Top of program
0B3911 14 
0B3912 50 
0B3913 0B 
0B3914 ED    0717** LD      DE,(LOMEM)		; DE: Start address of the heap
0B3915 5B 
0B3916 1A 
0B3917 50 
0B3917 0B   
             0718** ;
             0719** ; Build the table
             0720** ;
0B3919 7E    0721** RENUM1:			LD      A,(HL)          	; Fetch the line length byte
0B391A B7    0722** OR      A			; Is it zero, i.e. the end of program marker?
0B391B 28    0723** JR      Z,RENUM2		; Yes, so skip to the next part
0B391C 36 
0B391D 23    0724** INC     HL
0B391E 4E    0725** LD      C,(HL)          	; BC: The OLD line number
0B391F 23    0726** INC     HL
0B3920 46    0727** LD      B,(HL)
0B3921 78    0728** LD      A,B			; Check whether the line number is zero - we only need to check the LSW
0B3922 B1    0729** OR      C
0B3923 CA    0730** JP      Z,CLOOP        		; If the line number is zero, then exit back to the command line
0B3924 71 
0B3925 33 
0B3926 0B 
0B3927 EB    0731** EX      DE,HL			; DE: Pointer to BASIC program, HL: Pointer to heap
0B3928 71    0732** LD      (HL),C			; Store the OLD line number in the heap
0B3929 23    0733** INC     HL
0B392A 70    0734** LD      (HL),B
0B392B 23    0735** INC     HL
0B392C D9    0736** EXX				; HL: line number, BC: increment (16-bit values)
0B392D E5    0737** PUSH    HL			; HL: Stack the NEW line number value
0B392E 52    0738** ADD.S   HL,BC           	; Add the increment
0B392F 09 
0B3930 DA    0739** JP      C,TOOBIG        	; If > 65535, then error: "Too big"
0B3931 16 
0B3932 3F 
0B3933 0B 
0B3934 D9    0740** EXX				; DE: Pointer to BASIC program, HL: Pointer to heap
0B3935 C1    0741** POP     BC			; BC: Pop the NEW line number value off the stack
0B3936 71    0742** LD      (HL),C			; Store the NEW line number in the heap
0B3937 23    0743** INC     HL
0B3938 70    0744** LD      (HL),B
0B3939 23    0745** INC     HL
0B393A EB    0746** EX      DE,HL			; HL: Pointer to BASIC program, DE: Pointer to heap
0B393B 2B    0747** DEC     HL			; Back up to the line length byte
0B393C 2B    0748** DEC     HL
0B393D 01    0749** LD	BC, 0
0B393E 00 
0B393F 00 
0B3940 00 
0B3941 4E    0750** LD      C,(HL)			; BC: Line length
0B3942 09    0751** ADD	HL,BC           	; Advance HL to next line
0B3943 EB    0752** EX      DE,HL			; DE: Pointer to BASIC program, HL: Pointer to heap
0B3944 E5    0753** PUSH    HL
0B3945 24    0754** INC     H			; Increment to next page
0B3946 ED    0755** SBC     HL,SP			; Subtract from SP
0B3947 72 
0B3948 E1    0756** POP     HL
0B3949 EB    0757** EX      DE, HL			; HL: Pointer to BASIC program, DE: Pointer to heap
0B394A 38    0758** JR      C,RENUM1        	; Loop, as the heap pointer has not strayed into the stack page
0B394B CD 
0B394C CD    0759** CALL    EXTERR          	; Otherwise throw error: "RENUMBER space'
0B394D 68 
0B394E 3A 
0B394F 0B 
0B3950 CC    0760** DB    	REN
0B3951 08    0761** DB    	8
0B3952 00    0762** DB    	0
             0763** ;
             0764** ; At this point a list of BASIC line numbers have been written to the heap
             0765** ; as word pairs:
             0766** ; - DW: The OLD line number
             0767** ; - DW: The NEW line number
             0768** ;
0B3953 EB    0769** RENUM2:			EX      DE,HL			; HL: Pointer to the end of the heap
0B3954 36    0770** LD      (HL),-1			; Mark the end with FFFFh
0B3955 FF 
0B3956 23    0771** INC     HL
0B3957 36    0772** LD      (HL),-1
0B3958 FF 
0B3959 ED    0773** LD      DE,(LOMEM)		; DE: Pointer to the start of the heap
0B395A 5B 
0B395B 1A 
0B395C 50 
0B395C 0B   
0B395E D9    0774** EXX
0B395F 2A    0775** LD      HL,(PAGE_)		; HL: Start of the BASIC program area
0B3960 14 
0B3961 50 
0B3962 0B 
0B3963 4E    0776** RENUM3:			LD      C,(HL)			; Fetch the first line length byte
0B3964 79    0777** LD      A,C			; If it is zero, then no program, so...
0B3965 B7    0778** OR      A
0B3966 CA    0779** JP      Z,WARM			; Jump to warm start
0B3967 70 
0B3968 33 
0B3969 0B 
0B396A D9    0780** EXX				; HL: Pointer to end of heap, DE: Pointer to start of heap
0B396B EB    0781** EX      DE,HL			; DE: Pointer to end of heap, HL: Pointer to start of heap
0B396C 23    0782** INC     HL			; Skip to the NEW line number
0B396D 23    0783** INC     HL
0B396E 5E    0784** LD      E,(HL)			; DE: The NEW line number
0B396F 23    0785** INC     HL
0B3970 56    0786** LD      D,(HL)
0B3971 23    0787** INC     HL
0B3972 D5    0788** PUSH    DE			; Stack the NEW line number
0B3973 EB    0789** EX      DE,HL			; HL: The NEW line number, DE: Pointer to the end of heap
0B3974 22    0790** LD      (LINENO),HL		; Store the line number in LINENO
0B3975 23 
0B3976 50 
0B3977 0B 
0B3978 D9    0791** EXX				; HL: Pointer to the BASIC program area
0B3979 D1    0792** POP     DE			; DE: The NEW line number
0B397A 23    0793** INC     HL
0B397B 73    0794** LD      (HL),E          	; Write out the NEW line number to the BASIC program
0B397C 23    0795** INC     HL
0B397D 72    0796** LD      (HL),D
0B397E 23    0797** INC     HL
0B397F 0D    0798** DEC     C			; Subtract 3 from the line length to compensate for increasing HL by 3 above
0B3980 0D    0799** DEC     C
0B3981 0D    0800** DEC     C
0B3982 79    0801** LD	A,C
0B3983 01    0802** LD	BC,0
0B3984 00 
0B3985 00 
0B3986 00 
0B3987 4F    0803** LD	C,A			; BC: Line length
             0804** ;
0B3988 3E    0805** RENUM7:			LD      A,LINO_MN			; A: The token code that precedes any line number encoded in BASIC (i.e. GOTO/GOSUB)
0B3989 8D 
0B398A ED    0806** CPIR                    	; Search for the token
0B398B B1 
0B398C 20    0807** JR      NZ,RENUM3		; If not found, then loop to process the next line
0B398D D5 
             0808** ;
             0809** ; Having established this line contains at least one encoded line number, we need to update it to point to the new line number
             0810** ;
0B398E C5    0811** PUSH    BC			; Stack everything
0B398F E5    0812** PUSH    HL
0B3990 E5    0813** PUSH    HL			; HL: Pointer to encoded line number
0B3991 FD    0814** POP     IY			; IY: Pointer to encoded line number
0B3992 E1 
0B3993 D9    0815** EXX
0B3994 CD    0816** CALL    DECODE			; Decode the encoded line number (in HL')
0B3995 D7 
0B3996 0B 
0B3997 0B 
0B3998 D9    0817** EXX				; HL: Decoded line number
0B3999 44    0818** LD      B,H			; BC: Decoded line number
0B399A 4D    0819** LD      C,L
0B399B 2A    0820** LD      HL,(LOMEM)		; HL: Pointer to heap
0B399C 1A 
0B399D 50 
0B399E 0B 
             0821** ;
             0822** ; This section of code cross-references the decoded (OLD) line number with the list
             0823** ; created previously in the global heap
             0824** ;
0B399F 5E    0825** RENUM4:			LD      E,(HL)          	; DE: The OLD line number
0B39A0 23    0826** INC     HL
0B39A1 56    0827** LD      D,(HL)
0B39A2 23    0828** INC     HL
0B39A3 EB    0829** EX      DE,HL			; HL: The OLD line number, DE: Pointer in the global heap
0B39A4 B7    0830** OR      A               	; Clear the carry and...
0B39A5 52    0831** SBC.S   HL,BC			; Compare by means of subtraction the OLD line number against the one in the heap
0B39A6 ED 
0B39A7 42 
0B39A8 EB    0832** EX      DE,HL			; HL: Pointer in the global heap
0B39A9 5E    0833** LD      E,(HL)          	; DE: The NEW line number
0B39AA 23    0834** INC     HL
0B39AB 56    0835** LD      D,(HL)
0B39AC 23    0836** INC     HL
0B39AD 38    0837** JR      C,RENUM4		; Loop until there is a match (Z) or not (NC)
0B39AE F0 
0B39AF EB    0838** EX      DE,HL			; DE: Pointer in the global heap
0B39B0 28    0839** JR      Z,RENUM5        	; If Z flag is set, there is an exact match to the decoded line number on the heap
0B39B1 1D 
             0840** ;
0B39B2 CD    0841** CALL    TELL			; Display this error if the line number is not found
0B39B3 81 
0B39B4 40 
0B39B5 0B 
0B39B6 46    0842** DB    	"Failed at "
0B39B7 61 
0B39B8 69 
0B39B9 6C 
0B39B9 65   
0B39BA 64 
0B39BB 20 
0B39BC 61 
0B39BC 74   
0B39BD 20 
0B39C0 00    0843** DB    	0
0B39C1 2A    0844** LD      HL,(LINENO)
0B39C2 23 
0B39C3 50 
0B39C4 0B 
0B39C5 CD    0845** CALL    PBCDL
0B39C6 E8 
0B39C7 3C 
0B39C8 0B 
0B39C9 CD    0846** CALL    CRLF
0B39CA 38 
0B39CB 3C 
0B39CC 0B 
0B39CD 18    0847** JR      RENUM6			; And carry on renumbering
0B39CE 07 
             0848** ;
             0849** ; This snippet re-encodes the line number in the BASIC program
             0850** ;
0B39CF D1    0851** RENUM5:			POP     DE			; DE: Pointer to the encoded line number in the listing
0B39D0 D5    0852** PUSH    DE
0B39D1 1B    0853** DEC     DE			; Back up a byte to the LINO token
0B39D2 CD    0854** CALL    ENCODE          	; Re-write the new line number out
0B39D3 4D 
0B39D4 40 
0B39D5 0B 
0B39D6 E1    0855** RENUM6:			POP     HL			; HL: Pointer to the encoded line number in the listing
0B39D7 C1    0856** POP     BC			; BC: The remaining line length
0B39D8 18    0857** JR      RENUM7			; Carry on checking for any more encoded line numbers in this line
0B39D9 AE 
             0858** ;
             0859** ; AUTO
             0860** ; AUTO start,increment
             0861** ; AUTO start
             0862** ; AUTO ,increment
             0863** ;
0B39DA CD    0864** AUTO:			CALL    PAIR			; Get the parameter pair (HL: first parameter, BC: second parameter)
0B39DB 1C 
0B39DC 3F 
0B39DD 0B 
0B39DE 22    0865** LD      (AUTONO),HL		; Store the start in AUTONO
0B39DF 29 
0B39E0 50 
0B39E1 0B 
0B39E2 79    0866** LD      A,C			; Increment is 8 bit (0-255)
0B39E3 32    0867** LD      (INCREM),A		; Store that in INCREM
0B39E4 41 
0B39E5 50 
0B39E6 0B 
0B39E7 18    0868** JR      CLOOP0			; Jump back indirectly to the command loop via CLOOP0 (optimisation for size)
0B39E8 2E 
             0869** ;
             0870** ; BAD
             0871** ; NEW
             0872** ;
0B39E9 CD    0873** BAD:			CALL    TELL            	; Output "Bad program" error
0B39EA 81 
0B39EB 40 
0B39EC 0B 
0B39ED 03    0874** DB    3				; Token for "BAD"
0B39EE 70    0875** DB    "program"
0B39EF 72 
0B39F0 6F 
0B39F1 67 
0B39F1 72   
0B39F2 61 
0B39F3 6D 
0B39F5 0D    0876** DB    CR
0B39F6 0A    0877** DB    LF
0B39F7 00    0878** DB    0				; Falls through to NEW
             0879** ;
0B39F8 CD    0880** NEW:			CALL    NEWIT			; Call NEWIT (clears program area and variables)
0B39F9 5D 
0B39FA 3B 
0B39FB 0B 
0B39FC 18    0881** JR      CLOOP0			; Jump back indirectly to the command loop via CLOOP0 (optimisation for size)
0B39FD 19 
             0882** ;
             0883** ; OLD
             0884** ;
0B39FE 2A    0885** OLD:			LD      HL,(PAGE_)		; HL: The start of the BASIC program area
0B39FF 14 
0B3A00 50 
0B3A01 0B 
0B3A02 E5    0886** PUSH    HL			; Stack it
0B3A03 23    0887** INC     HL			; Skip the potential length byte of first line of code
0B3A04 23    0888** INC     HL			; And the line number word
0B3A05 23    0889** INC     HL
0B3A06 01    0890** LD      BC,252			; Look for a CR in the first 252 bytes of code; maximum line length
0B3A07 FC 
0B3A08 00 
0B3A09 00 
0B3A0A 3E    0891** LD      A,CR
0B3A0B 0D 
0B3A0C ED    0892** CPIR
0B3A0D B1 
0B3A0E 20    0893** JR      NZ,BAD			; If not found, then the first line of code is not a valid BBC BASIC code
0B3A0F D9 
0B3A10 7D    0894** LD      A,L			; It could still be garbage though! Store the position in A; this requires
0B3A11 E1    0895** POP     HL			; PAGE to be on a 256 page boundary, and is now the length of the first line
0B3A12 77    0896** LD      (HL),A			; Restore the length byte (this will have been set to 0 by NEW)
0B3A13 CD    0897** CALL    CLEAN			; Further checks for bad program, set TOP, write out &FFFF end of program marker
0B3A14 30 
0B3A15 3B 
0B3A16 0B 
0B3A17 C3    0898** CLOOP0:			JP      CLOOP			; Jump back to the command loop
0B3A18 71 
0B3A19 33 
0B3A1A 0B 
             0899** ;
             0900** ; LOAD filename
             0901** ;
0B3A1B CD    0902** LOAD:			CALL    EXPRS           	; Get the filename
0B3A1C 06 
0B3A1D 06 
0B3A1E 0B 
0B3A1F 3E    0903** LD      A,CR			; DE points to the last byte of filename in ACCS
0B3A20 0D 
0B3A21 12    0904** LD      (DE),A			; Terminate filename with a CR
0B3A22 CD    0905** CALL    LOAD0			; Load the file in, then CLEAN
0B3A23 10 
0B3A24 3B 
0B3A25 0B 
0B3A26 CD    0906** CALL    CLEAR			; Further checks for bad program, set TOP, write out &FFFF end of program marker
0B3A27 67 
0B3A28 3B 
0B3A29 0B 
0B3A2A 18    0907** JR      WARM0			; Jump back to the command loop
0B3A2B 21 
             0908** ;
             0909** ; SAVE filename
             0910** ;
0B3A2C CD    0911** SAVE:			CALL    SETTOP          	; Set TOP sysvar
0B3A2D 3C 
0B3A2E 3B 
0B3A2F 0B 
0B3A30 CD    0912** CALL    EXPRS           	; Get the filename
0B3A31 06 
0B3A32 06 
0B3A33 0B 
0B3A34 3E    0913** LD      A,CR			; Terminate the filename with a CR
0B3A35 0D 
0B3A36 12    0914** LD      (DE),A
0B3A37 ED    0915** LD      DE,(PAGE_)		; DE: Start of program memory
0B3A38 5B 
0B3A39 14 
0B3A3A 50 
0B3A3A 0B   
0B3A3C 2A    0916** LD      HL,(TOP)		; HL: Top of program memory
0B3A3D 17 
0B3A3E 50 
0B3A3F 0B 
0B3A40 B7    0917** OR      A			; Calculate program size (TOP-PAGE)
0B3A41 ED    0918** SBC     HL,DE
0B3A42 52 
0B3A43 44    0919** LD      B,H             	; BC: Length of program in bytes
0B3A44 4D    0920** LD      C,L
0B3A45 21    0921** LD      HL,ACCS			; HL: Address of the filename
0B3A46 00 
0B3A47 4D 
0B3A48 0B 
0B3A49 CD    0922** CALL    OSSAVE			; Call the SAVE routine in patch.asm
0B3A4A 1E 
0B3A4B 45 
0B3A4C 0B 
0B3A4D C3    0923** WARM0:			JP      WARM			; Jump back to the command loop
0B3A4E 70 
0B3A4F 33 
0B3A50 0B 
             0924** 
             0925** ;
             0926** ; ERROR
             0927** ; Called whenever BASIC needs to halt with an error
             0928** ; Error messages are indexed from 0
             0929** ; Inputs:
             0930** ;  A: Error number
             0931** ;
0B3A51 ED    0932** ERROR_:			LD      SP,(HIMEM)		; Set SP to HIMEM
0B3A52 7B 
0B3A53 20 
0B3A54 50 
0B3A54 0B   
0B3A56 21    0933** LD      HL,ERRWDS		; Index into the error string table
0B3A57 3A 
0B3A58 37 
0B3A59 0B 
0B3A5A B7    0934** OR      A			; We don't need to search for the first error
0B3A5B 28    0935** JR      Z,ERROR1		; So skip the search routine
0B3A5C 0A 
             0936** ;
             0937** ; Search the error table for error #A
             0938** ; HL will end up being the pointer into the correct error
             0939** ; There is no bounds checking on this, so invalid error numbers will probably output garbage
             0940** ;
0B3A5D 47    0941** LD      B,A             	; Store error number in B
0B3A5E 08    0942** EX      AF,AF'			; Store error number in AF'
0B3A5F AF    0943** XOR     A
0B3A60 BE    0944** ERROR0:			CP      (HL)			; Compare the character with 0 (the terminator byte)
0B3A61 23    0945** INC     HL			; Increment the string pointer
0B3A62 20    0946** JR      NZ,ERROR0		; Loop until with hit a 0
0B3A63 FC 
0B3A64 10    0947** DJNZ    ERROR0			; Decrements the error number and loop until 0
0B3A65 FA 
0B3A66 08    0948** EX      AF,AF'			; Restore the error number from AF'
             0949** ;
             0950** ; At this point HL points to the tokenised error string
             0951** ;
0B3A67 E5    0952** ERROR1:			PUSH    HL			; Stack the error string pointer and fall through to EXTERR
             0953** 
             0954** ;
             0955** ; EXTERR
             0956** ; Inputs:
             0957** ;  A: Error number
             0958** ;
             0959** ; This is the entry point for external errors, i.e. ones not in the ERRWDS table
             0960** ; The error text immediately follows the CALL to EXTERR, for example:
             0961** ; > CALL  EXTERR
             0962** ; > DB    "Silly", 0
             0963** ; So we can get the address of the string by popping the return address off the stack
             0964** ;
0B3A68 E1    0965** EXTERR:			POP     HL			; Pop the error string pointer
0B3A69 22    0966** LD      (ERRTXT),HL		; Store in ERRTXT sysvar
0B3A6A 2F 
0B3A6B 50 
0B3A6C 0B 
0B3A6D ED    0967** LD      SP,(HIMEM)		; Set SP to HIMEM
0B3A6E 7B 
0B3A6F 20 
0B3A70 50 
0B3A70 0B   
0B3A72 32    0968** LD      (ERR),A			; Store error number in ERR sysvar
0B3A73 3F 
0B3A74 50 
0B3A75 0B 
0B3A76 CD    0969** CALL    SETLIN			; Get line number
0B3A77 9F 
0B3A78 3C 
0B3A79 0B 
0B3A7A 22    0970** LD      (ERL),HL		; Store in ERL sysvar
0B3A7B 33 
0B3A7C 50 
0B3A7D 0B 
0B3A7E B7    0971** OR      A			; Is error number 0?
0B3A7F 28    0972** JR      Z,ERROR2		; Yes, so skip the next bit as error number 0 is untrappable
0B3A80 0D 
             0973** ;
0B3A81 2A    0974** LD      HL,(ERRTRP)		; Check whether the error is trapped
0B3A82 2C 
0B3A83 50 
0B3A84 0B 
0B3A85 7C    0975** LD      A,H
0B3A86 B5    0976** OR      L
0B3A87 E5    0977** PUSH    HL			; HL: Error line
0B3A88 FD    0978** POP     IY			; IY: HL
0B3A89 E1 
0B3A8A C2    0979** JP      NZ,XEQ         	 	; If error trapped, jump to XEQ
0B3A8B 87 
0B3A8C 0E 
0B3A8D 0B 
             0980** ;
0B3A8E 21    0981** ERROR2:			LD      HL,0
0B3A8F 00 
0B3A90 00 
0B3A91 00 
0B3A92 22    0982** LD      (AUTONO),HL		; Cancel AUTO
0B3A93 29 
0B3A94 50 
0B3A95 0B 
0B3A96 22    0983** LD      (TRACEN),HL     	; Cancel TRACE
0B3A97 26 
0B3A98 50 
0B3A99 0B 
0B3A9A CD    0984** CALL    RESET           	; Reset OPSYS
0B3A9B A7 
0B3A9C 46 
0B3A9D 0B 
0B3A9E CD    0985** CALL    CRLF			; Output newline
0B3A9F 38 
0B3AA0 3C 
0B3AA1 0B 
0B3AA2 CD    0986** CALL    REPORT          	; Output the error message
0B3AA3 73 
0B3AA4 40 
0B3AA5 0B 
0B3AA6 CD    0987** CALL    SAYLN			; Output " at line nnnn" message.
0B3AA7 D3 
0B3AA8 3C 
0B3AA9 0B 
0B3AAA 1E    0988** LD      E,0			; Close all files
0B3AAB 00 
0B3AAC DC    0989** CALL    C,OSSHUT
0B3AAD 1C 
0B3AAE 46 
0B3AAF 0B 
0B3AB0 CD    0990** CALL    CRLF			; Output newline
0B3AB1 38 
0B3AB2 3C 
0B3AB3 0B 
0B3AB4 C3    0991** JP      CLOOP			; Back to CLOOP
0B3AB5 71 
0B3AB6 33 
0B3AB7 0B 
             0992** ;
             0993** ; SUBROUTINES:
             0994** ;
             0995** ; LEX - SEARCH FOR KEYWORDS
             0996** ;   Inputs: HL = start of keyword table
             0997** ;           IY = start of match text
             0998** ;  Outputs: If found, Z-flag set, A=token.
             0999** ;           If not found, Z-flag reset, A=(IY).
             1000** ;           IY updated (if NZ, IY unchanged).
             1001** ; Destroys: A,B,H,L,IY,F
             1002** ;
0B3AB8 21    1003** LEX:			LD      HL,KEYWDS		; Address of the keywords table
0B3AB9 59 
0B3ABA 34 
0B3ABB 0B 
             1004** ;
0B3ABC FD    1005** LEX0:			LD      A,(IY)			; Fetch the character to match
0B3ABD 7E 
0B3ABE 00 
0B3ABF 46    1006** LD      B,(HL)			; B: The token from the keywords table
0B3AC0 23    1007** INC     HL			; Increment the pointer in the keywords table
0B3AC1 BE    1008** CP      (HL)			; Compare the first characters
0B3AC2 28    1009** JR      Z,LEX2			; If there is a match, then skip to LEX2
0B3AC3 08 
0B3AC4 D8    1010** RET     C               	; No match, so fail
             1011** ;
             1012** ; This snippet of code skips to the next token in the KEYWDS table
             1013** ;
0B3AC5 23    1014** LEX1:			INC     HL			; Increment the pointer
0B3AC6 CB    1015** BIT     7,(HL)			; Check if bit 7 set (all token IDs have bit 7 set)
0B3AC7 7E 
0B3AC8 28    1016** JR      Z,LEX1			; No, so loop
0B3AC9 FB 
0B3ACA 18    1017** JR      LEX0			; At this point HL is pointing to the start of the next keyword
0B3ACB F0 
             1018** ;
0B3ACC FD    1019** LEX2:			PUSH    IY              	; Save the input pointer
0B3ACD E5 
0B3ACE 23    1020** LEX3:			INC     HL			; Increment the keyword pointer
0B3ACF CB    1021** BIT     7,(HL)			; If we've reached the end (marked by the start of the next token) then
0B3AD0 7E 
0B3AD1 20    1022** JR      NZ,LEX6         	; Jump to here as we've found a token
0B3AD2 1C 
0B3AD3 FD    1023** INC     IY			; Increment the text pointer
0B3AD4 23 
0B3AD5 FD    1024** LD      A,(IY)			; Fetch the character
0B3AD6 7E 
0B3AD7 00 
0B3AD8 FE    1025** CP      '.'			; Is it an abbreviated keyword?
0B3AD9 2E 
0B3ADA 28    1026** JR      Z,LEX6          	; Yes, so we'll return with the token we've found
0B3ADB 13 
0B3ADC BE    1027** CP      (HL)			; Compare with the keywords list
0B3ADD 28    1028** JR      Z,LEX3			; It's a match, so continue checking this keyword
0B3ADE EF 
0B3ADF CD    1029** CALL    RANGE1			; Is it alphanumeric, '@', '_' or '`'
0B3AE0 6C 
0B3AE1 3F 
0B3AE2 0B 
0B3AE3 38    1030** JR      C,LEX5			; No, so check whether keyword needs to be immediately delimited
0B3AE4 04 
             1031** ;
0B3AE5 FD    1032** LEX4:			POP     IY              	; Restore the input pointer ready for the next search
0B3AE6 E1 
0B3AE7 18    1033** JR      LEX1			; And loop back to start again
0B3AE8 DC 
             1034** ;
             1035** ; This section handles the 0 byte at the end of keywords that indicate the keyword needs to be
             1036** ; immediately delimited
             1037** ;
0B3AE9 7E    1038** LEX5:			LD      A,(HL)			; Fetch the byte from the keywords table
0B3AEA B7    1039** OR      A			; If it is not zero, then...
0B3AEB 20    1040** JR      NZ,LEX4			; Keep searching
0B3AEC F8 
0B3AED FD    1041** DEC     IY			; If it is zero, then skip the input pointer back one byte
0B3AEE 2B 
             1042** ;
             1043** ; We've found a token at this point
             1044** ;
0B3AEF F1    1045** LEX6:			POP     AF			; Discard IY input pointer pushed on the stack
0B3AF0 AF    1046** XOR     A			; Set the Z flag
0B3AF1 78    1047** LD      A,B			; A: The token
0B3AF2 C9    1048** RET
             1049** ;
             1050** ; DEL - DELETE A PROGRAM LINE.
             1051** ;   Inputs: HL addresses program line.
             1052** ; Destroys: B,C,F
             1053** ;
             1054** ; This simply erases the line by moving all of the code after the line to be deleted back over
             1055** ; it using an LDIR
             1056** ;
0B3AF3 D5    1057** DEL:			PUSH    DE
0B3AF4 E5    1058** PUSH    HL
0B3AF5 E5    1059** PUSH    HL			; HL: Address of the program line
0B3AF6 06    1060** LD      B,0			; BC: Length of the line
0B3AF7 00 
0B3AF8 4E    1061** LD      C,(HL)
0B3AF9 09    1062** ADD     HL,BC			; HL: Advanced to the start of the next line
0B3AFA E5    1063** PUSH    HL
0B3AFB EB    1064** EX      DE,HL			; DE: Pointer to the next line
0B3AFC 2A    1065** LD      HL,(TOP)		; HL: Pointer to the end of the program
0B3AFD 17 
0B3AFE 50 
0B3AFF 0B 
0B3B00 ED    1066** SBC     HL,DE
0B3B01 52 
0B3B02 44    1067** LD      B,H			; BC: Size of block to move
0B3B03 4D    1068** LD      C,L
0B3B04 E1    1069** POP     HL			; HL: Pointer to next line
0B3B05 D1    1070** POP     DE			; DE: Pointer to this line
0B3B06 ED    1071** LDIR                    	; Delete the line
0B3B07 B0 
0B3B08 ED    1072** LD      (TOP),DE		; Adjust TOP
0B3B09 53 
0B3B0A 17 
0B3B0B 50 
0B3B0B 0B   
0B3B0D E1    1073** POP     HL
0B3B0E D1    1074** POP     DE
0B3B0F C9    1075** RET
             1076** ;
             1077** ;LOAD0 - LOAD A DISK FILE THEN CLEAN.
             1078** ;   Inputs: Filename in ACCS (term CR)
             1079** ; Destroys: A,B,C,D,E,H,L,F
             1080** ;
             1081** ;CLEAN - CHECK FOR BAD PROGRAM, FIND END OF TEXT
             1082** ; AND WRITE FF FF, THEN LOAD (TOP).
             1083** ; Destroys: A,B,C,H,L,F
             1084** ;
0B3B10 ED    1085** LOAD0: 			LD      DE,(PAGE_)		; DE: Beginning of BASIC program area
0B3B11 5B 
0B3B12 14 
0B3B13 50 
0B3B13 0B   
0B3B15 21    1086** LD      HL,-256
0B3B16 00 
0B3B17 FF 
0B3B18 FF 
0B3B19 39    1087** ADD     HL,SP
0B3B1A ED    1088** SBC     HL,DE           	; Find available space
0B3B1B 52 
0B3B1C 44    1089** LD      B,H
0B3B1D 4D    1090** LD      C,L
0B3B1E 21    1091** LD      HL,ACCS
0B3B1F 00 
0B3B20 4D 
0B3B21 0B 
0B3B22 CD    1092** CALL    OSLOAD          	; Call the OSLOAD function in patch
0B3B23 85 
0B3B24 44 
0B3B25 0B 
0B3B26 D4    1093** CALL    NC,NEWIT		; If NC then NEW
0B3B27 5D 
0B3B28 3B 
0B3B29 0B 
0B3B2A 3E    1094** LD      A,0
0B3B2B 00 
0B3B2C D2    1095** JP      NC,ERROR_        	; And trigger a "No room" error, otherwise...
0B3B2D 51 
0B3B2E 3A 
0B3B2F 0B 
             1096** ;
0B3B30 CD    1097** CLEAN:			CALL    SETTOP			; Set TOP sysvar
0B3B31 3C 
0B3B32 3B 
0B3B33 0B 
0B3B34 2B    1098** DEC     HL			; Write out the end of program markers
0B3B35 36    1099** LD      (HL),-1
0B3B36 FF 
0B3B37 2B    1100** DEC     HL
0B3B38 36    1101** LD      (HL),-1
0B3B39 FF 
0B3B3A 18    1102** JR      CLEAR			; Clear all dynamic variables and function/procedure pointers
0B3B3B 2B 
             1103** ;
             1104** ; Set the TOP sysvar; the first free location after the end of the current program
             1105** ; Returns:
             1106** ; - HL: TOP
             1107** ;
0B3B3C 2A    1108** SETTOP:			LD      HL,(PAGE_)		; Start at beginning of BASIC program area
0B3B3D 14 
0B3B3E 50 
0B3B3F 0B 
0B3B40 01    1109** LD	BC, 0			; BC: 0
0B3B41 00 
0B3B42 00 
0B3B43 00 
0B3B44 3E    1110** LD      A,CR			; End of line marker
0B3B45 0D 
0B3B46 4E    1111** SETOP1:			LD      C,(HL)			; BC: Get first byte of program line (line length)
0B3B47 0C    1112** INC     C			; Check for zero
0B3B48 0D    1113** DEC     C
0B3B49 28    1114** JR      Z,SETOP2		; If it is zero, we've reached the end
0B3B4A 0A 
0B3B4B 09    1115** ADD     HL,BC			; Skip to next line
0B3B4C 2B    1116** DEC     HL			; Check end of previous line
0B3B4D BE    1117** CP      (HL)
0B3B4E 23    1118** INC     HL
0B3B4F 28    1119** JR      Z,SETOP1		; If CR then loop
0B3B50 F5 
0B3B51 C3    1120** JP      BAD			; If anything else, then something has gone wrong - trip a Bad Program error
0B3B52 E9 
0B3B53 39 
0B3B54 0B 
             1121** ;
0B3B55 23    1122** SETOP2:			INC     HL             		; Skip the 3 byte end of program marker (&00, &FF, &FF)
0B3B56 23    1123** INC     HL			; NB: Called from NEWIT
0B3B57 23    1124** INC     HL
0B3B58 22    1125** LD      (TOP),HL		; Store in TOP sysvar
0B3B59 17 
0B3B5A 50 
0B3B5B 0B 
0B3B5C C9    1126** RET
             1127** ;
             1128** ; NEWIT - NEW PROGRAM THEN CLEAR
             1129** ;   Destroys: H,L
             1130** ;
             1131** ; CLEAR - CLEAR ALL DYNAMIC VARIABLES INCLUDING
             1132** ; FUNCTION AND PROCEDURE POINTERS.
             1133** ;   Destroys: Nothing
             1134** ;
0B3B5D 2A    1135** NEWIT:			LD      HL,(PAGE_)		; HL: First byte of BASIC program area
0B3B5E 14 
0B3B5F 50 
0B3B60 0B 
0B3B61 36    1136** LD      (HL),0			; Stick a 0 in there
0B3B62 00 
0B3B63 CD    1137** CALL    SETOP2			; Skip three bytes to get to end of empty BASIC program area and set TOP sysvar
0B3B64 55 
0B3B65 3B 
0B3B66 0B 
             1138** ;
0B3B67 E5    1139** CLEAR:			PUSH    HL			; Stack the BASIC program pointer
0B3B68 2A    1140** LD      HL,(TOP)		; Get the TOP sysvar - first available byte after BASIC
0B3B69 17 
0B3B6A 50 
0B3B6B 0B 
0B3B6C 22    1141** LD      (LOMEM),HL		; Set the LOMEM sysvar
0B3B6D 1A 
0B3B6E 50 
0B3B6F 0B 
0B3B70 22    1142** LD      (FREE),HL		; And the FREE sysvar with that value
0B3B71 1D 
0B3B72 50 
0B3B73 0B 
0B3B74 21    1143** LD      HL,DYNVAR		; Get the pointer to the dynamic variable pointers buffer in RAM
0B3B75 6C 
0B3B76 4F 
0B3B77 0B 
0B3B78 C5    1144** PUSH    BC
             1145** ; LD      B,3*(54+2)		; Loop counter
0B3B79 06    1146** LD      B,54+2*3		; ez80asm doesn't do () in expressions
0B3B7A A8 
0B3B7B 36    1147** CLEAR1:			LD      (HL),0			; Clear the dynamic variable pointers
0B3B7C 00 
0B3B7D 23    1148** INC     HL
0B3B7E 10    1149** DJNZ    CLEAR1
0B3B7F FB 
0B3B80 C1    1150** POP     BC
0B3B81 E1    1151** POP     HL			; Restore the BASIC program pointer
0B3B82 C9    1152** RET
             1153** ;
             1154** ;LISTIT - LIST A PROGRAM LINE.
             1155** ;    Inputs: HL addresses line
             1156** ;            DE = line number (binary)
             1157** ;            IX = Pointer to LISTON
             1158** ;             B = FOR/NEXT indent level
             1159** ;             C = REPEAT/UNTIL indent level
             1160** ;  Destroys: A,D,E,B',C',D',E',H',L',IY,F
             1161** ;
0B3B83 E5    1162** LISTIT:			PUSH    HL			; Stack the address of the line
0B3B84 EB    1163** EX      DE,HL			; HL: Line number
0B3B85 C5    1164** PUSH    BC
0B3B86 CD    1165** CALL    PBCD			; Print the line number
0B3B87 EC 
0B3B88 3C 
0B3B89 0B 
0B3B8A C1    1166** POP     BC
0B3B8B E1    1167** POP     HL			; HL: Address of the first token/character
0B3B8C 7E    1168** LD      A,(HL)			; Fetch the token
0B3B8D FE    1169** CP      NEXT			; Is it NEXT...
0B3B8E ED 
0B3B8F CC    1170** CALL    Z,INDENT		; Yes, so indent in
0B3B90 19 
0B3B91 3C 
0B3B92 0B 
0B3B93 FE    1171** CP      UNTIL			; Or is it UNTIL...
0B3B94 FD 
0B3B95 CC    1172** CALL    Z,INDENT		; Yes, so indent in
0B3B96 19 
0B3B97 3C 
0B3B98 0B 
0B3B99 D9    1173** EXX
0B3B9A 3E    1174** LD      A,' '
0B3B9B 20 
0B3B9C DD    1175** BIT     0,(IX)			; If BIT 0 of LISTON is set
0B3B9D CB 
0B3B9E 00 
0B3B9F 46 
0B3BA0 C4    1176** CALL    NZ,OUTCHR		; Then print a space after the line number
0B3BA1 40 
0B3BA2 3C 
0B3BA3 0B 
0B3BA4 78    1177** LD      A,B			; Fetch the FOR/NEXT indent level
0B3BA5 87    1178** ADD     A,A			; Multiply by 2
0B3BA6 DD    1179** BIT     1,(IX)			; If BIT 1 of LISTON is set
0B3BA7 CB 
0B3BA8 00 
0B3BA9 4E 
0B3BAA C4    1180** CALL    NZ,FILL			; Then print the FOR/NEXT indent
0B3BAB E0 
0B3BAC 1A 
0B3BAD 0B 
0B3BAE 79    1181** LD      A,C			; Fetch the REPEAT/UNTIL indent level
0B3BAF 87    1182** ADD     A,A			; Multiply by 2
0B3BB0 DD    1183** BIT     2,(IX)			; If BIT 2 of LISTON is set
0B3BB1 CB 
0B3BB2 00 
0B3BB3 56 
0B3BB4 C4    1184** CALL    NZ,FILL			; Then print the REPEAT/UNTIL indent
0B3BB5 E0 
0B3BB6 1A 
0B3BB7 0B 
0B3BB8 D9    1185** EXX
0B3BB9 7E    1186** LD      A,(HL)			; Fetch the token
0B3BBA FE    1187** CP      FOR			; Is it FOR?
0B3BBB E3 
0B3BBC CC    1188** CALL    Z,INDENT		; Yes, so indent
0B3BBD 19 
0B3BBE 3C 
0B3BBF 0B 
0B3BC0 FE    1189** CP      REPEAT			; Is it REPEAT?
0B3BC1 F5 
0B3BC2 CC    1190** CALL    Z,INDENT		; Yes, so indent
0B3BC3 19 
0B3BC4 3C 
0B3BC5 0B 
0B3BC6 1E    1191** LD      E,0			; E: The quote counter - reset to 0
0B3BC7 00 
0B3BC8 7E    1192** LIST8:			LD      A,(HL)			; Fetch a character / token byte
0B3BC9 23    1193** INC     HL
0B3BCA FE    1194** CP      CR			; Is it end of line?
0B3BCB 0D 
0B3BCC 28    1195** JR      Z,LISTE			; Yes, so finish (DB: Used to jump to CRLF, modified for *EDIT)
0B3BCD 0B 
0B3BCE FE    1196** CP      34			; Is it a quote character?
0B3BCF 22 
0B3BD0 20    1197** JR      NZ,LIST7		; No, so skip to next bit
0B3BD1 01 
0B3BD2 1C    1198** INC     E			; Otherwise increment quote counter
0B3BD3 CD    1199** LIST7:			CALL    LOUT			; Output the character / token
0B3BD4 08 
0B3BD5 3C 
0B3BD6 0B 
0B3BD7 18    1200** JR      LIST8			; And repeat
0B3BD8 EF 
             1201** ;
             1202** ; DB: Modification for *EDIT
             1203** ; Terminate the line with either a CRLF or a NUL character
             1204** ;
0B3BD9 DD    1205** LISTE:			BIT 	3,(IX)			; Are we printing to buffer?
0B3BDA CB 
0B3BDB 00 
0B3BDC 5E 
0B3BDD 28    1206** JR	Z, CRLF			; Yes, so print a CRLF
0B3BDE 59 
0B3BDF AF    1207** XOR	A			; Otherwise print a NUL (0)
0B3BE0 C3    1208** JP	OSWRCH
0B3BE1 F1 
0B3BE2 41 
0B3BE3 0B 
             1209** ;
             1210** ; Decode the 3 byte GOTO type line number
             1211** ;
0B3BE4 E5    1212** PRLINO:			PUSH    HL			; Swap HL and IY
0B3BE5 FD    1213** POP     IY			; IY: Pointer to the line number
0B3BE6 E1 
0B3BE7 C5    1214** PUSH    BC
0B3BE8 CD    1215** CALL    DECODE			; Decode
0B3BE9 D7 
0B3BEA 0B 
0B3BEB 0B 
0B3BEC C1    1216** POP     BC
0B3BED D9    1217** EXX
0B3BEE C5    1218** PUSH    BC
0B3BEF CD    1219** CALL    PBCDL			; Output the line number
0B3BF0 E8 
0B3BF1 3C 
0B3BF2 0B 
0B3BF3 C1    1220** POP     BC
0B3BF4 D9    1221** EXX
0B3BF5 FD    1222** PUSH    IY			; Swap HL and IY
0B3BF6 E5 
0B3BF7 E1    1223** POP     HL			; HL: Pointer to the next character in the line
0B3BF8 C9    1224** RET
             1225** ;
             1226** ; DB: Modification for internationalisation
             1227** ;
0B3BF9 CD    1228** PRREM:			CALL	OUT_			; Output the REM token
0B3BFA 5D 
0B3BFB 3C 
0B3BFC 0B 
0B3BFD 7E    1229** @@:			LD	A, (HL)			; Fetch the character
0B3BFE FE    1230** CP	CR			; If it is end of line, then
0B3BFF 0D 
0B3C00 C8    1231** RET	Z			; we have finished
0B3C01 CD    1232** CALL	OUTCHR			; Ouput the character
0B3C02 40 
0B3C03 3C 
0B3C04 0B 
0B3C05 23    1233** INC	HL
0B3C06 18    1234** JR	@B			; And loop
0B3C07 F5 
             1235** ;
             1236** ; DB: End of modification
             1237** ;
0B3C08 CB    1238** LOUT:			BIT     0,E			; If the quote counter is odd (bit 1 set) then
0B3C09 43 
0B3C0A 20    1239** JR      NZ,OUTCHR		; don't tokenise, just output the character
0B3C0B 34 
0B3C0C FE    1240** CP	REM			; DB: Is it REM
0B3C0D F4 
0B3C0E 28    1241** JR	Z, PRREM		; DB: Yes so jump to the special case for REM
0B3C0F E9 
0B3C10 FE    1242** CP      LINO_MN			; Is it a line number (following GOTO/GOSUB etc)?
0B3C11 8D 
0B3C12 28    1243** JR      Z,PRLINO		; Yes, so decode and print the line number
0B3C13 D0 
0B3C14 CD    1244** CALL    OUT_			; Output a character / keyword
0B3C15 5D 
0B3C16 3C 
0B3C17 0B 
0B3C18 7E    1245** LD      A,(HL)			; Fetch the next character
             1246** ;
             1247** ; This block of code handles the indentation
             1248** ; B: Counter for FOR/NEXT indent
             1249** ; C: Counter for REPEAT/UNTIL indent
             1250** ;
0B3C19 D9    1251** INDENT:			EXX
0B3C1A FE    1252** CP      FOR			; If the token is FOR
0B3C1B E3 
0B3C1C 28    1253** JR      Z,IND1			; Then INC B
0B3C1D 09 
0B3C1E FE    1254** CP      NEXT			; If it is NEXT
0B3C1F ED 
0B3C20 20    1255** JR      NZ,IND2_		; Then...
0B3C21 06 
0B3C22 05    1256** DEC     B			; DEC B
0B3C23 F2    1257** JP      P,IND2_			; If we have gone below 0 then
0B3C24 28 
0B3C25 3C 
0B3C26 0B 
0B3C27 04    1258** IND1:			INC     B			; Increment back to 0
             1259** ;
0B3C28 FE    1260** IND2_:			CP      REPEAT			; If the token is REPEAT
0B3C29 F5 
0B3C2A 28    1261** JR      Z,IND3			; Then INC C
0B3C2B 09 
0B3C2C FE    1262** CP      UNTIL			; If it is UNTIL
0B3C2D FD 
0B3C2E 20    1263** JR      NZ,IND4			; Then...
0B3C2F 06 
0B3C30 0D    1264** DEC     C			; DEC C
0B3C31 F2    1265** JP      P,IND4			; If we have gone below 0 then
0B3C32 36 
0B3C33 3C 
0B3C34 0B 
0B3C35 0C    1266** IND3:			INC     C			; Incremet back to 0
0B3C36 D9    1267** IND4:			EXX
0B3C37 C9    1268** RET
             1269** ;
             1270** ;CRLF - SEND CARRIAGE RETURN, LINE FEED.
             1271** ;  Destroys: A,F
             1272** ;OUTCHR - OUTPUT A CHARACTER TO CONSOLE.
             1273** ;    Inputs: A = character
             1274** ;  Destroys: A,F
             1275** ;
0B3C38 3E    1276** CRLF:			LD      A,CR			; Output CR
0B3C39 0D 
0B3C3A CD    1277** CALL    OUTCHR
0B3C3B 40 
0B3C3C 3C 
0B3C3D 0B 
0B3C3E 3E    1278** LD      A,LF			; Output LF
0B3C3F 0A 
             1279** ;
0B3C40 CD    1280** OUTCHR:			CALL    OSWRCH			; Output the character in A
0B3C41 F1 
0B3C42 41 
0B3C43 0B 
0B3C44 D6    1281** SUB     CR			; Check for CR
0B3C45 0D 
0B3C46 28    1282** JR      Z,CARRET		; If it is CR then A will be 0, this will clear the count
0B3C47 06 
0B3C48 D8    1283** RET     C              		; If it is less than CR, it is non-printing, so don't increment the count
0B3C49 3A    1284** LD      A,(COUNT)		; Increment the count
0B3C4A 3D 
0B3C4B 50 
0B3C4C 0B 
0B3C4D 3C    1285** INC     A
             1286** ;
0B3C4E 32    1287** CARRET:			LD      (COUNT),A		; Store the new count value
0B3C4F 3D 
0B3C50 50 
0B3C51 0B 
0B3C52 C8    1288** RET     Z			; Return if the count has wrapped to 0
0B3C53 E5    1289** PUSH    HL			; Now check if count = print width
0B3C54 2A    1290** LD      HL,(WIDTH)		; Get the print width; it's a byte value, so
0B3C55 3E 
0B3C56 50 
0B3C57 0B 
0B3C58 BD    1291** CP      L			; L is the width. Compare it with count.
0B3C59 E1    1292** POP     HL
0B3C5A C0    1293** RET     NZ			; If we've not hit print width, then just return
0B3C5B 18    1294** JR      CRLF			; Otherwise output CRLF
0B3C5C DB 
             1295** ;
             1296** ; OUT - SEND CHARACTER OR KEYWORD
             1297** ;   Inputs: A = character (>=10, <128)
             1298** ;           A = Token (<10, >=128)
             1299** ;  Destroys: A,F
             1300** ;
0B3C5D FE    1301** OUT_:			CP      138			; Neat trick to do condition: If A >= 10 or < 128 then PE flag is set
0B3C5E 8A 
0B3C5F EA    1302** JP      PE,OUTCHR		; If so, then it's a character, so just output it
0B3C60 40 
0B3C61 3C 
0B3C62 0B 
             1303** ;
             1304** ; This bit looks up the character in the KEYWDS token table and expands it
             1305** ; Note the CP 138; this sets the overflow flag as follows:
             1306** ;
             1307** ; NB:
             1308** ;  1. Any 8-bit number between 128 and 255 is negative (two's complement) so 138 is -118, 128 = -128
             1309** ;  2. CP is effectively a SUB; sets the flags without affecting A
             1310** ;  3. The operation n - -118 ~ n + 118
             1311** ;
             1312** ; So:
             1313** ;  *   9 CP 138 ~    9 + 118 = 127 = no overflow : token
             1314** ;  *  10 CP 138 ~   10 + 118 = 128 =    overflow : character
             1315** ;  * 127 CP 138 ~  127 + 118 = 245 =    overflow : character
             1316** ;  * 128 CP 138 ~ -128 + 118 = -10 = no overflow : token
             1317** ;
0B3C63 C5    1318** PUSH    BC			; Preserve BC and HL
0B3C64 E5    1319** PUSH    HL
0B3C65 21    1320** LD      HL,KEYWDS		; The list of tokens and keywords
0B3C66 59 
0B3C67 34 
0B3C68 0B 
0B3C69 01    1321** LD      BC,KEYWDL		; The length of the keyword list
0B3C6A DF 
0B3C6B 02 
0B3C6C 00 
0B3C6D ED    1322** CPIR				; We can just do a straight CPIR as the token characters are unique in the list
0B3C6E B1 
             1323** ;							; At this point HL points to the next byte, the first character of the token
0B3C6F 7E    1324** TOKEN1:			LD      A,(HL)			; Fetch the character
0B3C70 23    1325** INC     HL			; Increment to the next byte in the token table
0B3C71 FE    1326** CP      138			; If A >= 10 or < 128, i.e. we've not hit the token code for the next token
0B3C72 8A 
0B3C73 F5    1327** PUSH    AF			; Then...
0B3C74 EC    1328** CALL    PE,OUTCHR		; Output the character...
0B3C75 40 
0B3C76 3C 
0B3C77 0B 
0B3C78 F1    1329** POP     AF			;
0B3C79 EA    1330** JP      PE,TOKEN1		; And loop to the next character
0B3C7A 6F 
0B3C7B 3C 
0B3C7C 0B 
0B3C7D E1    1331** POP     HL			; Done, so tidy up the stack and exit
0B3C7E C1    1332** POP     BC
0B3C7F C9    1333** RET
             1334** ;
             1335** ; FINDL - FIND PROGRAM LINE
             1336** ;   Inputs: HL = line number (binary)
             1337** ;  Outputs: HL addresses line (if found)
             1338** ;           DE = line number
             1339** ;           Z-flag set if found.
             1340** ; Destroys: A,B,C,D,E,H,L,F
             1341** ;
0B3C80 EB    1342** FINDL:			EX      DE,HL			; DE: Line number (binary)
0B3C81 2A    1343** LD      HL,(PAGE_)		; HL: Top of BASIC program area
0B3C82 14 
0B3C83 50 
0B3C84 0B 
0B3C85 AF    1344** XOR     A               	;  A: 0
0B3C86 BE    1345** CP      (HL)			; Check for end of program marker
0B3C87 3C    1346** INC     A			;  A: 1
0B3C88 D0    1347** RET     NC			; Return with 1 if 0
0B3C89 AF    1348** XOR     A               	; Clear the carry flag
             1349** ;			LD      B,A			;  B: 0
0B3C8A 01    1350** LD	BC, 0			; BC: 0
0B3C8B 00 
0B3C8C 00 
0B3C8D 00 
             1351** ;
0B3C8E 4E    1352** FINDL1:			LD      C,(HL)			;  C: The line length
0B3C8F E5    1353** PUSH    HL			; Stack the current program counter
0B3C90 23    1354** INC     HL			; Skip to the line number bytes
0B3C91 7E    1355** LD      A,(HL)			; Fetch the line number (in binary) from the BASIC line in HL
0B3C92 23    1356** INC     HL
0B3C93 66    1357** LD      H,(HL)
0B3C94 6F    1358** LD      L,A
0B3C95 52    1359** SBC.S   HL,DE			; Compare with the line number we're searching for
0B3C96 ED 
0B3C97 52 
0B3C98 E1    1360** POP     HL			; Get the current program counter
0B3C99 D0    1361** RET     NC              	; Then return if found or past (Z flag will be set if line number matches)
0B3C9A 09    1362** ADD     HL,BC			; Skip to the next line (B was set to 0 before the loop was entered)
0B3C9B C3    1363** JP      FINDL1			; And loop
0B3C9C 8E 
0B3C9D 3C 
0B3C9E 0B 
             1364** ;
             1365** ; SETLIN - Search program for line containing address
             1366** ;          Update (LINENO)
             1367** ;   Inputs: Address in (ERRLIN)
             1368** ;  Outputs: Line number in HL and (LINENO)
             1369** ; Destroys: B,C,D,E,H,L,F
             1370** ;
0B3C9F 01    1371** SETLIN:			LD	BC, 0			; Zero BC for later
0B3CA0 00 
0B3CA1 00 
0B3CA2 00 
             1372** ;			LD      B, 0			; Zero B for later
0B3CA3 ED    1373** LD      DE, (ERRLIN)		; DE: Address of line
0B3CA4 5B 
0B3CA5 35 
0B3CA6 50 
0B3CA6 0B   
0B3CA8 2A    1374** LD      HL, (PAGE_)		; HL: Start of user program area
0B3CA9 14 
0B3CAA 50 
0B3CAB 0B 
0B3CAC B7    1375** OR      A			; Do a 24 bit compare without destroying HL
0B3CAD ED    1376** SBC     HL, DE			;  Z: DE = HL, NC: DE <= HL
0B3CAE 52 
0B3CAF 19    1377** ADD     HL, DE			;  C: DE > HL
0B3CB0 30    1378** JR      NC, SET3		; So skip, as the address is less than or equal to the top of program area
0B3CB1 1B 
             1379** ;
0B3CB2 4E    1380** SET1:			LD      C, (HL)			; Get the length of the line; zero indicates the end of the BASIC program
0B3CB3 0C    1381** INC     C			; This is a way to check for zero without using the accumulator
0B3CB4 0D    1382** DEC     C			; If it is zero, then...
0B3CB5 28    1383** JR      Z, SET3			; We've reached the end of the current BASIC program, not found the line
0B3CB6 16 
0B3CB7 09    1384** ADD     HL, BC			; Skip to the next line (we set B to 0 at the top of this subroutine)
0B3CB8 ED    1385** SBC     HL, DE			; Do a 24-bit compare; the previous ADD will have cleared the carry flag
0B3CB9 52 
0B3CBA 19    1386** ADD     HL, DE
0B3CBB 38    1387** JR      C, SET1			; Loop whilst DE (the address to search for) is > HL (the current line)
0B3CBC F5 
0B3CBD ED    1388** SBC     HL, BC			; We've found it, so back up to the beginning of the line
0B3CBE 42 
0B3CBF 23    1389** INC     HL			; Skip the length counter
0B3CC0 11    1390** LD	DE, 0			; Zero DE
0B3CC1 00 
0B3CC2 00 
0B3CC3 00 
0B3CC4 5E    1391** LD      E, (HL)          	; Fetch the line number
0B3CC5 23    1392** INC     HL
0B3CC6 56    1393** LD      D, (HL)
0B3CC7 EB    1394** EX      DE, HL			; HL: The line number
0B3CC8 22    1395** SET2:			LD      (LINENO), HL		; Store in the variable LINENO
0B3CC9 23 
0B3CCA 50 
0B3CCB 0B 
0B3CCC C9    1396** RET
             1397** ;
0B3CCD 21    1398** SET3:			LD      HL, 0			; We've not found the line at this point so
0B3CCE 00 
0B3CCF 00 
0B3CD0 00 
0B3CD1 18    1399** JR      SET2			; Set LINENO to 0
0B3CD2 F5 
             1400** ;
             1401** ;SAYLN - PRINT " at line nnnn" MESSAGE.
             1402** ;  Outputs: Carry=0 if line number is zero.
             1403** ;           Carry=1 if line number is non-zero.
             1404** ; Destroys: A,B,C,D,E,H,L,F
             1405** ;
0B3CD3 2A    1406** SAYLN:			LD      HL,(LINENO)		; Get the LINENO sysvar
0B3CD4 23 
0B3CD5 50 
0B3CD6 0B 
0B3CD7 7C    1407** LD      A,H			; If it is zero then
0B3CD8 B5    1408** OR      L
0B3CD9 C8    1409** RET     Z			; Don't need to do anything; return with F:C set to 0
0B3CDA CD    1410** CALL    TELL			; Output the error message
0B3CDB 81 
0B3CDC 40 
0B3CDD 0B 
0B3CDE 20    1411** DB    	" at line ", 0
0B3CDF 61 
0B3CE0 74 
0B3CE1 20 
0B3CE1 6C   
0B3CE2 69 
0B3CE3 6E 
0B3CE4 65 
0B3CE4 20   
0B3CE5 00 
0B3CE8 0E    1412** PBCDL:			LD      C,0			; C: Leading character (NUL)
0B3CE9 00 
0B3CEA 18    1413** JR      PBCD0			; Output the line number; return with F:C set to 1
0B3CEB 02 
             1414** ;
             1415** ; PBCD - PRINT NUMBER AS DECIMAL INTEGER.
             1416** ;   Inputs: HL = number (binary).
             1417** ;  Outputs: Carry = 1
             1418** ; Destroys: A,B,C,D,E,H,L,F
             1419** ;
0B3CEC 0E    1420** PBCD:			LD      C,' '			; C: Leading character (" ")
0B3CED 20 
0B3CEE 06    1421** PBCD0:			LD      B,5			; Number of digits in result
0B3CEF 05 
0B3CF0 11    1422** LD      DE,10000		; Start off with the 10,000 column
0B3CF1 10 
0B3CF2 27 
0B3CF3 00 
0B3CF4 AF    1423** PBCD1:			XOR     A			; Counter
0B3CF5 ED    1424** PBCD2:			SBC     HL,DE			; Loop and count how many 10,000s we have
0B3CF6 52 
0B3CF7 3C    1425** INC     A
0B3CF8 30    1426** JR      NC,PBCD2
0B3CF9 FB 
0B3CFA 19    1427** ADD     HL,DE			; The loop overruns by one, so adjust here
0B3CFB 3D    1428** DEC     A			; A: Number of 10,000s
0B3CFC 28    1429** JR      Z,PBCD3			; If it is 0, then skip the next bit
0B3CFD 04 
0B3CFE CB    1430** SET     4,C			; C: Set to '0' ASCII (30h)
0B3CFF E1 
0B3D00 CB    1431** SET     5,C
0B3D01 E9 
0B3D02 B1    1432** PBCD3:			OR      C			; A is then an ASCII character, or 00h if we've not processed any non-zero digits yet
0B3D03 C4    1433** CALL    NZ,OUTCHR		; If it is not a leading NUL character then output it
0B3D04 40 
0B3D05 3C 
0B3D06 0B 
0B3D07 78    1434** LD      A,B			; If on first transition, skip this
0B3D08 FE    1435** CP      5			; TODO: Need to find out why
0B3D09 05 
0B3D0A 28    1436** JR      Z,PBCD4
0B3D0B 06 
0B3D0C 29    1437** ADD     HL,HL			; HL x  2 : We shift the number being tested left,
0B3D0D 54    1438** LD      D,H			;         : rather than shifting DE right
0B3D0E 5D    1439** LD      E,L			;         : This makes a lot of sense
0B3D0F 29    1440** ADD     HL,HL			; HL x  4
0B3D10 29    1441** ADD     HL,HL			; HL x  8
0B3D11 19    1442** ADD     HL,DE			; HL x 10
0B3D12 11    1443** PBCD4:			LD      DE,1000			; Set the column heading to 1,000s for subsequent runs
0B3D13 E8 
0B3D14 03 
0B3D15 00 
0B3D16 10    1444** DJNZ    PBCD1			; Loop until done
0B3D17 DC 
0B3D18 37    1445** SCF				; SCF set for SAYLN in this module
0B3D19 C9    1446** RET
             1447** ;
             1448** ; PUTVAR - CREATE VARIABLE AND INITIALISE TO ZERO.
             1449** ;   Inputs: HL, IY as returned from GETVAR (NZ).
             1450** ;  Outputs: As GETVAR.
             1451** ; Destroys: everything
             1452** ;
0B3D1A CD    1453** PUTVAR:			CALL    CREATE			; Create the variable
0B3D1B 9F 
0B3D1C 3E 
0B3D1D 0B 
0B3D1E FD    1454** LD      A,(IY)			; Fetch the next character
0B3D1F 7E 
0B3D20 00 
0B3D21 FE    1455** CP      '('			; Check for bad use of array
0B3D22 28 
0B3D23 20    1456** JR      NZ,GETVZ        	; It's fine, so set the exit conditions
0B3D24 70 
0B3D25 3E    1457** ARRAY:			LD      A,14            	; Otherwise Error: 'Array'
0B3D26 0E 
0B3D27 C3    1458** ERROR3:			JP      ERROR_
0B3D28 51 
0B3D29 3A 
0B3D2A 0B 
             1459** ;
             1460** ;GETVAR - GET LOCATION OF VARIABLE, RETURN IN HL & IX
             1461** ;   Inputs: IY addresses first character.
             1462** ;  Outputs: Carry set and NZ if illegal character.
             1463** ;           Z-flag set if variable found, then:
             1464** ;            A = variable type (0,4,5,128 or 129)
             1465** ;            HL = IX = variable pointer.
             1466** ;            IY updated
             1467** ;           If Z-flag & carry reset, then:
             1468** ;            HL, IY set for subsequent PUTVAR call.
             1469** ; Destroys: everything
             1470** ;
0B3D2B FD    1471** GETVAR:			LD      A,(IY)			; Get the first character
0B3D2C 7E 
0B3D2D 00 
0B3D2E FE    1472** CP      '$'			; Is it a string?
0B3D2F 24 
0B3D30 28    1473** JR      Z,GETV4			; Yes, so branch here
0B3D31 69 
0B3D32 FE    1474** CP      '!'			; Is it indirection (32-bit)?
0B3D33 21 
0B3D34 28    1475** JR      Z,GETV5			; Yes, so branch here
0B3D35 69 
0B3D36 FE    1476** CP      '?'			; Is it indirection (8-bit)?
0B3D37 3F 
0B3D38 28    1477** JR      Z,GETV6			; Yes, so branch here
0B3D39 69 
             1478** ;
0B3D3A CD    1479** CALL    LOCATE			; Locate the variable
0B3D3B 09 
0B3D3C 3E 
0B3D3D 0B 
0B3D3E C0    1480** RET     NZ			; And exit here if not found
             1481** ;
             1482** ; At this point:
             1483** ;  HL: Address of variable in memory
             1484** ;   D: Variable type (4 = Integer, 5 = Floating point, 129 = String)
             1485** ;
0B3D3F FD    1486** LD      A,(IY)			; Further checks
0B3D40 7E 
0B3D41 00 
0B3D42 FE    1487** CP      '('             	; Is it an array?
0B3D43 28 
0B3D44 20    1488** JR      NZ,GETVX        	; No, so exit
0B3D45 47 
             1489** ;
             1490** ; We are processing an array at this point
             1491** ;
0B3D46 D5    1492** PUSH    DE              	; Save the variable type (in D)
0B3D47 7E    1493** LD      A,(HL)          	; Fetch the number of dimensions
0B3D48 B7    1494** OR      A
0B3D49 28    1495** JR      Z,ARRAY			; If there are none, then Error: 'Array'
0B3D4A DA 
0B3D4B 23    1496** INC     HL			;
0B3D4C 11    1497** LD      DE,0            	; Accumulator
0B3D4D 00 
0B3D4E 00 
0B3D4F 00 
0B3D50 F5    1498** PUSH    AF
0B3D51 FD    1499** INC     IY              	; Skip "("
0B3D52 23 
0B3D53 18    1500** JR      GETV3
0B3D54 05 
             1501** ;
0B3D55 F5    1502** GETV2:			PUSH    AF
0B3D56 CD    1503** CALL    COMMA
0B3D57 13 
0B3D58 0D 
0B3D59 0B 
0B3D5A E5    1504** GETV3:			PUSH    HL
0B3D5B D5    1505** PUSH    DE
0B3D5C CD    1506** CALL    EXPRI			; Get the subscript
0B3D5D FB 
0B3D5E 05 
0B3D5F 0B 
0B3D60 D9    1507** EXX
0B3D61 D1    1508** POP     DE
0B3D62 E3    1509** EX      (SP),HL
0B3D63 4E    1510** LD      C,(HL)
0B3D64 23    1511** INC     HL
0B3D65 46    1512** LD      B,(HL)
0B3D66 23    1513** INC     HL
0B3D67 E3    1514** EX      (SP),HL
0B3D68 EB    1515** EX      DE,HL
0B3D69 D5    1516** PUSH    DE
0B3D6A CD    1517** CALL    MUL16			; HL=HL*BC
0B3D6B 63 
0B3D6C 1B 
0B3D6D 0B 
0B3D6E D1    1518** POP     DE
0B3D6F 19    1519** ADD     HL,DE
0B3D70 EB    1520** EX      DE,HL
0B3D71 B7    1521** OR      A
0B3D72 ED    1522** SBC     HL,BC
0B3D73 42 
0B3D74 3E    1523** LD      A,15
0B3D75 0F 
0B3D76 30    1524** JR      NC,ERROR3		; Throw a "Subscript" error
0B3D77 AF 
0B3D78 E1    1525** POP     HL
0B3D79 F1    1526** POP     AF
0B3D7A 3D    1527** DEC     A               	; Dimension counter
0B3D7B 20    1528** JR      NZ,GETV2
0B3D7C D8 
0B3D7D CD    1529** CALL    BRAKET          	; Check for closing bracket
0B3D7E 20 
0B3D7F 0D 
0B3D80 0B 
0B3D81 F1    1530** POP     AF              	; Restore the type
0B3D82 E5    1531** PUSH    HL
0B3D83 CD    1532** CALL    X4OR5           	; DE=DE*n
0B3D84 56 
0B3D85 1B 
0B3D86 0B 
0B3D87 E1    1533** POP     HL
0B3D88 19    1534** ADD     HL,DE
0B3D89 57    1535** LD      D,A             	; The type
0B3D8A FD    1536** LD      A,(IY)
0B3D8B 7E 
0B3D8C 00 
0B3D8D FE    1537** GETVX:			CP      '?'
0B3D8E 3F 
0B3D8F 28    1538** JR      Z,GETV9
0B3D90 1E 
0B3D91 FE    1539** CP      '!'
0B3D92 21 
0B3D93 28    1540** JR      Z,GETV8
0B3D94 16 
0B3D95 E5    1541** GETVZ:			PUSH    HL              	; Set exit conditions
0B3D96 DD    1542** POP     IX
0B3D97 E1 
0B3D98 7A    1543** LD      A,D
0B3D99 BF    1544** CP      A
0B3D9A C9    1545** RET
             1546** ;
             1547** ; Process strings, unary & binary indirection:
             1548** ;
0B3D9B 3E    1549** GETV4:			LD      A,128           	; Static strings
0B3D9C 80 
0B3D9D 18    1550** JR      GETV7
0B3D9E 05 
             1551** ;
0B3D9F 3E    1552** GETV5:			LD      A,4             	; Unary 32-bit indirection
0B3DA0 04 
0B3DA1 18    1553** JR      GETV7
0B3DA2 01 
             1554** ;
0B3DA3 AF    1555** GETV6:			XOR     A               	; Unary 8-bit indirection
             1556** ;
0B3DA4 21    1557** GETV7:			LD      HL,0
0B3DA5 00 
0B3DA6 00 
0B3DA7 00 
0B3DA8 F5    1558** PUSH    AF
0B3DA9 18    1559** JR      GETV0
0B3DAA 24 
             1560** ;
0B3DAB 06    1561** GETV8:			LD      B,4             	; Binary 32-bt indirection
0B3DAC 04 
0B3DAD 18    1562** JR      GETVA
0B3DAE 02 
             1563** ;
0B3DAF 06    1564** GETV9:			LD      B,0             	; Binary 8-bit indirection
0B3DB0 00 
             1565** ;
0B3DB1 E5    1566** GETVA:			PUSH    HL
0B3DB2 DD    1567** POP     IX
0B3DB3 E1 
0B3DB4 7A    1568** LD      A,D            		; Fetch the variable type
0B3DB5 FE    1569** CP      129			; Is it a string?
0B3DB6 81 
0B3DB7 C8    1570** RET     Z               	; Yes, so exit here
0B3DB8 C5    1571** PUSH    BC
0B3DB9 CD    1572** CALL    LOADN           	; Left operand of the binary indirection (var?index or var!index)
0B3DBA 07 
0B3DBB 07 
0B3DBC 0B 
0B3DBD CD    1573** CALL    SFIX
0B3DBE 53 
0B3DBF 09 
0B3DC0 0B 
0B3DC1 7D    1574** LD	A,L
0B3DC2 D9    1575** EXX
0B3DC3 22    1576** LD	(R0+0),HL
0B3DC4 4A 
0B3DC5 50 
0B3DC6 0B 
0B3DC7 32    1577** LD	(R0+2),A
0B3DC8 4C 
0B3DC9 50 
0B3DCA 0B 
0B3DCB 2A    1578** LD	HL,(R0)			; HL: 24-bit address of the variable in memory
0B3DCC 4A 
0B3DCD 50 
0B3DCE 0B 
             1579** ;
0B3DCF E5    1580** GETV0:			PUSH    HL			; HL will be 0 for a unary indirection, or the address of the variable for a binary indirection
0B3DD0 FD    1581** INC     IY
0B3DD1 23 
0B3DD2 CD    1582** CALL    ITEMI
0B3DD3 16 
0B3DD4 06 
0B3DD5 0B 
0B3DD6 7D    1583** LD	A,L			;  A: The MSB of the address
0B3DD7 D9    1584** EXX
0B3DD8 22    1585** LD	(R0+0),HL		; HL: The LSW of the address
0B3DD9 4A 
0B3DDA 50 
0B3DDB 0B 
0B3DDC 32    1586** LD	(R0+2),A		; R0: L'HL or the 24-bit address
0B3DDD 4C 
0B3DDE 50 
0B3DDF 0B 
0B3DE0 D1    1587** POP     DE
0B3DE1 F1    1588** POP     AF
0B3DE2 2A    1589** LD	HL,(R0)			; HL: L'HL
0B3DE3 4A 
0B3DE4 50 
0B3DE5 0B 
0B3DE6 19    1590** ADD     HL,DE
0B3DE7 E5    1591** PUSH    HL
0B3DE8 DD    1592** POP     IX
0B3DE9 E1 
0B3DEA BF    1593** CP      A
0B3DEB C9    1594** RET
             1595** ;
             1596** ;GETDEF - Find entry for FN or PROC in dynamic area.
             1597** ;   Inputs: IY addresses byte following "DEF" token.
             1598** ;  Outputs: Z flag set if found
             1599** ;           Carry set if neither FN or PROC first.
             1600** ;           If Z: HL points to entry
             1601** ;                 IY addresses delimiter
             1602** ; Destroys: A,D,E,H,L,IY,F
             1603** ;
0B3DEC FD    1604** GETDEF:			LD      A,(IY+1)		; Get the next character from the tokenised line (the start of the procedure name)
0B3DED 7E 
0B3DEE 01 
0B3DEF CD    1605** CALL    RANGE1			; Is it in range: "0" to "9", "A" to "Z", "a' to "z", "@", "_" or "`"?
0B3DF0 6C 
0B3DF1 3F 
0B3DF2 0B 
0B3DF3 D8    1606** RET     C			; No so return with C set
0B3DF4 FD    1607** LD      A,(IY)			; Fetch the current character from the tokenised line
0B3DF5 7E 
0B3DF6 00 
0B3DF7 21    1608** LD      HL,FNPTR		; HL: Address of the dynamic function pointer in ram.asm
0B3DF8 0E 
0B3DF9 50 
0B3DFA 0B 
0B3DFB FE    1609** CP      FN			; Is it the token FN?
0B3DFC A4 
0B3DFD 28    1610** JR      Z,LOC2			; Yes, so skip to LOC2 with that pointer to find a match
0B3DFE 4A 
0B3DFF 21    1611** LD      HL,PROPTR		; HL: Address of the dynamic procedure pointer in ram.asm
0B3E00 11 
0B3E01 50 
0B3E02 0B 
0B3E03 FE    1612** CP      PROC			; Is it the token PROC?
0B3E04 F2 
0B3E05 28    1613** JR      Z,LOC2			; Yes, so skip to LOC2 with that pointer to find a match
0B3E06 42 
0B3E07 37    1614** SCF				; No, so just return with C set
0B3E08 C9    1615** RET
             1616** ;
             1617** ; LOCATE - Try to locate variable name in static or dynamic variables.
             1618** ; If illegal first character return carry, non-zero.
             1619** ; If found, return no-carry, zero.
             1620** ; If not found, return no-carry, non-zero.
             1621** ;   Inputs: IY=Addresses first character of name.
             1622** ;            A=(IY)
             1623** ;  Outputs:  F=Z set if found, then:
             1624** ;           IY=addresses terminator
             1625** ;           HL=addresses location of variable
             1626** ;            D=type of variable: 4 = integer
             1627** ;                                5 = floating point
             1628** ;                              129 = string
             1629** ; Destroys: A,D,E,H,L,IY,F
             1630** ;
             1631** ; Variable names can start with any letter of the alphabet (upper or lower case), underscore (_), or the grave accent (`)
             1632** ; They can contain any alphanumeric character and underscore (_)
             1633** ; String variables are postfixed with the dollar ($) character
             1634** ; Integer variables are postfixed with the percent (%) character
             1635** ; Static integer variables are named @%, A% to Z%
             1636** ; All other variables are dynamic
             1637** ;
0B3E09 D6    1638** LOCATE:			SUB     '@'			; Check for valid range
0B3E0A 40 
0B3E0B D8    1639** RET     C			; First character not "@", "A" to "Z" or "a" to "z", so not a variable
0B3E0C 21    1640** LD      HL, 0			; Clear HL
0B3E0D 00 
0B3E0E 00 
0B3E0F 00 
0B3E10 FE    1641** CP      'Z'-'@'+1		; Check for static ("@", "A" to "Z"); if it is not static...
0B3E11 1B 
0B3E12 30    1642** JR      NC,LOC0         	; Then branch here
0B3E13 1E 
0B3E14 6F    1643** LD	L, A			; HL = A
0B3E15 FD    1644** LD      A,(IY+1)        	; Check the 2nd character
0B3E16 7E 
0B3E17 01 
0B3E18 FE    1645** CP      '%'			; If not "%" then it is not static...
0B3E19 25 
0B3E1A 20    1646** JR      NZ,LOC1         	; Branch here
0B3E1B 21 
0B3E1C FD    1647** LD      A,(IY+2)		; Check the 3rd character
0B3E1D 7E 
0B3E1E 02 
0B3E1F FE    1648** CP      '('			; If it is "(" (array) then it is not static...
0B3E20 28 
0B3E21 28    1649** JR      Z,LOC1          	; Branch here
0B3E22 1A 
             1650** ;
             1651** ; At this point we're dealing with a static variable
             1652** ;
0B3E23 29    1653** ADD     HL,HL			; HL: Variable index * 4
0B3E24 29    1654** ADD	HL,HL
0B3E25 11    1655** LD      DE,STAVAR       	; The static variable area in memory
0B3E26 00 
0B3E27 4F 
0B3E28 0B 
0B3E29 19    1656** ADD     HL,DE			; HL: The address of the static variable
0B3E2A FD    1657** INC     IY			; Skip the program pointer past the static variable name
0B3E2B 23 
0B3E2C FD    1658** INC     IY
0B3E2D 23 
0B3E2E 16    1659** LD      D,4             	; Set the type to be integer
0B3E2F 04 
0B3E30 AF    1660** XOR     A			; Set the Z flag
0B3E31 C9    1661** RET
             1662** ;
             1663** ; At this point it's potentially a dynamic variable, just need to do a few more checks
             1664** ;
0B3E32 FE    1665** LOC0:			CP      '_'-'@'			; Check the first character is in
0B3E33 1F 
0B3E34 D8    1666** RET     C			; the range "_" to
0B3E35 FE    1667** CP      'z'-'@'+1		; "z" (lowercase characters only)
0B3E36 3B 
0B3E37 3F    1668** CCF				; If it is not in range then
0B3E38 3D    1669** DEC     A               	; Set NZ flag and
0B3E39 D8    1670** RET     C			; Exit here
0B3E3A D6    1671** SUB     3			; This brings it in the range of 27 upwards (need to confirm)
0B3E3B 03 
0B3E3C 6F    1672** LD	L, A			; HL = A
             1673** ;
             1674** ; Yes, it's definitely a dynamic variable at this point...
             1675** ;
0B3E3D 7D    1676** LOC1:			LD	A, L			; Fetch variable index
0B3E3E 87    1677** ADD	A, A			; x 2
0B3E3F 85    1678** ADD	A, L			; x 3
0B3E40 D6    1679** SUB	3			; Subtract 2 TODO: Should be 3
0B3E41 03 
0B3E42 6F    1680** LD	L, A
0B3E43 11    1681** LD      DE, DYNVAR       	; The dynamic variable storage
0B3E44 6C 
0B3E45 4F 
0B3E46 0B 
0B3E47 D8    1682** RET	C			; Bounds check to trap for variable '@'
0B3E48 19    1683** ADD     HL, DE			; HL: Address of first entry
             1684** ;
             1685** ; Loop through the linked list of variables to find a match
             1686** ;
0B3E49 ED    1687** LOC2:			LD	DE, (HL)		; Fetch the original pointer
0B3E4A 17 
0B3E4B E5    1688** PUSH	HL			; Need to preserve HL for LOC6
0B3E4C AF    1689** XOR	A			; Reset carry flag
0B3E4D ED    1690** SBC	HL, HL			; Set HL to 0
0B3E4E 62 
0B3E4F ED    1691** SBC	HL, DE			; Compare with 0
0B3E50 52 
0B3E51 E1    1692** POP	HL			; Restore the original pointer
0B3E52 28    1693** JR	Z, LOC6			; If the pointer in DE is zero, the variable is undefined at this point
0B3E53 49 
             1694** ; LD	HL, DE			; Make a copy of this pointer in HL
0B3E54 D5    1695** push de
0B3E55 E1    1696** pop hl ; how was that even possible?
0B3E56 23    1697** INC     HL              	; Skip the link (24-bits)
0B3E57 23    1698** INC     HL
0B3E58 23    1699** INC	HL			; HL: Address of the variable name in DYNVARS
0B3E59 FD    1700** PUSH    IY			; IY: Address of the variable name in the program
0B3E5A E5 
             1701** ;
0B3E5B 7E    1702** LOC3:			LD      A,(HL)         		; Compare
0B3E5C 23    1703** INC     HL
0B3E5D FD    1704** INC     IY
0B3E5E 23 
0B3E5F FD    1705** CP      (IY)
0B3E60 BE 
0B3E61 00 
0B3E62 28    1706** JR      Z, LOC3			; Keep looping whilst we've got a match...
0B3E63 F7 
0B3E64 B7    1707** OR      A               	; Have we hit a terminator?
0B3E65 28    1708** JR      Z,LOC5          	; Yes, so maybe we've found a variable
0B3E66 07 
             1709** ;
0B3E67 FD    1710** LOC4:			POP     IY			; Restore the pointer in the program
0B3E68 E1 
0B3E69 EB    1711** EX      DE, HL			; HL: New pointer in DYNVARS
0B3E6A C3    1712** JP      LOC2            	; Loop round and try again
0B3E6B 49 
0B3E6C 3E 
0B3E6D 0B 
             1713** ;
             1714** ; We might have located a variable at this point, just need to do a few more tests
             1715** ;
0B3E6E FD    1716** LOC5:			DEC     IY
0B3E6F 2B 
0B3E70 FD    1717** LD      A,(IY)
0B3E71 7E 
0B3E72 00 
0B3E73 FE    1718** CP      '('
0B3E74 28 
0B3E75 28    1719** JR      Z,LOC5A         	; FOUND
0B3E76 15 
0B3E77 FD    1720** INC     IY
0B3E78 23 
0B3E79 CD    1721** CALL    RANGE
0B3E7A 60 
0B3E7B 3F 
0B3E7C 0B 
0B3E7D 38    1722** JR      C,LOC5A         	; FOUND
0B3E7E 0D 
0B3E7F FE    1723** CP      '('
0B3E80 28 
0B3E81 28    1724** JR      Z,LOC4          	; KEEP LOOKING
0B3E82 E4 
0B3E83 FD    1725** LD      A,(IY-1)
0B3E84 7E 
0B3E85 FF 
0B3E86 CD    1726** CALL    RANGE1
0B3E87 6C 
0B3E88 3F 
0B3E89 0B 
0B3E8A 30    1727** JR      NC,LOC4         	; KEEP LOOKING
0B3E8B DB 
0B3E8C D1    1728** LOC5A:			POP     DE
0B3E8D FD    1729** TYPE_:			LD      A,(IY-1)		; Check the string type postfix
0B3E8E 7E 
0B3E8F FF 
0B3E90 FE    1730** CP      '$'			; Is it a string?
0B3E91 24 
0B3E92 16    1731** LD      D,129			; Yes, so return D = 129
0B3E93 81 
0B3E94 C8    1732** RET     Z
0B3E95 FE    1733** CP      '%'			; Is it an integer?
0B3E96 25 
0B3E97 16    1734** LD      D,4			; Yes, so return D = 4
0B3E98 04 
0B3E99 C8    1735** RET     Z
0B3E9A 14    1736** INC     D			; At this point it must be a float
0B3E9B BF    1737** CP      A			; Set the flags
0B3E9C C9    1738** RET
             1739** ;
             1740** ; The variable is undefined at this point; HL will be zero
             1741** ;
0B3E9D 3C    1742** LOC6:			INC     A               	; Set NZ flag
0B3E9E C9    1743** RET
             1744** ;
             1745** ; CREATE - CREATE NEW ENTRY, INITIALISE TO ZERO.
             1746** ;   Inputs: HL, IY as returned from LOCATE (NZ).
             1747** ;  Outputs: As LOCATE, GETDEF.
             1748** ; Destroys: As LOCATE, GETDEF.
             1749** ;
0B3E9F AF    1750** CREATE:			XOR     A
0B3EA0 ED    1751** LD      DE,(FREE)		; Get the last byte of available RAM
0B3EA1 5B 
0B3EA2 1D 
0B3EA3 50 
0B3EA3 0B   
0B3EA5 ED    1752** LD	(HL), DE		; Store
0B3EA6 1F 
0B3EA7 EB    1753** EX      DE,HL
0B3EA8 77    1754** LD      (HL),A			; Clear the link of the new entity
0B3EA9 23    1755** INC     HL
0B3EAA 77    1756** LD      (HL),A
0B3EAB 23    1757** INC     HL
0B3EAC 77    1758** LD      (HL),A
0B3EAD 23    1759** INC     HL
0B3EAE FD    1760** LOC7:			INC     IY
0B3EAF 23 
0B3EB0 CD    1761** CALL    RANGE           	; END OF VARIABLE?
0B3EB1 60 
0B3EB2 3F 
0B3EB3 0B 
0B3EB4 38    1762** JR      C,LOC8
0B3EB5 15 
0B3EB6 77    1763** LD      (HL),A
0B3EB7 23    1764** INC     HL
0B3EB8 CD    1765** CALL    RANGE1
0B3EB9 6C 
0B3EBA 3F 
0B3EBB 0B 
0B3EBC 30    1766** JR      NC,LOC7
0B3EBD F0 
0B3EBE FE    1767** CP      '('
0B3EBF 28 
0B3EC0 28    1768** JR      Z,LOC8
0B3EC1 09 
0B3EC2 FD    1769** LD      A,(IY+1)
0B3EC3 7E 
0B3EC4 01 
0B3EC5 FE    1770** CP      '('
0B3EC6 28 
0B3EC7 28    1771** JR      Z,LOC7
0B3EC8 E5 
0B3EC9 FD    1772** INC     IY
0B3ECA 23 
0B3ECB 36    1773** LOC8:			LD      (HL),0          	; TERMINATOR
0B3ECC 00 
0B3ECD 23    1774** INC     HL
0B3ECE E5    1775** PUSH    HL
0B3ECF CD    1776** CALL    TYPE_			; Get the variable type in D
0B3ED0 8D 
0B3ED1 3E 
0B3ED2 0B 
0B3ED3 3E    1777** LD      A,4			; If it is an integer then it takes up 4 bytes
0B3ED4 04 
0B3ED5 BA    1778** CP      D
0B3ED6 28    1779** JR      Z,LOC9			; So skip the next bit
0B3ED7 01 
0B3ED8 3C    1780** INC     A			; Strings and floats take up 5 bytes (NB: Strings take up 4 in BBC BASIC for Z80)
0B3ED9 36    1781** LOC9:			LD      (HL),0          	; Initialise the memory to zero
0B3EDA 00 
0B3EDB 23    1782** INC     HL
0B3EDC 3D    1783** DEC     A
0B3EDD 20    1784** JR      NZ,LOC9
0B3EDE FA 
0B3EDF 22    1785** LD      (FREE),HL		; Adjust the stack
0B3EE0 1D 
0B3EE1 50 
0B3EE2 0B 
0B3EE3 CD    1786** CALL    CHECK			; Check whether we are out of space
0B3EE4 40 
0B3EE5 19 
0B3EE6 0B 
0B3EE7 E1    1787** POP     HL
0B3EE8 AF    1788** XOR     A
0B3EE9 C9    1789** RET
             1790** ;
             1791** ; LINNUM - GET LINE NUMBER FROM TEXT STRING
             1792** ;   Inputs: IY = Text Pointer
             1793** ;  Outputs: HL = Line number (zero if none)
             1794** ;           IY updated
             1795** ; Destroys: A,D,E,H,L,IY,F
             1796** ;
             1797** ; This bit of code performs a BASE 10 shift to build up the number
             1798** ; So if the string passed is "345", the algorithm does this:
             1799** ;
             1800** ;    HL : Digit	: Operation
             1801** ; ----- : ----- : ---------
             1802** ; 00000 :	:
             1803** ; 00003 :     3	: Multiply HL  (0) by 10   (0) and add 3   (3)
             1804** ; 00034 :     4 : Multiply HL  (3) by 10  (30) and add 4  (34)
             1805** ; 00345 :     5	: Multiply HL (34) by 10 (340) and add 5 (345)
             1806** ;
             1807** ; The multiply by 10 is done by an unrolled shift and add loop
             1808** ;
0B3EEA CD    1809** LINNUM:			CALL    NXT			; Skip whitespace to the first character
0B3EEB 61 
0B3EEC 0D 
0B3EED 0B 
0B3EEE 40    1810** LD.SIS  HL,0			; The running total
0B3EEF 21 
0B3EF0 00 
0B3EF1 00 
0B3EF2 FD    1811** LINNM1:			LD      A,(IY)			; A: Fetch the digit to add in
0B3EF3 7E 
0B3EF4 00 
0B3EF5 D6    1812** SUB     '0'			; Sub ASCII '0' to make a binary number (0-9)
0B3EF6 30 
0B3EF7 D8    1813** RET     C			; And return if less than 0
0B3EF8 FE    1814** CP      10			; Or greater than or equal to 10
0B3EF9 0A 
0B3EFA D0    1815** RET     NC			; As we've hit a non-numeric character (end of number) at this point
0B3EFB FD    1816** INC     IY			; Increment the string pointer
0B3EFC 23 
0B3EFD 54    1817** LD      D,H			; This next block multiplys HL by 10, shifting the result left in BASE 10
0B3EFE 5D    1818** LD      E,L			; Store the original number in DE
0B3EFF 52    1819** ADD.S   HL,HL           	; *2
0B3F00 29 
0B3F01 38    1820** JR      C,TOOBIG		; At each point, error if > 65535 (carry flag set)
0B3F02 13 
0B3F03 52    1821** ADD.S   HL,HL           	; *4S
0B3F04 29 
0B3F05 38    1822** JR      C,TOOBIG
0B3F06 0F 
0B3F07 52    1823** ADD.S   HL,DE           	; *5
0B3F08 19 
0B3F09 38    1824** JR      C,TOOBIG
0B3F0A 0B 
0B3F0B 52    1825** ADD.S   HL,HL           	; *10
0B3F0C 29 
0B3F0D 38    1826** JR      C,TOOBIG
0B3F0E 07 
0B3F0F 5F    1827** LD      E,A			; A->DE: the digit to add in
0B3F10 16    1828** LD      D,0
0B3F11 00 
0B3F12 52    1829** ADD.S   HL,DE           	; Add in the digit to the running total
0B3F13 19 
0B3F14 30    1830** JR      NC,LINNM1       	; And if it is still <= 65535, loop
0B3F15 DC 
             1831** ;
0B3F16 3E    1832** TOOBIG:			LD      A,20
0B3F17 14 
0B3F18 C3    1833** JP      ERROR_           	; Error: "Too big"
0B3F19 51 
0B3F1A 3A 
0B3F1B 0B 
             1834** ;
             1835** ; PAIR - GET PAIR OF LINE NUMBERS FOR RENUMBER/AUTO.
             1836** ;   Inputs: IY = text pointer
             1837** ;  Outputs: HL = first number (10 by default)
             1838** ;           BC = second number (10 by default)
             1839** ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IY,F
             1840** ;
0B3F1C CD    1841** PAIR:			CALL    LINNUM          	; Parse the first line number
0B3F1D EA 
0B3F1E 3E 
0B3F1F 0B 
0B3F20 7C    1842** LD      A,H			; If it is not zero, then...
0B3F21 B5    1843** OR      L
0B3F22 20    1844** JR      NZ,PAIR1		; Skip...
0B3F23 02 
0B3F24 2E    1845** LD      L,10			; HL: the default value (10)
0B3F25 0A 
             1846** ;
0B3F26 CD    1847** PAIR1:			CALL    TERMQ			; Check for ELSE, : or CR
0B3F27 6B 
0B3F28 1A 
0B3F29 0B 
0B3F2A FD    1848** INC     IY			; Skip to next character
0B3F2B 23 
0B3F2C E5    1849** PUSH    HL			; Stack the first line number
0B3F2D 21    1850** LD      HL,10			; HL: the second default (10)
0B3F2E 0A 
0B3F2F 00 
0B3F30 00 
0B3F31 C4    1851** CALL    NZ,LINNUM       	; Parse the second line number
0B3F32 EA 
0B3F33 3E 
0B3F34 0B 
0B3F35 E3    1852** EX      (SP),HL			; HL: The first line number (off the stack)
0B3F36 C1    1853** POP     BC			; BC: Second line number
0B3F37 78    1854** LD      A,B			; If the second line number is not zero then...
0B3F38 B1    1855** OR      C			; We're good...
0B3F39 C0    1856** RET     NZ			; Exit, otherwise...
0B3F3A CD    1857** CALL    EXTERR			; Throw error: "Silly"
0B3F3B 68 
0B3F3C 3A 
0B3F3D 0B 
0B3F3E 53    1858** DB    	"Silly", 0
0B3F3F 69 
0B3F40 6C 
0B3F41 6C 
0B3F41 79   
0B3F42 00 
             1859** ;
             1860** ; DLPAIR - GET PAIR OF LINE NUMBERS FOR DELETE/LIST.
             1861** ;   Inputs: IY = text pointer
             1862** ;  Outputs: HL = points to program text
             1863** ;           BC = second number (0 by default)
             1864** ; Destroys: A,B,C,D,E,H,L,IY,F
             1865** ;
0B3F44 CD    1866** DLPAIR:			CALL    LINNUM			; Parse the first line number
0B3F45 EA 
0B3F46 3E 
0B3F47 0B 
0B3F48 E5    1867** PUSH    HL			; Stack it
0B3F49 CD    1868** CALL    TERMQ			; Check for ELSE, : or CR
0B3F4A 6B 
0B3F4B 1A 
0B3F4C 0B 
0B3F4D 28    1869** JR      Z,DLP1			; And exit if so
0B3F4E 0A 
0B3F4F FE    1870** CP      TIF			; Is the token IF?
0B3F50 E7 
0B3F51 28    1871** JR      Z,DLP1			; Yes, so skip the next bit...
0B3F52 06 
0B3F53 FD    1872** INC     IY			; Otherwise...
0B3F54 23 
0B3F55 CD    1873** CALL    LINNUM			; Fetch the second line number
0B3F56 EA 
0B3F57 3E 
0B3F58 0B 
0B3F59 E3    1874** DLP1:			EX      (SP),HL			; HL: The first line number (off the stack)
0B3F5A CD    1875** CALL    FINDL			; HL: Find the address of the line
0B3F5B 80 
0B3F5C 3C 
0B3F5D 0B 
0B3F5E C1    1876** POP     BC			; BC: The second number
0B3F5F C9    1877** RET
             1878** ;
             1879** ; TEST FOR VALID CHARACTER IN VARIABLE NAME:
             1880** ;   Inputs: IY addresses character
             1881** ;  Outputs: Carry set if out-of-range.
             1882** ; Destroys: A,F
             1883** ;
             1884** ; It is called here to check the following
             1885** ; In range: "$", "%" and "("
             1886** ;   Plus all characters in RANGE1 and RANGE2
             1887** ;
0B3F60 FD    1888** RANGE:			LD      A,(IY)			; Fetch the character
0B3F61 7E 
0B3F62 00 
0B3F63 FE    1889** CP      '$'			; Postfix for string variable is valid
0B3F64 24 
0B3F65 C8    1890** RET     Z
0B3F66 FE    1891** CP      '%'			; Postfix for integer variable is valid
0B3F67 25 
0B3F68 C8    1892** RET     Z
0B3F69 FE    1893** CP      '('			; Postfix for array is valid
0B3F6A 28 
0B3F6B C8    1894** RET     Z
             1895** ;
             1896** ; It is called here to check the following
             1897** ; In range: "0" to "9" and "@"
             1898** ;   Plus all characters in RANGE2
             1899** ;
0B3F6C FE    1900** RANGE1:			CP      '0'			; If it is between '0'...
0B3F6D 30 
0B3F6E D8    1901** RET     C
0B3F6F FE    1902** CP      '9'+1			; And '9'...
0B3F70 3A 
0B3F71 3F    1903** CCF
0B3F72 D0    1904** RET     NC			; Then it is valid
0B3F73 FE    1905** CP      '@'             	; The prefix @ is valid (@% controls numeric print formatting - v2.4)
0B3F74 40 
0B3F75 C8    1906** RET     Z
             1907** ;
             1908** ; It is called here to check the following
             1909** ; In range: "A" to "Z", "a' to "z", "_" and "`"
             1910** ;
0B3F76 FE    1911** RANGE2:			CP      'A'			; If it is between 'A'...
0B3F77 41 
0B3F78 D8    1912** RET     C
0B3F79 FE    1913** CP      'Z'+1			; And 'Z'...
0B3F7A 5B 
0B3F7B 3F    1914** CCF
0B3F7C D0    1915** RET     NC			; Then it is valid
0B3F7D FE    1916** CP      '_'			; If it is underscore, grave, or between 'a'
0B3F7E 5F 
0B3F7F D8    1917** RET     C
0B3F80 FE    1918** CP      'z'+1			; And 'z'
0B3F81 7B 
0B3F82 3F    1919** CCF				; Then it is valid
0B3F83 C9    1920** RET
             1921** ;
             1922** ; Throw a 'LINE space' error (line too long)
             1923** ; This is called from LEXAN
             1924** ;
0B3F84 AF    1925** SPACE_: 		XOR     A
0B3F85 CD    1926** CALL    EXTERR          	; "LINE space"
0B3F86 68 
0B3F87 3A 
0B3F88 0B 
0B3F89 86    1927** DB    	LINE_MN_, 8, 0
0B3F8A 08 
0B3F8B 00 
             1928** ;
             1929** ; LEXAN - LEXICAL ANALYSIS.
             1930** ;  Bit 0,C: 1=left, 0=right
             1931** ;  Bit 2,C: 1=in BINARY
             1932** ;  Bit 3,C: 1=in HEX
             1933** ;  Bit 4,C: 1=accept line number
             1934** ;  Bit 5,C: 1=in variable, FN, PROC
             1935** ;  Bit 6,C: 1=in REM, DATA, *
             1936** ;  Bit 7,C: 1=in quotes
             1937** ;   Inputs: IY addresses source string
             1938** ;           DE addresses destination string (must be page boundary)
             1939** ;            C sets initial mode
             1940** ;  Outputs: DE, IY updated
             1941** ;            A holds carriage return
             1942** ;
0B3F8C 12    1943** LEXAN1:			LD      (DE),A          	; Transfer to buffer
0B3F8D 13    1944** INC     DE              	; Increment the pointers
0B3F8E FD    1945** INC     IY			; And fall through to the main function
0B3F8F 23 
             1946** ;
             1947** ; This is the main entry point
             1948** ;
0B3F90 7B    1949** LEXAN2:			LD      A,E             	; Destination buffer on page boundary, so E can be used as length
0B3F91 FE    1950** CP      252             	; If it is >= 252 bytes, then...
0B3F92 FC 
0B3F93 30    1951** JR      NC,SPACE_        	; Throw a 'LINE space' error (line too long)
0B3F94 EF 
0B3F95 FD    1952** LD      A,(IY)			; Fetch character from source string
0B3F96 7E 
0B3F97 00 
0B3F98 FE    1953** CP      CR			; If it is a CR
0B3F99 0D 
0B3F9A C8    1954** RET     Z               	; Then it is end of line; we're done parsing
0B3F9B CD    1955** CALL    RANGE1			; Is it alphanumeric, '@', '_' or '`'
0B3F9C 6C 
0B3F9D 3F 
0B3F9E 0B 
0B3F9F 30    1956** JR      NC,LEXAN3		; Yes, so skip
0B3FA0 06 
0B3FA1 CB    1957** RES     5,C             	; FLAG: NOT IN VARIABLE
0B3FA2 A9 
0B3FA3 CB    1958** RES     3,C             	; FLAG: NOT IN HEX
0B3FA4 99 
0B3FA5 CB    1959** RES	2,C			; FLAG: NOT IN BINARY
0B3FA6 91 
             1960** ;
0B3FA7 FE    1961** LEXAN3:			CP      ' '			; Ignore spaces
0B3FA8 20 
0B3FA9 28    1962** JR      Z,LEXAN1
0B3FAA E1 
0B3FAB FE    1963** CP      ','			; Ignore commas
0B3FAC 2C 
0B3FAD 28    1964** JR      Z,LEXAN1
0B3FAE DD 
0B3FAF FE    1965** CP	'2'			; If less than '2'
0B3FB0 32 
0B3FB1 30    1966** JR	NC, @F			; No, so skip
0B3FB2 02 
0B3FB3 CB    1967** RES	2,C			; FLAG: NOT IN BINARY
0B3FB4 91 
0B3FB5 FE    1968** @@:			CP      'G'			; If less then 'G'
0B3FB6 47 
0B3FB7 38    1969** JR      C,LEXAN4		; Yes, so skip
0B3FB8 02 
0B3FB9 CB    1970** RES     3,C             	; FLAG: NOT IN HEX
0B3FBA 99 
             1971** ;
0B3FBB FE    1972** LEXAN4:			CP      34			; Is it a quote character?
0B3FBC 22 
0B3FBD 20    1973** JR      NZ,LEXAN5		; No, so skip
0B3FBE 05 
0B3FBF CB    1974** RL      C			; Toggle bit 7 of C by shifting it into carry flag
0B3FC0 11 
0B3FC1 3F    1975** CCF                     	; Toggle the carry
0B3FC2 CB    1976** RR      C			; And then shifting it back into bit 7 of C
0B3FC3 19 
             1977** ;
0B3FC4 CB    1978** LEXAN5:			BIT     4,C			; Accept line number?
0B3FC5 61 
0B3FC6 28    1979** JR      Z,LEXAN6		; No, so skip
0B3FC7 12 
0B3FC8 CB    1980** RES     4,C			; FLAG: DON'T ACCEPT LINE NUMBER
0B3FC9 A1 
0B3FCA C5    1981** PUSH    BC
0B3FCB D5    1982** PUSH    DE
0B3FCC CD    1983** CALL    LINNUM         		; Parse the line number to HL
0B3FCD EA 
0B3FCE 3E 
0B3FCF 0B 
0B3FD0 D1    1984** POP     DE
0B3FD1 C1    1985** POP     BC
0B3FD2 7C    1986** LD      A,H			; If it is not zero
0B3FD3 B5    1987** OR      L
0B3FD4 C4    1988** CALL    NZ,ENCODE       	; Then encode the line number HL to the destination (DE)
0B3FD5 4D 
0B3FD6 40 
0B3FD7 0B 
0B3FD8 18    1989** JR      LEXAN2          	; And loop
0B3FD9 B6 
             1990** ;
0B3FDA 0D    1991** LEXAN6:			DEC     C			; Check for C=1 (LEFT)
0B3FDB 28    1992** JR      Z,LEXAN7        	; If so, skip
0B3FDC 0A 
0B3FDD 0C    1993** INC     C			; Otherwise restore C
0B3FDE 20    1994** JR      NZ,LEXAN1		; If C was 0 (RIGHT) then...
0B3FDF AC 
0B3FE0 B7    1995** OR      A			; Set the flags based on the character
0B3FE1 F4    1996** CALL    P,LEX           	; Tokenise if A < 128
0B3FE2 B8 
0B3FE3 3A 
0B3FE4 0B 
0B3FE5 18    1997** JR      LEXAN8			; And skip
0B3FE6 13 
             1998** ;
             1999** ; Processing the LEFT hand side here
             2000** ;
0B3FE7 FE    2001** LEXAN7:			CP      '*'			; Is it a '*' (for star commands)
0B3FE8 2A 
0B3FE9 28    2002** JR      Z,LEXAN9		; Yes, so skip to quit tokenising
0B3FEA 17 
0B3FEB B7    2003** OR      A			; Set the flags based on the character
0B3FEC F4    2004** CALL    P,LEX           	; Tokenise if A < 128
0B3FED B8 
0B3FEE 3A 
0B3FEF 0B 
             2005** ;
             2006** ; This bit of code checks if the tokens are one of the pseudo-variables PTR, PAGE, TIME, LOMEM, HIMEM
             2007** ; These tokens are duplicate in the table with a GET version and a SET version offset by the define OFFSET (40h)
             2008** ; Examples:
             2009** ;   LET A% = PAGE : REM This is the GET version
             2010** ;   PAGE = 40000  : REM This is the SET version
             2011** ;
0B3FF0 FE    2012** CP      TOKLO			; TOKLO is 8Fh
0B3FF1 8F 
0B3FF2 38    2013** JR      C,LEXAN8		; If A is < 8Fh then skip to LEX8
0B3FF3 06 
0B3FF4 FE    2014** CP      TOKHI+1			; TOKHI is 93h
0B3FF5 94 
0B3FF6 30    2015** JR      NC,LEXAN8		; If A is >= 94h then skip to LEX8
0B3FF7 02 
0B3FF8 C6    2016** ADD     A,OFFSET       		; Add OFFSET (40h) to make the token the SET version
0B3FF9 40 
             2017** ;
0B3FFA FE    2018** LEXAN8:			CP      REM			; If the token is REM
0B3FFB F4 
0B3FFC 28    2019** JR      Z,LEXAN9		; Then stop tokenising
0B3FFD 04 
0B3FFE FE    2020** CP      DATA_MN_			; If it is not DATA then
0B3FFF DC 
0B4000 20    2021** JR      NZ,LEXANA		; Skip
0B4001 02 
0B4002 CB    2022** LEXAN9:			SET     6,C             	; FLAG: STOP TOKENISING
0B4003 F1 
             2023** ;
0B4004 FE    2024** LEXANA:			CP      FN			; If the token is FN
0B4005 A4 
0B4006 28    2025** JR      Z,LEXANB
0B4007 0A 
0B4008 FE    2026** CP      PROC			; Or the token is PROC
0B4009 F2 
0B400A 28    2027** JR      Z,LEXANB		; Then jump to here
0B400B 06 
0B400C CD    2028** CALL    RANGE2			; Otherwise check the input is alphanumeric, "_" or "`"
0B400D 76 
0B400E 3F 
0B400F 0B 
0B4010 38    2029** JR      C,LEXANC		; Jump here if out of range
0B4011 02 
             2030** ;
0B4012 CB    2031** LEXANB:			SET     5,C             	; FLAG: IN VARIABLE/FN/PROC
0B4013 E9 
0B4014 FE    2032** LEXANC:			CP      '&'			; Check for hex prefix
0B4015 26 
0B4016 20    2033** JR      NZ,LEXAND		; If not, skip
0B4017 02 
0B4018 CB    2034** SET     3,C             	; FLAG: IN HEX
0B4019 D9 
             2035** ;
0B401A FE    2036** LEXAND:			CP	'%'			; Check for binary prefix
0B401B 25 
0B401C 20    2037** JR	NZ,LEXANE		; If not, skip
0B401D 02 
0B401E CB    2038** SET	2,C			; FLAG: IN BINARY
0B401F D1 
             2039** ;
0B4020 21    2040** LEXANE:			LD      HL,LIST1		; List of tokens that must be followed by a line number
0B4021 44 
0B4022 40 
0B4023 0B 
0B4024 C5    2041** PUSH    BC
0B4025 01    2042** LD      BC,LIST1L		; The list length
0B4026 06 
0B4027 00 
0B4028 00 
0B4029 ED    2043** CPIR				; Check if the token is in this list
0B402A B1 
0B402B C1    2044** POP     BC
0B402C 20    2045** JR      NZ,LEXANF		; If not, then skip
0B402D 02 
0B402E CB    2046** SET     4,C             	; FLAG: ACCEPT LINE NUMBER
0B402F E1 
             2047** ;
0B4030 21    2048** LEXANF:			LD      HL,LIST2		; List of tokens that switch the lexical analysis back to LEFT mode
0B4031 48 
0B4032 40 
0B4033 0B 
0B4034 C5    2049** PUSH    BC
0B4035 01    2050** LD      BC,LIST2L		; The list length
0B4036 05 
0B4037 00 
0B4038 00 
0B4039 ED    2051** CPIR				; Check if the token is in this list
0B403A B1 
0B403B C1    2052** POP     BC
0B403C 20    2053** JR      NZ,LEXANG		; If not, then skip
0B403D 02 
0B403E CB    2054** SET     0,C             	; FLAG: ENTER LEFT MODE
0B403F C1 
0B4040 C3    2055** LEXANG:			JP      LEXAN1			; And loop
0B4041 8C 
0B4042 3F 
0B4043 0B 
             2056** 
             2057** ;
             2058** ; LIST1: List of tokens that must be followed by line numbers
             2059** ; LIST2: List of tokens that switch the lexical analysis back to LEFT mode
             2060** ;
0B4044 E5    2061** LIST1:			DB	GOTO
0B4045 E4    2062** DB	GOSUB
0B4046 F7    2063** DB	RESTOR
0B4047 FC    2064** DB	TRACE
0B4048 8C    2065** LIST2:			DB	THEN_MN_
0B4049 8B    2066** DB	ELSE_MN_
             2067** LIST1L:			EQU     $-LIST1
0B404A F5    2068** DB	REPEAT
0B404B 85    2069** DB	TERROR_MN
0B404C 3A    2070** DB    	':'
             2071** LIST2L:			EQU     $-LIST2
             2072** ;
             2073** ; ENCODE - ENCODE LINE NUMBER INTO PSEUDO-BINARY FORM.
             2074** ;   Inputs: HL=line number, DE=string pointer
             2075** ;  Outputs: DE updated, BIT 4,C set.
             2076** ; Destroys: A,B,C,D,E,F
             2077** ;
             2078** ; Thanks to Matt Godblot for this explanation (https://xania.org/200711/bbc-basic-line-number-format)
             2079** ;
             2080** ; The line number is spread over three bytes and kept in the range of normal ASCII values so the interpreter
             2081** ; can make this short cut in skipping to the non-ASCII token ELSE. The algorithm used splits the top two bits off
             2082** ; each of the two bytes of the 16-bit line number. These bits are combined (in binary as 00LlHh00),
             2083** ; exclusive-ORred with 0x54, and stored as the first byte of the 3-byte sequence. The remaining six bits of
             2084** ; each byte are then stored, in LO/HI order, ORred with 0x40.
             2085** ;
0B404D CB    2086** ENCODE:			SET     4,C			; Set bit 4 of C (for lexical analysis - accept line number)
0B404E E1 
0B404F EB    2087** EX      DE, HL			; HL: string pointer, DE: line number
0B4050 36    2088** LD      (HL), LINO_MN		; Store 8Dh first to flag next bytes as an encoded line number
0B4051 8D 
0B4052 23    2089** INC     HL
0B4053 7A    2090** LD      A,D			; Get the high byte
0B4054 E6    2091** AND     0C0H			; Get the top two bits	DD000000
0B4055 C0 
0B4056 0F    2092** RRCA				; Shift right		00DD0000
0B4057 0F    2093** RRCA
0B4058 47    2094** LD      B,A			; Store in B
0B4059 7B    2095** LD      A,E			; Get the low byte
0B405A E6    2096** AND     0C0H			; Get the top two bits	EE000000
0B405B C0 
0B405C B0    2097** OR      B			; Combine with D	EEDD0000
0B405D 0F    2098** RRCA				; Shift right		00EEDD00
0B405E 0F    2099** RRCA
0B405F EE    2100** XOR     01010100B		; XOR with 54h
0B4060 54 
0B4061 77    2101** LD      (HL),A			; Store this as the second byte
0B4062 23    2102** INC     HL
0B4063 7B    2103** LD      A,E			; Get the low byte
0B4064 E6    2104** AND     3FH			; Strip the top two bits off
0B4065 3F 
0B4066 F6    2105** OR      '@'			; OR with 40h
0B4067 40 
0B4068 77    2106** LD      (HL),A			; Store
0B4069 23    2107** INC     HL
0B406A 7A    2108** LD      A,D			; Get the high byte
0B406B E6    2109** AND     3FH			; Strip the top two bits off
0B406C 3F 
0B406D F6    2110** OR      '@'			; OR with 40h
0B406E 40 
0B406F 77    2111** LD      (HL),A			; Store
0B4070 23    2112** INC     HL
0B4071 EB    2113** EX      DE,HL			; DE: string pointer, HL: line number
0B4072 C9    2114** RET
             2115** ;
             2116** ; TEXT - OUTPUT MESSAGE.
             2117** ;   Inputs: HL addresses text (terminated by nul)
             2118** ;  Outputs: HL addresses character following nul.
             2119** ; Destroys: A,H,L,F
             2120** ;
0B4073 2A    2121** REPORT:			LD      HL, (ERRTXT)		; Output an error message pointed to by ERRTXT
0B4074 2F 
0B4075 50 
0B4076 0B 
             2122** ;
0B4077 7E    2123** TEXT_:			LD      A, (HL)			; Fetch the character
0B4078 23    2124** INC     HL			; Increment pointer to next character
0B4079 B7    2125** OR      A			; Check for the nul (0) string terminator
0B407A C8    2126** RET     Z			; And return if so
0B407B CD    2127** CALL    OUT_			; Output the character; note that OUT_ will detokenise tokens
0B407C 5D 
0B407D 3C 
0B407E 0B 
0B407F 18    2128** JR      TEXT_			; And loop
0B4080 F6 
             2129** ;
             2130** ; TELL - OUTPUT MESSAGE.
             2131** ;   Inputs: Text follows subroutine call (term=nul)
             2132** ; Destroys: A,F
             2133** ;
             2134** ; Example usage:
             2135** ;
             2136** ;	CALL	TELL			Call the function
             2137** ;	DB	"Hello World", 0	Followed by a zero terminated string
             2138** ;	LD	A, (1234H)		Program execution will carry on here after the message is output
             2139** ;
0B4081 E3    2140** TELL:			EX      (SP), HL		; Get the return address off the stack into HL, this is the
0B4082 CD    2141** CALL    TEXT_			; first byte of the string that follows it. Print it, then
0B4083 77 
0B4084 40 
0B4085 0B 
0B4086 E3    2142** EX      (SP), HL		; HL will point to the next instruction, swap this back onto the stack
0B4087 C9    2143** RET				; at this point we'll return to the first instruction after the message
              0010* include "basic/misc.asm"
             0001** ;
             0002** ; Title:	BBC Basic for AGON - Miscellaneous helper functions
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	12/05/2023
             0006** ;
             0007** ; Modinfo:
             0008** 
             0009** ; INCLUDE	"equs.inc"
             0010** ; INCLUDE	"macros.inc"
             0011** 
             0012** ; .ASSUME	ADL = 1
             0013** 
             0014** ; SEGMENT CODE
             0015** 
             0016** ; XDEF	ASC_TO_NUMBER
             0017** ; XDEF	SWITCH_A
             0018** ; XDEF	NULLTOCR
             0019** ; XDEF	CRTONULL
             0020** ; XDEF	CSTR_FNAME
             0021** ; XDEF	CSTR_LINE
             0022** ; XDEF	CSTR_FINDCH
             0023** ; XDEF	CSTR_ENDSWITH
             0024** ; XDEF	CSTR_CAT
             0025** 
             0026** ; XREF	OSWRCH
             0027** ; XREF	KEYWDS
             0028** ; XREF	KEYWDL
             0029** 
             0030** ; Read a number and convert to binary
             0031** ; If prefixed with &, will read as hex, otherwise decimal
             0032** ;   Inputs: HL: Pointer in string buffer
             0033** ;  Outputs: HL: Updated text pointer
             0034** ;           DE: Value
             0035** ;            A: Terminator (spaces skipped)
             0036** ; Destroys: A,D,E,H,L,F
             0037** ;
0B4088 C5    0038** ASC_TO_NUMBER:		PUSH	BC			; Preserve BC
0B4089 11    0039** LD	DE, 0			; Initialise DE
0B408A 00 
0B408B 00 
0B408C 00 
0B408D CD    0040** CALL	SKIPSPC			; Skip whitespace
0B408E CF 
0B408F 40 
0B4090 0B 
0B4091 7E    0041** LD	A, (HL)			; Read first character
0B4092 FE    0042** CP	'&'			; Is it prefixed with '&' (HEX number)?
0B4093 26 
0B4094 20    0043** JR	NZ, ASC_TO_NUMBER3	; Jump to decimal parser if not
0B4095 1F 
0B4096 23    0044** INC	HL			; Otherwise fall through to ASC_TO_HEX
             0045** ;
0B4097 7E    0046** ASC_TO_NUMBER1:		LD	A, (HL)			; Fetch the character
0B4098 CD    0047** CALL    UPPERC			; Convert to uppercase
0B4099 DD 
0B409A 40 
0B409B 0B 
0B409C D6    0048** SUB	'0'			; Normalise to 0
0B409D 30 
0B409E 38    0049** JR 	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0B409F 2E 
0B40A0 FE    0050** CP 	10			; Check if >= 10
0B40A1 0A 
0B40A2 38    0051** JR 	C,ASC_TO_NUMBER2	; No, so skip next bit
0B40A3 06 
0B40A4 D6    0052** SUB 	7			; Adjust ASCII A-F to nibble
0B40A5 07 
0B40A6 FE    0053** CP 	16			; Check for > F
0B40A7 10 
0B40A8 30    0054** JR 	NC, ASC_TO_NUMBER4	; Return if out of range
0B40A9 24 
0B40AA EB    0055** ASC_TO_NUMBER2:		EX 	DE, HL 			; Shift DE left 4 times
0B40AB 29    0056** ADD	HL, HL
0B40AC 29    0057** ADD	HL, HL
0B40AD 29    0058** ADD	HL, HL
0B40AE 29    0059** ADD	HL, HL
0B40AF EB    0060** EX	DE, HL
0B40B0 B3    0061** OR      E			; OR the new digit in to the least significant nibble
0B40B1 5F    0062** LD      E, A
0B40B2 23    0063** INC     HL			; Onto the next character
0B40B3 18    0064** JR      ASC_TO_NUMBER1		; And loop
0B40B4 E2 
             0065** ;
0B40B5 7E    0066** ASC_TO_NUMBER3:		LD	A, (HL)
0B40B6 D6    0067** SUB	'0'			; Normalise to 0
0B40B7 30 
0B40B8 38    0068** JR	C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0B40B9 14 
0B40BA FE    0069** CP	10			; Check if >= 10
0B40BB 0A 
0B40BC 30    0070** JR	NC, ASC_TO_NUMBER4	; Return if >= 10
0B40BD 10 
0B40BE EB    0071** EX 	DE, HL 			; Stick DE in HL
0B40BF 44    0072** LD	B, H 			; And copy HL into BC
0B40C0 4D    0073** LD	C, L
0B40C1 29    0074** ADD	HL, HL 			; x 2
0B40C2 29    0075** ADD	HL, HL 			; x 4
0B40C3 09    0076** ADD	HL, BC 			; x 5
0B40C4 29    0077** ADD	HL, HL 			; x 10
0B40C5 EB    0078** EX	DE, HL
             0079** ADD8U_DE 			; Add A to DE (macro)
0B40C6 83   0001**M ADD	A, E
0B40C7 5F   0002**M LD	E, A
0B40C8 8A   0003**M ADC	A, D
0B40C9 93   0004**M SUB	E
0B40CA 57   0005**M LD	D, A
0B40CB 23    0080** INC	HL
0B40CC 18    0081** JR	ASC_TO_NUMBER3
0B40CD E7 
0B40CE C1    0082** ASC_TO_NUMBER4:		POP	BC 			; Fall through to SKIPSPC here
             0083** 
             0084** ; Skip a space
             0085** ; HL: Pointer in string buffer
             0086** ;
0B40CF 7E    0087** SKIPSPC:			LD      A, (HL)
0B40D0 FE    0088** CP      ' '
0B40D1 20 
0B40D2 C0    0089** RET     NZ
0B40D3 23    0090** INC     HL
0B40D4 18    0091** JR      SKIPSPC
0B40D5 F9 
             0092** 
             0093** ; Skip a string
             0094** ; HL: Pointer in string buffer
             0095** ;
0B40D6 7E    0096** SKIPNOTSP:		LD	A, (HL)
0B40D7 FE    0097** CP	' '
0B40D8 20 
0B40D9 C8    0098** RET	Z
0B40DA 23    0099** INC	HL
0B40DB 18    0100** JR	SKIPNOTSP
0B40DC F9 
             0101** 
             0102** ; Convert a character to upper case
             0103** ;  A: Character to convert
             0104** ;
0B40DD E6    0105** UPPERC:  		AND     7FH
0B40DE 7F 
0B40DF FE    0106** CP      '`'
0B40E0 60 
0B40E1 D8    0107** RET     C
0B40E2 E6    0108** AND     5FH			; Convert to upper case
0B40E3 5F 
0B40E4 C9    0109** RET
             0110** 
             0111** ; Switch on A - lookup table immediately after call
             0112** ;  A: Index into lookup table
             0113** ;
0B40E5 E3    0114** SWITCH_A:		EX	(SP), HL		; Swap HL with the contents of the top of the stack
0B40E6 87    0115** ADD	A, A			; Multiply A by two
             0116** ADD8U_HL 			; Add to HL (macro)
0B40E7 85   0001**M ADD	A, L
0B40E8 6F   0002**M LD	L, A
0B40E9 8C   0003**M ADC	A, H
0B40EA 95   0004**M SUB	L
0B40EB 67   0005**M LD	H, A
0B40EC 7E    0117** LD	A, (HL)			; follow the call. Fetch an address from the
0B40ED 23    0118** INC	HL 			; table.
0B40EE 66    0119** LD	H, (HL)
0B40EF 6F    0120** LD	L, A
0B40F0 E3    0121** EX	(SP), HL		; Swap this new address back, restores HL
0B40F1 C9    0122** RET				; Return program control to this new address
             0123** 
             0124** ; Convert the buffer to a null terminated string and back
             0125** ; HL: Buffer address
             0126** ;
0B40F2 C5    0127** NULLTOCR:		PUSH 	BC
0B40F3 06    0128** LD	B, 0
0B40F4 00 
0B40F5 0E    0129** LD	C, CR
0B40F6 0D 
0B40F7 18    0130** JR	CRTONULL0
0B40F8 05 
             0131** ;
0B40F9 C5    0132** CRTONULL:		PUSH	BC
0B40FA 06    0133** LD	B, CR
0B40FB 0D 
0B40FC 0E    0134** LD	C, 0
0B40FD 00 
             0135** ;
0B40FE E5    0136** CRTONULL0:		PUSH	HL
0B40FF 7E    0137** CRTONULL1:		LD	A, (HL)
0B4100 B8    0138** CP 	B
0B4101 28    0139** JR	Z, CRTONULL2
0B4102 03 
0B4103 23    0140** INC	HL
0B4104 18    0141** JR	CRTONULL1
0B4105 F9 
0B4106 71    0142** CRTONULL2:		LD	(HL), C
0B4107 E1    0143** POP 	HL
0B4108 C1    0144** POP	BC
0B4109 C9    0145** RET
             0146** 
             0147** ; Copy a filename to DE and zero terminate it
             0148** ; HL: Source
             0149** ; DE: Destination (ACCS)
             0150** ;
0B410A 7E    0151** CSTR_FNAME:		LD	A, (HL)			; Get source
0B410B FE    0152** CP	32			; Is it space
0B410C 20 
0B410D 28    0153** JR	Z, @F
0B410E 09 
0B410F FE    0154** CP	CR			; Or is it CR
0B4110 0D 
0B4111 28    0155** JR	Z, @F
0B4112 05 
0B4113 12    0156** LD	(DE), A			; No, so store
0B4114 23    0157** INC	HL			; Increment
0B4115 13    0158** INC	DE
0B4116 18    0159** JR	CSTR_FNAME		; And loop
0B4117 F2 
0B4118 AF    0160** @@:			XOR	A			; Zero terminate the target string
0B4119 12    0161** LD	(DE), A
0B411A 13    0162** INC	DE			; And point to next free address
0B411B C9    0163** RET
             0164** 
             0165** ; Copy a CR terminated line to DE and zero terminate it
             0166** ; HL: Source
             0167** ; DE: Destination (ACCS)
             0168** ;
0B411C 7E    0169** CSTR_LINE:		LD	A, (HL)			; Get source
0B411D FE    0170** CP	CR			; Is it CR
0B411E 0D 
0B411F 28    0171** JR	Z, @F
0B4120 05 
0B4121 12    0172** LD	(DE), A			; No, so store
0B4122 23    0173** INC	HL			; Increment
0B4123 13    0174** INC	DE
0B4124 18    0175** JR	CSTR_LINE		; And loop
0B4125 F6 
0B4126 AF    0176** @@:			XOR	A			; Zero terminate the target string
0B4127 12    0177** LD	(DE), A
0B4128 13    0178** INC	DE			; And point to next free address
0B4129 C9    0179** RET
             0180** 
             0181** ; Find the first occurrence of a character (case sensitive)
             0182** ; HL: Source
             0183** ;  C: Character to find
             0184** ; Returns:
             0185** ; HL: Pointer to character, or end of string marker
             0186** ;
0B412A 7E    0187** CSTR_FINDCH:		LD	A, (HL)			; Get source
0B412B B9    0188** CP	C			; Is it our character?
0B412C C8    0189** RET	Z			; Yes, so exit
0B412D B7    0190** OR	A			; Is it the end of string?
0B412E C8    0191** RET	Z			; Yes, so exit
0B412F 23    0192** INC	HL
0B4130 18    0193** JR	CSTR_FINDCH
0B4131 F8 
             0194** 
             0195** ; Check whether a string ends with another string (case insensitive)
             0196** ; HL: Source
             0197** ; DE: The substring we want to test with
             0198** ; Returns:
             0199** ;  F: Z if HL ends with DE, otherwise NZ
             0200** ;
0B4132 7E    0201** CSTR_ENDSWITH:		LD	A, (HL)			; Get the source string byte
0B4133 CD    0202** CALL	UPPERC			; Convert to upper case
0B4134 DD 
0B4135 40 
0B4136 0B 
0B4137 4F    0203** LD	C, A
0B4138 1A    0204** LD	A, (DE)			; Get the substring byte
0B4139 B9    0205** CP	C
0B413A C0    0206** RET	NZ			; Return NZ if at any point the strings don't match
0B413B B1    0207** OR	C			; Check whether both bytes are zero
0B413C C8    0208** RET	Z			; If so, return, as we have reached the end of both strings
0B413D 23    0209** INC	HL
0B413E 13    0210** INC	DE
0B413F 18    0211** JR	CSTR_ENDSWITH		; And loop
0B4140 F1 
             0212** 
             0213** ; Concatenate a string onto the end of another string
             0214** ; HL: Source
             0215** ; DE: Second string
             0216** ;
0B4141 7E    0217** CSTR_CAT:		LD	A, (HL)			; Loop until we find the end of the first string
0B4142 B7    0218** OR	A
0B4143 28    0219** JR	Z, CSTR_CAT_1
0B4144 03 
0B4145 23    0220** INC	HL
0B4146 18    0221** JR	CSTR_CAT
0B4147 F9 
             0222** ;
0B4148 1A    0223** CSTR_CAT_1:		LD	A, (DE)			; Copy the second string onto the end of the first string
0B4149 77    0224** LD	(HL), A
0B414A B7    0225** OR	A			; Check for end of string
0B414B C8    0226** RET	Z			; And return
0B414C 23    0227** INC	HL
0B414D 13    0228** INC	DE
0B414E 18    0229** JR	CSTR_CAT_1		; Loop until finished
0B414F F8 
              0011* include "basic/patch.asm"
             0001** ;
             0002** ; Title:	BBC Basic for AGON
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	15/11/2023
             0006** ;
             0007** ; Modinfo:
             0008** ; 11/07/2023:	Fixed *BYE for ADL mode
             0009** ; 15/11/2023:	Improved OSLOAD_TXT; now handles LF terminated files, files with no trailing LF or CR/LF at end
             0010** 
             0011** ; .ASSUME	ADL = 1
             0012** 
             0013** ; INCLUDE	"equs.inc"
             0014** ; INCLUDE "macros.inc"
             0015** ; INCLUDE "mos_api.inc"	; In MOS/src
             0016** 
             0017** ; SEGMENT CODE
             0018** 
             0019** ; XDEF	OSWRCH
             0020** ; XDEF	OSLINE
             0021** ; XDEF	ESCSET
             0022** ; XDEF	PUTIME
             0023** ; XDEF	GETIME
             0024** ; XDEF	PUTCSR
             0025** ; XDEF 	GETCSR
             0026** ; XDEF	OSRDCH
             0027** ; XDEF	PROMPT
             0028** ; XDEF	OSKEY
             0029** ; XDEF	TRAP
             0030** ; XDEF	LTRAP
             0031** ; XDEF	OSINIT
             0032** ; XDEF	OSCLI
             0033** ; XDEF	OSBPUT
             0034** ; XDEF	OSBGET
             0035** ; XDEF	OSSTAT
             0036** ; XDEF	OSSHUT
             0037** ; XDEF	OSOPEN
             0038** ; XDEF	OSCALL
             0039** ; XDEF	GETPTR
             0040** ; XDEF	PUTPTR
             0041** ; XDEF	GETEXT
             0042** ; XDEF	GETIMS
             0043** ; XDEF	RESET
             0044** ; XDEF	OSLOAD
             0045** ; XDEF	OSSAVE
             0046** ; XDEF	EXPR_W2
             0047** ; XDEF	STAR_VERSION
             0048** 
             0049** ; XREF	_basic_end			; In init.asm
             0050** 
             0051** ; XREF	ASC_TO_NUMBER
             0052** ; XREF	RAM_START
             0053** ; XREF	RAM_END
             0054** ; XREF	FLAGS
             0055** ; XREF	ESCAPE
             0056** ; XREF	USER
             0057** ; XREF	RAM_Top
             0058** ; XREF	EXTERR
             0059** ; XREF	COUNT0
             0060** ; XREF	EXPRI
             0061** ; XREF	COMMA
             0062** ; XREF	XEQ
             0063** ; XREF	NXT
             0064** ; XREF	NULLTOCR
             0065** ; XREF	CRLF
             0066** ; XREF	CSTR_FNAME
             0067** ; XREF	CSTR_LINE
             0068** ; XREF	CSTR_FINDCH
             0069** ; XREF	CSTR_ENDSWITH
             0070** ; XREF	CSTR_CAT
             0071** ; XREF	FINDL
             0072** ; XREF	OUT_
             0073** ; XREF	ERROR_
             0074** ; XREF	ONEDIT
             0075** ; XREF	TELL
             0076** ; XREF	OSWRCHPT
             0077** ; XREF	OSWRCHCH
             0078** ; XREF	OSWRCHFH
             0079** ; XREF	LISTON
             0080** ; XREF	LISTIT
             0081** ; XREF	PAGE_
             0082** ; XREF	ONEDIT1
             0083** ; XREF	CLEAN
             0084** ; XREF	NEWIT
             0085** ; XREF	BAD
             0086** ; XREF	VBLANK_INIT
             0087** ; XREF	VBLANK_STOP
             0088** ; XREF	KEYDOWN
             0089** ; XREF	KEYASCII
             0090** ; XREF	WIDTH
             0091** ; XREF	ASSEM
             0092** 
             0093** ; OSLINE: Invoke the line editor
             0094** ;
0B4150 1E    0095** OSLINE:			LD 	E, 1			; Default is to clear the buffer
0B4151 01 
             0096** 
             0097** ; Entry point to line editor that does not clear the buffer
             0098** ;
0B4152 FD    0099** OSLINE1:		PUSH	IY
0B4153 E5 
0B4154 E5    0100** PUSH	HL			; Buffer address
0B4155 01    0101** LD	BC, 256			; Buffer length
0B4156 00 
0B4157 01 
0B4158 00 
             0102** MOSCALL	mos_editline		; Call the MOS line editor
0B4159 3E   0001**M LD	A, function
0B415A 09 
0B415B 49   0002**M RST.LIS	08h
0B415C CF 
0B415D E1    0103** POP	HL			; Pop the address
0B415E FD    0104** POP	IY
0B415F E1 
0B4160 F5    0105** PUSH	AF			; Stack the return value (key pressed)
0B4161 CD    0106** CALL	NULLTOCR		; Turn the 0 character to a CR
0B4162 F2 
0B4163 40 
0B4164 0B 
0B4165 CD    0107** CALL	CRLF			; Display CRLF
0B4166 38 
0B4167 3C 
0B4168 0B 
0B4169 F1    0108** POP	AF
0B416A FE    0109** CP	1Bh 			; Check if ESC terminated the input
0B416B 1B 
0B416C CA    0110** JP	Z, LTRAP1 		; Yes, so do the ESC thing
0B416D 68 
0B416E 42 
0B416F 0B 
0B4170 3A    0111** LD	A, (FLAGS)		; Otherwise
0B4171 42 
0B4172 50 
0B4173 0B 
0B4174 CB    0112** RES	7, A 			; Clear the escape flag
0B4175 BF 
0B4176 32    0113** LD	(FLAGS), A
0B4177 42 
0B4178 50 
0B4179 0B 
0B417A CD    0114** CALL	WAIT_VBLANK 		; Wait a frame
0B417B 2E 
0B417C 44 
0B417D 0B 
0B417E AF    0115** XOR	A			; Return A = 0
0B417F 32    0116** LD	(KEYDOWN), A
0B4180 47 
0B4181 50 
0B4182 0B 
0B4183 32    0117** LD	(KEYASCII), A
0B4184 48 
0B4185 50 
0B4186 0B 
0B4187 C9    0118** RET
             0119** 
             0120** ; PUTIME: set current time to DE:HL, in centiseconds.
             0121** ;
0B4188 DD    0122** PUTIME:			PUSH 	IX
0B4189 E5 
             0123** MOSCALL	mos_sysvars
0B418A 3E   0001**M LD	A, function
0B418B 08 
0B418C 49   0002**M RST.LIS	08h
0B418D CF 
0B418E DD    0124** LD	(IX + sysvar_time + 0), L
0B418F 75 
0B4190 00 
0B4191 DD    0125** LD	(IX + sysvar_time + 1), H
0B4192 74 
0B4193 01 
0B4194 DD    0126** LD	(IX + sysvar_time + 2), E
0B4195 73 
0B4196 02 
0B4197 DD    0127** LD	(IX + sysvar_time + 3), D
0B4198 72 
0B4199 03 
0B419A DD    0128** POP	IX
0B419B E1 
0B419C C9    0129** RET
             0130** 
             0131** ; GETIME: return current time in DE:HL, in centiseconds
             0132** ;
0B419D DD    0133** GETIME:			PUSH 	IX
0B419E E5 
             0134** MOSCALL	mos_sysvars
0B419F 3E   0001**M LD	A, function
0B41A0 08 
0B41A1 49   0002**M RST.LIS	08h
0B41A2 CF 
0B41A3 DD    0135** LD	L, (IX + sysvar_time + 0)
0B41A4 6E 
0B41A5 00 
0B41A6 DD    0136** LD	H, (IX + sysvar_time + 1)
0B41A7 66 
0B41A8 01 
0B41A9 DD    0137** LD	E, (IX + sysvar_time + 2)
0B41AA 5E 
0B41AB 02 
0B41AC DD    0138** LD	D, (IX + sysvar_time + 3)
0B41AD 56 
0B41AE 03 
0B41AF DD    0139** POP	IX
0B41B0 E1 
0B41B1 C9    0140** RET
             0141** 
             0142** ; PUTCSR: move to cursor to x=DE, y=HL
             0143** ;
0B41B2 3E    0144** PUTCSR:			LD	A, 1Fh			; TAB
0B41B3 1F 
0B41B4 5B    0145** RST.LIL	10h
0B41B5 D7 
0B41B6 7B    0146** LD	A, E			; X
0B41B7 5B    0147** RST.LIL 10h
0B41B8 D7 
0B41B9 7D    0148** LD	A, L			; Y
0B41BA 5B    0149** RST.LIL 10h
0B41BB D7 
0B41BC C9    0150** RET
             0151** 
             0152** ; GETCSR: return cursor position in x=DE, y=HL
             0153** ;
0B41BD DD    0154** GETCSR:			PUSH	IX			; Get the system vars in IX
0B41BE E5 
             0155** MOSCALL	mos_sysvars		; Reset the semaphore
0B41BF 3E   0001**M LD	A, function
0B41C0 08 
0B41C1 49   0002**M RST.LIS	08h
0B41C2 CF 
0B41C3 DD    0156** RES	0, (IX+sysvar_vpd_pflags)
0B41C4 CB 
0B41C5 04 
0B41C6 86 
             0157** VDU	23
0B41C7 3E   0001**M LD	A, val
0B41C8 17 
0B41C9 CD   0002**M CALL	OSWRCH
0B41CA F1 
0B41CB 41 
0B41CC 0B 
             0158** VDU	0
0B41CD 3E   0001**M LD	A, val
0B41CE 00 
0B41CF CD   0002**M CALL	OSWRCH
0B41D0 F1 
0B41D1 41 
0B41D2 0B 
             0159** VDU	vdp_cursor
0B41D3 3E   0001**M LD	A, val
0B41D4 82 
0B41D5 CD   0002**M CALL	OSWRCH
0B41D6 F1 
0B41D7 41 
0B41D8 0B 
0B41D9 DD    0160** @@:			BIT	0, (IX+sysvar_vpd_pflags)
0B41DA CB 
0B41DB 04 
0B41DC 46 
0B41DD 28    0161** JR	Z, @B			; Wait for the result
0B41DE FA 
0B41DF 16    0162** LD 	D, 0
0B41E0 00 
0B41E1 62    0163** LD	H, D
0B41E2 DD    0164** LD	E, (IX + sysvar_cursorX)
0B41E3 5E 
0B41E4 07 
0B41E5 DD    0165** LD	L, (IX + sysvar_cursorY)
0B41E6 6E 
0B41E7 08 
0B41E8 DD    0166** POP	IX
0B41E9 E1 
0B41EA C9    0167** RET
             0168** 
             0169** ; PROMPT: output the input prompt
             0170** ;
0B41EB 3E    0171** PROMPT: 		LD	A,'>'
0B41EC 3E 
0B41ED C3    0172** JP	OSWRCH
0B41EE F1 
0B41EF 41 
0B41F0 0B 
             0173** 
             0174** ; OSWRCH: Write a character out to the ESP32 VDU handler via the MOS
             0175** ; A: Character to write
             0176** ;
0B41F1 E5    0177** OSWRCH:			PUSH	HL
0B41F2 21    0178** LD	HL, LISTON		; Fetch the LISTON variable
0B41F3 40 
0B41F4 50 
0B41F5 0B 
0B41F6 CB    0179** BIT	3, (HL)			; Check whether we are in *EDIT mode
0B41F7 5E 
0B41F8 20    0180** JR	NZ, OSWRCH_BUFFER	; Yes, so just output to buffer
0B41F9 0B 
             0181** ;
0B41FA 2A    0182** LD	HL, (OSWRCHCH)		; L: Channel #
0B41FB 45 
0B41FC 50 
0B41FD 0B 
0B41FE 2D    0183** DEC	L			; If it is 1
0B41FF 28    0184** JR	Z, OSWRCH_FILE		; Then we are outputting to a file
0B4200 10 
             0185** ;
0B4201 E1    0186** POP	HL			; Otherwise
0B4202 5B    0187** RST.LIL	10h			; Output the character to MOS
0B4203 D7 
0B4204 C9    0188** RET
             0189** ;
0B4205 2A    0190** OSWRCH_BUFFER:		LD	HL, (OSWRCHPT)		; Fetch the pointer buffer
0B4206 43 
0B4207 50 
0B4208 0B 
0B4209 77    0191** LD	(HL), A			; Echo the character into the buffer
0B420A 23    0192** INC	HL			; Increment pointer
0B420B 22    0193** LD	(OSWRCHPT), HL		; Write pointer back
0B420C 43 
0B420D 50 
0B420E 0B 
0B420F E1    0194** POP	HL
0B4210 C9    0195** RET
             0196** ;
0B4211 D5    0197** OSWRCH_FILE:		PUSH	DE
0B4212 5C    0198** LD	E, H			; Filehandle to E
0B4213 CD    0199** CALL	OSBPUT			; Write the byte out
0B4214 2C 
0B4215 46 
0B4216 0B 
0B4217 D1    0200** POP	DE
0B4218 E1    0201** POP	HL
0B4219 C9    0202** RET
             0203** 
             0204** ; OSRDCH: Read a character in from the ESP32 keyboard handler
             0205** ; This is only called in GETS (eval.asm)
             0206** ;
             0207** OSRDCH:			MOSCALL	mos_getkey		; Read keyboard
0B421A 3E   0001**M LD	A, function
0B421B 00 
0B421C 49   0002**M RST.LIS	08h
0B421D CF 
0B421E FE    0208** CP	1Bh
0B421F 1B 
0B4220 28    0209** JR	Z, LTRAP1
0B4221 46 
0B4222 C9    0210** RET
             0211** 
             0212** 
             0213** ;OSKEY - Read key with time-limit, test for ESCape.
             0214** ;Main function is carried out in user patch.
             0215** ;   Inputs: HL = time limit (centiseconds)
             0216** ;  Outputs: Carry reset if time-out
             0217** ;           If carry set A = character
             0218** ; Destroys: A,H,L,F
             0219** ;
0B4223 CD    0220** OSKEY:			CALL	READKEY			; Read the keyboard
0B4224 54 
0B4225 42 
0B4226 0B 
0B4227 28    0221** JR	Z, @F 			; Skip if we have a key
0B4228 0A 
0B4229 7C    0222** LD	A, H 			; Check loop counter
0B422A B5    0223** OR 	L
0B422B C8    0224** RET 	Z 			; Return, we've not got a key at this point
0B422C CD    0225** CALL	WAIT_VBLANK 		; Wait a frame
0B422D 2E 
0B422E 44 
0B422F 0B 
0B4230 2B    0226** DEC 	HL			; Decrement
0B4231 18    0227** JR	OSKEY 			; And loop
0B4232 F0 
             0228** ;
0B4233 21    0229** @@:			LD	HL, KEYDOWN		; We have a key, so
0B4234 47 
0B4235 50 
0B4236 0B 
0B4237 36    0230** LD	(HL), 0			; clear the keydown flag
0B4238 00 
0B4239 FE    0231** CP	1BH			; If we are not pressing ESC,
0B423A 1B 
0B423B 37    0232** SCF 				; then flag we've got a character
0B423C C0    0233** RET	NZ
             0234** ;
             0235** ; ESCSET
             0236** ; Set the escape flag (bit 7 of FLAGS = 1) if escape is enabled (bit 6 of FLAGS = 0)
             0237** ;
0B423D E5    0238** ESCSET: 		PUSH    HL
0B423E 21    0239** LD      HL,FLAGS		; Pointer to FLAGS
0B423F 42 
0B4240 50 
0B4241 0B 
0B4242 CB    0240** BIT     6,(HL)			; If bit 6 is set, then
0B4243 76 
0B4244 20    0241** JR      NZ,ESCDIS		; escape is disabled, so skip
0B4245 02 
0B4246 CB    0242** SET     7,(HL)			; Set bit 7, the escape flag
0B4247 FE 
0B4248 E1    0243** ESCDIS: 		POP     HL
0B4249 C9    0244** RET
             0245** ;
             0246** ; ESCTEST
             0247** ; Test for ESC key
             0248** ;
0B424A CD    0249** ESCTEST:		CALL	READKEY			; Read the keyboard
0B424B 54 
0B424C 42 
0B424D 0B 
0B424E C0    0250** RET	NZ			; Skip if no key is pressed
0B424F FE    0251** CP	1BH			; If ESC pressed then
0B4250 1B 
0B4251 28    0252** JR	Z,ESCSET		; jump to the escape set routine
0B4252 EA 
0B4253 C9    0253** RET
             0254** 
             0255** ; Read the keyboard
             0256** ; Returns:
             0257** ; - A: ASCII of the pressed key
             0258** ; - F: Z if the key is pressed, otherwise NZ
             0259** ;
0B4254 3A    0260** READKEY:		LD	A, (KEYDOWN)		; Get key down
0B4255 47 
0B4256 50 
0B4257 0B 
0B4258 3D    0261** DEC	A 			; Set Z flag if keydown is 1
0B4259 3A    0262** LD	A, (KEYASCII)		; Get key ASCII value
0B425A 48 
0B425B 50 
0B425C 0B 
0B425D C9    0263** RET
             0264** ;
             0265** ; TRAP
             0266** ; This is called whenever BASIC needs to check for ESC
             0267** ;
0B425E CD    0268** TRAP:			CALL	ESCTEST			; Read keyboard, test for ESC, set FLAGS
0B425F 4A 
0B4260 42 
0B4261 0B 
             0269** ;
0B4262 3A    0270** LTRAP:			LD	A,(FLAGS)		; Get FLAGS
0B4263 42 
0B4264 50 
0B4265 0B 
0B4266 B7    0271** OR	A			; This checks for bit 7; if it is not set then the result will
0B4267 F0    0272** RET	P			; be positive (bit 7 is the sign bit in Z80), so return
0B4268 21    0273** LTRAP1:			LD	HL,FLAGS 		; Escape is pressed at this point, so
0B4269 42 
0B426A 50 
0B426B 0B 
0B426C CB    0274** RES	7,(HL)			; Clear the escape pressed flag and
0B426D BE 
0B426E C3    0275** JP	ESCAPE			; Jump to the ESCAPE error routine in exec.asm
0B426F 8C 
0B4270 0F 
0B4271 0B 
             0276** 
             0277** ;OSINIT - Initialise RAM mapping etc.
             0278** ;If BASIC is entered by BBCBASIC FILENAME then file
             0279** ;FILENAME.BBC is automatically CHAINed.
             0280** ;   Outputs: DE = initial value of HIMEM (top of RAM)
             0281** ;            HL = initial value of PAGE (user program)
             0282** ;            Z-flag reset indicates AUTO-RUN.
             0283** ;  Destroys: A,D,E,H,L,F
             0284** ;
0B4272 CD    0285** OSINIT:			CALL	VBLANK_INIT
0B4273 D1 
0B4274 4B 
0B4275 0B 
0B4276 AF    0286** XOR	A
0B4277 21    0287** LD 	HL, USER
0B4278 00 
0B4279 51 
0B427A 0B 
0B427B 11    0288** LD	DE, RAM_Top
0B427C 00 
0B427D 00 
0B427E 0B 
0B427F 5F    0289** LD	E, A			; Page boundary
0B4280 C9    0290** RET
             0291** 
             0292** ;
             0293** ;OSCLI - Process a MOS command
             0294** ;
0B4281 CD    0295** OSCLI: 			CALL    SKIPSP
0B4282 F5 
0B4283 42 
0B4284 0B 
0B4285 FE    0296** CP      CR
0B4286 0D 
0B4287 C8    0297** RET     Z
0B4288 FE    0298** CP      '|'
0B4289 7C 
0B428A C8    0299** RET     Z
0B428B EB    0300** EX      DE,HL
0B428C 21    0301** LD      HL,COMDS
0B428D 04 
0B428E 43 
0B428F 0B 
0B4290 1A    0302** OSCLI0:			LD      A,(DE)
0B4291 CD    0303** CALL    UPPRC
0B4292 FC 
0B4293 42 
0B4294 0B 
0B4295 BE    0304** CP      (HL)
0B4296 28    0305** JR      Z,OSCLI2
0B4297 0B 
0B4298 38    0306** JR      C,OSCLI6
0B4299 30 
0B429A CB    0307** OSCLI1:			BIT     7,(HL)
0B429B 7E 
0B429C 23    0308** INC     HL
0B429D 28    0309** JR      Z,OSCLI1
0B429E FB 
0B429F 23    0310** INC     HL
0B42A0 23    0311** INC     HL
0B42A1 18    0312** JR      OSCLI0
0B42A2 ED 
             0313** ;
0B42A3 D5    0314** OSCLI2:			PUSH    DE
0B42A4 13    0315** OSCLI3:			INC     DE
0B42A5 23    0316** INC     HL
0B42A6 1A    0317** LD      A,(DE)
0B42A7 CD    0318** CALL    UPPRC
0B42A8 FC 
0B42A9 42 
0B42AA 0B 
0B42AB FE    0319** CP      '.'			; ABBREVIATED?
0B42AC 2E 
0B42AD 28    0320** JR      Z,OSCLI4
0B42AE 0A 
0B42AF AE    0321** XOR     (HL)
0B42B0 28    0322** JR      Z,OSCLI3
0B42B1 F2 
0B42B2 FE    0323** CP      80H
0B42B3 80 
0B42B4 28    0324** JR      Z,OSCLI4
0B42B5 03 
0B42B6 D1    0325** POP     DE
0B42B7 18    0326** JR      OSCLI1
0B42B8 E1 
             0327** ;
0B42B9 F1    0328** OSCLI4:			POP     AF
0B42BA 13    0329** INC     DE
0B42BB CB    0330** OSCLI5:			BIT     7,(HL)
0B42BC 7E 
0B42BD 23    0331** INC     HL
0B42BE 28    0332** JR      Z,OSCLI5
0B42BF FB 
0B42C0 7E    0333** LD      A,(HL)
0B42C1 23    0334** INC     HL
0B42C2 66    0335** LD      H,(HL)
0B42C3 6F    0336** LD      L,A
0B42C4 E5    0337** PUSH    HL
0B42C5 EB    0338** EX      DE,HL
0B42C6 C3    0339** JP      SKIPSP
0B42C7 F5 
0B42C8 42 
0B42C9 0B 
             0340** ;
0B42CA EB    0341** OSCLI6:			EX	DE, HL			; HL: Buffer for command
0B42CB 11    0342** LD	DE, ACCS		; Buffer for command string is ACCS (the string accumulator)
0B42CC 00 
0B42CD 4D 
0B42CE 0B 
0B42CF D5    0343** PUSH	DE			; Store buffer address
0B42D0 CD    0344** CALL	CSTR_LINE		; Fetch the line
0B42D1 1C 
0B42D2 41 
0B42D3 0B 
0B42D4 E1    0345** POP	HL			; HL: Pointer to command string in ACCS
0B42D5 FD    0346** PUSH	IY
0B42D6 E5 
             0347** MOSCALL	mos_oscli		; Returns OSCLI error in A
0B42D7 3E   0001**M LD	A, function
0B42D8 10 
0B42D9 49   0002**M RST.LIS	08h
0B42DA CF 
0B42DB FD    0348** POP	IY
0B42DC E1 
0B42DD B7    0349** OR	A			; 0 means MOS returned OK
0B42DE C8    0350** RET	Z			; So don't do anything
0B42DF C3    0351** JP 	OSERROR			; Otherwise it's a MOS error
0B42E0 08 
0B42E1 45 
0B42E2 0B 
             0352** 
0B42E3 3E    0353** HUH:    		LD      A,254			; Bad command error
0B42E4 FE 
0B42E5 CD    0354** CALL    EXTERR
0B42E6 68 
0B42E7 3A 
0B42E8 0B 
0B42E9 42    0355** DB    	"Bad command"
0B42EA 61 
0B42EB 64 
0B42EC 20 
0B42EC 63   
0B42ED 6F 
0B42EE 6D 
0B42EF 6D 
0B42EF 61   
0B42F0 6E 
0B42F1 64 
0B42F4 00    0356** DEFB    0
             0357** 
0B42F5 7E    0358** SKIPSP:			LD      A,(HL)
0B42F6 FE    0359** CP      ' '
0B42F7 20 
0B42F8 C0    0360** RET     NZ
0B42F9 23    0361** INC     HL
0B42FA 18    0362** JR      SKIPSP
0B42FB F9 
             0363** 
0B42FC E6    0364** UPPRC:  		AND     7FH
0B42FD 7F 
0B42FE FE    0365** CP      '`'
0B42FF 60 
0B4300 D8    0366** RET     C
0B4301 E6    0367** AND     5FH			; CONVERT TO UPPER CASE
0B4302 5F 
0B4303 C9    0368** RET
             0369** 
             0370** ; Each command has bit 7 of the last character set, and is followed by the address of the handler
             0371** ; These must be in alphabetical order
             0372** ;
             0373** ; BEGIN NOT FOUND IN BINARY
             0374** ; COMDS:  		DB	"AS","M"+80h		; ASM
             0375** ; 			DW	STAR_ASM
             0376** ; 			DB	"BY","E"+80h		; BYE
             0377** ; 			DW	STAR_BYE
             0378** ; 			DB	"EDI","T"+80h		; EDIT
             0379** ; 			DW	STAR_EDIT
             0380** ; 			DB	"F","X"+80h		; FX
             0381** ; 			DW	STAR_FX
             0382** ; 			DB	"VERSIO","N"+80h	; VERSION
             0383** ; 			DW	STAR_VERSION
             0384** ; 			DB	FFh
             0385** ; END NOT FOUND IN BINARY
             0386** ; BEGIN INSERTED FROM BINARY
             0387** ; Each command has bit 7 of the last character set, and is followed by the address of the handler
             0388** ; These must be in alphabetical order
             0389** ;
             0390** COMDS:
0B4304 42    0391** db 0x42 ; 044013 41     11404 COMDS:  		DB	"AS","M"+80h		; ASM
0B4305 59    0392** db 0x59 ; 044014
0B4306 C5    0393** db 0xc5 ; 044015
0B4307 2C    0394** db 0x2c ; 044016 31     11405 DW	STAR_ASM
0B4308 40    0395** db 0x40 ; 044017
0B4309 45    0396** db 0x45 ; 044018 42     11406 DB	"BY","E"+80h		; BYE
0B430A 44    0397** db 0x44 ; 044019
0B430B 49    0398** db 0x49 ; 04401A
0B430C D4    0399** db 0xd4 ; 04401B 3D     11407 DW	STAR_BYE
0B430D 61    0400** db 0x61 ; 04401C
0B430E 40    0401** db 0x40 ; 04401D 45     11408 DB	"EDI","T"+80h		; EDIT
0B430F 46    0402** db 0x46 ; 04401E
0B4310 D8    0403** db 0xd8 ; 04401F
0B4311 A1    0404** db 0xa1 ; 044020
0B4312 40    0405** db 0x40 ; 044021 72     11409 DW	STAR_EDIT
0B4313 56    0406** db 0x56 ; 044022
0B4314 45    0407** db 0x45 ; 044023 46     11410 DB	"F","X"+80h		; FX
0B4315 52    0408** db 0x52 ; 044024
0B4316 53    0409** db 0x53 ; 044025 B2     11411 DW	STAR_FX
0B4317 49    0410** db 0x49 ; 044026
0B4318 4F    0411** db 0x4f ; 044027 56     11412 DB	"VERSIO","N"+80h	; VERSION
0B4319 CE    0412** db 0xce ; 044028
0B431A 38    0413** db 0x38 ; 044029
0B431B 40    0414** db 0x40 ; 04402A
0B431C FF    0415** db 0xff ; 04402B
             0416** ; END INSERTED FROM BINARY
             0417** 
             0418** ; BEGIN NOT FOUND IN BINARY
             0419** ; ; *ASM string
             0420** ; ;
             0421** ; STAR_ASM:		PUSH	IY			; Stack the BASIC pointer
             0422** ; 			PUSH	HL			; HL = IY
             0423** ; 			POP	IY
             0424** ; 			CALL	ASSEM			; Invoke the assembler
             0425** ; 			POP	IY
             0426** ; 			RET
             0427** ; END NOT FOUND IN BINARY
             0428** 
             0429** ; *BYE
             0430** ;
0B431D CD    0431** STAR_BYE:		CALL	VBLANK_STOP		; Restore MOS interrupts
0B431E E5 
0B431F 4B 
0B4320 0B 
0B4321 21    0432** LD	HL, 0			; The return value
0B4322 00 
0B4323 00 
0B4324 00 
0B4325 C3    0433** JP	_basic_end 			; Jump back to the end routine in init.asm
0B4326 B2 
0B4327 03 
0B4328 0B 
             0434** 
             0435** ; *VERSION
             0436** ;
0B4329 CD    0437** STAR_VERSION:		CALL    TELL			; Output the welcome message
0B432A 81 
0B432B 40 
0B432C 0B 
0B432D 42    0438** DB    	"BBC BASIC (Agon ADL) Version 1.03\n\r",0
0B432E 42 
0B432F 43 
0B4330 20 
0B4330 42   
0B4331 41 
0B4332 53 
0B4333 49 
0B4333 43   
0B4334 20 
0B4335 28 
0B4336 41 
0B4336 67   
0B4337 6F 
0B4338 6E 
0B4339 20 
0B4339 41   
0B433A 44 
0B433B 4C 
0B433C 29 
0B433C 20   
0B433D 56 
0B433E 65 
0B433F 72 
0B433F 73   
0B4340 69 
0B4341 6F 
0B4342 6E 
0B4342 20   
0B4343 31 
0B4344 2E 
0B4345 30 
0B4345 33   
0B4346 0A 
0B4347 0D 
0B4348 00 
0B4351 C9    0439** RET
             0440** 
             0441** ; *EDIT linenum
             0442** ;
0B4352 CD    0443** STAR_EDIT:		CALL	ASC_TO_NUMBER		; DE: Line number to edit
0B4353 88 
0B4354 40 
0B4355 0B 
0B4356 EB    0444** EX	DE, HL			; HL: Line number
0B4357 CD    0445** CALL	FINDL			; HL: Address in RAM of tokenised line
0B4358 80 
0B4359 3C 
0B435A 0B 
0B435B 3E    0446** LD	A, 41			; F:NZ If the line is not found
0B435C 29 
0B435D C2    0447** JP	NZ, ERROR_		; Do error 41: No such line in that case
0B435E 51 
0B435F 3A 
0B4360 0B 
             0448** ;
             0449** ; Use LISTIT to output the line to the ACCS buffer
             0450** ;
0B4361 23    0451** INC	HL			; Skip the length byte
0B4362 5E    0452** LD	E, (HL)			; Fetch the line number
0B4363 23    0453** INC	HL
0B4364 56    0454** LD	D, (HL)
0B4365 23    0455** INC	HL
0B4366 DD    0456** LD	IX, ACCS		; Pointer to where the copy is to be stored
0B4367 21 
0B4368 00 
0B4369 4D 
0B4369 0B   
0B436B DD    0457** LD	(OSWRCHPT), IX
0B436C 22 
0B436D 43 
0B436E 50 
0B436E 0B   
0B4370 DD    0458** LD	IX, LISTON		; Pointer to LISTON variable in RAM
0B4371 21 
0B4372 40 
0B4373 50 
0B4373 0B   
0B4375 DD    0459** LD	A, (IX)			; Store that variable
0B4376 7E 
0B4377 00 
0B4378 F5    0460** PUSH	AF
0B4379 DD    0461** LD	(IX), 09h		; Set to echo to buffer
0B437A 36 
0B437B 00 
0B437C 09 
0B437D CD    0462** CALL	LISTIT
0B437E 83 
0B437F 3B 
0B4380 0B 
0B4381 F1    0463** POP	AF
0B4382 DD    0464** LD	(IX), A			; Restore the original LISTON variable
0B4383 77 
0B4384 00 
0B4385 21    0465** LD	HL, ACCS		; HL: ACCS
0B4386 00 
0B4387 4D 
0B4388 0B 
0B4389 5D    0466** LD	E, L			;  E: 0 - Don't clear the buffer; ACCS is on a page boundary so L is 0
0B438A CD    0467** CALL	OSLINE1			; Invoke the editor
0B438B 52 
0B438C 41 
0B438D 0B 
0B438E C3    0468** JP	ONEDIT			; Jump back to the BASIC loop just after the normal line edit
0B438F C1 
0B4390 33 
0B4391 0B 
             0469** 
             0470** ; OSCLI FX n
             0471** ;
0B4392 CD    0472** STAR_FX:		CALL	ASC_TO_NUMBER
0B4393 88 
0B4394 40 
0B4395 0B 
0B4396 4B    0473** LD	C, E			; C: Save FX #
0B4397 CD    0474** CALL	ASC_TO_NUMBER
0B4398 88 
0B4399 40 
0B439A 0B 
0B439B 7A    0475** LD	A, D  			; Is first parameter > 255?
0B439C B7    0476** OR 	A
0B439D 28    0477** JR	Z, STAR_FX1		; Yes, so skip next bit
0B439E 03 
0B439F EB    0478** EX	DE, HL 			; Parameter is 16-bit
0B43A0 18    0479** JR	STAR_FX2
0B43A1 07 
             0480** ;
0B43A2 43    0481** STAR_FX1:		LD	B, E 			; B: Save First parameter
0B43A3 CD    0482** CALL	ASC_TO_NUMBER		; Fetch second parameter
0B43A4 88 
0B43A5 40 
0B43A6 0B 
0B43A7 68    0483** LD	L, B 			; L: First parameter
0B43A8 63    0484** LD	H, E 			; H: Second parameter
             0485** ;
0B43A9 79    0486** STAR_FX2:		LD	A, C 			; A: FX #, and fall through to OSBYTE
             0487** ;
             0488** ; OSBYTE
             0489** ;  A: FX #
             0490** ;  L: First parameter
             0491** ;  H: Second parameter
             0492** ;
0B43AA FE    0493** OSBYTE:			CP	0BH			; *FX 11, n: Keyboard auto-repeat delay
0B43AB 0B 
0B43AC 28    0494** JR	Z, OSBYTE_0B
0B43AD 18 
0B43AE FE    0495** CP	0CH			; *FX 12, n: Keyboard auto-repeat rate
0B43AF 0C 
0B43B0 28    0496** JR	Z, OSBYTE_0C
0B43B1 43 
0B43B2 FE    0497** CP	13H			; *FX 19: Wait for vblank
0B43B3 13 
0B43B4 28    0498** JR	Z, OSBYTE_13
0B43B5 6E 
0B43B6 FE    0499** CP	76H			; *FX 118, n: Set keyboard LED
0B43B7 76 
0B43B8 CA    0500** JP	Z, OSBYTE_76
0B43B9 3F 
0B43BA 44 
0B43BB 0B 
0B43BC FE    0501** CP	A0H
0B43BD A0 
0B43BE CA    0502** JP	Z, OSBYTE_A0
0B43BF 6F 
0B43C0 44 
0B43C1 0B 
0B43C2 C3    0503** JP	HUH			; Anything else trips an error
0B43C3 E3 
0B43C4 42 
0B43C5 0B 
             0504** 
             0505** ; OSBYTE 0x0B (FX 11,n): Keyboard auto-repeat delay
             0506** ; Parameters:
             0507** ; - HL: Repeat delay
             0508** ;
             0509** OSBYTE_0B:		VDU	23
0B43C6 3E   0001**M LD	A, val
0B43C7 17 
0B43C8 CD   0002**M CALL	OSWRCH
0B43C9 F1 
0B43CA 41 
0B43CB 0B 
             0510** VDU	0
0B43CC 3E   0001**M LD	A, val
0B43CD 00 
0B43CE CD   0002**M CALL	OSWRCH
0B43CF F1 
0B43D0 41 
0B43D1 0B 
             0511** VDU	vdp_keystate
0B43D2 3E   0001**M LD	A, val
0B43D3 88 
0B43D4 CD   0002**M CALL	OSWRCH
0B43D5 F1 
0B43D6 41 
0B43D7 0B 
             0512** VDU	L
0B43D8 7D   0001**M LD	A, val
0B43D9 CD   0002**M CALL	OSWRCH
0B43DA F1 
0B43DB 41 
0B43DC 0B 
             0513** VDU	H
0B43DD 7C   0001**M LD	A, val
0B43DE CD   0002**M CALL	OSWRCH
0B43DF F1 
0B43E0 41 
0B43E1 0B 
             0514** VDU	0
0B43E2 3E   0001**M LD	A, val
0B43E3 00 
0B43E4 CD   0002**M CALL	OSWRCH
0B43E5 F1 
0B43E6 41 
0B43E7 0B 
             0515** VDU 	0
0B43E8 3E   0001**M LD	A, val
0B43E9 00 
0B43EA CD   0002**M CALL	OSWRCH
0B43EB F1 
0B43EC 41 
0B43ED 0B 
             0516** VDU	255
0B43EE 3E   0001**M LD	A, val
0B43EF FF 
0B43F0 CD   0002**M CALL	OSWRCH
0B43F1 F1 
0B43F2 41 
0B43F3 0B 
0B43F4 C9    0517** RET
             0518** 
             0519** ; OSBYTE 0x0C (FX 12,n): Keyboard auto-repeat rate
             0520** ; Parameters:
             0521** ; - HL: Repeat rate
             0522** ;
             0523** OSBYTE_0C:		VDU	23
0B43F5 3E   0001**M LD	A, val
0B43F6 17 
0B43F7 CD   0002**M CALL	OSWRCH
0B43F8 F1 
0B43F9 41 
0B43FA 0B 
             0524** VDU	0
0B43FB 3E   0001**M LD	A, val
0B43FC 00 
0B43FD CD   0002**M CALL	OSWRCH
0B43FE F1 
0B43FF 41 
0B4400 0B 
             0525** VDU	vdp_keystate
0B4401 3E   0001**M LD	A, val
0B4402 88 
0B4403 CD   0002**M CALL	OSWRCH
0B4404 F1 
0B4405 41 
0B4406 0B 
             0526** VDU	0
0B4407 3E   0001**M LD	A, val
0B4408 00 
0B4409 CD   0002**M CALL	OSWRCH
0B440A F1 
0B440B 41 
0B440C 0B 
             0527** VDU 	0
0B440D 3E   0001**M LD	A, val
0B440E 00 
0B440F CD   0002**M CALL	OSWRCH
0B4410 F1 
0B4411 41 
0B4412 0B 
             0528** VDU	L
0B4413 7D   0001**M LD	A, val
0B4414 CD   0002**M CALL	OSWRCH
0B4415 F1 
0B4416 41 
0B4417 0B 
             0529** VDU	H
0B4418 7C   0001**M LD	A, val
0B4419 CD   0002**M CALL	OSWRCH
0B441A F1 
0B441B 41 
0B441C 0B 
             0530** VDU	255
0B441D 3E   0001**M LD	A, val
0B441E FF 
0B441F CD   0002**M CALL	OSWRCH
0B4420 F1 
0B4421 41 
0B4422 0B 
0B4423 C9    0531** RET
             0532** 
             0533** ; OSBYTE 0x13 (FX 19): Wait for vertical blank interrupt
             0534** ;
0B4424 CD    0535** OSBYTE_13:		CALL	WAIT_VBLANK
0B4425 2E 
0B4426 44 
0B4427 0B 
0B4428 2E    0536** LD	L, 0			; Returns 0
0B4429 00 
0B442A C3    0537** JP	COUNT0
0B442B 70 
0B442C 08 
0B442D 0B 
             0538** ;
0B442E DD    0539** WAIT_VBLANK:		PUSH 	IX			; Wait for VBLANK interrupt
0B442F E5 
             0540** MOSCALL	mos_sysvars		; Fetch pointer to system variables
0B4430 3E   0001**M LD	A, function
0B4431 08 
0B4432 49   0002**M RST.LIS	08h
0B4433 CF 
0B4434 DD    0541** LD	A, (IX + sysvar_time + 0)
0B4435 7E 
0B4436 00 
0B4437 DD    0542** @@:			CP 	A, (IX + sysvar_time + 0)
0B4438 BE 
0B4439 00 
0B443A 28    0543** JR	Z, @B
0B443B FB 
0B443C DD    0544** POP	IX
0B443D E1 
0B443E C9    0545** RET
             0546** 
             0547** ; OSBYTE 0x76 (FX 118,n): Set Keyboard LED
             0548** ; Parameters:
             0549** ; - L: LED (Bit 0: Scroll Lock, Bit 1: Caps Lock, Bit 2: Num Lock)
             0550** ;
             0551** OSBYTE_76:		VDU	23
0B443F 3E   0001**M LD	A, val
0B4440 17 
0B4441 CD   0002**M CALL	OSWRCH
0B4442 F1 
0B4443 41 
0B4444 0B 
             0552** VDU	0
0B4445 3E   0001**M LD	A, val
0B4446 00 
0B4447 CD   0002**M CALL	OSWRCH
0B4448 F1 
0B4449 41 
0B444A 0B 
             0553** VDU	vdp_keystate
0B444B 3E   0001**M LD	A, val
0B444C 88 
0B444D CD   0002**M CALL	OSWRCH
0B444E F1 
0B444F 41 
0B4450 0B 
             0554** VDU	0
0B4451 3E   0001**M LD	A, val
0B4452 00 
0B4453 CD   0002**M CALL	OSWRCH
0B4454 F1 
0B4455 41 
0B4456 0B 
             0555** VDU 	0
0B4457 3E   0001**M LD	A, val
0B4458 00 
0B4459 CD   0002**M CALL	OSWRCH
0B445A F1 
0B445B 41 
0B445C 0B 
             0556** VDU	0
0B445D 3E   0001**M LD	A, val
0B445E 00 
0B445F CD   0002**M CALL	OSWRCH
0B4460 F1 
0B4461 41 
0B4462 0B 
             0557** VDU	0
0B4463 3E   0001**M LD	A, val
0B4464 00 
0B4465 CD   0002**M CALL	OSWRCH
0B4466 F1 
0B4467 41 
0B4468 0B 
             0558** VDU	L
0B4469 7D   0001**M LD	A, val
0B446A CD   0002**M CALL	OSWRCH
0B446B F1 
0B446C 41 
0B446D 0B 
0B446E C9    0559** RET
             0560** 
             0561** ; OSBYTE 0xA0: Fetch system variable
             0562** ; Parameters:
             0563** ; - L: The system variable to fetch
             0564** ;
0B446F DD    0565** OSBYTE_A0:		PUSH	IX
0B4470 E5 
             0566** MOSCALL	mos_sysvars		; Fetch pointer to system variables
0B4471 3E   0001**M LD	A, function
0B4472 08 
0B4473 49   0002**M RST.LIS	08h
0B4474 CF 
0B4475 01    0567** LD	BC, 0
0B4476 00 
0B4477 00 
0B4478 00 
0B4479 4D    0568** LD	C, L			; BCU = L
0B447A DD    0569** ADD	IX, BC			; Add to IX
0B447B 09 
0B447C DD    0570** LD	L, (IX + 0)		; Fetch the return value
0B447D 6E 
0B447E 00 
0B447F DD    0571** POP	IX
0B4480 E1 
0B4481 C3    0572** JP 	COUNT0
0B4482 70 
0B4483 08 
0B4484 0B 
             0573** 
             0574** ;OSLOAD - Load an area of memory from a file.
             0575** ;   Inputs: HL addresses filename (CR terminated)
             0576** ;           DE = address at which to load
             0577** ;           BC = maximum allowed size (bytes)
             0578** ;  Outputs: Carry reset indicates no room for file.
             0579** ; Destroys: A,B,C,D,E,H,L,F
             0580** ;
0B4485 C5    0581** OSLOAD:			PUSH	BC			; Stack the size
0B4486 D5    0582** PUSH	DE			; Stack the load address
0B4487 11    0583** LD	DE, ACCS		; Buffer address for filename
0B4488 00 
0B4489 4D 
0B448A 0B 
0B448B CD    0584** CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0B448C 0A 
0B448D 41 
0B448E 0B 
0B448F 21    0585** LD	HL, ACCS		; HL: Filename
0B4490 00 
0B4491 4D 
0B4492 0B 
0B4493 CD    0586** CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0B4494 85 
0B4495 45 
0B4496 0B 
0B4497 CD    0587** CALL	EXT_HANDLER		; Get the default handler
0B4498 99 
0B4499 45 
0B449A 0B 
0B449B D1    0588** POP	DE			; Restore the load address
0B449C C1    0589** POP	BC			; Restore the size
0B449D B7    0590** OR	A
0B449E 28    0591** JR 	Z, OSLOAD_BBC
0B449F 60 
             0592** ;
             0593** ; Load the file in as a text file
             0594** ;
0B44A0 AF    0595** OSLOAD_TXT:		XOR	A			; Set file attributes to read
0B44A1 CD    0596** CALL	OSOPEN			; Open the file
0B44A2 0D 
0B44A3 46 
0B44A4 0B 
0B44A5 5F    0597** LD 	E, A 			; The filehandle
0B44A6 B7    0598** OR	A
0B44A7 3E    0599** LD	A, 4			; File not found error
0B44A8 04 
0B44A9 28    0600** JR	Z, OSERROR		; Jump to error handler
0B44AA 5D 
0B44AB CD    0601** CALL	NEWIT			; Call NEW to clear the program space
0B44AC 5D 
0B44AD 3B 
0B44AE 0B 
             0602** ;
0B44AF 21    0603** OSLOAD_TXT1:		LD	HL, ACCS 		; Where the input is going to be stored
0B44B0 00 
0B44B1 4D 
0B44B2 0B 
             0604** ;
             0605** ; First skip any whitespace (indents) at the beginning of the input
             0606** ;
0B44B3 CD    0607** @@:			CALL	OSBGET			; Read the byte into A
0B44B4 24 
0B44B5 46 
0B44B6 0B 
0B44B7 38    0608** JR	C, OSLOAD_TXT3		; Is it EOF?
0B44B8 1E 
0B44B9 FE    0609** CP	LF 			; Is it LF?
0B44BA 0A 
0B44BB 28    0610** JR	Z, OSLOAD_TXT3 		; Yes, so skip to the next line
0B44BC 1A 
0B44BD FE    0611** CP	21h			; Is it less than or equal to ASCII space?
0B44BE 21 
0B44BF 38    0612** JR	C, @B 			; Yes, so keep looping
0B44C0 F2 
0B44C1 77    0613** LD	(HL), A 		; Store the first character
0B44C2 2C    0614** INC	L
             0615** ;
             0616** ; Now read the rest of the line in
             0617** ;
0B44C3 CD    0618** OSLOAD_TXT2:		CALL	OSBGET			; Read the byte into A
0B44C4 24 
0B44C5 46 
0B44C6 0B 
0B44C7 38    0619** JR	C, OSLOAD_TXT4		; Is it EOF?
0B44C8 2B 
0B44C9 FE    0620** CP	20h			; Skip if not an ASCII character
0B44CA 20 
0B44CB 38    0621** JR	C, @F
0B44CC 06 
0B44CD 77    0622** LD	(HL), A 		; Store in the input buffer
0B44CE 2C    0623** INC	L			; Increment the buffer pointer
0B44CF CA    0624** JP	Z, BAD			; If the buffer is full (wrapped to 0) then jump to Bad Program error
0B44D0 E9 
0B44D1 39 
0B44D2 0B 
0B44D3 FE    0625** @@:			CP	LF			; Check for LF
0B44D4 0A 
0B44D5 20    0626** JR	NZ, OSLOAD_TXT2		; If not, then loop to read the rest of the characters in
0B44D6 EC 
             0627** ;
             0628** ; Finally, handle EOL/EOF
             0629** ;
0B44D7 36    0630** OSLOAD_TXT3:		LD	(HL), CR		; Store a CR for BBC BASIC
0B44D8 0D 
0B44D9 7D    0631** LD	A, L			; Check for minimum line length
0B44DA FE    0632** CP	2			; If it is 2 characters or less (including CR)
0B44DB 02 
0B44DC 38    0633** JR	C, @F			; Then don't bother entering it
0B44DD 0A 
0B44DE D5    0634** PUSH	DE			; Preserve the filehandle
0B44DF CD    0635** CALL	ONEDIT1			; Enter the line in memory
0B44E0 CD 
0B44E1 33 
0B44E2 0B 
0B44E3 DC    0636** CALL	C,CLEAN			; If a new line has been entered, then call CLEAN to set TOP and write &FFFF end of program marker
0B44E4 30 
0B44E5 3B 
0B44E6 0B 
0B44E7 D1    0637** POP	DE
0B44E8 CD    0638** @@:			CALL	OSSTAT			; End of file?
0B44E9 35 
0B44EA 46 
0B44EB 0B 
0B44EC 20    0639** JR	NZ, OSLOAD_TXT1		; No, so loop
0B44ED C1 
0B44EE CD    0640** CALL	OSSHUT			; Close the file
0B44EF 1C 
0B44F0 46 
0B44F1 0B 
0B44F2 37    0641** SCF				; Flag to BASIC that we're good
0B44F3 C9    0642** RET
             0643** ;
             0644** ; Special case for BASIC programs with no blank line at the end
             0645** ;
0B44F4 FE    0646** OSLOAD_TXT4:		CP	20h			; Skip if not an ASCII character
0B44F5 20 
0B44F6 38    0647** JR	C, @F
0B44F7 06 
0B44F8 77    0648** LD	(HL), A			; Store the character
0B44F9 2C    0649** INC	L
0B44FA CA    0650** JP	Z, BAD
0B44FB E9 
0B44FC 39 
0B44FD 0B 
0B44FE 18    0651** @@:			JR	OSLOAD_TXT3
0B44FF D7 
             0652** 
             0653** ;
             0654** ; Load the file in as a tokenised binary blob
             0655** ;
             0656** OSLOAD_BBC:		MOSCALL	mos_load		; Call LOAD in MOS
0B4500 3E   0001**M LD	A, function
0B4501 01 
0B4502 49   0002**M RST.LIS	08h
0B4503 CF 
0B4504 D0    0657** RET	NC			; If load returns with carry reset - NO ROOM
0B4505 B7    0658** OR	A			; If there is no error (A=0)
0B4506 37    0659** SCF				; Need to set carry indicating there was room
0B4507 C8    0660** RET	Z			; Return
             0661** ;
0B4508 F5    0662** OSERROR:		PUSH	AF			; Handle the MOS error
0B4509 21    0663** LD	HL, ACCS		; Address of the buffer
0B450A 00 
0B450B 4D 
0B450C 0B 
0B450D 01    0664** LD	BC, 256			; Length of the buffer
0B450E 00 
0B450F 01 
0B4510 00 
0B4511 5F    0665** LD	E, A			; The error code
             0666** MOSCALL	mos_getError		; Copy the error message into the buffer
0B4512 3E   0001**M LD	A, function
0B4513 0F 
0B4514 49   0002**M RST.LIS	08h
0B4515 CF 
0B4516 F1    0667** POP	AF
0B4517 E5    0668** PUSH	HL			; Stack the address of the error (now in ACCS)
0B4518 C6    0669** ADD	A, 127			; Add 127 to the error code (MOS errors start at 128, and are trappable)
0B4519 7F 
0B451A C3    0670** JP	EXTERR			; Trigger an external error
0B451B 68 
0B451C 3A 
0B451D 0B 
             0671** 
             0672** ;OSSAVE - Save an area of memory to a file.
             0673** ;   Inputs: HL addresses filename (term CR)
             0674** ;           DE = start address of data to save
             0675** ;           BC = length of data to save (bytes)
             0676** ; Destroys: A,B,C,D,E,H,L,F
             0677** ;
0B451E C5    0678** OSSAVE:			PUSH	BC			; Stack the size
0B451F D5    0679** PUSH	DE			; Stack the save address
0B4520 11    0680** LD	DE, ACCS		; Buffer address for filename
0B4521 00 
0B4522 4D 
0B4523 0B 
0B4524 CD    0681** CALL	CSTR_FNAME		; Fetch filename from MOS into buffer
0B4525 0A 
0B4526 41 
0B4527 0B 
0B4528 21    0682** LD	HL, ACCS		; HL: Filename
0B4529 00 
0B452A 4D 
0B452B 0B 
0B452C CD    0683** CALL	EXT_DEFAULT		; Tack on the extension .BBC if not specified
0B452D 85 
0B452E 45 
0B452F 0B 
0B4530 CD    0684** CALL	EXT_HANDLER		; Get the default handler
0B4531 99 
0B4532 45 
0B4533 0B 
0B4534 D1    0685** POP	DE			; Restore the save address
0B4535 C1    0686** POP	BC			; Restore the size
0B4536 B7    0687** OR	A			; Is the extension .BBC
0B4537 28    0688** JR	Z, OSSAVE_BBC		; Yes, so use that
0B4538 44 
             0689** ;
             0690** ; Save the file out as a text file
             0691** ;
0B4539 3A    0692** OSSAVE_TXT:		LD 	A, (OSWRCHCH)		; Stack the current channel
0B453A 45 
0B453B 50 
0B453C 0B 
0B453D F5    0693** PUSH	AF
0B453E AF    0694** XOR	A
0B453F 3C    0695** INC	A			; Make sure C is clear, A is 1, for OPENOUT
0B4540 32    0696** LD	(OSWRCHCH), A
0B4541 45 
0B4542 50 
0B4543 0B 
0B4544 CD    0697** CALL	OSOPEN			; Open the file
0B4545 0D 
0B4546 46 
0B4547 0B 
0B4548 32    0698** LD	(OSWRCHFH), A		; Store the file handle for OSWRCH
0B4549 46 
0B454A 50 
0B454B 0B 
0B454C DD    0699** LD	IX, LISTON		; Required for LISTIT
0B454D 21 
0B454E 40 
0B454F 50 
0B454F 0B   
0B4551 2A    0700** LD	HL, (PAGE_)		; Get start of program area
0B4552 14 
0B4553 50 
0B4554 0B 
0B4555 D9    0701** EXX
0B4556 01    0702** LD	BC, 0			; Set the initial indent counters
0B4557 00 
0B4558 00 
0B4559 00 
0B455A D9    0703** EXX
0B455B 7E    0704** OSSAVE_TXT1:		LD	A, (HL)			; Check for end of program marker
0B455C B7    0705** OR	A
0B455D 28    0706** JR	Z, OSSAVE_TXT2
0B455E 0F 
0B455F 23    0707** INC	HL			; Skip the length byte
0B4560 11    0708** LD	DE, 0			; Clear DE to ensure we get a 16-bit line number
0B4561 00 
0B4562 00 
0B4563 00 
0B4564 5E    0709** LD	E, (HL)			; Get the line number
0B4565 23    0710** INC	HL
0B4566 56    0711** LD	D, (HL)
0B4567 23    0712** INC	HL
0B4568 CD    0713** CALL	LISTIT			; List the line
0B4569 83 
0B456A 3B 
0B456B 0B 
0B456C 18    0714** JR	OSSAVE_TXT1
0B456D ED 
0B456E 3A    0715** OSSAVE_TXT2:		LD	A, (OSWRCHFH)		; Get the file handle
0B456F 46 
0B4570 50 
0B4571 0B 
0B4572 5F    0716** LD	E, A
0B4573 CD    0717** CALL	OSSHUT			; Close it
0B4574 1C 
0B4575 46 
0B4576 0B 
0B4577 F1    0718** POP	AF			; Restore the channel
0B4578 32    0719** LD	(OSWRCHCH), A
0B4579 45 
0B457A 50 
0B457B 0B 
0B457C C9    0720** RET
             0721** ;
             0722** ; Save the file out as a tokenised binary blob
             0723** ;
             0724** OSSAVE_BBC:		MOSCALL	mos_save		; Call SAVE in MOS
0B457D 3E   0001**M LD	A, function
0B457E 02 
0B457F 49   0002**M RST.LIS	08h
0B4580 CF 
0B4581 B7    0725** OR	A			; If there is no error (A=0)
0B4582 C8    0726** RET	Z			; Just return
0B4583 18    0727** JR	OSERROR			; Trip an error
0B4584 83 
             0728** 
             0729** ; Check if an extension is specified in the filename
             0730** ; Add a default if not specified
             0731** ; HL: Filename (CSTR format)
             0732** ;
0B4585 E5    0733** EXT_DEFAULT:		PUSH	HL			; Stack the filename pointer
0B4586 0E    0734** LD	C, '.'			; Search for dot (marks start of extension)
0B4587 2E 
0B4588 CD    0735** CALL	CSTR_FINDCH
0B4589 2A 
0B458A 41 
0B458B 0B 
0B458C B7    0736** OR	A			; Check for end of string marker
0B458D 20    0737** JR	NZ, @F			; No, so skip as we have an extension at this point
0B458E 08 
0B458F 11    0738** LD	DE, EXT_LOOKUP		; Get the first (default extension)
0B4590 C9 
0B4591 45 
0B4592 0B 
0B4593 CD    0739** CALL	CSTR_CAT		; Concat it to string pointed to by HL
0B4594 41 
0B4595 41 
0B4596 0B 
0B4597 E1    0740** @@:			POP	HL			; Restore the filename pointer
0B4598 C9    0741** RET
             0742** 
             0743** ; Check if an extension is valid and, if so, provide a pointer to a handler
             0744** ; HL: Filename (CSTR format)
             0745** ; Returns:
             0746** ;  A: Filename extension type (0=BBC tokenised, 1=ASCII untokenised)
             0747** ;
0B4599 E5    0748** EXT_HANDLER:		PUSH	HL			; Stack the filename pointer
0B459A 0E    0749** LD	C, '.'			; Find the '.'
0B459B 2E 
0B459C CD    0750** CALL	CSTR_FINDCH
0B459D 2A 
0B459E 41 
0B459F 0B 
0B45A0 11    0751** LD	DE, EXT_LOOKUP		; The lookup table
0B45A1 C9 
0B45A2 45 
0B45A3 0B 
             0752** ;
0B45A4 E5    0753** EXT_HANDLER_1:		PUSH	HL			; Stack the pointer to the extension
0B45A5 CD    0754** CALL	CSTR_ENDSWITH		; Check whether the string ends with the entry in the lookup
0B45A6 32 
0B45A7 41 
0B45A8 0B 
0B45A9 E1    0755** POP	HL			; Restore the pointer to the extension
0B45AA 28    0756** JR	Z, EXT_HANDLER_2	; We have a match!
0B45AB 19 
             0757** ;
0B45AC 1A    0758** @@:			LD	A, (DE)			; Skip to the end of the entry in the lookup
0B45AD 13    0759** INC	DE
0B45AE B7    0760** OR	A
0B45AF 20    0761** JR	NZ, @B
0B45B0 FB 
0B45B1 13    0762** INC	DE			; Skip the file extension # byte
             0763** ;
0B45B2 1A    0764** LD	A, (DE)			; Are we at the end of the table?
0B45B3 B7    0765** OR	A
0B45B4 20    0766** JR	NZ, EXT_HANDLER_1	; No, so loop
0B45B5 EE 
             0767** ;
0B45B6 3E    0768** LD      A,204			; Throw a "Bad name" error
0B45B7 CC 
0B45B8 CD    0769** CALL    EXTERR
0B45B9 68 
0B45BA 3A 
0B45BB 0B 
0B45BC 42    0770** DB    	"Bad name", 0
0B45BD 61 
0B45BE 64 
0B45BF 20 
0B45BF 6E   
0B45C0 61 
0B45C1 6D 
0B45C2 65 
0B45C2 00   
             0771** ;
0B45C5 13    0772** EXT_HANDLER_2:		INC	DE			; Skip to the file extension # byte
0B45C6 1A    0773** LD	A, (DE)
0B45C7 E1    0774** POP	HL			; Restore the filename pointer
0B45C8 C9    0775** RET
             0776** ;
             0777** 
             0778** 
             0779** ; Extension lookup table
             0780** ; CSTR, TYPE
             0781** ; 	- 0: BBC (tokenised BBC BASIC for Z80 format)
             0782** ; 	- 1: Human readable plain text
             0783** ;
0B45C9 2E    0784** EXT_LOOKUP:		DB	".BBC", 0, 0		; First entry is the default extension
0B45CA 42 
0B45CB 42 
0B45CC 43 
0B45CC 00   
0B45CD 00 
0B45CF 2E    0785** DB	".TXT", 0, 1
0B45D0 54 
0B45D1 58 
0B45D2 54 
0B45D2 00   
0B45D3 01 
0B45D5 2E    0786** DB	".ASC", 0, 1
0B45D6 41 
0B45D7 53 
0B45D8 43 
0B45D8 00   
0B45D9 01 
0B45DB 2E    0787** DB	".BAS", 0, 1
0B45DC 42 
0B45DD 41 
0B45DE 53 
0B45DE 00   
0B45DF 01 
0B45E1 00    0788** DB	0			; End of table
             0789** 
             0790** ;OSCALL - Intercept page &FF calls and provide an alternative address
             0791** ;
             0792** ;&FFF7:	OSCLI	Execute *command.
             0793** ;&FFF4:	OSBYTE	Various byte-wide functions.
             0794** ;&FFF1:	OSWORD	Various control block functions.
             0795** ;&FFEE:	OSWRCH	Write character to output stream.
             0796** ;&FFE7:	OSNEWL	Write NewLine to output stream.
             0797** ;&FFE3:	OSASCI	Write character or NewLine to output stream.
             0798** ;&FFE0:	OSRDCH	Wait for character from input stream.
             0799** ;&FFDD:	OSFILE	Perform actions on whole files or directories.
             0800** ;&FFDA:	OSARGS	Read and write information on open files or filing systems.
             0801** ;&FFD7:	OSBGET	Read a byte from an a channel.
             0802** ;&FFD4:	OSBPUT	Write a byte to a channel.
             0803** ;&FFD1:	OSGBPB	Read and write blocks of data.
             0804** ;&FFCE:	OSFIND	Open or close a file.
             0805** ;
0B45E2 21    0806** OSCALL:			LD	HL, OSCALL_TABLE
0B45E3 F8 
0B45E4 45 
0B45E5 0B 
0B45E6 7E    0807** OSCALL_1:		LD	A, (HL)
0B45E7 23    0808** INC	HL
0B45E8 FE    0809** CP	FFh
0B45E9 FF 
0B45EA C8    0810** RET	Z
0B45EB FD    0811** CP	A, IYL
0B45EC BD 
0B45ED 28    0812** JR	Z, OSCALL_2
0B45EE 06 
0B45EF D0    0813** RET	NC
0B45F0 23    0814** INC	HL
0B45F1 23    0815** INC	HL
0B45F2 23    0816** INC	HL
0B45F3 18    0817** JR	OSCALL_1
0B45F4 F1 
0B45F5 ED    0818** OSCALL_2:		LD	IY,(HL)
0B45F6 31 
0B45F7 C9    0819** RET
0B45F8 D4    0820** OSCALL_TABLE:		DB 	D4h
0B45F9 2C    0821** DW24 	OSBPUT
0B45FA 46 
0B45FB 0B 
0B45FC D7    0822** DB 	D7h
0B45FD 24    0823** DW24 	OSBGET
0B45FE 46 
0B45FF 0B 
0B4600 EE    0824** DB 	EEh
0B4601 F1    0825** DW24 	OSWRCH
0B4602 41 
0B4603 0B 
0B4604 F4    0826** DB	F4h
0B4605 AA    0827** DW24 	OSBYTE
0B4606 43 
0B4607 0B 
0B4608 F7    0828** DB	F7h
0B4609 81    0829** DW24	OSCLI
0B460A 42 
0B460B 0B 
0B460C FF    0830** DB	FFh
             0831** 
             0832** ; OSOPEN
             0833** ; HL: Pointer to path
             0834** ;  F: C Z
             0835** ;     x x OPENIN
             0836** ; 	  OPENOUT
             0837** ;     x	  OPENUP
             0838** ; Returns:
             0839** ;  A: Filehandle, 0 if cannot open
             0840** ;
0B460D 0E    0841** OSOPEN:			LD	C, fa_read
0B460E 01 
0B460F 28    0842** JR	Z, @F
0B4610 06 
0B4611 0E    0843** LD	C, fa_write | fa_open_append
0B4612 32 
0B4613 38    0844** JR	C, @F
0B4614 02 
0B4615 0E    0845** LD	C, fa_write | fa_create_always
0B4616 0A 
             0846** @@:			MOSCALL	mos_fopen
0B4617 3E   0001**M LD	A, function
0B4618 0A 
0B4619 49   0002**M RST.LIS	08h
0B461A CF 
0B461B C9    0847** RET
             0848** 
             0849** ;OSSHUT - Close disk file(s).
             0850** ; E = file channel
             0851** ;  If E=0 all files are closed (except SPOOL)
             0852** ; Destroys: A,B,C,D,E,H,L,F
             0853** ;
0B461C C5    0854** OSSHUT:			PUSH	BC
0B461D 4B    0855** LD	C, E
             0856** MOSCALL	mos_fclose
0B461E 3E   0001**M LD	A, function
0B461F 0B 
0B4620 49   0002**M RST.LIS	08h
0B4621 CF 
0B4622 C1    0857** POP	BC
0B4623 C9    0858** RET
             0859** 
             0860** ; OSBGET - Read a byte from a random disk file.
             0861** ;  E = file channel
             0862** ; Returns
             0863** ;  A = byte read
             0864** ;  Carry set if LAST BYTE of file
             0865** ; Destroys: A,B,C,F
             0866** ;
0B4624 C5    0867** OSBGET:			PUSH	BC
0B4625 4B    0868** LD	C, E
             0869** MOSCALL	mos_fgetc
0B4626 3E   0001**M LD	A, function
0B4627 0C 
0B4628 49   0002**M RST.LIS	08h
0B4629 CF 
0B462A C1    0870** POP	BC
0B462B C9    0871** RET
             0872** 
             0873** ; OSBPUT - Write a byte to a random disk file.
             0874** ;  E = file channel
             0875** ;  A = byte to write
             0876** ; Destroys: A,B,C,F
             0877** ;
0B462C C5    0878** OSBPUT:			PUSH	BC
0B462D 4B    0879** LD	C, E
0B462E 47    0880** LD	B, A
             0881** MOSCALL	mos_fputc
0B462F 3E   0001**M LD	A, function
0B4630 0D 
0B4631 49   0002**M RST.LIS	08h
0B4632 CF 
0B4633 C1    0882** POP	BC
0B4634 C9    0883** RET
             0884** 
             0885** ; OSSTAT - Read file status
             0886** ;  E = file channel
             0887** ; Returns
             0888** ;  F: Z flag set - EOF
             0889** ;  A: If Z then A = 0
             0890** ; Destroys: A,D,E,H,L,F
             0891** ;
0B4635 C5    0892** OSSTAT:			PUSH	BC
0B4636 4B    0893** LD	C, E
             0894** MOSCALL	mos_feof
0B4637 3E   0001**M LD	A, function
0B4638 0E 
0B4639 49   0002**M RST.LIS	08h
0B463A CF 
0B463B C1    0895** POP	BC
0B463C FE    0896** CP	1
0B463D 01 
0B463E C9    0897** RET
             0898** 
             0899** ; GETPTR - Return file pointer.
             0900** ;    E = file channel
             0901** ; Returns:
             0902** ; DEHL = pointer (0-&7FFFFF)
             0903** ; Destroys: A,B,C,D,E,H,L,F
             0904** ;
0B463F FD    0905** GETPTR:			PUSH		IY
0B4640 E5 
0B4641 4B    0906** LD		C, E
             0907** MOSCALL		mos_getfil 	; HLU: Pointer to FIL structure
0B4642 3E   0001**M LD	A, function
0B4643 19 
0B4644 49   0002**M RST.LIS	08h
0B4645 CF 
0B4646 E5    0908** PUSH		HL
0B4647 FD    0909** POP		IY		; IYU: Pointer to FIL structure
0B4648 E1 
0B4649 FD    0910** LD		L, (IY + FIL.fptr + 0)
0B464A 6E 
0B464B 11 
0B464C FD    0911** LD		H, (IY + FIL.fptr + 1)
0B464D 66 
0B464E 12 
0B464F FD    0912** LD		E, (IY + FIL.fptr + 2)
0B4650 5E 
0B4651 13 
0B4652 FD    0913** LD		D, (IY + FIL.fptr + 3)
0B4653 56 
0B4654 14 
0B4655 FD    0914** POP		IY
0B4656 E1 
0B4657 C9    0915** RET
             0916** 
             0917** ; PUTPTR - Update file pointer.
             0918** ;    A = file channel
             0919** ; DEHL = new pointer (0-&7FFFFF)
             0920** ; Destroys: A,B,C,D,E,H,L,F
             0921** ;
0B4658 FD    0922** PUTPTR:			PUSH		IY
0B4659 E5 
0B465A 4F    0923** LD		C, A  		; C: Filehandle
0B465B E5    0924** PUSH		HL
0B465C 21    0925** LD		HL, 2
0B465D 02 
0B465E 00 
0B465F 00 
0B4660 39    0926** ADD		HL, SP
0B4661 73    0927** LD		(HL), E 	; 3rd byte of DWORD set to E
0B4662 E1    0928** POP		HL
0B4663 5A    0929** LD		E, D  		; 4th byte passed as E
             0930** MOSCALL		mos_flseek
0B4664 3E   0001**M LD	A, function
0B4665 1C 
0B4666 49   0002**M RST.LIS	08h
0B4667 CF 
0B4668 FD    0931** POP		IY
0B4669 E1 
0B466A C9    0932** RET
             0933** 
             0934** ; GETEXT - Find file size.
             0935** ;    E = file channel
             0936** ; Returns:
             0937** ; DEHL = file size (0-&800000)
             0938** ; Destroys: A,B,C,D,E,H,L,F
             0939** ;
0B466B FD    0940** GETEXT:         PUSH    IY
0B466C E5 
0B466D 4B    0941** LD      C, E
             0942** MOSCALL mos_getfil  ; HLU: Pointer to FIL structure
0B466E 3E   0001**M LD	A, function
0B466F 19 
0B4670 49   0002**M RST.LIS	08h
0B4671 CF 
0B4672 E5    0943** PUSH    HL
0B4673 FD    0944** POP     IY          ; IYU: Pointer to FIL structure
0B4674 E1 
             0945** ; Access the obj.objsize field using the offset values
0B4675 FD    0946** LD      L, (IY + FIL.obj + FFOBJID.objsize + 0)
0B4676 6E 
0B4677 0B 
0B4678 FD    0947** LD      H, (IY + FIL.obj + FFOBJID.objsize + 1)
0B4679 66 
0B467A 0C 
0B467B FD    0948** LD      E, (IY + FIL.obj + FFOBJID.objsize + 2)
0B467C 5E 
0B467D 0D 
0B467E FD    0949** LD      D, (IY + FIL.obj + FFOBJID.objsize + 3)
0B467F 56 
0B4680 0E 
             0950** 
0B4681 FD    0951** POP     IY
0B4682 E1 
0B4683 C9    0952** RET
             0953** 
             0954** ; GETIMS - Get time from RTC
             0955** ;
0B4684 FD    0956** GETIMS:			PUSH	IY
0B4685 E5 
0B4686 21    0957** LD	HL, ACCS 		; Where to store the time string
0B4687 00 
0B4688 4D 
0B4689 0B 
             0958** MOSCALL	mos_getrtc
0B468A 3E   0001**M LD	A, function
0B468B 12 
0B468C 49   0002**M RST.LIS	08h
0B468D CF 
0B468E 11    0959** LD	DE, ACCS		; DE: pointer to start of string accumulator
0B468F 00 
0B4690 4D 
0B4691 0B 
0B4692 5F    0960** LD	E, A 			;  E: now points to the end of the string
0B4693 FD    0961** POP	IY
0B4694 E1 
0B4695 C9    0962** RET
             0963** 
             0964** ; Get two word values from EXPR in DE, HL
             0965** ; IY: Pointer to expression string
             0966** ; Returns:
             0967** ; DE: P1
             0968** ; HL: P2
             0969** ;
0B4696 CD    0970** EXPR_W2:		CALL	EXPRI			; Get first parameter
0B4697 FB 
0B4698 05 
0B4699 0B 
0B469A D9    0971** EXX
0B469B E5    0972** PUSH	HL
0B469C CD    0973** CALL	COMMA
0B469D 13 
0B469E 0D 
0B469F 0B 
0B46A0 CD    0974** CALL	EXPRI			; Get second parameter
0B46A1 FB 
0B46A2 05 
0B46A3 0B 
0B46A4 D9    0975** EXX
0B46A5 D1    0976** POP	DE
0B46A6 C9    0977** RET
             0978** 
             0979** ; Stuff not implemented yet
             0980** ;
0B46A7 C9    0981** RESET:			RET
              0012* include "basic/sorry.asm"
             0001** ;
             0002** ; Title:	BBC Basic Interpreter - Z80 version
             0003** ;		Catch-all for unimplemented functionality
             0004** ; Author:	Dean Belfield
             0005** ; Created:	12/05/2023
             0006** ; Last Updated:	12/05/2023
             0007** ;
             0008** ; Modinfo:
             0009** 
             0010** ; .ASSUME	ADL = 1
             0011** 
             0012** ; SEGMENT CODE
             0013** 
             0014** ; XDEF	ENVEL
             0015** ; XDEF	ADVAL
             0016** ; XDEF	PUTIMS
             0017** 
             0018** ; XREF	EXTERR
             0019** 
             0020** ENVEL:
             0021** ADVAL:
             0022** PUTIMS:
0B46A8 AF    0023** XOR     A
0B46A9 CD    0024** CALL    EXTERR
0B46AA 68 
0B46AB 3A 
0B46AC 0B 
0B46AD 53    0025** DEFB    "Sorry"
0B46AE 6F 
0B46AF 72 
0B46B0 72 
0B46B0 79   
0B46B2 00    0026** DEFB    0
              0013* include "basic/agon_graphics.asm"
             0001** ;
             0002** ; Title:	BBC Basic for AGON - Graphics stuff
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	07/06/2023
             0006** ;
             0007** ; Modinfo:
             0008** ; 07/06/2023:	Modified to run in ADL mode
             0009** 
             0010** ; .ASSUME	ADL = 1
             0011** 
             0012** ; INCLUDE	"equs.inc"
             0013** ; INCLUDE "macros.inc"
             0014** ; INCLUDE "mos_api.inc"	; In MOS/src
             0015** 
             0016** ; SEGMENT CODE
             0017** 
             0018** ; XDEF	CLG
             0019** ; XDEF	CLRSCN
             0020** ; XDEF	MODE
             0021** ; XDEF	COLOUR
             0022** ; XDEF	GCOL
             0023** ; XDEF	MOVE
             0024** ; XDEF	PLOT
             0025** ; XDEF	DRAW
             0026** ; XDEF	POINT
             0027** ; XDEF	GETSCHR
             0028** 
             0029** ; XREF	OSWRCH
             0030** ; XREF	ASC_TO_NUMBER
             0031** ; XREF	EXTERR
             0032** ; XREF	EXPRI
             0033** ; XREF	COMMA
             0034** ; XREF	XEQ
             0035** ; XREF	NXT
             0036** ; XREF	BRAKET
             0037** ; XREF	COUNT0
             0038** ; XREF	CRTONULL
             0039** ; XREF	NULLTOCR
             0040** ; XREF	CRLF
             0041** ; XREF	EXPR_W2
             0042** ; XREF	INKEY1
             0043** 
             0044** ; CLG: clears the graphics area
             0045** ;
             0046** CLG:
             0047** 
             0048** VDU	10h
0B46B3 3E   0001**M LD	A, val
0B46B4 10 
0B46B5 CD   0002**M CALL	OSWRCH
0B46B6 F1 
0B46B7 41 
0B46B8 0B 
0B46B9 C3    0049** JP	XEQ
0B46BA 87 
0B46BB 0E 
0B46BC 0B 
             0050** 
             0051** ; CLS: clears the text area
             0052** ;
0B46BD 3E    0053** CLRSCN:			LD	A, 0Ch
0B46BE 0C 
0B46BF C3    0054** JP	OSWRCH
0B46C0 F1 
0B46C1 41 
0B46C2 0B 
             0055** 
             0056** ; MODE n: Set video mode
             0057** ;
0B46C3 DD    0058** MODE:			PUSH	IX			; Get the system vars in IX
0B46C4 E5 
             0059** MOSCALL	mos_sysvars		; Reset the semaphore
0B46C5 3E   0001**M LD	A, function
0B46C6 08 
0B46C7 49   0002**M RST.LIS	08h
0B46C8 CF 
0B46C9 DD    0060** RES	4, (IX+sysvar_vpd_pflags)
0B46CA CB 
0B46CB 04 
0B46CC A6 
0B46CD CD    0061** CALL    EXPRI
0B46CE FB 
0B46CF 05 
0B46D0 0B 
0B46D1 D9    0062** EXX
             0063** VDU	16H			; Mode change
0B46D2 3E   0001**M LD	A, val
0B46D3 16 
0B46D4 CD   0002**M CALL	OSWRCH
0B46D5 F1 
0B46D6 41 
0B46D7 0B 
             0064** VDU	L
0B46D8 7D   0001**M LD	A, val
0B46D9 CD   0002**M CALL	OSWRCH
0B46DA F1 
0B46DB 41 
0B46DC 0B 
             0065** MOSCALL	mos_sysvars
0B46DD 3E   0001**M LD	A, function
0B46DE 08 
0B46DF 49   0002**M RST.LIS	08h
0B46E0 CF 
0B46E1 DD    0066** @@:			BIT	4, (IX+sysvar_vpd_pflags)
0B46E2 CB 
0B46E3 04 
0B46E4 66 
0B46E5 28    0067** JR	Z, @B			; Wait for the result
0B46E6 FA 
0B46E7 DD    0068** POP	IX
0B46E8 E1 
0B46E9 C3    0069** JP	XEQ
0B46EA 87 
0B46EB 0E 
0B46EC 0B 
             0070** 
             0071** ; GET(x,y): Get the ASCII code of a character on screen
             0072** ;
0B46ED FD    0073** GETSCHR:		INC	IY
0B46EE 23 
0B46EF CD    0074** CALL    EXPRI      		; Get X coordinate
0B46F0 FB 
0B46F1 05 
0B46F2 0B 
0B46F3 D9    0075** EXX
0B46F4 22    0076** LD	(VDU_BUFFER+0), HL
0B46F5 00 
0B46F6 4D 
0B46F7 0B 
0B46F8 CD    0077** CALL	COMMA
0B46F9 13 
0B46FA 0D 
0B46FB 0B 
0B46FC CD    0078** CALL	EXPRI			; Get Y coordinate
0B46FD FB 
0B46FE 05 
0B46FF 0B 
0B4700 D9    0079** EXX
0B4701 22    0080** LD	(VDU_BUFFER+2), HL
0B4702 02 
0B4703 4D 
0B4704 0B 
0B4705 CD    0081** CALL	BRAKET			; Closing bracket
0B4706 20 
0B4707 0D 
0B4708 0B 
             0082** ;
0B4709 DD    0083** PUSH	IX			; Get the system vars in IX
0B470A E5 
             0084** MOSCALL	mos_sysvars		; Reset the semaphore
0B470B 3E   0001**M LD	A, function
0B470C 08 
0B470D 49   0002**M RST.LIS	08h
0B470E CF 
0B470F DD    0085** RES	1, (IX+sysvar_vpd_pflags)
0B4710 CB 
0B4711 04 
0B4712 8E 
             0086** VDU	23
0B4713 3E   0001**M LD	A, val
0B4714 17 
0B4715 CD   0002**M CALL	OSWRCH
0B4716 F1 
0B4717 41 
0B4718 0B 
             0087** VDU	0
0B4719 3E   0001**M LD	A, val
0B471A 00 
0B471B CD   0002**M CALL	OSWRCH
0B471C F1 
0B471D 41 
0B471E 0B 
             0088** VDU	vdp_scrchar
0B471F 3E   0001**M LD	A, val
0B4720 83 
0B4721 CD   0002**M CALL	OSWRCH
0B4722 F1 
0B4723 41 
0B4724 0B 
             0089** VDU	(VDU_BUFFER+0)
0B4725 3A   0001**M LD	A, val
0B4726 00 
0B4727 4D 
0B4728 0B 
0B4729 CD   0002**M CALL	OSWRCH
0B472A F1 
0B472B 41 
0B472C 0B 
             0090** VDU	(VDU_BUFFER+1)
0B472D 3A   0001**M LD	A, val
0B472E 01 
0B472F 4D 
0B4730 0B 
0B4731 CD   0002**M CALL	OSWRCH
0B4732 F1 
0B4733 41 
0B4734 0B 
             0091** VDU	(VDU_BUFFER+2)
0B4735 3A   0001**M LD	A, val
0B4736 02 
0B4737 4D 
0B4738 0B 
0B4739 CD   0002**M CALL	OSWRCH
0B473A F1 
0B473B 41 
0B473C 0B 
             0092** VDU	(VDU_BUFFER+3)
0B473D 3A   0001**M LD	A, val
0B473E 03 
0B473F 4D 
0B4740 0B 
0B4741 CD   0002**M CALL	OSWRCH
0B4742 F1 
0B4743 41 
0B4744 0B 
0B4745 DD    0093** @@:			BIT	1, (IX+sysvar_vpd_pflags)
0B4746 CB 
0B4747 04 
0B4748 4E 
0B4749 28    0094** JR	Z, @B			; Wait for the result
0B474A FA 
0B474B DD    0095** LD	A, (IX+sysvar_scrchar)	; Fetch the result in A
0B474C 7E 
0B474D 09 
0B474E B7    0096** OR	A			; Check for 00h
0B474F 37    0097** SCF				; C = character map
0B4750 20    0098** JR	NZ, @F			; We have a character, so skip next bit
0B4751 02 
0B4752 AF    0099** XOR	A			; Clear carry
0B4753 3D    0100** DEC	A			; Set A to FFh
0B4754 DD    0101** @@:			POP	IX
0B4755 E1 
0B4756 C3    0102** JP	INKEY1			; Jump back to the GET command
0B4757 D2 
0B4758 0A 
0B4759 0B 
             0103** 
             0104** ; POINT(x,y): Get the pixel colour of a point on screen
             0105** ;
0B475A CD    0106** POINT:			CALL    EXPRI      		; Get X coordinate
0B475B FB 
0B475C 05 
0B475D 0B 
0B475E D9    0107** EXX
0B475F 22    0108** LD	(VDU_BUFFER+0), HL
0B4760 00 
0B4761 4D 
0B4762 0B 
0B4763 CD    0109** CALL	COMMA
0B4764 13 
0B4765 0D 
0B4766 0B 
0B4767 CD    0110** CALL	EXPRI			; Get Y coordinate
0B4768 FB 
0B4769 05 
0B476A 0B 
0B476B D9    0111** EXX
0B476C 22    0112** LD	(VDU_BUFFER+2), HL
0B476D 02 
0B476E 4D 
0B476F 0B 
0B4770 CD    0113** CALL	BRAKET			; Closing bracket
0B4771 20 
0B4772 0D 
0B4773 0B 
             0114** ;
0B4774 DD    0115** PUSH	IX			; Get the system vars in IX
0B4775 E5 
             0116** MOSCALL	mos_sysvars		; Reset the semaphore
0B4776 3E   0001**M LD	A, function
0B4777 08 
0B4778 49   0002**M RST.LIS	08h
0B4779 CF 
0B477A DD    0117** RES	2, (IX+sysvar_vpd_pflags)
0B477B CB 
0B477C 04 
0B477D 96 
             0118** VDU	23
0B477E 3E   0001**M LD	A, val
0B477F 17 
0B4780 CD   0002**M CALL	OSWRCH
0B4781 F1 
0B4782 41 
0B4783 0B 
             0119** VDU	0
0B4784 3E   0001**M LD	A, val
0B4785 00 
0B4786 CD   0002**M CALL	OSWRCH
0B4787 F1 
0B4788 41 
0B4789 0B 
             0120** VDU	vdp_scrpixel
0B478A 3E   0001**M LD	A, val
0B478B 84 
0B478C CD   0002**M CALL	OSWRCH
0B478D F1 
0B478E 41 
0B478F 0B 
             0121** VDU	(VDU_BUFFER+0)
0B4790 3A   0001**M LD	A, val
0B4791 00 
0B4792 4D 
0B4793 0B 
0B4794 CD   0002**M CALL	OSWRCH
0B4795 F1 
0B4796 41 
0B4797 0B 
             0122** VDU	(VDU_BUFFER+1)
0B4798 3A   0001**M LD	A, val
0B4799 01 
0B479A 4D 
0B479B 0B 
0B479C CD   0002**M CALL	OSWRCH
0B479D F1 
0B479E 41 
0B479F 0B 
             0123** VDU	(VDU_BUFFER+2)
0B47A0 3A   0001**M LD	A, val
0B47A1 02 
0B47A2 4D 
0B47A3 0B 
0B47A4 CD   0002**M CALL	OSWRCH
0B47A5 F1 
0B47A6 41 
0B47A7 0B 
             0124** VDU	(VDU_BUFFER+3)
0B47A8 3A   0001**M LD	A, val
0B47A9 03 
0B47AA 4D 
0B47AB 0B 
0B47AC CD   0002**M CALL	OSWRCH
0B47AD F1 
0B47AE 41 
0B47AF 0B 
0B47B0 DD    0125** @@:			BIT	2, (IX+sysvar_vpd_pflags)
0B47B1 CB 
0B47B2 04 
0B47B3 56 
0B47B4 28    0126** JR	Z, @B			; Wait for the result
0B47B5 FA 
             0127** ;
             0128** ; Return the data as a 1 byte index
             0129** ;
0B47B6 DD    0130** LD	L, (IX+sysvar_scrpixelIndex)
0B47B7 6E 
0B47B8 16 
0B47B9 DD    0131** POP	IX
0B47BA E1 
0B47BB C3    0132** JP	COUNT0
0B47BC 70 
0B47BD 08 
0B47BE 0B 
             0133** 
             0134** 
             0135** ; COLOUR colour
             0136** ; COLOUR L,P
             0137** ; COLOUR L,R,G,B
             0138** ;
0B47BF CD    0139** COLOUR:			CALL	EXPRI			; The colour / mode
0B47C0 FB 
0B47C1 05 
0B47C2 0B 
0B47C3 D9    0140** EXX
0B47C4 7D    0141** LD	A, L
0B47C5 32    0142** LD	(VDU_BUFFER+0), A	; Store first parameter
0B47C6 00 
0B47C7 4D 
0B47C8 0B 
0B47C9 CD    0143** CALL	NXT			; Are there any more parameters?
0B47CA 61 
0B47CB 0D 
0B47CC 0B 
0B47CD FE    0144** CP	','
0B47CE 2C 
0B47CF 28    0145** JR	Z, COLOUR_1		; Yes, so we're doing a palette change next
0B47D0 12 
             0146** ;
             0147** VDU	11h			; Just set the colour
0B47D1 3E   0001**M LD	A, val
0B47D2 11 
0B47D3 CD   0002**M CALL	OSWRCH
0B47D4 F1 
0B47D5 41 
0B47D6 0B 
             0148** VDU	(VDU_BUFFER+0)
0B47D7 3A   0001**M LD	A, val
0B47D8 00 
0B47D9 4D 
0B47DA 0B 
0B47DB CD   0002**M CALL	OSWRCH
0B47DC F1 
0B47DD 41 
0B47DE 0B 
0B47DF C3    0149** JP	XEQ
0B47E0 87 
0B47E1 0E 
0B47E2 0B 
             0150** ;
0B47E3 CD    0151** COLOUR_1:		CALL	COMMA
0B47E4 13 
0B47E5 0D 
0B47E6 0B 
0B47E7 CD    0152** CALL	EXPRI			; Parse R (OR P)
0B47E8 FB 
0B47E9 05 
0B47EA 0B 
0B47EB D9    0153** EXX
0B47EC 7D    0154** LD	A, L
0B47ED 32    0155** LD	(VDU_BUFFER+1), A
0B47EE 01 
0B47EF 4D 
0B47F0 0B 
0B47F1 CD    0156** CALL	NXT			; Are there any more parameters?
0B47F2 61 
0B47F3 0D 
0B47F4 0B 
0B47F5 FE    0157** CP	','
0B47F6 2C 
0B47F7 28    0158** JR	Z, COLOUR_2		; Yes, so we're doing COLOUR L,R,G,B
0B47F8 2C 
             0159** ;
             0160** VDU	13h			; VDU:COLOUR
0B47F9 3E   0001**M LD	A, val
0B47FA 13 
0B47FB CD   0002**M CALL	OSWRCH
0B47FC F1 
0B47FD 41 
0B47FE 0B 
             0161** VDU	(VDU_BUFFER+0)		; Logical Colour
0B47FF 3A   0001**M LD	A, val
0B4800 00 
0B4801 4D 
0B4802 0B 
0B4803 CD   0002**M CALL	OSWRCH
0B4804 F1 
0B4805 41 
0B4806 0B 
             0162** VDU	(VDU_BUFFER+1)		; Palette Colour
0B4807 3A   0001**M LD	A, val
0B4808 01 
0B4809 4D 
0B480A 0B 
0B480B CD   0002**M CALL	OSWRCH
0B480C F1 
0B480D 41 
0B480E 0B 
             0163** VDU	0			; RGB set to 0
0B480F 3E   0001**M LD	A, val
0B4810 00 
0B4811 CD   0002**M CALL	OSWRCH
0B4812 F1 
0B4813 41 
0B4814 0B 
             0164** VDU	0
0B4815 3E   0001**M LD	A, val
0B4816 00 
0B4817 CD   0002**M CALL	OSWRCH
0B4818 F1 
0B4819 41 
0B481A 0B 
             0165** VDU	0
0B481B 3E   0001**M LD	A, val
0B481C 00 
0B481D CD   0002**M CALL	OSWRCH
0B481E F1 
0B481F 41 
0B4820 0B 
0B4821 C3    0166** JP	XEQ
0B4822 87 
0B4823 0E 
0B4824 0B 
             0167** ;
0B4825 CD    0168** COLOUR_2:		CALL	COMMA
0B4826 13 
0B4827 0D 
0B4828 0B 
0B4829 CD    0169** CALL	EXPRI			; Parse G
0B482A FB 
0B482B 05 
0B482C 0B 
0B482D D9    0170** EXX
0B482E 7D    0171** LD	A, L
0B482F 32    0172** LD	(VDU_BUFFER+2), A
0B4830 02 
0B4831 4D 
0B4832 0B 
0B4833 CD    0173** CALL	COMMA
0B4834 13 
0B4835 0D 
0B4836 0B 
0B4837 CD    0174** CALL	EXPRI			; Parse B
0B4838 FB 
0B4839 05 
0B483A 0B 
0B483B D9    0175** EXX
0B483C 7D    0176** LD	A, L
0B483D 32    0177** LD	(VDU_BUFFER+3), A
0B483E 03 
0B483F 4D 
0B4840 0B 
             0178** VDU	13h			; VDU:COLOUR
0B4841 3E   0001**M LD	A, val
0B4842 13 
0B4843 CD   0002**M CALL	OSWRCH
0B4844 F1 
0B4845 41 
0B4846 0B 
             0179** VDU	(VDU_BUFFER+0)		; Logical Colour
0B4847 3A   0001**M LD	A, val
0B4848 00 
0B4849 4D 
0B484A 0B 
0B484B CD   0002**M CALL	OSWRCH
0B484C F1 
0B484D 41 
0B484E 0B 
             0180** VDU	FFh			; Physical Colour (-1 for RGB mode)
0B484F 3E   0001**M LD	A, val
0B4850 FF 
0B4851 CD   0002**M CALL	OSWRCH
0B4852 F1 
0B4853 41 
0B4854 0B 
             0181** VDU	(VDU_BUFFER+1)		; R
0B4855 3A   0001**M LD	A, val
0B4856 01 
0B4857 4D 
0B4858 0B 
0B4859 CD   0002**M CALL	OSWRCH
0B485A F1 
0B485B 41 
0B485C 0B 
             0182** VDU	(VDU_BUFFER+2)		; G
0B485D 3A   0001**M LD	A, val
0B485E 02 
0B485F 4D 
0B4860 0B 
0B4861 CD   0002**M CALL	OSWRCH
0B4862 F1 
0B4863 41 
0B4864 0B 
             0183** VDU	(VDU_BUFFER+3)		; B
0B4865 3A   0001**M LD	A, val
0B4866 03 
0B4867 4D 
0B4868 0B 
0B4869 CD   0002**M CALL	OSWRCH
0B486A F1 
0B486B 41 
0B486C 0B 
0B486D C3    0184** JP	XEQ
0B486E 87 
0B486F 0E 
0B4870 0B 
             0185** 
             0186** ; GCOL mode,colour
             0187** ;
0B4871 CD    0188** GCOL:			CALL	EXPRI			; Parse MODE
0B4872 FB 
0B4873 05 
0B4874 0B 
0B4875 D9    0189** EXX
0B4876 7D    0190** LD	A, L
0B4877 32    0191** LD	(VDU_BUFFER+0), A
0B4878 00 
0B4879 4D 
0B487A 0B 
0B487B CD    0192** CALL	COMMA
0B487C 13 
0B487D 0D 
0B487E 0B 
             0193** ;
0B487F CD    0194** CALL	EXPRI			; Parse Colour
0B4880 FB 
0B4881 05 
0B4882 0B 
0B4883 D9    0195** EXX
0B4884 7D    0196** LD	A, L
0B4885 32    0197** LD	(VDU_BUFFER+1), A
0B4886 01 
0B4887 4D 
0B4888 0B 
             0198** ;
             0199** VDU	12h			; VDU:GCOL
0B4889 3E   0001**M LD	A, val
0B488A 12 
0B488B CD   0002**M CALL	OSWRCH
0B488C F1 
0B488D 41 
0B488E 0B 
             0200** VDU	(VDU_BUFFER+0)		; Mode
0B488F 3A   0001**M LD	A, val
0B4890 00 
0B4891 4D 
0B4892 0B 
0B4893 CD   0002**M CALL	OSWRCH
0B4894 F1 
0B4895 41 
0B4896 0B 
             0201** VDU	(VDU_BUFFER+1)		; Colour
0B4897 3A   0001**M LD	A, val
0B4898 01 
0B4899 4D 
0B489A 0B 
0B489B CD   0002**M CALL	OSWRCH
0B489C F1 
0B489D 41 
0B489E 0B 
0B489F C3    0202** JP	XEQ
0B48A0 87 
0B48A1 0E 
0B48A2 0B 
             0203** 
             0204** ; PLOT mode,x,y
             0205** ;
0B48A3 CD    0206** PLOT:			CALL	EXPRI		; Parse mode
0B48A4 FB 
0B48A5 05 
0B48A6 0B 
0B48A7 D9    0207** EXX
0B48A8 E5    0208** PUSH	HL		; Push mode (L) onto stack
0B48A9 CD    0209** CALL	COMMA
0B48AA 13 
0B48AB 0D 
0B48AC 0B 
0B48AD CD    0210** CALL	EXPR_W2		; Parse X and Y
0B48AE 96 
0B48AF 46 
0B48B0 0B 
0B48B1 C1    0211** POP	BC		; Pop mode (C) off stack
             0212** PLOT_1:			VDU	19H		; VDU code for PLOT
0B48B2 3E   0001**M LD	A, val
0B48B3 19 
0B48B4 CD   0002**M CALL	OSWRCH
0B48B5 F1 
0B48B6 41 
0B48B7 0B 
             0213** VDU	C		;  C: Mode
0B48B8 79   0001**M LD	A, val
0B48B9 CD   0002**M CALL	OSWRCH
0B48BA F1 
0B48BB 41 
0B48BC 0B 
             0214** VDU	E		; DE: X
0B48BD 7B   0001**M LD	A, val
0B48BE CD   0002**M CALL	OSWRCH
0B48BF F1 
0B48C0 41 
0B48C1 0B 
             0215** VDU	D
0B48C2 7A   0001**M LD	A, val
0B48C3 CD   0002**M CALL	OSWRCH
0B48C4 F1 
0B48C5 41 
0B48C6 0B 
             0216** VDU	L		; HL: Y
0B48C7 7D   0001**M LD	A, val
0B48C8 CD   0002**M CALL	OSWRCH
0B48C9 F1 
0B48CA 41 
0B48CB 0B 
             0217** VDU	H
0B48CC 7C   0001**M LD	A, val
0B48CD CD   0002**M CALL	OSWRCH
0B48CE F1 
0B48CF 41 
0B48D0 0B 
0B48D1 C3    0218** JP	XEQ
0B48D2 87 
0B48D3 0E 
0B48D4 0B 
             0219** 
             0220** ; MOVE x,y
             0221** ;
0B48D5 CD    0222** MOVE:			CALL	EXPR_W2		; Parse X and Y
0B48D6 96 
0B48D7 46 
0B48D8 0B 
0B48D9 0E    0223** LD	C, 04H		; Plot mode 04H (Move)
0B48DA 04 
0B48DB 18    0224** JR	PLOT_1		; Plot
0B48DC D5 
             0225** 
             0226** ; DRAW x1,y1
             0227** ; DRAW x1,y1,x2,y2
             0228** ;
0B48DD CD    0229** DRAW:			CALL	EXPR_W2		; Get X1 and Y1
0B48DE 96 
0B48DF 46 
0B48E0 0B 
0B48E1 CD    0230** CALL	NXT		; Are there any more parameters?
0B48E2 61 
0B48E3 0D 
0B48E4 0B 
0B48E5 FE    0231** CP	','
0B48E6 2C 
0B48E7 0E    0232** LD	C, 05h		; Code for LINE
0B48E8 05 
0B48E9 20    0233** JR	NZ, PLOT_1	; No, so just do DRAW x1,y1
0B48EA C7 
             0234** VDU	19h		; Move to the first coordinates
0B48EB 3E   0001**M LD	A, val
0B48EC 19 
0B48ED CD   0002**M CALL	OSWRCH
0B48EE F1 
0B48EF 41 
0B48F0 0B 
             0235** VDU	04h
0B48F1 3E   0001**M LD	A, val
0B48F2 04 
0B48F3 CD   0002**M CALL	OSWRCH
0B48F4 F1 
0B48F5 41 
0B48F6 0B 
             0236** VDU	E
0B48F7 7B   0001**M LD	A, val
0B48F8 CD   0002**M CALL	OSWRCH
0B48F9 F1 
0B48FA 41 
0B48FB 0B 
             0237** VDU	D
0B48FC 7A   0001**M LD	A, val
0B48FD CD   0002**M CALL	OSWRCH
0B48FE F1 
0B48FF 41 
0B4900 0B 
             0238** VDU	L
0B4901 7D   0001**M LD	A, val
0B4902 CD   0002**M CALL	OSWRCH
0B4903 F1 
0B4904 41 
0B4905 0B 
             0239** VDU	H
0B4906 7C   0001**M LD	A, val
0B4907 CD   0002**M CALL	OSWRCH
0B4908 F1 
0B4909 41 
0B490A 0B 
0B490B CD    0240** CALL	COMMA
0B490C 13 
0B490D 0D 
0B490E 0B 
0B490F C5    0241** PUSH	BC
0B4910 CD    0242** CALL	EXPR_W2		; Get X2 and Y2
0B4911 96 
0B4912 46 
0B4913 0B 
0B4914 C1    0243** POP	BC
0B4915 18    0244** JR	PLOT_1		; Now DRAW the line to those positions
0B4916 9B 
             0245** 
             0246** 
             0247** 
              0014* include "basic/agon_sound.asm"
             0001** ;
             0002** ; Title:	BBC Basic for AGON - Audio stuff
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	12/05/2023
             0006** ;
             0007** ; Modinfo:
             0008** 
             0009** ; .ASSUME	ADL = 1
             0010** 
             0011** ; INCLUDE	"equs.inc"
             0012** ; INCLUDE "macros.inc"
             0013** ; INCLUDE "mos_api.inc"	; In MOS/src
             0014** 
             0015** ; SEGMENT CODE
             0016** 
             0017** ; XDEF	SOUND
             0018** 
             0019** ; XREF	COMMA
             0020** ; XREF	EXPR_W2
             0021** ; XREF	XEQ
             0022** ; XREF	LTRAP
             0023** ; XREF	OSWRCH
             0024** ; XREF	VDU_BUFFER
             0025** 
             0026** 
             0027** ; SOUND channel,volume,pitch,duration
             0028** ; volume: 0 (off) to -15 (full volume)
             0029** ; pitch: 0 - 255
             0030** ; duration: -1 to 254 (duration in 20ths of a second, -1 = play forever)
             0031** ;
0B4917 CD    0032** SOUND:			CALL	EXPR_W2			; DE: Channel/Control, HL: Volume
0B4918 96 
0B4919 46 
0B491A 0B 
0B491B 7D    0033** LD	A, L 			;  A: Volume
0B491C F5    0034** PUSH	AF
0B491D D5    0035** PUSH	DE
0B491E CD    0036** CALL	COMMA
0B491F 13 
0B4920 0D 
0B4921 0B 
0B4922 CD    0037** CALL	EXPR_W2			; DE: Pitch, HL: Duration
0B4923 96 
0B4924 46 
0B4925 0B 
0B4926 53    0038** LD	D, E			;  D: Pitch
0B4927 5D    0039** LD	E, L 			;  E: Duration
0B4928 E1    0040** POP	HL 			; HL: Channel/Control
0B4929 F1    0041** POP	AF
0B492A ED    0042** NEG
0B492B 44 
0B492C FE    0043** CP	16			; Check volume is in bounds
0B492D 10 
0B492E D2    0044** JP	NC, XEQ			; Out of bounds, do nothing
0B492F 87 
0B4930 0E 
0B4931 0B 
             0045** ;
             0046** ; Store	in VDU vars
             0047** ;
0B4932 4F    0048** LD	C, A			; Store Volume in C
0B4933 7D    0049** LD	A, L
0B4934 32    0050** LD	(VDU_BUFFER+0), A	; Channel
0B4935 00 
0B4936 4D 
0B4937 0B 
0B4938 AF    0051** XOR	A
0B4939 32    0052** LD	(VDU_BUFFER+1), A	; Waveform
0B493A 01 
0B493B 4D 
0B493C 0B 
             0053** ;
             0054** ; Calculate the volume
             0055** ;
0B493D 06    0056** LD	B, 6			; C already contains the volume
0B493E 06 
0B493F ED    0057** MLT	BC			; Multiply by 6 (0-15 scales to 0-90)
0B4940 4C 
0B4941 79    0058** LD	A, C
0B4942 32    0059** LD	(VDU_BUFFER+2), A
0B4943 02 
0B4944 4D 
0B4945 0B 
             0060** ;
             0061** ; And the frequency
             0062** ;
0B4946 4B    0063** LD	C, E			; Store duration in C
0B4947 26    0064** LD	H, 0			; Lookup the frequency
0B4948 00 
0B4949 6A    0065** LD	L, D
0B494A 11    0066** LD	DE, SOUND_FREQ_LOOKUP
0B494B D1 
0B494C 49 
0B494D 0B 
0B494E 29    0067** ADD	HL, HL
0B494F 19    0068** ADD	HL, DE
0B4950 7E    0069** LD	A, (HL)
0B4951 32    0070** LD	(VDU_BUFFER+3), A
0B4952 03 
0B4953 4D 
0B4954 0B 
0B4955 23    0071** INC	HL
0B4956 7E    0072** LD	A, (HL)
0B4957 32    0073** LD	(VDU_BUFFER+4), A
0B4958 04 
0B4959 4D 
0B495A 0B 
             0074** ;
             0075** ; And now the duration - multiply it by 50 to convert from 1/20ths of seconds to milliseconds
             0076** ;
0B495B 06    0077** LD	B, 50			; C contains the duration, so MLT by 50
0B495C 32 
0B495D ED    0078** MLT	BC
0B495E 4C 
0B495F ED    0079** LD	(VDU_BUFFER+5), BC
0B4960 43 
0B4961 05 
0B4962 4D 
0B4962 0B   
             0080** ;
0B4964 DD    0081** PUSH	IX			; Get the system vars in IX
0B4965 E5 
             0082** MOSCALL	mos_sysvars		; Reset the semaphore
0B4966 3E   0001**M LD	A, function
0B4967 08 
0B4968 49   0002**M RST.LIS	08h
0B4969 CF 
0B496A 5B    0083** SOUND0:			RES.LIL	3, (IX+sysvar_vpd_pflags)
0B496B DD 
0B496C CB 
0B496D 04 
0B496D 9E   
             0084** ;
             0085** VDU	23			; Send the sound command
0B496F 3E   0001**M LD	A, val
0B4970 17 
0B4971 CD   0002**M CALL	OSWRCH
0B4972 F1 
0B4973 41 
0B4974 0B 
             0086** VDU	0
0B4975 3E   0001**M LD	A, val
0B4976 00 
0B4977 CD   0002**M CALL	OSWRCH
0B4978 F1 
0B4979 41 
0B497A 0B 
             0087** VDU	vdp_audio
0B497B 3E   0001**M LD	A, val
0B497C 85 
0B497D CD   0002**M CALL	OSWRCH
0B497E F1 
0B497F 41 
0B4980 0B 
             0088** VDU	(VDU_BUFFER+0)		; 0: Channel
0B4981 3A   0001**M LD	A, val
0B4982 00 
0B4983 4D 
0B4984 0B 
0B4985 CD   0002**M CALL	OSWRCH
0B4986 F1 
0B4987 41 
0B4988 0B 
             0089** VDU	(VDU_BUFFER+1)		; 1: Waveform (0)
0B4989 3A   0001**M LD	A, val
0B498A 01 
0B498B 4D 
0B498C 0B 
0B498D CD   0002**M CALL	OSWRCH
0B498E F1 
0B498F 41 
0B4990 0B 
             0090** VDU	(VDU_BUFFER+2)		; 2: Volume (0-100)
0B4991 3A   0001**M LD	A, val
0B4992 02 
0B4993 4D 
0B4994 0B 
0B4995 CD   0002**M CALL	OSWRCH
0B4996 F1 
0B4997 41 
0B4998 0B 
             0091** VDU	(VDU_BUFFER+3)		; 3: Frequency L
0B4999 3A   0001**M LD	A, val
0B499A 03 
0B499B 4D 
0B499C 0B 
0B499D CD   0002**M CALL	OSWRCH
0B499E F1 
0B499F 41 
0B49A0 0B 
             0092** VDU	(VDU_BUFFER+4)		; 4: Frequency H
0B49A1 3A   0001**M LD	A, val
0B49A2 04 
0B49A3 4D 
0B49A4 0B 
0B49A5 CD   0002**M CALL	OSWRCH
0B49A6 F1 
0B49A7 41 
0B49A8 0B 
             0093** VDU	(VDU_BUFFER+5)		; 5: Duration L
0B49A9 3A   0001**M LD	A, val
0B49AA 05 
0B49AB 4D 
0B49AC 0B 
0B49AD CD   0002**M CALL	OSWRCH
0B49AE F1 
0B49AF 41 
0B49B0 0B 
             0094** VDU	(VDU_BUFFER+6)		; 6: Duration H
0B49B1 3A   0001**M LD	A, val
0B49B2 06 
0B49B3 4D 
0B49B4 0B 
0B49B5 CD   0002**M CALL	OSWRCH
0B49B6 F1 
0B49B7 41 
0B49B8 0B 
             0095** ;
             0096** ; Wait for acknowledgement
             0097** ;
0B49B9 5B    0098** @@:			BIT.LIL	3, (IX+sysvar_vpd_pflags)
0B49BA DD 
0B49BB CB 
0B49BC 04 
0B49BC 5E   
0B49BE 28    0099** JR	Z, @B			; Wait for the result
0B49BF F9 
0B49C0 CD    0100** CALL	LTRAP			; Check for ESC
0B49C1 62 
0B49C2 42 
0B49C3 0B 
0B49C4 5B    0101** LD.LIL	A, (IX+sysvar_audioSuccess)
0B49C5 DD 
0B49C6 7E 
0B49C7 0E 
0B49C8 A7    0102** AND	A			; Check if VDP has queued the note
0B49C9 28    0103** JR	Z, SOUND0		; No, so loop back and send again
0B49CA 9F 
             0104** ;
0B49CB DD    0105** POP	IX
0B49CC E1 
0B49CD C3    0106** JP	XEQ
0B49CE 87 
0B49CF 0E 
0B49D0 0B 
             0107** 
             0108** ; Frequency Lookup Table
             0109** ; Set up to replicate the BBC Micro audio frequencies
             0110** ;
             0111** ; Split over 5 complete octaves, with 53 being middle C
             0112** ; * C4: 262hz
             0113** ; + A4: 440hz
             0114** ;
             0115** ;	2	3	4	5	6	7	8
             0116** ;
             0117** ; B	1	49	97	145	193	241
             0118** ; A#	0	45	93	141	189	237
             0119** ; A		41	89+	137	185	233
             0120** ; G#		37	85	133	181	229
             0121** ; G		33	81	129	177	225
             0122** ; F#		29	77	125	173	221
             0123** ; F		25	73	121	169	217
             0124** ; E		21	69	117	165	213
             0125** ; D#		17	65	113	161	209
             0126** ; D		13	61	109	157	205	253
             0127** ; C#		9	57	105	153	201	249
             0128** ; C		5	53*	101	149	197	245
             0129** ;
0B49D1 75    0130** SOUND_FREQ_LOOKUP:	DW	 117,  118,  120,  122,  123,  131,  133,  135
0B49D2 00 
0B49D3 76 
0B49D4 00 
0B49D4 78   
0B49D5 00 
0B49D6 7A 
0B49D7 00 
0B49D7 7B   
0B49D8 00 
0B49D9 83 
0B49DA 00 
0B49DA 85   
0B49DB 00 
0B49DC 87 
0B49DD 00 
0B49E1 89    0131** DW	 137,  139,  141,  143,  145,  147,  149,  151
0B49E2 00 
0B49E3 8B 
0B49E4 00 
0B49E4 8D   
0B49E5 00 
0B49E6 8F 
0B49E7 00 
0B49E7 91   
0B49E8 00 
0B49E9 93 
0B49EA 00 
0B49EA 95   
0B49EB 00 
0B49EC 97 
0B49ED 00 
0B49F1 99    0132** DW	 153,  156,  158,  160,  162,  165,  167,  170
0B49F2 00 
0B49F3 9C 
0B49F4 00 
0B49F4 9E   
0B49F5 00 
0B49F6 A0 
0B49F7 00 
0B49F7 A2   
0B49F8 00 
0B49F9 A5 
0B49FA 00 
0B49FA A7   
0B49FB 00 
0B49FC AA 
0B49FD 00 
0B4A01 AC    0133** DW	 172,  175,  177,  180,  182,  185,  188,  190
0B4A02 00 
0B4A03 AF 
0B4A04 00 
0B4A04 B1   
0B4A05 00 
0B4A06 B4 
0B4A07 00 
0B4A07 B6   
0B4A08 00 
0B4A09 B9 
0B4A0A 00 
0B4A0A BC   
0B4A0B 00 
0B4A0C BE 
0B4A0D 00 
0B4A11 C1    0134** DW	 193,  196,  199,  202,  205,  208,  211,  214
0B4A12 00 
0B4A13 C4 
0B4A14 00 
0B4A14 C7   
0B4A15 00 
0B4A16 CA 
0B4A17 00 
0B4A17 CD   
0B4A18 00 
0B4A19 D0 
0B4A1A 00 
0B4A1A D3   
0B4A1B 00 
0B4A1C D6 
0B4A1D 00 
0B4A21 D9    0135** DW	 217,  220,  223,  226,  230,  233,  236,  240
0B4A22 00 
0B4A23 DC 
0B4A24 00 
0B4A24 DF   
0B4A25 00 
0B4A26 E2 
0B4A27 00 
0B4A27 E6   
0B4A28 00 
0B4A29 E9 
0B4A2A 00 
0B4A2A EC   
0B4A2B 00 
0B4A2C F0 
0B4A2D 00 
0B4A31 F3    0136** DW	 243,  247,  251,  254,  258,  262,  265,  269
0B4A32 00 
0B4A33 F7 
0B4A34 00 
0B4A34 FB   
0B4A35 00 
0B4A36 FE 
0B4A37 00 
0B4A37 02   
0B4A38 01 
0B4A39 06 
0B4A3A 01 
0B4A3A 09   
0B4A3B 01 
0B4A3C 0D 
0B4A3D 01 
0B4A41 11    0137** DW	 273,  277,  281,  285,  289,  294,  298,  302
0B4A42 01 
0B4A43 15 
0B4A44 01 
0B4A44 19   
0B4A45 01 
0B4A46 1D 
0B4A47 01 
0B4A47 21   
0B4A48 01 
0B4A49 26 
0B4A4A 01 
0B4A4A 2A   
0B4A4B 01 
0B4A4C 2E 
0B4A4D 01 
0B4A51 33    0138** DW	 307,  311,  316,  320,  325,  330,  334,  339
0B4A52 01 
0B4A53 37 
0B4A54 01 
0B4A54 3C   
0B4A55 01 
0B4A56 40 
0B4A57 01 
0B4A57 45   
0B4A58 01 
0B4A59 4A 
0B4A5A 01 
0B4A5A 4E   
0B4A5B 01 
0B4A5C 53 
0B4A5D 01 
0B4A61 58    0139** DW	 344,  349,  354,  359,  365,  370,  375,  381
0B4A62 01 
0B4A63 5D 
0B4A64 01 
0B4A64 62   
0B4A65 01 
0B4A66 67 
0B4A67 01 
0B4A67 6D   
0B4A68 01 
0B4A69 72 
0B4A6A 01 
0B4A6A 77   
0B4A6B 01 
0B4A6C 7D 
0B4A6D 01 
0B4A71 82    0140** DW	 386,  392,  398,  403,  409,  415,  421,  427
0B4A72 01 
0B4A73 88 
0B4A74 01 
0B4A74 8E   
0B4A75 01 
0B4A76 93 
0B4A77 01 
0B4A77 99   
0B4A78 01 
0B4A79 9F 
0B4A7A 01 
0B4A7A A5   
0B4A7B 01 
0B4A7C AB 
0B4A7D 01 
0B4A81 B2    0141** DW	 434,  440,  446,  453,  459,  466,  473,  480
0B4A82 01 
0B4A83 B8 
0B4A84 01 
0B4A84 BE   
0B4A85 01 
0B4A86 C5 
0B4A87 01 
0B4A87 CB   
0B4A88 01 
0B4A89 D2 
0B4A8A 01 
0B4A8A D9   
0B4A8B 01 
0B4A8C E0 
0B4A8D 01 
0B4A91 E7    0142** DW	 487,  494,  501,  508,  516,  523,  531,  539
0B4A92 01 
0B4A93 EE 
0B4A94 01 
0B4A94 F5   
0B4A95 01 
0B4A96 FC 
0B4A97 01 
0B4A97 04   
0B4A98 02 
0B4A99 0B 
0B4A9A 02 
0B4A9A 13   
0B4A9B 02 
0B4A9C 1B 
0B4A9D 02 
0B4AA1 22    0143** DW	 546,  554,  562,  571,  579,  587,  596,  605
0B4AA2 02 
0B4AA3 2A 
0B4AA4 02 
0B4AA4 32   
0B4AA5 02 
0B4AA6 3B 
0B4AA7 02 
0B4AA7 43   
0B4AA8 02 
0B4AA9 4B 
0B4AAA 02 
0B4AAA 54   
0B4AAB 02 
0B4AAC 5D 
0B4AAD 02 
0B4AB1 65    0144** DW	 613,  622,  631,  641,  650,  659,  669,  679
0B4AB2 02 
0B4AB3 6E 
0B4AB4 02 
0B4AB4 77   
0B4AB5 02 
0B4AB6 81 
0B4AB7 02 
0B4AB7 8A   
0B4AB8 02 
0B4AB9 93 
0B4ABA 02 
0B4ABA 9D   
0B4ABB 02 
0B4ABC A7 
0B4ABD 02 
0B4AC1 B1    0145** DW	 689,  699,  709,  719,  729,  740,  751,  762
0B4AC2 02 
0B4AC3 BB 
0B4AC4 02 
0B4AC4 C5   
0B4AC5 02 
0B4AC6 CF 
0B4AC7 02 
0B4AC7 D9   
0B4AC8 02 
0B4AC9 E4 
0B4ACA 02 
0B4ACA EF   
0B4ACB 02 
0B4ACC FA 
0B4ACD 02 
0B4AD1 05    0146** DW	 773,  784,  795,  807,  819,  831,  843,  855
0B4AD2 03 
0B4AD3 10 
0B4AD4 03 
0B4AD4 1B   
0B4AD5 03 
0B4AD6 27 
0B4AD7 03 
0B4AD7 33   
0B4AD8 03 
0B4AD9 3F 
0B4ADA 03 
0B4ADA 4B   
0B4ADB 03 
0B4ADC 57 
0B4ADD 03 
0B4AE1 63    0147** DW	 867,  880,  893,  906,  919,  932,  946,  960
0B4AE2 03 
0B4AE3 70 
0B4AE4 03 
0B4AE4 7D   
0B4AE5 03 
0B4AE6 8A 
0B4AE7 03 
0B4AE7 97   
0B4AE8 03 
0B4AE9 A4 
0B4AEA 03 
0B4AEA B2   
0B4AEB 03 
0B4AEC C0 
0B4AED 03 
0B4AF1 CE    0148** DW	 974,  988, 1002, 1017, 1032, 1047, 1062, 1078
0B4AF2 03 
0B4AF3 DC 
0B4AF4 03 
0B4AF4 EA   
0B4AF5 03 
0B4AF6 F9 
0B4AF7 03 
0B4AF7 08   
0B4AF8 04 
0B4AF9 17 
0B4AFA 04 
0B4AFA 26   
0B4AFB 04 
0B4AFC 36 
0B4AFD 04 
0B4B01 45    0149** DW	1093, 1109, 1125, 1142, 1158, 1175, 1192, 1210
0B4B02 04 
0B4B03 55 
0B4B04 04 
0B4B04 65   
0B4B05 04 
0B4B06 76 
0B4B07 04 
0B4B07 86   
0B4B08 04 
0B4B09 97 
0B4B0A 04 
0B4B0A A8   
0B4B0B 04 
0B4B0C BA 
0B4B0D 04 
0B4B11 CB    0150** DW	1227, 1245, 1263, 1282, 1300, 1319, 1338, 1358
0B4B12 04 
0B4B13 DD 
0B4B14 04 
0B4B14 EF   
0B4B15 04 
0B4B16 02 
0B4B17 05 
0B4B17 14   
0B4B18 05 
0B4B19 27 
0B4B1A 05 
0B4B1A 3A   
0B4B1B 05 
0B4B1C 4E 
0B4B1D 05 
0B4B21 62    0151** DW	1378, 1398, 1418, 1439, 1459, 1481, 1502, 1524
0B4B22 05 
0B4B23 76 
0B4B24 05 
0B4B24 8A   
0B4B25 05 
0B4B26 9F 
0B4B27 05 
0B4B27 B3   
0B4B28 05 
0B4B29 C9 
0B4B2A 05 
0B4B2A DE   
0B4B2B 05 
0B4B2C F4 
0B4B2D 05 
0B4B31 0A    0152** DW	1546, 1569, 1592, 1615, 1638, 1662, 1686, 1711
0B4B32 06 
0B4B33 21 
0B4B34 06 
0B4B34 38   
0B4B35 06 
0B4B36 4F 
0B4B37 06 
0B4B37 66   
0B4B38 06 
0B4B39 7E 
0B4B3A 06 
0B4B3A 96   
0B4B3B 06 
0B4B3C AF 
0B4B3D 06 
0B4B41 C8    0153** DW	1736, 1761, 1786, 1812, 1839, 1866, 1893, 1920
0B4B42 06 
0B4B43 E1 
0B4B44 06 
0B4B44 FA   
0B4B45 06 
0B4B46 14 
0B4B47 07 
0B4B47 2F   
0B4B48 07 
0B4B49 4A 
0B4B4A 07 
0B4B4A 65   
0B4B4B 07 
0B4B4C 80 
0B4B4D 07 
0B4B51 9C    0154** DW	1948, 1976, 2005, 2034, 2064, 2093, 2123, 2154
0B4B52 07 
0B4B53 B8 
0B4B54 07 
0B4B54 D5   
0B4B55 07 
0B4B56 F2 
0B4B57 07 
0B4B57 10   
0B4B58 08 
0B4B59 2D 
0B4B5A 08 
0B4B5A 4B   
0B4B5B 08 
0B4B5C 6A 
0B4B5D 08 
0B4B61 8A    0155** DW	2186, 2217, 2250, 2282, 2316, 2349, 2383, 2418
0B4B62 08 
0B4B63 A9 
0B4B64 08 
0B4B64 CA   
0B4B65 08 
0B4B66 EA 
0B4B67 08 
0B4B67 0C   
0B4B68 09 
0B4B69 2D 
0B4B6A 09 
0B4B6A 4F   
0B4B6B 09 
0B4B6C 72 
0B4B6D 09 
0B4B71 95    0156** DW	2453, 2489, 2525, 2562, 2599, 2637, 2675, 2714
0B4B72 09 
0B4B73 B9 
0B4B74 09 
0B4B74 DD   
0B4B75 09 
0B4B76 02 
0B4B77 0A 
0B4B77 27   
0B4B78 0A 
0B4B79 4D 
0B4B7A 0A 
0B4B7A 73   
0B4B7B 0A 
0B4B7C 9A 
0B4B7D 0A 
0B4B81 C2    0157** DW	2754, 2794, 2834, 2876, 2918, 2960, 3003, 3047
0B4B82 0A 
0B4B83 EA 
0B4B84 0A 
0B4B84 12   
0B4B85 0B 
0B4B86 3C 
0B4B87 0B 
0B4B87 66   
0B4B88 0B 
0B4B89 90 
0B4B8A 0B 
0B4B8A BB   
0B4B8B 0B 
0B4B8C E7 
0B4B8D 0B 
0B4B91 13    0158** DW	3091, 3136, 3182, 3228, 3275, 3322, 3371, 3420
0B4B92 0C 
0B4B93 40 
0B4B94 0C 
0B4B94 6E   
0B4B95 0C 
0B4B96 9C 
0B4B97 0C 
0B4B97 CB   
0B4B98 0C 
0B4B99 FA 
0B4B9A 0C 
0B4B9A 2B   
0B4B9B 0D 
0B4B9C 5C 
0B4B9D 0D 
0B4BA1 8E    0159** DW	3470, 3520, 3571, 3623, 3676, 3729, 3784, 3839
0B4BA2 0D 
0B4BA3 C0 
0B4BA4 0D 
0B4BA4 F3   
0B4BA5 0D 
0B4BA6 27 
0B4BA7 0E 
0B4BA7 5C   
0B4BA8 0E 
0B4BA9 91 
0B4BAA 0E 
0B4BAA C8   
0B4BAB 0E 
0B4BAC FF 
0B4BAD 0E 
0B4BB1 36    0160** DW	3894, 3951, 4009, 4067, 4126, 4186, 4247, 4309
0B4BB2 0F 
0B4BB3 6F 
0B4BB4 0F 
0B4BB4 A9   
0B4BB5 0F 
0B4BB6 E3 
0B4BB7 0F 
0B4BB7 1E   
0B4BB8 10 
0B4BB9 5A 
0B4BBA 10 
0B4BBA 97   
0B4BBB 10 
0B4BBC D5 
0B4BBD 10 
0B4BC1 13    0161** DW	4371, 4435, 4499, 4565, 4631, 4699, 4767, 4836
0B4BC2 11 
0B4BC3 53 
0B4BC4 11 
0B4BC4 93   
0B4BC5 11 
0B4BC6 D5 
0B4BC7 11 
0B4BC7 17   
0B4BC8 12 
0B4BC9 5B 
0B4BCA 12 
0B4BCA 9F   
0B4BCB 12 
0B4BCC E4 
0B4BCD 12 
             0162** 
             0163** 
              0015* include "basic/interrupts.asm"
             0001** ;
             0002** ; Title:	BBC Basic for AGON - Interrupts
             0003** ; Author:	Dean Belfield
             0004** ; Created:	12/05/2023
             0005** ; Last Updated:	07/06/2023
             0006** ;
             0007** ; Modinfo:
             0008** ; 07/06/2023:	Modified to run in ADL mode
             0009** 
             0010** ; .ASSUME	ADL = 1
             0011** 
             0012** ; INCLUDE	"macros.inc"
             0013** ; INCLUDE	"equs.inc"
             0014** ; INCLUDE "mos_api.inc"	; In MOS/src
             0015** 
             0016** ; SEGMENT CODE
             0017** 
             0018** ; XDEF	VBLANK_INIT
             0019** ; XDEF	VBLANK_STOP
             0020** ; XDEF	VBLANK_HANDLER
             0021** 
             0022** ; XREF	ESCSET
             0023** ; XREF	KEYDOWN		; In ram.asm
             0024** ; XREF	KEYASCII 	; In ram.asm
             0025** ; XREF	KEYCOUNT	; In ram.asm
             0026** 
             0027** ; Hook into the MOS VBLANK interrupt
             0028** ;
0B4BD1 F3    0029** VBLANK_INIT:		DI
0B4BD2 21    0030** LD		HL, VBLANK_HANDLER		; this interrupt handler routine who's
0B4BD3 26 
0B4BD4 4C 
0B4BD5 0B 
0B4BD6 1E    0031** LD		E, 32h				; Set up the VBlank Interrupt Vector
0B4BD7 32 
             0032** MOSCALL		mos_setintvector
0B4BD8 3E   0001**M LD	A, function
0B4BD9 14 
0B4BDA 49   0002**M RST.LIS	08h
0B4BDB CF 
             0033** ; EX		HL, DE 				; DEU: Pointer to the MOS interrupt vector
0B4BDC EB    0034** ex de,hl
0B4BDD 21    0035** LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
0B4BDE 34 
0B4BDF 4C 
0B4BE0 0B 
0B4BE1 ED    0036** LD		(HL), DE			; Self-modify the code
0B4BE2 1F 
0B4BE3 FB    0037** EI
0B4BE4 C9    0038** RET
             0039** 
             0040** ; Unhook the custom VBLANK interrupt
             0041** ;
0B4BE5 F3    0042** VBLANK_STOP:		DI
0B4BE6 21    0043** LD		HL, VBLANK_HANDLER_JP + 1	; Pointer to the JP address in this segment
0B4BE7 34 
0B4BE8 4C 
0B4BE9 0B 
0B4BEA ED    0044** LD		DE, (HL)
0B4BEB 17 
0B4BEC EB    0045** EX		DE, HL 				; HLU: Address of MOS interrupt vector
0B4BED 1E    0046** LD		E, 32h
0B4BEE 32 
             0047** MOSCALL		mos_setintvector		; Restore the MOS interrupt vector
0B4BEF 3E   0001**M LD	A, function
0B4BF0 14 
0B4BF1 49   0002**M RST.LIS	08h
0B4BF2 CF 
0B4BF3 FB    0048** EI
0B4BF4 C9    0049** RET
             0050** 
             0051** ; A safe LIS call to ESCSET
             0052** ;
             0053** DO_KEYBOARD:		MOSCALL		mos_sysvars			; Get the system variables
0B4BF5 3E   0001**M LD	A, function
0B4BF6 08 
0B4BF7 49   0002**M RST.LIS	08h
0B4BF8 CF 
0B4BF9 21    0054** LD		HL, KEYCOUNT 			; Check whether the keycount has changed
0B4BFA 49 
0B4BFB 50 
0B4BFC 0B 
0B4BFD DD    0055** LD		A, (IX + sysvar_vkeycount)	; by comparing the MOS copy
0B4BFE 7E 
0B4BFF 19 
0B4C00 BE    0056** CP 		(HL)				; with our local copy
0B4C01 20    0057** JR		NZ, DO_KEYBOARD_1		; Yes it has, so jump to the next bit
0B4C02 0A 
             0058** ;
0B4C03 AF    0059** DO_KEYBOARD_0:		XOR		A 				; Clear the keyboard values
0B4C04 32    0060** LD		(KEYASCII), A
0B4C05 48 
0B4C06 50 
0B4C07 0B 
0B4C08 32    0061** LD		(KEYDOWN), A
0B4C09 47 
0B4C0A 50 
0B4C0B 0B 
0B4C0C C9    0062** RET	 					; And return
             0063** ;
0B4C0D 77    0064** DO_KEYBOARD_1:		LD		(HL), A 			; Store the updated local copy of keycount
0B4C0E DD    0065** LD		A, (IX + sysvar_vkeydown)	; Fetch key down value (1 = key down, 0 = key up)
0B4C0F 7E 
0B4C10 18 
0B4C11 B7    0066** OR		A
0B4C12 28    0067** JR		Z, DO_KEYBOARD_0		; If it is key up, then clear the keyboard values
0B4C13 EF 
             0068** ;
0B4C14 32    0069** LD		(KEYDOWN), A 			; Store the keydown value
0B4C15 47 
0B4C16 50 
0B4C17 0B 
0B4C18 DD    0070** LD		A, (IX + sysvar_keyascii)	; Fetch key ASCII value
0B4C19 7E 
0B4C1A 05 
0B4C1B 32    0071** LD		(KEYASCII), A 			; Store locally
0B4C1C 48 
0B4C1D 50 
0B4C1E 0B 
0B4C1F FE    0072** CP		1Bh				; Is it escape?
0B4C20 1B 
0B4C21 CC    0073** CALL		Z, ESCSET			; Yes, so set the escape flags
0B4C22 3D 
0B4C23 42 
0B4C24 0B 
0B4C25 C9    0074** RET						; Return to the interrupt handler
             0075** 
0B4C26 F3    0076** VBLANK_HANDLER:		DI
0B4C27 F5    0077** PUSH		AF
0B4C28 E5    0078** PUSH		HL
0B4C29 DD    0079** PUSH		IX
0B4C2A E5 
0B4C2B CD    0080** CALL		DO_KEYBOARD
0B4C2C F5 
0B4C2D 4B 
0B4C2E 0B 
0B4C2F DD    0081** POP		IX
0B4C30 E1 
0B4C31 E1    0082** POP		HL
0B4C32 F1    0083** POP		AF
             0084** ;
             0085** ; Finally jump to the MOS interrupt
             0086** ;
0B4C33 C3    0087** VBLANK_HANDLER_JP:	JP		0				; This is self-modified by VBLANK_INIT
0B4C34 00 
0B4C35 00 
0B4C36 00 
              0016* include "basic/ram.asm"
             0001** ;
             0002** ; Title:	BBC Basic Interpreter - Z80 version
             0003** ;		RAM Module for BBC Basic Interpreter
             0004** ;		For use with Version 2.0 of BBC BASIC
             0005** ;		Standard CP/M Distribution Version
             0006** ; Author:	(C) Copyright  R.T.Russell 31-12-1983
             0007** ; Modified By:	Dean Belfield
             0008** ; Created:	12/05/2023
             0009** ; Last Updated:	26/06/2023
             0010** ;
             0011** ; Modinfo:
             0012** ; 06/06/2023:	Modified to run in ADL mode
             0013** ; 26/06/2023:	Added temporary stores R0 and R1
             0014** 
             0015** ; .ASSUME	ADL = 1
             0016** 
             0017** ; DEFINE	LORAM, SPACE = ROM
             0018** ; SEGMENT LORAM
             0019** 
             0020** ; XDEF	ACCS
             0021** ; XDEF	BUFFER
             0022** ; XDEF	STAVAR
             0023** ; XDEF	DYNVAR
             0024** ; XDEF	FNPTR
             0025** ; XDEF	PROPTR
             0026** ; XDEF	PAGE_
             0027** ; XDEF	TOP
             0028** ; XDEF	LOMEM
             0029** ; XDEF 	FREE
             0030** ; XDEF	HIMEM
             0031** ; XDEF	LINENO
             0032** ; XDEF	TRACEN
             0033** ; XDEF	AUTONO
             0034** ; XDEF	ERRTRP
             0035** ; XDEF	ERRTXT
             0036** ; XDEF	DATPTR
             0037** ; XDEF	ERL
             0038** ; XDEF	ERRLIN
             0039** ; XDEF	RANDOM
             0040** ; XDEF	COUNT
             0041** ; XDEF	WIDTH
             0042** ; XDEF	ERR
             0043** ; XDEF	LISTON
             0044** ; XDEF	INCREM
             0045** 
             0046** ; XDEF	FLAGS
             0047** ; XDEF	OSWRCHPT
             0048** ; XDEF	OSWRCHCH
             0049** ; XDEF	OSWRCHFH
             0050** ; XDEF	KEYDOWN
             0051** ; XDEF	KEYASCII
             0052** ; XDEF	KEYCOUNT
             0053** 
             0054** ; XDEF	R0
             0055** ; XDEF	R1
             0056** 
             0057** ; XDEF	RAM_START
             0058** ; XDEF	RAM_END
             0059** ; XDEF	USER
             0060** 
             0061** end_binary: ;  for assemble.py to know where to truncate the binary file
0B4C37 FF    0062** ALIGN 		256		; ACCS, BUFFER & STAVAR must be on page boundaries
0B4C38 FF 
0B4C39 FF 
0B4C3A FF 
0B4C3A FF   
0B4C3B FF 
0B4C3C FF 
0B4C3D FF 
0B4C3D FF   
0B4C3E FF 
0B4C3F FF 
0B4C40 FF 
0B4C40 FF   
0B4C41 FF 
0B4C42 FF 
0B4C43 FF 
0B4C43 FF   
0B4C44 FF 
0B4C45 FF 
0B4C46 FF 
0B4C46 FF   
0B4C47 FF 
0B4C48 FF 
0B4C49 FF 
0B4C49 FF   
0B4C4A FF 
0B4C4B FF 
0B4C4C FF 
0B4C4C FF   
0B4C4D FF 
0B4C4E FF 
0B4C4F FF 
0B4C4F FF   
0B4C50 FF 
0B4C51 FF 
0B4C52 FF 
0B4C52 FF   
0B4C53 FF 
0B4C54 FF 
0B4C55 FF 
0B4C55 FF   
0B4C56 FF 
0B4C57 FF 
0B4C58 FF 
0B4C58 FF   
0B4C59 FF 
0B4C5A FF 
0B4C5B FF 
0B4C5B FF   
0B4C5C FF 
0B4C5D FF 
0B4C5E FF 
0B4C5E FF   
0B4C5F FF 
0B4C60 FF 
0B4C61 FF 
0B4C61 FF   
0B4C62 FF 
0B4C63 FF 
0B4C64 FF 
0B4C64 FF   
0B4C65 FF 
0B4C66 FF 
0B4C67 FF 
0B4C67 FF   
0B4C68 FF 
0B4C69 FF 
0B4C6A FF 
0B4C6A FF   
0B4C6B FF 
0B4C6C FF 
0B4C6D FF 
0B4C6D FF   
0B4C6E FF 
0B4C6F FF 
0B4C70 FF 
0B4C70 FF   
0B4C71 FF 
0B4C72 FF 
0B4C73 FF 
0B4C73 FF   
0B4C74 FF 
0B4C75 FF 
0B4C76 FF 
0B4C76 FF   
0B4C77 FF 
0B4C78 FF 
0B4C79 FF 
0B4C79 FF   
0B4C7A FF 
0B4C7B FF 
0B4C7C FF 
0B4C7C FF   
0B4C7D FF 
0B4C7E FF 
0B4C7F FF 
0B4C7F FF   
0B4C80 FF 
0B4C81 FF 
0B4C82 FF 
0B4C82 FF   
0B4C83 FF 
0B4C84 FF 
0B4C85 FF 
0B4C85 FF   
0B4C86 FF 
0B4C87 FF 
0B4C88 FF 
0B4C88 FF   
0B4C89 FF 
0B4C8A FF 
0B4C8B FF 
0B4C8B FF   
0B4C8C FF 
0B4C8D FF 
0B4C8E FF 
0B4C8E FF   
0B4C8F FF 
0B4C90 FF 
0B4C91 FF 
0B4C91 FF   
0B4C92 FF 
0B4C93 FF 
0B4C94 FF 
0B4C94 FF   
0B4C95 FF 
0B4C96 FF 
0B4C97 FF 
0B4C97 FF   
0B4C98 FF 
0B4C99 FF 
0B4C9A FF 
0B4C9A FF   
0B4C9B FF 
0B4C9C FF 
0B4C9D FF 
0B4C9D FF   
0B4C9E FF 
0B4C9F FF 
0B4CA0 FF 
0B4CA0 FF   
0B4CA1 FF 
0B4CA2 FF 
0B4CA3 FF 
0B4CA3 FF   
0B4CA4 FF 
0B4CA5 FF 
0B4CA6 FF 
0B4CA6 FF   
0B4CA7 FF 
0B4CA8 FF 
0B4CA9 FF 
0B4CA9 FF   
0B4CAA FF 
0B4CAB FF 
0B4CAC FF 
0B4CAC FF   
0B4CAD FF 
0B4CAE FF 
0B4CAF FF 
0B4CAF FF   
0B4CB0 FF 
0B4CB1 FF 
0B4CB2 FF 
0B4CB2 FF   
0B4CB3 FF 
0B4CB4 FF 
0B4CB5 FF 
0B4CB5 FF   
0B4CB6 FF 
0B4CB7 FF 
0B4CB8 FF 
0B4CB8 FF   
0B4CB9 FF 
0B4CBA FF 
0B4CBB FF 
0B4CBB FF   
0B4CBC FF 
0B4CBD FF 
0B4CBE FF 
0B4CBE FF   
0B4CBF FF 
0B4CC0 FF 
0B4CC1 FF 
0B4CC1 FF   
0B4CC2 FF 
0B4CC3 FF 
0B4CC4 FF 
0B4CC4 FF   
0B4CC5 FF 
0B4CC6 FF 
0B4CC7 FF 
0B4CC7 FF   
0B4CC8 FF 
0B4CC9 FF 
0B4CCA FF 
0B4CCA FF   
0B4CCB FF 
0B4CCC FF 
0B4CCD FF 
0B4CCD FF   
             0063** RAM_START:
             0064** ;
0B4D00 00    0065** ACCS:           BLKB    256,0             ; String Accumulator
0B4D01 00 
0B4D02 00 
0B4D03 00 
0B4D03 00   
0B4D04 00 
0B4D05 00 
0B4D06 00 
0B4D06 00   
0B4D07 00 
0B4D08 00 
0B4D09 00 
0B4D09 00   
0B4D0A 00 
0B4D0B 00 
0B4D0C 00 
0B4D0C 00   
0B4D0D 00 
0B4D0E 00 
0B4D0F 00 
0B4D0F 00   
0B4D10 00 
0B4D11 00 
0B4D12 00 
0B4D12 00   
0B4D13 00 
0B4D14 00 
0B4D15 00 
0B4D15 00   
0B4D16 00 
0B4D17 00 
0B4D18 00 
0B4D18 00   
0B4D19 00 
0B4D1A 00 
0B4D1B 00 
0B4D1B 00   
0B4D1C 00 
0B4D1D 00 
0B4D1E 00 
0B4D1E 00   
0B4D1F 00 
0B4D20 00 
0B4D21 00 
0B4D21 00   
0B4D22 00 
0B4D23 00 
0B4D24 00 
0B4D24 00   
0B4D25 00 
0B4D26 00 
0B4D27 00 
0B4D27 00   
0B4D28 00 
0B4D29 00 
0B4D2A 00 
0B4D2A 00   
0B4D2B 00 
0B4D2C 00 
0B4D2D 00 
0B4D2D 00   
0B4D2E 00 
0B4D2F 00 
0B4D30 00 
0B4D30 00   
0B4D31 00 
0B4D32 00 
0B4D33 00 
0B4D33 00   
0B4D34 00 
0B4D35 00 
0B4D36 00 
0B4D36 00   
0B4D37 00 
0B4D38 00 
0B4D39 00 
0B4D39 00   
0B4D3A 00 
0B4D3B 00 
0B4D3C 00 
0B4D3C 00   
0B4D3D 00 
0B4D3E 00 
0B4D3F 00 
0B4D3F 00   
0B4D40 00 
0B4D41 00 
0B4D42 00 
0B4D42 00   
0B4D43 00 
0B4D44 00 
0B4D45 00 
0B4D45 00   
0B4D46 00 
0B4D47 00 
0B4D48 00 
0B4D48 00   
0B4D49 00 
0B4D4A 00 
0B4D4B 00 
0B4D4B 00   
0B4D4C 00 
0B4D4D 00 
0B4D4E 00 
0B4D4E 00   
0B4D4F 00 
0B4D50 00 
0B4D51 00 
0B4D51 00   
0B4D52 00 
0B4D53 00 
0B4D54 00 
0B4D54 00   
0B4D55 00 
0B4D56 00 
0B4D57 00 
0B4D57 00   
0B4D58 00 
0B4D59 00 
0B4D5A 00 
0B4D5A 00   
0B4D5B 00 
0B4D5C 00 
0B4D5D 00 
0B4D5D 00   
0B4D5E 00 
0B4D5F 00 
0B4D60 00 
0B4D60 00   
0B4D61 00 
0B4D62 00 
0B4D63 00 
0B4D63 00   
0B4D64 00 
0B4D65 00 
0B4D66 00 
0B4D66 00   
0B4D67 00 
0B4D68 00 
0B4D69 00 
0B4D69 00   
0B4D6A 00 
0B4D6B 00 
0B4D6C 00 
0B4D6C 00   
0B4D6D 00 
0B4D6E 00 
0B4D6F 00 
0B4D6F 00   
0B4D70 00 
0B4D71 00 
0B4D72 00 
0B4D72 00   
0B4D73 00 
0B4D74 00 
0B4D75 00 
0B4D75 00   
0B4D76 00 
0B4D77 00 
0B4D78 00 
0B4D78 00   
0B4D79 00 
0B4D7A 00 
0B4D7B 00 
0B4D7B 00   
0B4D7C 00 
0B4D7D 00 
0B4D7E 00 
0B4D7E 00   
0B4D7F 00 
0B4D80 00 
0B4D81 00 
0B4D81 00   
0B4D82 00 
0B4D83 00 
0B4D84 00 
0B4D84 00   
0B4D85 00 
0B4D86 00 
0B4D87 00 
0B4D87 00   
0B4D88 00 
0B4D89 00 
0B4D8A 00 
0B4D8A 00   
0B4D8B 00 
0B4D8C 00 
0B4D8D 00 
0B4D8D 00   
0B4D8E 00 
0B4D8F 00 
0B4D90 00 
0B4D90 00   
0B4D91 00 
0B4D92 00 
0B4D93 00 
0B4D93 00   
0B4D94 00 
0B4D95 00 
0B4D96 00 
0B4D96 00   
0B4D97 00 
0B4D98 00 
0B4D99 00 
0B4D99 00   
0B4D9A 00 
0B4D9B 00 
0B4D9C 00 
0B4D9C 00   
0B4D9D 00 
0B4D9E 00 
0B4D9F 00 
0B4D9F 00   
0B4DA0 00 
0B4DA1 00 
0B4DA2 00 
0B4DA2 00   
0B4DA3 00 
0B4DA4 00 
0B4DA5 00 
0B4DA5 00   
0B4DA6 00 
0B4DA7 00 
0B4DA8 00 
0B4DA8 00   
0B4DA9 00 
0B4DAA 00 
0B4DAB 00 
0B4DAB 00   
0B4DAC 00 
0B4DAD 00 
0B4DAE 00 
0B4DAE 00   
0B4DAF 00 
0B4DB0 00 
0B4DB1 00 
0B4DB1 00   
0B4DB2 00 
0B4DB3 00 
0B4DB4 00 
0B4DB4 00   
0B4DB5 00 
0B4DB6 00 
0B4DB7 00 
0B4DB7 00   
0B4DB8 00 
0B4DB9 00 
0B4DBA 00 
0B4DBA 00   
0B4DBB 00 
0B4DBC 00 
0B4DBD 00 
0B4DBD 00   
0B4DBE 00 
0B4DBF 00 
0B4DC0 00 
0B4E00 00    0066** BUFFER:         BLKB    256,0             ; String Input Buffer
0B4E01 00 
0B4E02 00 
0B4E03 00 
0B4E03 00   
0B4E04 00 
0B4E05 00 
0B4E06 00 
0B4E06 00   
0B4E07 00 
0B4E08 00 
0B4E09 00 
0B4E09 00   
0B4E0A 00 
0B4E0B 00 
0B4E0C 00 
0B4E0C 00   
0B4E0D 00 
0B4E0E 00 
0B4E0F 00 
0B4E0F 00   
0B4E10 00 
0B4E11 00 
0B4E12 00 
0B4E12 00   
0B4E13 00 
0B4E14 00 
0B4E15 00 
0B4E15 00   
0B4E16 00 
0B4E17 00 
0B4E18 00 
0B4E18 00   
0B4E19 00 
0B4E1A 00 
0B4E1B 00 
0B4E1B 00   
0B4E1C 00 
0B4E1D 00 
0B4E1E 00 
0B4E1E 00   
0B4E1F 00 
0B4E20 00 
0B4E21 00 
0B4E21 00   
0B4E22 00 
0B4E23 00 
0B4E24 00 
0B4E24 00   
0B4E25 00 
0B4E26 00 
0B4E27 00 
0B4E27 00   
0B4E28 00 
0B4E29 00 
0B4E2A 00 
0B4E2A 00   
0B4E2B 00 
0B4E2C 00 
0B4E2D 00 
0B4E2D 00   
0B4E2E 00 
0B4E2F 00 
0B4E30 00 
0B4E30 00   
0B4E31 00 
0B4E32 00 
0B4E33 00 
0B4E33 00   
0B4E34 00 
0B4E35 00 
0B4E36 00 
0B4E36 00   
0B4E37 00 
0B4E38 00 
0B4E39 00 
0B4E39 00   
0B4E3A 00 
0B4E3B 00 
0B4E3C 00 
0B4E3C 00   
0B4E3D 00 
0B4E3E 00 
0B4E3F 00 
0B4E3F 00   
0B4E40 00 
0B4E41 00 
0B4E42 00 
0B4E42 00   
0B4E43 00 
0B4E44 00 
0B4E45 00 
0B4E45 00   
0B4E46 00 
0B4E47 00 
0B4E48 00 
0B4E48 00   
0B4E49 00 
0B4E4A 00 
0B4E4B 00 
0B4E4B 00   
0B4E4C 00 
0B4E4D 00 
0B4E4E 00 
0B4E4E 00   
0B4E4F 00 
0B4E50 00 
0B4E51 00 
0B4E51 00   
0B4E52 00 
0B4E53 00 
0B4E54 00 
0B4E54 00   
0B4E55 00 
0B4E56 00 
0B4E57 00 
0B4E57 00   
0B4E58 00 
0B4E59 00 
0B4E5A 00 
0B4E5A 00   
0B4E5B 00 
0B4E5C 00 
0B4E5D 00 
0B4E5D 00   
0B4E5E 00 
0B4E5F 00 
0B4E60 00 
0B4E60 00   
0B4E61 00 
0B4E62 00 
0B4E63 00 
0B4E63 00   
0B4E64 00 
0B4E65 00 
0B4E66 00 
0B4E66 00   
0B4E67 00 
0B4E68 00 
0B4E69 00 
0B4E69 00   
0B4E6A 00 
0B4E6B 00 
0B4E6C 00 
0B4E6C 00   
0B4E6D 00 
0B4E6E 00 
0B4E6F 00 
0B4E6F 00   
0B4E70 00 
0B4E71 00 
0B4E72 00 
0B4E72 00   
0B4E73 00 
0B4E74 00 
0B4E75 00 
0B4E75 00   
0B4E76 00 
0B4E77 00 
0B4E78 00 
0B4E78 00   
0B4E79 00 
0B4E7A 00 
0B4E7B 00 
0B4E7B 00   
0B4E7C 00 
0B4E7D 00 
0B4E7E 00 
0B4E7E 00   
0B4E7F 00 
0B4E80 00 
0B4E81 00 
0B4E81 00   
0B4E82 00 
0B4E83 00 
0B4E84 00 
0B4E84 00   
0B4E85 00 
0B4E86 00 
0B4E87 00 
0B4E87 00   
0B4E88 00 
0B4E89 00 
0B4E8A 00 
0B4E8A 00   
0B4E8B 00 
0B4E8C 00 
0B4E8D 00 
0B4E8D 00   
0B4E8E 00 
0B4E8F 00 
0B4E90 00 
0B4E90 00   
0B4E91 00 
0B4E92 00 
0B4E93 00 
0B4E93 00   
0B4E94 00 
0B4E95 00 
0B4E96 00 
0B4E96 00   
0B4E97 00 
0B4E98 00 
0B4E99 00 
0B4E99 00   
0B4E9A 00 
0B4E9B 00 
0B4E9C 00 
0B4E9C 00   
0B4E9D 00 
0B4E9E 00 
0B4E9F 00 
0B4E9F 00   
0B4EA0 00 
0B4EA1 00 
0B4EA2 00 
0B4EA2 00   
0B4EA3 00 
0B4EA4 00 
0B4EA5 00 
0B4EA5 00   
0B4EA6 00 
0B4EA7 00 
0B4EA8 00 
0B4EA8 00   
0B4EA9 00 
0B4EAA 00 
0B4EAB 00 
0B4EAB 00   
0B4EAC 00 
0B4EAD 00 
0B4EAE 00 
0B4EAE 00   
0B4EAF 00 
0B4EB0 00 
0B4EB1 00 
0B4EB1 00   
0B4EB2 00 
0B4EB3 00 
0B4EB4 00 
0B4EB4 00   
0B4EB5 00 
0B4EB6 00 
0B4EB7 00 
0B4EB7 00   
0B4EB8 00 
0B4EB9 00 
0B4EBA 00 
0B4EBA 00   
0B4EBB 00 
0B4EBC 00 
0B4EBD 00 
0B4EBD 00   
0B4EBE 00 
0B4EBF 00 
0B4EC0 00 
0B4F00 00    0067** STAVAR:         BLKB    27*4,0            ; Static Variables
0B4F01 00 
0B4F02 00 
0B4F03 00 
0B4F03 00   
0B4F04 00 
0B4F05 00 
0B4F06 00 
0B4F06 00   
0B4F07 00 
0B4F08 00 
0B4F09 00 
0B4F09 00   
0B4F0A 00 
0B4F0B 00 
0B4F0C 00 
0B4F0C 00   
0B4F0D 00 
0B4F0E 00 
0B4F0F 00 
0B4F0F 00   
0B4F10 00 
0B4F11 00 
0B4F12 00 
0B4F12 00   
0B4F13 00 
0B4F14 00 
0B4F15 00 
0B4F15 00   
0B4F16 00 
0B4F17 00 
0B4F18 00 
0B4F18 00   
0B4F19 00 
0B4F1A 00 
0B4F1B 00 
0B4F1B 00   
0B4F1C 00 
0B4F1D 00 
0B4F1E 00 
0B4F1E 00   
0B4F1F 00 
0B4F20 00 
0B4F21 00 
0B4F21 00   
0B4F22 00 
0B4F23 00 
0B4F24 00 
0B4F24 00   
0B4F25 00 
0B4F26 00 
0B4F27 00 
0B4F27 00   
0B4F28 00 
0B4F29 00 
0B4F2A 00 
0B4F2A 00   
0B4F2B 00 
0B4F2C 00 
0B4F2D 00 
0B4F2D 00   
0B4F2E 00 
0B4F2F 00 
0B4F30 00 
0B4F30 00   
0B4F31 00 
0B4F32 00 
0B4F33 00 
0B4F33 00   
0B4F34 00 
0B4F35 00 
0B4F36 00 
0B4F36 00   
0B4F37 00 
0B4F38 00 
0B4F39 00 
0B4F39 00   
0B4F3A 00 
0B4F3B 00 
0B4F3C 00 
0B4F3C 00   
0B4F3D 00 
0B4F3E 00 
0B4F3F 00 
0B4F3F 00   
0B4F40 00 
0B4F41 00 
0B4F42 00 
0B4F42 00   
0B4F43 00 
0B4F44 00 
0B4F45 00 
0B4F45 00   
0B4F46 00 
0B4F47 00 
0B4F48 00 
0B4F48 00   
0B4F49 00 
0B4F4A 00 
0B4F4B 00 
0B4F4B 00   
0B4F4C 00 
0B4F4D 00 
0B4F4E 00 
0B4F4E 00   
0B4F4F 00 
0B4F50 00 
0B4F51 00 
0B4F6C 00    0068** DYNVAR:         BLKB    54*3,0            ; Dynamic Variable Pointers
0B4F6D 00 
0B4F6E 00 
0B4F6F 00 
0B4F6F 00   
0B4F70 00 
0B4F71 00 
0B4F72 00 
0B4F72 00   
0B4F73 00 
0B4F74 00 
0B4F75 00 
0B4F75 00   
0B4F76 00 
0B4F77 00 
0B4F78 00 
0B4F78 00   
0B4F79 00 
0B4F7A 00 
0B4F7B 00 
0B4F7B 00   
0B4F7C 00 
0B4F7D 00 
0B4F7E 00 
0B4F7E 00   
0B4F7F 00 
0B4F80 00 
0B4F81 00 
0B4F81 00   
0B4F82 00 
0B4F83 00 
0B4F84 00 
0B4F84 00   
0B4F85 00 
0B4F86 00 
0B4F87 00 
0B4F87 00   
0B4F88 00 
0B4F89 00 
0B4F8A 00 
0B4F8A 00   
0B4F8B 00 
0B4F8C 00 
0B4F8D 00 
0B4F8D 00   
0B4F8E 00 
0B4F8F 00 
0B4F90 00 
0B4F90 00   
0B4F91 00 
0B4F92 00 
0B4F93 00 
0B4F93 00   
0B4F94 00 
0B4F95 00 
0B4F96 00 
0B4F96 00   
0B4F97 00 
0B4F98 00 
0B4F99 00 
0B4F99 00   
0B4F9A 00 
0B4F9B 00 
0B4F9C 00 
0B4F9C 00   
0B4F9D 00 
0B4F9E 00 
0B4F9F 00 
0B4F9F 00   
0B4FA0 00 
0B4FA1 00 
0B4FA2 00 
0B4FA2 00   
0B4FA3 00 
0B4FA4 00 
0B4FA5 00 
0B4FA5 00   
0B4FA6 00 
0B4FA7 00 
0B4FA8 00 
0B4FA8 00   
0B4FA9 00 
0B4FAA 00 
0B4FAB 00 
0B4FAB 00   
0B4FAC 00 
0B4FAD 00 
0B4FAE 00 
0B4FAE 00   
0B4FAF 00 
0B4FB0 00 
0B4FB1 00 
0B4FB1 00   
0B4FB2 00 
0B4FB3 00 
0B4FB4 00 
0B4FB4 00   
0B4FB5 00 
0B4FB6 00 
0B4FB7 00 
0B4FB7 00   
0B4FB8 00 
0B4FB9 00 
0B4FBA 00 
0B4FBA 00   
0B4FBB 00 
0B4FBC 00 
0B4FBD 00 
0B4FBD 00   
0B4FBE 00 
0B4FBF 00 
0B4FC0 00 
0B4FC0 00   
0B4FC1 00 
0B4FC2 00 
0B4FC3 00 
0B4FC3 00   
0B4FC4 00 
0B4FC5 00 
0B4FC6 00 
0B4FC6 00   
0B4FC7 00 
0B4FC8 00 
0B4FC9 00 
0B4FC9 00   
0B4FCA 00 
0B4FCB 00 
0B4FCC 00 
0B4FCC 00   
0B4FCD 00 
0B4FCE 00 
0B4FCF 00 
0B4FCF 00   
0B4FD0 00 
0B4FD1 00 
0B4FD2 00 
0B4FD2 00   
0B4FD3 00 
0B4FD4 00 
0B4FD5 00 
0B4FD5 00   
0B4FD6 00 
0B4FD7 00 
0B4FD8 00 
0B4FD8 00   
0B4FD9 00 
0B4FDA 00 
0B4FDB 00 
0B4FDB 00   
0B4FDC 00 
0B4FDD 00 
0B4FDE 00 
0B4FDE 00   
0B4FDF 00 
0B4FE0 00 
0B4FE1 00 
0B4FE1 00   
0B4FE2 00 
0B4FE3 00 
0B4FE4 00 
0B4FE4 00   
0B4FE5 00 
0B500E 00    0069** FNPTR:          BLKB    3,0               ; Dynamic Function Pointers
0B500F 00 
0B5010 00 
0B5011 00    0070** PROPTR:         BLKB    3,0               ; Dynamic Procedure Pointers
0B5012 00 
0B5013 00 
             0071** ;
0B5014 00    0072** PAGE_:          BLKB    3,0               ; Start of User Program
0B5015 00 
0B5016 00 
0B5017 00    0073** TOP:            BLKB    3,0               ; First Location after User Program
0B5018 00 
0B5019 00 
0B501A 00    0074** LOMEM:          BLKB    3,0               ; Start of Dynamic Storage
0B501B 00 
0B501C 00 
0B501D 00    0075** FREE:           BLKB    3,0               ; First Free Space Byte
0B501E 00 
0B501F 00 
0B5020 00    0076** HIMEM:          BLKB    3,0               ; First Protected Byte
0B5021 00 
0B5022 00 
             0077** ;
0B5023 00    0078** LINENO:         BLKB    3,0               ; Line Number
0B5024 00 
0B5025 00 
0B5026 00    0079** TRACEN:         BLKB    3,0               ; Trace Flag
0B5027 00 
0B5028 00 
0B5029 00    0080** AUTONO:         BLKB    3,0               ; Auto Flag
0B502A 00 
0B502B 00 
0B502C 00    0081** ERRTRP:         BLKB    3,0               ; Error Trap
0B502D 00 
0B502E 00 
0B502F 00    0082** ERRTXT:         BLKB    2,0               ; Error Message Pointer
0B5030 00 
0B5031 00    0083** DATPTR:         BLKB    2,0               ; Data Pointer
0B5032 00 
0B5033 00    0084** ERL:            BLKB    2,0               ; Error Line
0B5034 00 
0B5035 00    0085** ERRLIN:         BLKB    3,0               ; The "ON ERROR" Line
0B5036 00 
0B5037 00 
0B5038 00    0086** RANDOM:         BLKB    5,0               ; Random Number
0B5039 00 
0B503A 00 
0B503B 00 
0B503B 00   
0B503D 00    0087** COUNT:          BLKB    1,0               ; Print Position
0B503E 00    0088** WIDTH:          BLKB    1,0               ; Print Width
0B503F 00    0089** ERR:            BLKB    1,0               ; Error Number
0B5040 00    0090** LISTON:         BLKB    1,0               ; LISTO (bottom nibble)
             0091** ; - BIT 0: If set, output a space after the line number
             0092** ; - BIT 1: If set, then indent FOR/NEXT loops
             0093** ; - BIT 2: If set, then indent REPEAT/UNTIL loops
             0094** ; - BIT 3: If set, then output to buffer for *EDIT
             0095** ; OPT FLAG (top nibble)
             0096** ; - BIT 4: If set, then list whilst assembling
             0097** ; - BIT 5: If set, then assembler errors are reported
             0098** ; - BIT 6: If set, then place the code starting at address pointed to by O%
             0099** ; - BIT 7: If set, then assemble in ADL mode, otherwise assemble in Z80 mode
0B5041 00    0100** INCREM:         BLKB    1,0               ; Auto-Increment Value
             0101** ;
             0102** ; --------------------------------------------------------------------------------------------
             0103** ; BEGIN MODIFIED CODE
             0104** ; --------------------------------------------------------------------------------------------
             0105** ; Originally in equs.inc
             0106** ;
             0107** OC:			EQU     15*4+STAVAR     ; CODE ORIGIN (O%)
             0108** PC:			EQU     16*4+STAVAR     ; PROGRAM COUNTER (P%)
             0109** VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands
             0110** ; --------------------------------------------------------------------------------------------
             0111** ; END MODIFIED CODE
             0112** ; --------------------------------------------------------------------------------------------
             0113** 
             0114** ; Extra Agon-implementation specific system variables
             0115** ;
0B5042 00    0116** FLAGS:          BLKB    1,0       ; Miscellaneous flags
             0117** ; - BIT 7: Set if ESC pressed
             0118** ; - BIT 6: Set to disable ESC
0B5043 00    0119** OSWRCHPT:       BLKB    2,0       ; Pointer for *EDIT
0B5044 00 
0B5045 00    0120** OSWRCHCH:       BLKB    1,0       ; Channel of OSWRCH
             0121** ; - 0: Console
             0122** ; - 1: File
0B5046 00    0123** OSWRCHFH:       BLKB    1,0       ; File handle for OSWRCHCHN
0B5047 00    0124** KEYDOWN:        BLKB    1,0       ; Keydown flag
0B5048 00    0125** KEYASCII:       BLKB    1,0       ; ASCII code of pressed key
0B5049 00    0126** KEYCOUNT:       BLKB    1,0       ; Counts every time a key is pressed
0B504A 00    0127** R0:             BLKB    3,0       ; General purpose storage for 8/16 to 24 bit operations
0B504B 00 
0B504C 00 
0B504D 00    0128** R1:             BLKB    3,0
0B504E 00 
0B504F 00 
             0129** 
             0130** ;
             0131** ; This must be at the end
             0132** ;
             0133** RAM_END:
0B5050 FF    0134** ALIGN	256
0B5051 FF 
0B5052 FF 
0B5053 FF 
0B5053 FF   
0B5054 FF 
0B5055 FF 
0B5056 FF 
0B5056 FF   
0B5057 FF 
0B5058 FF 
0B5059 FF 
0B5059 FF   
0B505A FF 
0B505B FF 
0B505C FF 
0B505C FF   
0B505D FF 
0B505E FF 
0B505F FF 
0B505F FF   
0B5060 FF 
0B5061 FF 
0B5062 FF 
0B5062 FF   
0B5063 FF 
0B5064 FF 
0B5065 FF 
0B5065 FF   
0B5066 FF 
0B5067 FF 
0B5068 FF 
0B5068 FF   
0B5069 FF 
0B506A FF 
0B506B FF 
0B506B FF   
0B506C FF 
0B506D FF 
0B506E FF 
0B506E FF   
0B506F FF 
0B5070 FF 
0B5071 FF 
0B5071 FF   
0B5072 FF 
0B5073 FF 
0B5074 FF 
0B5074 FF   
0B5075 FF 
0B5076 FF 
0B5077 FF 
0B5077 FF   
0B5078 FF 
0B5079 FF 
0B507A FF 
0B507A FF   
0B507B FF 
0B507C FF 
0B507D FF 
0B507D FF   
0B507E FF 
0B507F FF 
0B5080 FF 
0B5080 FF   
0B5081 FF 
0B5082 FF 
0B5083 FF 
0B5083 FF   
0B5084 FF 
0B5085 FF 
0B5086 FF 
0B5086 FF   
0B5087 FF 
0B5088 FF 
0B5089 FF 
0B5089 FF   
0B508A FF 
0B508B FF 
0B508C FF 
0B508C FF   
0B508D FF 
0B508E FF 
0B508F FF 
0B508F FF   
0B5090 FF 
0B5091 FF 
0B5092 FF 
0B5092 FF   
0B5093 FF 
0B5094 FF 
0B5095 FF 
0B5095 FF   
0B5096 FF 
0B5097 FF 
0B5098 FF 
0B5098 FF   
0B5099 FF 
0B509A FF 
0B509B FF 
0B509B FF   
0B509C FF 
0B509D FF 
0B509E FF 
0B509E FF   
0B509F FF 
0B50A0 FF 
0B50A1 FF 
0B50A1 FF   
0B50A2 FF 
0B50A3 FF 
0B50A4 FF 
0B50A4 FF   
0B50A5 FF 
0B50A6 FF 
0B50A7 FF 
0B50A7 FF   
0B50A8 FF 
0B50A9 FF 
0B50AA FF 
0B50AA FF   
0B50AB FF 
0B50AC FF 
0B50AD FF 
0B50AD FF   
0B50AE FF 
0B50AF FF 
0B50B0 FF 
0B50B0 FF   
0B50B1 FF 
0B50B2 FF 
0B50B3 FF 
0B50B3 FF   
0B50B4 FF 
0B50B5 FF 
0B50B6 FF 
0B50B6 FF   
0B50B7 FF 
0B50B8 FF 
0B50B9 FF 
0B50B9 FF   
0B50BA FF 
0B50BB FF 
0B50BC FF 
0B50BC FF   
0B50BD FF 
0B50BE FF 
0B50BF FF 
0B50BF FF   
0B50C0 FF 
0B50C1 FF 
0B50C2 FF 
0B50C2 FF   
0B50C3 FF 
0B50C4 FF 
0B50C5 FF 
0B50C5 FF   
0B50C6 FF 
0B50C7 FF 
0B50C8 FF 
0B50C8 FF   
0B50C9 FF 
0B50CA FF 
0B50CB FF 
0B50CB FF   
0B50CC FF 
0B50CD FF 
0B50CE FF 
0B50CE FF   
0B50CF FF 
0B50D0 FF 
0B50D1 FF 
0B50D1 FF   
0B50D2 FF 
0B50D3 FF 
0B50D4 FF 
             0135** USER:							; Must be aligned on a page boundary
             0136** 
