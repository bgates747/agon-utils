PC     Output      Line
040000             0001       include "fpp/mos_api.inc"
040000             0001*  ;
040000             0002*  ; Title:	AGON MOS - API for user projects
040000             0003*  ; Author:	Dean Belfield
040000             0004*  ; Created:	03/08/2022
040000             0005*  ; Last Updated:	11/11/2023
040000             0006*  ;
040000             0007*  ; Modinfo:
040000             0008*  ; 05/08/2022:	Added mos_feof
040000             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040000             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040000             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040000             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040000             0013*  ; 13/10/2022:	Added mos_oscli
040000             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040000             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040000             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040000             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040000             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040000             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040000             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040000             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040000             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040000             0023*  ; 19/05/2023:	Added sysvar_scrMode
040000             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040000             0025*  ; 03/08/2023:	Added mos_setkbvector
040000             0026*  ; 10/08/2023:	Added mos_getkbmap
040000             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040000             0028*  
040000             0029*  ; VDP control (VDU 23, 0, n)
040000             0030*  ;
040000             0031*  vdp_gp:			EQU 	80h
040000             0032*  vdp_keycode:		EQU 	81h
040000             0033*  vdp_cursor:		EQU	82h
040000             0034*  vdp_scrchar:		EQU	83h
040000             0035*  vdp_scrpixel:		EQU	84h
040000             0036*  vdp_audio:		EQU	85h
040000             0037*  vdp_mode:		EQU	86h
040000             0038*  vdp_rtc:		EQU	87h
040000             0039*  vdp_keystate:		EQU	88h
040000             0040*  vdp_logicalcoords:	EQU	C0h
040000             0041*  vdp_terminalmode:	EQU	FFh
040000             0042*  
040000             0043*  ; MOS high level functions
040000             0044*  ;
040000             0045*  mos_getkey:		EQU	00h
040000             0046*  mos_load:		EQU	01h
040000             0047*  mos_save:		EQU	02h
040000             0048*  mos_cd:			EQU	03h
040000             0049*  mos_dir:		EQU	04h
040000             0050*  mos_del:		EQU	05h
040000             0051*  mos_ren:		EQU	06h
040000             0052*  mos_mkdir:		EQU	07h
040000             0053*  mos_sysvars:		EQU	08h
040000             0054*  mos_editline:		EQU	09h
040000             0055*  mos_fopen:		EQU	0Ah
040000             0056*  mos_fclose:		EQU	0Bh
040000             0057*  mos_fgetc:		EQU	0Ch
040000             0058*  mos_fputc:		EQU	0Dh
040000             0059*  mos_feof:		EQU	0Eh
040000             0060*  mos_getError:		EQU	0Fh
040000             0061*  mos_oscli:		EQU	10h
040000             0062*  mos_copy:		EQU	11h
040000             0063*  mos_getrtc:		EQU	12h
040000             0064*  mos_setrtc:		EQU	13h
040000             0065*  mos_setintvector:	EQU	14h
040000             0066*  mos_uopen:		EQU	15h
040000             0067*  mos_uclose:		EQU	16h
040000             0068*  mos_ugetc:		EQU	17h
040000             0069*  mos_uputc:		EQU 	18h
040000             0070*  mos_getfil:		EQU	19h
040000             0071*  mos_fread:		EQU	1Ah
040000             0072*  mos_fwrite:		EQU	1Bh
040000             0073*  mos_flseek:		EQU	1Ch
040000             0074*  mos_setkbvector:	EQU	1Dh
040000             0075*  mos_getkbmap:		EQU	1Eh
040000             0076*  mos_i2c_open:		EQU	1Fh
040000             0077*  mos_i2c_close:		EQU	20h
040000             0078*  mos_i2c_write:		EQU	21h
040000             0079*  mos_i2c_read:		EQU	22h
040000             0080*  
040000             0081*  
040000             0082*  ; FatFS file access functions
040000             0083*  ;
040000             0084*  ffs_fopen:		EQU	80h
040000             0085*  ffs_fclose:		EQU	81h
040000             0086*  ffs_fread:		EQU	82h
040000             0087*  ffs_fwrite:		EQU	83h
040000             0088*  ffs_flseek:		EQU	84h
040000             0089*  ffs_ftruncate:		EQU	85h
040000             0090*  ffs_fsync:		EQU	86h
040000             0091*  ffs_fforward:		EQU	87h
040000             0092*  ffs_fexpand:		EQU	88h
040000             0093*  ffs_fgets:		EQU	89h
040000             0094*  ffs_fputc:		EQU	8Ah
040000             0095*  ffs_fputs:		EQU	8Bh
040000             0096*  ffs_fprintf:		EQU	8Ch
040000             0097*  ffs_ftell:		EQU	8Dh
040000             0098*  ffs_feof:		EQU	8Eh
040000             0099*  ffs_fsize:		EQU	8Fh
040000             0100*  ffs_ferror:		EQU	90h
040000             0101*  
040000             0102*  ; FatFS directory access functions
040000             0103*  ;
040000             0104*  ffs_dopen:		EQU	91h
040000             0105*  ffs_dclose:		EQU	92h
040000             0106*  ffs_dread:		EQU	93h
040000             0107*  ffs_dfindfirst:		EQU	94h
040000             0108*  ffs_dfindnext:		EQU	95h
040000             0109*  
040000             0110*  ; FatFS file and directory management functions
040000             0111*  ;
040000             0112*  ffs_stat:		EQU	96h
040000             0113*  ffs_unlink:		EQU	97h
040000             0114*  ffs_rename:		EQU	98h
040000             0115*  ffs_chmod:		EQU	99h
040000             0116*  ffs_utime:		EQU	9Ah
040000             0117*  ffs_mkdir:		EQU	9Bh
040000             0118*  ffs_chdir:		EQU	9Ch
040000             0119*  ffs_chdrive:		EQU	9Dh
040000             0120*  ffs_getcwd:		EQU	9Eh
040000             0121*  
040000             0122*  ; FatFS volume management and system configuration functions
040000             0123*  ;
040000             0124*  ffs_mount:		EQU	9Fh
040000             0125*  ffs_mkfs:		EQU	A0h
040000             0126*  ffs_fdisk:		EQU	A1h
040000             0127*  ffs_getfree:		EQU	A2h
040000             0128*  ffs_getlabel:		EQU	A3h
040000             0129*  ffs_setlabel:		EQU	A4h
040000             0130*  ffs_setcp:		EQU	A5h
040000             0131*  
040000             0132*  ; File access modes
040000             0133*  ;
040000             0134*  fa_read:		EQU	01h
040000             0135*  fa_write:		EQU	02h
040000             0136*  fa_open_existing:	EQU	00h
040000             0137*  fa_create_new:		EQU	04h
040000             0138*  fa_create_always:	EQU	08h
040000             0139*  fa_open_always:		EQU	10h
040000             0140*  fa_open_append:		EQU	30h
040000             0141*  
040000             0142*  ; System variable indexes for api_sysvars
040000             0143*  ; Index into _sysvars in globals.asm
040000             0144*  ;
040000             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040000             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040000             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040000             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040000             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040000             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040000             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040000             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040000             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040000             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040000             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040000             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040000             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040000             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040000             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040000             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040000             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040000             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040000             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040000             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040000             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040000             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040000             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040000             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040000             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040000             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040000             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040000             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040000             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040000             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040000             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040000             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040000             0177*  
040000             0178*  ; Flags for the VPD protocol
040000             0179*  ;
040000             0180*  vdp_pflag_cursor:	EQU	00000001b
040000             0181*  vdp_pflag_scrchar:	EQU	00000010b
040000             0182*  vdp_pflag_point:	EQU	00000100b
040000             0183*  vdp_pflag_audio:	EQU	00001000b
040000             0184*  vdp_pflag_mode:		EQU	00010000b
040000             0185*  vdp_pflag_rtc:		EQU	00100000b
040000             0186*  vdp_pflag_mouse:	EQU	01000000b
040000             0187*  ; vdp_pflag_buffered:	EQU	10000000b
040000             0188*  
040000             0189*  ;
040000             0190*  ; FatFS structures
040000             0191*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040000             0192*  ;
040000             0193*  ; Object ID and allocation information (FFOBJID)
040000             0194*  ;
040000             0195*  ; FFOBJID	.STRUCT
040000             0196*  ; 	fs:		DS	3	; Pointer to the hosting volume of this object
040000             0197*  ; 	id:		DS	2	; Hosting volume mount ID
040000             0198*  ; 	attr:		DS	1	; Object attribute
040000             0199*  ; 	stat:		DS	1	; Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040000             0200*  ; 	sclust:		DS	4	; Object data start cluster (0:no cluster or root directory)
040000             0201*  ; 	objsize:	DS	4	; Object size (valid when sclust != 0)
040000             0202*  ; FFOBJID_SIZE .ENDSTRUCT FFOBJID
040000             0203*  ; ;
040000             0204*  ; ; File object structure (FIL)
040000             0205*  ; ;
040000             0206*  ; FIL .STRUCT
040000             0207*  ; 	obj:		.TAG	FFOBJID	; Object identifier
040000             0208*  ; 	flag:		DS	1	; File status flags
040000             0209*  ; 	err:		DS	1	; Abort flag (error code)
040000             0210*  ; 	fptr:		DS	4	; File read/write pointer (Zeroed on file open)
040000             0211*  ; 	clust:		DS	4	; Current cluster of fpter (invalid when fptr is 0)
040000             0212*  ; 	sect:		DS	4	; Sector number appearing in buf[] (0:invalid)
040000             0213*  ; 	dir_sect:	DS	4	; Sector number containing the directory entry
040000             0214*  ; 	dir_ptr:	DS	3	; Pointer to the directory entry in the win[]
040000             0215*  ; FIL_SIZE .ENDSTRUCT FIL
040000             0216*  ; ;
040000             0217*  ; ; Directory object structure (DIR)
040000             0218*  ; ;
040000             0219*  ; DIR .STRUCT
040000             0220*  ; 	obj:		.TAG	FFOBJID	; Object identifier
040000             0221*  ; 	dptr:		DS	4	; Current read/write offset
040000             0222*  ; 	clust:		DS	4	; Current cluster
040000             0223*  ; 	sect:		DS	4	; Current sector (0:Read operation has terminated)
040000             0224*  ; 	dir:		DS	3	; Pointer to the directory item in the win[]
040000             0225*  ; 	fn:		DS	12	; SFN (in/out) {body[8],ext[3],status[1]}
040000             0226*  ; 	blk_ofs:	DS	4	; Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040000             0227*  ; DIR_SIZE .ENDSTRUCT DIR
040000             0228*  ; ;
040000             0229*  ; ; File information structure (FILINFO)
040000             0230*  ; ;
040000             0231*  ; FILINFO .STRUCT
040000             0232*  ; 	fsize:		DS 	4	; File size
040000             0233*  ; 	fdate:		DS	2	; Modified date
040000             0234*  ; 	ftime:		DS	2	; Modified time
040000             0235*  ; 	fattrib:	DS	1	; File attribute
040000             0236*  ; 	altname:	DS	13	; Alternative file name
040000             0237*  ; 	fname:		DS	256	; Primary file name
040000             0238*  ; FILINFO_SIZE .ENDSTRUCT FILINFO
040000             0239*  
040000             0240*  ; FFOBJID offsets
040000             0241*  FFOBJID.fs:       EQU 0    ; Pointer to the hosting volume of this object
040000             0242*  FFOBJID.id:       EQU 3    ; Hosting volume mount ID
040000             0243*  FFOBJID.attr:     EQU 5    ; Object attribute
040000             0244*  FFOBJID.stat:     EQU 6    ; Object chain status
040000             0245*  FFOBJID.sclust:   EQU 7    ; Object data start cluster
040000             0246*  FFOBJID.objsize:  EQU 11   ; Object size
040000             0247*  FFOBJID_SIZE:     EQU 15   ; Total size of FFOBJID structure
040000             0248*  
040000             0249*  ; FIL offsets (including FFOBJID fields)
040000             0250*  FIL.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040000             0251*  FIL.flag:         EQU FFOBJID_SIZE       ; File status flags
040000             0252*  FIL.err:          EQU FFOBJID_SIZE + 1   ; Abort flag (error code)
040000             0253*  FIL.fptr:         EQU FFOBJID_SIZE + 2   ; File read/write pointer
040000             0254*  FIL.clust:        EQU FFOBJID_SIZE + 6   ; Current cluster of fptr
040000             0255*  FIL.sect:         EQU FFOBJID_SIZE + 10  ; Sector number appearing in buf[]
040000             0256*  FIL.dir_sect:     EQU FFOBJID_SIZE + 14  ; Sector number containing the directory entry
040000             0257*  FIL.dir_ptr:      EQU FFOBJID_SIZE + 18  ; Pointer to the directory entry in the win[]
040000             0258*  FIL_SIZE:         EQU FFOBJID_SIZE + 21  ; Total size of FIL structure
040000             0259*  
040000             0260*  ; DIR offsets (including FFOBJID fields)
040000             0261*  DIR.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040000             0262*  DIR.dptr:         EQU FFOBJID_SIZE       ; Current read/write offset
040000             0263*  DIR.clust:        EQU FFOBJID_SIZE + 4   ; Current cluster
040000             0264*  DIR.sect:         EQU FFOBJID_SIZE + 8   ; Current sector
040000             0265*  DIR.dir:          EQU FFOBJID_SIZE + 12  ; Pointer to the directory item in the win[]
040000             0266*  DIR.fn:           EQU FFOBJID_SIZE + 15  ; SFN (in/out) {body[8],ext[3],status[1]}
040000             0267*  DIR.blk_ofs:      EQU FFOBJID_SIZE + 27  ; Offset of current entry block being processed
040000             0268*  DIR_SIZE:         EQU FFOBJID_SIZE + 31  ; Total size of DIR structure
040000             0269*  
040000             0270*  ; FILINFO offsets
040000             0271*  FILINFO.fsize:    EQU 0    ; File size
040000             0272*  FILINFO.fdate:    EQU 4    ; Modified date
040000             0273*  FILINFO.ftime:    EQU 6    ; Modified time
040000             0274*  FILINFO.fattrib:  EQU 8    ; File attribute
040000             0275*  FILINFO.altname:  EQU 9    ; Alternative file name
040000             0276*  FILINFO.fname:    EQU 22   ; Primary file name
040000             0277*  FILINFO_SIZE:     EQU 278  ; Total size of FILINFO structure
040000             0278*  
040000             0279*  ;
040000             0280*  ; Macro for calling the API
040000             0281*  ; Parameters:
040000             0282*  ; - function: One of the function numbers listed above
040000             0283*  ;
040000             0284*  			MACRO MOSCALL	function
040000             0285*  			LD	A, function
040000             0286*  			RST.LIS	08h
040000             0287*  			ENDMACRO
040000             0002       include "fpp/macros.inc"
040000             0001*  	; Title:	BBC Basic Interpreter - Z80 version
040000             0002*  	;		Useful macros
040000             0003*  	; Author:	Dean Belfield
040000             0004*  	; Created:	12/05/2023
040000             0005*  	; Last Updated:	11/06/2023
040000             0006*  	;
040000             0007*  	; Modinfo:
040000             0008*  	; 11/06/2023:	Modified to run in ADL mode
040000             0009*  	; 11/06/2024:   Make compatible with ez80asm by Brandon R. Gates
040000             0010*  
040000             0011*  	MACRO EXREG	rp1, rp2
040000             0012*  		PUSH	rp1
040000             0013*  		POP	rp2
040000             0014*  	ENDMACRO
040000             0015*  
040000             0016*  	; MACRO ADD8U_DE	reg
040000             0017*  		MACRO ADD8U_DE
040000             0018*  		ADD	A, E
040000             0019*  		LD	E, A
040000             0020*  		ADC	A, D
040000             0021*  		SUB	E
040000             0022*  		LD	D, A
040000             0023*  	ENDMACRO
040000             0024*  
040000             0025*  	; MACRO ADD8U_HL	reg
040000             0026*  	MACRO ADD8U_HL
040000             0027*  		ADD	A, L
040000             0028*  		LD	L, A
040000             0029*  		ADC	A, H
040000             0030*  		SUB	L
040000             0031*  		LD	H, A
040000             0032*  	ENDMACRO
040000             0033*  
040000             0034*  	MACRO VDU	val
040000             0035*  		LD	A, val
040000             0036*  		CALL	OSWRCH
040000             0037*  	ENDMACRO
040000             0038*  
040000             0039*  	MACRO SET_GPIO	reg, val
040000             0040*  		IN0	A, (reg)
040000             0041*  		OR	val
040000             0042*  		OUT0	(reg), A
040000             0043*  	ENDMACRO
040000             0044*  
040000             0045*  	MACRO RES_GPIO	reg, val
040000             0046*  		PUSH	BC
040000             0047*  		LD	A, val
040000             0048*  		CPL
040000             0049*  		LD	C, A
040000             0050*  		IN0	A, (reg)
040000             0051*  		AND	C
040000             0052*  		OUT0	(reg), A
040000             0053*  		POP	BC
040000             0054*  	ENDMACRO
040000             0003       include "fpp/equs.inc"
040000             0001*  ;
040000             0002*  ; Title:	BBC Basic for AGON - Equs
040000             0003*  ; Author:	Dean Belfield
040000             0004*  ; Created:	12/05/2023
040000             0005*  ; Last Updated:	08/06/2023
040000             0006*  ;
040000             0007*  ; Modinfo:
040000             0008*  ; 08/06/2023:	Added SIZEW
040000             0009*  
040000             0010*  			; XREF		STAVAR
040000             0011*  			; XREF		ACCS
040000             0012*  
040000             0013*  RAM_Top:		EQU		0B0000h	; Initial value of HIMEM
040000             0014*  ;Stack_Top:		EQU		0000h	; Stack at top
040000             0015*  SIZEW:			EQU		3	; Size of a word (3 for ADL mode)
040000             0016*  
040000             0017*  ; For GPIO
040000             0018*  ; PA not available on eZ80L92
040000             0019*  ;
040000             0020*  PA_DR:			EQU		96h
040000             0021*  PA_DDR:			EQU		97h
040000             0022*  PA_ALT1:		EQU		98h
040000             0023*  PA_ALT2:		EQU		99h
040000             0024*  PB_DR:          	EQU		9Ah
040000             0025*  PB_DDR:        	 	EQU		9Bh
040000             0026*  PB_ALT1:        	EQU		9Ch
040000             0027*  PB_ALT2:        	EQU		9Dh
040000             0028*  PC_DR:          	EQU		9Eh
040000             0029*  PC_DDR:         	EQU		9Fh
040000             0030*  PC_ALT1:        	EQU		A0h
040000             0031*  PC_ALT2:        	EQU		A1h
040000             0032*  PD_DR:          	EQU		A2h
040000             0033*  PD_DDR:			EQU		A3h
040000             0034*  PD_ALT1:		EQU		A4h
040000             0035*  PD_ALT2:		EQU		A5h
040000             0036*  
040000             0037*  GPIOMODE_OUT:		EQU		0	; Output
040000             0038*  GPIOMODE_IN:		EQU		1	; Input
040000             0039*  GPIOMODE_DIO:		EQU		2	; Open Drain IO
040000             0040*  GPIOMODE_SIO:		EQU		3	; Open Source IO
040000             0041*  GPIOMODE_INTD:		EQU		4	; Interrupt, Dual Edge
040000             0042*  GPIOMODE_ALTF:		EQU		5;	; Alt Function
040000             0043*  GPIOMODE_INTAL:		EQU		6	; Interrupt, Active Low
040000             0044*  GPIOMODE_INTAH:		EQU		7	; Interrupt, Active High
040000             0045*  GPIOMODE_INTFE:		EQU		8	; Interrupt, Falling Edge
040000             0046*  GPIOMODE_INTRE:		EQU		9	; Interrupt, Rising Edge
040000             0047*  
040000             0048*  ; ; Originally in ram.asm
040000             0049*  ; ;
040000             0050*  ; OC:			EQU     STAVAR+15*4     ; CODE ORIGIN (O%)
040000             0051*  ; PC:			EQU     STAVAR+16*4     ; PROGRAM COUNTER (P%)
040000             0052*  ; VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands
040000             0053*  
040000             0054*  ; Originally in main.asm
040000             0055*  ;
040000             0056*  CR:			EQU     0DH
040000             0057*  LF:			EQU     0AH
040000             0058*  ESC:			EQU     1BH
040000             0004       include "fpp/eval.asm"
040000             0001*  ;
040000             0002*  ; Title:	BBC Basic Interpreter - Z80 version
040000             0003*  ;		Expression Evaluation & Arithmetic Module - "EVAL"
040000             0004*  ; Author:	(C) Copyright  R.T.Russell  1984
040000             0005*  ; Modified By:	Dean Belfield
040000             0006*  ; Created:	12/05/2023
040000             0007*  ; Last Updated:	17/08/2023
040000             0008*  ;
040000             0009*  ; Modinfo:
040000             0010*  ; 07/06/2023:	Modified to run in ADL mode
040000             0011*  ; 26/06/2023:	Fixed HEX and HEXSTR
040000             0012*  ; 13/08/2023:	Added INKEY(-n) support (requires MOS 1.04)
040000             0013*  ; 17/08/2023:	Added binary constants
040000             0014*  
040000             0015*  			; .ASSUME	ADL = 1
040000             0016*  
040000             0017*  			; INCLUDE	"equs.inc"
040000             0018*  			; INCLUDE "macros.inc"
040000             0019*  			; INCLUDE "mos_api.inc"	; In MOS/src
040000             0020*  
040000             0021*  			; SEGMENT CODE
040000             0022*  
040000             0023*  			; XDEF	EXPR
040000             0024*  			; XDEF	EXPRN
040000             0025*  			; XDEF	EXPRI
040000             0026*  			; XDEF	EXPRS
040000             0027*  			; XDEF	ITEMI
040000             0028*  			; XDEF	LOADN
040000             0029*  			; XDEF	LOAD4
040000             0030*  			; XDEF	CONS
040000             0031*  			; XDEF	LOADS
040000             0032*  			; XDEF	SFIX
040000             0033*  			; XDEF	VAL0
040000             0034*  			; XDEF	SEARCH
040000             0035*  			; XDEF	SWAP
040000             0036*  			; XDEF	TEST
040000             0037*  			; XDEF	DECODE
040000             0038*  			; XDEF	HEXSTR
040000             0039*  			; XDEF	STR
040000             0040*  			; XDEF	ZERO
040000             0041*  			; XDEF	PUSHS
040000             0042*  			; XDEF	POPS
040000             0043*  			; XDEF	COMMA
040000             0044*  			; XDEF	BRAKET
040000             0045*  			; XDEF	NXT
040000             0046*  			; XDEF	COUNT0
040000             0047*  
040000             0048*  			; XREF	ADVAL
040000             0049*  			; XREF	FN_EX
040000             0050*  			; XREF	POINT
040000             0051*  			; XREF	USR
040000             0052*  			; XREF	SYNTAX
040000             0053*  			; XREF	ERROR_
040000             0054*  			; XREF	CHECK
040000             0055*  			; XREF	GETVAR
040000             0056*  			; XREF	LISTON
040000             0057*  			; XREF	RANGE
040000             0058*  			; XREF	FPP
040000             0059*  			; XREF	GETCSR
040000             0060*  			; XREF	CHANEL
040000             0061*  			; XREF	OSSTAT
040000             0062*  			; XREF	OSBGET
040000             0063*  			; XREF	LOMEM
040000             0064*  			; XREF	HIMEM
040000             0065*  			; XREF	PAGE_
040000             0066*  			; XREF	TOP
040000             0067*  			; XREF	ERL
040000             0068*  			; XREF	ERR
040000             0069*  			; XREF	COUNT
040000             0070*  			; XREF	OSOPEN
040000             0071*  			; XREF	GETEXT
040000             0072*  			; XREF	GETPTR
040000             0073*  			; XREF	GETIME
040000             0074*  			; XREF	GETIMS
040000             0075*  			; XREF	LEXAN2
040000             0076*  			; XREF	RANDOM
040000             0077*  			; XREF	STORE5
040000             0078*  			; XREF	GETSCHR
040000             0079*  			; XREF	OSRDCH
040000             0080*  			; XREF	OSKEY
040000             0081*  			; XREF	INKEY1
040000             0082*  			; XREF	EXTERR
040000             0083*  ;
040000             0084*  ; BINARY FLOATING POINT REPRESENTATION:
040000             0085*  ;    32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
040000             0086*  ;     8 BIT EXCESS-128 SIGNED EXPONENT
040000             0087*  ;    SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
040000             0088*  ;    MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
040000             0089*  ;
040000             0090*  ; BINARY INTEGER REPRESENTATION:
040000             0091*  ;    32 BIT 2'S-COMPLEMENT SIGNED INTEGER
040000             0092*  ;     "EXPONENT" BYTE = 0 (WHEN PRESENT)
040000             0093*  ;
040000             0094*  ; NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
040000             0095*  ;                             EXPONENT - C
040000             0096*  ;
040000             0097*  
040000             0098*  ;
040000             0099*  ; Table of addresses for functions
040000             0100*  ;
040000             0101*  FUNTOK:			EQU	8DH			; First token number
040000             0102*  ;
040000 DC 07 04    0103*  FUNTBL:			DW24	DECODE			; Line number
040003 8A 04 04    0104*  			DW24	OPENIN			; OPENIN
040006 AC 04 04    0105*  			DW24	PTR_EV			; PTR
040009 46 04 04    0106*  			DW24	PAGEV			; PAGE
04000C B6 04 04    0107*  			DW24	TIMEV			; TIME
04000F 32 04 04    0108*  			DW24	LOMEMV			; LOMEM
040012 3C 04 04    0109*  			DW24	HIMEMV			; HIMEM
040015 0A 05 04    0110*  			DW24	ABSV			; ABS
040018 46 05 04    0111*  			DW24	ACS			; ACS
04001B 45 2D 04    0112*  			DW24	ADVAL			; ADVAL
04001E 1B 04 04    0113*  			DW24	ASC			; ASC
040021 3E 05 04    0114*  			DW24	ASN			; ASN
040024 42 05 04    0115*  			DW24	ATN			; ATN
040027 E4 03 04    0116*  			DW24	BGET			; BGET
04002A 2A 05 04    0117*  			DW24	COS			; COS
04002D 71 04 04    0118*  			DW24	COUNTV			; COUNT
040030 12 05 04    0119*  			DW24	DEG			; DEG
040033 65 04 04    0120*  			DW24	ERLV			; ERL
040036 6B 04 04    0121*  			DW24	ERRV			; ERR
040039 6F 05 04    0122*  			DW24	EVAL_			; EVAL
04003C 32 05 04    0123*  			DW24	EXP			; EXP
04003F A2 04 04    0124*  			DW24	EXT			; EXT
040042 89 08 04    0125*  			DW24	ZERO			; FALSE
040045 75 0F 04    0126*  			DW24	FN_EX			; FN
040048 02 04 04    0127*  			DW24	GET			; GET
04004B F1 03 04    0128*  			DW24	INKEY			; INKEY
04004E 21 06 04    0129*  			DW24	INSTR			; INSTR(
040051 1E 05 04    0130*  			DW24	INT_			; INT
040054 2B 04 04    0131*  			DW24	LEN			; LEN
040057 36 05 04    0132*  			DW24	LN			; LN
04005A 3A 05 04    0133*  			DW24	LOG			; LOG
04005D 0E 05 04    0134*  			DW24	NOTK			; NOT
040060 86 04 04    0135*  			DW24	OPENUP			; OPENUP
040063 83 04 04    0136*  			DW24	OPENOT			; OPENOUT
040066 06 05 04    0137*  			DW24	PI			; PI
040069 00 00 00    0138*  			DW24	POINT			; POINT(
