PC     Output      Line
040000             0001   ;
040000             0002   ; Title:	test
040000             0003   ; Author:	Brandon Gates
040000             0004   ; Created:	29/10/2024
040000             0005   
040000             0006       ASSUME	ADL = 1
040000             0007       INCLUDE "mos_api.inc"
040000             0001*  ;
040000             0002*  ; Title:	AGON MOS - API for user projects
040000             0003*  ; Author:	Dean Belfield
040000             0004*  ; Created:	03/08/2022
040000             0005*  ; Last Updated:	11/11/2023
040000             0006*  ;
040000             0007*  ; Modinfo:
040000             0008*  ; 05/08/2022:	Added mos_feof
040000             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040000             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040000             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040000             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040000             0013*  ; 13/10/2022:	Added mos_oscli
040000             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040000             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040000             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040000             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040000             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040000             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040000             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040000             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040000             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040000             0023*  ; 19/05/2023:	Added sysvar_scrMode
040000             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040000             0025*  ; 03/08/2023:	Added mos_setkbvector
040000             0026*  ; 10/08/2023:	Added mos_getkbmap
040000             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040000             0028*  ; 09/04/2024:   Adapter to ez80asm
040000             0029*  ; VDP control (VDU 23, 0, n)
040000             0030*  ;
040000             0031*  vdp_gp:			EQU 	80h
040000             0032*  vdp_keycode:		EQU 	81h
040000             0033*  vdp_cursor:		EQU	82h
040000             0034*  vdp_scrchar:		EQU	83h
040000             0035*  vdp_scrpixel:		EQU	84h
040000             0036*  vdp_audio:		EQU	85h
040000             0037*  vdp_mode:		EQU	86h
040000             0038*  vdp_rtc:		EQU	87h
040000             0039*  vdp_keystate:		EQU	88h
040000             0040*  vdp_logicalcoords:	EQU	C0h
040000             0041*  vdp_terminalmode:	EQU	FFh
040000             0042*  
040000             0043*  ; MOS high level functions
040000             0044*  ;
040000             0045*  mos_getkey:		EQU	00h
040000             0046*  mos_load:		EQU	01h
040000             0047*  mos_save:		EQU	02h
040000             0048*  mos_cd:			EQU	03h
040000             0049*  mos_dir:		EQU	04h
040000             0050*  mos_del:		EQU	05h
040000             0051*  mos_ren:		EQU	06h
040000             0052*  mos_mkdir:		EQU	07h
040000             0053*  mos_sysvars:		EQU	08h
040000             0054*  mos_editline:		EQU	09h
040000             0055*  mos_fopen:		EQU	0Ah
040000             0056*  mos_fclose:		EQU	0Bh
040000             0057*  mos_fgetc:		EQU	0Ch
040000             0058*  mos_fputc:		EQU	0Dh
040000             0059*  mos_feof:		EQU	0Eh
040000             0060*  mos_getError:		EQU	0Fh
040000             0061*  mos_oscli:		EQU	10h
040000             0062*  mos_copy:		EQU	11h
040000             0063*  mos_getrtc:		EQU	12h
040000             0064*  mos_setrtc:		EQU	13h
040000             0065*  mos_setintvector:	EQU	14h
040000             0066*  mos_uopen:		EQU	15h
040000             0067*  mos_uclose:		EQU	16h
040000             0068*  mos_ugetc:		EQU	17h
040000             0069*  mos_uputc:		EQU 	18h
040000             0070*  mos_getfil:		EQU	19h
040000             0071*  mos_fread:		EQU	1Ah
040000             0072*  mos_fwrite:		EQU	1Bh
040000             0073*  mos_flseek:		EQU	1Ch
040000             0074*  mos_setkbvector:	EQU	1Dh
040000             0075*  mos_getkbmap:		EQU	1Eh
040000             0076*  mos_i2c_open:		EQU	1Fh
040000             0077*  mos_i2c_close:		EQU	20h
040000             0078*  mos_i2c_write:		EQU	21h
040000             0079*  mos_i2c_read:		EQU	22h
040000             0080*  
040000             0081*  
040000             0082*  ; FatFS file access functions
040000             0083*  ;
040000             0084*  ffs_fopen:		EQU	80h
040000             0085*  ffs_fclose:		EQU	81h
040000             0086*  ffs_fread:		EQU	82h
040000             0087*  ffs_fwrite:		EQU	83h
040000             0088*  ffs_flseek:		EQU	84h
040000             0089*  ffs_ftruncate:		EQU	85h
040000             0090*  ffs_fsync:		EQU	86h
040000             0091*  ffs_fforward:		EQU	87h
040000             0092*  ffs_fexpand:		EQU	88h
040000             0093*  ffs_fgets:		EQU	89h
040000             0094*  ffs_fputc:		EQU	8Ah
040000             0095*  ffs_fputs:		EQU	8Bh
040000             0096*  ffs_fprintf:		EQU	8Ch
040000             0097*  ffs_ftell:		EQU	8Dh
040000             0098*  ffs_feof:		EQU	8Eh
040000             0099*  ffs_fsize:		EQU	8Fh
040000             0100*  ffs_ferror:		EQU	90h
040000             0101*  
040000             0102*  ; FatFS directory access functions
040000             0103*  ;
040000             0104*  ffs_dopen:		EQU	91h
040000             0105*  ffs_dclose:		EQU	92h
040000             0106*  ffs_dread:		EQU	93h
040000             0107*  ffs_dfindfirst:		EQU	94h
040000             0108*  ffs_dfindnext:		EQU	95h
040000             0109*  
040000             0110*  ; FatFS file and directory management functions
040000             0111*  ;
040000             0112*  ffs_stat:		EQU	96h
040000             0113*  ffs_unlink:		EQU	97h
040000             0114*  ffs_rename:		EQU	98h
040000             0115*  ffs_chmod:		EQU	99h
040000             0116*  ffs_utime:		EQU	9Ah
040000             0117*  ffs_mkdir:		EQU	9Bh
040000             0118*  ffs_chdir:		EQU	9Ch
040000             0119*  ffs_chdrive:		EQU	9Dh
040000             0120*  ffs_getcwd:		EQU	9Eh
040000             0121*  
040000             0122*  ; FatFS volume management and system configuration functions
040000             0123*  ;
040000             0124*  ffs_mount:		EQU	9Fh
040000             0125*  ffs_mkfs:		EQU	A0h
040000             0126*  ffs_fdisk:		EQU	A1h
040000             0127*  ffs_getfree:		EQU	A2h
040000             0128*  ffs_getlabel:		EQU	A3h
040000             0129*  ffs_setlabel:		EQU	A4h
040000             0130*  ffs_setcp:		EQU	A5h
040000             0131*  
040000             0132*  ; File access modes
040000             0133*  ;
040000             0134*  fa_read:		EQU	01h
040000             0135*  fa_write:		EQU	02h
040000             0136*  fa_open_existing:	EQU	00h
040000             0137*  fa_create_new:		EQU	04h
040000             0138*  fa_create_always:	EQU	08h
040000             0139*  fa_open_always:		EQU	10h
040000             0140*  fa_open_append:		EQU	30h
040000             0141*  
040000             0142*  ; System variable indexes for api_sysvars
040000             0143*  ; Index into _sysvars in globals.asm
040000             0144*  ;
040000             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040000             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040000             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040000             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040000             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040000             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040000             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040000             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040000             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040000             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040000             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040000             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040000             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040000             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040000             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040000             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040000             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040000             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040000             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040000             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040000             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040000             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040000             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040000             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040000             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040000             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040000             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040000             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040000             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040000             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040000             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040000             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040000             0177*  
040000             0178*  ; Flags for the VPD protocol
040000             0179*  ;
040000             0180*  vdp_pflag_cursor:	EQU	00000001b
040000             0181*  vdp_pflag_scrchar:	EQU	00000010b
040000             0182*  vdp_pflag_point:	EQU	00000100b
040000             0183*  vdp_pflag_audio:	EQU	00001000b
040000             0184*  vdp_pflag_mode:		EQU	00010000b
040000             0185*  vdp_pflag_rtc:		EQU	00100000b
040000             0186*  vdp_pflag_mouse:	EQU	01000000b
040000             0187*  ; vdp_pflag_buffered:	EQU	10000000b
040000             0188*  
040000             0189*  ;
040000             0190*  ; FatFS structures
040000             0191*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040000             0192*  ;
040000             0193*  ; Object ID and allocation information (FFOBJID)
040000             0194*  ;
040000             0195*  ;FFOBJID	.STRUCT
040000             0196*  ;	fs:		DS	3	; Pointer to the hosting volume of this object
040000             0197*  ;	id:		DS	2	; Hosting volume mount ID
040000             0198*  ;	attr:		DS	1	; Object attribute;
040000             0199*  ;	stat:		DS	1	; Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040000             0200*  ;	sclust:		DS	4	; Object data start cluster (0:no cluster or root directory)
040000             0201*  ;	objsize:	DS	4	; Object size (valid when sclust != 0)
040000             0202*  ;FFOBJID_SIZE .ENDSTRUCT FFOBJID
040000             0203*  ;
040000             0204*  ; File object structure (FIL)
040000             0205*  ;
040000             0206*  ;FIL .STRUCT
040000             0207*  ;	obj:		.TAG	FFOBJID	; Object identifier
040000             0208*  ;	flag:		DS	1	; File status flags
040000             0209*  ;	err:		DS	1	; Abort flag (error code)
040000             0210*  ;	fptr:		DS	4	; File read/write pointer (Zeroed on file open)
040000             0211*  ;	clust:		DS	4	; Current cluster of fpter (invalid when fptr is 0)
040000             0212*  ;	sect:		DS	4	; Sector number appearing in buf[] (0:invalid)
040000             0213*  ;	dir_sect:	DS	4	; Sector number containing the directory entry
040000             0214*  ;	dir_ptr:	DS	3	; Pointer to the directory entry in the win[]
040000             0215*  ;FIL_SIZE .ENDSTRUCT FIL
040000             0216*  ;
040000             0217*  ; Directory object structure (DIR)
040000             0218*  ;
040000             0219*  ;DIR .STRUCT
040000             0220*  ;	obj:		.TAG	FFOBJID	; Object identifier;
040000             0221*  ;	dptr:		DS	4	; Current read/write offset
040000             0222*  ;	clust:		DS	4	; Current cluster
040000             0223*  ;	sect:		DS	4	; Current sector (0:Read operation has terminated)
040000             0224*  ;	dir:		DS	3	; Pointer to the directory item in the win[]
040000             0225*  ;	fn:		DS	12	; SFN (in/out) {body[8],ext[3],status[1]}
040000             0226*  ;	blk_ofs:	DS	4	; Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040000             0227*  ;DIR_SIZE .ENDSTRUCT DIR
040000             0228*  ;
040000             0229*  ; File information structure (FILINFO)
040000             0230*  ;
040000             0231*  ;FILINFO .STRUCT
040000             0232*  ;	fsize:		DS 	4	; File size
040000             0233*  ;	fdate:		DS	2	; Modified date;
040000             0234*  ;	ftime:		DS	2	; Modified time
040000             0235*  ;	fattrib:	DS	1	; File attribute
040000             0236*  ;	altname:	DS	13	; Alternative file name
040000             0237*  ;	fname:		DS	256	; Primary file name
040000             0238*  ;FILINFO_SIZE .ENDSTRUCT FILINFO
040000             0239*  
040000             0240*  ;
040000             0241*  ; Macro for calling the API
040000             0242*  ; Parameters:
040000             0243*  ; - function: One of the function numbers listed above
040000             0244*  ;
040000             0245*  			MACRO	MOSCALL function
040000             0246*  			LD	A, function
040000             0247*  			RST.L	08h
040000             0248*  			ENDMACRO
040000             0008       ORG 0x0B0000 ; Is a moslet
0B0000             0009   
0B0000             0010       MACRO PROGNAME
0B0000             0011       ASCIZ "calc.bin"
0B0000             0012       ENDMACRO
0B0000             0013   
0B0000             0014   ; STANDARD MOSLET INCLUDES
0B0000             0015       include "init.inc"
0B0000             0001*  ;
0B0000             0002*  ; Title:	Copy - Initialisation Code
0B0000             0003*  ; Author:	Dean Belfield, Lennart Benschop
0B0000             0004*  ; Created:	06/11/2022
0B0000             0005*  ; Last Updated:	26/12/2022
0B0000             0006*  ;
0B0000             0007*  ; Modinfo:
0B0000             0008*  ; 17/12/2022:	Added parameter processing
0B0000             0009*  ; 26/12/2022:   Adapted to Copy program, use LEA instead of 3x INC IX, Save/restore MB
0B0000             0010*  ; Changed:      08/04/2924 adapt to ez80asm
0B0000             0011*  
0B0000             0012*  
0B0000             0013*  argv_ptrs_max:		EQU	16			; Maximum number of arguments allowed in argv
0B0000             0014*  
0B0000             0015*  ;
0B0000             0016*  ; Start in ADL mode
0B0000             0017*  ;
0B0000 C3 45 00 0B 0018*  			JP	_start			; Jump to start
0B0004             0019*  ;
0B0004             0020*  ; The header stuff is from byte 64 onwards
0B0004             0021*  ;
0B0004             0022*  
0B0004             0023*  _exec_name:
0B0004             0024*  			PROGNAME			; The executable name, only used in argv
0B0004 63 61 6C 63 0001*M     ASCIZ "calc.bin"
       2E 62 69 6E 
       00          
0B000D             0025*  
0B000D FF FF FF FF 0026*  			ALIGN	64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
0B0040             0027*  
0B0040 4D 4F 53    0028*  			DB	"MOS"			; Flag for MOS - to confirm this is a valid MOS command
0B0043 00          0029*  			DB	00h			; MOS header version 0
0B0044 01          0030*  			DB	01h			; Flag for run mode (0: Z80, 1: ADL)
0B0045             0031*  ;
0B0045             0032*  ; And the code follows on immediately after the header
0B0045             0033*  ;
0B0045 F5          0034*  _start:			PUSH	AF			; Preserve the registers
0B0046 C5          0035*  			PUSH	BC
0B0047 D5          0036*  			PUSH	DE
0B0048 DD E5       0037*  			PUSH	IX
0B004A FD E5       0038*  			PUSH	IY
0B004C ED 6E       0039*  			LD	A, MB			; Save MB
0B004E F5          0040*  			PUSH 	AF
0B004F AF          0041*  			XOR 	A
0B0050 ED 6D       0042*  			LD 	MB, A                   ; Clear to zero so MOS API calls know how to use 24-bit addresses.
0B0052             0043*  
0B0052 DD 21 B9 00 0044*  			LD	IX, argv_ptrs		; The argv array pointer address
       0B          
0B0057 DD E5       0045*  			PUSH	IX
0B0059 CD 70 00 0B 0046*  			CALL	_parse_params		; Parse the parameters
0B005D DD E1       0047*  			POP	IX			; IX: argv
0B005F 06 00       0048*  			LD	B, 0			;  C: argc
0B0061 CD 4D 25 0B 0049*  			CALL	_main			; Start user code
0B0065             0050*  
0B0065 F1          0051*  			POP 	AF
0B0066 ED 6D       0052*  			LD	MB, A
0B0068 FD E1       0053*  			POP	IY			; Restore registers
0B006A DD E1       0054*  			POP	IX
0B006C D1          0055*  			POP	DE
0B006D C1          0056*  			POP	BC
0B006E F1          0057*  			POP	AF
0B006F C9          0058*  			RET
0B0070             0059*  
0B0070             0060*  ; Parse the parameter string into a C array
0B0070             0061*  ; Parameters
0B0070             0062*  ; - HL: Address of parameter string
0B0070             0063*  ; - IX: Address for array pointer storage
0B0070             0064*  ; Returns:
0B0070             0065*  ; -  C: Number of parameters parsed
0B0070             0066*  ;
0B0070 01 04 00 0B 0067*  _parse_params:		LD	BC, _exec_name
0B0074 DD 0F 00    0068*  			LD	(IX+0), BC		; ARGV[0] = the executable name
0B0077 ED 32 03    0069*  			LEA     IX, IX+3
0B007A CD B2 00 0B 0070*  			CALL	_skip_spaces		; Skip HL past any leading spaces
0B007E             0071*  ;
0B007E 01 01 00 00 0072*  			LD	BC, 1			; C: ARGC = 1 - also clears out top 16 bits of BCU
0B0082 06 0F       0073*  			LD	B, argv_ptrs_max - 1	; B: Maximum number of argv_ptrs
0B0084             0074*  ;
0B0084             0075*  _parse_params_1:
0B0084 C5          0076*  			PUSH	BC			; Stack ARGC
0B0085 E5          0077*  			PUSH	HL			; Stack start address of token
0B0086 CD A3 00 0B 0078*  			CALL	_get_token		; Get the next token
0B008A 79          0079*  			LD	A, C			; A: Length of the token in characters
0B008B D1          0080*  			POP	DE			; Start address of token (was in HL)
0B008C C1          0081*  			POP	BC			; ARGC
0B008D B7          0082*  			OR	A			; Check for A=0 (no token found) OR at end of string
0B008E C8          0083*  			RET	Z
0B008F             0084*  ;
0B008F DD 1F 00    0085*  			LD	(IX+0), DE		; Store the pointer to the token
0B0092 E5          0086*  			PUSH	HL			; DE=HL
0B0093 D1          0087*  			POP	DE
0B0094 CD B2 00 0B 0088*  			CALL	_skip_spaces		; And skip HL past any spaces onto the next character
0B0098 AF          0089*  			XOR	A
0B0099 12          0090*  			LD	(DE), A			; Zero-terminate the token
0B009A ED 32 03    0091*  			LEA  	IX, IX+3			; Advance to next pointer position
0B009D 0C          0092*  			INC	C			; Increment ARGC
0B009E 79          0093*  			LD	A, C			; Check for C >= A
0B009F B8          0094*  			CP	B
0B00A0 38 E2       0095*  			JR	C, _parse_params_1	; And loop
0B00A2 C9          0096*  			RET
0B00A3             0097*  
0B00A3             0098*  ; Get the next token
0B00A3             0099*  ; Parameters:
0B00A3             0100*  ; - HL: Address of parameter string
0B00A3             0101*  ; Returns:
0B00A3             0102*  ; - HL: Address of first character after token
0B00A3             0103*  ; -  C: Length of token (in characters)
0B00A3             0104*  ;
0B00A3 0E 00       0105*  _get_token:		LD	C, 0			; Initialise length
0B00A5 7E          0106*  @@:			LD	A, (HL)			; Get the character from the parameter string
0B00A6 B7          0107*  			OR	A			; Exit if 0 (end of parameter string in MOS)
0B00A7 C8          0108*  			RET 	Z
0B00A8 FE 0D       0109*  			CP	13			; Exit if CR (end of parameter string in BBC BASIC)
0B00AA C8          0110*  			RET	Z
0B00AB FE 20       0111*  			CP	' '			; Exit if space (end of token)
0B00AD C8          0112*  			RET	Z
0B00AE 23          0113*  			INC	HL			; Advance to next character
0B00AF 0C          0114*  			INC 	C			; Increment length
0B00B0 18 F3       0115*  			JR	@B
0B00B2             0116*  
0B00B2             0117*  ; Skip spaces in the parameter string
0B00B2             0118*  ; Parameters:
0B00B2             0119*  ; - HL: Address of parameter string
0B00B2             0120*  ; Returns:
0B00B2             0121*  ; - HL: Address of next none-space character
0B00B2             0122*  ;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
0B00B2             0123*  ;
0B00B2 7E          0124*  _skip_spaces:		LD	A, (HL)			; Get the character from the parameter string
0B00B3 FE 20       0125*  			CP	' '			; Exit if not space
0B00B5 C0          0126*  			RET	NZ
0B00B6 23          0127*  			INC	HL			; Advance to next character
0B00B7 18 F9       0128*  			JR	_skip_spaces		; Increment length
0B00B9             0129*  
0B00B9             0130*  ; Storage for the argv array pointers
0B00B9             0131*  ;
0B00B9 00 00 00 00 0132*  argv_ptrs:		BLKP	argv_ptrs_max, 0
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0B00E9             0016       include "parse.inc"
0B00E9             0001*  ;
0B00E9             0002*  ; Title:	Number Parsing Functions
0B00E9             0003*  ; Author:	Dean Belfield
0B00E9             0004*  ; Created:	15/11/2022
0B00E9             0005*  ; Last Updated:	15/11/2022
0B00E9             0006*  ; Last Updated: 29/12/2022 Lennart Benchop adapt for 24-bit mode.
0B00E9             0007*  ; Modinfo:
0B00E9             0008*  ; 2024/04/08    Adapt for ez80asm
0B00E9             0009*  
0B00E9             0010*  ; Read a number and convert to binary
0B00E9             0011*  ; If prefixed with &, will read as hex, otherwise decimal
0B00E9             0012*  ;   Inputs: HL: Pointer in string buffer
0B00E9             0013*  ;  Outputs: HL: Updated text pointer
0B00E9             0014*  ;           DE: Value
0B00E9             0015*  ;            A: Terminator (spaces skipped)
0B00E9             0016*  ;            F: Carry set if valid number, otherwise reset
0B00E9             0017*  ; Destroys: A,D,E,H,L,F
0B00E9             0018*  ;
0B00E9 11 00 00 00 0019*  ASC_TO_NUMBER:		LD		DE, 0			; Initialise DE
0B00ED CD B2 00 0B 0020*  			CALL		_skip_spaces		; Skip whitespace
0B00F1 7E          0021*  			LD		A, (HL)			; Read first character
0B00F2 B7          0022*  			OR		A			; Check for end of string
0B00F3 C8          0023*  			RET		Z			; Return with no carry if not
0B00F4 C5          0024*  			PUSH		BC			; Preserve BC
0B00F5 FE 26       0025*  			CP		'&'			; Is it prefixed with '&' (HEX number)?
0B00F7 20 23       0026*  			JR		NZ, ASC_TO_NUMBER3	; Jump to decimal parser if not
0B00F9 23          0027*  			INC		HL			; Otherwise fall through to ASC_TO_HEX
0B00FA             0028*  ;
0B00FA 7E          0029*  ASC_TO_NUMBER1:		LD		A, (HL)			; Fetch the character
0B00FB CD 3D 01 0B 0030*  			CALL   	 	UPPRC			; Convert to uppercase
0B00FF D6 30       0031*  			SUB		'0'			; Normalise to 0
0B0101 38 37       0032*  			JR 		C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0B0103 FE 0A       0033*  			CP 		10			; Check if >= 10
0B0105 38 06       0034*  			JR 		C, ASC_TO_NUMBER2	; No, so skip next bit
0B0107 D6 07       0035*  			SUB 		7			; Adjust ASCII A-F to nibble
0B0109 FE 10       0036*  			CP 		16			; Check for > F
0B010B 30 2D       0037*  			JR 		NC, ASC_TO_NUMBER4	; Return if out of range
0B010D             0038*  ;
0B010D E5          0039*  ASC_TO_NUMBER2:		PUSH		HL			; Stack HL
0B010E D5          0040*  			PUSH		DE			; LD HL, DE
0B010F E1          0041*  			POP		HL
0B0110 29          0042*  			ADD		HL, HL
0B0111 29          0043*  			ADD		HL, HL
0B0112 29          0044*  			ADD		HL, HL
0B0113 29          0045*  			ADD		HL, HL
0B0114 E5          0046*  			PUSH		HL			; LD DE, HL
0B0115 D1          0047*  			POP		DE
0B0116 E1          0048*  			POP		HL			; Restore HL
0B0117 B3          0049*  			OR      	E			; OR the new digit in to the least significant nibble
0B0118 5F          0050*  			LD      	E, A
0B0119             0051*  ;
0B0119 23          0052*  			INC		HL			; Onto the next character
0B011A 18 DE       0053*  			JR      	ASC_TO_NUMBER1		; And loop
0B011C             0054*  ;
0B011C 7E          0055*  ASC_TO_NUMBER3:		LD		A, (HL)
0B011D D6 30       0056*  			SUB		'0'			; Normalise to 0
0B011F 38 19       0057*  			JR		C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0B0121 FE 0A       0058*  			CP		10			; Check if >= 10
0B0123 30 15       0059*  			JR		NC, ASC_TO_NUMBER4	; Return if >= 10
0B0125             0060*  ;
0B0125 E5          0061*  			PUSH		HL			; Stack HL
0B0126 D5          0062*  			PUSH		DE			; LD HL, DE
0B0127 E1          0063*  			POP		HL
0B0128 E5          0064*  			PUSH		HL			; LD BC, HL
0B0129 C1          0065*  			POP		BC
0B012A 29          0066*  			ADD		HL, HL 			; x 2
0B012B 29          0067*  			ADD		HL, HL 			; x 4
0B012C 09          0068*  			ADD		HL, BC 			; x 5
0B012D 29          0069*  			ADD		HL, HL 			; x 10
0B012E 01 00 00 00 0070*  			LD		BC, 0
0B0132 4F          0071*  			LD 		C, A			; LD BCU, A
0B0133 09          0072*  			ADD		HL, BC			; Add BCU to HL
0B0134 E5          0073*  			PUSH		HL			; LD DE, HL
0B0135 D1          0074*  			POP		DE
0B0136 E1          0075*  			POP		HL			; Restore HL
0B0137             0076*  ;
0B0137 23          0077*  			INC		HL
0B0138 18 E2       0078*  			JR		ASC_TO_NUMBER3
0B013A C1          0079*  ASC_TO_NUMBER4:		POP		BC
0B013B 37          0080*  			SCF					; We have a valid number so set carry
0B013C C9          0081*  			RET
0B013D             0082*  
0B013D             0083*  
0B013D             0084*  ; Convert a character to upper case
0B013D             0085*  ;  A: Character to convert
0B013D             0086*  ;
0B013D E6 7F       0087*  UPPRC:  		AND     	7FH
0B013F FE 60       0088*  			CP      	'`'
0B0141 D8          0089*  			RET     	C
0B0142 E6 5F       0090*  			AND     	5FH			; Convert to upper case
0B0144 C9          0091*  			RET
0B0145             0092*  
0B0145             0093*  
0B0145             0094*  ;------------------------------------------------------------------------
0B0145             0095*  ; Read a number and convert to binary (decimal only)
0B0145             0096*  ; Inputs: hl: Pointer in string buffer
0B0145             0097*  ; Outputs: hl: Updated text pointer
0B0145             0098*  ;         de: Value
0B0145             0099*  ;         a: Terminator (spaces skipped)
0B0145             0100*  ;         f: Carry set if valid number, otherwise reset
0B0145             0101*  ; Destroys: a, d, e, h, l, f
0B0145             0102*  ;------------------------------------------------------------------------
0B0145             0103*  asc_to_s24:
0B0145 3E 01       0104*      ld a,1 ; set sign flag
0B0147 32 93 01 0B 0105*      ld (@sign),a ; store sign flag
0B014B             0106*  
0B014B 11 00 00 00 0107*      ld de, 0 ; initialise de
0B014F             0108*      ; call _skip_spaces ; skip whitespace
0B014F             0109*  
0B014F 7E          0110*      ld a, (hl) ; read first character
0B0150 B7          0111*      or a ; check for end of string
0B0151 C8          0112*      ret z ; return with no carry if not
0B0152             0113*  
0B0152 C5          0114*      push bc ; preserve bc
0B0153             0115*  
0B0153 FE 2D       0116*      cp '-' ; check for negative number
0B0155 C2 5F 01 0B 0117*      jp nz,@loop ; number is positive, nothing more to do
0B0159 AF          0118*      xor a ; sign flag to zero
0B015A 32 93 01 0B 0119*      ld (@sign),a ; store sign flag
0B015E 23          0120*      inc hl ; skip '-'
0B015F             0121*  
0B015F             0122*  @loop:
0B015F 7E          0123*      ld a, (hl)
0B0160 D6 30       0124*      sub '0' ; normalise to 0
0B0162 38 19       0125*      jr c, @integer_end ; return if < ascii '0'
0B0164 FE 0A       0126*      cp 10 ; check if >= 10
0B0166 30 15       0127*      jr nc, @integer_end ; return if >= 10
0B0168 E5          0128*      push hl ; stack hl
0B0169 D5          0129*      push de ; ld hl, de
0B016A E1          0130*      pop hl
0B016B E5          0131*      push hl ; ld bc, hl
0B016C C1          0132*      pop bc
0B016D 29          0133*      add hl, hl ; x 2
0B016E 29          0134*      add hl, hl ; x 4
0B016F 09          0135*      add hl, bc ; x 5
0B0170 29          0136*      add hl, hl ; x 10
0B0171 01 00 00 00 0137*      ld bc, 0
0B0175 4F          0138*      ld c, a ; ld bcu, a
0B0176 09          0139*      add hl, bc ; add bcu to hl
0B0177 E5          0140*      push hl ; ld de, hl
0B0178 D1          0141*      pop de
0B0179 E1          0142*      pop hl ; restore hl
0B017A 23          0143*      inc hl
0B017B 18 E2       0144*      jr @loop
0B017D             0145*  
0B017D             0146*  @integer_end:
0B017D C1          0147*      pop bc ; send bc back how she came in
0B017E 3A 93 01 0B 0148*      ld a, (@sign) ; get sign flag
0B0182 3D          0149*      dec a ; check if negative
0B0183 F2 91 01 0B 0150*      jp p,@pos ; positive number
0B0187             0151*  
0B0187             0152*  ; Negate de
0B0187 E5          0153*      push hl ; save text pointer
0B0188 21 00 00 00 0154*      ld hl, 0
0B018C AF          0155*      xor a ; clear carry
0B018D ED 52       0156*      sbc hl, de ; subtract DE from HL
0B018F EB          0157*      ex de, hl ; DE = 0-HL
0B0190 E1          0158*      pop hl ; restore text pointer
0B0191             0159*  
0B0191             0160*  @pos:
0B0191 37          0161*      scf ; we have a valid number so set carry
0B0192 C9          0162*      ret
0B0193             0163*  
0B0193 00          0164*  @sign: db 0 ; sign flag buffer
0B0194             0165*  
0B0194             0166*  
0B0194             0167*  ;------------------------------------------------------------------------
0B0194             0168*  ; Read a number and convert to binary (decimal only)
0B0194             0169*  ; Inputs: hl: Pointer in string buffer
0B0194             0170*  ; Outputs: hl: Updated text pointer
0B0194             0171*  ;         de: Value
0B0194             0172*  ;         a: Terminator (spaces skipped)
0B0194             0173*  ;         f: Carry set if valid number, otherwise reset
0B0194             0174*  ; Destroys: a, d, e, h, l, f
0B0194             0175*  ;------------------------------------------------------------------------
0B0194             0176*  asc_to_s168:
0B0194 3E 01       0177*      ld a,1 ; set sign flag
0B0196 32 53 02 0B 0178*      ld (@sign),a ; store sign flag
0B019A             0179*  
0B019A 11 00 00 00 0180*      ld de, 0 ; initialise de
0B019E ED 53 4B 02 0181*      ld (@result), de ; clear low bytes of result buffer
       0B          
0B01A3 ED 53 4F 02 0182*      ld (@scratch), de ; clear low bytes of scratch buffer
       0B          
0B01A8             0183*  
0B01A8             0184*      ; call _skip_spaces ; skip whitespace
0B01A8             0185*  
0B01A8 7E          0186*      ld a, (hl) ; read first character
0B01A9 B7          0187*      or a ; check for end of string
0B01AA C8          0188*      ret z ; return with no carry if not
0B01AB             0189*  
0B01AB C5          0190*      push bc ; preserve bc
0B01AC             0191*  
0B01AC FE 2D       0192*      cp '-' ; check for negative number
0B01AE C2 B8 01 0B 0193*      jp nz,@loop ; number is positive, nothing more to do
0B01B2 AF          0194*      xor a ; sign flag to zero
0B01B3 32 53 02 0B 0195*      ld (@sign),a ; store sign flag
0B01B7 23          0196*      inc hl ; skip '-'
0B01B8             0197*  
0B01B8             0198*  @loop:
0B01B8 7E          0199*      ld a, (hl)
0B01B9             0200*  
0B01B9             0201*  ; chcek for decimal point
0B01B9 FE 2E       0202*      cp '.' ; check for decimal point
0B01BB CA FC 01 0B 0203*      jp z,@fractional_start ; jump to fractional part
0B01BF             0204*  
0B01BF             0205*  ; process integer part
0B01BF D6 30       0206*      sub '0' ; normalise to 0
0B01C1 38 19       0207*      jr c, @integer_end ; return if < ascii '0'
0B01C3 FE 0A       0208*      cp 10 ; check if >= 10
0B01C5 30 15       0209*      jr nc, @integer_end ; return if >= 10
0B01C7 E5          0210*      push hl ; stack hl
0B01C8 D5          0211*      push de ; ld hl, de
0B01C9 E1          0212*      pop hl
0B01CA E5          0213*      push hl ; ld bc, hl
0B01CB C1          0214*      pop bc
0B01CC 29          0215*      add hl, hl ; x 2
0B01CD 29          0216*      add hl, hl ; x 4
0B01CE 09          0217*      add hl, bc ; x 5
0B01CF 29          0218*      add hl, hl ; x 10
0B01D0 01 00 00 00 0219*      ld bc, 0
0B01D4 4F          0220*      ld c, a ; ld bcu, a
0B01D5 09          0221*      add hl, bc ; add bcu to hl
0B01D6 E5          0222*      push hl ; ld de, hl
0B01D7 D1          0223*      pop de
0B01D8 E1          0224*      pop hl ; restore hl
0B01D9 23          0225*      inc hl
0B01DA 18 DC       0226*      jr @loop
0B01DC             0227*  
0B01DC             0228*  @integer_end:
0B01DC ED 53 4C 02 0229*      ld (@result+1), de      ; Store integer part in result buffer (shifted up one byte)
       0B          
0B01E1             0230*  
0B01E1             0231*  @end:
0B01E1 C1          0232*      pop bc ; send bc back how she came in
0B01E2 ED 5B 4B 02 0233*      ld de,(@result) ; will contain shifted integer part combined with any fractional value
       0B          
0B01E7 3A 53 02 0B 0234*      ld a, (@sign) ; get sign flag
0B01EB 3D          0235*      dec a ; check if negative
0B01EC F2 FA 01 0B 0236*      jp p,@pos ; positive number
0B01F0             0237*  
0B01F0             0238*  ; Negate de
0B01F0 E5          0239*      push hl ; save text pointer
0B01F1 21 00 00 00 0240*      ld hl, 0
0B01F5 AF          0241*      xor a ; clear carry
0B01F6 ED 52       0242*      sbc hl, de ; subtract DE from HL
0B01F8 EB          0243*      ex de, hl ; DE = 0-HL
0B01F9 E1          0244*      pop hl ; restore text pointer
0B01FA             0245*  
0B01FA             0246*  @pos:
0B01FA 37          0247*      scf ; we have a valid number so set carry
0B01FB C9          0248*      ret
0B01FC             0249*  
0B01FC             0250*  @fractional_start:
0B01FC DD E5       0251*      push ix                    ; preserve ix
0B01FE ED 53 4C 02 0252*      ld (@result+1), de         ; Store integer part in result buffer (shifted up one byte)
       0B          
0B0203 06 03       0253*      ld b, 3                    ; Set loop counter to 3 for up to three fractional digits
0B0205 11 00 00 00 0254*      ld de, 0                   ; Initialize DE as the fractional accumulator
0B0209 DD 21 54 02 0255*      ld ix, powers_of_10        ; Point IX to the lookup table for the scaling factor based on digits
       0B          
0B020E 23          0256*      inc hl                     ; Skip decimal point
0B020F             0257*  
0B020F             0258*  @fractional_loop:
0B020F 7E          0259*      ld a, (hl)                 ; Load next character
0B0210 D6 30       0260*      sub '0'                    ; Normalize ASCII to decimal
0B0212 38 1C       0261*      jr c, @end_fraction        ; Exit if < '0'
0B0214 FE 0A       0262*      cp 10
0B0216 30 18       0263*      jr nc, @end_fraction       ; Exit if >= 10
0B0218             0264*  
0B0218             0265*      ; Multiply the current fractional accumulator by 10
0B0218 E5          0266*      push hl                    ; Save char pointer
0B0219 F5          0267*      push af                    ; Save the digit
0B021A EB          0268*      ex de, hl
0B021B E5          0269*      push hl
0B021C 29          0270*      add hl,hl ; * 2
0B021D 29          0271*      add hl,hl ; * 4
0B021E D1          0272*      pop de
0B021F 19          0273*      add hl,de ; * 5
0B0220 29          0274*      add hl,hl ; * 10
0B0221 11 00 00 00 0275*      ld de, 0                   ; Clear DEU
0B0225 F1          0276*      pop af                     ; Restore the current digit
0B0226 5F          0277*      ld e, a                    ; Load the digit into E
0B0227 19          0278*      add hl, de                 ; Add the digit to the accumulator
0B0228 EB          0279*      ex de, hl                  ; Result back to DE
0B0229 ED 32 03    0280*      lea ix,ix+3                ; Advance IX to the next scaling factor
0B022C E1          0281*      pop hl                     ; Restore char pointer
0B022D 23          0282*      inc hl                     ; Move to the next character
0B022E 10 DF       0283*      djnz @fractional_loop      ; Loop if more digits to process
0B0230             0284*  
0B0230             0285*  @end_fraction:
0B0230             0286*  ; Final scaling based on number of fractional digits processed
0B0230 ED 53 50 02 0287*      ld (@scratch+1), de          ; Shift fractional part up a byte
       0B          
0B0235 2A 4F 02 0B 0288*      ld hl,(@scratch)             ; Load the shifted fractional part into HL
0B0239             0289*  
0B0239 DD 17 00    0290*      ld de, (ix)                ; Load final scaling factor from IX based on digit count
0B023C CD 2A 09 0B 0291*      call udiv24                ; Perform 24-bit division to scale down
0B0240 7B          0292*      ld a, e                    ; Load the low byte (8-bit fractional part) into A
0B0241 32 4B 02 0B 0293*      ld (@result), a            ; Store fractional part in result buffer
0B0245 DD E1       0294*      pop ix                     ; Restore ix
0B0247 C3 E1 01 0B 0295*      jp @end                    ; Final sign check and flag setup
0B024B             0296*  
0B024B             0297*  @result: ds 4                  ; 32-bit result buffer to shift integer part up one byte
0B024F             0298*  @scratch: ds 4                 ; 32-bit scratch buffer for intermediate calculations
0B0253 00          0299*  @sign: db 0                    ; Sign flag buffer
0B0254             0300*  
0B0254             0301*  powers_of_10:
0B0254 01 00 00    0302*      dl 1                       ; 10^0
0B0257 0A 00 00    0303*      dl 10                      ; 10^1
0B025A 64 00 00    0304*      dl 100                     ; 10^2
0B025D E8 03 00    0305*      dl 1000                    ; 10^3
0B0260 10 27 00    0306*      dl 10000                   ; 10^4
0B0263             0017   
0B0263             0018   ; API INCLUDES
0B0263             0019       include "functions.inc"
0B0263             0001*      MACRO printChar char
0B0263             0002*          LD A, char
0B0263             0003*          RST.LIL 10h
0B0263             0004*      ENDMACRO
0B0263             0005*  
0B0263             0006*  ; test the sign of HL
0B0263             0007*  ; inputs: HL obviously
0B0263             0008*  ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
0B0263             0009*  ; destroys: flags
0B0263             0010*      MACRO sign_hlu
0B0263             0011*          add hl,de
0B0263             0012*          or a
0B0263             0013*          sbc hl,de
0B0263             0014*      ENDMACRO
0B0263             0015*  
0B0263             0016*  ; Simulated call to subroutine at HL
0B0263             0017*  ; inputs: HL pointing to the subroutine address plus whatever the called function expects
0B0263             0018*  ; outputs: whatever the subroutine does, including HL and BC
0B0263             0019*  ; destroys: only what the subroutine does, but always BC
0B0263             0020*      MACRO callHL
0B0263             0021*          ld bc,$+7     ; Address of first instruction after the jump
0B0263             0022*          push bc       ; which constitutes the return address
0B0263             0023*          jp   (hl)     ; Jump to the address in HL
0B0263             0024*      ENDMACRO
0B0263             0025*  
0B0263             0026*  ; Simulated call to subroutine at IX
0B0263             0027*  ; inputs: IX pointing to the subroutine address plus whatever the called function expects
0B0263             0028*  ; outputs: whatever the subroutine does, including IX and BC
0B0263             0029*  ; destroys: only what the subroutine does, but always BC
0B0263             0030*      MACRO callIX
0B0263             0031*          ld bc,$+7     ; Address of first instruction after the jump
0B0263             0032*          push bc       ; which constitutes the return address
0B0263             0033*          jp   (ix)     ; Jump to the address in IX
0B0263             0034*      ENDMACRO
0B0263             0035*  
0B0263             0036*  ; Simulated call to soubroutinte at IY
0B0263             0037*  ; inputs: IY pointing to the subroutine address plus whatever the called function expects
0B0263             0038*  ; outputs: whatever the subroutine does, including IY and BC
0B0263             0039*  ; destroys: only what the subroutine does, but always BC
0B0263             0040*      MACRO callIY
0B0263             0041*          ld bc,$+7     ; Address of first instruction after the jump
0B0263             0042*          push bc       ; which constitutes the return address
0B0263             0043*          jp   (iy)     ; Jump to the address in IY
0B0263             0044*      ENDMACRO
0B0263             0045*  
0B0263             0046*  ; put the value in HLU into the accumulator
0B0263             0047*  ; destroys: af
0B0263             0048*      MACRO HLU_TO_A
0B0263             0049*          push hl ; 4 cycles
0B0263             0050*          inc sp ; 1 cycle
0B0263             0051*          pop af  ; 4 cycles
0B0263             0052*          dec sp ; 1 cycle
0B0263             0053*                 ; 10 cycles total
0B0263             0054*      ENDMACRO
0B0263             0055*  
0B0263             0056*  A_TO_HLU:
0B0263             0057*      ; call is 7 cycles
0B0263 22 70 02 0B 0058*      ld (@scratch),hl ; 7 cycles
0B0267 32 72 02 0B 0059*      ld (@scratch+2),a ; 5 cycles
0B026B 2A 70 02 0B 0060*      ld hl,(@scratch) ; 7 cycles
0B026F C9          0061*      ret ; 6 cycles
0B0270             0062*          ; 25 cycles total
0B0270 00 00 00    0063*  @scratch: dl 0
0B0273             0064*  
0B0273             0065*      ; TODO: implement this
0B0273             0066*      ; MACRO A_TO_HLU
0B0273             0067*      ;     push.s af
0B0273             0068*      ;     inc sp
0B0273             0069*      ;     push.s hl
0B0273             0070*      ;     pop hl
0B0273             0071*      ;     inc sp
0B0273             0072*      ;     inc sp
0B0273             0073*      ; ENDMACRO
0B0273             0074*  
0B0273             0075*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
0B0273             0076*  ; Print a zero-terminated string
0B0273             0077*  ; HL: Pointer to string
0B0273             0078*  printString:
0B0273 C5          0079*  	PUSH	BC
0B0274 01 00 00 00 0080*  	LD		BC,0
0B0278 3E 00       0081*  	LD 	 	A,0
0B027A 5B DF       0082*  	RST.LIL 18h
0B027C C1          0083*  	POP		BC
0B027D C9          0084*  	RET
0B027E             0085*  ; print a VDU sequence
0B027E             0086*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
0B027E             0087*  sendVDUsequence:
0B027E C5          0088*  	PUSH	BC
0B027F 01 00 00 00 0089*  	LD		BC, 0
0B0283 4E          0090*  	LD		C, (HL)
0B0284 5B DF       0091*  	RST.LIL	18h
0B0286 C1          0092*  	POP		BC
0B0287 C9          0093*  	RET
0B0288             0094*  ; Print Newline sequence to VDP
0B0288             0095*  printNewLine:
0B0288 F5          0096*      push af ; for some reason rst.lil 10h sets carry flag
0B0289 3E 0D       0097*  	LD	A, '\r'
0B028B 5B D7       0098*  	RST.LIL 10h
0B028D 3E 0A       0099*  	LD	A, '\n'
0B028F 5B D7       0100*  	RST.LIL 10h
0B0291 F1          0101*      pop af
0B0292 C9          0102*  	RET
0B0293             0103*  
0B0293             0104*  ; Print a 24-bit HEX number
0B0293             0105*  ; HLU: Number to print
0B0293             0106*  printHex24:
0B0293             0107*  	; PUSH	HL      ; 4 cycles
0B0293             0108*  	; LD		HL, 2   ; 4 cycles
0B0293             0109*  	; ADD		HL, SP  ; 1 cycle
0B0293             0110*  	; LD		A, (HL) ; 2 cycles
0B0293             0111*  	; POP		HL      ; 4 cycles
0B0293             0112*      ;                 ; 15 cycles total
0B0293 E5          0113*      push hl ; 4 cycles
0B0294 33          0114*      inc sp ; 1 cycle
0B0295 F1          0115*      pop af  ; 4 cycles
0B0296 3B          0116*      dec sp ; 1 cycle
0B0297             0117*              ; 10 cycles total
0B0297 CD A1 02 0B 0118*  	CALL	printHex8
0B029B             0119*  ; Print a 16-bit HEX number
0B029B             0120*  ; HL: Number to print
0B029B             0121*  printHex16:
0B029B 7C          0122*  	LD		A,H
0B029C CD A1 02 0B 0123*  	CALL	printHex8
0B02A0 7D          0124*  	LD		A,L
0B02A1             0125*  ; Print an 8-bit HEX number
0B02A1             0126*  ; A: Number to print
0B02A1             0127*  printHex8:
0B02A1 4F          0128*  	LD		C,A
0B02A2 1F          0129*  	RRA
0B02A3 1F          0130*  	RRA
0B02A4 1F          0131*  	RRA
0B02A5 1F          0132*  	RRA
0B02A6 CD AB 02 0B 0133*  	CALL	@F
0B02AA 79          0134*  	LD		A,C
0B02AB             0135*  @@:
0B02AB E6 0F       0136*  	AND		0Fh
0B02AD C6 90       0137*  	ADD		A,90h
0B02AF 27          0138*  	DAA
0B02B0 CE 40       0139*  	ADC		A,40h
0B02B2 27          0140*  	DAA
0B02B3 5B D7       0141*  	RST.LIL	10h
0B02B5 C9          0142*  	RET
0B02B6             0143*  
0B02B6             0144*  printHexA:
0B02B6 F5          0145*      push af
0B02B7 C5          0146*      push bc
0B02B8 CD A1 02 0B 0147*      call printHex8
0B02BC 3E 20       0148*      ld a,' '
0B02BE 5B D7       0149*      rst.lil 10h
0B02C0 C1          0150*      pop bc
0B02C1 F1          0151*      pop af
0B02C2 C9          0152*      ret
0B02C3             0153*  
0B02C3             0154*  printHexHL:
0B02C3 F5          0155*      push af
0B02C4 C5          0156*      push bc
0B02C5 CD 9B 02 0B 0157*      call printHex16
0B02C9 3E 20       0158*      ld a,' '
0B02CB 5B D7       0159*      rst.lil 10h
0B02CD C1          0160*      pop bc
0B02CE F1          0161*      pop af
0B02CF C9          0162*      ret
0B02D0             0163*  
0B02D0             0164*  printHexUHL:
0B02D0 F5          0165*      push af
0B02D1 C5          0166*      push bc
0B02D2 CD 93 02 0B 0167*      call printHex24
0B02D6 3E 20       0168*      ld a,' '
0B02D8 5B D7       0169*      rst.lil 10h
0B02DA C1          0170*      pop bc
0B02DB F1          0171*      pop af
0B02DC C9          0172*      ret
0B02DD             0173*  
0B02DD             0174*  printHexAUHL:
0B02DD F5          0175*      push af
0B02DE C5          0176*      push bc
0B02DF CD A1 02 0B 0177*      call printHex8
0B02E3 3E 2E       0178*      ld a,'.'
0B02E5 5B D7       0179*      rst.lil 10h
0B02E7 CD 93 02 0B 0180*      call printHex24
0B02EB 3E 20       0181*      ld a,' '
0B02ED 5B D7       0182*      rst.lil 10h
0B02EF C1          0183*      pop bc
0B02F0 F1          0184*      pop af
0B02F1 C9          0185*      ret
0B02F2             0186*  
0B02F2             0187*  printHexABHL:
0B02F2             0188*  ; preserve registers
0B02F2 C5          0189*      push bc ; b will be ok c will not
0B02F3 F5          0190*      push af ; will get totally destroyed
0B02F4             0191*  ; print a
0B02F4 CD A1 02 0B 0192*      call printHex8
0B02F8             0193*  ; print b
0B02F8 78          0194*      ld a,b
0B02F9 CD A1 02 0B 0195*      call printHex8
0B02FD             0196*  ; print hl
0B02FD CD 9B 02 0B 0197*      call printHex16
0B0301             0198*  ; restore registers
0B0301 F1          0199*      pop af
0B0302 C1          0200*      pop bc
0B0303 C9          0201*      ret
0B0304             0202*  
0B0304             0203*  printHexBHL:
0B0304             0204*  ; preserve registers
0B0304 C5          0205*      push bc ; b will be ok c will not
0B0305 F5          0206*      push af ; will get totally destroyed
0B0306             0207*  ; print b
0B0306 78          0208*      ld a,b
0B0307 CD A1 02 0B 0209*      call printHex8
0B030B             0210*  ; print hl
0B030B CD 9B 02 0B 0211*      call printHex16
0B030F             0212*  ; restore registers
0B030F F1          0213*      pop af
0B0310 C1          0214*      pop bc
0B0311 C9          0215*      ret
0B0312             0216*  
0B0312             0217*  printHexCDE:
0B0312             0218*  ; preserve registers
0B0312 C5          0219*      push bc ; b will be ok c will not
0B0313 F5          0220*      push af ; will get totally destroyed
0B0314             0221*  ; print c
0B0314 79          0222*      ld a,c
0B0315 CD A1 02 0B 0223*      call printHex8
0B0319             0224*  ; print de
0B0319 EB          0225*      ex de,hl
0B031A CD 9B 02 0B 0226*      call printHex16
0B031E EB          0227*      ex de,hl
0B031F             0228*  ; restore registers
0B031F F1          0229*      pop af
0B0320 C1          0230*      pop bc
0B0321 C9          0231*      ret
0B0322             0232*  
0B0322             0233*  ; Print a 0x HEX prefix
0B0322             0234*  DisplayHexPrefix:
0B0322 3E 30       0235*  	LD	A, '0'
0B0324 5B D7       0236*  	RST.LIL 10h
0B0326 3E 78       0237*  	LD	A, 'x'
0B0328 5B D7       0238*  	RST.LIL 10h
0B032A C9          0239*  	RET
0B032B             0240*  
0B032B             0241*      MACRO printDecBC
0B032B             0242*          push hl
0B032B             0243*          push bc
0B032B             0244*          pop hl
0B032B             0245*          call printDec
0B032B             0246*          pop hl
0B032B             0247*      ENDMACRO
0B032B             0248*  
0B032B             0249*      MACRO printDecDE
0B032B             0250*          push hl
0B032B             0251*          push de
0B032B             0252*          pop hl
0B032B             0253*          call printDec
0B032B             0254*          pop hl
0B032B             0255*      ENDMACRO
0B032B             0256*  
0B032B             0257*      MACRO printDecHL
0B032B             0258*          call printDec
0B032B             0259*      ENDMACRO
0B032B             0260*  
0B032B             0261*      MACRO printDecIX
0B032B             0262*          push hl
0B032B             0263*          push ix
0B032B             0264*          pop hl
0B032B             0265*          call printDec
0B032B             0266*          pop hl
0B032B             0267*      ENDMACRO
0B032B             0268*  
0B032B             0269*      MACRO printDecIY
0B032B             0270*          push hl
0B032B             0271*          push iy
0B032B             0272*          pop hl
0B032B             0273*          call printDec
0B032B             0274*          pop hl
0B032B             0275*      ENDMACRO
0B032B             0276*  
0B032B             0277*  
0B032B             0278*  ; Prints the right justified decimal value in HL without leading zeroes
0B032B             0279*  ; HL : Value to print
0B032B             0280*  ; preserves all registers and flags
0B032B             0281*  printDec:
0B032B             0282*  ; BEGIN MY CODE
0B032B             0283*  ; back up all the things
0B032B F5          0284*      push af
0B032C C5          0285*      push bc
0B032D D5          0286*      push de
0B032E E5          0287*      push hl
0B032F             0288*  ; END MY CODE
0B032F 11 57 03 0B 0289*  	LD	 DE, _printDecBuffer
0B0333 CD 67 03 0B 0290*  	CALL u24_to_ascii
0B0337             0291*  ; BEGIN MY CODE
0B0337             0292*  ; replace leading zeroes with spaces
0B0337 21 57 03 0B 0293*      LD	 HL, _printDecBuffer
0B033B 06 07       0294*      ld   B, 7 ; if HL was 0, we want to keep the final zero
0B033D             0295*  @loop:
0B033D 7E          0296*      LD	 A, (HL)
0B033E FE 30       0297*      CP	 '0'
0B0340 C2 4A 03 0B 0298*      JP	 NZ, @done
0B0344 3E 20       0299*      LD   A, ' '
0B0346 77          0300*      LD	 (HL), A
0B0347 23          0301*      INC	 HL
0B0348             0302*      ; CALL vdu_cursor_forward
0B0348 10 F3       0303*      DJNZ @loop
0B034A             0304*  @done:
0B034A             0305*  ; END MY CODE
0B034A 21 57 03 0B 0306*  	LD	 HL, _printDecBuffer
0B034E CD 73 02 0B 0307*  	CALL printString
0B0352             0308*  ; BEGIN MY CODE
0B0352             0309*  ; restore all the things
0B0352 E1          0310*      pop hl
0B0353 D1          0311*      pop de
0B0354 C1          0312*      pop bc
0B0355 F1          0313*      pop af
0B0356             0314*  ; END MY CODE
0B0356 C9          0315*  	RET
0B0357 00 00 00 00 0316*  _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0B0367             0317*  
0B0367             0318*  ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
0B0367             0319*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
0B0367             0320*  ; so it will allways be 8 characters length
0B0367             0321*  ; HL : Value to convert to string
0B0367             0322*  ; DE : pointer to buffer, at least 8 byte + 0
0B0367             0323*  u24_to_ascii:
0B0367 01 80 69 67 0324*  	LD	 BC,-10000000
0B036B CD 9E 03 0B 0325*  	CALL @one_digit
0B036F 01 C0 BD F0 0326*  	LD	 BC,-1000000
0B0373 CD 9E 03 0B 0327*  	CALL @one_digit
0B0377 01 60 79 FE 0328*  	LD	 BC,-100000
0B037B CD 9E 03 0B 0329*  	CALL @one_digit
0B037F 01 F0 D8 FF 0330*  	LD   BC,-10000
0B0383 CD 9E 03 0B 0331*  	CALL @one_digit
0B0387 01 18 FC FF 0332*  	LD   BC,-1000
0B038B CD 9E 03 0B 0333*  	CALL @one_digit
0B038F 01 9C FF FF 0334*  	LD   BC,-100
0B0393 CD 9E 03 0B 0335*  	CALL @one_digit
0B0397 0E F6       0336*  	LD   C,-10
0B0399 CD 9E 03 0B 0337*  	CALL @one_digit
0B039D 48          0338*  	LD   C,B
0B039E             0339*  @one_digit:
0B039E 3E 2F       0340*  	LD   A,'0'-1
0B03A0             0341*  @divide_me:
0B03A0 3C          0342*  	INC  A
0B03A1 09          0343*  	ADD  HL,BC
0B03A2 38 FC       0344*  	JR   C,@divide_me
0B03A4 ED 42       0345*  	SBC  HL,BC
0B03A6 12          0346*  	LD   (DE),A
0B03A7 13          0347*  	INC  DE
0B03A8 C9          0348*  	RET
0B03A9             0349*  
0B03A9             0350*  print_u24:
0B03A9 D5          0351*      push de
0B03AA E5          0352*      push hl
0B03AB 11 57 03 0B 0353*      ld de,_printDecBuffer
0B03AF CD 67 03 0B 0354*      call u24_to_ascii
0B03B3 21 57 03 0B 0355*      ld hl,_printDecBuffer
0B03B7 CD 73 02 0B 0356*      call printString
0B03BB 3E 20       0357*      ld a,' '
0B03BD 5B D7       0358*      rst.lil 10h
0B03BF E1          0359*      pop hl
0B03C0 D1          0360*      pop de
0B03C1 C9          0361*      ret
0B03C2             0362*  
0B03C2             0363*  ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
0B03C2             0364*  ; HL : Value to convert to string (integer part in H, fractional part in L)
0B03C2             0365*  ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
0B03C2             0366*  u168_to_ascii:
0B03C2             0367*  ; add a leading space to make room for sign flag if needed
0B03C2 3E 20       0368*      ld a,' '
0B03C4 12          0369*      ld (de),a
0B03C5 13          0370*      inc de
0B03C6             0371*  ; Convert integer part
0B03C6 E5          0372*      push hl               ; Save HL (we’ll need the fractional part later)
0B03C7 CD A2 08 0B 0373*      call hlu_udiv256    ; Shift to get integer portion in HL
0B03CB 01 F0 D8 FF 0374*      ld   bc, -10000
0B03CF CD F2 03 0B 0375*      call @one_int
0B03D3 01 18 FC FF 0376*      ld   bc, -1000
0B03D7 CD F2 03 0B 0377*      call @one_int
0B03DB 01 9C FF FF 0378*      ld   bc, -100
0B03DF CD F2 03 0B 0379*      call @one_int
0B03E3 0E F6       0380*      ld   c, -10
0B03E5 CD F2 03 0B 0381*      call @one_int
0B03E9 48          0382*      ld   c, b
0B03EA CD F2 03 0B 0383*      call @one_int
0B03EE C3 FD 03 0B 0384*      jp   @frac            ; Jump to fractional part conversion
0B03F2             0385*  @one_int:
0B03F2 3E 2F       0386*      ld   a, '0' - 1       ; Start ASCII character at '0'
0B03F4             0387*  @divide_me:
0B03F4 3C          0388*      inc  a
0B03F5 09          0389*      add  hl, bc           ; Accumulate until overflow
0B03F6 38 FC       0390*      jr   c, @divide_me
0B03F8 ED 42       0391*      sbc  hl, bc           ; Remove excess after overflow
0B03FA 12          0392*      ld   (de), a          ; Store ASCII digit
0B03FB 13          0393*      inc  de
0B03FC C9          0394*      ret
0B03FD             0395*  ; Convert fractional part
0B03FD             0396*  @frac:
0B03FD 3E 2E       0397*      ld   a, '.'           ; Decimal point
0B03FF 12          0398*      ld   (de), a
0B0400 13          0399*      inc  de
0B0401 E1          0400*      pop  hl               ; Restore HL with original fraction
0B0402 06 03       0401*      ld   b, 3             ; Loop counter for 3 fractional digits
0B0404             0402*  @frac_loop:
0B0404 26 0A       0403*      ld   h, 10            ; Load multiplier for fractional part
0B0406 ED 6C       0404*      mlt  hl               ; Multiply by 10, result in HL (H holds the integer part)
0B0408 3E 30       0405*      ld   a, '0'
0B040A 84          0406*      add  a, h             ; Convert integer part to ASCII
0B040B 12          0407*      ld   (de), a
0B040C 13          0408*      inc  de
0B040D 10 F5       0409*      djnz @frac_loop       ; Repeat for each fractional digit
0B040F             0410*  ; Add null terminator
0B040F AF          0411*      xor  a                ; Null terminator
0B0410 12          0412*      ld   (de), a
0B0411 C9          0413*      ret
0B0412             0414*  
0B0412             0415*  print_u168:
0B0412 D5          0416*      push de
0B0413 E5          0417*      push hl
0B0414 11 57 03 0B 0418*      ld de,_printDecBuffer
0B0418 CD C2 03 0B 0419*      call u168_to_ascii
0B041C 21 57 03 0B 0420*      ld hl,_printDecBuffer
0B0420 CD 73 02 0B 0421*      call printString
0B0424 E1          0422*      pop hl
0B0425 D1          0423*      pop de
0B0426 C9          0424*      ret
0B0427             0425*  
0B0427             0426*  ; signed version of u168_to_ascii
0B0427             0427*  s168_to_ascii:
0B0427 D5          0428*      push de ; save starting address of buffer
0B0428 CD 3B 08 0B 0429*      call hlu_abs
0B042C F5          0430*      push af ; save sign flag
0B042D CD C2 03 0B 0431*      call u168_to_ascii
0B0431 F1          0432*      pop af ; restore sign flag
0B0432 D1          0433*      pop de ; restore starting address of buffer
0B0433 F0          0434*      ret p ; hlu was positive so nothing to do
0B0434 3E 2D       0435*      ld a,'-'
0B0436 12          0436*      ld (de),a
0B0437 C9          0437*      ret
0B0438             0438*  
0B0438             0439*  print_s168:
0B0438 D5          0440*      push de
0B0439 E5          0441*      push hl
0B043A 11 57 03 0B 0442*      ld de,_printDecBuffer
0B043E CD 27 04 0B 0443*      call s168_to_ascii
0B0442 21 57 03 0B 0444*      ld hl,_printDecBuffer
0B0446 CD 73 02 0B 0445*      call printString
0B044A E1          0446*      pop hl
0B044B D1          0447*      pop de
0B044C C9          0448*      ret
0B044D             0449*  
0B044D             0450*  print_s168_hl:
0B044D F5          0451*      push af
0B044E E5          0452*      push hl
0B044F CD 38 04 0B 0453*      call print_s168
0B0453 3E 20       0454*      ld a,' '
0B0455 5B D7       0455*      rst.lil 10h
0B0457 E1          0456*      pop hl
0B0458 F1          0457*      pop af
0B0459 C9          0458*      ret
0B045A             0459*  
0B045A             0460*  print_s168_bc:
0B045A F5          0461*      push af
0B045B C5          0462*      push bc
0B045C E5          0463*      push hl
0B045D C5          0464*      push bc
0B045E E1          0465*      pop hl
0B045F CD 38 04 0B 0466*      call print_s168
0B0463 3E 20       0467*      ld a,' '
0B0465 5B D7       0468*      rst.lil 10h
0B0467 E1          0469*      pop hl
0B0468 C1          0470*      pop bc
0B0469 F1          0471*      pop af
0B046A C9          0472*      ret
0B046B             0473*  
0B046B             0474*  print_s168_de:
0B046B F5          0475*      push af
0B046C D5          0476*      push de
0B046D E5          0477*      push hl
0B046E EB          0478*      ex de,hl
0B046F CD 38 04 0B 0479*      call print_s168
0B0473 3E 20       0480*      ld a,' '
0B0475 5B D7       0481*      rst.lil 10h
0B0477 E1          0482*      pop hl
0B0478 D1          0483*      pop de
0B0479 F1          0484*      pop af
0B047A C9          0485*      ret
0B047B             0486*  
0B047B             0487*  print_s168_hl_bc_de:
0B047B F5          0488*      push af
0B047C C5          0489*      push bc
0B047D D5          0490*      push de
0B047E E5          0491*      push hl
0B047F CD 38 04 0B 0492*      call print_s168
0B0483 3E 20       0493*      ld a,' '
0B0485 5B D7       0494*      rst.lil 10h
0B0487 C5          0495*      push bc
0B0488 E1          0496*      pop hl
0B0489 CD 38 04 0B 0497*      call print_s168
0B048D 3E 20       0498*      ld a,' '
0B048F 5B D7       0499*      rst.lil 10h
0B0491 EB          0500*      ex de,hl
0B0492 CD 38 04 0B 0501*      call print_s168
0B0496 3E 20       0502*      ld a,' '
0B0498 5B D7       0503*      rst.lil 10h
0B049A E1          0504*      pop hl
0B049B D1          0505*      pop de
0B049C C1          0506*      pop bc
0B049D F1          0507*      pop af
0B049E C9          0508*      ret
0B049F             0509*  
0B049F             0510*  print_s168_bc_de:
0B049F F5          0511*      push af
0B04A0 C5          0512*      push bc
0B04A1 D5          0513*      push de
0B04A2 C5          0514*      push bc
0B04A3 E1          0515*      pop hl
0B04A4 CD 38 04 0B 0516*      call print_s168
0B04A8 3E 20       0517*      ld a,' '
0B04AA 5B D7       0518*      rst.lil 10h
0B04AC EB          0519*      ex de,hl
0B04AD CD 38 04 0B 0520*      call print_s168
0B04B1 3E 20       0521*      ld a,' '
0B04B3 5B D7       0522*      rst.lil 10h
0B04B5 E1          0523*      pop hl
0B04B6 D1          0524*      pop de
0B04B7 C1          0525*      pop bc
0B04B8 F1          0526*      pop af
0B04B9 C9          0527*      ret
0B04BA             0528*  
0B04BA             0529*  print_s168_a:
0B04BA F5          0530*      push af
0B04BB C5          0531*      push bc
0B04BC E5          0532*      push hl
0B04BD 21 00 00 00 0533*      ld hl,0
0B04C1 6F          0534*      ld l,a
0B04C2 CD 4D 04 0B 0535*      call print_s168_hl
0B04C6 E1          0536*      pop hl
0B04C7 C1          0537*      pop bc
0B04C8 F1          0538*      pop af
0B04C9 C9          0539*      ret
0B04CA             0540*  
0B04CA             0541*  ; #### new functions added by Brandon R. Gates ####
0B04CA             0542*  
0B04CA             0543*  ; print the binary representation of the 8-bit value in a
0B04CA             0544*  ; destroys a, hl, bc
0B04CA             0545*  printBin8:
0B04CA 06 08       0546*      ld b,8      ; loop counter for 8 bits
0B04CC 21 E7 04 0B 0547*      ld hl,@cmd  ; set hl to the low byte of the output string
0B04D0             0548*                  ; (which will be the high bit of the value in a)
0B04D0             0549*  @loop:
0B04D0 07          0550*      rlca ; put the next highest bit into carry
0B04D1 38 04       0551*      jr c,@one
0B04D3 36 30       0552*      ld (hl),'0'
0B04D5 18 02       0553*      jr @next_bit
0B04D7             0554*  @one:
0B04D7 36 31       0555*      ld (hl),'1'
0B04D9             0556*  @next_bit:
0B04D9 23          0557*      inc hl
0B04DA 10 F4       0558*      djnz @loop
0B04DC             0559*  ; print it
0B04DC 21 E7 04 0B 0560*  	ld hl,@cmd
0B04E0 01 08 00 00 0561*  	ld bc,@end-@cmd
0B04E4 5B DF       0562*  	rst.lil $18
0B04E6 C9          0563*  	ret
0B04E7             0564*  @cmd: ds 8 ; eight bytes for eight bits
0B04EF             0565*  @end:
0B04EF             0566*  
0B04EF             0567*  ; print the binary representation of the 8-bit value in a
0B04EF             0568*  ; in reverse order (lsb first)
0B04EF             0569*  ; destroys a, hl, bc
0B04EF             0570*  printBin8Rev:
0B04EF 06 08       0571*      ld b,8      ; loop counter for 8 bits
0B04F1 21 0C 05 0B 0572*      ld hl,@cmd  ; set hl to the low byte of the output string
0B04F5             0573*                  ; (which will be the high bit of the value in a)
0B04F5             0574*  @loop:
0B04F5 0F          0575*      rrca ; put the next lowest bit into carry
0B04F6 38 04       0576*      jr c,@one
0B04F8 36 30       0577*      ld (hl),'0'
0B04FA 18 02       0578*      jr @next_bit
0B04FC             0579*  @one:
0B04FC 36 31       0580*      ld (hl),'1'
0B04FE             0581*  @next_bit:
0B04FE 23          0582*      inc hl
0B04FF 10 F4       0583*      djnz @loop
0B0501             0584*  ; print it
0B0501 21 0C 05 0B 0585*  	ld hl,@cmd
0B0505 01 08 00 00 0586*  	ld bc,@end-@cmd
0B0509 5B DF       0587*  	rst.lil $18
0B050B C9          0588*  	ret
0B050C             0589*  @cmd: ds 8 ; eight bytes for eight bits
0B0514             0590*  @end:
0B0514             0591*  
0B0514             0592*  ; print registers to screen in hexidecimal format
0B0514             0593*  ; inputs: none
0B0514             0594*  ; outputs: values of every register printed to screen
0B0514             0595*  ;    values of each register in global scratch memory
0B0514             0596*  ; destroys: nothing
0B0514             0597*  stepRegistersHex:
0B0514             0598*  ; store everything in scratch
0B0514 22 42 07 0B 0599*      ld (uhl),hl
0B0518 ED 43 45 07 0600*      ld (ubc),bc
       0B          
0B051D ED 53 48 07 0601*      ld (ude),de
       0B          
0B0522 DD 22 4B 07 0602*      ld (uix),ix
       0B          
0B0527 FD 22 4E 07 0603*      ld (uiy),iy
       0B          
0B052C F5          0604*      push af ; fml
0B052D E1          0605*      pop hl  ; thanks, zilog
0B052E 22 3F 07 0B 0606*      ld (uaf),hl
0B0532 F5          0607*      push af ; dammit
0B0533             0608*  
0B0533             0609*  ; home the cursor
0B0533             0610*      ; call vdu_home_cursor
0B0533             0611*  
0B0533             0612*  ; print each register
0B0533 21 C5 06 0B 0613*      ld hl,str_afu
0B0537 CD 73 02 0B 0614*      call printString
0B053B 2A 3F 07 0B 0615*      ld hl,(uaf)
0B053F CD 93 02 0B 0616*      call printHex24
0B0543 CD 88 02 0B 0617*      call printNewLine
0B0547             0618*  
0B0547 21 CA 06 0B 0619*      ld hl,str_hlu
0B054B CD 73 02 0B 0620*      call printString
0B054F 2A 42 07 0B 0621*      ld hl,(uhl)
0B0553 CD 93 02 0B 0622*      call printHex24
0B0557 CD 88 02 0B 0623*      call printNewLine
0B055B             0624*  
0B055B 21 CF 06 0B 0625*      ld hl,str_bcu
0B055F CD 73 02 0B 0626*      call printString
0B0563 2A 45 07 0B 0627*      ld hl,(ubc)
0B0567 CD 93 02 0B 0628*      call printHex24
0B056B CD 88 02 0B 0629*      call printNewLine
0B056F             0630*  
0B056F 21 D4 06 0B 0631*      ld hl,str_deu
0B0573 CD 73 02 0B 0632*      call printString
0B0577 2A 48 07 0B 0633*      ld hl,(ude)
0B057B CD 93 02 0B 0634*      call printHex24
0B057F CD 88 02 0B 0635*      call printNewLine
0B0583             0636*  
0B0583 21 D9 06 0B 0637*      ld hl,str_ixu
0B0587 CD 73 02 0B 0638*      call printString
0B058B 2A 4B 07 0B 0639*      ld hl,(uix)
0B058F CD 93 02 0B 0640*      call printHex24
0B0593 CD 88 02 0B 0641*      call printNewLine
0B0597             0642*  
0B0597 21 DE 06 0B 0643*      ld hl,str_iyu
0B059B CD 73 02 0B 0644*      call printString
0B059F 2A 4E 07 0B 0645*      ld hl,(uiy)
0B05A3 CD 93 02 0B 0646*      call printHex24
0B05A7 CD 88 02 0B 0647*      call printNewLine
0B05AB             0648*  
0B05AB             0649*      ; call vsync
0B05AB             0650*  
0B05AB CD 88 02 0B 0651*      call printNewLine
0B05AF             0652*  
0B05AF             0653*  ; check for right shift key and quit if pressed
0B05AF             0654*  	MOSCALL mos_getkbmap
0B05AF 3E 1E       0001*M 			LD	A, function
0B05B1 5B CF       0002*M 			RST.L	08h
0B05B3             0655*  @stayhere:
0B05B3             0656*  ; 7 RightShift
0B05B3 DD CB 00 76 0657*      bit 6,(ix+0)
0B05B7 20 02       0658*      jr nz,@RightShift
0B05B9 18 F8       0659*      jr @stayhere
0B05BB             0660*  @RightShift:
0B05BB DD CB 0E 86 0661*      res 0,(ix+14) ; debounce the key (hopefully)
0B05BF 3E 80       0662*      ld a,%10000000
0B05C1 CD 44 1F 0B 0663*      call multiPurposeDelay
0B05C5             0664*  
0B05C5             0665*  ; restore everything
0B05C5 2A 42 07 0B 0666*      ld hl, (uhl)
0B05C9 ED 4B 45 07 0667*      ld bc, (ubc)
       0B          
0B05CE ED 5B 48 07 0668*      ld de, (ude)
       0B          
0B05D3 DD 2A 4B 07 0669*      ld ix, (uix)
       0B          
0B05D8 FD 2A 4E 07 0670*      ld iy, (uiy)
       0B          
0B05DD F1          0671*      pop af
0B05DE             0672*  ; all done
0B05DE C9          0673*      ret
0B05DF             0674*  
0B05DF             0675*  ; print registers to screen in hexidecimal format
0B05DF             0676*  ; inputs: none
0B05DF             0677*  ; outputs: values of every register printed to screen
0B05DF             0678*  ;    values of each register in global scratch memory
0B05DF             0679*  ; destroys: nothing
0B05DF             0680*  dumpRegistersHex:
0B05DF             0681*  ; store everything in scratch
0B05DF 22 42 07 0B 0682*      ld (uhl),hl
0B05E3 ED 43 45 07 0683*      ld (ubc),bc
       0B          
0B05E8 ED 53 48 07 0684*      ld (ude),de
       0B          
0B05ED DD 22 4B 07 0685*      ld (uix),ix
       0B          
0B05F2 FD 22 4E 07 0686*      ld (uiy),iy
       0B          
0B05F7 F5          0687*      push af ; fml
0B05F8 E1          0688*      pop hl  ; thanks, zilog
0B05F9 22 3F 07 0B 0689*      ld (uaf),hl
0B05FD F5          0690*      push af ; dammit
0B05FE             0691*  
0B05FE             0692*  ; home the cursor
0B05FE             0693*      ; call vdu_home_cursor
0B05FE             0694*      ; call printNewLine
0B05FE             0695*  
0B05FE             0696*  ; print each register
0B05FE 21 C5 06 0B 0697*      ld hl,str_afu
0B0602 CD 73 02 0B 0698*      call printString
0B0606 2A 3F 07 0B 0699*      ld hl,(uaf)
0B060A CD 93 02 0B 0700*      call printHex24
0B060E             0701*      ; call printNewLine
0B060E             0702*  
0B060E 21 CA 06 0B 0703*      ld hl,str_hlu
0B0612 CD 73 02 0B 0704*      call printString
0B0616 2A 42 07 0B 0705*      ld hl,(uhl)
0B061A CD 93 02 0B 0706*      call printHex24
0B061E             0707*      ; call printNewLine
0B061E             0708*  
0B061E 21 CF 06 0B 0709*      ld hl,str_bcu
0B0622 CD 73 02 0B 0710*      call printString
0B0626 2A 45 07 0B 0711*      ld hl,(ubc)
0B062A CD 93 02 0B 0712*      call printHex24
0B062E             0713*      ; call printNewLine
0B062E             0714*  
0B062E 21 D4 06 0B 0715*      ld hl,str_deu
0B0632 CD 73 02 0B 0716*      call printString
0B0636 2A 48 07 0B 0717*      ld hl,(ude)
0B063A CD 93 02 0B 0718*      call printHex24
0B063E             0719*      ; call printNewLine
0B063E             0720*  
0B063E 21 D9 06 0B 0721*      ld hl,str_ixu
0B0642 CD 73 02 0B 0722*      call printString
0B0646 2A 4B 07 0B 0723*      ld hl,(uix)
0B064A CD 93 02 0B 0724*      call printHex24
0B064E             0725*      ; call printNewLine
0B064E             0726*  
0B064E 21 DE 06 0B 0727*      ld hl,str_iyu
0B0652 CD 73 02 0B 0728*      call printString
0B0656 2A 4E 07 0B 0729*      ld hl,(uiy)
0B065A CD 93 02 0B 0730*      call printHex24
0B065E             0731*      ; call printNewLine
0B065E             0732*  
0B065E             0733*      ; call vdu_vblank
0B065E             0734*  
0B065E CD 88 02 0B 0735*      call printNewLine
0B0662             0736*  ; restore everything
0B0662 2A 42 07 0B 0737*      ld hl, (uhl)
0B0666 ED 4B 45 07 0738*      ld bc, (ubc)
       0B          
0B066B ED 5B 48 07 0739*      ld de, (ude)
       0B          
0B0670 DD 2A 4B 07 0740*      ld ix, (uix)
       0B          
0B0675 FD 2A 4E 07 0741*      ld iy, (uiy)
       0B          
0B067A F1          0742*      pop af
0B067B             0743*  ; all done
0B067B C9          0744*      ret
0B067C             0745*  
0B067C             0746*  ; print hlu to screen in hexidecimal format
0B067C             0747*  ; inputs: none
0B067C             0748*  ; destroys: nothing
0B067C             0749*  print_hex_hl:
0B067C F5          0750*      push af
0B067D E5          0751*      push hl
0B067E 21 CA 06 0B 0752*      ld hl,str_hlu
0B0682 CD 73 02 0B 0753*      call printString
0B0686 E1          0754*      pop hl
0B0687 E5          0755*      push hl
0B0688 CD 93 02 0B 0756*      call printHex24
0B068C 3E 20       0757*      ld a,' '
0B068E 5B D7       0758*      rst.lil 10h
0B0690 E1          0759*      pop hl
0B0691 F1          0760*      pop af
0B0692 C9          0761*      ret
0B0693             0762*  
0B0693             0763*  ; print bcu to screen in hexidecimal format
0B0693             0764*  ; inputs: none
0B0693             0765*  ; destroys: nothing
0B0693             0766*  print_hex_bc:
0B0693 F5          0767*      push af
0B0694 E5          0768*      push hl
0B0695 C5          0769*      push bc
0B0696 21 CF 06 0B 0770*      ld hl,str_bcu
0B069A CD 73 02 0B 0771*      call printString
0B069E E1          0772*      pop hl
0B069F E5          0773*      push hl
0B06A0 CD 93 02 0B 0774*      call printHex24
0B06A4 3E 20       0775*      ld a,' '
0B06A6 5B D7       0776*      rst.lil 10h
0B06A8 C1          0777*      pop bc
0B06A9 E1          0778*      pop hl
0B06AA F1          0779*      pop af
0B06AB C9          0780*      ret
0B06AC             0781*  
0B06AC             0782*  ; print deu to screen in hexidecimal format
0B06AC             0783*  ; inputs: none
0B06AC             0784*  ; destroys: nothing
0B06AC             0785*  print_hex_de:
0B06AC F5          0786*      push af
0B06AD E5          0787*      push hl
0B06AE D5          0788*      push de
0B06AF 21 D4 06 0B 0789*      ld hl,str_deu
0B06B3 CD 73 02 0B 0790*      call printString
0B06B7 E1          0791*      pop hl
0B06B8 E5          0792*      push hl
0B06B9 CD 93 02 0B 0793*      call printHex24
0B06BD 3E 20       0794*      ld a,' '
0B06BF 5B D7       0795*      rst.lil 10h
0B06C1 D1          0796*      pop de
0B06C2 E1          0797*      pop hl
0B06C3 F1          0798*      pop af
0B06C4 C9          0799*      ret
0B06C5             0800*  
0B06C5 20 61 66 3D 0801*  str_afu: db " af=",0
       00          
0B06CA 20 68 6C 3D 0802*  str_hlu: db " hl=",0
       00          
0B06CF 20 62 63 3D 0803*  str_bcu: db " bc=",0
       00          
0B06D4 20 64 65 3D 0804*  str_deu: db " de=",0
       00          
0B06D9 20 69 78 3D 0805*  str_ixu: db " ix=",0
       00          
0B06DE 20 69 79 3D 0806*  str_iyu: db " iy=",0
       00          
0B06E3             0807*  
0B06E3             0808*  ; print udeuhl to screen in hexidecimal format
0B06E3             0809*  ; inputs: none
0B06E3             0810*  ; outputs: concatenated hexidecimal udeuhl
0B06E3             0811*  ; destroys: nothing
0B06E3             0812*  dumpUDEUHLHex:
0B06E3             0813*  ; store everything in scratch
0B06E3 22 42 07 0B 0814*      ld (uhl),hl
0B06E7 ED 43 45 07 0815*      ld (ubc),bc
       0B          
0B06EC ED 53 48 07 0816*      ld (ude),de
       0B          
0B06F1 DD 22 4B 07 0817*      ld (uix),ix
       0B          
0B06F6 FD 22 4E 07 0818*      ld (uiy),iy
       0B          
0B06FB F5          0819*      push af
0B06FC             0820*  
0B06FC             0821*  ; print each register
0B06FC             0822*  
0B06FC 21 36 07 0B 0823*      ld hl,str_udeuhl
0B0700 CD 73 02 0B 0824*      call printString
0B0704 2A 48 07 0B 0825*      ld hl,(ude)
0B0708 CD 93 02 0B 0826*      call printHex24
0B070C 3E 2E       0827*  	ld a,'.'	; print a dot to separate the values
0B070E 5B D7       0828*  	rst.lil 10h
0B0710 2A 42 07 0B 0829*      ld hl,(uhl)
0B0714 CD 93 02 0B 0830*      call printHex24
0B0718 CD 88 02 0B 0831*      call printNewLine
0B071C             0832*  
0B071C             0833*  ; restore everything
0B071C 2A 42 07 0B 0834*      ld hl, (uhl)
0B0720 ED 4B 45 07 0835*      ld bc, (ubc)
       0B          
0B0725 ED 5B 48 07 0836*      ld de, (ude)
       0B          
0B072A DD 2A 4B 07 0837*      ld ix, (uix)
       0B          
0B072F FD 2A 4E 07 0838*      ld iy, (uiy)
       0B          
0B0734 F1          0839*      pop af
0B0735             0840*  ; all done
0B0735 C9          0841*      ret
0B0736             0842*  
0B0736 75 64 65 2E 0843*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
0B073F             0844*  
0B073F             0845*  ; global scratch memory for registers
0B073F 00 00 00    0846*  uaf: dl 0
0B0742 00 00 00    0847*  uhl: dl 0
0B0745 00 00 00    0848*  ubc: dl 0
0B0748 00 00 00    0849*  ude: dl 0
0B074B 00 00 00    0850*  uix: dl 0
0B074E 00 00 00    0851*  uiy: dl 0
0B0751 00 00 00    0852*  usp: dl 0
0B0754 00 00 00    0853*  upc: dl 0
0B0757             0854*  
0B0757             0855*  ; inputs: whatever is in the flags register
0B0757             0856*  ; outputs: binary representation of flags
0B0757             0857*  ;          with a header so we know which is what
0B0757             0858*  ; destroys: nothing
0B0757             0859*  ; preserves: everything
0B0757             0860*  dumpFlags:
0B0757             0861*  ; first we curse zilog for not giving direct access to flags
0B0757 F5          0862*      push af ; this is so we can send it back unharmed
0B0758 F5          0863*      push af ; this is so we can pop it to hl
0B0759             0864*  ; store everything in scratch
0B0759 22 42 07 0B 0865*      ld (uhl),hl
0B075D ED 43 45 07 0866*      ld (ubc),bc
       0B          
0B0762 ED 53 48 07 0867*      ld (ude),de
       0B          
0B0767 DD 22 4B 07 0868*      ld (uix),ix
       0B          
0B076C FD 22 4E 07 0869*      ld (uiy),iy
       0B          
0B0771             0870*  ; next we print the header
0B0771 21 9D 07 0B 0871*      ld hl,@header
0B0775 CD 73 02 0B 0872*      call printString
0B0779 E1          0873*      pop hl ; flags are now in l
0B077A 7D          0874*      ld a,l ; flags are now in a
0B077B CD CA 04 0B 0875*      call printBin8
0B077F CD 88 02 0B 0876*  	call printNewLine
0B0783             0877*  ; restore everything
0B0783 2A 42 07 0B 0878*      ld hl, (uhl)
0B0787 ED 4B 45 07 0879*      ld bc, (ubc)
       0B          
0B078C ED 5B 48 07 0880*      ld de, (ude)
       0B          
0B0791 DD 2A 4B 07 0881*      ld ix, (uix)
       0B          
0B0796 FD 2A 4E 07 0882*      ld iy, (uiy)
       0B          
0B079B F1          0883*      pop af ; send her home the way she came
0B079C C9          0884*      ret
0B079D             0885*  ; Bit 7 (S): Sign flag
0B079D             0886*  ; Bit 6 (Z): Zero flag
0B079D             0887*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0B079D             0888*  ; Bit 4 (H): Half Carry flag
0B079D             0889*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0B079D             0890*  ; Bit 2 (PV): Parity/Overflow flag
0B079D             0891*  ; Bit 1 (N): Subtract flag
0B079D             0892*  ; Bit 0 (C): Carry flag
0B079D 53 5A 78 48 0893*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0B07A8             0894*  
0B07A8             0895*  ; set all the bits in the flag register
0B07A8             0896*  ; more of an academic exercise than anything useful
0B07A8             0897*  ; inputs; none
0B07A8             0898*  ; outputs; a=0,f=255
0B07A8             0899*  ; destroys: flags, hl
0B07A8             0900*  ; preserves: a, because why not
0B07A8             0901*  setAllFlags:
0B07A8 21 FF 00 00 0902*      ld hl,255
0B07AC 67          0903*      ld h,a ; four cycles to preserve a is cheap
0B07AD E5          0904*      push hl
0B07AE F1          0905*      pop af
0B07AF C9          0906*      ret
0B07B0             0907*  
0B07B0             0908*  ; reset all the bits in the flag register
0B07B0             0909*  ; unlike its inverse counterpart, this may actually be useful
0B07B0             0910*  ; inputs; none
0B07B0             0911*  ; outputs; a=0,f=0
0B07B0             0912*  ; destroys: flags, hl
0B07B0             0913*  ; preserves: a, because why not
0B07B0             0914*  resetAllFlags:
0B07B0 21 00 00 00 0915*      ld hl,0
0B07B4 67          0916*      ld h,a ; four cycles to preserve a is cheap
0B07B5 E5          0917*      push hl
0B07B6 F1          0918*      pop af
0B07B7 C9          0919*      ret
0B07B8             0920*  
0B07B8             0921*  ; wait until user presses a key
0B07B8             0922*  ; inputs: none
0B07B8             0923*  ; outputs: none
0B07B8             0924*  ; destroys: af,ix
0B07B8             0925*  waitKeypress:
0B07B8             0926*      MOSCALL mos_sysvars
0B07B8 3E 08       0001*M 			LD	A, function
0B07BA 5B CF       0002*M 			RST.L	08h
0B07BC AF          0927*      xor a ; zero out any prior keypresses
0B07BD DD 77 05    0928*      ld (ix+sysvar_keyascii),a
0B07C0             0929*  @loop:
0B07C0 DD 7E 05    0930*      ld a,(ix+sysvar_keyascii)
0B07C3 A7          0931*      and a
0B07C4 C0          0932*      ret nz
0B07C5 18 F9       0933*      jr @loop
0B07C7             0934*  
0B07C7             0935*  
0B07C7             0936*  ; print bytes from an address to the screen in hexidecimal format
0B07C7             0937*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0B07C7             0938*  ; outputs: values of each byte printed to screen separated by spaces
0B07C7             0939*  ; destroys: nothing
0B07C7             0940*  dumpMemoryHex:
0B07C7             0941*  ; save registers to the stack
0B07C7 C5          0942*      push bc
0B07C8 E5          0943*      push hl
0B07C9 F5          0944*      push af
0B07CA             0945*  
0B07CA             0946*  ; print the address and separator
0B07CA CD 93 02 0B 0947*      call printHex24
0B07CE 3E 3A       0948*      ld a,':'
0B07D0 5B D7       0949*      rst.lil 10h
0B07D2 3E 20       0950*      ld a,' '
0B07D4 5B D7       0951*      rst.lil 10h
0B07D6             0952*  
0B07D6             0953*  ; set b to be our loop counter
0B07D6 F1          0954*      pop af
0B07D7 47          0955*      ld b,a
0B07D8 E1          0956*      pop hl
0B07D9 E5          0957*      push hl
0B07DA F5          0958*      push af
0B07DB             0959*  @loop:
0B07DB             0960*  ; print the byte
0B07DB 7E          0961*      ld a,(hl)
0B07DC CD A1 02 0B 0962*      call printHex8
0B07E0             0963*  ; print a space
0B07E0 3E 20       0964*      ld a,' '
0B07E2 5B D7       0965*      rst.lil 10h
0B07E4 23          0966*      inc hl
0B07E5 10 F4       0967*      djnz @loop
0B07E7 CD 88 02 0B 0968*      call printNewLine
0B07EB             0969*  
0B07EB             0970*  ; restore everything
0B07EB F1          0971*      pop af
0B07EC E1          0972*      pop hl
0B07ED C1          0973*      pop bc
0B07EE             0974*  
0B07EE             0975*  ; all done
0B07EE C9          0976*      ret
0B07EF             0977*  
0B07EF             0978*  
0B07EF             0979*  ; print bytes from an address to the screen in binary format
0B07EF             0980*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0B07EF             0981*  ; outputs: values of each byte printed to screen separated by spaces
0B07EF             0982*  ; destroys: nothing
0B07EF             0983*  dumpMemoryBin:
0B07EF             0984*  ; save all registers to the stack
0B07EF F5          0985*      push af
0B07F0 C5          0986*      push bc
0B07F1 D5          0987*      push de
0B07F2 E5          0988*      push hl
0B07F3 DD E5       0989*      push ix
0B07F5 FD E5       0990*      push iy
0B07F7             0991*  
0B07F7             0992*  ; set b to be our loop counter
0B07F7 47          0993*      ld b,a
0B07F8             0994*  @loop:
0B07F8             0995*  ; print the byte
0B07F8 7E          0996*      ld a,(hl)
0B07F9 E5          0997*      push hl
0B07FA C5          0998*      push bc
0B07FB CD CA 04 0B 0999*      call printBin8
0B07FF C1          1000*      pop bc
0B0800             1001*  ; print a space
0B0800 3E 20       1002*      ld a,' '
0B0802 5B D7       1003*      rst.lil 10h
0B0804 E1          1004*      pop hl
0B0805 23          1005*      inc hl
0B0806 10 F0       1006*      djnz @loop
0B0808 CD 88 02 0B 1007*      call printNewLine
0B080C             1008*  
0B080C             1009*  ; restore everything
0B080C FD E1       1010*      pop iy
0B080E DD E1       1011*      pop ix
0B0810 E1          1012*      pop hl
0B0811 D1          1013*      pop de
0B0812 C1          1014*      pop bc
0B0813 F1          1015*      pop af
0B0814             1016*  ; all done
0B0814 C9          1017*      ret
0B0815             1018*  
0B0815             1019*  ; print bytes from an address to the screen in binary format
0B0815             1020*  ; with the bits of each byte in reverse order (lsb first)
0B0815             1021*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0B0815             1022*  ; outputs: values of each byte printed to screen separated by spaces
0B0815             1023*  ; destroys: nothing
0B0815             1024*  dumpMemoryBinRev:
0B0815             1025*  ; save all registers to the stack
0B0815 F5          1026*      push af
0B0816 C5          1027*      push bc
0B0817 D5          1028*      push de
0B0818 E5          1029*      push hl
0B0819 DD E5       1030*      push ix
0B081B FD E5       1031*      push iy
0B081D             1032*  
0B081D             1033*  ; set b to be our loop counter
0B081D 47          1034*      ld b,a
0B081E             1035*  @loop:
0B081E             1036*  ; print the byte
0B081E 7E          1037*      ld a,(hl)
0B081F E5          1038*      push hl
0B0820 C5          1039*      push bc
0B0821 CD EF 04 0B 1040*      call printBin8Rev
0B0825 C1          1041*      pop bc
0B0826             1042*  ; print a space
0B0826 3E 20       1043*      ld a,' '
0B0828 5B D7       1044*      rst.lil 10h
0B082A E1          1045*      pop hl
0B082B 23          1046*      inc hl
0B082C 10 F0       1047*      djnz @loop
0B082E CD 88 02 0B 1048*      call printNewLine
0B0832             1049*  
0B0832             1050*  ; restore everything
0B0832 FD E1       1051*      pop iy
0B0834 DD E1       1052*      pop ix
0B0836 E1          1053*      pop hl
0B0837 D1          1054*      pop de
0B0838 C1          1055*      pop bc
0B0839 F1          1056*      pop af
0B083A             1057*  ; all done
0B083A C9          1058*      ret
0B083B             0020       include "maths.inc"
0B083B             0001*  ; absolute value of hlu
0B083B             0002*  ; returns: abs(hlu), flags set according to the incoming sign of hlu:
0B083B             0003*  ;         s1,z0,pv0,n1,c0 if hlu was negative
0B083B             0004*  ;         s0,z1,pv0,n1,c0 if hlu was zero
0B083B             0005*  ;         s0,z0,pv0,n1,c0 if hlu was positive
0B083B             0006*  ; destroys: a
0B083B             0007*  hlu_abs:
0B083B 19          0008*      add hl,de
0B083C B7          0009*      or a
0B083D ED 52       0010*      sbc hl,de
0B083F FA 44 08 0B 0011*      jp m,@is_neg
0B0843 C9          0012*      ret         ; hlu is positive or zero so we're done
0B0844             0013*  @is_neg:
0B0844 F5          0014*      push af     ; otherwise, save current flags for return
0B0845 CD 4B 08 0B 0015*      call neg_hlu ; negate hlu
0B0849 F1          0016*      pop af      ; get back flags
0B084A C9          0017*      ret
0B084B             0018*  
0B084B             0019*  ; flip the sign of hlu
0B084B             0020*  ; inputs: hlu
0B084B             0021*  ; returns: 0-hlu, flags set appropriately for the result:
0B084B             0022*  ;         s1,z0,pv0,n1,c1 if result is negative
0B084B             0023*  ;         s0,z1,pv0,n1,c0 if result is zero
0B084B             0024*  ;         s0,z0,pv0,n1,c1 if result is positive
0B084B             0025*  ; destroys a
0B084B             0026*  neg_hlu:
0B084B D5          0027*      push de     ; save de
0B084C EB          0028*      ex de,hl    ; put hl into de
0B084D 21 00 00 00 0029*      ld hl,0     ; clear hl
0B0851 AF          0030*      xor a       ; clear carry
0B0852 ED 52       0031*      sbc hl,de   ; 0-hlu = -hlu
0B0854 D1          0032*      pop de      ; get de back
0B0855 C9          0033*      ret         ; easy peasy
0B0856             0034*  
0B0856             0035*  ;------------------------------------------------------------------------
0B0856             0036*  ; divide hlu by 2, inspired by above
0B0856             0037*  ;------------------------------------------------------------------------
0B0856             0038*  hlu_div2:
0B0856 22 E4 09 0B 0039*  	ld		(bitbuf1),hl
0B085A 21 E6 09 0B 0040*  	ld		hl,bitbuf1+2
0B085E CB 1E       0041*  	rr		(hl)
0B0860 2B          0042*  	dec		hl
0B0861 CB 1E       0043*  	rr		(hl)
0B0863 2B          0044*  	dec		hl
0B0864 CB 1E       0045*  	rr		(hl)
0B0866 23          0046*  	inc		hl
0B0867 23          0047*  	inc		hl
0B0868 2A E4 09 0B 0048*      ld hl,(bitbuf1)
0B086C C9          0049*      ret
0B086D             0050*  
0B086D             0051*  ; this is my little hack to divide by 16
0B086D             0052*  hlu_div16:
0B086D AF          0053*      xor a
0B086E 29          0054*      add hl,hl
0B086F 17          0055*      rla
0B0870 29          0056*      add hl,hl
0B0871 17          0057*      rla
0B0872 29          0058*      add hl,hl
0B0873 17          0059*      rla
0B0874 29          0060*      add hl,hl
0B0875 17          0061*      rla
0B0876 22 83 08 0B 0062*      ld (@scratch),hl
0B087A 32 86 08 0B 0063*      ld (@scratch+3),a
0B087E 2A 84 08 0B 0064*      ld hl,(@scratch+1)
0B0882 C9          0065*      ret
0B0883             0066*  @scratch: ds 4
0B0887             0067*  
0B0887             0068*  ; hlu signed division by 256
0B0887             0069*  ; returns: hlu / 256
0B0887             0070*  ; destroys: af
0B0887             0071*  hlu_sdiv256:
0B0887 AF          0072*      xor a ; assume hl is positive
0B0888 22 9E 08 0B 0073*      ld (@buffer),hl
0B088C             0074*      sign_hlu
0B088C 19          0001*M         add hl,de
0B088D B7          0002*M         or a
0B088E ED 52       0003*M         sbc hl,de
0B0890 F2 95 08 0B 0075*      jp p,@hl_pos
0B0894 3D          0076*      dec a
0B0895             0077*  @hl_pos:
0B0895 32 A1 08 0B 0078*      ld (@buffer+3),a
0B0899 2A 9F 08 0B 0079*      ld hl,(@buffer+1)
0B089D C9          0080*      ret
0B089E             0081*  @buffer: ds 4
0B08A2             0082*  
0B08A2             0083*  ; hlu 1 byte right shift, unsigned
0B08A2             0084*  ; returns: hlu / 256, fractional portion in a
0B08A2             0085*  ; destroys: af
0B08A2             0086*  hlu_udiv256:
0B08A2 AF          0087*  	xor a
0B08A3 32 B4 08 0B 0088*  	ld (@buffer+3),a
0B08A7 7D          0089*  	ld a,l ; save the fractional portion
0B08A8 22 B1 08 0B 0090*  	ld (@buffer),hl
0B08AC 2A B2 08 0B 0091*  	ld hl,(@buffer+1)
0B08B0 C9          0092*  	ret
0B08B1             0093*  @buffer: ds 4
0B08B5             0094*  
0B08B5             0095*      MACRO hlu_mul256
0B08B5             0096*          add hl,hl ; * 2
0B08B5             0097*          add hl,hl ; * 4
0B08B5             0098*          add hl,hl ; * 8
0B08B5             0099*          add hl,hl ; * 16
0B08B5             0100*          add hl,hl ; * 32
0B08B5             0101*          add hl,hl ; * 64
0B08B5             0102*          add hl,hl ; * 128
0B08B5             0103*          add hl,hl ; * 256
0B08B5             0104*      ENDMACRO
0B08B5             0105*  
0B08B5             0106*  ; compute the modulo of hlu by deu
0B08B5             0107*  ; outputs: hlu = hlu % deu
0B08B5             0108*  ; destroys: f, hl
0B08B5             0109*  hlu_mod:
0B08B5 B7          0110*  	or a ; clear carry
0B08B6             0111*  @loop:
0B08B6 ED 52       0112*      sbc hl,de
0B08B8 DA C0 08 0B 0113*      jp c, @end
0B08BC C3 B6 08 0B 0114*      jp @loop
0B08C0             0115*  @end:
0B08C0 19          0116*      add hl,de
0B08C1 C9          0117*  	ret
0B08C2             0118*  
0B08C2             0119*  
0B08C2 00 00 00 00 0120*  add_bcd_arg1: db #00,#00,#00,#00
0B08C6 00 00 00 00 0121*  add_bcd_arg2: db #00,#00,#00,#00
0B08CA             0122*  
0B08CA             0123*  ; set bcd values in a scratch memory address from registers bcde
0B08CA             0124*  ; input: hl; scratch address,bcde; 8-place bcd number
0B08CA             0125*  ; destroys ; hl
0B08CA             0126*  set_bcd:
0B08CA 73          0127*      ld (hl),e
0B08CB 23          0128*      inc hl
0B08CC 72          0129*      ld (hl),d
0B08CD 23          0130*      inc hl
0B08CE 71          0131*      ld (hl),c
0B08CF 23          0132*      inc hl
0B08D0 70          0133*      ld (hl),b
0B08D1 C9          0134*      ret
0B08D2             0135*  
0B08D2             0136*  ; load bcd values from a scratch memory address to bcde
0B08D2             0137*  ; input: hl; scratch address
0B08D2             0138*  ; output: bcde; 8-place bcd number
0B08D2             0139*  ; destroys: hl
0B08D2             0140*  get_bcd:
0B08D2 5E          0141*      ld e,(hl)
0B08D3 23          0142*      inc hl
0B08D4 56          0143*      ld d,(hl)
0B08D5 23          0144*      inc hl
0B08D6 4E          0145*      ld c,(hl)
0B08D7 23          0146*      inc hl
0B08D8 46          0147*      ld b,(hl)
0B08D9 C9          0148*      ret
0B08DA             0149*  
0B08DA             0150*  ; BCD addition
0B08DA             0151*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0B08DA             0152*  ;       a is the number of bytes holding each number (number of places/2)
0B08DA             0153*  ; outputs: (hl) + (de) --> (hl)
0B08DA             0154*  ; destroys: a,b,de,hl
0B08DA             0155*  add_bcd:
0B08DA 47          0156*      ld b,a ; loop counter
0B08DB AF          0157*      xor a ; reset a, clear carry flag
0B08DC             0158*  adcec:
0B08DC 1A          0159*      ld a,(de) ; addend to acc
0B08DD 8E          0160*      adc a,(hl) ; add (hl) to acc
0B08DE 27          0161*      daa ; adjust result to bcd
0B08DF 77          0162*      ld (hl),a ; store result
0B08E0 23          0163*      inc hl ; advance memory pointers
0B08E1 13          0164*      inc de
0B08E2 10 F8       0165*      djnz adcec ; loop until b == 0
0B08E4 C9          0166*      ret
0B08E5             0167*  
0B08E5             0168*  ; BCD subtraction
0B08E5             0169*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0B08E5             0170*  ;       a is the number of bytes holding each number (number of places/2)
0B08E5             0171*  ; outputs: (hl) - (de) --> (hl)
0B08E5             0172*  ; destroys: a,b,de,hl
0B08E5             0173*  sub_bcd:
0B08E5 47          0174*      ld b,a ; loop counter
0B08E6 AF          0175*      xor a ; reset a,clear carry flag
0B08E7             0176*  subdec:
0B08E7 1A          0177*      ld a,(de) ; subtrahend to acc
0B08E8 9E          0178*      sbc a,(hl) ; subtract (hl) from acc
0B08E9 27          0179*      daa ; adjust result to bcd
0B08EA 77          0180*      ld (hl),a ; store result
0B08EB 23          0181*      inc hl ; advance memory pointers
0B08EC 13          0182*      inc de
0B08ED 10 F8       0183*      djnz subdec ; loop until b == 0
0B08EF C9          0184*      ret
0B08F0             0185*  
0B08F0             0186*  ; http://www.z80.info/pseudo-random.txt
0B08F0             0187*  rand_8:
0B08F0 C5          0188*      push bc
0B08F1 3A 04 09 0B 0189*      ld a,(r_seed)
0B08F5 4F          0190*      ld c,a
0B08F6             0191*  
0B08F6 0F          0192*      rrca ; multiply by 32
0B08F7 0F          0193*      rrca
0B08F8 0F          0194*      rrca
0B08F9 EE 1F       0195*      xor 0x1f
0B08FB             0196*  
0B08FB 81          0197*      add a,c
0B08FC DE FF       0198*      sbc a,255 ; carry
0B08FE             0199*  
0B08FE 32 04 09 0B 0200*      ld (r_seed),a
0B0902 C1          0201*      pop bc
0B0903 C9          0202*      ret
0B0904 50          0203*  r_seed: defb $50
0B0905             0204*  
0B0905             0205*  ; linear interpolation between two 24-bit numbers
0B0905             0206*  ; may be signed or unsigned, and treated as integers or fractional
0B0905             0207*  ; inputs: bc = start value, de = end value, a = interpolation factor
0B0905             0208*  ; outputs: hl = interpolated value, a = multiply overflow to 32 bits (0 if no overflow)
0B0905             0209*  ; destroys: af, hl, de
0B0905             0210*  interpolate24:
0B0905 C5          0211*      push bc ; save start value
0B0906 EB          0212*      ex de,hl ; end value to hl
0B0907 B7          0213*      or a ; clear carry
0B0908 ED 42       0214*      sbc hl,bc ; hl = end - start
0B090A CD 19 0B 0B 0215*      call umul24x8 ; hl = (end - start) * interpolation factor
0B090E C1          0216*      pop bc ; get back start value (was hl)
0B090F 09          0217*      add hl,bc ; hl = start + (end - start) * interpolation factor
0B0910 C9          0218*      ret
0B0911             0021   	INCLUDE	"arith24.inc"
0B0911             0001*  ;------------------------------------------------------------------------
0B0911             0002*  ;  arith24.asm
0B0911             0003*  ;  24-bit ez80 arithmetic routines
0B0911             0004*  ;  Copyright (c) Shawn Sijnstra 2024
0B0911             0005*  ;  MIT license
0B0911             0006*  ;
0B0911             0007*  ;  This library was created as a tool to help make ez80
0B0911             0008*  ;  24-bit native assembly routines for simple mathematical problems
0B0911             0009*  ;  more widely available.
0B0911             0010*  ;
0B0911             0011*  ;------------------------------------------------------------------------
0B0911             0012*  
0B0911             0013*  ;------------------------------------------------------------------------
0B0911             0014*  ; umul24:	HL = HL*DE (unsigned)
0B0911             0015*  ; Preserves AF, BC, DE
0B0911             0016*  ; Uses a fast multiply routine.
0B0911             0017*  ;------------------------------------------------------------------------
0B0911             0018*  umul24:
0B0911 D5          0019*  	push	DE
0B0912 C5          0020*  	push	BC
0B0913 F5          0021*  	push	AF
0B0914 E5          0022*  	push	HL
0B0915 C1          0023*  	pop		BC
0B0916 3E 18       0024*      ld	 	a, 24 ; No. of bits to process
0B0918 21 00 00 00 0025*      ld	 	hl, 0 ; Result
0B091C             0026*  umul24_lp:
0B091C 29          0027*  	add	hl,hl
0B091D EB          0028*  	ex	de,hl
0B091E 29          0029*  	add	hl,hl
0B091F EB          0030*  	ex	de,hl
0B0920 30 01       0031*  	jr	nc,umul24_nc
0B0922 09          0032*  	add	hl,bc
0B0923             0033*  umul24_nc:
0B0923 3D          0034*  	dec	a
0B0924 20 F6       0035*  	jr	nz,umul24_lp
0B0926 F1          0036*  	pop	af
0B0927 C1          0037*  	pop	bc
0B0928 D1          0038*  	pop	de
0B0929 C9          0039*  	ret
0B092A             0040*  
0B092A             0041*  
0B092A             0042*  ;------------------------------------------------------------------------
0B092A             0043*  ; udiv24
0B092A             0044*  ; Unsigned 24-bit division
0B092A             0045*  ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
0B092A             0046*  ;
0B092A             0047*  ; Uses AF BC DE HL
0B092A             0048*  ; Uses Restoring Division algorithm
0B092A             0049*  ;------------------------------------------------------------------------
0B092A             0050*  
0B092A             0051*  udiv24:
0B092A E5          0052*  	push	hl
0B092B C1          0053*  	pop		bc	;move dividend to BCU
0B092C 21 00 00 00 0054*  	ld		hl,0	;result
0B0930 A7          0055*  	and		a
0B0931 ED 52       0056*  	sbc		hl,de	;test for div by 0
0B0933 C8          0057*  	ret		z		;it's zero, carry flag is clear
0B0934 19          0058*  	add		hl,de	;HL is 0 again
0B0935 3E 18       0059*  	ld		a,24	;number of loops through.
0B0937             0060*  udiv1:
0B0937 C5          0061*  	push	bc	;complicated way of doing this because of lack of access to top bits
0B0938 E3          0062*  	ex		(sp),hl
0B0939 37          0063*  	scf
0B093A ED 6A       0064*  	adc	hl,hl
0B093C E3          0065*  	ex	(sp),hl
0B093D C1          0066*  	pop	bc		;we now have bc = (bc * 2) + 1
0B093E             0067*  
0B093E ED 6A       0068*  	adc	hl,hl
0B0940 A7          0069*  	and	a		;is this the bug
0B0941 ED 52       0070*  	sbc	hl,de
0B0943 30 02       0071*  	jr	nc,udiv2
0B0945 19          0072*  	add	hl,de
0B0946             0073*  ;	dec	c
0B0946 0B          0074*  	dec	bc
0B0947             0075*  udiv2:
0B0947 3D          0076*  	dec	a
0B0948 20 ED       0077*  	jr	nz,udiv1
0B094A 37          0078*  	scf		;flag used for div0 error
0B094B C5          0079*  	push	bc
0B094C D1          0080*  	pop		de	;remainder
0B094D C9          0081*  	ret
0B094E             0082*  
0B094E             0083*  
0B094E             0084*  
0B094E             0085*  ;------------------------------------------------------------------------
0B094E             0086*  ; neg24
0B094E             0087*  ; Returns: HLU = 0-HLU
0B094E             0088*  ; preserves all other registers
0B094E             0089*  ;------------------------------------------------------------------------
0B094E             0090*  neg24:
0B094E D5          0091*  	push	de
0B094F EB          0092*  	ex		de,hl
0B0950 21 00 00 00 0093*  	ld		hl,0
0B0954 B7          0094*  	or		a
0B0955 ED 52       0095*  	sbc		hl,de
0B0957 D1          0096*  	pop		de
0B0958 C9          0097*  	ret
0B0959             0098*  
0B0959             0099*  ;------------------------------------------------------------------------
0B0959             0100*  ; or_hlu_deu: 24 bit bitwise OR
0B0959             0101*  ; Returns: hlu = hlu OR deu
0B0959             0102*  ; preserves all other registers
0B0959             0103*  ;------------------------------------------------------------------------
0B0959             0104*  or_hlu_deu:
0B0959 22 E4 09 0B 0105*  	ld	(bitbuf1),hl
0B095D ED 53 E7 09 0106*  	ld	(bitbuf2),de
       0B          
0B0962 D5          0107*  	push	de	;preserve DEU
0B0963 C5          0108*  	push	bc	;preserve BCU
0B0964 06 03       0109*  	ld		b,3
0B0966 21 E4 09 0B 0110*  	ld	hl,bitbuf1
0B096A 11 E4 09 0B 0111*  	ld	de,bitbuf1
0B096E             0112*  orloop_24:
0B096E 1A          0113*  	ld	a,(de)
0B096F B6          0114*  	or	(hl)
0B0970 12          0115*  	ld	(de),a
0B0971 13          0116*  	inc	de
0B0972 23          0117*  	inc	hl
0B0973 10 F9       0118*  	djnz	orloop_24
0B0975 2A E7 09 0B 0119*  	ld	hl,(bitbuf2)
0B0979 C1          0120*  	pop		bc	;restore BC
0B097A D1          0121*  	pop		de	;restore DE
0B097B             0122*  
0B097B             0123*  ;------------------------------------------------------------------------
0B097B             0124*  ; and_hlu_deu: 24 bit bitwise AND
0B097B             0125*  ; Returns: hlu = hlu AND deu
0B097B             0126*  ; preserves all other registers
0B097B             0127*  ;------------------------------------------------------------------------
0B097B             0128*  and_hlu_deu:
0B097B 22 E4 09 0B 0129*  	ld	(bitbuf1),hl
0B097F ED 53 E7 09 0130*  	ld	(bitbuf2),de
       0B          
0B0984 D5          0131*  	push	de	;preserve DEU
0B0985 C5          0132*  	push	bc	;preserve BCU
0B0986 06 03       0133*  	ld		b,3
0B0988 21 E4 09 0B 0134*  	ld	hl,bitbuf1
0B098C 11 E4 09 0B 0135*  	ld	de,bitbuf1
0B0990             0136*  andloop_24:
0B0990 1A          0137*  	ld	a,(de)
0B0991 A6          0138*  	and	(hl)
0B0992 12          0139*  	ld	(de),a
0B0993 13          0140*  	inc	de
0B0994 23          0141*  	inc	hl
0B0995 10 F9       0142*  	djnz	andloop_24
0B0997 2A E7 09 0B 0143*  	ld	hl,(bitbuf2)
0B099B C1          0144*  	pop		bc	;restore BC
0B099C D1          0145*  	pop		de	;restore DE
0B099D             0146*  
0B099D             0147*  ;------------------------------------------------------------------------
0B099D             0148*  ; xor_hlu_deu: 24 bit bitwise XOR
0B099D             0149*  ; Returns: hlu = hlu XOR deu
0B099D             0150*  ; preserves all other registers
0B099D             0151*  ;------------------------------------------------------------------------
0B099D             0152*  xor_hlu_deu:
0B099D 22 E4 09 0B 0153*  	ld	(bitbuf1),hl
0B09A1 ED 53 E7 09 0154*  	ld	(bitbuf2),de
       0B          
0B09A6 D5          0155*  	push	de	;preserve DEU
0B09A7 C5          0156*  	push	bc	;preserve BCU
0B09A8 06 03       0157*  	ld		b,3
0B09AA 21 E4 09 0B 0158*  	ld	hl,bitbuf1
0B09AE 11 E4 09 0B 0159*  	ld	de,bitbuf1
0B09B2             0160*  xorloop_24:
0B09B2 1A          0161*  	ld	a,(de)
0B09B3 AE          0162*  	xor	(hl)
0B09B4 12          0163*  	ld	(de),a
0B09B5 13          0164*  	inc	de
0B09B6 23          0165*  	inc	hl
0B09B7 10 F9       0166*  	djnz	xorloop_24
0B09B9 2A E7 09 0B 0167*  	ld	hl,(bitbuf2)
0B09BD C1          0168*  	pop		bc	;restore BC
0B09BE D1          0169*  	pop		de	;restore DE
0B09BF             0170*  
0B09BF             0171*  ;------------------------------------------------------------------------
0B09BF             0172*  ; shl_hlu: 24 bit shift left hlu by deu positions
0B09BF             0173*  ; Returns: hlu = hlu << deu
0B09BF             0174*  ;		   de = 0
0B09BF             0175*  ; NOTE: only considers deu up to 16 bits.
0B09BF             0176*  ; preserves all other registers
0B09BF             0177*  ;------------------------------------------------------------------------
0B09BF             0178*  shl_hlu:
0B09BF 7A          0179*  	ld		a,d		;up to 16 bit.
0B09C0 B3          0180*  	or		e
0B09C1 C8          0181*  	ret		z		;we're done
0B09C2 29          0182*  	add		hl,hl	;shift HLU left
0B09C3 1B          0183*  	dec		de
0B09C4 18 F9       0184*  	jr		shl_hlu
0B09C6             0185*  
0B09C6             0186*  ;------------------------------------------------------------------------
0B09C6             0187*  ; shr_hlu: 24 bit shift right hlu by deu positions
0B09C6             0188*  ; Returns: hlu = hlu >> deu
0B09C6             0189*  ;		   de = 0
0B09C6             0190*  ; NOTE: only considers deu up to 16 bits.
0B09C6             0191*  ; preserves all other registers
0B09C6             0192*  ;------------------------------------------------------------------------
0B09C6             0193*  shr_hlu:
0B09C6 22 E4 09 0B 0194*  	ld		(bitbuf1),hl
0B09CA 21 E6 09 0B 0195*  	ld		hl,bitbuf1+2
0B09CE             0196*  shr_loop:
0B09CE 7A          0197*  	ld		a,d		;up to 16 bit.
0B09CF B3          0198*  	or		e
0B09D0 28 0D       0199*  	jr		z,shr_done		;we're done
0B09D2             0200*  ;carry is clear from or instruction
0B09D2 CB 1E       0201*  	rr		(hl)
0B09D4 2B          0202*  	dec		hl
0B09D5 CB 1E       0203*  	rr		(hl)
0B09D7 2B          0204*  	dec		hl
0B09D8 CB 1E       0205*  	rr		(hl)
0B09DA 23          0206*  	inc		hl
0B09DB 23          0207*  	inc		hl
0B09DC 1B          0208*  	dec		de
0B09DD 18 EF       0209*  	jr		shr_loop
0B09DF             0210*  shr_done:
0B09DF 2A E4 09 0B 0211*  	ld		hl,(bitbuf1)	;collect result
0B09E3 C9          0212*  	ret
0B09E4             0213*  
0B09E4             0214*  ;------------------------------------------------------------------------
0B09E4             0215*  ; Scratch area for calculations
0B09E4             0216*  ;------------------------------------------------------------------------
0B09E4 00 00 00    0217*  bitbuf1:	dw24	0	;bit manipulation buffer 1
0B09E7 00 00 00    0218*  bitbuf2:	dw24	0	;bit manipulation buffer 2
0B09EA             0022       include "fixed24.inc"
0B09EA             0001*  arith24uaf: ds 6
0B09F0             0002*  arith24uhl: ds 6
0B09F6             0003*  arith24ubc: ds 6
0B09FC             0004*  arith24ude: ds 6
0B0A02             0005*  arith24uix: ds 6
0B0A08             0006*  arith24uiy: ds 6
0B0A0E             0007*  arith24usp: ds 6
0B0A14             0008*  arith24upc: ds 6
0B0A1A             0009*  
0B0A1A             0010*  ; write hlu to a 54-bit output buffer arithmetically shifted up or down a specified number of bits
0B0A1A             0011*  ; uses whole-byte shifts for the initial shift and bit shifts for the remainder
0B0A1A             0012*  ; inputs: hlu = 24-bit number to shift
0B0A1A             0013*  ;         a = signed number of bits to shift
0B0A1A             0014*  ;         ix = output buffer address
0B0A1A             0015*  ; outputs: hlu = shifted 24-bit number, ix = modified pointer aligned with value in hlu
0B0A1A             0016*  shift_hlu:
0B0A1A C5          0017*      push bc ; preserve
0B0A1B 47          0018*      ld b,a            ; store shift value in b for later
0B0A1C             0019*  
0B0A1C             0020*  ; Initialize DE to zero and clear output buffer
0B0A1C 11 00 00 00 0021*      ld de, 0
0B0A20 DD 1F FD    0022*      ld (ix-3), de
0B0A23 DD 1F 03    0023*      ld (ix+3), de
0B0A26             0024*  
0B0A26             0025*  ; Get absolute value of a and save its original sign
0B0A26 B7          0026*      or a
0B0A27 F5          0027*      push af ; save sign flag
0B0A28 F2 2E 0A 0B 0028*      jp p,@F ; If a is positive do nothing
0B0A2C ED 44       0029*      neg ; If a is negative, negate it
0B0A2E             0030*  @@:
0B0A2E             0031*  
0B0A2E             0032*  ; Write abs(HLU) to the output buffer and save its original sign
0B0A2E CD 3B 08 0B 0033*      call hlu_abs
0B0A32 F5          0034*      push af ; save sign of HLU
0B0A33 DD 2F 00    0035*      ld (ix), hl
0B0A36             0036*  
0B0A36             0037*  ; Divide bits to shift by 8 to get the whole byte shift and bit remainder
0B0A36 78          0038*      ld a,b            ; Restore original shift value into 'a'
0B0A37 CB 3F       0039*      srl a             ; a = a / 2 (shift right 1 bit)
0B0A39 CB 3F       0040*      srl a             ; a = a / 4 (shift right another bit)
0B0A3B CB 3F       0041*      srl a             ; a = a / 8 (final shift for division by 8)
0B0A3D 4F          0042*      ld c,a            ; c holds the number of whole bytes to shift
0B0A3E             0043*  
0B0A3E             0044*  ; Calculate remainder of a (original shift) mod 8
0B0A3E E6 07       0045*      and 0x07          ; Mask with 0x07 to get the remainder (bits to shift back up)
0B0A40 47          0046*      ld b,a            ; 'b' now holds the number of bits to shift back up
0B0A41 11 00 00 00 0047*      ld de,0           ; Clear deu for computing the offset address later
0B0A45             0048*  
0B0A45             0049*      ; call dumpRegistersHex ; DEBUG
0B0A45             0050*  
0B0A45             0051*  ; Get back the original sign of the byte shift
0B0A45 F1          0052*      pop af            ; Restore sign flag
0B0A46 F2 54 0A 0B 0053*      jp p,@F           ; If a was positive, we're done
0B0A4A 79          0054*      ld a,c            ; 'a' now holds the number of whole bytes to shift
0B0A4B ED 44       0055*      neg               ; Negate the number of whole bytes to shift
0B0A4D 3D          0056*      dec a             ; Subtract 1 because that's just how this works
0B0A4E 4F          0057*      ld c,a            ; 'c' now holds the number of whole bytes to shift
0B0A4F 1B          0058*      dec de            ; DE = -1 to make the signed addition below work
0B0A50 3E 08       0059*      ld a,8            ; Subtract bits to shift from 8 because we're in backwards land
0B0A52 90          0060*      sub b
0B0A53 47          0061*      ld b,a            ; b is the number of bits to shift back up
0B0A54             0062*  
0B0A54             0063*      ; call dumpRegistersHex ; DEBUG
0B0A54             0064*  
0B0A54             0065*  @@:
0B0A54             0066*  
0B0A54             0067*  ; Add the byte offset to the base address of output buffer
0B0A54 59          0068*      ld e,c            ; DEU and D were properly signed above
0B0A55 DD 19       0069*      add ix,de         ; Add byte-aligned offset (hl = output buffer + l)
0B0A57             0070*  
0B0A57             0071*      ; call dumpRegistersHex ; DEBUG
0B0A57             0072*  
0B0A57             0073*  ; Read the byte-aligned result into HL and shift in the required number of bits
0B0A57 DD 27 00    0074*      ld hl,(ix)        ; Byte-aligned result
0B0A5A             0075*  
0B0A5A CD DF 05 0B 0076*      call dumpRegistersHex ; DEBUG
0B0A5E             0077*  
0B0A5E             0078*  ; Check whether we're already byte-aligned
0B0A5E AF          0079*      xor a
0B0A5F B0          0080*      or b
0B0A60 28 10       0081*      jr z,@end         ; If no bits to shift, we're done
0B0A62             0082*  
0B0A62             0083*  ; Otherwise shiften zee bitzen
0B0A62 DD 7E FF    0084*      ld a,(ix-1)       ; read one byte below for the bits to shift into HLU
0B0A65             0085*  @loop:
0B0A65 07          0086*      rlca              ; One bit to carry
0B0A66             0087*  
0B0A66 CD 57 07 0B 0088*      call dumpFlags ; DEBUG
0B0A6A             0089*  
0B0A6A ED 6A       0090*      adc hl,hl         ; Shift the carry into the result
0B0A6C             0091*  
0B0A6C CD DF 05 0B 0092*      call dumpRegistersHex ; DEBUG
0B0A70             0093*  
0B0A70 10 F3       0094*      djnz @loop        ; Loop until all bits are shifted up
0B0A72             0095*  
0B0A72             0096*  @end:
0B0A72             0097*  
0B0A72 CD DF 05 0B 0098*      call dumpRegistersHex ; DEBUG
0B0A76             0099*  
0B0A76             0100*  ; get back HLU's original sign and negate if necessary
0B0A76 F1          0101*      pop af
0B0A77 F2 7F 0A 0B 0102*      jp p,@F
0B0A7B CD 4B 08 0B 0103*      call neg_hlu
0B0A7F             0104*  @@:
0B0A7F             0105*  ; return the result
0B0A7F DD 2F 00    0106*      ld (ix),hl        ; Store the shifted result
0B0A82 C1          0107*      pop bc              ; Restore BC
0B0A83 C9          0108*      ret
0B0A84             0109*  
0B0A84             0110*  ; operation: UHL * UDE --> UHL
0B0A84             0111*  ; multiply unsigned 24-bit numbers and return a 48-bit intermediate
0B0A84             0112*  ; with inputs and outputs having an arbitrary number of fractional bits from 0 to 24
0B0A84             0113*  ; inputs: hl = 24-bit number, de = 24-bit number,
0B0A84             0114*  ;         b = hl fractional bits, c = de fractional bits, a = output fractional bits
0B0A84             0115*  ; outputs: umulfxout = 48-bit intermediate
0B0A84             0116*  ; destroys: af, hl, bc, de
0B0A84             0117*  umulfx:
0B0A84 DD E5       0118*      push ix ; preserve
0B0A86 F5          0119*      push af ; need later
0B0A87             0120*  
0B0A87             0121*  ; do the multiplication
0B0A87 CD 48 0B 0B 0122*      call umul24x24
0B0A8B             0123*      ; DEBUG
0B0A8B 21 DD 0A 0B 0124*      ld hl,umulfxout ; point to output buffer
0B0A8F 3E 06       0125*      ld a,6 ; 6 bytes to print
0B0A91 CD C7 07 0B 0126*      call dumpMemoryHex ; print the result
0B0A95             0127*      ; END DEBUG
0B0A95             0128*  
0B0A95             0129*  ; shift the result to the required output precision
0B0A95 78          0130*      ld a,b
0B0A96 81          0131*      add a,c ; a is left shift from the multiplication
0B0A97 C1          0132*      pop bc ; b is the output precision (was a)
0B0A98 90          0133*      sub b ; a is the net shift of the output
0B0A99             0134*  
0B0A99             0135*  ; Get absolute value of a and save its original sign
0B0A99 B7          0136*      or a
0B0A9A F5          0137*      push af ; save sign flag
0B0A9B F2 A1 0A 0B 0138*      jp p,@F ; If a is positive do nothing
0B0A9F ED 44       0139*      neg ; If a is negative, negate it
0B0AA1             0140*  @@:
0B0AA1             0141*  
0B0AA1             0142*  ; Divide a by 8 to get the whole byte shift and bit remainder
0B0AA1 47          0143*      ld b,a            ; Store 'a' temporarily in 'b' (net shift)
0B0AA2 CB 3F       0144*      srl a             ; a = a / 2 (shift right 1 bit)
0B0AA4 CB 3F       0145*      srl a             ; a = a / 4 (shift right another bit)
0B0AA6 CB 3F       0146*      srl a             ; a = a / 8 (final shift for division by 8)
0B0AA8 4F          0147*      ld c,a            ; c holds the number of whole bytes to shift
0B0AA9             0148*  
0B0AA9             0149*  ; Calculate remainder of a (original shift) mod 8
0B0AA9 78          0150*      ld a,b            ; Restore original shift value into 'a'
0B0AAA E6 07       0151*      and 0x07          ; Mask with 0x07 to get the remainder (bits to shift back up)
0B0AAC 47          0152*      ld b,a            ; 'b' now holds the number of bits to shift back up
0B0AAD 11 00 00 00 0153*      ld de,0           ; Clear deu for computing the offset address later
0B0AB1             0154*  
0B0AB1             0155*      ; call dumpRegistersHex ; DEBUG
0B0AB1             0156*  
0B0AB1             0157*  ; Get back the original sign of the byte shift
0B0AB1 F1          0158*      pop af            ; Restore sign flag
0B0AB2 F2 C0 0A 0B 0159*      jp p,@F           ; If a was positive, we're done
0B0AB6 79          0160*      ld a,c            ; 'a' now holds the number of whole bytes to shift
0B0AB7 ED 44       0161*      neg               ; Negate the number of whole bytes to shift
0B0AB9 3D          0162*      dec a             ; Subtract 1 because that's just how this works
0B0ABA 4F          0163*      ld c,a            ; 'c' now holds the number of whole bytes to shift
0B0ABB 1B          0164*      dec de            ; DE = -1 to make the signed addition below work
0B0ABC 3E 08       0165*      ld a,8            ; Subtract bits to shift from 8 because we're in backwards land
0B0ABE 90          0166*      sub b
0B0ABF 47          0167*      ld b,a            ; b is the number of bits to shift back up
0B0AC0             0168*  
0B0AC0             0169*      ; call dumpRegistersHex ; DEBUG
0B0AC0             0170*  
0B0AC0             0171*  @@:
0B0AC0             0172*  
0B0AC0             0173*  ; Add the byte offset to the base address of umulfxout
0B0AC0 59          0174*      ld e,c            ; DEU and D were properly signed above
0B0AC1 DD 21 DD 0A 0175*      ld ix,umulfxout   ; Load base address of the output buffer
       0B          
0B0AC6 DD 19       0176*      add ix,de         ; Add byte-aligned offset (hl = umulfxout + l)
0B0AC8             0177*  
0B0AC8             0178*      ; call dumpRegistersHex ; DEBUG
0B0AC8             0179*  
0B0AC8             0180*  ; Read the byte-aligned result into HL and shift in the required number of bits
0B0AC8 DD 27 00    0181*      ld hl,(ix)        ; Byte-aligned result
0B0ACB DD 7E FF    0182*      ld a,(ix-1)       ; One byte below
0B0ACE             0183*  
0B0ACE             0184*  ; Check whether we're already byte-aligned
0B0ACE AF          0185*      xor a
0B0ACF B0          0186*      or b
0B0AD0 28 05       0187*      jr z,@end         ; If no bits to shift, we're done
0B0AD2             0188*  
0B0AD2             0189*  ; Otherwise shiften zee bitzen
0B0AD2             0190*  @loop:
0B0AD2             0191*  
0B0AD2             0192*      ; call dumpRegistersHex ; DEBUG
0B0AD2             0193*  
0B0AD2 07          0194*      rlca              ; One bit to carry
0B0AD3 ED 6A       0195*      adc hl,hl         ; Shift the carry into the result
0B0AD5             0196*  
0B0AD5 10 FB       0197*      djnz @loop        ; Loop until all bits are shifted up
0B0AD7             0198*  
0B0AD7             0199*  @end:
0B0AD7             0200*  ; return the result
0B0AD7 DD E1       0201*      pop ix ; restore
0B0AD9 C9          0202*      ret
0B0ADA             0203*  
0B0ADA 00 00 00    0204*      dl 0 ; padding
0B0ADD 00 00 00 00 0205*  umulfxout: blkb 6,0
       00 00       
0B0AE3 00 00 00    0206*      dl 0 ; padding
0B0AE6             0207*  
0B0AE6             0208*  ; operation: UHL * UDE --> UHL
0B0AE6             0209*  ; multiply signed 24-bit numbers and return a 48-bit intermediate
0B0AE6             0210*  ; with inputs and outputs having an arbitrary number of fractional bits from 0 to 24
0B0AE6             0211*  ; inputs: hl = 24-bit number, de = 24-bit number,
0B0AE6             0212*  ;         b = hl fractional bits, c = de fractional bits, a = output fractional bits
0B0AE6             0213*  ; outputs: umulfxout = 48-bit intermediate
0B0AE6             0214*  ; destroys: af, hl, bc, de
0B0AE6             0215*  smulfx:
0B0AE6             0216*  ; make everything positive and store sign flags
0B0AE6 CD 3B 08 0B 0217*  	call hlu_abs
0B0AEA F5          0218*  	push af
0B0AEB EB          0219*  	ex de,hl
0B0AEC CD 3B 08 0B 0220*  	call hlu_abs
0B0AF0 EB          0221*  	ex de,hl
0B0AF1 F5          0222*  	push af
0B0AF2             0223*  ; do the division
0B0AF2 CD 84 0A 0B 0224*      call umulfx ; hl = product
0B0AF6             0225*  ; adjust sign of result
0B0AF6 F1          0226*  	pop af ; sign de
0B0AF7 FA 02 0B 0B 0227*  	jp m,@de_neg
0B0AFB F1          0228*  	pop af ; sign hl
0B0AFC F0          0229*  	ret p ; both positive, nothing to do
0B0AFD             0230*  @hl_neg:
0B0AFD CD 4B 08 0B 0231*      call neg_hlu ; de pos, hl neg, result is negative
0B0B01 C9          0232*      ret
0B0B02             0233*  @de_neg:
0B0B02 F1          0234*  	pop af
0B0B03 F8          0235*  	ret m ; both negative, nothing to do
0B0B04 CD 4B 08 0B 0236*  	call neg_hlu ; result is negative
0B0B08 C9          0237*  	ret
0B0B09             0238*  
0B0B09             0239*  ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
0B0B09             0240*  ; uses EZ80 MLT instruction for speed
0B0B09             0241*  ; operation: UHL * A --> UHL
0B0B09             0242*  ; destroys: AF, HL
0B0B09             0243*  smul24x8:
0B0B09             0244*  ; make hl positive and store sign flag
0B0B09 CD 3B 08 0B 0245*  	call hlu_abs
0B0B0D F5          0246*  	push af
0B0B0E             0247*  ; do the division
0B0B0E CD 19 0B 0B 0248*      call umul24x8 ; hl = product
0B0B12             0249*  ; adjust sign of result
0B0B12 F1          0250*  	pop af ; sign de
0B0B13 F0          0251*  	ret p ; hl was positive, nothing to do
0B0B14 CD 4B 08 0B 0252*  	call neg_hlu ; result is negative
0B0B18 C9          0253*  	ret
0B0B19             0254*  
0B0B19             0255*  ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
0B0B19             0256*  ; uses EZ80 MLT instruction for speed
0B0B19             0257*  ; operation: UHL * A --> AUHL
0B0B19             0258*  ; destroys: AF, HL
0B0B19             0259*  umul24x8:
0B0B19 D5          0260*  	push de ; preserve de
0B0B1A             0261*  ; low byte
0B0B1A 5D          0262*  	ld e,l
0B0B1B 57          0263*  	ld d,a
0B0B1C ED 5C       0264*  	mlt de
0B0B1E 6B          0265*  	ld l,e ; product low byte
0B0B1F 08          0266*  	ex af,af' ; save multiplier
0B0B20 7A          0267*  	ld a,d ; carry
0B0B21 08          0268*  	ex af,af' ; save carry, restore multiplier
0B0B22             0269*  ; high byte
0B0B22 5C          0270*  	ld e,h
0B0B23 57          0271*  	ld d,a
0B0B24 ED 5C       0272*  	mlt de
0B0B26 08          0273*  	ex af,af' ; save multiplier, restore carry
0B0B27 83          0274*  	add a,e ; add carry
0B0B28 67          0275*  	ld h,a ; product middle byte
0B0B29 7A          0276*  	ld a,d ; carry
0B0B2A 08          0277*  	ex af,af' ; save carry, restore multiplier
0B0B2B             0278*  ; upper byte
0B0B2B E5          0279*  	push hl
0B0B2C 33          0280*  	inc sp
0B0B2D D1          0281*  	pop de ; d = hlu
0B0B2E 3B          0282*  	dec sp
0B0B2F 5F          0283*  	ld e,a
0B0B30 ED 5C       0284*  	mlt de
0B0B32 08          0285*  	ex af,af' ; restore carry
0B0B33 8B          0286*  	adc a,e ; add carry
0B0B34 22 45 0B 0B 0287*      ld (@scratch),hl ; 7 cycles
0B0B38 32 47 0B 0B 0288*      ld (@scratch+2),a ; 5 cycles
0B0B3C 2A 45 0B 0B 0289*      ld hl,(@scratch) ; 7 cycles
0B0B40             0290*  ; highest byte
0B0B40 3E 00       0291*  	ld a,0 ; preserve carry flag
0B0B42 8A          0292*  	adc a,d ; product highest byte
0B0B43 D1          0293*  	pop de ; restore de
0B0B44 C9          0294*  	ret
0B0B45             0295*  @scratch: ds 3
0B0B48             0296*  
0B0B48             0297*  ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
0B0B48             0298*  ; operation: UHL * UDE --> umulfxout
0B0B48             0299*  umul24x24:
0B0B48 FD 21 DD 0A 0300*  	ld iy,umulfxout ; point to output buffer
       0B          
0B0B4D C5          0301*  	push bc
0B0B4E 01 00 00 00 0302*  	ld bc,0
0B0B52 FD 0F 00    0303*  	ld (iy),bc
0B0B55 FD 0F 03    0304*  	ld (iy+3),bc
0B0B58 C1          0305*  	pop bc
0B0B59             0306*  
0B0B59             0307*  ; STEP 1: UHL * E
0B0B59 7B          0308*  	ld a,e
0B0B5A E5          0309*  	push hl
0B0B5B CD 19 0B 0B 0310*  	call umul24x8
0B0B5F FD 2F 00    0311*  	ld (iy+0),hl
0B0B62 FD 77 03    0312*  	ld (iy+3),a
0B0B65             0313*  
0B0B65             0314*  ; STEP 2: UHL * D
0B0B65 E1          0315*  	pop hl
0B0B66 E5          0316*  	push hl
0B0B67 7A          0317*  	ld a,d
0B0B68 CD 19 0B 0B 0318*  	call umul24x8
0B0B6C CD 79 0B 0B 0319*  	call @accumulate
0B0B70             0320*  
0B0B70             0321*  ; STEP 3: UHL * DEU
0B0B70 E1          0322*  	pop hl
0B0B71 D5          0323*  	push de
0B0B72 33          0324*  	inc sp
0B0B73 F1          0325*  	pop af
0B0B74 3B          0326*  	dec sp
0B0B75 CD 19 0B 0B 0327*  	call umul24x8
0B0B79             0328*  
0B0B79             0329*  @accumulate:
0B0B79 FD 23       0330*  	inc iy
0B0B7B             0331*  ; highest byte of product to carry
0B0B7B FD 77 03    0332*  	ld (iy+3),a
0B0B7E             0333*  ; low byte of product
0B0B7E 7D          0334*  	ld a,l
0B0B7F FD 86 00    0335*  	add a,(iy+0)
0B0B82 FD 77 00    0336*  	ld (iy+0),a
0B0B85             0337*  ; high byte of product
0B0B85 7C          0338*  	ld a,h
0B0B86 FD 8E 01    0339*  	adc a,(iy+1)
0B0B89 FD 77 01    0340*  	ld (iy+1),a
0B0B8C             0341*  ; uppper byte of product
0B0B8C E5          0342*  	push hl
0B0B8D 33          0343*  	inc sp
0B0B8E E1          0344*  	pop hl
0B0B8F 3B          0345*  	dec sp
0B0B90 7C          0346*  	ld a,h
0B0B91 FD 8E 02    0347*  	adc a,(iy+2)
0B0B94 FD 77 02    0348*  	ld (iy+2),a
0B0B97             0349*  ; carry
0B0B97 3E 00       0350*  	ld a,0 ; preserve flags
0B0B99 FD 8E 03    0351*  	adc a,(iy+3)
0B0B9C FD 77 03    0352*  	ld (iy+3),a
0B0B9F C9          0353*  	ret
0B0BA0             0354*  
0B0BA0             0355*  ; umul168:	UH.L = UH.L*UD.E (unsigned)
0B0BA0             0356*  umul168:
0B0BA0 CD 48 0B 0B 0357*  	call umul24x24
0B0BA4 FD 27 FF    0358*  	ld hl,(iy-1)
0B0BA7 C9          0359*  	ret
0B0BA8             0360*  
0B0BA8             0361*  ; smul168:	UH.L * UD.E --> UH.L (signed)
0B0BA8             0362*  smul168:
0B0BA8             0363*  ; make everything positive and store sign flags
0B0BA8 CD 3B 08 0B 0364*  	call hlu_abs
0B0BAC F5          0365*  	push af
0B0BAD EB          0366*  	ex de,hl
0B0BAE CD 3B 08 0B 0367*  	call hlu_abs
0B0BB2 EB          0368*  	ex de,hl
0B0BB3 F5          0369*  	push af
0B0BB4             0370*  ; do the division
0B0BB4 CD A0 0B 0B 0371*      call umul168 ; hl = product
0B0BB8             0372*  ; adjust sign of result
0B0BB8 F1          0373*  	pop af ; sign de
0B0BB9 FA C4 0B 0B 0374*  	jp m,@de_neg
0B0BBD F1          0375*  	pop af ; sign hl
0B0BBE F0          0376*  	ret p ; both positive, nothing to do
0B0BBF             0377*  @hl_neg:
0B0BBF CD 4B 08 0B 0378*      call neg_hlu ; de pos, hl neg, result is negative
0B0BC3 C9          0379*      ret
0B0BC4             0380*  @de_neg:
0B0BC4 F1          0381*  	pop af
0B0BC5 F8          0382*  	ret m ; both negative, nothing to do
0B0BC6 CD 4B 08 0B 0383*  	call neg_hlu ; result is negative
0B0BCA C9          0384*  	ret
0B0BCB             0385*  
0B0BCB             0386*  ; UH.L / UD.E --> UD.E rem UHL (unsigned)
0B0BCB             0387*  ; perform unsigned division of 16.8 fixed place values
0B0BCB             0388*  ; with an unsigned 16.8 fixed place result and 24-bit remainder
0B0BCB             0389*  udiv168:
0B0BCB             0390*  ; back up divisor
0B0BCB ED 53 02 0C 0391*  	ld (@ude),de
       0B          
0B0BD0             0392*  ; get the 16-bit integer part of the quotient
0B0BD0 CD 2A 09 0B 0393*      call udiv24 ; de = quotient, hl = remainder
0B0BD4             0394*  ; load quotient to upper three bytes of output
0B0BD4 ED 53 09 0C 0395*      ld (div168_out+1),de
       0B          
0B0BD9             0396*  @div256:
0B0BD9             0397*  ; multiply remainder by 256
0B0BD9             0398*  	hlu_mul256
0B0BD9 29          0001*M         add hl,hl ; * 2
0B0BDA 29          0002*M         add hl,hl ; * 4
0B0BDB 29          0003*M         add hl,hl ; * 8
0B0BDC 29          0004*M         add hl,hl ; * 16
0B0BDD 29          0005*M         add hl,hl ; * 32
0B0BDE 29          0006*M         add hl,hl ; * 64
0B0BDF 29          0007*M         add hl,hl ; * 128
0B0BE0 29          0008*M         add hl,hl ; * 256
0B0BE1             0399*  ; skip fractional computation if remainder is zero
0B0BE1             0400*      sign_hlu
0B0BE1 19          0001*M         add hl,de
0B0BE2 B7          0002*M         or a
0B0BE3 ED 52       0003*M         sbc hl,de
0B0BE5 20 03       0401*      jr nz,@div_frac
0B0BE7 AF          0402*      xor a
0B0BE8 18 0A       0403*      jr @write_frac
0B0BEA             0404*  ; now divide the shifted remainder by the divisor
0B0BEA             0405*  @div_frac:
0B0BEA ED 5B 02 0C 0406*  	ld de,(@ude) ; get back divisor
       0B          
0B0BEF CD 2A 09 0B 0407*      call udiv24 ; de = quotient, hl = remainder
0B0BF3             0408*  ; load low byte of quotient to low byte of output
0B0BF3 7B          0409*      ld a,e
0B0BF4             0410*  @write_frac:
0B0BF4 32 08 0C 0B 0411*      ld (div168_out),a
0B0BF8             0412*  ; load de with return value
0B0BF8 ED 5B 08 0C 0413*      ld de,(div168_out)
       0B          
0B0BFD             0414*  ; load a with any overflow
0B0BFD 3A 0B 0C 0B 0415*      ld a,(div168_out+3)
0B0C01 C9          0416*      ret ; ud.e is the 16.8 result
0B0C02             0417*  @ude: ds 6
0B0C08             0418*  div168_out: ds 4 ; the extra byte is for overflow
0B0C0C             0419*  
0B0C0C             0420*  ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
0B0C0C             0421*  ; perform signed division of 16.8 fixed place values
0B0C0C             0422*  ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
0B0C0C             0423*  sdiv168:
0B0C0C             0424*  ; make everything positive and store sign flags
0B0C0C CD 3B 08 0B 0425*  	call hlu_abs
0B0C10 F5          0426*  	push af
0B0C11 EB          0427*  	ex de,hl
0B0C12 CD 3B 08 0B 0428*  	call hlu_abs
0B0C16 EB          0429*  	ex de,hl
0B0C17 F5          0430*  	push af
0B0C18             0431*  ; do the division
0B0C18 CD CB 0B 0B 0432*      call udiv168 ; de = quotient, hl = remainder
0B0C1C             0433*  ; adjust sign of result
0B0C1C F1          0434*  	pop af ; sign de
0B0C1D FA 2A 0C 0B 0435*  	jp m,@de_neg
0B0C21 F1          0436*  	pop af ; sign hl
0B0C22 F0          0437*  	ret p ; both positive, nothing to do
0B0C23             0438*  @hl_neg:
0B0C23 EB          0439*      ex de,hl ; hl = quotient, de = remainder
0B0C24 CD 4B 08 0B 0440*      call neg_hlu ; de pos, hl neg, result is negative
0B0C28 EB          0441*      ex de,hl ; de = negated quotient, hl = remainder
0B0C29 C9          0442*      ret
0B0C2A             0443*  @de_neg:
0B0C2A F1          0444*  	pop af
0B0C2B F8          0445*  	ret m ; both negative, nothing to do
0B0C2C EB          0446*      ex de,hl ; hl = quotient, de = remainder
0B0C2D CD 4B 08 0B 0447*  	call neg_hlu ; result is negative
0B0C31 EB          0448*      ex de,hl ; de = negated quotient, hl = remainder
0B0C32 C9          0449*  	ret
0B0C33             0450*  ; ========== FROM maths24.inc ==========
0B0C33             0451*  
0B0C33             0452*  ; Expects  ADL mode
0B0C33             0453*  ; Inputs:  UH.L
0B0C33             0454*  ; Outputs: UH.L is the 16.8 square root
0B0C33             0455*  ;          UD.E is the difference inputHL-DE^2
0B0C33             0456*  ;          c flag reset
0B0C33             0457*  sqrt168:
0B0C33 CD 3D 0C 0B 0458*      call sqrt24
0B0C37 EB          0459*      ex de,hl
0B0C38 29          0460*      add hl,hl
0B0C39 29          0461*      add hl,hl
0B0C3A 29          0462*      add hl,hl
0B0C3B 29          0463*      add hl,hl
0B0C3C C9          0464*      ret
0B0C3D             0465*  
0B0C3D             0466*  ; Expects  ADL mode
0B0C3D             0467*  ; Inputs:  HL
0B0C3D             0468*  ; Outputs: DE is the integer square root
0B0C3D             0469*  ;          HL is the difference inputHL-DE^2
0B0C3D             0470*  ;          c flag reset
0B0C3D             0471*  sqrt24:
0B0C3D AF          0472*      xor a
0B0C3E 45          0473*      ld b,l
0B0C3F C5          0474*      push bc
0B0C40 47          0475*      ld b,a
0B0C41 57          0476*      ld d,a
0B0C42 4F          0477*      ld c,a
0B0C43 6F          0478*      ld l,a
0B0C44 5F          0479*      ld e,a
0B0C45             0480*  
0B0C45             0481*      ;Iteration 1
0B0C45 29          0482*      add hl,hl
0B0C46 CB 11       0483*      rl c
0B0C48 29          0484*      add hl,hl
0B0C49 CB 11       0485*      rl c
0B0C4B 91          0486*      sub c
0B0C4C 30 04       0487*      jr nc,$+6
0B0C4E 1C          0488*      inc e
0B0C4F 1C          0489*      inc e
0B0C50 2F          0490*      cpl
0B0C51 4F          0491*      ld c,a
0B0C52             0492*  
0B0C52             0493*      ;Iteration 2
0B0C52 29          0494*      add hl,hl
0B0C53 CB 11       0495*      rl c
0B0C55 29          0496*      add hl,hl
0B0C56 CB 11       0497*      rl c
0B0C58 CB 13       0498*      rl e
0B0C5A 7B          0499*      ld a,e
0B0C5B 91          0500*      sub c
0B0C5C 30 04       0501*      jr nc,$+6
0B0C5E 1C          0502*      inc e
0B0C5F 1C          0503*      inc e
0B0C60 2F          0504*      cpl
0B0C61 4F          0505*      ld c,a
0B0C62             0506*  
0B0C62             0507*      ;Iteration 3
0B0C62 29          0508*      add hl,hl
0B0C63 CB 11       0509*      rl c
0B0C65 29          0510*      add hl,hl
0B0C66 CB 11       0511*      rl c
0B0C68 CB 13       0512*      rl e
0B0C6A 7B          0513*      ld a,e
0B0C6B 91          0514*      sub c
0B0C6C 30 04       0515*      jr nc,$+6
0B0C6E 1C          0516*      inc e
0B0C6F 1C          0517*      inc e
0B0C70 2F          0518*      cpl
0B0C71 4F          0519*      ld c,a
0B0C72             0520*  
0B0C72             0521*      ;Iteration 4
0B0C72 29          0522*      add hl,hl
0B0C73 CB 11       0523*      rl c
0B0C75 29          0524*      add hl,hl
0B0C76 CB 11       0525*      rl c
0B0C78 CB 13       0526*      rl e
0B0C7A 7B          0527*      ld a,e
0B0C7B 91          0528*      sub c
0B0C7C 30 04       0529*      jr nc,$+6
0B0C7E 1C          0530*      inc e
0B0C7F 1C          0531*      inc e
0B0C80 2F          0532*      cpl
0B0C81 4F          0533*      ld c,a
0B0C82             0534*  
0B0C82             0535*      ;Iteration 5
0B0C82 29          0536*      add hl,hl
0B0C83 CB 11       0537*      rl c
0B0C85 29          0538*      add hl,hl
0B0C86 CB 11       0539*      rl c
0B0C88 CB 13       0540*      rl e
0B0C8A 7B          0541*      ld a,e
0B0C8B 91          0542*      sub c
0B0C8C 30 04       0543*      jr nc,$+6
0B0C8E 1C          0544*      inc e
0B0C8F 1C          0545*      inc e
0B0C90 2F          0546*      cpl
0B0C91 4F          0547*      ld c,a
0B0C92             0548*  
0B0C92             0549*      ;Iteration 6
0B0C92 29          0550*      add hl,hl
0B0C93 CB 11       0551*      rl c
0B0C95 29          0552*      add hl,hl
0B0C96 CB 11       0553*      rl c
0B0C98 CB 13       0554*      rl e
0B0C9A 7B          0555*      ld a,e
0B0C9B 91          0556*      sub c
0B0C9C 30 04       0557*      jr nc,$+6
0B0C9E 1C          0558*      inc e
0B0C9F 1C          0559*      inc e
0B0CA0 2F          0560*      cpl
0B0CA1 4F          0561*      ld c,a
0B0CA2             0562*  
0B0CA2             0563*      ;Iteration 7
0B0CA2 29          0564*      add hl,hl
0B0CA3 CB 11       0565*      rl c
0B0CA5 29          0566*      add hl,hl
0B0CA6 CB 11       0567*      rl c
0B0CA8 CB 10       0568*      rl b
0B0CAA EB          0569*      ex de,hl
0B0CAB 29          0570*      add hl,hl
0B0CAC E5          0571*      push hl
0B0CAD ED 42       0572*      sbc hl,bc
0B0CAF 30 06       0573*      jr nc,$+8
0B0CB1 7C          0574*      ld a,h
0B0CB2 2F          0575*      cpl
0B0CB3 47          0576*      ld b,a
0B0CB4 7D          0577*      ld a,l
0B0CB5 2F          0578*      cpl
0B0CB6 4F          0579*      ld c,a
0B0CB7 E1          0580*      pop hl
0B0CB8 30 02       0581*      jr nc,$+4
0B0CBA 23          0582*      inc hl
0B0CBB 23          0583*      inc hl
0B0CBC EB          0584*      ex de,hl
0B0CBD             0585*  
0B0CBD             0586*      ;Iteration 8
0B0CBD 29          0587*      add hl,hl
0B0CBE 69          0588*      ld l,c
0B0CBF 60          0589*      ld h,b
0B0CC0 ED 6A       0590*      adc hl,hl
0B0CC2 ED 6A       0591*      adc hl,hl
0B0CC4 EB          0592*      ex de,hl
0B0CC5 29          0593*      add hl,hl
0B0CC6 ED 52       0594*      sbc hl,de
0B0CC8 19          0595*      add hl,de
0B0CC9 EB          0596*      ex de,hl
0B0CCA 30 04       0597*      jr nc,$+6
0B0CCC ED 52       0598*      sbc hl,de
0B0CCE 13          0599*      inc de
0B0CCF 13          0600*      inc de
0B0CD0             0601*  
0B0CD0             0602*      ;Iteration 9
0B0CD0 F1          0603*      pop af
0B0CD1 17          0604*      rla
0B0CD2 ED 6A       0605*      adc hl,hl
0B0CD4 17          0606*      rla
0B0CD5 ED 6A       0607*      adc hl,hl
0B0CD7 EB          0608*      ex de,hl
0B0CD8 29          0609*      add hl,hl
0B0CD9 ED 52       0610*      sbc hl,de
0B0CDB 19          0611*      add hl,de
0B0CDC EB          0612*      ex de,hl
0B0CDD 30 04       0613*      jr nc,$+6
0B0CDF ED 52       0614*      sbc hl,de
0B0CE1 13          0615*      inc de
0B0CE2 13          0616*      inc de
0B0CE3             0617*  
0B0CE3             0618*      ;Iteration 10
0B0CE3 17          0619*      rla
0B0CE4 ED 6A       0620*      adc hl,hl
0B0CE6 17          0621*      rla
0B0CE7 ED 6A       0622*      adc hl,hl
0B0CE9 EB          0623*      ex de,hl
0B0CEA 29          0624*      add hl,hl
0B0CEB ED 52       0625*      sbc hl,de
0B0CED 19          0626*      add hl,de
0B0CEE EB          0627*      ex de,hl
0B0CEF 30 04       0628*      jr nc,$+6
0B0CF1 ED 52       0629*      sbc hl,de
0B0CF3 13          0630*      inc de
0B0CF4 13          0631*      inc de
0B0CF5             0632*  
0B0CF5             0633*      ;Iteration 11
0B0CF5 17          0634*      rla
0B0CF6 ED 6A       0635*      adc hl,hl
0B0CF8 17          0636*      rla
0B0CF9 ED 6A       0637*      adc hl,hl
0B0CFB EB          0638*      ex de,hl
0B0CFC 29          0639*      add hl,hl
0B0CFD ED 52       0640*      sbc hl,de
0B0CFF 19          0641*      add hl,de
0B0D00 EB          0642*      ex de,hl
0B0D01 30 04       0643*      jr nc,$+6
0B0D03 ED 52       0644*      sbc hl,de
0B0D05 13          0645*      inc de
0B0D06 13          0646*      inc de
0B0D07             0647*  
0B0D07             0648*      ;Iteration 11
0B0D07 17          0649*      rla
0B0D08 ED 6A       0650*      adc hl,hl
0B0D0A 17          0651*      rla
0B0D0B ED 6A       0652*      adc hl,hl
0B0D0D EB          0653*      ex de,hl
0B0D0E 29          0654*      add hl,hl
0B0D0F ED 52       0655*      sbc hl,de
0B0D11 19          0656*      add hl,de
0B0D12 EB          0657*      ex de,hl
0B0D13 30 04       0658*      jr nc,$+6
0B0D15 ED 52       0659*      sbc hl,de
0B0D17 13          0660*      inc de
0B0D18 13          0661*      inc de
0B0D19             0662*  
0B0D19 CB 1A       0663*      rr d
0B0D1B CB 1B       0664*      rr e
0B0D1D C9          0665*      ret
0B0D1E             0023       include "trig24.inc"
0B0D1E             0001*  
0B0D1E             0002*  ; convert signed angles from a 360 to 256 degree circle
0B0D1E             0003*  ; inputs: uh.l is the angle360 in 16.8 fixed format
0B0D1E             0004*  ; outputs: uh.l is the angle256 in 16.8 fixed format
0B0D1E             0005*  ; destroys: TODO
0B0D1E             0006*  deg_360_to_256:
0B0D1E D5          0007*  	push de ; preserve de
0B0D1F             0008*  ; make angle positive and store sign flag
0B0D1F CD 3B 08 0B 0009*  	call hlu_abs
0B0D23 F5          0010*  	push af
0B0D24             0011*  ; multiply by 256 first to keep precision
0B0D24             0012*  	hlu_mul256 ; uh.l = uh.l * 256
0B0D24 29          0001*M         add hl,hl ; * 2
0B0D25 29          0002*M         add hl,hl ; * 4
0B0D26 29          0003*M         add hl,hl ; * 8
0B0D27 29          0004*M         add hl,hl ; * 16
0B0D28 29          0005*M         add hl,hl ; * 32
0B0D29 29          0006*M         add hl,hl ; * 64
0B0D2A 29          0007*M         add hl,hl ; * 128
0B0D2B 29          0008*M         add hl,hl ; * 256
0B0D2C             0013*  ; divide uh.l by 360
0B0D2C 11 68 01 00 0014*  	ld de,360
0B0D30 CD 2A 09 0B 0015*  	call udiv24 ; ud.e = degrees / 360
0B0D34 EB          0016*  	ex de,hl    ; uh.l = degrees / 360
0B0D35             0017*  ; restore sign flag and adjust output accordingly
0B0D35 F1          0018*  	pop af
0B0D36 F2 3E 0D 0B 0019*  	jp p,@pos ; positive number
0B0D3A CD 4B 08 0B 0020*  	call neg_hlu
0B0D3E             0021*  @pos:
0B0D3E             0022*  ; restore de and return uh.l as the result
0B0D3E D1          0023*  	pop de
0B0D3F C9          0024*  	ret
0B0D40             0025*  
0B0D40             0026*  ; fixed 16.8 routine
0B0D40             0027*  ; cos(uh.l) --> uh.l
0B0D40             0028*  ; destroys: de
0B0D40             0029*  cos168:
0B0D40             0030*  ; for cos we simply increment the angle by 90 degrees
0B0D40             0031*  ; or 0x004000 in 16.8 degrees256
0B0D40             0032*  ; which makes it a sin problem
0B0D40 11 00 40 00 0033*      ld de,0x004000
0B0D44 19          0034*      add hl,de ; modulo 256 happens below
0B0D45             0035*  ; fall through to sin168
0B0D45             0036*  
0B0D45             0037*  ; ---------------------
0B0D45             0038*  ; fixed 16.8 routine
0B0D45             0039*  ; sin(uh.l) --> uh.l
0B0D45             0040*  ; destroys: af
0B0D45             0041*  sin168:
0B0D45 D5          0042*  	push de
0B0D46 DD E5       0043*  	push ix
0B0D48             0044*  ; handle negative angles appropriately
0B0D48 CD 3B 08 0B 0045*  	call hlu_abs
0B0D4C F2 55 0D 0B 0046*  	jp p,@f
0B0D50 11 00 00 FF 0047*  	ld de,-256*256
0B0D54 19          0048*  	add hl,de
0B0D55             0049*  @@:
0B0D55             0050*  ; get the lookup value for the integer portion of the angle
0B0D55 7D          0051*  	ld a,l ; save fractional part of the angle
0B0D56 2E 06       0052*  	ld l,6 ; multiply by 6 to get our lookup index
0B0D58 EB          0053*  	ex de,hl ; can't add ix,hl
0B0D59 ED 5C       0054*  	mlt de ; gosh that is handy
0B0D5B DD 21 C7 11 0055*      ld ix,sin_lut_816 ; grab the lut address
       0B          
0B0D60 DD 19       0056*      add ix,de ; bump hl by the index
0B0D62 DD 27 00    0057*      ld hl,(ix) ; hl = sin(int(angle))
0B0D65 B7          0058*  	or a  ; check fractional part of the angle for zero
0B0D66 CA 77 0D 0B 0059*  	jp z,@f ; no fractional part so skip interpolation
0B0D6A             0060*  ; interpolate the fractional part of the angle
0B0D6A DD 17 03    0061*  	ld de,(ix+3)
0B0D6D EB          0062*  	ex de,hl
0B0D6E CD 09 0B 0B 0063*  	call smul24x8
0B0D72 CD 87 08 0B 0064*  	call hlu_sdiv256
0B0D76 19          0065*  	add hl,de ; hl = sin(int(angle)) + interpolation factor * (sin(int(angle+1)) - sin(int(angle))
0B0D77             0066*  @@:
0B0D77 CD 87 08 0B 0067*  	call hlu_sdiv256
0B0D7B DD E1       0068*  	pop ix
0B0D7D D1          0069*  	pop de
0B0D7E C9          0070*      ret ; and out
0B0D7F             0071*  
0B0D7F             0072*  ; 16.8 fixed inputs / outputs
0B0D7F             0073*  ; takes: uh.l as angle in degrees 256
0B0D7F             0074*  ;        ud.e as radius
0B0D7F             0075*  ; returns ub.c as dx, ud.e as dy, uh.l as radius
0B0D7F             0076*  ;        displacements from origin (0,0)
0B0D7F             0077*  ; destroys: everything except indexes
0B0D7F             0078*  polar_to_cartesian:
0B0D7F             0079*  	; call printNewLine ; DEBUG
0B0D7F             0080*  ; back up input parameters
0B0D7F 22 AA 0D 0B 0081*      ld (@angle), hl
0B0D83 ED 53 AD 0D 0082*      ld (@radius), de
       0B          
0B0D88             0083*  ; compute dx = cos(uh.l) * ud.e
0B0D88 CD 40 0D 0B 0084*      call cos168 ; uh.l = cos(uh.l)
0B0D8C             0085*  	; call print_hex_hl ; DEBUG
0B0D8C             0086*  	; call print_s168_hl ; DEBUG
0B0D8C ED 5B AD 0D 0087*  	ld de,(@radius)
       0B          
0B0D91 CD A8 0B 0B 0088*  	call smul168 ; uh.l = dx
0B0D95 E5          0089*      push hl
0B0D96             0090*  ; compute dy = sin(uh.l) * ud.e
0B0D96 2A AA 0D 0B 0091*      ld hl,(@angle)
0B0D9A CD 45 0D 0B 0092*      call sin168 ; uh.l = sin(uh.l)
0B0D9E             0093*  	; call print_hex_hl ; DEBUG
0B0D9E             0094*  	; call print_s168_hl ; DEBUG
0B0D9E ED 5B AD 0D 0095*      ld de,(@radius)
       0B          
0B0DA3 CD A8 0B 0B 0096*      call smul168    ; uh.l = dy
0B0DA7 EB          0097*      ex de,hl       ; de = dy for output
0B0DA8 C1          0098*      pop bc          ; bc = dx for output
0B0DA9             0099*  ; and out
0B0DA9 C9          0100*      ret
0B0DAA             0101*  @angle: ds 3
0B0DAD             0102*  @radius: ds 3
0B0DB0             0103*  
0B0DB0             0104*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
0B0DB0             0105*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
0B0DB0             0106*  ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
0B0DB0             0107*  ;         also populates scratch locations dx168 and dy168
0B0DB0             0108*  ; destroys: a,hl,bc,de
0B0DB0             0109*  dxy168:
0B0DB0             0110*  ; compute dx = x1-x0
0B0DB0 AF          0111*      xor a ; clear carry
0B0DB1 DD E5       0112*      push ix ; move ix to hl via the stack
0B0DB3 E1          0113*      pop hl ; hl = x1
0B0DB4 ED 42       0114*      sbc hl,bc ; hl = dx
0B0DB6 22 0B 0E 0B 0115*      ld (dx168),hl ; dx to scratch
0B0DBA             0116*  ; compute dy = y1-y0
0B0DBA AF          0117*      xor a ; clear carry
0B0DBB FD E5       0118*      push iy ; move iy to hl via the stack
0B0DBD E1          0119*      pop hl ; hl = y1
0B0DBE ED 52       0120*      sbc hl,de ; hl = dy
0B0DC0 22 11 0E 0B 0121*      ld (dy168),hl ; dy to scratch
0B0DC4             0122*  ; populate output registers and return
0B0DC4 EB          0123*      ex de,hl        ; ud.e = dy
0B0DC5 ED 4B 0B 0E 0124*      ld bc,(dx168)   ; ub.c = dx
       0B          
0B0DCA C9          0125*      ret
0B0DCB             0126*  
0B0DCB             0127*  ; compute the euclidian distance between two cartesian coordinates
0B0DCB             0128*  ; using the formula d = sqrt(dx^2+dy^2
0B0DCB             0129*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
0B0DCB             0130*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
0B0DCB             0131*  ; output; uh.l is the 16.8 fixed format distance
0B0DCB             0132*  ;       dx168/y are the 16.8 fixed format dx and dy
0B0DCB             0133*  ; destroys: a,hl,bc,de
0B0DCB             0134*  distance168:
0B0DCB             0135*  ; compute dx = x1-x0
0B0DCB AF          0136*      xor a ; clear carry
0B0DCC DD E5       0137*      push ix ; move ix to hl via the stack
0B0DCE E1          0138*      pop hl ; hl = x1
0B0DCF ED 42       0139*      sbc hl,bc ; hl = dx
0B0DD1 22 0B 0E 0B 0140*      ld (dx168),hl ; dx to scratch
0B0DD5             0141*  ; ; test dx for overflow
0B0DD5             0142*  ; 	ld de,0x007F00 ; max positive 16.8 value we can square without overflow
0B0DD5             0143*  ; 	ex de,hl
0B0DD5             0144*  ; 	sbc hl,de ; test for overflow
0B0DD5             0145*  ; 	push af ; carry indicates overflow
0B0DD5             0146*  ; compute dy = y1-y0
0B0DD5 AF          0147*      xor a ; clear carry
0B0DD6 FD E5       0148*      push iy ; move iy to hl via the stack
0B0DD8 E1          0149*      pop hl ; hl = y1
0B0DD9 ED 52       0150*      sbc hl,de ; hl = dy
0B0DDB 22 11 0E 0B 0151*      ld (dy168),hl ; dy to scratch
0B0DDF             0152*  ; ; test dy for overflow
0B0DDF             0153*  ; 	ld de,0x007F00 ; max positive 16.8 value we can square without overflow
0B0DDF             0154*  ; 	ex de,hl
0B0DDF             0155*  ; 	sbc hl,de ; test for overflow
0B0DDF             0156*  ; 	push af ; carry indicates overflow
0B0DDF             0157*  ; compute dy^2
0B0DDF 2A 11 0E 0B 0158*  	ld hl,(dy168)
0B0DE3 CD 3B 08 0B 0159*      call hlu_abs  ; make dy positive so we can use unsigned multiply
0B0DE7             0160*      ; call hlu_div2 ; divide hlu by 2 to give us some headroom
0B0DE7 E5          0161*      push hl ; load hl/2 to bc via the stack
0B0DE8 C1          0162*      pop bc ; bc = dy/2
0B0DE9 EB          0163*      ex de,hl ; de = dy/2
0B0DEA CD A0 0B 0B 0164*      call umul168 ; uh.l = dy^2/2
0B0DEE E5          0165*      push hl ; dy^2/2 to the stack
0B0DEF             0166*  ; compute dx^2
0B0DEF 2A 0B 0E 0B 0167*      ld hl,(dx168) ; get back dx
0B0DF3 CD 3B 08 0B 0168*      call hlu_abs  ; make dx positive so we can use unsigned multiply
0B0DF7             0169*      ; call hlu_div2 ; divide hlu by 2 to give us some headroom
0B0DF7 E5          0170*      push hl ; load hl/2 to bc via the stack
0B0DF8 C1          0171*      pop bc ; bc = dx/2
0B0DF9 EB          0172*      ex de,hl ; de = dx/2
0B0DFA CD A0 0B 0B 0173*      call umul168 ; uh.l = dx^2/2
0B0DFE             0174*  ; commpute dy^2+dx^2
0B0DFE D1          0175*      pop de ; get back dx^2/2
0B0DFF 19          0176*      add hl,de ; hl = dx^2/2+dy^2/2
0B0E00             0177*  ; compute sqrt(dx^2/2+dy^2/2)
0B0E00 CD 33 0C 0B 0178*      call sqrt168 ; uh.l = distance/2
0B0E04             0179*      ; add hl,hl ; hl = distance
0B0E04             0180*  ; ; check for overflow
0B0E04             0181*  ; 	pop af ; get back the overflow flags
0B0E04             0182*  ; 	sbc a,a ; will be -1 if overflow, 0 if not
0B0E04             0183*  ; 	ld b,a ; save the overflow flag
0B0E04             0184*  ; 	pop af ; get back the overflow flags
0B0E04             0185*  ; 	sbc a,a ; will be -1 if overflow, 0 if not
0B0E04             0186*  ; 	add a,b ; if a != 0 then we had overflow
0B0E04             0187*  ;     ret z ; no overflow we're done
0B0E04             0188*  ; @overflow:
0B0E04             0189*  ; 	ld hl,0x7FFFFF ; max positive 16.8 fixed value indicates overflow
0B0E04 C9          0190*  	ret
0B0E05             0191*  @scratch: ds 6
0B0E0B             0192*  dx168: ds 6
0B0E11             0193*  dy168: ds 6
0B0E17             0194*  
0B0E17             0195*  ; atan2(ub.c,ud.e) --> uh.l
0B0E17             0196*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0B0E17             0197*  ;   whether inputs are integers or fractional doesn't matter
0B0E17             0198*  ;   so long as the sign bit of the upper byte is correct
0B0E17             0199*  ; output: uh.l is the 16.8 fixed angle in degrees 256
0B0E17             0200*  ; angles are COMPASS HEADINGS based on
0B0E17             0201*  ; screen coordinate conventions,where the y axis is flipped
0B0E17             0202*  ; #E0 315      0       45 #20
0B0E17             0203*  ;        -x,-y | +x,-y
0B0E17             0204*  ; #C0 270------+------ 90 #40
0B0E17             0205*  ;        -x,+y | +x,+y
0B0E17             0206*  ; #A0 225   180 #80   135 #60
0B0E17             0207*  atan2_168game:
0B0E17             0208*  ; get signs and make everything positive
0B0E17             0209*  ; get abs(x) and store its original sign
0B0E17 C5          0210*      push bc
0B0E18 E1          0211*      pop hl
0B0E19 CD 3B 08 0B 0212*      call hlu_abs ; if x was negative this also sets the sign flag
0B0E1D E5          0213*      push hl ; store abs(x)
0B0E1E C1          0214*      pop bc ; bc = abs(x)
0B0E1F F5          0215*      push af ; store sign of x
0B0E20             0216*  ; get abs(y) and store its original sign
0B0E20 EB          0217*      ex de,hl ; hl = y
0B0E21 CD 3B 08 0B 0218*      call hlu_abs ; if y was negative this also sets the sign flag
0B0E25 EB          0219*      ex de,hl ; de = abs(y)
0B0E26 F5          0220*      push af ; store sign of y
0B0E27             0221*  ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
0B0E27             0222*  ; this ensures that our lookup value is between 0 and 1 inclusive
0B0E27 AF          0223*      xor a ; clear the carry flag
0B0E28 D5          0224*      push de
0B0E29 E1          0225*      pop hl
0B0E2A ED 42       0226*      sbc hl,bc
0B0E2C F5          0227*      push af ; save sign of de - bc
0B0E2D F2 36 0E 0B 0228*      jp p,@1 ; bc <= de, so we skip ahead
0B0E31             0229*  ; otherwise we swap bc and de
0B0E31 C5          0230*      push bc
0B0E32 E1          0231*      pop hl
0B0E33 EB          0232*      ex de,hl
0B0E34 E5          0233*      push hl
0B0E35 C1          0234*      pop bc
0B0E36             0235*  @1:
0B0E36             0236*  ; now we're ready to snag our preliminary result
0B0E36 CD A4 0E 0B 0237*      call atan_168game ; uh.l comes back with prelim result
0B0E3A             0238*  ; now we adjust uh.l based on sign of de - bc
0B0E3A F1          0239*      pop af
0B0E3B F2 47 0E 0B 0240*      jp p,@2 ; bc <= de,so we skip ahead
0B0E3F EB          0241*      ex de,hl
0B0E40 21 00 40 00 0242*      ld hl,0x004000 ; 90 degrees
0B0E44 AF          0243*      xor a ; clear the carry flag
0B0E45 ED 52       0244*      sbc hl,de ; subtract result from 90 degrees
0B0E47             0245*      ; ld de,0 ; prep to clear hlu
0B0E47             0246*      ; ld d,h
0B0E47             0247*      ; ld e,l
0B0E47             0248*      ; ex de,hl ; now we have 0 <= uh.l < 256 in 16.8 fixed format
0B0E47             0249*      ; fall through
0B0E47             0250*  @2:
0B0E47             0251*  ; now the fun part of adjusting the result
0B0E47             0252*  ; based on which quadrant (x,y) is in
0B0E47             0253*  ; #E0 315      0       45 #20
0B0E47             0254*  ;        -x,-y | +x,-y
0B0E47             0255*  ; #C0 270------+------ 90 #40
0B0E47             0256*  ;        -x,+y | +x,+y
0B0E47             0257*  ; #A0 225   180 #80   135 #60
0B0E47 F1          0258*      pop af ; sign of y
0B0E48 CA 85 0E 0B 0259*      jp z,@y_zero
0B0E4C F2 65 0E 0B 0260*      jp p,@y_pos
0B0E50             0261*  ; y neg,check x
0B0E50 F1          0262*      pop af ; sign of x
0B0E51 CA 5F 0E 0B 0263*      jp z,@y_neg_x_zero
0B0E55 F2 64 0E 0B 0264*      jp p,@y_neg_x_pos
0B0E59             0265*  ; y neg,x neg
0B0E59             0266*  ; angle is 270-360
0B0E59             0267*  ; negating the intermediate does the trick
0B0E59 CD 4B 08 0B 0268*      call neg_hlu
0B0E5D 18 31       0269*      jr @zero_hlu
0B0E5F             0270*  
0B0E5F             0271*  @y_neg_x_zero:
0B0E5F             0272*  ; y neg,x zero
0B0E5F             0273*  ; angle is 0
0B0E5F 21 00 00 00 0274*      ld hl,0
0B0E63 C9          0275*      ret
0B0E64             0276*  @y_neg_x_pos:
0B0E64             0277*  ; y neg,x pos
0B0E64             0278*  ; angle is 0 to 90
0B0E64             0279*  ; so we're good
0B0E64 C9          0280*      ret
0B0E65             0281*  
0B0E65             0282*  @y_pos:
0B0E65 F1          0283*      pop af ; sign of x
0B0E66 CA 75 0E 0B 0284*      jp z,@y_pos_x_zero
0B0E6A F2 7A 0E 0B 0285*      jp p,@y_pos_x_pos
0B0E6E             0286*  ; y pos,x neg
0B0E6E             0287*  ; angle is 180-270
0B0E6E             0288*  ; so we add 180 to intermediate
0B0E6E 11 00 80 00 0289*      ld de,0x008000
0B0E72 19          0290*      add hl,de
0B0E73 18 1B       0291*      jr @zero_hlu
0B0E75             0292*  @y_pos_x_zero:
0B0E75             0293*  ; y pos,x zero
0B0E75             0294*  ; angle is 180
0B0E75 21 00 80 00 0295*      ld hl,0x008000
0B0E79 C9          0296*      ret
0B0E7A             0297*  @y_pos_x_pos:
0B0E7A             0298*  ; y pos,x pos
0B0E7A             0299*  ; angle is 90-180
0B0E7A             0300*  ; neg the intermediate and add 180 degrees
0B0E7A CD 4B 08 0B 0301*      call neg_hlu
0B0E7E 11 00 80 00 0302*      ld de,0x008000
0B0E82 19          0303*      add hl,de
0B0E83 18 0B       0304*      jr @zero_hlu
0B0E85             0305*  
0B0E85             0306*  @y_zero:
0B0E85 F1          0307*      pop af ; sign of x
0B0E86 FA 8B 0E 0B 0308*      jp m,@y_zero_x_neg
0B0E8A             0309*  ; y zero,x pos
0B0E8A             0310*  ; angle is 90,nothing to do
0B0E8A C9          0311*      ret
0B0E8B             0312*  @y_zero_x_neg:
0B0E8B             0313*  ; y zero ,x neg
0B0E8B             0314*  ; angle is 270
0B0E8B 21 00 C0 00 0315*      ld hl,0x00C000
0B0E8F C9          0316*      ret
0B0E90             0317*  @zero_hlu:
0B0E90 AF          0318*      xor a
0B0E91 22 9E 0E 0B 0319*      ld (@scratch),hl
0B0E95 32 A0 0E 0B 0320*      ld (@scratch+2),a
0B0E99 2A 9E 0E 0B 0321*      ld hl,(@scratch)
0B0E9D C9          0322*      ret
0B0E9E             0323*  @scratch: ds 6
0B0EA4             0324*  
0B0EA4             0325*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0B0EA4             0326*  ; output: uh.l is the 16.8 fixed format angle
0B0EA4             0327*  ; destroys: a,hl,bc,de
0B0EA4             0328*  ; the following note was written by github copilot:
0B0EA4             0329*  ; note: this routine is a bit of a hack
0B0EA4             0330*  ;      but it works
0B0EA4             0331*  ;      and it's fast
0B0EA4             0332*  ;      and it's small
0B0EA4             0333*  ;      and it's accurate
0B0EA4             0334*  ;      and it's easy to understand
0B0EA4             0335*  ;      and it's easy to modify
0B0EA4             0336*  ;      and it's easy to use
0B0EA4             0337*  ;      and it's easy to remember
0B0EA4             0338*  ;      and it's easy to love
0B0EA4             0339*  ;      and it's easy to hate
0B0EA4             0340*  ;      and it's easy to ignore
0B0EA4             0341*  ;      and it's easy to forget
0B0EA4             0342*  ;      and it's easy to remember
0B0EA4             0343*  ;      and it's easy to forget
0B0EA4             0344*  ;      and it's easy to remember
0B0EA4             0345*  ;      (ok the bot is stuck in a loop)
0B0EA4             0346*  ; REAL NOTE: only works for angles from 0 to 45 degrees
0B0EA4             0347*  ;   use atan2_168 (which calls this proc) to handle the full 360 degrees
0B0EA4             0348*  atan_168game:
0B0EA4             0349*  ; because we use compass headings instead of geometric angles
0B0EA4             0350*  ; we compute dx/dy which is 1/tan(theta) in the maths world
0B0EA4             0351*  ; we can do faster unsigned division here because we know dx and dy are positive
0B0EA4 CD CB 0B 0B 0352*  	call udiv168 ; uh.l = dx/dy
0B0EA8             0353*  ; ; TODO: IMPLEMENT THIS, RIGHT NOW IS IS BUGGED
0B0EA8             0354*  ; ; test uh.l for 0
0B0EA8             0355*  ;     add hl,de
0B0EA8             0356*  ;     or a
0B0EA8             0357*  ;     sbc hl,de
0B0EA8             0358*  ;     jr z,@is_zero
0B0EA8             0359*  ; ; test uh.l for 1
0B0EA8             0360*  ;     xor a ; clear carry
0B0EA8             0361*  ;     ex de,hl
0B0EA8             0362*  ;     ld hl,0x000100 ; 1 in 16.8 fixed format
0B0EA8             0363*  ;     sbc hl,de
0B0EA8             0364*  ;     jr z,@is_45
0B0EA8             0365*  ; ; END TODO
0B0EA8             0366*  
0B0EA8             0367*  ; no special cases so we move on
0B0EA8             0368*  ; l contains the fractional portion of tan(uh.l)
0B0EA8             0369*  ; we multiply it by three to get our lookup table index
0B0EA8 26 03       0370*      ld h,3
0B0EAA ED 6C       0371*      mlt hl ; gosh that is handy
0B0EAC 11 00 00 00 0372*      ld de,0 ; clear deu
0B0EB0 54          0373*      ld d,h ; copy hl to de
0B0EB1 5D          0374*      ld e,l ; de contains our index
0B0EB2 21 CD 1A 0B 0375*      ld hl,atan_lut_168 ; grab the lut address
0B0EB6 19          0376*      add hl,de ; bump hl by the index
0B0EB7 ED 27       0377*      ld hl,(hl) ; don't try this on a z80!
0B0EB9 C9          0378*      ret ; and out
0B0EBA             0379*  @is_45:
0B0EBA 21 00 20 00 0380*      ld hl,0x002000 ; 45 degrees decimal
0B0EBE C9          0381*      ret
0B0EBF             0382*  ; for the case tan(0)
0B0EBF             0383*  @is_zero:
0B0EBF 21 00 00 00 0384*      ld hl,0x000000
0B0EC3 C9          0385*      ret
0B0EC4             0386*  
0B0EC4             0387*  sin_lut_168:
0B0EC4 00 00 00    0388*  	dl 0x000000 ; 0.000 00, 0.000
0B0EC7 06 00 00    0389*  	dl 0x000006 ; 1.406 01, 0.025
0B0ECA 0C 00 00    0390*  	dl 0x00000C ; 2.813 02, 0.049
0B0ECD 12 00 00    0391*  	dl 0x000012 ; 4.219 03, 0.074
0B0ED0 19 00 00    0392*  	dl 0x000019 ; 5.625 04, 0.098
0B0ED3 1F 00 00    0393*  	dl 0x00001F ; 7.031 05, 0.122
0B0ED6 25 00 00    0394*  	dl 0x000025 ; 8.438 06, 0.147
0B0ED9 2B 00 00    0395*  	dl 0x00002B ; 9.844 07, 0.171
0B0EDC 31 00 00    0396*  	dl 0x000031 ; 11.250 08, 0.195
0B0EDF 38 00 00    0397*  	dl 0x000038 ; 12.656 09, 0.219
0B0EE2 3E 00 00    0398*  	dl 0x00003E ; 14.063 0A, 0.243
0B0EE5 44 00 00    0399*  	dl 0x000044 ; 15.469 0B, 0.267
0B0EE8 4A 00 00    0400*  	dl 0x00004A ; 16.875 0C, 0.290
0B0EEB 50 00 00    0401*  	dl 0x000050 ; 18.281 0D, 0.314
0B0EEE 56 00 00    0402*  	dl 0x000056 ; 19.688 0E, 0.337
0B0EF1 5C 00 00    0403*  	dl 0x00005C ; 21.094 0F, 0.360
0B0EF4 61 00 00    0404*  	dl 0x000061 ; 22.500 10, 0.383
0B0EF7 67 00 00    0405*  	dl 0x000067 ; 23.906 11, 0.405
0B0EFA 6D 00 00    0406*  	dl 0x00006D ; 25.313 12, 0.428
0B0EFD 73 00 00    0407*  	dl 0x000073 ; 26.719 13, 0.450
0B0F00 78 00 00    0408*  	dl 0x000078 ; 28.125 14, 0.471
0B0F03 7E 00 00    0409*  	dl 0x00007E ; 29.531 15, 0.493
0B0F06 83 00 00    0410*  	dl 0x000083 ; 30.938 16, 0.514
0B0F09 88 00 00    0411*  	dl 0x000088 ; 32.344 17, 0.535
0B0F0C 8E 00 00    0412*  	dl 0x00008E ; 33.750 18, 0.556
0B0F0F 93 00 00    0413*  	dl 0x000093 ; 35.156 19, 0.576
0B0F12 98 00 00    0414*  	dl 0x000098 ; 36.563 1A, 0.596
0B0F15 9D 00 00    0415*  	dl 0x00009D ; 37.969 1B, 0.615
0B0F18 A2 00 00    0416*  	dl 0x0000A2 ; 39.375 1C, 0.634
0B0F1B A7 00 00    0417*  	dl 0x0000A7 ; 40.781 1D, 0.653
0B0F1E AB 00 00    0418*  	dl 0x0000AB ; 42.188 1E, 0.672
0B0F21 B0 00 00    0419*  	dl 0x0000B0 ; 43.594 1F, 0.690
0B0F24 B5 00 00    0420*  	dl 0x0000B5 ; 45.000 20, 0.707
0B0F27 B9 00 00    0421*  	dl 0x0000B9 ; 46.406 21, 0.724
0B0F2A BD 00 00    0422*  	dl 0x0000BD ; 47.813 22, 0.741
0B0F2D C1 00 00    0423*  	dl 0x0000C1 ; 49.219 23, 0.757
0B0F30 C5 00 00    0424*  	dl 0x0000C5 ; 50.625 24, 0.773
0B0F33 C9 00 00    0425*  	dl 0x0000C9 ; 52.031 25, 0.788
0B0F36 CD 00 00    0426*  	dl 0x0000CD ; 53.438 26, 0.803
0B0F39 D1 00 00    0427*  	dl 0x0000D1 ; 54.844 27, 0.818
0B0F3C D4 00 00    0428*  	dl 0x0000D4 ; 56.250 28, 0.831
0B0F3F D8 00 00    0429*  	dl 0x0000D8 ; 57.656 29, 0.845
0B0F42 DB 00 00    0430*  	dl 0x0000DB ; 59.063 2A, 0.858
0B0F45 DE 00 00    0431*  	dl 0x0000DE ; 60.469 2B, 0.870
0B0F48 E1 00 00    0432*  	dl 0x0000E1 ; 61.875 2C, 0.882
0B0F4B E4 00 00    0433*  	dl 0x0000E4 ; 63.281 2D, 0.893
0B0F4E E7 00 00    0434*  	dl 0x0000E7 ; 64.688 2E, 0.904
0B0F51 EA 00 00    0435*  	dl 0x0000EA ; 66.094 2F, 0.914
0B0F54 EC 00 00    0436*  	dl 0x0000EC ; 67.500 30, 0.924
0B0F57 EE 00 00    0437*  	dl 0x0000EE ; 68.906 31, 0.933
0B0F5A F1 00 00    0438*  	dl 0x0000F1 ; 70.313 32, 0.942
0B0F5D F3 00 00    0439*  	dl 0x0000F3 ; 71.719 33, 0.950
0B0F60 F4 00 00    0440*  	dl 0x0000F4 ; 73.125 34, 0.957
0B0F63 F6 00 00    0441*  	dl 0x0000F6 ; 74.531 35, 0.964
0B0F66 F8 00 00    0442*  	dl 0x0000F8 ; 75.938 36, 0.970
0B0F69 F9 00 00    0443*  	dl 0x0000F9 ; 77.344 37, 0.976
0B0F6C FB 00 00    0444*  	dl 0x0000FB ; 78.750 38, 0.981
0B0F6F FC 00 00    0445*  	dl 0x0000FC ; 80.156 39, 0.985
0B0F72 FD 00 00    0446*  	dl 0x0000FD ; 81.563 3A, 0.989
0B0F75 FE 00 00    0447*  	dl 0x0000FE ; 82.969 3B, 0.992
0B0F78 FE 00 00    0448*  	dl 0x0000FE ; 84.375 3C, 0.995
0B0F7B FF 00 00    0449*  	dl 0x0000FF ; 85.781 3D, 0.997
0B0F7E FF 00 00    0450*  	dl 0x0000FF ; 87.188 3E, 0.999
0B0F81 FF 00 00    0451*  	dl 0x0000FF ; 88.594 3F, 1.000
0B0F84 00 01 00    0452*  	dl 0x000100 ; 90.000 40, 1.000
0B0F87 FF 00 00    0453*  	dl 0x0000FF ; 91.406 41, 1.000
0B0F8A FF 00 00    0454*  	dl 0x0000FF ; 92.813 42, 0.999
0B0F8D FF 00 00    0455*  	dl 0x0000FF ; 94.219 43, 0.997
0B0F90 FE 00 00    0456*  	dl 0x0000FE ; 95.625 44, 0.995
0B0F93 FE 00 00    0457*  	dl 0x0000FE ; 97.031 45, 0.992
0B0F96 FD 00 00    0458*  	dl 0x0000FD ; 98.438 46, 0.989
0B0F99 FC 00 00    0459*  	dl 0x0000FC ; 99.844 47, 0.985
0B0F9C FB 00 00    0460*  	dl 0x0000FB ; 101.250 48, 0.981
0B0F9F F9 00 00    0461*  	dl 0x0000F9 ; 102.656 49, 0.976
0B0FA2 F8 00 00    0462*  	dl 0x0000F8 ; 104.063 4A, 0.970
0B0FA5 F6 00 00    0463*  	dl 0x0000F6 ; 105.469 4B, 0.964
0B0FA8 F4 00 00    0464*  	dl 0x0000F4 ; 106.875 4C, 0.957
0B0FAB F3 00 00    0465*  	dl 0x0000F3 ; 108.281 4D, 0.950
0B0FAE F1 00 00    0466*  	dl 0x0000F1 ; 109.688 4E, 0.942
0B0FB1 EE 00 00    0467*  	dl 0x0000EE ; 111.094 4F, 0.933
0B0FB4 EC 00 00    0468*  	dl 0x0000EC ; 112.500 50, 0.924
0B0FB7 EA 00 00    0469*  	dl 0x0000EA ; 113.906 51, 0.914
0B0FBA E7 00 00    0470*  	dl 0x0000E7 ; 115.313 52, 0.904
0B0FBD E4 00 00    0471*  	dl 0x0000E4 ; 116.719 53, 0.893
0B0FC0 E1 00 00    0472*  	dl 0x0000E1 ; 118.125 54, 0.882
0B0FC3 DE 00 00    0473*  	dl 0x0000DE ; 119.531 55, 0.870
0B0FC6 DB 00 00    0474*  	dl 0x0000DB ; 120.938 56, 0.858
0B0FC9 D8 00 00    0475*  	dl 0x0000D8 ; 122.344 57, 0.845
0B0FCC D4 00 00    0476*  	dl 0x0000D4 ; 123.750 58, 0.831
0B0FCF D1 00 00    0477*  	dl 0x0000D1 ; 125.156 59, 0.818
0B0FD2 CD 00 00    0478*  	dl 0x0000CD ; 126.563 5A, 0.803
0B0FD5 C9 00 00    0479*  	dl 0x0000C9 ; 127.969 5B, 0.788
0B0FD8 C5 00 00    0480*  	dl 0x0000C5 ; 129.375 5C, 0.773
0B0FDB C1 00 00    0481*  	dl 0x0000C1 ; 130.781 5D, 0.757
0B0FDE BD 00 00    0482*  	dl 0x0000BD ; 132.188 5E, 0.741
0B0FE1 B9 00 00    0483*  	dl 0x0000B9 ; 133.594 5F, 0.724
0B0FE4 B5 00 00    0484*  	dl 0x0000B5 ; 135.000 60, 0.707
0B0FE7 B0 00 00    0485*  	dl 0x0000B0 ; 136.406 61, 0.690
0B0FEA AB 00 00    0486*  	dl 0x0000AB ; 137.813 62, 0.672
0B0FED A7 00 00    0487*  	dl 0x0000A7 ; 139.219 63, 0.653
0B0FF0 A2 00 00    0488*  	dl 0x0000A2 ; 140.625 64, 0.634
0B0FF3 9D 00 00    0489*  	dl 0x00009D ; 142.031 65, 0.615
0B0FF6 98 00 00    0490*  	dl 0x000098 ; 143.438 66, 0.596
0B0FF9 93 00 00    0491*  	dl 0x000093 ; 144.844 67, 0.576
0B0FFC 8E 00 00    0492*  	dl 0x00008E ; 146.250 68, 0.556
0B0FFF 88 00 00    0493*  	dl 0x000088 ; 147.656 69, 0.535
0B1002 83 00 00    0494*  	dl 0x000083 ; 149.063 6A, 0.514
0B1005 7E 00 00    0495*  	dl 0x00007E ; 150.469 6B, 0.493
0B1008 78 00 00    0496*  	dl 0x000078 ; 151.875 6C, 0.471
0B100B 73 00 00    0497*  	dl 0x000073 ; 153.281 6D, 0.450
0B100E 6D 00 00    0498*  	dl 0x00006D ; 154.688 6E, 0.428
0B1011 67 00 00    0499*  	dl 0x000067 ; 156.094 6F, 0.405
0B1014 61 00 00    0500*  	dl 0x000061 ; 157.500 70, 0.383
0B1017 5C 00 00    0501*  	dl 0x00005C ; 158.906 71, 0.360
0B101A 56 00 00    0502*  	dl 0x000056 ; 160.313 72, 0.337
0B101D 50 00 00    0503*  	dl 0x000050 ; 161.719 73, 0.314
0B1020 4A 00 00    0504*  	dl 0x00004A ; 163.125 74, 0.290
0B1023 44 00 00    0505*  	dl 0x000044 ; 164.531 75, 0.267
0B1026 3E 00 00    0506*  	dl 0x00003E ; 165.938 76, 0.243
0B1029 38 00 00    0507*  	dl 0x000038 ; 167.344 77, 0.219
0B102C 31 00 00    0508*  	dl 0x000031 ; 168.750 78, 0.195
0B102F 2B 00 00    0509*  	dl 0x00002B ; 170.156 79, 0.171
0B1032 25 00 00    0510*  	dl 0x000025 ; 171.563 7A, 0.147
0B1035 1F 00 00    0511*  	dl 0x00001F ; 172.969 7B, 0.122
0B1038 19 00 00    0512*  	dl 0x000019 ; 174.375 7C, 0.098
0B103B 12 00 00    0513*  	dl 0x000012 ; 175.781 7D, 0.074
0B103E 0C 00 00    0514*  	dl 0x00000C ; 177.188 7E, 0.049
0B1041 06 00 00    0515*  	dl 0x000006 ; 178.594 7F, 0.025
0B1044 00 00 00    0516*  	dl 0x000000 ; 180.000 80, 0.000
0B1047 FA FF FF    0517*  	dl 0xFFFFFA ; 181.406 81, -0.025
0B104A F4 FF FF    0518*  	dl 0xFFFFF4 ; 182.813 82, -0.049
0B104D EE FF FF    0519*  	dl 0xFFFFEE ; 184.219 83, -0.074
0B1050 E7 FF FF    0520*  	dl 0xFFFFE7 ; 185.625 84, -0.098
0B1053 E1 FF FF    0521*  	dl 0xFFFFE1 ; 187.031 85, -0.122
0B1056 DB FF FF    0522*  	dl 0xFFFFDB ; 188.438 86, -0.147
0B1059 D5 FF FF    0523*  	dl 0xFFFFD5 ; 189.844 87, -0.171
0B105C CF FF FF    0524*  	dl 0xFFFFCF ; 191.250 88, -0.195
0B105F C8 FF FF    0525*  	dl 0xFFFFC8 ; 192.656 89, -0.219
0B1062 C2 FF FF    0526*  	dl 0xFFFFC2 ; 194.063 8A, -0.243
0B1065 BC FF FF    0527*  	dl 0xFFFFBC ; 195.469 8B, -0.267
0B1068 B6 FF FF    0528*  	dl 0xFFFFB6 ; 196.875 8C, -0.290
0B106B B0 FF FF    0529*  	dl 0xFFFFB0 ; 198.281 8D, -0.314
0B106E AA FF FF    0530*  	dl 0xFFFFAA ; 199.688 8E, -0.337
0B1071 A4 FF FF    0531*  	dl 0xFFFFA4 ; 201.094 8F, -0.360
0B1074 9F FF FF    0532*  	dl 0xFFFF9F ; 202.500 90, -0.383
0B1077 99 FF FF    0533*  	dl 0xFFFF99 ; 203.906 91, -0.405
0B107A 93 FF FF    0534*  	dl 0xFFFF93 ; 205.313 92, -0.428
0B107D 8D FF FF    0535*  	dl 0xFFFF8D ; 206.719 93, -0.450
0B1080 88 FF FF    0536*  	dl 0xFFFF88 ; 208.125 94, -0.471
0B1083 82 FF FF    0537*  	dl 0xFFFF82 ; 209.531 95, -0.493
0B1086 7D FF FF    0538*  	dl 0xFFFF7D ; 210.938 96, -0.514
0B1089 78 FF FF    0539*  	dl 0xFFFF78 ; 212.344 97, -0.535
0B108C 72 FF FF    0540*  	dl 0xFFFF72 ; 213.750 98, -0.556
0B108F 6D FF FF    0541*  	dl 0xFFFF6D ; 215.156 99, -0.576
0B1092 68 FF FF    0542*  	dl 0xFFFF68 ; 216.563 9A, -0.596
0B1095 63 FF FF    0543*  	dl 0xFFFF63 ; 217.969 9B, -0.615
0B1098 5E FF FF    0544*  	dl 0xFFFF5E ; 219.375 9C, -0.634
0B109B 59 FF FF    0545*  	dl 0xFFFF59 ; 220.781 9D, -0.653
0B109E 55 FF FF    0546*  	dl 0xFFFF55 ; 222.188 9E, -0.672
0B10A1 50 FF FF    0547*  	dl 0xFFFF50 ; 223.594 9F, -0.690
0B10A4 4B FF FF    0548*  	dl 0xFFFF4B ; 225.000 A0, -0.707
0B10A7 47 FF FF    0549*  	dl 0xFFFF47 ; 226.406 A1, -0.724
0B10AA 43 FF FF    0550*  	dl 0xFFFF43 ; 227.813 A2, -0.741
0B10AD 3F FF FF    0551*  	dl 0xFFFF3F ; 229.219 A3, -0.757
0B10B0 3B FF FF    0552*  	dl 0xFFFF3B ; 230.625 A4, -0.773
0B10B3 37 FF FF    0553*  	dl 0xFFFF37 ; 232.031 A5, -0.788
0B10B6 33 FF FF    0554*  	dl 0xFFFF33 ; 233.438 A6, -0.803
0B10B9 2F FF FF    0555*  	dl 0xFFFF2F ; 234.844 A7, -0.818
0B10BC 2C FF FF    0556*  	dl 0xFFFF2C ; 236.250 A8, -0.831
0B10BF 28 FF FF    0557*  	dl 0xFFFF28 ; 237.656 A9, -0.845
0B10C2 25 FF FF    0558*  	dl 0xFFFF25 ; 239.063 AA, -0.858
0B10C5 22 FF FF    0559*  	dl 0xFFFF22 ; 240.469 AB, -0.870
0B10C8 1F FF FF    0560*  	dl 0xFFFF1F ; 241.875 AC, -0.882
0B10CB 1C FF FF    0561*  	dl 0xFFFF1C ; 243.281 AD, -0.893
0B10CE 19 FF FF    0562*  	dl 0xFFFF19 ; 244.688 AE, -0.904
0B10D1 16 FF FF    0563*  	dl 0xFFFF16 ; 246.094 AF, -0.914
0B10D4 14 FF FF    0564*  	dl 0xFFFF14 ; 247.500 B0, -0.924
0B10D7 12 FF FF    0565*  	dl 0xFFFF12 ; 248.906 B1, -0.933
0B10DA 0F FF FF    0566*  	dl 0xFFFF0F ; 250.313 B2, -0.942
0B10DD 0D FF FF    0567*  	dl 0xFFFF0D ; 251.719 B3, -0.950
0B10E0 0C FF FF    0568*  	dl 0xFFFF0C ; 253.125 B4, -0.957
0B10E3 0A FF FF    0569*  	dl 0xFFFF0A ; 254.531 B5, -0.964
0B10E6 08 FF FF    0570*  	dl 0xFFFF08 ; 255.938 B6, -0.970
0B10E9 07 FF FF    0571*  	dl 0xFFFF07 ; 257.344 B7, -0.976
0B10EC 05 FF FF    0572*  	dl 0xFFFF05 ; 258.750 B8, -0.981
0B10EF 04 FF FF    0573*  	dl 0xFFFF04 ; 260.156 B9, -0.985
0B10F2 03 FF FF    0574*  	dl 0xFFFF03 ; 261.563 BA, -0.989
0B10F5 02 FF FF    0575*  	dl 0xFFFF02 ; 262.969 BB, -0.992
0B10F8 02 FF FF    0576*  	dl 0xFFFF02 ; 264.375 BC, -0.995
0B10FB 01 FF FF    0577*  	dl 0xFFFF01 ; 265.781 BD, -0.997
0B10FE 01 FF FF    0578*  	dl 0xFFFF01 ; 267.188 BE, -0.999
0B1101 01 FF FF    0579*  	dl 0xFFFF01 ; 268.594 BF, -1.000
0B1104 00 FF FF    0580*  	dl 0xFFFF00 ; 270.000 C0, -1.000
0B1107 01 FF FF    0581*  	dl 0xFFFF01 ; 271.406 C1, -1.000
0B110A 01 FF FF    0582*  	dl 0xFFFF01 ; 272.813 C2, -0.999
0B110D 01 FF FF    0583*  	dl 0xFFFF01 ; 274.219 C3, -0.997
0B1110 02 FF FF    0584*  	dl 0xFFFF02 ; 275.625 C4, -0.995
0B1113 02 FF FF    0585*  	dl 0xFFFF02 ; 277.031 C5, -0.992
0B1116 03 FF FF    0586*  	dl 0xFFFF03 ; 278.438 C6, -0.989
0B1119 04 FF FF    0587*  	dl 0xFFFF04 ; 279.844 C7, -0.985
0B111C 05 FF FF    0588*  	dl 0xFFFF05 ; 281.250 C8, -0.981
0B111F 07 FF FF    0589*  	dl 0xFFFF07 ; 282.656 C9, -0.976
0B1122 08 FF FF    0590*  	dl 0xFFFF08 ; 284.063 CA, -0.970
0B1125 0A FF FF    0591*  	dl 0xFFFF0A ; 285.469 CB, -0.964
0B1128 0C FF FF    0592*  	dl 0xFFFF0C ; 286.875 CC, -0.957
0B112B 0D FF FF    0593*  	dl 0xFFFF0D ; 288.281 CD, -0.950
0B112E 0F FF FF    0594*  	dl 0xFFFF0F ; 289.688 CE, -0.942
0B1131 12 FF FF    0595*  	dl 0xFFFF12 ; 291.094 CF, -0.933
0B1134 14 FF FF    0596*  	dl 0xFFFF14 ; 292.500 D0, -0.924
0B1137 16 FF FF    0597*  	dl 0xFFFF16 ; 293.906 D1, -0.914
0B113A 19 FF FF    0598*  	dl 0xFFFF19 ; 295.313 D2, -0.904
0B113D 1C FF FF    0599*  	dl 0xFFFF1C ; 296.719 D3, -0.893
0B1140 1F FF FF    0600*  	dl 0xFFFF1F ; 298.125 D4, -0.882
0B1143 22 FF FF    0601*  	dl 0xFFFF22 ; 299.531 D5, -0.870
0B1146 25 FF FF    0602*  	dl 0xFFFF25 ; 300.938 D6, -0.858
0B1149 28 FF FF    0603*  	dl 0xFFFF28 ; 302.344 D7, -0.845
0B114C 2C FF FF    0604*  	dl 0xFFFF2C ; 303.750 D8, -0.831
0B114F 2F FF FF    0605*  	dl 0xFFFF2F ; 305.156 D9, -0.818
0B1152 33 FF FF    0606*  	dl 0xFFFF33 ; 306.563 DA, -0.803
0B1155 37 FF FF    0607*  	dl 0xFFFF37 ; 307.969 DB, -0.788
0B1158 3B FF FF    0608*  	dl 0xFFFF3B ; 309.375 DC, -0.773
0B115B 3F FF FF    0609*  	dl 0xFFFF3F ; 310.781 DD, -0.757
0B115E 43 FF FF    0610*  	dl 0xFFFF43 ; 312.188 DE, -0.741
0B1161 47 FF FF    0611*  	dl 0xFFFF47 ; 313.594 DF, -0.724
0B1164 4B FF FF    0612*  	dl 0xFFFF4B ; 315.000 E0, -0.707
0B1167 50 FF FF    0613*  	dl 0xFFFF50 ; 316.406 E1, -0.690
0B116A 55 FF FF    0614*  	dl 0xFFFF55 ; 317.813 E2, -0.672
0B116D 59 FF FF    0615*  	dl 0xFFFF59 ; 319.219 E3, -0.653
0B1170 5E FF FF    0616*  	dl 0xFFFF5E ; 320.625 E4, -0.634
0B1173 63 FF FF    0617*  	dl 0xFFFF63 ; 322.031 E5, -0.615
0B1176 68 FF FF    0618*  	dl 0xFFFF68 ; 323.438 E6, -0.596
0B1179 6D FF FF    0619*  	dl 0xFFFF6D ; 324.844 E7, -0.576
0B117C 72 FF FF    0620*  	dl 0xFFFF72 ; 326.250 E8, -0.556
0B117F 78 FF FF    0621*  	dl 0xFFFF78 ; 327.656 E9, -0.535
0B1182 7D FF FF    0622*  	dl 0xFFFF7D ; 329.063 EA, -0.514
0B1185 82 FF FF    0623*  	dl 0xFFFF82 ; 330.469 EB, -0.493
0B1188 88 FF FF    0624*  	dl 0xFFFF88 ; 331.875 EC, -0.471
0B118B 8D FF FF    0625*  	dl 0xFFFF8D ; 333.281 ED, -0.450
0B118E 93 FF FF    0626*  	dl 0xFFFF93 ; 334.688 EE, -0.428
0B1191 99 FF FF    0627*  	dl 0xFFFF99 ; 336.094 EF, -0.405
0B1194 9F FF FF    0628*  	dl 0xFFFF9F ; 337.500 F0, -0.383
0B1197 A4 FF FF    0629*  	dl 0xFFFFA4 ; 338.906 F1, -0.360
0B119A AA FF FF    0630*  	dl 0xFFFFAA ; 340.313 F2, -0.337
0B119D B0 FF FF    0631*  	dl 0xFFFFB0 ; 341.719 F3, -0.314
0B11A0 B6 FF FF    0632*  	dl 0xFFFFB6 ; 343.125 F4, -0.290
0B11A3 BC FF FF    0633*  	dl 0xFFFFBC ; 344.531 F5, -0.267
0B11A6 C2 FF FF    0634*  	dl 0xFFFFC2 ; 345.938 F6, -0.243
0B11A9 C8 FF FF    0635*  	dl 0xFFFFC8 ; 347.344 F7, -0.219
0B11AC CF FF FF    0636*  	dl 0xFFFFCF ; 348.750 F8, -0.195
0B11AF D5 FF FF    0637*  	dl 0xFFFFD5 ; 350.156 F9, -0.171
0B11B2 DB FF FF    0638*  	dl 0xFFFFDB ; 351.563 FA, -0.147
0B11B5 E1 FF FF    0639*  	dl 0xFFFFE1 ; 352.969 FB, -0.122
0B11B8 E7 FF FF    0640*  	dl 0xFFFFE7 ; 354.375 FC, -0.098
0B11BB EE FF FF    0641*  	dl 0xFFFFEE ; 355.781 FD, -0.074
0B11BE F4 FF FF    0642*  	dl 0xFFFFF4 ; 357.188 FE, -0.049
0B11C1 FA FF FF    0643*  	dl 0xFFFFFA ; 358.594 FF, -0.025
0B11C4 00 00 00    0644*  	dl 0x000000 ; 0.000 00, 0.000 for interpolation
0B11C7             0645*  
0B11C7             0646*  sin_lut_816:
0B11C7 00 00 00 48 0647*      dl 0x000000,0x000648 ; 00 000.000 0.000
       06 00       
0B11CD 48 06 00 48 0648*      dl 0x000648,0x000648 ; 01 001.406 0.025
       06 00       
0B11D3 90 0C 00 45 0649*      dl 0x000C90,0x000645 ; 02 002.813 0.049
       06 00       
0B11D9 D5 12 00 42 0650*      dl 0x0012D5,0x000642 ; 03 004.219 0.074
       06 00       
0B11DF 17 19 00 3E 0651*      dl 0x001917,0x00063E ; 04 005.625 0.098
       06 00       
0B11E5 56 1F 00 3A 0652*      dl 0x001F56,0x00063A ; 05 007.031 0.122
       06 00       
0B11EB 90 25 00 33 0653*      dl 0x002590,0x000633 ; 06 008.438 0.147
       06 00       
0B11F1 C4 2B 00 2C 0654*      dl 0x002BC4,0x00062C ; 07 009.844 0.171
       06 00       
0B11F7 F1 31 00 25 0655*      dl 0x0031F1,0x000625 ; 08 011.250 0.195
       06 00       
0B11FD 16 38 00 1D 0656*      dl 0x003816,0x00061D ; 09 012.656 0.219
       06 00       
0B1203 34 3E 00 13 0657*      dl 0x003E34,0x000613 ; 0A 014.063 0.243
       06 00       
0B1209 47 44 00 08 0658*      dl 0x004447,0x000608 ; 0B 015.469 0.267
       06 00       
0B120F 50 4A 00 FD 0659*      dl 0x004A50,0x0005FD ; 0C 016.875 0.290
       05 00       
0B1215 4D 50 00 F1 0660*      dl 0x00504D,0x0005F1 ; 0D 018.281 0.314
       05 00       
0B121B 3E 56 00 E3 0661*      dl 0x00563E,0x0005E3 ; 0E 019.688 0.337
       05 00       
0B1221 22 5C 00 D5 0662*      dl 0x005C22,0x0005D5 ; 0F 021.094 0.360
       05 00       
0B1227 F7 61 00 C6 0663*      dl 0x0061F7,0x0005C6 ; 10 022.500 0.383
       05 00       
0B122D BD 67 00 B7 0664*      dl 0x0067BD,0x0005B7 ; 11 023.906 0.405
       05 00       
0B1233 74 6D 00 A5 0665*      dl 0x006D74,0x0005A5 ; 12 025.313 0.428
       05 00       
0B1239 19 73 00 93 0666*      dl 0x007319,0x000593 ; 13 026.719 0.450
       05 00       
0B123F AD 78 00 80 0667*      dl 0x0078AD,0x000580 ; 14 028.125 0.471
       05 00       
0B1245 2E 7E 00 6E 0668*      dl 0x007E2E,0x00056E ; 15 029.531 0.493
       05 00       
0B124B 9C 83 00 59 0669*      dl 0x00839C,0x000559 ; 16 030.938 0.514
       05 00       
0B1251 F5 88 00 44 0670*      dl 0x0088F5,0x000544 ; 17 032.344 0.535
       05 00       
0B1257 39 8E 00 2E 0671*      dl 0x008E39,0x00052E ; 18 033.750 0.556
       05 00       
0B125D 67 93 00 18 0672*      dl 0x009367,0x000518 ; 19 035.156 0.576
       05 00       
0B1263 80 98 00 FF 0673*      dl 0x009880,0x0004FF ; 1A 036.563 0.596
       04 00       
0B1269 80 9D 00 E7 0674*      dl 0x009D80,0x0004E7 ; 1B 037.969 0.615
       04 00       
0B126F 67 A2 00 CE 0675*      dl 0x00A267,0x0004CE ; 1C 039.375 0.634
       04 00       
0B1275 36 A7 00 B5 0676*      dl 0x00A736,0x0004B5 ; 1D 040.781 0.653
       04 00       
0B127B EB AB 00 9A 0677*      dl 0x00ABEB,0x00049A ; 1E 042.188 0.672
       04 00       
0B1281 85 B0 00 7F 0678*      dl 0x00B085,0x00047F ; 1F 043.594 0.690
       04 00       
0B1287 04 B5 00 63 0679*      dl 0x00B504,0x000463 ; 20 045.000 0.707
       04 00       
0B128D 68 B9 00 47 0680*      dl 0x00B968,0x000447 ; 21 046.406 0.724
       04 00       
0B1293 AF BD 00 29 0681*      dl 0x00BDAF,0x000429 ; 22 047.813 0.741
       04 00       
0B1299 D8 C1 00 0B 0682*      dl 0x00C1D8,0x00040B ; 23 049.219 0.757
       04 00       
0B129F E4 C5 00 EC 0683*      dl 0x00C5E4,0x0003EC ; 24 050.625 0.773
       03 00       
0B12A5 D0 C9 00 CE 0684*      dl 0x00C9D0,0x0003CE ; 25 052.031 0.788
       03 00       
0B12AB 9F CD 00 AE 0685*      dl 0x00CD9F,0x0003AE ; 26 053.438 0.803
       03 00       
0B12B1 4D D1 00 8D 0686*      dl 0x00D14D,0x00038D ; 27 054.844 0.818
       03 00       
0B12B7 DB D4 00 6C 0687*      dl 0x00D4DB,0x00036C ; 28 056.250 0.831
       03 00       
0B12BD 48 D8 00 4C 0688*      dl 0x00D848,0x00034C ; 29 057.656 0.845
       03 00       
0B12C3 94 DB 00 29 0689*      dl 0x00DB94,0x000329 ; 2A 059.063 0.858
       03 00       
0B12C9 BE DE 00 07 0690*      dl 0x00DEBE,0x000307 ; 2B 060.469 0.870
       03 00       
0B12CF C5 E1 00 E4 0691*      dl 0x00E1C5,0x0002E4 ; 2C 061.875 0.882
       02 00       
0B12D5 AA E4 00 C1 0692*      dl 0x00E4AA,0x0002C1 ; 2D 063.281 0.893
       02 00       
0B12DB 6C E7 00 9D 0693*      dl 0x00E76C,0x00029D ; 2E 064.688 0.904
       02 00       
0B12E1 09 EA 00 79 0694*      dl 0x00EA09,0x000279 ; 2F 066.094 0.914
       02 00       
0B12E7 83 EC 00 55 0695*      dl 0x00EC83,0x000255 ; 30 067.500 0.924
       02 00       
0B12ED D8 EE 00 30 0696*      dl 0x00EED8,0x000230 ; 31 068.906 0.933
       02 00       
0B12F3 09 F1 00 0B 0697*      dl 0x00F109,0x00020B ; 32 070.313 0.942
       02 00       
0B12F9 14 F3 00 E5 0698*      dl 0x00F314,0x0001E5 ; 33 071.719 0.950
       01 00       
0B12FF FA F4 00 BF 0699*      dl 0x00F4FA,0x0001BF ; 34 073.125 0.957
       01 00       
0B1305 B9 F6 00 9A 0700*      dl 0x00F6B9,0x00019A ; 35 074.531 0.964
       01 00       
0B130B 54 F8 00 73 0701*      dl 0x00F854,0x000173 ; 36 075.938 0.970
       01 00       
0B1311 C7 F9 00 4D 0702*      dl 0x00F9C7,0x00014D ; 37 077.344 0.976
       01 00       
0B1317 14 FB 00 26 0703*      dl 0x00FB14,0x000126 ; 38 078.750 0.981
       01 00       
0B131D 3B FC 00 FF 0704*      dl 0x00FC3B,0x0000FF ; 39 080.156 0.985
       00 00       
0B1323 3A FD 00 D8 0705*      dl 0x00FD3A,0x0000D8 ; 3A 081.563 0.989
       00 00       
0B1329 13 FE 00 B1 0706*      dl 0x00FE13,0x0000B1 ; 3B 082.969 0.992
       00 00       
0B132F C4 FE 00 89 0707*      dl 0x00FEC4,0x000089 ; 3C 084.375 0.995
       00 00       
0B1335 4E FF 00 62 0708*      dl 0x00FF4E,0x000062 ; 3D 085.781 0.997
       00 00       
0B133B B1 FF 00 3B 0709*      dl 0x00FFB1,0x00003B ; 3E 087.188 0.999
       00 00       
0B1341 EC FF 00 13 0710*      dl 0x00FFEC,0x000013 ; 3F 088.594 1.000
       00 00       
0B1347 00 00 01 EC 0711*      dl 0x010000,0xFFFFEC ; 40 090.000 1.000
       FF FF       
0B134D EC FF 00 C4 0712*      dl 0x00FFEC,0xFFFFC4 ; 41 091.406 1.000
       FF FF       
0B1353 B1 FF 00 9D 0713*      dl 0x00FFB1,0xFFFF9D ; 42 092.813 0.999
       FF FF       
0B1359 4E FF 00 76 0714*      dl 0x00FF4E,0xFFFF76 ; 43 094.219 0.997
       FF FF       
0B135F C4 FE 00 4E 0715*      dl 0x00FEC4,0xFFFF4E ; 44 095.625 0.995
       FF FF       
0B1365 13 FE 00 27 0716*      dl 0x00FE13,0xFFFF27 ; 45 097.031 0.992
       FF FF       
0B136B 3A FD 00 00 0717*      dl 0x00FD3A,0xFFFF00 ; 46 098.438 0.989
       FF FF       
0B1371 3B FC 00 D9 0718*      dl 0x00FC3B,0xFFFED9 ; 47 099.844 0.985
       FE FF       
0B1377 14 FB 00 B2 0719*      dl 0x00FB14,0xFFFEB2 ; 48 101.250 0.981
       FE FF       
0B137D C7 F9 00 8C 0720*      dl 0x00F9C7,0xFFFE8C ; 49 102.656 0.976
       FE FF       
0B1383 53 F8 00 66 0721*      dl 0x00F853,0xFFFE66 ; 4A 104.063 0.970
       FE FF       
0B1389 B9 F6 00 40 0722*      dl 0x00F6B9,0xFFFE40 ; 4B 105.469 0.964
       FE FF       
0B138F FA F4 00 1A 0723*      dl 0x00F4FA,0xFFFE1A ; 4C 106.875 0.957
       FE FF       
0B1395 14 F3 00 F4 0724*      dl 0x00F314,0xFFFDF4 ; 4D 108.281 0.950
       FD FF       
0B139B 08 F1 00 CF 0725*      dl 0x00F108,0xFFFDCF ; 4E 109.688 0.942
       FD FF       
0B13A1 D8 EE 00 AA 0726*      dl 0x00EED8,0xFFFDAA ; 4F 111.094 0.933
       FD FF       
0B13A7 83 EC 00 86 0727*      dl 0x00EC83,0xFFFD86 ; 50 112.500 0.924
       FD FF       
0B13AD 09 EA 00 61 0728*      dl 0x00EA09,0xFFFD61 ; 51 113.906 0.914
       FD FF       
0B13B3 6B E7 00 3E 0729*      dl 0x00E76B,0xFFFD3E ; 52 115.313 0.904
       FD FF       
0B13B9 AA E4 00 1B 0730*      dl 0x00E4AA,0xFFFD1B ; 53 116.719 0.893
       FD FF       
0B13BF C5 E1 00 F8 0731*      dl 0x00E1C5,0xFFFCF8 ; 54 118.125 0.882
       FC FF       
0B13C5 BE DE 00 D5 0732*      dl 0x00DEBE,0xFFFCD5 ; 55 119.531 0.870
       FC FF       
0B13CB 93 DB 00 B4 0733*      dl 0x00DB93,0xFFFCB4 ; 56 120.938 0.858
       FC FF       
0B13D1 48 D8 00 93 0734*      dl 0x00D848,0xFFFC93 ; 57 122.344 0.845
       FC FF       
0B13D7 DB D4 00 72 0735*      dl 0x00D4DB,0xFFFC72 ; 58 123.750 0.831
       FC FF       
0B13DD 4D D1 00 51 0736*      dl 0x00D14D,0xFFFC51 ; 59 125.156 0.818
       FC FF       
0B13E3 9E CD 00 32 0737*      dl 0x00CD9E,0xFFFC32 ; 5A 126.563 0.803
       FC FF       
0B13E9 D0 C9 00 13 0738*      dl 0x00C9D0,0xFFFC13 ; 5B 127.969 0.788
       FC FF       
0B13EF E4 C5 00 F4 0739*      dl 0x00C5E4,0xFFFBF4 ; 5C 129.375 0.773
       FB FF       
0B13F5 D8 C1 00 D5 0740*      dl 0x00C1D8,0xFFFBD5 ; 5D 130.781 0.757
       FB FF       
0B13FB AE BD 00 B9 0741*      dl 0x00BDAE,0xFFFBB9 ; 5E 132.188 0.741
       FB FF       
0B1401 68 B9 00 9C 0742*      dl 0x00B968,0xFFFB9C ; 5F 133.594 0.724
       FB FF       
0B1407 04 B5 00 80 0743*      dl 0x00B504,0xFFFB80 ; 60 135.000 0.707
       FB FF       
0B140D 85 B0 00 64 0744*      dl 0x00B085,0xFFFB64 ; 61 136.406 0.690
       FB FF       
0B1413 EA AB 00 4B 0745*      dl 0x00ABEA,0xFFFB4B ; 62 137.813 0.672
       FB FF       
0B1419 36 A7 00 31 0746*      dl 0x00A736,0xFFFB31 ; 63 139.219 0.653
       FB FF       
0B141F 67 A2 00 18 0747*      dl 0x00A267,0xFFFB18 ; 64 140.625 0.634
       FB FF       
0B1425 80 9D 00 FF 0748*      dl 0x009D80,0xFFFAFF ; 65 142.031 0.615
       FA FF       
0B142B 7F 98 00 E8 0749*      dl 0x00987F,0xFFFAE8 ; 66 143.438 0.596
       FA FF       
0B1431 67 93 00 D1 0750*      dl 0x009367,0xFFFAD1 ; 67 144.844 0.576
       FA FF       
0B1437 39 8E 00 BB 0751*      dl 0x008E39,0xFFFABB ; 68 146.250 0.556
       FA FF       
0B143D F5 88 00 A5 0752*      dl 0x0088F5,0xFFFAA5 ; 69 147.656 0.535
       FA FF       
0B1443 9B 83 00 92 0753*      dl 0x00839B,0xFFFA92 ; 6A 149.063 0.514
       FA FF       
0B1449 2E 7E 00 7F 0754*      dl 0x007E2E,0xFFFA7F ; 6B 150.469 0.493
       FA FF       
0B144F AD 78 00 6C 0755*      dl 0x0078AD,0xFFFA6C ; 6C 151.875 0.471
       FA FF       
0B1455 19 73 00 59 0756*      dl 0x007319,0xFFFA59 ; 6D 153.281 0.450
       FA FF       
0B145B 73 6D 00 49 0757*      dl 0x006D73,0xFFFA49 ; 6E 154.688 0.428
       FA FF       
0B1461 BD 67 00 39 0758*      dl 0x0067BD,0xFFFA39 ; 6F 156.094 0.405
       FA FF       
0B1467 F7 61 00 2A 0759*      dl 0x0061F7,0xFFFA2A ; 70 157.500 0.383
       FA FF       
0B146D 22 5C 00 1B 0760*      dl 0x005C22,0xFFFA1B ; 71 158.906 0.360
       FA FF       
0B1473 3D 56 00 0F 0761*      dl 0x00563D,0xFFFA0F ; 72 160.313 0.337
       FA FF       
0B1479 4D 50 00 02 0762*      dl 0x00504D,0xFFFA02 ; 73 161.719 0.314
       FA FF       
0B147F 50 4A 00 F7 0763*      dl 0x004A50,0xFFF9F7 ; 74 163.125 0.290
       F9 FF       
0B1485 47 44 00 EB 0764*      dl 0x004447,0xFFF9EB ; 75 164.531 0.267
       F9 FF       
0B148B 33 3E 00 E3 0765*      dl 0x003E33,0xFFF9E3 ; 76 165.938 0.243
       F9 FF       
0B1491 16 38 00 DA 0766*      dl 0x003816,0xFFF9DA ; 77 167.344 0.219
       F9 FF       
0B1497 F1 31 00 D3 0767*      dl 0x0031F1,0xFFF9D3 ; 78 168.750 0.195
       F9 FF       
0B149D C4 2B 00 CB 0768*      dl 0x002BC4,0xFFF9CB ; 79 170.156 0.171
       F9 FF       
0B14A3 8F 25 00 C6 0769*      dl 0x00258F,0xFFF9C6 ; 7A 171.563 0.147
       F9 FF       
0B14A9 56 1F 00 C1 0770*      dl 0x001F56,0xFFF9C1 ; 7B 172.969 0.122
       F9 FF       
0B14AF 17 19 00 BD 0771*      dl 0x001917,0xFFF9BD ; 7C 174.375 0.098
       F9 FF       
0B14B5 D5 12 00 B9 0772*      dl 0x0012D5,0xFFF9B9 ; 7D 175.781 0.074
       F9 FF       
0B14BB 8F 0C 00 B8 0773*      dl 0x000C8F,0xFFF9B8 ; 7E 177.188 0.049
       F9 FF       
0B14C1 48 06 00 B7 0774*      dl 0x000648,0xFFF9B7 ; 7F 178.594 0.025
       F9 FF       
0B14C7 00 00 00 B7 0775*      dl 0x000000,0xFFF9B7 ; 80 180.000 0.000
       F9 FF       
0B14CD B8 F9 FF B7 0776*      dl 0xFFF9B8,0xFFF9B7 ; 81 181.406 -0.025
       F9 FF       
0B14D3 70 F3 FF BA 0777*      dl 0xFFF370,0xFFF9BA ; 82 182.813 -0.049
       F9 FF       
0B14D9 2B ED FF BD 0778*      dl 0xFFED2B,0xFFF9BD ; 83 184.219 -0.074
       F9 FF       
0B14DF E9 E6 FF C1 0779*      dl 0xFFE6E9,0xFFF9C1 ; 84 185.625 -0.098
       F9 FF       
0B14E5 AA E0 FF C5 0780*      dl 0xFFE0AA,0xFFF9C5 ; 85 187.031 -0.122
       F9 FF       
0B14EB 70 DA FF CC 0781*      dl 0xFFDA70,0xFFF9CC ; 86 188.438 -0.147
       F9 FF       
0B14F1 3C D4 FF D3 0782*      dl 0xFFD43C,0xFFF9D3 ; 87 189.844 -0.171
       F9 FF       
0B14F7 0F CE FF DA 0783*      dl 0xFFCE0F,0xFFF9DA ; 88 191.250 -0.195
       F9 FF       
0B14FD EA C7 FF E2 0784*      dl 0xFFC7EA,0xFFF9E2 ; 89 192.656 -0.219
       F9 FF       
0B1503 CC C1 FF EC 0785*      dl 0xFFC1CC,0xFFF9EC ; 8A 194.063 -0.243
       F9 FF       
0B1509 B9 BB FF F7 0786*      dl 0xFFBBB9,0xFFF9F7 ; 8B 195.469 -0.267
       F9 FF       
0B150F B0 B5 FF 02 0787*      dl 0xFFB5B0,0xFFFA02 ; 8C 196.875 -0.290
       FA FF       
0B1515 B3 AF FF 0E 0788*      dl 0xFFAFB3,0xFFFA0E ; 8D 198.281 -0.314
       FA FF       
0B151B C2 A9 FF 1C 0789*      dl 0xFFA9C2,0xFFFA1C ; 8E 199.688 -0.337
       FA FF       
0B1521 DE A3 FF 2A 0790*      dl 0xFFA3DE,0xFFFA2A ; 8F 201.094 -0.360
       FA FF       
0B1527 09 9E FF 39 0791*      dl 0xFF9E09,0xFFFA39 ; 90 202.500 -0.383
       FA FF       
0B152D 43 98 FF 48 0792*      dl 0xFF9843,0xFFFA48 ; 91 203.906 -0.405
       FA FF       
0B1533 8C 92 FF 5A 0793*      dl 0xFF928C,0xFFFA5A ; 92 205.313 -0.428
       FA FF       
0B1539 E7 8C FF 6C 0794*      dl 0xFF8CE7,0xFFFA6C ; 93 206.719 -0.450
       FA FF       
0B153F 53 87 FF 7F 0795*      dl 0xFF8753,0xFFFA7F ; 94 208.125 -0.471
       FA FF       
0B1545 D2 81 FF 91 0796*      dl 0xFF81D2,0xFFFA91 ; 95 209.531 -0.493
       FA FF       
0B154B 64 7C FF A6 0797*      dl 0xFF7C64,0xFFFAA6 ; 96 210.938 -0.514
       FA FF       
0B1551 0B 77 FF BB 0798*      dl 0xFF770B,0xFFFABB ; 97 212.344 -0.535
       FA FF       
0B1557 C7 71 FF D1 0799*      dl 0xFF71C7,0xFFFAD1 ; 98 213.750 -0.556
       FA FF       
0B155D 99 6C FF E7 0800*      dl 0xFF6C99,0xFFFAE7 ; 99 215.156 -0.576
       FA FF       
0B1563 80 67 FF 00 0801*      dl 0xFF6780,0xFFFB00 ; 9A 216.563 -0.596
       FB FF       
0B1569 80 62 FF 18 0802*      dl 0xFF6280,0xFFFB18 ; 9B 217.969 -0.615
       FB FF       
0B156F 99 5D FF 31 0803*      dl 0xFF5D99,0xFFFB31 ; 9C 219.375 -0.634
       FB FF       
0B1575 CA 58 FF 4A 0804*      dl 0xFF58CA,0xFFFB4A ; 9D 220.781 -0.653
       FB FF       
0B157B 15 54 FF 65 0805*      dl 0xFF5415,0xFFFB65 ; 9E 222.188 -0.672
       FB FF       
0B1581 7B 4F FF 80 0806*      dl 0xFF4F7B,0xFFFB80 ; 9F 223.594 -0.690
       FB FF       
0B1587 FC 4A FF 9C 0807*      dl 0xFF4AFC,0xFFFB9C ; A0 225.000 -0.707
       FB FF       
0B158D 98 46 FF B8 0808*      dl 0xFF4698,0xFFFBB8 ; A1 226.406 -0.724
       FB FF       
0B1593 51 42 FF D6 0809*      dl 0xFF4251,0xFFFBD6 ; A2 227.813 -0.741
       FB FF       
0B1599 28 3E FF F4 0810*      dl 0xFF3E28,0xFFFBF4 ; A3 229.219 -0.757
       FB FF       
0B159F 1C 3A FF 13 0811*      dl 0xFF3A1C,0xFFFC13 ; A4 230.625 -0.773
       FC FF       
0B15A5 30 36 FF 31 0812*      dl 0xFF3630,0xFFFC31 ; A5 232.031 -0.788
       FC FF       
0B15AB 61 32 FF 51 0813*      dl 0xFF3261,0xFFFC51 ; A6 233.438 -0.803
       FC FF       
0B15B1 B3 2E FF 72 0814*      dl 0xFF2EB3,0xFFFC72 ; A7 234.844 -0.818
       FC FF       
0B15B7 25 2B FF 93 0815*      dl 0xFF2B25,0xFFFC93 ; A8 236.250 -0.831
       FC FF       
0B15BD B8 27 FF B3 0816*      dl 0xFF27B8,0xFFFCB3 ; A9 237.656 -0.845
       FC FF       
0B15C3 6C 24 FF D6 0817*      dl 0xFF246C,0xFFFCD6 ; AA 239.063 -0.858
       FC FF       
0B15C9 42 21 FF F8 0818*      dl 0xFF2142,0xFFFCF8 ; AB 240.469 -0.870
       FC FF       
0B15CF 3B 1E FF 1B 0819*      dl 0xFF1E3B,0xFFFD1B ; AC 241.875 -0.882
       FD FF       
0B15D5 56 1B FF 3E 0820*      dl 0xFF1B56,0xFFFD3E ; AD 243.281 -0.893
       FD FF       
0B15DB 94 18 FF 62 0821*      dl 0xFF1894,0xFFFD62 ; AE 244.688 -0.904
       FD FF       
0B15E1 F7 15 FF 86 0822*      dl 0xFF15F7,0xFFFD86 ; AF 246.094 -0.914
       FD FF       
0B15E7 7D 13 FF AA 0823*      dl 0xFF137D,0xFFFDAA ; B0 247.500 -0.924
       FD FF       
0B15ED 28 11 FF CF 0824*      dl 0xFF1128,0xFFFDCF ; B1 248.906 -0.933
       FD FF       
0B15F3 F7 0E FF F4 0825*      dl 0xFF0EF7,0xFFFDF4 ; B2 250.313 -0.942
       FD FF       
0B15F9 EC 0C FF 1A 0826*      dl 0xFF0CEC,0xFFFE1A ; B3 251.719 -0.950
       FE FF       
0B15FF 06 0B FF 40 0827*      dl 0xFF0B06,0xFFFE40 ; B4 253.125 -0.957
       FE FF       
0B1605 47 09 FF 65 0828*      dl 0xFF0947,0xFFFE65 ; B5 254.531 -0.964
       FE FF       
0B160B AC 07 FF 8C 0829*      dl 0xFF07AC,0xFFFE8C ; B6 255.938 -0.970
       FE FF       
0B1611 39 06 FF B2 0830*      dl 0xFF0639,0xFFFEB2 ; B7 257.344 -0.976
       FE FF       
0B1617 EC 04 FF D9 0831*      dl 0xFF04EC,0xFFFED9 ; B8 258.750 -0.981
       FE FF       
0B161D C5 03 FF 00 0832*      dl 0xFF03C5,0xFFFF00 ; B9 260.156 -0.985
       FF FF       
0B1623 C6 02 FF 27 0833*      dl 0xFF02C6,0xFFFF27 ; BA 261.563 -0.989
       FF FF       
0B1629 ED 01 FF 4E 0834*      dl 0xFF01ED,0xFFFF4E ; BB 262.969 -0.992
       FF FF       
0B162F 3C 01 FF 76 0835*      dl 0xFF013C,0xFFFF76 ; BC 264.375 -0.995
       FF FF       
0B1635 B2 00 FF 9D 0836*      dl 0xFF00B2,0xFFFF9D ; BD 265.781 -0.997
       FF FF       
0B163B 4F 00 FF C4 0837*      dl 0xFF004F,0xFFFFC4 ; BE 267.188 -0.999
       FF FF       
0B1641 14 00 FF EC 0838*      dl 0xFF0014,0xFFFFEC ; BF 268.594 -1.000
       FF FF       
0B1647 00 00 FF 13 0839*      dl 0xFF0000,0x000013 ; C0 270.000 -1.000
       00 00       
0B164D 14 00 FF 3B 0840*      dl 0xFF0014,0x00003B ; C1 271.406 -1.000
       00 00       
0B1653 4F 00 FF 62 0841*      dl 0xFF004F,0x000062 ; C2 272.813 -0.999
       00 00       
0B1659 B2 00 FF 89 0842*      dl 0xFF00B2,0x000089 ; C3 274.219 -0.997
       00 00       
0B165F 3C 01 FF B1 0843*      dl 0xFF013C,0x0000B1 ; C4 275.625 -0.995
       00 00       
0B1665 ED 01 FF D8 0844*      dl 0xFF01ED,0x0000D8 ; C5 277.031 -0.992
       00 00       
0B166B C6 02 FF FF 0845*      dl 0xFF02C6,0x0000FF ; C6 278.438 -0.989
       00 00       
0B1671 C5 03 FF 26 0846*      dl 0xFF03C5,0x000126 ; C7 279.844 -0.985
       01 00       
0B1677 EC 04 FF 4D 0847*      dl 0xFF04EC,0x00014D ; C8 281.250 -0.981
       01 00       
0B167D 39 06 FF 73 0848*      dl 0xFF0639,0x000173 ; C9 282.656 -0.976
       01 00       
0B1683 AD 07 FF 99 0849*      dl 0xFF07AD,0x000199 ; CA 284.063 -0.970
       01 00       
0B1689 47 09 FF BF 0850*      dl 0xFF0947,0x0001BF ; CB 285.469 -0.964
       01 00       
0B168F 06 0B FF E5 0851*      dl 0xFF0B06,0x0001E5 ; CC 286.875 -0.957
       01 00       
0B1695 EC 0C FF 0B 0852*      dl 0xFF0CEC,0x00020B ; CD 288.281 -0.950
       02 00       
0B169B F8 0E FF 30 0853*      dl 0xFF0EF8,0x000230 ; CE 289.688 -0.942
       02 00       
0B16A1 28 11 FF 55 0854*      dl 0xFF1128,0x000255 ; CF 291.094 -0.933
       02 00       
0B16A7 7D 13 FF 79 0855*      dl 0xFF137D,0x000279 ; D0 292.500 -0.924
       02 00       
0B16AD F7 15 FF 9E 0856*      dl 0xFF15F7,0x00029E ; D1 293.906 -0.914
       02 00       
0B16B3 95 18 FF C1 0857*      dl 0xFF1895,0x0002C1 ; D2 295.313 -0.904
       02 00       
0B16B9 56 1B FF E4 0858*      dl 0xFF1B56,0x0002E4 ; D3 296.719 -0.893
       02 00       
0B16BF 3B 1E FF 07 0859*      dl 0xFF1E3B,0x000307 ; D4 298.125 -0.882
       03 00       
0B16C5 42 21 FF 2A 0860*      dl 0xFF2142,0x00032A ; D5 299.531 -0.870
       03 00       
0B16CB 6D 24 FF 4B 0861*      dl 0xFF246D,0x00034B ; D6 300.938 -0.858
       03 00       
0B16D1 B8 27 FF 6C 0862*      dl 0xFF27B8,0x00036C ; D7 302.344 -0.845
       03 00       
0B16D7 25 2B FF 8D 0863*      dl 0xFF2B25,0x00038D ; D8 303.750 -0.831
       03 00       
0B16DD B3 2E FF AE 0864*      dl 0xFF2EB3,0x0003AE ; D9 305.156 -0.818
       03 00       
0B16E3 62 32 FF CD 0865*      dl 0xFF3262,0x0003CD ; DA 306.563 -0.803
       03 00       
0B16E9 30 36 FF EC 0866*      dl 0xFF3630,0x0003EC ; DB 307.969 -0.788
       03 00       
0B16EF 1C 3A FF 0B 0867*      dl 0xFF3A1C,0x00040B ; DC 309.375 -0.773
       04 00       
0B16F5 28 3E FF 2A 0868*      dl 0xFF3E28,0x00042A ; DD 310.781 -0.757
       04 00       
0B16FB 52 42 FF 46 0869*      dl 0xFF4252,0x000446 ; DE 312.188 -0.741
       04 00       
0B1701 98 46 FF 63 0870*      dl 0xFF4698,0x000463 ; DF 313.594 -0.724
       04 00       
0B1707 FC 4A FF 7F 0871*      dl 0xFF4AFC,0x00047F ; E0 315.000 -0.707
       04 00       
0B170D 7B 4F FF 9B 0872*      dl 0xFF4F7B,0x00049B ; E1 316.406 -0.690
       04 00       
0B1713 16 54 FF B4 0873*      dl 0xFF5416,0x0004B4 ; E2 317.813 -0.672
       04 00       
0B1719 CA 58 FF CE 0874*      dl 0xFF58CA,0x0004CE ; E3 319.219 -0.653
       04 00       
0B171F 99 5D FF E7 0875*      dl 0xFF5D99,0x0004E7 ; E4 320.625 -0.634
       04 00       
0B1725 80 62 FF 00 0876*      dl 0xFF6280,0x000500 ; E5 322.031 -0.615
       05 00       
0B172B 81 67 FF 17 0877*      dl 0xFF6781,0x000517 ; E6 323.438 -0.596
       05 00       
0B1731 99 6C FF 2E 0878*      dl 0xFF6C99,0x00052E ; E7 324.844 -0.576
       05 00       
0B1737 C7 71 FF 44 0879*      dl 0xFF71C7,0x000544 ; E8 326.250 -0.556
       05 00       
0B173D 0B 77 FF 5A 0880*      dl 0xFF770B,0x00055A ; E9 327.656 -0.535
       05 00       
0B1743 65 7C FF 6D 0881*      dl 0xFF7C65,0x00056D ; EA 329.063 -0.514
       05 00       
0B1749 D2 81 FF 80 0882*      dl 0xFF81D2,0x000580 ; EB 330.469 -0.493
       05 00       
0B174F 53 87 FF 93 0883*      dl 0xFF8753,0x000593 ; EC 331.875 -0.471
       05 00       
0B1755 E7 8C FF A6 0884*      dl 0xFF8CE7,0x0005A6 ; ED 333.281 -0.450
       05 00       
0B175B 8D 92 FF B6 0885*      dl 0xFF928D,0x0005B6 ; EE 334.688 -0.428
       05 00       
0B1761 43 98 FF C6 0886*      dl 0xFF9843,0x0005C6 ; EF 336.094 -0.405
       05 00       
0B1767 09 9E FF D5 0887*      dl 0xFF9E09,0x0005D5 ; F0 337.500 -0.383
       05 00       
0B176D DE A3 FF E4 0888*      dl 0xFFA3DE,0x0005E4 ; F1 338.906 -0.360
       05 00       
0B1773 C3 A9 FF F0 0889*      dl 0xFFA9C3,0x0005F0 ; F2 340.313 -0.337
       05 00       
0B1779 B3 AF FF FD 0890*      dl 0xFFAFB3,0x0005FD ; F3 341.719 -0.314
       05 00       
0B177F B0 B5 FF 08 0891*      dl 0xFFB5B0,0x000608 ; F4 343.125 -0.290
       06 00       
0B1785 B9 BB FF 14 0892*      dl 0xFFBBB9,0x000614 ; F5 344.531 -0.267
       06 00       
0B178B CD C1 FF 1C 0893*      dl 0xFFC1CD,0x00061C ; F6 345.938 -0.243
       06 00       
0B1791 EA C7 FF 25 0894*      dl 0xFFC7EA,0x000625 ; F7 347.344 -0.219
       06 00       
0B1797 0F CE FF 2C 0895*      dl 0xFFCE0F,0x00062C ; F8 348.750 -0.195
       06 00       
0B179D 3C D4 FF 34 0896*      dl 0xFFD43C,0x000634 ; F9 350.156 -0.171
       06 00       
0B17A3 71 DA FF 39 0897*      dl 0xFFDA71,0x000639 ; FA 351.563 -0.147
       06 00       
0B17A9 AA E0 FF 3E 0898*      dl 0xFFE0AA,0x00063E ; FB 352.969 -0.122
       06 00       
0B17AF E9 E6 FF 42 0899*      dl 0xFFE6E9,0x000642 ; FC 354.375 -0.098
       06 00       
0B17B5 2B ED FF 46 0900*      dl 0xFFED2B,0x000646 ; FD 355.781 -0.074
       06 00       
0B17BB 71 F3 FF 47 0901*      dl 0xFFF371,0x000647 ; FE 357.188 -0.049
       06 00       
0B17C1 B8 F9 FF 48 0902*      dl 0xFFF9B8,0x000648 ; FF 358.594 -0.025
       06 00       
0B17C7 00 00 00 48 0903*      dl 0x000000,0x000648 ; 00 360.000 0.000
       06 00       
0B17CD             0904*  
0B17CD             0905*  sin_lut_1212:
0B17CD 00 00 00    0906*      dl 0x000000 ; 00, 00.000, +0.000000
0B17D0 65 00 00    0907*      dl 0x000065 ; 01, 01.406, +0.024541
0B17D3 C9 00 00    0908*      dl 0x0000C9 ; 02, 02.812, +0.049068
0B17D6 2D 01 00    0909*      dl 0x00012D ; 03, 04.219, +0.073565
0B17D9 91 01 00    0910*      dl 0x000191 ; 04, 05.625, +0.098017
0B17DC F5 01 00    0911*      dl 0x0001F5 ; 05, 07.031, +0.122411
0B17DF 59 02 00    0912*      dl 0x000259 ; 06, 08.438, +0.146730
0B17E2 BC 02 00    0913*      dl 0x0002BC ; 07, 09.844, +0.170962
0B17E5 1F 03 00    0914*      dl 0x00031F ; 08, 11.250, +0.195090
0B17E8 81 03 00    0915*      dl 0x000381 ; 09, 12.656, +0.219101
0B17EB E3 03 00    0916*      dl 0x0003E3 ; 0A, 14.062, +0.242980
0B17EE 44 04 00    0917*      dl 0x000444 ; 0B, 15.469, +0.266713
0B17F1 A5 04 00    0918*      dl 0x0004A5 ; 0C, 16.875, +0.290285
0B17F4 05 05 00    0919*      dl 0x000505 ; 0D, 18.281, +0.313682
0B17F7 64 05 00    0920*      dl 0x000564 ; 0E, 19.688, +0.336890
0B17FA C2 05 00    0921*      dl 0x0005C2 ; 0F, 21.094, +0.359895
0B17FD 1F 06 00    0922*      dl 0x00061F ; 10, 22.500, +0.382683
0B1800 7C 06 00    0923*      dl 0x00067C ; 11, 23.906, +0.405241
0B1803 D7 06 00    0924*      dl 0x0006D7 ; 12, 25.312, +0.427555
0B1806 32 07 00    0925*      dl 0x000732 ; 13, 26.719, +0.449611
0B1809 8B 07 00    0926*      dl 0x00078B ; 14, 28.125, +0.471397
0B180C E3 07 00    0927*      dl 0x0007E3 ; 15, 29.531, +0.492898
0B180F 3A 08 00    0928*      dl 0x00083A ; 16, 30.938, +0.514103
0B1812 8F 08 00    0929*      dl 0x00088F ; 17, 32.344, +0.534998
0B1815 E4 08 00    0930*      dl 0x0008E4 ; 18, 33.750, +0.555570
0B1818 37 09 00    0931*      dl 0x000937 ; 19, 35.156, +0.575808
0B181B 88 09 00    0932*      dl 0x000988 ; 1A, 36.562, +0.595699
0B181E D8 09 00    0933*      dl 0x0009D8 ; 1B, 37.969, +0.615232
0B1821 26 0A 00    0934*      dl 0x000A26 ; 1C, 39.375, +0.634393
0B1824 73 0A 00    0935*      dl 0x000A73 ; 1D, 40.781, +0.653173
0B1827 BF 0A 00    0936*      dl 0x000ABF ; 1E, 42.188, +0.671559
0B182A 08 0B 00    0937*      dl 0x000B08 ; 1F, 43.594, +0.689541
0B182D 50 0B 00    0938*      dl 0x000B50 ; 20, 45.000, +0.707107
0B1830 97 0B 00    0939*      dl 0x000B97 ; 21, 46.406, +0.724247
0B1833 DB 0B 00    0940*      dl 0x000BDB ; 22, 47.812, +0.740951
0B1836 1E 0C 00    0941*      dl 0x000C1E ; 23, 49.219, +0.757209
0B1839 5E 0C 00    0942*      dl 0x000C5E ; 24, 50.625, +0.773010
0B183C 9D 0C 00    0943*      dl 0x000C9D ; 25, 52.031, +0.788346
0B183F DA 0C 00    0944*      dl 0x000CDA ; 26, 53.438, +0.803208
0B1842 15 0D 00    0945*      dl 0x000D15 ; 27, 54.844, +0.817585
0B1845 4E 0D 00    0946*      dl 0x000D4E ; 28, 56.250, +0.831470
0B1848 85 0D 00    0947*      dl 0x000D85 ; 29, 57.656, +0.844854
0B184B B9 0D 00    0948*      dl 0x000DB9 ; 2A, 59.062, +0.857729
0B184E EC 0D 00    0949*      dl 0x000DEC ; 2B, 60.469, +0.870087
0B1851 1C 0E 00    0950*      dl 0x000E1C ; 2C, 61.875, +0.881921
0B1854 4B 0E 00    0951*      dl 0x000E4B ; 2D, 63.281, +0.893224
0B1857 77 0E 00    0952*      dl 0x000E77 ; 2E, 64.688, +0.903989
0B185A A1 0E 00    0953*      dl 0x000EA1 ; 2F, 66.094, +0.914210
0B185D C8 0E 00    0954*      dl 0x000EC8 ; 30, 67.500, +0.923880
0B1860 EE 0E 00    0955*      dl 0x000EEE ; 31, 68.906, +0.932993
0B1863 11 0F 00    0956*      dl 0x000F11 ; 32, 70.312, +0.941544
0B1866 31 0F 00    0957*      dl 0x000F31 ; 33, 71.719, +0.949528
0B1869 50 0F 00    0958*      dl 0x000F50 ; 34, 73.125, +0.956940
0B186C 6C 0F 00    0959*      dl 0x000F6C ; 35, 74.531, +0.963776
0B186F 85 0F 00    0960*      dl 0x000F85 ; 36, 75.938, +0.970031
0B1872 9C 0F 00    0961*      dl 0x000F9C ; 37, 77.344, +0.975702
0B1875 B1 0F 00    0962*      dl 0x000FB1 ; 38, 78.750, +0.980785
0B1878 C4 0F 00    0963*      dl 0x000FC4 ; 39, 80.156, +0.985278
0B187B D4 0F 00    0964*      dl 0x000FD4 ; 3A, 81.562, +0.989177
0B187E E1 0F 00    0965*      dl 0x000FE1 ; 3B, 82.969, +0.992480
0B1881 EC 0F 00    0966*      dl 0x000FEC ; 3C, 84.375, +0.995185
0B1884 F5 0F 00    0967*      dl 0x000FF5 ; 3D, 85.781, +0.997290
0B1887 FB 0F 00    0968*      dl 0x000FFB ; 3E, 87.188, +0.998795
0B188A FF 0F 00    0969*      dl 0x000FFF ; 3F, 88.594, +0.999699
0B188D 00 10 00    0970*      dl 0x001000 ; 40, 90.000, +1.000000
0B1890 FF 0F 00    0971*      dl 0x000FFF ; 41, 91.406, +0.999699
0B1893 FB 0F 00    0972*      dl 0x000FFB ; 42, 92.812, +0.998795
0B1896 F5 0F 00    0973*      dl 0x000FF5 ; 43, 94.219, +0.997290
0B1899 EC 0F 00    0974*      dl 0x000FEC ; 44, 95.625, +0.995185
0B189C E1 0F 00    0975*      dl 0x000FE1 ; 45, 97.031, +0.992480
0B189F D4 0F 00    0976*      dl 0x000FD4 ; 46, 98.438, +0.989177
0B18A2 C4 0F 00    0977*      dl 0x000FC4 ; 47, 99.844, +0.985278
0B18A5 B1 0F 00    0978*      dl 0x000FB1 ; 48, 101.250, +0.980785
0B18A8 9C 0F 00    0979*      dl 0x000F9C ; 49, 102.656, +0.975702
0B18AB 85 0F 00    0980*      dl 0x000F85 ; 4A, 104.062, +0.970031
0B18AE 6C 0F 00    0981*      dl 0x000F6C ; 4B, 105.469, +0.963776
0B18B1 50 0F 00    0982*      dl 0x000F50 ; 4C, 106.875, +0.956940
0B18B4 31 0F 00    0983*      dl 0x000F31 ; 4D, 108.281, +0.949528
0B18B7 11 0F 00    0984*      dl 0x000F11 ; 4E, 109.688, +0.941544
0B18BA EE 0E 00    0985*      dl 0x000EEE ; 4F, 111.094, +0.932993
0B18BD C8 0E 00    0986*      dl 0x000EC8 ; 50, 112.500, +0.923880
0B18C0 A1 0E 00    0987*      dl 0x000EA1 ; 51, 113.906, +0.914210
0B18C3 77 0E 00    0988*      dl 0x000E77 ; 52, 115.312, +0.903989
0B18C6 4B 0E 00    0989*      dl 0x000E4B ; 53, 116.719, +0.893224
0B18C9 1C 0E 00    0990*      dl 0x000E1C ; 54, 118.125, +0.881921
0B18CC EC 0D 00    0991*      dl 0x000DEC ; 55, 119.531, +0.870087
0B18CF B9 0D 00    0992*      dl 0x000DB9 ; 56, 120.938, +0.857729
0B18D2 85 0D 00    0993*      dl 0x000D85 ; 57, 122.344, +0.844854
0B18D5 4E 0D 00    0994*      dl 0x000D4E ; 58, 123.750, +0.831470
0B18D8 15 0D 00    0995*      dl 0x000D15 ; 59, 125.156, +0.817585
0B18DB DA 0C 00    0996*      dl 0x000CDA ; 5A, 126.562, +0.803208
0B18DE 9D 0C 00    0997*      dl 0x000C9D ; 5B, 127.969, +0.788346
0B18E1 5E 0C 00    0998*      dl 0x000C5E ; 5C, 129.375, +0.773010
0B18E4 1E 0C 00    0999*      dl 0x000C1E ; 5D, 130.781, +0.757209
0B18E7 DB 0B 00    1000*      dl 0x000BDB ; 5E, 132.188, +0.740951
0B18EA 97 0B 00    1001*      dl 0x000B97 ; 5F, 133.594, +0.724247
0B18ED 50 0B 00    1002*      dl 0x000B50 ; 60, 135.000, +0.707107
0B18F0 08 0B 00    1003*      dl 0x000B08 ; 61, 136.406, +0.689541
0B18F3 BF 0A 00    1004*      dl 0x000ABF ; 62, 137.812, +0.671559
0B18F6 73 0A 00    1005*      dl 0x000A73 ; 63, 139.219, +0.653173
0B18F9 26 0A 00    1006*      dl 0x000A26 ; 64, 140.625, +0.634393
0B18FC D8 09 00    1007*      dl 0x0009D8 ; 65, 142.031, +0.615232
0B18FF 88 09 00    1008*      dl 0x000988 ; 66, 143.438, +0.595699
0B1902 37 09 00    1009*      dl 0x000937 ; 67, 144.844, +0.575808
0B1905 E4 08 00    1010*      dl 0x0008E4 ; 68, 146.250, +0.555570
0B1908 8F 08 00    1011*      dl 0x00088F ; 69, 147.656, +0.534998
0B190B 3A 08 00    1012*      dl 0x00083A ; 6A, 149.062, +0.514103
0B190E E3 07 00    1013*      dl 0x0007E3 ; 6B, 150.469, +0.492898
0B1911 8B 07 00    1014*      dl 0x00078B ; 6C, 151.875, +0.471397
0B1914 32 07 00    1015*      dl 0x000732 ; 6D, 153.281, +0.449611
0B1917 D7 06 00    1016*      dl 0x0006D7 ; 6E, 154.688, +0.427555
0B191A 7C 06 00    1017*      dl 0x00067C ; 6F, 156.094, +0.405241
0B191D 1F 06 00    1018*      dl 0x00061F ; 70, 157.500, +0.382683
0B1920 C2 05 00    1019*      dl 0x0005C2 ; 71, 158.906, +0.359895
0B1923 64 05 00    1020*      dl 0x000564 ; 72, 160.312, +0.336890
0B1926 05 05 00    1021*      dl 0x000505 ; 73, 161.719, +0.313682
0B1929 A5 04 00    1022*      dl 0x0004A5 ; 74, 163.125, +0.290285
0B192C 44 04 00    1023*      dl 0x000444 ; 75, 164.531, +0.266713
0B192F E3 03 00    1024*      dl 0x0003E3 ; 76, 165.938, +0.242980
0B1932 81 03 00    1025*      dl 0x000381 ; 77, 167.344, +0.219101
0B1935 1F 03 00    1026*      dl 0x00031F ; 78, 168.750, +0.195090
0B1938 BC 02 00    1027*      dl 0x0002BC ; 79, 170.156, +0.170962
0B193B 59 02 00    1028*      dl 0x000259 ; 7A, 171.562, +0.146730
0B193E F5 01 00    1029*      dl 0x0001F5 ; 7B, 172.969, +0.122411
0B1941 91 01 00    1030*      dl 0x000191 ; 7C, 174.375, +0.098017
0B1944 2D 01 00    1031*      dl 0x00012D ; 7D, 175.781, +0.073565
0B1947 C9 00 00    1032*      dl 0x0000C9 ; 7E, 177.188, +0.049068
0B194A 65 00 00    1033*      dl 0x000065 ; 7F, 178.594, +0.024541
0B194D 00 00 00    1034*      dl 0x000000 ; 80, 180.000, +0.000000
0B1950 9B FF FF    1035*      dl 0xFFFF9B ; 81, 181.406, -0.024541
0B1953 37 FF FF    1036*      dl 0xFFFF37 ; 82, 182.812, -0.049068
0B1956 D3 FE FF    1037*      dl 0xFFFED3 ; 83, 184.219, -0.073565
0B1959 6F FE FF    1038*      dl 0xFFFE6F ; 84, 185.625, -0.098017
0B195C 0B FE FF    1039*      dl 0xFFFE0B ; 85, 187.031, -0.122411
0B195F A7 FD FF    1040*      dl 0xFFFDA7 ; 86, 188.438, -0.146730
0B1962 44 FD FF    1041*      dl 0xFFFD44 ; 87, 189.844, -0.170962
0B1965 E1 FC FF    1042*      dl 0xFFFCE1 ; 88, 191.250, -0.195090
0B1968 7F FC FF    1043*      dl 0xFFFC7F ; 89, 192.656, -0.219101
0B196B 1D FC FF    1044*      dl 0xFFFC1D ; 8A, 194.062, -0.242980
0B196E BC FB FF    1045*      dl 0xFFFBBC ; 8B, 195.469, -0.266713
0B1971 5B FB FF    1046*      dl 0xFFFB5B ; 8C, 196.875, -0.290285
0B1974 FB FA FF    1047*      dl 0xFFFAFB ; 8D, 198.281, -0.313682
0B1977 9C FA FF    1048*      dl 0xFFFA9C ; 8E, 199.688, -0.336890
0B197A 3E FA FF    1049*      dl 0xFFFA3E ; 8F, 201.094, -0.359895
0B197D E1 F9 FF    1050*      dl 0xFFF9E1 ; 90, 202.500, -0.382683
0B1980 84 F9 FF    1051*      dl 0xFFF984 ; 91, 203.906, -0.405241
0B1983 29 F9 FF    1052*      dl 0xFFF929 ; 92, 205.312, -0.427555
0B1986 CE F8 FF    1053*      dl 0xFFF8CE ; 93, 206.719, -0.449611
0B1989 75 F8 FF    1054*      dl 0xFFF875 ; 94, 208.125, -0.471397
0B198C 1D F8 FF    1055*      dl 0xFFF81D ; 95, 209.531, -0.492898
0B198F C6 F7 FF    1056*      dl 0xFFF7C6 ; 96, 210.938, -0.514103
0B1992 71 F7 FF    1057*      dl 0xFFF771 ; 97, 212.344, -0.534998
0B1995 1C F7 FF    1058*      dl 0xFFF71C ; 98, 213.750, -0.555570
0B1998 C9 F6 FF    1059*      dl 0xFFF6C9 ; 99, 215.156, -0.575808
0B199B 78 F6 FF    1060*      dl 0xFFF678 ; 9A, 216.562, -0.595699
0B199E 28 F6 FF    1061*      dl 0xFFF628 ; 9B, 217.969, -0.615232
0B19A1 DA F5 FF    1062*      dl 0xFFF5DA ; 9C, 219.375, -0.634393
0B19A4 8D F5 FF    1063*      dl 0xFFF58D ; 9D, 220.781, -0.653173
0B19A7 41 F5 FF    1064*      dl 0xFFF541 ; 9E, 222.188, -0.671559
0B19AA F8 F4 FF    1065*      dl 0xFFF4F8 ; 9F, 223.594, -0.689541
0B19AD B0 F4 FF    1066*      dl 0xFFF4B0 ; A0, 225.000, -0.707107
0B19B0 69 F4 FF    1067*      dl 0xFFF469 ; A1, 226.406, -0.724247
0B19B3 25 F4 FF    1068*      dl 0xFFF425 ; A2, 227.812, -0.740951
0B19B6 E2 F3 FF    1069*      dl 0xFFF3E2 ; A3, 229.219, -0.757209
0B19B9 A2 F3 FF    1070*      dl 0xFFF3A2 ; A4, 230.625, -0.773010
0B19BC 63 F3 FF    1071*      dl 0xFFF363 ; A5, 232.031, -0.788346
0B19BF 26 F3 FF    1072*      dl 0xFFF326 ; A6, 233.438, -0.803208
0B19C2 EB F2 FF    1073*      dl 0xFFF2EB ; A7, 234.844, -0.817585
0B19C5 B2 F2 FF    1074*      dl 0xFFF2B2 ; A8, 236.250, -0.831470
0B19C8 7B F2 FF    1075*      dl 0xFFF27B ; A9, 237.656, -0.844854
0B19CB 47 F2 FF    1076*      dl 0xFFF247 ; AA, 239.062, -0.857729
0B19CE 14 F2 FF    1077*      dl 0xFFF214 ; AB, 240.469, -0.870087
0B19D1 E4 F1 FF    1078*      dl 0xFFF1E4 ; AC, 241.875, -0.881921
0B19D4 B5 F1 FF    1079*      dl 0xFFF1B5 ; AD, 243.281, -0.893224
0B19D7 89 F1 FF    1080*      dl 0xFFF189 ; AE, 244.688, -0.903989
0B19DA 5F F1 FF    1081*      dl 0xFFF15F ; AF, 246.094, -0.914210
0B19DD 38 F1 FF    1082*      dl 0xFFF138 ; B0, 247.500, -0.923880
0B19E0 12 F1 FF    1083*      dl 0xFFF112 ; B1, 248.906, -0.932993
0B19E3 EF F0 FF    1084*      dl 0xFFF0EF ; B2, 250.312, -0.941544
0B19E6 CF F0 FF    1085*      dl 0xFFF0CF ; B3, 251.719, -0.949528
0B19E9 B0 F0 FF    1086*      dl 0xFFF0B0 ; B4, 253.125, -0.956940
0B19EC 94 F0 FF    1087*      dl 0xFFF094 ; B5, 254.531, -0.963776
0B19EF 7B F0 FF    1088*      dl 0xFFF07B ; B6, 255.938, -0.970031
0B19F2 64 F0 FF    1089*      dl 0xFFF064 ; B7, 257.344, -0.975702
0B19F5 4F F0 FF    1090*      dl 0xFFF04F ; B8, 258.750, -0.980785
0B19F8 3C F0 FF    1091*      dl 0xFFF03C ; B9, 260.156, -0.985278
0B19FB 2C F0 FF    1092*      dl 0xFFF02C ; BA, 261.562, -0.989177
0B19FE 1F F0 FF    1093*      dl 0xFFF01F ; BB, 262.969, -0.992480
0B1A01 14 F0 FF    1094*      dl 0xFFF014 ; BC, 264.375, -0.995185
0B1A04 0B F0 FF    1095*      dl 0xFFF00B ; BD, 265.781, -0.997290
0B1A07 05 F0 FF    1096*      dl 0xFFF005 ; BE, 267.188, -0.998795
0B1A0A 01 F0 FF    1097*      dl 0xFFF001 ; BF, 268.594, -0.999699
0B1A0D 00 F0 FF    1098*      dl 0xFFF000 ; C0, 270.000, -1.000000
0B1A10 01 F0 FF    1099*      dl 0xFFF001 ; C1, 271.406, -0.999699
0B1A13 05 F0 FF    1100*      dl 0xFFF005 ; C2, 272.812, -0.998795
0B1A16 0B F0 FF    1101*      dl 0xFFF00B ; C3, 274.219, -0.997290
0B1A19 14 F0 FF    1102*      dl 0xFFF014 ; C4, 275.625, -0.995185
0B1A1C 1F F0 FF    1103*      dl 0xFFF01F ; C5, 277.031, -0.992480
0B1A1F 2C F0 FF    1104*      dl 0xFFF02C ; C6, 278.438, -0.989177
0B1A22 3C F0 FF    1105*      dl 0xFFF03C ; C7, 279.844, -0.985278
0B1A25 4F F0 FF    1106*      dl 0xFFF04F ; C8, 281.250, -0.980785
0B1A28 64 F0 FF    1107*      dl 0xFFF064 ; C9, 282.656, -0.975702
0B1A2B 7B F0 FF    1108*      dl 0xFFF07B ; CA, 284.062, -0.970031
0B1A2E 94 F0 FF    1109*      dl 0xFFF094 ; CB, 285.469, -0.963776
0B1A31 B0 F0 FF    1110*      dl 0xFFF0B0 ; CC, 286.875, -0.956940
0B1A34 CF F0 FF    1111*      dl 0xFFF0CF ; CD, 288.281, -0.949528
0B1A37 EF F0 FF    1112*      dl 0xFFF0EF ; CE, 289.688, -0.941544
0B1A3A 12 F1 FF    1113*      dl 0xFFF112 ; CF, 291.094, -0.932993
0B1A3D 38 F1 FF    1114*      dl 0xFFF138 ; D0, 292.500, -0.923880
0B1A40 5F F1 FF    1115*      dl 0xFFF15F ; D1, 293.906, -0.914210
0B1A43 89 F1 FF    1116*      dl 0xFFF189 ; D2, 295.312, -0.903989
0B1A46 B5 F1 FF    1117*      dl 0xFFF1B5 ; D3, 296.719, -0.893224
0B1A49 E4 F1 FF    1118*      dl 0xFFF1E4 ; D4, 298.125, -0.881921
0B1A4C 14 F2 FF    1119*      dl 0xFFF214 ; D5, 299.531, -0.870087
0B1A4F 47 F2 FF    1120*      dl 0xFFF247 ; D6, 300.938, -0.857729
0B1A52 7B F2 FF    1121*      dl 0xFFF27B ; D7, 302.344, -0.844854
0B1A55 B2 F2 FF    1122*      dl 0xFFF2B2 ; D8, 303.750, -0.831470
0B1A58 EB F2 FF    1123*      dl 0xFFF2EB ; D9, 305.156, -0.817585
0B1A5B 26 F3 FF    1124*      dl 0xFFF326 ; DA, 306.562, -0.803208
0B1A5E 63 F3 FF    1125*      dl 0xFFF363 ; DB, 307.969, -0.788346
0B1A61 A2 F3 FF    1126*      dl 0xFFF3A2 ; DC, 309.375, -0.773010
0B1A64 E2 F3 FF    1127*      dl 0xFFF3E2 ; DD, 310.781, -0.757209
0B1A67 25 F4 FF    1128*      dl 0xFFF425 ; DE, 312.188, -0.740951
0B1A6A 69 F4 FF    1129*      dl 0xFFF469 ; DF, 313.594, -0.724247
0B1A6D B0 F4 FF    1130*      dl 0xFFF4B0 ; E0, 315.000, -0.707107
0B1A70 F8 F4 FF    1131*      dl 0xFFF4F8 ; E1, 316.406, -0.689541
0B1A73 41 F5 FF    1132*      dl 0xFFF541 ; E2, 317.812, -0.671559
0B1A76 8D F5 FF    1133*      dl 0xFFF58D ; E3, 319.219, -0.653173
0B1A79 DA F5 FF    1134*      dl 0xFFF5DA ; E4, 320.625, -0.634393
0B1A7C 28 F6 FF    1135*      dl 0xFFF628 ; E5, 322.031, -0.615232
0B1A7F 78 F6 FF    1136*      dl 0xFFF678 ; E6, 323.438, -0.595699
0B1A82 C9 F6 FF    1137*      dl 0xFFF6C9 ; E7, 324.844, -0.575808
0B1A85 1C F7 FF    1138*      dl 0xFFF71C ; E8, 326.250, -0.555570
0B1A88 71 F7 FF    1139*      dl 0xFFF771 ; E9, 327.656, -0.534998
0B1A8B C6 F7 FF    1140*      dl 0xFFF7C6 ; EA, 329.062, -0.514103
0B1A8E 1D F8 FF    1141*      dl 0xFFF81D ; EB, 330.469, -0.492898
0B1A91 75 F8 FF    1142*      dl 0xFFF875 ; EC, 331.875, -0.471397
0B1A94 CE F8 FF    1143*      dl 0xFFF8CE ; ED, 333.281, -0.449611
0B1A97 29 F9 FF    1144*      dl 0xFFF929 ; EE, 334.688, -0.427555
0B1A9A 84 F9 FF    1145*      dl 0xFFF984 ; EF, 336.094, -0.405241
0B1A9D E1 F9 FF    1146*      dl 0xFFF9E1 ; F0, 337.500, -0.382683
0B1AA0 3E FA FF    1147*      dl 0xFFFA3E ; F1, 338.906, -0.359895
0B1AA3 9C FA FF    1148*      dl 0xFFFA9C ; F2, 340.312, -0.336890
0B1AA6 FB FA FF    1149*      dl 0xFFFAFB ; F3, 341.719, -0.313682
0B1AA9 5B FB FF    1150*      dl 0xFFFB5B ; F4, 343.125, -0.290285
0B1AAC BC FB FF    1151*      dl 0xFFFBBC ; F5, 344.531, -0.266713
0B1AAF 1D FC FF    1152*      dl 0xFFFC1D ; F6, 345.938, -0.242980
0B1AB2 7F FC FF    1153*      dl 0xFFFC7F ; F7, 347.344, -0.219101
0B1AB5 E1 FC FF    1154*      dl 0xFFFCE1 ; F8, 348.750, -0.195090
0B1AB8 44 FD FF    1155*      dl 0xFFFD44 ; F9, 350.156, -0.170962
0B1ABB A7 FD FF    1156*      dl 0xFFFDA7 ; FA, 351.562, -0.146730
0B1ABE 0B FE FF    1157*      dl 0xFFFE0B ; FB, 352.969, -0.122411
0B1AC1 6F FE FF    1158*      dl 0xFFFE6F ; FC, 354.375, -0.098017
0B1AC4 D3 FE FF    1159*      dl 0xFFFED3 ; FD, 355.781, -0.073565
0B1AC7 37 FF FF    1160*      dl 0xFFFF37 ; FE, 357.188, -0.049068
0B1ACA 9B FF FF    1161*      dl 0xFFFF9B ; FF, 358.594, -0.024541
0B1ACD             1162*  
0B1ACD             1163*  atan_lut_168:
0B1ACD 00 00 00    1164*  	dl 0x000000 ; 000000, 0.000
0B1AD0 28 00 00    1165*  	dl 0x000028 ; 000001, 0.224
0B1AD3 51 00 00    1166*  	dl 0x000051 ; 000002, 0.448
0B1AD6 7A 00 00    1167*  	dl 0x00007A ; 000003, 0.671
0B1AD9 A2 00 00    1168*  	dl 0x0000A2 ; 000004, 0.895
0B1ADC CB 00 00    1169*  	dl 0x0000CB ; 000005, 1.119
0B1ADF F4 00 00    1170*  	dl 0x0000F4 ; 000006, 1.343
0B1AE2 1D 01 00    1171*  	dl 0x00011D ; 000007, 1.566
0B1AE5 45 01 00    1172*  	dl 0x000145 ; 000008, 1.790
0B1AE8 6E 01 00    1173*  	dl 0x00016E ; 000009, 2.013
0B1AEB 97 01 00    1174*  	dl 0x000197 ; 00000A, 2.237
0B1AEE BF 01 00    1175*  	dl 0x0001BF ; 00000B, 2.460
0B1AF1 E8 01 00    1176*  	dl 0x0001E8 ; 00000C, 2.684
0B1AF4 11 02 00    1177*  	dl 0x000211 ; 00000D, 2.907
0B1AF7 39 02 00    1178*  	dl 0x000239 ; 00000E, 3.130
0B1AFA 62 02 00    1179*  	dl 0x000262 ; 00000F, 3.353
0B1AFD 8B 02 00    1180*  	dl 0x00028B ; 000010, 3.576
0B1B00 B3 02 00    1181*  	dl 0x0002B3 ; 000011, 3.799
0B1B03 DC 02 00    1182*  	dl 0x0002DC ; 000012, 4.022
0B1B06 04 03 00    1183*  	dl 0x000304 ; 000013, 4.245
0B1B09 2D 03 00    1184*  	dl 0x00032D ; 000014, 4.467
0B1B0C 55 03 00    1185*  	dl 0x000355 ; 000015, 4.690
0B1B0F 7E 03 00    1186*  	dl 0x00037E ; 000016, 4.912
0B1B12 A6 03 00    1187*  	dl 0x0003A6 ; 000017, 5.134
0B1B15 CE 03 00    1188*  	dl 0x0003CE ; 000018, 5.356
0B1B18 F7 03 00    1189*  	dl 0x0003F7 ; 000019, 5.578
0B1B1B 1F 04 00    1190*  	dl 0x00041F ; 00001A, 5.799
0B1B1E 48 04 00    1191*  	dl 0x000448 ; 00001B, 6.021
0B1B21 70 04 00    1192*  	dl 0x000470 ; 00001C, 6.242
0B1B24 98 04 00    1193*  	dl 0x000498 ; 00001D, 6.463
0B1B27 C0 04 00    1194*  	dl 0x0004C0 ; 00001E, 6.684
0B1B2A E8 04 00    1195*  	dl 0x0004E8 ; 00001F, 6.905
0B1B2D 11 05 00    1196*  	dl 0x000511 ; 000020, 7.125
0B1B30 39 05 00    1197*  	dl 0x000539 ; 000021, 7.345
0B1B33 61 05 00    1198*  	dl 0x000561 ; 000022, 7.565
0B1B36 89 05 00    1199*  	dl 0x000589 ; 000023, 7.785
0B1B39 B1 05 00    1200*  	dl 0x0005B1 ; 000024, 8.005
0B1B3C D9 05 00    1201*  	dl 0x0005D9 ; 000025, 8.224
0B1B3F 01 06 00    1202*  	dl 0x000601 ; 000026, 8.443
0B1B42 28 06 00    1203*  	dl 0x000628 ; 000027, 8.662
0B1B45 50 06 00    1204*  	dl 0x000650 ; 000028, 8.881
0B1B48 78 06 00    1205*  	dl 0x000678 ; 000029, 9.099
0B1B4B A0 06 00    1206*  	dl 0x0006A0 ; 00002A, 9.317
0B1B4E C7 06 00    1207*  	dl 0x0006C7 ; 00002B, 9.535
0B1B51 EF 06 00    1208*  	dl 0x0006EF ; 00002C, 9.752
0B1B54 16 07 00    1209*  	dl 0x000716 ; 00002D, 9.970
0B1B57 3E 07 00    1210*  	dl 0x00073E ; 00002E, 10.187
0B1B5A 65 07 00    1211*  	dl 0x000765 ; 00002F, 10.403
0B1B5D 8D 07 00    1212*  	dl 0x00078D ; 000030, 10.620
0B1B60 B4 07 00    1213*  	dl 0x0007B4 ; 000031, 10.836
0B1B63 DB 07 00    1214*  	dl 0x0007DB ; 000032, 11.051
0B1B66 03 08 00    1215*  	dl 0x000803 ; 000033, 11.267
0B1B69 2A 08 00    1216*  	dl 0x00082A ; 000034, 11.482
0B1B6C 51 08 00    1217*  	dl 0x000851 ; 000035, 11.697
0B1B6F 78 08 00    1218*  	dl 0x000878 ; 000036, 11.911
0B1B72 9F 08 00    1219*  	dl 0x00089F ; 000037, 12.125
0B1B75 C6 08 00    1220*  	dl 0x0008C6 ; 000038, 12.339
0B1B78 ED 08 00    1221*  	dl 0x0008ED ; 000039, 12.553
0B1B7B 13 09 00    1222*  	dl 0x000913 ; 00003A, 12.766
0B1B7E 3A 09 00    1223*  	dl 0x00093A ; 00003B, 12.978
0B1B81 61 09 00    1224*  	dl 0x000961 ; 00003C, 13.191
0B1B84 87 09 00    1225*  	dl 0x000987 ; 00003D, 13.403
0B1B87 AE 09 00    1226*  	dl 0x0009AE ; 00003E, 13.614
0B1B8A D4 09 00    1227*  	dl 0x0009D4 ; 00003F, 13.825
0B1B8D FB 09 00    1228*  	dl 0x0009FB ; 000040, 14.036
0B1B90 21 0A 00    1229*  	dl 0x000A21 ; 000041, 14.247
0B1B93 47 0A 00    1230*  	dl 0x000A47 ; 000042, 14.457
0B1B96 6D 0A 00    1231*  	dl 0x000A6D ; 000043, 14.666
0B1B99 94 0A 00    1232*  	dl 0x000A94 ; 000044, 14.876
0B1B9C BA 0A 00    1233*  	dl 0x000ABA ; 000045, 15.085
0B1B9F E0 0A 00    1234*  	dl 0x000AE0 ; 000046, 15.293
0B1BA2 05 0B 00    1235*  	dl 0x000B05 ; 000047, 15.501
0B1BA5 2B 0B 00    1236*  	dl 0x000B2B ; 000048, 15.709
0B1BA8 51 0B 00    1237*  	dl 0x000B51 ; 000049, 15.916
0B1BAB 77 0B 00    1238*  	dl 0x000B77 ; 00004A, 16.123
0B1BAE 9C 0B 00    1239*  	dl 0x000B9C ; 00004B, 16.329
0B1BB1 C2 0B 00    1240*  	dl 0x000BC2 ; 00004C, 16.535
0B1BB4 E7 0B 00    1241*  	dl 0x000BE7 ; 00004D, 16.740
0B1BB7 0C 0C 00    1242*  	dl 0x000C0C ; 00004E, 16.945
0B1BBA 32 0C 00    1243*  	dl 0x000C32 ; 00004F, 17.150
0B1BBD 57 0C 00    1244*  	dl 0x000C57 ; 000050, 17.354
0B1BC0 7C 0C 00    1245*  	dl 0x000C7C ; 000051, 17.558
0B1BC3 A1 0C 00    1246*  	dl 0x000CA1 ; 000052, 17.761
0B1BC6 C6 0C 00    1247*  	dl 0x000CC6 ; 000053, 17.964
0B1BC9 EB 0C 00    1248*  	dl 0x000CEB ; 000054, 18.166
0B1BCC 0F 0D 00    1249*  	dl 0x000D0F ; 000055, 18.368
0B1BCF 34 0D 00    1250*  	dl 0x000D34 ; 000056, 18.569
0B1BD2 58 0D 00    1251*  	dl 0x000D58 ; 000057, 18.770
0B1BD5 7D 0D 00    1252*  	dl 0x000D7D ; 000058, 18.970
0B1BD8 A1 0D 00    1253*  	dl 0x000DA1 ; 000059, 19.170
0B1BDB C6 0D 00    1254*  	dl 0x000DC6 ; 00005A, 19.370
0B1BDE EA 0D 00    1255*  	dl 0x000DEA ; 00005B, 19.569
0B1BE1 0E 0E 00    1256*  	dl 0x000E0E ; 00005C, 19.767
0B1BE4 32 0E 00    1257*  	dl 0x000E32 ; 00005D, 19.965
0B1BE7 56 0E 00    1258*  	dl 0x000E56 ; 00005E, 20.163
0B1BEA 7A 0E 00    1259*  	dl 0x000E7A ; 00005F, 20.360
0B1BED 9E 0E 00    1260*  	dl 0x000E9E ; 000060, 20.556
0B1BF0 C1 0E 00    1261*  	dl 0x000EC1 ; 000061, 20.752
0B1BF3 E5 0E 00    1262*  	dl 0x000EE5 ; 000062, 20.947
0B1BF6 08 0F 00    1263*  	dl 0x000F08 ; 000063, 21.142
0B1BF9 2C 0F 00    1264*  	dl 0x000F2C ; 000064, 21.337
0B1BFC 4F 0F 00    1265*  	dl 0x000F4F ; 000065, 21.531
0B1BFF 72 0F 00    1266*  	dl 0x000F72 ; 000066, 21.724
0B1C02 95 0F 00    1267*  	dl 0x000F95 ; 000067, 21.917
0B1C05 B8 0F 00    1268*  	dl 0x000FB8 ; 000068, 22.109
0B1C08 DB 0F 00    1269*  	dl 0x000FDB ; 000069, 22.301
0B1C0B FE 0F 00    1270*  	dl 0x000FFE ; 00006A, 22.493
0B1C0E 21 10 00    1271*  	dl 0x001021 ; 00006B, 22.683
0B1C11 44 10 00    1272*  	dl 0x001044 ; 00006C, 22.874
0B1C14 66 10 00    1273*  	dl 0x001066 ; 00006D, 23.063
0B1C17 89 10 00    1274*  	dl 0x001089 ; 00006E, 23.253
0B1C1A AB 10 00    1275*  	dl 0x0010AB ; 00006F, 23.441
0B1C1D CD 10 00    1276*  	dl 0x0010CD ; 000070, 23.629
0B1C20 EF 10 00    1277*  	dl 0x0010EF ; 000071, 23.817
0B1C23 11 11 00    1278*  	dl 0x001111 ; 000072, 24.004
0B1C26 33 11 00    1279*  	dl 0x001133 ; 000073, 24.191
0B1C29 55 11 00    1280*  	dl 0x001155 ; 000074, 24.376
0B1C2C 77 11 00    1281*  	dl 0x001177 ; 000075, 24.562
0B1C2F 99 11 00    1282*  	dl 0x001199 ; 000076, 24.747
0B1C32 BA 11 00    1283*  	dl 0x0011BA ; 000077, 24.931
0B1C35 DC 11 00    1284*  	dl 0x0011DC ; 000078, 25.115
0B1C38 FD 11 00    1285*  	dl 0x0011FD ; 000079, 25.298
0B1C3B 1E 12 00    1286*  	dl 0x00121E ; 00007A, 25.481
0B1C3E 3F 12 00    1287*  	dl 0x00123F ; 00007B, 25.663
0B1C41 60 12 00    1288*  	dl 0x001260 ; 00007C, 25.844
0B1C44 81 12 00    1289*  	dl 0x001281 ; 00007D, 26.025
0B1C47 A2 12 00    1290*  	dl 0x0012A2 ; 00007E, 26.206
0B1C4A C3 12 00    1291*  	dl 0x0012C3 ; 00007F, 26.386
0B1C4D E4 12 00    1292*  	dl 0x0012E4 ; 000080, 26.565
0B1C50 04 13 00    1293*  	dl 0x001304 ; 000081, 26.744
0B1C53 25 13 00    1294*  	dl 0x001325 ; 000082, 26.922
0B1C56 45 13 00    1295*  	dl 0x001345 ; 000083, 27.100
0B1C59 65 13 00    1296*  	dl 0x001365 ; 000084, 27.277
0B1C5C 85 13 00    1297*  	dl 0x001385 ; 000085, 27.453
0B1C5F A5 13 00    1298*  	dl 0x0013A5 ; 000086, 27.629
0B1C62 C5 13 00    1299*  	dl 0x0013C5 ; 000087, 27.805
0B1C65 E5 13 00    1300*  	dl 0x0013E5 ; 000088, 27.979
0B1C68 05 14 00    1301*  	dl 0x001405 ; 000089, 28.154
0B1C6B 24 14 00    1302*  	dl 0x001424 ; 00008A, 28.327
0B1C6E 44 14 00    1303*  	dl 0x001444 ; 00008B, 28.501
0B1C71 63 14 00    1304*  	dl 0x001463 ; 00008C, 28.673
0B1C74 83 14 00    1305*  	dl 0x001483 ; 00008D, 28.845
0B1C77 A2 14 00    1306*  	dl 0x0014A2 ; 00008E, 29.017
0B1C7A C1 14 00    1307*  	dl 0x0014C1 ; 00008F, 29.187
0B1C7D E0 14 00    1308*  	dl 0x0014E0 ; 000090, 29.358
0B1C80 FF 14 00    1309*  	dl 0x0014FF ; 000091, 29.527
0B1C83 1E 15 00    1310*  	dl 0x00151E ; 000092, 29.697
0B1C86 3C 15 00    1311*  	dl 0x00153C ; 000093, 29.865
0B1C89 5B 15 00    1312*  	dl 0x00155B ; 000094, 30.033
0B1C8C 79 15 00    1313*  	dl 0x001579 ; 000095, 30.201
0B1C8F 98 15 00    1314*  	dl 0x001598 ; 000096, 30.368
0B1C92 B6 15 00    1315*  	dl 0x0015B6 ; 000097, 30.534
0B1C95 D4 15 00    1316*  	dl 0x0015D4 ; 000098, 30.700
0B1C98 F2 15 00    1317*  	dl 0x0015F2 ; 000099, 30.865
0B1C9B 10 16 00    1318*  	dl 0x001610 ; 00009A, 31.030
0B1C9E 2E 16 00    1319*  	dl 0x00162E ; 00009B, 31.194
0B1CA1 4C 16 00    1320*  	dl 0x00164C ; 00009C, 31.357
0B1CA4 6A 16 00    1321*  	dl 0x00166A ; 00009D, 31.520
0B1CA7 87 16 00    1322*  	dl 0x001687 ; 00009E, 31.682
0B1CAA A5 16 00    1323*  	dl 0x0016A5 ; 00009F, 31.844
0B1CAD C2 16 00    1324*  	dl 0x0016C2 ; 0000A0, 32.005
0B1CB0 DF 16 00    1325*  	dl 0x0016DF ; 0000A1, 32.166
0B1CB3 FC 16 00    1326*  	dl 0x0016FC ; 0000A2, 32.326
0B1CB6 19 17 00    1327*  	dl 0x001719 ; 0000A3, 32.486
0B1CB9 36 17 00    1328*  	dl 0x001736 ; 0000A4, 32.645
0B1CBC 53 17 00    1329*  	dl 0x001753 ; 0000A5, 32.803
0B1CBF 70 17 00    1330*  	dl 0x001770 ; 0000A6, 32.961
0B1CC2 8C 17 00    1331*  	dl 0x00178C ; 0000A7, 33.118
0B1CC5 A9 17 00    1332*  	dl 0x0017A9 ; 0000A8, 33.275
0B1CC8 C5 17 00    1333*  	dl 0x0017C5 ; 0000A9, 33.431
0B1CCB E2 17 00    1334*  	dl 0x0017E2 ; 0000AA, 33.587
0B1CCE FE 17 00    1335*  	dl 0x0017FE ; 0000AB, 33.742
0B1CD1 1A 18 00    1336*  	dl 0x00181A ; 0000AC, 33.896
0B1CD4 36 18 00    1337*  	dl 0x001836 ; 0000AD, 34.050
0B1CD7 52 18 00    1338*  	dl 0x001852 ; 0000AE, 34.203
0B1CDA 6E 18 00    1339*  	dl 0x00186E ; 0000AF, 34.356
0B1CDD 8A 18 00    1340*  	dl 0x00188A ; 0000B0, 34.509
0B1CE0 A5 18 00    1341*  	dl 0x0018A5 ; 0000B1, 34.660
0B1CE3 C1 18 00    1342*  	dl 0x0018C1 ; 0000B2, 34.811
0B1CE6 DC 18 00    1343*  	dl 0x0018DC ; 0000B3, 34.962
0B1CE9 F7 18 00    1344*  	dl 0x0018F7 ; 0000B4, 35.112
0B1CEC 13 19 00    1345*  	dl 0x001913 ; 0000B5, 35.262
0B1CEF 2E 19 00    1346*  	dl 0x00192E ; 0000B6, 35.410
0B1CF2 49 19 00    1347*  	dl 0x001949 ; 0000B7, 35.559
0B1CF5 64 19 00    1348*  	dl 0x001964 ; 0000B8, 35.707
0B1CF8 7F 19 00    1349*  	dl 0x00197F ; 0000B9, 35.854
0B1CFB 99 19 00    1350*  	dl 0x001999 ; 0000BA, 36.001
0B1CFE B4 19 00    1351*  	dl 0x0019B4 ; 0000BB, 36.147
0B1D01 CE 19 00    1352*  	dl 0x0019CE ; 0000BC, 36.293
0B1D04 E9 19 00    1353*  	dl 0x0019E9 ; 0000BD, 36.438
0B1D07 03 1A 00    1354*  	dl 0x001A03 ; 0000BE, 36.582
0B1D0A 1D 1A 00    1355*  	dl 0x001A1D ; 0000BF, 36.726
0B1D0D 37 1A 00    1356*  	dl 0x001A37 ; 0000C0, 36.870
0B1D10 51 1A 00    1357*  	dl 0x001A51 ; 0000C1, 37.013
0B1D13 6B 1A 00    1358*  	dl 0x001A6B ; 0000C2, 37.155
0B1D16 85 1A 00    1359*  	dl 0x001A85 ; 0000C3, 37.297
0B1D19 9F 1A 00    1360*  	dl 0x001A9F ; 0000C4, 37.439
0B1D1C B9 1A 00    1361*  	dl 0x001AB9 ; 0000C5, 37.579
0B1D1F D2 1A 00    1362*  	dl 0x001AD2 ; 0000C6, 37.720
0B1D22 EC 1A 00    1363*  	dl 0x001AEC ; 0000C7, 37.859
0B1D25 05 1B 00    1364*  	dl 0x001B05 ; 0000C8, 37.999
0B1D28 1E 1B 00    1365*  	dl 0x001B1E ; 0000C9, 38.137
0B1D2B 37 1B 00    1366*  	dl 0x001B37 ; 0000CA, 38.276
0B1D2E 50 1B 00    1367*  	dl 0x001B50 ; 0000CB, 38.413
0B1D31 69 1B 00    1368*  	dl 0x001B69 ; 0000CC, 38.550
0B1D34 82 1B 00    1369*  	dl 0x001B82 ; 0000CD, 38.687
0B1D37 9B 1B 00    1370*  	dl 0x001B9B ; 0000CE, 38.823
0B1D3A B4 1B 00    1371*  	dl 0x001BB4 ; 0000CF, 38.959
0B1D3D CC 1B 00    1372*  	dl 0x001BCC ; 0000D0, 39.094
0B1D40 E5 1B 00    1373*  	dl 0x001BE5 ; 0000D1, 39.228
0B1D43 FD 1B 00    1374*  	dl 0x001BFD ; 0000D2, 39.362
0B1D46 16 1C 00    1375*  	dl 0x001C16 ; 0000D3, 39.496
0B1D49 2E 1C 00    1376*  	dl 0x001C2E ; 0000D4, 39.629
0B1D4C 46 1C 00    1377*  	dl 0x001C46 ; 0000D5, 39.762
0B1D4F 5E 1C 00    1378*  	dl 0x001C5E ; 0000D6, 39.894
0B1D52 76 1C 00    1379*  	dl 0x001C76 ; 0000D7, 40.025
0B1D55 8E 1C 00    1380*  	dl 0x001C8E ; 0000D8, 40.156
0B1D58 A5 1C 00    1381*  	dl 0x001CA5 ; 0000D9, 40.286
0B1D5B BD 1C 00    1382*  	dl 0x001CBD ; 0000DA, 40.416
0B1D5E D5 1C 00    1383*  	dl 0x001CD5 ; 0000DB, 40.546
0B1D61 EC 1C 00    1384*  	dl 0x001CEC ; 0000DC, 40.675
0B1D64 04 1D 00    1385*  	dl 0x001D04 ; 0000DD, 40.803
0B1D67 1B 1D 00    1386*  	dl 0x001D1B ; 0000DE, 40.931
0B1D6A 32 1D 00    1387*  	dl 0x001D32 ; 0000DF, 41.059
0B1D6D 49 1D 00    1388*  	dl 0x001D49 ; 0000E0, 41.186
0B1D70 60 1D 00    1389*  	dl 0x001D60 ; 0000E1, 41.312
0B1D73 77 1D 00    1390*  	dl 0x001D77 ; 0000E2, 41.438
0B1D76 8E 1D 00    1391*  	dl 0x001D8E ; 0000E3, 41.564
0B1D79 A5 1D 00    1392*  	dl 0x001DA5 ; 0000E4, 41.689
0B1D7C BB 1D 00    1393*  	dl 0x001DBB ; 0000E5, 41.814
0B1D7F D2 1D 00    1394*  	dl 0x001DD2 ; 0000E6, 41.938
0B1D82 E9 1D 00    1395*  	dl 0x001DE9 ; 0000E7, 42.061
0B1D85 FF 1D 00    1396*  	dl 0x001DFF ; 0000E8, 42.184
0B1D88 15 1E 00    1397*  	dl 0x001E15 ; 0000E9, 42.307
0B1D8B 2C 1E 00    1398*  	dl 0x001E2C ; 0000EA, 42.429
0B1D8E 42 1E 00    1399*  	dl 0x001E42 ; 0000EB, 42.551
0B1D91 58 1E 00    1400*  	dl 0x001E58 ; 0000EC, 42.672
0B1D94 6E 1E 00    1401*  	dl 0x001E6E ; 0000ED, 42.793
0B1D97 84 1E 00    1402*  	dl 0x001E84 ; 0000EE, 42.913
0B1D9A 99 1E 00    1403*  	dl 0x001E99 ; 0000EF, 43.033
0B1D9D AF 1E 00    1404*  	dl 0x001EAF ; 0000F0, 43.152
0B1DA0 C5 1E 00    1405*  	dl 0x001EC5 ; 0000F1, 43.271
0B1DA3 DA 1E 00    1406*  	dl 0x001EDA ; 0000F2, 43.390
0B1DA6 F0 1E 00    1407*  	dl 0x001EF0 ; 0000F3, 43.508
0B1DA9 05 1F 00    1408*  	dl 0x001F05 ; 0000F4, 43.625
0B1DAC 1B 1F 00    1409*  	dl 0x001F1B ; 0000F5, 43.742
0B1DAF 30 1F 00    1410*  	dl 0x001F30 ; 0000F6, 43.859
0B1DB2 45 1F 00    1411*  	dl 0x001F45 ; 0000F7, 43.975
0B1DB5 5A 1F 00    1412*  	dl 0x001F5A ; 0000F8, 44.091
0B1DB8 6F 1F 00    1413*  	dl 0x001F6F ; 0000F9, 44.206
0B1DBB 84 1F 00    1414*  	dl 0x001F84 ; 0000FA, 44.321
0B1DBE 99 1F 00    1415*  	dl 0x001F99 ; 0000FB, 44.435
0B1DC1 AD 1F 00    1416*  	dl 0x001FAD ; 0000FC, 44.549
0B1DC4 C2 1F 00    1417*  	dl 0x001FC2 ; 0000FD, 44.662
0B1DC7 D7 1F 00    1418*  	dl 0x001FD7 ; 0000FE, 44.775
0B1DCA EB 1F 00    1419*  	dl 0x001FEB ; 0000FF, 44.888
0B1DCD 00 20 00    1420*  	dl 0x002000 ; 000100, 45.000 only needed for interpolation
0B1DD0             0024       include "files.inc"
0B1DD0             0001*  ; load to onboard 8k sram
0B1DD0             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
0B1DD0             0025       include "timer.inc"
0B1DD0             0001*  ; Table 32. Timer Control Registers
0B1DD0             0002*  ; this constant is the base address of the timer control registers
0B1DD0             0003*  ; each timer takes three bytes:
0B1DD0             0004*  ;   0: control register
0B1DD0             0005*  ;   1: low byte of timer reset value
0B1DD0             0006*  ;   2: high byte of timer reset value
0B1DD0             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0B1DD0             0008*  ; which correctly force the high and upper bytes of the address bus to zero
0B1DD0             0009*  TMR_CTL:     equ 80h
0B1DD0             0010*  
0B1DD0             0011*  ; Timer Control Register Bit Definitions
0B1DD0             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0B1DD0             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
0B1DD0             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0B1DD0             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
0B1DD0             0016*                              ; the TMRx_CTL register is read.
0B1DD0             0017*  
0B1DD0             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0B1DD0             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0B1DD0             0020*  
0B1DD0             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0B1DD0             0022*                              ;  0,and counting stops when the end-of-count value is reached.
0B1DD0             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0B1DD0             0024*                              ; written to the counter when the end-of-count value is reached.
0B1DD0             0025*  
0B1DD0             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0B1DD0             0027*  CLK_DIV_256:  equ %00001100 ;
0B1DD0             0028*  CLK_DIV_64:   equ %00001000 ;
0B1DD0             0029*  CLK_DIV_16:   equ %00000100 ;
0B1DD0             0030*  CLK_DIV_4:    equ %00000000 ;
0B1DD0             0031*  
0B1DD0             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0B1DD0             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0B1DD0             0034*                              ; When a 1 is written to this bit,the values in the reload registers
0B1DD0             0035*                              ;  are loaded into the downcounter when the timer restarts. The
0B1DD0             0036*                              ; programmer must ensure that this bit is set to 1 each time
0B1DD0             0037*                              ; SINGLE-PASS mode is used.
0B1DD0             0038*  
0B1DD0             0039*  ; disable/enable the programmable reload timer
0B1DD0             0040*  PRT_EN_0:     equ %00000000 ;
0B1DD0             0041*  PRT_EN_1:     equ %00000001 ;
0B1DD0             0042*  
0B1DD0             0043*  ; Table 37. Timer Input Source Select Register
0B1DD0             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
0B1DD0             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0B1DD0             0046*  ;   00: System clock / CLK_DIV
0B1DD0             0047*  ;   01: RTC / CLK_DIV
0B1DD0             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
0B1DD0             0049*  ;   10: GPIO port B pin 1.
0B1DD0             0050*  ;   11: GPIO port B pin 1.
0B1DD0             0051*  TMR_ISS:   equ 92h ; register address
0B1DD0             0052*  
0B1DD0             0053*  ; Table 51. Real-Time Clock Control Register
0B1DD0             0054*  RTC_CTRL: equ EDh ; register address
0B1DD0             0055*  
0B1DD0             0056*  ; alarm interrupt disable/enable
0B1DD0             0057*  RTC_ALARM_0:    equ %00000000
0B1DD0             0058*  RTC_ALARM_1:    equ %10000000
0B1DD0             0059*  
0B1DD0             0060*  ; interrupt on alarm disable/enable
0B1DD0             0061*  RTC_INT_ENT_0:  equ %00000000
0B1DD0             0062*  RTC_INT_ENT_1:  equ %01000000
0B1DD0             0063*  
0B1DD0             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0B1DD0             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0B1DD0             0066*  
0B1DD0             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0B1DD0             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
0B1DD0             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0B1DD0             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
0B1DD0             0071*  
0B1DD0             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0B1DD0             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0B1DD0             0074*  
0B1DD0             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0B1DD0             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0B1DD0             0077*  
0B1DD0             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0B1DD0             0079*                                  ; RTC counter is enabled.
0B1DD0             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0B1DD0             0081*                                  ; RTC counter is disabled.
0B1DD0             0082*  
0B1DD0             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0B1DD0             0084*  
0B1DD0             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0B1DD0             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0B1DD0 00 00 00    0087*  prt_reload: dl 0x000000
0B1DD3             0088*  
0B1DD3             0089*  ; ; returns: a = 0 if running on hardware,1 if running on emulator
0B1DD3             0090*  ; ;          de = number PRT interrupts during test interval
0B1DD3             0091*  ; prt_calibrate:
0B1DD3             0092*  ;     call vdu_vblank
0B1DD3             0093*  ; ; set a MOS timer
0B1DD3             0094*  ;     ld hl,120*1 ; 1 second
0B1DD3             0095*  ;     ld iy,tmr_test
0B1DD3             0096*  ;     call tmr_set
0B1DD3             0097*  ; ; set a PRT timer
0B1DD3             0098*  ;     ; ld hl,prt_reload_hardware
0B1DD3             0099*  ;     ; ld hl,prt_reload_emulator
0B1DD3             0100*  ;     ld hl,prt_reload_emulator + prt_reload_hardware / 2
0B1DD3             0101*  ;     ld (prt_reload),hl
0B1DD3             0102*  ;     call prt_set
0B1DD3             0103*  ; @loop:
0B1DD3             0104*  ; ; check time remaining on MOS timer
0B1DD3             0105*  ;     call tmr_get
0B1DD3             0106*  ;     jp z,@done ; time expired,so quit
0B1DD3             0107*  ;     jp m,@done ; time past expiration (negative),so quit
0B1DD3             0108*  ;     jr @loop
0B1DD3             0109*  ; @done:
0B1DD3             0110*  ;     ld de,(prt_irq_counter)
0B1DD3             0111*  ;     ld bc,prt_reload_hardware ; default value for running on hardware
0B1DD3             0112*  ;     ld (prt_reload),bc
0B1DD3             0113*  ;     ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
0B1DD3             0114*  ;     xor a ; clear carry,zero is default value for running on hardware
0B1DD3             0115*  ;     ld (is_emulator),a
0B1DD3             0116*  ;     sbc hl,de
0B1DD3             0117*  ;     ld hl,on_hardware ; default message for running on hardware
0B1DD3             0118*  ;     jp z,prt_calibrate ; zero result is indeterminate so we try again
0B1DD3             0119*  ;     ret m ; negative result means we're on hardware
0B1DD3             0120*  ;     inc a ; we're on emulator
0B1DD3             0121*  ;     ld (is_emulator),a
0B1DD3             0122*  ;     ld bc,prt_reload_emulator
0B1DD3             0123*  ;     ld (prt_reload),bc
0B1DD3             0124*  ;     ld hl,on_emulator
0B1DD3             0125*  ;     ret
0B1DD3             0126*  
0B1DD3             0127*  ; calibrating_timer: defb "Calibrating timer\r\n",0
0B1DD3             0128*  
0B1DD3             0129*  ; set PRT timer
0B1DD3             0130*  prt_set:
0B1DD3 21 00 00 00 0131*      ld hl,0
0B1DD7 22 21 1E 0B 0132*      ld (prt_irq_counter),hl
0B1DDB 2A D0 1D 0B 0133*      ld hl,(prt_reload)
0B1DDF ED 29 84    0134*      out0 ($84),l
0B1DE2 ED 21 85    0135*  	out0 ($85),h
0B1DE5             0136*  ; disable timer
0B1DE5 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0B1DE7 ED 39 83    0138*  	out0 ($83),a
0B1DEA             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0B1DEA 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0B1DEC ED 39 83    0141*  	out0 ($83),a
0B1DEF C9          0142*      ret
0B1DF0             0143*  
0B1DF0             0144*  ; ===============================================
0B1DF0             0145*  ; PRT Timer Interrupt Handling
0B1DF0             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0B1DF0             0147*  ; -----------------------------------------------
0B1DF0             0148*  prt_irq_init:
0B1DF0             0149*      ; set up interrupt vector table 2
0B1DF0 21 00 00 00 0150*  	ld hl,0
0B1DF4 3A 0C 01 00 0151*  	ld a,($10c)
0B1DF8 6F          0152*  	ld l,a
0B1DF9 3A 0D 01 00 0153*  	ld a,($10d)
0B1DFD 67          0154*  	ld h,a
0B1DFE             0155*  
0B1DFE             0156*  	; skip over CALL ($c3)
0B1DFE 23          0157*  	inc hl
0B1DFF             0158*  	; load address of jump into vector table 2 (in ram)
0B1DFF ED 27       0159*  	ld hl,(hl)
0B1E01             0160*  
0B1E01             0161*  	; write CALL prt_irq_handler to vector table 2
0B1E01 3E C3       0162*  	ld a,$c3
0B1E03 77          0163*  	ld (hl),a
0B1E04 23          0164*  	inc hl
0B1E05 11 0C 1E 0B 0165*  	ld de,prt_irq_handler
0B1E09 ED 1F       0166*  	ld (hl),de
0B1E0B             0167*  
0B1E0B C9          0168*      ret
0B1E0C             0169*  
0B1E0C             0170*  prt_irq_handler:
0B1E0C F3          0171*  	di
0B1E0D F5          0172*  	push af
0B1E0E E5          0173*      push hl
0B1E0F ED 38 83    0174*  	in0 a,($83)
0B1E12 2A 21 1E 0B 0175*  	ld hl,(prt_irq_counter)
0B1E16 23          0176*  	inc hl
0B1E17 22 21 1E 0B 0177*  	ld (prt_irq_counter),hl
0B1E1B E1          0178*      pop hl
0B1E1C F1          0179*  	pop af
0B1E1D FB          0180*  	ei
0B1E1E 5B ED 4D    0181*  	reti.l
0B1E21             0182*  
0B1E21             0183*  prt_irq_counter:
0B1E21 00 00 00    0184*  	.dl 0
0B1E24             0185*  prt_irq_counter_saved:
0B1E24 00 00 00    0186*      .dl 0
0B1E27             0187*  
0B1E27             0188*  prt_loop_reset:
0B1E27 E5          0189*      push hl
0B1E28 21 00 00 00 0190*  	ld hl,0
0B1E2C 22 21 1E 0B 0191*  	ld (prt_irq_counter),hl
0B1E30 22 92 1E 0B 0192*      ld (prt_loop_counter),hl
0B1E34 22 95 1E 0B 0193*      ld (prt_loops),hl
0B1E38 CD D3 1D 0B 0194*      call prt_set
0B1E3C E1          0195*      pop hl
0B1E3D C9          0196*      ret
0B1E3E             0197*  
0B1E3E             0198*  prt_loop_start:
0B1E3E E5          0199*      push hl
0B1E3F 21 00 00 00 0200*  	ld hl,0
0B1E43 22 21 1E 0B 0201*  	ld (prt_irq_counter),hl
0B1E47 E1          0202*      pop hl
0B1E48 C9          0203*      ret
0B1E49             0204*  
0B1E49             0205*  prt_loop_stop:
0B1E49 E5          0206*      push hl
0B1E4A D5          0207*      push de
0B1E4B 2A 21 1E 0B 0208*      ld hl,(prt_irq_counter)
0B1E4F ED 5B 92 1E 0209*      ld de,(prt_loop_counter)
       0B          
0B1E54 19          0210*      add hl,de
0B1E55 22 92 1E 0B 0211*      ld (prt_loop_counter),hl
0B1E59 21 00 00 00 0212*      ld hl,0
0B1E5D 22 21 1E 0B 0213*      ld (prt_irq_counter),hl
0B1E61 2A 95 1E 0B 0214*      ld hl,(prt_loops)
0B1E65 23          0215*      inc hl
0B1E66 22 95 1E 0B 0216*      ld (prt_loops),hl
0B1E6A D1          0217*      pop de
0B1E6B E1          0218*      pop hl
0B1E6C C9          0219*      ret
0B1E6D             0220*  
0B1E6D             0221*  ; inputs: bc = y,x text coordinates to print
0B1E6D             0222*  prt_loop_print:
0B1E6D F5          0223*      push af
0B1E6E E5          0224*      push hl
0B1E6F C5          0225*      push bc
0B1E70 D5          0226*      push de
0B1E71 DD E5       0227*      push ix
0B1E73 FD E5       0228*      push iy
0B1E75 CD 8A 1F 0B 0229*      call vdu_move_cursor
0B1E79             0230*  
0B1E79 2A 92 1E 0B 0231*      ld hl,(prt_loop_counter)
0B1E7D CD 2B 03 0B 0232*      call printDec
0B1E81             0233*  
0B1E81 2A 95 1E 0B 0234*      ld hl,(prt_loops)
0B1E85 CD 2B 03 0B 0235*      call printDec
0B1E89             0236*  
0B1E89 FD E1       0237*      pop iy
0B1E8B DD E1       0238*      pop ix
0B1E8D D1          0239*      pop de
0B1E8E C1          0240*      pop bc
0B1E8F E1          0241*      pop hl
0B1E90 F1          0242*      pop af
0B1E91 C9          0243*      ret
0B1E92             0244*  
0B1E92             0245*  prt_loop_counter:
0B1E92 00 00 00    0246*      .dl 0
0B1E95             0247*  prt_loops:
0B1E95 00 00 00    0248*      .dl 0
0B1E98             0249*  
0B1E98             0250*  ; ===============================================
0B1E98             0251*  ; Timer functions
0B1E98             0252*  ; -----------------------------------------------
0B1E98             0253*  ; set a countdown timer
0B1E98             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B1E98             0255*  ; returns: hl = current time
0B1E98             0256*  tmr_set:
0B1E98 FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
0B1E9B             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
0B1E9B 3E 08       0001*M 			LD	A, function
0B1E9D 5B CF       0002*M 			RST.L	08h
0B1E9F DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
0B1EA2 FD 2F 00    0260*      ld (iy+0),hl            ; set start time
0B1EA5 C9          0261*      ret
0B1EA6             0262*  
0B1EA6             0263*  ; gets time remaining on a countdown timer
0B1EA6             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B1EA6             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0B1EA6             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
0B1EA6             0267*  tmr_get:
0B1EA6             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
0B1EA6 3E 08       0001*M 			LD	A, function
0B1EA8 5B CF       0002*M 			RST.L	08h
0B1EAA DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
0B1EAD FD 27 00    0270*      ld hl,(iy+0)            ; get start time
0B1EB0 AF          0271*      xor a                   ; clear carry
0B1EB1 ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0B1EB3 FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
0B1EB6 AF          0274*      xor a                   ; clear carry
0B1EB7 ED 5A       0275*      adc hl,de               ; hl = time remaining
0B1EB9             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0B1EB9 C9          0277*      ret
0B1EBA             0278*  
0B1EBA 00 00 00    0279*  timestamp_now: dl 0
0B1EBD 00 00 00    0280*  timestamp_old: dl 0
0B1EC0 00 00 00    0281*  timestamp_chg: dl 0
0B1EC3             0282*  
0B1EC3             0283*  ; update the global timestamp from the system clock
0B1EC3             0284*  ; inputs: none
0B1EC3             0285*  ; returns: hl = time elapsed in 1/120ths of a second
0B1EC3             0286*  ;          de = current time
0B1EC3             0287*  ;          ix = pointer to syvars table
0B1EC3             0288*  ; destroys: af,hl,de,ix
0B1EC3             0289*  timestamp_tick:
0B1EC3 ED 5B BA 1E 0290*      ld de,(timestamp_now)   ; get previous time
       0B          
0B1EC8 ED 53 BD 1E 0291*      ld (timestamp_old),de   ; save previous time
       0B          
0B1ECD             0292*      MOSCALL mos_sysvars     ; ix points to syvars table
0B1ECD 3E 08       0001*M 			LD	A, function
0B1ECF 5B CF       0002*M 			RST.L	08h
0B1ED1 DD 27 00    0293*      ld hl,(ix+sysvar_time)  ; get current time
0B1ED4 22 BA 1E 0B 0294*      ld (timestamp_now),hl   ; save current time
0B1ED8 AF          0295*      xor a                   ; clear carry
0B1ED9 ED 52       0296*      sbc hl,de               ; hl = time elapsed
0B1EDB 22 C0 1E 0B 0297*      ld (timestamp_chg),hl   ; save elapsed time
0B1EDF C9          0298*      ret
0B1EE0             0299*  
0B1EE0             0300*  ; set a countdown timer
0B1EE0             0301*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B1EE0             0302*  ; requires: timestamp_tick to be called at least once before this function
0B1EE0             0303*  ; returns: hl = current time
0B1EE0             0304*  ; destroys: hl
0B1EE0             0305*  timestamp_tmr_set:
0B1EE0 FD 2F 03    0306*      ld (iy+3),hl            ; set time remaining
0B1EE3 2A BA 1E 0B 0307*      ld hl,(timestamp_now)   ; get current timestamp
0B1EE7 FD 2F 00    0308*      ld (iy+0),hl            ; set start time
0B1EEA C9          0309*      ret
0B1EEB             0310*  
0B1EEB             0311*  ; gets time remaining on a countdown timer following the global timestamp
0B1EEB             0312*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B1EEB             0313*  ; requires: timestamp_tick to be called at least once before this function
0B1EEB             0314*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0B1EEB             0315*  ;          sign flags: pos = time not expired,zero or neg = time expired
0B1EEB             0316*  ; destroys: af,hl,de
0B1EEB             0317*  timestamp_tmr_get:
0B1EEB ED 5B BA 1E 0318*      ld de,(timestamp_now)   ; get current timestamp
       0B          
0B1EF0 FD 27 00    0319*      ld hl,(iy+0)            ; get start time
0B1EF3 AF          0320*      xor a                   ; clear carry
0B1EF4 ED 52       0321*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0B1EF6 FD 17 03    0322*      ld de,(iy+3)            ; get timer set value
0B1EF9 AF          0323*      xor a                   ; clear carry
0B1EFA ED 5A       0324*      adc hl,de               ; hl = time remaining
0B1EFC             0325*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0B1EFC C9          0326*      ret
0B1EFD             0327*  
0B1EFD             0328*  ; main loop timer functions
0B1EFD             0329*  tmr_main_loop: ds 6 ; buffer to hold main loop timer
0B1F03             0330*  
0B1F03             0331*  ; set a countdown timer for the main loop using the timestamp timer
0B1F03             0332*  ; inputs: hl = time to set in 1/120ths of a second
0B1F03             0333*  ; returns: hl = current time
0B1F03             0334*  ; destroys: af,hl,de,ix,iy
0B1F03             0335*  tmr_main_loop_set:
0B1F03 FD 21 FD 1E 0336*      ld iy,tmr_main_loop
       0B          
0B1F08 FD 2F 03    0337*      ld (iy+3),hl ; set time remaining
0B1F0B CD C3 1E 0B 0338*      call timestamp_tick
0B1F0F 2A BA 1E 0B 0339*      ld hl,(timestamp_now)   ; get current timestamp
0B1F13 FD 2F 00    0340*      ld (iy+0),hl ; set start time
0B1F16 C9          0341*      ret
0B1F17             0342*  
0B1F17             0343*  ; gets time remaining on the main loop countdown timer following the global timestamp
0B1F17             0344*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0B1F17             0345*  ;          sign flags: pos = time not expired,zero or neg = time expired
0B1F17             0346*  ; destroys: af,hl,de,ix,iy
0B1F17             0347*  tmr_main_loop_get:
0B1F17 CD C3 1E 0B 0348*      call timestamp_tick
0B1F1B FD 21 FD 1E 0349*      ld iy,tmr_main_loop
       0B          
0B1F20 CD EB 1E 0B 0350*      call timestamp_tmr_get
0B1F24 C9          0351*      ret
0B1F25             0352*  
0B1F25             0353*  ; set a stopwatch
0B1F25             0354*  ; returns: hl = start time
0B1F25             0355*  ; destroys: hl,ix
0B1F25             0356*  stopwatch_set:
0B1F25             0357*      MOSCALL mos_sysvars     ; ix points to syvars table
0B1F25 3E 08       0001*M 			LD	A, function
0B1F27 5B CF       0002*M 			RST.L	08h
0B1F29 DD 27 00    0358*      ld hl,(ix+sysvar_time)  ; get current time
0B1F2C 22 41 1F 0B 0359*      ld (stopwatch_started),hl            ; set start time
0B1F30 C9          0360*      ret
0B1F31             0361*  
0B1F31             0362*  ; gets time elapsed on a stopwatch
0B1F31             0363*  ; returns: hl = time elapsed in 1/120ths of a second
0B1F31             0364*  ; destroys: af,hl,de,ix
0B1F31             0365*  stopwatch_get:
0B1F31             0366*      MOSCALL mos_sysvars     ; ix points to syvars table
0B1F31 3E 08       0001*M 			LD	A, function
0B1F33 5B CF       0002*M 			RST.L	08h
0B1F35 DD 27 00    0367*      ld hl,(ix+sysvar_time)  ; get current time
0B1F38 ED 5B 41 1F 0368*      ld de,(stopwatch_started)            ; get start time
       0B          
0B1F3D AF          0369*      xor a                   ; clear carry
0B1F3E ED 52       0370*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
0B1F40 C9          0371*      ret
0B1F41             0372*  
0B1F41             0373*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
0B1F44             0374*  
0B1F44             0375*  ; ------------------
0B1F44             0376*  ; delay routine
0B1F44             0377*  ; Author: Richard Turrnidge
0B1F44             0378*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
0B1F44             0379*  ; routine waits a fixed time,then returns
0B1F44             0380*  ; arrive with A =  the delay byte. One bit to be set only.
0B1F44             0381*  ; eg. ld A,00000100b
0B1F44             0382*  
0B1F44             0383*  multiPurposeDelay:
0B1F44 F5          0384*      push af
0B1F45 C5          0385*      push bc
0B1F46 DD E5       0386*      push ix
0B1F48 47          0387*      ld b,a
0B1F49 3E 08       0388*      ld a,$08
0B1F4B 5B CF       0389*      RST.LIL	08h                 ; get IX pointer to sysvars
0B1F4D             0390*  
0B1F4D             0391*  waitLoop:
0B1F4D             0392*  
0B1F4D DD 7E 00    0393*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
0B1F50             0394*  
0B1F50             0395*                                  ;   we check if bit set is same as last time we checked.
0B1F50             0396*                                  ;   bit 0 - don't use
0B1F50             0397*                                  ;   bit 1 - changes 64 times per second
0B1F50             0398*                                  ;   bit 2 - changes 32 times per second
0B1F50             0399*                                  ;   bit 3 - changes 16 times per second
0B1F50             0400*  
0B1F50             0401*                                  ;   bit 4 - changes 8 times per second
0B1F50             0402*                                  ;   bit 5 - changes 4 times per second
0B1F50             0403*                                  ;   bit 6 - changes 2 times per second
0B1F50             0404*                                  ;   bit 7 - changes 1 times per second
0B1F50 A0          0405*      and b
0B1F51 4F          0406*      ld c,a
0B1F52 3A 63 1F 0B 0407*      ld a,(oldTimeStamp)
0B1F56 B9          0408*      cp c                        ; is A same as last value?
0B1F57 28 F4       0409*      jr z,waitLoop              ; loop here if it is
0B1F59 79          0410*      ld a,c
0B1F5A 32 63 1F 0B 0411*      ld (oldTimeStamp),a        ; set new value
0B1F5E             0412*  
0B1F5E DD E1       0413*      pop ix
0B1F60 C1          0414*      pop bc
0B1F61 F1          0415*      pop af
0B1F62 C9          0416*      ret
0B1F63             0417*  
0B1F63 00          0418*  oldTimeStamp:   .db 00h
0B1F64             0026       include "vdu.inc"
0B1F64             0001*  
0B1F64             0002*  ; VDU 30: Home cursor
0B1F64             0003*  vdu_home_cursor:
0B1F64 3E 1E       0004*      ld a,30
0B1F66 5B D7       0005*  	rst.lil $10
0B1F68 C9          0006*  	ret
0B1F69             0007*  
0B1F69             0008*  cursor_on:
0B1F69 21 74 1F 0B 0009*  	ld hl,@cmd
0B1F6D 01 03 00 00 0010*  	ld bc,@end-@cmd
0B1F71 5B DF       0011*  	rst.lil $18
0B1F73 C9          0012*  	ret
0B1F74             0013*  @cmd:
0B1F74 17 01 01    0014*  	db 23,1,1
0B1F77             0015*  @end:
0B1F77             0016*  
0B1F77             0017*  cursor_off:
0B1F77 21 82 1F 0B 0018*  	ld hl,@cmd
0B1F7B 01 03 00 00 0019*  	ld bc,@end-@cmd
0B1F7F 5B DF       0020*  	rst.lil $18
0B1F81 C9          0021*  	ret
0B1F82             0022*  @cmd:
0B1F82 17 01 00    0023*  	db 23,1,0
0B1F85             0024*  @end:
0B1F85             0025*  
0B1F85             0026*  ; VDU 9: Move cursor forward one character
0B1F85             0027*  vdu_cursor_forward:
0B1F85 3E 09       0028*      ld a,9
0B1F87 5B D7       0029*  	rst.lil $10
0B1F89 C9          0030*  	ret
0B1F8A             0031*  
0B1F8A             0032*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
0B1F8A             0033*  ; inputs: c=x, b=y 8-bit unsigned integers
0B1F8A             0034*  vdu_move_cursor:
0B1F8A ED 43 9B 1F 0035*      ld (@x0),bc
       0B          
0B1F8F 21 9A 1F 0B 0036*  	ld hl,@cmd
0B1F93 01 03 00 00 0037*  	ld bc,@end-@cmd
0B1F97 5B DF       0038*  	rst.lil $18
0B1F99 C9          0039*  	ret
0B1F9A 1F          0040*  @cmd: 	db 31
0B1F9B 00          0041*  @x0:	db 0
0B1F9C 00          0042*  @y0: 	db 0
0B1F9D 00          0043*  @end: 	db 0 ; padding
0B1F9E             0044*  
0B1F9E             0045*  ; VDU 12: Clear text area (CLS)
0B1F9E             0046*  vdu_cls:
0B1F9E 3E 0C       0047*      ld a,12
0B1FA0 5B D7       0048*  	rst.lil $10
0B1FA2 C9          0049*  	ret
0B1FA3             0050*  
0B1FA3             0051*  vdu_flip:
0B1FA3 21 AE 1F 0B 0052*  	ld hl,@cmd
0B1FA7 01 03 00 00 0053*  	ld bc,@end-@cmd
0B1FAB 5B DF       0054*  	rst.lil $18
0B1FAD C9          0055*  	ret
0B1FAE 17 00 C3    0056*  @cmd: db 23,0,0xC3
0B1FB1             0057*  @end:
0B1FB1             0058*  
0B1FB1             0059*  ; VDU 16: Clear graphics area (CLG)
0B1FB1             0060*  vdu_clg:
0B1FB1 3E 10       0061*      ld a,16
0B1FB3 5B D7       0062*  	rst.lil $10
0B1FB5 C9          0063*  	ret
0B1FB6             0064*  
0B1FB6             0065*  ; COLOUR MODES
0B1FB6             0066*  ; Mode	Effect
0B1FB6             0067*  ; 0	Set on-screen pixel to target colour value
0B1FB6             0068*  ; 1	OR value with the on-screen pixel
0B1FB6             0069*  ; 2	AND value with the on-screen pixel
0B1FB6             0070*  ; 3	XOR value with the on-screen pixel
0B1FB6             0071*  ; 4	Invert the on-screen pixel
0B1FB6             0072*  ; 5	No operation
0B1FB6             0073*  ; 6	AND the inverse of the specified colour with the on-screen pixel
0B1FB6             0074*  ; 7	OR the inverse of the specified colour with the on-screen pixel
0B1FB6             0075*  
0B1FB6             0076*  ; VDU 17, colour: Define text colour (COLOUR)
0B1FB6             0077*  vdu_colour_text:
0B1FB6 32 C6 1F 0B 0078*  	ld (@arg),a
0B1FBA 21 C5 1F 0B 0079*  	ld hl,@cmd
0B1FBE 01 02 00 00 0080*  	ld bc,@end-@cmd
0B1FC2 5B DF       0081*  	rst.lil $18
0B1FC4 C9          0082*  	ret
0B1FC5 11          0083*  @cmd: db 17
0B1FC6 00          0084*  @arg: db 0
0B1FC7             0085*  @end:
0B1FC7             0086*  
0B1FC7             0087*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
0B1FC7             0088*  ; inputs: a=mode, c=colour (add 128 to set background colour)
0B1FC7             0089*  vdu_gcol:
0B1FC7 32 DC 1F 0B 0090*  	ld (@mode),a
0B1FCB 79          0091*      ld a,c
0B1FCC 32 DD 1F 0B 0092*      ld (@col),a
0B1FD0 21 DB 1F 0B 0093*  	ld hl,@cmd
0B1FD4 01 03 00 00 0094*  	ld bc,@end-@cmd
0B1FD8 5B DF       0095*  	rst.lil $18
0B1FDA C9          0096*  	ret
0B1FDB 12          0097*  @cmd:  db 18
0B1FDC 00          0098*  @mode: db 0
0B1FDD 00          0099*  @col:  db 0
0B1FDE             0100*  @end:
0B1FDE             0101*  
0B1FDE             0102*  
0B1FDE             0103*  ; VDU 28, left, bottom, right, top: Set text viewport **
0B1FDE             0104*  ; MIND THE LITTLE-ENDIANESS
0B1FDE             0105*  ; inputs: c=left,b=bottom,e=right,d=top
0B1FDE             0106*  ; outputs; nothing
0B1FDE             0107*  ; destroys: a might make it out alive
0B1FDE             0108*  vdu_set_txt_viewport:
0B1FDE ED 43 F4 1F 0109*      ld (@lb),bc
       0B          
0B1FE3 ED 53 F6 1F 0110*  	ld (@rt),de
       0B          
0B1FE8 21 F3 1F 0B 0111*  	ld hl,@cmd
0B1FEC 01 05 00 00 0112*  	ld bc,@end-@cmd
0B1FF0 5B DF       0113*  	rst.lil $18
0B1FF2 C9          0114*  	ret
0B1FF3 1C          0115*  @cmd:   db 28 ; set text viewport command
0B1FF4 00 00       0116*  @lb: 	dw 0x0000 ; set by bc
0B1FF6 00 00       0117*  @rt: 	dw 0x0000 ; set by de
0B1FF8 00          0118*  @end:   db 0x00	  ; padding
0B1FF9             0119*  
0B1FF9             0120*  ; Wait for VBLANK interrupt
0B1FF9             0121*  vdu_vblank:
0B1FF9 DD E5       0122*      PUSH 	IX
0B1FFB             0123*  	MOSCALL	mos_sysvars
0B1FFB 3E 08       0001*M 			LD	A, function
0B1FFD 5B CF       0002*M 			RST.L	08h
0B1FFF DD 7E 00    0124*  	LD	A, (IX + sysvar_time + 0)
0B2002             0125*  @wait:
0B2002 DD BE 00    0126*      CP 	A, (IX + sysvar_time + 0)
0B2005 28 FB       0127*      JR	Z, @wait
0B2007 DD E1       0128*      POP	IX
0B2009 C9          0129*      RET
0B200A             0130*  
0B200A             0131*  ; VDU 29, x; y;: Set graphics origin
0B200A             0132*  ; This command sets the graphics origin.
0B200A             0133*  ; The origin is the point on the screen where the coordinates (0,0) are located.
0B200A             0134*  ; inputs: bc=x0,de=y0
0B200A             0135*  ; outputs; nothing
0B200A             0136*  ; destroys: a might make it out alive
0B200A             0137*  vdu_set_gfx_origin:
0B200A ED 43 20 20 0138*      ld (@x0),bc
       0B          
0B200F ED 53 22 20 0139*      ld (@y0),de
       0B          
0B2014 21 1F 20 0B 0140*      ld hl,@cmd
0B2018 01 05 00 00 0141*      ld bc,@end-@cmd
0B201C 5B DF       0142*      rst.lil $18
0B201E C9          0143*      ret
0B201F 1D          0144*  @cmd:   db 29 ; set graphics origin command
0B2020 00 00       0145*  @x0: 	dw 0x0000 ; set by bc
0B2022 00 00       0146*  @y0: 	dw 0x0000 ; set by de
0B2024 00          0147*  @end:   db 0x00	  ; padding
0B2025             0148*  
0B2025             0149*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
0B2025             0150*  ; NOTE: the order of the y-coordinate parameters are inverted
0B2025             0151*  ; 	because we have turned off logical screen scaling
0B2025             0152*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
0B2025             0153*  ; outputs; nothing
0B2025             0154*  ; destroys: a might make it out alive
0B2025             0155*  vdu_set_gfx_viewport:
0B2025 ED 43 45 20 0156*      ld (@x0),bc
       0B          
0B202A FD 22 47 20 0157*      ld (@y1),iy
       0B          
0B202F DD 22 49 20 0158*  	ld (@x1),ix
       0B          
0B2034 ED 53 4B 20 0159*  	ld (@y0),de
       0B          
0B2039 21 44 20 0B 0160*  	ld hl,@cmd
0B203D 01 09 00 00 0161*  	ld bc,@end-@cmd
0B2041 5B DF       0162*  	rst.lil $18
0B2043 C9          0163*  	ret
0B2044 18          0164*  @cmd:   db 24 ; set graphics viewport command
0B2045 00 00       0165*  @x0: 	dw 0x0000 ; set by bc
0B2047 00 00       0166*  @y1: 	dw 0x0000 ; set by iy
0B2049 00 00       0167*  @x1: 	dw 0x0000 ; set by ix
0B204B 00 00       0168*  @y0: 	dw 0x0000 ; set by de
0B204D 00          0169*  @end:   db 0x00	  ; padding
0B204E             0170*  
0B204E             0171*  ; SCREEN MODES
0B204E             0172*  ; ===============================
0B204E             0173*  ; Mode  Horz  Vert  Cols  Refresh
0B204E             0174*  ; ---   ----  ----  ----  -------
0B204E             0175*  ; 11    320   240   2     60hz
0B204E             0176*  ; 139   320   240   2     60hz
0B204E             0177*  ; 23    512   384   2     60hz
0B204E             0178*  ; 151   512   384   2     60hz
0B204E             0179*  ; 6     640   240   2     60hz
0B204E             0180*  ; 134   640   240   2     60hz
0B204E             0181*  ; 2     640   480   2     60hz
0B204E             0182*  ; 130   640   480   2     60hz
0B204E             0183*  ; 17    800   600   2     60hz
0B204E             0184*  ; 145   800   600   2     60hz
0B204E             0185*  ; 18    1024  768   2     60hz
0B204E             0186*  ; 146   1024  768   2     60hz
0B204E             0187*  ; ---   ----  ----  ----  -------
0B204E             0188*  ; 10    320   240   4     60hz
0B204E             0189*  ; 138   320   240   4     60hz
0B204E             0190*  ; 22    512   384   4     60hz
0B204E             0191*  ; 150   512   384   4     60hz
0B204E             0192*  ; 5     640   240   4     60hz
0B204E             0193*  ; 133   640   240   4     60hz
0B204E             0194*  ; 1     640   480   4     60hz
0B204E             0195*  ; 129   640   480   4     60hz
0B204E             0196*  ; 16    800   600   4     60hz
0B204E             0197*  ; 19    1024  768   4     60hz
0B204E             0198*  ; ---   ----  ----  ----  -------
0B204E             0199*  ; 9     320   240   16    60hz
0B204E             0200*  ; 137   320   240   16    60hz
0B204E             0201*  ; 21    512   384   16    60hz
0B204E             0202*  ; 149   512   384   16    60hz
0B204E             0203*  ; 4     640   240   16    60hz
0B204E             0204*  ; 132   640   240   16    60hz
0B204E             0205*  ; 0     640   480   16    60hz
0B204E             0206*  ; 7     n/a   n/a   16    60hz
0B204E             0207*  ; ---   ----  ----  ----  -------
0B204E             0208*  ; 8     320   240   64    60hz
0B204E             0209*  ; 136   320   240   64    60hz
0B204E             0210*  ; 20    512   384   64    60hz
0B204E             0211*  ; 3     640   240   64    60hz
0B204E             0212*  ; ---   ----  ----  ----  -------
0B204E             0213*  vdu_set_screen_mode:
0B204E 32 5E 20 0B 0214*  	ld (@arg),a
0B2052 21 5D 20 0B 0215*  	ld hl,@cmd
0B2056 01 02 00 00 0216*  	ld bc,@end-@cmd
0B205A 5B DF       0217*  	rst.lil $18
0B205C C9          0218*  	ret
0B205D 16          0219*  @cmd: db 22 ; set screen mode
0B205E 00          0220*  @arg: db 0  ; screen mode parameter
0B205F             0221*  @end:
0B205F             0222*  
0B205F             0223*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
0B205F             0224*  ; inputs: a is scaling mode, 1=on, 0=off
0B205F             0225*  ; note: default setting on boot is scaling ON
0B205F             0226*  vdu_set_scaling:
0B205F 32 71 20 0B 0227*  	ld (@arg),a
0B2063 21 6E 20 0B 0228*  	ld hl,@cmd
0B2067 01 04 00 00 0229*  	ld bc,@end-@cmd
0B206B 5B DF       0230*  	rst.lil $18
0B206D C9          0231*  	ret
0B206E 17 00 C0    0232*  @cmd: db 23,0,0xC0
0B2071 00          0233*  @arg: db 0  ; scaling on/off
0B2072             0234*  @end:
0B2072             0235*  
0B2072             0236*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
0B2072             0237*  ; inputs: hl=bufferId
0B2072             0238*  vdu_buff_select:
0B2072 22 84 20 0B 0239*  	ld (@bufferId),hl
0B2076 21 81 20 0B 0240*  	ld hl,@cmd
0B207A 01 05 00 00 0241*  	ld bc,@end-@cmd
0B207E 5B DF       0242*  	rst.lil $18
0B2080 C9          0243*  	ret
0B2081 17 1B 20    0244*  @cmd: db 23,27,0x20
0B2084 00 00       0245*  @bufferId: dw 0x0000
0B2086 00          0246*  @end: db 0x00 ; padding
0B2087             0247*  
0B2087             0248*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
0B2087             0249*  ; inputs: a=format; bc=width; de=height
0B2087             0250*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
0B2087             0251*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
0B2087             0252*  ; 0 	RGBA8888 (4-bytes per pixel)
0B2087             0253*  ; 1 	RGBA2222 (1-bytes per pixel)
0B2087             0254*  ; 2 	Mono/Mask (1-bit per pixel)
0B2087             0255*  ; 3 	Reserved for internal use by VDP (“native” format)
0B2087             0256*  vdu_bmp_create:
0B2087 ED 43 A3 20 0257*      ld (@width),bc
       0B          
0B208C ED 53 A5 20 0258*      ld (@height),de
       0B          
0B2091 32 A7 20 0B 0259*      ld (@fmt),a
0B2095 21 A0 20 0B 0260*  	ld hl,@cmd
0B2099 01 08 00 00 0261*  	ld bc,@end-@cmd
0B209D 5B DF       0262*  	rst.lil $18
0B209F C9          0263*  	ret
0B20A0 17 1B 21    0264*  @cmd:       db 23,27,0x21
0B20A3 00 00       0265*  @width:     dw 0x0000
0B20A5 00 00       0266*  @height:    dw 0x0000
0B20A7 00          0267*  @fmt:       db 0x00
0B20A8             0268*  @end:
0B20A8             0269*  
0B20A8             0270*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0B20A8             0271*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0B20A8             0272*  vdu_load_img_rgba2_to_8:
0B20A8             0273*  ; backup the target buffer id and image dimensions
0B20A8 E5          0274*      push hl
0B20A9 D5          0275*      push de
0B20AA C5          0276*      push bc
0B20AB             0277*  ; load the rgba2 image to working buffer 65534
0B20AB 21 FE FF 00 0278*      ld hl,65534 ; temporary working buffer id
0B20AF CD B2 21 0B 0279*  	call vdu_load_buffer_from_file
0B20B3             0280*  ; restore the image dimensions and target buffer id
0B20B3 C1          0281*      pop bc
0B20B4 D1          0282*      pop de
0B20B5 E1          0283*      pop hl
0B20B6             0284*  ; fall through to vdu_rgba2_to_8
0B20B6             0285*  
0B20B6             0286*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
0B20B6             0287*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
0B20B6             0288*  ; the "expand bitmap" command is:
0B20B6             0289*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0B20B6             0290*  ; and then to reverse the byte order to fix endian-ness:
0B20B6             0291*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0B20B6             0292*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0B20B6             0293*  ; VDU 23,27,&20,targetBufferID%;
0B20B6             0294*  ; VDU 23,27,&21,width%;height%;0
0B20B6             0295*  ; -------------------------------------------------------------------
0B20B6             0296*  ; inputs: bc,de image width,height ; hl = targetBufferId
0B20B6             0297*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
0B20B6             0298*  vdu_rgba2_to_8:
0B20B6             0299*  ; load the image dimensions and buffer id parameters
0B20B6 ED 43 12 21 0300*      ld (@width),bc
       0B          
0B20BB ED 53 14 21 0301*      ld (@height),de
       0B          
0B20C0 22 F7 20 0B 0302*      ld (@bufferId0),hl
0B20C4 22 04 21 0B 0303*      ld (@bufferId2),hl
0B20C8 22 0D 21 0B 0304*      ld (@bufferId1),hl
0B20CC             0305*  ; clean up bytes that got stomped on by the ID loads
0B20CC 3E 48       0306*      ld a,0x48
0B20CE 32 F9 20 0B 0307*      ld (@bufferId0+2),a
0B20D2 3E 17       0308*      ld a,23
0B20D4 32 0F 21 0B 0309*      ld (@bufferId1+2),a
0B20D8 3E 18       0310*      ld a,24
0B20DA 32 06 21 0B 0311*      ld (@bufferId2+2),a
0B20DE AF          0312*      xor a
0B20DF 32 16 21 0B 0313*      ld (@height+2),a
0B20E3             0314*  ; send the vdu command strings
0B20E3 21 EE 20 0B 0315*      ld hl,@beg
0B20E7 01 29 00 00 0316*      ld bc,@end-@beg
0B20EB 5B DF       0317*      rst.lil $18
0B20ED C9          0318*      ret
0B20EE             0319*  @beg:
0B20EE             0320*  ; Command 14: Consolidate blocks in a buffer
0B20EE             0321*  ; VDU 23, 0, &A0, bufferId; 14
0B20EE 17 00 A0    0322*      db 23,0,0xA0
0B20F1 FE FF       0323*      dw 65534 ; workingBufferId
0B20F3 0E          0324*      db 14 ; consolidate blocks
0B20F4             0325*  ; the "expand bitmap" command is:
0B20F4             0326*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0B20F4 17 00 A0    0327*      db 23,0,0xA0
0B20F7 00 00       0328*  @bufferId0: dw 0x0000 ; targetBufferId
0B20F9 48          0329*      db 0x48 ; given as decimal command 72 in the docs
0B20FA 02          0330*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
0B20FB FE FF       0331*      dw 65534 ; sourceBufferId
0B20FD 00 7F BF FF 0332*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
0B2101             0333*  ; reverse the byte order to fix endian-ness:
0B2101             0334*  ; Command 24: Reverse the order of data of blocks within a buffer
0B2101             0335*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
0B2101             0336*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0B2101 17 00 A0    0337*      db 23,0,0xA0
0B2104 00 00       0338*  @bufferId2:    dw 0x0000 ; targetBufferId
0B2106 18          0339*      db 24 ; reverse byte order
0B2107 04          0340*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
0B2108 04 00       0341*      dw 4 ; size (4 bytes)
0B210A             0342*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0B210A             0343*  ; VDU 23,27,&20,targetBufferID%;
0B210A 17 1B 20    0344*      db 23,27,0x20 ; select bitmap
0B210D 00 00       0345*  @bufferId1: dw 0x0000 ; targetBufferId
0B210F             0346*  ; VDU 23,27,&21,width%;height%;0
0B210F 17 1B 21    0347*      db 23,27,0x21 ; create bitmap from buffer
0B2112 00 00       0348*  @width: dw 0x0000
0B2114 00 00       0349*  @height: dw 0x0000
0B2116 00          0350*      db 0x00 ; rgba8888 format
0B2117             0351*  @end:
0B2117             0352*  
0B2117             0353*  ; scratch variables
0B2117 00 00 00    0354*  bufferId0: dl 0x000000
0B211A 00 00 00    0355*  bufferId1: dl 0x000000
0B211D             0356*  
0B211D             0357*  ; load a vdu buffer from local memory
0B211D             0358*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0B211D             0359*  vdu_load_buffer:
0B211D ED 43 46 21 0360*      ld (@length),bc
       0B          
0B2122 D5          0361*      push de ; save data pointer
0B2123             0362*  ; send the vdu command string
0B2123 7D          0363*      ld a,l
0B2124 32 43 21 0B 0364*      ld (@bufferId),a
0B2128 7C          0365*      ld a,h
0B2129 32 44 21 0B 0366*      ld (@bufferId+1),a
0B212D 21 40 21 0B 0367*      ld hl,@cmd
0B2131 01 08 00 00 0368*      ld bc,@end-@cmd
0B2135 5B DF       0369*      rst.lil $18
0B2137             0370*  ; send the buffer data
0B2137 E1          0371*      pop hl ; pointer to data
0B2138 ED 4B 46 21 0372*      ld bc,(@length)
       0B          
0B213D 5B DF       0373*      rst.lil $18 ; send it
0B213F C9          0374*      ret
0B2140             0375*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0B2140 17 00 A0    0376*  @cmd:       db 23,0,0xA0
0B2143 00 00       0377*  @bufferId:	dw 0x0000
0B2145 00          0378*  		    db 0 ; load buffer
0B2146 00 00       0379*  @length:	dw 0x0000
0B2148 00          0380*  @end: db 0 ; padding
0B2149             0381*  
0B2149             0382*  ; clear a buffer
0B2149             0383*  ; inputs: hl = bufferId
0B2149             0384*  vdu_clear_buffer:
0B2149 7D          0385*      ld a,l
0B214A 32 61 21 0B 0386*      ld (@bufferId),a
0B214E 7C          0387*      ld a,h
0B214F 32 62 21 0B 0388*      ld (@bufferId+1),a
0B2153 21 5E 21 0B 0389*      ld hl,@cmd
0B2157 01 06 00 00 0390*      ld bc,@end-@cmd
0B215B 5B DF       0391*      rst.lil $18
0B215D C9          0392*      ret
0B215E 17 00 A0    0393*  @cmd:       db 23,0,0xA0
0B2161 00 00       0394*  @bufferId:	dw 0x0000
0B2163 02          0395*  		    db 2 ; clear buffer
0B2164             0396*  @end:
0B2164             0397*  
0B2164             0398*  vdu_clear_all_buffers:
0B2164             0399*  ; clear all buffers
0B2164 21 6F 21 0B 0400*      ld hl,@beg
0B2168 01 06 00 00 0401*      ld bc,@end-@beg
0B216C 5B DF       0402*      rst.lil $18
0B216E C9          0403*      ret
0B216F 17 00 A0    0404*  @beg: db 23,0,$A0
0B2172 FF FF       0405*        dw -1 ; clear all buffers
0B2174 02          0406*        db 2  ; command 2: clear a buffer
0B2175             0407*  @end:
0B2175             0408*  
0B2175             0409*  ; Command 14: Consolidate blocks in a buffer
0B2175             0410*  vdu_consolidate_buffer:
0B2175             0411*  ; set parameters for vdu call
0B2175 7D          0412*      ld a,l
0B2176 32 8D 21 0B 0413*      ld (@bufferId),a
0B217A 7C          0414*      ld a,h
0B217B 32 8E 21 0B 0415*      ld (@bufferId+1),a
0B217F 21 8A 21 0B 0416*      ld hl,@beg
0B2183 01 06 00 00 0417*      ld bc,@end-@beg
0B2187 5B DF       0418*      rst.lil $18
0B2189 C9          0419*      ret
0B218A             0420*  ; VDU 23, 0, &A0, bufferId; 14
0B218A 17 00 A0    0421*  @beg: db 23,0,0xA0
0B218D 00 00       0422*  @bufferId: dw 0x0000
0B218F 0E          0423*             db 14
0B2190             0424*  @end:
0B2190             0425*  
0B2190             0426*  ; load an image file to a buffer and make it a bitmap
0B2190             0427*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
0B2190             0428*  vdu_load_img:
0B2190             0429*  ; back up image type and dimension parameters
0B2190 22 17 21 0B 0430*      ld (bufferId0),hl
0B2194 F5          0431*      push af
0B2195 C5          0432*  	push bc
0B2196 D5          0433*  	push de
0B2197             0434*  ; load the image
0B2197 CD B2 21 0B 0435*  	call vdu_load_buffer_from_file
0B219B             0436*  ; now make it a bitmap
0B219B 2A 17 21 0B 0437*      ld hl,(bufferId0)
0B219F CD 75 21 0B 0438*      call vdu_consolidate_buffer
0B21A3 2A 17 21 0B 0439*      ld hl,(bufferId0)
0B21A7 CD 72 20 0B 0440*      call vdu_buff_select
0B21AB D1          0441*  	pop de ; image height
0B21AC C1          0442*  	pop bc ; image width
0B21AD F1          0443*  	pop af ; image type
0B21AE C3 87 20 0B 0444*  	jp vdu_bmp_create ; will return to caller from there
0B21B2             0445*  
0B21B2             0446*  ; inputs: hl = bufferId; iy = pointer to filename
0B21B2             0447*  vdu_load_buffer_from_file:
0B21B2 22 17 21 0B 0448*      ld (bufferId0),hl
0B21B6             0449*  
0B21B6             0450*  ; clear target buffer
0B21B6 CD 49 21 0B 0451*      call vdu_clear_buffer
0B21BA             0452*  
0B21BA             0453*  ; open the file in read mode
0B21BA             0454*  ; Open a file
0B21BA             0455*  ; HLU: Filename
0B21BA             0456*  ;   C: Mode
0B21BA             0457*  ; Returns:
0B21BA             0458*  ;   A: Filehandle, or 0 if couldn't open
0B21BA FD E5       0459*  	push iy ; pointer to filename
0B21BC E1          0460*  	pop hl
0B21BD 0E 01       0461*  	ld c,fa_read
0B21BF             0462*      MOSCALL mos_fopen
0B21BF 3E 0A       0001*M 			LD	A, function
0B21C1 5B CF       0002*M 			RST.L	08h
0B21C3 32 FE 21 0B 0463*      ld (@filehandle),a
0B21C7             0464*  
0B21C7             0465*  @read_file:
0B21C7             0466*  ; Read a block of data from a file
0B21C7             0467*  ;   C: Filehandle
0B21C7             0468*  ; HLU: Pointer to where to write the data to
0B21C7             0469*  ; DEU: Number of bytes to read
0B21C7             0470*  ; Returns:
0B21C7             0471*  ; DEU: Number of bytes read
0B21C7 3A FE 21 0B 0472*      ld a,(@filehandle)
0B21CB 4F          0473*      ld c,a
0B21CC 21 00 E0 B7 0474*      ld hl,filedata
0B21D0 11 00 20 00 0475*      ld de,8192 ; max we can read into onboard sram at one time
0B21D4             0476*      MOSCALL mos_fread
0B21D4 3E 1A       0001*M 			LD	A, function
0B21D6 5B CF       0002*M 			RST.L	08h
0B21D8             0477*  
0B21D8             0478*  ; ; DEBUG: print chunk size
0B21D8             0479*  ;     push de
0B21D8             0480*  ;     pop hl
0B21D8             0481*  ;     call printDec
0B21D8             0482*  ;     call printNewLine
0B21D8             0483*  
0B21D8             0484*  ; test de for zero bytes read
0B21D8 21 00 00 00 0485*      ld hl,0
0B21DC AF          0486*      xor a ; clear carry
0B21DD ED 52       0487*      sbc hl,de
0B21DF CA F5 21 0B 0488*      jp z,@close_file
0B21E3             0489*  
0B21E3             0490*  ; load a vdu buffer from local memory
0B21E3             0491*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0B21E3 2A 17 21 0B 0492*      ld hl,(bufferId0)
0B21E7 D5          0493*      push de ; chunksize
0B21E8 C1          0494*      pop bc
0B21E9 11 00 E0 B7 0495*      ld de,filedata
0B21ED CD 1D 21 0B 0496*      call vdu_load_buffer
0B21F1             0497*  
0B21F1             0498*  ; ; print progress breadcrumbs
0B21F1             0499*  ;     ld a,'.'
0B21F1             0500*  ;     rst.lil 10h
0B21F1             0501*  
0B21F1             0502*  ; read the next block
0B21F1 C3 C7 21 0B 0503*      jp @read_file
0B21F5             0504*  
0B21F5             0505*  ; close the file
0B21F5             0506*  @close_file:
0B21F5 3A FE 21 0B 0507*      ld a,(@filehandle)
0B21F9             0508*      MOSCALL mos_fclose
0B21F9 3E 0B       0001*M 			LD	A, function
0B21FB 5B CF       0002*M 			RST.L	08h
0B21FD C9          0509*      ret ; vdu_load_buffer_from_file
0B21FE             0510*  
0B21FE 00          0511*  @filehandle: db 0 ; file handle
0B21FF 00 00 00    0512*  @fil: dl 0 ; pointer to FIL struct
0B2202             0513*  
0B2202 00 00 00    0514*  @chunkpointer: dl 0 ; pointer to current chunk
0B2205             0515*  
0B2205             0516*  ; File information structure (FILINFO)
0B2205             0517*  @filinfo:
0B2205 00 00 00 00 0518*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
0B2209 00 00       0519*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
0B220B 00 00       0520*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
0B220D 00          0521*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
0B220E 00 00 00 00 0522*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
0B221B 00 00 00 00 0523*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0B231B             0027       ; include "vdu_fonts.inc"
0B231B             0028       include "vdu_plot.inc"
0B231B             0001*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0B231B             0002*  ; PLOT code 	(Decimal) 	Effect
0B231B             0003*  ; &00-&07 	0-7 	Solid line, includes both ends
0B231B             0004*  plot_sl_both: equ 0x00
0B231B             0005*  
0B231B             0006*  ; &08-&0F 	8-15 	Solid line, final point omitted
0B231B             0007*  plot_sl_first: equ 0x08
0B231B             0008*  
0B231B             0009*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
0B231B             0010*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
0B231B             0011*  
0B231B             0012*  ; &20-&27 	32-39 	Solid line, first point omitted
0B231B             0013*  plot_sl_last: equ 0x20
0B231B             0014*  
0B231B             0015*  ; &28-&2F 	40-47 	Solid line, both points omitted
0B231B             0016*  plot_sl_none: equ 0x28
0B231B             0017*  
0B231B             0018*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
0B231B             0019*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
0B231B             0020*  
0B231B             0021*  ; &40-&47 	64-71 	Point plot
0B231B             0022*  plot_pt: equ 0x40
0B231B             0023*  
0B231B             0024*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
0B231B             0025*  plot_lf_lr_non_bg: equ 0x48
0B231B             0026*  
0B231B             0027*  ; &50-&57 	80-87 	Triangle fill
0B231B             0028*  plot_tf: equ 0x50
0B231B             0029*  
0B231B             0030*  ; &58-&5F 	88-95 	Line fill right to background §§
0B231B             0031*  plot_lf_r_bg: equ 0x58
0B231B             0032*  
0B231B             0033*  ; &60-&67 	96-103 	Rectangle fill
0B231B             0034*  plot_rf: equ 0x60
0B231B             0035*  
0B231B             0036*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
0B231B             0037*  plot_lf_lr_fg: equ 0x60
0B231B             0038*  
0B231B             0039*  ; &70-&77 	112-119 	Parallelogram fill
0B231B             0040*  plot_pf: equ 0x70
0B231B             0041*  
0B231B             0042*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
0B231B             0043*  plot_lf_r_non_fg: equ 0x78
0B231B             0044*  
0B231B             0045*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
0B231B             0046*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
0B231B             0047*  
0B231B             0048*  ; &90-&97 	144-151 	Circle outline
0B231B             0049*  plot_co: equ 0x90
0B231B             0050*  
0B231B             0051*  ; &98-&9F 	152-159 	Circle fill
0B231B             0052*  plot_cf: equ 0x98
0B231B             0053*  
0B231B             0054*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
0B231B             0055*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
0B231B             0056*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
0B231B             0057*  
0B231B             0058*  ; &B8-&BF 	184-191 	Rectangle copy/move
0B231B             0059*  plot_rcm: equ 0xB8
0B231B             0060*  
0B231B             0061*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
0B231B             0062*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
0B231B             0063*  ; &D0-&D7 	208-215 	Not defined
0B231B             0064*  ; &D8-&DF 	216-223 	Not defined
0B231B             0065*  ; &E0-&E7 	224-231 	Not defined
0B231B             0066*  
0B231B             0067*  ; &E8-&EF 	232-239 	Bitmap plot §
0B231B             0068*  plot_bmp: equ 0xE8
0B231B             0069*  
0B231B             0070*  ; &F0-&F7 	240-247 	Not defined
0B231B             0071*  ; &F8-&FF 	248-255 	Not defined
0B231B             0072*  
0B231B             0073*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
0B231B             0074*  ; Agon Console8 VDP 2.2.0
0B231B             0075*  
0B231B             0076*  ; Within each group of eight plot codes, the effects are as follows:
0B231B             0077*  ; Plot code 	Effect
0B231B             0078*  ; 0 	Move relative
0B231B             0079*  mv_rel: equ 0
0B231B             0080*  
0B231B             0081*  ; 1 	Plot relative in current foreground colour
0B231B             0082*  dr_rel_fg: equ 1
0B231B             0083*  
0B231B             0084*  ; 2 	Not supported (Plot relative in logical inverse colour)
0B231B             0085*  ; 3 	Plot relative in current background colour
0B231B             0086*  dr_rel_bg: equ 3
0B231B             0087*  
0B231B             0088*  ; 4 	Move absolute
0B231B             0089*  mv_abs: equ 4
0B231B             0090*  
0B231B             0091*  ; 5 	Plot absolute in current foreground colour
0B231B             0092*  dr_abs_fg: equ 5
0B231B             0093*  
0B231B             0094*  ; 6 	Not supported (Plot absolute in logical inverse colour)
0B231B             0095*  ; 7 	Plot absolute in current background colour
0B231B             0096*  dr_abs_bg: equ 7
0B231B             0097*  
0B231B             0098*  ; Codes 0-3 use the position data provided as part of the command
0B231B             0099*  ; as a relative position, adding the position given to the current
0B231B             0100*  ; graphical cursor position. Codes 4-7 use the position data provided
0B231B             0101*  ; as part of the command as an absolute position, setting the current
0B231B             0102*  ; graphical cursor position to the position given.
0B231B             0103*  
0B231B             0104*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
0B231B             0105*  ; current pixel colour. These operations cannot currently be supported
0B231B             0106*  ; by the graphics system the Agon VDP uses, so these codes are not
0B231B             0107*  ; supported. Support for these codes may be added in a future version
0B231B             0108*  ; of the VDP firmware.
0B231B             0109*  
0B231B             0110*  ; 16 colour palette constants
0B231B             0111*  c_black: equ 0
0B231B             0112*  c_red_dk: equ 1
0B231B             0113*  c_green_dk: equ 2
0B231B             0114*  c_yellow_dk: equ 3
0B231B             0115*  c_blue_dk: equ 4
0B231B             0116*  c_magenta_dk: equ 5
0B231B             0117*  c_cyan_dk: equ 6
0B231B             0118*  c_grey: equ 7
0B231B             0119*  c_grey_dk: equ 8
0B231B             0120*  c_red: equ 9
0B231B             0121*  c_green: equ 10
0B231B             0122*  c_yellow: equ 11
0B231B             0123*  c_blue: equ 12
0B231B             0124*  c_magenta: equ 13
0B231B             0125*  c_cyan: equ 14
0B231B             0126*  c_white: equ 15
0B231B             0127*  
0B231B             0128*  ; VDU 25, mode, x; y;: PLOT command
0B231B             0129*  ; inputs: a=mode, bc=x0, de=y0
0B231B             0130*  vdu_plot:
0B231B 32 35 23 0B 0131*      ld (@mode),a
0B231F ED 43 36 23 0132*      ld (@x0),bc
       0B          
0B2324 ED 53 38 23 0133*      ld (@y0),de
       0B          
0B2329 21 34 23 0B 0134*  	ld hl,@cmd
0B232D 01 06 00 00 0135*  	ld bc,@end-@cmd
0B2331 5B DF       0136*  	rst.lil $18
0B2333 C9          0137*  	ret
0B2334 19          0138*  @cmd:   db 25
0B2335 00          0139*  @mode:  db 0
0B2336 00 00       0140*  @x0: 	dw 0
0B2338 00 00       0141*  @y0: 	dw 0
0B233A 00          0142*  @end:   db 0 ; extra byte to soak up deu
0B233B             0143*  
0B233B             0144*  ; VDU 25, mode, x; y;: PLOT command
0B233B             0145*  ; USING 16.8 FIXED POINT COORDINATES
0B233B             0146*  ; inputs: a=mode, ub.c=x0, ud.e=y0
0B233B             0147*  vdu_plot_168:
0B233B ED 53 57 23 0148*      ld (@y0-1),de ; load in reverse order to avoid stomping on inputs
       0B          
0B2340 ED 43 55 23 0149*      ld (@x0-1),bc ; integer portion only
       0B          
0B2345 32 55 23 0B 0150*      ld (@mode),a  ; load this order b/c we shifted bc right
0B2349 21 54 23 0B 0151*  	ld hl,@cmd
0B234D 01 06 00 00 0152*  	ld bc,@end-@cmd
0B2351 5B DF       0153*  	rst.lil $18
0B2353             0154*      ; ld hl,@cmd
0B2353             0155*      ; ld a,6
0B2353             0156*      ; call dumpMemoryHex
0B2353             0157*      ; call printNewLine
0B2353 C9          0158*  	ret
0B2354 19          0159*  @cmd:   db 25
0B2355 00          0160*  @mode:  db 0
0B2356 00 00       0161*  @x0: 	dw 0
0B2358 00 00       0162*  @y0: 	dw 0
0B235A             0163*  @end:  ; no padding required b/c we shifted de right
0B235A             0164*  
0B235A             0165*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0B235A             0166*  ; &E8-&EF 	232-239 	Bitmap plot §
0B235A             0167*  ; VDU 25, mode, x; y;: PLOT command
0B235A             0168*  ; inputs: bc=x0, de=y0
0B235A             0169*  ; prerequisites: vdu_buff_select
0B235A             0170*  vdu_plot_bmp:
0B235A ED 43 71 23 0171*      ld (@x0),bc
       0B          
0B235F ED 53 73 23 0172*      ld (@y0),de
       0B          
0B2364 21 6F 23 0B 0173*  	ld hl,@cmd
0B2368 01 06 00 00 0174*  	ld bc,@end-@cmd
0B236C 5B DF       0175*  	rst.lil $18
0B236E C9          0176*  	ret
0B236F 19          0177*  @cmd:   db 25
0B2370 ED          0178*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0B2371 00 00       0179*  @x0: 	dw 0x0000
0B2373 00 00       0180*  @y0: 	dw 0x0000
0B2375 00          0181*  @end:   db 0x00 ; padding
0B2376             0182*  
0B2376             0183*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0B2376             0184*  ; &E8-&EF 	232-239 	Bitmap plot §
0B2376             0185*  ; VDU 25, mode, x; y;: PLOT command
0B2376             0186*  ; inputs: bc=x0, de=y0
0B2376             0187*  ; USING 16.8 FIXED POINT COORDINATES
0B2376             0188*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
0B2376             0189*  ;   the fractional portiion of the inputs are truncated
0B2376             0190*  ;   leaving only the 16-bit integer portion
0B2376             0191*  ; prerequisites: vdu_buff_select
0B2376             0192*  vdu_plot_bmp168:
0B2376             0193*  ; populate in the reverse of normal to keep the
0B2376             0194*  ; inputs from stomping on each other
0B2376 ED 53 94 23 0195*      ld (@y0-1),de
       0B          
0B237B ED 43 92 23 0196*      ld (@x0-1),bc
       0B          
0B2380 3E ED       0197*      ld a,plot_bmp+dr_abs_fg ; 0xED
0B2382 32 92 23 0B 0198*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
0B2386 21 91 23 0B 0199*  	ld hl,@cmd
0B238A 01 06 00 00 0200*  	ld bc,@end-@cmd
0B238E 5B DF       0201*  	rst.lil $18
0B2390 C9          0202*  	ret
0B2391 19          0203*  @cmd:   db 25
0B2392 ED          0204*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0B2393 00 00       0205*  @x0: 	dw 0x0000
0B2395 00 00       0206*  @y0: 	dw 0x0000
0B2397             0207*  @end:  ; no padding required b/c we shifted de right
0B2397             0208*  
0B2397             0209*  ; draw a filled rectangle
0B2397             0210*  vdu_plot_rf:
0B2397 ED 43 BE 23 0211*      ld (@x0),bc
       0B          
0B239C ED 53 C0 23 0212*      ld (@y0),de
       0B          
0B23A1 DD 22 C4 23 0213*      ld (@x1),ix
       0B          
0B23A6 FD 22 C6 23 0214*      ld (@y1),iy
       0B          
0B23AB 3E 19       0215*      ld a,25 ; we have to reload the 2nd plot command
0B23AD 32 C2 23 0B 0216*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0B23B1 21 BC 23 0B 0217*  	ld hl,@cmd0
0B23B5 01 0C 00 00 0218*  	ld bc,@end-@cmd0
0B23B9 5B DF       0219*  	rst.lil $18
0B23BB C9          0220*      ret
0B23BC 19          0221*  @cmd0:  db 25 ; plot
0B23BD 04          0222*  @arg0:  db plot_sl_both+mv_abs
0B23BE 00 00       0223*  @x0:    dw 0x0000
0B23C0 00 00       0224*  @y0:    dw 0x0000
0B23C2 19          0225*  @cmd1:  db 25 ; plot
0B23C3 65          0226*  @arg1:  db plot_rf+dr_abs_fg
0B23C4 00 00       0227*  @x1:    dw 0x0000
0B23C6 00 00       0228*  @y1:    dw 0x0000
0B23C8 00          0229*  @end:   db 0x00 ; padding
0B23C9             0230*  
0B23C9             0231*  ; draw a filled circle
0B23C9             0232*  vdu_plot_cf:
0B23C9 ED 43 F0 23 0233*      ld (@x0),bc
       0B          
0B23CE ED 53 F2 23 0234*      ld (@y0),de
       0B          
0B23D3 DD 22 F6 23 0235*      ld (@x1),ix
       0B          
0B23D8 FD 22 F8 23 0236*      ld (@y1),iy
       0B          
0B23DD 3E 19       0237*      ld a,25 ; we have to reload the 2nd plot command
0B23DF 32 F4 23 0B 0238*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0B23E3 21 EE 23 0B 0239*  	ld hl,@cmd0
0B23E7 01 0C 00 00 0240*  	ld bc,@end-@cmd0
0B23EB 5B DF       0241*  	rst.lil $18
0B23ED C9          0242*      ret
0B23EE 19          0243*  @cmd0:  db 25 ; plot
0B23EF 04          0244*  @arg0:  db plot_sl_both+mv_abs
0B23F0 00 00       0245*  @x0:    dw 0x0000
0B23F2 00 00       0246*  @y0:    dw 0x0000
0B23F4 19          0247*  @cmd1:  db 25 ; plot
0B23F5 9D          0248*  @arg1:  db plot_cf+dr_abs_fg
0B23F6 00 00       0249*  @x1:    dw 0x0000
0B23F8 00 00       0250*  @y1:    dw 0x0000
0B23FA 00          0251*  @end:   db 0x00 ; padding
0B23FB             0252*  
0B23FB             0253*  ; VDU 25, mode, x; y;: PLOT command
0B23FB             0254*  ; inputs: a=mode, ix=x0, iy=y0
0B23FB             0255*  plot:
0B23FB 32 15 24 0B 0256*      ld (@mode),a
0B23FF DD 22 16 24 0257*      ld (@x0),ix
       0B          
0B2404 FD 22 18 24 0258*      ld (@y0),iy
       0B          
0B2409 21 14 24 0B 0259*  	ld hl,@cmd
0B240D 01 06 00 00 0260*  	ld bc,@end-@cmd
0B2411 5B DF       0261*  	rst.lil $18
0B2413 C9          0262*  	ret
0B2414 19          0263*  @cmd:   db 25
0B2415 00          0264*  @mode:  db 0
0B2416 00 00       0265*  @x0: 	dw 0
0B2418 00 00       0266*  @y0: 	dw 0
0B241A 00          0267*  @end:   db 0 ; padding
0B241B             0268*  
0B241B             0269*  ; VDU 5: Write text at graphics cursor
0B241B             0270*  ; inputs: hl = pointer to text, ix=x0, iy=y0
0B241B             0271*  ; prerequisites: gcol foreground set, VDU 5 set
0B241B             0272*  plot_text:
0B241B E5          0273*      push hl ; save text pointer
0B241C             0274*  ; move graphics cursor to x0, y0
0B241C 3E 44       0275*      ld a,plot_pt+mv_abs
0B241E CD FB 23 0B 0276*      call plot
0B2422             0277*  ; write text
0B2422 E1          0278*      pop hl ; restore text pointer
0B2423 CD 73 02 0B 0279*      call printString
0B2427 C9          0280*      ret
0B2428             0029   
0B2428             0030   ; SHAWN'S INCLUDES
0B2428             0031   	INCLUDE	"strings24.asm"
0B2428             0001*  ;------------------------------------------------------------------------
0B2428             0002*  ;  strings24.asm
0B2428             0003*  ;
0B2428             0004*  ; 24-bit native ez80 strings routines for numerical processing
0B2428             0005*  ;  Copyright (c) Shawn Sijnstra 2024
0B2428             0006*  ;  MIT license
0B2428             0007*  ;------------------------------------------------------------------------
0B2428             0008*  
0B2428             0009*  ;Print signed value in HLU in decimal with leading 0s removed
0B2428             0010*  ; and postpended with a minus sign if was negative
0B2428             0011*  ; Uses HLU, DEU, BCU
0B2428             0012*  print_HLU_s24:
0B2428 CD 3B 08 0B 0013*  	call hlu_abs
0B242C F5          0014*  	push af ; save the sign and zero flags
0B242D CD 38 24 0B 0015*  	call print_HLU_u24
0B2431 F1          0016*  	pop af
0B2432 F0          0017*  	ret p ; HLU was positive so nothig more to do
0B2433 3E 2D       0018*  	ld a,'-'
0B2435 5B D7       0019*  	rst.lil 10h
0B2437 C9          0020*  	ret
0B2438             0021*  
0B2438             0022*  ;------------------------------------------------------------------------
0B2438             0023*  ;Full print and buffer routine so you can adjust behaviour
0B2438             0024*  ; Double-Dabble AKA shift-and-add-3 algorithm
0B2438             0025*  ; breakdown at https://en.wikipedia.org/wiki/Double_dabble
0B2438             0026*  ;Print value in HLU in decimal with leading 0s removed
0B2438             0027*  ; Uses HLU, DEU, BCU
0B2438             0028*  ;------------------------------------------------------------------------
0B2438             0029*  
0B2438             0030*  print_HLU_u24:
0B2438 22 15 25 0B 0031*  	ld	(hex_temp),hl
0B243C 06 08       0032*  	ld	b,8	;8 digits max here with 24 bit unsigned
0B243E 11 18 25 0B 0033*  	ld	de,outbuf
0B2442 D5          0034*  	push	de
0B2443 21 07 00 00 0035*  	ld	hl,7
0B2447 19          0036*  	add	hl,de
0B2448 E5          0037*  	push	hl
0B2449 D1          0038*  	pop	de	;copy HLU to DEU
0B244A AF          0039*  	xor	a
0B244B             0040*  _pde_u_zerobuf:
0B244B 77          0041*  	ld	(hl),a	;zero out the output
0B244C 2B          0042*  	dec	hl
0B244D 10 FC       0043*  	djnz	_pde_u_zerobuf
0B244F             0044*  
0B244F 0E 18       0045*  	ld c,3 * 8	;4 * 8	; number of loops through NUM_SRC_BYTES * 8
0B2451             0046*  _bcd_Convert:
0B2451             0047*  
0B2451 21 15 25 0B 0048*  	ld hl,hex_temp
0B2455             0049*  ;
0B2455 CB 26       0050*  	sla (hl)
0B2457 23          0051*  	inc hl
0B2458 CB 16       0052*  	rl (hl)
0B245A 23          0053*  	inc hl
0B245B CB 16       0054*  	rl (hl)		;24 bits rolled right
0B245D             0055*  
0B245D             0056*  
0B245D 06 08       0057*          ld	b,8	;8 digits max for 24 bit decimal output
0B245F D5          0058*  	push	de
0B2460 E1          0059*  	pop	hl
0B2461             0060*  
0B2461             0061*  _bcd_Add3:
0B2461 7E          0062*  	ld	a,(hl)
0B2462 8F          0063*  	adc	a
0B2463 27          0064*          daa		;this is add 3 after shifting left; i.e. add 6.
0B2464 FE 10       0065*  	cp	10h	;did we roll over nibble?
0B2466 3F          0066*  	ccf
0B2467 CB A7       0067*  	res	4,a
0B2469             0068*  
0B2469 77          0069*          ld (hl),a
0B246A 2B          0070*  	dec	hl
0B246B 10 F4       0071*          djnz	_bcd_Add3	;loop for decimal digits
0B246D 0D          0072*          dec c
0B246E 20 E1       0073*          jr nz, _bcd_Convert	;loop around
0B2470             0074*  
0B2470             0075*  
0B2470 E1          0076*  	pop	hl
0B2471 E5          0077*  	push	hl
0B2472 06 07       0078*          ld	b,8-1		;one less than total in case output is '0'
0B2474             0079*  _pde_u_make_ascii:
0B2474 7E          0080*  	ld	a,(hl)
0B2475 B7          0081*  	or	a
0B2476 20 05       0082*  	jr	nz,_pde_u_make_ascii2
0B2478 36 20       0083*  	ld	(hl),' '
0B247A 23          0084*  	inc	hl
0B247B 10 F7       0085*  	djnz	_pde_u_make_ascii
0B247D             0086*  _pde_u_make_ascii2:
0B247D 04          0087*  	inc	b
0B247E             0088*  _pde_u_make_ascii3:
0B247E 7E          0089*  	ld	a,(hl)
0B247F F6 30       0090*  	or	30h
0B2481 77          0091*  	ld	(hl),a
0B2482 23          0092*  	inc	hl
0B2483 10 F9       0093*  	djnz	_pde_u_make_ascii3
0B2485             0094*  
0B2485 E1          0095*  	pop	hl
0B2486 06 08       0096*  	ld	b,8
0B2488             0097*  _pde_u_final_out:
0B2488 7E          0098*  	ld	a,(hl)
0B2489 23          0099*  	inc	hl
0B248A FE 20       0100*  	cp	' '
0B248C 28 02       0101*  	jr	z,_pde_u_final_out_strip
0B248E 5B D7       0102*  	rst.lil	10h
0B2490             0103*  _pde_u_final_out_strip:
0B2490 10 F6       0104*  	djnz	_pde_u_final_out
0B2492 C9          0105*  	ret
0B2493             0106*  
0B2493             0107*  ;------------------------------------------------------------------------
0B2493             0108*  ; is_digit
0B2493             0109*  ; C flag set if A is a digit
0B2493             0110*  ; preserves all registers
0B2493             0111*  ;------------------------------------------------------------------------
0B2493             0112*  is_digit:
0B2493 FE 30       0113*  	cp	'0'
0B2495 3F          0114*  	ccf
0B2496 D0          0115*  	ret	nc	;less that '0'
0B2497 FE 3A       0116*  	cp	'9' + 1
0B2499 C9          0117*  	ret
0B249A             0118*  
0B249A             0119*  
0B249A             0120*  ;------------------------------------------------------------------------
0B249A             0121*  ; char2hex
0B249A             0122*  ; Input: ASCII nibble in A
0B249A             0123*  ; Returns: if valid nibble value in A; else 0FFh in A
0B249A             0124*  ;------------------------------------------------------------------------
0B249A             0125*  char2hex:
0B249A FE 30       0126*  	CP	'0'
0B249C 38 1D       0127*  	JR	C, char_not_hex
0B249E FE 3A       0128*  	CP	'9' + 1
0B24A0 30 03       0129*  	JR	NC, char_not_09
0B24A2 D6 30       0130*  	sub	'0'
0B24A4 C9          0131*  	ret
0B24A5             0132*  
0B24A5             0133*  char_not_09:
0B24A5             0134*  	; char is not 0 to 9. Try upper case
0B24A5 FE 41       0135*  	CP	'A'
0B24A7 38 12       0136*  	JR	C, char_not_hex
0B24A9 FE 47       0137*  	CP	'F' + 1
0B24AB 30 03       0138*  	JR	NC, char_not_AF
0B24AD D6 37       0139*  	sub	'A'-10
0B24AF C9          0140*  	ret
0B24B0             0141*  
0B24B0             0142*  char_not_AF:
0B24B0             0143*  	; char is not upper case A-F. Try lower
0B24B0 FE 61       0144*  	CP	'a'
0B24B2 38 07       0145*  	JR	C, char_not_hex
0B24B4 FE 67       0146*  	CP	'f' + 1
0B24B6 30 03       0147*  	JR	NC, char_not_hex
0B24B8 D6 57       0148*  	sub	'a' - 10
0B24BA C9          0149*  	RET
0B24BB             0150*  
0B24BB             0151*  char_not_hex:
0B24BB 3E FF       0152*   	ld	a,0FFh	;return -1 for not a valid hex digit
0B24BD C9          0153*  	RET
0B24BE             0154*  
0B24BE             0155*  ;------------------------------------------------------------------------
0B24BE             0156*  ;  newline
0B24BE             0157*  ;  Output CR+LF; all registers preserved
0B24BE             0158*  ;------------------------------------------------------------------------
0B24BE             0159*  newline:
0B24BE F5          0160*         push   AF
0B24BF 3E 0D       0161*         LD     A, 13
0B24C1 5B D7       0162*         RST.LIL    10h
0B24C3 3E 0A       0163*         LD     A, 10
0B24C5 5B D7       0164*         RST.LIL    10h
0B24C7 F1          0165*         POP    AF
0B24C8 C9          0166*         RET
0B24C9             0167*  
0B24C9             0168*  ;------------------------------------------------------------------------
0B24C9             0169*  ;  put_nibble
0B24C9             0170*  ;  Output a single hex nibble in A
0B24C9             0171*  ;  All registers preserved
0B24C9             0172*  ;------------------------------------------------------------------------
0B24C9             0173*  put_nibble:
0B24C9 F5          0174*  	push   AF
0B24CA C6 90       0175*  	add    a,090h ;Neat trick to convert hex nibble in A to ASCII
0B24CC 27          0176*  	daa
0B24CD CE 40       0177*  	adc    a,040h
0B24CF 27          0178*  	daa
0B24D0 5B D7       0179*  	RST.LIL    10h	;output character in A
0B24D2 F1          0180*  	pop    AF
0B24D3 C9          0181*  	ret
0B24D4             0182*  
0B24D4             0183*  ;------------------------------------------------------------------------
0B24D4             0184*  ;  print_A
0B24D4             0185*  ;  Output the 8-bit hex number A
0B24D4             0186*  ;  All registers preserved
0B24D4             0187*  ;------------------------------------------------------------------------
0B24D4             0188*  print_A:
0B24D4 F5          0189*  	push 	AF
0B24D5 F5          0190*  	push 	AF	;save for second nibble
0B24D6 0F          0191*  	rrca
0B24D7 0F          0192*  	rrca
0B24D8 0F          0193*  	rrca
0B24D9 0F          0194*  	rrca
0B24DA E6 0F       0195*  	and	0Fh	;first nibble
0B24DC CD C9 24 0B 0196*  	call	put_nibble
0B24E0 F1          0197*  	pop 	AF
0B24E1 E6 0F       0198*  	and	0Fh	;second nibble
0B24E3 CD C9 24 0B 0199*  	call	put_nibble
0B24E7 F1          0200*  	pop 	AF
0B24E8 C9          0201*  	ret
0B24E9             0202*  
0B24E9             0203*  ;------------------------------------------------------------------------
0B24E9             0204*  ;  print_HLU_hex
0B24E9             0205*  ;  Output the 24-bit hex number HLU; other registers preserved
0B24E9             0206*  ;------------------------------------------------------------------------
0B24E9             0207*  print_HLU_hex:
0B24E9 F5          0208*         push   AF
0B24EA 22 15 25 0B 0209*         ld     (hex_temp),hl
0B24EE 3A 17 25 0B 0210*         ld     a,(hex_temp+2)
0B24F2 CD D4 24 0B 0211*         call   print_A
0B24F6 3A 16 25 0B 0212*         ld     a,(hex_temp+1)
0B24FA CD D4 24 0B 0213*         call   print_A
0B24FE 3A 15 25 0B 0214*         ld     a,(hex_temp)
0B2502 CD D4 24 0B 0215*         call   print_A
0B2506 F1          0216*         POP    AF
0B2507 C9          0217*         RET
0B2508             0218*  
0B2508             0219*  ;------------------------------------------------------------------------
0B2508             0220*  ;  puts
0B2508             0221*  ;  Output a zero-terminated string whose address is in HL; all
0B2508             0222*  ;  registers preserved.
0B2508             0223*  ;------------------------------------------------------------------------
0B2508             0224*  puts:
0B2508 F5          0225*         push   AF
0B2509 C5          0226*         push   BC
0B250A 01 00 00 00 0227*         ld     BC, 0                ; Set to 0, so length ignored...
0B250E 3E 00       0228*         ld     A, 0                 ; Use character in A as delimiter
0B2510 5B DF       0229*         RST.LIL    18h                  ; This calls a RST in the eZ80 address space
0B2512 C1          0230*         pop    BC
0B2513 F1          0231*         pop    AF
0B2514 C9          0232*         ret
0B2515             0233*  
0B2515             0234*  ;------------------------------------------------------------------------
0B2515             0235*  ; Data area
0B2515             0236*  ; Storage for 24 bit conversion
0B2515             0237*  ;------------------------------------------------------------------------
0B2515             0238*  hex_temp:
0B2515 00 00 00    0239*         dw24     0      ;3 bytes for HL used for both hex and decimal temp
0B2518             0240*  
0B2518             0241*  outbuf:
0B2518 31 36 37 37 0242*  	db	"16777215 "	;largest number with an extra space
       37 32 31 35 
       20          
0B2521             0032   
0B2521             0033   ; APPLICATION INCLUDES
0B2521 55 73 61 67 0034   str_usage: ASCIZ "Usage: scratch <args>\r\n"
       65 3A 20 73 
       63 72 61 74 
       63 68 20 3C 
       61 72 67 73 
       3E 0D 0A 00 
0B2539 45 72 72 6F 0035   str_error: ASCIZ "Error!\r\n"
       72 21 0D 0A 
       00          
0B2542 53 75 63 63 0036   str_success: ASCIZ "Success!\r\n"
       65 73 73 21 
       0D 0A 00    
0B254D             0037   
0B254D             0038   ; This is a scratch moslet for testing new features
0B254D             0039   ; Parameters:
0B254D             0040   ;
0B254D             0041   
0B254D             0042   ; ========= BOILERPLATE MAIN LOOP =========
0B254D             0043   ; The main routine
0B254D             0044   ; IXU: argv - pointer to array of parameters
0B254D             0045   ;   C: argc - number of parameters
0B254D             0046   ; Returns:
0B254D             0047   ;  HL: Error code, or 0 if OK
0B254D             0048   
0B254D             0049   min_args: equ 3
0B254D             0050   
0B254D             0051   _main:
0B254D 79          0052       ld a,c              ; how many arguments?
0B254E FE 03       0053       cp min_args         ; not enough?
0B2550 30 1A       0054       jr nc,main          ; if enough, go to main loop
0B2552 21 21 25 0B 0055       ld hl,str_usage     ; if not enough, print usage
0B2556 CD 73 02 0B 0056       call printString
0B255A             0057                           ; fall through to _main_end_error
0B255A             0058   
0B255A             0059   _main_end_error:
0B255A 21 39 25 0B 0060       ld hl,str_error     ; print error message
0B255E CD 73 02 0B 0061       call printString
0B2562 21 13 00 00 0062       ld hl,19            ; return error code 19
0B2566 C9          0063       ret
0B2567             0064   
0B2567             0065   _main_end_ok:
0B2567             0066       ; ld hl,str_success   ; print success message
0B2567             0067       ; call printString
0B2567 21 00 00 00 0068       ld hl,0             ; return 0 for success
0B256B C9          0069       ret
0B256C             0070   
0B256C             0071   ; ========= BEGIN CUSTOM MAIN LOOP =========
0B256C             0072   main:
0B256C 0D          0073       dec c               ; decrement the argument count to skip the program name
0B256D             0074   
0B256D             0075   ; match on BASIC functions
0B256D FD 21 32 48 0076       ld iy,BASIC
       0B          
0B2572 CD 7B 27 0B 0077       call match_next_and_print ; iy = function pointer, zero flag set if match
0B2576 CA 1F 48 0B 0078       jp z,BASIC_EXEC
0B257A             0079   @@:
0B257A ED 32 FD    0080       lea ix,ix-3
0B257D             0081   
0B257D             0082   ; get first numeric argument
0B257D CD 1F 27 0B 0083       call get_arg_s168 ; de = first numeric argument
0B2581 D5          0084       push de
0B2582 EB          0085       ex de,hl
0B2583 CD 7C 06 0B 0086       call print_hex_hl
0B2587 EB          0087       ex de,hl
0B2588 CD 6B 04 0B 0088       call print_s168_de
0B258C             0089   
0B258C             0090   ; match on single number functions
0B258C FD 21 91 26 0091       ld iy,function
       0B          
0B2591 CD 7B 27 0B 0092       call match_next_and_print ; iy = function pointer, zero flag set if match
0B2595 F5          0093       push af ; save zero flag
0B2596 FD E5       0094       push iy ; save the function pointer
0B2598 CA BA 25 0B 0095       jp z,@execute
0B259C             0096   
0B259C             0097   ; match on two-number operators
0B259C FD E1       0098       pop iy ; dummy pops
0B259E F1          0099       pop af ; to balance stack
0B259F ED 32 FD    0100       lea ix,ix-3
0B25A2 FD 21 D5 25 0101       ld iy,operator
       0B          
0B25A7 CD 7B 27 0B 0102       call match_next_and_print ; iy = operator pointer, zero flag set if match
0B25AB F5          0103       push af ; save zero flag
0B25AC FD E5       0104       push iy ; save the operator pointer
0B25AE             0105   
0B25AE             0106   ; get second numeric argument if needed
0B25AE CD 1F 27 0B 0107       call get_arg_s168 ; de = second argument
0B25B2 CD AC 06 0B 0108       call print_hex_de
0B25B6 CD 6B 04 0B 0109       call print_s168_de
0B25BA             0110   
0B25BA             0111   @execute:
0B25BA CD 88 02 0B 0112       call printNewLine
0B25BE             0113   
0B25BE FD E1       0114       pop iy ; restore the function/operator pointer
0B25C0 F1          0115       pop af ; restore zero flag
0B25C1 E1          0116       pop hl ; restore first argument
0B25C2             0117   
0B25C2 C2 5A 25 0B 0118       jp nz,_main_end_error
0B25C6             0119   
0B25C6             0120       callIY ; call the function
0B25C6 01 CD 25 0B 0001M          ld bc,$+7     ; Address of first instruction after the jump
0B25CA C5          0002M          push bc       ; which constitutes the return address
0B25CB FD E9       0003M          jp   (iy)     ; Jump to the address in IY
0B25CD CD 88 02 0B 0121       call printNewLine
0B25D1 C3 67 25 0B 0122       jp _main_end_ok
0B25D5             0123   
0B25D5             0124   ; ========== DISPATCH TABLES ==========
0B25D5             0125   
0B25D5             0126   ; TWO-NUMBER OPERATORS
0B25D5             0127   operator:
0B25D5 F3 25 0B    0128       dl addition
0B25D8 01 26 0B    0129       dl subtract
0B25DB 11 26 0B    0130       dl multiply
0B25DE 28 26 0B    0131       dl divide
0B25E1 41 26 0B    0132       dl tan
0B25E4 48 26 0B    0133       dl atan2
0B25E7 51 26 0B    0134       dl polar2cart
0B25EA 83 26 0B    0135       dl cart2polar
0B25ED 04 27 0B    0136       dl shift
0B25F0 00 00 00    0137       dl 0x000000 ; list terminator
0B25F3             0138   addition:
0B25F3 18 02       0139       jr @start
0B25F5 2B 00       0140       asciz "+"
0B25F7             0141   @start:
0B25F7 19          0142       add hl,de
0B25F8 CD 7C 06 0B 0143       call print_hex_hl
0B25FC CD 4D 04 0B 0144       call print_s168_hl
0B2600 C9          0145       ret
0B2601             0146   subtract:
0B2601 18 02       0147       jr @start
0B2603 2D 00       0148       asciz "-"
0B2605             0149   @start:
0B2605 AF          0150       xor a ; clear carry
0B2606 ED 52       0151       sbc hl,de
0B2608 CD 7C 06 0B 0152       call print_hex_hl
0B260C CD 4D 04 0B 0153       call print_s168_hl
0B2610 C9          0154       ret
0B2611             0155   multiply:
0B2611 18 02       0156       jr @start
0B2613 2A 00       0157       asciz "*"
0B2615             0158   @start:
0B2615 3E 08       0159       ld a,8 ; 8 fractional bits output
0B2617 06 08       0160       ld b,8 ; 8 fractional bits input arg1
0B2619 0E 08       0161       ld c,8 ; 8 fractional bits input arg2
0B261B CD E6 0A 0B 0162       call smulfx ; hl = hl * de
0B261F CD 7C 06 0B 0163       call print_hex_hl
0B2623 CD 4D 04 0B 0164       call print_s168_hl
0B2627 C9          0165       ret
0B2628             0166   divide:
0B2628 18 02       0167       jr @start
0B262A 2F 00       0168       asciz "/"
0B262C             0169   @start:
0B262C CD 0C 0C 0B 0170       call sdiv168
0B2630 CD AC 06 0B 0171       call print_hex_de
0B2634 CD 6B 04 0B 0172       call print_s168_de
0B2638 CD 7C 06 0B 0173       call print_hex_hl ; remainder
0B263C CD 4D 04 0B 0174       call print_s168_hl ; remainder
0B2640 C9          0175       ret
0B2641             0176   tan:
0B2641 18 04       0177       jr @start
0B2643 74 61 6E 00 0178       asciz "tan"
0B2647             0179   @start:
0B2647             0180       ; call tan168
0B2647 C9          0181       ret
0B2648             0182   atan2:
0B2648 18 06       0183       jr @start
0B264A 61 74 61 6E 0184       asciz "atan2"
       32 00       
0B2650             0185   @start:
0B2650             0186       ; call atan2_168
0B2650 C9          0187       ret
0B2651             0188   polar2cart:
0B2651 18 0B       0189       jr @start
0B2653 70 6F 6C 61 0190       asciz "polar2cart"
       72 32 63 61 
       72 74 00    
0B265E             0191   @start:
0B265E CD 1E 0D 0B 0192       call deg_360_to_256
0B2662 CD 7C 06 0B 0193       call print_hex_hl
0B2666 CD 4D 04 0B 0194       call print_s168_hl
0B266A CD 7F 0D 0B 0195       call polar_to_cartesian
0B266E CD 88 02 0B 0196       call printNewLine
0B2672 CD 93 06 0B 0197       call print_hex_bc
0B2676 CD 5A 04 0B 0198       call print_s168_bc
0B267A CD AC 06 0B 0199       call print_hex_de
0B267E CD 6B 04 0B 0200       call print_s168_de
0B2682 C9          0201       ret
0B2683             0202   cart2polar:
0B2683 18 0B       0203       jr @start
0B2685 63 61 72 74 0204       asciz "cart2polar"
       32 70 6F 6C 
       61 72 00    
0B2690             0205   @start:
0B2690             0206       ; call cartesian_to_polar
0B2690 C9          0207       ret
0B2691             0208   
0B2691             0209   function:
0B2691 A0 26 0B    0210       dl sin
0B2694 BF 26 0B    0211       dl cos
0B2697 DE 26 0B    0212       dl sqrt
0B269A EE 26 0B    0213       dl deg256
0B269D 00 00 00    0214       dl 0x000000 ; list terminator
0B26A0             0215   sin:
0B26A0 18 04       0216       jr @start
0B26A2 73 69 6E 00 0217       asciz "sin"
0B26A6             0218   @start:
0B26A6 CD 1E 0D 0B 0219       call deg_360_to_256
0B26AA CD 7C 06 0B 0220       call print_hex_hl
0B26AE CD 4D 04 0B 0221       call print_s168_hl
0B26B2 CD 45 0D 0B 0222       call sin168
0B26B6 CD 7C 06 0B 0223       call print_hex_hl
0B26BA CD 4D 04 0B 0224       call print_s168_hl
0B26BE C9          0225       ret
0B26BF             0226   cos:
0B26BF 18 04       0227       jr @start
0B26C1 63 6F 73 00 0228       asciz "cos"
0B26C5             0229   @start:
0B26C5 CD 1E 0D 0B 0230       call deg_360_to_256
0B26C9 CD 7C 06 0B 0231       call print_hex_hl
0B26CD CD 4D 04 0B 0232       call print_s168_hl
0B26D1 CD 40 0D 0B 0233       call cos168
0B26D5 CD 7C 06 0B 0234       call print_hex_hl
0B26D9 CD 4D 04 0B 0235       call print_s168_hl
0B26DD C9          0236       ret
0B26DE             0237   sqrt:
0B26DE 18 05       0238       jr @start
0B26E0 73 71 72 74 0239       asciz "sqrt"
       00          
0B26E5             0240   @start:
0B26E5 CD 33 0C 0B 0241       call sqrt168
0B26E9 CD 4D 04 0B 0242       call print_s168_hl
0B26ED C9          0243       ret
0B26EE             0244   deg256:
0B26EE 18 07       0245       jr @start
0B26F0 64 65 67 32 0246       asciz "deg256"
       35 36 00    
0B26F7             0247   @start:
0B26F7 CD 1E 0D 0B 0248       call deg_360_to_256
0B26FB CD 7C 06 0B 0249       call print_hex_hl
0B26FF CD 4D 04 0B 0250       call print_s168_hl
0B2703 C9          0251       ret
0B2704             0252   shift:
0B2704 18 06       0253       jr @start
0B2706 73 68 69 66 0254       asciz "shift"
       74 00       
0B270C             0255   @start:
0B270C DD 21 F0 09 0256       ld ix,arith24uhl ; pointer to output buffer
       0B          
0B2711 7A          0257       ld a,d ; integer portion of ude is number of bits to shift
0B2712 CD 1A 0A 0B 0258       call shift_hlu
0B2716 CD 7C 06 0B 0259       call print_hex_hl
0B271A CD 4D 04 0B 0260       call print_s168_hl
0B271E C9          0261       ret
0B271F             0262   
0B271F             0263   ; ========== HELPER FUNCTIONS ==========
0B271F             0264   ; get the next argument after ix as a signed 16.8 fixed point number
0B271F             0265   ; inputs: ix = pointer to the argument string
0B271F             0266   ; outputs: ude = signed 16.8 fixed point number
0B271F             0267   ; destroys: a, d, e, h, l, f
0B271F             0268   get_arg_s168:
0B271F ED 32 03    0269       lea ix,ix+3 ; point to the next argument
0B2722 DD 27 00    0270       ld hl,(ix)  ; get the argument string
0B2725 CD 94 01 0B 0271       call asc_to_s168 ; convert the string to a number
0B2729 C9          0272       ret ; return with the value in DE
0B272A             0273   
0B272A             0274   ; Inputs: ix = pointer to the argument string
0B272A             0275   ; Outputs: ude = signed 24-bit integer
0B272A             0276   ; Destroys: a, d, e, h, l, f
0B272A             0277   get_arg_s24:
0B272A ED 32 03    0278       lea ix,ix+3 ; point to the next argument
0B272D DD 27 00    0279       ld hl,(ix)  ; get the argument string
0B2730 CD 45 01 0B 0280       call asc_to_s24 ; convert the string to a number
0B2734 C9          0281       ret ; return with the value in DE
0B2735             0282   
0B2735             0283   get_plot_coords:
0B2735             0284   ; get the move coordinates
0B2735 ED 32 03    0285       lea ix,ix+3 ; pointer to next argument address
0B2738 DD 27 00    0286       ld hl,(ix)  ; pointer to the x coordinate string
0B273B CD 94 01 0B 0287       call asc_to_s168 ; de = x coordinate
0B273F D5          0288       push de
0B2740 C1          0289       pop bc ; bc = x coordinate
0B2741 ED 32 03    0290       lea ix,ix+3 ; pointer to next argument address
0B2744 DD 27 00    0291       ld hl,(ix)  ; pointer to the y coordinate string
0B2747 CD 94 01 0B 0292       call asc_to_s168 ; de = y coordinate
0B274B C9          0293       ret
0B274C             0294   
0B274C             0295   get_arg_text:
0B274C ED 32 03    0296       lea ix,ix+3 ; point to the next argument
0B274F DD 27 00    0297       ld hl,(ix)  ; get the argument string
0B2752 C9          0298       ret
0B2753             0299   
0B2753             0300   ; match the next argument after ix to the dispatch table at iy
0B2753             0301   ;   - arguments and dispatch entries are zero-terminated, case-sensitive strings
0B2753             0302   ;   - final entry of dispatch table must be a 3-byte zero or bad things will happen
0B2753             0303   ; returns: NO MATCH: iy=dispatch list terminator a=1 and zero flag reset
0B2753             0304   ;          ON MATCH: iy=dispatch address, a=0 and zero flag set
0B2753             0305   ; destroys: a, hl, de, ix, iy, flags
0B2753             0306   match_next:
0B2753 ED 32 03    0307       lea ix,ix+3         ; point to the next argument
0B2756             0308   @loop:
0B2756 FD 27 00    0309       ld hl,(iy)          ; pointer argument dispatch record
0B2759             0310       sign_hlu            ; check for list terminator
0B2759 19          0001M          add hl,de
0B275A B7          0002M          or a
0B275B ED 52       0003M          sbc hl,de
0B275D CA 75 27 0B 0311       jp z,@no_match      ; if a=0, return error
0B2761 23          0312       inc hl              ; skip over jp instruction
0B2762 23          0313       inc hl
0B2763 DD 17 00    0314       ld de,(ix)          ; pointer to the argument string
0B2766 CD 8C 27 0B 0315       call str_equal      ; compare the argument to the dispatch table entry
0B276A CA 77 27 0B 0316       jp z,@match         ; if equal, return success
0B276E ED 33 03    0317       lea iy,iy+3         ; if not equal, bump iy to next dispatch table entry
0B2771 C3 56 27 0B 0318       jp @loop            ; and loop
0B2775             0319   @no_match:
0B2775 3C          0320       inc a               ; no match so return a=1 and zero flag reset
0B2776 C9          0321       ret
0B2777             0322   @match:
0B2777 FD 37 00    0323       ld iy,(iy)          ; get the function pointer
0B277A C9          0324       ret                 ; return a=0 and zero flag set
0B277B             0325   
0B277B             0326   ; same as match_next, but prints the parameter if a match is found
0B277B             0327   match_next_and_print:
0B277B CD 53 27 0B 0328       call match_next
0B277F C0          0329       ret nz ; no match found
0B2780 ED 32 FD    0330       lea ix,ix-3
0B2783 CD 4C 27 0B 0331       call get_arg_text ; hl points to the operator string
0B2787 CD 97 27 0B 0332       call print_param
0B278B C9          0333       ret
0B278C             0334   
0B278C             0335   ; compare two zero-terminated strings for equality, case-sensitive
0B278C             0336   ; hl: pointer to first string, de: pointer to second string
0B278C             0337   ; returns: z if equal, nz if not equal
0B278C             0338   ; destroys: a, hl, de
0B278C             0339   str_equal:
0B278C 1A          0340       ld a,(de)           ; get the first character
0B278D BE          0341       cp (hl)             ; compare to the second character
0B278E C0          0342       ret nz              ; if not equal, return
0B278F B7          0343       or a
0B2790 C8          0344       ret z               ; if equal and zero, return
0B2791 23          0345       inc hl              ; next character
0B2792 13          0346       inc de
0B2793 C3 8C 27 0B 0347       jp str_equal        ; loop until end of string
0B2797             0348   
0B2797             0349   ; print the parameter string pointed to by ix
0B2797             0350   ; destroys: a, hl
0B2797             0351   print_param:
0B2797 DD 27 00    0352       ld hl,(ix)          ; get the parameter pointer
0B279A CD 73 02 0B 0353       call printString    ; print the parameter string
0B279E 3E 20       0354       ld a,' '            ; print a space separator
0B27A0 5B D7       0355       rst.lil $10
0B27A2 C9          0356       ret
0B27A3             0357   
0B27A3             0358   ; print the parameters
0B27A3             0359   ; inputs: b = number of parameters, ix = pointer to the parameters
0B27A3             0360   ; destroys: a, hl, bc
0B27A3             0361   print_params:
0B27A3 41          0362       ld b,c              ; loop counter = number of parameters
0B27A4 DD E5       0363       push ix             ; save the pointer to the parameters
0B27A6             0364   @loop:
0B27A6 C5          0365       push bc             ; save the loop counter
0B27A7 CD 97 27 0B 0366       call print_param    ; print the parameter
0B27AB ED 32 03    0367       lea ix,ix+3         ; next parameter pointer
0B27AE C1          0368       pop bc              ; get back the loop counter
0B27AF 10 F5       0369       djnz @loop          ; loop until done
0B27B1 DD E1       0370       pop ix              ; restore the pointer to the parameters
0B27B3 C9          0371       ret
0B27B4             0372   
0B27B4             0373   debug_print:
0B27B4 CD 88 02 0B 0374       call printNewLine   ; DEBUG
0B27B8 CD 57 07 0B 0375       call dumpFlags      ; DEBUG
0B27BC CD 97 27 0B 0376       call print_param    ; DEBUG
0B27C0 CD 88 02 0B 0377       call printNewLine   ; DEBUG
0B27C4 CD 88 02 0B 0378       call printNewLine   ; DEBUG
0B27C8 C9          0379       ret
0B27C9             0380   
0B27C9             0381   ; ========= EXPERIMENTAL FLOATING POINT FUNCTIONS =========
0B27C9             0382       include "basic/ram.asm"
0B27C9             0001*  ;
0B27C9             0002*  ; Title:	BBC Basic Interpreter - Z80 version
0B27C9             0003*  ;		RAM Module for BBC Basic Interpreter
0B27C9             0004*  ;		For use with Version 2.0 of BBC BASIC
0B27C9             0005*  ;		Standard CP/M Distribution Version
0B27C9             0006*  ; Author:	(C) Copyright  R.T.Russell 31-12-1983
0B27C9             0007*  ; Modified By:	Dean Belfield
0B27C9             0008*  ; Created:	12/05/2023
0B27C9             0009*  ; Last Updated:	26/06/2023
0B27C9             0010*  ;
0B27C9             0011*  ; Modinfo:
0B27C9             0012*  ; 06/06/2023:	Modified to run in ADL mode
0B27C9             0013*  ; 26/06/2023:	Added temporary stores R0 and R1
0B27C9             0014*  
0B27C9             0015*  			.ASSUME	ADL = 1
0B27C9             0016*  
0B27C9             0017*  			; DEFINE	LORAM, SPACE = ROM
0B27C9             0018*  			; SEGMENT LORAM
0B27C9             0019*  
0B27C9             0020*  			; XDEF	ACCS
0B27C9             0021*  			; XDEF	BUFFER
0B27C9             0022*  			; XDEF	STAVAR
0B27C9             0023*  			; XDEF	DYNVAR
0B27C9             0024*  			; XDEF	FNPTR
0B27C9             0025*  			; XDEF	PROPTR
0B27C9             0026*  			; XDEF	PAGE_
0B27C9             0027*  			; XDEF	TOP
0B27C9             0028*  			; XDEF	LOMEM
0B27C9             0029*  			; XDEF 	FREE
0B27C9             0030*  			; XDEF	HIMEM
0B27C9             0031*  			; XDEF	LINENO
0B27C9             0032*  			; XDEF	TRACEN
0B27C9             0033*  			; XDEF	AUTONO
0B27C9             0034*  			; XDEF	ERRTRP
0B27C9             0035*  			; XDEF	ERRTXT
0B27C9             0036*  			; XDEF	DATPTR
0B27C9             0037*  			; XDEF	ERL
0B27C9             0038*  			; XDEF	ERRLIN
0B27C9             0039*  			; XDEF	RANDOM
0B27C9             0040*  			; XDEF	COUNT
0B27C9             0041*  			; XDEF	WIDTH
0B27C9             0042*  			; XDEF	ERR
0B27C9             0043*  			; XDEF	LISTON
0B27C9             0044*  			; XDEF	INCREM
0B27C9             0045*  
0B27C9             0046*  			; XDEF	FLAGS
0B27C9             0047*  			; XDEF	OSWRCHPT
0B27C9             0048*  			; XDEF	OSWRCHCH
0B27C9             0049*  			; XDEF	OSWRCHFH
0B27C9             0050*  			; XDEF	KEYDOWN
0B27C9             0051*  			; XDEF	KEYASCII
0B27C9             0052*  			; XDEF	KEYCOUNT
0B27C9             0053*  
0B27C9             0054*  			; XDEF	R0
0B27C9             0055*  			; XDEF	R1
0B27C9             0056*  
0B27C9             0057*  			; XDEF	RAM_START
0B27C9             0058*  			; XDEF	RAM_END
0B27C9             0059*  			; XDEF	USER
0B27C9             0060*  
0B27C9 FF FF FF FF 0061*  			ALIGN 		256		; ACCS, BUFFER & STAVAR must be on page boundaries
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
0B2800             0062*  RAM_START:
0B2800             0063*  ;
0B2800             0064*  ACCS:			DS		256             ; String Accumulator
0B2900             0065*  BUFFER:			DS		256             ; String Input Buffer
0B2A00             0066*  STAVAR:			DS	 	27*4            ; Static Variables
0B2A6C             0067*  DYNVAR: 		DS 		54*3            ; Dynamic Variable Pointers
0B2B0E             0068*  FNPTR:  		DS    		3               ; Dynamic Function Pointers
0B2B11             0069*  PROPTR: 		DS		3               ; Dynamic Procedure Pointers
0B2B14             0070*  ;
0B2B14             0071*  PAGE_:   		DS		3               ; Start of User Program
0B2B17             0072*  TOP:    		DS		3               ; First Location after User Program
0B2B1A             0073*  LOMEM:  		DS		3               ; Start of Dynamic Storage
0B2B1D             0074*  FREE:   		DS		3               ; First Free Space Byte
0B2B20             0075*  HIMEM:  		DS		3               ; First Protected Byte
0B2B23             0076*  ;
0B2B23             0077*  LINENO: 		DS		3               ; Line Number
0B2B26             0078*  TRACEN:			DS		3               ; Trace Flag
0B2B29             0079*  AUTONO:			DS		3               ; Auto Flag
0B2B2C             0080*  ERRTRP:			DS		3               ; Error Trap
0B2B2F             0081*  ERRTXT:			DS		2               ; Error Message Pointer
0B2B31             0082*  DATPTR:			DS		2               ; Data Pointer
0B2B33             0083*  ERL:			DS		2               ; Error Line
0B2B35             0084*  ERRLIN:			DS		3               ; The "ON ERROR" Line
0B2B38             0085*  RANDOM:			DS		5               ; Random Number
0B2B3D             0086*  COUNT:			DS		1               ; Print Position
0B2B3E             0087*  WIDTH:			DS		1               ; Print Width
0B2B3F             0088*  ERR:			DS		1               ; Error Number
0B2B40             0089*  LISTON:			DS		1               ; LISTO (bottom nibble)
0B2B41             0090*  							; - BIT 0: If set, output a space after the line number
0B2B41             0091*  							; - BIT 1: If set, then indent FOR/NEXT loops
0B2B41             0092*  							; - BIT 2: If set, then indent REPEAT/UNTIL loops
0B2B41             0093*  							; - BIT 3: If set, then output to buffer for *EDIT
0B2B41             0094*  							; OPT FLAG (top nibble)
0B2B41             0095*  							; - BIT 4: If set, then list whilst assembling
0B2B41             0096*  							; - BIT 5: If set, then assembler errors are reported
0B2B41             0097*  							; - BIT 6: If set, then place the code starting at address pointed to by O%
0B2B41             0098*  							; - BIT 7: If set, then assemble in ADL mode, otherwise assemble in Z80 mode
0B2B41             0099*  INCREM:			DS		1               ; Auto-Increment Value
0B2B42             0100*  ;
0B2B42             0101*  ; Extra Agon-implementation specific system variables
0B2B42             0102*  ;
0B2B42             0103*  FLAGS:			DS		1		; Miscellaneous flags
0B2B43             0104*  							; - BIT 7: Set if ESC pressed
0B2B43             0105*  							; - BIT 6: Set to disable ESC
0B2B43             0106*  OSWRCHPT:		DS		2		; Pointer for *EDIT
0B2B45             0107*  OSWRCHCH:		DS		1		; Channel of OSWRCH
0B2B46             0108*  							; - 0: Console
0B2B46             0109*  							; - 1: File
0B2B46             0110*  OSWRCHFH:		DS		1		; File handle for OSWRCHCHN
0B2B47             0111*  KEYDOWN:		DS		1		; Keydown flag
0B2B48             0112*  KEYASCII:		DS		1		; ASCII code of pressed key
0B2B49             0113*  KEYCOUNT:		DS		1		; Counts every time a key is pressed
0B2B4A             0114*  R0:			DS		3		; General purpose storage for 8/16 to 24 bit operations
0B2B4D             0115*  R1:			DS		3		;
0B2B50             0116*  ;
0B2B50             0117*  ; This must be at the end
0B2B50             0118*  ;
0B2B50             0119*  RAM_END:
0B2B50 FF FF FF FF 0120*  			ALIGN	256
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
0B2C00             0121*  USER:							; Must be aligned on a page boundary
0B2C00             0122*  
0B2C00             0383       include "basic/eval.asm"
0B2C00             0001*  
0B2C00             0002*  ; ========================================
0B2C00             0003*  ; FROM eval.asm
0B2C00             0004*  ; ----------------------------------------
0B2C00             0005*  
0B2C00             0006*  ;
0B2C00             0007*  ; Title:	BBC Basic Interpreter - Z80 version
0B2C00             0008*  ;		Expression Evaluation & Arithmetic Module - "EVAL"
0B2C00             0009*  ; Author:	(C) Copyright  R.T.Russell  1984
0B2C00             0010*  ; Modified By:	Dean Belfield
0B2C00             0011*  ; Created:	12/05/2023
0B2C00             0012*  ; Last Updated:	17/08/2023
0B2C00             0013*  ;
0B2C00             0014*  ; Modinfo:
0B2C00             0015*  ; 07/06/2023:	Modified to run in ADL mode
0B2C00             0016*  ; 26/06/2023:	Fixed HEX and HEXSTR
0B2C00             0017*  ; 13/08/2023:	Added INKEY(-n) support (requires MOS 1.04)
0B2C00             0018*  ; 17/08/2023:	Added binary constants
0B2C00             0019*  
0B2C00             0020*  			; .ASSUME	ADL = 1
0B2C00             0021*  
0B2C00             0022*  			; include "ram.asm"
0B2C00             0023*  
0B2C00             0024*  			; INCLUDE	"equs.inc"
0B2C00             0025*  			; INCLUDE "macros.inc"
0B2C00             0026*  			; INCLUDE "mos_api.inc"	; In MOS/src
0B2C00             0027*  
0B2C00             0028*  			; include "fpp.asm"
0B2C00             0029*  			; include "snippets.asm"
0B2C00             0030*  
0B2C00             0031*  			; SEGMENT CODE
0B2C00             0032*  
0B2C00             0033*  ; 			XDEF	EXPR
0B2C00             0034*  ; 			XDEF	EXPRN
0B2C00             0035*  ; 			XDEF	EXPRI
0B2C00             0036*  ; 			XDEF	EXPRS
0B2C00             0037*  ; 			XDEF	ITEMI
0B2C00             0038*  ; 			XDEF	LOADN
0B2C00             0039*  ; 			XDEF	LOAD4
0B2C00             0040*  ; 			XDEF	CONS
0B2C00             0041*  ; 			XDEF	LOADS
0B2C00             0042*  ; 			XDEF	SFIX
0B2C00             0043*  ; 			XDEF	VAL0
0B2C00             0044*  ; 			XDEF	SEARCH
0B2C00             0045*  ; 			XDEF	SWAP
0B2C00             0046*  ; 			XDEF	TEST
0B2C00             0047*  ; 			XDEF	DECODE
0B2C00             0048*  ; 			XDEF	HEXSTR
0B2C00             0049*  ; 			XDEF	STR
0B2C00             0050*  ; 			XDEF	ZERO
0B2C00             0051*  ; 			XDEF	PUSHS
0B2C00             0052*  ; 			XDEF	POPS
0B2C00             0053*  ; 			XDEF	COMMA
0B2C00             0054*  ; 			XDEF	BRAKET
0B2C00             0055*  ; 			XDEF	NXT
0B2C00             0056*  ; 			XDEF	COUNT0
0B2C00             0057*  
0B2C00             0058*  ; 			XREF	ADVAL
0B2C00             0059*  ; 			XREF	FN
0B2C00             0060*  ; 			XREF	POINT
0B2C00             0061*  ; 			XREF	USR
0B2C00             0062*  ; 			XREF	SYNTAX
0B2C00             0063*  ; 			XREF	ERROR_
0B2C00             0064*  ; 			XREF	CHECK
0B2C00             0065*  ; 			XREF	GETVAR
0B2C00             0066*  ; 			XREF	LISTON
0B2C00             0067*  ; 			XREF	RANGE
0B2C00             0068*  ; 			XREF	FPP
0B2C00             0069*  ; 			XREF	GETCSR
0B2C00             0070*  ; 			XREF	CHANEL
0B2C00             0071*  ; 			XREF	OSSTAT
0B2C00             0072*  ; 			XREF	OSBGET
0B2C00             0073*  ; 			XREF	LOMEM
0B2C00             0074*  ; 			XREF	HIMEM
0B2C00             0075*  ; 			XREF	PAGE_
0B2C00             0076*  ; 			XREF	TOP
0B2C00             0077*  ; 			XREF	ERL
0B2C00             0078*  ; 			XREF	ERR
0B2C00             0079*  ; 			XREF	COUNT
0B2C00             0080*  ; 			XREF	OSOPEN
0B2C00             0081*  ; 			XREF	GETEXT
0B2C00             0082*  ; 			XREF	GETPTR
0B2C00             0083*  ; 			XREF	GETIME
0B2C00             0084*  ; 			XREF	GETIMS
0B2C00             0085*  ; 			XREF	LEXAN2
0B2C00             0086*  ; 			XREF	RANDOM
0B2C00             0087*  ; 			XREF	STORE5
0B2C00             0088*  ; 			XREF	GETSCHR
0B2C00             0089*  ; 			XREF	OSRDCH
0B2C00             0090*  ; 			XREF	OSKEY
0B2C00             0091*  ; 			XREF	INKEY1
0B2C00             0092*  ; 			XREF	EXTERR
0B2C00             0093*  ;
0B2C00             0094*  ; BINARY FLOATING POINT REPRESENTATION:
0B2C00             0095*  ;    32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
0B2C00             0096*  ;     8 BIT EXCESS-128 SIGNED EXPONENT
0B2C00             0097*  ;    SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
0B2C00             0098*  ;    MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
0B2C00             0099*  ;
0B2C00             0100*  ; BINARY INTEGER REPRESENTATION:
0B2C00             0101*  ;    32 BIT 2'S-COMPLEMENT SIGNED INTEGER
0B2C00             0102*  ;     "EXPONENT" BYTE = 0 (WHEN PRESENT)
0B2C00             0103*  ;
0B2C00             0104*  ; NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
0B2C00             0105*  ;                             EXPONENT - C
0B2C00             0106*  ;
0B2C00             0107*  
0B2C00             0108*  ;
0B2C00             0109*  ; Table of addresses for functions
0B2C00             0110*  ;
0B2C00             0111*  FUNTOK:			EQU	8DH			; First token number
0B2C00             0112*  ;
0B2C00 C5 32 0B    0113*  FUNTBL:			DW24	DECODE			; Line number
0B2C03 15 30 0B    0114*  			DW24	OPENIN			; OPENIN ; opening a file, we won't be using
0B2C06 18 30 0B    0115*  			DW24	PTR_EV			; PTR ; related to file handling, we won't be using
0B2C09 AB 2C 0B    0116*  			DW24	PAGE			; PAGE
0B2C0C 19 30 0B    0117*  			DW24	TIMEV_EV			; TIME ; related to time handling, we won't be using
0B2C0F C6 2F 0B    0118*  			DW24	LOMEMV_EV			; LOMEM
0B2C12 D0 2F 0B    0119*  			DW24	HIMEMV_EV			; HIMEM
0B2C15 56 30 0B    0120*  			DW24	ABSV_EV			; ABS
0B2C18 92 30 0B    0121*  			DW24	ACS_EV			; ACS
0B2C1B 1E 48 0B    0122*  			DW24	ADVAL			; ADVAL ; IN sorry.asm, don't need
0B2C1E AF 2F 0B    0123*  			DW24	ASC			; ASC
0B2C21 8A 30 0B    0124*  			DW24	ASN_EV			; ASN
0B2C24 8E 30 0B    0125*  			DW24	ATN_EV			; ATN
0B2C27 AB 2F 0B    0126*  			DW24	BGET			; BGET ; get a byte from a file, we won't be using
0B2C2A 76 30 0B    0127*  			DW24	COS_EV			; COS
0B2C2D 01 30 0B    0128*  			DW24	COUNTV			; COUNT
0B2C30 5E 30 0B    0129*  			DW24	DEG_EV			; DEG
0B2C33 F5 2F 0B    0130*  			DW24	ERLV			; ERL
0B2C36 FB 2F 0B    0131*  			DW24	ERRV			; ERR
0B2C39 B7 30 0B    0132*  			DW24	EVAL_			; EVAL
0B2C3C 7E 30 0B    0133*  			DW24	EXP_EV			; EXP
0B2C3F 17 30 0B    0134*  			DW24	EXT_EV			; EXT ; related to file handling, we won't be using
0B2C42 6E 33 0B    0135*  			DW24	ZERO			; FALSE
0B2C45 A4 00 00    0136*  			DW24	FN			; FN
0B2C48 AD 2F 0B    0137*  			DW24	GET			; GET ; reading from keyboard, we won't be using
0B2C4B AC 2F 0B    0138*  			DW24	INKEY			; INKEY ; reading from keyboard, we won't be using
0B2C4E 65 31 0B    0139*  			DW24	INSTR			; INSTR(
0B2C51 6A 30 0B    0140*  			DW24	INT_EV_			; INT
0B2C54 BF 2F 0B    0141*  			DW24	LEN			; LEN
0B2C57 82 30 0B    0142*  			DW24	LN_EV			; LN
0B2C5A 86 30 0B    0143*  			DW24	LOG_EV			; LOG
0B2C5D 5A 30 0B    0144*  			DW24	NOTK_EV			; NOT
0B2C60 14 30 0B    0145*  			DW24	OPENUP			; OPENUP ; related to file handling, we won't be using
0B2C63 13 30 0B    0146*  			DW24	OPENOT			; OPENOUT ; related to file handling, we won't be using
0B2C66 52 30 0B    0147*  			DW24	PI_EV			; PI
0B2C69 1C 48 0B    0148*  			DW24	POINT			; POINT( ; in agon_graphics.asm we won't be using
0B2C6C A8 2F 0B    0149*  			DW24	POS			; POS ; related to cursor position, we won't be using
0B2C6F 62 30 0B    0150*  			DW24	RAD_EV			; RAD
0B2C72 EB 30 0B    0151*  			DW24	RND			; RND
0B2C75 66 30 0B    0152*  			DW24	SGN_EV			; SGN
0B2C78 7A 30 0B    0153*  			DW24	SIN_EV			; SIN
0B2C7B 6E 30 0B    0154*  			DW24	SQR_EV			; SQR
0B2C7E 72 30 0B    0155*  			DW24	TAN_EV			; TAN
0B2C81 E4 2F 0B    0156*  			DW24	TOPV			; TO(P)
0B2C84 47 30 0B    0157*  			DW24	FOR_EV			; FOR
0B2C87 1D 48 0B    0158*  			DW24	USR			; USR ; in exec.asm
0B2C8A A8 30 0B    0159*  			DW24	VAL_EV			; VAL
0B2C8D A9 2F 0B    0160*  			DW24	VPOS			; VPOS ; related to cursor position, we won't be using
0B2C90 F9 31 0B    0161*  			DW24	CHRS			; CHRS ; reading from keyboard, we won't be using
0B2C93 FA 31 0B    0162*  			DW24	GETS			; GETS ; reading from keyboard, we won't be using
0B2C96 FC 31 0B    0163*  			DW24	INKEYS			; INKEYS ; reading from keyboard, we won't be using
0B2C99 40 32 0B    0164*  			DW24	LEFTS			; LEFTS(
0B2C9C 08 32 0B    0165*  			DW24	MIDS			; MIDS(
0B2C9F 60 32 0B    0166*  			DW24	RIGHTS			; RIGHTS(
0B2CA2 29 33 0B    0167*  			DW24	STRS			; STR$
0B2CA5 81 32 0B    0168*  			DW24	STRING_			; STRINGS(
0B2CA8 AA 2F 0B    0169*  			DW24	EOF			; EOF ; reading from file, we won't be using
0B2CAB             0170*  
0B2CAB C9          0171*  PAGE: ret ; stub function for an item in FUNTBL which doesn't exist
0B2CAC             0172*  ;
0B2CAC             0173*  FUNTBL_END:		EQU	$
0B2CAC             0174*  ; TCMD:			EQU     FUNTOK+(FUNTBL_END-FUNTBL)/3
0B2CAC             0175*  TCMD_EV:			EQU     FUNTBL_END-FUNTBL/3+FUNTOK ; reorder because ez80asm doesn't do order of operations
0B2CAC             0176*  ;
0B2CAC             0177*  ANDK:			EQU     80H
0B2CAC             0178*  DIVK:			EQU     81H
0B2CAC             0179*  EORK:			EQU     82H
0B2CAC             0180*  MODK:			EQU     83H
0B2CAC             0181*  ORK:			EQU     84H
0B2CAC             0182*  ;
0B2CAC 32 30 0B    0183*  SOPTBL:			DW24	SLE			; <= (STRING)
0B2CAF 3B 30 0B    0184*  			DW24	SNE			; <>
0B2CB2 2B 30 0B    0185*  			DW24	SGE			; >=
0B2CB5 1C 30 0B    0186*  			DW24	SLT			; <
0B2CB8 42 30 0B    0187*  			DW24	SEQ			; =
0B2CBB 23 30 0B    0188*  			DW24	SGT			; >
0B2CBE             0189*  ;
0B2CBE             0190*  ; EXPR - VARIABLE-TYPE EXPRESSION EVALUATION
0B2CBE             0191*  ;     Expression type is returned in A'F':
0B2CBE             0192*  ;        Numeric - A' bit 7=0, F' sign bit cleared.
0B2CBE             0193*  ;         String - A' bit 7=1, F' sign bit set.
0B2CBE             0194*  ; Floating-point or integer result returned in HLH'L'C
0B2CBE             0195*  ; Integer result denoted by C=0 and HLH'L' non-zero.
0B2CBE             0196*  ; String result returned in string accumulator, DE set.
0B2CBE             0197*  ;
0B2CBE             0198*  ; Hierarchy is: (1) Variables, functions, constants, bracketed expressions.
0B2CBE             0199*  ;               (2) ^
0B2CBE             0200*  ;               (3) * / MOD DIV
0B2CBE             0201*  ;               (4) + -
0B2CBE             0202*  ;               (5) = <> <= >= > <
0B2CBE             0203*  ;               (6) AND
0B2CBE             0204*  ;               (7) EOR OR
0B2CBE             0205*  
0B2CBE             0206*  ;
0B2CBE             0207*  ; Level 7: EOR and OR
0B2CBE             0208*  ;
0B2CBE CD D7 2C 0B 0209*  EXPR:			CALL    EXPR1			; Get first operator by calling Level 6
0B2CC2 FE 82       0210*  EXPR0A:			CP      EORK            	; Is operator EOR?
0B2CC4 28 03       0211*  			JR      Z,EXPR0B		; Yes, so skip to next bit
0B2CC6 FE 84       0212*  			CP      ORK			; Is operator OR
0B2CC8 C0          0213*  			RET     NZ			; No, so return
0B2CC9             0214*  ;
0B2CC9 CD 18 34 0B 0215*  EXPR0B:			CALL    SAVE_EV            	; Save first operand
0B2CCD CD D7 2C 0B 0216*  			CALL    EXPR1           	; Get second operand
0B2CD1 CD 27 34 0B 0217*  			CALL    DOIT            	; Do the operation
0B2CD5 18 EB       0218*  			JR      EXPR0A          	; And continue
0B2CD7             0219*  ;
0B2CD7             0220*  ; Level 6: AND
0B2CD7             0221*  ;
0B2CD7 CD EC 2C 0B 0222*  EXPR1:			CALL    EXPR2			; Get first operator by calling Level 5
0B2CDB FE 80       0223*  EXPR1A:			CP      ANDK			; Is operator AND?
0B2CDD C0          0224*  			RET     NZ			; No, so return
0B2CDE CD 18 34 0B 0225*  			CALL    SAVE_EV			; Save first operand
0B2CE2 CD EC 2C 0B 0226*  			CALL    EXPR2			; Get second operand
0B2CE6 CD 27 34 0B 0227*  			CALL    DOIT			; Do the operation
0B2CEA 18 EF       0228*  			JR      EXPR1A			; And continue
0B2CEC             0229*  ;
0B2CEC             0230*  ; Level 5: Comparisons
0B2CEC             0231*  ;
0B2CEC CD 59 2D 0B 0232*  EXPR2:			CALL    EXPR3			; Get first operator by calling Level 4
0B2CF0 CD F3 33 0B 0233*  			CALL    RELOP?			; Is it ">", "=" or "<"?
0B2CF4 C0          0234*  			RET     NZ			; No, so return
0B2CF5 47          0235*  			LD      B,A			; Store the first operator in B
0B2CF6 FD 23       0236*  			INC     IY              	; Bump over operator
0B2CF8 CD 4A 34 0B 0237*  			CALL    NXT			;
0B2CFC CD F3 33 0B 0238*  			CALL    RELOP?          	; Is it a compound operator?
0B2D00 20 04       0239*  			JR      NZ,EXPR2B		; No, so skip next bit
0B2D02 FD 23       0240*  			INC     IY			; Bump over operator
0B2D04             0241*  			; CP      B			; Compare with first
0B2D04             0242*  			; JP      Z,SYNTAX        	; Trap illegal combinations ">>", "==", "<<" (but not "><", "=>", "=<")
0B2D04 80          0243*  			ADD     A,B
0B2D05 47          0244*  			LD      B,A			; B: Unique code for the compound operator
0B2D06 78          0245*  EXPR2B:			LD      A,B			; A: Code for the operator/compound operator
0B2D07 08          0246*  			EX      AF,AF'
0B2D08 FA 22 2D 0B 0247*  			JP      M,EXPR2S		; If it is a string, then branch here to handle it
0B2D0C 08          0248*  			EX      AF,AF'
0B2D0D D6 04       0249*  			SUB     4
0B2D0F FE 3A       0250*  			CP      '>'-4
0B2D11 20 02       0251*  			JR      NZ,EXPR2C
0B2D13 C6 02       0252*  			ADD     A,2
0B2D15 CD 1A 34 0B 0253*  EXPR2C:			CALL    SAVE1
0B2D19 CD 59 2D 0B 0254*  			CALL    EXPR3
0B2D1D CD 27 34 0B 0255*  			CALL    DOIT            	; NB: Must NOT be "JP DOIT"
0B2D21 C9          0256*  			RET
0B2D22             0257*  ;
0B2D22 08          0258*  EXPR2S:			EX      AF,AF'			; Handle string comparisons
0B2D23 3D          0259*  			DEC     A
0B2D24 E6 07       0260*  			AND     7
0B2D26 CD 8F 33 0B 0261*  			CALL    PUSHS           	; Save string on the stack
0B2D2A F5          0262*  			PUSH    AF              	; Save the operator
0B2D2B CD 59 2D 0B 0263*  			CALL    EXPR3           	; Get the second string
0B2D2F 08          0264*  			EX      AF,AF'
0B2D30 F2 29 2E 0B 0265*  			JP      P,TYPE_EV_
0B2D34 F1          0266*  			POP     AF
0B2D35 4B          0267*  			LD      C,E             	; Length of string #2
0B2D36 D1          0268*  			POP     DE
0B2D37 21 00 00 00 0269*  			LD      HL,0
0B2D3B 39          0270*  			ADD     HL,SP
0B2D3C 43          0271*  			LD      B,E             	; Length of string #1
0B2D3D D5          0272*  			PUSH    DE
0B2D3E 11 00 28 0B 0273*  			LD      DE,ACCS
0B2D42 EB          0274*  			EX      DE,HL
0B2D43 CD 56 34 0B 0275*  			CALL    DISPT2
0B2D47 D1          0276*  			POP     DE
0B2D48 EB          0277*  			EX      DE,HL
0B2D49 7D          0278*  			LD	A,L
0B2D4A 21 00 00 00 0279*  			LD	HL,0
0B2D4E 6F          0280*  			LD	L,A
0B2D4F 39          0281*  			ADD     HL,SP
0B2D50 F9          0282*  			LD      SP,HL
0B2D51 EB          0283*  			EX      DE,HL
0B2D52 AF          0284*  			XOR     A               	; Numeric marker
0B2D53 4F          0285*  			LD      C,A             	; Integer marker
0B2D54 08          0286*  			EX      AF,AF'
0B2D55 FD 7E 00    0287*  			LD      A,(IY)
0B2D58 C9          0288*  			RET
0B2D59             0289*  ;
0B2D59             0290*  ; Level 4: + and -
0B2D59             0291*  ;
0B2D59 CD B7 2D 0B 0292*  EXPR3:			CALL    EXPR4			; Get first operator by calling Level 3
0B2D5D FE 2D       0293*  EXPR3A:			CP      '-'			; Is it "-"?
0B2D5F 28 09       0294*  			JR      Z,EXPR3B		; Yes, so skip the next bit
0B2D61 FE 2B       0295*  			CP      '+'			; Is it "+"?
0B2D63 C0          0296*  			RET     NZ			; No, so return
0B2D64 08          0297*  			EX      AF,AF'			; Get the type
0B2D65 FA 78 2D 0B 0298*  			JP      M,EXPR3S		; Branch here if string
0B2D69 08          0299*  			EX      AF,AF'
0B2D6A CD 18 34 0B 0300*  EXPR3B:			CALL    SAVE_EV			; Save the first operator
0B2D6E CD B7 2D 0B 0301*  			CALL    EXPR4			; Fetch the second operator
0B2D72 CD 27 34 0B 0302*  			CALL    DOIT			; Do the operation
0B2D76 18 E5       0303*  			JR      EXPR3A			; And continue
0B2D78             0304*  ;
0B2D78 08          0305*  EXPR3S:			EX      AF,AF'			; Handle string concatenation
0B2D79 FD 23       0306*  			INC     IY              	; Bump past the "+"
0B2D7B CD 8F 33 0B 0307*  			CALL    PUSHS           	; Save the string on the stack
0B2D7F CD B7 2D 0B 0308*  			CALL    EXPR4           	; Fetch the second operator
0B2D83 08          0309*  			EX      AF,AF'
0B2D84 F2 29 2E 0B 0310*  			JP      P,TYPE_EV_			; If it is not a string, then Error: "Type mismatch"
0B2D88 01 00 00 00 0311*  			LD	BC, 0			; Clear BC
0B2D8C 4B          0312*  			LD      C,E             	; C: Length of the second string
0B2D8D D1          0313*  			POP     DE
0B2D8E D5          0314*  			PUSH    DE
0B2D8F 21 00 28 0B 0315*  			LD      HL,ACCS
0B2D93 7B          0316*  			LD	A,E			;  E: Length of the first string
0B2D94 11 00 28 0B 0317*  			LD      DE,ACCS
0B2D98 5F          0318*  			LD	E,A 			; DE: Pointer to the end of the first string
0B2D99 79          0319*  			LD      A,C
0B2D9A B7          0320*  			OR      A
0B2D9B 28 0B       0321*  			JR      Z,EXP3S3
0B2D9D 6F          0322*  			LD      L,A             	; Source
0B2D9E 83          0323*  			ADD     A,E
0B2D9F 5F          0324*  			LD      E,A             	; Destination
0B2DA0 3E 13       0325*  			LD      A,19
0B2DA2             0326*  			; JP      C,ERROR_         	; A carry indicates string > 255 bytes, so Error: "String too long"
0B2DA2 D5          0327*  			PUSH    DE
0B2DA3 1D          0328*  			DEC     E
0B2DA4 2D          0329*  			DEC     L
0B2DA5 ED B8       0330*  			LDDR                    	; Copy
0B2DA7 D1          0331*  			POP     DE
0B2DA8 D9          0332*  EXP3S3:			EXX
0B2DA9 C1          0333*  			POP     BC
0B2DAA CD BC 33 0B 0334*  			CALL    POPS            	; Restore from stack
0B2DAE D9          0335*  			EXX
0B2DAF F6 80       0336*  			OR      80H             	; Flag as a string
0B2DB1 08          0337*  			EX      AF,AF'
0B2DB2 FD 7E 00    0338*  			LD      A,(IY)			; Fetch the next character
0B2DB5 18 A6       0339*  			JR      EXPR3A			; And continue
0B2DB7             0340*  ;
0B2DB7             0341*  ; Level 3: * / MOD DIV
0B2DB7             0342*  ;
0B2DB7 CD D8 2D 0B 0343*  EXPR4:			CALL    EXPR5			; Get first operator by calling Level 2
0B2DBB FE 2A       0344*  EXPR4A:			CP      '*'			; "*" is valid
0B2DBD 28 0B       0345*  			JR      Z,EXPR4B
0B2DBF FE 2F       0346*  			CP      '/'			; "/" is valid
0B2DC1 28 07       0347*  			JR      Z,EXPR4B
0B2DC3 FE 83       0348*  			CP      MODK			; MOD token is valid
0B2DC5 28 03       0349*  			JR      Z,EXPR4B
0B2DC7 FE 81       0350*  			CP      DIVK			; DIV token is valid
0B2DC9 C0          0351*  			RET     NZ			; And return if it is anything else
0B2DCA CD 18 34 0B 0352*  EXPR4B:			CALL    SAVE_EV
0B2DCE CD D8 2D 0B 0353*  			CALL    EXPR5
0B2DD2 CD 27 34 0B 0354*  			CALL    DOIT
0B2DD6 18 E3       0355*  			JR      EXPR4A
0B2DD8             0356*  ;
0B2DD8             0357*  ; Level 2: ^
0B2DD8             0358*  ;
0B2DD8 CD AC 2E 0B 0359*  EXPR5:			CALL    ITEM			; Get variable
0B2DDC B7          0360*  			OR      A               	; Test type
0B2DDD 08          0361*  			EX      AF,AF'          	; Save type
0B2DDE CD 4A 34 0B 0362*  EXPR5A:			CALL    NXT			; Skip spaces
0B2DE2 FE 5E       0363*  			CP      '^'			; Is the operator "^"?
0B2DE4 C0          0364*  			RET     NZ			; No, so return
0B2DE5 CD 18 34 0B 0365*  			CALL    SAVE_EV			; Save first operand
0B2DE9 CD AC 2E 0B 0366*  			CALL    ITEM			; Get second operand
0B2DED B7          0367*  			OR      A			; Test type
0B2DEE 08          0368*  			EX      AF,AF'			; Save type
0B2DEF CD 27 34 0B 0369*  			CALL    DOIT			; Do the operation
0B2DF3 18 E9       0370*  			JR      EXPR5A			; And continue
0B2DF5             0371*  ;
0B2DF5             0372*  ; Evaluate a numeric expression
0B2DF5             0373*  ;
0B2DF5 CD BE 2C 0B 0374*  EXPRN:			CALL    EXPR			; Evaluate expression
0B2DF9 08          0375*  			EX      AF,AF'			; Get the type
0B2DFA F0          0376*  			RET     P			; And return if it is a number
0B2DFB 18 2C       0377*  			JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B2DFD             0378*  ;
0B2DFD             0379*  ; Evaluate a fixed-point expression
0B2DFD             0380*  ;
0B2DFD CD BE 2C 0B 0381*  EXPRI:			CALL    EXPR			; Evaluate the expression
0B2E01 08          0382*  			EX      AF,AF'			; Get the type
0B2E02 F2 A0 30 0B 0383*  			JP      P,SFIX			; If it is numeric, then convert to fixed-point notation
0B2E06 18 21       0384*  			JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B2E08             0385*  ;
0B2E08             0386*  ; Evaluate a string expression
0B2E08             0387*  ;
0B2E08 CD BE 2C 0B 0388*  EXPRS:			CALL    EXPR			; Evaluate the expression
0B2E0C 08          0389*  			EX      AF,AF'			; Get the type
0B2E0D F8          0390*  			RET     M			; And return if it is a string
0B2E0E 18 19       0391*  			JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B2E10             0392*  ;
0B2E10             0393*  ; Get a numeric variable
0B2E10             0394*  ;
0B2E10 CD AC 2E 0B 0395*  ITEMN:			CALL    ITEM			; Get the variable
0B2E14 B7          0396*  			OR      A			; Test the type
0B2E15 F0          0397*  			RET     P			; And return if it is a number
0B2E16 18 11       0398*  			JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B2E18             0399*  ;
0B2E18             0400*  ; Get a fixed-point variable
0B2E18             0401*  ;
0B2E18 CD AC 2E 0B 0402*  ITEMI:			CALL    ITEM			; Get the variable
0B2E1C B7          0403*  			OR      A			; Test the type
0B2E1D F2 A0 30 0B 0404*  			JP      P,SFIX			; If it is numeric, then convert to fixed-point notation
0B2E21 18 06       0405*  			JR      TYPE_EV_			; Otherwise Error: "Type mismatch"
0B2E23             0406*  ;
0B2E23             0407*  ; Get a string variable
0B2E23             0408*  ;
0B2E23 CD AC 2E 0B 0409*  ITEMS:			CALL    ITEM			; Get the variable
0B2E27 B7          0410*  			OR      A			; Test the type
0B2E28 F8          0411*  			RET     M			; If it is a string, then return
0B2E29             0412*  ;							; Otherwise
0B2E29 3E 06       0413*  TYPE_EV_:			LD      A,6			; Error: "Type mismatch"
0B2E2B             0414*  			; JP      ERROR_
0B2E2B             0415*  ;
0B2E2B             0416*  ; Evaluate a bracketed expression
0B2E2B             0417*  ;
0B2E2B CD BE 2C 0B 0418*  ITEM1:			CALL    EXPR            	; Evaluate the expression
0B2E2F CD 0D 34 0B 0419*  			CALL    BRAKET			; Check for closing bracket
0B2E33 08          0420*  			EX      AF,AF'
0B2E34 C9          0421*  			RET
0B2E35             0422*  ;
0B2E35             0423*  ; HEX - Get hexadecimal constant.
0B2E35             0424*  ;   Inputs: ASCII string at (IY)
0B2E35             0425*  ;  Outputs: Integer result in H'L'HL, C=0, A7=0.
0B2E35             0426*  ;           IY updated (points to delimiter)
0B2E35             0427*  ;
0B2E35 CD 6E 33 0B 0428*  HEX_EV:			CALL    ZERO			; Set result to 0
0B2E39 CD D6 33 0B 0429*  			CALL    HEXDIG			; Fetch the character from IY
0B2E3D 38 1B       0430*  			JR      C,BADHEX		; If invalid HEX character, then Error: "Bad HEX"
0B2E3F FD 23       0431*  HEX1:			INC     IY			; Move pointer to next character
0B2E41 E6 0F       0432*  			AND     0FH			; Clear the top nibble
0B2E43 06 04       0433*  			LD      B,4			; Loop counter
0B2E45             0434*  ;
0B2E45 D9          0435*  HEX2:			EXX				; Shift the result left B (4) times. This makes
0B2E46 52 29       0436*  			ADD.S   HL,HL			; space for the incoming nibble in the least significant 4 bits
0B2E48 D9          0437*  			EXX				; .
0B2E49 52 ED 6A    0438*  			ADC.S   HL,HL			; .
0B2E4C 10 F7       0439*  			DJNZ    HEX2			; And loop
0B2E4E D9          0440*  			EXX
0B2E4F B5          0441*  			OR      L			; OR in the digit
0B2E50 6F          0442*  			LD      L,A
0B2E51 D9          0443*  			EXX
0B2E52             0444*  ;
0B2E52 CD D6 33 0B 0445*  			CALL    HEXDIG			; Fetch the next character
0B2E56 30 E7       0446*  			JR      NC,HEX1			; If it is a HEX digit then loop
0B2E58 AF          0447*  			XOR     A			; Clear A
0B2E59 C9          0448*  			RET
0B2E5A             0449*  ;
0B2E5A 3E 1C       0450*  BADHEX:			LD      A,28
0B2E5C             0451*  			; JP      ERROR_          	; Error: "Bad HEX"
0B2E5C             0452*  ;
0B2E5C             0453*  ; BIN - Get binary constant.
0B2E5C             0454*  ;   Inputs: ASCII string at (IY)
0B2E5C             0455*  ;  Outputs: Integer result in H'L'HL, C=0, A7=0.
0B2E5C             0456*  ;           IY updated (points to delimiter)
0B2E5C             0457*  ;
0B2E5C CD 6E 33 0B 0458*  BIN:			CALL    ZERO			; Set result to 0
0B2E60 CD E9 33 0B 0459*  			CALL	BINDIG			; Fetch the character from IY
0B2E64 38 13       0460*  			JR	C,BADBIN		; If invalid BIN character then Error: "Bad Binary"
0B2E66 FD 23       0461*  BIN1:			INC	IY			; Move pointer to next character
0B2E68 0F          0462*  			RRCA				; Bit 0 of ASCII '0' is 0, and ASCII '1' is 1, so shift that bit into carry
0B2E69 D9          0463*  			EXX				;
0B2E6A 52 ED 6A    0464*  			ADC.S	HL,HL			; And shift back into into H'L'HL (note the ADC)
0B2E6D D9          0465*  			EXX
0B2E6E 52 ED 6A    0466*  			ADC.S	HL,HL
0B2E71 CD E9 33 0B 0467*  			CALL	BINDIG			; Fetch the next character
0B2E75 30 EF       0468*  			JR	NC,BIN1
0B2E77 AF          0469*  			XOR	A			; Clear A
0B2E78 C9          0470*  			RET
0B2E79             0471*  ;
0B2E79 3E 1C       0472*  BADBIN:			LD	A, 28			; Error: "Bad Binary" - reuses same error code as Bad HEX
0B2E7B             0473*  			; CALL	EXTERR
0B2E7B 42 61 64 20 0474*  			DB	"Bad Binary", 0
       42 69 6E 61 
       72 79 00    
0B2E86             0475*  ;
0B2E86             0476*  ; MINUS - Unary minus.
0B2E86             0477*  ;   Inputs: IY = text pointer
0B2E86             0478*  ;  Outputs: Numeric result, same type as argument.
0B2E86             0479*  ;           Result in H'L'HLC
0B2E86             0480*  ;
0B2E86 CD 10 2E 0B 0481*  MINUS:			CALL    ITEMN			; Get the numeric argument
0B2E8A 0D          0482*  MINUS0:			DEC     C			; Check exponent (C)
0B2E8B 0C          0483*  			INC     C			; If it is zero, then it's either a FP zero or an integer
0B2E8C 28 06       0484*  			JR      Z,NEGATE_EV        	; So do an integer negation
0B2E8E             0485*  ;
0B2E8E 7C          0486*  			LD      A,H			; Do a FP negation by
0B2E8F EE 80       0487*  			XOR     80H             	; Toggling the sign bit (H)
0B2E91 67          0488*  			LD      H,A
0B2E92 AF          0489*  			XOR     A               	; Numeric marker
0B2E93 C9          0490*  			RET
0B2E94             0491*  ;
0B2E94 D9          0492*  NEGATE_EV:			EXX				; This section does a two's complement negation on H'L'HLC
0B2E95 7C          0493*  			LD      A,H			; First do a one's complement by negating all the bytes
0B2E96 2F          0494*  			CPL
0B2E97 67          0495*  			LD      H,A
0B2E98 7D          0496*  			LD      A,L
0B2E99 2F          0497*  			CPL
0B2E9A 6F          0498*  			LD      L,A
0B2E9B D9          0499*  			EXX
0B2E9C 7C          0500*  			LD      A,H
0B2E9D 2F          0501*  			CPL
0B2E9E 67          0502*  			LD      H,A
0B2E9F 7D          0503*  			LD      A,L
0B2EA0 2F          0504*  			CPL
0B2EA1 6F          0505*  			LD      L,A
0B2EA2 D9          0506*  ADD1_EV:			EXX				; Then add 1
0B2EA3 23          0507*  			INC     HL
0B2EA4 7C          0508*  			LD      A,H
0B2EA5 B5          0509*  			OR      L
0B2EA6 D9          0510*  			EXX
0B2EA7 3E 00       0511*  			LD      A,0             	; Numeric marker
0B2EA9 C0          0512*  			RET     NZ
0B2EAA 23          0513*  			INC     HL
0B2EAB C9          0514*  			RET
0B2EAC             0515*  ;
0B2EAC             0516*  ; ITEM - VARIABLE TYPE NUMERIC OR STRING ITEM.
0B2EAC             0517*  ; Item type is returned in A:  Bit 7=0 numeric.
0B2EAC             0518*  ;                              Bit 7=1 string.
0B2EAC             0519*  ; Numeric item returned in HLH'L'C.
0B2EAC             0520*  ; String item returned in string accumulator,
0B2EAC             0521*  ;   DE addresses byte after last (E=length).
0B2EAC             0522*  ;
0B2EAC CD 57 42 0B 0523*  ITEM:			CALL    CHECK			; Check there's at least a page of free memory left and Error: "No room" if not
0B2EB0 CD 4A 34 0B 0524*  			CALL    NXT			; Skip spaces
0B2EB4 FD 23       0525*  			INC     IY			; Move to the prefix character
0B2EB6 FE 26       0526*  			CP      '&'			; If `&`
0B2EB8 CA 35 2E 0B 0527*  			JP      Z,HEX_EV           	; Then get a HEX constant
0B2EBC FE 25       0528*  			CP	'%'			; If '%'
0B2EBE 28 9C       0529*  			JR	Z,BIN			; Then get a BINARY constant
0B2EC0 FE 2D       0530*  			CP      '-'			; If `-`
0B2EC2 28 C2       0531*  			JR      Z,MINUS         	; Then get a negative number
0B2EC4 FE 2B       0532*  			CP      '+'			; If `+`
0B2EC6 CA 10 2E 0B 0533*  			JP      Z,ITEMN         	; Then just fetch the number (unary plus)
0B2ECA FE 28       0534*  			CP      '('			; If `(`
0B2ECC CA 2B 2E 0B 0535*  			JP      Z,ITEM1         	; Start of a bracketed expression
0B2ED0 FE 22       0536*  			CP      34			; If `"`
0B2ED2 28 72       0537*  			JR      Z,CONS          	; Start of a string constant
0B2ED4 FE C6       0538*  			CP      TCMD_EV			; Is it out of range of the function table?
0B2ED6             0539*  			; JP      NC,SYNTAX       	; Error: "Syntax Error"
0B2ED6 FE 8D       0540*  			CP      FUNTOK			; If it is in range, then
0B2ED8 D2 5D 34 0B 0541*  			JP      NC,DISPAT_EV       	; It's a function
0B2EDC FD 2B       0542*  			DEC     IY
0B2EDE FE 3A       0543*  			CP      ':'
0B2EE0 30 0C       0544*  			JR      NC,ITEM2		; VARIABLE?
0B2EE2 FE 30       0545*  			CP      '0'
0B2EE4 D2 69 2F 0B 0546*  			JP      NC,CON_EV			; NUMERIC CONSTANT
0B2EE8 FE 2E       0547*  			CP      '.'
0B2EEA CA 69 2F 0B 0548*  			JP      Z,CON_EV			; NUMERIC CONSTANT
0B2EEE CD 86 42 0B 0549*  ITEM2:			CALL    GETVAR			; VARIABLE
0B2EF2 20 37       0550*  			JR      NZ,NOSUCH
0B2EF4 B7          0551*  			OR      A
0B2EF5 FA 7B 2F 0B 0552*  			JP      M,LOADS			; STRING VARIABLE
0B2EF9 B7          0553*  LOADN:			OR      A
0B2EFA 28 20       0554*  			JR      Z,LOAD1			; BYTE VARIABLE
0B2EFC 0E 00       0555*  			LD      C,0
0B2EFE CB 47       0556*  			BIT     0,A
0B2F00 28 03       0557*  			JR      Z,LOAD4			; INTEGER VARIABLE
0B2F02 DD 4E 04    0558*  LOAD5:			LD      C,(IX+4)
0B2F05 D9          0559*  LOAD4:			EXX
0B2F06 21 00 00 00 0560*  			LD	HL, 0			; TODO: Optimise
0B2F0A DD 6E 00    0561*  			LD      L,(IX+0)
0B2F0D DD 66 01    0562*  			LD      H,(IX+1)
0B2F10 D9          0563*  			EXX
0B2F11 21 00 00 00 0564*  			LD	HL, 0			; TODO: Optimise
0B2F15 DD 6E 02    0565*  			LD      L,(IX+2)
0B2F18 DD 66 03    0566*  			LD      H,(IX+3)
0B2F1B C9          0567*  			RET
0B2F1C             0568*  ;
0B2F1C 21 00 00 00 0569*  LOAD1:			LD      HL,0
0B2F20 D9          0570*  			EXX
0B2F21 21 00 00 00 0571*  			LD      HL,0			; TODO: Optimise
0B2F25 DD 6E 00    0572*  			LD      L,(IX+0)
0B2F28 D9          0573*  			EXX
0B2F29 4C          0574*  			LD      C,H
0B2F2A C9          0575*  			RET
0B2F2B             0576*  ;
0B2F2B             0577*  NOSUCH:
0B2F2B             0578*  			; JP      C,SYNTAX
0B2F2B 3A 40 2B 0B 0579*  			LD      A,(LISTON)
0B2F2F CB 6F       0580*  			BIT     5,A
0B2F31 3E 1A       0581*  			LD      A,26
0B2F33 20 26       0582*  			JR      NZ,ERROR0_EV		; Throw "No such variable"
0B2F35 FD 23       0583*  NOS1:			INC     IY
0B2F37 CD 49 44 0B 0584*  			CALL    RANGE
0B2F3B 30 F8       0585*  			JR      NC,NOS1
0B2F3D DD 21 40 A8 0586*  			LD      IX,PC
       2C          
0B2F42 AF          0587*  			XOR     A
0B2F43 4F          0588*  			LD      C,A
0B2F44 18 BF       0589*  			JR      LOAD4
0B2F46             0590*  ;
0B2F46             0591*  ;CONS - Get string constant from ASCII string.
0B2F46             0592*  ;   Inputs: ASCII string at (IY)
0B2F46             0593*  ;  Outputs: Result in string accumulator.
0B2F46             0594*  ;           D = MS byte of ACCS, E = string length
0B2F46             0595*  ;           A7 = 1 (string marker)
0B2F46             0596*  ;           IY updated
0B2F46             0597*  ;
0B2F46 11 00 28 0B 0598*  CONS:			LD      DE,ACCS			; DE: Pointer to the string accumulator
0B2F4A FD 7E 00    0599*  CONS3:			LD      A,(IY)			; Fetch the first character and
0B2F4D FD 23       0600*  			INC     IY			; Increment the pointer
0B2F4F FE 22       0601*  			CP      '"'			; Check for start quote
0B2F51 28 08       0602*  			JR      Z,CONS2			; Yes, so jump to the bit that parses the string
0B2F53             0603*  ;
0B2F53 12          0604*  CONS1:			LD      (DE),A			; Store the character in the string accumulator
0B2F54 1C          0605*  			INC     E			; Increment the string accumulator pointer
0B2F55 FE 0D       0606*  			CP      CR			; Is it CR
0B2F57 20 F1       0607*  			JR      NZ,CONS3		; No, so keep looping
0B2F59             0608*  ;
0B2F59 3E 09       0609*  			LD      A,9
0B2F5B             0610*  ERROR0_EV:
0B2F5B             0611*  			; JP      ERROR_           	; Throw error "Missing '"'
0B2F5B             0612*  ;
0B2F5B FD 7E 00    0613*  CONS2:			LD      A,(IY)			; Fetch the next character
0B2F5E FE 22       0614*  			CP      '"'			; Check for end quote?
0B2F60 FD 23       0615*  			INC     IY			; Increment the pointer
0B2F62 28 EF       0616*  			JR      Z,CONS1			; It is the end of string marker so jump to the end routine
0B2F64 FD 2B       0617*  			DEC     IY			;
0B2F66 3E 80       0618*  			LD      A,80H           	; String marker
0B2F68 C9          0619*  			RET
0B2F69             0620*  ;
0B2F69             0621*  ;CON_EV - Get unsigned numeric constant from ASCII string.
0B2F69             0622*  ;   Inputs: ASCII string at (IY).
0B2F69             0623*  ;  Outputs: Variable-type result in HLH'L'C
0B2F69             0624*  ;           IY updated (points to delimiter)
0B2F69             0625*  ;           A7 = 0 (numeric marker)
0B2F69             0626*  ;
0B2F69 FD E5       0627*  CON_EV:			PUSH    IY
0B2F6B DD E1       0628*  			POP     IX
0B2F6D 3E 24       0629*  			LD      A,36
0B2F6F CD 72 34 0B 0630*  			CALL    FPP
0B2F73 38 E6       0631*  			JR      C,ERROR0_EV
0B2F75 DD E5       0632*  			PUSH    IX
0B2F77 FD E1       0633*  			POP     IY
0B2F79 AF          0634*  			XOR     A
0B2F7A C9          0635*  			RET
0B2F7B             0636*  ;
0B2F7B 11 00 28 0B 0637*  LOADS:			LD      DE,ACCS			; Where to store the string
0B2F7F 1F          0638*  			RRA
0B2F80 30 1A       0639*  			JR      NC,LOADS2       	; Skip if it is a fixed string
0B2F82             0640*  ;
0B2F82 D9          0641*  			EXX				; This block was a call to LOAD4
0B2F83 DD 6E 00    0642*  			LD      L,(IX+0)		; The length of the string currently stored in the allocated space
0B2F86 DD 66 01    0643*  			LD      H,(IX+1)		; The maximum original string length
0B2F89 D9          0644*  			EXX
0B2F8A DD 27 02    0645*  			LD	HL,(IX+2)		; Address of the string (24-bit)
0B2F8D             0646*  ;
0B2F8D D9          0647*  			EXX
0B2F8E 7D          0648*  			LD      A,L
0B2F8F D9          0649*  			EXX
0B2F90 B7          0650*  			OR      A
0B2F91 01 00 00 00 0651*  			LD	BC,0			; BC: Number of bytes to copy
0B2F95 4F          0652*  			LD      C,A
0B2F96 3E 80       0653*  			LD      A,80H           	; String marker
0B2F98 C8          0654*  			RET     Z
0B2F99 ED B0       0655*  			LDIR
0B2F9B C9          0656*  			RET
0B2F9C 7E          0657*  LOADS2:			LD      A,(HL)
0B2F9D 12          0658*  			LD      (DE),A
0B2F9E 23          0659*  			INC     HL
0B2F9F FE 0D       0660*  			CP      CR
0B2FA1 3E 80       0661*  			LD      A,80H           	; String marker
0B2FA3 C8          0662*  			RET     Z
0B2FA4 1C          0663*  			INC     E
0B2FA5 20 F5       0664*  			JR      NZ,LOADS2
0B2FA7 C9          0665*  			RET                     	; Return null string
0B2FA8             0666*  ;
0B2FA8             0667*  ;VARIABLE-TYPE FUNCTIONS:
0B2FA8             0668*  ;
0B2FA8             0669*  ;Result returned in HLH'L'C (floating point)
0B2FA8             0670*  ;Result returned in HLH'L' (C=0) (integer)
0B2FA8             0671*  ;Result returned in string accumulator & DE (string)
0B2FA8             0672*  ;All registers destroyed.
0B2FA8             0673*  ;IY (text pointer) updated.
0B2FA8             0674*  ;Bit 7 of A indicates type: 0 = numeric, 1 = string.
0B2FA8             0675*  ;
0B2FA8             0676*  ;POS - horizontal cursor position.
0B2FA8             0677*  ;VPOS - vertical cursor position.
0B2FA8             0678*  ;EOF - return status of file.
0B2FA8             0679*  ;BGET - read byte from file.
0B2FA8             0680*  ;INKEY - as GET but wait only n centiseconds.
0B2FA8             0681*  ;GET - wait for keypress and return ASCII value.
0B2FA8             0682*  ;GET(n) - input from Z80 port n.
0B2FA8             0683*  ;ASC - ASCII value of string.
0B2FA8             0684*  ;LEN - length of string.
0B2FA8             0685*  ;LOMEM - location of dynamic variables.
0B2FA8             0686*  ;HIMEM - top of available RAM.
0B2FA8             0687*  ;PAGE - start of current text page.
0B2FA8             0688*  ;TOP - address of first free byte after program.
0B2FA8             0689*  ;ERL - line number where last error occurred.
0B2FA8             0690*  ;ERR - number of last error.
0B2FA8             0691*  ;COUNT - number of printing characters since CR.
0B2FA8             0692*  ;Results are integer numeric.
0B2FA8             0693*  ;
0B2FA8             0694*  ; we won't be using the following:
0B2FA8 C9          0695*  POS:		ret
0B2FA9             0696*  			; CALL    GETCSR			; Return the horizontal cursor position
0B2FA9             0697*  			; EX      DE,HL			;  L: The X cursor position
0B2FA9             0698*  			; JP      COUNT1			; Return an 8-bit value
0B2FA9             0699*  ;
0B2FA9 C9          0700*  VPOS:		ret
0B2FAA             0701*  			; CALL    GETCSR			; Return the vertical cursor position
0B2FAA             0702*  			; JP      COUNT1			; Return an 8-bit value
0B2FAA             0703*  
0B2FAA C9          0704*  EOF:		ret
0B2FAB             0705*  			; CALL    CHANEL			; Check for EOF
0B2FAB             0706*  			; CALL    OSSTAT
0B2FAB             0707*  			; JP      Z,FOR_EV			; Yes, so return true
0B2FAB             0708*  			; JP      ZERO			; Otherwise return false (zero)
0B2FAB             0709*  ;
0B2FAB C9          0710*  BGET:		ret
0B2FAC             0711*  			; CALL    CHANEL          	; Channel number
0B2FAC             0712*  			; CALL    OSBGET
0B2FAC             0713*  			; LD      L,A
0B2FAC             0714*  			; JP      COUNT0			; Return an 8-bit value
0B2FAC             0715*  ;
0B2FAC C9          0716*  INKEY:		ret
0B2FAD             0717*  			; CALL    ITEMI			; Get the argument
0B2FAD             0718*  			; BIT	7, H			; Check the sign
0B2FAD             0719*  			; EXX				; HL: The argument
0B2FAD             0720*  			; JP	NZ, INKEYM		; It's negative, so do INKEY(-n)
0B2FAD             0721*  			; CALL	INKEY0 			; Do INKEY(n)
0B2FAD             0722*  			; JR      ASC0			; Return a numeric value
0B2FAD             0723*  ;
0B2FAD C9          0724*  GET:		ret
0B2FAE             0725*  			; CALL    NXT			; Skip whitespace
0B2FAE             0726*  			; CP      '('			; Is it GET(
0B2FAE             0727*  			; JR      NZ,GET0			; No, so get a keyboard character
0B2FAE             0728*  			; CALL    ITEMI           	; Yes, so fetch the port address
0B2FAE             0729*  			; EXX
0B2FAE             0730*  			; LD      B,H			; BC: The port address
0B2FAE             0731*  			; LD      C,L
0B2FAE             0732*  			; IN      L,(C)           	;  L: Input from port BC
0B2FAE             0733*  			; JR      COUNT0			; Return an 8-bit value
0B2FAE             0734*  ;
0B2FAE C9          0735*  GET0:		ret
0B2FAF             0736*  			; CALL    GETS			; Read the keyboard character
0B2FAF             0737*  			; JR      ASC1			; And return the value
0B2FAF             0738*  
0B2FAF             0739*  ; end of the functions we won't be using
0B2FAF             0740*  
0B2FAF             0741*  
0B2FAF             0742*  ;
0B2FAF CD 23 2E 0B 0743*  ASC:			CALL    ITEMS			; Get the string argument argument
0B2FB3 AF          0744*  ASC0:			XOR     A			; Quickly check the length of the string in ACCS
0B2FB4 BB          0745*  			CP      E			; Is the pointer 0
0B2FB5 CA 47 30 0B 0746*  			JP      Z,FOR_EV          	; Yes, so return -1 as it is a null string
0B2FB9 2A 00 28 0B 0747*  ASC1:			LD      HL,(ACCS)		;  L: The first character (H will be discarded in COUNT0
0B2FBD 18 46       0748*  			JR      COUNT0			; An 8-bit value
0B2FBF             0749*  ;
0B2FBF CD 23 2E 0B 0750*  LEN:			CALL    ITEMS			; Get the string argument
0B2FC3 EB          0751*  			EX      DE,HL			; HL: Pointer into ACCS
0B2FC4 18 3F       0752*  			JR      COUNT0			; Return L
0B2FC6             0753*  ;
0B2FC6 2A 1A 2B 0B 0754*  LOMEMV_EV:			LD      HL,(LOMEM)		; Return the LOMEM system variable
0B2FCA 3A 1C 2B 0B 0755*  			LD	A, (LOMEM+2)
0B2FCE 18 3D       0756*  			JR      COUNT2			; A 24-bit value
0B2FD0             0757*  ;
0B2FD0 2A 20 2B 0B 0758*  HIMEMV_EV:			LD      HL,(HIMEM)		; Return the HIMEM system variable
0B2FD4 3A 22 2B 0B 0759*  			LD	A, (HIMEM+2)
0B2FD8 18 33       0760*  			JR      COUNT2			; A 24-bit value
0B2FDA             0761*  ;
0B2FDA 2A 14 2B 0B 0762*  PAGEV_EV:			LD    	HL,(PAGE_)		; Return the PAGE system variable
0B2FDE 3A 16 2B 0B 0763*  			LD	A, (PAGE_+2)		; A 24-bit value
0B2FE2 18 29       0764*  			JR      COUNT2
0B2FE4             0765*  ;
0B2FE4 FD 7E 00    0766*  TOPV:			LD      A,(IY)			; Return the TOP system variable
0B2FE7 FD 23       0767*  			INC     IY              	; Skip "P"
0B2FE9 FE 50       0768*  			CP      'P'
0B2FEB             0769*  			; JP      NZ,SYNTAX       	; Throw "Syntax Error"
0B2FEB 2A 17 2B 0B 0770*  			LD      HL,(TOP)
0B2FEF 3A 19 2B 0B 0771*  			LD	A, (TOP+2)
0B2FF3 18 18       0772*  			JR      COUNT2
0B2FF5             0773*  ;
0B2FF5 2A 33 2B 0B 0774*  ERLV:			LD      HL,(ERL)		; Return the error line
0B2FF9 18 0C       0775*  			JR      COUNT1			; A 16-bit value
0B2FFB             0776*  ;
0B2FFB 2A 3F 2B 0B 0777*  ERRV:			LD      HL,(ERR)		; Return the error value
0B2FFF 18 04       0778*  			JR      COUNT0			; An 8-bit value
0B3001             0779*  ;
0B3001 2A 3D 2B 0B 0780*  COUNTV:			LD      HL,(COUNT)		; Return the print position sysvar
0B3005             0781*  
0B3005 26 00       0782*  COUNT0:			LD      H,0			; Return L
0B3007 D9          0783*  COUNT1:			EXX				; Return HL
0B3008 AF          0784*  			XOR     A
0B3009 4F          0785*  			LD      C,A             	; Integer marker
0B300A 67          0786*  			LD      H,A
0B300B 6F          0787*  			LD      L,A
0B300C C9          0788*  			RET
0B300D D9          0789*  COUNT2:			EXX
0B300E 6F          0790*  			LD	L,A
0B300F AF          0791*  			XOR	A
0B3010 4F          0792*  			LD	C,A			; Integer marker
0B3011 67          0793*  			LD	H,A
0B3012 C9          0794*  			RET
0B3013             0795*  
0B3013             0796*  ; ; we won't be using the following:
0B3013             0797*  ;OPENIN - Open a file for reading.
0B3013             0798*  ;OPENOT - Open a file for writing.
0B3013             0799*  ;OPENUP - Open a file for reading or writing.
0B3013             0800*  ;Result is integer channel number (0 if error)
0B3013             0801*  ;
0B3013 C9          0802*  OPENOT:		ret
0B3014             0803*  			; XOR     A			; Open for writing
0B3014             0804*  			; JR	OPENIN_1
0B3014             0805*  ;
0B3014 C9          0806*  OPENUP:		ret
0B3015             0807*  			; LD      A,2			; Open for reading / writing
0B3015             0808*  			; JR	OPENIN_1
0B3015             0809*  ;
0B3015 C9          0810*  OPENIN:		ret
0B3016             0811*  			; LD      A,1			; Open for reading
0B3016             0812*  ;
0B3016 C9          0813*  OPENIN_1:	ret
0B3017             0814*  			; PUSH    AF              	; Save OPEN type
0B3017             0815*  			; CALL    ITEMS           	; Fetch the filename
0B3017             0816*  			; LD      A,CR
0B3017             0817*  			; LD      (DE),A
0B3017             0818*  			; POP     AF              	; Restore the OPEN type
0B3017             0819*  			; ADD     A,-1            	; Affect the flags
0B3017             0820*  			; LD      HL,ACCS
0B3017             0821*  			; CALL    OSOPEN			; Call the OS specific OPEN routine in patch.asm
0B3017             0822*  			; LD      L,A			; L: Channel number
0B3017             0823*  			; JR      COUNT0			; Return channel number to BASIC
0B3017             0824*  
0B3017             0825*  ;EXT - Return length of file.
0B3017             0826*  ;PTR - Return current file pointer.
0B3017             0827*  ;Results are integer numeric.
0B3017             0828*  ;
0B3017 C9          0829*  EXT_EV:		ret
0B3018             0830*  			; CALL    CHANEL
0B3018             0831*  			; CALL    GETEXT
0B3018             0832*  			; JR      TIME0
0B3018             0833*  ;
0B3018 C9          0834*  PTR_EV:		ret
0B3019             0835*  			; CALL    CHANEL
0B3019             0836*  			; CALL    GETPTR
0B3019             0837*  			; JR      TIME0
0B3019             0838*  
0B3019             0839*  ;TIME - Return current value of elapsed time.
0B3019             0840*  ;Result is integer numeric.
0B3019             0841*  ;
0B3019 C9          0842*  TIMEV_EV:	ret
0B301A             0843*  			; LD      A,(IY)
0B301A             0844*  			; CP      '$'
0B301A             0845*  			; JR      Z,TIMEVS_EV
0B301A             0846*  			; CALL    GETIME
0B301A C9          0847*  TIME0:		ret
0B301B             0848*  			; PUSH    DE
0B301B             0849*  			; EXX
0B301B             0850*  			; POP     HL
0B301B             0851*  			; XOR     A
0B301B             0852*  			; LD      C,A
0B301B             0853*  			; RET
0B301B             0854*  
0B301B             0855*  ;TIME$ - Return date/time string.
0B301B             0856*  ;Result is string
0B301B             0857*  ;
0B301B C9          0858*  TIMEVS_EV:	ret
0B301C             0859*  			; INC     IY              ;SKIP $
0B301C             0860*  			; CALL    GETIMS
0B301C             0861*  			; LD      A,80H           ;MARK STRING
0B301C             0862*  			; RET
0B301C             0863*  ; end of the functions we won't be using
0B301C             0864*  
0B301C             0865*  ;String comparison:
0B301C             0866*  ;
0B301C CD 6A 33 0B 0867*  SLT:			CALL    SCP
0B3020 D0          0868*  			RET     NC
0B3021 18 24       0869*  			JR      FOR_EV
0B3023             0870*  ;
0B3023 CD 6A 33 0B 0871*  SGT:			CALL    SCP
0B3027 C8          0872*  			RET     Z
0B3028 D8          0873*  			RET     C
0B3029 18 1C       0874*  			JR      FOR_EV
0B302B             0875*  ;
0B302B CD 6A 33 0B 0876*  SGE:			CALL    SCP
0B302F D8          0877*  			RET     C
0B3030 18 15       0878*  			JR      FOR_EV
0B3032             0879*  ;
0B3032 CD 6A 33 0B 0880*  SLE:			CALL    SCP
0B3036 28 0F       0881*  			JR      Z,FOR_EV
0B3038 D0          0882*  			RET     NC
0B3039 18 0C       0883*  			JR      FOR_EV
0B303B             0884*  ;
0B303B CD 6A 33 0B 0885*  SNE:			CALL    SCP
0B303F C8          0886*  			RET     Z
0B3040 18 05       0887*  			JR      FOR_EV
0B3042             0888*  ;
0B3042 CD 6A 33 0B 0889*  SEQ:			CALL    SCP
0B3046 C0          0890*  			RET     NZ
0B3047 3E FF       0891*  FOR_EV:			LD      A,-1
0B3049 D9          0892*  			EXX
0B304A 67          0893*  			LD      H,A
0B304B 6F          0894*  			LD      L,A
0B304C D9          0895*  			EXX
0B304D 67          0896*  			LD      H,A
0B304E 6F          0897*  			LD      L,A
0B304F 3C          0898*  			INC     A
0B3050 4F          0899*  			LD      C,A
0B3051 C9          0900*  			RET
0B3052             0901*  ;
0B3052             0902*  ;PI - Return PI (3.141592654)
0B3052             0903*  ;Result is floating-point numeric.
0B3052             0904*  ;
0B3052 3E 23       0905*  PI_EV:			LD      A,35
0B3054 18 44       0906*  			JR      FPP1
0B3056             0907*  ;
0B3056             0908*  ;ABS - Absolute value
0B3056             0909*  ;Result is numeric, variable type.
0B3056             0910*  ;
0B3056 3E 10       0911*  ABSV_EV:			LD      A,16
0B3058 18 3A       0912*  			JR      FPPN
0B305A             0913*  ;
0B305A             0914*  ;NOT - Complement integer.
0B305A             0915*  ;Result is integer numeric.
0B305A             0916*  ;
0B305A 3E 1A       0917*  NOTK_EV:			LD      A,26
0B305C 18 36       0918*  			JR      FPPN
0B305E             0919*  ;
0B305E             0920*  ;DEG - Convert radians to degrees
0B305E             0921*  ;Result is floating-point numeric.
0B305E             0922*  ;
0B305E 3E 15       0923*  DEG_EV:			LD      A,21
0B3060 18 32       0924*  			JR      FPPN
0B3062             0925*  ;
0B3062             0926*  ;RAD - Convert degrees to radians
0B3062             0927*  ;Result is floating-point numeric.
0B3062             0928*  ;
0B3062 3E 1B       0929*  RAD_EV:			LD      A,27
0B3064 18 2E       0930*  			JR      FPPN
0B3066             0931*  ;
0B3066             0932*  ;SGN - Return -1, 0 or +1
0B3066             0933*  ;Result is integer numeric.
0B3066             0934*  ;
0B3066 3E 1C       0935*  SGN_EV:			LD      A,28
0B3068 18 2A       0936*  			JR      FPPN
0B306A             0937*  ;
0B306A             0938*  ;INT - Floor function
0B306A             0939*  ;Result is integer numeric.
0B306A             0940*  ;
0B306A 3E 17       0941*  INT_EV_:			LD      A,23
0B306C 18 26       0942*  			JR      FPPN
0B306E             0943*  ;
0B306E             0944*  ;SQR - square root
0B306E             0945*  ;Result is floating-point numeric.
0B306E             0946*  ;
0B306E 3E 1E       0947*  SQR_EV:			LD      A,30
0B3070 18 22       0948*  			JR      FPPN
0B3072             0949*  ;
0B3072             0950*  ;TAN - Tangent function
0B3072             0951*  ;Result is floating-point numeric.
0B3072             0952*  ;
0B3072 3E 1F       0953*  TAN_EV:			LD      A,31
0B3074 18 1E       0954*  			JR      FPPN
0B3076             0955*  ;
0B3076             0956*  ;COS - Cosine function
0B3076             0957*  ;Result is floating-point numeric.
0B3076             0958*  ;
0B3076 3E 14       0959*  COS_EV:			LD      A,20
0B3078 18 1A       0960*  			JR      FPPN
0B307A             0961*  ;
0B307A             0962*  ;SIN - Sine function
0B307A             0963*  ;Result is floating-point numeric.
0B307A             0964*  ;
0B307A 3E 1D       0965*  SIN_EV:			LD      A,29
0B307C 18 16       0966*  			JR      FPPN
0B307E             0967*  ;
0B307E             0968*  ;EXP - Exponential function
0B307E             0969*  ;Result is floating-point numeric.
0B307E             0970*  ;
0B307E 3E 16       0971*  EXP_EV:			LD      A,22
0B3080 18 12       0972*  			JR      FPPN
0B3082             0973*  ;
0B3082             0974*  ;LN - Natural log.
0B3082             0975*  ;Result is floating-point numeric.
0B3082             0976*  ;
0B3082 3E 18       0977*  LN_EV:			LD      A,24
0B3084 18 0E       0978*  			JR      FPPN
0B3086             0979*  ;
0B3086             0980*  ;LOG - base-10 logarithm.
0B3086             0981*  ;Result is floating-point numeric.
0B3086             0982*  ;
0B3086 3E 19       0983*  LOG_EV:			LD      A,25
0B3088 18 0A       0984*  			JR      FPPN
0B308A             0985*  ;
0B308A             0986*  ;ASN - Arc-sine
0B308A             0987*  ;Result is floating-point numeric.
0B308A             0988*  ;
0B308A 3E 12       0989*  ASN_EV:			LD      A,18
0B308C 18 06       0990*  			JR      FPPN
0B308E             0991*  ;
0B308E             0992*  ;ATN - arc-tangent
0B308E             0993*  ;Result is floating-point numeric.
0B308E             0994*  ;
0B308E 3E 13       0995*  ATN_EV:			LD      A,19
0B3090 18 02       0996*  			JR      FPPN
0B3092             0997*  ;
0B3092             0998*  ;ACS - arc-cosine
0B3092             0999*  ;Result is floating point numeric.
0B3092             1000*  ;
0B3092 3E 11       1001*  ACS_EV:			LD      A,17
0B3094 F5          1002*  FPPN:			PUSH    AF
0B3095 CD 10 2E 0B 1003*  			CALL    ITEMN
0B3099 F1          1004*  			POP     AF
0B309A CD 72 34 0B 1005*  FPP1:			CALL    FPP
0B309E             1006*  			; JP      C,ERROR_
0B309E AF          1007*  			XOR     A
0B309F C9          1008*  			RET
0B30A0             1009*  ;
0B30A0             1010*  ;SFIX - Convert to fixed-point notation
0B30A0             1011*  ;
0B30A0 3E 26       1012*  SFIX:			LD      A,38
0B30A2 18 F6       1013*  			JR      FPP1
0B30A4             1014*  ;
0B30A4             1015*  ;SFLOAT - Convert to floating-point notation
0B30A4             1016*  ;
0B30A4 3E 27       1017*  SFLOAT_EV:			LD      A,39
0B30A6 18 F2       1018*  			JR      FPP1
0B30A8             1019*  ;
0B30A8             1020*  ;VAL - Return numeric value of string.
0B30A8             1021*  ;Result is variable type numeric.
0B30A8             1022*  ;
0B30A8 CD 23 2E 0B 1023*  VAL_EV:			CALL    ITEMS
0B30AC AF          1024*  VAL0:			XOR     A
0B30AD 12          1025*  			LD      (DE),A
0B30AE DD 21 00 28 1026*  			LD      IX,ACCS
       0B          
0B30B3 3E 24       1027*  			LD      A,36
0B30B5 18 E3       1028*  			JR      FPP1
0B30B7             1029*  ;
0B30B7             1030*  ;EVAL - Pass string to expression evaluator.
0B30B7             1031*  ;Result is variable type (numeric or string).
0B30B7             1032*  ;
0B30B7 CD 23 2E 0B 1033*  EVAL_:			CALL    ITEMS
0B30BB 3E 0D       1034*  			LD      A,CR
0B30BD 12          1035*  			LD      (DE),A
0B30BE FD E5       1036*  			PUSH    IY
0B30C0 11 00 28 0B 1037*  			LD      DE,ACCS
0B30C4 FD 21 00 28 1038*  			LD      IY,ACCS
       0B          
0B30C9 0E 00       1039*  			LD      C,0
0B30CB CD 72 44 0B 1040*  			CALL    LEXAN2          ;TOKENISE
0B30CF 12          1041*  			LD      (DE),A
0B30D0 13          1042*  			INC     DE
0B30D1 AF          1043*  			XOR     A
0B30D2 CD 8F 33 0B 1044*  			CALL    PUSHS           ;PUT ON STACK
0B30D6 FD 21 03 00 1045*  			LD      IY,SIZEW	;WAS 2
       00          
0B30DB FD 39       1046*  			ADD     IY,SP
0B30DD CD BE 2C 0B 1047*  			CALL    EXPR
0B30E1 FD E1       1048*  			POP     IY
0B30E3 FD 39       1049*  			ADD     IY,SP
0B30E5 FD F9       1050*  			LD      SP,IY           ;ADJUST STACK POINTER
0B30E7 FD E1       1051*  			POP     IY
0B30E9 08          1052*  			EX      AF,AF'
0B30EA C9          1053*  			RET
0B30EB             1054*  ;
0B30EB             1055*  ;RND - Random number function.
0B30EB             1056*  ; RND gives random integer 0-&FFFFFFFF
0B30EB             1057*  ; RND(-n) seeds random number & returns -n.
0B30EB             1058*  ; RND(0) returns last value in RND(1) form.
0B30EB             1059*  ; RND(1) returns floating-point 0-0.99999999.
0B30EB             1060*  ; RND(n) returns random integer 1-n.
0B30EB             1061*  ;
0B30EB DD 21 38 2B 1062*  RND:			LD      IX,RANDOM
       0B          
0B30F0 CD 4A 34 0B 1063*  			CALL    NXT
0B30F4 FE 28       1064*  			CP      '('
0B30F6 28 20       1065*  			JR      Z,RND5          ;ARGUMENT FOLLOWS
0B30F8 CD 02 2F 0B 1066*  			CALL    LOAD5
0B30FC CB 19       1067*  RND1:			RR      C
0B30FE 06 20       1068*  			LD      B,32
0B3100 D9          1069*  RND2:			EXX                     ;CALCULATE NEXT
0B3101 52 ED 6A    1070*  			ADC.S   HL,HL
0B3104 D9          1071*  			EXX
0B3105 52 ED 6A    1072*  			ADC.S   HL,HL
0B3108 CB 5D       1073*  			BIT     3,L
0B310A 28 01       1074*  			JR      Z,RND3
0B310C 3F          1075*  			CCF
0B310D 10 F1       1076*  RND3:			DJNZ    RND2
0B310F CB 11       1077*  RND4:			RL      C               ;SAVE CARRY
0B3111 CD EE 47 0B 1078*  			CALL    STORE5          ;STORE NEW NUMBER
0B3115 AF          1079*  			XOR     A
0B3116 4F          1080*  			LD      C,A
0B3117 C9          1081*  			RET
0B3118 CD 18 2E 0B 1082*  RND5:			CALL    ITEMI
0B311C DD 21 38 2B 1083*  			LD      IX,RANDOM
       0B          
0B3121 CB 7C       1084*  			BIT     7,H             ;NEGATIVE?
0B3123 37          1085*  			SCF
0B3124 20 E9       1086*  			JR      NZ,RND4         ;SEED
0B3126 CD BE 32 0B 1087*  			CALL    TEST
0B312A F5          1088*  			PUSH    AF
0B312B CD B6 32 0B 1089*  			CALL    SWAP
0B312F D9          1090*  			EXX
0B3130 CD 02 2F 0B 1091*  			CALL    LOAD5
0B3134 C4 FC 30 0B 1092*  			CALL    NZ,RND1         ;NEXT IF NON-ZERO
0B3138 D9          1093*  			EXX                     ;SCRAMBLE (CARE!)
0B3139 0E 7F       1094*  			LD      C,7FH
0B313B CB 7C       1095*  RND6:			BIT     7,H             ;FLOAT
0B313D 20 0A       1096*  			JR      NZ,RND7
0B313F D9          1097*  			EXX
0B3140 52 29       1098*  			ADD.S   HL,HL
0B3142 D9          1099*  			EXX
0B3143 52 ED 6A    1100*  			ADC.S   HL,HL
0B3146 0D          1101*  			DEC     C
0B3147 20 F2       1102*  			JR      NZ,RND6
0B3149 CB BC       1103*  RND7:			RES     7,H             ;POSITIVE 0-0.999999
0B314B F1          1104*  			POP     AF
0B314C C8          1105*  			RET     Z               ;ZERO ARGUMENT
0B314D D9          1106*  			EXX
0B314E 7B          1107*  			LD      A,E
0B314F 3D          1108*  			DEC     A
0B3150 B2          1109*  			OR      D
0B3151 D9          1110*  			EXX
0B3152 B3          1111*  			OR      E
0B3153 B2          1112*  			OR      D
0B3154 C8          1113*  			RET     Z               ;ARGUMENT=1
0B3155 06 00       1114*  			LD      B,0             ;INTEGER MARKER
0B3157 3E 0A       1115*  			LD      A,10
0B3159 CD 72 34 0B 1116*  			CALL    FPP             ;MULTIPLY
0B315D             1117*  			; JP      C,ERROR_
0B315D CD A0 30 0B 1118*  			CALL    SFIX
0B3161 C3 A2 2E 0B 1119*  			JP      ADD1_EV
0B3165             1120*  ;
0B3165             1121*  ; INSTR - String search.
0B3165             1122*  ; Result is integer numeric.
0B3165             1123*  ;
0B3165 CD FC 33 0B 1124*  INSTR:			CALL    EXPRSC			; Get the first string expression
0B3169 CD 8F 33 0B 1125*  			CALL    PUSHS           	; Push the string onto the stack
0B316D CD 08 2E 0B 1126*  			CALL    EXPRS           	; Get the second string expression
0B3171 C1          1127*  			POP     BC			;  C: String length, B: Value of A before PUSHS was called
0B3172 21 00 00 00 1128*  			LD      HL,0
0B3176 39          1129*  			ADD     HL,SP           	; HL: Pointer to main string
0B3177 C5          1130*  			PUSH    BC              	;  C: Main string length
0B3178 43          1131*  			LD      B,E             	;  B: Sub-string length
0B3179 CD 4A 34 0B 1132*  			CALL    NXT			; Skip whitespace
0B317D FE 2C       1133*  			CP      ','			; Check if there is a comma for the third parameter
0B317F 3E 00       1134*  			LD      A,0			;  A: Default start position in string
0B3181 20 1A       1135*  			JR      NZ,INSTR1		; No, so skip the next bit
0B3183 FD 23       1136*  			INC     IY              	; Skip the comma
0B3185 C5          1137*  			PUSH    BC              	; Save the lengths
0B3186 E5          1138*  			PUSH    HL              	; Save the pointer to the main string
0B3187 CD 8F 33 0B 1139*  			CALL    PUSHS			; Push the string onto the stack
0B318B CD FD 2D 0B 1140*  			CALL    EXPRI			; Get the third (numeric) parameter - the starting position
0B318F C1          1141*  			POP     BC			;  C: String length, B: Value of A before PUSHS was called (discarded)
0B3190 CD BC 33 0B 1142*  			CALL    POPS			; Pop the string off the stack
0B3194 E1          1143*  			POP     HL              	; Restore the pointer to the main string
0B3195 C1          1144*  			POP     BC              	; Restore the lengths
0B3196 D9          1145*  			EXX
0B3197 7D          1146*  			LD      A,L			; A: The start position in the  string
0B3198 D9          1147*  			EXX
0B3199 B7          1148*  			OR      A			; Set the flags
0B319A 28 01       1149*  			JR      Z,INSTR1		; If it is zero, then skip
0B319C 3D          1150*  			DEC     A
0B319D 11 00 28 0B 1151*  INSTR1:			LD      DE,ACCS         	; DE: Pointer to the sub string
0B31A1 CD BF 31 0B 1152*  			CALL    SEARCH			; Do the search
0B31A5 D1          1153*  			POP     DE
0B31A6 28 03       1154*  			JR      Z,INSTR2        	; NB: Carry cleared
0B31A8 ED 62       1155*  			SBC     HL,HL
0B31AA 39          1156*  			ADD     HL,SP
0B31AB ED 72       1157*  INSTR2:			SBC     HL,SP
0B31AD EB          1158*  			EX      DE,HL
0B31AE 7D          1159*  			LD	A,L
0B31AF 21 00 00 00 1160*  			LD      HL,0
0B31B3 6F          1161*  			LD	L,A
0B31B4 39          1162*  			ADD     HL,SP
0B31B5 F9          1163*  			LD      SP,HL
0B31B6 EB          1164*  			EX      DE,HL
0B31B7 CD 0D 34 0B 1165*  			CALL    BRAKET			; Check for closing bracket
0B31BB C3 07 30 0B 1166*  			JP      COUNT1			; Return a numeric integer
0B31BF             1167*  ;
0B31BF             1168*  ; SEARCH - Search string for sub-string
0B31BF             1169*  ;    Inputs: Main string at HL length C
0B31BF             1170*  ;            Sub-string  at DE length B
0B31BF             1171*  ;            Starting offset A
0B31BF             1172*  ;   Outputs: NZ - not found
0B31BF             1173*  ;            Z - found at location HL-1
0B31BF             1174*  ;            Carry always cleared
0B31BF             1175*  ;
0B31BF C5          1176*  SEARCH:			PUSH    BC			; Add the starting offset to HL
0B31C0 01 00 00 00 1177*  			LD      BC,0
0B31C4 4F          1178*  			LD      C,A
0B31C5 09          1179*  			ADD     HL,BC           	; New start address
0B31C6 C1          1180*  			POP     BC
0B31C7 91          1181*  			SUB     C			; If the starting offset > main string length, then do nothing
0B31C8 30 2C       1182*  			JR      NC,SRCH4
0B31CA ED 44       1183*  			NEG
0B31CC 4F          1184*  			LD      C,A             	; Remaining length
0B31CD             1185*  ;
0B31CD C5          1186*  SRCH1_EV:			PUSH    BC
0B31CE 79          1187*  			LD	A,C
0B31CF 01 00 00 00 1188*  			LD	BC,0
0B31D3 4F          1189*  			LD	C,A
0B31D4 1A          1190*  			LD      A,(DE)
0B31D5 ED B1       1191*  			CPIR                    	; Find the first character
0B31D7 79          1192*  			LD      A,C
0B31D8 C1          1193*  			POP     BC
0B31D9 20 1B       1194*  			JR      NZ,SRCH4
0B31DB 4F          1195*  			LD      C,A
0B31DC             1196*  ;
0B31DC             1197*  ; This block of four instructions was commented as a bug fix by R.T.Russell
0B31DC             1198*  ;
0B31DC 05          1199*  			DEC     B			; Bug fix
0B31DD B8          1200*  			CP      B			; Bug fix
0B31DE 04          1201*  			INC     B			; Bug fix
0B31DF 38 15       1202*  			JR      C,SRCH4			; Bug fix
0B31E1             1203*  ;
0B31E1 C5          1204*  			PUSH    BC
0B31E2 D5          1205*  			PUSH    DE
0B31E3 E5          1206*  			PUSH    HL
0B31E4 05          1207*  			DEC     B
0B31E5 28 08       1208*  			JR      Z,SRCH3         	; Found!
0B31E7 13          1209*  SRCH2_EV:			INC     DE
0B31E8 1A          1210*  			LD      A,(DE)
0B31E9 BE          1211*  			CP      (HL)
0B31EA 20 03       1212*  			JR      NZ,SRCH3
0B31EC 23          1213*  			INC     HL
0B31ED 10 F8       1214*  			DJNZ    SRCH2_EV
0B31EF E1          1215*  SRCH3:			POP     HL
0B31F0 D1          1216*  			POP     DE
0B31F1 C1          1217*  			POP     BC
0B31F2 20 D9       1218*  			JR      NZ,SRCH1_EV
0B31F4 AF          1219*  			XOR     A               	; Flags: Z, NC
0B31F5 C9          1220*  			RET                     	; Found
0B31F6             1221*  ;
0B31F6 F6 FF       1222*  SRCH4:			OR      0FFH            	; Flags: NZ, NC
0B31F8 C9          1223*  			RET                     	; Not found
0B31F9             1224*  
0B31F9             1225*  ; we won't be using the following:
0B31F9             1226*  ;CHRS - Return character with given ASCII value.
0B31F9             1227*  ;Result is string.
0B31F9             1228*  ;
0B31F9 C9          1229*  CHRS:		ret
0B31FA             1230*  			; CALL    ITEMI
0B31FA             1231*  			; EXX
0B31FA             1232*  			; LD      A,L
0B31FA             1233*  			; JR      GET1
0B31FA             1234*  ;
0B31FA             1235*  ;GETS - Return key pressed as stringor character at position (X,Y).
0B31FA             1236*  ;Result is string.
0B31FA             1237*  ;
0B31FA C9          1238*  GETS:		ret
0B31FB             1239*  			; CALL	NXT		;NEW CODE FOR GET$(X,Y)
0B31FB             1240*  			; CP	'('
0B31FB             1241*  			; JP	Z, GETSCHR	;CALL FUNCTION IN PATCH.Z80
0B31FB             1242*  			; CALL    OSRDCH
0B31FB C9          1243*  GET1:		ret
0B31FC             1244*  			; SCF
0B31FC             1245*  			; JR      INKEY1
0B31FC             1246*  ;
0B31FC             1247*  ; INKEYS - Wait up to n centiseconds for keypress.
0B31FC             1248*  ;          Return key pressed as string or null
0B31FC             1249*  ;          string if time elapsed.
0B31FC             1250*  ; Result is string.
0B31FC             1251*  ;
0B31FC C9          1252*  INKEYS:		ret
0B31FD             1253*  			; CALL    ITEMI			; Fetch the argument
0B31FD             1254*  			; EXX
0B31FD C9          1255*  INKEY0:		ret
0B31FE             1256*  			; CALL    OSKEY			; This is the entry point for INKEY(n)
0B31FE C9          1257*  INKEY1:		ret
0B31FF             1258*  			; LD      DE,ACCS			; Store the result in the string accumulator
0B31FF             1259*  			; LD      (DE),A
0B31FF             1260*  			; LD      A,80H
0B31FF             1261*  			; RET     NC
0B31FF             1262*  			; INC     E
0B31FF             1263*  			; RET
0B31FF             1264*  ;
0B31FF             1265*  ; INKEYM - Check immediately whether a given key is being pressed
0B31FF             1266*  ; Result is integer numeric
0B31FF             1267*  ;
0B31FF C9          1268*  INKEYM:		ret
0B3200             1269*  ; 			MOSCALL	mos_getkbmap		; Get the base address of the keyboard
0B3200             1270*  ; 			INC	HL			; Index from 0
0B3200             1271*  ; 			LD	A, L			; Negate the LSB of the answer
0B3200             1272*  ; 			NEG
0B3200             1273*  ; 			LD	C, A			;  E: The positive keycode value
0B3200             1274*  ; 			LD	A, 1			; Throw an "Out of range" error
0B3200             1275*  ; 			JP	M, ERROR_		; if the argument < - 128
0B3200             1276*  ; ;
0B3200             1277*  ; 			LD	HL, BITLOOKUP		; HL: The bit lookup table
0B3200             1278*  ; 			LD	DE, 0
0B3200             1279*  ; 			LD	A, C
0B3200             1280*  ; 			AND	00000111b		; Just need the first three bits
0B3200             1281*  ; 			LD	E, A			; DE: The bit number
0B3200             1282*  ; 			ADD	HL, DE
0B3200             1283*  ; 			LD	B, (HL)			;  B: The mask
0B3200             1284*  ; ;
0B3200             1285*  ; 			LD	A, C			; Fetch the keycode again
0B3200             1286*  ; 			AND	01111000b		; And divide by 8
0B3200             1287*  ; 			RRCA
0B3200             1288*  ; 			RRCA
0B3200             1289*  ; 			RRCA
0B3200             1290*  ; 			LD	E, A			; DE: The offset (the MSW has already been cleared previously)
0B3200             1291*  ; 			ADD	IX, DE			; IX: The address
0B3200             1292*  ; 			LD	A, B			;  B: The mask
0B3200             1293*  ; 			AND	(IX+0)			; Check whether the bit is set
0B3200             1294*  ; 			JP	Z, ZERO			; No, so return 0
0B3200             1295*  ; 			JP	FOR_EV			; Otherwise return -1
0B3200             1296*  
0B3200             1297*  ; end of the functions we won't be using
0B3200             1298*  
0B3200             1299*  ;
0B3200             1300*  ; A bit lookup table
0B3200             1301*  ;
0B3200 01 02 04 08 1302*  BITLOOKUP:		DB	01h, 02h, 04h, 08h
0B3204 10 20 40 80 1303*  			DB	10h, 20h, 40h, 80h
0B3208             1304*  ;
0B3208             1305*  ; MID$ - Return sub-string.
0B3208             1306*  ; Result is string.
0B3208             1307*  ;
0B3208 CD FC 33 0B 1308*  MIDS:			CALL    EXPRSC			; Get the first string expression
0B320C CD 8F 33 0B 1309*  			CALL    PUSHS           	; Push the string onto the stack from the string accumulator (ACCS)
0B3210 CD FD 2D 0B 1310*  			CALL    EXPRI			; Get the second expression
0B3214 C1          1311*  			POP     BC			; C: String length, B: Value of A before PUSHS was called
0B3215 CD BC 33 0B 1312*  			CALL    POPS			; Pop the string back off the stack to the string accumulator
0B3219 D9          1313*  			EXX
0B321A 7D          1314*  			LD      A,L			; A: The start index
0B321B D9          1315*  			EXX
0B321C B7          1316*  			OR      A			; If the start index is 0, then we don't need to do the next bit
0B321D 28 0E       1317*  			JR      Z,MIDS1
0B321F 3D          1318*  			DEC     A
0B3220 6F          1319*  			LD      L,A			; L: The start index - 1
0B3221 93          1320*  			SUB     E			; Subtract from the string length
0B3222 1E 00       1321*  			LD      E,0			; Preemptively set the string length to 0
0B3224 30 07       1322*  			JR      NC,MIDS1		; If the first parameter is greater than the string length, then do nothing
0B3226 ED 44       1323*  			NEG				; Negate the answer and
0B3228 4F          1324*  			LD      C,A			; C: Number of bytes to copy
0B3229 CD 6C 32 0B 1325*  			CALL    RIGHT1			; We can do a RIGHT$ at this point with the result
0B322D CD 4A 34 0B 1326*  MIDS1:			CALL    NXT			; Skip whitespace
0B3231 FE 2C       1327*  			CP      ','			; Check for a comma
0B3233 FD 23       1328*  			INC     IY			; Advance to the next character in the BASIC line
0B3235 28 0D       1329*  			JR      Z,LEFT1			; If there is a comma then we do a LEFT$ on the remainder
0B3237 FD 2B       1330*  			DEC     IY			; Restore the BASIC program pointer
0B3239 CD 0D 34 0B 1331*  			CALL    BRAKET			; Check for a bracket
0B323D 3E 80       1332*  			LD      A,80H			; String marker
0B323F C9          1333*  			RET
0B3240             1334*  ;
0B3240             1335*  ; LEFT$ - Return left part of string.
0B3240             1336*  ; Carry cleared if entire string returned.
0B3240             1337*  ; Result is string.
0B3240             1338*  ;
0B3240 CD FC 33 0B 1339*  LEFTS:			CALL    EXPRSC			; Get the first string expression
0B3244 CD 8F 33 0B 1340*  LEFT1:			CALL    PUSHS           	; Push the string onto the stack from the string accumulator (ACCS)
0B3248 CD FD 2D 0B 1341*  			CALL    EXPRI			; Get the second expression
0B324C C1          1342*  			POP     BC			; C: String length, B: Value of A before PUSHS was called
0B324D CD BC 33 0B 1343*  			CALL    POPS			; Pop the string back off the stack to the string accumulator (ACCS)
0B3251 CD 0D 34 0B 1344*  			CALL    BRAKET			; Check for closing bracket
0B3255 D9          1345*  			EXX
0B3256 7D          1346*  			LD      A,L			; L: The second parameter
0B3257 D9          1347*  			EXX
0B3258 BB          1348*  			CP      E			; Compare with the string length
0B3259 30 02       1349*  			JR      NC,LEFT3		; If it is greater than or equal then do nothing
0B325B 6B          1350*  			LD      L,E             	; For RIGHTS, no effect in LEFTS
0B325C 5F          1351*  LEFT2:			LD      E,A			; E: The new length of string
0B325D 3E 80       1352*  LEFT3:			LD      A,80H           	; String marker
0B325F C9          1353*  			RET
0B3260             1354*  ;
0B3260             1355*  ; RIGHT$ - Return right part of string.
0B3260             1356*  ; Result is string.
0B3260             1357*  ;
0B3260 CD 40 32 0B 1358*  RIGHTS:			CALL    LEFTS			; Call LEFTS to get the string
0B3264 D0          1359*  			RET     NC			; Do nothing if the second parameter is >= string length
0B3265 1C          1360*  			INC     E			; Check for a zero length string
0B3266 1D          1361*  			DEC     E
0B3267 C8          1362*  			RET     Z			; Yes, so do nothing
0B3268 4B          1363*  			LD      C,E			;  C: Number of bytes to copy
0B3269 7D          1364*  			LD      A,L
0B326A 93          1365*  			SUB     E
0B326B 6F          1366*  			LD      L,A			;  L: Index into the string
0B326C 79          1367*  RIGHT1:			LD	A,C
0B326D 01 00 00 00 1368*  			LD	BC,0
0B3271 4F          1369*  			LD	C,A			; BC: Number of bytes to copy (with top word cleared)
0B3272 7D          1370*  			LD	A,L
0B3273 21 00 28 0B 1371*  			LD	HL,ACCS
0B3277 6F          1372*  			LD	L,A			; HL: Source (in ACCS)
0B3278 11 00 28 0B 1373*  			LD      DE,ACCS			; DE: Destination (start of ACCS)
0B327C ED B0       1374*  			LDIR                    	; Copy
0B327E 3E 80       1375*  			LD      A,80H			; String marker
0B3280 C9          1376*  			RET
0B3281             1377*  ;
0B3281             1378*  ; STRINGS - Return n concatenations of a string.
0B3281             1379*  ; Result is string.
0B3281             1380*  ;
0B3281 CD FD 2D 0B 1381*  STRING_:		CALL    EXPRI			; Get number of times to replicate
0B3285 CD 00 34 0B 1382*  			CALL    COMMA			; Check for comma
0B3289 D9          1383*  			EXX
0B328A 7D          1384*  			LD      A,L			; L: Number of iterations of string
0B328B D9          1385*  			EXX
0B328C F5          1386*  			PUSH    AF
0B328D CD 08 2E 0B 1387*  			CALL    EXPRS			; Get the string
0B3291 CD 0D 34 0B 1388*  			CALL    BRAKET			; Check for closing bracket
0B3295 F1          1389*  			POP     AF			; A: Number of iterations of string
0B3296 B7          1390*  			OR      A			; Set flags
0B3297 28 C3       1391*  			JR      Z,LEFT2         	; If iterations is 0, then this will return an empty string
0B3299 3D          1392*  			DEC     A
0B329A 4F          1393*  			LD      C,A			; C: Loop counter
0B329B 3E 80       1394*  			LD      A,80H			; String marker
0B329D C8          1395*  			RET     Z
0B329E 1C          1396*  			INC     E			; Check for empty string
0B329F 1D          1397*  			DEC     E
0B32A0 C8          1398*  			RET     Z              		; And return
0B32A1 43          1399*  			LD      B,E			; B: String length tally
0B32A2 21 00 28 0B 1400*  			LD	HL,ACCS
0B32A6 C5          1401*  STRIN1:			PUSH    BC
0B32A7 7E          1402*  STRIN2:			LD      A,(HL)
0B32A8 23          1403*  			INC     HL
0B32A9 12          1404*  			LD      (DE),A
0B32AA 1C          1405*  			INC     E
0B32AB 3E 13       1406*  			LD      A,19
0B32AD             1407*  			; JP      Z,ERROR_         	; Throw a "String too long" error
0B32AD 10 F8       1408*  			DJNZ    STRIN2
0B32AF C1          1409*  			POP     BC
0B32B0 0D          1410*  			DEC     C
0B32B1 20 F3       1411*  			JR      NZ,STRIN1
0B32B3 3E 80       1412*  			LD      A,80H
0B32B5 C9          1413*  			RET
0B32B6             1414*  ;
0B32B6             1415*  ;SUBROUTINES
0B32B6             1416*  ;
0B32B6             1417*  ;SWAP - Swap arguments
0B32B6             1418*  ;Exchanges DE,HL D'E',H'L' and B,C
0B32B6             1419*  ;Destroys: A,B,C,D,E,H,L,D',E',H',L'
0B32B6             1420*  ;
0B32B6 79          1421*  SWAP:			LD      A,C
0B32B7 48          1422*  			LD      C,B
0B32B8 47          1423*  			LD      B,A
0B32B9 EB          1424*  			EX      DE,HL
0B32BA D9          1425*  			EXX
0B32BB EB          1426*  			EX      DE,HL
0B32BC D9          1427*  			EXX
0B32BD C9          1428*  			RET
0B32BE             1429*  ;
0B32BE             1430*  ;TEST - Test HLH'L' for zero
0B32BE             1431*  ;Outputs: Z-flag set & A=0 if zero
0B32BE             1432*  ;Destroys: A,F
0B32BE             1433*  ;
0B32BE 7C          1434*  TEST:			LD      A,H
0B32BF B5          1435*  			OR      L
0B32C0 D9          1436*  			EXX
0B32C1 B4          1437*  			OR      H
0B32C2 B5          1438*  			OR      L
0B32C3 D9          1439*  			EXX
0B32C4 C9          1440*  			RET
0B32C5             1441*  ;
0B32C5             1442*  ;DECODE - Decode line number in pseudo-binary.
0B32C5             1443*  ;   Inputs: IY = Text pointer.
0B32C5             1444*  ;   Outputs: HL=0, H'L'=line number, C=0.
0B32C5             1445*  ;   Destroys: A,C,H,L,H',L',IY,F
0B32C5             1446*  ;
0B32C5 D9          1447*  DECODE:			EXX
0B32C6 21 00 00 00 1448*  			LD	HL, 0
0B32CA FD 7E 00    1449*  			LD      A,(IY)
0B32CD FD 23       1450*  			INC     IY
0B32CF 17          1451*  			RLA
0B32D0 17          1452*  			RLA
0B32D1 67          1453*  			LD      H,A
0B32D2 E6 C0       1454*  			AND     0C0H
0B32D4 FD AE 00    1455*  			XOR     (IY)
0B32D7 FD 23       1456*  			INC     IY
0B32D9 6F          1457*  			LD      L,A
0B32DA 7C          1458*  			LD      A,H
0B32DB 17          1459*  			RLA
0B32DC 17          1460*  			RLA
0B32DD E6 C0       1461*  			AND     0C0H
0B32DF FD AE 00    1462*  			XOR     (IY)
0B32E2 FD 23       1463*  			INC     IY
0B32E4 67          1464*  			LD      H,A
0B32E5 D9          1465*  			EXX
0B32E6             1466*  ;			XOR     A
0B32E6             1467*  ;			LD      C,A
0B32E6             1468*  ;			LD      H,A
0B32E6             1469*  ;			LD      L,A
0B32E6 21 00 00 00 1470*  			LD	HL, 0
0B32EA 4D          1471*  			LD	C, L
0B32EB C9          1472*  			RET
0B32EC             1473*  ;
0B32EC             1474*  ;HEXSTR - convert numeric value to HEX string.
0B32EC             1475*  ;   Inputs: HLH'L'C = integer or floating-point number
0B32EC             1476*  ;  Outputs: String in string accumulator.
0B32EC             1477*  ;           E = string length.  D = ACCS/256
0B32EC             1478*  ;
0B32EC FD 23       1479*  HEXSTS:			INC     IY              ;SKIP TILDE
0B32EE CD 10 2E 0B 1480*  			CALL    ITEMN
0B32F2 CD F9 32 0B 1481*  			CALL    HEXSTR
0B32F6 3E 80       1482*  			LD      A,80H
0B32F8 C9          1483*  			RET
0B32F9             1484*  ;
0B32F9 CD A0 30 0B 1485*  HEXSTR:			CALL    SFIX
0B32FD 01 08 00 00 1486*  			LD      BC,8
0B3301 11 00 28 0B 1487*  			LD      DE,ACCS
0B3305 C5          1488*  HEXST1:			PUSH    BC
0B3306 06 04       1489*  			LD      B,4
0B3308 AF          1490*  			XOR     A
0B3309 D9          1491*  HEXST2:			EXX
0B330A 52 29       1492*  			ADD.S	HL,HL
0B330C D9          1493*  			EXX
0B330D 52 ED 6A    1494*  			ADC.S	HL,HL
0B3310 17          1495*  			RLA
0B3311 10 F6       1496*  			DJNZ    HEXST2
0B3313 C1          1497*  			POP     BC
0B3314 0D          1498*  			DEC     C
0B3315 F8          1499*  			RET     M
0B3316 28 06       1500*  			JR      Z,HEXST3
0B3318 B7          1501*  			OR      A
0B3319 20 03       1502*  			JR      NZ,HEXST3
0B331B B8          1503*  			CP      B
0B331C 28 E7       1504*  			JR      Z,HEXST1
0B331E C6 90       1505*  HEXST3:			ADD     A,90H
0B3320 27          1506*  			DAA
0B3321 CE 40       1507*  			ADC     A,40H
0B3323 27          1508*  			DAA
0B3324 12          1509*  			LD      (DE),A
0B3325 13          1510*  			INC     DE
0B3326 47          1511*  			LD      B,A
0B3327 18 DC       1512*  			JR      HEXST1
0B3329             1513*  ;
0B3329             1514*  ;Function STR - convert numeric value to ASCII string.
0B3329             1515*  ;   Inputs: HLH'L'C = integer or floating-point number.
0B3329             1516*  ;  Outputs: String in string accumulator.
0B3329             1517*  ;           E = length, D = ACCS/256
0B3329             1518*  ;           A = 80H (type=string)
0B3329             1519*  ;
0B3329             1520*  ;First normalise for decimal output:
0B3329             1521*  ;
0B3329 CD 4A 34 0B 1522*  STRS:			CALL    NXT
0B332D FE 7E       1523*  			CP      '~'
0B332F 28 BB       1524*  			JR      Z,HEXSTS
0B3331 CD 10 2E 0B 1525*  			CALL    ITEMN
0B3335 DD 21 00 2A 1526*  			LD      IX,STAVAR
       0B          
0B333A DD 7E 03    1527*  			LD      A,(IX+3)
0B333D B7          1528*  			OR      A
0B333E DD 21 67 33 1529*  			LD      IX,G9-1         ;G9 FORMAT
       0B          
0B3343 28 05       1530*  			JR      Z,STR0
0B3345 DD 21 00 2A 1531*  STR:			LD      IX,STAVAR
       0B          
0B334A 11 00 28 0B 1532*  STR0:			LD      DE,ACCS
0B334E 3E 25       1533*  			LD      A,37
0B3350 CD 72 34 0B 1534*  			CALL    FPP
0B3354             1535*  			; JP      C,ERROR_
0B3354 DD CB 02 46 1536*  			BIT     0,(IX+2)
0B3358 3E 80       1537*  STR1:			LD      A,80H           ;STRING MARKER
0B335A C8          1538*  			RET     Z
0B335B 79          1539*  			LD      A,C
0B335C C6 04       1540*  			ADD     A,4
0B335E BB          1541*  STR2_EV:			CP      E
0B335F 28 F7       1542*  			JR      Z,STR1
0B3361 EB          1543*  			EX      DE,HL
0B3362 36 20       1544*  			LD      (HL),' '        ;TRAILING SPACE
0B3364 23          1545*  			INC     HL
0B3365 EB          1546*  			EX      DE,HL
0B3366 18 F6       1547*  			JR      STR2_EV
0B3368             1548*  ;
0B3368 09 00       1549*  G9:			DW    9
0B336A             1550*  ;
0B336A             1551*  ;STRING COMPARE
0B336A             1552*  ;Compare string (DE) length B with string (HL) length C.
0B336A             1553*  ;Result preset to false.
0B336A             1554*  ;
0B336A CD 78 33 0B 1555*  SCP:			CALL	SCP0
0B336E             1556*  ;
0B336E 3E 00       1557*  ZERO:			LD      A,0
0B3370 D9          1558*  			EXX
0B3371 67          1559*  			LD      H,A
0B3372 6F          1560*  			LD      L,A
0B3373 D9          1561*  			EXX
0B3374 67          1562*  			LD      H,A
0B3375 6F          1563*  			LD      L,A
0B3376 4F          1564*  			LD      C,A
0B3377 C9          1565*  			RET
0B3378             1566*  ;
0B3378 04          1567*  SCP0:			INC     B
0B3379 0C          1568*  			INC     C
0B337A 05          1569*  SCP1:			DEC     B
0B337B 28 0A       1570*  			JR      Z,SCP2
0B337D 0D          1571*  			DEC     C
0B337E 28 0C       1572*  			JR      Z,SCP3
0B3380 1A          1573*  			LD      A,(DE)
0B3381 BE          1574*  			CP      (HL)
0B3382 C0          1575*  			RET     NZ
0B3383 13          1576*  			INC     DE
0B3384 23          1577*  			INC     HL
0B3385 18 F3       1578*  			JR      SCP1
0B3387 B7          1579*  SCP2:			OR      A
0B3388 0D          1580*  			DEC     C
0B3389 C8          1581*  			RET     Z
0B338A 37          1582*  			SCF
0B338B C9          1583*  			RET
0B338C B7          1584*  SCP3:			OR      A
0B338D 0C          1585*  			INC     C
0B338E C9          1586*  			RET
0B338F             1587*  ;
0B338F             1588*  ; PUSHS - SAVE STRING ON STACK.
0B338F             1589*  ;     Inputs: String in string accumulator.
0B338F             1590*  ;             E = string length.
0B338F             1591*  ;             A - saved on stack.
0B338F             1592*  ;   Destroys: B,C,D,E,H,L,IX,SP,F
0B338F             1593*  ;
0B338F CD 57 42 0B 1594*  PUSHS:			CALL    CHECK			; Check if there is sufficient space on the stack
0B3393 DD E1       1595*  			POP     IX              	; IX: Return address
0B3395 B7          1596*  			OR      A               	; Clear the carry flag
0B3396 01 00 00 00 1597*  			LD	BC,0			; BC: Length of the string
0B339A 4B          1598*  			LD	C,E
0B339B 21 00 28 0B 1599*  			LD      HL,ACCS			; HL: Pointer to the string accumulator
0B339F 11 00 28 0B 1600*  			LD	DE,ACCS
0B33A3 59          1601*  			LD	E,C 			; DE: Pointer to the end of the string in the accumulator
0B33A4 ED 52       1602*  			SBC     HL,DE			; HL: Number of bytes to reserve on the stack (a negative number)
0B33A6 39          1603*  			ADD     HL,SP			; Grow the stack
0B33A7 F9          1604*  			LD      SP,HL
0B33A8 57          1605*  			LD      D,A			;  D: This needs to be set to A for some functions
0B33A9 47          1606*  			LD	B,A			; Stack A and C (the string length)
0B33AA C5          1607*  			PUSH    BC			; Note that this stacks 3 bytes, not 2; the MSB is irrelevant
0B33AB 06 00       1608*  			LD	B,0			; Reset B to 0 for the LDIR in this function
0B33AD 28 0B       1609*  			JR      Z,PUSHS1        	; Is it zero length?
0B33AF 11 00 28 0B 1610*  			LD      DE,ACCS			; DE: Destination
0B33B3 EB          1611*  			EX      DE,HL			; HL: Destination, DE: Address on stack
0B33B4 ED B0       1612*  			LDIR	                    	; Copy to stack
0B33B6 CD 57 42 0B 1613*  			CALL    CHECK			; Final check to see if there is sufficient space on the stack
0B33BA DD E9       1614*  PUSHS1:			JP      (IX)            	; Effectively "RET" (IX contains the return address)
0B33BC             1615*  ;
0B33BC             1616*  ; POPS - RESTORE STRING FROM STACK.
0B33BC             1617*  ;     Inputs: C = string length.
0B33BC             1618*  ;    Outputs: String in string accumulator.
0B33BC             1619*  ;             E = string length.
0B33BC             1620*  ;   Destroys: B,C,D,E,H,L,IX,SP,F
0B33BC             1621*  ;
0B33BC DD E1       1622*  POPS:			POP     IX              	; IX: Return address
0B33BE 69          1623*  			LD	L,C			; Temporarily store string length in L
0B33BF 01 00 00 00 1624*  			LD	BC,0
0B33C3 4D          1625*  			LD	C,L			; BC: Number of bytes to copy
0B33C4 21 00 00 00 1626*  			LD      HL,0			; HL: 0
0B33C8 39          1627*  			ADD     HL,SP			; HL: Stack address
0B33C9 11 00 28 0B 1628*  			LD      DE,ACCS			; DE: Destination
0B33CD 0C          1629*  			INC     C			; Quick check to see if this is a zero length string
0B33CE 0D          1630*  			DEC     C
0B33CF 28 02       1631*  			JR      Z,POPS1         	; Yes it is, so skip
0B33D1 ED B0       1632*  			LDIR                    	; No, so copy from the stack
0B33D3 F9          1633*  POPS1:			LD      SP,HL			; Shrink the stack
0B33D4 DD E9       1634*  			JP      (IX)            	; Effectively "RET" (IX contains the return address)
0B33D6             1635*  ;
0B33D6 FD 7E 00    1636*  HEXDIG:			LD      A,(IY)
0B33D9 FE 30       1637*  			CP      '0'
0B33DB D8          1638*  			RET     C
0B33DC FE 3A       1639*  			CP      '9'+1
0B33DE 3F          1640*  			CCF
0B33DF D0          1641*  			RET     NC
0B33E0 FE 41       1642*  			CP      'A'
0B33E2 D8          1643*  			RET     C
0B33E3 D6 37       1644*  			SUB     'A'-10
0B33E5 FE 10       1645*  			CP      16
0B33E7 3F          1646*  			CCF
0B33E8 C9          1647*  			RET
0B33E9             1648*  ;
0B33E9 FD 7E 00    1649*  BINDIG:			LD	A,(IY)
0B33EC FE 30       1650*  			CP	'0'
0B33EE D8          1651*  			RET	C
0B33EF FE 32       1652*  			CP	'1'+1
0B33F1 3F          1653*  			CCF
0B33F2 C9          1654*  			RET
0B33F3             1655*  ;
0B33F3 FE 3E       1656*  RELOP?:			CP      '>'
0B33F5 D0          1657*  			RET     NC
0B33F6 FE 3D       1658*  			CP      '='
0B33F8 D0          1659*  			RET     NC
0B33F9 FE 3C       1660*  			CP      '<'
0B33FB C9          1661*  			RET
0B33FC             1662*  ;
0B33FC CD 08 2E 0B 1663*  EXPRSC:			CALL    EXPRS
0B3400 CD 4A 34 0B 1664*  COMMA:			CALL    NXT
0B3404 FD 23       1665*  			INC     IY
0B3406 FE 2C       1666*  			CP      ','
0B3408 C8          1667*  			RET     Z
0B3409 3E 05       1668*  			LD      A,5
0B340B 18 0B       1669*  			JR      ERROR1_EV          ;"Missing ,"
0B340D             1670*  ;
0B340D CD 4A 34 0B 1671*  BRAKET:			CALL    NXT
0B3411 FD 23       1672*  			INC     IY
0B3413 FE 29       1673*  			CP      ')'
0B3415 C8          1674*  			RET     Z
0B3416 3E 1B       1675*  			LD      A,27
0B3418             1676*  ERROR1_EV:
0B3418             1677*  	; JP      ERROR_           ;"Missing )"
0B3418             1678*  ;
0B3418 FD 23       1679*  SAVE_EV:			INC     IY
0B341A 08          1680*  SAVE1:			EX      AF,AF'
0B341B FA 29 2E 0B 1681*  			JP      M,TYPE_EV_
0B341F 08          1682*  			EX      AF,AF'
0B3420 E3          1683*  			EX      (SP),HL
0B3421 D9          1684*  			EXX
0B3422 E5          1685*  			PUSH    HL
0B3423 D9          1686*  			EXX
0B3424 F5          1687*  			PUSH    AF
0B3425 C5          1688*  			PUSH    BC
0B3426 E9          1689*  			JP      (HL)
0B3427             1690*  ;
0B3427 08          1691*  DOIT:			EX      AF,AF'
0B3428 FA 29 2E 0B 1692*  			JP      M,TYPE_EV_
0B342C D9          1693*  			EXX
0B342D C1          1694*  			POP     BC              ;RETURN ADDRESS
0B342E D9          1695*  			EXX
0B342F 79          1696*  			LD      A,C
0B3430 C1          1697*  			POP     BC
0B3431 47          1698*  			LD      B,A
0B3432 F1          1699*  			POP     AF              ;OPERATOR
0B3433 D9          1700*  			EXX
0B3434 EB          1701*  			EX      DE,HL
0B3435 E1          1702*  			POP     HL
0B3436 D9          1703*  			EXX
0B3437 EB          1704*  			EX      DE,HL
0B3438 E1          1705*  			POP     HL
0B3439 D9          1706*  			EXX
0B343A C5          1707*  			PUSH    BC
0B343B D9          1708*  			EXX
0B343C E6 0F       1709*  			AND     0FH
0B343E CD 72 34 0B 1710*  			CALL    FPP
0B3442 38 D4       1711*  			JR      C,ERROR1_EV
0B3444 AF          1712*  			XOR     A
0B3445 08          1713*  			EX      AF,AF'          ;TYPE
0B3446 FD 7E 00    1714*  			LD      A,(IY)
0B3449 C9          1715*  			RET
0B344A             1716*  ;
0B344A             1717*  ; Skip spaces
0B344A             1718*  ; - IY: String pointer
0B344A             1719*  ; Returns:
0B344A             1720*  ;  - A: The non-space character found
0B344A             1721*  ; - IY: Points to the character before that
0B344A             1722*  ;
0B344A FD 7E 00    1723*  NXT:			LD      A,(IY)			; Fetch the character
0B344D FE 20       1724*  			CP      ' '			; If it is space, then return
0B344F C0          1725*  			RET     NZ
0B3450 FD 23       1726*  			INC     IY			; Increment the pointer and
0B3452 C3 4A 34 0B 1727*  			JP      NXT			; Loop
0B3456             1728*  ;
0B3456 E5          1729*  DISPT2:			PUSH    HL
0B3457 21 AC 2C 0B 1730*  			LD      HL,SOPTBL
0B345B 18 07       1731*  			JR      DISPT0
0B345D             1732*  ;
0B345D E5          1733*  DISPAT_EV:			PUSH    HL
0B345E D6 8D       1734*  			SUB     FUNTOK
0B3460 21 00 2C 0B 1735*  			LD      HL,FUNTBL
0B3464 C5          1736*  DISPT0:			PUSH    BC
0B3465             1737*  
0B3465 01 03 00 00 1738*  			LD	BC, 3
0B3469 47          1739*  			LD	B, A
0B346A ED 4C       1740*  			MLT	BC
0B346C 09          1741*  			ADD	HL, BC
0B346D ED 27       1742*  			LD	HL, (HL)
0B346F             1743*  
0B346F             1744*  ;			ADD     A,A
0B346F             1745*  ;			LD      C,A
0B346F             1746*  ;			LD      B,0
0B346F             1747*  ;			ADD     HL,BC
0B346F             1748*  ;			LD      A,(HL)
0B346F             1749*  ;			INC     HL
0B346F             1750*  ;			LD      H,(HL)
0B346F             1751*  ;			LD      L,A
0B346F             1752*  
0B346F C1          1753*  			POP     BC
0B3470 E3          1754*  			EX      (SP),HL
0B3471 C9          1755*  			RET                     ;OFF TO ROUTINE
0B3472             1756*  
0B3472             0384       INCLUDE	"basic/equs.inc"
0B3472             0001*  ;
0B3472             0002*  ; Title:	BBC Basic for AGON - Equs
0B3472             0003*  ; Author:	Dean Belfield
0B3472             0004*  ; Created:	12/05/2023
0B3472             0005*  ; Last Updated:	08/06/2023
0B3472             0006*  ;
0B3472             0007*  ; Modinfo:
0B3472             0008*  ; 08/06/2023:	Added SIZEW
0B3472             0009*  
0B3472             0010*  			; XREF		STAVAR
0B3472             0011*  			; XREF		ACCS
0B3472             0012*  
0B3472             0013*  RAM_Top:		EQU		0B0000h	; Initial value of HIMEM
0B3472             0014*  ;Stack_Top:		EQU		0000h	; Stack at top
0B3472             0015*  SIZEW:			EQU		3	; Size of a word (3 for ADL mode)
0B3472             0016*  
0B3472             0017*  ; For GPIO
0B3472             0018*  ; PA not available on eZ80L92
0B3472             0019*  ;
0B3472             0020*  PA_DR:			EQU		96h
0B3472             0021*  PA_DDR:			EQU		97h
0B3472             0022*  PA_ALT1:		EQU		98h
0B3472             0023*  PA_ALT2:		EQU		99h
0B3472             0024*  PB_DR:          	EQU		9Ah
0B3472             0025*  PB_DDR:        	 	EQU		9Bh
0B3472             0026*  PB_ALT1:        	EQU		9Ch
0B3472             0027*  PB_ALT2:        	EQU		9Dh
0B3472             0028*  PC_DR:          	EQU		9Eh
0B3472             0029*  PC_DDR:         	EQU		9Fh
0B3472             0030*  PC_ALT1:        	EQU		A0h
0B3472             0031*  PC_ALT2:        	EQU		A1h
0B3472             0032*  PD_DR:          	EQU		A2h
0B3472             0033*  PD_DDR:			EQU		A3h
0B3472             0034*  PD_ALT1:		EQU		A4h
0B3472             0035*  PD_ALT2:		EQU		A5h
0B3472             0036*  
0B3472             0037*  GPIOMODE_OUT:		EQU		0	; Output
0B3472             0038*  GPIOMODE_IN:		EQU		1	; Input
0B3472             0039*  GPIOMODE_DIO:		EQU		2	; Open Drain IO
0B3472             0040*  GPIOMODE_SIO:		EQU		3	; Open Source IO
0B3472             0041*  GPIOMODE_INTD:		EQU		4	; Interrupt, Dual Edge
0B3472             0042*  GPIOMODE_ALTF:		EQU		5;	; Alt Function
0B3472             0043*  GPIOMODE_INTAL:		EQU		6	; Interrupt, Active Low
0B3472             0044*  GPIOMODE_INTAH:		EQU		7	; Interrupt, Active High
0B3472             0045*  GPIOMODE_INTFE:		EQU		8	; Interrupt, Falling Edge
0B3472             0046*  GPIOMODE_INTRE:		EQU		9	; Interrupt, Rising Edge
0B3472             0047*  
0B3472             0048*  ; Originally in ram.asm
0B3472             0049*  ;
0B3472             0050*  OC:			EQU     STAVAR+15*4     ; CODE ORIGIN (O%)
0B3472             0051*  PC:			EQU     STAVAR+16*4     ; PROGRAM COUNTER (P%)
0B3472             0052*  VDU_BUFFER:		EQU	ACCS		; Storage for VDU commands
0B3472             0053*  
0B3472             0054*  ; Originally in main.asm
0B3472             0055*  ;
0B3472             0056*  CR:			EQU     0DH
0B3472             0057*  LF:			EQU     0AH
0B3472             0058*  ESC:			EQU     1BH
0B3472             0385       INCLUDE "basic/macros.inc"
0B3472             0001*  	; Title:	BBC Basic Interpreter - Z80 version
0B3472             0002*  	;		Useful macros
0B3472             0003*  	; Author:	Dean Belfield
0B3472             0004*  	; Created:	12/05/2023
0B3472             0005*  	; Last Updated:	11/06/2023
0B3472             0006*  	;
0B3472             0007*  	; Modinfo:
0B3472             0008*  	; 11/06/2023:	Modified to run in ADL mode
0B3472             0009*  	; 11/06/2024:   Make compatible with ez80asm by Brandon R. Gates
0B3472             0010*  
0B3472             0011*  	MACRO EXREG	rp1, rp2
0B3472             0012*  		PUSH	rp1
0B3472             0013*  		POP	rp2
0B3472             0014*  	ENDMACRO
0B3472             0015*  
0B3472             0016*  	; MACRO ADD8U_DE	reg
0B3472             0017*  		MACRO ADD8U_DE
0B3472             0018*  		ADD	A, E
0B3472             0019*  		LD	E, A
0B3472             0020*  		ADC	A, D
0B3472             0021*  		SUB	E
0B3472             0022*  		LD	D, A
0B3472             0023*  	ENDMACRO
0B3472             0024*  
0B3472             0025*  	; MACRO ADD8U_HL	reg
0B3472             0026*  	MACRO ADD8U_HL
0B3472             0027*  		ADD	A, L
0B3472             0028*  		LD	L, A
0B3472             0029*  		ADC	A, H
0B3472             0030*  		SUB	L
0B3472             0031*  		LD	H, A
0B3472             0032*  	ENDMACRO
0B3472             0033*  
0B3472             0034*  	MACRO VDU	val
0B3472             0035*  		LD	A, val
0B3472             0036*  		CALL	OSWRCH
0B3472             0037*  	ENDMACRO
0B3472             0038*  
0B3472             0039*  	MACRO SET_GPIO	reg, val
0B3472             0040*  		IN0	A, (reg)
0B3472             0041*  		OR	val
0B3472             0042*  		OUT0	(reg), A
0B3472             0043*  	ENDMACRO
0B3472             0044*  
0B3472             0045*  	MACRO RES_GPIO	reg, val
0B3472             0046*  		PUSH	BC
0B3472             0047*  		LD	A, val
0B3472             0048*  		CPL
0B3472             0049*  		LD	C, A
0B3472             0050*  		IN0	A, (reg)
0B3472             0051*  		AND	C
0B3472             0052*  		OUT0	(reg), A
0B3472             0053*  		POP	BC
0B3472             0054*  	ENDMACRO
0B3472             0386       include "basic/fpp.asm"
0B3472             0001*  ;
0B3472             0002*  ; Title:	BBC Basic Interpreter - Z80 version
0B3472             0003*  ;		Z80 Floating Point Package
0B3472             0004*  ; Author:	(C) Copyright  R.T.Russell  1986
0B3472             0005*  ; Modified By:	Dean Belfield
0B3472             0006*  ; Created:	03/05/2022
0B3472             0007*  ; Last Updated:	07/06/2023
0B3472             0008*  ;
0B3472             0009*  ; Modinfo:
0B3472             0010*  ; 26/10/1986:	Version 0.0
0B3472             0011*  ; 14/12/1988:	Vesion 0.1 (Bug Fix)
0B3472             0012*  ; 12/05/2023:	Modified by Dean Belfield
0B3472             0013*  ; 07/06/2023:	Modified to run in ADL mode
0B3472             0014*  
0B3472             0015*  			.ASSUME	ADL = 1
0B3472             0016*  
0B3472             0017*  			; SEGMENT CODE
0B3472             0018*  
0B3472             0019*  			; XDEF	FPP
0B3472             0020*  			; XDEF	DLOAD5
0B3472             0021*  			; XDEF	DLOAD5_SPL
0B3472             0022*  ;
0B3472             0023*  ;BINARY FLOATING POINT REPRESENTATION:
0B3472             0024*  ;   32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
0B3472             0025*  ;    8 BIT EXCESS-128 SIGNED EXPONENT
0B3472             0026*  ;   SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
0B3472             0027*  ;   MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
0B3472             0028*  ;
0B3472             0029*  ;BINARY INTEGER REPRESENTATION:
0B3472             0030*  ;   32 BIT 2'S-COMPLEMENT SIGNED INTEGER
0B3472             0031*  ;    "EXPONENT" BYTE = 0 (WHEN PRESENT)
0B3472             0032*  ;
0B3472             0033*  ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
0B3472             0034*  ;                            EXPONENT - C
0B3472             0035*  ;ALTERNATE REGISTER ALLOCATION: MANTISSA - DED'E'
0B3472             0036*  ;                               EXPONENT - B
0B3472             0037*  
0B3472             0038*  ;
0B3472             0039*  ;Error codes:
0B3472             0040*  ;
0B3472             0041*  
0B3472             0042*  BADOP:			EQU     1               ;Bad operation code
0B3472             0043*  DIVBY0:			EQU     18              ;Division by zero
0B3472             0044*  TOOBIG:			EQU     20              ;Too big
0B3472             0045*  NGROOT:			EQU     21              ;Negative root
0B3472             0046*  LOGRNG:			EQU     22              ;Log range
0B3472             0047*  ACLOST:			EQU     23              ;Accuracy lost
0B3472             0048*  EXPRNG:			EQU     24              ;Exp range
0B3472             0049*  ;
0B3472             0050*  ;Call entry and despatch code:
0B3472             0051*  ;
0B3472 FD E5       0052*  FPP:			PUSH    IY              ;Save IY
0B3474 FD 21 00 00 0053*          		LD      IY,0
       00          
0B3479 FD 39       0054*          		ADD     IY,SP           ;Save SP in IY
0B347B CD 8B 34 0B 0055*          		CALL    OP              ;Perform operation
0B347F BF          0056*          		CP      A               ;Good return (Z, NC)
0B3480 FD E1       0057*  EXIT_:			POP     IY              ;Restore IY
0B3482 C9          0058*          		RET                     ;Return to caller
0B3483             0059*  ;
0B3483             0060*  ;Error exit:
0B3483             0061*  ;
0B3483 3E 01       0062*  BAD:			LD      A,BADOP         ;"Bad operation code"
0B3485 FD F9       0063*  ERROR_FP:			LD      SP,IY           ;Restore SP from IY
0B3487 B7          0064*          		OR      A               ;Set NZ
0B3488 37          0065*          		SCF                     ;Set C
0B3489 18 F5       0066*          		JR      EXIT_
0B348B             0067*  ;
0B348B             0068*  ;Perform operation or function:
0B348B             0069*  ;
0B348B             0070*  ; OP:			CP      (RTABLE-DTABLE)/3
0B348B FE 2A       0071*  OP:				CP      RTABLE-DTABLE/3 ; ez80asm doesn't do nested expressions
0B348D 30 F4       0072*          		JR      NC,BAD
0B348F             0073*          		; CP      (FTABLE-DTABLE)/3
0B348F FE 10       0074*          		CP      FTABLE-DTABLE/3 ; ditto
0B3491 30 08       0075*          		JR      NC,DISPATCH
0B3493 08          0076*          		EX      AF,AF'
0B3494 78          0077*          		LD      A,B
0B3495 B1          0078*          		OR      C               ;Both integer?
0B3496 C4 9E 3F 0B 0079*          		CALL    NZ,FLOATA       ;No, so float both
0B349A 08          0080*          		EX      AF,AF'
0B349B E5          0081*  DISPATCH:			PUSH    HL
0B349C 21 AE 34 0B 0082*          		LD      HL,DTABLE
0B34A0 C5          0083*          		PUSH    BC
0B34A1 01 03 00 00 0084*  			LD	BC, 3		; C = 3
0B34A5 47          0085*  			LD	B, A 		; B = op-code
0B34A6 ED 4C       0086*  			MLT 	BC 		;BC = op-code * 3
0B34A8 09          0087*  			ADD	HL, BC 		;Add to table base
0B34A9 ED 27       0088*  			LD	HL, (HL)	;Get the routine address (24-bit)
0B34AB             0089*  
0B34AB             0090*  ;        		ADD     A, A            ;A = op-code * 2
0B34AB             0091*  ;        		LD      C,A
0B34AB             0092*  ;        		LD      B,0             ;BC = op-code * 2
0B34AB             0093*  ;        		ADD     HL,BC
0B34AB             0094*  ;        		LD      A,(HL)          ;Get low byte
0B34AB             0095*  ;        		INC     HL
0B34AB             0096*  ;        		LD      H,(HL)          ;Get high byte
0B34AB             0097*  ;        		LD      L,A
0B34AB             0098*  
0B34AB C1          0099*          		POP     BC
0B34AC E3          0100*          		EX      (SP),HL
0B34AD C9          0101*          		RET                     ;Off to routine
0B34AE             0102*  ;
0B34AE             0103*  ;Despatch table:
0B34AE             0104*  ;
0B34AE 60 35 0B    0105*  DTABLE:			DW24  IAND            ;AND (INTEGER)
0B34B1 CE 35 0B    0106*          		DW24  IBDIV           ;DIV
0B34B4 73 35 0B    0107*          		DW24  IEOR            ;EOR
0B34B7 99 35 0B    0108*          		DW24  IMOD            ;MOD
0B34BA 86 35 0B    0109*          		DW24  IOR             ;OR
0B34BD 54 38 0B    0110*          		DW24  ILE             ;<=
0B34C0 63 38 0B    0111*          		DW24  INE             ;<>
0B34C3 47 38 0B    0112*          		DW24  IGE             ;>=
0B34C6 2C 38 0B    0113*          		DW24  ILT             ;<
0B34C9 70 38 0B    0114*          		DW24  IEQ             ;=
0B34CC BC 36 0B    0115*          		DW24  IMUL            ;*
0B34CF F7 35 0B    0116*          		DW24  IADD            ;+
0B34D2 39 38 0B    0117*          		DW24  IGT             ;>
0B34D5 DE 35 0B    0118*          		DW24  ISUB            ;-
0B34D8 73 37 0B    0119*          		DW24  IPOW            ;^
0B34DB 69 36 0B    0120*          		DW24  IDIV            ;/
0B34DE             0121*  ;
0B34DE 82 38 0B    0122*  FTABLE:			DW24  ABSV            ;ABS
0B34E1 68 3C 0B    0123*          		DW24  ACS             ;ACS
0B34E4 A6 3B 0B    0124*          		DW24  ASN             ;ASN
0B34E7 D6 3B 0B    0125*          		DW24  ATN             ;ATN
0B34EA A1 39 0B    0126*          		DW24  COS             ;COS
0B34ED B0 38 0B    0127*          		DW24  DEG             ;DEG
0B34F0 5D 3A 0B    0128*          		DW24  EXP             ;EXP
0B34F3 04 39 0B    0129*          		DW24  INT_            ;INT
0B34F6 FB 3A 0B    0130*          		DW24  LN              ;LN
0B34F9 90 3B 0B    0131*          		DW24  LOG             ;LOG
0B34FC 8E 38 0B    0132*          		DW24  NOTK            ;NOT
0B34FF BA 38 0B    0133*          		DW24  RAD             ;RAD
0B3502 D5 38 0B    0134*          		DW24  SGN             ;SGN
0B3505 AE 39 0B    0135*          		DW24  SIN             ;SIN
0B3508 1D 39 0B    0136*          		DW24  SQR             ;SQR
0B350B 7B 39 0B    0137*          		DW24  TAN             ;TAN
0B350E             0138*  ;
0B350E 2B 40 0B    0139*  		        DW24  FPZERO            ;ZERO
0B3511 36 3A 0B    0140*          		DW24  FONE            ;FONE
0B3514 75 38 0B    0141*          		DW24  TRUE            ;TRUE
0B3517 A2 38 0B    0142*          		DW24  PI              ;PI
0B351A             0143*  ;
0B351A E9 38 0B    0144*  		        DW24  VAL             ;VAL
0B351D 71 3C 0B    0145*          		DW24  STRING             ;STRING$
0B3520             0146*  ;
0B3520 D2 3E 0B    0147*          		DW24  SFIX_FP            ;FIX
0B3523 AE 3F 0B    0148*          		DW24  SFLOAT          ;FLOAT
0B3526             0149*  ;
0B3526 FC 3F 0B    0150*  		        DW24  FTEST           ;TEST
0B3529 0E 40 0B    0151*          		DW24  FCOMP           ;COMPARE
0B352C             0152*  ;
0B352C 5C 35 0B    0153*  RTABLE:			DW24  FAND            ;AND (FLOATING-POINT)
0B352F CA 35 0B    0154*          		DW24  FBDIV           ;DIV
0B3532 6F 35 0B    0155*          		DW24  FEOR            ;EOR
0B3535 95 35 0B    0156*          		DW24  FMOD            ;MOD
0B3538 82 35 0B    0157*          		DW24  FFOR             ;OR (FLOATING-POINT)
0B353B 4E 38 0B    0158*          		DW24  FLE             ;<=
0B353E 5D 38 0B    0159*          		DW24  FNE             ;<>
0B3541 41 38 0B    0160*          		DW24  FGE             ;>=
0B3544 26 38 0B    0161*          		DW24  FLT             ;<
0B3547 6A 38 0B    0162*          		DW24  FEQ             ;=
0B354A 16 37 0B    0163*          		DW24  FMUL            ;*
0B354D 04 36 0B    0164*          		DW24  FADD            ;+
0B3550 33 38 0B    0165*          		DW24  FGT             ;>
0B3553 EB 35 0B    0166*          		DW24  FSUB            ;-
0B3556 F3 37 0B    0167*          		DW24  FPOW            ;^
0B3559 6D 36 0B    0168*          		DW24  FDIV            ;/
0B355C             0169*  ;
0B355C             0170*  ;       PAGE
0B355C             0171*  ;
0B355C             0172*  ;ARITHMETIC AND LOGICAL OPERATORS:
0B355C             0173*  ;All take two arguments, in HLH'L'C & DED'E'B.
0B355C             0174*  ;Output in HLH'L'C
0B355C             0175*  ;All registers except IX, IY destroyed.
0B355C             0176*  ; (N.B. FPOW destroys IX).
0B355C             0177*  ;
0B355C             0178*  ;FAND - Floating-point AND.
0B355C             0179*  ;IAND - Integer AND.
0B355C             0180*  ;
0B355C CD C6 3E 0B 0181*  FAND:			CALL    FIX2
0B3560 7C          0182*  IAND:			LD      A,H
0B3561 A2          0183*          		AND     D
0B3562 67          0184*          		LD      H,A
0B3563 7D          0185*          		LD      A,L
0B3564 A3          0186*          		AND     E
0B3565 6F          0187*          		LD      L,A
0B3566 D9          0188*          		EXX
0B3567 7C          0189*          		LD      A,H
0B3568 A2          0190*          		AND     D
0B3569 67          0191*          		LD      H,A
0B356A 7D          0192*          		LD      A,L
0B356B A3          0193*          		AND     E
0B356C 6F          0194*          		LD      L,A
0B356D D9          0195*          		EXX
0B356E C9          0196*          		RET
0B356F             0197*  ;
0B356F             0198*  ;FEOR - Floating-point exclusive-OR.
0B356F             0199*  ;IEOR - Integer exclusive-OR.
0B356F             0200*  ;
0B356F CD C6 3E 0B 0201*  FEOR:			CALL    FIX2
0B3573 7C          0202*  IEOR:			LD      A,H
0B3574 AA          0203*          		XOR     D
0B3575 67          0204*          		LD      H,A
0B3576 7D          0205*          		LD      A,L
0B3577 AB          0206*          		XOR     E
0B3578 6F          0207*          		LD      L,A
0B3579 D9          0208*          		EXX
0B357A 7C          0209*          		LD      A,H
0B357B AA          0210*          		XOR     D
0B357C 67          0211*          		LD      H,A
0B357D 7D          0212*          		LD      A,L
0B357E AB          0213*          		XOR     E
0B357F 6F          0214*          		LD      L,A
0B3580 D9          0215*          		EXX
0B3581 C9          0216*          		RET
0B3582             0217*  ;
0B3582             0218*  ;FFOR - Floating-point OR.
0B3582             0219*  ;IOR - Integer OR.
0B3582             0220*  ;
0B3582 CD C6 3E 0B 0221*  FFOR:			CALL    FIX2
0B3586 7C          0222*  IOR:			LD      A,H
0B3587 B2          0223*          		OR      D
0B3588 67          0224*          		LD      H,A
0B3589 7D          0225*          		LD      A,L
0B358A B3          0226*          		OR      E
0B358B 6F          0227*          		LD      L,A
0B358C D9          0228*          		EXX
0B358D 7C          0229*          		LD      A,H
0B358E B2          0230*          		OR      D
0B358F 67          0231*          		LD      H,A
0B3590 7D          0232*          		LD      A,L
0B3591 B3          0233*          		OR      E
0B3592 6F          0234*          		LD      L,A
0B3593 D9          0235*          		EXX
0B3594 C9          0236*          		RET
0B3595             0237*  ;
0B3595             0238*  ;FMOD - Floating-point remainder.
0B3595             0239*  ;IMOD - Integer remainder.
0B3595             0240*  ;
0B3595 CD C6 3E 0B 0241*  FMOD:			CALL    FIX2
0B3599 7C          0242*  IMOD:			LD      A,H
0B359A AA          0243*          		XOR     D               ;DIV RESULT SIGN
0B359B CB 7C       0244*          		BIT     7,H
0B359D 08          0245*          		EX      AF,AF'
0B359E CB 7C       0246*          		BIT     7,H
0B35A0 C4 E2 3E 0B 0247*          		CALL    NZ,NEGATE       ;MAKE ARGUMENTS +VE
0B35A4 CD DF 3F 0B 0248*          		CALL    SWAP_FP
0B35A8 CB 7C       0249*          		BIT     7,H
0B35AA C4 E2 3E 0B 0250*          		CALL    NZ,NEGATE
0B35AE 44          0251*          		LD      B,H
0B35AF 4D          0252*          		LD      C,L
0B35B0 21 00 00 00 0253*          		LD      HL,0
0B35B4 D9          0254*          		EXX
0B35B5 44          0255*          		LD      B,H
0B35B6 4D          0256*          		LD      C,L
0B35B7 21 00 00 00 0257*          		LD      HL,0
0B35BB 3E DF       0258*          		LD      A,-33
0B35BD CD 6C 41 0B 0259*          		CALL    DIVA            ;DIVIDE
0B35C1 D9          0260*          		EXX
0B35C2 0E 00       0261*          		LD      C,0             ;INTEGER MARKER
0B35C4 08          0262*          		EX      AF,AF'
0B35C5 C8          0263*          		RET     Z
0B35C6 C3 E2 3E 0B 0264*          		JP      NEGATE
0B35CA             0265*  ;
0B35CA             0266*  ;BDIV - Integer division.
0B35CA             0267*  ;
0B35CA CD C6 3E 0B 0268*  FBDIV:			CALL    FIX2
0B35CE CD 99 35 0B 0269*  IBDIV:			CALL    IMOD
0B35D2 B7          0270*          		OR      A
0B35D3 CD DF 3F 0B 0271*          		CALL    SWAP_FP
0B35D7 0E 00       0272*          		LD      C,0
0B35D9 F0          0273*          		RET     P
0B35DA C3 E2 3E 0B 0274*          		JP      NEGATE
0B35DE             0275*  ;
0B35DE             0276*  ;ISUB - Integer subtraction.
0B35DE             0277*  ;FSUB - Floating point subtraction with rounding.
0B35DE             0278*  ;
0B35DE CD 7A 40 0B 0279*  ISUB:			CALL    SUB_
0B35E2 E0          0280*          		RET     PO
0B35E3 CD 72 40 0B 0281*          		CALL    ADD_
0B35E7 CD A2 3F 0B 0282*          		CALL    FLOAT2
0B35EB 7A          0283*  FSUB:			LD      A,D
0B35EC EE 80       0284*          		XOR     80H             ;CHANGE SIGN THEN ADD
0B35EE 57          0285*          		LD      D,A
0B35EF 18 13       0286*          		JR      FADD
0B35F1             0287*  ;
0B35F1             0288*  ;Reverse subtract.
0B35F1             0289*  ;
0B35F1 7C          0290*  RSUB:			LD      A,H
0B35F2 EE 80       0291*          		XOR     80H
0B35F4 67          0292*          		LD      H,A
0B35F5 18 0D       0293*          		JR      FADD
0B35F7             0294*  ;
0B35F7             0295*  ;IADD - Integer addition.
0B35F7             0296*  ;FADD - Floating point addition with rounding.
0B35F7             0297*  ;
0B35F7 CD 72 40 0B 0298*  IADD:			CALL    ADD_
0B35FB E0          0299*          		RET     PO
0B35FC CD 7A 40 0B 0300*          		CALL    SUB_
0B3600 CD A2 3F 0B 0301*          		CALL    FLOAT2
0B3604 05          0302*  FADD:			DEC     B
0B3605 04          0303*          		INC     B
0B3606 C8          0304*          		RET     Z               ;ARG 2 ZERO
0B3607 0D          0305*          		DEC     C
0B3608 0C          0306*          		INC     C
0B3609 CA DF 3F 0B 0307*          		JP      Z,SWAP_FP          ;ARG 1 ZERO
0B360D D9          0308*          		EXX
0B360E 01 00 00 00 0309*          		LD      BC,0            ;INITIALISE
0B3612 D9          0310*          		EXX
0B3613 7C          0311*          		LD      A,H
0B3614 AA          0312*          		XOR     D               ;XOR SIGNS
0B3615 F5          0313*          		PUSH    AF
0B3616 78          0314*          		LD      A,B
0B3617 B9          0315*          		CP      C               ;COMPARE EXPONENTS
0B3618 DC DF 3F 0B 0316*          		CALL    C,SWAP_FP          ;MAKE DED'E'B LARGEST
0B361C 78          0317*          		LD      A,B
0B361D CB FC       0318*          		SET     7,H             ;IMPLIED 1
0B361F C4 B3 3E 0B 0319*          		CALL    NZ,FIX          ;ALIGN
0B3623 F1          0320*          		POP     AF
0B3624 7A          0321*          		LD      A,D             ;SIGN OF LARGER
0B3625 CB FA       0322*          		SET     7,D             ;IMPLIED 1
0B3627 FA 37 36 0B 0323*          		JP      M,FADD3         ;SIGNS DIFFERENT
0B362B CD 72 40 0B 0324*          		CALL    ADD_             ;HLH'L'=HLH'L'+DED'E'
0B362F DC E7 3F 0B 0325*          		CALL    C,DIV2          ;NORMALISE
0B3633 CB FC       0326*          		SET     7,H
0B3635 18 0D       0327*          		JR      FADD4
0B3637             0328*  ;
0B3637 CD 7A 40 0B 0329*  FADD3:			CALL    SUB_             ;HLH'L'=HLH'L'-DED'E'
0B363B DC FA 3E 0B 0330*          		CALL    C,NEG_           ;NEGATE HLH'L'B'C'
0B363F CD 79 3F 0B 0331*          		CALL    FLO48
0B3643 2F          0332*          		CPL                     ;CHANGE RESULT SIGN
0B3644 D9          0333*  FADD4:			EXX
0B3645 EB          0334*          		EX      DE,HL
0B3646 21 00 80 00 0335*          		LD      HL,8000H
0B364A B7          0336*          		OR      A               ;CLEAR CARRY
0B364B 52 ED 42    0337*          		SBC.S   HL,BC
0B364E EB          0338*          		EX      DE,HL
0B364F D9          0339*          		EXX
0B3650 CC D9 3F 0B 0340*          		CALL    Z,ODD           ;ROUND UNBIASSED
0B3654 DC C7 3F 0B 0341*          		CALL    C,ADD1          ;ROUND UP
0B3658 DC F4 3F 0B 0342*          		CALL    C,INCC
0B365C CB BC       0343*          		RES     7,H
0B365E 0D          0344*          		DEC     C
0B365F 0C          0345*          		INC     C
0B3660 CA 2B 40 0B 0346*          		JP      Z,FPZERO
0B3664 B7          0347*          		OR      A               ;RESULT SIGNQ
0B3665 F0          0348*          		RET     P               ;POSITIVE
0B3666 CB FC       0349*          		SET     7,H             ;NEGATIVE
0B3668 C9          0350*          		RET
0B3669             0351*  ;
0B3669             0352*  ;IDIV - Integer division.
0B3669             0353*  ;FDIV - Floating point division with rounding.
0B3669             0354*  ;
0B3669 CD A2 3F 0B 0355*  IDIV:			CALL    FLOAT2
0B366D 05          0356*  FDIV:			DEC     B               ;TEST FOR ZERO
0B366E 04          0357*          		INC     B
0B366F 3E 12       0358*          		LD      A,DIVBY0
0B3671 CA 85 34 0B 0359*          		JP      Z,ERROR_FP         ;"Division by zero"
0B3675 0D          0360*          		DEC     C               ;TEST FOR ZERO
0B3676 0C          0361*          		INC     C
0B3677 C8          0362*          		RET     Z
0B3678 7C          0363*          		LD      A,H
0B3679 AA          0364*          		XOR     D               ;CALC. RESULT SIGN
0B367A 08          0365*          		EX      AF,AF'          ;SAVE SIGN
0B367B CB FA       0366*          		SET     7,D             ;REPLACE IMPLIED 1's
0B367D CB FC       0367*          		SET     7,H
0B367F C5          0368*          		PUSH    BC              ;SAVE EXPONENTS
0B3680 42          0369*          		LD      B,D             ;LOAD REGISTERS
0B3681 4B          0370*          		LD      C,E
0B3682 11 00 00 00 0371*          		LD      DE,0
0B3686 D9          0372*          		EXX
0B3687 42          0373*          		LD      B,D
0B3688 4B          0374*          		LD      C,E
0B3689 11 00 00 00 0375*          		LD      DE,0
0B368D 3E E0       0376*          		LD      A,-32           ;LOOP COUNTER
0B368F CD 6C 41 0B 0377*          		CALL    DIVA            ;DIVIDE
0B3693 D9          0378*          		EXX
0B3694 CB 7A       0379*          		BIT     7,D
0B3696 D9          0380*          		EXX
0B3697 CC 8B 41 0B 0381*          		CALL    Z,DIVB          ;NORMALISE & INC A
0B369B EB          0382*          		EX      DE,HL
0B369C D9          0383*          		EXX
0B369D CB 38       0384*          		SRL     B               ;DIVISOR/2
0B369F CB 19       0385*          		RR      C
0B36A1 B7          0386*          		OR      A               ;CLEAR CARRY
0B36A2 52 ED 42    0387*          		SBC.S   HL,BC           ;REMAINDER-DIVISOR/2
0B36A5 3F          0388*          		CCF
0B36A6 EB          0389*          		EX      DE,HL           ;RESULT IN HLH'L'
0B36A7 CC D9 3F 0B 0390*          		CALL    Z,ODD           ;ROUND UNBIASSED
0B36AB DC C7 3F 0B 0391*          		CALL    C,ADD1          ;ROUND UP
0B36AF C1          0392*          		POP     BC              ;RESTORE EXPONENTS
0B36B0 DC F4 3F 0B 0393*          		CALL    C,INCC
0B36B4 1F          0394*          		RRA                     ;LSB OF A TO CARRY
0B36B5 79          0395*          		LD      A,C             ;COMPUTE NEW EXPONENT
0B36B6 98          0396*          		SBC     A,B
0B36B7 3F          0397*          		CCF
0B36B8 C3 59 37 0B 0398*          		JP      CHKOVF
0B36BC             0399*  ;
0B36BC             0400*  ;IMUL - Integer multiplication.
0B36BC             0401*  ;
0B36BC 7C          0402*  IMUL:			LD      A,H
0B36BD AA          0403*          		XOR     D
0B36BE 08          0404*          		EX      AF,AF'          ;SAVE RESULT SIGN
0B36BF CB 7C       0405*          		BIT     7,H
0B36C1 C4 E2 3E 0B 0406*          		CALL    NZ,NEGATE
0B36C5 CD DF 3F 0B 0407*          		CALL    SWAP_FP
0B36C9 CB 7C       0408*          		BIT     7,H
0B36CB C4 E2 3E 0B 0409*          		CALL    NZ,NEGATE
0B36CF 44          0410*          		LD      B,H
0B36D0 4D          0411*          		LD      C,L
0B36D1 21 00 00 00 0412*          		LD      HL,0
0B36D5 D9          0413*          		EXX
0B36D6 44          0414*          		LD      B,H
0B36D7 4D          0415*          		LD      C,L
0B36D8 21 00 00 00 0416*          		LD      HL,0
0B36DC 3E DF       0417*          		LD      A,-33
0B36DE CD A3 41 0B 0418*          		CALL    MULA            ;MULTIPLY
0B36E2 D9          0419*          		EXX
0B36E3 0E BF       0420*          		LD      C,191           ;PRESET EXPONENT
0B36E5 CD 07 40 0B 0421*          		CALL    TEST_FP            ;TEST RANGE
0B36E9 20 0F       0422*          		JR      NZ,IMUL1        ;TOO BIG
0B36EB CB 7A       0423*          		BIT     7,D
0B36ED 20 0B       0424*          		JR      NZ,IMUL1
0B36EF CD DF 3F 0B 0425*          		CALL    SWAP_FP
0B36F3 4A          0426*          		LD      C,D             ;INTEGER MARKER
0B36F4 08          0427*          		EX      AF,AF'
0B36F5 F0          0428*          		RET     P
0B36F6 C3 E2 3E 0B 0429*          		JP      NEGATE
0B36FA             0430*  ;
0B36FA 0D          0431*  IMUL1:			DEC     C
0B36FB D9          0432*          		EXX
0B36FC CB 23       0433*          		SLA     E
0B36FE CB 12       0434*          		RL      D
0B3700 D9          0435*          		EXX
0B3701 CB 13       0436*          		RL      E
0B3703 CB 12       0437*          		RL      D
0B3705 D9          0438*          		EXX
0B3706 52 ED 6A    0439*          		ADC.S   HL,HL
0B3709 D9          0440*          		EXX
0B370A 52 ED 6A    0441*          		ADC.S   HL,HL
0B370D F2 FA 36 0B 0442*          		JP      P,IMUL1         ;NORMALISE
0B3711 08          0443*          		EX      AF,AF'
0B3712 F8          0444*          		RET     M
0B3713 CB BC       0445*          		RES     7,H             ;POSITIVE
0B3715 C9          0446*          		RET
0B3716             0447*  ;
0B3716             0448*  ;FMUL - Floating point multiplication with rounding.
0B3716             0449*  ;
0B3716 05          0450*  FMUL:			DEC     B               ;TEST FOR ZERO
0B3717 04          0451*          		INC     B
0B3718 CA 2B 40 0B 0452*          		JP      Z,FPZERO
0B371C 0D          0453*          		DEC     C               ;TEST FOR ZERO
0B371D 0C          0454*          		INC     C
0B371E C8          0455*          		RET     Z
0B371F 7C          0456*          		LD      A,H
0B3720 AA          0457*          		XOR     D               ;CALC. RESULT SIGN
0B3721 08          0458*          		EX      AF,AF'
0B3722 CB FA       0459*          		SET     7,D             ;REPLACE IMPLIED 1's
0B3724 CB FC       0460*          		SET     7,H
0B3726 C5          0461*          		PUSH    BC              ;SAVE EXPONENTS
0B3727 44          0462*          		LD      B,H             ;LOAD REGISTERS
0B3728 4D          0463*          		LD      C,L
0B3729 21 00 00 00 0464*          		LD      HL,0
0B372D D9          0465*          		EXX
0B372E 44          0466*          		LD      B,H
0B372F 4D          0467*          		LD      C,L
0B3730 21 00 00 00 0468*          		LD      HL,0
0B3734 3E E0       0469*          		LD      A,-32           ;LOOP COUNTER
0B3736 CD A3 41 0B 0470*          		CALL    MULA            ;MULTIPLY
0B373A DC B9 41 0B 0471*          		CALL    C,MULB          ;NORMALISE & INC A
0B373E D9          0472*          		EXX
0B373F E5          0473*          		PUSH    HL
0B3740 21 00 80 00 0474*          		LD      HL,8000H
0B3744 B7          0475*          		OR      A               ;CLEAR CARRY
0B3745 52 ED 52    0476*          		SBC.S   HL,DE
0B3748 E1          0477*          		POP     HL
0B3749 CC D9 3F 0B 0478*          		CALL    Z,ODD           ;ROUND UNBIASSED
0B374D DC C7 3F 0B 0479*          		CALL    C,ADD1          ;ROUND UP
0B3751 C1          0480*          		POP     BC              ;RESTORE EXPONENTS
0B3752 DC F4 3F 0B 0481*          		CALL    C,INCC
0B3756 1F          0482*          		RRA                     ;LSB OF A TO CARRY
0B3757 79          0483*          		LD      A,C             ;COMPUTE NEW EXPONENT
0B3758 88          0484*          		ADC     A,B
0B3759 38 06       0485*  CHKOVF:			JR      C,CHKO1
0B375B F2 2B 40 0B 0486*          		JP      P,FPZERO          ;UNDERFLOW
0B375F 18 04       0487*          		JR      CHKO2
0B3761 FA F6 3F 0B 0488*  CHKO1:			JP      M,OFLOW         ;OVERFLOW
0B3765 C6 80       0489*  CHKO2:			ADD     A,80H
0B3767 4F          0490*          		LD      C,A
0B3768 CA 2B 40 0B 0491*          		JP      Z,FPZERO
0B376C 08          0492*          		EX      AF,AF'          ;RESTORE SIGN BIT
0B376D CB BC       0493*          		RES     7,H
0B376F F0          0494*          		RET     P
0B3770 CB FC       0495*          		SET     7,H
0B3772 C9          0496*          		RET
0B3773             0497*  ;
0B3773             0498*  ;IPOW - Integer involution.
0B3773             0499*  ;
0B3773 CD DF 3F 0B 0500*  IPOW:			CALL    SWAP_FP
0B3777 CB 7C       0501*          		BIT     7,H
0B3779 F5          0502*          		PUSH    AF              ;SAVE SIGN
0B377A C4 E2 3E 0B 0503*          		CALL    NZ,NEGATE
0B377E 48          0504*  IPOW0:			LD      C,B
0B377F 06 20       0505*          		LD      B,32            ;LOOP COUNTER
0B3781 CD 97 40 0B 0506*  IPOW1:			CALL    X2
0B3785 38 08       0507*          		JR      C,IPOW2
0B3787 10 F8       0508*          		DJNZ    IPOW1
0B3789 F1          0509*          		POP     AF
0B378A D9          0510*          		EXX
0B378B 2C          0511*          		INC     L               ;RESULT=1
0B378C D9          0512*          		EXX
0B378D 4C          0513*          		LD      C,H
0B378E C9          0514*          		RET
0B378F             0515*  ;
0B378F F1          0516*  IPOW2:			POP     AF
0B3790 C5          0517*          		PUSH    BC
0B3791 EB          0518*          		EX      DE,HL
0B3792 E5          0519*          		PUSH    HL
0B3793 D9          0520*          		EXX
0B3794 EB          0521*          		EX      DE,HL
0B3795 E5          0522*          		PUSH    HL
0B3796 D9          0523*          		EXX
0B3797 DD 21 00 00 0524*          		LD      IX,0
       00          
0B379C DD 39       0525*          		ADD     IX,SP
0B379E 28 48       0526*          		JR      Z,IPOW4
0B37A0 C5          0527*          		PUSH    BC
0B37A1 D9          0528*          		EXX
0B37A2 D5          0529*          		PUSH    DE
0B37A3 D9          0530*          		EXX
0B37A4 D5          0531*          		PUSH    DE
0B37A5 CD AE 3F 0B 0532*          		CALL    SFLOAT
0B37A9 CD E2 3A 0B 0533*          		CALL    RECIP
0B37AD DD 71 04    0534*          		LD      (IX+4),C
0B37B0 D9          0535*          		EXX
0B37B1 DD 75 00    0536*          		LD      (IX+0),L
0B37B4 DD 74 01    0537*          		LD      (IX+1),H
0B37B7 D9          0538*          		EXX
0B37B8 DD 75 02    0539*          		LD      (IX+2),L
0B37BB DD 74 03    0540*          		LD      (IX+3),H
0B37BE 18 21       0541*          		JR      IPOW5
0B37C0             0542*  ;
0B37C0 C5          0543*  IPOW3:			PUSH    BC
0B37C1 D9          0544*          		EXX
0B37C2 CB 23       0545*          		SLA     E
0B37C4 CB 12       0546*          		RL      D
0B37C6 D5          0547*          		PUSH    DE
0B37C7 D9          0548*          		EXX
0B37C8 CB 13       0549*          		RL      E
0B37CA CB 12       0550*          		RL      D
0B37CC D5          0551*          		PUSH    DE
0B37CD 3E 0A       0552*          		LD      A,'*' & 0FH
0B37CF F5          0553*          		PUSH    AF
0B37D0 CD AB 40 0B 0554*          		CALL    COPY_
0B37D4 CD 8B 34 0B 0555*          		CALL    OP              ;SQUARE
0B37D8 F1          0556*          		POP     AF
0B37D9 CD D7 3D 0B 0557*          		CALL    DLOAD5
0B37DD DC 8B 34 0B 0558*          		CALL    C,OP            ;MULTIPLY BY X
0B37E1 D1          0559*  IPOW5:			POP     DE
0B37E2 D9          0560*          		EXX
0B37E3 D1          0561*          		POP     DE
0B37E4 D9          0562*          		EXX
0B37E5 79          0563*          		LD      A,C
0B37E6 C1          0564*          		POP     BC
0B37E7 4F          0565*          		LD      C,A
0B37E8 10 D6       0566*  IPOW4:			DJNZ    IPOW3
0B37EA F1          0567*          		POP     AF
0B37EB F1          0568*          		POP     AF
0B37EC F1          0569*          		POP     AF
0B37ED C9          0570*          		RET
0B37EE             0571*  ;
0B37EE F1          0572*  FPOW0:			POP     AF
0B37EF F1          0573*          		POP     AF
0B37F0 F1          0574*          		POP     AF
0B37F1 18 8B       0575*          		JR      IPOW0
0B37F3             0576*  ;
0B37F3             0577*  ;FPOW - Floating-point involution.
0B37F3             0578*  ;
0B37F3 CB 7A       0579*  FPOW:			BIT     7,D
0B37F5 F5          0580*          		PUSH    AF
0B37F6 CD DF 3F 0B 0581*          		CALL    SWAP_FP
0B37FA CD BB 40 0B 0582*          		CALL    PUSH5
0B37FE 0D          0583*          		DEC     C
0B37FF 0C          0584*          		INC     C
0B3800 28 EC       0585*          		JR      Z,FPOW0
0B3802 3E 9E       0586*          		LD      A,158
0B3804 B9          0587*          		CP      C
0B3805 38 0A       0588*          		JR      C,FPOW1
0B3807 3C          0589*          		INC     A
0B3808 CD B3 3E 0B 0590*          		CALL    FIX
0B380C 08          0591*          		EX      AF,AF'
0B380D F2 EE 37 0B 0592*          		JP      P,FPOW0
0B3811 CD DF 3F 0B 0593*  FPOW1:			CALL    SWAP_FP
0B3815 CD FF 3A 0B 0594*          		CALL    LN0
0B3819 CD C4 40 0B 0595*          		CALL    POP5
0B381D F1          0596*          		POP     AF
0B381E CD 16 37 0B 0597*          		CALL    FMUL
0B3822 C3 61 3A 0B 0598*          		JP      EXP0
0B3826             0599*  ;
0B3826             0600*  ;Integer and floating-point compare.
0B3826             0601*  ;Result is TRUE (-1) or FALSE (0).
0B3826             0602*  ;
0B3826 CD 35 40 0B 0603*  FLT:			CALL    FCP
0B382A 18 04       0604*          		JR      ILT1
0B382C CD 27 40 0B 0605*  ILT:			CALL    ICP
0B3830 D0          0606*  ILT1:			RET     NC
0B3831 18 42       0607*          		JR      TRUE
0B3833             0608*  ;
0B3833 CD 35 40 0B 0609*  FGT:			CALL    FCP
0B3837 18 04       0610*          		JR      IGT1
0B3839 CD 27 40 0B 0611*  IGT:			CALL    ICP
0B383D C8          0612*  IGT1:			RET     Z
0B383E D8          0613*          		RET     C
0B383F 18 34       0614*          		JR      TRUE
0B3841             0615*  ;
0B3841 CD 35 40 0B 0616*  FGE:			CALL    FCP
0B3845 18 04       0617*          		JR      IGE1
0B3847 CD 27 40 0B 0618*  IGE:			CALL    ICP
0B384B D8          0619*  IGE1:			RET     C
0B384C 18 27       0620*          		JR      TRUE
0B384E             0621*  ;
0B384E CD 35 40 0B 0622*  FLE:			CALL    FCP
0B3852 18 04       0623*          		JR      ILE1
0B3854 CD 27 40 0B 0624*  ILE:			CALL    ICP
0B3858 28 1B       0625*  ILE1:			JR      Z,TRUE
0B385A D0          0626*          		RET     NC
0B385B 18 18       0627*          		JR      TRUE
0B385D             0628*  ;
0B385D CD 35 40 0B 0629*  FNE:			CALL    FCP
0B3861 18 04       0630*          		JR      INE1
0B3863 CD 27 40 0B 0631*  INE:			CALL    ICP
0B3867 C8          0632*  INE1:			RET     Z
0B3868 18 0B       0633*          		JR      TRUE
0B386A             0634*  ;
0B386A CD 35 40 0B 0635*  FEQ:			CALL    FCP
0B386E 18 04       0636*          		JR      IEQ1
0B3870 CD 27 40 0B 0637*  IEQ:			CALL    ICP
0B3874 C0          0638*  IEQ1:			RET     NZ
0B3875 21 FF FF FF 0639*  TRUE:			LD      HL,-1
0B3879 D9          0640*          		EXX
0B387A 21 FF FF FF 0641*          		LD      HL,-1
0B387E D9          0642*          		EXX
0B387F AF          0643*          		XOR     A
0B3880 4F          0644*          		LD      C,A
0B3881 C9          0645*          		RET
0B3882             0646*  ;
0B3882             0647*  ;FUNCTIONS:
0B3882             0648*  ;
0B3882             0649*  ;Result returned in HLH'L'C (floating point)
0B3882             0650*  ;Result returned in HLH'L' (C=0) (integer)
0B3882             0651*  ;All registers except IY destroyed.
0B3882             0652*  ;
0B3882             0653*  ;ABS - Absolute value
0B3882             0654*  ;Result is numeric, variable type.
0B3882             0655*  ;
0B3882 CB 7C       0656*  ABSV:			BIT     7,H
0B3884 C8          0657*          		RET     Z               ;POSITIVE/ZERO
0B3885 0D          0658*          		DEC     C
0B3886 0C          0659*          		INC     C
0B3887 CA E2 3E 0B 0660*          		JP      Z,NEGATE        ;INTEGER
0B388B CB BC       0661*          		RES     7,H
0B388D C9          0662*          		RET
0B388E             0663*  ;
0B388E             0664*  ;NOT - Complement integer.
0B388E             0665*  ;Result is integer numeric.
0B388E             0666*  ;
0B388E CD D2 3E 0B 0667*  NOTK:			CALL    SFIX_FP
0B3892 7C          0668*          		LD      A,H
0B3893 2F          0669*          		CPL
0B3894 67          0670*          		LD      H,A
0B3895 7D          0671*          		LD      A,L
0B3896 2F          0672*          		CPL
0B3897 6F          0673*          		LD      L,A
0B3898 D9          0674*          		EXX
0B3899 7C          0675*          		LD      A,H
0B389A 2F          0676*          		CPL
0B389B 67          0677*          		LD      H,A
0B389C 7D          0678*          		LD      A,L
0B389D 2F          0679*          		CPL
0B389E 6F          0680*          		LD      L,A
0B389F D9          0681*          		EXX
0B38A0 AF          0682*          		XOR     A               ;NUMERIC MARKER
0B38A1 C9          0683*          		RET
0B38A2             0684*  ;
0B38A2             0685*  ;PI - Return PI (3.141592654)
0B38A2             0686*  ;Result is floating-point numeric.
0B38A2             0687*  ;
0B38A2 21 0F 49 00 0688*  PI:			LD      HL,490FH
0B38A6 D9          0689*          		EXX
0B38A7 21 A2 DA 00 0690*          		LD      HL,0DAA2H
0B38AB D9          0691*          		EXX
0B38AC 0E 81       0692*          		LD      C,81H
0B38AE AF          0693*          		XOR     A               ;NUMERIC MARKER
0B38AF C9          0694*          		RET
0B38B0             0695*  ;
0B38B0             0696*  ;DEG - Convert radians to degrees
0B38B0             0697*  ;Result is floating-point numeric.
0B38B0             0698*  ;
0B38B0 CD C4 38 0B 0699*  DEG:			CALL    FPI180
0B38B4 CD 16 37 0B 0700*          		CALL    FMUL
0B38B8 AF          0701*          		XOR     A
0B38B9 C9          0702*          		RET
0B38BA             0703*  ;
0B38BA             0704*  ;RAD - Convert degrees to radians
0B38BA             0705*  ;Result is floating-point numeric.
0B38BA             0706*  ;
0B38BA CD C4 38 0B 0707*  RAD:			CALL    FPI180
0B38BE CD 6D 36 0B 0708*          		CALL    FDIV
0B38C2 AF          0709*          		XOR     A
0B38C3 C9          0710*          		RET
0B38C4             0711*  ;
0B38C4             0712*  ;180/PI
0B38C4             0713*  ;
0B38C4 CD AE 3F 0B 0714*  FPI180:			CALL    SFLOAT
0B38C8 11 2E 65 00 0715*          		LD      DE,652EH
0B38CC D9          0716*          		EXX
0B38CD 11 D3 E0 00 0717*          		LD      DE,0E0D3H
0B38D1 D9          0718*          		EXX
0B38D2 06 85       0719*          		LD      B,85H
0B38D4 C9          0720*          		RET
0B38D5             0721*  ;
0B38D5             0722*  ;SGN - Return -1, 0 or +1
0B38D5             0723*  ;Result is integer numeric.
0B38D5             0724*  ;
0B38D5 CD 07 40 0B 0725*  SGN:			CALL    TEST_FP
0B38D9 B1          0726*          		OR      C
0B38DA C8          0727*          		RET     Z               ;ZERO
0B38DB CB 7C       0728*          		BIT     7,H
0B38DD C2 75 38 0B 0729*          		JP      NZ,TRUE         ;-1
0B38E1 CD 2B 40 0B 0730*          		CALL    FPZERO
0B38E5 C3 C7 3F 0B 0731*          		JP      ADD1            ;1
0B38E9             0732*  ;
0B38E9             0733*  ;VAL - Return numeric value of string.
0B38E9             0734*  ;Input: ASCII string at IX
0B38E9             0735*  ;Result is variable type numeric.
0B38E9             0736*  ;
0B38E9 CD 45 42 0B 0737*  VAL:			CALL    SIGNQ
0B38ED F5          0738*          		PUSH    AF
0B38EE CD F5 3D 0B 0739*          		CALL    CON
0B38F2 F1          0740*          		POP     AF
0B38F3 FE 2D       0741*          		CP      '-'
0B38F5 3E 00       0742*          		LD      A,0             ;NUMERIC MARKER
0B38F7 C0          0743*          		RET     NZ
0B38F8 0D          0744*          		DEC     C
0B38F9 0C          0745*          		INC     C
0B38FA CA E2 3E 0B 0746*          		JP      Z,NEGATE        ;ZERO/INTEGER
0B38FE 7C          0747*          		LD      A,H
0B38FF EE 80       0748*          		XOR     80H             ;CHANGE SIGN (FP)
0B3901 67          0749*          		LD      H,A
0B3902 AF          0750*          		XOR     A
0B3903 C9          0751*          		RET
0B3904             0752*  ;
0B3904             0753*  ;INT - Floor function
0B3904             0754*  ;Result is integer numeric.
0B3904             0755*  ;
0B3904 0D          0756*  INT_:			DEC     C
0B3905 0C          0757*          		INC     C
0B3906 C8          0758*          		RET     Z               ;ZERO/INTEGER
0B3907 3E 9F       0759*          		LD      A,159
0B3909 44          0760*          		LD      B,H             ;B7=SIGN BIT
0B390A CD B3 3E 0B 0761*          		CALL    FIX
0B390E 08          0762*          		EX      AF,AF'
0B390F A0          0763*          		AND     B
0B3910 FC C7 3F 0B 0764*          		CALL    M,ADD1          ;NEGATIVE NON-INTEGER
0B3914 78          0765*          		LD      A,B
0B3915 B7          0766*          		OR      A
0B3916 FC E2 3E 0B 0767*          		CALL    M,NEGATE
0B391A AF          0768*          		XOR     A
0B391B 4F          0769*          		LD      C,A
0B391C C9          0770*          		RET
0B391D             0771*  ;
0B391D             0772*  ;SQR - square root
0B391D             0773*  ;Result is floating-point numeric.
0B391D             0774*  ;
0B391D CD AE 3F 0B 0775*  SQR:			CALL    SFLOAT
0B3921 CB 7C       0776*  SQR0:			BIT     7,H
0B3923 3E 15       0777*          		LD      A,NGROOT
0B3925 C2 85 34 0B 0778*          		JP      NZ,ERROR_FP        ;"-ve root"
0B3929 0D          0779*          		DEC     C
0B392A 0C          0780*          		INC     C
0B392B C8          0781*          		RET     Z               ;ZERO
0B392C CB FC       0782*          		SET     7,H             ;IMPLIED 1
0B392E CB 41       0783*          		BIT     0,C
0B3930 CC E7 3F 0B 0784*          		CALL    Z,DIV2          ;MAKE EXPONENT ODD
0B3934 79          0785*          		LD      A,C
0B3935 D6 80       0786*          		SUB     80H
0B3937 CB 2F       0787*          		SRA     A               ;HALVE EXPONENT
0B3939 C6 80       0788*          		ADD     A,80H
0B393B 4F          0789*          		LD      C,A
0B393C C5          0790*          		PUSH    BC              ;SAVE EXPONENT
0B393D EB          0791*          		EX      DE,HL
0B393E 21 00 00 00 0792*          		LD      HL,0
0B3942 44          0793*          		LD      B,H
0B3943 4D          0794*          		LD      C,L
0B3944 D9          0795*          		EXX
0B3945 EB          0796*          		EX      DE,HL
0B3946 21 00 00 00 0797*          		LD      HL,0
0B394A 44          0798*          		LD      B,H
0B394B 4D          0799*          		LD      C,L
0B394C 3E E1       0800*          		LD      A,-31
0B394E CD DD 41 0B 0801*          		CALL    SQRA            ;ROOT
0B3952 D9          0802*          		EXX
0B3953 CB 78       0803*          		BIT     7,B
0B3955 D9          0804*          		EXX
0B3956 CC DD 41 0B 0805*          		CALL    Z,SQRA          ;NORMALISE & INC A
0B395A CD 1E 42 0B 0806*          		CALL    SQRB
0B395E B7          0807*          		OR      A               ;CLEAR CARRY
0B395F CD 8B 41 0B 0808*          		CALL    DIVB
0B3963 CB 1B       0809*          		RR      E               ;LSB TO CARRY
0B3965 60          0810*          		LD      H,B
0B3966 69          0811*          		LD      L,C
0B3967 D9          0812*          		EXX
0B3968 60          0813*          		LD      H,B
0B3969 69          0814*          		LD      L,C
0B396A DC C7 3F 0B 0815*          		CALL    C,ADD1          ;ROUND UP
0B396E C1          0816*          		POP     BC              ;RESTORE EXPONENT
0B396F DC F4 3F 0B 0817*          		CALL    C,INCC
0B3973 1F          0818*          		RRA
0B3974 9F          0819*          		SBC     A,A
0B3975 81          0820*          		ADD     A,C
0B3976 4F          0821*          		LD      C,A
0B3977 CB BC       0822*          		RES     7,H             ;POSITIVE
0B3979 AF          0823*          		XOR     A
0B397A C9          0824*          		RET
0B397B             0825*  ;
0B397B             0826*  ;TAN - Tangent function
0B397B             0827*  ;Result is floating-point numeric.
0B397B             0828*  ;
0B397B CD AE 3F 0B 0829*  TAN:			CALL    SFLOAT
0B397F CD BB 40 0B 0830*          		CALL    PUSH5
0B3983 CD A5 39 0B 0831*          		CALL    COS0
0B3987 CD C4 40 0B 0832*          		CALL    POP5
0B398B CD BB 40 0B 0833*          		CALL    PUSH5
0B398F CD DF 3F 0B 0834*          		CALL    SWAP_FP
0B3993 CD B2 39 0B 0835*          		CALL    SIN0
0B3997 CD C4 40 0B 0836*          		CALL    POP5
0B399B CD 6D 36 0B 0837*          		CALL    FDIV
0B399F AF          0838*          		XOR     A               ;NUMERIC MARKER
0B39A0 C9          0839*          		RET
0B39A1             0840*  ;
0B39A1             0841*  ;COS - Cosine function
0B39A1             0842*  ;Result is floating-point numeric.
0B39A1             0843*  ;
0B39A1 CD AE 3F 0B 0844*  COS:			CALL    SFLOAT
0B39A5 CD 0A 3F 0B 0845*  COS0:			CALL    SCALE
0B39A9 1C          0846*          		INC     E
0B39AA 1C          0847*          		INC     E
0B39AB 7B          0848*          		LD      A,E
0B39AC 18 10       0849*          		JR      SIN1
0B39AE             0850*  ;
0B39AE             0851*  ;SIN - Sine function
0B39AE             0852*  ;Result is floating-point numeric.
0B39AE             0853*  ;
0B39AE CD AE 3F 0B 0854*  SIN:			CALL    SFLOAT
0B39B2 E5          0855*  SIN0:			PUSH    HL              ;H7=SIGN
0B39B3 CD 0A 3F 0B 0856*          		CALL    SCALE
0B39B7 F1          0857*          		POP     AF
0B39B8 07          0858*          		RLCA
0B39B9 07          0859*          		RLCA
0B39BA 07          0860*          		RLCA
0B39BB E6 04       0861*          		AND     4
0B39BD AB          0862*          		XOR     E
0B39BE F5          0863*  SIN1:			PUSH    AF              ;OCTANT
0B39BF CB BC       0864*          		RES     7,H
0B39C1 1F          0865*          		RRA
0B39C2 CD 50 3A 0B 0866*          		CALL    PIBY4
0B39C6 DC F1 35 0B 0867*          		CALL    C,RSUB          ;X=(PI/4)-X
0B39CA F1          0868*          		POP     AF
0B39CB F5          0869*          		PUSH    AF
0B39CC E6 03       0870*          		AND     3
0B39CE E2 07 3A 0B 0871*          		JP      PO,SIN2         ;USE COSINE APPROX.
0B39D2 CD BB 40 0B 0872*          		CALL    PUSH5           ;SAVE X
0B39D6 CD B3 40 0B 0873*          		CALL    SQUARE          ;PUSH X*X
0B39DA CD F8 40 0B 0874*          		CALL    POLY
0B39DE B7 A8       0875*          		DW	0A8B7H          ;a(8)
0B39E0 11 36       0876*          		DW	3611H
0B39E2 6D          0877*          		DB	6DH
0B39E3 26 DE       0878*          		DW	0DE26H          ;a(6)
0B39E5 05 D0       0879*          		DW	0D005H
0B39E7 73          0880*          		DB	73H
0B39E8 C0 80       0881*          		DW	80C0H           ;a(4)
0B39EA 88 08       0882*          		DW	888H
0B39EC 79          0883*          		DB	79H
0B39ED 9D AA       0884*          		DW	0AA9DH          ;a(2)
0B39EF AA AA       0885*          		DW	0AAAAH
0B39F1 7D          0886*          		DB	7DH
0B39F2 00 00       0887*          		DW	0               ;a(0)
0B39F4 00 00       0888*          		DW	0
0B39F6 80          0889*          		DB	80H
0B39F7 CD C4 40 0B 0890*          		CALL    POP5
0B39FB CD C4 40 0B 0891*          		CALL    POP5
0B39FF CD 16 37 0B 0892*          		CALL    FMUL
0B3A03 C3 2C 3A 0B 0893*          		JP      SIN3
0B3A07             0894*  ;
0B3A07 CD B3 40 0B 0895*  SIN2:			CALL    SQUARE          ;PUSH X*X
0B3A0B CD F8 40 0B 0896*          		CALL    POLY
0B3A0F 71 D5       0897*          		DW	0D571H          ;b(8)
0B3A11 78 4C       0898*          		DW	4C78H
0B3A13 70          0899*          		DB	70H
0B3A14 AF 94       0900*          		DW	94AFH           ;b(6)
0B3A16 03 B6       0901*          		DW	0B603H
0B3A18 76          0902*          		DB	76H
0B3A19 C8 9C       0903*          		DW	9CC8H           ;b(4)
0B3A1B AA 2A       0904*          		DW	2AAAH
0B3A1D 7B          0905*          		DB	7BH
0B3A1E DD FF       0906*          		DW	0FFDDH          ;b(2)
0B3A20 FF FF       0907*          		DW	0FFFFH
0B3A22 7E          0908*          		DB	7EH
0B3A23 00 00       0909*          		DW	0               ;b(0)
0B3A25 00 00       0910*          		DW	0
0B3A27 80          0911*          		DB	80H
0B3A28 CD C4 40 0B 0912*          		CALL    POP5
0B3A2C F1          0913*  SIN3:			POP     AF
0B3A2D E6 04       0914*          		AND     4
0B3A2F C8          0915*          		RET     Z
0B3A30 0D          0916*          		DEC     C
0B3A31 0C          0917*          		INC     C
0B3A32 C8          0918*          		RET     Z               ;ZERO
0B3A33 CB FC       0919*          		SET     7,H             ;MAKE NEGATIVE
0B3A35 C9          0920*          		RET
0B3A36             0921*  ;
0B3A36             0922*  ;Floating-point one:
0B3A36             0923*  ;
0B3A36 21 00 00 00 0924*  FONE:			LD      HL,0
0B3A3A D9          0925*          		EXX
0B3A3B 21 00 00 00 0926*          		LD      HL,0
0B3A3F D9          0927*          		EXX
0B3A40 0E 80       0928*          		LD      C,80H
0B3A42 C9          0929*          		RET
0B3A43             0930*  ;
0B3A43 11 00 00 00 0931*  DONE:			LD      DE,0
0B3A47 D9          0932*          		EXX
0B3A48 11 00 00 00 0933*          		LD      DE,0
0B3A4C D9          0934*          		EXX
0B3A4D 06 80       0935*          		LD      B,80H
0B3A4F C9          0936*          		RET
0B3A50             0937*  ;
0B3A50 11 0F 49 00 0938*  PIBY4:			LD      DE,490FH
0B3A54 D9          0939*          		EXX
0B3A55 11 A2 DA 00 0940*          		LD      DE,0DAA2H
0B3A59 D9          0941*          		EXX
0B3A5A 06 7F       0942*          		LD      B,7FH
0B3A5C C9          0943*          		RET
0B3A5D             0944*  ;
0B3A5D             0945*  ;EXP - Exponential function
0B3A5D             0946*  ;Result is floating-point numeric.
0B3A5D             0947*  ;
0B3A5D CD AE 3F 0B 0948*  EXP:			CALL    SFLOAT
0B3A61 CD EE 3A 0B 0949*  EXP0:			CALL    LN2             ;LN(2)
0B3A65 D9          0950*          		EXX
0B3A66 1D          0951*  	        	DEC     E
0B3A67 01 CF D1 00 0952*  		        LD      BC,0D1CFH       ;0.6931471805599453
0B3A6B D9          0953*          		EXX
0B3A6C E5          0954*          		PUSH    HL              ;H7=SIGN
0B3A6D CD 1D 3F 0B 0955*          		CALL    MOD48           ;"MODULUS"
0B3A71 F1          0956*          		POP     AF
0B3A72 CB 7B       0957*          		BIT     7,E
0B3A74 28 0B       0958*          		JR      Z,EXP1
0B3A76 17          0959*          		RLA
0B3A77 DA 2B 40 0B 0960*          		JP      C,FPZERO
0B3A7B 3E 18       0961*          		LD      A,EXPRNG
0B3A7D C3 85 34 0B 0962*          		JP      ERROR_FP           ;"Exp range"
0B3A81             0963*  ;
0B3A81 E6 80       0964*  EXP1:			AND     80H
0B3A83 B3          0965*          		OR      E
0B3A84 F5          0966*          		PUSH    AF              ;INTEGER PART
0B3A85 CB BC       0967*          		RES     7,H
0B3A87 CD BB 40 0B 0968*          		CALL    PUSH5           ;PUSH X*LN(2)
0B3A8B CD F8 40 0B 0969*          		CALL    POLY
0B3A8F 72 40       0970*          		DW	4072H           ;a(7)
0B3A91 2E 94       0971*          		DW	942EH
0B3A93 73          0972*          		DB	73H
0B3A94 65 6F       0973*          		DW	6F65H           ;a(6)
0B3A96 4F 2E       0974*          		DW	2E4FH
0B3A98 76          0975*          		DB	76H
0B3A99 37 6D       0976*          		DW	6D37H           ;a(5)
0B3A9B 02 88       0977*          		DW	8802H
0B3A9D 79          0978*          		DB	79H
0B3A9E 12 E5       0979*          		DW	0E512H          ;a(4)
0B3AA0 A0 2A       0980*          		DW	2AA0H
0B3AA2 7B          0981*          		DB	7BH
0B3AA3 14 4F       0982*          		DW	4F14H           ;a(3)
0B3AA5 AA AA       0983*          		DW	0AAAAH
0B3AA7 7D          0984*          		DB	7DH
0B3AA8 56 FD       0985*          		DW	0FD56H          ;a(2)
0B3AAA FF 7F       0986*          		DW	7FFFH
0B3AAC 7E          0987*          		DB	7EH
0B3AAD FE FF       0988*          		DW	0FFFEH          ;a(1)
0B3AAF FF FF       0989*          		DW	0FFFFH
0B3AB1 7F          0990*          		DB	7FH
0B3AB2 00 00       0991*          		DW	0               ;a(0)
0B3AB4 00 00       0992*          		DW	0
0B3AB6 80          0993*          		DB	80H
0B3AB7 CD C4 40 0B 0994*          		CALL    POP5
0B3ABB F1          0995*          		POP     AF
0B3ABC F5          0996*          		PUSH    AF
0B3ABD F4 E2 3A 0B 0997*          		CALL    P,RECIP         ;X=1/X
0B3AC1 F1          0998*          		POP     AF
0B3AC2 F2 CA 3A 0B 0999*          		JP      P,EXP4
0B3AC6 E6 7F       1000*          		AND     7FH
0B3AC8 ED 44       1001*          		NEG
0B3ACA C6 80       1002*  EXP4:			ADD     A,80H
0B3ACC 81          1003*          		ADD     A,C
0B3ACD 38 06       1004*          		JR      C,EXP2
0B3ACF F2 2B 40 0B 1005*          		JP      P,FPZERO          ;UNDERFLOW
0B3AD3 18 04       1006*          		JR      EXP3
0B3AD5 FA F6 3F 0B 1007*  EXP2:			JP      M,OFLOW         ;OVERFLOW
0B3AD9 C6 80       1008*  EXP3:			ADD     A,80H
0B3ADB CA 2B 40 0B 1009*          		JP      Z,FPZERO
0B3ADF 4F          1010*          		LD      C,A
0B3AE0 AF          1011*          		XOR     A               ;NUMERIC MARKER
0B3AE1 C9          1012*          		RET
0B3AE2             1013*  ;
0B3AE2 CD 43 3A 0B 1014*  RECIP:			CALL    DONE
0B3AE6 CD DF 3F 0B 1015*  RDIV:			CALL    SWAP_FP
0B3AEA C3 6D 36 0B 1016*          		JP      FDIV            ;RECIPROCAL
0B3AEE             1017*  ;
0B3AEE 11 72 31 00 1018*  LN2:			LD      DE,3172H        ;LN(2)
0B3AF2 D9          1019*          		EXX
0B3AF3 11 F8 17 00 1020*          		LD      DE,17F8H
0B3AF7 D9          1021*          		EXX
0B3AF8 06 7F       1022*          		LD      B,7FH
0B3AFA C9          1023*          		RET
0B3AFB             1024*  ;
0B3AFB             1025*  ;LN - Natural log.
0B3AFB             1026*  ;Result is floating-point numeric.
0B3AFB             1027*  ;
0B3AFB CD AE 3F 0B 1028*  LN:			CALL    SFLOAT
0B3AFF 3E 16       1029*  LN0:			LD      A,LOGRNG
0B3B01 CB 7C       1030*          		BIT     7,H
0B3B03 C2 85 34 0B 1031*          		JP      NZ,ERROR_FP        ;"Log range"
0B3B07 0C          1032*          		INC     C
0B3B08 0D          1033*          		DEC     C
0B3B09 CA 85 34 0B 1034*          		JP      Z,ERROR_FP
0B3B0D 11 04 35 00 1035*          		LD      DE,3504H        ;SQR(2)
0B3B11 D9          1036*          		EXX
0B3B12 11 33 F3 00 1037*          		LD      DE,0F333H       ;1.41421356237
0B3B16 D9          1038*          		EXX
0B3B17 CD 3E 40 0B 1039*          		CALL    ICP0            ;MANTISSA>SQR(2)?
0B3B1B 79          1040*          		LD      A,C             ;EXPONENT
0B3B1C 0E 80       1041*          		LD      C,80H           ;1 <= X < 2
0B3B1E 38 02       1042*          		JR      C,LN4
0B3B20 0D          1043*          		DEC     C
0B3B21 3C          1044*          		INC     A
0B3B22 F5          1045*  LN4:			PUSH    AF              ;SAVE EXPONENT
0B3B23 CD D0 40 0B 1046*          		CALL    RATIO           ;X=(X-1)/(X+1)
0B3B27 CD BB 40 0B 1047*          		CALL    PUSH5
0B3B2B CD B3 40 0B 1048*  		        CALL    SQUARE          ;PUSH X*X
0B3B2F CD F8 40 0B 1049*          		CALL    POLY
0B3B33 48 CC       1050*          		DW	0CC48H          ;a(9)
0B3B35 FB 74       1051*          		DW	74FBH
0B3B37 7D          1052*          		DB	7DH
0B3B38 AF AE       1053*          		DW	0AEAFH          ;a(7)
0B3B3A FF 11       1054*          		DW	11FFH
0B3B3C 7E          1055*          		DB	7EH
0B3B3D 8C D9       1056*          		DW	0D98CH          ;a(5)
0B3B3F CD 4C       1057*          		DW	4CCDH
0B3B41 7E          1058*          		DB	7EH
0B3B42 E3 A9       1059*          		DW	0A9E3H          ;a(3)
0B3B44 AA 2A       1060*          		DW	2AAAH
0B3B46 7F          1061*          		DB	7FH
0B3B47 00 00       1062*          		DW	0               ;a(1)
0B3B49 00 00       1063*          		DW	0
0B3B4B 81          1064*          		DB	81H
0B3B4C CD C4 40 0B 1065*          		CALL    POP5
0B3B50 CD C4 40 0B 1066*          		CALL    POP5
0B3B54 CD 16 37 0B 1067*          		CALL    FMUL
0B3B58 F1          1068*          		POP     AF              ;EXPONENT
0B3B59 CD BB 40 0B 1069*          		CALL    PUSH5
0B3B5D 08          1070*          		EX      AF,AF'
0B3B5E CD 2B 40 0B 1071*          		CALL    FPZERO
0B3B62 08          1072*          		EX      AF,AF'
0B3B63 D6 80       1073*          		SUB     80H
0B3B65 28 1F       1074*          		JR      Z,LN3
0B3B67 30 02       1075*          		JR      NC,LN1
0B3B69 2F          1076*          		CPL
0B3B6A 3C          1077*          		INC     A
0B3B6B 67          1078*  LN1:			LD      H,A
0B3B6C 0E 87       1079*          		LD      C,87H
0B3B6E F5          1080*          		PUSH    AF
0B3B6F CD 8E 3F 0B 1081*          		CALL    FLOAT_
0B3B73 CB BC       1082*          		RES     7,H
0B3B75 CD EE 3A 0B 1083*          		CALL    LN2
0B3B79 CD 16 37 0B 1084*          		CALL    FMUL
0B3B7D F1          1085*          		POP     AF
0B3B7E 30 06       1086*          		JR      NC,LN3
0B3B80 FA 86 3B 0B 1087*          		JP      M,LN3
0B3B84 CB FC       1088*          		SET     7,H
0B3B86 CD C4 40 0B 1089*  LN3:			CALL    POP5
0B3B8A CD 04 36 0B 1090*          		CALL    FADD
0B3B8E AF          1091*          		XOR     A
0B3B8F C9          1092*          		RET
0B3B90             1093*  ;
0B3B90             1094*  ;LOG - base-10 logarithm.
0B3B90             1095*  ;Result is floating-point numeric.
0B3B90             1096*  ;
0B3B90 CD FB 3A 0B 1097*  LOG:			CALL    LN
0B3B94 11 5B 5E 00 1098*          		LD      DE,5E5BH        ;LOG(e)
0B3B98 D9          1099*          		EXX
0B3B99 11 A9 D8 00 1100*          		LD      DE,0D8A9H
0B3B9D D9          1101*          		EXX
0B3B9E 06 7E       1102*          		LD      B,7EH
0B3BA0 CD 16 37 0B 1103*          		CALL    FMUL
0B3BA4 AF          1104*          		XOR     A
0B3BA5 C9          1105*          		RET
0B3BA6             1106*  ;
0B3BA6             1107*  ;ASN - Arc-sine
0B3BA6             1108*  ;Result is floating-point numeric.
0B3BA6             1109*  ;
0B3BA6 CD AE 3F 0B 1110*  ASN:			CALL    SFLOAT
0B3BAA CD BB 40 0B 1111*          		CALL    PUSH5
0B3BAE CD AB 40 0B 1112*          		CALL    COPY_
0B3BB2 CD 16 37 0B 1113*          		CALL    FMUL
0B3BB6 CD 43 3A 0B 1114*          		CALL    DONE
0B3BBA CD F1 35 0B 1115*          		CALL    RSUB
0B3BBE CD 21 39 0B 1116*          		CALL    SQR0
0B3BC2 CD C4 40 0B 1117*          		CALL    POP5
0B3BC6 0C          1118*          		INC     C
0B3BC7 0D          1119*          		DEC     C
0B3BC8 3E 02       1120*          		LD      A,2
0B3BCA D5          1121*          		PUSH    DE
0B3BCB CA 50 3C 0B 1122*          		JP      Z,ACS1
0B3BCF D1          1123*          		POP     DE
0B3BD0 CD E6 3A 0B 1124*          		CALL    RDIV
0B3BD4 18 04       1125*          		JR      ATN0
0B3BD6             1126*  ;
0B3BD6             1127*  ;ATN - arc-tangent
0B3BD6             1128*  ;Result is floating-point numeric.
0B3BD6             1129*  ;
0B3BD6 CD AE 3F 0B 1130*  ATN:			CALL    SFLOAT
0B3BDA E5          1131*  ATN0:			PUSH    HL              ;SAVE SIGN
0B3BDB CB BC       1132*          		RES     7,H
0B3BDD 11 13 54 00 1133*          		LD      DE,5413H        ;TAN(PI/8)=SQR(2)-1
0B3BE1 D9          1134*          		EXX
0B3BE2 11 D0 CC 00 1135*          		LD      DE,0CCD0H
0B3BE6 D9          1136*          		EXX
0B3BE7 06 7E       1137*          		LD      B,7EH
0B3BE9 CD 3B 40 0B 1138*          		CALL    FCP0            ;COMPARE
0B3BED 06 00       1139*          		LD      B,0
0B3BEF 38 22       1140*          		JR      C,ATN2
0B3BF1 11 82 1A 00 1141*          		LD      DE,1A82H        ;TAN(3*PI/8)=SQR(2)+1
0B3BF5 D9          1142*          		EXX
0B3BF6 11 9A 79 00 1143*          		LD      DE,799AH
0B3BFA D9          1144*          		EXX
0B3BFB 06 81       1145*          		LD      B,81H
0B3BFD CD 3B 40 0B 1146*          		CALL    FCP0            ;COMPARE
0B3C01 38 0A       1147*          		JR      C,ATN1
0B3C03 CD E2 3A 0B 1148*          		CALL    RECIP           ;X=1/X
0B3C07 06 02       1149*          		LD      B,2
0B3C09 C3 13 3C 0B 1150*          		JP      ATN2
0B3C0D CD D0 40 0B 1151*  ATN1:			CALL    RATIO           ;X=(X-1)/(X+1)
0B3C11 06 01       1152*          		LD      B,1
0B3C13 C5          1153*  ATN2:			PUSH    BC              ;SAVE FLAG
0B3C14 CD BB 40 0B 1154*          		CALL    PUSH5
0B3C18 CD B3 40 0B 1155*          		CALL    SQUARE          ;PUSH X*X
0B3C1C CD F8 40 0B 1156*          		CALL    POLY
0B3C20 35 F3       1157*          		DW	0F335H          ;a(13)
0B3C22 D8 37       1158*          		DW	37D8H
0B3C24 7B          1159*          		DB	7BH
0B3C25 91 6B       1160*          		DW	6B91H           ;a(11)
0B3C27 B9 AA       1161*          		DW	0AAB9H
0B3C29 7C          1162*          		DB	7CH
0B3C2A DE 41       1163*          		DW	41DEH           ;a(9)
0B3C2C 97 61       1164*          		DW	6197H
0B3C2E 7C          1165*          		DB	7CH
0B3C2F 7B 9D       1166*          		DW	9D7BH           ;a(7)
0B3C31 37 92       1167*          		DW	9237H
0B3C33 7D          1168*          		DB	7DH
0B3C34 5A 2A       1169*          		DW	2A5AH           ;a(5)
0B3C36 CC 4C       1170*          		DW	4CCCH
0B3C38 7D          1171*          		DB	7DH
0B3C39 5C A9       1172*          		DW	0A95CH          ;a(3)
0B3C3B AA AA       1173*          		DW	0AAAAH
0B3C3D 7E          1174*          		DB	7EH
0B3C3E 00 00       1175*          		DW	0               ;a(1)
0B3C40 00 00       1176*          		DW	0
0B3C42 80          1177*          		DB	80H
0B3C43 CD C4 40 0B 1178*          		CALL    POP5
0B3C47 CD C4 40 0B 1179*          		CALL    POP5
0B3C4B CD 16 37 0B 1180*          		CALL    FMUL
0B3C4F F1          1181*          		POP     AF
0B3C50 CD 50 3A 0B 1182*  ACS1:			CALL    PIBY4           ;PI/4
0B3C54 1F          1183*          		RRA
0B3C55 F5          1184*          		PUSH    AF
0B3C56 DC 04 36 0B 1185*          		CALL    C,FADD
0B3C5A F1          1186*          		POP     AF
0B3C5B 04          1187*          		INC     B
0B3C5C 1F          1188*          		RRA
0B3C5D DC F1 35 0B 1189*          		CALL    C,RSUB
0B3C61 F1          1190*          		POP     AF
0B3C62 B7          1191*          		OR      A
0B3C63 F0          1192*          		RET     P
0B3C64 CB FC       1193*          		SET     7,H             ;MAKE NEGATIVE
0B3C66 AF          1194*          		XOR     A
0B3C67 C9          1195*          		RET
0B3C68             1196*  ;
0B3C68             1197*  ;ACS - Arc cosine=PI/2-ASN.
0B3C68             1198*  ;Result is floating point numeric.
0B3C68             1199*  ;
0B3C68 CD A6 3B 0B 1200*  ACS:			CALL    ASN
0B3C6C 3E 02       1201*          		LD      A,2
0B3C6E F5          1202*          		PUSH    AF
0B3C6F 18 DF       1203*          		JR      ACS1
0B3C71             1204*  ;
0B3C71             1205*  ;Function STRING - convert numeric value to ASCII string.
0B3C71             1206*  ;   Inputs: HLH'L'C = integer or floating-point number
0B3C71             1207*  ;           DE = address at which to store string
0B3C71             1208*  ;           IX = address of @% format control
0B3C71             1209*  ;  Outputs: String stored, with NUL terminator
0B3C71             1210*  ;
0B3C71             1211*  ;First normalise for decimal output:
0B3C71             1212*  ;
0B3C71 CD AE 3F 0B 1213*  STRING:			CALL    SFLOAT
0B3C75 06 00       1214*          		LD      B,0             ;DEFAULT PT. POSITION
0B3C77 CB 7C       1215*          		BIT     7,H             ;NEGATIVE?
0B3C79 28 06       1216*          		JR      Z,STR10
0B3C7B CB BC       1217*          		RES     7,H
0B3C7D 3E 2D       1218*          		LD      A,'-'
0B3C7F 12          1219*          		LD      (DE),A          ;STORE SIGN
0B3C80 13          1220*          		INC     DE
0B3C81 AF          1221*  STR10:			XOR     A               ;CLEAR A
0B3C82 B9          1222*          		CP      C
0B3C83 28 4E       1223*          		JR      Z,STRING2          ;ZERO
0B3C85 D5          1224*          		PUSH    DE              ;SAVE TEXT POINTER
0B3C86 78          1225*          		LD      A,B
0B3C87 F5          1226*  STR11:			PUSH    AF              ;SAVE DECIMAL COUNTER
0B3C88 79          1227*          		LD      A,C             ;BINARY EXPONENT
0B3C89 FE A1       1228*          		CP      161
0B3C8B 30 1C       1229*          		JR      NC,STR14
0B3C8D FE 9B       1230*          		CP      155
0B3C8F 30 29       1231*          		JR      NC,STR15
0B3C91 2F          1232*          		CPL
0B3C92 FE E1       1233*          		CP      225
0B3C94 38 02       1234*          		JR      C,STR13
0B3C96 3E F8       1235*          		LD      A,-8
0B3C98 C6 1C       1236*  STR13:			ADD     A,28
0B3C9A CD 27 41 0B 1237*          		CALL    POWR10
0B3C9E F5          1238*          		PUSH    AF
0B3C9F CD 16 37 0B 1239*          		CALL    FMUL
0B3CA3 F1          1240*          		POP     AF
0B3CA4 47          1241*          		LD      B,A
0B3CA5 F1          1242*          		POP     AF
0B3CA6 90          1243*          		SUB     B
0B3CA7 18 DE       1244*          		JR      STR11
0B3CA9 D6 20       1245*  STR14:			SUB     32
0B3CAB CD 27 41 0B 1246*          		CALL    POWR10
0B3CAF F5          1247*          		PUSH    AF
0B3CB0 CD 6D 36 0B 1248*          		CALL    FDIV
0B3CB4 F1          1249*          		POP     AF
0B3CB5 47          1250*          		LD      B,A
0B3CB6 F1          1251*          		POP     AF
0B3CB7 80          1252*          		ADD     A,B
0B3CB8 18 CD       1253*          		JR      STR11
0B3CBA 3E 09       1254*  STR15:			LD      A,9
0B3CBC CD 27 41 0B 1255*          		CALL    POWR10          ;10^9
0B3CC0 CD 3B 40 0B 1256*          		CALL    FCP0
0B3CC4 79          1257*          		LD      A,C
0B3CC5 C1          1258*          		POP     BC
0B3CC6 4F          1259*          		LD      C,A
0B3CC7 CB FC       1260*          		SET     7,H             ;IMPLIED 1
0B3CC9 DC 63 40 0B 1261*          		CALL    C,X10B          ;X10, DEC B
0B3CCD D1          1262*          		POP     DE              ;RESTORE TEXT POINTER
0B3CCE CB B9       1263*          		RES     7,C
0B3CD0 3E 00       1264*          		LD      A,0
0B3CD2 17          1265*          		RLA                     ;PUT CARRY IN LSB
0B3CD3             1266*  ;
0B3CD3             1267*  ;At this point decimal normalisation has been done,
0B3CD3             1268*  ;now convert to decimal digits:
0B3CD3             1269*  ;      AHLH'L' = number in normalised integer form
0B3CD3             1270*  ;            B = decimal place adjustment
0B3CD3             1271*  ;            C = binary place adjustment (29-33)
0B3CD3             1272*  ;
0B3CD3 0C          1273*  STRING2:			INC     C
0B3CD4 08          1274*          		EX      AF,AF'          ;SAVE A
0B3CD5 78          1275*          		LD      A,B
0B3CD6 DD CB 02 4E 1276*          		BIT     1,(IX+2)
0B3CDA 20 08       1277*          		JR      NZ,STR20
0B3CDC AF          1278*          		XOR     A
0B3CDD DD BE 01    1279*          		CP      (IX+1)
0B3CE0 28 0B       1280*          		JR      Z,STR21
0B3CE2 3E F6       1281*          		LD      A,-10
0B3CE4 DD 86 01    1282*  STR20:			ADD     A,(IX+1)        ;SIG. FIG. COUNT
0B3CE7 B7          1283*          		OR      A               ;CLEAR CARRY
0B3CE8 FA ED 3C 0B 1284*          		JP      M,STR21
0B3CEC AF          1285*          		XOR     A
0B3CED F5          1286*  STR21:			PUSH    AF
0B3CEE 08          1287*          		EX      AF,AF'          ;RESTORE A
0B3CEF CD 97 40 0B 1288*  STR22:			CALL    X2              ;RL AHLH'L'
0B3CF3 8F          1289*          		ADC     A,A
0B3CF4 FE 0A       1290*          		CP      10
0B3CF6 38 05       1291*          		JR      C,STR23
0B3CF8 D6 0A       1292*          		SUB     10
0B3CFA D9          1293*          		EXX
0B3CFB 2C          1294*          		INC     L               ;SET RESULT BIT
0B3CFC D9          1295*          		EXX
0B3CFD 0D          1296*  STR23:			DEC     C
0B3CFE 20 EF       1297*          		JR      NZ,STR22        ;32 TIMES
0B3D00 4F          1298*          		LD      C,A             ;REMAINDER
0B3D01 7C          1299*          		LD      A,H
0B3D02 E6 3F       1300*          		AND     3FH             ;CLEAR OUT JUNK
0B3D04 67          1301*          		LD      H,A
0B3D05 F1          1302*          		POP     AF
0B3D06 F2 14 3D 0B 1303*          		JP      P,STR24
0B3D0A 3C          1304*          		INC     A
0B3D0B 20 1C       1305*          		JR      NZ,STR26
0B3D0D 3E 04       1306*          		LD      A,4
0B3D0F B9          1307*          		CP      C               ;ROUND UP?
0B3D10 3E 00       1308*          		LD      A,0
0B3D12 18 15       1309*          		JR      STR26
0B3D14 F5          1310*  STR24:			PUSH    AF
0B3D15 79          1311*          		LD      A,C
0B3D16 CE 30       1312*          		ADC     A,'0'           ;ADD CARRY
0B3D18 FE 30       1313*          		CP      '0'
0B3D1A 28 05       1314*          		JR      Z,STR25         ;SUPPRESS ZERO
0B3D1C FE 3A       1315*          		CP      '9'+1
0B3D1E 3F          1316*          		CCF
0B3D1F 30 08       1317*          		JR      NC,STR26
0B3D21 E3          1318*  STR25:			EX      (SP),HL
0B3D22 CB 75       1319*          		BIT     6,L             ;ZERO FLAG
0B3D24 E3          1320*  		        EX      (SP),HL
0B3D25 20 05       1321*          		JR      NZ,STR27
0B3D27 3E 30       1322*          		LD      A,'0'
0B3D29 3C          1323*  STR26:			INC     A               ;SET +VE
0B3D2A 3D          1324*          		DEC     A
0B3D2B F5          1325*          		PUSH    AF              ;PUT ON STACK + CARRY
0B3D2C 04          1326*  STR27:			INC     B
0B3D2D CD 07 40 0B 1327*          		CALL    TEST_FP            ;IS HLH'L' ZERO?
0B3D31 0E 20       1328*          		LD      C,32
0B3D33 3E 00       1329*          		LD      A,0
0B3D35 20 B8       1330*          		JR      NZ,STR22
0B3D37 F1          1331*          		POP     AF
0B3D38 F5          1332*          		PUSH    AF
0B3D39 3E 00       1333*          		LD      A,0
0B3D3B 38 B2       1334*          		JR      C,STR22
0B3D3D             1335*  ;
0B3D3D             1336*  ;At this point, the decimal character string is stored
0B3D3D             1337*  ; on the stack. Trailing zeroes are suppressed and may
0B3D3D             1338*  ; need to be replaced.
0B3D3D             1339*  ;B register holds decimal point position.
0B3D3D             1340*  ;Now format number and store as ASCII string:
0B3D3D             1341*  ;
0B3D3D EB          1342*  STR3:			EX      DE,HL           ;STRING POINTER
0B3D3E 0E FF       1343*          		LD      C,-1            ;FLAG "E"
0B3D40 16 01       1344*          		LD      D,1
0B3D42 DD 5E 01    1345*          		LD      E,(IX+1)        ;f2
0B3D45 DD CB 02 46 1346*          		BIT     0,(IX+2)
0B3D49 20 35       1347*          		JR      NZ,STR34        ;E MODE
0B3D4B DD CB 02 4E 1348*          		BIT     1,(IX+2)
0B3D4F 28 12       1349*          		JR      Z,STR31
0B3D51 78          1350*          		LD      A,B             ;F MODE
0B3D52 B7          1351*          		OR      A
0B3D53 28 05       1352*          		JR      Z,STR30
0B3D55 FA 5A 3D 0B 1353*          		JP      M,STR30
0B3D59 50          1354*          		LD      D,B
0B3D5A 7A          1355*  STR30:			LD      A,D
0B3D5B DD 86 01    1356*          		ADD     A,(IX+1)
0B3D5E 5F          1357*          		LD      E,A
0B3D5F FE 0B       1358*          		CP      11
0B3D61 38 19       1359*          		JR      C,STR32
0B3D63 78          1360*  STR31:			LD      A,B             ;G MODE
0B3D64 11 01 01 00 1361*          		LD      DE,101H
0B3D68 B7          1362*          		OR      A
0B3D69 FA 80 3D 0B 1363*          		JP      M,STR34
0B3D6D 28 0D       1364*          		JR      Z,STR32
0B3D6F DD 7E 01    1365*          		LD      A,(IX+1)
0B3D72 B7          1366*          		OR      A
0B3D73 20 02       1367*          		JR      NZ,STR3A
0B3D75 3E 0A       1368*          		LD      A,10
0B3D77 B8          1369*  STR3A:			CP      B
0B3D78 38 06       1370*          		JR      C,STR34
0B3D7A 50          1371*          		LD      D,B
0B3D7B 58          1372*          		LD      E,B
0B3D7C 78          1373*  STR32:			LD      A,B
0B3D7D C6 81       1374*          		ADD     A,129
0B3D7F 4F          1375*          		LD      C,A
0B3D80 CB FA       1376*  STR34:			SET     7,D
0B3D82 1D          1377*          		DEC     E
0B3D83 7A          1378*  STR35:			LD      A,D
0B3D84 B9          1379*          		CP      C
0B3D85 30 0E       1380*          		JR      NC,STR33
0B3D87 F1          1381*  STR36:			POP     AF
0B3D88 28 04       1382*          		JR      Z,STR37
0B3D8A F2 97 3D 0B 1383*          		JP      P,STR38
0B3D8E F5          1384*  STR37:			PUSH    AF
0B3D8F 1C          1385*          		INC     E
0B3D90 1D          1386*          		DEC     E
0B3D91 FA A8 3D 0B 1387*          		JP      M,STR4
0B3D95 3E 30       1388*  STR33:			LD      A,'0'
0B3D97 15          1389*  STR38:			DEC     D
0B3D98 E2 9F 3D 0B 1390*          		JP      PO,STR39
0B3D9C 36 2E       1391*          		LD      (HL),'.'
0B3D9E 23          1392*          		INC     HL
0B3D9F 77          1393*  STR39:			LD      (HL),A
0B3DA0 23          1394*          		INC     HL
0B3DA1 1D          1395*          		DEC     E
0B3DA2 F2 83 3D 0B 1396*          		JP      P,STR35
0B3DA6 18 DF       1397*          		JR      STR36
0B3DA8             1398*  ;
0B3DA8 F1          1399*  STR4:			POP     AF
0B3DA9 0C          1400*  STR40:			INC     C
0B3DAA 4D          1401*          		LD      C,L
0B3DAB 20 28       1402*          		JR      NZ,STR44
0B3DAD 36 45       1403*          		LD      (HL),'E'        ;EXPONENT
0B3DAF 23          1404*          		INC     HL
0B3DB0 78          1405*          		LD      A,B
0B3DB1 3D          1406*          		DEC     A
0B3DB2 F2 BB 3D 0B 1407*          		JP      P,STR41
0B3DB6 36 2D       1408*          		LD      (HL),'-'
0B3DB8 23          1409*          		INC     HL
0B3DB9 ED 44       1410*          		NEG
0B3DBB 36 30       1411*  STR41:			LD      (HL),'0'
0B3DBD 28 15       1412*          		JR      Z,STR47
0B3DBF FE 0A       1413*          		CP      10
0B3DC1 47          1414*          		LD      B,A
0B3DC2 3E 3A       1415*          		LD      A,':'
0B3DC4 38 03       1416*          		JR      C,STR42
0B3DC6 23          1417*          		INC     HL
0B3DC7 36 30       1418*          		LD      (HL),'0'
0B3DC9 34          1419*  STR42:			INC     (HL)
0B3DCA BE          1420*          		CP      (HL)
0B3DCB 20 05       1421*          		JR      NZ,STR43
0B3DCD 36 30       1422*          		LD      (HL),'0'
0B3DCF 2B          1423*          		DEC     HL
0B3DD0 34          1424*          		INC     (HL)
0B3DD1 23          1425*          		INC     HL
0B3DD2 10 F5       1426*  STR43:			DJNZ    STR42
0B3DD4 23          1427*  STR47:			INC     HL
0B3DD5 EB          1428*  STR44:			EX      DE,HL
0B3DD6 C9          1429*        			RET
0B3DD7             1430*  ;
0B3DD7             1431*  ;Support subroutines:
0B3DD7             1432*  ;
0B3DD7 DD 46 04    1433*  DLOAD5:			LD      B,(IX+4)
0B3DDA D9          1434*          		EXX
0B3DDB DD 5E 00    1435*          		LD      E,(IX+0)
0B3DDE DD 56 01    1436*          		LD      D,(IX+1)
0B3DE1 D9          1437*          		EXX
0B3DE2 DD 5E 02    1438*          		LD      E,(IX+2)
0B3DE5 DD 56 03    1439*          		LD      D,(IX+3)
0B3DE8 C9          1440*          		RET
0B3DE9             1441*  ;
0B3DE9 DD 46 06    1442*  DLOAD5_SPL:		LD      B,(IX+6)
0B3DEC D9          1443*  			EXX
0B3DED DD 17 00    1444*  			LD	DE, (IX+0)
0B3DF0 D9          1445*  			EXX
0B3DF1 DD 17 03    1446*  			LD	DE, (IX+3)
0B3DF4 C9          1447*  			RET
0B3DF5             1448*  ;
0B3DF5             1449*  ;CON - Get unsigned numeric constant from ASCII string.
0B3DF5             1450*  ;   Inputs: ASCII string at (IX).
0B3DF5             1451*  ;  Outputs: Variable-type result in HLH'L'C
0B3DF5             1452*  ;           IX updated (points to delimiter)
0B3DF5             1453*  ;           A7 = 0 (numeric marker)
0B3DF5             1454*  ;
0B3DF5 CD 2B 40 0B 1455*  CON:			CALL    FPZERO            ;INITIALISE TO ZERO
0B3DF9 0E 00       1456*          		LD      C,0             ;TRUNCATION COUNTER
0B3DFB CD 89 3E 0B 1457*          		CALL    NUMBER          ;GET INTEGER PART
0B3DFF FE 2E       1458*          		CP      '.'
0B3E01 06 00       1459*          		LD      B,0             ;DECL. PLACE COUNTER
0B3E03 CC 87 3E 0B 1460*          		CALL    Z,NUMBIX        ;GET FRACTION PART
0B3E07 FE 45       1461*          		CP      'E'
0B3E09 3E 00       1462*          		LD      A,0             ;INITIALISE EXPONENT
0B3E0B CC 55 3E 0B 1463*          		CALL    Z,GETEXP        ;GET EXPONENT
0B3E0F CB 7C       1464*          		BIT     7,H
0B3E11 20 08       1465*          		JR      NZ,CON0         ;INTEGER OVERFLOW
0B3E13 B7          1466*          		OR      A
0B3E14 20 05       1467*          		JR      NZ,CON0         ;EXPONENT NON-ZERO
0B3E16 B8          1468*          		CP      B
0B3E17 20 02       1469*          		JR      NZ,CON0         ;DECIMAL POINT
0B3E19 B9          1470*          		CP      C
0B3E1A C8          1471*          		RET     Z               ;INTEGER
0B3E1B 90          1472*  CON0:			SUB     B
0B3E1C 81          1473*          		ADD     A,C
0B3E1D 0E 9F       1474*          		LD      C,159
0B3E1F CD 8E 3F 0B 1475*          		CALL    FLOAT_
0B3E23 CB BC       1476*          		RES     7,H             ;DITCH IMPLIED 1
0B3E25 B7          1477*          		OR      A
0B3E26 C8          1478*          		RET     Z               ;DONE
0B3E27 FA 35 3E 0B 1479*          		JP      M,CON2          ;NEGATIVE EXPONENT
0B3E2B CD 27 41 0B 1480*          		CALL    POWR10
0B3E2F CD 16 37 0B 1481*          		CALL    FMUL            ;SCALE
0B3E33 AF          1482*          		XOR     A
0B3E34 C9          1483*          		RET
0B3E35 FE DA       1484*  CON2:			CP      -38
0B3E37 38 0C       1485*          		JR      C,CON3          ;CAN'T SCALE IN ONE GO
0B3E39 ED 44       1486*          		NEG
0B3E3B CD 27 41 0B 1487*          		CALL    POWR10
0B3E3F CD 6D 36 0B 1488*          		CALL    FDIV            ;SCALE
0B3E43 AF          1489*          		XOR     A
0B3E44 C9          1490*          		RET
0B3E45 F5          1491*  CON3:			PUSH    AF
0B3E46 3E 26       1492*          		LD      A,38
0B3E48 CD 27 41 0B 1493*          		CALL    POWR10
0B3E4C CD 6D 36 0B 1494*          		CALL    FDIV
0B3E50 F1          1495*          		POP     AF
0B3E51 C6 26       1496*          		ADD     A,38
0B3E53 18 E0       1497*          		JR      CON2
0B3E55             1498*  ;
0B3E55             1499*  ;GETEXP - Get decimal exponent from string
0B3E55             1500*  ;     Inputs: ASCII string at (IX)
0B3E55             1501*  ;             (IX points at 'E')
0B3E55             1502*  ;             A = initial value
0B3E55             1503*  ;    Outputs: A = new exponent
0B3E55             1504*  ;             IX updated.
0B3E55             1505*  ;   Destroys: A,A',IX,F,F'
0B3E55             1506*  ;
0B3E55 C5          1507*  GETEXP:			PUSH    BC              ;SAVE REGISTERS
0B3E56 47          1508*          		LD      B,A             ;INITIAL VALUE
0B3E57 0E 02       1509*          		LD      C,2             ;2 DIGITS MAX
0B3E59 DD 23       1510*          		INC     IX              ;BUMP PAST 'E'
0B3E5B CD 45 42 0B 1511*          		CALL    SIGNQ
0B3E5F 08          1512*          		EX      AF,AF'          ;SAVE EXPONENT SIGN
0B3E60 CD 3B 42 0B 1513*  GETEX1:			CALL    DIGITQ
0B3E64 38 18       1514*          		JR      C,GETEX2
0B3E66 78          1515*          		LD      A,B             ;B=B*10
0B3E67 87          1516*          		ADD     A,A
0B3E68 87          1517*          		ADD     A,A
0B3E69 80          1518*          		ADD     A,B
0B3E6A 87          1519*          		ADD     A,A
0B3E6B 47          1520*          		LD      B,A
0B3E6C DD 7E 00    1521*          		LD      A,(IX)          ;GET BACK DIGIT
0B3E6F DD 23       1522*          		INC     IX
0B3E71 E6 0F       1523*          		AND     0FH             ;MASK UNWANTED BITS
0B3E73 80          1524*          		ADD     A,B             ;ADD IN DIGIT
0B3E74 47          1525*          		LD      B,A
0B3E75 0D          1526*          		DEC     C
0B3E76 F2 60 3E 0B 1527*          		JP      P,GETEX1
0B3E7A 06 64       1528*          		LD      B,100           ;FORCE OVERFLOW
0B3E7C 18 E2       1529*          		JR      GETEX1
0B3E7E 08          1530*  GETEX2:			EX      AF,AF'          ;RESTORE SIGN
0B3E7F FE 2D       1531*          		CP      '-'
0B3E81 78          1532*          		LD      A,B
0B3E82 C1          1533*          		POP     BC              ;RESTORE
0B3E83 C0          1534*          		RET     NZ
0B3E84 ED 44       1535*          		NEG                     ;NEGATE EXPONENT
0B3E86 C9          1536*          		RET
0B3E87             1537*  ;
0B3E87             1538*  ;NUMBER: Get unsigned integer from string.
0B3E87             1539*  ;    Inputs: string at (IX)
0B3E87             1540*  ;            C = truncated digit count
0B3E87             1541*  ;                (initially zero)
0B3E87             1542*  ;            B = total digit count
0B3E87             1543*  ;            HLH'L' = initial value
0B3E87             1544*  ;   Outputs: HLH'L' = number (binary integer)
0B3E87             1545*  ;            A = delimiter.
0B3E87             1546*  ;            B, C & IX updated
0B3E87             1547*  ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
0B3E87             1548*  ;
0B3E87 DD 23       1549*  NUMBIX:			INC     IX
0B3E89 CD 3B 42 0B 1550*  NUMBER:			CALL    DIGITQ
0B3E8D D8          1551*          		RET     C
0B3E8E 04          1552*          		INC     B               ;INCREMENT DIGIT COUNT
0B3E8F DD 23       1553*          		INC     IX
0B3E91 CD 84 40 0B 1554*          		CALL    X10             ;*10 & COPY OLD VALUE
0B3E95 38 15       1555*          		JR      C,NUMB1         ;OVERFLOW
0B3E97 0D          1556*          		DEC     C               ;SEE IF TRUNCATED
0B3E98 0C          1557*          		INC     C
0B3E99 20 11       1558*          		JR      NZ,NUMB1        ;IMPORTANT!
0B3E9B E6 0F       1559*          		AND     0FH
0B3E9D D9          1560*          		EXX
0B3E9E 06 00       1561*          		LD      B,0
0B3EA0 4F          1562*          		LD      C,A
0B3EA1 52 09       1563*          		ADD.S   HL,BC           ;ADD IN DIGIT
0B3EA3 D9          1564*          		EXX
0B3EA4 30 E3       1565*          		JR      NC,NUMBER
0B3EA6 52 23       1566*          		INC.S   HL              ;CARRY
0B3EA8 7C          1567*          		LD      A,H
0B3EA9 B5          1568*          		OR      L
0B3EAA 20 DD       1569*          		JR      NZ,NUMBER
0B3EAC 0C          1570*  NUMB1:			INC     C               ;TRUNCATION COUNTER
0B3EAD CD E2 3F 0B 1571*          		CALL    SWAP1           ;RESTORE PREVIOUS VALUE
0B3EB1 18 D6       1572*          		JR      NUMBER
0B3EB3             1573*  ;
0B3EB3             1574*  ;FIX - Fix number to specified exponent value.
0B3EB3             1575*  ;    Inputs: HLH'L'C = +ve non-zero number (floated)
0B3EB3             1576*  ;            A = desired exponent (A>C)
0B3EB3             1577*  ;   Outputs: HLH'L'C = fixed number (unsigned)
0B3EB3             1578*  ;            fraction shifted into B'C'
0B3EB3             1579*  ;            A'F' positive if integer input
0B3EB3             1580*  ;  Destroys: C,H,L,A',B',C',H',L',F,F'
0B3EB3             1581*  ;
0B3EB3 08          1582*  FIX:			EX      AF,AF'
0B3EB4 AF          1583*          		XOR     A
0B3EB5 08          1584*          		EX      AF,AF'
0B3EB6 CB FC       1585*          		SET     7,H             ;IMPLIED 1
0B3EB8 CD E7 3F 0B 1586*  FIX1:			CALL    DIV2
0B3EBC B9          1587*          		CP      C
0B3EBD C8          1588*          		RET     Z
0B3EBE D2 B8 3E 0B 1589*          		JP      NC,FIX1
0B3EC2 C3 F6 3F 0B 1590*          		JP      OFLOW
0B3EC6             1591*  ;
0B3EC6             1592*  ;SFIX_FP - Convert to integer if necessary.
0B3EC6             1593*  ;    Input: Variable-type number in HLH'L'C
0B3EC6             1594*  ;   Output: Integer in HLH'L', C=0
0B3EC6             1595*  ; Destroys: A,C,H,L,A',B',C',H',L',F,F'
0B3EC6             1596*  ;
0B3EC6             1597*  ;NEGATE - Negate HLH'L'
0B3EC6             1598*  ;    Destroys: H,L,H',L',F
0B3EC6             1599*  ;
0B3EC6 CD DF 3F 0B 1600*  FIX2:			CALL    SWAP_FP
0B3ECA CD D2 3E 0B 1601*          		CALL    SFIX_FP
0B3ECE CD DF 3F 0B 1602*          		CALL    SWAP_FP
0B3ED2 0D          1603*  SFIX_FP:			DEC     C
0B3ED3 0C          1604*          		INC     C
0B3ED4 C8          1605*          		RET     Z               ;INTEGER/ZERO
0B3ED5 CB 7C       1606*          		BIT     7,H             ;SIGN
0B3ED7 F5          1607*          		PUSH    AF
0B3ED8 3E 9F       1608*          		LD      A,159
0B3EDA CD B3 3E 0B 1609*          		CALL    FIX
0B3EDE F1          1610*          		POP     AF
0B3EDF 0E 00       1611*          		LD      C,0
0B3EE1 C8          1612*          		RET     Z
0B3EE2 B7          1613*  NEGATE:			OR      A               ;CLEAR CARRY
0B3EE3 D9          1614*          		EXX
0B3EE4 D5          1615*  NEG0:			PUSH    DE
0B3EE5 EB          1616*          		EX      DE,HL
0B3EE6 21 00 00 00 1617*          		LD      HL,0
0B3EEA 52 ED 52    1618*          		SBC.S   HL,DE
0B3EED D1          1619*          		POP     DE
0B3EEE D9          1620*          		EXX
0B3EEF D5          1621*          		PUSH    DE
0B3EF0 EB          1622*          		EX      DE,HL
0B3EF1 21 00 00 00 1623*          		LD      HL,0
0B3EF5 52 ED 52    1624*          		SBC.S   HL,DE
0B3EF8 D1          1625*          		POP     DE
0B3EF9 C9          1626*          		RET
0B3EFA             1627*  ;
0B3EFA             1628*  ;NEG - Negate HLH'L'B'C'
0B3EFA             1629*  ;    Also complements A (used in FADD)
0B3EFA             1630*  ;    Destroys: A,H,L,B',C',H',L',F
0B3EFA             1631*  ;
0B3EFA D9          1632*  NEG_:			EXX
0B3EFB 2F          1633*          		CPL
0B3EFC E5          1634*          		PUSH    HL
0B3EFD B7          1635*          		OR      A               ;CLEAR CARRY
0B3EFE 21 00 00 00 1636*          		LD      HL,0
0B3F02 52 ED 42    1637*          		SBC.S   HL,BC
0B3F05 44          1638*          		LD      B,H
0B3F06 4D          1639*          		LD      C,L
0B3F07 E1          1640*          		POP     HL
0B3F08 18 DA       1641*          		JR      NEG0
0B3F0A             1642*  ;
0B3F0A             1643*  ;SCALE - Trig scaling.
0B3F0A             1644*  ;MOD48 - 48-bit floating-point "modulus" (remainder).
0B3F0A             1645*  ;   Inputs: HLH'L'C unsigned floating-point dividend
0B3F0A             1646*  ;           DED'E'B'C'B unsigned 48-bit FP divisor
0B3F0A             1647*  ;  Outputs: HLH'L'C floating point remainder (H7=1)
0B3F0A             1648*  ;           E = quotient (bit 7 is sticky)
0B3F0A             1649*  ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
0B3F0A             1650*  ;FLO48 - Float unsigned number (48 bits)
0B3F0A             1651*  ;    Input/output in HLH'L'B'C'C
0B3F0A             1652*  ;   Destroys: C,H,L,B',C',H',L',F
0B3F0A             1653*  ;
0B3F0A 3E 96       1654*  SCALE:			LD      A,150
0B3F0C B9          1655*          		CP      C
0B3F0D 3E 17       1656*          		LD      A,ACLOST
0B3F0F DA 85 34 0B 1657*          		JP      C,ERROR_FP         ;"Accuracy lost"
0B3F13 CD 50 3A 0B 1658*          		CALL    PIBY4
0B3F17 D9          1659*          		EXX
0B3F18 01 69 21 00 1660*          		LD      BC,2169H        ;3.141592653589793238
0B3F1C D9          1661*          		EXX
0B3F1D CB FA       1662*  MOD48:			SET     7,D             ;IMPLIED 1
0B3F1F CB FC       1663*          		SET     7,H
0B3F21 79          1664*          		LD      A,C
0B3F22 0E 00       1665*          		LD      C,0             ;INIT QUOTIENT
0B3F24 DD 21 00 00 1666*          		LD      IX,0
       00          
0B3F29 DD E5       1667*          		PUSH    IX              ;PUT ZERO ON STACK
0B3F2B B8          1668*          		CP      B
0B3F2C 38 46       1669*          		JR      C,MOD485        ;DIVIDEND<DIVISOR
0B3F2E D9          1670*  MOD481:			EXX                     ;CARRY=0 HERE
0B3F2F E3          1671*          		EX      (SP),HL
0B3F30 52 ED 42    1672*          		SBC.S   HL,BC
0B3F33 E3          1673*          		EX      (SP),HL
0B3F34 52 ED 52    1674*          		SBC.S   HL,DE
0B3F37 D9          1675*          		EXX
0B3F38 52 ED 52    1676*          		SBC.S   HL,DE
0B3F3B 30 0C       1677*          		JR      NC,MOD482       ;DIVIDEND>=DIVISOR
0B3F3D D9          1678*          		EXX
0B3F3E E3          1679*          		EX      (SP),HL
0B3F3F 52 09       1680*          		ADD.S   HL,BC
0B3F41 E3          1681*          		EX      (SP),HL
0B3F42 52 ED 5A    1682*          		ADC.S   HL,DE
0B3F45 D9          1683*          		EXX
0B3F46 52 ED 5A    1684*          		ADC.S   HL,DE
0B3F49 3F          1685*  MOD482:			CCF
0B3F4A CB 11       1686*          		RL      C               ;QUOTIENT
0B3F4C 30 02       1687*          		JR      NC,MOD483
0B3F4E CB F9       1688*          		SET     7,C             ;STICKY BIT
0B3F50 3D          1689*  MOD483:			DEC     A
0B3F51 B8          1690*          		CP      B
0B3F52 38 1F       1691*          		JR      C,MOD484        ;DIVIDEND<DIVISOR
0B3F54 E3          1692*          		EX      (SP),HL
0B3F55 52 29       1693*          		ADD.S   HL,HL           ;DIVIDEND * 2
0B3F57 E3          1694*          		EX      (SP),HL
0B3F58 D9          1695*          		EXX
0B3F59 52 ED 6A    1696*          		ADC.S   HL,HL
0B3F5C D9          1697*          		EXX
0B3F5D 52 ED 6A    1698*          		ADC.S   HL,HL
0B3F60 30 CC       1699*          		JR      NC,MOD481       ;AGAIN
0B3F62 B7          1700*          		OR      A
0B3F63 D9          1701*          		EXX
0B3F64 E3          1702*          		EX      (SP),HL
0B3F65 52 ED 42    1703*          		SBC.S   HL,BC           ;OVERFLOW, SO SUBTRACT
0B3F68 E3          1704*          		EX      (SP),HL
0B3F69 52 ED 52    1705*          		SBC.S   HL,DE
0B3F6C D9          1706*          		EXX
0B3F6D 52 ED 52    1707*          		SBC.S   HL,DE
0B3F70 B7          1708*          		OR      A
0B3F71 18 D6       1709*          		JR      MOD482
0B3F73             1710*  ;
0B3F73 3C          1711*  MOD484:			INC     A
0B3F74 59          1712*  MOD485:			LD      E,C             ;QUOTIENT
0B3F75 4F          1713*          		LD      C,A             ;REMAINDER EXPONENT
0B3F76 D9          1714*          		EXX
0B3F77 C1          1715*          		POP     BC
0B3F78 D9          1716*          		EXX
0B3F79 CB 7C       1717*  FLO48:			BIT     7,H
0B3F7B C0          1718*          		RET     NZ
0B3F7C D9          1719*          		EXX
0B3F7D CB 21       1720*          		SLA     C
0B3F7F CB 10       1721*          		RL      B
0B3F81 52 ED 6A    1722*          		ADC.S   HL,HL
0B3F84 D9          1723*          		EXX
0B3F85 52 ED 6A    1724*          		ADC.S   HL,HL
0B3F88 0D          1725*          		DEC     C
0B3F89 C2 79 3F 0B 1726*          		JP      NZ,FLO48
0B3F8D C9          1727*          		RET
0B3F8E             1728*  ;
0B3F8E             1729*  ;Float unsigned number
0B3F8E             1730*  ;    Input/output in HLH'L'C
0B3F8E             1731*  ;   Destroys: C,H,L,H',L',F
0B3F8E             1732*  ;
0B3F8E CB 7C       1733*  FLOAT_:			BIT     7,H
0B3F90 C0          1734*          		RET     NZ
0B3F91 D9          1735*          		EXX                     ;SAME AS "X2"
0B3F92 52 29       1736*          		ADD.S   HL,HL           ;TIME-CRITICAL
0B3F94 D9          1737*          		EXX                     ;REGION
0B3F95 52 ED 6A    1738*          		ADC.S   HL,HL           ;(BENCHMARKS)
0B3F98 0D          1739*          		DEC     C
0B3F99 C2 8E 3F 0B 1740*          		JP      NZ,FLOAT_
0B3F9D C9          1741*          		RET
0B3F9E             1742*  ;
0B3F9E             1743*  ;SFLOAT - Convert to floating-point if necessary.
0B3F9E             1744*  ;    Input: Variable-type number in HLH'L'C
0B3F9E             1745*  ;    Output: Floating-point in HLH'L'C
0B3F9E             1746*  ;    Destroys: A,C,H,L,H',L',F
0B3F9E             1747*  ;
0B3F9E 08          1748*  FLOATA:			EX      AF,AF'
0B3F9F             1749*          		; ADD     A,(RTABLE-DTABLE)/3
0B3F9F C6 2A       1750*          		ADD     A,RTABLE-DTABLE/3 ; ez80asm doesn't do nested expressions
0B3FA1 08          1751*          		EX      AF,AF'
0B3FA2 CD DF 3F 0B 1752*  FLOAT2:			CALL    SWAP_FP
0B3FA6 CD AE 3F 0B 1753*          		CALL    SFLOAT
0B3FAA CD DF 3F 0B 1754*          		CALL    SWAP_FP
0B3FAE 0D          1755*  SFLOAT:			DEC     C
0B3FAF 0C          1756*          		INC     C
0B3FB0 C0          1757*          		RET     NZ              ;ALREADY FLOATING-POINT
0B3FB1 CD 07 40 0B 1758*          		CALL    TEST_FP
0B3FB5 C8          1759*          		RET     Z               ;ZERO
0B3FB6 7C          1760*          		LD      A,H
0B3FB7 B7          1761*          		OR      A
0B3FB8 FC E2 3E 0B 1762*          		CALL    M,NEGATE
0B3FBC 0E 9F       1763*          		LD      C,159
0B3FBE CD 8E 3F 0B 1764*          		CALL    FLOAT_
0B3FC2 B7          1765*          		OR      A
0B3FC3 F8          1766*          		RET     M               ;NEGATIVE
0B3FC4 CB BC       1767*          		RES     7,H
0B3FC6 C9          1768*          		RET
0B3FC7             1769*  ;
0B3FC7             1770*  ;ROUND UP
0B3FC7             1771*  ;Return with carry set if 32-bit overflow
0B3FC7             1772*  ;   Destroys: H,L,B',C',H',L',F
0B3FC7             1773*  ;
0B3FC7 D9          1774*  ADD1:			EXX
0B3FC8 01 01 00 00 1775*          		LD      BC,1
0B3FCC 52 09       1776*          		ADD.S   HL,BC
0B3FCE D9          1777*          		EXX
0B3FCF D0          1778*          		RET     NC
0B3FD0 C5          1779*          		PUSH    BC
0B3FD1 01 01 00 00 1780*          		LD      BC,1
0B3FD5 52 09       1781*          		ADD.S   HL,BC
0B3FD7 C1          1782*          		POP     BC
0B3FD8 C9          1783*          		RET
0B3FD9             1784*  ;
0B3FD9             1785*  ;ODD - Add one if even, leave alone if odd.
0B3FD9             1786*  ; (Used to perform unbiassed rounding, i.e.
0B3FD9             1787*  ;  number is rounded up half the time)
0B3FD9             1788*  ;    Destroys: L',F (carry cleared)
0B3FD9             1789*  ;
0B3FD9 B7          1790*  ODD:			OR      A               ;CLEAR CARRY
0B3FDA D9          1791*          		EXX
0B3FDB CB C5       1792*          		SET     0,L             ;MAKE ODD
0B3FDD D9          1793*          		EXX
0B3FDE C9          1794*          		RET
0B3FDF             1795*  ;
0B3FDF             1796*  ;SWAP_FP - Swap arguments.
0B3FDF             1797*  ;    Exchanges DE,HL D'E',H'L' and B,C
0B3FDF             1798*  ;    Destroys: A,B,C,D,E,H,L,D',E',H',L'
0B3FDF             1799*  ;SWAP1 - Swap DEHL with D'E'H'L'
0B3FDF             1800*  ;    Destroys: D,E,H,L,D',E',H',L'
0B3FDF             1801*  ;
0B3FDF 79          1802*  SWAP_FP:			LD      A,C
0B3FE0 48          1803*          		LD      C,B
0B3FE1 47          1804*          		LD      B,A
0B3FE2 EB          1805*  SWAP1:			EX      DE,HL
0B3FE3 D9          1806*          		EXX
0B3FE4 EB          1807*          		EX      DE,HL
0B3FE5 D9          1808*          		EXX
0B3FE6 C9          1809*          		RET
0B3FE7             1810*  ;
0B3FE7             1811*  ; DIV2 - destroys C,H,L,A',B',C',H',L',F,F'
0B3FE7             1812*  ; INCC - destroys C,F
0B3FE7             1813*  ; OFLOW
0B3FE7             1814*  ;
0B3FE7 CD A0 40 0B 1815*  DIV2:			CALL    D2
0B3FEB D9          1816*          		EXX
0B3FEC CB 18       1817*          		RR      B
0B3FEE CB 19       1818*          		RR      C
0B3FF0 08          1819*          		EX      AF,AF'
0B3FF1 B0          1820*          		OR      B
0B3FF2 08          1821*          		EX      AF,AF'
0B3FF3 D9          1822*          		EXX
0B3FF4 0C          1823*  INCC:			INC     C
0B3FF5 C0          1824*          		RET     NZ
0B3FF6 3E 14       1825*  OFLOW:			LD      A,TOOBIG
0B3FF8 C3 85 34 0B 1826*          		JP      ERROR_FP           ;"Too big"
0B3FFC             1827*  ;
0B3FFC             1828*  ; FTEST - Test for zero & sign
0B3FFC             1829*  ;     Output: A=0 if zero, A=&40 if +ve, A=&C0 if -ve
0B3FFC             1830*  ;
0B3FFC CD 07 40 0B 1831*  FTEST:			CALL    TEST_FP
0B4000 C8          1832*          		RET     Z
0B4001 7C          1833*          		LD      A,H
0B4002 E6 80       1834*          		AND     10000000B
0B4004 F6 40       1835*          		OR      01000000B
0B4006 C9          1836*          		RET
0B4007             1837*  ;
0B4007             1838*  ; TEST_FP - Test HLH'L' for zero.
0B4007             1839*  ;     Output: Z-flag set & A=0 if HLH'L'=0
0B4007             1840*  ;     Destroys: A,F
0B4007             1841*  ;
0B4007 7C          1842*  TEST_FP:			LD      A,H
0B4008 B5          1843*          		OR      L
0B4009 D9          1844*          		EXX
0B400A B4          1845*          		OR      H
0B400B B5          1846*          		OR      L
0B400C D9          1847*          		EXX
0B400D C9          1848*          		RET
0B400E             1849*  ;
0B400E             1850*  ; FCOMP - Compare two numbers
0B400E             1851*  ;     Output: A=0 if equal, A=&40 if L>R, A=&C0 if L<R
0B400E             1852*  ;
0B400E 78          1853*  FCOMP:			LD      A,B
0B400F B1          1854*          		OR      C               ;Both integer?
0B4010 20 0B       1855*          		JR      NZ,FCOMP1
0B4012 CD 27 40 0B 1856*          		CALL    ICP
0B4016 3E 00       1857*  FCOMP0:			LD      A,0
0B4018 C8          1858*          		RET     Z               ;Equal
0B4019 3E 80       1859*          		LD      A,80H
0B401B 1F          1860*          		RRA
0B401C C9          1861*          		RET
0B401D             1862*  ;
0B401D CD A2 3F 0B 1863*  FCOMP1:			CALL    FLOAT2          ;Float both
0B4021 CD 35 40 0B 1864*          		CALL    FCP
0B4025 18 EF       1865*          		JR      FCOMP0
0B4027             1866*  ;
0B4027             1867*  ; Integer and floating point compare.
0B4027             1868*  ; Sets carry & zero flags according to HLH'L'C-DED'E'B
0B4027             1869*  ; Result pre-set to FALSE
0B4027             1870*  ; ICP1, FCP1 destroy A,F
0B4027             1871*  ;
0B4027             1872*  ; FPZERO - Return zero.
0B4027             1873*  ;  Destroys: A,C,H,L,H',L'
0B4027             1874*  ;
0B4027 CD 5A 40 0B 1875*  ICP:			CALL    ICP1
0B402B 3E 00       1876*  FPZERO:			LD      A,0
0B402D D9          1877*          		EXX
0B402E 67          1878*          		LD      H,A
0B402F 6F          1879*  	       		LD      L,A
0B4030 D9          1880*          		EXX
0B4031 67          1881*        			LD      H,A
0B4032 6F          1882*       			LD      L,A
0B4033 4F          1883*  	    		LD      C,A
0B4034 C9          1884*          		RET
0B4035             1885*  ;
0B4035 CD 4C 40 0B 1886*  FCP:			CALL    FCP1
0B4039 18 F0       1887*          		JR      FPZERO            ;PRESET FALSE
0B403B             1888*  ;
0B403B 79          1889*  FCP0:			LD      A,C
0B403C B8          1890*          		CP      B               ;COMPARE EXPONENTS
0B403D C0          1891*          		RET     NZ
0B403E             1892*  ICP0:
0B403E 52 ED 52    1893*  			SBC.S   HL,DE           ;COMP MANTISSA MSB
0B4041 52 19       1894*          		ADD.S   HL,DE
0B4043 C0          1895*          		RET     NZ
0B4044 D9          1896*          		EXX
0B4045 52 ED 52    1897*          		SBC.S   HL,DE           ;COMP MANTISSA LSB
0B4048 52 19       1898*          		ADD.S   HL,DE
0B404A D9          1899*          		EXX
0B404B C9          1900*          		RET
0B404C             1901*  ;
0B404C 7C          1902*  FCP1:			LD      A,H
0B404D AA          1903*          		XOR     D
0B404E 7C          1904*          		LD      A,H
0B404F 17          1905*          		RLA
0B4050 F8          1906*          		RET     M
0B4051 30 E8       1907*          		JR      NC,FCP0
0B4053 CD 3B 40 0B 1908*          		CALL    FCP0
0B4057 C8          1909*          		RET     Z               ;** V0.1 BUG FIX
0B4058 3F          1910*          		CCF
0B4059 C9          1911*          		RET
0B405A             1912*  ;
0B405A 7C          1913*  ICP1:			LD      A,H
0B405B AA          1914*          		XOR     D
0B405C F2 3E 40 0B 1915*          		JP      P,ICP0
0B4060 7C          1916*          		LD      A,H
0B4061 17          1917*          		RLA
0B4062 C9          1918*          		RET
0B4063             1919*  ;
0B4063             1920*  ; ADD - Integer add.
0B4063             1921*  ; Carry, sign & zero flags valid on exit
0B4063             1922*  ;     Destroys: H,L,H',L',F
0B4063             1923*  ;
0B4063 05          1924*  X10B:			DEC     B
0B4064 0C          1925*          		INC     C
0B4065 CD AC 40 0B 1926*  X5:			CALL    COPY0
0B4069 CD 9F 40 0B 1927*          		CALL    D2C
0B406D CD 9F 40 0B 1928*          		CALL    D2C
0B4071 08          1929*          		EX      AF,AF'          ;SAVE CARRY
0B4072 D9          1930*  ADD_:			EXX
0B4073 52 19       1931*          		ADD.S   HL,DE
0B4075 D9          1932*          		EXX
0B4076 52 ED 5A    1933*          		ADC.S   HL,DE
0B4079 C9          1934*          		RET
0B407A             1935*  ;
0B407A             1936*  ; SUB - Integer subtract.
0B407A             1937*  ; Carry, sign & zero flags valid on exit
0B407A             1938*  ;     Destroys: H,L,H',L',F
0B407A             1939*  ;
0B407A D9          1940*  SUB_:			EXX
0B407B B7          1941*          		OR      A
0B407C 52 ED 52    1942*          		SBC.S   HL,DE
0B407F D9          1943*          		EXX
0B4080 52 ED 52    1944*          		SBC.S   HL,DE
0B4083 C9          1945*          		RET
0B4084             1946*  ;
0B4084             1947*  ; X10 - unsigned integer * 10
0B4084             1948*  ;    Inputs: HLH'L' initial value
0B4084             1949*  ;   Outputs: DED'E' = initial HLH'L'
0B4084             1950*  ;            Carry bit set if overflow
0B4084             1951*  ;            If carry not set HLH'L'=result
0B4084             1952*  ;  Destroys: D,E,H,L,D',E',H',L',F
0B4084             1953*  ; X2 - Multiply HLH'L' by 2 as 32-bit integer.
0B4084             1954*  ;     Carry set if MSB=1 before shift.
0B4084             1955*  ;     Sign set if MSB=1 after shift.
0B4084             1956*  ;     Destroys: H,L,H',L',F
0B4084             1957*  ;
0B4084 CD AC 40 0B 1958*  X10:			CALL    COPY0           ;DED'E'=HLH'L'
0B4088 CD 97 40 0B 1959*          		CALL    X2
0B408C D8          1960*          		RET     C               ;TOO BIG
0B408D CD 97 40 0B 1961*          		CALL    X2
0B4091 D8          1962*          		RET     C
0B4092 CD 72 40 0B 1963*          		CALL    ADD_
0B4096 D8          1964*          		RET     C
0B4097 D9          1965*  X2:			EXX
0B4098 52 29       1966*          		ADD.S   HL,HL
0B409A D9          1967*          		EXX
0B409B 52 ED 6A    1968*          		ADC.S   HL,HL
0B409E C9          1969*          		RET
0B409F             1970*  ;
0B409F             1971*  ; D2 - Divide HLH'L' by 2 as 32-bit integer.
0B409F             1972*  ;     Carry set if LSB=1 before shift.
0B409F             1973*  ;     Destroys: H,L,H',L',F
0B409F             1974*  ;
0B409F 0C          1975*  D2C:			INC     C
0B40A0 CB 3C       1976*  D2:			SRL     H
0B40A2 CB 1D       1977*          		RR      L
0B40A4 D9          1978*          		EXX
0B40A5 CB 1C       1979*          		RR      H
0B40A7 CB 1D       1980*          		RR      L
0B40A9 D9          1981*          		EXX
0B40AA C9          1982*          		RET
0B40AB             1983*  ;
0B40AB             1984*  ; COPY - COPY HLH'L'C INTO DED'E'B
0B40AB             1985*  ;   Destroys: B,C,D,E,H,L,D',E',H',L'
0B40AB             1986*  ;
0B40AB 41          1987*  COPY_:			LD      B,C
0B40AC 54          1988*  COPY0:			LD      D,H
0B40AD 5D          1989*          		LD      E,L
0B40AE D9          1990*          		EXX
0B40AF 54          1991*          		LD      D,H
0B40B0 5D          1992*          		LD      E,L
0B40B1 D9          1993*          		EXX
0B40B2 C9          1994*          		RET
0B40B3             1995*  ;
0B40B3             1996*  ; SQUARE - PUSH X*X
0B40B3             1997*  ; PUSH5 - PUSH HLH'L'C ONTO STACK.
0B40B3             1998*  ;   Destroys: SP,IX
0B40B3             1999*  ;
0B40B3 CD AB 40 0B 2000*  SQUARE:			CALL    COPY_
0B40B7 CD 16 37 0B 2001*          		CALL    FMUL
0B40BB DD E1       2002*  PUSH5:			POP     IX              ;RETURN ADDRESS
0B40BD C5          2003*          		PUSH    BC
0B40BE E5          2004*          		PUSH    HL
0B40BF D9          2005*          		EXX
0B40C0 E5          2006*          		PUSH    HL
0B40C1 D9          2007*          		EXX
0B40C2 DD E9       2008*          		JP      (IX)            ;"RETURN"
0B40C4             2009*  ;
0B40C4             2010*  ; POP5 - POP DED'E'B OFF STACK.
0B40C4             2011*  ;   Destroys: A,B,D,E,D',E',SP,IX
0B40C4             2012*  ;
0B40C4 DD E1       2013*  POP5:			POP     IX              ;RETURN ADDRESS
0B40C6 D9          2014*          		EXX
0B40C7 D1          2015*          		POP     DE
0B40C8 D9          2016*          		EXX
0B40C9 D1          2017*          		POP     DE
0B40CA 79          2018*          		LD      A,C
0B40CB C1          2019*          		POP     BC
0B40CC 41          2020*          		LD      B,C
0B40CD 4F          2021*          		LD      C,A
0B40CE DD E9       2022*          		JP      (IX)            ;"RETURN"
0B40D0             2023*  ;
0B40D0             2024*  ; RATIO - Calculate (X-1)/(X+1)
0B40D0             2025*  ;     Inputs: X in HLH'L'C
0B40D0             2026*  ;    Outputs: (X-1)/(X+1) in HLH'L'C
0B40D0             2027*  ;   Destroys: Everything except IY,SP,I
0B40D0             2028*  ;
0B40D0 CD BB 40 0B 2029*  RATIO:			CALL    PUSH5           ;SAVE X
0B40D4 CD 43 3A 0B 2030*          		CALL    DONE
0B40D8 CD 04 36 0B 2031*          		CALL    FADD
0B40DC CD C4 40 0B 2032*          		CALL    POP5            ;RESTORE X
0B40E0 CD BB 40 0B 2033*          		CALL    PUSH5           ;SAVE X+1
0B40E4 CD DF 3F 0B 2034*          		CALL    SWAP_FP
0B40E8 CD 43 3A 0B 2035*          		CALL    DONE
0B40EC CD EB 35 0B 2036*          		CALL    FSUB
0B40F0 CD C4 40 0B 2037*          		CALL    POP5            ;RESTORE X+1
0B40F4 C3 6D 36 0B 2038*          		JP      FDIV
0B40F8             2039*  ;
0B40F8             2040*  ; POLY - Evaluate a polynomial.
0B40F8             2041*  ;     Inputs: X in HLH'L'C and also stored at (SP+2)
0B40F8             2042*  ;             Polynomial coefficients follow call.
0B40F8             2043*  ;    Outputs: Result in HLH'L'C
0B40F8             2044*  ;   Destroys: Everything except IY,SP,I
0B40F8             2045*  ; Routine terminates on finding a coefficient >=1.
0B40F8             2046*  ; Note: The last coefficient is EXECUTED on return
0B40F8             2047*  ;       so must contain only innocuous bytes!
0B40F8             2048*  ;
0B40F8 DD 21 03 00 2049*  POLY:			LD      IX, 3				; Advance the SP to the return address
       00          
0B40FD DD 39       2050*          		ADD     IX, SP
0B40FF DD E3       2051*          		EX      (SP), IX			; IX: Points to the inline list of coefficients
0B4101             2052*  ;
0B4101 CD D7 3D 0B 2053*          		CALL    DLOAD5          		; Load the first coefficient from (IX)
0B4105 CD 16 37 0B 2054*  POLY1:			CALL    FMUL
0B4109 11 05 00 00 2055*          		LD      DE, 5				; Skip to the next coefficient
0B410D DD 19       2056*          		ADD     IX, DE
0B410F CD D7 3D 0B 2057*          		CALL    DLOAD5          		; Load the second coefficient from (IX)
0B4113 DD E3       2058*          		EX      (SP), IX			; Restore the SP just in case we need to return
0B4115 04          2059*          		INC     B
0B4116 05          2060*          		DEC     B               		; Test B for end byte (80h)
0B4117 FA 04 36 0B 2061*          		JP      M,FADD				; Yes, so add and return
0B411B CD 04 36 0B 2062*          		CALL    FADD				; No, so add
0B411F CD E9 3D 0B 2063*          		CALL    DLOAD5_SPL			; Load X from SP
0B4123 DD E3       2064*          		EX      (SP), IX			; IX: Points to the inline list of coefficients
0B4125 18 DE       2065*          		JR      POLY1				; And loop
0B4127             2066*  ;
0B4127             2067*  ; POWR10 - Calculate power of ten.
0B4127             2068*  ;     Inputs: A=power of 10 required (A<128)
0B4127             2069*  ;             A=binary exponent to be exceeded (A>=128)
0B4127             2070*  ;    Outputs: DED'E'B = result
0B4127             2071*  ;             A = actual power of ten returned
0B4127             2072*  ;   Destroys: A,B,D,E,A',D',E',F,F'
0B4127             2073*  ;
0B4127 3C          2074*  POWR10:			INC     A
0B4128 08          2075*          		EX      AF,AF'
0B4129 E5          2076*          		PUSH    HL
0B412A D9          2077*          		EXX
0B412B E5          2078*          		PUSH    HL
0B412C D9          2079*          		EXX
0B412D CD 43 3A 0B 2080*          		CALL    DONE
0B4131 CD DF 3F 0B 2081*          		CALL    SWAP_FP
0B4135 AF          2082*          		XOR     A
0B4136 08          2083*  POWR11:			EX      AF,AF'
0B4137 3D          2084*          		DEC     A
0B4138 28 26       2085*          		JR      Z,POWR14        ;EXIT TYPE 1
0B413A F2 42 41 0B 2086*          		JP      P,POWR13
0B413E B9          2087*          		CP      C
0B413F 38 1F       2088*          		JR      C,POWR14        ;EXIT TYPE 2
0B4141 3C          2089*          		INC     A
0B4142 08          2090*  POWR13:			EX      AF,AF'
0B4143 3C          2091*          		INC     A
0B4144 CB FC       2092*          		SET     7,H
0B4146 CD 65 40 0B 2093*          		CALL    X5
0B414A 30 06       2094*          		JR      NC,POWR12
0B414C 08          2095*          		EX      AF,AF'
0B414D CD 9F 40 0B 2096*          		CALL    D2C
0B4151 08          2097*          		EX      AF,AF'
0B4152 08          2098*  POWR12:			EX      AF,AF'
0B4153 DC C7 3F 0B 2099*          		CALL    C,ADD1          ;ROUND UP
0B4157 0C          2100*          		INC     C
0B4158 FA 36 41 0B 2101*          		JP      M,POWR11
0B415C C3 F6 3F 0B 2102*          		JP      OFLOW
0B4160 CD DF 3F 0B 2103*  POWR14:			CALL    SWAP_FP
0B4164 CB BA       2104*          		RES     7,D
0B4166 D9          2105*          		EXX
0B4167 E1          2106*          		POP     HL
0B4168 D9          2107*          		EXX
0B4169 E1          2108*          		POP     HL
0B416A 08          2109*          		EX      AF,AF'
0B416B C9          2110*          		RET
0B416C             2111*  ;
0B416C             2112*  ; DIVA, DIVB - DIVISION PRIMITIVE.
0B416C             2113*  ;     Function: D'E'DE = H'L'HLD'E'DE / B'C'BC
0B416C             2114*  ;               Remainder in H'L'HL
0B416C             2115*  ;     Inputs: A = loop counter (normally -32)
0B416C             2116*  ;     Destroys: A,D,E,H,L,D',E',H',L',F
0B416C             2117*  ;
0B416C B7          2118*  DIVA:			OR      A               ;CLEAR CARRY
0B416D             2119*  DIV0:
0B416D 52 ED 42    2120*  			SBC.S   HL,BC           ;DIVIDEND-DIVISOR
0B4170 D9          2121*          		EXX
0B4171 52 ED 42    2122*          		SBC.S   HL,BC
0B4174 D9          2123*          		EXX
0B4175 30 07       2124*          		JR      NC,DIV1
0B4177 52 09       2125*          		ADD.S   HL,BC           ;DIVIDEND+DIVISOR
0B4179 D9          2126*          		EXX
0B417A 52 ED 4A    2127*          		ADC.S   HL,BC
0B417D D9          2128*          		EXX
0B417E 3F          2129*  DIV1:			CCF
0B417F CB 13       2130*  DIVC:			RL      E               ;SHIFT RESULT INTO DE
0B4181 CB 12       2131*          		RL      D
0B4183 D9          2132*          		EXX
0B4184 CB 13       2133*          		RL      E
0B4186 CB 12       2134*          		RL      D
0B4188 D9          2135*          		EXX
0B4189 3C          2136*          		INC     A
0B418A F0          2137*          		RET     P
0B418B             2138*  DIVB:
0B418B 52 ED 6A    2139*  			ADC.S   HL,HL           ;DIVIDEND*2
0B418E D9          2140*          		EXX
0B418F 52 ED 6A    2141*          		ADC.S   HL,HL
0B4192 D9          2142*          		EXX
0B4193 30 D8       2143*          		JR      NC,DIV0
0B4195 B7          2144*          		OR      A
0B4196 52 ED 42    2145*          		SBC.S   HL,BC           ;DIVIDEND-DIVISOR
0B4199 D9          2146*          		EXX
0B419A 52 ED 42    2147*          		SBC.S   HL,BC
0B419D D9          2148*          		EXX
0B419E 37          2149*          		SCF
0B419F C3 7F 41 0B 2150*          		JP      DIVC
0B41A3             2151*  ;
0B41A3             2152*  ;MULA, MULB - MULTIPLICATION PRIMITIVE.
0B41A3             2153*  ;    Function: H'L'HLD'E'DE = B'C'BC * D'E'DE
0B41A3             2154*  ;    Inputs: A = loop counter (usually -32)
0B41A3             2155*  ;            H'L'HL = 0
0B41A3             2156*  ;    Destroys: D,E,H,L,D',E',H',L',A,F
0B41A3             2157*  ;
0B41A3 B7          2158*  MULA:			OR      A               ;CLEAR CARRY
0B41A4 D9          2159*  MUL0:			EXX
0B41A5 CB 1A       2160*          		RR      D               ;MULTIPLIER/2
0B41A7 CB 1B       2161*          		RR      E
0B41A9 D9          2162*          		EXX
0B41AA CB 1A       2163*          		RR      D
0B41AC CB 1B       2164*          		RR      E
0B41AE 30 07       2165*          		JR      NC,MUL1
0B41B0 52 09       2166*          		ADD.S   HL,BC           ;ADD IN MULTIPLICAND
0B41B2 D9          2167*          		EXX
0B41B3 52 ED 4A    2168*          		ADC.S   HL,BC
0B41B6 D9          2169*          		EXX
0B41B7 3C          2170*  MUL1:			INC     A
0B41B8 F0          2171*          		RET     P
0B41B9 D9          2172*  MULB:			EXX
0B41BA CB 1C       2173*          		RR      H               ;PRODUCT/2
0B41BC CB 1D       2174*          		RR      L
0B41BE D9          2175*          		EXX
0B41BF CB 1C       2176*          		RR      H
0B41C1 CB 1D       2177*          		RR      L
0B41C3 C3 A4 41 0B 2178*          		JP      MUL0
0B41C7             2179*  ;
0B41C7             2180*  ; SQRA, SQRB - SQUARE ROOT PRIMITIVES
0B41C7             2181*  ;     Function: B'C'BC = SQR (D'E'DE)
0B41C7             2182*  ;     Inputs: A = loop counter (normally -31)
0B41C7             2183*  ;             B'C'BCH'L'HL initialised to 0
0B41C7             2184*  ;   Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',F
0B41C7             2185*  ;
0B41C7             2186*  SQR1:
0B41C7 52 ED 42    2187*  			SBC.S   HL,BC
0B41CA D9          2188*          		EXX
0B41CB 52 ED 42    2189*          		SBC.S   HL,BC
0B41CE D9          2190*          		EXX
0B41CF 0C          2191*          		INC     C
0B41D0 30 09       2192*          		JR      NC,SQR2
0B41D2 0D          2193*          		DEC     C
0B41D3 52 09       2194*          		ADD.S   HL,BC
0B41D5 D9          2195*          		EXX
0B41D6 52 ED 4A    2196*          		ADC.S   HL,BC
0B41D9 D9          2197*          		EXX
0B41DA 0D          2198*          		DEC     C
0B41DB 3C          2199*  SQR2:			INC     A
0B41DC F0          2200*          		RET     P
0B41DD CB 21       2201*  SQRA:			SLA     C
0B41DF CB 10       2202*          		RL      B
0B41E1 D9          2203*          		EXX
0B41E2 CB 11       2204*          		RL      C
0B41E4 CB 10       2205*          		RL      B
0B41E6 D9          2206*          		EXX
0B41E7 0C          2207*          		INC     C
0B41E8 CB 23       2208*          		SLA     E
0B41EA CB 12       2209*          		RL      D
0B41EC D9          2210*          		EXX
0B41ED CB 13       2211*          		RL      E
0B41EF CB 12       2212*          		RL      D
0B41F1 D9          2213*          		EXX
0B41F2 52 ED 6A    2214*          		ADC.S   HL,HL
0B41F5 D9          2215*          		EXX
0B41F6 52 ED 6A    2216*          		ADC.S   HL,HL
0B41F9 D9          2217*          		EXX
0B41FA CB 23       2218*          		SLA     E
0B41FC CB 12       2219*          		RL      D
0B41FE D9          2220*          		EXX
0B41FF CB 13       2221*          		RL      E
0B4201 CB 12       2222*          		RL      D
0B4203 D9          2223*          		EXX
0B4204 52 ED 6A    2224*          		ADC.S   HL,HL
0B4207 D9          2225*          		EXX
0B4208 52 ED 6A    2226*          		ADC.S   HL,HL
0B420B D9          2227*          		EXX
0B420C D2 C7 41 0B 2228*          		JP      NC,SQR1
0B4210 B7          2229*  SQR3:			OR      A
0B4211 52 ED 42    2230*          		SBC.S   HL,BC
0B4214 D9          2231*          		EXX
0B4215 52 ED 42    2232*          		SBC.S   HL,BC
0B4218 D9          2233*          		EXX
0B4219 0C          2234*          		INC     C
0B421A C3 DB 41 0B 2235*          		JP      SQR2
0B421E             2236*  ;
0B421E             2237*  SQRB:
0B421E 52 29       2238*  			ADD.S   HL,HL
0B4220 D9          2239*          		EXX
0B4221 52 ED 6A    2240*          		ADC.S   HL,HL
0B4224 D9          2241*          		EXX
0B4225 38 E9       2242*          		JR      C,SQR3
0B4227 3C          2243*          		INC     A
0B4228 0C          2244*          		INC     C
0B4229 52 ED 42    2245*          		SBC.S   HL,BC
0B422C D9          2246*          		EXX
0B422D 52 ED 42    2247*          		SBC.S   HL,BC
0B4230 D9          2248*          		EXX
0B4231 D0          2249*          		RET     NC
0B4232 52 09       2250*          		ADD.S   HL,BC
0B4234 D9          2251*          		EXX
0B4235 52 ED 4A    2252*          		ADC.S   HL,BC
0B4238 D9          2253*          		EXX
0B4239 0D          2254*          		DEC     C
0B423A C9          2255*          		RET
0B423B             2256*  ;
0B423B DD 7E 00    2257*  DIGITQ:			LD      A,(IX)
0B423E FE 3A       2258*          		CP      '9'+1
0B4240 3F          2259*          		CCF
0B4241 D8          2260*          		RET     C
0B4242 FE 30       2261*          		CP      '0'
0B4244 C9          2262*          		RET
0B4245             2263*  ;
0B4245 DD 7E 00    2264*  SIGNQ:			LD      A,(IX)
0B4248 DD 23       2265*          		INC     IX
0B424A FE 20       2266*          		CP      ' '
0B424C 28 F7       2267*          		JR      Z,SIGNQ
0B424E FE 2B       2268*          		CP      '+'
0B4250 C8          2269*          		RET     Z
0B4251 FE 2D       2270*          		CP      '-'
0B4253 C8          2271*          		RET     Z
0B4254 DD 2B       2272*          		DEC     IX
0B4256             2273*  
0B4256             2274*  				; call dumpRegistersHex
0B4256             2275*  
0B4256 C9          2276*          		RET
0B4257             0387       include "basic/snippets.asm"
0B4257             0001*  
0B4257             0002*  ; from exec.asm
0B4257             0003*  ; Check whether the stack is full
0B4257             0004*  ;
0B4257 E5          0005*  CHECK:			PUSH    HL
0B4258 C5          0006*  			PUSH	BC
0B4259 2A 1D 2B 0B 0007*  			LD      HL,(FREE)		; HL: Address of first free space byte
0B425D 01 00 01 00 0008*  			LD	BC,100h			; BC: One page of memory
0B4261 09          0009*  			ADD	HL,BC			; Add a page to FREE
0B4262 ED 72       0010*  			SBC     HL,SP			; And subtract the current SP
0B4264 C1          0011*  			POP	BC
0B4265 E1          0012*  			POP     HL
0B4266 D8          0013*  			RET     C			; The SP is not in the same page, so just return
0B4267             0014*  			; XOR     A			; Otherwise
0B4267             0015*  			; JP      ERROR_			; Throw error "No room"
0B4267             0016*  ;
0B4267 01 00 00 00 0017*  STORS3:			LD	BC,0
0B426B 4B          0018*  			LD      C,E			; BC: String length
0B426C DD E5       0019*  			PUSH    IX
0B426E D1          0020*  			POP     DE			; DE: Destination
0B426F AF          0021*  			XOR     A			; Check if string length is 0
0B4270 B9          0022*  			CP      C
0B4271 28 02       0023*  			JR      Z,STORS5		; Yes, so don't copy
0B4273 ED B0       0024*  			LDIR
0B4275 3E 0D       0025*  STORS5:			LD      A,CR			; Finally add the terminator
0B4277 12          0026*  			LD      (DE),A
0B4278 C9          0027*  			RET
0B4279             0028*  
0B4279             0029*  
0B4279             0030*  ; from main.asm
0B4279             0031*  
0B4279             0032*  ; PUTVAR - CREATE VARIABLE AND INITIALISE TO ZERO.
0B4279             0033*  ;   Inputs: HL, IY as returned from GETVAR (NZ).
0B4279             0034*  ;  Outputs: As GETVAR.
0B4279             0035*  ; Destroys: everything
0B4279             0036*  ;
0B4279 CD 47 43 0B 0037*  PUTVAR:			CALL    CREATE			; Create the variable
0B427D FD 7E 00    0038*  			LD      A,(IY)			; Fetch the next character
0B4280 FE 28       0039*  			CP      '('			; Check for bad use of array
0B4282 20 6C       0040*  			JR      NZ,GETVZ        	; It's fine, so set the exit conditions
0B4284 3E 0E       0041*  ARRAY:			LD      A,14            	; Otherwise Error: 'Array'
0B4286             0042*  ERROR3:
0B4286             0043*              ; JP      ERROR_
0B4286             0044*  ;
0B4286             0045*  ;GETVAR - GET LOCATION OF VARIABLE, RETURN IN HL & IX
0B4286             0046*  ;   Inputs: IY addresses first character.
0B4286             0047*  ;  Outputs: Carry set and NZ if illegal character.
0B4286             0048*  ;           Z-flag set if variable found, then:
0B4286             0049*  ;            A = variable type (0,4,5,128 or 129)
0B4286             0050*  ;            HL = IX = variable pointer.
0B4286             0051*  ;            IY updated
0B4286             0052*  ;           If Z-flag & carry reset, then:
0B4286             0053*  ;            HL, IY set for subsequent PUTVAR call.
0B4286             0054*  ; Destroys: everything
0B4286             0055*  ;
0B4286 FD 7E 00    0056*  GETVAR:			LD      A,(IY)			; Get the first character
0B4289 FE 24       0057*  			CP      '$'			; Is it a string?
0B428B 28 69       0058*  			JR      Z,GETV4			; Yes, so branch here
0B428D FE 21       0059*  			CP      '!'			; Is it indirection (32-bit)?
0B428F 28 69       0060*  			JR      Z,GETV5			; Yes, so branch here
0B4291 FE 3F       0061*  			CP      '?'			; Is it indirection (8-bit)?
0B4293 28 69       0062*  			JR      Z,GETV6			; Yes, so branch here
0B4295             0063*  ;
0B4295 CD 92 43 0B 0064*  			CALL    LOCATE			; Locate the variable
0B4299 C0          0065*  			RET     NZ			; And exit here if not found
0B429A             0066*  ;
0B429A             0067*  ; At this point:
0B429A             0068*  ;  HL: Address of variable in memory
0B429A             0069*  ;   D: Variable type (4 = Integer, 5 = Floating point, 129 = String)
0B429A             0070*  ;
0B429A FD 7E 00    0071*  			LD      A,(IY)			; Further checks
0B429D FE 28       0072*  			CP      '('             	; Is it an array?
0B429F 20 47       0073*  			JR      NZ,GETVX        	; No, so exit
0B42A1             0074*  ;
0B42A1             0075*  ; We are processing an array at this point
0B42A1             0076*  ;
0B42A1 D5          0077*  			PUSH    DE              	; Save the variable type (in D)
0B42A2 7E          0078*  			LD      A,(HL)          	; Fetch the number of dimensions
0B42A3 B7          0079*  			OR      A
0B42A4 28 DE       0080*  			JR      Z,ARRAY			; If there are none, then Error: 'Array'
0B42A6 23          0081*  			INC     HL			;
0B42A7 11 00 00 00 0082*  			LD      DE,0            	; Accumulator
0B42AB F5          0083*  			PUSH    AF
0B42AC FD 23       0084*  			INC     IY              	; Skip "("
0B42AE 18 05       0085*  			JR      GETV3
0B42B0             0086*  ;
0B42B0 F5          0087*  GETV2:			PUSH    AF
0B42B1 CD 00 34 0B 0088*  			CALL    COMMA
0B42B5 E5          0089*  GETV3:			PUSH    HL
0B42B6 D5          0090*  			PUSH    DE
0B42B7 CD FD 2D 0B 0091*  			CALL    EXPRI			; Get the subscript
0B42BB D9          0092*  			EXX
0B42BC D1          0093*  			POP     DE
0B42BD E3          0094*  			EX      (SP),HL
0B42BE 4E          0095*  			LD      C,(HL)
0B42BF 23          0096*  			INC     HL
0B42C0 46          0097*  			LD      B,(HL)
0B42C1 23          0098*  			INC     HL
0B42C2 E3          0099*  			EX      (SP),HL
0B42C3 EB          0100*  			EX      DE,HL
0B42C4 D5          0101*  			PUSH    DE
0B42C5 CD 28 44 0B 0102*  			CALL    MUL16			; HL=HL*BC
0B42C9 D1          0103*  			POP     DE
0B42CA 19          0104*  			ADD     HL,DE
0B42CB EB          0105*  			EX      DE,HL
0B42CC B7          0106*  			OR      A
0B42CD ED 42       0107*  			SBC     HL,BC
0B42CF 3E 0F       0108*  			LD      A,15
0B42D1 30 B3       0109*  			JR      NC,ERROR3		; Throw a "Subscript" error
0B42D3 E1          0110*  			POP     HL
0B42D4 F1          0111*  			POP     AF
0B42D5 3D          0112*  			DEC     A               	; Dimension counter
0B42D6 20 D8       0113*  			JR      NZ,GETV2
0B42D8 CD 0D 34 0B 0114*  			CALL    BRAKET          	; Check for closing bracket
0B42DC F1          0115*  			POP     AF              	; Restore the type
0B42DD E5          0116*  			PUSH    HL
0B42DE CD 3C 44 0B 0117*  			CALL    X4OR5           	; DE=DE*n
0B42E2 E1          0118*  			POP     HL
0B42E3 19          0119*  			ADD     HL,DE
0B42E4 57          0120*  			LD      D,A             	; The type
0B42E5 FD 7E 00    0121*  			LD      A,(IY)
0B42E8 FE 3F       0122*  GETVX:			CP      '?'
0B42EA 28 1E       0123*  			JR      Z,GETV9
0B42EC FE 21       0124*  			CP      '!'
0B42EE 28 16       0125*  			JR      Z,GETV8
0B42F0 E5          0126*  GETVZ:			PUSH    HL              	; Set exit conditions
0B42F1 DD E1       0127*  			POP     IX
0B42F3 7A          0128*  			LD      A,D
0B42F4 BF          0129*  			CP      A
0B42F5 C9          0130*  			RET
0B42F6             0131*  ;
0B42F6             0132*  ; Process strings, unary & binary indirection:
0B42F6             0133*  ;
0B42F6 3E 80       0134*  GETV4:			LD      A,128           	; Static strings
0B42F8 18 05       0135*  			JR      GETV7
0B42FA             0136*  ;
0B42FA 3E 04       0137*  GETV5:			LD      A,4             	; Unary 32-bit indirection
0B42FC 18 01       0138*  			JR      GETV7
0B42FE             0139*  ;
0B42FE AF          0140*  GETV6:			XOR     A               	; Unary 8-bit indirection
0B42FF             0141*  ;
0B42FF 21 00 00 00 0142*  GETV7:			LD      HL,0
0B4303 F5          0143*  			PUSH    AF
0B4304 18 24       0144*  			JR      GETV0
0B4306             0145*  ;
0B4306 06 04       0146*  GETV8:			LD      B,4             	; Binary 32-bt indirection
0B4308 18 02       0147*  			JR      GETVA
0B430A             0148*  ;
0B430A 06 00       0149*  GETV9:			LD      B,0             	; Binary 8-bit indirection
0B430C             0150*  ;
0B430C E5          0151*  GETVA:			PUSH    HL
0B430D DD E1       0152*  			POP     IX
0B430F 7A          0153*  			LD      A,D            		; Fetch the variable type
0B4310 FE 81       0154*  			CP      129			; Is it a string?
0B4312 C8          0155*  			RET     Z               	; Yes, so exit here
0B4313 C5          0156*  			PUSH    BC
0B4314 CD F9 2E 0B 0157*  			CALL    LOADN           	; Left operand of the binary indirection (var?index or var!index)
0B4318 CD A0 30 0B 0158*  			CALL    SFIX
0B431C 7D          0159*  			LD	A,L
0B431D D9          0160*  			EXX
0B431E 22 4A 2B 0B 0161*  			LD	(R0+0),HL
0B4322 32 4C 2B 0B 0162*  			LD	(R0+2),A
0B4326 2A 4A 2B 0B 0163*  			LD	HL,(R0)			; HL: 24-bit address of the variable in memory
0B432A             0164*  ;
0B432A E5          0165*  GETV0:			PUSH    HL			; HL will be 0 for a unary indirection, or the address of the variable for a binary indirection
0B432B FD 23       0166*  			INC     IY
0B432D CD 18 2E 0B 0167*  			CALL    ITEMI
0B4331 7D          0168*  			LD	A,L			;  A: The MSB of the address
0B4332 D9          0169*  			EXX
0B4333 22 4A 2B 0B 0170*  			LD	(R0+0),HL		; HL: The LSW of the address
0B4337 32 4C 2B 0B 0171*  			LD	(R0+2),A		; R0: L'HL or the 24-bit address
0B433B D1          0172*  			POP     DE
0B433C F1          0173*  			POP     AF
0B433D 2A 4A 2B 0B 0174*  			LD	HL,(R0)			; HL: L'HL
0B4341 19          0175*  			ADD     HL,DE
0B4342 E5          0176*  			PUSH    HL
0B4343 DD E1       0177*  			POP     IX
0B4345 BF          0178*  			CP      A
0B4346 C9          0179*  			RET
0B4347             0180*  
0B4347             0181*  
0B4347             0182*  ; CREATE - CREATE NEW ENTRY, INITIALISE TO ZERO.
0B4347             0183*  ;   Inputs: HL, IY as returned from LOCATE (NZ).
0B4347             0184*  ;  Outputs: As LOCATE, GETDEF.
0B4347             0185*  ; Destroys: As LOCATE, GETDEF.
0B4347             0186*  ;
0B4347 AF          0187*  CREATE:			XOR     A
0B4348 ED 5B 1D 2B 0188*  			LD      DE,(FREE)		; Get the last byte of available RAM
       0B          
0B434D ED 1F       0189*  			LD	(HL), DE		; Store
0B434F EB          0190*  			EX      DE,HL
0B4350 77          0191*  			LD      (HL),A			; Clear the link of the new entity
0B4351 23          0192*  			INC     HL
0B4352 77          0193*  			LD      (HL),A
0B4353 23          0194*  			INC     HL
0B4354 77          0195*  			LD      (HL),A
0B4355 23          0196*  			INC     HL
0B4356 FD 23       0197*  LOC7:			INC     IY
0B4358 CD 49 44 0B 0198*  			CALL    RANGE           	; END OF VARIABLE?
0B435C 38 15       0199*  			JR      C,LOC8
0B435E 77          0200*  			LD      (HL),A
0B435F 23          0201*  			INC     HL
0B4360 CD 55 44 0B 0202*  			CALL    RANGE1
0B4364 30 F0       0203*  			JR      NC,LOC7
0B4366 FE 28       0204*  			CP      '('
0B4368 28 09       0205*  			JR      Z,LOC8
0B436A FD 7E 01    0206*  			LD      A,(IY+1)
0B436D FE 28       0207*  			CP      '('
0B436F 28 E5       0208*  			JR      Z,LOC7
0B4371 FD 23       0209*  			INC     IY
0B4373 36 00       0210*  LOC8:			LD      (HL),0          	; TERMINATOR
0B4375 23          0211*  			INC     HL
0B4376 E5          0212*  			PUSH    HL
0B4377 CD 16 44 0B 0213*  			CALL    TYPE_			; Get the variable type in D
0B437B 3E 04       0214*  			LD      A,4			; If it is an integer then it takes up 4 bytes
0B437D BA          0215*  			CP      D
0B437E 28 01       0216*  			JR      Z,LOC9			; So skip the next bit
0B4380 3C          0217*  			INC     A			; Strings and floats take up 5 bytes (NB: Strings take up 4 in BBC BASIC for Z80)
0B4381 36 00       0218*  LOC9:			LD      (HL),0          	; Initialise the memory to zero
0B4383 23          0219*  			INC     HL
0B4384 3D          0220*  			DEC     A
0B4385 20 FA       0221*  			JR      NZ,LOC9
0B4387 22 1D 2B 0B 0222*  			LD      (FREE),HL		; Adjust the stack
0B438B CD 57 42 0B 0223*  			CALL    CHECK			; Check whether we are out of space
0B438F E1          0224*  			POP     HL
0B4390 AF          0225*  			XOR     A
0B4391 C9          0226*  			RET
0B4392             0227*  
0B4392             0228*  
0B4392             0229*  ; LOCATE - Try to locate variable name in static or dynamic variables.
0B4392             0230*  ; If illegal first character return carry, non-zero.
0B4392             0231*  ; If found, return no-carry, zero.
0B4392             0232*  ; If not found, return no-carry, non-zero.
0B4392             0233*  ;   Inputs: IY=Addresses first character of name.
0B4392             0234*  ;            A=(IY)
0B4392             0235*  ;  Outputs:  F=Z set if found, then:
0B4392             0236*  ;           IY=addresses terminator
0B4392             0237*  ;           HL=addresses location of variable
0B4392             0238*  ;            D=type of variable: 4 = integer
0B4392             0239*  ;                                5 = floating point
0B4392             0240*  ;                              129 = string
0B4392             0241*  ; Destroys: A,D,E,H,L,IY,F
0B4392             0242*  ;
0B4392             0243*  ; Variable names can start with any letter of the alphabet (upper or lower case), underscore (_), or the grave accent (`)
0B4392             0244*  ; They can contain any alphanumeric character and underscore (_)
0B4392             0245*  ; String variables are postfixed with the dollar ($) character
0B4392             0246*  ; Integer variables are postfixed with the percent (%) character
0B4392             0247*  ; Static integer variables are named @%, A% to Z%
0B4392             0248*  ; All other variables are dynamic
0B4392             0249*  ;
0B4392 D6 40       0250*  LOCATE:			SUB     '@'			; Check for valid range
0B4394 D8          0251*  			RET     C			; First character not "@", "A" to "Z" or "a" to "z", so not a variable
0B4395 21 00 00 00 0252*  			LD      HL, 0			; Clear HL
0B4399 FE 1B       0253*  			CP      'Z'-'@'+1		; Check for static ("@", "A" to "Z"); if it is not static...
0B439B 30 1E       0254*  			JR      NC,LOC0         	; Then branch here
0B439D 6F          0255*  			LD	L, A			; HL = A
0B439E FD 7E 01    0256*  			LD      A,(IY+1)        	; Check the 2nd character
0B43A1 FE 25       0257*  			CP      '%'			; If not "%" then it is not static...
0B43A3 20 21       0258*  			JR      NZ,LOC1         	; Branch here
0B43A5 FD 7E 02    0259*  			LD      A,(IY+2)		; Check the 3rd character
0B43A8 FE 28       0260*  			CP      '('			; If it is "(" (array) then it is not static...
0B43AA 28 1A       0261*  			JR      Z,LOC1          	; Branch here
0B43AC             0262*  ;
0B43AC             0263*  ; At this point we're dealing with a static variable
0B43AC             0264*  ;
0B43AC 29          0265*  			ADD     HL,HL			; HL: Variable index * 4
0B43AD 29          0266*  			ADD	HL,HL
0B43AE 11 00 2A 0B 0267*  			LD      DE,STAVAR       	; The static variable area in memory
0B43B2 19          0268*  			ADD     HL,DE			; HL: The address of the static variable
0B43B3 FD 23       0269*  			INC     IY			; Skip the program pointer past the static variable name
0B43B5 FD 23       0270*  			INC     IY
0B43B7 16 04       0271*  			LD      D,4             	; Set the type to be integer
0B43B9 AF          0272*  			XOR     A			; Set the Z flag
0B43BA C9          0273*  			RET
0B43BB             0274*  ;
0B43BB             0275*  ; At this point it's potentially a dynamic variable, just need to do a few more checks
0B43BB             0276*  ;
0B43BB FE 1F       0277*  LOC0:			CP      '_'-'@'			; Check the first character is in
0B43BD D8          0278*  			RET     C			; the range "_" to
0B43BE FE 3B       0279*  			CP      'z'-'@'+1		; "z" (lowercase characters only)
0B43C0 3F          0280*  			CCF				; If it is not in range then
0B43C1 3D          0281*  			DEC     A               	; Set NZ flag and
0B43C2 D8          0282*  			RET     C			; Exit here
0B43C3 D6 03       0283*  			SUB     3			; This brings it in the range of 27 upwards (need to confirm)
0B43C5 6F          0284*  			LD	L, A			; HL = A
0B43C6             0285*  ;
0B43C6             0286*  ; Yes, it's definitely a dynamic variable at this point...
0B43C6             0287*  ;
0B43C6 7D          0288*  LOC1:			LD	A, L			; Fetch variable index
0B43C7 87          0289*  			ADD	A, A			; x 2
0B43C8 85          0290*  			ADD	A, L			; x 3
0B43C9 D6 03       0291*  			SUB	3			; Subtract 2 TODO: Should be 3
0B43CB 6F          0292*  			LD	L, A
0B43CC 11 6C 2A 0B 0293*  			LD      DE, DYNVAR       	; The dynamic variable storage
0B43D0 D8          0294*  			RET	C			; Bounds check to trap for variable '@'
0B43D1 19          0295*  			ADD     HL, DE			; HL: Address of first entry
0B43D2             0296*  ;
0B43D2             0297*  ; Loop through the linked list of variables to find a match
0B43D2             0298*  ;
0B43D2 ED 17       0299*  LOC2:			LD	DE, (HL)		; Fetch the original pointer
0B43D4 E5          0300*  			PUSH	HL			; Need to preserve HL for LOC6
0B43D5 AF          0301*  			XOR	A			; Reset carry flag
0B43D6 ED 62       0302*  			SBC	HL, HL			; Set HL to 0
0B43D8 ED 52       0303*  			SBC	HL, DE			; Compare with 0
0B43DA E1          0304*  			POP	HL			; Restore the original pointer
0B43DB 28 49       0305*  			JR	Z, LOC6			; If the pointer in DE is zero, the variable is undefined at this point
0B43DD             0306*  			; LD	HL, DE			; Make a copy of this pointer in HL
0B43DD D5          0307*  			push de ; HOW DID THE ABOVE EVEN ASSEMBLE IN THE ORIGINAL?!
0B43DE E1          0308*  			pop hl	; Make a copy of this pointer in HL
0B43DF 23          0309*  			INC     HL              	; Skip the link (24-bits)
0B43E0 23          0310*  			INC     HL
0B43E1 23          0311*  			INC	HL			; HL: Address of the variable name in DYNVARS
0B43E2 FD E5       0312*  			PUSH    IY			; IY: Address of the variable name in the program
0B43E4             0313*  ;
0B43E4 7E          0314*  LOC3:			LD      A,(HL)         		; Compare
0B43E5 23          0315*  			INC     HL
0B43E6 FD 23       0316*  			INC     IY
0B43E8 FD BE 00    0317*  			CP      (IY)
0B43EB 28 F7       0318*  			JR      Z, LOC3			; Keep looping whilst we've got a match...
0B43ED B7          0319*  			OR      A               	; Have we hit a terminator?
0B43EE 28 07       0320*  			JR      Z,LOC5          	; Yes, so maybe we've found a variable
0B43F0             0321*  ;
0B43F0 FD E1       0322*  LOC4:			POP     IY			; Restore the pointer in the program
0B43F2 EB          0323*  			EX      DE, HL			; HL: New pointer in DYNVARS
0B43F3 C3 D2 43 0B 0324*  			JP      LOC2            	; Loop round and try again
0B43F7             0325*  ;
0B43F7             0326*  ; We might have located a variable at this point, just need to do a few more tests
0B43F7             0327*  ;
0B43F7 FD 2B       0328*  LOC5:			DEC     IY
0B43F9 FD 7E 00    0329*  			LD      A,(IY)
0B43FC FE 28       0330*  			CP      '('
0B43FE 28 15       0331*  			JR      Z,LOC5A         	; FOUND
0B4400 FD 23       0332*  			INC     IY
0B4402 CD 49 44 0B 0333*  			CALL    RANGE
0B4406 38 0D       0334*  			JR      C,LOC5A         	; FOUND
0B4408 FE 28       0335*  			CP      '('
0B440A 28 E4       0336*  			JR      Z,LOC4          	; KEEP LOOKING
0B440C FD 7E FF    0337*  			LD      A,(IY-1)
0B440F CD 55 44 0B 0338*  			CALL    RANGE1
0B4413 30 DB       0339*  			JR      NC,LOC4         	; KEEP LOOKING
0B4415 D1          0340*  LOC5A:			POP     DE
0B4416 FD 7E FF    0341*  TYPE_:			LD      A,(IY-1)		; Check the string type postfix
0B4419 FE 24       0342*  			CP      '$'			; Is it a string?
0B441B 16 81       0343*  			LD      D,129			; Yes, so return D = 129
0B441D C8          0344*  			RET     Z
0B441E FE 25       0345*  			CP      '%'			; Is it an integer?
0B4420 16 04       0346*  			LD      D,4			; Yes, so return D = 4
0B4422 C8          0347*  			RET     Z
0B4423 14          0348*  			INC     D			; At this point it must be a float
0B4424 BF          0349*  			CP      A			; Set the flags
0B4425 C9          0350*  			RET
0B4426             0351*  ;
0B4426             0352*  ; The variable is undefined at this point; HL will be zero
0B4426             0353*  ;
0B4426 3C          0354*  LOC6:			INC     A               	; Set NZ flag
0B4427 C9          0355*  			RET
0B4428             0356*  ;
0B4428             0357*  ; from exec.asm
0B4428             0358*  
0B4428             0359*  ; 16-bit unsigned multiply
0B4428             0360*  ; - HL: Operand 1
0B4428             0361*  ; - BC: Operand 2
0B4428             0362*  ; Returns:
0B4428             0363*  ; - HL: Result
0B4428             0364*  ; -  F: C if overflow
0B4428             0365*  ;
0B4428 C5          0366*  MUL16:			PUSH	BC
0B4429 51          0367*  			LD	D, C			; Set up the registers for the multiplies
0B442A 5D          0368*  			LD	E, L
0B442B 69          0369*  			LD	L, C
0B442C 4B          0370*  			LD	C, E
0B442D ED 6C       0371*  			MLT	HL			; HL = H * C (*256)
0B442F ED 5C       0372*  			MLT	DE			; DE = L * C
0B4431 ED 4C       0373*  			MLT	BC			; BC = B * L (*256)
0B4433 09          0374*  			ADD	HL, BC			; HL = The sum of the two most significant multiplications
0B4434 C1          0375*  			POP	BC
0B4435 AF          0376*  			XOR	A
0B4436 9C          0377*  			SBC	H			; If H is not zero then it's an overflow
0B4437 D8          0378*  			RET	C
0B4438 65          0379*  			LD	H, L			; HL = ((H * C) + (B * L) * 256) + (L * C)
0B4439 6F          0380*  			LD	L, A
0B443A 19          0381*  			ADD	HL, DE
0B443B C9          0382*  			RET
0B443C             0383*  
0B443C             0384*  
0B443C             0385*  ; Multiply by 4 or 5
0B443C             0386*  ; This function is used to allocate space for dimensioned variables
0B443C             0387*  ; This is a 24-bit operation
0B443C             0388*  ; - DE: Number to multiple
0B443C             0389*  ; -  A: 04h (Integer) - takes up 4 bytes
0B443C             0390*  ;       05h (Float)   - takes up 5 bytes
0B443C             0391*  ;       81h (String)  - takes up 5 bytes - this is different from BBC BASIC for Z80 where strings only take up 4 bytes
0B443C             0392*  ; Returns:
0B443C             0393*  ; - DE: Multiplied by 4 if A = 4, otherwise multiplies by 5
0B443C             0394*  ; -  F: Carry if overflow
0B443C             0395*  ; Corrupts:
0B443C             0396*  ; - HL
0B443C FE 04       0397*  X4OR5:			CP      4			; Check A = 4 (Z flag is used later)
0B443E             0398*  			; LD	HL,DE  ; HOW!?
0B443E D5          0399*  			push de
0B443F E1          0400*  			pop hl
0B4440 29          0401*  			ADD     HL,HL			; Multiply by 2 (note this operation preserves the zero flag)
0B4441 D8          0402*  			RET     C			; Exit if overflow
0B4442 29          0403*  			ADD     HL,HL			; Multiply by 2 again
0B4443 D8          0404*  			RET     C			; Exit if overflow
0B4444 EB          0405*  			EX      DE,HL			; DE: Product
0B4445 C8          0406*  			RET     Z			; Exit if A = 4
0B4446 19          0407*  			ADD     HL,DE			; Add original value to HL (effectively multiplying by 5)
0B4447 EB          0408*  			EX      DE,HL			; DE: Product
0B4448 C9          0409*  			RET
0B4449             0410*  
0B4449             0411*  
0B4449             0412*  ; from main.asm
0B4449             0413*  ; TEST FOR VALID CHARACTER IN VARIABLE NAME:
0B4449             0414*  ;   Inputs: IY addresses character
0B4449             0415*  ;  Outputs: Carry set if out-of-range.
0B4449             0416*  ; Destroys: A,F
0B4449             0417*  ;
0B4449             0418*  ; It is called here to check the following
0B4449             0419*  ; In range: "$", "%" and "("
0B4449             0420*  ;   Plus all characters in RANGE1 and RANGE2
0B4449             0421*  ;
0B4449 FD 7E 00    0422*  RANGE:			LD      A,(IY)			; Fetch the character
0B444C FE 24       0423*  			CP      '$'			; Postfix for string variable is valid
0B444E C8          0424*  			RET     Z
0B444F FE 25       0425*  			CP      '%'			; Postfix for integer variable is valid
0B4451 C8          0426*  			RET     Z
0B4452 FE 28       0427*  			CP      '('			; Postfix for array is valid
0B4454 C8          0428*  			RET     Z
0B4455             0429*  ;
0B4455             0430*  ; It is called here to check the following
0B4455             0431*  ; In range: "0" to "9" and "@"
0B4455             0432*  ;   Plus all characters in RANGE2
0B4455             0433*  ;
0B4455 FE 30       0434*  RANGE1:			CP      '0'			; If it is between '0'...
0B4457 D8          0435*  			RET     C
0B4458 FE 3A       0436*  			CP      '9'+1			; And '9'...
0B445A 3F          0437*  			CCF
0B445B D0          0438*  			RET     NC			; Then it is valid
0B445C FE 40       0439*  			CP      '@'             	; The prefix @ is valid (@% controls numeric print formatting - v2.4)
0B445E C8          0440*  			RET     Z
0B445F             0441*  ;
0B445F             0442*  ; It is called here to check the following
0B445F             0443*  ; In range: "A" to "Z", "a' to "z", "_" and "`"
0B445F             0444*  ;
0B445F FE 41       0445*  RANGE2:			CP      'A'			; If it is between 'A'...
0B4461 D8          0446*  			RET     C
0B4462 FE 5B       0447*  			CP      'Z'+1			; And 'Z'...
0B4464 3F          0448*  			CCF
0B4465 D0          0449*  			RET     NC			; Then it is valid
0B4466 FE 5F       0450*  			CP      '_'			; If it is underscore, grave, or between 'a'
0B4468 D8          0451*  			RET     C
0B4469 FE 7B       0452*  			CP      'z'+1			; And 'z'
0B446B 3F          0453*  			CCF				; Then it is valid
0B446C C9          0454*  			RET
0B446D             0455*  
0B446D             0456*  
0B446D             0457*  ; Throw a 'LINE space' error (line too long)
0B446D             0458*  ; This is called from LEXAN
0B446D             0459*  ;
0B446D AF          0460*  SPACE_: 		XOR     A
0B446E             0461*  			; CALL    EXTERR          	; "LINE space"
0B446E             0462*  			; DB    	LINE_, 8, 0
0B446E             0463*  ;
0B446E             0464*  ; LEXAN - LEXICAL ANALYSIS.
0B446E             0465*  ;  Bit 0,C: 1=left, 0=right
0B446E             0466*  ;  Bit 2,C: 1=in BINARY
0B446E             0467*  ;  Bit 3,C: 1=in HEX
0B446E             0468*  ;  Bit 4,C: 1=accept line number
0B446E             0469*  ;  Bit 5,C: 1=in variable, FN, PROC
0B446E             0470*  ;  Bit 6,C: 1=in REM, DATA, *
0B446E             0471*  ;  Bit 7,C: 1=in quotes
0B446E             0472*  ;   Inputs: IY addresses source string
0B446E             0473*  ;           DE addresses destination string (must be page boundary)
0B446E             0474*  ;            C sets initial mode
0B446E             0475*  ;  Outputs: DE, IY updated
0B446E             0476*  ;            A holds carriage return
0B446E             0477*  ;
0B446E 12          0478*  LEXAN1:			LD      (DE),A          	; Transfer to buffer
0B446F 13          0479*  			INC     DE              	; Increment the pointers
0B4470 FD 23       0480*  			INC     IY			; And fall through to the main function
0B4472             0481*  ;
0B4472             0482*  ; This is the main entry point
0B4472             0483*  ;
0B4472 7B          0484*  LEXAN2:			LD      A,E             	; Destination buffer on page boundary, so E can be used as length
0B4473 FE FC       0485*  			CP      252             	; If it is >= 252 bytes, then...
0B4475 30 F6       0486*  			JR      NC,SPACE_        	; Throw a 'LINE space' error (line too long)
0B4477 FD 7E 00    0487*  			LD      A,(IY)			; Fetch character from source string
0B447A FE 0D       0488*  			CP      CR			; If it is a CR
0B447C C8          0489*  			RET     Z               	; Then it is end of line; we're done parsing
0B447D CD 55 44 0B 0490*  			CALL    RANGE1			; Is it alphanumeric, '@', '_' or '`'
0B4481 30 06       0491*  			JR      NC,LEXAN3		; Yes, so skip
0B4483 CB A9       0492*  			RES     5,C             	; FLAG: NOT IN VARIABLE
0B4485 CB 99       0493*  			RES     3,C             	; FLAG: NOT IN HEX
0B4487 CB 91       0494*  			RES	2,C			; FLAG: NOT IN BINARY
0B4489             0495*  ;
0B4489 FE 20       0496*  LEXAN3:			CP      ' '			; Ignore spaces
0B448B 28 E1       0497*  			JR      Z,LEXAN1
0B448D FE 2C       0498*  			CP      ','			; Ignore commas
0B448F 28 DD       0499*  			JR      Z,LEXAN1
0B4491 FE 32       0500*  			CP	'2'			; If less than '2'
0B4493 30 02       0501*  			JR	NC, @F			; No, so skip
0B4495 CB 91       0502*  			RES	2,C			; FLAG: NOT IN BINARY
0B4497 FE 47       0503*  @@:			CP      'G'			; If less then 'G'
0B4499 38 02       0504*  			JR      C,LEXAN4		; Yes, so skip
0B449B CB 99       0505*  			RES     3,C             	; FLAG: NOT IN HEX
0B449D             0506*  ;
0B449D FE 22       0507*  LEXAN4:			CP      34			; Is it a quote character?
0B449F 20 05       0508*  			JR      NZ,LEXAN5		; No, so skip
0B44A1 CB 11       0509*  			RL      C			; Toggle bit 7 of C by shifting it into carry flag
0B44A3 3F          0510*  			CCF                     	; Toggle the carry
0B44A4 CB 19       0511*  			RR      C			; And then shifting it back into bit 7 of C
0B44A6             0512*  ;
0B44A6             0513*  LEXAN5:
0B44A6             0514*              ; BIT     4,C			; Accept line number?
0B44A6             0515*  			; JR      Z,LEXAN6		; No, so skip
0B44A6             0516*  			; RES     4,C			; FLAG: DON'T ACCEPT LINE NUMBER
0B44A6             0517*  			; PUSH    BC
0B44A6             0518*  			; PUSH    DE
0B44A6             0519*  			; CALL    LINNUM         		; Parse the line number to HL
0B44A6             0520*  			; POP     DE
0B44A6             0521*  			; POP     BC
0B44A6             0522*  			; LD      A,H			; If it is not zero
0B44A6             0523*  			; OR      L
0B44A6             0524*  			; CALL    NZ,ENCODE       	; Then encode the line number HL to the destination (DE)
0B44A6             0525*  			; JR      LEXAN2          	; And loop
0B44A6             0526*  ;
0B44A6 0D          0527*  LEXAN6:			DEC     C			; Check for C=1 (LEFT)
0B44A7 28 0A       0528*  			JR      Z,LEXAN7        	; If so, skip
0B44A9 0C          0529*  			INC     C			; Otherwise restore C
0B44AA 20 C2       0530*  			JR      NZ,LEXAN1		; If C was 0 (RIGHT) then...
0B44AC B7          0531*  			OR      A			; Set the flags based on the character
0B44AD F4 F0 44 0B 0532*  			CALL    P,LEX           	; Tokenise if A < 128
0B44B1 18 13       0533*  			JR      LEXAN8			; And skip
0B44B3             0534*  ;
0B44B3             0535*  ; Processing the LEFT hand side here
0B44B3             0536*  ;
0B44B3 FE 2A       0537*  LEXAN7:			CP      '*'			; Is it a '*' (for star commands)
0B44B5 28 17       0538*  			JR      Z,LEXAN9		; Yes, so skip to quit tokenising
0B44B7 B7          0539*  			OR      A			; Set the flags based on the character
0B44B8 F4 F0 44 0B 0540*  			CALL    P,LEX           	; Tokenise if A < 128
0B44BC             0541*  ;
0B44BC             0542*  ; This bit of code checks if the tokens are one of the pseudo-variables PTR, PAGE, TIME, LOMEM, HIMEM
0B44BC             0543*  ; These tokens are duplicate in the table with a GET version and a SET version offset by the define OFFSET (40h)
0B44BC             0544*  ; Examples:
0B44BC             0545*  ;   LET A% = PAGE : REM This is the GET version
0B44BC             0546*  ;   PAGE = 40000  : REM This is the SET version
0B44BC             0547*  ;
0B44BC FE 8F       0548*  			CP      TOKLO			; TOKLO is 8Fh
0B44BE 38 06       0549*  			JR      C,LEXAN8		; If A is < 8Fh then skip to LEX8
0B44C0 FE 94       0550*  			CP      TOKHI+1			; TOKHI is 93h
0B44C2 30 02       0551*  			JR      NC,LEXAN8		; If A is >= 94h then skip to LEX8
0B44C4 C6 40       0552*  			ADD     A,OFFSET       		; Add OFFSET (40h) to make the token the SET version
0B44C6             0553*  ;
0B44C6 FE F4       0554*  LEXAN8:			CP      REM			; If the token is REM
0B44C8 28 04       0555*  			JR      Z,LEXAN9		; Then stop tokenising
0B44CA FE DC       0556*  			CP      DATA_			; If it is not DATA then
0B44CC 20 02       0557*  			JR      NZ,LEXANA		; Skip
0B44CE CB F1       0558*  LEXAN9:			SET     6,C             	; FLAG: STOP TOKENISING
0B44D0             0559*  ;
0B44D0 FE A4       0560*  LEXANA:			CP      FN			; If the token is FN
0B44D2 28 0A       0561*  			JR      Z,LEXANB
0B44D4 FE F2       0562*  			CP      PROC			; Or the token is PROC
0B44D6 28 06       0563*  			JR      Z,LEXANB		; Then jump to here
0B44D8 CD 5F 44 0B 0564*  			CALL    RANGE2			; Otherwise check the input is alphanumeric, "_" or "`"
0B44DC 38 02       0565*  			JR      C,LEXANC		; Jump here if out of range
0B44DE             0566*  ;
0B44DE CB E9       0567*  LEXANB:			SET     5,C             	; FLAG: IN VARIABLE/FN/PROC
0B44E0 FE 26       0568*  LEXANC:			CP      '&'			; Check for hex prefix
0B44E2 20 02       0569*  			JR      NZ,LEXAND		; If not, skip
0B44E4 CB D9       0570*  			SET     3,C             	; FLAG: IN HEX
0B44E6             0571*  ;
0B44E6 FE 25       0572*  LEXAND:			CP	'%'			; Check for binary prefix
0B44E8 20 02       0573*  			JR	NZ,LEXANE		; If not, skip
0B44EA CB D1       0574*  			SET	2,C			; FLAG: IN BINARY
0B44EC             0575*  ;
0B44EC             0576*  LEXANE:
0B44EC             0577*              ; LD      HL,LIST1		; List of tokens that must be followed by a line number
0B44EC             0578*  			; PUSH    BC
0B44EC             0579*  			; LD      BC,LIST1L		; The list length
0B44EC             0580*  			; CPIR				; Check if the token is in this list
0B44EC             0581*  			; POP     BC
0B44EC             0582*  			; JR      NZ,LEXANF		; If not, then skip
0B44EC             0583*  			; SET     4,C             	; FLAG: ACCEPT LINE NUMBER
0B44EC             0584*  ;
0B44EC             0585*  LEXANF:
0B44EC             0586*              ; LD      HL,LIST2		; List of tokens that switch the lexical analysis back to LEFT mode
0B44EC             0587*  			; PUSH    BC
0B44EC             0588*  			; LD      BC,LIST2L		; The list length
0B44EC             0589*  			; CPIR				; Check if the token is in this list
0B44EC             0590*  			; POP     BC
0B44EC             0591*  			; JR      NZ,LEXANG		; If not, then skip
0B44EC             0592*  			; SET     0,C             	; FLAG: ENTER LEFT MODE
0B44EC C3 6E 44 0B 0593*  LEXANG:			JP      LEXAN1			; And loop
0B44F0             0594*  
0B44F0             0595*  
0B44F0             0596*  ; SUBROUTINES:
0B44F0             0597*  ;
0B44F0             0598*  ; LEX - SEARCH FOR KEYWORDS
0B44F0             0599*  ;   Inputs: HL = start of keyword table
0B44F0             0600*  ;           IY = start of match text
0B44F0             0601*  ;  Outputs: If found, Z-flag set, A=token.
0B44F0             0602*  ;           If not found, Z-flag reset, A=(IY).
0B44F0             0603*  ;           IY updated (if NZ, IY unchanged).
0B44F0             0604*  ; Destroys: A,B,H,L,IY,F
0B44F0             0605*  ;
0B44F0 21 2B 45 0B 0606*  LEX:			LD      HL,KEYWDS		; Address of the keywords table
0B44F4             0607*  ;
0B44F4 FD 7E 00    0608*  LEX0:			LD      A,(IY)			; Fetch the character to match
0B44F7 46          0609*  			LD      B,(HL)			; B: The token from the keywords table
0B44F8 23          0610*  			INC     HL			; Increment the pointer in the keywords table
0B44F9 BE          0611*  			CP      (HL)			; Compare the first characters
0B44FA 28 08       0612*  			JR      Z,LEX2			; If there is a match, then skip to LEX2
0B44FC D8          0613*  			RET     C               	; No match, so fail
0B44FD             0614*  ;
0B44FD             0615*  ; This snippet of code skips to the next token in the KEYWDS table
0B44FD             0616*  ;
0B44FD 23          0617*  LEX1:			INC     HL			; Increment the pointer
0B44FE CB 7E       0618*  			BIT     7,(HL)			; Check if bit 7 set (all token IDs have bit 7 set)
0B4500 28 FB       0619*  			JR      Z,LEX1			; No, so loop
0B4502 18 F0       0620*  			JR      LEX0			; At this point HL is pointing to the start of the next keyword
0B4504             0621*  ;
0B4504 FD E5       0622*  LEX2:			PUSH    IY              	; Save the input pointer
0B4506 23          0623*  LEX3:			INC     HL			; Increment the keyword pointer
0B4507 CB 7E       0624*  			BIT     7,(HL)			; If we've reached the end (marked by the start of the next token) then
0B4509 20 1C       0625*  			JR      NZ,LEX6         	; Jump to here as we've found a token
0B450B FD 23       0626*  			INC     IY			; Increment the text pointer
0B450D FD 7E 00    0627*  			LD      A,(IY)			; Fetch the character
0B4510 FE 2E       0628*  			CP      '.'			; Is it an abbreviated keyword?
0B4512 28 13       0629*  			JR      Z,LEX6          	; Yes, so we'll return with the token we've found
0B4514 BE          0630*  			CP      (HL)			; Compare with the keywords list
0B4515 28 EF       0631*  			JR      Z,LEX3			; It's a match, so continue checking this keyword
0B4517 CD 55 44 0B 0632*  			CALL    RANGE1			; Is it alphanumeric, '@', '_' or '`'
0B451B 38 04       0633*  			JR      C,LEX5			; No, so check whether keyword needs to be immediately delimited
0B451D             0634*  ;
0B451D FD E1       0635*  LEX4:			POP     IY              	; Restore the input pointer ready for the next search
0B451F 18 DC       0636*  			JR      LEX1			; And loop back to start again
0B4521             0637*  ;
0B4521             0638*  ; This section handles the 0 byte at the end of keywords that indicate the keyword needs to be
0B4521             0639*  ; immediately delimited
0B4521             0640*  ;
0B4521 7E          0641*  LEX5:			LD      A,(HL)			; Fetch the byte from the keywords table
0B4522 B7          0642*  			OR      A			; If it is not zero, then...
0B4523 20 F8       0643*  			JR      NZ,LEX4			; Keep searching
0B4525 FD 2B       0644*  			DEC     IY			; If it is zero, then skip the input pointer back one byte
0B4527             0645*  ;
0B4527             0646*  ; We've found a token at this point
0B4527             0647*  ;
0B4527 F1          0648*  LEX6:			POP     AF			; Discard IY input pointer pushed on the stack
0B4528 AF          0649*  			XOR     A			; Set the Z flag
0B4529 78          0650*  			LD      A,B			; A: The token
0B452A C9          0651*  			RET
0B452B             0652*  
0B452B             0653*  
0B452B             0654*  ; A handful of common token IDs
0B452B             0655*  ;
0B452B             0656*  TERROR:			EQU     85H
0B452B             0657*  LINE_:			EQU     86H
0B452B             0658*  ELSE_:			EQU     8BH
0B452B             0659*  THEN:			EQU     8CH
0B452B             0660*  LINO:			EQU     8DH
0B452B             0661*  FN:			EQU     A4H
0B452B             0662*  TO:			EQU     B8H
0B452B             0663*  REN:			EQU     CCH
0B452B             0664*  DATA_:			EQU     DCH
0B452B             0665*  DIM:			EQU     DEH
0B452B             0666*  FOR:			EQU     E3H
0B452B             0667*  GOSUB:			EQU     E4H
0B452B             0668*  GOTO:			EQU     E5H
0B452B             0669*  TIF:			EQU     E7H
0B452B             0670*  LOCAL_:			EQU     EAH
0B452B             0671*  NEXT:			EQU     EDH
0B452B             0672*  ON_:			EQU     EEH
0B452B             0673*  PROC:			EQU     F2H
0B452B             0674*  REM:			EQU     F4H
0B452B             0675*  REPEAT:			EQU     F5H
0B452B             0676*  RESTOR:			EQU     F7H
0B452B             0677*  TRACE:			EQU     FCH
0B452B             0678*  UNTIL:			EQU     FDH
0B452B             0679*  ;
0B452B             0680*  ; This defines the block of tokens that are pseudo-variables.
0B452B             0681*  ; There are two versions of each token, a GET and a SET
0B452B             0682*  
0B452B             0683*  ; Name  : GET : SET
0B452B             0684*  ; ------:-----:----
0B452B             0685*  ; PTR   : 8Fh : CFh
0B452B             0686*  ; PAGE  : 90h : D0h
0B452B             0687*  ; TIME  : 91h : D1h
0B452B             0688*  ; LOMEM : 92h : D2h
0B452B             0689*  ; HIMEM : 93h : D3h
0B452B             0690*  ;
0B452B             0691*  ; Examples:
0B452B             0692*  ;   LET A% = PAGE : REM This is the GET version
0B452B             0693*  ;   PAGE = 40000  : REM This is the SET version
0B452B             0694*  ;
0B452B             0695*  TOKLO:			EQU     8FH			; This defines the block of tokens that are pseudo-variables
0B452B             0696*  TOKHI:			EQU     93H			; PTR, PAGE, TIME, LOMEM, HIMEM
0B452B             0697*  OFFSET:			EQU     CFH-TOKLO		; Offset to the parameterised SET versions
0B452B             0698*  
0B452B             0699*  
0B452B             0700*  ; List of tokens and keywords. If a keyword is followed by 0 then
0B452B             0701*  ; it will only match with the keyword followed immediately by
0B452B             0702*  ; a delimiter
0B452B             0703*  ;
0B452B 80 41 4E 44 0704*  KEYWDS:			DB    80H, "AND"
0B452F 94 41 42 53 0705*  			DB    94H, "ABS"
0B4533 95 41 43 53 0706*  			DB    95H, "ACS"
0B4537 96 41 44 56 0707*  			DB    96H, "ADVAL"
       41 4C       
0B453D 97 41 53 43 0708*  			DB    97H, "ASC"
0B4541 98 41 53 4E 0709*  			DB    98H, "ASN"
0B4545 99 41 54 4E 0710*  			DB    99H, "ATN"
0B4549 C6 41 55 54 0711*  			DB    C6H, "AUTO"
       4F          
0B454E 9A 42 47 45 0712*  			DB    9AH, "BGET", 0
       54 00       
0B4554 D5 42 50 55 0713*  			DB    D5H, "BPUT", 0
       54 00       
0B455A FB 43 4F 4C 0714*  			DB    FBH, "COLOUR"
       4F 55 52    
0B4561 FB 43 4F 4C 0715*  			DB    FBH, "COLOR"
       4F 52       
0B4567 D6 43 41 4C 0716*  			DB    D6H, "CALL"
       4C          
0B456C D7 43 48 41 0717*  			DB    D7H, "CHAIN"
       49 4E       
0B4572 BD 43 48 52 0718*  			DB    BDH, "CHR$"
       24          
0B4577 D8 43 4C 45 0719*  			DB    D8H, "CLEAR", 0
       41 52 00    
0B457E D9 43 4C 4F 0720*  			DB    D9H, "CLOSE", 0
       53 45 00    
0B4585 DA 43 4C 47 0721*  			DB    DAH, "CLG", 0
       00          
0B458A DB 43 4C 53 0722*  			DB    DBH, "CLS", 0
       00          
0B458F 9B 43 4F 53 0723*  			DB    9BH, "COS"
0B4593 9C 43 4F 55 0724*  			DB    9CH, "COUNT", 0
       4E 54 00    
0B459A DC 44 41 54 0725*  			DB    DCH, "DATA"
       41          
0B459F 9D 44 45 47 0726*  			DB    9DH, "DEG"
0B45A3 DD 44 45 46 0727*  			DB    DDH, "DEF"
0B45A7 C7 44 45 4C 0728*  			DB    C7H, "DELETE"
       45 54 45    
0B45AE 81 44 49 56 0729*  			DB    81H, "DIV"
0B45B2 DE 44 49 4D 0730*  			DB    DEH, "DIM"
0B45B6 DF 44 52 41 0731*  			DB    DFH, "DRAW"
       57          
0B45BB E1 45 4E 44 0732*  			DB    E1H, "ENDPROC", 0
       50 52 4F 43 
       00          
0B45C4 E0 45 4E 44 0733*  			DB    E0H, "END", 0
       00          
0B45C9 E2 45 4E 56 0734*  			DB    E2H, "ENVELOPE"
       45 4C 4F 50 
       45          
0B45D2 8B 45 4C 53 0735*  			DB    8BH, "ELSE"
       45          
0B45D7 A0 45 56 41 0736*  			DB    A0H, "EVAL"
       4C          
0B45DC 9E 45 52 4C 0737*  			DB    9EH, "ERL", 0
       00          
0B45E1 85 45 52 52 0738*  			DB    85H, "ERROR"
       4F 52       
0B45E7 C5 45 4F 46 0739*  			DB    C5H, "EOF", 0
       00          
0B45EC 82 45 4F 52 0740*  			DB    82H, "EOR"
0B45F0 9F 45 52 52 0741*  			DB    9FH, "ERR", 0
       00          
0B45F5 A1 45 58 50 0742*  			DB    A1H, "EXP"
0B45F9 A2 45 58 54 0743*  			DB    A2H, "EXT", 0
       00          
0B45FE E3 46 4F 52 0744*  			DB    E3H, "FOR"
0B4602 A3 46 41 4C 0745*  			DB    A3H, "FALSE", 0
       53 45 00    
0B4609 A4 46 4E    0746*  			DB    A4H, "FN"
0B460C E5 47 4F 54 0747*  			DB    E5H, "GOTO"
       4F          
0B4611 BE 47 45 54 0748*  			DB    BEH, "GET$"
       24          
0B4616 A5 47 45 54 0749*  			DB    A5H, "GET"
0B461A E4 47 4F 53 0750*  			DB    E4H, "GOSUB"
       55 42       
0B4620 E6 47 43 4F 0751*  			DB    E6H, "GCOL"
       4C          
0B4625 93 48 49 4D 0752*  			DB    93H, "HIMEM", 0
       45 4D 00    
0B462C E8 49 4E 50 0753*  			DB    E8H, "INPUT"
       55 54       
0B4632 E7 49 46    0754*  			DB    E7H, "IF"
0B4635 BF 49 4E 4B 0755*  			DB    BFH, "INKEY$"
       45 59 24    
0B463C A6 49 4E 4B 0756*  			DB    A6H, "INKEY"
       45 59       
0B4642 A8 49 4E 54 0757*  			DB    A8H, "INT"
0B4646 A7 49 4E 53 0758*  			DB    A7H, "INSTR("
       54 52 28    
0B464D C9 4C 49 53 0759*  			DB    C9H, "LIST"
       54          
0B4652 86 4C 49 4E 0760*  			DB    86H, "LINE"
       45          
0B4657 C8 4C 4F 41 0761*  			DB    C8H, "LOAD"
       44          
0B465C 92 4C 4F 4D 0762*  			DB    92H, "LOMEM", 0
       45 4D 00    
0B4663 EA 4C 4F 43 0763*  			DB    EAH, "LOCAL"
       41 4C       
0B4669 C0 4C 45 46 0764*  			DB    C0H, "LEFT$("
       54 24 28    
0B4670 A9 4C 45 4E 0765*  			DB    A9H, "LEN"
0B4674 E9 4C 45 54 0766*  			DB    E9H, "LET"
0B4678 AB 4C 4F 47 0767*  			DB    ABH, "LOG"
0B467C AA 4C 4E    0768*  			DB    AAH, "LN"
0B467F C1 4D 49 44 0769*  			DB    C1H, "MID$("
       24 28       
0B4685 EB 4D 4F 44 0770*  			DB    EBH, "MODE"
       45          
0B468A 83 4D 4F 44 0771*  			DB    83H, "MOD"
0B468E EC 4D 4F 56 0772*  			DB    ECH, "MOVE"
       45          
0B4693 ED 4E 45 58 0773*  			DB    EDH, "NEXT"
       54          
0B4698 CA 4E 45 57 0774*  			DB    CAH, "NEW", 0
       00          
0B469D AC 4E 4F 54 0775*  			DB    ACH, "NOT"
0B46A1 CB 4F 4C 44 0776*  			DB    CBH, "OLD", 0
       00          
0B46A6 EE 4F 4E    0777*  			DB    EEH, "ON"
0B46A9 87 4F 46 46 0778*  			DB    87H, "OFF"
0B46AD 84 4F 52    0779*  			DB    84H, "OR"
0B46B0 8E 4F 50 45 0780*  			DB    8EH, "OPENIN"
       4E 49 4E    
0B46B7 AE 4F 50 45 0781*  			DB    AEH, "OPENOUT"
       4E 4F 55 54 
0B46BF AD 4F 50 45 0782*  			DB    ADH, "OPENUP"
       4E 55 50    
0B46C6 FF 4F 53 43 0783*  			DB    FFH, "OSCLI"
       4C 49       
0B46CC F1 50 52 49 0784*  			DB    F1H, "PRINT"
       4E 54       
0B46D2 90 50 41 47 0785*  			DB    90H, "PAGE", 0
       45 00       
0B46D8 8F 50 54 52 0786*  			DB    8FH, "PTR", 0
       00          
0B46DD AF 50 49 00 0787*  			DB    AFH, "PI", 0
0B46E1 F0 50 4C 4F 0788*  			DB    F0H, "PLOT"
       54          
0B46E6 B0 50 4F 49 0789*  			DB    B0H, "POINT("
       4E 54 28    
0B46ED F2 50 52 4F 0790*  			DB    F2H, "PROC"
       43          
0B46F2 B1 50 4F 53 0791*  			DB    B1H, "POS", 0
       00          
0B46F7 CE 50 55 54 0792*  			DB    CEH, "PUT"
0B46FB F8 52 45 54 0793*  			DB    F8H, "RETURN", 0
       55 52 4E 00 
0B4703 F5 52 45 50 0794*  			DB    F5H, "REPEAT"
       45 41 54    
0B470A F6 52 45 50 0795*  			DB    F6H, "REPORT", 0
       4F 52 54 00 
0B4712 F3 52 45 41 0796*  			DB    F3H, "READ"
       44          
0B4717 F4 52 45 4D 0797*  			DB    F4H, "REM"
0B471B F9 52 55 4E 0798*  			DB    F9H, "RUN", 0
       00          
0B4720 B2 52 41 44 0799*  			DB    B2H, "RAD"
0B4724 F7 52 45 53 0800*  			DB    F7H, "RESTORE"
       54 4F 52 45 
0B472C C2 52 49 47 0801*  			DB    C2H, "RIGHT$("
       48 54 24 28 
0B4734 B3 52 4E 44 0802*  			DB    B3H, "RND", 0
       00          
0B4739 CC 52 45 4E 0803*  			DB    CCH, "RENUMBER"
       55 4D 42 45 
       52          
0B4742 88 53 54 45 0804*  			DB    88H, "STEP"
       50          
0B4747 CD 53 41 56 0805*  			DB    CDH, "SAVE"
       45          
0B474C B4 53 47 4E 0806*  			DB    B4H, "SGN"
0B4750 B5 53 49 4E 0807*  			DB    B5H, "SIN"
0B4754 B6 53 51 52 0808*  			DB    B6H, "SQR"
0B4758 89 53 50 43 0809*  			DB    89H, "SPC"
0B475C C3 53 54 52 0810*  			DB    C3H, "STR$"
       24          
0B4761 C4 53 54 52 0811*  			DB    C4H, "STRING$("
       49 4E 47 24 
       28          
0B476A D4 53 4F 55 0812*  			DB    D4H, "SOUND"
       4E 44       
0B4770 FA 53 54 4F 0813*  			DB    FAH, "STOP", 0
       50 00       
0B4776 B7 54 41 4E 0814*  			DB    B7H, "TAN"
0B477A 8C 54 48 45 0815*  			DB    8CH, "THEN"
       4E          
0B477F B8 54 4F    0816*  			DB    B8H, "TO"
0B4782 8A 54 41 42 0817*  			DB    8AH, "TAB("
       28          
0B4787 FC 54 52 41 0818*  			DB    FCH, "TRACE"
       43 45       
0B478D 91 54 49 4D 0819*  			DB    91H, "TIME", 0
       45 00       
0B4793 B9 54 52 55 0820*  			DB    B9H, "TRUE", 0
       45 00       
0B4799 FD 55 4E 54 0821*  			DB    FDH, "UNTIL"
       49 4C       
0B479F BA 55 53 52 0822*  			DB    BAH, "USR"
0B47A3 EF 56 44 55 0823*  			DB    EFH, "VDU"
0B47A7 BB 56 41 4C 0824*  			DB    BBH, "VAL"
0B47AB BC 56 50 4F 0825*  			DB    BCH, "VPOS", 0
       53 00       
0B47B1 FE 57 49 44 0826*  			DB    FEH, "WIDTH"
       54 48       
0B47B7 D3 48 49 4D 0827*  			DB    D3H, "HIMEM"
       45 4D       
0B47BD D2 4C 4F 4D 0828*  			DB    D2H, "LOMEM"
       45 4D       
0B47C3 D0 50 41 47 0829*  			DB    D0H, "PAGE"
       45          
0B47C8 CF 50 54 52 0830*  			DB    CFH, "PTR"
0B47CC D1 54 49 4D 0831*  			DB    D1H, "TIME"
       45          
0B47D1             0832*  
0B47D1             0833*  
0B47D1             0834*  ; from exec.asm
0B47D1             0835*  
0B47D1             0836*  ; ASSIGN - Assign a numeric value to a variable.
0B47D1             0837*  ; Outputs: NC,  Z - OK, numeric.
0B47D1             0838*  ;          NC, NZ - OK, string.
0B47D1             0839*  ;           C, NZ - illegal
0B47D1             0840*  ;
0B47D1 CD 86 42 0B 0841*  ASSIGN:			CALL    GETVAR          	; Try to get the variable
0B47D5 D8          0842*  			RET     C               	; Return with C if it is an illegal variable
0B47D6 C4 79 42 0B 0843*  			CALL    NZ,PUTVAR		; If it does not exist, then create the variable
0B47DA B7          0844*  			OR      A
0B47DB F8          0845*  			RET     M               	; Return if type is string (81h)
0B47DC F5          0846*  			PUSH    AF              	; It's a numeric type from this point on
0B47DD CD 13 48 0B 0847*  			CALL    EQUALS			; Check if the variable is followed by an '=' symbol; this will throw a 'Mistake' error if not
0B47E1 E5          0848*  			PUSH    HL
0B47E2 CD F5 2D 0B 0849*  			CALL    EXPRN
0B47E6 DD E1       0850*  			POP     IX
0B47E8 F1          0851*  			POP     AF
0B47E9 CB 47       0852*  STORE:			BIT     0,A
0B47EB 28 13       0853*  			JR      Z,STOREI
0B47ED BF          0854*  			CP      A               	; Set the variable to 0
0B47EE DD 71 04    0855*  STORE5:			LD      (IX+4),C
0B47F1 D9          0856*  STORE4:			EXX
0B47F2 DD 75 00    0857*  			LD      (IX+0),L
0B47F5 DD 74 01    0858*  			LD      (IX+1),H
0B47F8 D9          0859*  			EXX
0B47F9 DD 75 02    0860*  			LD      (IX+2),L
0B47FC DD 74 03    0861*  			LD      (IX+3),H
0B47FF C9          0862*  			RET
0B4800 F5          0863*  STOREI:			PUSH    AF
0B4801 0C          0864*  			INC     C               ;SPEED - & PRESERVE F'
0B4802 0D          0865*  			DEC     C               ; WHEN CALLED BY FNEND0
0B4803 C4 A0 30 0B 0866*  			CALL    NZ,SFIX         ;CONVERT TO INTEGER
0B4807 F1          0867*  			POP     AF
0B4808 FE 04       0868*  			CP      4
0B480A 28 E5       0869*  			JR      Z,STORE4
0B480C BF          0870*  			CP      A               ;SET ZERO
0B480D D9          0871*  STORE1:			EXX
0B480E DD 75 00    0872*  			LD      (IX+0),L
0B4811 D9          0873*  			EXX
0B4812 C9          0874*  			RET
0B4813             0875*  
0B4813             0876*  
0B4813             0877*  ; This snippet is used to check whether an expression is followed by an '=' symbol
0B4813             0878*  ;
0B4813 CD 4A 34 0B 0879*  EQUALS:			CALL    NXT			; Skip whitespace
0B4817 FD 23       0880*  			INC     IY			; Skip past the character in question
0B4819 FE 3D       0881*  			CP      '='			; Is it '='
0B481B C8          0882*  			RET     Z			; Yes, so return
0B481C             0883*  			; LD      A,4			; Otherwise
0B481C             0884*  			; JP      ERROR_           	; Throw error "Mistake"
0B481C             0885*  
0B481C             0886*  
0B481C             0887*  ; STUBS OF STUFF WE WON'T BE USING
0B481C C9          0888*  POINT:      ret			; POINT( ; in agon_graphics.asm we won't be using
0B481D C9          0889*  USR:        ret			; USR ; in exec.asm
0B481E             0388       include "basic/sorry.asm"
0B481E             0001*  ;
0B481E             0002*  ; Title:	BBC Basic Interpreter - Z80 version
0B481E             0003*  ;		Catch-all for unimplemented functionality
0B481E             0004*  ; Author:	Dean Belfield
0B481E             0005*  ; Created:	12/05/2023
0B481E             0006*  ; Last Updated:	12/05/2023
0B481E             0007*  ;
0B481E             0008*  ; Modinfo:
0B481E             0009*  
0B481E             0010*  			.ASSUME	ADL = 1
0B481E             0011*  
0B481E             0012*  			; SEGMENT CODE
0B481E             0013*  
0B481E             0014*  			; XDEF	ENVEL
0B481E             0015*  			; XDEF	ADVAL
0B481E             0016*  			; XDEF	PUTIMS
0B481E             0017*  
0B481E             0018*  			; XREF	EXTERR
0B481E             0019*  
0B481E             0020*  ENVEL:
0B481E             0021*  ADVAL:
0B481E C9          0022*  PUTIMS: 	ret ; hopefully we won't be needing this
0B481F             0023*  			; XOR     A
0B481F             0024*  			; CALL    EXTERR
0B481F             0025*  			; DEFB    "Sorry"
0B481F             0026*  			; DEFB    0
0B481F             0389   
0B481F             0390   ; -------------------- from basic/fpp.asm --------------------
0B481F             0391   ;
0B481F             0392   ;VAL - Return numeric value of string.
0B481F             0393   ;Input: ASCII string at IX
0B481F             0394   ;Result is variable type numeric.
0B481F             0395   ;
0B481F             0396   ;Function STR - convert numeric value to ASCII string.
0B481F             0397   ;   Inputs: HLH'L'C = integer or floating-point number
0B481F             0398   ;           DE = address at which to store string
0B481F             0399   ;           IX = address of @% format control
0B481F             0400   ;  Outputs: String stored, with NUL terminator
0B481F             0401   
0B481F             0402   
0B481F             0403   ;NUMBER: Get unsigned integer from string.
0B481F             0404   ;    Inputs: string at (IX)
0B481F             0405   ;            C = truncated digit count
0B481F             0406   ;                (initially zero)
0B481F             0407   ;            B = total digit count
0B481F             0408   ;            HLH'L' = initial value
0B481F             0409   ;   Outputs: HLH'L' = number (binary integer)
0B481F             0410   ;            A = delimiter.
0B481F             0411   ;            B, C & IX updated
0B481F             0412   ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
0B481F             0413   ;
0B481F             0414   
0B481F             0415   ; -------------------- from basic/eval.asm --------------------
0B481F             0416   ;
0B481F             0417   ;Function STR - convert numeric value to ASCII string.
0B481F             0418   ;   Inputs: HLH'L'C = integer or floating-point number.
0B481F             0419   ;  Outputs: String in string accumulator.
0B481F             0420   ;           E = length, D = ACCS/256
0B481F             0421   ;           A = 80H (type=string)
0B481F             0422   
0B481F             0423   
0B481F             0424   ;HEXSTR - convert numeric value to HEX string.
0B481F             0425   ;   Inputs: HLH'L'C = integer or floating-point number
0B481F             0426   ;  Outputs: String in string accumulator.
0B481F             0427   ;           E = string length.  D = ACCS/256
0B481F             0428   ;
0B481F             0429   ; BASIC FUNCTIONS
0B481F             0430   BASIC_EXEC:
0B481F C2 5A 25 0B 0431       jp nz,_main_end_error
0B4823             0432   
0B4823             0433       callIY ; call the function
0B4823 01 2A 48 0B 0001M          ld bc,$+7     ; Address of first instruction after the jump
0B4827 C5          0002M          push bc       ; which constitutes the return address
0B4828 FD E9       0003M          jp   (iy)     ; Jump to the address in IY
0B482A CD 88 02 0B 0434       call printNewLine
0B482E C3 67 25 0B 0435       jp _main_end_ok
0B4832             0436   
0B4832             0437   BASIC:
0B4832 38 48 0B    0438       dl val
0B4835 00 00 00    0439       dl 0x000000 ; list terminator
0B4838             0440   val:
0B4838 18 04       0441       jr @start
0B483A 76 61 6C 00 0442       asciz "val"
0B483E             0443   @start:
0B483E CD 4C 27 0B 0444       call get_arg_text ; point hl at the string to convert
0B4842 E5          0445       push hl ; ld ix,hl
0B4843 DD E1       0446       pop ix  ; VAL expects IX to point to the string
0B4845 CD 88 02 0B 0447       call printNewLine
0B4849 CD E9 38 0B 0448       call VAL
0B484D DD 21 68 33 0449       ld ix,G9 ; point to the format string
       0B          
0B4852 11 FF FF 00 0450       ld de,65535
0B4856             0451       ; ld de,9 ; exponential format
0B4856 DD 73 00    0452       ld (ix),e ; store the format string
0B4859 DD 72 01    0453       ld (ix+1),d
0B485C 11 71 48 0B 0454       ld de,BASIC_STR_OUT ; point to the output buffer
0B4860 CD 71 3C 0B 0455       call STRING ; convert the number back to a string
0B4864 21 71 48 0B 0456       ld hl,BASIC_STR_OUT ; point to the string output buffer
0B4868 CD 73 02 0B 0457       call printString
0B486C CD 88 02 0B 0458       call printNewLine
0B4870 C9          0459       ret
0B4871             0460   
0B4871 00 00 00 00 0461   BASIC_STR_OUT: blkb 256,0
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
