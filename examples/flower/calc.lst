PC     Output      Line
040000             0001   ;
040000             0002   ; Title:	test
040000             0003   ; Author:	Brandon Gates
040000             0004   ; Created:	29/10/2024
040000             0005   
040000             0006       ASSUME	ADL = 1
040000             0007       INCLUDE "mos_api.inc"
040000             0001*  ;
040000             0002*  ; Title:	AGON MOS - API for user projects
040000             0003*  ; Author:	Dean Belfield
040000             0004*  ; Created:	03/08/2022
040000             0005*  ; Last Updated:	11/11/2023
040000             0006*  ;
040000             0007*  ; Modinfo:
040000             0008*  ; 05/08/2022:	Added mos_feof
040000             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040000             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040000             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040000             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040000             0013*  ; 13/10/2022:	Added mos_oscli
040000             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040000             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040000             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040000             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040000             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040000             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040000             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040000             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040000             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040000             0023*  ; 19/05/2023:	Added sysvar_scrMode
040000             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040000             0025*  ; 03/08/2023:	Added mos_setkbvector
040000             0026*  ; 10/08/2023:	Added mos_getkbmap
040000             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040000             0028*  ; 09/04/2024:   Adapter to ez80asm
040000             0029*  ; VDP control (VDU 23, 0, n)
040000             0030*  ;
040000             0031*  vdp_gp:			EQU 	80h
040000             0032*  vdp_keycode:		EQU 	81h
040000             0033*  vdp_cursor:		EQU	82h
040000             0034*  vdp_scrchar:		EQU	83h
040000             0035*  vdp_scrpixel:		EQU	84h
040000             0036*  vdp_audio:		EQU	85h
040000             0037*  vdp_mode:		EQU	86h
040000             0038*  vdp_rtc:		EQU	87h
040000             0039*  vdp_keystate:		EQU	88h
040000             0040*  vdp_logicalcoords:	EQU	C0h
040000             0041*  vdp_terminalmode:	EQU	FFh
040000             0042*  
040000             0043*  ; MOS high level functions
040000             0044*  ;
040000             0045*  mos_getkey:		EQU	00h
040000             0046*  mos_load:		EQU	01h
040000             0047*  mos_save:		EQU	02h
040000             0048*  mos_cd:			EQU	03h
040000             0049*  mos_dir:		EQU	04h
040000             0050*  mos_del:		EQU	05h
040000             0051*  mos_ren:		EQU	06h
040000             0052*  mos_mkdir:		EQU	07h
040000             0053*  mos_sysvars:		EQU	08h
040000             0054*  mos_editline:		EQU	09h
040000             0055*  mos_fopen:		EQU	0Ah
040000             0056*  mos_fclose:		EQU	0Bh
040000             0057*  mos_fgetc:		EQU	0Ch
040000             0058*  mos_fputc:		EQU	0Dh
040000             0059*  mos_feof:		EQU	0Eh
040000             0060*  mos_getError:		EQU	0Fh
040000             0061*  mos_oscli:		EQU	10h
040000             0062*  mos_copy:		EQU	11h
040000             0063*  mos_getrtc:		EQU	12h
040000             0064*  mos_setrtc:		EQU	13h
040000             0065*  mos_setintvector:	EQU	14h
040000             0066*  mos_uopen:		EQU	15h
040000             0067*  mos_uclose:		EQU	16h
040000             0068*  mos_ugetc:		EQU	17h
040000             0069*  mos_uputc:		EQU 	18h
040000             0070*  mos_getfil:		EQU	19h
040000             0071*  mos_fread:		EQU	1Ah
040000             0072*  mos_fwrite:		EQU	1Bh
040000             0073*  mos_flseek:		EQU	1Ch
040000             0074*  mos_setkbvector:	EQU	1Dh
040000             0075*  mos_getkbmap:		EQU	1Eh
040000             0076*  mos_i2c_open:		EQU	1Fh
040000             0077*  mos_i2c_close:		EQU	20h
040000             0078*  mos_i2c_write:		EQU	21h
040000             0079*  mos_i2c_read:		EQU	22h
040000             0080*  
040000             0081*  
040000             0082*  ; FatFS file access functions
040000             0083*  ;
040000             0084*  ffs_fopen:		EQU	80h
040000             0085*  ffs_fclose:		EQU	81h
040000             0086*  ffs_fread:		EQU	82h
040000             0087*  ffs_fwrite:		EQU	83h
040000             0088*  ffs_flseek:		EQU	84h
040000             0089*  ffs_ftruncate:		EQU	85h
040000             0090*  ffs_fsync:		EQU	86h
040000             0091*  ffs_fforward:		EQU	87h
040000             0092*  ffs_fexpand:		EQU	88h
040000             0093*  ffs_fgets:		EQU	89h
040000             0094*  ffs_fputc:		EQU	8Ah
040000             0095*  ffs_fputs:		EQU	8Bh
040000             0096*  ffs_fprintf:		EQU	8Ch
040000             0097*  ffs_ftell:		EQU	8Dh
040000             0098*  ffs_feof:		EQU	8Eh
040000             0099*  ffs_fsize:		EQU	8Fh
040000             0100*  ffs_ferror:		EQU	90h
040000             0101*  
040000             0102*  ; FatFS directory access functions
040000             0103*  ;
040000             0104*  ffs_dopen:		EQU	91h
040000             0105*  ffs_dclose:		EQU	92h
040000             0106*  ffs_dread:		EQU	93h
040000             0107*  ffs_dfindfirst:		EQU	94h
040000             0108*  ffs_dfindnext:		EQU	95h
040000             0109*  
040000             0110*  ; FatFS file and directory management functions
040000             0111*  ;
040000             0112*  ffs_stat:		EQU	96h
040000             0113*  ffs_unlink:		EQU	97h
040000             0114*  ffs_rename:		EQU	98h
040000             0115*  ffs_chmod:		EQU	99h
040000             0116*  ffs_utime:		EQU	9Ah
040000             0117*  ffs_mkdir:		EQU	9Bh
040000             0118*  ffs_chdir:		EQU	9Ch
040000             0119*  ffs_chdrive:		EQU	9Dh
040000             0120*  ffs_getcwd:		EQU	9Eh
040000             0121*  
040000             0122*  ; FatFS volume management and system configuration functions
040000             0123*  ;
040000             0124*  ffs_mount:		EQU	9Fh
040000             0125*  ffs_mkfs:		EQU	A0h
040000             0126*  ffs_fdisk:		EQU	A1h
040000             0127*  ffs_getfree:		EQU	A2h
040000             0128*  ffs_getlabel:		EQU	A3h
040000             0129*  ffs_setlabel:		EQU	A4h
040000             0130*  ffs_setcp:		EQU	A5h
040000             0131*  
040000             0132*  ; File access modes
040000             0133*  ;
040000             0134*  fa_read:		EQU	01h
040000             0135*  fa_write:		EQU	02h
040000             0136*  fa_open_existing:	EQU	00h
040000             0137*  fa_create_new:		EQU	04h
040000             0138*  fa_create_always:	EQU	08h
040000             0139*  fa_open_always:		EQU	10h
040000             0140*  fa_open_append:		EQU	30h
040000             0141*  
040000             0142*  ; System variable indexes for api_sysvars
040000             0143*  ; Index into _sysvars in globals.asm
040000             0144*  ;
040000             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040000             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040000             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040000             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040000             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040000             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040000             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040000             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040000             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040000             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040000             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040000             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040000             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040000             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040000             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040000             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040000             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040000             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040000             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040000             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040000             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040000             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040000             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040000             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040000             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040000             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040000             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040000             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040000             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040000             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040000             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040000             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040000             0177*  
040000             0178*  ; Flags for the VPD protocol
040000             0179*  ;
040000             0180*  vdp_pflag_cursor:	EQU	00000001b
040000             0181*  vdp_pflag_scrchar:	EQU	00000010b
040000             0182*  vdp_pflag_point:	EQU	00000100b
040000             0183*  vdp_pflag_audio:	EQU	00001000b
040000             0184*  vdp_pflag_mode:		EQU	00010000b
040000             0185*  vdp_pflag_rtc:		EQU	00100000b
040000             0186*  vdp_pflag_mouse:	EQU	01000000b
040000             0187*  ; vdp_pflag_buffered:	EQU	10000000b
040000             0188*  
040000             0189*  ;
040000             0190*  ; FatFS structures
040000             0191*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040000             0192*  ;
040000             0193*  ; Object ID and allocation information (FFOBJID)
040000             0194*  ;
040000             0195*  ;FFOBJID	.STRUCT
040000             0196*  ;	fs:		DS	3	; Pointer to the hosting volume of this object
040000             0197*  ;	id:		DS	2	; Hosting volume mount ID
040000             0198*  ;	attr:		DS	1	; Object attribute;
040000             0199*  ;	stat:		DS	1	; Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040000             0200*  ;	sclust:		DS	4	; Object data start cluster (0:no cluster or root directory)
040000             0201*  ;	objsize:	DS	4	; Object size (valid when sclust != 0)
040000             0202*  ;FFOBJID_SIZE .ENDSTRUCT FFOBJID
040000             0203*  ;
040000             0204*  ; File object structure (FIL)
040000             0205*  ;
040000             0206*  ;FIL .STRUCT
040000             0207*  ;	obj:		.TAG	FFOBJID	; Object identifier
040000             0208*  ;	flag:		DS	1	; File status flags
040000             0209*  ;	err:		DS	1	; Abort flag (error code)
040000             0210*  ;	fptr:		DS	4	; File read/write pointer (Zeroed on file open)
040000             0211*  ;	clust:		DS	4	; Current cluster of fpter (invalid when fptr is 0)
040000             0212*  ;	sect:		DS	4	; Sector number appearing in buf[] (0:invalid)
040000             0213*  ;	dir_sect:	DS	4	; Sector number containing the directory entry
040000             0214*  ;	dir_ptr:	DS	3	; Pointer to the directory entry in the win[]
040000             0215*  ;FIL_SIZE .ENDSTRUCT FIL
040000             0216*  ;
040000             0217*  ; Directory object structure (DIR)
040000             0218*  ;
040000             0219*  ;DIR .STRUCT
040000             0220*  ;	obj:		.TAG	FFOBJID	; Object identifier;
040000             0221*  ;	dptr:		DS	4	; Current read/write offset
040000             0222*  ;	clust:		DS	4	; Current cluster
040000             0223*  ;	sect:		DS	4	; Current sector (0:Read operation has terminated)
040000             0224*  ;	dir:		DS	3	; Pointer to the directory item in the win[]
040000             0225*  ;	fn:		DS	12	; SFN (in/out) {body[8],ext[3],status[1]}
040000             0226*  ;	blk_ofs:	DS	4	; Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040000             0227*  ;DIR_SIZE .ENDSTRUCT DIR
040000             0228*  ;
040000             0229*  ; File information structure (FILINFO)
040000             0230*  ;
040000             0231*  ;FILINFO .STRUCT
040000             0232*  ;	fsize:		DS 	4	; File size
040000             0233*  ;	fdate:		DS	2	; Modified date;
040000             0234*  ;	ftime:		DS	2	; Modified time
040000             0235*  ;	fattrib:	DS	1	; File attribute
040000             0236*  ;	altname:	DS	13	; Alternative file name
040000             0237*  ;	fname:		DS	256	; Primary file name
040000             0238*  ;FILINFO_SIZE .ENDSTRUCT FILINFO
040000             0239*  
040000             0240*  ;
040000             0241*  ; Macro for calling the API
040000             0242*  ; Parameters:
040000             0243*  ; - function: One of the function numbers listed above
040000             0244*  ;
040000             0245*  			MACRO	MOSCALL function
040000             0246*  			LD	A, function
040000             0247*  			RST.L	08h
040000             0248*  			ENDMACRO
040000             0008       ORG 0x0B0000 ; Is a moslet
0B0000             0009   
0B0000             0010       MACRO PROGNAME
0B0000             0011       ASCIZ "calc.bin"
0B0000             0012       ENDMACRO
0B0000             0013   
0B0000             0014   ; STANDARD MOSLET INCLUDES
0B0000             0015       include "init.inc"
0B0000             0001*  ;
0B0000             0002*  ; Title:	Copy - Initialisation Code
0B0000             0003*  ; Author:	Dean Belfield, Lennart Benschop
0B0000             0004*  ; Created:	06/11/2022
0B0000             0005*  ; Last Updated:	26/12/2022
0B0000             0006*  ;
0B0000             0007*  ; Modinfo:
0B0000             0008*  ; 17/12/2022:	Added parameter processing
0B0000             0009*  ; 26/12/2022:   Adapted to Copy program, use LEA instead of 3x INC IX, Save/restore MB
0B0000             0010*  ; Changed:      08/04/2924 adapt to ez80asm
0B0000             0011*  
0B0000             0012*  
0B0000             0013*  argv_ptrs_max:		EQU	16			; Maximum number of arguments allowed in argv
0B0000             0014*  
0B0000             0015*  ;
0B0000             0016*  ; Start in ADL mode
0B0000             0017*  ;
0B0000 C3 45 00 0B 0018*  			JP	_start			; Jump to start
0B0004             0019*  ;
0B0004             0020*  ; The header stuff is from byte 64 onwards
0B0004             0021*  ;
0B0004             0022*  
0B0004             0023*  _exec_name:
0B0004             0024*  			PROGNAME			; The executable name, only used in argv
0B0004 63 61 6C 63 0001*M     ASCIZ "calc.bin"
       2E 62 69 6E 
       00          
0B000D             0025*  
0B000D FF FF FF FF 0026*  			ALIGN	64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF    
0B0040             0027*  
0B0040 4D 4F 53    0028*  			DB	"MOS"			; Flag for MOS - to confirm this is a valid MOS command
0B0043 00          0029*  			DB	00h			; MOS header version 0
0B0044 01          0030*  			DB	01h			; Flag for run mode (0: Z80, 1: ADL)
0B0045             0031*  ;
0B0045             0032*  ; And the code follows on immediately after the header
0B0045             0033*  ;
0B0045 F5          0034*  _start:			PUSH	AF			; Preserve the registers
0B0046 C5          0035*  			PUSH	BC
0B0047 D5          0036*  			PUSH	DE
0B0048 DD E5       0037*  			PUSH	IX
0B004A FD E5       0038*  			PUSH	IY
0B004C ED 6E       0039*  			LD	A, MB			; Save MB
0B004E F5          0040*  			PUSH 	AF
0B004F AF          0041*  			XOR 	A
0B0050 ED 6D       0042*  			LD 	MB, A                   ; Clear to zero so MOS API calls know how to use 24-bit addresses.
0B0052             0043*  
0B0052 DD 21 B9 00 0044*  			LD	IX, argv_ptrs		; The argv array pointer address
       0B          
0B0057 DD E5       0045*  			PUSH	IX
0B0059 CD 70 00 0B 0046*  			CALL	_parse_params		; Parse the parameters
0B005D DD E1       0047*  			POP	IX			; IX: argv
0B005F 06 00       0048*  			LD	B, 0			;  C: argc
0B0061 CD 4B 1E 0B 0049*  			CALL	_main			; Start user code
0B0065             0050*  
0B0065 F1          0051*  			POP 	AF
0B0066 ED 6D       0052*  			LD	MB, A
0B0068 FD E1       0053*  			POP	IY			; Restore registers
0B006A DD E1       0054*  			POP	IX
0B006C D1          0055*  			POP	DE
0B006D C1          0056*  			POP	BC
0B006E F1          0057*  			POP	AF
0B006F C9          0058*  			RET
0B0070             0059*  
0B0070             0060*  ; Parse the parameter string into a C array
0B0070             0061*  ; Parameters
0B0070             0062*  ; - HL: Address of parameter string
0B0070             0063*  ; - IX: Address for array pointer storage
0B0070             0064*  ; Returns:
0B0070             0065*  ; -  C: Number of parameters parsed
0B0070             0066*  ;
0B0070 01 04 00 0B 0067*  _parse_params:		LD	BC, _exec_name
0B0074 DD 0F 00    0068*  			LD	(IX+0), BC		; ARGV[0] = the executable name
0B0077 ED 32 03    0069*  			LEA     IX, IX+3
0B007A CD B2 00 0B 0070*  			CALL	_skip_spaces		; Skip HL past any leading spaces
0B007E             0071*  ;
0B007E 01 01 00 00 0072*  			LD	BC, 1			; C: ARGC = 1 - also clears out top 16 bits of BCU
0B0082 06 0F       0073*  			LD	B, argv_ptrs_max - 1	; B: Maximum number of argv_ptrs
0B0084             0074*  ;
0B0084             0075*  _parse_params_1:
0B0084 C5          0076*  			PUSH	BC			; Stack ARGC
0B0085 E5          0077*  			PUSH	HL			; Stack start address of token
0B0086 CD A3 00 0B 0078*  			CALL	_get_token		; Get the next token
0B008A 79          0079*  			LD	A, C			; A: Length of the token in characters
0B008B D1          0080*  			POP	DE			; Start address of token (was in HL)
0B008C C1          0081*  			POP	BC			; ARGC
0B008D B7          0082*  			OR	A			; Check for A=0 (no token found) OR at end of string
0B008E C8          0083*  			RET	Z
0B008F             0084*  ;
0B008F DD 1F 00    0085*  			LD	(IX+0), DE		; Store the pointer to the token
0B0092 E5          0086*  			PUSH	HL			; DE=HL
0B0093 D1          0087*  			POP	DE
0B0094 CD B2 00 0B 0088*  			CALL	_skip_spaces		; And skip HL past any spaces onto the next character
0B0098 AF          0089*  			XOR	A
0B0099 12          0090*  			LD	(DE), A			; Zero-terminate the token
0B009A ED 32 03    0091*  			LEA  	IX, IX+3			; Advance to next pointer position
0B009D 0C          0092*  			INC	C			; Increment ARGC
0B009E 79          0093*  			LD	A, C			; Check for C >= A
0B009F B8          0094*  			CP	B
0B00A0 38 E2       0095*  			JR	C, _parse_params_1	; And loop
0B00A2 C9          0096*  			RET
0B00A3             0097*  
0B00A3             0098*  ; Get the next token
0B00A3             0099*  ; Parameters:
0B00A3             0100*  ; - HL: Address of parameter string
0B00A3             0101*  ; Returns:
0B00A3             0102*  ; - HL: Address of first character after token
0B00A3             0103*  ; -  C: Length of token (in characters)
0B00A3             0104*  ;
0B00A3 0E 00       0105*  _get_token:		LD	C, 0			; Initialise length
0B00A5 7E          0106*  @@:			LD	A, (HL)			; Get the character from the parameter string
0B00A6 B7          0107*  			OR	A			; Exit if 0 (end of parameter string in MOS)
0B00A7 C8          0108*  			RET 	Z
0B00A8 FE 0D       0109*  			CP	13			; Exit if CR (end of parameter string in BBC BASIC)
0B00AA C8          0110*  			RET	Z
0B00AB FE 20       0111*  			CP	' '			; Exit if space (end of token)
0B00AD C8          0112*  			RET	Z
0B00AE 23          0113*  			INC	HL			; Advance to next character
0B00AF 0C          0114*  			INC 	C			; Increment length
0B00B0 18 F3       0115*  			JR	@B
0B00B2             0116*  
0B00B2             0117*  ; Skip spaces in the parameter string
0B00B2             0118*  ; Parameters:
0B00B2             0119*  ; - HL: Address of parameter string
0B00B2             0120*  ; Returns:
0B00B2             0121*  ; - HL: Address of next none-space character
0B00B2             0122*  ;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
0B00B2             0123*  ;
0B00B2 7E          0124*  _skip_spaces:		LD	A, (HL)			; Get the character from the parameter string
0B00B3 FE 20       0125*  			CP	' '			; Exit if not space
0B00B5 C0          0126*  			RET	NZ
0B00B6 23          0127*  			INC	HL			; Advance to next character
0B00B7 18 F9       0128*  			JR	_skip_spaces		; Increment length
0B00B9             0129*  
0B00B9             0130*  ; Storage for the argv array pointers
0B00B9             0131*  ;
0B00B9 00 00 00 00 0132*  argv_ptrs:		BLKP	argv_ptrs_max, 0
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0B00E9             0016       include "parse.inc"
0B00E9             0001*  ;
0B00E9             0002*  ; Title:	Number Parsing Functions
0B00E9             0003*  ; Author:	Dean Belfield
0B00E9             0004*  ; Created:	15/11/2022
0B00E9             0005*  ; Last Updated:	15/11/2022
0B00E9             0006*  ; Last Updated: 29/12/2022 Lennart Benchop adapt for 24-bit mode.
0B00E9             0007*  ; Modinfo:
0B00E9             0008*  ; 2024/04/08    Adapt for ez80asm
0B00E9             0009*  
0B00E9             0010*  ; Read a number and convert to binary
0B00E9             0011*  ; If prefixed with &, will read as hex, otherwise decimal
0B00E9             0012*  ;   Inputs: HL: Pointer in string buffer
0B00E9             0013*  ;  Outputs: HL: Updated text pointer
0B00E9             0014*  ;           DE: Value
0B00E9             0015*  ;            A: Terminator (spaces skipped)
0B00E9             0016*  ;            F: Carry set if valid number, otherwise reset
0B00E9             0017*  ; Destroys: A,D,E,H,L,F
0B00E9             0018*  ;
0B00E9 11 00 00 00 0019*  ASC_TO_NUMBER:		LD		DE, 0			; Initialise DE
0B00ED CD B2 00 0B 0020*  			CALL		_skip_spaces		; Skip whitespace
0B00F1 7E          0021*  			LD		A, (HL)			; Read first character
0B00F2 B7          0022*  			OR		A			; Check for end of string
0B00F3 C8          0023*  			RET		Z			; Return with no carry if not
0B00F4 C5          0024*  			PUSH		BC			; Preserve BC
0B00F5 FE 26       0025*  			CP		'&'			; Is it prefixed with '&' (HEX number)?
0B00F7 20 23       0026*  			JR		NZ, ASC_TO_NUMBER3	; Jump to decimal parser if not
0B00F9 23          0027*  			INC		HL			; Otherwise fall through to ASC_TO_HEX
0B00FA             0028*  ;
0B00FA 7E          0029*  ASC_TO_NUMBER1:		LD		A, (HL)			; Fetch the character
0B00FB CD 3D 01 0B 0030*  			CALL   	 	UPPRC			; Convert to uppercase
0B00FF D6 30       0031*  			SUB		'0'			; Normalise to 0
0B0101 38 37       0032*  			JR 		C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0B0103 FE 0A       0033*  			CP 		10			; Check if >= 10
0B0105 38 06       0034*  			JR 		C, ASC_TO_NUMBER2	; No, so skip next bit
0B0107 D6 07       0035*  			SUB 		7			; Adjust ASCII A-F to nibble
0B0109 FE 10       0036*  			CP 		16			; Check for > F
0B010B 30 2D       0037*  			JR 		NC, ASC_TO_NUMBER4	; Return if out of range
0B010D             0038*  ;
0B010D E5          0039*  ASC_TO_NUMBER2:		PUSH		HL			; Stack HL
0B010E D5          0040*  			PUSH		DE			; LD HL, DE
0B010F E1          0041*  			POP		HL
0B0110 29          0042*  			ADD		HL, HL
0B0111 29          0043*  			ADD		HL, HL
0B0112 29          0044*  			ADD		HL, HL
0B0113 29          0045*  			ADD		HL, HL
0B0114 E5          0046*  			PUSH		HL			; LD DE, HL
0B0115 D1          0047*  			POP		DE
0B0116 E1          0048*  			POP		HL			; Restore HL
0B0117 B3          0049*  			OR      	E			; OR the new digit in to the least significant nibble
0B0118 5F          0050*  			LD      	E, A
0B0119             0051*  ;
0B0119 23          0052*  			INC		HL			; Onto the next character
0B011A 18 DE       0053*  			JR      	ASC_TO_NUMBER1		; And loop
0B011C             0054*  ;
0B011C 7E          0055*  ASC_TO_NUMBER3:		LD		A, (HL)
0B011D D6 30       0056*  			SUB		'0'			; Normalise to 0
0B011F 38 19       0057*  			JR		C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0B0121 FE 0A       0058*  			CP		10			; Check if >= 10
0B0123 30 15       0059*  			JR		NC, ASC_TO_NUMBER4	; Return if >= 10
0B0125             0060*  ;
0B0125 E5          0061*  			PUSH		HL			; Stack HL
0B0126 D5          0062*  			PUSH		DE			; LD HL, DE
0B0127 E1          0063*  			POP		HL
0B0128 E5          0064*  			PUSH		HL			; LD BC, HL
0B0129 C1          0065*  			POP		BC
0B012A 29          0066*  			ADD		HL, HL 			; x 2
0B012B 29          0067*  			ADD		HL, HL 			; x 4
0B012C 09          0068*  			ADD		HL, BC 			; x 5
0B012D 29          0069*  			ADD		HL, HL 			; x 10
0B012E 01 00 00 00 0070*  			LD		BC, 0
0B0132 4F          0071*  			LD 		C, A			; LD BCU, A
0B0133 09          0072*  			ADD		HL, BC			; Add BCU to HL
0B0134 E5          0073*  			PUSH		HL			; LD DE, HL
0B0135 D1          0074*  			POP		DE
0B0136 E1          0075*  			POP		HL			; Restore HL
0B0137             0076*  ;
0B0137 23          0077*  			INC		HL
0B0138 18 E2       0078*  			JR		ASC_TO_NUMBER3
0B013A C1          0079*  ASC_TO_NUMBER4:		POP		BC
0B013B 37          0080*  			SCF					; We have a valid number so set carry
0B013C C9          0081*  			RET
0B013D             0082*  
0B013D             0083*  
0B013D             0084*  ; Convert a character to upper case
0B013D             0085*  ;  A: Character to convert
0B013D             0086*  ;
0B013D E6 7F       0087*  UPPRC:  		AND     	7FH
0B013F FE 60       0088*  			CP      	'`'
0B0141 D8          0089*  			RET     	C
0B0142 E6 5F       0090*  			AND     	5FH			; Convert to upper case
0B0144 C9          0091*  			RET
0B0145             0092*  
0B0145             0093*  
0B0145             0094*  ;------------------------------------------------------------------------
0B0145             0095*  ; Read a number and convert to binary (decimal only)
0B0145             0096*  ; Inputs: hl: Pointer in string buffer
0B0145             0097*  ; Outputs: hl: Updated text pointer
0B0145             0098*  ;         de: Value
0B0145             0099*  ;         a: Terminator (spaces skipped)
0B0145             0100*  ;         f: Carry set if valid number, otherwise reset
0B0145             0101*  ; Destroys: a, d, e, h, l, f
0B0145             0102*  ;------------------------------------------------------------------------
0B0145             0103*  asc_to_s24:
0B0145 3E 01       0104*      ld a,1 ; set sign flag
0B0147 32 93 01 0B 0105*      ld (@sign),a ; store sign flag
0B014B             0106*  
0B014B 11 00 00 00 0107*      ld de, 0 ; initialise de
0B014F             0108*      ; call _skip_spaces ; skip whitespace
0B014F             0109*  
0B014F 7E          0110*      ld a, (hl) ; read first character
0B0150 B7          0111*      or a ; check for end of string
0B0151 C8          0112*      ret z ; return with no carry if not
0B0152             0113*  
0B0152 C5          0114*      push bc ; preserve bc
0B0153             0115*  
0B0153 FE 2D       0116*      cp '-' ; check for negative number
0B0155 C2 5F 01 0B 0117*      jp nz,@loop ; number is positive, nothing more to do
0B0159 AF          0118*      xor a ; sign flag to zero
0B015A 32 93 01 0B 0119*      ld (@sign),a ; store sign flag
0B015E 23          0120*      inc hl ; skip '-'
0B015F             0121*  
0B015F             0122*  @loop:
0B015F 7E          0123*      ld a, (hl)
0B0160 D6 30       0124*      sub '0' ; normalise to 0
0B0162 38 19       0125*      jr c, @integer_end ; return if < ascii '0'
0B0164 FE 0A       0126*      cp 10 ; check if >= 10
0B0166 30 15       0127*      jr nc, @integer_end ; return if >= 10
0B0168 E5          0128*      push hl ; stack hl
0B0169 D5          0129*      push de ; ld hl, de
0B016A E1          0130*      pop hl
0B016B E5          0131*      push hl ; ld bc, hl
0B016C C1          0132*      pop bc
0B016D 29          0133*      add hl, hl ; x 2
0B016E 29          0134*      add hl, hl ; x 4
0B016F 09          0135*      add hl, bc ; x 5
0B0170 29          0136*      add hl, hl ; x 10
0B0171 01 00 00 00 0137*      ld bc, 0
0B0175 4F          0138*      ld c, a ; ld bcu, a
0B0176 09          0139*      add hl, bc ; add bcu to hl
0B0177 E5          0140*      push hl ; ld de, hl
0B0178 D1          0141*      pop de
0B0179 E1          0142*      pop hl ; restore hl
0B017A 23          0143*      inc hl
0B017B 18 E2       0144*      jr @loop
0B017D             0145*  
0B017D             0146*  @integer_end:
0B017D C1          0147*      pop bc ; send bc back how she came in
0B017E 3A 93 01 0B 0148*      ld a, (@sign) ; get sign flag
0B0182 3D          0149*      dec a ; check if negative
0B0183 F2 91 01 0B 0150*      jp p,@pos ; positive number
0B0187             0151*  
0B0187             0152*  ; Negate de
0B0187 E5          0153*      push hl ; save text pointer
0B0188 21 00 00 00 0154*      ld hl, 0
0B018C AF          0155*      xor a ; clear carry
0B018D ED 52       0156*      sbc hl, de ; subtract DE from HL
0B018F EB          0157*      ex de, hl ; DE = 0-HL
0B0190 E1          0158*      pop hl ; restore text pointer
0B0191             0159*  
0B0191             0160*  @pos:
0B0191 37          0161*      scf ; we have a valid number so set carry
0B0192 C9          0162*      ret
0B0193             0163*  
0B0193 00          0164*  @sign: db 0 ; sign flag buffer
0B0194             0165*  
0B0194             0166*  
0B0194             0167*  ;------------------------------------------------------------------------
0B0194             0168*  ; Read a number and convert to binary (decimal only)
0B0194             0169*  ; Inputs: hl: Pointer in string buffer
0B0194             0170*  ; Outputs: hl: Updated text pointer
0B0194             0171*  ;         de: Value
0B0194             0172*  ;         a: Terminator (spaces skipped)
0B0194             0173*  ;         f: Carry set if valid number, otherwise reset
0B0194             0174*  ; Destroys: a, d, e, h, l, f
0B0194             0175*  ;------------------------------------------------------------------------
0B0194             0176*  asc_to_s168:
0B0194 3E 01       0177*      ld a,1 ; set sign flag
0B0196 32 53 02 0B 0178*      ld (@sign),a ; store sign flag
0B019A             0179*  
0B019A 11 00 00 00 0180*      ld de, 0 ; initialise de
0B019E ED 53 4B 02 0181*      ld (@result), de ; clear low bytes of result buffer
       0B          
0B01A3 ED 53 4F 02 0182*      ld (@scratch), de ; clear low bytes of scratch buffer
       0B          
0B01A8             0183*  
0B01A8             0184*      ; call _skip_spaces ; skip whitespace
0B01A8             0185*  
0B01A8 7E          0186*      ld a, (hl) ; read first character
0B01A9 B7          0187*      or a ; check for end of string
0B01AA C8          0188*      ret z ; return with no carry if not
0B01AB             0189*  
0B01AB C5          0190*      push bc ; preserve bc
0B01AC             0191*  
0B01AC FE 2D       0192*      cp '-' ; check for negative number
0B01AE C2 B8 01 0B 0193*      jp nz,@loop ; number is positive, nothing more to do
0B01B2 AF          0194*      xor a ; sign flag to zero
0B01B3 32 53 02 0B 0195*      ld (@sign),a ; store sign flag
0B01B7 23          0196*      inc hl ; skip '-'
0B01B8             0197*  
0B01B8             0198*  @loop:
0B01B8 7E          0199*      ld a, (hl)
0B01B9             0200*  
0B01B9             0201*  ; chcek for decimal point
0B01B9 FE 2E       0202*      cp '.' ; check for decimal point
0B01BB CA FC 01 0B 0203*      jp z,@fractional_start ; jump to fractional part
0B01BF             0204*  
0B01BF             0205*  ; process integer part
0B01BF D6 30       0206*      sub '0' ; normalise to 0
0B01C1 38 19       0207*      jr c, @integer_end ; return if < ascii '0'
0B01C3 FE 0A       0208*      cp 10 ; check if >= 10
0B01C5 30 15       0209*      jr nc, @integer_end ; return if >= 10
0B01C7 E5          0210*      push hl ; stack hl
0B01C8 D5          0211*      push de ; ld hl, de
0B01C9 E1          0212*      pop hl
0B01CA E5          0213*      push hl ; ld bc, hl
0B01CB C1          0214*      pop bc
0B01CC 29          0215*      add hl, hl ; x 2
0B01CD 29          0216*      add hl, hl ; x 4
0B01CE 09          0217*      add hl, bc ; x 5
0B01CF 29          0218*      add hl, hl ; x 10
0B01D0 01 00 00 00 0219*      ld bc, 0
0B01D4 4F          0220*      ld c, a ; ld bcu, a
0B01D5 09          0221*      add hl, bc ; add bcu to hl
0B01D6 E5          0222*      push hl ; ld de, hl
0B01D7 D1          0223*      pop de
0B01D8 E1          0224*      pop hl ; restore hl
0B01D9 23          0225*      inc hl
0B01DA 18 DC       0226*      jr @loop
0B01DC             0227*  
0B01DC             0228*  @integer_end:
0B01DC ED 53 4C 02 0229*      ld (@result+1), de      ; Store integer part in result buffer (shifted up one byte)
       0B          
0B01E1             0230*  
0B01E1             0231*  @end:
0B01E1 C1          0232*      pop bc ; send bc back how she came in
0B01E2 ED 5B 4B 02 0233*      ld de,(@result) ; will contain shifted integer part combined with any fractional value
       0B          
0B01E7 3A 53 02 0B 0234*      ld a, (@sign) ; get sign flag
0B01EB 3D          0235*      dec a ; check if negative
0B01EC F2 FA 01 0B 0236*      jp p,@pos ; positive number
0B01F0             0237*  
0B01F0             0238*  ; Negate de
0B01F0 E5          0239*      push hl ; save text pointer
0B01F1 21 00 00 00 0240*      ld hl, 0
0B01F5 AF          0241*      xor a ; clear carry
0B01F6 ED 52       0242*      sbc hl, de ; subtract DE from HL
0B01F8 EB          0243*      ex de, hl ; DE = 0-HL
0B01F9 E1          0244*      pop hl ; restore text pointer
0B01FA             0245*  
0B01FA             0246*  @pos:
0B01FA 37          0247*      scf ; we have a valid number so set carry
0B01FB C9          0248*      ret
0B01FC             0249*  
0B01FC             0250*  @fractional_start:
0B01FC DD E5       0251*      push ix                    ; preserve ix
0B01FE ED 53 4C 02 0252*      ld (@result+1), de         ; Store integer part in result buffer (shifted up one byte)
       0B          
0B0203 06 03       0253*      ld b, 3                    ; Set loop counter to 3 for up to three fractional digits
0B0205 11 00 00 00 0254*      ld de, 0                   ; Initialize DE as the fractional accumulator
0B0209 DD 21 54 02 0255*      ld ix, powers_of_10        ; Point IX to the lookup table for the scaling factor based on digits
       0B          
0B020E 23          0256*      inc hl                     ; Skip decimal point
0B020F             0257*  
0B020F             0258*  @fractional_loop:
0B020F 7E          0259*      ld a, (hl)                 ; Load next character
0B0210 D6 30       0260*      sub '0'                    ; Normalize ASCII to decimal
0B0212 38 1C       0261*      jr c, @end_fraction        ; Exit if < '0'
0B0214 FE 0A       0262*      cp 10
0B0216 30 18       0263*      jr nc, @end_fraction       ; Exit if >= 10
0B0218             0264*  
0B0218             0265*      ; Multiply the current fractional accumulator by 10
0B0218 E5          0266*      push hl                    ; Save char pointer
0B0219 F5          0267*      push af                    ; Save the digit
0B021A EB          0268*      ex de, hl
0B021B E5          0269*      push hl
0B021C 29          0270*      add hl,hl ; * 2
0B021D 29          0271*      add hl,hl ; * 4
0B021E D1          0272*      pop de
0B021F 19          0273*      add hl,de ; * 5
0B0220 29          0274*      add hl,hl ; * 10
0B0221 11 00 00 00 0275*      ld de, 0                   ; Clear DEU
0B0225 F1          0276*      pop af                     ; Restore the current digit
0B0226 5F          0277*      ld e, a                    ; Load the digit into E
0B0227 19          0278*      add hl, de                 ; Add the digit to the accumulator
0B0228 EB          0279*      ex de, hl                  ; Result back to DE
0B0229 ED 32 03    0280*      lea ix,ix+3                ; Advance IX to the next scaling factor
0B022C E1          0281*      pop hl                     ; Restore char pointer
0B022D 23          0282*      inc hl                     ; Move to the next character
0B022E 10 DF       0283*      djnz @fractional_loop      ; Loop if more digits to process
0B0230             0284*  
0B0230             0285*  @end_fraction:
0B0230             0286*  ; Final scaling based on number of fractional digits processed
0B0230 ED 53 50 02 0287*      ld (@scratch+1), de          ; Shift fractional part up a byte
       0B          
0B0235 2A 4F 02 0B 0288*      ld hl,(@scratch)             ; Load the shifted fractional part into HL
0B0239             0289*  
0B0239 DD 17 00    0290*      ld de, (ix)                ; Load final scaling factor from IX based on digit count
0B023C CD 1E 0A 0B 0291*      call udiv24                ; Perform 24-bit division to scale down
0B0240 7B          0292*      ld a, e                    ; Load the low byte (8-bit fractional part) into A
0B0241 32 4B 02 0B 0293*      ld (@result), a            ; Store fractional part in result buffer
0B0245 DD E1       0294*      pop ix                     ; Restore ix
0B0247 C3 E1 01 0B 0295*      jp @end                    ; Final sign check and flag setup
0B024B             0296*  
0B024B             0297*  @result: ds 4                  ; 32-bit result buffer to shift integer part up one byte
0B024F             0298*  @scratch: ds 4                 ; 32-bit scratch buffer for intermediate calculations
0B0253 00          0299*  @sign: db 0                    ; Sign flag buffer
0B0254             0300*  
0B0254             0301*  powers_of_10:
0B0254 01 00 00    0302*      dl 1                       ; 10^0
0B0257 0A 00 00    0303*      dl 10                      ; 10^1
0B025A 64 00 00    0304*      dl 100                     ; 10^2
0B025D E8 03 00    0305*      dl 1000                    ; 10^3
0B0260 10 27 00    0306*      dl 10000                   ; 10^4
0B0263             0017   
0B0263             0018   ; API INCLUDES
0B0263             0019       include "functions.inc"
0B0263             0001*      MACRO printChar char
0B0263             0002*          LD A, char
0B0263             0003*          RST.LIL 10h
0B0263             0004*      ENDMACRO
0B0263             0005*  
0B0263             0006*  ; test the sign of HL
0B0263             0007*  ; inputs: HL obviously
0B0263             0008*  ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
0B0263             0009*  ; destroys: flags
0B0263             0010*      MACRO sign_hlu
0B0263             0011*          add hl,de
0B0263             0012*          or a
0B0263             0013*          sbc hl,de
0B0263             0014*      ENDMACRO
0B0263             0015*  
0B0263             0016*  ; Simulated call to subroutine at HL
0B0263             0017*  ; inputs: HL pointing to the subroutine address plus whatever the called function expects
0B0263             0018*  ; outputs: whatever the subroutine does, including HL and BC
0B0263             0019*  ; destroys: only what the subroutine does, but always BC
0B0263             0020*      MACRO callHL
0B0263             0021*          ld bc,$+7     ; Address of first instruction after the jump
0B0263             0022*          push bc       ; which constitutes the return address
0B0263             0023*          jp   (hl)     ; Jump to the address in HL
0B0263             0024*      ENDMACRO
0B0263             0025*  
0B0263             0026*  ; Simulated call to subroutine at IX
0B0263             0027*  ; inputs: IX pointing to the subroutine address plus whatever the called function expects
0B0263             0028*  ; outputs: whatever the subroutine does, including IX and BC
0B0263             0029*  ; destroys: only what the subroutine does, but always BC
0B0263             0030*      MACRO callIX
0B0263             0031*          ld bc,$+7     ; Address of first instruction after the jump
0B0263             0032*          push bc       ; which constitutes the return address
0B0263             0033*          jp   (ix)     ; Jump to the address in IX
0B0263             0034*      ENDMACRO
0B0263             0035*  
0B0263             0036*  ; Simulated call to soubroutinte at IY
0B0263             0037*  ; inputs: IY pointing to the subroutine address plus whatever the called function expects
0B0263             0038*  ; outputs: whatever the subroutine does, including IY and BC
0B0263             0039*  ; destroys: only what the subroutine does, but always BC
0B0263             0040*      MACRO callIY
0B0263             0041*          ld bc,$+7     ; Address of first instruction after the jump
0B0263             0042*          push bc       ; which constitutes the return address
0B0263             0043*          jp   (iy)     ; Jump to the address in IY
0B0263             0044*      ENDMACRO
0B0263             0045*  
0B0263             0046*  ; put the value in HLU into the accumulator
0B0263             0047*  ; destroys: af
0B0263             0048*      MACRO HLU_TO_A
0B0263             0049*          push hl ; 4 cycles
0B0263             0050*          inc sp ; 1 cycle
0B0263             0051*          pop af  ; 4 cycles
0B0263             0052*          dec sp ; 1 cycle
0B0263             0053*                 ; 10 cycles total
0B0263             0054*      ENDMACRO
0B0263             0055*  
0B0263             0056*  A_TO_HLU:
0B0263             0057*      ; call is 7 cycles
0B0263 22 70 02 0B 0058*      ld (@scratch),hl ; 7 cycles
0B0267 32 72 02 0B 0059*      ld (@scratch+2),a ; 5 cycles
0B026B 2A 70 02 0B 0060*      ld hl,(@scratch) ; 7 cycles
0B026F C9          0061*      ret ; 6 cycles
0B0270             0062*          ; 25 cycles total
0B0270 00 00 00    0063*  @scratch: dl 0
0B0273             0064*  
0B0273             0065*      ; TODO: implement this
0B0273             0066*      ; MACRO A_TO_HLU
0B0273             0067*      ;     push.s af
0B0273             0068*      ;     inc sp
0B0273             0069*      ;     push.s hl
0B0273             0070*      ;     pop hl
0B0273             0071*      ;     inc sp
0B0273             0072*      ;     inc sp
0B0273             0073*      ; ENDMACRO
0B0273             0074*  
0B0273             0075*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
0B0273             0076*  ; Print a zero-terminated string
0B0273             0077*  ; HL: Pointer to string
0B0273             0078*  printString:
0B0273 C5          0079*  	PUSH	BC
0B0274 01 00 00 00 0080*  	LD		BC,0
0B0278 3E 00       0081*  	LD 	 	A,0
0B027A 5B DF       0082*  	RST.LIL 18h
0B027C C1          0083*  	POP		BC
0B027D C9          0084*  	RET
0B027E             0085*  ; print a VDU sequence
0B027E             0086*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
0B027E             0087*  sendVDUsequence:
0B027E C5          0088*  	PUSH	BC
0B027F 01 00 00 00 0089*  	LD		BC, 0
0B0283 4E          0090*  	LD		C, (HL)
0B0284 5B DF       0091*  	RST.LIL	18h
0B0286 C1          0092*  	POP		BC
0B0287 C9          0093*  	RET
0B0288             0094*  ; Print Newline sequence to VDP
0B0288             0095*  printNewLine:
0B0288 F5          0096*      push af ; for some reason rst.lil 10h sets carry flag
0B0289 3E 0D       0097*  	LD	A, '\r'
0B028B 5B D7       0098*  	RST.LIL 10h
0B028D 3E 0A       0099*  	LD	A, '\n'
0B028F 5B D7       0100*  	RST.LIL 10h
0B0291 F1          0101*      pop af
0B0292 C9          0102*  	RET
0B0293             0103*  
0B0293             0104*  ; Print a 24-bit HEX number
0B0293             0105*  ; HLU: Number to print
0B0293             0106*  printHex24:
0B0293             0107*  	; PUSH	HL      ; 4 cycles
0B0293             0108*  	; LD		HL, 2   ; 4 cycles
0B0293             0109*  	; ADD		HL, SP  ; 1 cycle
0B0293             0110*  	; LD		A, (HL) ; 2 cycles
0B0293             0111*  	; POP		HL      ; 4 cycles
0B0293             0112*      ;                 ; 15 cycles total
0B0293 E5          0113*      push hl ; 4 cycles
0B0294 33          0114*      inc sp ; 1 cycle
0B0295 F1          0115*      pop af  ; 4 cycles
0B0296 3B          0116*      dec sp ; 1 cycle
0B0297             0117*              ; 10 cycles total
0B0297 CD A1 02 0B 0118*  	CALL	printHex8
0B029B             0119*  ; Print a 16-bit HEX number
0B029B             0120*  ; HL: Number to print
0B029B             0121*  printHex16:
0B029B 7C          0122*  	LD		A,H
0B029C CD A1 02 0B 0123*  	CALL	printHex8
0B02A0 7D          0124*  	LD		A,L
0B02A1             0125*  ; Print an 8-bit HEX number
0B02A1             0126*  ; A: Number to print
0B02A1             0127*  printHex8:
0B02A1 4F          0128*  	LD		C,A
0B02A2 1F          0129*  	RRA
0B02A3 1F          0130*  	RRA
0B02A4 1F          0131*  	RRA
0B02A5 1F          0132*  	RRA
0B02A6 CD AB 02 0B 0133*  	CALL	@F
0B02AA 79          0134*  	LD		A,C
0B02AB             0135*  @@:
0B02AB E6 0F       0136*  	AND		0Fh
0B02AD C6 90       0137*  	ADD		A,90h
0B02AF 27          0138*  	DAA
0B02B0 CE 40       0139*  	ADC		A,40h
0B02B2 27          0140*  	DAA
0B02B3 5B D7       0141*  	RST.LIL	10h
0B02B5 C9          0142*  	RET
0B02B6             0143*  
0B02B6             0144*  printHexA:
0B02B6 F5          0145*      push af
0B02B7 C5          0146*      push bc
0B02B8 CD A1 02 0B 0147*      call printHex8
0B02BC 3E 20       0148*      ld a,' '
0B02BE 5B D7       0149*      rst.lil 10h
0B02C0 C1          0150*      pop bc
0B02C1 F1          0151*      pop af
0B02C2 C9          0152*      ret
0B02C3             0153*  
0B02C3             0154*  printHexHL:
0B02C3 F5          0155*      push af
0B02C4 C5          0156*      push bc
0B02C5 CD 9B 02 0B 0157*      call printHex16
0B02C9 3E 20       0158*      ld a,' '
0B02CB 5B D7       0159*      rst.lil 10h
0B02CD C1          0160*      pop bc
0B02CE F1          0161*      pop af
0B02CF C9          0162*      ret
0B02D0             0163*  
0B02D0             0164*  printHexUHL:
0B02D0 F5          0165*      push af
0B02D1 C5          0166*      push bc
0B02D2 CD 93 02 0B 0167*      call printHex24
0B02D6 3E 20       0168*      ld a,' '
0B02D8 5B D7       0169*      rst.lil 10h
0B02DA C1          0170*      pop bc
0B02DB F1          0171*      pop af
0B02DC C9          0172*      ret
0B02DD             0173*  
0B02DD             0174*  printHexAUHL:
0B02DD F5          0175*      push af
0B02DE C5          0176*      push bc
0B02DF CD A1 02 0B 0177*      call printHex8
0B02E3 3E 2E       0178*      ld a,'.'
0B02E5 5B D7       0179*      rst.lil 10h
0B02E7 CD 93 02 0B 0180*      call printHex24
0B02EB 3E 20       0181*      ld a,' '
0B02ED 5B D7       0182*      rst.lil 10h
0B02EF C1          0183*      pop bc
0B02F0 F1          0184*      pop af
0B02F1 C9          0185*      ret
0B02F2             0186*  
0B02F2             0187*  printHexABHL:
0B02F2             0188*  ; preserve registers
0B02F2 C5          0189*      push bc ; b will be ok c will not
0B02F3 F5          0190*      push af ; will get totally destroyed
0B02F4             0191*  ; print a
0B02F4 CD A1 02 0B 0192*      call printHex8
0B02F8             0193*  ; print b
0B02F8 78          0194*      ld a,b
0B02F9 CD A1 02 0B 0195*      call printHex8
0B02FD             0196*  ; print hl
0B02FD CD 9B 02 0B 0197*      call printHex16
0B0301             0198*  ; restore registers
0B0301 F1          0199*      pop af
0B0302 C1          0200*      pop bc
0B0303 C9          0201*      ret
0B0304             0202*  
0B0304             0203*  printHexBHL:
0B0304             0204*  ; preserve registers
0B0304 C5          0205*      push bc ; b will be ok c will not
0B0305 F5          0206*      push af ; will get totally destroyed
0B0306             0207*  ; print b
0B0306 78          0208*      ld a,b
0B0307 CD A1 02 0B 0209*      call printHex8
0B030B             0210*  ; print hl
0B030B CD 9B 02 0B 0211*      call printHex16
0B030F             0212*  ; restore registers
0B030F F1          0213*      pop af
0B0310 C1          0214*      pop bc
0B0311 C9          0215*      ret
0B0312             0216*  
0B0312             0217*  printHexCDE:
0B0312             0218*  ; preserve registers
0B0312 C5          0219*      push bc ; b will be ok c will not
0B0313 F5          0220*      push af ; will get totally destroyed
0B0314             0221*  ; print c
0B0314 79          0222*      ld a,c
0B0315 CD A1 02 0B 0223*      call printHex8
0B0319             0224*  ; print de
0B0319 EB          0225*      ex de,hl
0B031A CD 9B 02 0B 0226*      call printHex16
0B031E EB          0227*      ex de,hl
0B031F             0228*  ; restore registers
0B031F F1          0229*      pop af
0B0320 C1          0230*      pop bc
0B0321 C9          0231*      ret
0B0322             0232*  
0B0322             0233*  ; Print a 0x HEX prefix
0B0322             0234*  DisplayHexPrefix:
0B0322 3E 30       0235*  	LD	A, '0'
0B0324 5B D7       0236*  	RST.LIL 10h
0B0326 3E 78       0237*  	LD	A, 'x'
0B0328 5B D7       0238*  	RST.LIL 10h
0B032A C9          0239*  	RET
0B032B             0240*  
0B032B             0241*      MACRO printDecBC
0B032B             0242*          push hl
0B032B             0243*          push bc
0B032B             0244*          pop hl
0B032B             0245*          call printDec
0B032B             0246*          pop hl
0B032B             0247*      ENDMACRO
0B032B             0248*  
0B032B             0249*      MACRO printDecDE
0B032B             0250*          push hl
0B032B             0251*          push de
0B032B             0252*          pop hl
0B032B             0253*          call printDec
0B032B             0254*          pop hl
0B032B             0255*      ENDMACRO
0B032B             0256*  
0B032B             0257*      MACRO printDecHL
0B032B             0258*          call printDec
0B032B             0259*      ENDMACRO
0B032B             0260*  
0B032B             0261*      MACRO printDecIX
0B032B             0262*          push hl
0B032B             0263*          push ix
0B032B             0264*          pop hl
0B032B             0265*          call printDec
0B032B             0266*          pop hl
0B032B             0267*      ENDMACRO
0B032B             0268*  
0B032B             0269*      MACRO printDecIY
0B032B             0270*          push hl
0B032B             0271*          push iy
0B032B             0272*          pop hl
0B032B             0273*          call printDec
0B032B             0274*          pop hl
0B032B             0275*      ENDMACRO
0B032B             0276*  
0B032B             0277*  
0B032B             0278*  ; Prints the right justified decimal value in HL without leading zeroes
0B032B             0279*  ; HL : Value to print
0B032B             0280*  ; preserves all registers and flags
0B032B             0281*  printDec:
0B032B             0282*  ; BEGIN MY CODE
0B032B             0283*  ; back up all the things
0B032B F5          0284*      push af
0B032C C5          0285*      push bc
0B032D D5          0286*      push de
0B032E E5          0287*      push hl
0B032F             0288*  ; END MY CODE
0B032F 11 57 03 0B 0289*  	LD	 DE, _printDecBuffer
0B0333 CD 67 03 0B 0290*  	CALL u24_to_ascii
0B0337             0291*  ; BEGIN MY CODE
0B0337             0292*  ; replace leading zeroes with spaces
0B0337 21 57 03 0B 0293*      LD	 HL, _printDecBuffer
0B033B 06 07       0294*      ld   B, 7 ; if HL was 0, we want to keep the final zero
0B033D             0295*  @loop:
0B033D 7E          0296*      LD	 A, (HL)
0B033E FE 30       0297*      CP	 '0'
0B0340 C2 4A 03 0B 0298*      JP	 NZ, @done
0B0344 3E 20       0299*      LD   A, ' '
0B0346 77          0300*      LD	 (HL), A
0B0347 23          0301*      INC	 HL
0B0348             0302*      ; CALL vdu_cursor_forward
0B0348 10 F3       0303*      DJNZ @loop
0B034A             0304*  @done:
0B034A             0305*  ; END MY CODE
0B034A 21 57 03 0B 0306*  	LD	 HL, _printDecBuffer
0B034E CD 73 02 0B 0307*  	CALL printString
0B0352             0308*  ; BEGIN MY CODE
0B0352             0309*  ; restore all the things
0B0352 E1          0310*      pop hl
0B0353 D1          0311*      pop de
0B0354 C1          0312*      pop bc
0B0355 F1          0313*      pop af
0B0356             0314*  ; END MY CODE
0B0356 C9          0315*  	RET
0B0357 00 00 00 00 0316*  _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0B0367             0317*  
0B0367             0318*  ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
0B0367             0319*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
0B0367             0320*  ; so it will allways be 8 characters length
0B0367             0321*  ; HL : Value to convert to string
0B0367             0322*  ; DE : pointer to buffer, at least 8 byte + 0
0B0367             0323*  u24_to_ascii:
0B0367 01 80 69 67 0324*  	LD	 BC,-10000000
0B036B CD 9E 03 0B 0325*  	CALL @one_digit
0B036F 01 C0 BD F0 0326*  	LD	 BC,-1000000
0B0373 CD 9E 03 0B 0327*  	CALL @one_digit
0B0377 01 60 79 FE 0328*  	LD	 BC,-100000
0B037B CD 9E 03 0B 0329*  	CALL @one_digit
0B037F 01 F0 D8 FF 0330*  	LD   BC,-10000
0B0383 CD 9E 03 0B 0331*  	CALL @one_digit
0B0387 01 18 FC FF 0332*  	LD   BC,-1000
0B038B CD 9E 03 0B 0333*  	CALL @one_digit
0B038F 01 9C FF FF 0334*  	LD   BC,-100
0B0393 CD 9E 03 0B 0335*  	CALL @one_digit
0B0397 0E F6       0336*  	LD   C,-10
0B0399 CD 9E 03 0B 0337*  	CALL @one_digit
0B039D 48          0338*  	LD   C,B
0B039E             0339*  @one_digit:
0B039E 3E 2F       0340*  	LD   A,'0'-1
0B03A0             0341*  @divide_me:
0B03A0 3C          0342*  	INC  A
0B03A1 09          0343*  	ADD  HL,BC
0B03A2 38 FC       0344*  	JR   C,@divide_me
0B03A4 ED 42       0345*  	SBC  HL,BC
0B03A6 12          0346*  	LD   (DE),A
0B03A7 13          0347*  	INC  DE
0B03A8 C9          0348*  	RET
0B03A9             0349*  
0B03A9             0350*  print_u24:
0B03A9 D5          0351*      push de
0B03AA E5          0352*      push hl
0B03AB 11 57 03 0B 0353*      ld de,_printDecBuffer
0B03AF CD 67 03 0B 0354*      call u24_to_ascii
0B03B3 21 57 03 0B 0355*      ld hl,_printDecBuffer
0B03B7 CD 73 02 0B 0356*      call printString
0B03BB 3E 20       0357*      ld a,' '
0B03BD 5B D7       0358*      rst.lil 10h
0B03BF E1          0359*      pop hl
0B03C0 D1          0360*      pop de
0B03C1 C9          0361*      ret
0B03C2             0362*  
0B03C2             0363*  ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
0B03C2             0364*  ; HL : Value to convert to string (integer part in H, fractional part in L)
0B03C2             0365*  ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
0B03C2             0366*  u168_to_ascii:
0B03C2             0367*  ; add a leading space to make room for sign flag if needed
0B03C2 3E 20       0368*      ld a,' '
0B03C4 12          0369*      ld (de),a
0B03C5 13          0370*      inc de
0B03C6             0371*  ; Convert integer part
0B03C6 E5          0372*      push hl               ; Save HL (we’ll need the fractional part later)
0B03C7 CD 9E 08 0B 0373*      call hlu_udiv256    ; Shift to get integer portion in HL
0B03CB 01 F0 D8 FF 0374*      ld   bc, -10000
0B03CF CD F2 03 0B 0375*      call @one_int
0B03D3 01 18 FC FF 0376*      ld   bc, -1000
0B03D7 CD F2 03 0B 0377*      call @one_int
0B03DB 01 9C FF FF 0378*      ld   bc, -100
0B03DF CD F2 03 0B 0379*      call @one_int
0B03E3 0E F6       0380*      ld   c, -10
0B03E5 CD F2 03 0B 0381*      call @one_int
0B03E9 48          0382*      ld   c, b
0B03EA CD F2 03 0B 0383*      call @one_int
0B03EE C3 FD 03 0B 0384*      jp   @frac            ; Jump to fractional part conversion
0B03F2             0385*  @one_int:
0B03F2 3E 2F       0386*      ld   a, '0' - 1       ; Start ASCII character at '0'
0B03F4             0387*  @divide_me:
0B03F4 3C          0388*      inc  a
0B03F5 09          0389*      add  hl, bc           ; Accumulate until overflow
0B03F6 38 FC       0390*      jr   c, @divide_me
0B03F8 ED 42       0391*      sbc  hl, bc           ; Remove excess after overflow
0B03FA 12          0392*      ld   (de), a          ; Store ASCII digit
0B03FB 13          0393*      inc  de
0B03FC C9          0394*      ret
0B03FD             0395*  ; Convert fractional part
0B03FD             0396*  @frac:
0B03FD 3E 2E       0397*      ld   a, '.'           ; Decimal point
0B03FF 12          0398*      ld   (de), a
0B0400 13          0399*      inc  de
0B0401 E1          0400*      pop  hl               ; Restore HL with original fraction
0B0402 06 03       0401*      ld   b, 3             ; Loop counter for 3 fractional digits
0B0404             0402*  @frac_loop:
0B0404 26 0A       0403*      ld   h, 10            ; Load multiplier for fractional part
0B0406 ED 6C       0404*      mlt  hl               ; Multiply by 10, result in HL (H holds the integer part)
0B0408 3E 30       0405*      ld   a, '0'
0B040A 84          0406*      add  a, h             ; Convert integer part to ASCII
0B040B 12          0407*      ld   (de), a
0B040C 13          0408*      inc  de
0B040D 10 F5       0409*      djnz @frac_loop       ; Repeat for each fractional digit
0B040F             0410*  ; Add null terminator
0B040F AF          0411*      xor  a                ; Null terminator
0B0410 12          0412*      ld   (de), a
0B0411 C9          0413*      ret
0B0412             0414*  
0B0412             0415*  print_u168:
0B0412 D5          0416*      push de
0B0413 E5          0417*      push hl
0B0414 11 57 03 0B 0418*      ld de,_printDecBuffer
0B0418 CD C2 03 0B 0419*      call u168_to_ascii
0B041C 21 57 03 0B 0420*      ld hl,_printDecBuffer
0B0420 CD 73 02 0B 0421*      call printString
0B0424 E1          0422*      pop hl
0B0425 D1          0423*      pop de
0B0426 C9          0424*      ret
0B0427             0425*  
0B0427             0426*  ; signed version of u168_to_ascii
0B0427             0427*  s168_to_ascii:
0B0427 D5          0428*      push de ; save starting address of buffer
0B0428 CD 37 08 0B 0429*      call hlu_abs
0B042C F5          0430*      push af ; save sign flag
0B042D CD C2 03 0B 0431*      call u168_to_ascii
0B0431 F1          0432*      pop af ; restore sign flag
0B0432 D1          0433*      pop de ; restore starting address of buffer
0B0433 F0          0434*      ret p ; hlu was positive so nothing to do
0B0434 3E 2D       0435*      ld a,'-'
0B0436 12          0436*      ld (de),a
0B0437 C9          0437*      ret
0B0438             0438*  
0B0438             0439*  print_s168:
0B0438 D5          0440*      push de
0B0439 E5          0441*      push hl
0B043A 11 57 03 0B 0442*      ld de,_printDecBuffer
0B043E CD 27 04 0B 0443*      call s168_to_ascii
0B0442 21 57 03 0B 0444*      ld hl,_printDecBuffer
0B0446 CD 73 02 0B 0445*      call printString
0B044A E1          0446*      pop hl
0B044B D1          0447*      pop de
0B044C C9          0448*      ret
0B044D             0449*  
0B044D             0450*  print_s168_hl:
0B044D F5          0451*      push af
0B044E E5          0452*      push hl
0B044F CD 38 04 0B 0453*      call print_s168
0B0453 3E 20       0454*      ld a,' '
0B0455 5B D7       0455*      rst.lil 10h
0B0457 E1          0456*      pop hl
0B0458 F1          0457*      pop af
0B0459 C9          0458*      ret
0B045A             0459*  
0B045A             0460*  print_s168_bc:
0B045A F5          0461*      push af
0B045B C5          0462*      push bc
0B045C E5          0463*      push hl
0B045D C5          0464*      push bc
0B045E E1          0465*      pop hl
0B045F CD 38 04 0B 0466*      call print_s168
0B0463 3E 20       0467*      ld a,' '
0B0465 5B D7       0468*      rst.lil 10h
0B0467 E1          0469*      pop hl
0B0468 C1          0470*      pop bc
0B0469 F1          0471*      pop af
0B046A C9          0472*      ret
0B046B             0473*  
0B046B             0474*  print_s168_de:
0B046B F5          0475*      push af
0B046C D5          0476*      push de
0B046D E5          0477*      push hl
0B046E EB          0478*      ex de,hl
0B046F CD 38 04 0B 0479*      call print_s168
0B0473 3E 20       0480*      ld a,' '
0B0475 5B D7       0481*      rst.lil 10h
0B0477 E1          0482*      pop hl
0B0478 D1          0483*      pop de
0B0479 F1          0484*      pop af
0B047A C9          0485*      ret
0B047B             0486*  
0B047B             0487*  print_s168_hl_bc_de:
0B047B F5          0488*      push af
0B047C C5          0489*      push bc
0B047D D5          0490*      push de
0B047E E5          0491*      push hl
0B047F CD 38 04 0B 0492*      call print_s168
0B0483 3E 20       0493*      ld a,' '
0B0485 5B D7       0494*      rst.lil 10h
0B0487 C5          0495*      push bc
0B0488 E1          0496*      pop hl
0B0489 CD 38 04 0B 0497*      call print_s168
0B048D 3E 20       0498*      ld a,' '
0B048F 5B D7       0499*      rst.lil 10h
0B0491 EB          0500*      ex de,hl
0B0492 CD 38 04 0B 0501*      call print_s168
0B0496 3E 20       0502*      ld a,' '
0B0498 5B D7       0503*      rst.lil 10h
0B049A E1          0504*      pop hl
0B049B D1          0505*      pop de
0B049C C1          0506*      pop bc
0B049D F1          0507*      pop af
0B049E C9          0508*      ret
0B049F             0509*  
0B049F             0510*  print_s168_bc_de:
0B049F F5          0511*      push af
0B04A0 C5          0512*      push bc
0B04A1 D5          0513*      push de
0B04A2 C5          0514*      push bc
0B04A3 E1          0515*      pop hl
0B04A4 CD 38 04 0B 0516*      call print_s168
0B04A8 3E 20       0517*      ld a,' '
0B04AA 5B D7       0518*      rst.lil 10h
0B04AC EB          0519*      ex de,hl
0B04AD CD 38 04 0B 0520*      call print_s168
0B04B1 3E 20       0521*      ld a,' '
0B04B3 5B D7       0522*      rst.lil 10h
0B04B5 E1          0523*      pop hl
0B04B6 D1          0524*      pop de
0B04B7 C1          0525*      pop bc
0B04B8 F1          0526*      pop af
0B04B9 C9          0527*      ret
0B04BA             0528*  
0B04BA             0529*  print_s168_a:
0B04BA F5          0530*      push af
0B04BB C5          0531*      push bc
0B04BC E5          0532*      push hl
0B04BD 21 00 00 00 0533*      ld hl,0
0B04C1 6F          0534*      ld l,a
0B04C2 CD 4D 04 0B 0535*      call print_s168_hl
0B04C6 E1          0536*      pop hl
0B04C7 C1          0537*      pop bc
0B04C8 F1          0538*      pop af
0B04C9 C9          0539*      ret
0B04CA             0540*  
0B04CA             0541*  ; #### new functions added by Brandon R. Gates ####
0B04CA             0542*  
0B04CA             0543*  ; print the binary representation of the 8-bit value in a
0B04CA             0544*  ; destroys a, hl, bc
0B04CA             0545*  printBin8:
0B04CA 06 08       0546*      ld b,8      ; loop counter for 8 bits
0B04CC 21 E7 04 0B 0547*      ld hl,@cmd  ; set hl to the low byte of the output string
0B04D0             0548*                  ; (which will be the high bit of the value in a)
0B04D0             0549*  @loop:
0B04D0 07          0550*      rlca ; put the next highest bit into carry
0B04D1 38 04       0551*      jr c,@one
0B04D3 36 30       0552*      ld (hl),'0'
0B04D5 18 02       0553*      jr @next_bit
0B04D7             0554*  @one:
0B04D7 36 31       0555*      ld (hl),'1'
0B04D9             0556*  @next_bit:
0B04D9 23          0557*      inc hl
0B04DA 10 F4       0558*      djnz @loop
0B04DC             0559*  ; print it
0B04DC 21 E7 04 0B 0560*  	ld hl,@cmd
0B04E0 01 08 00 00 0561*  	ld bc,@end-@cmd
0B04E4 5B DF       0562*  	rst.lil $18
0B04E6 C9          0563*  	ret
0B04E7             0564*  @cmd: ds 8 ; eight bytes for eight bits
0B04EF             0565*  @end:
0B04EF             0566*  
0B04EF             0567*  ; print the binary representation of the 8-bit value in a
0B04EF             0568*  ; in reverse order (lsb first)
0B04EF             0569*  ; destroys a, hl, bc
0B04EF             0570*  printBin8Rev:
0B04EF 06 08       0571*      ld b,8      ; loop counter for 8 bits
0B04F1 21 0C 05 0B 0572*      ld hl,@cmd  ; set hl to the low byte of the output string
0B04F5             0573*                  ; (which will be the high bit of the value in a)
0B04F5             0574*  @loop:
0B04F5 0F          0575*      rrca ; put the next lowest bit into carry
0B04F6 38 04       0576*      jr c,@one
0B04F8 36 30       0577*      ld (hl),'0'
0B04FA 18 02       0578*      jr @next_bit
0B04FC             0579*  @one:
0B04FC 36 31       0580*      ld (hl),'1'
0B04FE             0581*  @next_bit:
0B04FE 23          0582*      inc hl
0B04FF 10 F4       0583*      djnz @loop
0B0501             0584*  ; print it
0B0501 21 0C 05 0B 0585*  	ld hl,@cmd
0B0505 01 08 00 00 0586*  	ld bc,@end-@cmd
0B0509 5B DF       0587*  	rst.lil $18
0B050B C9          0588*  	ret
0B050C             0589*  @cmd: ds 8 ; eight bytes for eight bits
0B0514             0590*  @end:
0B0514             0591*  
0B0514             0592*  ; print registers to screen in hexidecimal format
0B0514             0593*  ; inputs: none
0B0514             0594*  ; outputs: values of every register printed to screen
0B0514             0595*  ;    values of each register in global scratch memory
0B0514             0596*  ; destroys: nothing
0B0514             0597*  stepRegistersHex:
0B0514             0598*  ; store everything in scratch
0B0514 22 42 07 0B 0599*      ld (uhl),hl
0B0518 ED 43 45 07 0600*      ld (ubc),bc
       0B          
0B051D ED 53 48 07 0601*      ld (ude),de
       0B          
0B0522 DD 22 4B 07 0602*      ld (uix),ix
       0B          
0B0527 FD 22 4E 07 0603*      ld (uiy),iy
       0B          
0B052C F5          0604*      push af ; fml
0B052D E1          0605*      pop hl  ; thanks, zilog
0B052E 22 3F 07 0B 0606*      ld (uaf),hl
0B0532 F5          0607*      push af ; dammit
0B0533             0608*  
0B0533             0609*  ; home the cursor
0B0533             0610*      ; call vdu_home_cursor
0B0533             0611*  
0B0533             0612*  ; print each register
0B0533 21 C5 06 0B 0613*      ld hl,str_afu
0B0537 CD 73 02 0B 0614*      call printString
0B053B 2A 3F 07 0B 0615*      ld hl,(uaf)
0B053F CD 93 02 0B 0616*      call printHex24
0B0543 CD 88 02 0B 0617*      call printNewLine
0B0547             0618*  
0B0547 21 CA 06 0B 0619*      ld hl,str_hlu
0B054B CD 73 02 0B 0620*      call printString
0B054F 2A 42 07 0B 0621*      ld hl,(uhl)
0B0553 CD 93 02 0B 0622*      call printHex24
0B0557 CD 88 02 0B 0623*      call printNewLine
0B055B             0624*  
0B055B 21 CF 06 0B 0625*      ld hl,str_bcu
0B055F CD 73 02 0B 0626*      call printString
0B0563 2A 45 07 0B 0627*      ld hl,(ubc)
0B0567 CD 93 02 0B 0628*      call printHex24
0B056B CD 88 02 0B 0629*      call printNewLine
0B056F             0630*  
0B056F 21 D4 06 0B 0631*      ld hl,str_deu
0B0573 CD 73 02 0B 0632*      call printString
0B0577 2A 48 07 0B 0633*      ld hl,(ude)
0B057B CD 93 02 0B 0634*      call printHex24
0B057F CD 88 02 0B 0635*      call printNewLine
0B0583             0636*  
0B0583 21 D9 06 0B 0637*      ld hl,str_ixu
0B0587 CD 73 02 0B 0638*      call printString
0B058B 2A 4B 07 0B 0639*      ld hl,(uix)
0B058F CD 93 02 0B 0640*      call printHex24
0B0593 CD 88 02 0B 0641*      call printNewLine
0B0597             0642*  
0B0597 21 DE 06 0B 0643*      ld hl,str_iyu
0B059B CD 73 02 0B 0644*      call printString
0B059F 2A 4E 07 0B 0645*      ld hl,(uiy)
0B05A3 CD 93 02 0B 0646*      call printHex24
0B05A7 CD 88 02 0B 0647*      call printNewLine
0B05AB             0648*  
0B05AB             0649*      ; call vsync
0B05AB             0650*  
0B05AB CD 88 02 0B 0651*      call printNewLine
0B05AF             0652*  
0B05AF             0653*  ; check for right shift key and quit if pressed
0B05AF             0654*  	MOSCALL mos_getkbmap
0B05AF 3E 1E       0001*M 			LD	A, function
0B05B1 5B CF       0002*M 			RST.L	08h
0B05B3             0655*  @stayhere:
0B05B3             0656*  ; 7 RightShift
0B05B3 DD CB 00 76 0657*      bit 6,(ix+0)
0B05B7 20 02       0658*      jr nz,@RightShift
0B05B9 18 F8       0659*      jr @stayhere
0B05BB             0660*  @RightShift:
0B05BB DD CB 0E 86 0661*      res 0,(ix+14) ; debounce the key (hopefully)
0B05BF 3E 80       0662*      ld a,%10000000
0B05C1 CD 42 18 0B 0663*      call multiPurposeDelay
0B05C5             0664*  
0B05C5             0665*  ; restore everything
0B05C5 2A 42 07 0B 0666*      ld hl, (uhl)
0B05C9 ED 4B 45 07 0667*      ld bc, (ubc)
       0B          
0B05CE ED 5B 48 07 0668*      ld de, (ude)
       0B          
0B05D3 DD 2A 4B 07 0669*      ld ix, (uix)
       0B          
0B05D8 FD 2A 4E 07 0670*      ld iy, (uiy)
       0B          
0B05DD F1          0671*      pop af
0B05DE             0672*  ; all done
0B05DE C9          0673*      ret
0B05DF             0674*  
0B05DF             0675*  ; print registers to screen in hexidecimal format
0B05DF             0676*  ; inputs: none
0B05DF             0677*  ; outputs: values of every register printed to screen
0B05DF             0678*  ;    values of each register in global scratch memory
0B05DF             0679*  ; destroys: nothing
0B05DF             0680*  dumpRegistersHex:
0B05DF             0681*  ; store everything in scratch
0B05DF 22 42 07 0B 0682*      ld (uhl),hl
0B05E3 ED 43 45 07 0683*      ld (ubc),bc
       0B          
0B05E8 ED 53 48 07 0684*      ld (ude),de
       0B          
0B05ED DD 22 4B 07 0685*      ld (uix),ix
       0B          
0B05F2 FD 22 4E 07 0686*      ld (uiy),iy
       0B          
0B05F7 F5          0687*      push af ; fml
0B05F8 E1          0688*      pop hl  ; thanks, zilog
0B05F9 22 3F 07 0B 0689*      ld (uaf),hl
0B05FD F5          0690*      push af ; dammit
0B05FE             0691*  
0B05FE             0692*  ; home the cursor
0B05FE             0693*      ; call vdu_home_cursor
0B05FE             0694*      ; call printNewLine
0B05FE             0695*  
0B05FE             0696*  ; print each register
0B05FE 21 C5 06 0B 0697*      ld hl,str_afu
0B0602 CD 73 02 0B 0698*      call printString
0B0606 2A 3F 07 0B 0699*      ld hl,(uaf)
0B060A CD 93 02 0B 0700*      call printHex24
0B060E             0701*      ; call printNewLine
0B060E             0702*  
0B060E 21 CA 06 0B 0703*      ld hl,str_hlu
0B0612 CD 73 02 0B 0704*      call printString
0B0616 2A 42 07 0B 0705*      ld hl,(uhl)
0B061A CD 93 02 0B 0706*      call printHex24
0B061E             0707*      ; call printNewLine
0B061E             0708*  
0B061E 21 CF 06 0B 0709*      ld hl,str_bcu
0B0622 CD 73 02 0B 0710*      call printString
0B0626 2A 45 07 0B 0711*      ld hl,(ubc)
0B062A CD 93 02 0B 0712*      call printHex24
0B062E             0713*      ; call printNewLine
0B062E             0714*  
0B062E 21 D4 06 0B 0715*      ld hl,str_deu
0B0632 CD 73 02 0B 0716*      call printString
0B0636 2A 48 07 0B 0717*      ld hl,(ude)
0B063A CD 93 02 0B 0718*      call printHex24
0B063E             0719*      ; call printNewLine
0B063E             0720*  
0B063E 21 D9 06 0B 0721*      ld hl,str_ixu
0B0642 CD 73 02 0B 0722*      call printString
0B0646 2A 4B 07 0B 0723*      ld hl,(uix)
0B064A CD 93 02 0B 0724*      call printHex24
0B064E             0725*      ; call printNewLine
0B064E             0726*  
0B064E 21 DE 06 0B 0727*      ld hl,str_iyu
0B0652 CD 73 02 0B 0728*      call printString
0B0656 2A 4E 07 0B 0729*      ld hl,(uiy)
0B065A CD 93 02 0B 0730*      call printHex24
0B065E             0731*      ; call printNewLine
0B065E             0732*  
0B065E             0733*      ; call vdu_vblank
0B065E             0734*  
0B065E CD 88 02 0B 0735*      call printNewLine
0B0662             0736*  ; restore everything
0B0662 2A 42 07 0B 0737*      ld hl, (uhl)
0B0666 ED 4B 45 07 0738*      ld bc, (ubc)
       0B          
0B066B ED 5B 48 07 0739*      ld de, (ude)
       0B          
0B0670 DD 2A 4B 07 0740*      ld ix, (uix)
       0B          
0B0675 FD 2A 4E 07 0741*      ld iy, (uiy)
       0B          
0B067A F1          0742*      pop af
0B067B             0743*  ; all done
0B067B C9          0744*      ret
0B067C             0745*  
0B067C             0746*  ; print hlu to screen in hexidecimal format
0B067C             0747*  ; inputs: none
0B067C             0748*  ; destroys: nothing
0B067C             0749*  print_hex_hl:
0B067C F5          0750*      push af
0B067D E5          0751*      push hl
0B067E 21 CA 06 0B 0752*      ld hl,str_hlu
0B0682 CD 73 02 0B 0753*      call printString
0B0686 E1          0754*      pop hl
0B0687 E5          0755*      push hl
0B0688 CD 93 02 0B 0756*      call printHex24
0B068C 3E 20       0757*      ld a,' '
0B068E 5B D7       0758*      rst.lil 10h
0B0690 E1          0759*      pop hl
0B0691 F1          0760*      pop af
0B0692 C9          0761*      ret
0B0693             0762*  
0B0693             0763*  ; print bcu to screen in hexidecimal format
0B0693             0764*  ; inputs: none
0B0693             0765*  ; destroys: nothing
0B0693             0766*  print_hex_bc:
0B0693 F5          0767*      push af
0B0694 E5          0768*      push hl
0B0695 C5          0769*      push bc
0B0696 21 CF 06 0B 0770*      ld hl,str_bcu
0B069A CD 73 02 0B 0771*      call printString
0B069E E1          0772*      pop hl
0B069F E5          0773*      push hl
0B06A0 CD 93 02 0B 0774*      call printHex24
0B06A4 3E 20       0775*      ld a,' '
0B06A6 5B D7       0776*      rst.lil 10h
0B06A8 C1          0777*      pop bc
0B06A9 E1          0778*      pop hl
0B06AA F1          0779*      pop af
0B06AB C9          0780*      ret
0B06AC             0781*  
0B06AC             0782*  ; print deu to screen in hexidecimal format
0B06AC             0783*  ; inputs: none
0B06AC             0784*  ; destroys: nothing
0B06AC             0785*  print_hex_de:
0B06AC F5          0786*      push af
0B06AD E5          0787*      push hl
0B06AE D5          0788*      push de
0B06AF 21 D4 06 0B 0789*      ld hl,str_deu
0B06B3 CD 73 02 0B 0790*      call printString
0B06B7 E1          0791*      pop hl
0B06B8 E5          0792*      push hl
0B06B9 CD 93 02 0B 0793*      call printHex24
0B06BD 3E 20       0794*      ld a,' '
0B06BF 5B D7       0795*      rst.lil 10h
0B06C1 D1          0796*      pop de
0B06C2 E1          0797*      pop hl
0B06C3 F1          0798*      pop af
0B06C4 C9          0799*      ret
0B06C5             0800*  
0B06C5 20 61 66 3D 0801*  str_afu: db " af=",0
       00          
0B06CA 20 68 6C 3D 0802*  str_hlu: db " hl=",0
       00          
0B06CF 20 62 63 3D 0803*  str_bcu: db " bc=",0
       00          
0B06D4 20 64 65 3D 0804*  str_deu: db " de=",0
       00          
0B06D9 20 69 78 3D 0805*  str_ixu: db " ix=",0
       00          
0B06DE 20 69 79 3D 0806*  str_iyu: db " iy=",0
       00          
0B06E3             0807*  
0B06E3             0808*  ; print udeuhl to screen in hexidecimal format
0B06E3             0809*  ; inputs: none
0B06E3             0810*  ; outputs: concatenated hexidecimal udeuhl
0B06E3             0811*  ; destroys: nothing
0B06E3             0812*  dumpUDEUHLHex:
0B06E3             0813*  ; store everything in scratch
0B06E3 22 42 07 0B 0814*      ld (uhl),hl
0B06E7 ED 43 45 07 0815*      ld (ubc),bc
       0B          
0B06EC ED 53 48 07 0816*      ld (ude),de
       0B          
0B06F1 DD 22 4B 07 0817*      ld (uix),ix
       0B          
0B06F6 FD 22 4E 07 0818*      ld (uiy),iy
       0B          
0B06FB F5          0819*      push af
0B06FC             0820*  
0B06FC             0821*  ; print each register
0B06FC             0822*  
0B06FC 21 36 07 0B 0823*      ld hl,str_udeuhl
0B0700 CD 73 02 0B 0824*      call printString
0B0704 2A 48 07 0B 0825*      ld hl,(ude)
0B0708 CD 93 02 0B 0826*      call printHex24
0B070C 3E 2E       0827*  	ld a,'.'	; print a dot to separate the values
0B070E 5B D7       0828*  	rst.lil 10h
0B0710 2A 42 07 0B 0829*      ld hl,(uhl)
0B0714 CD 93 02 0B 0830*      call printHex24
0B0718 CD 88 02 0B 0831*      call printNewLine
0B071C             0832*  
0B071C             0833*  ; restore everything
0B071C 2A 42 07 0B 0834*      ld hl, (uhl)
0B0720 ED 4B 45 07 0835*      ld bc, (ubc)
       0B          
0B0725 ED 5B 48 07 0836*      ld de, (ude)
       0B          
0B072A DD 2A 4B 07 0837*      ld ix, (uix)
       0B          
0B072F FD 2A 4E 07 0838*      ld iy, (uiy)
       0B          
0B0734 F1          0839*      pop af
0B0735             0840*  ; all done
0B0735 C9          0841*      ret
0B0736             0842*  
0B0736 75 64 65 2E 0843*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
0B073F             0844*  
0B073F             0845*  ; global scratch memory for registers
0B073F 00 00 00    0846*  uaf: dl 0
0B0742 00 00 00    0847*  uhl: dl 0
0B0745 00 00 00    0848*  ubc: dl 0
0B0748 00 00 00    0849*  ude: dl 0
0B074B 00 00 00    0850*  uix: dl 0
0B074E 00 00 00    0851*  uiy: dl 0
0B0751 00 00 00    0852*  usp: dl 0
0B0754 00 00 00    0853*  upc: dl 0
0B0757             0854*  
0B0757             0855*  ; inputs: whatever is in the flags register
0B0757             0856*  ; outputs: binary representation of flags
0B0757             0857*  ;          with a header so we know which is what
0B0757             0858*  ; destroys: nothing
0B0757             0859*  ; preserves: everything
0B0757             0860*  dumpFlags:
0B0757             0861*  ; first we curse zilog for not giving direct access to flags
0B0757 F5          0862*      push af ; this is so we can send it back unharmed
0B0758 F5          0863*      push af ; this is so we can pop it to hl
0B0759             0864*  ; store everything in scratch
0B0759 22 42 07 0B 0865*      ld (uhl),hl
0B075D ED 43 45 07 0866*      ld (ubc),bc
       0B          
0B0762 ED 53 48 07 0867*      ld (ude),de
       0B          
0B0767 DD 22 4B 07 0868*      ld (uix),ix
       0B          
0B076C FD 22 4E 07 0869*      ld (uiy),iy
       0B          
0B0771             0870*  ; next we print the header
0B0771 21 9D 07 0B 0871*      ld hl,@header
0B0775 CD 73 02 0B 0872*      call printString
0B0779 E1          0873*      pop hl ; flags are now in l
0B077A 7D          0874*      ld a,l ; flags are now in a
0B077B CD CA 04 0B 0875*      call printBin8
0B077F CD 88 02 0B 0876*  	call printNewLine
0B0783             0877*  ; restore everything
0B0783 2A 42 07 0B 0878*      ld hl, (uhl)
0B0787 ED 4B 45 07 0879*      ld bc, (ubc)
       0B          
0B078C ED 5B 48 07 0880*      ld de, (ude)
       0B          
0B0791 DD 2A 4B 07 0881*      ld ix, (uix)
       0B          
0B0796 FD 2A 4E 07 0882*      ld iy, (uiy)
       0B          
0B079B F1          0883*      pop af ; send her home the way she came
0B079C C9          0884*      ret
0B079D             0885*  ; Bit 7 (S): Sign flag
0B079D             0886*  ; Bit 6 (Z): Zero flag
0B079D             0887*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0B079D             0888*  ; Bit 4 (H): Half Carry flag
0B079D             0889*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0B079D             0890*  ; Bit 2 (PV): Parity/Overflow flag
0B079D             0891*  ; Bit 1 (N): Subtract flag
0B079D             0892*  ; Bit 0 (C): Carry flag
0B079D 53 5A 78 48 0893*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0B07A8             0894*  
0B07A8             0895*  ; set all the bits in the flag register
0B07A8             0896*  ; more of an academic exercise than anything useful
0B07A8             0897*  ; inputs; none
0B07A8             0898*  ; outputs; a=0,f=255
0B07A8             0899*  ; destroys: flags, hl
0B07A8             0900*  ; preserves: a, because why not
0B07A8             0901*  setAllFlags:
0B07A8 21 FF 00 00 0902*      ld hl,255
0B07AC 67          0903*      ld h,a ; four cycles to preserve a is cheap
0B07AD E5          0904*      push hl
0B07AE F1          0905*      pop af
0B07AF C9          0906*      ret
0B07B0             0907*  
0B07B0             0908*  ; reset all the bits in the flag register
0B07B0             0909*  ; unlike its inverse counterpart, this may actually be useful
0B07B0             0910*  ; inputs; none
0B07B0             0911*  ; outputs; a=0,f=0
0B07B0             0912*  ; destroys: flags, hl
0B07B0             0913*  ; preserves: a, because why not
0B07B0             0914*  resetAllFlags:
0B07B0 21 00 00 00 0915*      ld hl,0
0B07B4 67          0916*      ld h,a ; four cycles to preserve a is cheap
0B07B5 E5          0917*      push hl
0B07B6 F1          0918*      pop af
0B07B7 C9          0919*      ret
0B07B8             0920*  
0B07B8             0921*  ; wait until user presses a key
0B07B8             0922*  ; inputs: none
0B07B8             0923*  ; outputs: none
0B07B8             0924*  ; destroys: af,ix
0B07B8             0925*  waitKeypress:
0B07B8             0926*      MOSCALL mos_sysvars
0B07B8 3E 08       0001*M 			LD	A, function
0B07BA 5B CF       0002*M 			RST.L	08h
0B07BC AF          0927*      xor a ; zero out any prior keypresses
0B07BD DD 77 05    0928*      ld (ix+sysvar_keyascii),a
0B07C0             0929*  @loop:
0B07C0 DD 7E 05    0930*      ld a,(ix+sysvar_keyascii)
0B07C3 A7          0931*      and a
0B07C4 C0          0932*      ret nz
0B07C5 18 F9       0933*      jr @loop
0B07C7             0934*  
0B07C7             0935*  
0B07C7             0936*  ; print bytes from an address to the screen in hexidecimal format
0B07C7             0937*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0B07C7             0938*  ; outputs: values of each byte printed to screen separated by spaces
0B07C7             0939*  ; destroys: nothing
0B07C7             0940*  dumpMemoryHex:
0B07C7             0941*  ; save registers to the stack
0B07C7 C5          0942*      push bc
0B07C8 E5          0943*      push hl
0B07C9 F5          0944*      push af
0B07CA             0945*  
0B07CA             0946*  ; print the address and separator
0B07CA CD 93 02 0B 0947*      call printHex24
0B07CE 3E 3A       0948*      ld a,':'
0B07D0 5B D7       0949*      rst.lil 10h
0B07D2 3E 20       0950*      ld a,' '
0B07D4 5B D7       0951*      rst.lil 10h
0B07D6             0952*  
0B07D6             0953*  ; set b to be our loop counter
0B07D6 F1          0954*      pop af
0B07D7 47          0955*      ld b,a
0B07D8 E1          0956*      pop hl
0B07D9 E5          0957*      push hl
0B07DA F5          0958*      push af
0B07DB             0959*  @loop:
0B07DB             0960*  ; print the byte
0B07DB 7E          0961*      ld a,(hl)
0B07DC CD A1 02 0B 0962*      call printHex8
0B07E0             0963*  ; print a space
0B07E0 3E 20       0964*      ld a,' '
0B07E2 5B D7       0965*      rst.lil 10h
0B07E4 23          0966*      inc hl
0B07E5 10 F4       0967*      djnz @loop
0B07E7             0968*      ; call printNewLine
0B07E7             0969*  
0B07E7             0970*  ; restore everything
0B07E7 F1          0971*      pop af
0B07E8 E1          0972*      pop hl
0B07E9 C1          0973*      pop bc
0B07EA             0974*  
0B07EA             0975*  ; all done
0B07EA C9          0976*      ret
0B07EB             0977*  
0B07EB             0978*  
0B07EB             0979*  ; print bytes from an address to the screen in binary format
0B07EB             0980*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0B07EB             0981*  ; outputs: values of each byte printed to screen separated by spaces
0B07EB             0982*  ; destroys: nothing
0B07EB             0983*  dumpMemoryBin:
0B07EB             0984*  ; save all registers to the stack
0B07EB F5          0985*      push af
0B07EC C5          0986*      push bc
0B07ED D5          0987*      push de
0B07EE E5          0988*      push hl
0B07EF DD E5       0989*      push ix
0B07F1 FD E5       0990*      push iy
0B07F3             0991*  
0B07F3             0992*  ; set b to be our loop counter
0B07F3 47          0993*      ld b,a
0B07F4             0994*  @loop:
0B07F4             0995*  ; print the byte
0B07F4 7E          0996*      ld a,(hl)
0B07F5 E5          0997*      push hl
0B07F6 C5          0998*      push bc
0B07F7 CD CA 04 0B 0999*      call printBin8
0B07FB C1          1000*      pop bc
0B07FC             1001*  ; print a space
0B07FC 3E 20       1002*      ld a,' '
0B07FE 5B D7       1003*      rst.lil 10h
0B0800 E1          1004*      pop hl
0B0801 23          1005*      inc hl
0B0802 10 F0       1006*      djnz @loop
0B0804 CD 88 02 0B 1007*      call printNewLine
0B0808             1008*  
0B0808             1009*  ; restore everything
0B0808 FD E1       1010*      pop iy
0B080A DD E1       1011*      pop ix
0B080C E1          1012*      pop hl
0B080D D1          1013*      pop de
0B080E C1          1014*      pop bc
0B080F F1          1015*      pop af
0B0810             1016*  ; all done
0B0810 C9          1017*      ret
0B0811             1018*  
0B0811             1019*  ; print bytes from an address to the screen in binary format
0B0811             1020*  ; with the bits of each byte in reverse order (lsb first)
0B0811             1021*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0B0811             1022*  ; outputs: values of each byte printed to screen separated by spaces
0B0811             1023*  ; destroys: nothing
0B0811             1024*  dumpMemoryBinRev:
0B0811             1025*  ; save all registers to the stack
0B0811 F5          1026*      push af
0B0812 C5          1027*      push bc
0B0813 D5          1028*      push de
0B0814 E5          1029*      push hl
0B0815 DD E5       1030*      push ix
0B0817 FD E5       1031*      push iy
0B0819             1032*  
0B0819             1033*  ; set b to be our loop counter
0B0819 47          1034*      ld b,a
0B081A             1035*  @loop:
0B081A             1036*  ; print the byte
0B081A 7E          1037*      ld a,(hl)
0B081B E5          1038*      push hl
0B081C C5          1039*      push bc
0B081D CD EF 04 0B 1040*      call printBin8Rev
0B0821 C1          1041*      pop bc
0B0822             1042*  ; print a space
0B0822 3E 20       1043*      ld a,' '
0B0824 5B D7       1044*      rst.lil 10h
0B0826 E1          1045*      pop hl
0B0827 23          1046*      inc hl
0B0828 10 F0       1047*      djnz @loop
0B082A CD 88 02 0B 1048*      call printNewLine
0B082E             1049*  
0B082E             1050*  ; restore everything
0B082E FD E1       1051*      pop iy
0B0830 DD E1       1052*      pop ix
0B0832 E1          1053*      pop hl
0B0833 D1          1054*      pop de
0B0834 C1          1055*      pop bc
0B0835 F1          1056*      pop af
0B0836             1057*  ; all done
0B0836 C9          1058*      ret
0B0837             0020       include "maths.inc"
0B0837             0001*  ; absolute value of hlu
0B0837             0002*  ; returns: abs(hlu), flags set according to the incoming sign of hlu:
0B0837             0003*  ;         s1,z0,pv0,n1,c0 if hlu was negative
0B0837             0004*  ;         s0,z1,pv0,n1,c0 if hlu was zero
0B0837             0005*  ;         s0,z0,pv0,n1,c0 if hlu was positive
0B0837             0006*  ; destroys: a
0B0837             0007*  hlu_abs:
0B0837 19          0008*      add hl,de
0B0838 B7          0009*      or a
0B0839 ED 52       0010*      sbc hl,de
0B083B FA 40 08 0B 0011*      jp m,@is_neg
0B083F C9          0012*      ret         ; hlu is positive or zero so we're done
0B0840             0013*  @is_neg:
0B0840 F5          0014*      push af     ; otherwise, save current flags for return
0B0841 CD 47 08 0B 0015*      call neg_hlu ; negate hlu
0B0845 F1          0016*      pop af      ; get back flags
0B0846 C9          0017*      ret
0B0847             0018*  
0B0847             0019*  ; flip the sign of hlu
0B0847             0020*  ; inputs: hlu
0B0847             0021*  ; returns: 0-hlu, flags set appropriately for the result:
0B0847             0022*  ;         s1,z0,pv0,n1,c1 if result is negative
0B0847             0023*  ;         s0,z1,pv0,n1,c0 if result is zero
0B0847             0024*  ;         s0,z0,pv0,n1,c1 if result is positive
0B0847             0025*  ; destroys a
0B0847             0026*  neg_hlu:
0B0847 D5          0027*      push de     ; save de
0B0848 EB          0028*      ex de,hl    ; put hl into de
0B0849 21 00 00 00 0029*      ld hl,0     ; clear hl
0B084D AF          0030*      xor a       ; clear carry
0B084E ED 52       0031*      sbc hl,de   ; 0-hlu = -hlu
0B0850 D1          0032*      pop de      ; get de back
0B0851 C9          0033*      ret         ; easy peasy
0B0852             0034*  
0B0852             0035*  ;------------------------------------------------------------------------
0B0852             0036*  ; divide hlu by 2, inspired by above
0B0852             0037*  ;------------------------------------------------------------------------
0B0852             0038*  hlu_div2:
0B0852 22 40 0B 0B 0039*  	ld		(bitbuf1),hl
0B0856 21 42 0B 0B 0040*  	ld		hl,bitbuf1+2
0B085A CB 1E       0041*  	rr		(hl)
0B085C 2B          0042*  	dec		hl
0B085D CB 1E       0043*  	rr		(hl)
0B085F 2B          0044*  	dec		hl
0B0860 CB 1E       0045*  	rr		(hl)
0B0862 23          0046*  	inc		hl
0B0863 23          0047*  	inc		hl
0B0864 2A 40 0B 0B 0048*      ld hl,(bitbuf1)
0B0868 C9          0049*      ret
0B0869             0050*  
0B0869             0051*  ; this is my little hack to divide by 16
0B0869             0052*  hlu_div16:
0B0869 AF          0053*      xor a
0B086A 29          0054*      add hl,hl
0B086B 17          0055*      rla
0B086C 29          0056*      add hl,hl
0B086D 17          0057*      rla
0B086E 29          0058*      add hl,hl
0B086F 17          0059*      rla
0B0870 29          0060*      add hl,hl
0B0871 17          0061*      rla
0B0872 22 7F 08 0B 0062*      ld (@scratch),hl
0B0876 32 82 08 0B 0063*      ld (@scratch+3),a
0B087A 2A 80 08 0B 0064*      ld hl,(@scratch+1)
0B087E C9          0065*      ret
0B087F             0066*  @scratch: ds 4
0B0883             0067*  
0B0883             0068*  ; hlu signed division by 256
0B0883             0069*  ; returns: hlu / 256
0B0883             0070*  ; destroys: af
0B0883             0071*  hlu_sdiv256:
0B0883 AF          0072*      xor a ; assume hl is positive
0B0884 22 9A 08 0B 0073*      ld (@buffer),hl
0B0888             0074*      sign_hlu
0B0888 19          0001*M         add hl,de
0B0889 B7          0002*M         or a
0B088A ED 52       0003*M         sbc hl,de
0B088C F2 91 08 0B 0075*      jp p,@hl_pos
0B0890 3D          0076*      dec a
0B0891             0077*  @hl_pos:
0B0891 32 9D 08 0B 0078*      ld (@buffer+3),a
0B0895 2A 9B 08 0B 0079*      ld hl,(@buffer+1)
0B0899 C9          0080*      ret
0B089A             0081*  @buffer: ds 4
0B089E             0082*  
0B089E             0083*  ; hlu 1 byte right shift, unsigned
0B089E             0084*  ; returns: hlu / 256, fractional portion in a
0B089E             0085*  ; destroys: af
0B089E             0086*  hlu_udiv256:
0B089E AF          0087*  	xor a
0B089F 32 B0 08 0B 0088*  	ld (@buffer+3),a
0B08A3 7D          0089*  	ld a,l ; save the fractional portion
0B08A4 22 AD 08 0B 0090*  	ld (@buffer),hl
0B08A8 2A AE 08 0B 0091*  	ld hl,(@buffer+1)
0B08AC C9          0092*  	ret
0B08AD             0093*  @buffer: ds 4
0B08B1             0094*  
0B08B1             0095*      MACRO hlu_mul256
0B08B1             0096*          add hl,hl ; * 2
0B08B1             0097*          add hl,hl ; * 4
0B08B1             0098*          add hl,hl ; * 8
0B08B1             0099*          add hl,hl ; * 16
0B08B1             0100*          add hl,hl ; * 32
0B08B1             0101*          add hl,hl ; * 64
0B08B1             0102*          add hl,hl ; * 128
0B08B1             0103*          add hl,hl ; * 256
0B08B1             0104*      ENDMACRO
0B08B1             0105*  
0B08B1             0106*  ; compute the modulo of hlu by deu
0B08B1             0107*  ; outputs: hlu = hlu % deu
0B08B1             0108*  ; destroys: f, hl
0B08B1             0109*  hlu_mod:
0B08B1 B7          0110*  	or a ; clear carry
0B08B2             0111*  @loop:
0B08B2 ED 52       0112*      sbc hl,de
0B08B4 DA BC 08 0B 0113*      jp c, @end
0B08B8 C3 B2 08 0B 0114*      jp @loop
0B08BC             0115*  @end:
0B08BC 19          0116*      add hl,de
0B08BD C9          0117*  	ret
0B08BE             0118*  
0B08BE             0119*  
0B08BE 00 00 00 00 0120*  add_bcd_arg1: db #00,#00,#00,#00
0B08C2 00 00 00 00 0121*  add_bcd_arg2: db #00,#00,#00,#00
0B08C6             0122*  
0B08C6             0123*  ; set bcd values in a scratch memory address from registers bcde
0B08C6             0124*  ; input: hl; scratch address,bcde; 8-place bcd number
0B08C6             0125*  ; destroys ; hl
0B08C6             0126*  set_bcd:
0B08C6 73          0127*      ld (hl),e
0B08C7 23          0128*      inc hl
0B08C8 72          0129*      ld (hl),d
0B08C9 23          0130*      inc hl
0B08CA 71          0131*      ld (hl),c
0B08CB 23          0132*      inc hl
0B08CC 70          0133*      ld (hl),b
0B08CD C9          0134*      ret
0B08CE             0135*  
0B08CE             0136*  ; load bcd values from a scratch memory address to bcde
0B08CE             0137*  ; input: hl; scratch address
0B08CE             0138*  ; output: bcde; 8-place bcd number
0B08CE             0139*  ; destroys: hl
0B08CE             0140*  get_bcd:
0B08CE 5E          0141*      ld e,(hl)
0B08CF 23          0142*      inc hl
0B08D0 56          0143*      ld d,(hl)
0B08D1 23          0144*      inc hl
0B08D2 4E          0145*      ld c,(hl)
0B08D3 23          0146*      inc hl
0B08D4 46          0147*      ld b,(hl)
0B08D5 C9          0148*      ret
0B08D6             0149*  
0B08D6             0150*  ; BCD addition
0B08D6             0151*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0B08D6             0152*  ;       a is the number of bytes holding each number (number of places/2)
0B08D6             0153*  ; outputs: (hl) + (de) --> (hl)
0B08D6             0154*  ; destroys: a,b,de,hl
0B08D6             0155*  add_bcd:
0B08D6 47          0156*      ld b,a ; loop counter
0B08D7 AF          0157*      xor a ; reset a, clear carry flag
0B08D8             0158*  adcec:
0B08D8 1A          0159*      ld a,(de) ; addend to acc
0B08D9 8E          0160*      adc a,(hl) ; add (hl) to acc
0B08DA 27          0161*      daa ; adjust result to bcd
0B08DB 77          0162*      ld (hl),a ; store result
0B08DC 23          0163*      inc hl ; advance memory pointers
0B08DD 13          0164*      inc de
0B08DE 10 F8       0165*      djnz adcec ; loop until b == 0
0B08E0 C9          0166*      ret
0B08E1             0167*  
0B08E1             0168*  ; BCD subtraction
0B08E1             0169*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0B08E1             0170*  ;       a is the number of bytes holding each number (number of places/2)
0B08E1             0171*  ; outputs: (hl) - (de) --> (hl)
0B08E1             0172*  ; destroys: a,b,de,hl
0B08E1             0173*  sub_bcd:
0B08E1 47          0174*      ld b,a ; loop counter
0B08E2 AF          0175*      xor a ; reset a,clear carry flag
0B08E3             0176*  subdec:
0B08E3 1A          0177*      ld a,(de) ; subtrahend to acc
0B08E4 9E          0178*      sbc a,(hl) ; subtract (hl) from acc
0B08E5 27          0179*      daa ; adjust result to bcd
0B08E6 77          0180*      ld (hl),a ; store result
0B08E7 23          0181*      inc hl ; advance memory pointers
0B08E8 13          0182*      inc de
0B08E9 10 F8       0183*      djnz subdec ; loop until b == 0
0B08EB C9          0184*      ret
0B08EC             0185*  
0B08EC             0186*  ; http://www.z80.info/pseudo-random.txt
0B08EC             0187*  rand_8:
0B08EC C5          0188*      push bc
0B08ED 3A 00 09 0B 0189*      ld a,(r_seed)
0B08F1 4F          0190*      ld c,a
0B08F2             0191*  
0B08F2 0F          0192*      rrca ; multiply by 32
0B08F3 0F          0193*      rrca
0B08F4 0F          0194*      rrca
0B08F5 EE 1F       0195*      xor 0x1f
0B08F7             0196*  
0B08F7 81          0197*      add a,c
0B08F8 DE FF       0198*      sbc a,255 ; carry
0B08FA             0199*  
0B08FA 32 00 09 0B 0200*      ld (r_seed),a
0B08FE C1          0201*      pop bc
0B08FF C9          0202*      ret
0B0900 50          0203*  r_seed: defb $50
0B0901             0204*  
0B0901             0205*  ; linear interpolation between two 24-bit numbers
0B0901             0206*  ; may be signed or unsigned, and treated as integers or fractional
0B0901             0207*  ; inputs: bc = start value, de = end value, a = interpolation factor
0B0901             0208*  ; outputs: hl = interpolated value, a = multiply overflow to 32 bits (0 if no overflow)
0B0901             0209*  ; destroys: af, hl, de
0B0901             0210*  interpolate24:
0B0901 C5          0211*      push bc ; save start value
0B0902 EB          0212*      ex de,hl ; end value to hl
0B0903 B7          0213*      or a ; clear carry
0B0904 ED 42       0214*      sbc hl,bc ; hl = end - start
0B0906 CD 4D 09 0B 0215*      call umul24x8 ; hl = (end - start) * interpolation factor
0B090A C1          0216*      pop bc ; get back start value (was hl)
0B090B 09          0217*      add hl,bc ; hl = start + (end - start) * interpolation factor
0B090C C9          0218*      ret
0B090D             0021   	INCLUDE	"arith24.inc"
0B090D             0001*  arith24uaf: ds 6
0B0913             0002*  arith24uhl: ds 6
0B0919             0003*  arith24ubc: ds 6
0B091F             0004*  arith24ude: ds 6
0B0925             0005*  arith24uix: ds 6
0B092B             0006*  arith24uiy: ds 6
0B0931             0007*  arith24usp: ds 6
0B0937             0008*  arith24upc: ds 6
0B093D             0009*  
0B093D             0010*  ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
0B093D             0011*  ; uses EZ80 MLT instruction for speed
0B093D             0012*  ; operation: UHL * A --> UHL
0B093D             0013*  ; destroys: AF, HL
0B093D             0014*  smul24x8:
0B093D             0015*  ; make hl positive and store sign flag
0B093D CD 37 08 0B 0016*  	call hlu_abs
0B0941 F5          0017*  	push af
0B0942             0018*  ; do the division
0B0942 CD 4D 09 0B 0019*      call umul24x8 ; hl = product
0B0946             0020*  ; adjust sign of result
0B0946 F1          0021*  	pop af ; sign de
0B0947 F0          0022*  	ret p ; hl was positive, nothing to do
0B0948 CD 47 08 0B 0023*  	call neg_hlu ; result is negative
0B094C C9          0024*  	ret
0B094D             0025*  
0B094D             0026*  ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
0B094D             0027*  ; uses EZ80 MLT instruction for speed
0B094D             0028*  ; operation: UHL * A --> AUHL
0B094D             0029*  ; destroys: AF, HL
0B094D             0030*  umul24x8:
0B094D D5          0031*  	push de ; preserve de
0B094E             0032*  ; low byte
0B094E 5D          0033*  	ld e,l
0B094F 57          0034*  	ld d,a
0B0950 ED 5C       0035*  	mlt de
0B0952 6B          0036*  	ld l,e ; product low byte
0B0953 08          0037*  	ex af,af' ; save multiplier
0B0954 7A          0038*  	ld a,d ; carry
0B0955 08          0039*  	ex af,af' ; save carry, restore multiplier
0B0956             0040*  ; high byte
0B0956 5C          0041*  	ld e,h
0B0957 57          0042*  	ld d,a
0B0958 ED 5C       0043*  	mlt de
0B095A 08          0044*  	ex af,af' ; save multiplier, restore carry
0B095B 83          0045*  	add a,e ; add carry
0B095C 67          0046*  	ld h,a ; product middle byte
0B095D 7A          0047*  	ld a,d ; carry
0B095E 08          0048*  	ex af,af' ; save carry, restore multiplier
0B095F             0049*  ; upper byte
0B095F E5          0050*  	push hl
0B0960 33          0051*  	inc sp
0B0961 D1          0052*  	pop de ; d = hlu
0B0962 3B          0053*  	dec sp
0B0963 5F          0054*  	ld e,a
0B0964 ED 5C       0055*  	mlt de
0B0966 08          0056*  	ex af,af' ; restore carry
0B0967 8B          0057*  	adc a,e ; add carry
0B0968 22 79 09 0B 0058*      ld (@scratch),hl ; 7 cycles
0B096C 32 7B 09 0B 0059*      ld (@scratch+2),a ; 5 cycles
0B0970 2A 79 09 0B 0060*      ld hl,(@scratch) ; 7 cycles
0B0974             0061*  ; highest byte
0B0974 3E 00       0062*  	ld a,0 ; preserve carry flag
0B0976 8A          0063*  	adc a,d ; product highest byte
0B0977 D1          0064*  	pop de ; restore de
0B0978 C9          0065*  	ret
0B0979             0066*  @scratch: ds 3
0B097C             0067*  
0B097C             0068*  ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
0B097C             0069*  ; operation: UHL * UDE --> umul24x24out
0B097C             0070*  umul24x24:
0B097C FD 21 D4 09 0071*  	ld iy,umul24x24out ; point to output buffer
       0B          
0B0981 C5          0072*  	push bc
0B0982 01 00 00 00 0073*  	ld bc,0
0B0986 FD 0F 00    0074*  	ld (iy),bc
0B0989 FD 0F 03    0075*  	ld (iy+3),bc
0B098C C1          0076*  	pop bc
0B098D             0077*  
0B098D             0078*  ; STEP 1: UHL * E
0B098D 7B          0079*  	ld a,e
0B098E E5          0080*  	push hl
0B098F CD 4D 09 0B 0081*  	call umul24x8
0B0993 FD 2F 00    0082*  	ld (iy+0),hl
0B0996 FD 77 03    0083*  	ld (iy+3),a
0B0999             0084*  
0B0999             0085*  ; STEP 2: UHL * D
0B0999 E1          0086*  	pop hl
0B099A E5          0087*  	push hl
0B099B 7A          0088*  	ld a,d
0B099C CD 4D 09 0B 0089*  	call umul24x8
0B09A0 CD AD 09 0B 0090*  	call @accumulate
0B09A4             0091*  
0B09A4             0092*  ; STEP 3: UHL * DEU
0B09A4 E1          0093*  	pop hl
0B09A5 D5          0094*  	push de
0B09A6 33          0095*  	inc sp
0B09A7 F1          0096*  	pop af
0B09A8 3B          0097*  	dec sp
0B09A9 CD 4D 09 0B 0098*  	call umul24x8
0B09AD             0099*  
0B09AD             0100*  @accumulate:
0B09AD FD 23       0101*  	inc iy
0B09AF             0102*  ; highest byte of product to carry
0B09AF FD 77 03    0103*  	ld (iy+3),a
0B09B2             0104*  ; low byte of product
0B09B2 7D          0105*  	ld a,l
0B09B3 FD 86 00    0106*  	add a,(iy+0)
0B09B6 FD 77 00    0107*  	ld (iy+0),a
0B09B9             0108*  ; high byte of product
0B09B9 7C          0109*  	ld a,h
0B09BA FD 8E 01    0110*  	adc a,(iy+1)
0B09BD FD 77 01    0111*  	ld (iy+1),a
0B09C0             0112*  ; uppper byte of product
0B09C0 E5          0113*  	push hl
0B09C1 33          0114*  	inc sp
0B09C2 E1          0115*  	pop hl
0B09C3 3B          0116*  	dec sp
0B09C4 7C          0117*  	ld a,h
0B09C5 FD 8E 02    0118*  	adc a,(iy+2)
0B09C8 FD 77 02    0119*  	ld (iy+2),a
0B09CB             0120*  ; carry
0B09CB 3E 00       0121*  	ld a,0 ; preserve flags
0B09CD FD 8E 03    0122*  	adc a,(iy+3)
0B09D0 FD 77 03    0123*  	ld (iy+3),a
0B09D3 C9          0124*  	ret
0B09D4             0125*  umul24x24out: ds 6 ; output buffer
0B09DA             0126*  
0B09DA             0127*  ; umul168:	UH.L = UH.L*UD.E (unsigned)
0B09DA             0128*  umul168:
0B09DA CD 7C 09 0B 0129*  	call umul24x24
0B09DE FD 27 FF    0130*  	ld hl,(iy-1)
0B09E1 C9          0131*  	ret
0B09E2             0132*  
0B09E2             0133*  ; smul168:	UH.L * UD.E --> UH.L (signed)
0B09E2             0134*  smul168:
0B09E2             0135*  ; make everything positive and store sign flags
0B09E2 CD 37 08 0B 0136*  	call hlu_abs
0B09E6 F5          0137*  	push af
0B09E7 EB          0138*  	ex de,hl
0B09E8 CD 37 08 0B 0139*  	call hlu_abs
0B09EC EB          0140*  	ex de,hl
0B09ED F5          0141*  	push af
0B09EE             0142*  ; do the division
0B09EE CD DA 09 0B 0143*      call umul168 ; hl = product
0B09F2             0144*  ; adjust sign of result
0B09F2 F1          0145*  	pop af ; sign de
0B09F3 FA FE 09 0B 0146*  	jp m,@de_neg
0B09F7 F1          0147*  	pop af ; sign hl
0B09F8 F0          0148*  	ret p ; both positive, nothing to do
0B09F9             0149*  @hl_neg:
0B09F9 CD 47 08 0B 0150*      call neg_hlu ; de pos, hl neg, result is negative
0B09FD C9          0151*      ret
0B09FE             0152*  @de_neg:
0B09FE F1          0153*  	pop af
0B09FF F8          0154*  	ret m ; both negative, nothing to do
0B0A00 CD 47 08 0B 0155*  	call neg_hlu ; result is negative
0B0A04 C9          0156*  	ret
0B0A05             0157*  
0B0A05             0158*  ;------------------------------------------------------------------------
0B0A05             0159*  ;  arith24.inc
0B0A05             0160*  ;  24-bit ez80 arithmetic routines
0B0A05             0161*  ;  Copyright (c) Shawn Sijnstra 2024
0B0A05             0162*  ;  MIT license
0B0A05             0163*  ;
0B0A05             0164*  ;  This library was created as a tool to help make ez80
0B0A05             0165*  ;  24-bit native assembly routines for simple mathematical problems
0B0A05             0166*  ;  more widely available.
0B0A05             0167*  ;
0B0A05             0168*  ;------------------------------------------------------------------------
0B0A05             0169*  
0B0A05             0170*  ;------------------------------------------------------------------------
0B0A05             0171*  ; umul24:	HL = HL*DE (unsigned)
0B0A05             0172*  ; Preserves AF, BC, DE
0B0A05             0173*  ; Uses a fast multiply routine.
0B0A05             0174*  ;------------------------------------------------------------------------
0B0A05             0175*  umul24:
0B0A05 D5          0176*  	push	DE
0B0A06 C5          0177*  	push	BC
0B0A07 F5          0178*  	push	AF
0B0A08 E5          0179*  	push	HL
0B0A09 C1          0180*  	pop		BC
0B0A0A 3E 18       0181*      ld	 	a, 24 ; No. of bits to process
0B0A0C 21 00 00 00 0182*      ld	 	hl, 0 ; Result
0B0A10             0183*  umul24_lp:
0B0A10 29          0184*  	add	hl,hl
0B0A11 EB          0185*  	ex	de,hl
0B0A12 29          0186*  	add	hl,hl
0B0A13 EB          0187*  	ex	de,hl
0B0A14 30 01       0188*  	jr	nc,umul24_nc
0B0A16 09          0189*  	add	hl,bc
0B0A17             0190*  umul24_nc:
0B0A17 3D          0191*  	dec	a
0B0A18 20 F6       0192*  	jr	nz,umul24_lp
0B0A1A F1          0193*  	pop	af
0B0A1B C1          0194*  	pop	bc
0B0A1C D1          0195*  	pop	de
0B0A1D C9          0196*  	ret
0B0A1E             0197*  
0B0A1E             0198*  ;------------------------------------------------------------------------
0B0A1E             0199*  ; udiv24
0B0A1E             0200*  ; Unsigned 24-bit division
0B0A1E             0201*  ; HLU / DEU --> DEU rem HLU
0B0A1E             0202*  ; Uses AF BC DE HL
0B0A1E             0203*  ; Uses Restoring Division algorithm
0B0A1E             0204*  ;------------------------------------------------------------------------
0B0A1E             0205*  
0B0A1E             0206*  udiv24:
0B0A1E E5          0207*  	push	hl
0B0A1F C1          0208*  	pop		bc	;move dividend to BCU
0B0A20 21 00 00 00 0209*  	ld		hl,0	;result
0B0A24 A7          0210*  	and		a
0B0A25 ED 52       0211*  	sbc		hl,de	;test for div by 0
0B0A27 C8          0212*  	ret		z		;it's zero, carry flag is clear
0B0A28 19          0213*  	add		hl,de	;HL is 0 again
0B0A29 3E 18       0214*  	ld		a,24	;number of loops through.
0B0A2B             0215*  udiv1:
0B0A2B C5          0216*  	push	bc	;complicated way of doing this because of lack of access to top bits
0B0A2C E3          0217*  	ex		(sp),hl
0B0A2D 37          0218*  	scf
0B0A2E ED 6A       0219*  	adc	hl,hl
0B0A30 E3          0220*  	ex	(sp),hl
0B0A31 C1          0221*  	pop	bc		;we now have bc = (bc * 2) + 1
0B0A32             0222*  
0B0A32 ED 6A       0223*  	adc	hl,hl
0B0A34 A7          0224*  	and	a		;is this the bug
0B0A35 ED 52       0225*  	sbc	hl,de
0B0A37 30 02       0226*  	jr	nc,udiv2
0B0A39 19          0227*  	add	hl,de
0B0A3A             0228*  ;	dec	c
0B0A3A 0B          0229*  	dec	bc
0B0A3B             0230*  udiv2:
0B0A3B 3D          0231*  	dec	a
0B0A3C 20 ED       0232*  	jr	nz,udiv1
0B0A3E 37          0233*  	scf		;flag used for div0 error
0B0A3F C5          0234*  	push	bc
0B0A40 D1          0235*  	pop		de	;remainder
0B0A41 C9          0236*  	ret
0B0A42             0237*  
0B0A42             0238*  
0B0A42             0239*  ; UH.L / UD.E --> UD.E rem UHL (unsigned)
0B0A42             0240*  ; perform unsigned division of 16.8 fixed place values
0B0A42             0241*  ; with an unsigned 16.8 fixed place result and 24-bit remainder
0B0A42             0242*  udiv168:
0B0A42             0243*  ; back up divisor
0B0A42 ED 53 79 0A 0244*  	ld (@ude),de
       0B          
0B0A47             0245*  ; get the 16-bit integer part of the quotient
0B0A47 CD 1E 0A 0B 0246*      call udiv24 ; de = quotient, hl = remainder
0B0A4B             0247*  ; load quotient to upper three bytes of output
0B0A4B ED 53 80 0A 0248*      ld (div168_out+1),de
       0B          
0B0A50             0249*  @div256:
0B0A50             0250*  ; multiply remainder by 256
0B0A50             0251*  	hlu_mul256
0B0A50 29          0001*M         add hl,hl ; * 2
0B0A51 29          0002*M         add hl,hl ; * 4
0B0A52 29          0003*M         add hl,hl ; * 8
0B0A53 29          0004*M         add hl,hl ; * 16
0B0A54 29          0005*M         add hl,hl ; * 32
0B0A55 29          0006*M         add hl,hl ; * 64
0B0A56 29          0007*M         add hl,hl ; * 128
0B0A57 29          0008*M         add hl,hl ; * 256
0B0A58             0252*  ; skip fractional computation if remainder is zero
0B0A58             0253*      sign_hlu
0B0A58 19          0001*M         add hl,de
0B0A59 B7          0002*M         or a
0B0A5A ED 52       0003*M         sbc hl,de
0B0A5C 20 03       0254*      jr nz,@div_frac
0B0A5E AF          0255*      xor a
0B0A5F 18 0A       0256*      jr @write_frac
0B0A61             0257*  ; now divide the shifted remainder by the divisor
0B0A61             0258*  @div_frac:
0B0A61 ED 5B 79 0A 0259*  	ld de,(@ude) ; get back divisor
       0B          
0B0A66 CD 1E 0A 0B 0260*      call udiv24 ; de = quotient, hl = remainder
0B0A6A             0261*  ; load low byte of quotient to low byte of output
0B0A6A 7B          0262*      ld a,e
0B0A6B             0263*  @write_frac:
0B0A6B 32 7F 0A 0B 0264*      ld (div168_out),a
0B0A6F             0265*  ; load de with return value
0B0A6F ED 5B 7F 0A 0266*      ld de,(div168_out)
       0B          
0B0A74             0267*  ; load a with any overflow
0B0A74 3A 82 0A 0B 0268*      ld a,(div168_out+3)
0B0A78 C9          0269*      ret ; ud.e is the 16.8 result
0B0A79             0270*  @ude: ds 6
0B0A7F             0271*  div168_out: ds 4 ; the extra byte is for overflow
0B0A83             0272*  
0B0A83             0273*  ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
0B0A83             0274*  ; perform signed division of 16.8 fixed place values
0B0A83             0275*  ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
0B0A83             0276*  sdiv168:
0B0A83             0277*  ; make everything positive and store sign flags
0B0A83 CD 37 08 0B 0278*  	call hlu_abs
0B0A87 F5          0279*  	push af
0B0A88 EB          0280*  	ex de,hl
0B0A89 CD 37 08 0B 0281*  	call hlu_abs
0B0A8D EB          0282*  	ex de,hl
0B0A8E F5          0283*  	push af
0B0A8F             0284*  ; do the division
0B0A8F CD 42 0A 0B 0285*      call udiv168 ; de = quotient, hl = remainder
0B0A93             0286*  ; adjust sign of result
0B0A93 F1          0287*  	pop af ; sign de
0B0A94 FA A1 0A 0B 0288*  	jp m,@de_neg
0B0A98 F1          0289*  	pop af ; sign hl
0B0A99 F0          0290*  	ret p ; both positive, nothing to do
0B0A9A             0291*  @hl_neg:
0B0A9A EB          0292*      ex de,hl ; hl = quotient, de = remainder
0B0A9B CD 47 08 0B 0293*      call neg_hlu ; de pos, hl neg, result is negative
0B0A9F EB          0294*      ex de,hl ; de = negated quotient, hl = remainder
0B0AA0 C9          0295*      ret
0B0AA1             0296*  @de_neg:
0B0AA1 F1          0297*  	pop af
0B0AA2 F8          0298*  	ret m ; both negative, nothing to do
0B0AA3 EB          0299*      ex de,hl ; hl = quotient, de = remainder
0B0AA4 CD 47 08 0B 0300*  	call neg_hlu ; result is negative
0B0AA8 EB          0301*      ex de,hl ; de = negated quotient, hl = remainder
0B0AA9 C9          0302*  	ret
0B0AAA             0303*  
0B0AAA             0304*  ;------------------------------------------------------------------------
0B0AAA             0305*  ; neg24
0B0AAA             0306*  ; Returns: HLU = 0-HLU
0B0AAA             0307*  ; preserves all other registers
0B0AAA             0308*  ;------------------------------------------------------------------------
0B0AAA             0309*  neg24:
0B0AAA D5          0310*  	push	de
0B0AAB EB          0311*  	ex		de,hl
0B0AAC 21 00 00 00 0312*  	ld		hl,0
0B0AB0 B7          0313*  	or		a
0B0AB1 ED 52       0314*  	sbc		hl,de
0B0AB3 D1          0315*  	pop		de
0B0AB4 C9          0316*  	ret
0B0AB5             0317*  
0B0AB5             0318*  ;------------------------------------------------------------------------
0B0AB5             0319*  ; or_hlu_deu: 24 bit bitwise OR
0B0AB5             0320*  ; Returns: hlu = hlu OR deu
0B0AB5             0321*  ; preserves all other registers
0B0AB5             0322*  ;------------------------------------------------------------------------
0B0AB5             0323*  or_hlu_deu:
0B0AB5 22 40 0B 0B 0324*  	ld	(bitbuf1),hl
0B0AB9 ED 53 43 0B 0325*  	ld	(bitbuf2),de
       0B          
0B0ABE D5          0326*  	push	de	;preserve DEU
0B0ABF C5          0327*  	push	bc	;preserve BCU
0B0AC0 06 03       0328*  	ld		b,3
0B0AC2 21 40 0B 0B 0329*  	ld	hl,bitbuf1
0B0AC6 11 40 0B 0B 0330*  	ld	de,bitbuf1
0B0ACA             0331*  orloop_24:
0B0ACA 1A          0332*  	ld	a,(de)
0B0ACB B6          0333*  	or	(hl)
0B0ACC 12          0334*  	ld	(de),a
0B0ACD 13          0335*  	inc	de
0B0ACE 23          0336*  	inc	hl
0B0ACF 10 F9       0337*  	djnz	orloop_24
0B0AD1 2A 43 0B 0B 0338*  	ld	hl,(bitbuf2)
0B0AD5 C1          0339*  	pop		bc	;restore BC
0B0AD6 D1          0340*  	pop		de	;restore DE
0B0AD7             0341*  
0B0AD7             0342*  ;------------------------------------------------------------------------
0B0AD7             0343*  ; and_hlu_deu: 24 bit bitwise AND
0B0AD7             0344*  ; Returns: hlu = hlu AND deu
0B0AD7             0345*  ; preserves all other registers
0B0AD7             0346*  ;------------------------------------------------------------------------
0B0AD7             0347*  and_hlu_deu:
0B0AD7 22 40 0B 0B 0348*  	ld	(bitbuf1),hl
0B0ADB ED 53 43 0B 0349*  	ld	(bitbuf2),de
       0B          
0B0AE0 D5          0350*  	push	de	;preserve DEU
0B0AE1 C5          0351*  	push	bc	;preserve BCU
0B0AE2 06 03       0352*  	ld		b,3
0B0AE4 21 40 0B 0B 0353*  	ld	hl,bitbuf1
0B0AE8 11 40 0B 0B 0354*  	ld	de,bitbuf1
0B0AEC             0355*  andloop_24:
0B0AEC 1A          0356*  	ld	a,(de)
0B0AED A6          0357*  	and	(hl)
0B0AEE 12          0358*  	ld	(de),a
0B0AEF 13          0359*  	inc	de
0B0AF0 23          0360*  	inc	hl
0B0AF1 10 F9       0361*  	djnz	andloop_24
0B0AF3 2A 43 0B 0B 0362*  	ld	hl,(bitbuf2)
0B0AF7 C1          0363*  	pop		bc	;restore BC
0B0AF8 D1          0364*  	pop		de	;restore DE
0B0AF9             0365*  
0B0AF9             0366*  ;------------------------------------------------------------------------
0B0AF9             0367*  ; xor_hlu_deu: 24 bit bitwise XOR
0B0AF9             0368*  ; Returns: hlu = hlu XOR deu
0B0AF9             0369*  ; preserves all other registers
0B0AF9             0370*  ;------------------------------------------------------------------------
0B0AF9             0371*  xor_hlu_deu:
0B0AF9 22 40 0B 0B 0372*  	ld	(bitbuf1),hl
0B0AFD ED 53 43 0B 0373*  	ld	(bitbuf2),de
       0B          
0B0B02 D5          0374*  	push	de	;preserve DEU
0B0B03 C5          0375*  	push	bc	;preserve BCU
0B0B04 06 03       0376*  	ld		b,3
0B0B06 21 40 0B 0B 0377*  	ld	hl,bitbuf1
0B0B0A 11 40 0B 0B 0378*  	ld	de,bitbuf1
0B0B0E             0379*  xorloop_24:
0B0B0E 1A          0380*  	ld	a,(de)
0B0B0F AE          0381*  	xor	(hl)
0B0B10 12          0382*  	ld	(de),a
0B0B11 13          0383*  	inc	de
0B0B12 23          0384*  	inc	hl
0B0B13 10 F9       0385*  	djnz	xorloop_24
0B0B15 2A 43 0B 0B 0386*  	ld	hl,(bitbuf2)
0B0B19 C1          0387*  	pop		bc	;restore BC
0B0B1A D1          0388*  	pop		de	;restore DE
0B0B1B             0389*  
0B0B1B             0390*  ;------------------------------------------------------------------------
0B0B1B             0391*  ; shl_hlu: 24 bit shift left hlu by deu positions
0B0B1B             0392*  ; Returns: hlu = hlu << deu
0B0B1B             0393*  ;		   de = 0
0B0B1B             0394*  ; NOTE: only considers deu up to 16 bits.
0B0B1B             0395*  ; preserves all other registers
0B0B1B             0396*  ;------------------------------------------------------------------------
0B0B1B             0397*  shl_hlu:
0B0B1B 7A          0398*  	ld		a,d		;up to 16 bit.
0B0B1C B3          0399*  	or		e
0B0B1D C8          0400*  	ret		z		;we're done
0B0B1E 29          0401*  	add		hl,hl	;shift HLU left
0B0B1F 1B          0402*  	dec		de
0B0B20 18 F9       0403*  	jr		shl_hlu
0B0B22             0404*  
0B0B22             0405*  ;------------------------------------------------------------------------
0B0B22             0406*  ; shr_hlu: 24 bit shift right hlu by deu positions
0B0B22             0407*  ; Returns: hlu = hlu >> deu
0B0B22             0408*  ;		   de = 0
0B0B22             0409*  ; NOTE: only considers deu up to 16 bits.
0B0B22             0410*  ; preserves all other registers
0B0B22             0411*  ;------------------------------------------------------------------------
0B0B22             0412*  shr_hlu:
0B0B22 22 40 0B 0B 0413*  	ld		(bitbuf1),hl
0B0B26 21 42 0B 0B 0414*  	ld		hl,bitbuf1+2
0B0B2A             0415*  shr_loop:
0B0B2A 7A          0416*  	ld		a,d		;up to 16 bit.
0B0B2B B3          0417*  	or		e
0B0B2C 28 0D       0418*  	jr		z,shr_done		;we're done
0B0B2E             0419*  ;carry is clear from or instruction
0B0B2E CB 1E       0420*  	rr		(hl)
0B0B30 2B          0421*  	dec		hl
0B0B31 CB 1E       0422*  	rr		(hl)
0B0B33 2B          0423*  	dec		hl
0B0B34 CB 1E       0424*  	rr		(hl)
0B0B36 23          0425*  	inc		hl
0B0B37 23          0426*  	inc		hl
0B0B38 1B          0427*  	dec		de
0B0B39 18 EF       0428*  	jr		shr_loop
0B0B3B             0429*  shr_done:
0B0B3B 2A 40 0B 0B 0430*  	ld		hl,(bitbuf1)	;collect result
0B0B3F C9          0431*  	ret
0B0B40             0432*  
0B0B40             0433*  ;------------------------------------------------------------------------
0B0B40             0434*  ; Scratch area for calculations
0B0B40             0435*  ;------------------------------------------------------------------------
0B0B40 00 00 00    0436*  bitbuf1:	dw24	0	;bit manipulation buffer 1
0B0B43 00 00 00    0437*  bitbuf2:	dw24	0	;bit manipulation buffer 2
0B0B46             0438*  
0B0B46             0439*  ; ========== FROM maths24.inc ==========
0B0B46             0440*  
0B0B46             0441*  ; Expects  ADL mode
0B0B46             0442*  ; Inputs:  UH.L
0B0B46             0443*  ; Outputs: UH.L is the 16.8 square root
0B0B46             0444*  ;          UD.E is the difference inputHL-DE^2
0B0B46             0445*  ;          c flag reset
0B0B46             0446*  sqrt168:
0B0B46 CD 50 0B 0B 0447*      call sqrt24
0B0B4A EB          0448*      ex de,hl
0B0B4B 29          0449*      add hl,hl
0B0B4C 29          0450*      add hl,hl
0B0B4D 29          0451*      add hl,hl
0B0B4E 29          0452*      add hl,hl
0B0B4F C9          0453*      ret
0B0B50             0454*  
0B0B50             0455*  ; Expects  ADL mode
0B0B50             0456*  ; Inputs:  HL
0B0B50             0457*  ; Outputs: DE is the integer square root
0B0B50             0458*  ;          HL is the difference inputHL-DE^2
0B0B50             0459*  ;          c flag reset
0B0B50             0460*  sqrt24:
0B0B50 AF          0461*      xor a
0B0B51 45          0462*      ld b,l
0B0B52 C5          0463*      push bc
0B0B53 47          0464*      ld b,a
0B0B54 57          0465*      ld d,a
0B0B55 4F          0466*      ld c,a
0B0B56 6F          0467*      ld l,a
0B0B57 5F          0468*      ld e,a
0B0B58             0469*  
0B0B58             0470*      ;Iteration 1
0B0B58 29          0471*      add hl,hl
0B0B59 CB 11       0472*      rl c
0B0B5B 29          0473*      add hl,hl
0B0B5C CB 11       0474*      rl c
0B0B5E 91          0475*      sub c
0B0B5F 30 04       0476*      jr nc,$+6
0B0B61 1C          0477*      inc e
0B0B62 1C          0478*      inc e
0B0B63 2F          0479*      cpl
0B0B64 4F          0480*      ld c,a
0B0B65             0481*  
0B0B65             0482*      ;Iteration 2
0B0B65 29          0483*      add hl,hl
0B0B66 CB 11       0484*      rl c
0B0B68 29          0485*      add hl,hl
0B0B69 CB 11       0486*      rl c
0B0B6B CB 13       0487*      rl e
0B0B6D 7B          0488*      ld a,e
0B0B6E 91          0489*      sub c
0B0B6F 30 04       0490*      jr nc,$+6
0B0B71 1C          0491*      inc e
0B0B72 1C          0492*      inc e
0B0B73 2F          0493*      cpl
0B0B74 4F          0494*      ld c,a
0B0B75             0495*  
0B0B75             0496*      ;Iteration 3
0B0B75 29          0497*      add hl,hl
0B0B76 CB 11       0498*      rl c
0B0B78 29          0499*      add hl,hl
0B0B79 CB 11       0500*      rl c
0B0B7B CB 13       0501*      rl e
0B0B7D 7B          0502*      ld a,e
0B0B7E 91          0503*      sub c
0B0B7F 30 04       0504*      jr nc,$+6
0B0B81 1C          0505*      inc e
0B0B82 1C          0506*      inc e
0B0B83 2F          0507*      cpl
0B0B84 4F          0508*      ld c,a
0B0B85             0509*  
0B0B85             0510*      ;Iteration 4
0B0B85 29          0511*      add hl,hl
0B0B86 CB 11       0512*      rl c
0B0B88 29          0513*      add hl,hl
0B0B89 CB 11       0514*      rl c
0B0B8B CB 13       0515*      rl e
0B0B8D 7B          0516*      ld a,e
0B0B8E 91          0517*      sub c
0B0B8F 30 04       0518*      jr nc,$+6
0B0B91 1C          0519*      inc e
0B0B92 1C          0520*      inc e
0B0B93 2F          0521*      cpl
0B0B94 4F          0522*      ld c,a
0B0B95             0523*  
0B0B95             0524*      ;Iteration 5
0B0B95 29          0525*      add hl,hl
0B0B96 CB 11       0526*      rl c
0B0B98 29          0527*      add hl,hl
0B0B99 CB 11       0528*      rl c
0B0B9B CB 13       0529*      rl e
0B0B9D 7B          0530*      ld a,e
0B0B9E 91          0531*      sub c
0B0B9F 30 04       0532*      jr nc,$+6
0B0BA1 1C          0533*      inc e
0B0BA2 1C          0534*      inc e
0B0BA3 2F          0535*      cpl
0B0BA4 4F          0536*      ld c,a
0B0BA5             0537*  
0B0BA5             0538*      ;Iteration 6
0B0BA5 29          0539*      add hl,hl
0B0BA6 CB 11       0540*      rl c
0B0BA8 29          0541*      add hl,hl
0B0BA9 CB 11       0542*      rl c
0B0BAB CB 13       0543*      rl e
0B0BAD 7B          0544*      ld a,e
0B0BAE 91          0545*      sub c
0B0BAF 30 04       0546*      jr nc,$+6
0B0BB1 1C          0547*      inc e
0B0BB2 1C          0548*      inc e
0B0BB3 2F          0549*      cpl
0B0BB4 4F          0550*      ld c,a
0B0BB5             0551*  
0B0BB5             0552*      ;Iteration 7
0B0BB5 29          0553*      add hl,hl
0B0BB6 CB 11       0554*      rl c
0B0BB8 29          0555*      add hl,hl
0B0BB9 CB 11       0556*      rl c
0B0BBB CB 10       0557*      rl b
0B0BBD EB          0558*      ex de,hl
0B0BBE 29          0559*      add hl,hl
0B0BBF E5          0560*      push hl
0B0BC0 ED 42       0561*      sbc hl,bc
0B0BC2 30 06       0562*      jr nc,$+8
0B0BC4 7C          0563*      ld a,h
0B0BC5 2F          0564*      cpl
0B0BC6 47          0565*      ld b,a
0B0BC7 7D          0566*      ld a,l
0B0BC8 2F          0567*      cpl
0B0BC9 4F          0568*      ld c,a
0B0BCA E1          0569*      pop hl
0B0BCB 30 02       0570*      jr nc,$+4
0B0BCD 23          0571*      inc hl
0B0BCE 23          0572*      inc hl
0B0BCF EB          0573*      ex de,hl
0B0BD0             0574*  
0B0BD0             0575*      ;Iteration 8
0B0BD0 29          0576*      add hl,hl
0B0BD1 69          0577*      ld l,c
0B0BD2 60          0578*      ld h,b
0B0BD3 ED 6A       0579*      adc hl,hl
0B0BD5 ED 6A       0580*      adc hl,hl
0B0BD7 EB          0581*      ex de,hl
0B0BD8 29          0582*      add hl,hl
0B0BD9 ED 52       0583*      sbc hl,de
0B0BDB 19          0584*      add hl,de
0B0BDC EB          0585*      ex de,hl
0B0BDD 30 04       0586*      jr nc,$+6
0B0BDF ED 52       0587*      sbc hl,de
0B0BE1 13          0588*      inc de
0B0BE2 13          0589*      inc de
0B0BE3             0590*  
0B0BE3             0591*      ;Iteration 9
0B0BE3 F1          0592*      pop af
0B0BE4 17          0593*      rla
0B0BE5 ED 6A       0594*      adc hl,hl
0B0BE7 17          0595*      rla
0B0BE8 ED 6A       0596*      adc hl,hl
0B0BEA EB          0597*      ex de,hl
0B0BEB 29          0598*      add hl,hl
0B0BEC ED 52       0599*      sbc hl,de
0B0BEE 19          0600*      add hl,de
0B0BEF EB          0601*      ex de,hl
0B0BF0 30 04       0602*      jr nc,$+6
0B0BF2 ED 52       0603*      sbc hl,de
0B0BF4 13          0604*      inc de
0B0BF5 13          0605*      inc de
0B0BF6             0606*  
0B0BF6             0607*      ;Iteration 10
0B0BF6 17          0608*      rla
0B0BF7 ED 6A       0609*      adc hl,hl
0B0BF9 17          0610*      rla
0B0BFA ED 6A       0611*      adc hl,hl
0B0BFC EB          0612*      ex de,hl
0B0BFD 29          0613*      add hl,hl
0B0BFE ED 52       0614*      sbc hl,de
0B0C00 19          0615*      add hl,de
0B0C01 EB          0616*      ex de,hl
0B0C02 30 04       0617*      jr nc,$+6
0B0C04 ED 52       0618*      sbc hl,de
0B0C06 13          0619*      inc de
0B0C07 13          0620*      inc de
0B0C08             0621*  
0B0C08             0622*      ;Iteration 11
0B0C08 17          0623*      rla
0B0C09 ED 6A       0624*      adc hl,hl
0B0C0B 17          0625*      rla
0B0C0C ED 6A       0626*      adc hl,hl
0B0C0E EB          0627*      ex de,hl
0B0C0F 29          0628*      add hl,hl
0B0C10 ED 52       0629*      sbc hl,de
0B0C12 19          0630*      add hl,de
0B0C13 EB          0631*      ex de,hl
0B0C14 30 04       0632*      jr nc,$+6
0B0C16 ED 52       0633*      sbc hl,de
0B0C18 13          0634*      inc de
0B0C19 13          0635*      inc de
0B0C1A             0636*  
0B0C1A             0637*      ;Iteration 11
0B0C1A 17          0638*      rla
0B0C1B ED 6A       0639*      adc hl,hl
0B0C1D 17          0640*      rla
0B0C1E ED 6A       0641*      adc hl,hl
0B0C20 EB          0642*      ex de,hl
0B0C21 29          0643*      add hl,hl
0B0C22 ED 52       0644*      sbc hl,de
0B0C24 19          0645*      add hl,de
0B0C25 EB          0646*      ex de,hl
0B0C26 30 04       0647*      jr nc,$+6
0B0C28 ED 52       0648*      sbc hl,de
0B0C2A 13          0649*      inc de
0B0C2B 13          0650*      inc de
0B0C2C             0651*  
0B0C2C CB 1A       0652*      rr d
0B0C2E CB 1B       0653*      rr e
0B0C30 C9          0654*      ret
0B0C31             0022       include "trig24.inc"
0B0C31             0001*  
0B0C31             0002*  ; convert signed angles from a 360 to 256 degree circle
0B0C31             0003*  ; inputs: uh.l is the angle360 in 16.8 fixed format
0B0C31             0004*  ; outputs: uh.l is the angle256 in 16.8 fixed format
0B0C31             0005*  ; destroys: TODO
0B0C31             0006*  deg_360_to_256:
0B0C31 D5          0007*  	push de ; preserve de
0B0C32             0008*  ; make angle positive and store sign flag
0B0C32 CD 37 08 0B 0009*  	call hlu_abs
0B0C36 F5          0010*  	push af
0B0C37             0011*  ; multiply by 256 first to keep precision
0B0C37             0012*  	hlu_mul256 ; uh.l = uh.l * 256
0B0C37 29          0001*M         add hl,hl ; * 2
0B0C38 29          0002*M         add hl,hl ; * 4
0B0C39 29          0003*M         add hl,hl ; * 8
0B0C3A 29          0004*M         add hl,hl ; * 16
0B0C3B 29          0005*M         add hl,hl ; * 32
0B0C3C 29          0006*M         add hl,hl ; * 64
0B0C3D 29          0007*M         add hl,hl ; * 128
0B0C3E 29          0008*M         add hl,hl ; * 256
0B0C3F             0013*  ; divide uh.l by 360
0B0C3F 11 68 01 00 0014*  	ld de,360
0B0C43 CD 1E 0A 0B 0015*  	call udiv24 ; ud.e = degrees / 360
0B0C47 EB          0016*  	ex de,hl    ; uh.l = degrees / 360
0B0C48             0017*  ; restore sign flag and adjust output accordingly
0B0C48 F1          0018*  	pop af
0B0C49 F2 51 0C 0B 0019*  	jp p,@pos ; positive number
0B0C4D CD 47 08 0B 0020*  	call neg_hlu
0B0C51             0021*  @pos:
0B0C51             0022*  ; restore de and return uh.l as the result
0B0C51 D1          0023*  	pop de
0B0C52 C9          0024*  	ret
0B0C53             0025*  
0B0C53             0026*  ; fixed 16.8 routine
0B0C53             0027*  ; cos(uh.l) --> uh.l
0B0C53             0028*  ; destroys: de
0B0C53             0029*  cos168:
0B0C53             0030*  ; for cos we simply increment the angle by 90 degrees
0B0C53             0031*  ; or 0x004000 in 16.8 degrees256
0B0C53             0032*  ; which makes it a sin problem
0B0C53 11 00 40 00 0033*      ld de,0x004000
0B0C57 19          0034*      add hl,de ; modulo 256 happens below
0B0C58             0035*  ; fall through to sin168
0B0C58             0036*  
0B0C58             0037*  ; ---------------------
0B0C58             0038*  ; fixed 16.8 routine
0B0C58             0039*  ; sin(uh.l) --> uh.l
0B0C58             0040*  ; destroys: af
0B0C58             0041*  sin168:
0B0C58             0042*  	; push de ; to be nice
0B0C58             0043*  ; handle negative angles appropriately
0B0C58 CD 37 08 0B 0044*  	call hlu_abs
0B0C5C F2 65 0C 0B 0045*  	jp p,@hlu_pos
0B0C60 11 00 FF FF 0046*  	ld de,-256
0B0C64 19          0047*  	add hl,de
0B0C65             0048*  @hlu_pos:
0B0C65             0049*  ; get the lookup value for the integer portion of the angle
0B0C65 7D          0050*  	ld a,l ; save fractional part of the angle
0B0C66 2E 03       0051*  	ld l,3 ; multiply by 3 to get our lookup index
0B0C68 ED 6C       0052*  	mlt hl ; gosh that is handy
0B0C6A 11 C8 0D 0B 0053*      ld de,sin_lut_168 ; grab the lut address
0B0C6E 19          0054*      add hl,de ; bump hl by the index
0B0C6F E5          0055*  	push hl
0B0C70 D1          0056*  	pop de ; save lut address to de
0B0C71 ED 27       0057*      ld hl,(hl) ; hl = sin(int(angle))
0B0C73             0058*  ; interpolate the fractional part of the angle
0B0C73 B7          0059*  	or a  ; check for zero and clear carry
0B0C74 C8          0060*  	ret z ; return if no fractional part
0B0C75 EB          0061*  	ex de,hl ; hl = lut address, de = sin(int(angle))
0B0C76 23          0062*  	inc hl
0B0C77 23          0063*  	inc hl
0B0C78 23          0064*  	inc hl ; hl = lut address of next value in table
0B0C79 ED 27       0065*  	ld hl,(hl) ; hl = sin(int(angle+1))
0B0C7B ED 52       0066*  	sbc hl,de ; hl = sin(int(angle+1)0 - sin(int(angle)), de = sin(int(angle))
0B0C7D CD E2 09 0B 0067*  	call smul168 ; hl = interpolation factor * (sin(int(angle+1)) - sin(int(angle)))
0B0C81 19          0068*  	add hl,de ; hl = sin(int(angle)) + interpolation factor * (sin(int(angle+1)) - sin(int(angle)))
0B0C82             0069*  	; pop de ; send her home unmolested
0B0C82 C9          0070*      ret ; and out
0B0C83             0071*  
0B0C83             0072*  ; ; 16.8 fixed inputs / outputs
0B0C83             0073*  ; ; takes: uh.l as angle in degrees 256
0B0C83             0074*  ; ;        ud.e as radius
0B0C83             0075*  ; ; returns ub.c as dx, ud.e as dy
0B0C83             0076*  ; ;        displacements from origin (0,0)
0B0C83             0077*  ; ; destroys: everything except indexes
0B0C83             0078*  ; polar_to_cartesian:
0B0C83             0079*  ; ; back up input parameters
0B0C83             0080*  ;     ld (arith24uhl), hl
0B0C83             0081*  ;     ld (arith24ude), de
0B0C83             0082*  ; ; compute dx = sin(uh.l) * ud.e
0B0C83             0083*  ;     call sin168
0B0C83             0084*  ;     push hl
0B0C83             0085*  ;     pop bc          ; ub.c = sin(uh.l)
0B0C83             0086*  ; 	ld de, (arith24ude)   ; get radius back
0B0C83             0087*  ; 	call smul168    ; uh.l = ub.c * ud.e = dx
0B0C83             0088*  ;     push hl         ; store dx for output
0B0C83             0089*  ; ; compute dy = -cos(uh.l) * ud.e
0B0C83             0090*  ;     ld hl, (arith24uhl)
0B0C83             0091*  ;     call cos168
0B0C83             0092*  ; 	call neg_hlu    ; invert dy for screen coords convention
0B0C83             0093*  ;     push hl
0B0C83             0094*  ;     pop bc          ; ub.c = -cos(uh.l)
0B0C83             0095*  ;     ld de, (arith24ude)   ; get radius back
0B0C83             0096*  ;     call smul168    ; uh.l = ub.c * ud.e = dy
0B0C83             0097*  ;     ex de, hl       ; de = dy for output
0B0C83             0098*  ;     pop bc          ; bc = dx for output
0B0C83             0099*  ; ; and out
0B0C83             0100*  ;     ret
0B0C83             0101*  
0B0C83             0102*  ; 16.8 fixed inputs / outputs
0B0C83             0103*  ; takes: uh.l as angle in degrees 256
0B0C83             0104*  ;        ud.e as radius
0B0C83             0105*  ; returns ub.c as dx, ud.e as dy, uh.l as radius
0B0C83             0106*  ;        displacements from origin (0,0)
0B0C83             0107*  ; destroys: everything except indexes
0B0C83             0108*  polar_to_cartesian:
0B0C83             0109*  	; call printNewLine ; DEBUG
0B0C83             0110*  ; back up input parameters
0B0C83 22 AE 0C 0B 0111*      ld (@angle), hl
0B0C87 ED 53 B1 0C 0112*      ld (@radius), de
       0B          
0B0C8C             0113*  ; compute dx = cos(uh.l) * ud.e
0B0C8C CD 53 0C 0B 0114*      call cos168 ; uh.l = cos(uh.l)
0B0C90             0115*  	; call print_hex_hl ; DEBUG
0B0C90             0116*  	; call print_s168_hl ; DEBUG
0B0C90 ED 5B B1 0C 0117*  	ld de,(@radius)
       0B          
0B0C95 CD E2 09 0B 0118*  	call smul168 ; uh.l = dx
0B0C99 E5          0119*      push hl
0B0C9A             0120*  ; compute dy = sin(uh.l) * ud.e
0B0C9A 2A AE 0C 0B 0121*      ld hl,(@angle)
0B0C9E CD 58 0C 0B 0122*      call sin168 ; uh.l = sin(uh.l)
0B0CA2             0123*  	; call print_hex_hl ; DEBUG
0B0CA2             0124*  	; call print_s168_hl ; DEBUG
0B0CA2 ED 5B B1 0C 0125*      ld de,(@radius)
       0B          
0B0CA7 CD E2 09 0B 0126*      call smul168    ; uh.l = dy
0B0CAB EB          0127*      ex de,hl       ; de = dy for output
0B0CAC C1          0128*      pop bc          ; bc = dx for output
0B0CAD             0129*  ; and out
0B0CAD C9          0130*      ret
0B0CAE             0131*  @angle: ds 3
0B0CB1             0132*  @radius: ds 3
0B0CB4             0133*  
0B0CB4             0134*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
0B0CB4             0135*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
0B0CB4             0136*  ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
0B0CB4             0137*  ;         also populates scratch locations dx168 and dy168
0B0CB4             0138*  ; destroys: a,hl,bc,de
0B0CB4             0139*  dxy168:
0B0CB4             0140*  ; compute dx = x1-x0
0B0CB4 AF          0141*      xor a ; clear carry
0B0CB5 DD E5       0142*      push ix ; move ix to hl via the stack
0B0CB7 E1          0143*      pop hl ; hl = x1
0B0CB8 ED 42       0144*      sbc hl,bc ; hl = dx
0B0CBA 22 0F 0D 0B 0145*      ld (dx168),hl ; dx to scratch
0B0CBE             0146*  ; compute dy = y1-y0
0B0CBE AF          0147*      xor a ; clear carry
0B0CBF FD E5       0148*      push iy ; move iy to hl via the stack
0B0CC1 E1          0149*      pop hl ; hl = y1
0B0CC2 ED 52       0150*      sbc hl,de ; hl = dy
0B0CC4 22 15 0D 0B 0151*      ld (dy168),hl ; dy to scratch
0B0CC8             0152*  ; populate output registers and return
0B0CC8 EB          0153*      ex de,hl        ; ud.e = dy
0B0CC9 ED 4B 0F 0D 0154*      ld bc,(dx168)   ; ub.c = dx
       0B          
0B0CCE C9          0155*      ret
0B0CCF             0156*  
0B0CCF             0157*  ; compute the euclidian distance between two cartesian coordinates
0B0CCF             0158*  ; using the formula d = sqrt(dx^2+dy^2
0B0CCF             0159*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
0B0CCF             0160*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
0B0CCF             0161*  ; output; uh.l is the 16.8 fixed format distance
0B0CCF             0162*  ;       dx168/y are the 16.8 fixed format dx and dy
0B0CCF             0163*  ; destroys: a,hl,bc,de
0B0CCF             0164*  distance168:
0B0CCF             0165*  ; compute dx = x1-x0
0B0CCF AF          0166*      xor a ; clear carry
0B0CD0 DD E5       0167*      push ix ; move ix to hl via the stack
0B0CD2 E1          0168*      pop hl ; hl = x1
0B0CD3 ED 42       0169*      sbc hl,bc ; hl = dx
0B0CD5 22 0F 0D 0B 0170*      ld (dx168),hl ; dx to scratch
0B0CD9             0171*  ; ; test dx for overflow
0B0CD9             0172*  ; 	ld de,0x007F00 ; max positive 16.8 value we can square without overflow
0B0CD9             0173*  ; 	ex de,hl
0B0CD9             0174*  ; 	sbc hl,de ; test for overflow
0B0CD9             0175*  ; 	push af ; carry indicates overflow
0B0CD9             0176*  ; compute dy = y1-y0
0B0CD9 AF          0177*      xor a ; clear carry
0B0CDA FD E5       0178*      push iy ; move iy to hl via the stack
0B0CDC E1          0179*      pop hl ; hl = y1
0B0CDD ED 52       0180*      sbc hl,de ; hl = dy
0B0CDF 22 15 0D 0B 0181*      ld (dy168),hl ; dy to scratch
0B0CE3             0182*  ; ; test dy for overflow
0B0CE3             0183*  ; 	ld de,0x007F00 ; max positive 16.8 value we can square without overflow
0B0CE3             0184*  ; 	ex de,hl
0B0CE3             0185*  ; 	sbc hl,de ; test for overflow
0B0CE3             0186*  ; 	push af ; carry indicates overflow
0B0CE3             0187*  ; compute dy^2
0B0CE3 2A 15 0D 0B 0188*  	ld hl,(dy168)
0B0CE7 CD 37 08 0B 0189*      call hlu_abs  ; make dy positive so we can use unsigned multiply
0B0CEB             0190*      ; call hlu_div2 ; divide hlu by 2 to give us some headroom
0B0CEB E5          0191*      push hl ; load hl/2 to bc via the stack
0B0CEC C1          0192*      pop bc ; bc = dy/2
0B0CED EB          0193*      ex de,hl ; de = dy/2
0B0CEE CD DA 09 0B 0194*      call umul168 ; uh.l = dy^2/2
0B0CF2 E5          0195*      push hl ; dy^2/2 to the stack
0B0CF3             0196*  ; compute dx^2
0B0CF3 2A 0F 0D 0B 0197*      ld hl,(dx168) ; get back dx
0B0CF7 CD 37 08 0B 0198*      call hlu_abs  ; make dx positive so we can use unsigned multiply
0B0CFB             0199*      ; call hlu_div2 ; divide hlu by 2 to give us some headroom
0B0CFB E5          0200*      push hl ; load hl/2 to bc via the stack
0B0CFC C1          0201*      pop bc ; bc = dx/2
0B0CFD EB          0202*      ex de,hl ; de = dx/2
0B0CFE CD DA 09 0B 0203*      call umul168 ; uh.l = dx^2/2
0B0D02             0204*  ; commpute dy^2+dx^2
0B0D02 D1          0205*      pop de ; get back dx^2/2
0B0D03 19          0206*      add hl,de ; hl = dx^2/2+dy^2/2
0B0D04             0207*  ; compute sqrt(dx^2/2+dy^2/2)
0B0D04 CD 46 0B 0B 0208*      call sqrt168 ; uh.l = distance/2
0B0D08             0209*      ; add hl,hl ; hl = distance
0B0D08             0210*  ; ; check for overflow
0B0D08             0211*  ; 	pop af ; get back the overflow flags
0B0D08             0212*  ; 	sbc a,a ; will be -1 if overflow, 0 if not
0B0D08             0213*  ; 	ld b,a ; save the overflow flag
0B0D08             0214*  ; 	pop af ; get back the overflow flags
0B0D08             0215*  ; 	sbc a,a ; will be -1 if overflow, 0 if not
0B0D08             0216*  ; 	add a,b ; if a != 0 then we had overflow
0B0D08             0217*  ;     ret z ; no overflow we're done
0B0D08             0218*  ; @overflow:
0B0D08             0219*  ; 	ld hl,0x7FFFFF ; max positive 16.8 fixed value indicates overflow
0B0D08 C9          0220*  	ret
0B0D09             0221*  @scratch: ds 6
0B0D0F             0222*  dx168: ds 6
0B0D15             0223*  dy168: ds 6
0B0D1B             0224*  
0B0D1B             0225*  ; atan2(ub.c,ud.e) --> uh.l
0B0D1B             0226*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0B0D1B             0227*  ;   whether inputs are integers or fractional doesn't matter
0B0D1B             0228*  ;   so long as the sign bit of the upper byte is correct
0B0D1B             0229*  ; output: uh.l is the 16.8 fixed angle in degrees 256
0B0D1B             0230*  ; angles are COMPASS HEADINGS based on
0B0D1B             0231*  ; screen coordinate conventions,where the y axis is flipped
0B0D1B             0232*  ; #E0 315      0       45 #20
0B0D1B             0233*  ;        -x,-y | +x,-y
0B0D1B             0234*  ; #C0 270------+------ 90 #40
0B0D1B             0235*  ;        -x,+y | +x,+y
0B0D1B             0236*  ; #A0 225   180 #80   135 #60
0B0D1B             0237*  atan2_168game:
0B0D1B             0238*  ; get signs and make everything positive
0B0D1B             0239*  ; get abs(x) and store its original sign
0B0D1B C5          0240*      push bc
0B0D1C E1          0241*      pop hl
0B0D1D CD 37 08 0B 0242*      call hlu_abs ; if x was negative this also sets the sign flag
0B0D21 E5          0243*      push hl ; store abs(x)
0B0D22 C1          0244*      pop bc ; bc = abs(x)
0B0D23 F5          0245*      push af ; store sign of x
0B0D24             0246*  ; get abs(y) and store its original sign
0B0D24 EB          0247*      ex de,hl ; hl = y
0B0D25 CD 37 08 0B 0248*      call hlu_abs ; if y was negative this also sets the sign flag
0B0D29 EB          0249*      ex de,hl ; de = abs(y)
0B0D2A F5          0250*      push af ; store sign of y
0B0D2B             0251*  ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
0B0D2B             0252*  ; this ensures that our lookup value is between 0 and 1 inclusive
0B0D2B AF          0253*      xor a ; clear the carry flag
0B0D2C D5          0254*      push de
0B0D2D E1          0255*      pop hl
0B0D2E ED 42       0256*      sbc hl,bc
0B0D30 F5          0257*      push af ; save sign of de - bc
0B0D31 F2 3A 0D 0B 0258*      jp p,@1 ; bc <= de, so we skip ahead
0B0D35             0259*  ; otherwise we swap bc and de
0B0D35 C5          0260*      push bc
0B0D36 E1          0261*      pop hl
0B0D37 EB          0262*      ex de,hl
0B0D38 E5          0263*      push hl
0B0D39 C1          0264*      pop bc
0B0D3A             0265*  @1:
0B0D3A             0266*  ; now we're ready to snag our preliminary result
0B0D3A CD A8 0D 0B 0267*      call atan_168game ; uh.l comes back with prelim result
0B0D3E             0268*  ; now we adjust uh.l based on sign of de - bc
0B0D3E F1          0269*      pop af
0B0D3F F2 4B 0D 0B 0270*      jp p,@2 ; bc <= de,so we skip ahead
0B0D43 EB          0271*      ex de,hl
0B0D44 21 00 40 00 0272*      ld hl,0x004000 ; 90 degrees
0B0D48 AF          0273*      xor a ; clear the carry flag
0B0D49 ED 52       0274*      sbc hl,de ; subtract result from 90 degrees
0B0D4B             0275*      ; ld de,0 ; prep to clear hlu
0B0D4B             0276*      ; ld d,h
0B0D4B             0277*      ; ld e,l
0B0D4B             0278*      ; ex de,hl ; now we have 0 <= uh.l < 256 in 16.8 fixed format
0B0D4B             0279*      ; fall through
0B0D4B             0280*  @2:
0B0D4B             0281*  ; now the fun part of adjusting the result
0B0D4B             0282*  ; based on which quadrant (x,y) is in
0B0D4B             0283*  ; #E0 315      0       45 #20
0B0D4B             0284*  ;        -x,-y | +x,-y
0B0D4B             0285*  ; #C0 270------+------ 90 #40
0B0D4B             0286*  ;        -x,+y | +x,+y
0B0D4B             0287*  ; #A0 225   180 #80   135 #60
0B0D4B F1          0288*      pop af ; sign of y
0B0D4C CA 89 0D 0B 0289*      jp z,@y_zero
0B0D50 F2 69 0D 0B 0290*      jp p,@y_pos
0B0D54             0291*  ; y neg,check x
0B0D54 F1          0292*      pop af ; sign of x
0B0D55 CA 63 0D 0B 0293*      jp z,@y_neg_x_zero
0B0D59 F2 68 0D 0B 0294*      jp p,@y_neg_x_pos
0B0D5D             0295*  ; y neg,x neg
0B0D5D             0296*  ; angle is 270-360
0B0D5D             0297*  ; negating the intermediate does the trick
0B0D5D CD 47 08 0B 0298*      call neg_hlu
0B0D61 18 31       0299*      jr @zero_hlu
0B0D63             0300*  
0B0D63             0301*  @y_neg_x_zero:
0B0D63             0302*  ; y neg,x zero
0B0D63             0303*  ; angle is 0
0B0D63 21 00 00 00 0304*      ld hl,0
0B0D67 C9          0305*      ret
0B0D68             0306*  @y_neg_x_pos:
0B0D68             0307*  ; y neg,x pos
0B0D68             0308*  ; angle is 0 to 90
0B0D68             0309*  ; so we're good
0B0D68 C9          0310*      ret
0B0D69             0311*  
0B0D69             0312*  @y_pos:
0B0D69 F1          0313*      pop af ; sign of x
0B0D6A CA 79 0D 0B 0314*      jp z,@y_pos_x_zero
0B0D6E F2 7E 0D 0B 0315*      jp p,@y_pos_x_pos
0B0D72             0316*  ; y pos,x neg
0B0D72             0317*  ; angle is 180-270
0B0D72             0318*  ; so we add 180 to intermediate
0B0D72 11 00 80 00 0319*      ld de,0x008000
0B0D76 19          0320*      add hl,de
0B0D77 18 1B       0321*      jr @zero_hlu
0B0D79             0322*  @y_pos_x_zero:
0B0D79             0323*  ; y pos,x zero
0B0D79             0324*  ; angle is 180
0B0D79 21 00 80 00 0325*      ld hl,0x008000
0B0D7D C9          0326*      ret
0B0D7E             0327*  @y_pos_x_pos:
0B0D7E             0328*  ; y pos,x pos
0B0D7E             0329*  ; angle is 90-180
0B0D7E             0330*  ; neg the intermediate and add 180 degrees
0B0D7E CD 47 08 0B 0331*      call neg_hlu
0B0D82 11 00 80 00 0332*      ld de,0x008000
0B0D86 19          0333*      add hl,de
0B0D87 18 0B       0334*      jr @zero_hlu
0B0D89             0335*  
0B0D89             0336*  @y_zero:
0B0D89 F1          0337*      pop af ; sign of x
0B0D8A FA 8F 0D 0B 0338*      jp m,@y_zero_x_neg
0B0D8E             0339*  ; y zero,x pos
0B0D8E             0340*  ; angle is 90,nothing to do
0B0D8E C9          0341*      ret
0B0D8F             0342*  @y_zero_x_neg:
0B0D8F             0343*  ; y zero ,x neg
0B0D8F             0344*  ; angle is 270
0B0D8F 21 00 C0 00 0345*      ld hl,0x00C000
0B0D93 C9          0346*      ret
0B0D94             0347*  @zero_hlu:
0B0D94 AF          0348*      xor a
0B0D95 22 A2 0D 0B 0349*      ld (@scratch),hl
0B0D99 32 A4 0D 0B 0350*      ld (@scratch+2),a
0B0D9D 2A A2 0D 0B 0351*      ld hl,(@scratch)
0B0DA1 C9          0352*      ret
0B0DA2             0353*  @scratch: ds 6
0B0DA8             0354*  
0B0DA8             0355*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0B0DA8             0356*  ; output: uh.l is the 16.8 fixed format angle
0B0DA8             0357*  ; destroys: a,hl,bc,de
0B0DA8             0358*  ; the following note was written by github copilot:
0B0DA8             0359*  ; note: this routine is a bit of a hack
0B0DA8             0360*  ;      but it works
0B0DA8             0361*  ;      and it's fast
0B0DA8             0362*  ;      and it's small
0B0DA8             0363*  ;      and it's accurate
0B0DA8             0364*  ;      and it's easy to understand
0B0DA8             0365*  ;      and it's easy to modify
0B0DA8             0366*  ;      and it's easy to use
0B0DA8             0367*  ;      and it's easy to remember
0B0DA8             0368*  ;      and it's easy to love
0B0DA8             0369*  ;      and it's easy to hate
0B0DA8             0370*  ;      and it's easy to ignore
0B0DA8             0371*  ;      and it's easy to forget
0B0DA8             0372*  ;      and it's easy to remember
0B0DA8             0373*  ;      and it's easy to forget
0B0DA8             0374*  ;      and it's easy to remember
0B0DA8             0375*  ;      (ok the bot is stuck in a loop)
0B0DA8             0376*  ; REAL NOTE: only works for angles from 0 to 45 degrees
0B0DA8             0377*  ;   use atan2_168 (which calls this proc) to handle the full 360 degrees
0B0DA8             0378*  atan_168game:
0B0DA8             0379*  ; because we use compass headings instead of geometric angles
0B0DA8             0380*  ; we compute dx/dy which is 1/tan(theta) in the maths world
0B0DA8             0381*  ; we can do faster unsigned division here because we know dx and dy are positive
0B0DA8 CD 42 0A 0B 0382*  	call udiv168 ; uh.l = dx/dy
0B0DAC             0383*  ; ; TODO: IMPLEMENT THIS, RIGHT NOW IS IS BUGGED
0B0DAC             0384*  ; ; test uh.l for 0
0B0DAC             0385*  ;     add hl,de
0B0DAC             0386*  ;     or a
0B0DAC             0387*  ;     sbc hl,de
0B0DAC             0388*  ;     jr z,@is_zero
0B0DAC             0389*  ; ; test uh.l for 1
0B0DAC             0390*  ;     xor a ; clear carry
0B0DAC             0391*  ;     ex de,hl
0B0DAC             0392*  ;     ld hl,0x000100 ; 1 in 16.8 fixed format
0B0DAC             0393*  ;     sbc hl,de
0B0DAC             0394*  ;     jr z,@is_45
0B0DAC             0395*  ; ; END TODO
0B0DAC             0396*  
0B0DAC             0397*  ; no special cases so we move on
0B0DAC             0398*  ; l contains the fractional portion of tan(uh.l)
0B0DAC             0399*  ; we multiply it by three to get our lookup table index
0B0DAC 26 03       0400*      ld h,3
0B0DAE ED 6C       0401*      mlt hl ; gosh that is handy
0B0DB0 11 00 00 00 0402*      ld de,0 ; clear deu
0B0DB4 54          0403*      ld d,h ; copy hl to de
0B0DB5 5D          0404*      ld e,l ; de contains our index
0B0DB6 21 CB 13 0B 0405*      ld hl,atan_lut_168 ; grab the lut address
0B0DBA 19          0406*      add hl,de ; bump hl by the index
0B0DBB ED 27       0407*      ld hl,(hl) ; don't try this on a z80!
0B0DBD C9          0408*      ret ; and out
0B0DBE             0409*  @is_45:
0B0DBE 21 00 20 00 0410*      ld hl,0x002000 ; 45 degrees decimal
0B0DC2 C9          0411*      ret
0B0DC3             0412*  ; for the case tan(0)
0B0DC3             0413*  @is_zero:
0B0DC3 21 00 00 00 0414*      ld hl,0x000000
0B0DC7 C9          0415*      ret
0B0DC8             0416*  
0B0DC8             0417*  sin_lut_168:
0B0DC8 00 00 00    0418*  	dl 0x000000 ; 0.000 00, 0.000
0B0DCB 06 00 00    0419*  	dl 0x000006 ; 1.406 01, 0.025
0B0DCE 0C 00 00    0420*  	dl 0x00000C ; 2.813 02, 0.049
0B0DD1 12 00 00    0421*  	dl 0x000012 ; 4.219 03, 0.074
0B0DD4 19 00 00    0422*  	dl 0x000019 ; 5.625 04, 0.098
0B0DD7 1F 00 00    0423*  	dl 0x00001F ; 7.031 05, 0.122
0B0DDA 25 00 00    0424*  	dl 0x000025 ; 8.438 06, 0.147
0B0DDD 2B 00 00    0425*  	dl 0x00002B ; 9.844 07, 0.171
0B0DE0 31 00 00    0426*  	dl 0x000031 ; 11.250 08, 0.195
0B0DE3 38 00 00    0427*  	dl 0x000038 ; 12.656 09, 0.219
0B0DE6 3E 00 00    0428*  	dl 0x00003E ; 14.063 0A, 0.243
0B0DE9 44 00 00    0429*  	dl 0x000044 ; 15.469 0B, 0.267
0B0DEC 4A 00 00    0430*  	dl 0x00004A ; 16.875 0C, 0.290
0B0DEF 50 00 00    0431*  	dl 0x000050 ; 18.281 0D, 0.314
0B0DF2 56 00 00    0432*  	dl 0x000056 ; 19.688 0E, 0.337
0B0DF5 5C 00 00    0433*  	dl 0x00005C ; 21.094 0F, 0.360
0B0DF8 61 00 00    0434*  	dl 0x000061 ; 22.500 10, 0.383
0B0DFB 67 00 00    0435*  	dl 0x000067 ; 23.906 11, 0.405
0B0DFE 6D 00 00    0436*  	dl 0x00006D ; 25.313 12, 0.428
0B0E01 73 00 00    0437*  	dl 0x000073 ; 26.719 13, 0.450
0B0E04 78 00 00    0438*  	dl 0x000078 ; 28.125 14, 0.471
0B0E07 7E 00 00    0439*  	dl 0x00007E ; 29.531 15, 0.493
0B0E0A 83 00 00    0440*  	dl 0x000083 ; 30.938 16, 0.514
0B0E0D 88 00 00    0441*  	dl 0x000088 ; 32.344 17, 0.535
0B0E10 8E 00 00    0442*  	dl 0x00008E ; 33.750 18, 0.556
0B0E13 93 00 00    0443*  	dl 0x000093 ; 35.156 19, 0.576
0B0E16 98 00 00    0444*  	dl 0x000098 ; 36.563 1A, 0.596
0B0E19 9D 00 00    0445*  	dl 0x00009D ; 37.969 1B, 0.615
0B0E1C A2 00 00    0446*  	dl 0x0000A2 ; 39.375 1C, 0.634
0B0E1F A7 00 00    0447*  	dl 0x0000A7 ; 40.781 1D, 0.653
0B0E22 AB 00 00    0448*  	dl 0x0000AB ; 42.188 1E, 0.672
0B0E25 B0 00 00    0449*  	dl 0x0000B0 ; 43.594 1F, 0.690
0B0E28 B5 00 00    0450*  	dl 0x0000B5 ; 45.000 20, 0.707
0B0E2B B9 00 00    0451*  	dl 0x0000B9 ; 46.406 21, 0.724
0B0E2E BD 00 00    0452*  	dl 0x0000BD ; 47.813 22, 0.741
0B0E31 C1 00 00    0453*  	dl 0x0000C1 ; 49.219 23, 0.757
0B0E34 C5 00 00    0454*  	dl 0x0000C5 ; 50.625 24, 0.773
0B0E37 C9 00 00    0455*  	dl 0x0000C9 ; 52.031 25, 0.788
0B0E3A CD 00 00    0456*  	dl 0x0000CD ; 53.438 26, 0.803
0B0E3D D1 00 00    0457*  	dl 0x0000D1 ; 54.844 27, 0.818
0B0E40 D4 00 00    0458*  	dl 0x0000D4 ; 56.250 28, 0.831
0B0E43 D8 00 00    0459*  	dl 0x0000D8 ; 57.656 29, 0.845
0B0E46 DB 00 00    0460*  	dl 0x0000DB ; 59.063 2A, 0.858
0B0E49 DE 00 00    0461*  	dl 0x0000DE ; 60.469 2B, 0.870
0B0E4C E1 00 00    0462*  	dl 0x0000E1 ; 61.875 2C, 0.882
0B0E4F E4 00 00    0463*  	dl 0x0000E4 ; 63.281 2D, 0.893
0B0E52 E7 00 00    0464*  	dl 0x0000E7 ; 64.688 2E, 0.904
0B0E55 EA 00 00    0465*  	dl 0x0000EA ; 66.094 2F, 0.914
0B0E58 EC 00 00    0466*  	dl 0x0000EC ; 67.500 30, 0.924
0B0E5B EE 00 00    0467*  	dl 0x0000EE ; 68.906 31, 0.933
0B0E5E F1 00 00    0468*  	dl 0x0000F1 ; 70.313 32, 0.942
0B0E61 F3 00 00    0469*  	dl 0x0000F3 ; 71.719 33, 0.950
0B0E64 F4 00 00    0470*  	dl 0x0000F4 ; 73.125 34, 0.957
0B0E67 F6 00 00    0471*  	dl 0x0000F6 ; 74.531 35, 0.964
0B0E6A F8 00 00    0472*  	dl 0x0000F8 ; 75.938 36, 0.970
0B0E6D F9 00 00    0473*  	dl 0x0000F9 ; 77.344 37, 0.976
0B0E70 FB 00 00    0474*  	dl 0x0000FB ; 78.750 38, 0.981
0B0E73 FC 00 00    0475*  	dl 0x0000FC ; 80.156 39, 0.985
0B0E76 FD 00 00    0476*  	dl 0x0000FD ; 81.563 3A, 0.989
0B0E79 FE 00 00    0477*  	dl 0x0000FE ; 82.969 3B, 0.992
0B0E7C FE 00 00    0478*  	dl 0x0000FE ; 84.375 3C, 0.995
0B0E7F FF 00 00    0479*  	dl 0x0000FF ; 85.781 3D, 0.997
0B0E82 FF 00 00    0480*  	dl 0x0000FF ; 87.188 3E, 0.999
0B0E85 FF 00 00    0481*  	dl 0x0000FF ; 88.594 3F, 1.000
0B0E88 00 01 00    0482*  	dl 0x000100 ; 90.000 40, 1.000
0B0E8B FF 00 00    0483*  	dl 0x0000FF ; 91.406 41, 1.000
0B0E8E FF 00 00    0484*  	dl 0x0000FF ; 92.813 42, 0.999
0B0E91 FF 00 00    0485*  	dl 0x0000FF ; 94.219 43, 0.997
0B0E94 FE 00 00    0486*  	dl 0x0000FE ; 95.625 44, 0.995
0B0E97 FE 00 00    0487*  	dl 0x0000FE ; 97.031 45, 0.992
0B0E9A FD 00 00    0488*  	dl 0x0000FD ; 98.438 46, 0.989
0B0E9D FC 00 00    0489*  	dl 0x0000FC ; 99.844 47, 0.985
0B0EA0 FB 00 00    0490*  	dl 0x0000FB ; 101.250 48, 0.981
0B0EA3 F9 00 00    0491*  	dl 0x0000F9 ; 102.656 49, 0.976
0B0EA6 F8 00 00    0492*  	dl 0x0000F8 ; 104.063 4A, 0.970
0B0EA9 F6 00 00    0493*  	dl 0x0000F6 ; 105.469 4B, 0.964
0B0EAC F4 00 00    0494*  	dl 0x0000F4 ; 106.875 4C, 0.957
0B0EAF F3 00 00    0495*  	dl 0x0000F3 ; 108.281 4D, 0.950
0B0EB2 F1 00 00    0496*  	dl 0x0000F1 ; 109.688 4E, 0.942
0B0EB5 EE 00 00    0497*  	dl 0x0000EE ; 111.094 4F, 0.933
0B0EB8 EC 00 00    0498*  	dl 0x0000EC ; 112.500 50, 0.924
0B0EBB EA 00 00    0499*  	dl 0x0000EA ; 113.906 51, 0.914
0B0EBE E7 00 00    0500*  	dl 0x0000E7 ; 115.313 52, 0.904
0B0EC1 E4 00 00    0501*  	dl 0x0000E4 ; 116.719 53, 0.893
0B0EC4 E1 00 00    0502*  	dl 0x0000E1 ; 118.125 54, 0.882
0B0EC7 DE 00 00    0503*  	dl 0x0000DE ; 119.531 55, 0.870
0B0ECA DB 00 00    0504*  	dl 0x0000DB ; 120.938 56, 0.858
0B0ECD D8 00 00    0505*  	dl 0x0000D8 ; 122.344 57, 0.845
0B0ED0 D4 00 00    0506*  	dl 0x0000D4 ; 123.750 58, 0.831
0B0ED3 D1 00 00    0507*  	dl 0x0000D1 ; 125.156 59, 0.818
0B0ED6 CD 00 00    0508*  	dl 0x0000CD ; 126.563 5A, 0.803
0B0ED9 C9 00 00    0509*  	dl 0x0000C9 ; 127.969 5B, 0.788
0B0EDC C5 00 00    0510*  	dl 0x0000C5 ; 129.375 5C, 0.773
0B0EDF C1 00 00    0511*  	dl 0x0000C1 ; 130.781 5D, 0.757
0B0EE2 BD 00 00    0512*  	dl 0x0000BD ; 132.188 5E, 0.741
0B0EE5 B9 00 00    0513*  	dl 0x0000B9 ; 133.594 5F, 0.724
0B0EE8 B5 00 00    0514*  	dl 0x0000B5 ; 135.000 60, 0.707
0B0EEB B0 00 00    0515*  	dl 0x0000B0 ; 136.406 61, 0.690
0B0EEE AB 00 00    0516*  	dl 0x0000AB ; 137.813 62, 0.672
0B0EF1 A7 00 00    0517*  	dl 0x0000A7 ; 139.219 63, 0.653
0B0EF4 A2 00 00    0518*  	dl 0x0000A2 ; 140.625 64, 0.634
0B0EF7 9D 00 00    0519*  	dl 0x00009D ; 142.031 65, 0.615
0B0EFA 98 00 00    0520*  	dl 0x000098 ; 143.438 66, 0.596
0B0EFD 93 00 00    0521*  	dl 0x000093 ; 144.844 67, 0.576
0B0F00 8E 00 00    0522*  	dl 0x00008E ; 146.250 68, 0.556
0B0F03 88 00 00    0523*  	dl 0x000088 ; 147.656 69, 0.535
0B0F06 83 00 00    0524*  	dl 0x000083 ; 149.063 6A, 0.514
0B0F09 7E 00 00    0525*  	dl 0x00007E ; 150.469 6B, 0.493
0B0F0C 78 00 00    0526*  	dl 0x000078 ; 151.875 6C, 0.471
0B0F0F 73 00 00    0527*  	dl 0x000073 ; 153.281 6D, 0.450
0B0F12 6D 00 00    0528*  	dl 0x00006D ; 154.688 6E, 0.428
0B0F15 67 00 00    0529*  	dl 0x000067 ; 156.094 6F, 0.405
0B0F18 61 00 00    0530*  	dl 0x000061 ; 157.500 70, 0.383
0B0F1B 5C 00 00    0531*  	dl 0x00005C ; 158.906 71, 0.360
0B0F1E 56 00 00    0532*  	dl 0x000056 ; 160.313 72, 0.337
0B0F21 50 00 00    0533*  	dl 0x000050 ; 161.719 73, 0.314
0B0F24 4A 00 00    0534*  	dl 0x00004A ; 163.125 74, 0.290
0B0F27 44 00 00    0535*  	dl 0x000044 ; 164.531 75, 0.267
0B0F2A 3E 00 00    0536*  	dl 0x00003E ; 165.938 76, 0.243
0B0F2D 38 00 00    0537*  	dl 0x000038 ; 167.344 77, 0.219
0B0F30 31 00 00    0538*  	dl 0x000031 ; 168.750 78, 0.195
0B0F33 2B 00 00    0539*  	dl 0x00002B ; 170.156 79, 0.171
0B0F36 25 00 00    0540*  	dl 0x000025 ; 171.563 7A, 0.147
0B0F39 1F 00 00    0541*  	dl 0x00001F ; 172.969 7B, 0.122
0B0F3C 19 00 00    0542*  	dl 0x000019 ; 174.375 7C, 0.098
0B0F3F 12 00 00    0543*  	dl 0x000012 ; 175.781 7D, 0.074
0B0F42 0C 00 00    0544*  	dl 0x00000C ; 177.188 7E, 0.049
0B0F45 06 00 00    0545*  	dl 0x000006 ; 178.594 7F, 0.025
0B0F48 00 00 00    0546*  	dl 0x000000 ; 180.000 80, 0.000
0B0F4B FA FF FF    0547*  	dl 0xFFFFFA ; 181.406 81, -0.025
0B0F4E F4 FF FF    0548*  	dl 0xFFFFF4 ; 182.813 82, -0.049
0B0F51 EE FF FF    0549*  	dl 0xFFFFEE ; 184.219 83, -0.074
0B0F54 E7 FF FF    0550*  	dl 0xFFFFE7 ; 185.625 84, -0.098
0B0F57 E1 FF FF    0551*  	dl 0xFFFFE1 ; 187.031 85, -0.122
0B0F5A DB FF FF    0552*  	dl 0xFFFFDB ; 188.438 86, -0.147
0B0F5D D5 FF FF    0553*  	dl 0xFFFFD5 ; 189.844 87, -0.171
0B0F60 CF FF FF    0554*  	dl 0xFFFFCF ; 191.250 88, -0.195
0B0F63 C8 FF FF    0555*  	dl 0xFFFFC8 ; 192.656 89, -0.219
0B0F66 C2 FF FF    0556*  	dl 0xFFFFC2 ; 194.063 8A, -0.243
0B0F69 BC FF FF    0557*  	dl 0xFFFFBC ; 195.469 8B, -0.267
0B0F6C B6 FF FF    0558*  	dl 0xFFFFB6 ; 196.875 8C, -0.290
0B0F6F B0 FF FF    0559*  	dl 0xFFFFB0 ; 198.281 8D, -0.314
0B0F72 AA FF FF    0560*  	dl 0xFFFFAA ; 199.688 8E, -0.337
0B0F75 A4 FF FF    0561*  	dl 0xFFFFA4 ; 201.094 8F, -0.360
0B0F78 9F FF FF    0562*  	dl 0xFFFF9F ; 202.500 90, -0.383
0B0F7B 99 FF FF    0563*  	dl 0xFFFF99 ; 203.906 91, -0.405
0B0F7E 93 FF FF    0564*  	dl 0xFFFF93 ; 205.313 92, -0.428
0B0F81 8D FF FF    0565*  	dl 0xFFFF8D ; 206.719 93, -0.450
0B0F84 88 FF FF    0566*  	dl 0xFFFF88 ; 208.125 94, -0.471
0B0F87 82 FF FF    0567*  	dl 0xFFFF82 ; 209.531 95, -0.493
0B0F8A 7D FF FF    0568*  	dl 0xFFFF7D ; 210.938 96, -0.514
0B0F8D 78 FF FF    0569*  	dl 0xFFFF78 ; 212.344 97, -0.535
0B0F90 72 FF FF    0570*  	dl 0xFFFF72 ; 213.750 98, -0.556
0B0F93 6D FF FF    0571*  	dl 0xFFFF6D ; 215.156 99, -0.576
0B0F96 68 FF FF    0572*  	dl 0xFFFF68 ; 216.563 9A, -0.596
0B0F99 63 FF FF    0573*  	dl 0xFFFF63 ; 217.969 9B, -0.615
0B0F9C 5E FF FF    0574*  	dl 0xFFFF5E ; 219.375 9C, -0.634
0B0F9F 59 FF FF    0575*  	dl 0xFFFF59 ; 220.781 9D, -0.653
0B0FA2 55 FF FF    0576*  	dl 0xFFFF55 ; 222.188 9E, -0.672
0B0FA5 50 FF FF    0577*  	dl 0xFFFF50 ; 223.594 9F, -0.690
0B0FA8 4B FF FF    0578*  	dl 0xFFFF4B ; 225.000 A0, -0.707
0B0FAB 47 FF FF    0579*  	dl 0xFFFF47 ; 226.406 A1, -0.724
0B0FAE 43 FF FF    0580*  	dl 0xFFFF43 ; 227.813 A2, -0.741
0B0FB1 3F FF FF    0581*  	dl 0xFFFF3F ; 229.219 A3, -0.757
0B0FB4 3B FF FF    0582*  	dl 0xFFFF3B ; 230.625 A4, -0.773
0B0FB7 37 FF FF    0583*  	dl 0xFFFF37 ; 232.031 A5, -0.788
0B0FBA 33 FF FF    0584*  	dl 0xFFFF33 ; 233.438 A6, -0.803
0B0FBD 2F FF FF    0585*  	dl 0xFFFF2F ; 234.844 A7, -0.818
0B0FC0 2C FF FF    0586*  	dl 0xFFFF2C ; 236.250 A8, -0.831
0B0FC3 28 FF FF    0587*  	dl 0xFFFF28 ; 237.656 A9, -0.845
0B0FC6 25 FF FF    0588*  	dl 0xFFFF25 ; 239.063 AA, -0.858
0B0FC9 22 FF FF    0589*  	dl 0xFFFF22 ; 240.469 AB, -0.870
0B0FCC 1F FF FF    0590*  	dl 0xFFFF1F ; 241.875 AC, -0.882
0B0FCF 1C FF FF    0591*  	dl 0xFFFF1C ; 243.281 AD, -0.893
0B0FD2 19 FF FF    0592*  	dl 0xFFFF19 ; 244.688 AE, -0.904
0B0FD5 16 FF FF    0593*  	dl 0xFFFF16 ; 246.094 AF, -0.914
0B0FD8 14 FF FF    0594*  	dl 0xFFFF14 ; 247.500 B0, -0.924
0B0FDB 12 FF FF    0595*  	dl 0xFFFF12 ; 248.906 B1, -0.933
0B0FDE 0F FF FF    0596*  	dl 0xFFFF0F ; 250.313 B2, -0.942
0B0FE1 0D FF FF    0597*  	dl 0xFFFF0D ; 251.719 B3, -0.950
0B0FE4 0C FF FF    0598*  	dl 0xFFFF0C ; 253.125 B4, -0.957
0B0FE7 0A FF FF    0599*  	dl 0xFFFF0A ; 254.531 B5, -0.964
0B0FEA 08 FF FF    0600*  	dl 0xFFFF08 ; 255.938 B6, -0.970
0B0FED 07 FF FF    0601*  	dl 0xFFFF07 ; 257.344 B7, -0.976
0B0FF0 05 FF FF    0602*  	dl 0xFFFF05 ; 258.750 B8, -0.981
0B0FF3 04 FF FF    0603*  	dl 0xFFFF04 ; 260.156 B9, -0.985
0B0FF6 03 FF FF    0604*  	dl 0xFFFF03 ; 261.563 BA, -0.989
0B0FF9 02 FF FF    0605*  	dl 0xFFFF02 ; 262.969 BB, -0.992
0B0FFC 02 FF FF    0606*  	dl 0xFFFF02 ; 264.375 BC, -0.995
0B0FFF 01 FF FF    0607*  	dl 0xFFFF01 ; 265.781 BD, -0.997
0B1002 01 FF FF    0608*  	dl 0xFFFF01 ; 267.188 BE, -0.999
0B1005 01 FF FF    0609*  	dl 0xFFFF01 ; 268.594 BF, -1.000
0B1008 00 FF FF    0610*  	dl 0xFFFF00 ; 270.000 C0, -1.000
0B100B 01 FF FF    0611*  	dl 0xFFFF01 ; 271.406 C1, -1.000
0B100E 01 FF FF    0612*  	dl 0xFFFF01 ; 272.813 C2, -0.999
0B1011 01 FF FF    0613*  	dl 0xFFFF01 ; 274.219 C3, -0.997
0B1014 02 FF FF    0614*  	dl 0xFFFF02 ; 275.625 C4, -0.995
0B1017 02 FF FF    0615*  	dl 0xFFFF02 ; 277.031 C5, -0.992
0B101A 03 FF FF    0616*  	dl 0xFFFF03 ; 278.438 C6, -0.989
0B101D 04 FF FF    0617*  	dl 0xFFFF04 ; 279.844 C7, -0.985
0B1020 05 FF FF    0618*  	dl 0xFFFF05 ; 281.250 C8, -0.981
0B1023 07 FF FF    0619*  	dl 0xFFFF07 ; 282.656 C9, -0.976
0B1026 08 FF FF    0620*  	dl 0xFFFF08 ; 284.063 CA, -0.970
0B1029 0A FF FF    0621*  	dl 0xFFFF0A ; 285.469 CB, -0.964
0B102C 0C FF FF    0622*  	dl 0xFFFF0C ; 286.875 CC, -0.957
0B102F 0D FF FF    0623*  	dl 0xFFFF0D ; 288.281 CD, -0.950
0B1032 0F FF FF    0624*  	dl 0xFFFF0F ; 289.688 CE, -0.942
0B1035 12 FF FF    0625*  	dl 0xFFFF12 ; 291.094 CF, -0.933
0B1038 14 FF FF    0626*  	dl 0xFFFF14 ; 292.500 D0, -0.924
0B103B 16 FF FF    0627*  	dl 0xFFFF16 ; 293.906 D1, -0.914
0B103E 19 FF FF    0628*  	dl 0xFFFF19 ; 295.313 D2, -0.904
0B1041 1C FF FF    0629*  	dl 0xFFFF1C ; 296.719 D3, -0.893
0B1044 1F FF FF    0630*  	dl 0xFFFF1F ; 298.125 D4, -0.882
0B1047 22 FF FF    0631*  	dl 0xFFFF22 ; 299.531 D5, -0.870
0B104A 25 FF FF    0632*  	dl 0xFFFF25 ; 300.938 D6, -0.858
0B104D 28 FF FF    0633*  	dl 0xFFFF28 ; 302.344 D7, -0.845
0B1050 2C FF FF    0634*  	dl 0xFFFF2C ; 303.750 D8, -0.831
0B1053 2F FF FF    0635*  	dl 0xFFFF2F ; 305.156 D9, -0.818
0B1056 33 FF FF    0636*  	dl 0xFFFF33 ; 306.563 DA, -0.803
0B1059 37 FF FF    0637*  	dl 0xFFFF37 ; 307.969 DB, -0.788
0B105C 3B FF FF    0638*  	dl 0xFFFF3B ; 309.375 DC, -0.773
0B105F 3F FF FF    0639*  	dl 0xFFFF3F ; 310.781 DD, -0.757
0B1062 43 FF FF    0640*  	dl 0xFFFF43 ; 312.188 DE, -0.741
0B1065 47 FF FF    0641*  	dl 0xFFFF47 ; 313.594 DF, -0.724
0B1068 4B FF FF    0642*  	dl 0xFFFF4B ; 315.000 E0, -0.707
0B106B 50 FF FF    0643*  	dl 0xFFFF50 ; 316.406 E1, -0.690
0B106E 55 FF FF    0644*  	dl 0xFFFF55 ; 317.813 E2, -0.672
0B1071 59 FF FF    0645*  	dl 0xFFFF59 ; 319.219 E3, -0.653
0B1074 5E FF FF    0646*  	dl 0xFFFF5E ; 320.625 E4, -0.634
0B1077 63 FF FF    0647*  	dl 0xFFFF63 ; 322.031 E5, -0.615
0B107A 68 FF FF    0648*  	dl 0xFFFF68 ; 323.438 E6, -0.596
0B107D 6D FF FF    0649*  	dl 0xFFFF6D ; 324.844 E7, -0.576
0B1080 72 FF FF    0650*  	dl 0xFFFF72 ; 326.250 E8, -0.556
0B1083 78 FF FF    0651*  	dl 0xFFFF78 ; 327.656 E9, -0.535
0B1086 7D FF FF    0652*  	dl 0xFFFF7D ; 329.063 EA, -0.514
0B1089 82 FF FF    0653*  	dl 0xFFFF82 ; 330.469 EB, -0.493
0B108C 88 FF FF    0654*  	dl 0xFFFF88 ; 331.875 EC, -0.471
0B108F 8D FF FF    0655*  	dl 0xFFFF8D ; 333.281 ED, -0.450
0B1092 93 FF FF    0656*  	dl 0xFFFF93 ; 334.688 EE, -0.428
0B1095 99 FF FF    0657*  	dl 0xFFFF99 ; 336.094 EF, -0.405
0B1098 9F FF FF    0658*  	dl 0xFFFF9F ; 337.500 F0, -0.383
0B109B A4 FF FF    0659*  	dl 0xFFFFA4 ; 338.906 F1, -0.360
0B109E AA FF FF    0660*  	dl 0xFFFFAA ; 340.313 F2, -0.337
0B10A1 B0 FF FF    0661*  	dl 0xFFFFB0 ; 341.719 F3, -0.314
0B10A4 B6 FF FF    0662*  	dl 0xFFFFB6 ; 343.125 F4, -0.290
0B10A7 BC FF FF    0663*  	dl 0xFFFFBC ; 344.531 F5, -0.267
0B10AA C2 FF FF    0664*  	dl 0xFFFFC2 ; 345.938 F6, -0.243
0B10AD C8 FF FF    0665*  	dl 0xFFFFC8 ; 347.344 F7, -0.219
0B10B0 CF FF FF    0666*  	dl 0xFFFFCF ; 348.750 F8, -0.195
0B10B3 D5 FF FF    0667*  	dl 0xFFFFD5 ; 350.156 F9, -0.171
0B10B6 DB FF FF    0668*  	dl 0xFFFFDB ; 351.563 FA, -0.147
0B10B9 E1 FF FF    0669*  	dl 0xFFFFE1 ; 352.969 FB, -0.122
0B10BC E7 FF FF    0670*  	dl 0xFFFFE7 ; 354.375 FC, -0.098
0B10BF EE FF FF    0671*  	dl 0xFFFFEE ; 355.781 FD, -0.074
0B10C2 F4 FF FF    0672*  	dl 0xFFFFF4 ; 357.188 FE, -0.049
0B10C5 FA FF FF    0673*  	dl 0xFFFFFA ; 358.594 FF, -0.025
0B10C8 00 00 00    0674*  	dl 0x000000 ; 0.000 00, 0.000 for interpolation
0B10CB             0675*  
0B10CB             0676*  sin_lut_1212:
0B10CB 00 00 00    0677*      dl 0x000000 ; 00, 00.000, +0.000000
0B10CE 65 00 00    0678*      dl 0x000065 ; 01, 01.406, +0.024541
0B10D1 C9 00 00    0679*      dl 0x0000C9 ; 02, 02.812, +0.049068
0B10D4 2D 01 00    0680*      dl 0x00012D ; 03, 04.219, +0.073565
0B10D7 91 01 00    0681*      dl 0x000191 ; 04, 05.625, +0.098017
0B10DA F5 01 00    0682*      dl 0x0001F5 ; 05, 07.031, +0.122411
0B10DD 59 02 00    0683*      dl 0x000259 ; 06, 08.438, +0.146730
0B10E0 BC 02 00    0684*      dl 0x0002BC ; 07, 09.844, +0.170962
0B10E3 1F 03 00    0685*      dl 0x00031F ; 08, 11.250, +0.195090
0B10E6 81 03 00    0686*      dl 0x000381 ; 09, 12.656, +0.219101
0B10E9 E3 03 00    0687*      dl 0x0003E3 ; 0A, 14.062, +0.242980
0B10EC 44 04 00    0688*      dl 0x000444 ; 0B, 15.469, +0.266713
0B10EF A5 04 00    0689*      dl 0x0004A5 ; 0C, 16.875, +0.290285
0B10F2 05 05 00    0690*      dl 0x000505 ; 0D, 18.281, +0.313682
0B10F5 64 05 00    0691*      dl 0x000564 ; 0E, 19.688, +0.336890
0B10F8 C2 05 00    0692*      dl 0x0005C2 ; 0F, 21.094, +0.359895
0B10FB 1F 06 00    0693*      dl 0x00061F ; 10, 22.500, +0.382683
0B10FE 7C 06 00    0694*      dl 0x00067C ; 11, 23.906, +0.405241
0B1101 D7 06 00    0695*      dl 0x0006D7 ; 12, 25.312, +0.427555
0B1104 32 07 00    0696*      dl 0x000732 ; 13, 26.719, +0.449611
0B1107 8B 07 00    0697*      dl 0x00078B ; 14, 28.125, +0.471397
0B110A E3 07 00    0698*      dl 0x0007E3 ; 15, 29.531, +0.492898
0B110D 3A 08 00    0699*      dl 0x00083A ; 16, 30.938, +0.514103
0B1110 8F 08 00    0700*      dl 0x00088F ; 17, 32.344, +0.534998
0B1113 E4 08 00    0701*      dl 0x0008E4 ; 18, 33.750, +0.555570
0B1116 37 09 00    0702*      dl 0x000937 ; 19, 35.156, +0.575808
0B1119 88 09 00    0703*      dl 0x000988 ; 1A, 36.562, +0.595699
0B111C D8 09 00    0704*      dl 0x0009D8 ; 1B, 37.969, +0.615232
0B111F 26 0A 00    0705*      dl 0x000A26 ; 1C, 39.375, +0.634393
0B1122 73 0A 00    0706*      dl 0x000A73 ; 1D, 40.781, +0.653173
0B1125 BF 0A 00    0707*      dl 0x000ABF ; 1E, 42.188, +0.671559
0B1128 08 0B 00    0708*      dl 0x000B08 ; 1F, 43.594, +0.689541
0B112B 50 0B 00    0709*      dl 0x000B50 ; 20, 45.000, +0.707107
0B112E 97 0B 00    0710*      dl 0x000B97 ; 21, 46.406, +0.724247
0B1131 DB 0B 00    0711*      dl 0x000BDB ; 22, 47.812, +0.740951
0B1134 1E 0C 00    0712*      dl 0x000C1E ; 23, 49.219, +0.757209
0B1137 5E 0C 00    0713*      dl 0x000C5E ; 24, 50.625, +0.773010
0B113A 9D 0C 00    0714*      dl 0x000C9D ; 25, 52.031, +0.788346
0B113D DA 0C 00    0715*      dl 0x000CDA ; 26, 53.438, +0.803208
0B1140 15 0D 00    0716*      dl 0x000D15 ; 27, 54.844, +0.817585
0B1143 4E 0D 00    0717*      dl 0x000D4E ; 28, 56.250, +0.831470
0B1146 85 0D 00    0718*      dl 0x000D85 ; 29, 57.656, +0.844854
0B1149 B9 0D 00    0719*      dl 0x000DB9 ; 2A, 59.062, +0.857729
0B114C EC 0D 00    0720*      dl 0x000DEC ; 2B, 60.469, +0.870087
0B114F 1C 0E 00    0721*      dl 0x000E1C ; 2C, 61.875, +0.881921
0B1152 4B 0E 00    0722*      dl 0x000E4B ; 2D, 63.281, +0.893224
0B1155 77 0E 00    0723*      dl 0x000E77 ; 2E, 64.688, +0.903989
0B1158 A1 0E 00    0724*      dl 0x000EA1 ; 2F, 66.094, +0.914210
0B115B C8 0E 00    0725*      dl 0x000EC8 ; 30, 67.500, +0.923880
0B115E EE 0E 00    0726*      dl 0x000EEE ; 31, 68.906, +0.932993
0B1161 11 0F 00    0727*      dl 0x000F11 ; 32, 70.312, +0.941544
0B1164 31 0F 00    0728*      dl 0x000F31 ; 33, 71.719, +0.949528
0B1167 50 0F 00    0729*      dl 0x000F50 ; 34, 73.125, +0.956940
0B116A 6C 0F 00    0730*      dl 0x000F6C ; 35, 74.531, +0.963776
0B116D 85 0F 00    0731*      dl 0x000F85 ; 36, 75.938, +0.970031
0B1170 9C 0F 00    0732*      dl 0x000F9C ; 37, 77.344, +0.975702
0B1173 B1 0F 00    0733*      dl 0x000FB1 ; 38, 78.750, +0.980785
0B1176 C4 0F 00    0734*      dl 0x000FC4 ; 39, 80.156, +0.985278
0B1179 D4 0F 00    0735*      dl 0x000FD4 ; 3A, 81.562, +0.989177
0B117C E1 0F 00    0736*      dl 0x000FE1 ; 3B, 82.969, +0.992480
0B117F EC 0F 00    0737*      dl 0x000FEC ; 3C, 84.375, +0.995185
0B1182 F5 0F 00    0738*      dl 0x000FF5 ; 3D, 85.781, +0.997290
0B1185 FB 0F 00    0739*      dl 0x000FFB ; 3E, 87.188, +0.998795
0B1188 FF 0F 00    0740*      dl 0x000FFF ; 3F, 88.594, +0.999699
0B118B 00 10 00    0741*      dl 0x001000 ; 40, 90.000, +1.000000
0B118E FF 0F 00    0742*      dl 0x000FFF ; 41, 91.406, +0.999699
0B1191 FB 0F 00    0743*      dl 0x000FFB ; 42, 92.812, +0.998795
0B1194 F5 0F 00    0744*      dl 0x000FF5 ; 43, 94.219, +0.997290
0B1197 EC 0F 00    0745*      dl 0x000FEC ; 44, 95.625, +0.995185
0B119A E1 0F 00    0746*      dl 0x000FE1 ; 45, 97.031, +0.992480
0B119D D4 0F 00    0747*      dl 0x000FD4 ; 46, 98.438, +0.989177
0B11A0 C4 0F 00    0748*      dl 0x000FC4 ; 47, 99.844, +0.985278
0B11A3 B1 0F 00    0749*      dl 0x000FB1 ; 48, 101.250, +0.980785
0B11A6 9C 0F 00    0750*      dl 0x000F9C ; 49, 102.656, +0.975702
0B11A9 85 0F 00    0751*      dl 0x000F85 ; 4A, 104.062, +0.970031
0B11AC 6C 0F 00    0752*      dl 0x000F6C ; 4B, 105.469, +0.963776
0B11AF 50 0F 00    0753*      dl 0x000F50 ; 4C, 106.875, +0.956940
0B11B2 31 0F 00    0754*      dl 0x000F31 ; 4D, 108.281, +0.949528
0B11B5 11 0F 00    0755*      dl 0x000F11 ; 4E, 109.688, +0.941544
0B11B8 EE 0E 00    0756*      dl 0x000EEE ; 4F, 111.094, +0.932993
0B11BB C8 0E 00    0757*      dl 0x000EC8 ; 50, 112.500, +0.923880
0B11BE A1 0E 00    0758*      dl 0x000EA1 ; 51, 113.906, +0.914210
0B11C1 77 0E 00    0759*      dl 0x000E77 ; 52, 115.312, +0.903989
0B11C4 4B 0E 00    0760*      dl 0x000E4B ; 53, 116.719, +0.893224
0B11C7 1C 0E 00    0761*      dl 0x000E1C ; 54, 118.125, +0.881921
0B11CA EC 0D 00    0762*      dl 0x000DEC ; 55, 119.531, +0.870087
0B11CD B9 0D 00    0763*      dl 0x000DB9 ; 56, 120.938, +0.857729
0B11D0 85 0D 00    0764*      dl 0x000D85 ; 57, 122.344, +0.844854
0B11D3 4E 0D 00    0765*      dl 0x000D4E ; 58, 123.750, +0.831470
0B11D6 15 0D 00    0766*      dl 0x000D15 ; 59, 125.156, +0.817585
0B11D9 DA 0C 00    0767*      dl 0x000CDA ; 5A, 126.562, +0.803208
0B11DC 9D 0C 00    0768*      dl 0x000C9D ; 5B, 127.969, +0.788346
0B11DF 5E 0C 00    0769*      dl 0x000C5E ; 5C, 129.375, +0.773010
0B11E2 1E 0C 00    0770*      dl 0x000C1E ; 5D, 130.781, +0.757209
0B11E5 DB 0B 00    0771*      dl 0x000BDB ; 5E, 132.188, +0.740951
0B11E8 97 0B 00    0772*      dl 0x000B97 ; 5F, 133.594, +0.724247
0B11EB 50 0B 00    0773*      dl 0x000B50 ; 60, 135.000, +0.707107
0B11EE 08 0B 00    0774*      dl 0x000B08 ; 61, 136.406, +0.689541
0B11F1 BF 0A 00    0775*      dl 0x000ABF ; 62, 137.812, +0.671559
0B11F4 73 0A 00    0776*      dl 0x000A73 ; 63, 139.219, +0.653173
0B11F7 26 0A 00    0777*      dl 0x000A26 ; 64, 140.625, +0.634393
0B11FA D8 09 00    0778*      dl 0x0009D8 ; 65, 142.031, +0.615232
0B11FD 88 09 00    0779*      dl 0x000988 ; 66, 143.438, +0.595699
0B1200 37 09 00    0780*      dl 0x000937 ; 67, 144.844, +0.575808
0B1203 E4 08 00    0781*      dl 0x0008E4 ; 68, 146.250, +0.555570
0B1206 8F 08 00    0782*      dl 0x00088F ; 69, 147.656, +0.534998
0B1209 3A 08 00    0783*      dl 0x00083A ; 6A, 149.062, +0.514103
0B120C E3 07 00    0784*      dl 0x0007E3 ; 6B, 150.469, +0.492898
0B120F 8B 07 00    0785*      dl 0x00078B ; 6C, 151.875, +0.471397
0B1212 32 07 00    0786*      dl 0x000732 ; 6D, 153.281, +0.449611
0B1215 D7 06 00    0787*      dl 0x0006D7 ; 6E, 154.688, +0.427555
0B1218 7C 06 00    0788*      dl 0x00067C ; 6F, 156.094, +0.405241
0B121B 1F 06 00    0789*      dl 0x00061F ; 70, 157.500, +0.382683
0B121E C2 05 00    0790*      dl 0x0005C2 ; 71, 158.906, +0.359895
0B1221 64 05 00    0791*      dl 0x000564 ; 72, 160.312, +0.336890
0B1224 05 05 00    0792*      dl 0x000505 ; 73, 161.719, +0.313682
0B1227 A5 04 00    0793*      dl 0x0004A5 ; 74, 163.125, +0.290285
0B122A 44 04 00    0794*      dl 0x000444 ; 75, 164.531, +0.266713
0B122D E3 03 00    0795*      dl 0x0003E3 ; 76, 165.938, +0.242980
0B1230 81 03 00    0796*      dl 0x000381 ; 77, 167.344, +0.219101
0B1233 1F 03 00    0797*      dl 0x00031F ; 78, 168.750, +0.195090
0B1236 BC 02 00    0798*      dl 0x0002BC ; 79, 170.156, +0.170962
0B1239 59 02 00    0799*      dl 0x000259 ; 7A, 171.562, +0.146730
0B123C F5 01 00    0800*      dl 0x0001F5 ; 7B, 172.969, +0.122411
0B123F 91 01 00    0801*      dl 0x000191 ; 7C, 174.375, +0.098017
0B1242 2D 01 00    0802*      dl 0x00012D ; 7D, 175.781, +0.073565
0B1245 C9 00 00    0803*      dl 0x0000C9 ; 7E, 177.188, +0.049068
0B1248 65 00 00    0804*      dl 0x000065 ; 7F, 178.594, +0.024541
0B124B 00 00 00    0805*      dl 0x000000 ; 80, 180.000, +0.000000
0B124E 9B FF FF    0806*      dl 0xFFFF9B ; 81, 181.406, -0.024541
0B1251 37 FF FF    0807*      dl 0xFFFF37 ; 82, 182.812, -0.049068
0B1254 D3 FE FF    0808*      dl 0xFFFED3 ; 83, 184.219, -0.073565
0B1257 6F FE FF    0809*      dl 0xFFFE6F ; 84, 185.625, -0.098017
0B125A 0B FE FF    0810*      dl 0xFFFE0B ; 85, 187.031, -0.122411
0B125D A7 FD FF    0811*      dl 0xFFFDA7 ; 86, 188.438, -0.146730
0B1260 44 FD FF    0812*      dl 0xFFFD44 ; 87, 189.844, -0.170962
0B1263 E1 FC FF    0813*      dl 0xFFFCE1 ; 88, 191.250, -0.195090
0B1266 7F FC FF    0814*      dl 0xFFFC7F ; 89, 192.656, -0.219101
0B1269 1D FC FF    0815*      dl 0xFFFC1D ; 8A, 194.062, -0.242980
0B126C BC FB FF    0816*      dl 0xFFFBBC ; 8B, 195.469, -0.266713
0B126F 5B FB FF    0817*      dl 0xFFFB5B ; 8C, 196.875, -0.290285
0B1272 FB FA FF    0818*      dl 0xFFFAFB ; 8D, 198.281, -0.313682
0B1275 9C FA FF    0819*      dl 0xFFFA9C ; 8E, 199.688, -0.336890
0B1278 3E FA FF    0820*      dl 0xFFFA3E ; 8F, 201.094, -0.359895
0B127B E1 F9 FF    0821*      dl 0xFFF9E1 ; 90, 202.500, -0.382683
0B127E 84 F9 FF    0822*      dl 0xFFF984 ; 91, 203.906, -0.405241
0B1281 29 F9 FF    0823*      dl 0xFFF929 ; 92, 205.312, -0.427555
0B1284 CE F8 FF    0824*      dl 0xFFF8CE ; 93, 206.719, -0.449611
0B1287 75 F8 FF    0825*      dl 0xFFF875 ; 94, 208.125, -0.471397
0B128A 1D F8 FF    0826*      dl 0xFFF81D ; 95, 209.531, -0.492898
0B128D C6 F7 FF    0827*      dl 0xFFF7C6 ; 96, 210.938, -0.514103
0B1290 71 F7 FF    0828*      dl 0xFFF771 ; 97, 212.344, -0.534998
0B1293 1C F7 FF    0829*      dl 0xFFF71C ; 98, 213.750, -0.555570
0B1296 C9 F6 FF    0830*      dl 0xFFF6C9 ; 99, 215.156, -0.575808
0B1299 78 F6 FF    0831*      dl 0xFFF678 ; 9A, 216.562, -0.595699
0B129C 28 F6 FF    0832*      dl 0xFFF628 ; 9B, 217.969, -0.615232
0B129F DA F5 FF    0833*      dl 0xFFF5DA ; 9C, 219.375, -0.634393
0B12A2 8D F5 FF    0834*      dl 0xFFF58D ; 9D, 220.781, -0.653173
0B12A5 41 F5 FF    0835*      dl 0xFFF541 ; 9E, 222.188, -0.671559
0B12A8 F8 F4 FF    0836*      dl 0xFFF4F8 ; 9F, 223.594, -0.689541
0B12AB B0 F4 FF    0837*      dl 0xFFF4B0 ; A0, 225.000, -0.707107
0B12AE 69 F4 FF    0838*      dl 0xFFF469 ; A1, 226.406, -0.724247
0B12B1 25 F4 FF    0839*      dl 0xFFF425 ; A2, 227.812, -0.740951
0B12B4 E2 F3 FF    0840*      dl 0xFFF3E2 ; A3, 229.219, -0.757209
0B12B7 A2 F3 FF    0841*      dl 0xFFF3A2 ; A4, 230.625, -0.773010
0B12BA 63 F3 FF    0842*      dl 0xFFF363 ; A5, 232.031, -0.788346
0B12BD 26 F3 FF    0843*      dl 0xFFF326 ; A6, 233.438, -0.803208
0B12C0 EB F2 FF    0844*      dl 0xFFF2EB ; A7, 234.844, -0.817585
0B12C3 B2 F2 FF    0845*      dl 0xFFF2B2 ; A8, 236.250, -0.831470
0B12C6 7B F2 FF    0846*      dl 0xFFF27B ; A9, 237.656, -0.844854
0B12C9 47 F2 FF    0847*      dl 0xFFF247 ; AA, 239.062, -0.857729
0B12CC 14 F2 FF    0848*      dl 0xFFF214 ; AB, 240.469, -0.870087
0B12CF E4 F1 FF    0849*      dl 0xFFF1E4 ; AC, 241.875, -0.881921
0B12D2 B5 F1 FF    0850*      dl 0xFFF1B5 ; AD, 243.281, -0.893224
0B12D5 89 F1 FF    0851*      dl 0xFFF189 ; AE, 244.688, -0.903989
0B12D8 5F F1 FF    0852*      dl 0xFFF15F ; AF, 246.094, -0.914210
0B12DB 38 F1 FF    0853*      dl 0xFFF138 ; B0, 247.500, -0.923880
0B12DE 12 F1 FF    0854*      dl 0xFFF112 ; B1, 248.906, -0.932993
0B12E1 EF F0 FF    0855*      dl 0xFFF0EF ; B2, 250.312, -0.941544
0B12E4 CF F0 FF    0856*      dl 0xFFF0CF ; B3, 251.719, -0.949528
0B12E7 B0 F0 FF    0857*      dl 0xFFF0B0 ; B4, 253.125, -0.956940
0B12EA 94 F0 FF    0858*      dl 0xFFF094 ; B5, 254.531, -0.963776
0B12ED 7B F0 FF    0859*      dl 0xFFF07B ; B6, 255.938, -0.970031
0B12F0 64 F0 FF    0860*      dl 0xFFF064 ; B7, 257.344, -0.975702
0B12F3 4F F0 FF    0861*      dl 0xFFF04F ; B8, 258.750, -0.980785
0B12F6 3C F0 FF    0862*      dl 0xFFF03C ; B9, 260.156, -0.985278
0B12F9 2C F0 FF    0863*      dl 0xFFF02C ; BA, 261.562, -0.989177
0B12FC 1F F0 FF    0864*      dl 0xFFF01F ; BB, 262.969, -0.992480
0B12FF 14 F0 FF    0865*      dl 0xFFF014 ; BC, 264.375, -0.995185
0B1302 0B F0 FF    0866*      dl 0xFFF00B ; BD, 265.781, -0.997290
0B1305 05 F0 FF    0867*      dl 0xFFF005 ; BE, 267.188, -0.998795
0B1308 01 F0 FF    0868*      dl 0xFFF001 ; BF, 268.594, -0.999699
0B130B 00 F0 FF    0869*      dl 0xFFF000 ; C0, 270.000, -1.000000
0B130E 01 F0 FF    0870*      dl 0xFFF001 ; C1, 271.406, -0.999699
0B1311 05 F0 FF    0871*      dl 0xFFF005 ; C2, 272.812, -0.998795
0B1314 0B F0 FF    0872*      dl 0xFFF00B ; C3, 274.219, -0.997290
0B1317 14 F0 FF    0873*      dl 0xFFF014 ; C4, 275.625, -0.995185
0B131A 1F F0 FF    0874*      dl 0xFFF01F ; C5, 277.031, -0.992480
0B131D 2C F0 FF    0875*      dl 0xFFF02C ; C6, 278.438, -0.989177
0B1320 3C F0 FF    0876*      dl 0xFFF03C ; C7, 279.844, -0.985278
0B1323 4F F0 FF    0877*      dl 0xFFF04F ; C8, 281.250, -0.980785
0B1326 64 F0 FF    0878*      dl 0xFFF064 ; C9, 282.656, -0.975702
0B1329 7B F0 FF    0879*      dl 0xFFF07B ; CA, 284.062, -0.970031
0B132C 94 F0 FF    0880*      dl 0xFFF094 ; CB, 285.469, -0.963776
0B132F B0 F0 FF    0881*      dl 0xFFF0B0 ; CC, 286.875, -0.956940
0B1332 CF F0 FF    0882*      dl 0xFFF0CF ; CD, 288.281, -0.949528
0B1335 EF F0 FF    0883*      dl 0xFFF0EF ; CE, 289.688, -0.941544
0B1338 12 F1 FF    0884*      dl 0xFFF112 ; CF, 291.094, -0.932993
0B133B 38 F1 FF    0885*      dl 0xFFF138 ; D0, 292.500, -0.923880
0B133E 5F F1 FF    0886*      dl 0xFFF15F ; D1, 293.906, -0.914210
0B1341 89 F1 FF    0887*      dl 0xFFF189 ; D2, 295.312, -0.903989
0B1344 B5 F1 FF    0888*      dl 0xFFF1B5 ; D3, 296.719, -0.893224
0B1347 E4 F1 FF    0889*      dl 0xFFF1E4 ; D4, 298.125, -0.881921
0B134A 14 F2 FF    0890*      dl 0xFFF214 ; D5, 299.531, -0.870087
0B134D 47 F2 FF    0891*      dl 0xFFF247 ; D6, 300.938, -0.857729
0B1350 7B F2 FF    0892*      dl 0xFFF27B ; D7, 302.344, -0.844854
0B1353 B2 F2 FF    0893*      dl 0xFFF2B2 ; D8, 303.750, -0.831470
0B1356 EB F2 FF    0894*      dl 0xFFF2EB ; D9, 305.156, -0.817585
0B1359 26 F3 FF    0895*      dl 0xFFF326 ; DA, 306.562, -0.803208
0B135C 63 F3 FF    0896*      dl 0xFFF363 ; DB, 307.969, -0.788346
0B135F A2 F3 FF    0897*      dl 0xFFF3A2 ; DC, 309.375, -0.773010
0B1362 E2 F3 FF    0898*      dl 0xFFF3E2 ; DD, 310.781, -0.757209
0B1365 25 F4 FF    0899*      dl 0xFFF425 ; DE, 312.188, -0.740951
0B1368 69 F4 FF    0900*      dl 0xFFF469 ; DF, 313.594, -0.724247
0B136B B0 F4 FF    0901*      dl 0xFFF4B0 ; E0, 315.000, -0.707107
0B136E F8 F4 FF    0902*      dl 0xFFF4F8 ; E1, 316.406, -0.689541
0B1371 41 F5 FF    0903*      dl 0xFFF541 ; E2, 317.812, -0.671559
0B1374 8D F5 FF    0904*      dl 0xFFF58D ; E3, 319.219, -0.653173
0B1377 DA F5 FF    0905*      dl 0xFFF5DA ; E4, 320.625, -0.634393
0B137A 28 F6 FF    0906*      dl 0xFFF628 ; E5, 322.031, -0.615232
0B137D 78 F6 FF    0907*      dl 0xFFF678 ; E6, 323.438, -0.595699
0B1380 C9 F6 FF    0908*      dl 0xFFF6C9 ; E7, 324.844, -0.575808
0B1383 1C F7 FF    0909*      dl 0xFFF71C ; E8, 326.250, -0.555570
0B1386 71 F7 FF    0910*      dl 0xFFF771 ; E9, 327.656, -0.534998
0B1389 C6 F7 FF    0911*      dl 0xFFF7C6 ; EA, 329.062, -0.514103
0B138C 1D F8 FF    0912*      dl 0xFFF81D ; EB, 330.469, -0.492898
0B138F 75 F8 FF    0913*      dl 0xFFF875 ; EC, 331.875, -0.471397
0B1392 CE F8 FF    0914*      dl 0xFFF8CE ; ED, 333.281, -0.449611
0B1395 29 F9 FF    0915*      dl 0xFFF929 ; EE, 334.688, -0.427555
0B1398 84 F9 FF    0916*      dl 0xFFF984 ; EF, 336.094, -0.405241
0B139B E1 F9 FF    0917*      dl 0xFFF9E1 ; F0, 337.500, -0.382683
0B139E 3E FA FF    0918*      dl 0xFFFA3E ; F1, 338.906, -0.359895
0B13A1 9C FA FF    0919*      dl 0xFFFA9C ; F2, 340.312, -0.336890
0B13A4 FB FA FF    0920*      dl 0xFFFAFB ; F3, 341.719, -0.313682
0B13A7 5B FB FF    0921*      dl 0xFFFB5B ; F4, 343.125, -0.290285
0B13AA BC FB FF    0922*      dl 0xFFFBBC ; F5, 344.531, -0.266713
0B13AD 1D FC FF    0923*      dl 0xFFFC1D ; F6, 345.938, -0.242980
0B13B0 7F FC FF    0924*      dl 0xFFFC7F ; F7, 347.344, -0.219101
0B13B3 E1 FC FF    0925*      dl 0xFFFCE1 ; F8, 348.750, -0.195090
0B13B6 44 FD FF    0926*      dl 0xFFFD44 ; F9, 350.156, -0.170962
0B13B9 A7 FD FF    0927*      dl 0xFFFDA7 ; FA, 351.562, -0.146730
0B13BC 0B FE FF    0928*      dl 0xFFFE0B ; FB, 352.969, -0.122411
0B13BF 6F FE FF    0929*      dl 0xFFFE6F ; FC, 354.375, -0.098017
0B13C2 D3 FE FF    0930*      dl 0xFFFED3 ; FD, 355.781, -0.073565
0B13C5 37 FF FF    0931*      dl 0xFFFF37 ; FE, 357.188, -0.049068
0B13C8 9B FF FF    0932*      dl 0xFFFF9B ; FF, 358.594, -0.024541
0B13CB             0933*  
0B13CB             0934*  atan_lut_168:
0B13CB 00 00 00    0935*  	dl 0x000000 ; 000000, 0.000
0B13CE 28 00 00    0936*  	dl 0x000028 ; 000001, 0.224
0B13D1 51 00 00    0937*  	dl 0x000051 ; 000002, 0.448
0B13D4 7A 00 00    0938*  	dl 0x00007A ; 000003, 0.671
0B13D7 A2 00 00    0939*  	dl 0x0000A2 ; 000004, 0.895
0B13DA CB 00 00    0940*  	dl 0x0000CB ; 000005, 1.119
0B13DD F4 00 00    0941*  	dl 0x0000F4 ; 000006, 1.343
0B13E0 1D 01 00    0942*  	dl 0x00011D ; 000007, 1.566
0B13E3 45 01 00    0943*  	dl 0x000145 ; 000008, 1.790
0B13E6 6E 01 00    0944*  	dl 0x00016E ; 000009, 2.013
0B13E9 97 01 00    0945*  	dl 0x000197 ; 00000A, 2.237
0B13EC BF 01 00    0946*  	dl 0x0001BF ; 00000B, 2.460
0B13EF E8 01 00    0947*  	dl 0x0001E8 ; 00000C, 2.684
0B13F2 11 02 00    0948*  	dl 0x000211 ; 00000D, 2.907
0B13F5 39 02 00    0949*  	dl 0x000239 ; 00000E, 3.130
0B13F8 62 02 00    0950*  	dl 0x000262 ; 00000F, 3.353
0B13FB 8B 02 00    0951*  	dl 0x00028B ; 000010, 3.576
0B13FE B3 02 00    0952*  	dl 0x0002B3 ; 000011, 3.799
0B1401 DC 02 00    0953*  	dl 0x0002DC ; 000012, 4.022
0B1404 04 03 00    0954*  	dl 0x000304 ; 000013, 4.245
0B1407 2D 03 00    0955*  	dl 0x00032D ; 000014, 4.467
0B140A 55 03 00    0956*  	dl 0x000355 ; 000015, 4.690
0B140D 7E 03 00    0957*  	dl 0x00037E ; 000016, 4.912
0B1410 A6 03 00    0958*  	dl 0x0003A6 ; 000017, 5.134
0B1413 CE 03 00    0959*  	dl 0x0003CE ; 000018, 5.356
0B1416 F7 03 00    0960*  	dl 0x0003F7 ; 000019, 5.578
0B1419 1F 04 00    0961*  	dl 0x00041F ; 00001A, 5.799
0B141C 48 04 00    0962*  	dl 0x000448 ; 00001B, 6.021
0B141F 70 04 00    0963*  	dl 0x000470 ; 00001C, 6.242
0B1422 98 04 00    0964*  	dl 0x000498 ; 00001D, 6.463
0B1425 C0 04 00    0965*  	dl 0x0004C0 ; 00001E, 6.684
0B1428 E8 04 00    0966*  	dl 0x0004E8 ; 00001F, 6.905
0B142B 11 05 00    0967*  	dl 0x000511 ; 000020, 7.125
0B142E 39 05 00    0968*  	dl 0x000539 ; 000021, 7.345
0B1431 61 05 00    0969*  	dl 0x000561 ; 000022, 7.565
0B1434 89 05 00    0970*  	dl 0x000589 ; 000023, 7.785
0B1437 B1 05 00    0971*  	dl 0x0005B1 ; 000024, 8.005
0B143A D9 05 00    0972*  	dl 0x0005D9 ; 000025, 8.224
0B143D 01 06 00    0973*  	dl 0x000601 ; 000026, 8.443
0B1440 28 06 00    0974*  	dl 0x000628 ; 000027, 8.662
0B1443 50 06 00    0975*  	dl 0x000650 ; 000028, 8.881
0B1446 78 06 00    0976*  	dl 0x000678 ; 000029, 9.099
0B1449 A0 06 00    0977*  	dl 0x0006A0 ; 00002A, 9.317
0B144C C7 06 00    0978*  	dl 0x0006C7 ; 00002B, 9.535
0B144F EF 06 00    0979*  	dl 0x0006EF ; 00002C, 9.752
0B1452 16 07 00    0980*  	dl 0x000716 ; 00002D, 9.970
0B1455 3E 07 00    0981*  	dl 0x00073E ; 00002E, 10.187
0B1458 65 07 00    0982*  	dl 0x000765 ; 00002F, 10.403
0B145B 8D 07 00    0983*  	dl 0x00078D ; 000030, 10.620
0B145E B4 07 00    0984*  	dl 0x0007B4 ; 000031, 10.836
0B1461 DB 07 00    0985*  	dl 0x0007DB ; 000032, 11.051
0B1464 03 08 00    0986*  	dl 0x000803 ; 000033, 11.267
0B1467 2A 08 00    0987*  	dl 0x00082A ; 000034, 11.482
0B146A 51 08 00    0988*  	dl 0x000851 ; 000035, 11.697
0B146D 78 08 00    0989*  	dl 0x000878 ; 000036, 11.911
0B1470 9F 08 00    0990*  	dl 0x00089F ; 000037, 12.125
0B1473 C6 08 00    0991*  	dl 0x0008C6 ; 000038, 12.339
0B1476 ED 08 00    0992*  	dl 0x0008ED ; 000039, 12.553
0B1479 13 09 00    0993*  	dl 0x000913 ; 00003A, 12.766
0B147C 3A 09 00    0994*  	dl 0x00093A ; 00003B, 12.978
0B147F 61 09 00    0995*  	dl 0x000961 ; 00003C, 13.191
0B1482 87 09 00    0996*  	dl 0x000987 ; 00003D, 13.403
0B1485 AE 09 00    0997*  	dl 0x0009AE ; 00003E, 13.614
0B1488 D4 09 00    0998*  	dl 0x0009D4 ; 00003F, 13.825
0B148B FB 09 00    0999*  	dl 0x0009FB ; 000040, 14.036
0B148E 21 0A 00    1000*  	dl 0x000A21 ; 000041, 14.247
0B1491 47 0A 00    1001*  	dl 0x000A47 ; 000042, 14.457
0B1494 6D 0A 00    1002*  	dl 0x000A6D ; 000043, 14.666
0B1497 94 0A 00    1003*  	dl 0x000A94 ; 000044, 14.876
0B149A BA 0A 00    1004*  	dl 0x000ABA ; 000045, 15.085
0B149D E0 0A 00    1005*  	dl 0x000AE0 ; 000046, 15.293
0B14A0 05 0B 00    1006*  	dl 0x000B05 ; 000047, 15.501
0B14A3 2B 0B 00    1007*  	dl 0x000B2B ; 000048, 15.709
0B14A6 51 0B 00    1008*  	dl 0x000B51 ; 000049, 15.916
0B14A9 77 0B 00    1009*  	dl 0x000B77 ; 00004A, 16.123
0B14AC 9C 0B 00    1010*  	dl 0x000B9C ; 00004B, 16.329
0B14AF C2 0B 00    1011*  	dl 0x000BC2 ; 00004C, 16.535
0B14B2 E7 0B 00    1012*  	dl 0x000BE7 ; 00004D, 16.740
0B14B5 0C 0C 00    1013*  	dl 0x000C0C ; 00004E, 16.945
0B14B8 32 0C 00    1014*  	dl 0x000C32 ; 00004F, 17.150
0B14BB 57 0C 00    1015*  	dl 0x000C57 ; 000050, 17.354
0B14BE 7C 0C 00    1016*  	dl 0x000C7C ; 000051, 17.558
0B14C1 A1 0C 00    1017*  	dl 0x000CA1 ; 000052, 17.761
0B14C4 C6 0C 00    1018*  	dl 0x000CC6 ; 000053, 17.964
0B14C7 EB 0C 00    1019*  	dl 0x000CEB ; 000054, 18.166
0B14CA 0F 0D 00    1020*  	dl 0x000D0F ; 000055, 18.368
0B14CD 34 0D 00    1021*  	dl 0x000D34 ; 000056, 18.569
0B14D0 58 0D 00    1022*  	dl 0x000D58 ; 000057, 18.770
0B14D3 7D 0D 00    1023*  	dl 0x000D7D ; 000058, 18.970
0B14D6 A1 0D 00    1024*  	dl 0x000DA1 ; 000059, 19.170
0B14D9 C6 0D 00    1025*  	dl 0x000DC6 ; 00005A, 19.370
0B14DC EA 0D 00    1026*  	dl 0x000DEA ; 00005B, 19.569
0B14DF 0E 0E 00    1027*  	dl 0x000E0E ; 00005C, 19.767
0B14E2 32 0E 00    1028*  	dl 0x000E32 ; 00005D, 19.965
0B14E5 56 0E 00    1029*  	dl 0x000E56 ; 00005E, 20.163
0B14E8 7A 0E 00    1030*  	dl 0x000E7A ; 00005F, 20.360
0B14EB 9E 0E 00    1031*  	dl 0x000E9E ; 000060, 20.556
0B14EE C1 0E 00    1032*  	dl 0x000EC1 ; 000061, 20.752
0B14F1 E5 0E 00    1033*  	dl 0x000EE5 ; 000062, 20.947
0B14F4 08 0F 00    1034*  	dl 0x000F08 ; 000063, 21.142
0B14F7 2C 0F 00    1035*  	dl 0x000F2C ; 000064, 21.337
0B14FA 4F 0F 00    1036*  	dl 0x000F4F ; 000065, 21.531
0B14FD 72 0F 00    1037*  	dl 0x000F72 ; 000066, 21.724
0B1500 95 0F 00    1038*  	dl 0x000F95 ; 000067, 21.917
0B1503 B8 0F 00    1039*  	dl 0x000FB8 ; 000068, 22.109
0B1506 DB 0F 00    1040*  	dl 0x000FDB ; 000069, 22.301
0B1509 FE 0F 00    1041*  	dl 0x000FFE ; 00006A, 22.493
0B150C 21 10 00    1042*  	dl 0x001021 ; 00006B, 22.683
0B150F 44 10 00    1043*  	dl 0x001044 ; 00006C, 22.874
0B1512 66 10 00    1044*  	dl 0x001066 ; 00006D, 23.063
0B1515 89 10 00    1045*  	dl 0x001089 ; 00006E, 23.253
0B1518 AB 10 00    1046*  	dl 0x0010AB ; 00006F, 23.441
0B151B CD 10 00    1047*  	dl 0x0010CD ; 000070, 23.629
0B151E EF 10 00    1048*  	dl 0x0010EF ; 000071, 23.817
0B1521 11 11 00    1049*  	dl 0x001111 ; 000072, 24.004
0B1524 33 11 00    1050*  	dl 0x001133 ; 000073, 24.191
0B1527 55 11 00    1051*  	dl 0x001155 ; 000074, 24.376
0B152A 77 11 00    1052*  	dl 0x001177 ; 000075, 24.562
0B152D 99 11 00    1053*  	dl 0x001199 ; 000076, 24.747
0B1530 BA 11 00    1054*  	dl 0x0011BA ; 000077, 24.931
0B1533 DC 11 00    1055*  	dl 0x0011DC ; 000078, 25.115
0B1536 FD 11 00    1056*  	dl 0x0011FD ; 000079, 25.298
0B1539 1E 12 00    1057*  	dl 0x00121E ; 00007A, 25.481
0B153C 3F 12 00    1058*  	dl 0x00123F ; 00007B, 25.663
0B153F 60 12 00    1059*  	dl 0x001260 ; 00007C, 25.844
0B1542 81 12 00    1060*  	dl 0x001281 ; 00007D, 26.025
0B1545 A2 12 00    1061*  	dl 0x0012A2 ; 00007E, 26.206
0B1548 C3 12 00    1062*  	dl 0x0012C3 ; 00007F, 26.386
0B154B E4 12 00    1063*  	dl 0x0012E4 ; 000080, 26.565
0B154E 04 13 00    1064*  	dl 0x001304 ; 000081, 26.744
0B1551 25 13 00    1065*  	dl 0x001325 ; 000082, 26.922
0B1554 45 13 00    1066*  	dl 0x001345 ; 000083, 27.100
0B1557 65 13 00    1067*  	dl 0x001365 ; 000084, 27.277
0B155A 85 13 00    1068*  	dl 0x001385 ; 000085, 27.453
0B155D A5 13 00    1069*  	dl 0x0013A5 ; 000086, 27.629
0B1560 C5 13 00    1070*  	dl 0x0013C5 ; 000087, 27.805
0B1563 E5 13 00    1071*  	dl 0x0013E5 ; 000088, 27.979
0B1566 05 14 00    1072*  	dl 0x001405 ; 000089, 28.154
0B1569 24 14 00    1073*  	dl 0x001424 ; 00008A, 28.327
0B156C 44 14 00    1074*  	dl 0x001444 ; 00008B, 28.501
0B156F 63 14 00    1075*  	dl 0x001463 ; 00008C, 28.673
0B1572 83 14 00    1076*  	dl 0x001483 ; 00008D, 28.845
0B1575 A2 14 00    1077*  	dl 0x0014A2 ; 00008E, 29.017
0B1578 C1 14 00    1078*  	dl 0x0014C1 ; 00008F, 29.187
0B157B E0 14 00    1079*  	dl 0x0014E0 ; 000090, 29.358
0B157E FF 14 00    1080*  	dl 0x0014FF ; 000091, 29.527
0B1581 1E 15 00    1081*  	dl 0x00151E ; 000092, 29.697
0B1584 3C 15 00    1082*  	dl 0x00153C ; 000093, 29.865
0B1587 5B 15 00    1083*  	dl 0x00155B ; 000094, 30.033
0B158A 79 15 00    1084*  	dl 0x001579 ; 000095, 30.201
0B158D 98 15 00    1085*  	dl 0x001598 ; 000096, 30.368
0B1590 B6 15 00    1086*  	dl 0x0015B6 ; 000097, 30.534
0B1593 D4 15 00    1087*  	dl 0x0015D4 ; 000098, 30.700
0B1596 F2 15 00    1088*  	dl 0x0015F2 ; 000099, 30.865
0B1599 10 16 00    1089*  	dl 0x001610 ; 00009A, 31.030
0B159C 2E 16 00    1090*  	dl 0x00162E ; 00009B, 31.194
0B159F 4C 16 00    1091*  	dl 0x00164C ; 00009C, 31.357
0B15A2 6A 16 00    1092*  	dl 0x00166A ; 00009D, 31.520
0B15A5 87 16 00    1093*  	dl 0x001687 ; 00009E, 31.682
0B15A8 A5 16 00    1094*  	dl 0x0016A5 ; 00009F, 31.844
0B15AB C2 16 00    1095*  	dl 0x0016C2 ; 0000A0, 32.005
0B15AE DF 16 00    1096*  	dl 0x0016DF ; 0000A1, 32.166
0B15B1 FC 16 00    1097*  	dl 0x0016FC ; 0000A2, 32.326
0B15B4 19 17 00    1098*  	dl 0x001719 ; 0000A3, 32.486
0B15B7 36 17 00    1099*  	dl 0x001736 ; 0000A4, 32.645
0B15BA 53 17 00    1100*  	dl 0x001753 ; 0000A5, 32.803
0B15BD 70 17 00    1101*  	dl 0x001770 ; 0000A6, 32.961
0B15C0 8C 17 00    1102*  	dl 0x00178C ; 0000A7, 33.118
0B15C3 A9 17 00    1103*  	dl 0x0017A9 ; 0000A8, 33.275
0B15C6 C5 17 00    1104*  	dl 0x0017C5 ; 0000A9, 33.431
0B15C9 E2 17 00    1105*  	dl 0x0017E2 ; 0000AA, 33.587
0B15CC FE 17 00    1106*  	dl 0x0017FE ; 0000AB, 33.742
0B15CF 1A 18 00    1107*  	dl 0x00181A ; 0000AC, 33.896
0B15D2 36 18 00    1108*  	dl 0x001836 ; 0000AD, 34.050
0B15D5 52 18 00    1109*  	dl 0x001852 ; 0000AE, 34.203
0B15D8 6E 18 00    1110*  	dl 0x00186E ; 0000AF, 34.356
0B15DB 8A 18 00    1111*  	dl 0x00188A ; 0000B0, 34.509
0B15DE A5 18 00    1112*  	dl 0x0018A5 ; 0000B1, 34.660
0B15E1 C1 18 00    1113*  	dl 0x0018C1 ; 0000B2, 34.811
0B15E4 DC 18 00    1114*  	dl 0x0018DC ; 0000B3, 34.962
0B15E7 F7 18 00    1115*  	dl 0x0018F7 ; 0000B4, 35.112
0B15EA 13 19 00    1116*  	dl 0x001913 ; 0000B5, 35.262
0B15ED 2E 19 00    1117*  	dl 0x00192E ; 0000B6, 35.410
0B15F0 49 19 00    1118*  	dl 0x001949 ; 0000B7, 35.559
0B15F3 64 19 00    1119*  	dl 0x001964 ; 0000B8, 35.707
0B15F6 7F 19 00    1120*  	dl 0x00197F ; 0000B9, 35.854
0B15F9 99 19 00    1121*  	dl 0x001999 ; 0000BA, 36.001
0B15FC B4 19 00    1122*  	dl 0x0019B4 ; 0000BB, 36.147
0B15FF CE 19 00    1123*  	dl 0x0019CE ; 0000BC, 36.293
0B1602 E9 19 00    1124*  	dl 0x0019E9 ; 0000BD, 36.438
0B1605 03 1A 00    1125*  	dl 0x001A03 ; 0000BE, 36.582
0B1608 1D 1A 00    1126*  	dl 0x001A1D ; 0000BF, 36.726
0B160B 37 1A 00    1127*  	dl 0x001A37 ; 0000C0, 36.870
0B160E 51 1A 00    1128*  	dl 0x001A51 ; 0000C1, 37.013
0B1611 6B 1A 00    1129*  	dl 0x001A6B ; 0000C2, 37.155
0B1614 85 1A 00    1130*  	dl 0x001A85 ; 0000C3, 37.297
0B1617 9F 1A 00    1131*  	dl 0x001A9F ; 0000C4, 37.439
0B161A B9 1A 00    1132*  	dl 0x001AB9 ; 0000C5, 37.579
0B161D D2 1A 00    1133*  	dl 0x001AD2 ; 0000C6, 37.720
0B1620 EC 1A 00    1134*  	dl 0x001AEC ; 0000C7, 37.859
0B1623 05 1B 00    1135*  	dl 0x001B05 ; 0000C8, 37.999
0B1626 1E 1B 00    1136*  	dl 0x001B1E ; 0000C9, 38.137
0B1629 37 1B 00    1137*  	dl 0x001B37 ; 0000CA, 38.276
0B162C 50 1B 00    1138*  	dl 0x001B50 ; 0000CB, 38.413
0B162F 69 1B 00    1139*  	dl 0x001B69 ; 0000CC, 38.550
0B1632 82 1B 00    1140*  	dl 0x001B82 ; 0000CD, 38.687
0B1635 9B 1B 00    1141*  	dl 0x001B9B ; 0000CE, 38.823
0B1638 B4 1B 00    1142*  	dl 0x001BB4 ; 0000CF, 38.959
0B163B CC 1B 00    1143*  	dl 0x001BCC ; 0000D0, 39.094
0B163E E5 1B 00    1144*  	dl 0x001BE5 ; 0000D1, 39.228
0B1641 FD 1B 00    1145*  	dl 0x001BFD ; 0000D2, 39.362
0B1644 16 1C 00    1146*  	dl 0x001C16 ; 0000D3, 39.496
0B1647 2E 1C 00    1147*  	dl 0x001C2E ; 0000D4, 39.629
0B164A 46 1C 00    1148*  	dl 0x001C46 ; 0000D5, 39.762
0B164D 5E 1C 00    1149*  	dl 0x001C5E ; 0000D6, 39.894
0B1650 76 1C 00    1150*  	dl 0x001C76 ; 0000D7, 40.025
0B1653 8E 1C 00    1151*  	dl 0x001C8E ; 0000D8, 40.156
0B1656 A5 1C 00    1152*  	dl 0x001CA5 ; 0000D9, 40.286
0B1659 BD 1C 00    1153*  	dl 0x001CBD ; 0000DA, 40.416
0B165C D5 1C 00    1154*  	dl 0x001CD5 ; 0000DB, 40.546
0B165F EC 1C 00    1155*  	dl 0x001CEC ; 0000DC, 40.675
0B1662 04 1D 00    1156*  	dl 0x001D04 ; 0000DD, 40.803
0B1665 1B 1D 00    1157*  	dl 0x001D1B ; 0000DE, 40.931
0B1668 32 1D 00    1158*  	dl 0x001D32 ; 0000DF, 41.059
0B166B 49 1D 00    1159*  	dl 0x001D49 ; 0000E0, 41.186
0B166E 60 1D 00    1160*  	dl 0x001D60 ; 0000E1, 41.312
0B1671 77 1D 00    1161*  	dl 0x001D77 ; 0000E2, 41.438
0B1674 8E 1D 00    1162*  	dl 0x001D8E ; 0000E3, 41.564
0B1677 A5 1D 00    1163*  	dl 0x001DA5 ; 0000E4, 41.689
0B167A BB 1D 00    1164*  	dl 0x001DBB ; 0000E5, 41.814
0B167D D2 1D 00    1165*  	dl 0x001DD2 ; 0000E6, 41.938
0B1680 E9 1D 00    1166*  	dl 0x001DE9 ; 0000E7, 42.061
0B1683 FF 1D 00    1167*  	dl 0x001DFF ; 0000E8, 42.184
0B1686 15 1E 00    1168*  	dl 0x001E15 ; 0000E9, 42.307
0B1689 2C 1E 00    1169*  	dl 0x001E2C ; 0000EA, 42.429
0B168C 42 1E 00    1170*  	dl 0x001E42 ; 0000EB, 42.551
0B168F 58 1E 00    1171*  	dl 0x001E58 ; 0000EC, 42.672
0B1692 6E 1E 00    1172*  	dl 0x001E6E ; 0000ED, 42.793
0B1695 84 1E 00    1173*  	dl 0x001E84 ; 0000EE, 42.913
0B1698 99 1E 00    1174*  	dl 0x001E99 ; 0000EF, 43.033
0B169B AF 1E 00    1175*  	dl 0x001EAF ; 0000F0, 43.152
0B169E C5 1E 00    1176*  	dl 0x001EC5 ; 0000F1, 43.271
0B16A1 DA 1E 00    1177*  	dl 0x001EDA ; 0000F2, 43.390
0B16A4 F0 1E 00    1178*  	dl 0x001EF0 ; 0000F3, 43.508
0B16A7 05 1F 00    1179*  	dl 0x001F05 ; 0000F4, 43.625
0B16AA 1B 1F 00    1180*  	dl 0x001F1B ; 0000F5, 43.742
0B16AD 30 1F 00    1181*  	dl 0x001F30 ; 0000F6, 43.859
0B16B0 45 1F 00    1182*  	dl 0x001F45 ; 0000F7, 43.975
0B16B3 5A 1F 00    1183*  	dl 0x001F5A ; 0000F8, 44.091
0B16B6 6F 1F 00    1184*  	dl 0x001F6F ; 0000F9, 44.206
0B16B9 84 1F 00    1185*  	dl 0x001F84 ; 0000FA, 44.321
0B16BC 99 1F 00    1186*  	dl 0x001F99 ; 0000FB, 44.435
0B16BF AD 1F 00    1187*  	dl 0x001FAD ; 0000FC, 44.549
0B16C2 C2 1F 00    1188*  	dl 0x001FC2 ; 0000FD, 44.662
0B16C5 D7 1F 00    1189*  	dl 0x001FD7 ; 0000FE, 44.775
0B16C8 EB 1F 00    1190*  	dl 0x001FEB ; 0000FF, 44.888
0B16CB 00 20 00    1191*  	dl 0x002000 ; 000100, 45.000 only needed for interpolation
0B16CE             0023       include "files.inc"
0B16CE             0001*  ; load to onboard 8k sram
0B16CE             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
0B16CE             0024       include "timer.inc"
0B16CE             0001*  ; Table 32. Timer Control Registers
0B16CE             0002*  ; this constant is the base address of the timer control registers
0B16CE             0003*  ; each timer takes three bytes:
0B16CE             0004*  ;   0: control register
0B16CE             0005*  ;   1: low byte of timer reset value
0B16CE             0006*  ;   2: high byte of timer reset value
0B16CE             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0B16CE             0008*  ; which correctly force the high and upper bytes of the address bus to zero
0B16CE             0009*  TMR_CTL:     equ 80h
0B16CE             0010*  
0B16CE             0011*  ; Timer Control Register Bit Definitions
0B16CE             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0B16CE             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
0B16CE             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0B16CE             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
0B16CE             0016*                              ; the TMRx_CTL register is read.
0B16CE             0017*  
0B16CE             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0B16CE             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0B16CE             0020*  
0B16CE             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0B16CE             0022*                              ;  0,and counting stops when the end-of-count value is reached.
0B16CE             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0B16CE             0024*                              ; written to the counter when the end-of-count value is reached.
0B16CE             0025*  
0B16CE             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0B16CE             0027*  CLK_DIV_256:  equ %00001100 ;
0B16CE             0028*  CLK_DIV_64:   equ %00001000 ;
0B16CE             0029*  CLK_DIV_16:   equ %00000100 ;
0B16CE             0030*  CLK_DIV_4:    equ %00000000 ;
0B16CE             0031*  
0B16CE             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0B16CE             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0B16CE             0034*                              ; When a 1 is written to this bit,the values in the reload registers
0B16CE             0035*                              ;  are loaded into the downcounter when the timer restarts. The
0B16CE             0036*                              ; programmer must ensure that this bit is set to 1 each time
0B16CE             0037*                              ; SINGLE-PASS mode is used.
0B16CE             0038*  
0B16CE             0039*  ; disable/enable the programmable reload timer
0B16CE             0040*  PRT_EN_0:     equ %00000000 ;
0B16CE             0041*  PRT_EN_1:     equ %00000001 ;
0B16CE             0042*  
0B16CE             0043*  ; Table 37. Timer Input Source Select Register
0B16CE             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
0B16CE             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0B16CE             0046*  ;   00: System clock / CLK_DIV
0B16CE             0047*  ;   01: RTC / CLK_DIV
0B16CE             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
0B16CE             0049*  ;   10: GPIO port B pin 1.
0B16CE             0050*  ;   11: GPIO port B pin 1.
0B16CE             0051*  TMR_ISS:   equ 92h ; register address
0B16CE             0052*  
0B16CE             0053*  ; Table 51. Real-Time Clock Control Register
0B16CE             0054*  RTC_CTRL: equ EDh ; register address
0B16CE             0055*  
0B16CE             0056*  ; alarm interrupt disable/enable
0B16CE             0057*  RTC_ALARM_0:    equ %00000000
0B16CE             0058*  RTC_ALARM_1:    equ %10000000
0B16CE             0059*  
0B16CE             0060*  ; interrupt on alarm disable/enable
0B16CE             0061*  RTC_INT_ENT_0:  equ %00000000
0B16CE             0062*  RTC_INT_ENT_1:  equ %01000000
0B16CE             0063*  
0B16CE             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0B16CE             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0B16CE             0066*  
0B16CE             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0B16CE             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
0B16CE             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0B16CE             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
0B16CE             0071*  
0B16CE             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0B16CE             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0B16CE             0074*  
0B16CE             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0B16CE             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0B16CE             0077*  
0B16CE             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0B16CE             0079*                                  ; RTC counter is enabled.
0B16CE             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0B16CE             0081*                                  ; RTC counter is disabled.
0B16CE             0082*  
0B16CE             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0B16CE             0084*  
0B16CE             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0B16CE             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0B16CE 00 00 00    0087*  prt_reload: dl 0x000000
0B16D1             0088*  
0B16D1             0089*  ; ; returns: a = 0 if running on hardware,1 if running on emulator
0B16D1             0090*  ; ;          de = number PRT interrupts during test interval
0B16D1             0091*  ; prt_calibrate:
0B16D1             0092*  ;     call vdu_vblank
0B16D1             0093*  ; ; set a MOS timer
0B16D1             0094*  ;     ld hl,120*1 ; 1 second
0B16D1             0095*  ;     ld iy,tmr_test
0B16D1             0096*  ;     call tmr_set
0B16D1             0097*  ; ; set a PRT timer
0B16D1             0098*  ;     ; ld hl,prt_reload_hardware
0B16D1             0099*  ;     ; ld hl,prt_reload_emulator
0B16D1             0100*  ;     ld hl,prt_reload_emulator + prt_reload_hardware / 2
0B16D1             0101*  ;     ld (prt_reload),hl
0B16D1             0102*  ;     call prt_set
0B16D1             0103*  ; @loop:
0B16D1             0104*  ; ; check time remaining on MOS timer
0B16D1             0105*  ;     call tmr_get
0B16D1             0106*  ;     jp z,@done ; time expired,so quit
0B16D1             0107*  ;     jp m,@done ; time past expiration (negative),so quit
0B16D1             0108*  ;     jr @loop
0B16D1             0109*  ; @done:
0B16D1             0110*  ;     ld de,(prt_irq_counter)
0B16D1             0111*  ;     ld bc,prt_reload_hardware ; default value for running on hardware
0B16D1             0112*  ;     ld (prt_reload),bc
0B16D1             0113*  ;     ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
0B16D1             0114*  ;     xor a ; clear carry,zero is default value for running on hardware
0B16D1             0115*  ;     ld (is_emulator),a
0B16D1             0116*  ;     sbc hl,de
0B16D1             0117*  ;     ld hl,on_hardware ; default message for running on hardware
0B16D1             0118*  ;     jp z,prt_calibrate ; zero result is indeterminate so we try again
0B16D1             0119*  ;     ret m ; negative result means we're on hardware
0B16D1             0120*  ;     inc a ; we're on emulator
0B16D1             0121*  ;     ld (is_emulator),a
0B16D1             0122*  ;     ld bc,prt_reload_emulator
0B16D1             0123*  ;     ld (prt_reload),bc
0B16D1             0124*  ;     ld hl,on_emulator
0B16D1             0125*  ;     ret
0B16D1             0126*  
0B16D1             0127*  ; calibrating_timer: defb "Calibrating timer\r\n",0
0B16D1             0128*  
0B16D1             0129*  ; set PRT timer
0B16D1             0130*  prt_set:
0B16D1 21 00 00 00 0131*      ld hl,0
0B16D5 22 1F 17 0B 0132*      ld (prt_irq_counter),hl
0B16D9 2A CE 16 0B 0133*      ld hl,(prt_reload)
0B16DD ED 29 84    0134*      out0 ($84),l
0B16E0 ED 21 85    0135*  	out0 ($85),h
0B16E3             0136*  ; disable timer
0B16E3 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0B16E5 ED 39 83    0138*  	out0 ($83),a
0B16E8             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0B16E8 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0B16EA ED 39 83    0141*  	out0 ($83),a
0B16ED C9          0142*      ret
0B16EE             0143*  
0B16EE             0144*  ; ===============================================
0B16EE             0145*  ; PRT Timer Interrupt Handling
0B16EE             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0B16EE             0147*  ; -----------------------------------------------
0B16EE             0148*  prt_irq_init:
0B16EE             0149*      ; set up interrupt vector table 2
0B16EE 21 00 00 00 0150*  	ld hl,0
0B16F2 3A 0C 01 00 0151*  	ld a,($10c)
0B16F6 6F          0152*  	ld l,a
0B16F7 3A 0D 01 00 0153*  	ld a,($10d)
0B16FB 67          0154*  	ld h,a
0B16FC             0155*  
0B16FC             0156*  	; skip over CALL ($c3)
0B16FC 23          0157*  	inc hl
0B16FD             0158*  	; load address of jump into vector table 2 (in ram)
0B16FD ED 27       0159*  	ld hl,(hl)
0B16FF             0160*  
0B16FF             0161*  	; write CALL prt_irq_handler to vector table 2
0B16FF 3E C3       0162*  	ld a,$c3
0B1701 77          0163*  	ld (hl),a
0B1702 23          0164*  	inc hl
0B1703 11 0A 17 0B 0165*  	ld de,prt_irq_handler
0B1707 ED 1F       0166*  	ld (hl),de
0B1709             0167*  
0B1709 C9          0168*      ret
0B170A             0169*  
0B170A             0170*  prt_irq_handler:
0B170A F3          0171*  	di
0B170B F5          0172*  	push af
0B170C E5          0173*      push hl
0B170D ED 38 83    0174*  	in0 a,($83)
0B1710 2A 1F 17 0B 0175*  	ld hl,(prt_irq_counter)
0B1714 23          0176*  	inc hl
0B1715 22 1F 17 0B 0177*  	ld (prt_irq_counter),hl
0B1719 E1          0178*      pop hl
0B171A F1          0179*  	pop af
0B171B FB          0180*  	ei
0B171C 5B ED 4D    0181*  	reti.l
0B171F             0182*  
0B171F             0183*  prt_irq_counter:
0B171F 00 00 00    0184*  	.dl 0
0B1722             0185*  prt_irq_counter_saved:
0B1722 00 00 00    0186*      .dl 0
0B1725             0187*  
0B1725             0188*  prt_loop_reset:
0B1725 E5          0189*      push hl
0B1726 21 00 00 00 0190*  	ld hl,0
0B172A 22 1F 17 0B 0191*  	ld (prt_irq_counter),hl
0B172E 22 90 17 0B 0192*      ld (prt_loop_counter),hl
0B1732 22 93 17 0B 0193*      ld (prt_loops),hl
0B1736 CD D1 16 0B 0194*      call prt_set
0B173A E1          0195*      pop hl
0B173B C9          0196*      ret
0B173C             0197*  
0B173C             0198*  prt_loop_start:
0B173C E5          0199*      push hl
0B173D 21 00 00 00 0200*  	ld hl,0
0B1741 22 1F 17 0B 0201*  	ld (prt_irq_counter),hl
0B1745 E1          0202*      pop hl
0B1746 C9          0203*      ret
0B1747             0204*  
0B1747             0205*  prt_loop_stop:
0B1747 E5          0206*      push hl
0B1748 D5          0207*      push de
0B1749 2A 1F 17 0B 0208*      ld hl,(prt_irq_counter)
0B174D ED 5B 90 17 0209*      ld de,(prt_loop_counter)
       0B          
0B1752 19          0210*      add hl,de
0B1753 22 90 17 0B 0211*      ld (prt_loop_counter),hl
0B1757 21 00 00 00 0212*      ld hl,0
0B175B 22 1F 17 0B 0213*      ld (prt_irq_counter),hl
0B175F 2A 93 17 0B 0214*      ld hl,(prt_loops)
0B1763 23          0215*      inc hl
0B1764 22 93 17 0B 0216*      ld (prt_loops),hl
0B1768 D1          0217*      pop de
0B1769 E1          0218*      pop hl
0B176A C9          0219*      ret
0B176B             0220*  
0B176B             0221*  ; inputs: bc = y,x text coordinates to print
0B176B             0222*  prt_loop_print:
0B176B F5          0223*      push af
0B176C E5          0224*      push hl
0B176D C5          0225*      push bc
0B176E D5          0226*      push de
0B176F DD E5       0227*      push ix
0B1771 FD E5       0228*      push iy
0B1773 CD 88 18 0B 0229*      call vdu_move_cursor
0B1777             0230*  
0B1777 2A 90 17 0B 0231*      ld hl,(prt_loop_counter)
0B177B CD 2B 03 0B 0232*      call printDec
0B177F             0233*  
0B177F 2A 93 17 0B 0234*      ld hl,(prt_loops)
0B1783 CD 2B 03 0B 0235*      call printDec
0B1787             0236*  
0B1787 FD E1       0237*      pop iy
0B1789 DD E1       0238*      pop ix
0B178B D1          0239*      pop de
0B178C C1          0240*      pop bc
0B178D E1          0241*      pop hl
0B178E F1          0242*      pop af
0B178F C9          0243*      ret
0B1790             0244*  
0B1790             0245*  prt_loop_counter:
0B1790 00 00 00    0246*      .dl 0
0B1793             0247*  prt_loops:
0B1793 00 00 00    0248*      .dl 0
0B1796             0249*  
0B1796             0250*  ; ===============================================
0B1796             0251*  ; Timer functions
0B1796             0252*  ; -----------------------------------------------
0B1796             0253*  ; set a countdown timer
0B1796             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B1796             0255*  ; returns: hl = current time
0B1796             0256*  tmr_set:
0B1796 FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
0B1799             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
0B1799 3E 08       0001*M 			LD	A, function
0B179B 5B CF       0002*M 			RST.L	08h
0B179D DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
0B17A0 FD 2F 00    0260*      ld (iy+0),hl            ; set start time
0B17A3 C9          0261*      ret
0B17A4             0262*  
0B17A4             0263*  ; gets time remaining on a countdown timer
0B17A4             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B17A4             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0B17A4             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
0B17A4             0267*  tmr_get:
0B17A4             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
0B17A4 3E 08       0001*M 			LD	A, function
0B17A6 5B CF       0002*M 			RST.L	08h
0B17A8 DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
0B17AB FD 27 00    0270*      ld hl,(iy+0)            ; get start time
0B17AE AF          0271*      xor a                   ; clear carry
0B17AF ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0B17B1 FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
0B17B4 AF          0274*      xor a                   ; clear carry
0B17B5 ED 5A       0275*      adc hl,de               ; hl = time remaining
0B17B7             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0B17B7 C9          0277*      ret
0B17B8             0278*  
0B17B8 00 00 00    0279*  timestamp_now: dl 0
0B17BB 00 00 00    0280*  timestamp_old: dl 0
0B17BE 00 00 00    0281*  timestamp_chg: dl 0
0B17C1             0282*  
0B17C1             0283*  ; update the global timestamp from the system clock
0B17C1             0284*  ; inputs: none
0B17C1             0285*  ; returns: hl = time elapsed in 1/120ths of a second
0B17C1             0286*  ;          de = current time
0B17C1             0287*  ;          ix = pointer to syvars table
0B17C1             0288*  ; destroys: af,hl,de,ix
0B17C1             0289*  timestamp_tick:
0B17C1 ED 5B B8 17 0290*      ld de,(timestamp_now)   ; get previous time
       0B          
0B17C6 ED 53 BB 17 0291*      ld (timestamp_old),de   ; save previous time
       0B          
0B17CB             0292*      MOSCALL mos_sysvars     ; ix points to syvars table
0B17CB 3E 08       0001*M 			LD	A, function
0B17CD 5B CF       0002*M 			RST.L	08h
0B17CF DD 27 00    0293*      ld hl,(ix+sysvar_time)  ; get current time
0B17D2 22 B8 17 0B 0294*      ld (timestamp_now),hl   ; save current time
0B17D6 AF          0295*      xor a                   ; clear carry
0B17D7 ED 52       0296*      sbc hl,de               ; hl = time elapsed
0B17D9 22 BE 17 0B 0297*      ld (timestamp_chg),hl   ; save elapsed time
0B17DD C9          0298*      ret
0B17DE             0299*  
0B17DE             0300*  ; set a countdown timer
0B17DE             0301*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B17DE             0302*  ; requires: timestamp_tick to be called at least once before this function
0B17DE             0303*  ; returns: hl = current time
0B17DE             0304*  ; destroys: hl
0B17DE             0305*  timestamp_tmr_set:
0B17DE FD 2F 03    0306*      ld (iy+3),hl            ; set time remaining
0B17E1 2A B8 17 0B 0307*      ld hl,(timestamp_now)   ; get current timestamp
0B17E5 FD 2F 00    0308*      ld (iy+0),hl            ; set start time
0B17E8 C9          0309*      ret
0B17E9             0310*  
0B17E9             0311*  ; gets time remaining on a countdown timer following the global timestamp
0B17E9             0312*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B17E9             0313*  ; requires: timestamp_tick to be called at least once before this function
0B17E9             0314*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0B17E9             0315*  ;          sign flags: pos = time not expired,zero or neg = time expired
0B17E9             0316*  ; destroys: af,hl,de
0B17E9             0317*  timestamp_tmr_get:
0B17E9 ED 5B B8 17 0318*      ld de,(timestamp_now)   ; get current timestamp
       0B          
0B17EE FD 27 00    0319*      ld hl,(iy+0)            ; get start time
0B17F1 AF          0320*      xor a                   ; clear carry
0B17F2 ED 52       0321*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0B17F4 FD 17 03    0322*      ld de,(iy+3)            ; get timer set value
0B17F7 AF          0323*      xor a                   ; clear carry
0B17F8 ED 5A       0324*      adc hl,de               ; hl = time remaining
0B17FA             0325*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0B17FA C9          0326*      ret
0B17FB             0327*  
0B17FB             0328*  ; main loop timer functions
0B17FB             0329*  tmr_main_loop: ds 6 ; buffer to hold main loop timer
0B1801             0330*  
0B1801             0331*  ; set a countdown timer for the main loop using the timestamp timer
0B1801             0332*  ; inputs: hl = time to set in 1/120ths of a second
0B1801             0333*  ; returns: hl = current time
0B1801             0334*  ; destroys: af,hl,de,ix,iy
0B1801             0335*  tmr_main_loop_set:
0B1801 FD 21 FB 17 0336*      ld iy,tmr_main_loop
       0B          
0B1806 FD 2F 03    0337*      ld (iy+3),hl ; set time remaining
0B1809 CD C1 17 0B 0338*      call timestamp_tick
0B180D 2A B8 17 0B 0339*      ld hl,(timestamp_now)   ; get current timestamp
0B1811 FD 2F 00    0340*      ld (iy+0),hl ; set start time
0B1814 C9          0341*      ret
0B1815             0342*  
0B1815             0343*  ; gets time remaining on the main loop countdown timer following the global timestamp
0B1815             0344*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0B1815             0345*  ;          sign flags: pos = time not expired,zero or neg = time expired
0B1815             0346*  ; destroys: af,hl,de,ix,iy
0B1815             0347*  tmr_main_loop_get:
0B1815 CD C1 17 0B 0348*      call timestamp_tick
0B1819 FD 21 FB 17 0349*      ld iy,tmr_main_loop
       0B          
0B181E CD E9 17 0B 0350*      call timestamp_tmr_get
0B1822 C9          0351*      ret
0B1823             0352*  
0B1823             0353*  ; set a stopwatch
0B1823             0354*  ; returns: hl = start time
0B1823             0355*  ; destroys: hl,ix
0B1823             0356*  stopwatch_set:
0B1823             0357*      MOSCALL mos_sysvars     ; ix points to syvars table
0B1823 3E 08       0001*M 			LD	A, function
0B1825 5B CF       0002*M 			RST.L	08h
0B1827 DD 27 00    0358*      ld hl,(ix+sysvar_time)  ; get current time
0B182A 22 3F 18 0B 0359*      ld (stopwatch_started),hl            ; set start time
0B182E C9          0360*      ret
0B182F             0361*  
0B182F             0362*  ; gets time elapsed on a stopwatch
0B182F             0363*  ; returns: hl = time elapsed in 1/120ths of a second
0B182F             0364*  ; destroys: af,hl,de,ix
0B182F             0365*  stopwatch_get:
0B182F             0366*      MOSCALL mos_sysvars     ; ix points to syvars table
0B182F 3E 08       0001*M 			LD	A, function
0B1831 5B CF       0002*M 			RST.L	08h
0B1833 DD 27 00    0367*      ld hl,(ix+sysvar_time)  ; get current time
0B1836 ED 5B 3F 18 0368*      ld de,(stopwatch_started)            ; get start time
       0B          
0B183B AF          0369*      xor a                   ; clear carry
0B183C ED 52       0370*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
0B183E C9          0371*      ret
0B183F             0372*  
0B183F             0373*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
0B1842             0374*  
0B1842             0375*  ; ------------------
0B1842             0376*  ; delay routine
0B1842             0377*  ; Author: Richard Turrnidge
0B1842             0378*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
0B1842             0379*  ; routine waits a fixed time,then returns
0B1842             0380*  ; arrive with A =  the delay byte. One bit to be set only.
0B1842             0381*  ; eg. ld A,00000100b
0B1842             0382*  
0B1842             0383*  multiPurposeDelay:
0B1842 F5          0384*      push af
0B1843 C5          0385*      push bc
0B1844 DD E5       0386*      push ix
0B1846 47          0387*      ld b,a
0B1847 3E 08       0388*      ld a,$08
0B1849 5B CF       0389*      RST.LIL	08h                 ; get IX pointer to sysvars
0B184B             0390*  
0B184B             0391*  waitLoop:
0B184B             0392*  
0B184B DD 7E 00    0393*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
0B184E             0394*  
0B184E             0395*                                  ;   we check if bit set is same as last time we checked.
0B184E             0396*                                  ;   bit 0 - don't use
0B184E             0397*                                  ;   bit 1 - changes 64 times per second
0B184E             0398*                                  ;   bit 2 - changes 32 times per second
0B184E             0399*                                  ;   bit 3 - changes 16 times per second
0B184E             0400*  
0B184E             0401*                                  ;   bit 4 - changes 8 times per second
0B184E             0402*                                  ;   bit 5 - changes 4 times per second
0B184E             0403*                                  ;   bit 6 - changes 2 times per second
0B184E             0404*                                  ;   bit 7 - changes 1 times per second
0B184E A0          0405*      and b
0B184F 4F          0406*      ld c,a
0B1850 3A 61 18 0B 0407*      ld a,(oldTimeStamp)
0B1854 B9          0408*      cp c                        ; is A same as last value?
0B1855 28 F4       0409*      jr z,waitLoop              ; loop here if it is
0B1857 79          0410*      ld a,c
0B1858 32 61 18 0B 0411*      ld (oldTimeStamp),a        ; set new value
0B185C             0412*  
0B185C DD E1       0413*      pop ix
0B185E C1          0414*      pop bc
0B185F F1          0415*      pop af
0B1860 C9          0416*      ret
0B1861             0417*  
0B1861 00          0418*  oldTimeStamp:   .db 00h
0B1862             0025       include "vdu.inc"
0B1862             0001*  
0B1862             0002*  ; VDU 30: Home cursor
0B1862             0003*  vdu_home_cursor:
0B1862 3E 1E       0004*      ld a,30
0B1864 5B D7       0005*  	rst.lil $10
0B1866 C9          0006*  	ret
0B1867             0007*  
0B1867             0008*  cursor_on:
0B1867 21 72 18 0B 0009*  	ld hl,@cmd
0B186B 01 03 00 00 0010*  	ld bc,@end-@cmd
0B186F 5B DF       0011*  	rst.lil $18
0B1871 C9          0012*  	ret
0B1872             0013*  @cmd:
0B1872 17 01 01    0014*  	db 23,1,1
0B1875             0015*  @end:
0B1875             0016*  
0B1875             0017*  cursor_off:
0B1875 21 80 18 0B 0018*  	ld hl,@cmd
0B1879 01 03 00 00 0019*  	ld bc,@end-@cmd
0B187D 5B DF       0020*  	rst.lil $18
0B187F C9          0021*  	ret
0B1880             0022*  @cmd:
0B1880 17 01 00    0023*  	db 23,1,0
0B1883             0024*  @end:
0B1883             0025*  
0B1883             0026*  ; VDU 9: Move cursor forward one character
0B1883             0027*  vdu_cursor_forward:
0B1883 3E 09       0028*      ld a,9
0B1885 5B D7       0029*  	rst.lil $10
0B1887 C9          0030*  	ret
0B1888             0031*  
0B1888             0032*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
0B1888             0033*  ; inputs: c=x, b=y 8-bit unsigned integers
0B1888             0034*  vdu_move_cursor:
0B1888 ED 43 99 18 0035*      ld (@x0),bc
       0B          
0B188D 21 98 18 0B 0036*  	ld hl,@cmd
0B1891 01 03 00 00 0037*  	ld bc,@end-@cmd
0B1895 5B DF       0038*  	rst.lil $18
0B1897 C9          0039*  	ret
0B1898 1F          0040*  @cmd: 	db 31
0B1899 00          0041*  @x0:	db 0
0B189A 00          0042*  @y0: 	db 0
0B189B 00          0043*  @end: 	db 0 ; padding
0B189C             0044*  
0B189C             0045*  ; VDU 12: Clear text area (CLS)
0B189C             0046*  vdu_cls:
0B189C 3E 0C       0047*      ld a,12
0B189E 5B D7       0048*  	rst.lil $10
0B18A0 C9          0049*  	ret
0B18A1             0050*  
0B18A1             0051*  vdu_flip:
0B18A1 21 AC 18 0B 0052*  	ld hl,@cmd
0B18A5 01 03 00 00 0053*  	ld bc,@end-@cmd
0B18A9 5B DF       0054*  	rst.lil $18
0B18AB C9          0055*  	ret
0B18AC 17 00 C3    0056*  @cmd: db 23,0,0xC3
0B18AF             0057*  @end:
0B18AF             0058*  
0B18AF             0059*  ; VDU 16: Clear graphics area (CLG)
0B18AF             0060*  vdu_clg:
0B18AF 3E 10       0061*      ld a,16
0B18B1 5B D7       0062*  	rst.lil $10
0B18B3 C9          0063*  	ret
0B18B4             0064*  
0B18B4             0065*  ; COLOUR MODES
0B18B4             0066*  ; Mode	Effect
0B18B4             0067*  ; 0	Set on-screen pixel to target colour value
0B18B4             0068*  ; 1	OR value with the on-screen pixel
0B18B4             0069*  ; 2	AND value with the on-screen pixel
0B18B4             0070*  ; 3	XOR value with the on-screen pixel
0B18B4             0071*  ; 4	Invert the on-screen pixel
0B18B4             0072*  ; 5	No operation
0B18B4             0073*  ; 6	AND the inverse of the specified colour with the on-screen pixel
0B18B4             0074*  ; 7	OR the inverse of the specified colour with the on-screen pixel
0B18B4             0075*  
0B18B4             0076*  ; VDU 17, colour: Define text colour (COLOUR)
0B18B4             0077*  vdu_colour_text:
0B18B4 32 C4 18 0B 0078*  	ld (@arg),a
0B18B8 21 C3 18 0B 0079*  	ld hl,@cmd
0B18BC 01 02 00 00 0080*  	ld bc,@end-@cmd
0B18C0 5B DF       0081*  	rst.lil $18
0B18C2 C9          0082*  	ret
0B18C3 11          0083*  @cmd: db 17
0B18C4 00          0084*  @arg: db 0
0B18C5             0085*  @end:
0B18C5             0086*  
0B18C5             0087*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
0B18C5             0088*  ; inputs: a=mode, c=colour (add 128 to set background colour)
0B18C5             0089*  vdu_gcol:
0B18C5 32 DA 18 0B 0090*  	ld (@mode),a
0B18C9 79          0091*      ld a,c
0B18CA 32 DB 18 0B 0092*      ld (@col),a
0B18CE 21 D9 18 0B 0093*  	ld hl,@cmd
0B18D2 01 03 00 00 0094*  	ld bc,@end-@cmd
0B18D6 5B DF       0095*  	rst.lil $18
0B18D8 C9          0096*  	ret
0B18D9 12          0097*  @cmd:  db 18
0B18DA 00          0098*  @mode: db 0
0B18DB 00          0099*  @col:  db 0
0B18DC             0100*  @end:
0B18DC             0101*  
0B18DC             0102*  
0B18DC             0103*  ; VDU 28, left, bottom, right, top: Set text viewport **
0B18DC             0104*  ; MIND THE LITTLE-ENDIANESS
0B18DC             0105*  ; inputs: c=left,b=bottom,e=right,d=top
0B18DC             0106*  ; outputs; nothing
0B18DC             0107*  ; destroys: a might make it out alive
0B18DC             0108*  vdu_set_txt_viewport:
0B18DC ED 43 F2 18 0109*      ld (@lb),bc
       0B          
0B18E1 ED 53 F4 18 0110*  	ld (@rt),de
       0B          
0B18E6 21 F1 18 0B 0111*  	ld hl,@cmd
0B18EA 01 05 00 00 0112*  	ld bc,@end-@cmd
0B18EE 5B DF       0113*  	rst.lil $18
0B18F0 C9          0114*  	ret
0B18F1 1C          0115*  @cmd:   db 28 ; set text viewport command
0B18F2 00 00       0116*  @lb: 	dw 0x0000 ; set by bc
0B18F4 00 00       0117*  @rt: 	dw 0x0000 ; set by de
0B18F6 00          0118*  @end:   db 0x00	  ; padding
0B18F7             0119*  
0B18F7             0120*  ; Wait for VBLANK interrupt
0B18F7             0121*  vdu_vblank:
0B18F7 DD E5       0122*      PUSH 	IX
0B18F9             0123*  	MOSCALL	mos_sysvars
0B18F9 3E 08       0001*M 			LD	A, function
0B18FB 5B CF       0002*M 			RST.L	08h
0B18FD DD 7E 00    0124*  	LD	A, (IX + sysvar_time + 0)
0B1900             0125*  @wait:
0B1900 DD BE 00    0126*      CP 	A, (IX + sysvar_time + 0)
0B1903 28 FB       0127*      JR	Z, @wait
0B1905 DD E1       0128*      POP	IX
0B1907 C9          0129*      RET
0B1908             0130*  
0B1908             0131*  ; VDU 29, x; y;: Set graphics origin
0B1908             0132*  ; This command sets the graphics origin.
0B1908             0133*  ; The origin is the point on the screen where the coordinates (0,0) are located.
0B1908             0134*  ; inputs: bc=x0,de=y0
0B1908             0135*  ; outputs; nothing
0B1908             0136*  ; destroys: a might make it out alive
0B1908             0137*  vdu_set_gfx_origin:
0B1908 ED 43 1E 19 0138*      ld (@x0),bc
       0B          
0B190D ED 53 20 19 0139*      ld (@y0),de
       0B          
0B1912 21 1D 19 0B 0140*      ld hl,@cmd
0B1916 01 05 00 00 0141*      ld bc,@end-@cmd
0B191A 5B DF       0142*      rst.lil $18
0B191C C9          0143*      ret
0B191D 1D          0144*  @cmd:   db 29 ; set graphics origin command
0B191E 00 00       0145*  @x0: 	dw 0x0000 ; set by bc
0B1920 00 00       0146*  @y0: 	dw 0x0000 ; set by de
0B1922 00          0147*  @end:   db 0x00	  ; padding
0B1923             0148*  
0B1923             0149*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
0B1923             0150*  ; NOTE: the order of the y-coordinate parameters are inverted
0B1923             0151*  ; 	because we have turned off logical screen scaling
0B1923             0152*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
0B1923             0153*  ; outputs; nothing
0B1923             0154*  ; destroys: a might make it out alive
0B1923             0155*  vdu_set_gfx_viewport:
0B1923 ED 43 43 19 0156*      ld (@x0),bc
       0B          
0B1928 FD 22 45 19 0157*      ld (@y1),iy
       0B          
0B192D DD 22 47 19 0158*  	ld (@x1),ix
       0B          
0B1932 ED 53 49 19 0159*  	ld (@y0),de
       0B          
0B1937 21 42 19 0B 0160*  	ld hl,@cmd
0B193B 01 09 00 00 0161*  	ld bc,@end-@cmd
0B193F 5B DF       0162*  	rst.lil $18
0B1941 C9          0163*  	ret
0B1942 18          0164*  @cmd:   db 24 ; set graphics viewport command
0B1943 00 00       0165*  @x0: 	dw 0x0000 ; set by bc
0B1945 00 00       0166*  @y1: 	dw 0x0000 ; set by iy
0B1947 00 00       0167*  @x1: 	dw 0x0000 ; set by ix
0B1949 00 00       0168*  @y0: 	dw 0x0000 ; set by de
0B194B 00          0169*  @end:   db 0x00	  ; padding
0B194C             0170*  
0B194C             0171*  ; SCREEN MODES
0B194C             0172*  ; ===============================
0B194C             0173*  ; Mode  Horz  Vert  Cols  Refresh
0B194C             0174*  ; ---   ----  ----  ----  -------
0B194C             0175*  ; 11    320   240   2     60hz
0B194C             0176*  ; 139   320   240   2     60hz
0B194C             0177*  ; 23    512   384   2     60hz
0B194C             0178*  ; 151   512   384   2     60hz
0B194C             0179*  ; 6     640   240   2     60hz
0B194C             0180*  ; 134   640   240   2     60hz
0B194C             0181*  ; 2     640   480   2     60hz
0B194C             0182*  ; 130   640   480   2     60hz
0B194C             0183*  ; 17    800   600   2     60hz
0B194C             0184*  ; 145   800   600   2     60hz
0B194C             0185*  ; 18    1024  768   2     60hz
0B194C             0186*  ; 146   1024  768   2     60hz
0B194C             0187*  ; ---   ----  ----  ----  -------
0B194C             0188*  ; 10    320   240   4     60hz
0B194C             0189*  ; 138   320   240   4     60hz
0B194C             0190*  ; 22    512   384   4     60hz
0B194C             0191*  ; 150   512   384   4     60hz
0B194C             0192*  ; 5     640   240   4     60hz
0B194C             0193*  ; 133   640   240   4     60hz
0B194C             0194*  ; 1     640   480   4     60hz
0B194C             0195*  ; 129   640   480   4     60hz
0B194C             0196*  ; 16    800   600   4     60hz
0B194C             0197*  ; 19    1024  768   4     60hz
0B194C             0198*  ; ---   ----  ----  ----  -------
0B194C             0199*  ; 9     320   240   16    60hz
0B194C             0200*  ; 137   320   240   16    60hz
0B194C             0201*  ; 21    512   384   16    60hz
0B194C             0202*  ; 149   512   384   16    60hz
0B194C             0203*  ; 4     640   240   16    60hz
0B194C             0204*  ; 132   640   240   16    60hz
0B194C             0205*  ; 0     640   480   16    60hz
0B194C             0206*  ; 7     n/a   n/a   16    60hz
0B194C             0207*  ; ---   ----  ----  ----  -------
0B194C             0208*  ; 8     320   240   64    60hz
0B194C             0209*  ; 136   320   240   64    60hz
0B194C             0210*  ; 20    512   384   64    60hz
0B194C             0211*  ; 3     640   240   64    60hz
0B194C             0212*  ; ---   ----  ----  ----  -------
0B194C             0213*  vdu_set_screen_mode:
0B194C 32 5C 19 0B 0214*  	ld (@arg),a
0B1950 21 5B 19 0B 0215*  	ld hl,@cmd
0B1954 01 02 00 00 0216*  	ld bc,@end-@cmd
0B1958 5B DF       0217*  	rst.lil $18
0B195A C9          0218*  	ret
0B195B 16          0219*  @cmd: db 22 ; set screen mode
0B195C 00          0220*  @arg: db 0  ; screen mode parameter
0B195D             0221*  @end:
0B195D             0222*  
0B195D             0223*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
0B195D             0224*  ; inputs: a is scaling mode, 1=on, 0=off
0B195D             0225*  ; note: default setting on boot is scaling ON
0B195D             0226*  vdu_set_scaling:
0B195D 32 6F 19 0B 0227*  	ld (@arg),a
0B1961 21 6C 19 0B 0228*  	ld hl,@cmd
0B1965 01 04 00 00 0229*  	ld bc,@end-@cmd
0B1969 5B DF       0230*  	rst.lil $18
0B196B C9          0231*  	ret
0B196C 17 00 C0    0232*  @cmd: db 23,0,0xC0
0B196F 00          0233*  @arg: db 0  ; scaling on/off
0B1970             0234*  @end:
0B1970             0235*  
0B1970             0236*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
0B1970             0237*  ; inputs: hl=bufferId
0B1970             0238*  vdu_buff_select:
0B1970 22 82 19 0B 0239*  	ld (@bufferId),hl
0B1974 21 7F 19 0B 0240*  	ld hl,@cmd
0B1978 01 05 00 00 0241*  	ld bc,@end-@cmd
0B197C 5B DF       0242*  	rst.lil $18
0B197E C9          0243*  	ret
0B197F 17 1B 20    0244*  @cmd: db 23,27,0x20
0B1982 00 00       0245*  @bufferId: dw 0x0000
0B1984 00          0246*  @end: db 0x00 ; padding
0B1985             0247*  
0B1985             0248*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
0B1985             0249*  ; inputs: a=format; bc=width; de=height
0B1985             0250*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
0B1985             0251*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
0B1985             0252*  ; 0 	RGBA8888 (4-bytes per pixel)
0B1985             0253*  ; 1 	RGBA2222 (1-bytes per pixel)
0B1985             0254*  ; 2 	Mono/Mask (1-bit per pixel)
0B1985             0255*  ; 3 	Reserved for internal use by VDP (“native” format)
0B1985             0256*  vdu_bmp_create:
0B1985 ED 43 A1 19 0257*      ld (@width),bc
       0B          
0B198A ED 53 A3 19 0258*      ld (@height),de
       0B          
0B198F 32 A5 19 0B 0259*      ld (@fmt),a
0B1993 21 9E 19 0B 0260*  	ld hl,@cmd
0B1997 01 08 00 00 0261*  	ld bc,@end-@cmd
0B199B 5B DF       0262*  	rst.lil $18
0B199D C9          0263*  	ret
0B199E 17 1B 21    0264*  @cmd:       db 23,27,0x21
0B19A1 00 00       0265*  @width:     dw 0x0000
0B19A3 00 00       0266*  @height:    dw 0x0000
0B19A5 00          0267*  @fmt:       db 0x00
0B19A6             0268*  @end:
0B19A6             0269*  
0B19A6             0270*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0B19A6             0271*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0B19A6             0272*  vdu_load_img_rgba2_to_8:
0B19A6             0273*  ; backup the target buffer id and image dimensions
0B19A6 E5          0274*      push hl
0B19A7 D5          0275*      push de
0B19A8 C5          0276*      push bc
0B19A9             0277*  ; load the rgba2 image to working buffer 65534
0B19A9 21 FE FF 00 0278*      ld hl,65534 ; temporary working buffer id
0B19AD CD B0 1A 0B 0279*  	call vdu_load_buffer_from_file
0B19B1             0280*  ; restore the image dimensions and target buffer id
0B19B1 C1          0281*      pop bc
0B19B2 D1          0282*      pop de
0B19B3 E1          0283*      pop hl
0B19B4             0284*  ; fall through to vdu_rgba2_to_8
0B19B4             0285*  
0B19B4             0286*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
0B19B4             0287*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
0B19B4             0288*  ; the "expand bitmap" command is:
0B19B4             0289*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0B19B4             0290*  ; and then to reverse the byte order to fix endian-ness:
0B19B4             0291*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0B19B4             0292*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0B19B4             0293*  ; VDU 23,27,&20,targetBufferID%;
0B19B4             0294*  ; VDU 23,27,&21,width%;height%;0
0B19B4             0295*  ; -------------------------------------------------------------------
0B19B4             0296*  ; inputs: bc,de image width,height ; hl = targetBufferId
0B19B4             0297*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
0B19B4             0298*  vdu_rgba2_to_8:
0B19B4             0299*  ; load the image dimensions and buffer id parameters
0B19B4 ED 43 10 1A 0300*      ld (@width),bc
       0B          
0B19B9 ED 53 12 1A 0301*      ld (@height),de
       0B          
0B19BE 22 F5 19 0B 0302*      ld (@bufferId0),hl
0B19C2 22 02 1A 0B 0303*      ld (@bufferId2),hl
0B19C6 22 0B 1A 0B 0304*      ld (@bufferId1),hl
0B19CA             0305*  ; clean up bytes that got stomped on by the ID loads
0B19CA 3E 48       0306*      ld a,0x48
0B19CC 32 F7 19 0B 0307*      ld (@bufferId0+2),a
0B19D0 3E 17       0308*      ld a,23
0B19D2 32 0D 1A 0B 0309*      ld (@bufferId1+2),a
0B19D6 3E 18       0310*      ld a,24
0B19D8 32 04 1A 0B 0311*      ld (@bufferId2+2),a
0B19DC AF          0312*      xor a
0B19DD 32 14 1A 0B 0313*      ld (@height+2),a
0B19E1             0314*  ; send the vdu command strings
0B19E1 21 EC 19 0B 0315*      ld hl,@beg
0B19E5 01 29 00 00 0316*      ld bc,@end-@beg
0B19E9 5B DF       0317*      rst.lil $18
0B19EB C9          0318*      ret
0B19EC             0319*  @beg:
0B19EC             0320*  ; Command 14: Consolidate blocks in a buffer
0B19EC             0321*  ; VDU 23, 0, &A0, bufferId; 14
0B19EC 17 00 A0    0322*      db 23,0,0xA0
0B19EF FE FF       0323*      dw 65534 ; workingBufferId
0B19F1 0E          0324*      db 14 ; consolidate blocks
0B19F2             0325*  ; the "expand bitmap" command is:
0B19F2             0326*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0B19F2 17 00 A0    0327*      db 23,0,0xA0
0B19F5 00 00       0328*  @bufferId0: dw 0x0000 ; targetBufferId
0B19F7 48          0329*      db 0x48 ; given as decimal command 72 in the docs
0B19F8 02          0330*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
0B19F9 FE FF       0331*      dw 65534 ; sourceBufferId
0B19FB 00 7F BF FF 0332*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
0B19FF             0333*  ; reverse the byte order to fix endian-ness:
0B19FF             0334*  ; Command 24: Reverse the order of data of blocks within a buffer
0B19FF             0335*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
0B19FF             0336*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0B19FF 17 00 A0    0337*      db 23,0,0xA0
0B1A02 00 00       0338*  @bufferId2:    dw 0x0000 ; targetBufferId
0B1A04 18          0339*      db 24 ; reverse byte order
0B1A05 04          0340*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
0B1A06 04 00       0341*      dw 4 ; size (4 bytes)
0B1A08             0342*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0B1A08             0343*  ; VDU 23,27,&20,targetBufferID%;
0B1A08 17 1B 20    0344*      db 23,27,0x20 ; select bitmap
0B1A0B 00 00       0345*  @bufferId1: dw 0x0000 ; targetBufferId
0B1A0D             0346*  ; VDU 23,27,&21,width%;height%;0
0B1A0D 17 1B 21    0347*      db 23,27,0x21 ; create bitmap from buffer
0B1A10 00 00       0348*  @width: dw 0x0000
0B1A12 00 00       0349*  @height: dw 0x0000
0B1A14 00          0350*      db 0x00 ; rgba8888 format
0B1A15             0351*  @end:
0B1A15             0352*  
0B1A15             0353*  ; scratch variables
0B1A15 00 00 00    0354*  bufferId0: dl 0x000000
0B1A18 00 00 00    0355*  bufferId1: dl 0x000000
0B1A1B             0356*  
0B1A1B             0357*  ; load a vdu buffer from local memory
0B1A1B             0358*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0B1A1B             0359*  vdu_load_buffer:
0B1A1B ED 43 44 1A 0360*      ld (@length),bc
       0B          
0B1A20 D5          0361*      push de ; save data pointer
0B1A21             0362*  ; send the vdu command string
0B1A21 7D          0363*      ld a,l
0B1A22 32 41 1A 0B 0364*      ld (@bufferId),a
0B1A26 7C          0365*      ld a,h
0B1A27 32 42 1A 0B 0366*      ld (@bufferId+1),a
0B1A2B 21 3E 1A 0B 0367*      ld hl,@cmd
0B1A2F 01 08 00 00 0368*      ld bc,@end-@cmd
0B1A33 5B DF       0369*      rst.lil $18
0B1A35             0370*  ; send the buffer data
0B1A35 E1          0371*      pop hl ; pointer to data
0B1A36 ED 4B 44 1A 0372*      ld bc,(@length)
       0B          
0B1A3B 5B DF       0373*      rst.lil $18 ; send it
0B1A3D C9          0374*      ret
0B1A3E             0375*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0B1A3E 17 00 A0    0376*  @cmd:       db 23,0,0xA0
0B1A41 00 00       0377*  @bufferId:	dw 0x0000
0B1A43 00          0378*  		    db 0 ; load buffer
0B1A44 00 00       0379*  @length:	dw 0x0000
0B1A46 00          0380*  @end: db 0 ; padding
0B1A47             0381*  
0B1A47             0382*  ; clear a buffer
0B1A47             0383*  ; inputs: hl = bufferId
0B1A47             0384*  vdu_clear_buffer:
0B1A47 7D          0385*      ld a,l
0B1A48 32 5F 1A 0B 0386*      ld (@bufferId),a
0B1A4C 7C          0387*      ld a,h
0B1A4D 32 60 1A 0B 0388*      ld (@bufferId+1),a
0B1A51 21 5C 1A 0B 0389*      ld hl,@cmd
0B1A55 01 06 00 00 0390*      ld bc,@end-@cmd
0B1A59 5B DF       0391*      rst.lil $18
0B1A5B C9          0392*      ret
0B1A5C 17 00 A0    0393*  @cmd:       db 23,0,0xA0
0B1A5F 00 00       0394*  @bufferId:	dw 0x0000
0B1A61 02          0395*  		    db 2 ; clear buffer
0B1A62             0396*  @end:
0B1A62             0397*  
0B1A62             0398*  vdu_clear_all_buffers:
0B1A62             0399*  ; clear all buffers
0B1A62 21 6D 1A 0B 0400*      ld hl,@beg
0B1A66 01 06 00 00 0401*      ld bc,@end-@beg
0B1A6A 5B DF       0402*      rst.lil $18
0B1A6C C9          0403*      ret
0B1A6D 17 00 A0    0404*  @beg: db 23,0,$A0
0B1A70 FF FF       0405*        dw -1 ; clear all buffers
0B1A72 02          0406*        db 2  ; command 2: clear a buffer
0B1A73             0407*  @end:
0B1A73             0408*  
0B1A73             0409*  ; Command 14: Consolidate blocks in a buffer
0B1A73             0410*  vdu_consolidate_buffer:
0B1A73             0411*  ; set parameters for vdu call
0B1A73 7D          0412*      ld a,l
0B1A74 32 8B 1A 0B 0413*      ld (@bufferId),a
0B1A78 7C          0414*      ld a,h
0B1A79 32 8C 1A 0B 0415*      ld (@bufferId+1),a
0B1A7D 21 88 1A 0B 0416*      ld hl,@beg
0B1A81 01 06 00 00 0417*      ld bc,@end-@beg
0B1A85 5B DF       0418*      rst.lil $18
0B1A87 C9          0419*      ret
0B1A88             0420*  ; VDU 23, 0, &A0, bufferId; 14
0B1A88 17 00 A0    0421*  @beg: db 23,0,0xA0
0B1A8B 00 00       0422*  @bufferId: dw 0x0000
0B1A8D 0E          0423*             db 14
0B1A8E             0424*  @end:
0B1A8E             0425*  
0B1A8E             0426*  ; load an image file to a buffer and make it a bitmap
0B1A8E             0427*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
0B1A8E             0428*  vdu_load_img:
0B1A8E             0429*  ; back up image type and dimension parameters
0B1A8E 22 15 1A 0B 0430*      ld (bufferId0),hl
0B1A92 F5          0431*      push af
0B1A93 C5          0432*  	push bc
0B1A94 D5          0433*  	push de
0B1A95             0434*  ; load the image
0B1A95 CD B0 1A 0B 0435*  	call vdu_load_buffer_from_file
0B1A99             0436*  ; now make it a bitmap
0B1A99 2A 15 1A 0B 0437*      ld hl,(bufferId0)
0B1A9D CD 73 1A 0B 0438*      call vdu_consolidate_buffer
0B1AA1 2A 15 1A 0B 0439*      ld hl,(bufferId0)
0B1AA5 CD 70 19 0B 0440*      call vdu_buff_select
0B1AA9 D1          0441*  	pop de ; image height
0B1AAA C1          0442*  	pop bc ; image width
0B1AAB F1          0443*  	pop af ; image type
0B1AAC C3 85 19 0B 0444*  	jp vdu_bmp_create ; will return to caller from there
0B1AB0             0445*  
0B1AB0             0446*  ; inputs: hl = bufferId; iy = pointer to filename
0B1AB0             0447*  vdu_load_buffer_from_file:
0B1AB0 22 15 1A 0B 0448*      ld (bufferId0),hl
0B1AB4             0449*  
0B1AB4             0450*  ; clear target buffer
0B1AB4 CD 47 1A 0B 0451*      call vdu_clear_buffer
0B1AB8             0452*  
0B1AB8             0453*  ; open the file in read mode
0B1AB8             0454*  ; Open a file
0B1AB8             0455*  ; HLU: Filename
0B1AB8             0456*  ;   C: Mode
0B1AB8             0457*  ; Returns:
0B1AB8             0458*  ;   A: Filehandle, or 0 if couldn't open
0B1AB8 FD E5       0459*  	push iy ; pointer to filename
0B1ABA E1          0460*  	pop hl
0B1ABB 0E 01       0461*  	ld c,fa_read
0B1ABD             0462*      MOSCALL mos_fopen
0B1ABD 3E 0A       0001*M 			LD	A, function
0B1ABF 5B CF       0002*M 			RST.L	08h
0B1AC1 32 FC 1A 0B 0463*      ld (@filehandle),a
0B1AC5             0464*  
0B1AC5             0465*  @read_file:
0B1AC5             0466*  ; Read a block of data from a file
0B1AC5             0467*  ;   C: Filehandle
0B1AC5             0468*  ; HLU: Pointer to where to write the data to
0B1AC5             0469*  ; DEU: Number of bytes to read
0B1AC5             0470*  ; Returns:
0B1AC5             0471*  ; DEU: Number of bytes read
0B1AC5 3A FC 1A 0B 0472*      ld a,(@filehandle)
0B1AC9 4F          0473*      ld c,a
0B1ACA 21 00 E0 B7 0474*      ld hl,filedata
0B1ACE 11 00 20 00 0475*      ld de,8192 ; max we can read into onboard sram at one time
0B1AD2             0476*      MOSCALL mos_fread
0B1AD2 3E 1A       0001*M 			LD	A, function
0B1AD4 5B CF       0002*M 			RST.L	08h
0B1AD6             0477*  
0B1AD6             0478*  ; ; DEBUG: print chunk size
0B1AD6             0479*  ;     push de
0B1AD6             0480*  ;     pop hl
0B1AD6             0481*  ;     call printDec
0B1AD6             0482*  ;     call printNewLine
0B1AD6             0483*  
0B1AD6             0484*  ; test de for zero bytes read
0B1AD6 21 00 00 00 0485*      ld hl,0
0B1ADA AF          0486*      xor a ; clear carry
0B1ADB ED 52       0487*      sbc hl,de
0B1ADD CA F3 1A 0B 0488*      jp z,@close_file
0B1AE1             0489*  
0B1AE1             0490*  ; load a vdu buffer from local memory
0B1AE1             0491*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0B1AE1 2A 15 1A 0B 0492*      ld hl,(bufferId0)
0B1AE5 D5          0493*      push de ; chunksize
0B1AE6 C1          0494*      pop bc
0B1AE7 11 00 E0 B7 0495*      ld de,filedata
0B1AEB CD 1B 1A 0B 0496*      call vdu_load_buffer
0B1AEF             0497*  
0B1AEF             0498*  ; ; print progress breadcrumbs
0B1AEF             0499*  ;     ld a,'.'
0B1AEF             0500*  ;     rst.lil 10h
0B1AEF             0501*  
0B1AEF             0502*  ; read the next block
0B1AEF C3 C5 1A 0B 0503*      jp @read_file
0B1AF3             0504*  
0B1AF3             0505*  ; close the file
0B1AF3             0506*  @close_file:
0B1AF3 3A FC 1A 0B 0507*      ld a,(@filehandle)
0B1AF7             0508*      MOSCALL mos_fclose
0B1AF7 3E 0B       0001*M 			LD	A, function
0B1AF9 5B CF       0002*M 			RST.L	08h
0B1AFB C9          0509*      ret ; vdu_load_buffer_from_file
0B1AFC             0510*  
0B1AFC 00          0511*  @filehandle: db 0 ; file handle
0B1AFD 00 00 00    0512*  @fil: dl 0 ; pointer to FIL struct
0B1B00             0513*  
0B1B00 00 00 00    0514*  @chunkpointer: dl 0 ; pointer to current chunk
0B1B03             0515*  
0B1B03             0516*  ; File information structure (FILINFO)
0B1B03             0517*  @filinfo:
0B1B03 00 00 00 00 0518*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
0B1B07 00 00       0519*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
0B1B09 00 00       0520*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
0B1B0B 00          0521*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
0B1B0C 00 00 00 00 0522*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
0B1B19 00 00 00 00 0523*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0B1C19             0026       ; include "vdu_fonts.inc"
0B1C19             0027       include "vdu_plot.inc"
0B1C19             0001*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0B1C19             0002*  ; PLOT code 	(Decimal) 	Effect
0B1C19             0003*  ; &00-&07 	0-7 	Solid line, includes both ends
0B1C19             0004*  plot_sl_both: equ 0x00
0B1C19             0005*  
0B1C19             0006*  ; &08-&0F 	8-15 	Solid line, final point omitted
0B1C19             0007*  plot_sl_first: equ 0x08
0B1C19             0008*  
0B1C19             0009*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
0B1C19             0010*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
0B1C19             0011*  
0B1C19             0012*  ; &20-&27 	32-39 	Solid line, first point omitted
0B1C19             0013*  plot_sl_last: equ 0x20
0B1C19             0014*  
0B1C19             0015*  ; &28-&2F 	40-47 	Solid line, both points omitted
0B1C19             0016*  plot_sl_none: equ 0x28
0B1C19             0017*  
0B1C19             0018*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
0B1C19             0019*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
0B1C19             0020*  
0B1C19             0021*  ; &40-&47 	64-71 	Point plot
0B1C19             0022*  plot_pt: equ 0x40
0B1C19             0023*  
0B1C19             0024*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
0B1C19             0025*  plot_lf_lr_non_bg: equ 0x48
0B1C19             0026*  
0B1C19             0027*  ; &50-&57 	80-87 	Triangle fill
0B1C19             0028*  plot_tf: equ 0x50
0B1C19             0029*  
0B1C19             0030*  ; &58-&5F 	88-95 	Line fill right to background §§
0B1C19             0031*  plot_lf_r_bg: equ 0x58
0B1C19             0032*  
0B1C19             0033*  ; &60-&67 	96-103 	Rectangle fill
0B1C19             0034*  plot_rf: equ 0x60
0B1C19             0035*  
0B1C19             0036*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
0B1C19             0037*  plot_lf_lr_fg: equ 0x60
0B1C19             0038*  
0B1C19             0039*  ; &70-&77 	112-119 	Parallelogram fill
0B1C19             0040*  plot_pf: equ 0x70
0B1C19             0041*  
0B1C19             0042*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
0B1C19             0043*  plot_lf_r_non_fg: equ 0x78
0B1C19             0044*  
0B1C19             0045*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
0B1C19             0046*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
0B1C19             0047*  
0B1C19             0048*  ; &90-&97 	144-151 	Circle outline
0B1C19             0049*  plot_co: equ 0x90
0B1C19             0050*  
0B1C19             0051*  ; &98-&9F 	152-159 	Circle fill
0B1C19             0052*  plot_cf: equ 0x98
0B1C19             0053*  
0B1C19             0054*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
0B1C19             0055*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
0B1C19             0056*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
0B1C19             0057*  
0B1C19             0058*  ; &B8-&BF 	184-191 	Rectangle copy/move
0B1C19             0059*  plot_rcm: equ 0xB8
0B1C19             0060*  
0B1C19             0061*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
0B1C19             0062*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
0B1C19             0063*  ; &D0-&D7 	208-215 	Not defined
0B1C19             0064*  ; &D8-&DF 	216-223 	Not defined
0B1C19             0065*  ; &E0-&E7 	224-231 	Not defined
0B1C19             0066*  
0B1C19             0067*  ; &E8-&EF 	232-239 	Bitmap plot §
0B1C19             0068*  plot_bmp: equ 0xE8
0B1C19             0069*  
0B1C19             0070*  ; &F0-&F7 	240-247 	Not defined
0B1C19             0071*  ; &F8-&FF 	248-255 	Not defined
0B1C19             0072*  
0B1C19             0073*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
0B1C19             0074*  ; Agon Console8 VDP 2.2.0
0B1C19             0075*  
0B1C19             0076*  ; Within each group of eight plot codes, the effects are as follows:
0B1C19             0077*  ; Plot code 	Effect
0B1C19             0078*  ; 0 	Move relative
0B1C19             0079*  mv_rel: equ 0
0B1C19             0080*  
0B1C19             0081*  ; 1 	Plot relative in current foreground colour
0B1C19             0082*  dr_rel_fg: equ 1
0B1C19             0083*  
0B1C19             0084*  ; 2 	Not supported (Plot relative in logical inverse colour)
0B1C19             0085*  ; 3 	Plot relative in current background colour
0B1C19             0086*  dr_rel_bg: equ 3
0B1C19             0087*  
0B1C19             0088*  ; 4 	Move absolute
0B1C19             0089*  mv_abs: equ 4
0B1C19             0090*  
0B1C19             0091*  ; 5 	Plot absolute in current foreground colour
0B1C19             0092*  dr_abs_fg: equ 5
0B1C19             0093*  
0B1C19             0094*  ; 6 	Not supported (Plot absolute in logical inverse colour)
0B1C19             0095*  ; 7 	Plot absolute in current background colour
0B1C19             0096*  dr_abs_bg: equ 7
0B1C19             0097*  
0B1C19             0098*  ; Codes 0-3 use the position data provided as part of the command
0B1C19             0099*  ; as a relative position, adding the position given to the current
0B1C19             0100*  ; graphical cursor position. Codes 4-7 use the position data provided
0B1C19             0101*  ; as part of the command as an absolute position, setting the current
0B1C19             0102*  ; graphical cursor position to the position given.
0B1C19             0103*  
0B1C19             0104*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
0B1C19             0105*  ; current pixel colour. These operations cannot currently be supported
0B1C19             0106*  ; by the graphics system the Agon VDP uses, so these codes are not
0B1C19             0107*  ; supported. Support for these codes may be added in a future version
0B1C19             0108*  ; of the VDP firmware.
0B1C19             0109*  
0B1C19             0110*  ; 16 colour palette constants
0B1C19             0111*  c_black: equ 0
0B1C19             0112*  c_red_dk: equ 1
0B1C19             0113*  c_green_dk: equ 2
0B1C19             0114*  c_yellow_dk: equ 3
0B1C19             0115*  c_blue_dk: equ 4
0B1C19             0116*  c_magenta_dk: equ 5
0B1C19             0117*  c_cyan_dk: equ 6
0B1C19             0118*  c_grey: equ 7
0B1C19             0119*  c_grey_dk: equ 8
0B1C19             0120*  c_red: equ 9
0B1C19             0121*  c_green: equ 10
0B1C19             0122*  c_yellow: equ 11
0B1C19             0123*  c_blue: equ 12
0B1C19             0124*  c_magenta: equ 13
0B1C19             0125*  c_cyan: equ 14
0B1C19             0126*  c_white: equ 15
0B1C19             0127*  
0B1C19             0128*  ; VDU 25, mode, x; y;: PLOT command
0B1C19             0129*  ; inputs: a=mode, bc=x0, de=y0
0B1C19             0130*  vdu_plot:
0B1C19 32 33 1C 0B 0131*      ld (@mode),a
0B1C1D ED 43 34 1C 0132*      ld (@x0),bc
       0B          
0B1C22 ED 53 36 1C 0133*      ld (@y0),de
       0B          
0B1C27 21 32 1C 0B 0134*  	ld hl,@cmd
0B1C2B 01 06 00 00 0135*  	ld bc,@end-@cmd
0B1C2F 5B DF       0136*  	rst.lil $18
0B1C31 C9          0137*  	ret
0B1C32 19          0138*  @cmd:   db 25
0B1C33 00          0139*  @mode:  db 0
0B1C34 00 00       0140*  @x0: 	dw 0
0B1C36 00 00       0141*  @y0: 	dw 0
0B1C38 00          0142*  @end:   db 0 ; extra byte to soak up deu
0B1C39             0143*  
0B1C39             0144*  ; VDU 25, mode, x; y;: PLOT command
0B1C39             0145*  ; USING 16.8 FIXED POINT COORDINATES
0B1C39             0146*  ; inputs: a=mode, ub.c=x0, ud.e=y0
0B1C39             0147*  vdu_plot_168:
0B1C39 ED 53 55 1C 0148*      ld (@y0-1),de ; load in reverse order to avoid stomping on inputs
       0B          
0B1C3E ED 43 53 1C 0149*      ld (@x0-1),bc ; integer portion only
       0B          
0B1C43 32 53 1C 0B 0150*      ld (@mode),a  ; load this order b/c we shifted bc right
0B1C47 21 52 1C 0B 0151*  	ld hl,@cmd
0B1C4B 01 06 00 00 0152*  	ld bc,@end-@cmd
0B1C4F 5B DF       0153*  	rst.lil $18
0B1C51             0154*      ; ld hl,@cmd
0B1C51             0155*      ; ld a,6
0B1C51             0156*      ; call dumpMemoryHex
0B1C51             0157*      ; call printNewLine
0B1C51 C9          0158*  	ret
0B1C52 19          0159*  @cmd:   db 25
0B1C53 00          0160*  @mode:  db 0
0B1C54 00 00       0161*  @x0: 	dw 0
0B1C56 00 00       0162*  @y0: 	dw 0
0B1C58             0163*  @end:  ; no padding required b/c we shifted de right
0B1C58             0164*  
0B1C58             0165*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0B1C58             0166*  ; &E8-&EF 	232-239 	Bitmap plot §
0B1C58             0167*  ; VDU 25, mode, x; y;: PLOT command
0B1C58             0168*  ; inputs: bc=x0, de=y0
0B1C58             0169*  ; prerequisites: vdu_buff_select
0B1C58             0170*  vdu_plot_bmp:
0B1C58 ED 43 6F 1C 0171*      ld (@x0),bc
       0B          
0B1C5D ED 53 71 1C 0172*      ld (@y0),de
       0B          
0B1C62 21 6D 1C 0B 0173*  	ld hl,@cmd
0B1C66 01 06 00 00 0174*  	ld bc,@end-@cmd
0B1C6A 5B DF       0175*  	rst.lil $18
0B1C6C C9          0176*  	ret
0B1C6D 19          0177*  @cmd:   db 25
0B1C6E ED          0178*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0B1C6F 00 00       0179*  @x0: 	dw 0x0000
0B1C71 00 00       0180*  @y0: 	dw 0x0000
0B1C73 00          0181*  @end:   db 0x00 ; padding
0B1C74             0182*  
0B1C74             0183*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0B1C74             0184*  ; &E8-&EF 	232-239 	Bitmap plot §
0B1C74             0185*  ; VDU 25, mode, x; y;: PLOT command
0B1C74             0186*  ; inputs: bc=x0, de=y0
0B1C74             0187*  ; USING 16.8 FIXED POINT COORDINATES
0B1C74             0188*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
0B1C74             0189*  ;   the fractional portiion of the inputs are truncated
0B1C74             0190*  ;   leaving only the 16-bit integer portion
0B1C74             0191*  ; prerequisites: vdu_buff_select
0B1C74             0192*  vdu_plot_bmp168:
0B1C74             0193*  ; populate in the reverse of normal to keep the
0B1C74             0194*  ; inputs from stomping on each other
0B1C74 ED 53 92 1C 0195*      ld (@y0-1),de
       0B          
0B1C79 ED 43 90 1C 0196*      ld (@x0-1),bc
       0B          
0B1C7E 3E ED       0197*      ld a,plot_bmp+dr_abs_fg ; 0xED
0B1C80 32 90 1C 0B 0198*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
0B1C84 21 8F 1C 0B 0199*  	ld hl,@cmd
0B1C88 01 06 00 00 0200*  	ld bc,@end-@cmd
0B1C8C 5B DF       0201*  	rst.lil $18
0B1C8E C9          0202*  	ret
0B1C8F 19          0203*  @cmd:   db 25
0B1C90 ED          0204*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0B1C91 00 00       0205*  @x0: 	dw 0x0000
0B1C93 00 00       0206*  @y0: 	dw 0x0000
0B1C95             0207*  @end:  ; no padding required b/c we shifted de right
0B1C95             0208*  
0B1C95             0209*  ; draw a filled rectangle
0B1C95             0210*  vdu_plot_rf:
0B1C95 ED 43 BC 1C 0211*      ld (@x0),bc
       0B          
0B1C9A ED 53 BE 1C 0212*      ld (@y0),de
       0B          
0B1C9F DD 22 C2 1C 0213*      ld (@x1),ix
       0B          
0B1CA4 FD 22 C4 1C 0214*      ld (@y1),iy
       0B          
0B1CA9 3E 19       0215*      ld a,25 ; we have to reload the 2nd plot command
0B1CAB 32 C0 1C 0B 0216*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0B1CAF 21 BA 1C 0B 0217*  	ld hl,@cmd0
0B1CB3 01 0C 00 00 0218*  	ld bc,@end-@cmd0
0B1CB7 5B DF       0219*  	rst.lil $18
0B1CB9 C9          0220*      ret
0B1CBA 19          0221*  @cmd0:  db 25 ; plot
0B1CBB 04          0222*  @arg0:  db plot_sl_both+mv_abs
0B1CBC 00 00       0223*  @x0:    dw 0x0000
0B1CBE 00 00       0224*  @y0:    dw 0x0000
0B1CC0 19          0225*  @cmd1:  db 25 ; plot
0B1CC1 65          0226*  @arg1:  db plot_rf+dr_abs_fg
0B1CC2 00 00       0227*  @x1:    dw 0x0000
0B1CC4 00 00       0228*  @y1:    dw 0x0000
0B1CC6 00          0229*  @end:   db 0x00 ; padding
0B1CC7             0230*  
0B1CC7             0231*  ; draw a filled circle
0B1CC7             0232*  vdu_plot_cf:
0B1CC7 ED 43 EE 1C 0233*      ld (@x0),bc
       0B          
0B1CCC ED 53 F0 1C 0234*      ld (@y0),de
       0B          
0B1CD1 DD 22 F4 1C 0235*      ld (@x1),ix
       0B          
0B1CD6 FD 22 F6 1C 0236*      ld (@y1),iy
       0B          
0B1CDB 3E 19       0237*      ld a,25 ; we have to reload the 2nd plot command
0B1CDD 32 F2 1C 0B 0238*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0B1CE1 21 EC 1C 0B 0239*  	ld hl,@cmd0
0B1CE5 01 0C 00 00 0240*  	ld bc,@end-@cmd0
0B1CE9 5B DF       0241*  	rst.lil $18
0B1CEB C9          0242*      ret
0B1CEC 19          0243*  @cmd0:  db 25 ; plot
0B1CED 04          0244*  @arg0:  db plot_sl_both+mv_abs
0B1CEE 00 00       0245*  @x0:    dw 0x0000
0B1CF0 00 00       0246*  @y0:    dw 0x0000
0B1CF2 19          0247*  @cmd1:  db 25 ; plot
0B1CF3 9D          0248*  @arg1:  db plot_cf+dr_abs_fg
0B1CF4 00 00       0249*  @x1:    dw 0x0000
0B1CF6 00 00       0250*  @y1:    dw 0x0000
0B1CF8 00          0251*  @end:   db 0x00 ; padding
0B1CF9             0252*  
0B1CF9             0253*  ; VDU 25, mode, x; y;: PLOT command
0B1CF9             0254*  ; inputs: a=mode, ix=x0, iy=y0
0B1CF9             0255*  plot:
0B1CF9 32 13 1D 0B 0256*      ld (@mode),a
0B1CFD DD 22 14 1D 0257*      ld (@x0),ix
       0B          
0B1D02 FD 22 16 1D 0258*      ld (@y0),iy
       0B          
0B1D07 21 12 1D 0B 0259*  	ld hl,@cmd
0B1D0B 01 06 00 00 0260*  	ld bc,@end-@cmd
0B1D0F 5B DF       0261*  	rst.lil $18
0B1D11 C9          0262*  	ret
0B1D12 19          0263*  @cmd:   db 25
0B1D13 00          0264*  @mode:  db 0
0B1D14 00 00       0265*  @x0: 	dw 0
0B1D16 00 00       0266*  @y0: 	dw 0
0B1D18 00          0267*  @end:   db 0 ; padding
0B1D19             0268*  
0B1D19             0269*  ; VDU 5: Write text at graphics cursor
0B1D19             0270*  ; inputs: hl = pointer to text, ix=x0, iy=y0
0B1D19             0271*  ; prerequisites: gcol foreground set, VDU 5 set
0B1D19             0272*  plot_text:
0B1D19 E5          0273*      push hl ; save text pointer
0B1D1A             0274*  ; move graphics cursor to x0, y0
0B1D1A 3E 44       0275*      ld a,plot_pt+mv_abs
0B1D1C CD F9 1C 0B 0276*      call plot
0B1D20             0277*  ; write text
0B1D20 E1          0278*      pop hl ; restore text pointer
0B1D21 CD 73 02 0B 0279*      call printString
0B1D25 C9          0280*      ret
0B1D26             0028   
0B1D26             0029   ; SHAWN'S INCLUDES
0B1D26             0030   	INCLUDE	"strings24.asm"
0B1D26             0001*  ;------------------------------------------------------------------------
0B1D26             0002*  ;  strings24.asm
0B1D26             0003*  ;
0B1D26             0004*  ; 24-bit native ez80 strings routines for numerical processing
0B1D26             0005*  ;  Copyright (c) Shawn Sijnstra 2024
0B1D26             0006*  ;  MIT license
0B1D26             0007*  ;------------------------------------------------------------------------
0B1D26             0008*  
0B1D26             0009*  ;Print signed value in HLU in decimal with leading 0s removed
0B1D26             0010*  ; and postpended with a minus sign if was negative
0B1D26             0011*  ; Uses HLU, DEU, BCU
0B1D26             0012*  print_HLU_s24:
0B1D26 CD 37 08 0B 0013*  	call hlu_abs
0B1D2A F5          0014*  	push af ; save the sign and zero flags
0B1D2B CD 36 1D 0B 0015*  	call print_HLU_u24
0B1D2F F1          0016*  	pop af
0B1D30 F0          0017*  	ret p ; HLU was positive so nothig more to do
0B1D31 3E 2D       0018*  	ld a,'-'
0B1D33 5B D7       0019*  	rst.lil 10h
0B1D35 C9          0020*  	ret
0B1D36             0021*  
0B1D36             0022*  ;------------------------------------------------------------------------
0B1D36             0023*  ;Full print and buffer routine so you can adjust behaviour
0B1D36             0024*  ; Double-Dabble AKA shift-and-add-3 algorithm
0B1D36             0025*  ; breakdown at https://en.wikipedia.org/wiki/Double_dabble
0B1D36             0026*  ;Print value in HLU in decimal with leading 0s removed
0B1D36             0027*  ; Uses HLU, DEU, BCU
0B1D36             0028*  ;------------------------------------------------------------------------
0B1D36             0029*  
0B1D36             0030*  print_HLU_u24:
0B1D36 22 13 1E 0B 0031*  	ld	(hex_temp),hl
0B1D3A 06 08       0032*  	ld	b,8	;8 digits max here with 24 bit unsigned
0B1D3C 11 16 1E 0B 0033*  	ld	de,outbuf
0B1D40 D5          0034*  	push	de
0B1D41 21 07 00 00 0035*  	ld	hl,7
0B1D45 19          0036*  	add	hl,de
0B1D46 E5          0037*  	push	hl
0B1D47 D1          0038*  	pop	de	;copy HLU to DEU
0B1D48 AF          0039*  	xor	a
0B1D49             0040*  _pde_u_zerobuf:
0B1D49 77          0041*  	ld	(hl),a	;zero out the output
0B1D4A 2B          0042*  	dec	hl
0B1D4B 10 FC       0043*  	djnz	_pde_u_zerobuf
0B1D4D             0044*  
0B1D4D 0E 18       0045*  	ld c,3 * 8	;4 * 8	; number of loops through NUM_SRC_BYTES * 8
0B1D4F             0046*  _bcd_Convert:
0B1D4F             0047*  
0B1D4F 21 13 1E 0B 0048*  	ld hl,hex_temp
0B1D53             0049*  ;
0B1D53 CB 26       0050*  	sla (hl)
0B1D55 23          0051*  	inc hl
0B1D56 CB 16       0052*  	rl (hl)
0B1D58 23          0053*  	inc hl
0B1D59 CB 16       0054*  	rl (hl)		;24 bits rolled right
0B1D5B             0055*  
0B1D5B             0056*  
0B1D5B 06 08       0057*          ld	b,8	;8 digits max for 24 bit decimal output
0B1D5D D5          0058*  	push	de
0B1D5E E1          0059*  	pop	hl
0B1D5F             0060*  
0B1D5F             0061*  _bcd_Add3:
0B1D5F 7E          0062*  	ld	a,(hl)
0B1D60 8F          0063*  	adc	a
0B1D61 27          0064*          daa		;this is add 3 after shifting left; i.e. add 6.
0B1D62 FE 10       0065*  	cp	10h	;did we roll over nibble?
0B1D64 3F          0066*  	ccf
0B1D65 CB A7       0067*  	res	4,a
0B1D67             0068*  
0B1D67 77          0069*          ld (hl),a
0B1D68 2B          0070*  	dec	hl
0B1D69 10 F4       0071*          djnz	_bcd_Add3	;loop for decimal digits
0B1D6B 0D          0072*          dec c
0B1D6C 20 E1       0073*          jr nz, _bcd_Convert	;loop around
0B1D6E             0074*  
0B1D6E             0075*  
0B1D6E E1          0076*  	pop	hl
0B1D6F E5          0077*  	push	hl
0B1D70 06 07       0078*          ld	b,8-1		;one less than total in case output is '0'
0B1D72             0079*  _pde_u_make_ascii:
0B1D72 7E          0080*  	ld	a,(hl)
0B1D73 B7          0081*  	or	a
0B1D74 20 05       0082*  	jr	nz,_pde_u_make_ascii2
0B1D76 36 20       0083*  	ld	(hl),' '
0B1D78 23          0084*  	inc	hl
0B1D79 10 F7       0085*  	djnz	_pde_u_make_ascii
0B1D7B             0086*  _pde_u_make_ascii2:
0B1D7B 04          0087*  	inc	b
0B1D7C             0088*  _pde_u_make_ascii3:
0B1D7C 7E          0089*  	ld	a,(hl)
0B1D7D F6 30       0090*  	or	30h
0B1D7F 77          0091*  	ld	(hl),a
0B1D80 23          0092*  	inc	hl
0B1D81 10 F9       0093*  	djnz	_pde_u_make_ascii3
0B1D83             0094*  
0B1D83 E1          0095*  	pop	hl
0B1D84 06 08       0096*  	ld	b,8
0B1D86             0097*  _pde_u_final_out:
0B1D86 7E          0098*  	ld	a,(hl)
0B1D87 23          0099*  	inc	hl
0B1D88 FE 20       0100*  	cp	' '
0B1D8A 28 02       0101*  	jr	z,_pde_u_final_out_strip
0B1D8C 5B D7       0102*  	rst.lil	10h
0B1D8E             0103*  _pde_u_final_out_strip:
0B1D8E 10 F6       0104*  	djnz	_pde_u_final_out
0B1D90 C9          0105*  	ret
0B1D91             0106*  
0B1D91             0107*  ;------------------------------------------------------------------------
0B1D91             0108*  ; is_digit
0B1D91             0109*  ; C flag set if A is a digit
0B1D91             0110*  ; preserves all registers
0B1D91             0111*  ;------------------------------------------------------------------------
0B1D91             0112*  is_digit:
0B1D91 FE 30       0113*  	cp	'0'
0B1D93 3F          0114*  	ccf
0B1D94 D0          0115*  	ret	nc	;less that '0'
0B1D95 FE 3A       0116*  	cp	'9' + 1
0B1D97 C9          0117*  	ret
0B1D98             0118*  
0B1D98             0119*  
0B1D98             0120*  ;------------------------------------------------------------------------
0B1D98             0121*  ; char2hex
0B1D98             0122*  ; Input: ASCII nibble in A
0B1D98             0123*  ; Returns: if valid nibble value in A; else 0FFh in A
0B1D98             0124*  ;------------------------------------------------------------------------
0B1D98             0125*  char2hex:
0B1D98 FE 30       0126*  	CP	'0'
0B1D9A 38 1D       0127*  	JR	C, char_not_hex
0B1D9C FE 3A       0128*  	CP	'9' + 1
0B1D9E 30 03       0129*  	JR	NC, char_not_09
0B1DA0 D6 30       0130*  	sub	'0'
0B1DA2 C9          0131*  	ret
0B1DA3             0132*  
0B1DA3             0133*  char_not_09:
0B1DA3             0134*  	; char is not 0 to 9. Try upper case
0B1DA3 FE 41       0135*  	CP	'A'
0B1DA5 38 12       0136*  	JR	C, char_not_hex
0B1DA7 FE 47       0137*  	CP	'F' + 1
0B1DA9 30 03       0138*  	JR	NC, char_not_AF
0B1DAB D6 37       0139*  	sub	'A'-10
0B1DAD C9          0140*  	ret
0B1DAE             0141*  
0B1DAE             0142*  char_not_AF:
0B1DAE             0143*  	; char is not upper case A-F. Try lower
0B1DAE FE 61       0144*  	CP	'a'
0B1DB0 38 07       0145*  	JR	C, char_not_hex
0B1DB2 FE 67       0146*  	CP	'f' + 1
0B1DB4 30 03       0147*  	JR	NC, char_not_hex
0B1DB6 D6 57       0148*  	sub	'a' - 10
0B1DB8 C9          0149*  	RET
0B1DB9             0150*  
0B1DB9             0151*  char_not_hex:
0B1DB9 3E FF       0152*   	ld	a,0FFh	;return -1 for not a valid hex digit
0B1DBB C9          0153*  	RET
0B1DBC             0154*  
0B1DBC             0155*  ;------------------------------------------------------------------------
0B1DBC             0156*  ;  newline
0B1DBC             0157*  ;  Output CR+LF; all registers preserved
0B1DBC             0158*  ;------------------------------------------------------------------------
0B1DBC             0159*  newline:
0B1DBC F5          0160*         push   AF
0B1DBD 3E 0D       0161*         LD     A, 13
0B1DBF 5B D7       0162*         RST.LIL    10h
0B1DC1 3E 0A       0163*         LD     A, 10
0B1DC3 5B D7       0164*         RST.LIL    10h
0B1DC5 F1          0165*         POP    AF
0B1DC6 C9          0166*         RET
0B1DC7             0167*  
0B1DC7             0168*  ;------------------------------------------------------------------------
0B1DC7             0169*  ;  put_nibble
0B1DC7             0170*  ;  Output a single hex nibble in A
0B1DC7             0171*  ;  All registers preserved
0B1DC7             0172*  ;------------------------------------------------------------------------
0B1DC7             0173*  put_nibble:
0B1DC7 F5          0174*  	push   AF
0B1DC8 C6 90       0175*  	add    a,090h ;Neat trick to convert hex nibble in A to ASCII
0B1DCA 27          0176*  	daa
0B1DCB CE 40       0177*  	adc    a,040h
0B1DCD 27          0178*  	daa
0B1DCE 5B D7       0179*  	RST.LIL    10h	;output character in A
0B1DD0 F1          0180*  	pop    AF
0B1DD1 C9          0181*  	ret
0B1DD2             0182*  
0B1DD2             0183*  ;------------------------------------------------------------------------
0B1DD2             0184*  ;  print_A
0B1DD2             0185*  ;  Output the 8-bit hex number A
0B1DD2             0186*  ;  All registers preserved
0B1DD2             0187*  ;------------------------------------------------------------------------
0B1DD2             0188*  print_A:
0B1DD2 F5          0189*  	push 	AF
0B1DD3 F5          0190*  	push 	AF	;save for second nibble
0B1DD4 0F          0191*  	rrca
0B1DD5 0F          0192*  	rrca
0B1DD6 0F          0193*  	rrca
0B1DD7 0F          0194*  	rrca
0B1DD8 E6 0F       0195*  	and	0Fh	;first nibble
0B1DDA CD C7 1D 0B 0196*  	call	put_nibble
0B1DDE F1          0197*  	pop 	AF
0B1DDF E6 0F       0198*  	and	0Fh	;second nibble
0B1DE1 CD C7 1D 0B 0199*  	call	put_nibble
0B1DE5 F1          0200*  	pop 	AF
0B1DE6 C9          0201*  	ret
0B1DE7             0202*  
0B1DE7             0203*  ;------------------------------------------------------------------------
0B1DE7             0204*  ;  print_HLU_hex
0B1DE7             0205*  ;  Output the 24-bit hex number HLU; other registers preserved
0B1DE7             0206*  ;------------------------------------------------------------------------
0B1DE7             0207*  print_HLU_hex:
0B1DE7 F5          0208*         push   AF
0B1DE8 22 13 1E 0B 0209*         ld     (hex_temp),hl
0B1DEC 3A 15 1E 0B 0210*         ld     a,(hex_temp+2)
0B1DF0 CD D2 1D 0B 0211*         call   print_A
0B1DF4 3A 14 1E 0B 0212*         ld     a,(hex_temp+1)
0B1DF8 CD D2 1D 0B 0213*         call   print_A
0B1DFC 3A 13 1E 0B 0214*         ld     a,(hex_temp)
0B1E00 CD D2 1D 0B 0215*         call   print_A
0B1E04 F1          0216*         POP    AF
0B1E05 C9          0217*         RET
0B1E06             0218*  
0B1E06             0219*  ;------------------------------------------------------------------------
0B1E06             0220*  ;  puts
0B1E06             0221*  ;  Output a zero-terminated string whose address is in HL; all
0B1E06             0222*  ;  registers preserved.
0B1E06             0223*  ;------------------------------------------------------------------------
0B1E06             0224*  puts:
0B1E06 F5          0225*         push   AF
0B1E07 C5          0226*         push   BC
0B1E08 01 00 00 00 0227*         ld     BC, 0                ; Set to 0, so length ignored...
0B1E0C 3E 00       0228*         ld     A, 0                 ; Use character in A as delimiter
0B1E0E 5B DF       0229*         RST.LIL    18h                  ; This calls a RST in the eZ80 address space
0B1E10 C1          0230*         pop    BC
0B1E11 F1          0231*         pop    AF
0B1E12 C9          0232*         ret
0B1E13             0233*  
0B1E13             0234*  ;------------------------------------------------------------------------
0B1E13             0235*  ; Data area
0B1E13             0236*  ; Storage for 24 bit conversion
0B1E13             0237*  ;------------------------------------------------------------------------
0B1E13             0238*  hex_temp:
0B1E13 00 00 00    0239*         dw24     0      ;3 bytes for HL used for both hex and decimal temp
0B1E16             0240*  
0B1E16             0241*  outbuf:
0B1E16 31 36 37 37 0242*  	db	"16777215 "	;largest number with an extra space
       37 32 31 35 
       20          
0B1E1F             0031   
0B1E1F             0032   ; APPLICATION INCLUDES
0B1E1F 55 73 61 67 0033   str_usage: ASCIZ "Usage: scratch <args>\r\n"
       65 3A 20 73 
       63 72 61 74 
       63 68 20 3C 
       61 72 67 73 
       3E 0D 0A 00 
0B1E37 45 72 72 6F 0034   str_error: ASCIZ "Error!\r\n"
       72 21 0D 0A 
       00          
0B1E40 53 75 63 63 0035   str_success: ASCIZ "Success!\r\n"
       65 73 73 21 
       0D 0A 00    
0B1E4B             0036   
0B1E4B             0037   ; This is a scratch moslet for testing new features
0B1E4B             0038   ; Parameters:
0B1E4B             0039   ;
0B1E4B             0040   
0B1E4B             0041   ; ========= BOILERPLATE MAIN LOOP =========
0B1E4B             0042   ; The main routine
0B1E4B             0043   ; IXU: argv - pointer to array of parameters
0B1E4B             0044   ;   C: argc - number of parameters
0B1E4B             0045   ; Returns:
0B1E4B             0046   ;  HL: Error code, or 0 if OK
0B1E4B             0047   
0B1E4B             0048   min_args: equ 3
0B1E4B             0049   
0B1E4B             0050   _main:
0B1E4B 79          0051       ld a,c              ; how many arguments?
0B1E4C FE 03       0052       cp min_args         ; not enough?
0B1E4E 30 1A       0053       jr nc,main          ; if enough, go to main loop
0B1E50 21 1F 1E 0B 0054       ld hl,str_usage     ; if not enough, print usage
0B1E54 CD 73 02 0B 0055       call printString
0B1E58             0056                           ; fall through to _main_end_error
0B1E58             0057   
0B1E58             0058   _main_end_error:
0B1E58 21 37 1E 0B 0059       ld hl,str_error     ; print error message
0B1E5C CD 73 02 0B 0060       call printString
0B1E60 21 13 00 00 0061       ld hl,19            ; return error code 19
0B1E64 C9          0062       ret
0B1E65             0063   
0B1E65             0064   _main_end_ok:
0B1E65             0065       ; ld hl,str_success   ; print success message
0B1E65             0066       ; call printString
0B1E65 21 00 00 00 0067       ld hl,0             ; return 0 for success
0B1E69 C9          0068       ret
0B1E6A             0069   
0B1E6A             0070   ; ========= BEGIN CUSTOM MAIN LOOP =========
0B1E6A             0071   main:
0B1E6A 0D          0072       dec c               ; decrement the argument count to skip the program name
0B1E6B             0073   
0B1E6B             0074   test_sdiv168:
0B1E6B             0075   ; get first numeric argument
0B1E6B CD ED 1F 0B 0076       call get_arg_s168 ; de = first numeric argument
0B1E6F D5          0077       push de
0B1E70 EB          0078       ex de,hl
0B1E71 CD 7C 06 0B 0079       call print_hex_hl
0B1E75 EB          0080       ex de,hl
0B1E76 CD 6B 04 0B 0081       call print_s168_de
0B1E7A             0082   
0B1E7A             0083   ; match on single number functions
0B1E7A FD 21 7A 1F 0084       ld iy,function
       0B          
0B1E7F CD 49 20 0B 0085       call match_next_and_print ; iy = function pointer, zero flag set if match
0B1E83 F5          0086       push af ; save zero flag
0B1E84 FD E5       0087       push iy ; save the function pointer
0B1E86 CA A8 1E 0B 0088       jp z,@execute
0B1E8A             0089   
0B1E8A             0090   ; match on two-number operators
0B1E8A FD E1       0091       pop iy ; dummy pops
0B1E8C F1          0092       pop af ; to balance stack
0B1E8D ED 32 FD    0093       lea ix,ix-3
0B1E90 FD 21 C7 1E 0094       ld iy,operator
       0B          
0B1E95 CD 49 20 0B 0095       call match_next_and_print ; iy = operator pointer, zero flag set if match
0B1E99 F5          0096       push af ; save zero flag
0B1E9A FD E5       0097       push iy ; save the operator pointer
0B1E9C             0098   
0B1E9C             0099   ; get second numeric argument if needed
0B1E9C CD ED 1F 0B 0100       call get_arg_s168 ; de = second argument
0B1EA0 CD AC 06 0B 0101       call print_hex_de
0B1EA4 CD 6B 04 0B 0102       call print_s168_de
0B1EA8             0103   
0B1EA8             0104   @execute:
0B1EA8 CD 88 02 0B 0105       call printNewLine
0B1EAC             0106   
0B1EAC FD E1       0107       pop iy ; restore the function/operator pointer
0B1EAE F1          0108       pop af ; restore zero flag
0B1EAF E1          0109       pop hl ; restore first argument
0B1EB0             0110   
0B1EB0 C2 58 1E 0B 0111       jp nz,_main_end_error
0B1EB4             0112   
0B1EB4             0113       callIY ; call the function
0B1EB4 01 BB 1E 0B 0001M          ld bc,$+7     ; Address of first instruction after the jump
0B1EB8 C5          0002M          push bc       ; which constitutes the return address
0B1EB9 FD E9       0003M          jp   (iy)     ; Jump to the address in IY
0B1EBB CD 88 02 0B 0114       call printNewLine
0B1EBF CD 88 02 0B 0115       call printNewLine
0B1EC3 C3 65 1E 0B 0116       jp _main_end_ok
0B1EC7             0117   
0B1EC7             0118   ; ========== DISPATCH TABLES ==========
0B1EC7             0119   operator:
0B1EC7 E2 1E 0B    0120       dl addition
0B1ECA F0 1E 0B    0121       dl subtract
0B1ECD 00 1F 0B    0122       dl multiply
0B1ED0 11 1F 0B    0123       dl divide
0B1ED3 2A 1F 0B    0124       dl tan
0B1ED6 31 1F 0B    0125       dl atan2
0B1ED9 3A 1F 0B    0126       dl polar2cart
0B1EDC 6C 1F 0B    0127       dl cart2polar
0B1EDF 00 00 00    0128       dl 0x000000 ; list terminator
0B1EE2             0129   addition:
0B1EE2 18 02       0130       jr @start
0B1EE4 2B 00       0131       asciz "+"
0B1EE6             0132   @start:
0B1EE6 19          0133       add hl,de
0B1EE7 CD 7C 06 0B 0134       call print_hex_hl
0B1EEB CD 4D 04 0B 0135       call print_s168_hl
0B1EEF C9          0136       ret
0B1EF0             0137   subtract:
0B1EF0 18 02       0138       jr @start
0B1EF2 2D 00       0139       asciz "-"
0B1EF4             0140   @start:
0B1EF4 AF          0141       xor a ; clear carry
0B1EF5 ED 52       0142       sbc hl,de
0B1EF7 CD 7C 06 0B 0143       call print_hex_hl
0B1EFB CD 4D 04 0B 0144       call print_s168_hl
0B1EFF C9          0145       ret
0B1F00             0146   multiply:
0B1F00 18 02       0147       jr @start
0B1F02 2A 00       0148       asciz "*"
0B1F04             0149   @start:
0B1F04 CD E2 09 0B 0150       call smul168
0B1F08 CD 7C 06 0B 0151       call print_hex_hl
0B1F0C CD 4D 04 0B 0152       call print_s168_hl
0B1F10 C9          0153       ret
0B1F11             0154   divide:
0B1F11 18 02       0155       jr @start
0B1F13 2F 00       0156       asciz "/"
0B1F15             0157   @start:
0B1F15 CD 83 0A 0B 0158       call sdiv168
0B1F19 CD AC 06 0B 0159       call print_hex_de
0B1F1D CD 6B 04 0B 0160       call print_s168_de
0B1F21 CD 7C 06 0B 0161       call print_hex_hl ; remainder
0B1F25 CD 4D 04 0B 0162       call print_s168_hl ; remainder
0B1F29 C9          0163       ret
0B1F2A             0164   tan:
0B1F2A 18 04       0165       jr @start
0B1F2C 74 61 6E 00 0166       asciz "tan"
0B1F30             0167   @start:
0B1F30             0168       ; call tan168
0B1F30 C9          0169       ret
0B1F31             0170   atan2:
0B1F31 18 06       0171       jr @start
0B1F33 61 74 61 6E 0172       asciz "atan2"
       32 00       
0B1F39             0173   @start:
0B1F39             0174       ; call atan2_168
0B1F39 C9          0175       ret
0B1F3A             0176   polar2cart:
0B1F3A 18 0B       0177       jr @start
0B1F3C 70 6F 6C 61 0178       asciz "polar2cart"
       72 32 63 61 
       72 74 00    
0B1F47             0179   @start:
0B1F47 CD 31 0C 0B 0180       call deg_360_to_256
0B1F4B CD 7C 06 0B 0181       call print_hex_hl
0B1F4F CD 4D 04 0B 0182       call print_s168_hl
0B1F53 CD 83 0C 0B 0183       call polar_to_cartesian
0B1F57 CD 88 02 0B 0184       call printNewLine
0B1F5B CD 93 06 0B 0185       call print_hex_bc
0B1F5F CD 5A 04 0B 0186       call print_s168_bc
0B1F63 CD AC 06 0B 0187       call print_hex_de
0B1F67 CD 6B 04 0B 0188       call print_s168_de
0B1F6B C9          0189       ret
0B1F6C             0190   cart2polar:
0B1F6C 18 0B       0191       jr @start
0B1F6E 63 61 72 74 0192       asciz "cart2polar"
       32 70 6F 6C 
       61 72 00    
0B1F79             0193   @start:
0B1F79             0194       ; call cartesian_to_polar
0B1F79 C9          0195       ret
0B1F7A             0196   
0B1F7A             0197   function:
0B1F7A 89 1F 0B    0198       dl sin
0B1F7D A8 1F 0B    0199       dl cos
0B1F80 C7 1F 0B    0200       dl sqrt
0B1F83 D7 1F 0B    0201       dl deg256
0B1F86 00 00 00    0202       dl 0x000000 ; list terminator
0B1F89             0203   sin:
0B1F89 18 04       0204       jr @start
0B1F8B 73 69 6E 00 0205       asciz "sin"
0B1F8F             0206   @start:
0B1F8F CD 31 0C 0B 0207       call deg_360_to_256
0B1F93 CD 7C 06 0B 0208       call print_hex_hl
0B1F97 CD 4D 04 0B 0209       call print_s168_hl
0B1F9B CD 58 0C 0B 0210       call sin168
0B1F9F CD 7C 06 0B 0211       call print_hex_hl
0B1FA3 CD 4D 04 0B 0212       call print_s168_hl
0B1FA7 C9          0213       ret
0B1FA8             0214   cos:
0B1FA8 18 04       0215       jr @start
0B1FAA 63 6F 73 00 0216       asciz "cos"
0B1FAE             0217   @start:
0B1FAE CD 31 0C 0B 0218       call deg_360_to_256
0B1FB2 CD 7C 06 0B 0219       call print_hex_hl
0B1FB6 CD 4D 04 0B 0220       call print_s168_hl
0B1FBA CD 53 0C 0B 0221       call cos168
0B1FBE CD 7C 06 0B 0222       call print_hex_hl
0B1FC2 CD 4D 04 0B 0223       call print_s168_hl
0B1FC6 C9          0224       ret
0B1FC7             0225   sqrt:
0B1FC7 18 05       0226       jr @start
0B1FC9 73 71 72 74 0227       asciz "sqrt"
       00          
0B1FCE             0228   @start:
0B1FCE CD 46 0B 0B 0229       call sqrt168
0B1FD2 CD 4D 04 0B 0230       call print_s168_hl
0B1FD6 C9          0231       ret
0B1FD7             0232   deg256:
0B1FD7 18 07       0233       jr @start
0B1FD9 64 65 67 32 0234       asciz "deg256"
       35 36 00    
0B1FE0             0235   @start:
0B1FE0 CD 31 0C 0B 0236       call deg_360_to_256
0B1FE4 CD 7C 06 0B 0237       call print_hex_hl
0B1FE8 CD 4D 04 0B 0238       call print_s168_hl
0B1FEC C9          0239       ret
0B1FED             0240   
0B1FED             0241   ; ========== HELPER FUNCTIONS ==========
0B1FED             0242   ; get the next argument after ix as a signed 16.8 fixed point number
0B1FED             0243   ; inputs: ix = pointer to the argument string
0B1FED             0244   ; outputs: ude = signed 16.8 fixed point number
0B1FED             0245   ; destroys: a, d, e, h, l, f
0B1FED             0246   get_arg_s168:
0B1FED ED 32 03    0247       lea ix,ix+3 ; point to the next argument
0B1FF0 DD 27 00    0248       ld hl,(ix)  ; get the argument string
0B1FF3 CD 94 01 0B 0249       call asc_to_s168 ; convert the string to a number
0B1FF7 C9          0250       ret ; return with the value in DE
0B1FF8             0251   
0B1FF8             0252   ; Inputs: ix = pointer to the argument string
0B1FF8             0253   ; Outputs: ude = signed 24-bit integer
0B1FF8             0254   ; Destroys: a, d, e, h, l, f
0B1FF8             0255   get_arg_s24:
0B1FF8 ED 32 03    0256       lea ix,ix+3 ; point to the next argument
0B1FFB DD 27 00    0257       ld hl,(ix)  ; get the argument string
0B1FFE CD 45 01 0B 0258       call asc_to_s24 ; convert the string to a number
0B2002 C9          0259       ret ; return with the value in DE
0B2003             0260   
0B2003             0261   get_plot_coords:
0B2003             0262   ; get the move coordinates
0B2003 ED 32 03    0263       lea ix,ix+3 ; pointer to next argument address
0B2006 DD 27 00    0264       ld hl,(ix)  ; pointer to the x coordinate string
0B2009 CD 94 01 0B 0265       call asc_to_s168 ; de = x coordinate
0B200D D5          0266       push de
0B200E C1          0267       pop bc ; bc = x coordinate
0B200F ED 32 03    0268       lea ix,ix+3 ; pointer to next argument address
0B2012 DD 27 00    0269       ld hl,(ix)  ; pointer to the y coordinate string
0B2015 CD 94 01 0B 0270       call asc_to_s168 ; de = y coordinate
0B2019 C9          0271       ret
0B201A             0272   
0B201A             0273   get_arg_text:
0B201A ED 32 03    0274       lea ix,ix+3 ; point to the next argument
0B201D DD 27 00    0275       ld hl,(ix)  ; get the argument string
0B2020 C9          0276       ret
0B2021             0277   
0B2021             0278   ; match the next argument after ix to the dispatch table at iy
0B2021             0279   ;   - arguments and dispatch entries are zero-terminated, case-sensitive strings
0B2021             0280   ;   - final entry of dispatch table must be a 3-byte zero or bad things will happen
0B2021             0281   ; returns: NO MATCH: iy=dispatch list terminator a=1 and zero flag reset
0B2021             0282   ;          ON MATCH: iy=dispatch address, a=0 and zero flag set
0B2021             0283   ; destroys: a, hl, de, ix, iy, flags
0B2021             0284   match_next:
0B2021 ED 32 03    0285       lea ix,ix+3         ; point to the next argument
0B2024             0286   @loop:
0B2024 FD 27 00    0287       ld hl,(iy)          ; pointer argument dispatch record
0B2027             0288       sign_hlu            ; check for list terminator
0B2027 19          0001M          add hl,de
0B2028 B7          0002M          or a
0B2029 ED 52       0003M          sbc hl,de
0B202B CA 43 20 0B 0289       jp z,@no_match      ; if a=0, return error
0B202F 23          0290       inc hl              ; skip over jp instruction
0B2030 23          0291       inc hl
0B2031 DD 17 00    0292       ld de,(ix)          ; pointer to the argument string
0B2034 CD 5A 20 0B 0293       call str_equal      ; compare the argument to the dispatch table entry
0B2038 CA 45 20 0B 0294       jp z,@match         ; if equal, return success
0B203C ED 33 03    0295       lea iy,iy+3         ; if not equal, bump iy to next dispatch table entry
0B203F C3 24 20 0B 0296       jp @loop            ; and loop
0B2043             0297   @no_match:
0B2043 3C          0298       inc a               ; no match so return a=1 and zero flag reset
0B2044 C9          0299       ret
0B2045             0300   @match:
0B2045 FD 37 00    0301       ld iy,(iy)          ; get the function pointer
0B2048 C9          0302       ret                 ; return a=0 and zero flag set
0B2049             0303   
0B2049             0304   ; same as match_next, but prints the parameter if a match is found
0B2049             0305   match_next_and_print:
0B2049 CD 21 20 0B 0306       call match_next
0B204D C0          0307       ret nz ; no match found
0B204E ED 32 FD    0308       lea ix,ix-3
0B2051 CD 1A 20 0B 0309       call get_arg_text ; hl points to the operator string
0B2055 CD 65 20 0B 0310       call print_param
0B2059 C9          0311       ret
0B205A             0312   
0B205A             0313   ; compare two zero-terminated strings for equality, case-sensitive
0B205A             0314   ; hl: pointer to first string, de: pointer to second string
0B205A             0315   ; returns: z if equal, nz if not equal
0B205A             0316   ; destroys: a, hl, de
0B205A             0317   str_equal:
0B205A 1A          0318       ld a,(de)           ; get the first character
0B205B BE          0319       cp (hl)             ; compare to the second character
0B205C C0          0320       ret nz              ; if not equal, return
0B205D B7          0321       or a
0B205E C8          0322       ret z               ; if equal and zero, return
0B205F 23          0323       inc hl              ; next character
0B2060 13          0324       inc de
0B2061 C3 5A 20 0B 0325       jp str_equal        ; loop until end of string
0B2065             0326   
0B2065             0327   ; print the parameter string pointed to by ix
0B2065             0328   ; destroys: a, hl
0B2065             0329   print_param:
0B2065 DD 27 00    0330       ld hl,(ix)          ; get the parameter pointer
0B2068 CD 73 02 0B 0331       call printString    ; print the parameter string
0B206C 3E 20       0332       ld a,' '            ; print a space separator
0B206E 5B D7       0333       rst.lil $10
0B2070 C9          0334       ret
0B2071             0335   
0B2071             0336   ; print the parameters
0B2071             0337   ; inputs: b = number of parameters, ix = pointer to the parameters
0B2071             0338   ; destroys: a, hl, bc
0B2071             0339   print_params:
0B2071 41          0340       ld b,c              ; loop counter = number of parameters
0B2072 DD E5       0341       push ix             ; save the pointer to the parameters
0B2074             0342   @loop:
0B2074 C5          0343       push bc             ; save the loop counter
0B2075 CD 65 20 0B 0344       call print_param    ; print the parameter
0B2079 ED 32 03    0345       lea ix,ix+3         ; next parameter pointer
0B207C C1          0346       pop bc              ; get back the loop counter
0B207D 10 F5       0347       djnz @loop          ; loop until done
0B207F DD E1       0348       pop ix              ; restore the pointer to the parameters
0B2081 C9          0349       ret
0B2082             0350   
0B2082             0351   debug_print:
0B2082 CD 88 02 0B 0352       call printNewLine   ; DEBUG
0B2086 CD 57 07 0B 0353       call dumpFlags      ; DEBUG
0B208A CD 65 20 0B 0354       call print_param    ; DEBUG
0B208E CD 88 02 0B 0355       call printNewLine   ; DEBUG
0B2092 CD 88 02 0B 0356       call printNewLine   ; DEBUG
0B2096 C9          0357       ret
