PC     Output      Line
040000             0001   ;
040000             0002   ; Title:	test
040000             0003   ; Author:	Brandon Gates
040000             0004   ; Created:	29/10/2024
040000             0005   
040000             0006       ASSUME	ADL = 1
040000             0007       INCLUDE "mos_api.inc"
040000             0001*  ;
040000             0002*  ; Title:	AGON MOS - API for user projects
040000             0003*  ; Author:	Dean Belfield
040000             0004*  ; Created:	03/08/2022
040000             0005*  ; Last Updated:	11/11/2023
040000             0006*  ;
040000             0007*  ; Modinfo:
040000             0008*  ; 05/08/2022:	Added mos_feof
040000             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040000             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040000             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040000             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040000             0013*  ; 13/10/2022:	Added mos_oscli
040000             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040000             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040000             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040000             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040000             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040000             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040000             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040000             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040000             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040000             0023*  ; 19/05/2023:	Added sysvar_scrMode
040000             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040000             0025*  ; 03/08/2023:	Added mos_setkbvector
040000             0026*  ; 10/08/2023:	Added mos_getkbmap
040000             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040000             0028*  ; 09/04/2024:   Adapter to ez80asm
040000             0029*  ; VDP control (VDU 23, 0, n)
040000             0030*  ;
040000             0031*  vdp_gp:			EQU 	80h
040000             0032*  vdp_keycode:		EQU 	81h
040000             0033*  vdp_cursor:		EQU	82h
040000             0034*  vdp_scrchar:		EQU	83h
040000             0035*  vdp_scrpixel:		EQU	84h
040000             0036*  vdp_audio:		EQU	85h
040000             0037*  vdp_mode:		EQU	86h
040000             0038*  vdp_rtc:		EQU	87h
040000             0039*  vdp_keystate:		EQU	88h
040000             0040*  vdp_logicalcoords:	EQU	C0h
040000             0041*  vdp_terminalmode:	EQU	FFh
040000             0042*  
040000             0043*  ; MOS high level functions
040000             0044*  ;
040000             0045*  mos_getkey:		EQU	00h
040000             0046*  mos_load:		EQU	01h
040000             0047*  mos_save:		EQU	02h
040000             0048*  mos_cd:			EQU	03h
040000             0049*  mos_dir:		EQU	04h
040000             0050*  mos_del:		EQU	05h
040000             0051*  mos_ren:		EQU	06h
040000             0052*  mos_mkdir:		EQU	07h
040000             0053*  mos_sysvars:		EQU	08h
040000             0054*  mos_editline:		EQU	09h
040000             0055*  mos_fopen:		EQU	0Ah
040000             0056*  mos_fclose:		EQU	0Bh
040000             0057*  mos_fgetc:		EQU	0Ch
040000             0058*  mos_fputc:		EQU	0Dh
040000             0059*  mos_feof:		EQU	0Eh
040000             0060*  mos_getError:		EQU	0Fh
040000             0061*  mos_oscli:		EQU	10h
040000             0062*  mos_copy:		EQU	11h
040000             0063*  mos_getrtc:		EQU	12h
040000             0064*  mos_setrtc:		EQU	13h
040000             0065*  mos_setintvector:	EQU	14h
040000             0066*  mos_uopen:		EQU	15h
040000             0067*  mos_uclose:		EQU	16h
040000             0068*  mos_ugetc:		EQU	17h
040000             0069*  mos_uputc:		EQU 	18h
040000             0070*  mos_getfil:		EQU	19h
040000             0071*  mos_fread:		EQU	1Ah
040000             0072*  mos_fwrite:		EQU	1Bh
040000             0073*  mos_flseek:		EQU	1Ch
040000             0074*  mos_setkbvector:	EQU	1Dh
040000             0075*  mos_getkbmap:		EQU	1Eh
040000             0076*  mos_i2c_open:		EQU	1Fh
040000             0077*  mos_i2c_close:		EQU	20h
040000             0078*  mos_i2c_write:		EQU	21h
040000             0079*  mos_i2c_read:		EQU	22h
040000             0080*  
040000             0081*  
040000             0082*  ; FatFS file access functions
040000             0083*  ;
040000             0084*  ffs_fopen:		EQU	80h
040000             0085*  ffs_fclose:		EQU	81h
040000             0086*  ffs_fread:		EQU	82h
040000             0087*  ffs_fwrite:		EQU	83h
040000             0088*  ffs_flseek:		EQU	84h
040000             0089*  ffs_ftruncate:		EQU	85h
040000             0090*  ffs_fsync:		EQU	86h
040000             0091*  ffs_fforward:		EQU	87h
040000             0092*  ffs_fexpand:		EQU	88h
040000             0093*  ffs_fgets:		EQU	89h
040000             0094*  ffs_fputc:		EQU	8Ah
040000             0095*  ffs_fputs:		EQU	8Bh
040000             0096*  ffs_fprintf:		EQU	8Ch
040000             0097*  ffs_ftell:		EQU	8Dh
040000             0098*  ffs_feof:		EQU	8Eh
040000             0099*  ffs_fsize:		EQU	8Fh
040000             0100*  ffs_ferror:		EQU	90h
040000             0101*  
040000             0102*  ; FatFS directory access functions
040000             0103*  ;
040000             0104*  ffs_dopen:		EQU	91h
040000             0105*  ffs_dclose:		EQU	92h
040000             0106*  ffs_dread:		EQU	93h
040000             0107*  ffs_dfindfirst:		EQU	94h
040000             0108*  ffs_dfindnext:		EQU	95h
040000             0109*  
040000             0110*  ; FatFS file and directory management functions
040000             0111*  ;
040000             0112*  ffs_stat:		EQU	96h
040000             0113*  ffs_unlink:		EQU	97h
040000             0114*  ffs_rename:		EQU	98h
040000             0115*  ffs_chmod:		EQU	99h
040000             0116*  ffs_utime:		EQU	9Ah
040000             0117*  ffs_mkdir:		EQU	9Bh
040000             0118*  ffs_chdir:		EQU	9Ch
040000             0119*  ffs_chdrive:		EQU	9Dh
040000             0120*  ffs_getcwd:		EQU	9Eh
040000             0121*  
040000             0122*  ; FatFS volume management and system configuration functions
040000             0123*  ;
040000             0124*  ffs_mount:		EQU	9Fh
040000             0125*  ffs_mkfs:		EQU	A0h
040000             0126*  ffs_fdisk:		EQU	A1h
040000             0127*  ffs_getfree:		EQU	A2h
040000             0128*  ffs_getlabel:		EQU	A3h
040000             0129*  ffs_setlabel:		EQU	A4h
040000             0130*  ffs_setcp:		EQU	A5h
040000             0131*  
040000             0132*  ; File access modes
040000             0133*  ;
040000             0134*  fa_read:		EQU	01h
040000             0135*  fa_write:		EQU	02h
040000             0136*  fa_open_existing:	EQU	00h
040000             0137*  fa_create_new:		EQU	04h
040000             0138*  fa_create_always:	EQU	08h
040000             0139*  fa_open_always:		EQU	10h
040000             0140*  fa_open_append:		EQU	30h
040000             0141*  
040000             0142*  ; System variable indexes for api_sysvars
040000             0143*  ; Index into _sysvars in globals.asm
040000             0144*  ;
040000             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040000             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040000             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040000             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040000             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040000             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040000             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040000             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040000             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040000             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040000             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040000             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040000             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040000             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040000             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040000             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040000             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040000             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040000             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040000             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040000             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040000             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040000             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040000             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040000             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040000             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040000             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040000             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040000             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040000             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040000             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040000             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040000             0177*  
040000             0178*  ; Flags for the VPD protocol
040000             0179*  ;
040000             0180*  vdp_pflag_cursor:	EQU	00000001b
040000             0181*  vdp_pflag_scrchar:	EQU	00000010b
040000             0182*  vdp_pflag_point:	EQU	00000100b
040000             0183*  vdp_pflag_audio:	EQU	00001000b
040000             0184*  vdp_pflag_mode:		EQU	00010000b
040000             0185*  vdp_pflag_rtc:		EQU	00100000b
040000             0186*  vdp_pflag_mouse:	EQU	01000000b
040000             0187*  ; vdp_pflag_buffered:	EQU	10000000b
040000             0188*  
040000             0189*  ;
040000             0190*  ; FatFS structures
040000             0191*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040000             0192*  ;
040000             0193*  ; Object ID and allocation information (FFOBJID)
040000             0194*  ;
040000             0195*  ;FFOBJID	.STRUCT
040000             0196*  ;	fs:		DS	3	; Pointer to the hosting volume of this object
040000             0197*  ;	id:		DS	2	; Hosting volume mount ID
040000             0198*  ;	attr:		DS	1	; Object attribute;
040000             0199*  ;	stat:		DS	1	; Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040000             0200*  ;	sclust:		DS	4	; Object data start cluster (0:no cluster or root directory)
040000             0201*  ;	objsize:	DS	4	; Object size (valid when sclust != 0)
040000             0202*  ;FFOBJID_SIZE .ENDSTRUCT FFOBJID
040000             0203*  ;
040000             0204*  ; File object structure (FIL)
040000             0205*  ;
040000             0206*  ;FIL .STRUCT
040000             0207*  ;	obj:		.TAG	FFOBJID	; Object identifier
040000             0208*  ;	flag:		DS	1	; File status flags
040000             0209*  ;	err:		DS	1	; Abort flag (error code)
040000             0210*  ;	fptr:		DS	4	; File read/write pointer (Zeroed on file open)
040000             0211*  ;	clust:		DS	4	; Current cluster of fpter (invalid when fptr is 0)
040000             0212*  ;	sect:		DS	4	; Sector number appearing in buf[] (0:invalid)
040000             0213*  ;	dir_sect:	DS	4	; Sector number containing the directory entry
040000             0214*  ;	dir_ptr:	DS	3	; Pointer to the directory entry in the win[]
040000             0215*  ;FIL_SIZE .ENDSTRUCT FIL
040000             0216*  ;
040000             0217*  ; Directory object structure (DIR)
040000             0218*  ;
040000             0219*  ;DIR .STRUCT
040000             0220*  ;	obj:		.TAG	FFOBJID	; Object identifier;
040000             0221*  ;	dptr:		DS	4	; Current read/write offset
040000             0222*  ;	clust:		DS	4	; Current cluster
040000             0223*  ;	sect:		DS	4	; Current sector (0:Read operation has terminated)
040000             0224*  ;	dir:		DS	3	; Pointer to the directory item in the win[]
040000             0225*  ;	fn:		DS	12	; SFN (in/out) {body[8],ext[3],status[1]}
040000             0226*  ;	blk_ofs:	DS	4	; Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040000             0227*  ;DIR_SIZE .ENDSTRUCT DIR
040000             0228*  ;
040000             0229*  ; File information structure (FILINFO)
040000             0230*  ;
040000             0231*  ;FILINFO .STRUCT
040000             0232*  ;	fsize:		DS 	4	; File size
040000             0233*  ;	fdate:		DS	2	; Modified date;
040000             0234*  ;	ftime:		DS	2	; Modified time
040000             0235*  ;	fattrib:	DS	1	; File attribute
040000             0236*  ;	altname:	DS	13	; Alternative file name
040000             0237*  ;	fname:		DS	256	; Primary file name
040000             0238*  ;FILINFO_SIZE .ENDSTRUCT FILINFO
040000             0239*  
040000             0240*  ;
040000             0241*  ; Macro for calling the API
040000             0242*  ; Parameters:
040000             0243*  ; - function: One of the function numbers listed above
040000             0244*  ;
040000             0245*  			MACRO	MOSCALL function
040000             0246*  			LD	A, function
040000             0247*  			RST.L	08h
040000             0248*  			ENDMACRO
040000             0008       ORG 0x0B0000 ; Is a moslet
0B0000             0009   
0B0000             0010       MACRO PROGNAME
0B0000             0011       ASCIZ "scratch.bin"
0B0000             0012       ENDMACRO
0B0000             0013   
0B0000             0014   ; STANDARD MOSLET INCLUDES
0B0000             0015       include "init.inc"
0B0000             0001*  ;
0B0000             0002*  ; Title:	Copy - Initialisation Code
0B0000             0003*  ; Author:	Dean Belfield, Lennart Benschop
0B0000             0004*  ; Created:	06/11/2022
0B0000             0005*  ; Last Updated:	26/12/2022
0B0000             0006*  ;
0B0000             0007*  ; Modinfo:
0B0000             0008*  ; 17/12/2022:	Added parameter processing
0B0000             0009*  ; 26/12/2022:   Adapted to Copy program, use LEA instead of 3x INC IX, Save/restore MB
0B0000             0010*  ; Changed:      08/04/2924 adapt to ez80asm
0B0000             0011*  
0B0000             0012*  
0B0000             0013*  argv_ptrs_max:		EQU	16			; Maximum number of arguments allowed in argv
0B0000             0014*  
0B0000             0015*  ;
0B0000             0016*  ; Start in ADL mode
0B0000             0017*  ;
0B0000 C3 45 00 0B 0018*  			JP	_start			; Jump to start
0B0004             0019*  ;
0B0004             0020*  ; The header stuff is from byte 64 onwards
0B0004             0021*  ;
0B0004             0022*  
0B0004             0023*  _exec_name:
0B0004             0024*  			PROGNAME			; The executable name, only used in argv
0B0004 73 63 72 61 0001*M     ASCIZ "scratch.bin"
       74 63 68 2E 
       62 69 6E 00 
0B0010             0025*  
0B0010 FF FF FF FF 0026*  			ALIGN	64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
0B0040             0027*  
0B0040 4D 4F 53    0028*  			DB	"MOS"			; Flag for MOS - to confirm this is a valid MOS command
0B0043 00          0029*  			DB	00h			; MOS header version 0
0B0044 01          0030*  			DB	01h			; Flag for run mode (0: Z80, 1: ADL)
0B0045             0031*  ;
0B0045             0032*  ; And the code follows on immediately after the header
0B0045             0033*  ;
0B0045 F5          0034*  _start:			PUSH	AF			; Preserve the registers
0B0046 C5          0035*  			PUSH	BC
0B0047 D5          0036*  			PUSH	DE
0B0048 DD E5       0037*  			PUSH	IX
0B004A FD E5       0038*  			PUSH	IY
0B004C ED 6E       0039*  			LD	A, MB			; Save MB
0B004E F5          0040*  			PUSH 	AF
0B004F AF          0041*  			XOR 	A
0B0050 ED 6D       0042*  			LD 	MB, A                   ; Clear to zero so MOS API calls know how to use 24-bit addresses.
0B0052             0043*  
0B0052 DD 21 B9 00 0044*  			LD	IX, argv_ptrs		; The argv array pointer address
       0B          
0B0057 DD E5       0045*  			PUSH	IX
0B0059 CD 70 00 0B 0046*  			CALL	_parse_params		; Parse the parameters
0B005D DD E1       0047*  			POP	IX			; IX: argv
0B005F 06 00       0048*  			LD	B, 0			;  C: argc
0B0061 CD BB 19 0B 0049*  			CALL	_main			; Start user code
0B0065             0050*  
0B0065 F1          0051*  			POP 	AF
0B0066 ED 6D       0052*  			LD	MB, A
0B0068 FD E1       0053*  			POP	IY			; Restore registers
0B006A DD E1       0054*  			POP	IX
0B006C D1          0055*  			POP	DE
0B006D C1          0056*  			POP	BC
0B006E F1          0057*  			POP	AF
0B006F C9          0058*  			RET
0B0070             0059*  
0B0070             0060*  ; Parse the parameter string into a C array
0B0070             0061*  ; Parameters
0B0070             0062*  ; - HL: Address of parameter string
0B0070             0063*  ; - IX: Address for array pointer storage
0B0070             0064*  ; Returns:
0B0070             0065*  ; -  C: Number of parameters parsed
0B0070             0066*  ;
0B0070 01 04 00 0B 0067*  _parse_params:		LD	BC, _exec_name
0B0074 DD 0F 00    0068*  			LD	(IX+0), BC		; ARGV[0] = the executable name
0B0077 ED 32 03    0069*  			LEA     IX, IX+3
0B007A CD B2 00 0B 0070*  			CALL	_skip_spaces		; Skip HL past any leading spaces
0B007E             0071*  ;
0B007E 01 01 00 00 0072*  			LD	BC, 1			; C: ARGC = 1 - also clears out top 16 bits of BCU
0B0082 06 0F       0073*  			LD	B, argv_ptrs_max - 1	; B: Maximum number of argv_ptrs
0B0084             0074*  ;
0B0084             0075*  _parse_params_1:
0B0084 C5          0076*  			PUSH	BC			; Stack ARGC
0B0085 E5          0077*  			PUSH	HL			; Stack start address of token
0B0086 CD A3 00 0B 0078*  			CALL	_get_token		; Get the next token
0B008A 79          0079*  			LD	A, C			; A: Length of the token in characters
0B008B D1          0080*  			POP	DE			; Start address of token (was in HL)
0B008C C1          0081*  			POP	BC			; ARGC
0B008D B7          0082*  			OR	A			; Check for A=0 (no token found) OR at end of string
0B008E C8          0083*  			RET	Z
0B008F             0084*  ;
0B008F DD 1F 00    0085*  			LD	(IX+0), DE		; Store the pointer to the token
0B0092 E5          0086*  			PUSH	HL			; DE=HL
0B0093 D1          0087*  			POP	DE
0B0094 CD B2 00 0B 0088*  			CALL	_skip_spaces		; And skip HL past any spaces onto the next character
0B0098 AF          0089*  			XOR	A
0B0099 12          0090*  			LD	(DE), A			; Zero-terminate the token
0B009A ED 32 03    0091*  			LEA  	IX, IX+3			; Advance to next pointer position
0B009D 0C          0092*  			INC	C			; Increment ARGC
0B009E 79          0093*  			LD	A, C			; Check for C >= A
0B009F B8          0094*  			CP	B
0B00A0 38 E2       0095*  			JR	C, _parse_params_1	; And loop
0B00A2 C9          0096*  			RET
0B00A3             0097*  
0B00A3             0098*  ; Get the next token
0B00A3             0099*  ; Parameters:
0B00A3             0100*  ; - HL: Address of parameter string
0B00A3             0101*  ; Returns:
0B00A3             0102*  ; - HL: Address of first character after token
0B00A3             0103*  ; -  C: Length of token (in characters)
0B00A3             0104*  ;
0B00A3 0E 00       0105*  _get_token:		LD	C, 0			; Initialise length
0B00A5 7E          0106*  @@:			LD	A, (HL)			; Get the character from the parameter string
0B00A6 B7          0107*  			OR	A			; Exit if 0 (end of parameter string in MOS)
0B00A7 C8          0108*  			RET 	Z
0B00A8 FE 0D       0109*  			CP	13			; Exit if CR (end of parameter string in BBC BASIC)
0B00AA C8          0110*  			RET	Z
0B00AB FE 20       0111*  			CP	' '			; Exit if space (end of token)
0B00AD C8          0112*  			RET	Z
0B00AE 23          0113*  			INC	HL			; Advance to next character
0B00AF 0C          0114*  			INC 	C			; Increment length
0B00B0 18 F3       0115*  			JR	@B
0B00B2             0116*  
0B00B2             0117*  ; Skip spaces in the parameter string
0B00B2             0118*  ; Parameters:
0B00B2             0119*  ; - HL: Address of parameter string
0B00B2             0120*  ; Returns:
0B00B2             0121*  ; - HL: Address of next none-space character
0B00B2             0122*  ;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
0B00B2             0123*  ;
0B00B2 7E          0124*  _skip_spaces:		LD	A, (HL)			; Get the character from the parameter string
0B00B3 FE 20       0125*  			CP	' '			; Exit if not space
0B00B5 C0          0126*  			RET	NZ
0B00B6 23          0127*  			INC	HL			; Advance to next character
0B00B7 18 F9       0128*  			JR	_skip_spaces		; Increment length
0B00B9             0129*  
0B00B9             0130*  ; Storage for the argv array pointers
0B00B9             0131*  ;
0B00B9 00 00 00 00 0132*  argv_ptrs:		BLKP	argv_ptrs_max, 0
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0B00E9             0016       include "parse.inc"
0B00E9             0001*  ;
0B00E9             0002*  ; Title:	Number Parsing Functions
0B00E9             0003*  ; Author:	Dean Belfield
0B00E9             0004*  ; Created:	15/11/2022
0B00E9             0005*  ; Last Updated:	15/11/2022
0B00E9             0006*  ; Last Updated: 29/12/2022 Lennart Benchop adapt for 24-bit mode.
0B00E9             0007*  ; Modinfo:
0B00E9             0008*  ; 2024/04/08    Adapt for ez80asm
0B00E9             0009*  
0B00E9             0010*  ; Read a number and convert to binary
0B00E9             0011*  ; If prefixed with &, will read as hex, otherwise decimal
0B00E9             0012*  ;   Inputs: HL: Pointer in string buffer
0B00E9             0013*  ;  Outputs: HL: Updated text pointer
0B00E9             0014*  ;           DE: Value
0B00E9             0015*  ;            A: Terminator (spaces skipped)
0B00E9             0016*  ;            F: Carry set if valid number, otherwise reset
0B00E9             0017*  ; Destroys: A,D,E,H,L,F
0B00E9             0018*  ;
0B00E9 11 00 00 00 0019*  ASC_TO_NUMBER:		LD		DE, 0			; Initialise DE
0B00ED CD B2 00 0B 0020*  			CALL		_skip_spaces		; Skip whitespace
0B00F1 7E          0021*  			LD		A, (HL)			; Read first character
0B00F2 B7          0022*  			OR		A			; Check for end of string
0B00F3 C8          0023*  			RET		Z			; Return with no carry if not
0B00F4 C5          0024*  			PUSH		BC			; Preserve BC
0B00F5 FE 26       0025*  			CP		'&'			; Is it prefixed with '&' (HEX number)?
0B00F7 20 23       0026*  			JR		NZ, ASC_TO_NUMBER3	; Jump to decimal parser if not
0B00F9 23          0027*  			INC		HL			; Otherwise fall through to ASC_TO_HEX
0B00FA             0028*  ;
0B00FA 7E          0029*  ASC_TO_NUMBER1:		LD		A, (HL)			; Fetch the character
0B00FB CD 3D 01 0B 0030*  			CALL   	 	UPPRC			; Convert to uppercase
0B00FF D6 30       0031*  			SUB		'0'			; Normalise to 0
0B0101 38 37       0032*  			JR 		C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0B0103 FE 0A       0033*  			CP 		10			; Check if >= 10
0B0105 38 06       0034*  			JR 		C, ASC_TO_NUMBER2	; No, so skip next bit
0B0107 D6 07       0035*  			SUB 		7			; Adjust ASCII A-F to nibble
0B0109 FE 10       0036*  			CP 		16			; Check for > F
0B010B 30 2D       0037*  			JR 		NC, ASC_TO_NUMBER4	; Return if out of range
0B010D             0038*  ;
0B010D E5          0039*  ASC_TO_NUMBER2:		PUSH		HL			; Stack HL
0B010E D5          0040*  			PUSH		DE			; LD HL, DE
0B010F E1          0041*  			POP		HL
0B0110 29          0042*  			ADD		HL, HL
0B0111 29          0043*  			ADD		HL, HL
0B0112 29          0044*  			ADD		HL, HL
0B0113 29          0045*  			ADD		HL, HL
0B0114 E5          0046*  			PUSH		HL			; LD DE, HL
0B0115 D1          0047*  			POP		DE
0B0116 E1          0048*  			POP		HL			; Restore HL
0B0117 B3          0049*  			OR      	E			; OR the new digit in to the least significant nibble
0B0118 5F          0050*  			LD      	E, A
0B0119             0051*  ;
0B0119 23          0052*  			INC		HL			; Onto the next character
0B011A 18 DE       0053*  			JR      	ASC_TO_NUMBER1		; And loop
0B011C             0054*  ;
0B011C 7E          0055*  ASC_TO_NUMBER3:		LD		A, (HL)
0B011D D6 30       0056*  			SUB		'0'			; Normalise to 0
0B011F 38 19       0057*  			JR		C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0B0121 FE 0A       0058*  			CP		10			; Check if >= 10
0B0123 30 15       0059*  			JR		NC, ASC_TO_NUMBER4	; Return if >= 10
0B0125             0060*  ;
0B0125 E5          0061*  			PUSH		HL			; Stack HL
0B0126 D5          0062*  			PUSH		DE			; LD HL, DE
0B0127 E1          0063*  			POP		HL
0B0128 E5          0064*  			PUSH		HL			; LD BC, HL
0B0129 C1          0065*  			POP		BC
0B012A 29          0066*  			ADD		HL, HL 			; x 2
0B012B 29          0067*  			ADD		HL, HL 			; x 4
0B012C 09          0068*  			ADD		HL, BC 			; x 5
0B012D 29          0069*  			ADD		HL, HL 			; x 10
0B012E 01 00 00 00 0070*  			LD		BC, 0
0B0132 4F          0071*  			LD 		C, A			; LD BCU, A
0B0133 09          0072*  			ADD		HL, BC			; Add BCU to HL
0B0134 E5          0073*  			PUSH		HL			; LD DE, HL
0B0135 D1          0074*  			POP		DE
0B0136 E1          0075*  			POP		HL			; Restore HL
0B0137             0076*  ;
0B0137 23          0077*  			INC		HL
0B0138 18 E2       0078*  			JR		ASC_TO_NUMBER3
0B013A C1          0079*  ASC_TO_NUMBER4:		POP		BC
0B013B 37          0080*  			SCF					; We have a valid number so set carry
0B013C C9          0081*  			RET
0B013D             0082*  
0B013D             0083*  
0B013D             0084*  ; Convert a character to upper case
0B013D             0085*  ;  A: Character to convert
0B013D             0086*  ;
0B013D E6 7F       0087*  UPPRC:  		AND     	7FH
0B013F FE 60       0088*  			CP      	'`'
0B0141 D8          0089*  			RET     	C
0B0142 E6 5F       0090*  			AND     	5FH			; Convert to upper case
0B0144 C9          0091*  			RET
0B0145             0092*  
0B0145             0093*  
0B0145             0094*  ;------------------------------------------------------------------------
0B0145             0095*  ; Read a number and convert to binary (decimal only)
0B0145             0096*  ; Inputs: hl: Pointer in string buffer
0B0145             0097*  ; Outputs: hl: Updated text pointer
0B0145             0098*  ;         de: Value
0B0145             0099*  ;         a: Terminator (spaces skipped)
0B0145             0100*  ;         f: Carry set if valid number, otherwise reset
0B0145             0101*  ; Destroys: a, d, e, h, l, f
0B0145             0102*  ;------------------------------------------------------------------------
0B0145             0103*  asc_to_s24:
0B0145 3E 01       0104*      ld a,1 ; set sign flag
0B0147 32 97 01 0B 0105*      ld (@sign),a ; store sign flag
0B014B             0106*  
0B014B 11 00 00 00 0107*      ld de, 0 ; initialise de
0B014F CD B2 00 0B 0108*      call _skip_spaces ; skip whitespace
0B0153             0109*  
0B0153 7E          0110*      ld a, (hl) ; read first character
0B0154 B7          0111*      or a ; check for end of string
0B0155 C8          0112*      ret z ; return with no carry if not
0B0156             0113*  
0B0156 C5          0114*      push bc ; preserve bc
0B0157             0115*  
0B0157 FE 2D       0116*      cp '-' ; check for negative number
0B0159 C2 63 01 0B 0117*      jp nz,@loop ; number is positive, nothing more to do
0B015D AF          0118*      xor a ; sign flag to zero
0B015E 32 97 01 0B 0119*      ld (@sign),a ; store sign flag
0B0162 23          0120*      inc hl ; skip '-'
0B0163             0121*  
0B0163             0122*  @loop:
0B0163 7E          0123*      ld a, (hl)
0B0164 D6 30       0124*      sub '0' ; normalise to 0
0B0166 38 19       0125*      jr c, @integer_end ; return if < ascii '0'
0B0168 FE 0A       0126*      cp 10 ; check if >= 10
0B016A 30 15       0127*      jr nc, @integer_end ; return if >= 10
0B016C E5          0128*      push hl ; stack hl
0B016D D5          0129*      push de ; ld hl, de
0B016E E1          0130*      pop hl
0B016F E5          0131*      push hl ; ld bc, hl
0B0170 C1          0132*      pop bc
0B0171 29          0133*      add hl, hl ; x 2
0B0172 29          0134*      add hl, hl ; x 4
0B0173 09          0135*      add hl, bc ; x 5
0B0174 29          0136*      add hl, hl ; x 10
0B0175 01 00 00 00 0137*      ld bc, 0
0B0179 4F          0138*      ld c, a ; ld bcu, a
0B017A 09          0139*      add hl, bc ; add bcu to hl
0B017B E5          0140*      push hl ; ld de, hl
0B017C D1          0141*      pop de
0B017D E1          0142*      pop hl ; restore hl
0B017E 23          0143*      inc hl
0B017F 18 E2       0144*      jr @loop
0B0181             0145*  
0B0181             0146*  @integer_end:
0B0181 C1          0147*      pop bc ; send bc back how she came in
0B0182 3A 97 01 0B 0148*      ld a, (@sign) ; get sign flag
0B0186 3D          0149*      dec a ; check if negative
0B0187 F2 95 01 0B 0150*      jp p,@pos ; positive number
0B018B             0151*  
0B018B             0152*  ; Negate de
0B018B E5          0153*      push hl ; save text pointer
0B018C 21 00 00 00 0154*      ld hl, 0
0B0190 AF          0155*      xor a ; clear carry
0B0191 ED 52       0156*      sbc hl, de ; subtract DE from HL
0B0193 EB          0157*      ex de, hl ; DE = 0-HL
0B0194 E1          0158*      pop hl ; restore text pointer
0B0195             0159*  
0B0195             0160*  @pos:
0B0195 37          0161*      scf ; we have a valid number so set carry
0B0196 C9          0162*      ret
0B0197             0163*  
0B0197 00          0164*  @sign: db 0 ; sign flag buffer
0B0198             0165*  
0B0198             0166*  
0B0198             0167*  ;------------------------------------------------------------------------
0B0198             0168*  ; Read a number and convert to binary (decimal only)
0B0198             0169*  ; Inputs: hl: Pointer in string buffer
0B0198             0170*  ; Outputs: hl: Updated text pointer
0B0198             0171*  ;         de: Value
0B0198             0172*  ;         a: Terminator (spaces skipped)
0B0198             0173*  ;         f: Carry set if valid number, otherwise reset
0B0198             0174*  ; Destroys: a, d, e, h, l, f
0B0198             0175*  ;------------------------------------------------------------------------
0B0198             0176*  asc_to_s168:
0B0198 3E 01       0177*      ld a,1 ; set sign flag
0B019A 32 57 02 0B 0178*      ld (@sign),a ; store sign flag
0B019E             0179*  
0B019E 11 00 00 00 0180*      ld de, 0 ; initialise de
0B01A2 ED 53 4F 02 0181*      ld (@result), de ; clear low bytes of result buffer
       0B          
0B01A7 ED 53 53 02 0182*      ld (@scratch), de ; clear low bytes of scratch buffer
       0B          
0B01AC             0183*  
0B01AC CD B2 00 0B 0184*      call _skip_spaces ; skip whitespace
0B01B0             0185*  
0B01B0 7E          0186*      ld a, (hl) ; read first character
0B01B1 B7          0187*      or a ; check for end of string
0B01B2 C8          0188*      ret z ; return with no carry if not
0B01B3             0189*  
0B01B3 C5          0190*      push bc ; preserve bc
0B01B4             0191*  
0B01B4 FE 2D       0192*      cp '-' ; check for negative number
0B01B6 C2 C0 01 0B 0193*      jp nz,@loop ; number is positive, nothing more to do
0B01BA AF          0194*      xor a ; sign flag to zero
0B01BB 32 57 02 0B 0195*      ld (@sign),a ; store sign flag
0B01BF 23          0196*      inc hl ; skip '-'
0B01C0             0197*  
0B01C0             0198*  @loop:
0B01C0 7E          0199*      ld a, (hl)
0B01C1             0200*  
0B01C1             0201*  ; chcek for decimal point
0B01C1 FE 2E       0202*      cp '.' ; check for decimal point
0B01C3 CA 04 02 0B 0203*      jp z,@fractional_start ; jump to fractional part
0B01C7             0204*  
0B01C7             0205*  ; process integer part
0B01C7 D6 30       0206*      sub '0' ; normalise to 0
0B01C9 38 19       0207*      jr c, @integer_end ; return if < ascii '0'
0B01CB FE 0A       0208*      cp 10 ; check if >= 10
0B01CD 30 15       0209*      jr nc, @integer_end ; return if >= 10
0B01CF E5          0210*      push hl ; stack hl
0B01D0 D5          0211*      push de ; ld hl, de
0B01D1 E1          0212*      pop hl
0B01D2 E5          0213*      push hl ; ld bc, hl
0B01D3 C1          0214*      pop bc
0B01D4 29          0215*      add hl, hl ; x 2
0B01D5 29          0216*      add hl, hl ; x 4
0B01D6 09          0217*      add hl, bc ; x 5
0B01D7 29          0218*      add hl, hl ; x 10
0B01D8 01 00 00 00 0219*      ld bc, 0
0B01DC 4F          0220*      ld c, a ; ld bcu, a
0B01DD 09          0221*      add hl, bc ; add bcu to hl
0B01DE E5          0222*      push hl ; ld de, hl
0B01DF D1          0223*      pop de
0B01E0 E1          0224*      pop hl ; restore hl
0B01E1 23          0225*      inc hl
0B01E2 18 DC       0226*      jr @loop
0B01E4             0227*  
0B01E4             0228*  @integer_end:
0B01E4 ED 53 50 02 0229*      ld (@result+1), de      ; Store integer part in result buffer (shifted up one byte)
       0B          
0B01E9             0230*  
0B01E9             0231*  @end:
0B01E9 C1          0232*      pop bc ; send bc back how she came in
0B01EA ED 5B 4F 02 0233*      ld de,(@result) ; will contain shifted integer part combined with any fractional value
       0B          
0B01EF 3A 57 02 0B 0234*      ld a, (@sign) ; get sign flag
0B01F3 3D          0235*      dec a ; check if negative
0B01F4 F2 02 02 0B 0236*      jp p,@pos ; positive number
0B01F8             0237*  
0B01F8             0238*  ; Negate de
0B01F8 E5          0239*      push hl ; save text pointer
0B01F9 21 00 00 00 0240*      ld hl, 0
0B01FD AF          0241*      xor a ; clear carry
0B01FE ED 52       0242*      sbc hl, de ; subtract DE from HL
0B0200 EB          0243*      ex de, hl ; DE = 0-HL
0B0201 E1          0244*      pop hl ; restore text pointer
0B0202             0245*  
0B0202             0246*  @pos:
0B0202 37          0247*      scf ; we have a valid number so set carry
0B0203 C9          0248*      ret
0B0204             0249*  
0B0204             0250*  @fractional_start:
0B0204 ED 53 50 02 0251*      ld (@result+1), de         ; Store integer part in result buffer (shifted up one byte)
       0B          
0B0209 06 03       0252*      ld b, 3                    ; Set loop counter to 3 for up to three fractional digits
0B020B 11 00 00 00 0253*      ld de, 0                   ; Initialize DE as the fractional accumulator
0B020F DD 21 58 02 0254*      ld ix, powers_of_10        ; Point IX to the lookup table for the scaling factor based on digits
       0B          
0B0214 23          0255*      inc hl                     ; Skip decimal point
0B0215             0256*  
0B0215             0257*  @fractional_loop:
0B0215 7E          0258*      ld a, (hl)                 ; Load next character
0B0216 D6 30       0259*      sub '0'                    ; Normalize ASCII to decimal
0B0218 38 1C       0260*      jr c, @end_fraction        ; Exit if < '0'
0B021A FE 0A       0261*      cp 10
0B021C 30 18       0262*      jr nc, @end_fraction       ; Exit if >= 10
0B021E             0263*  
0B021E             0264*      ; Multiply the current fractional accumulator by 10
0B021E E5          0265*      push hl                    ; Save char pointer
0B021F F5          0266*      push af                    ; Save the digit
0B0220 EB          0267*      ex de, hl
0B0221 E5          0268*      push hl
0B0222 29          0269*      add hl,hl ; * 2
0B0223 29          0270*      add hl,hl ; * 4
0B0224 D1          0271*      pop de
0B0225 19          0272*      add hl,de ; * 5
0B0226 29          0273*      add hl,hl ; * 10
0B0227 11 00 00 00 0274*      ld de, 0                   ; Clear DEU
0B022B F1          0275*      pop af                     ; Restore the current digit
0B022C 5F          0276*      ld e, a                    ; Load the digit into E
0B022D 19          0277*      add hl, de                 ; Add the digit to the accumulator
0B022E EB          0278*      ex de, hl                  ; Result back to DE
0B022F ED 32 03    0279*      lea ix,ix+3                ; Advance IX to the next scaling factor
0B0232 E1          0280*      pop hl                     ; Restore char pointer
0B0233 23          0281*      inc hl                     ; Move to the next character
0B0234 10 DF       0282*      djnz @fractional_loop      ; Loop if more digits to process
0B0236             0283*  
0B0236             0284*  @end_fraction:
0B0236             0285*  ; Final scaling based on number of fractional digits processed
0B0236 ED 53 54 02 0286*      ld (@scratch+1), de          ; Shift fractional part up a byte
       0B          
0B023B 2A 53 02 0B 0287*      ld hl,(@scratch)             ; Load the shifted fractional part into HL
0B023F             0288*  
0B023F DD 17 00    0289*      ld de, (ix)                ; Load final scaling factor from IX based on digit count
0B0242 CD 9B 0E 0B 0290*      call udiv24                ; Perform 24-bit division to scale down
0B0246 7B          0291*      ld a, e                    ; Load the low byte (8-bit fractional part) into A
0B0247 32 4F 02 0B 0292*      ld (@result), a            ; Store fractional part in result buffer
0B024B C3 E9 01 0B 0293*      jp @end                    ; Final sign check and flag setup
0B024F             0294*  
0B024F             0295*  @result: ds 4                  ; 32-bit result buffer to shift integer part up one byte
0B0253             0296*  @scratch: ds 4                 ; 32-bit scratch buffer for intermediate calculations
0B0257 00          0297*  @sign: db 0                    ; Sign flag buffer
0B0258             0298*  
0B0258             0299*  powers_of_10:
0B0258 01 00 00    0300*      dl 1                       ; 10^0
0B025B 0A 00 00    0301*      dl 10                      ; 10^1
0B025E 64 00 00    0302*      dl 100                     ; 10^2
0B0261 E8 03 00    0303*      dl 1000                    ; 10^3
0B0264 10 27 00    0304*      dl 10000                   ; 10^4
0B0267             0017   
0B0267             0018   ; API INCLUDES
0B0267             0019       include "functions.inc"
0B0267             0001*      MACRO printChar char
0B0267             0002*          LD A, char
0B0267             0003*          RST.LIL 10h
0B0267             0004*      ENDMACRO
0B0267             0005*  
0B0267             0006*  ; test the sign of HL
0B0267             0007*  ; inputs: HL obviously
0B0267             0008*  ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
0B0267             0009*  ; destroys: flags
0B0267             0010*      MACRO signHL
0B0267             0011*          add hl,de
0B0267             0012*          or a
0B0267             0013*          sbc hl,de
0B0267             0014*      ENDMACRO
0B0267             0015*  
0B0267             0016*  ; Simulated call to subroutine at HL
0B0267             0017*  ; inputs: HL pointing to the subroutine address plus whatever the called function expects
0B0267             0018*  ; outputs: whatever the subroutine does, including HL and BC
0B0267             0019*  ; destroys: only what the subroutine does, but always BC
0B0267             0020*      MACRO callHL
0B0267             0021*          ld bc,$+7     ; Address of first instruction after the jump
0B0267             0022*          push bc       ; which constitutes the return address
0B0267             0023*          jp   (hl)     ; Jump to the address in HL
0B0267             0024*      ENDMACRO
0B0267             0025*  
0B0267             0026*  ; Simulated call to subroutine at IX
0B0267             0027*  ; inputs: IX pointing to the subroutine address plus whatever the called function expects
0B0267             0028*  ; outputs: whatever the subroutine does, including IX and BC
0B0267             0029*  ; destroys: only what the subroutine does, but always BC
0B0267             0030*      MACRO callIX
0B0267             0031*          ld bc,$+7     ; Address of first instruction after the jump
0B0267             0032*          push bc       ; which constitutes the return address
0B0267             0033*          jp   (ix)     ; Jump to the address in IX
0B0267             0034*      ENDMACRO
0B0267             0035*  
0B0267             0036*  ; Simulated call to soubroutinte at IY
0B0267             0037*  ; inputs: IY pointing to the subroutine address plus whatever the called function expects
0B0267             0038*  ; outputs: whatever the subroutine does, including IY and BC
0B0267             0039*  ; destroys: only what the subroutine does, but always BC
0B0267             0040*      MACRO callIY
0B0267             0041*          ld bc,$+7     ; Address of first instruction after the jump
0B0267             0042*          push bc       ; which constitutes the return address
0B0267             0043*          jp   (iy)     ; Jump to the address in IY
0B0267             0044*      ENDMACRO
0B0267             0045*  
0B0267             0046*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
0B0267             0047*  ; Print a zero-terminated string
0B0267             0048*  ; HL: Pointer to string
0B0267             0049*  printString:
0B0267 C5          0050*  	PUSH	BC
0B0268 01 00 00 00 0051*  	LD		BC,0
0B026C 3E 00       0052*  	LD 	 	A,0
0B026E 5B DF       0053*  	RST.LIL 18h
0B0270 C1          0054*  	POP		BC
0B0271 C9          0055*  	RET
0B0272             0056*  ; print a VDU sequence
0B0272             0057*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
0B0272             0058*  sendVDUsequence:
0B0272 C5          0059*  	PUSH	BC
0B0273 01 00 00 00 0060*  	LD		BC, 0
0B0277 4E          0061*  	LD		C, (HL)
0B0278 5B DF       0062*  	RST.LIL	18h
0B027A C1          0063*  	POP		BC
0B027B C9          0064*  	RET
0B027C             0065*  ; Print Newline sequence to VDP
0B027C             0066*  printNewLine:
0B027C F5          0067*      push af ; for some reason rst.lil 10h sets carry flag
0B027D 3E 0D       0068*  	LD	A, '\r'
0B027F 5B D7       0069*  	RST.LIL 10h
0B0281 3E 0A       0070*  	LD	A, '\n'
0B0283 5B D7       0071*  	RST.LIL 10h
0B0285 F1          0072*      pop af
0B0286 C9          0073*  	RET
0B0287             0074*  ; Print a 24-bit HEX number
0B0287             0075*  ; HLU: Number to print
0B0287             0076*  printHex24:
0B0287 E5          0077*  	PUSH	HL
0B0288 21 02 00 00 0078*  	LD		HL, 2
0B028C 39          0079*  	ADD		HL, SP
0B028D 7E          0080*  	LD		A, (HL)
0B028E E1          0081*  	POP		HL
0B028F CD 99 02 0B 0082*  	CALL	printHex8
0B0293             0083*  ; Print a 16-bit HEX number
0B0293             0084*  ; HL: Number to print
0B0293             0085*  printHex16:
0B0293 7C          0086*  	LD		A,H
0B0294 CD 99 02 0B 0087*  	CALL	printHex8
0B0298 7D          0088*  	LD		A,L
0B0299             0089*  ; Print an 8-bit HEX number
0B0299             0090*  ; A: Number to print
0B0299             0091*  printHex8:
0B0299 4F          0092*  	LD		C,A
0B029A 1F          0093*  	RRA
0B029B 1F          0094*  	RRA
0B029C 1F          0095*  	RRA
0B029D 1F          0096*  	RRA
0B029E CD A3 02 0B 0097*  	CALL	@F
0B02A2 79          0098*  	LD		A,C
0B02A3             0099*  @@:
0B02A3 E6 0F       0100*  	AND		0Fh
0B02A5 C6 90       0101*  	ADD		A,90h
0B02A7 27          0102*  	DAA
0B02A8 CE 40       0103*  	ADC		A,40h
0B02AA 27          0104*  	DAA
0B02AB 5B D7       0105*  	RST.LIL	10h
0B02AD C9          0106*  	RET
0B02AE             0107*  
0B02AE             0108*  ; Print a 0x HEX prefix
0B02AE             0109*  DisplayHexPrefix:
0B02AE 3E 30       0110*  	LD	A, '0'
0B02B0 5B D7       0111*  	RST.LIL 10h
0B02B2 3E 78       0112*  	LD	A, 'x'
0B02B4 5B D7       0113*  	RST.LIL 10h
0B02B6 C9          0114*  	RET
0B02B7             0115*  
0B02B7             0116*      MACRO printDecBC
0B02B7             0117*          push hl
0B02B7             0118*          push bc
0B02B7             0119*          pop hl
0B02B7             0120*          call printDec
0B02B7             0121*          pop hl
0B02B7             0122*      ENDMACRO
0B02B7             0123*  
0B02B7             0124*      MACRO printDecDE
0B02B7             0125*          push hl
0B02B7             0126*          push de
0B02B7             0127*          pop hl
0B02B7             0128*          call printDec
0B02B7             0129*          pop hl
0B02B7             0130*      ENDMACRO
0B02B7             0131*  
0B02B7             0132*      MACRO printDecHL
0B02B7             0133*          call printDec
0B02B7             0134*      ENDMACRO
0B02B7             0135*  
0B02B7             0136*      MACRO printDecIX
0B02B7             0137*          push hl
0B02B7             0138*          push ix
0B02B7             0139*          pop hl
0B02B7             0140*          call printDec
0B02B7             0141*          pop hl
0B02B7             0142*      ENDMACRO
0B02B7             0143*  
0B02B7             0144*      MACRO printDecIY
0B02B7             0145*          push hl
0B02B7             0146*          push iy
0B02B7             0147*          pop hl
0B02B7             0148*          call printDec
0B02B7             0149*          pop hl
0B02B7             0150*      ENDMACRO
0B02B7             0151*  
0B02B7             0152*  ; Prints the right justified decimal value in HL without leading zeroes
0B02B7             0153*  ; HL : Value to print
0B02B7             0154*  ; preserves all registers and flags
0B02B7             0155*  printDecFrac:
0B02B7             0156*  ; back up all the things
0B02B7 F5          0157*      push af
0B02B8 C5          0158*      push bc
0B02B9 D5          0159*      push de
0B02BA E5          0160*      push hl
0B02BB 11 DF 02 0B 0161*  	LD	 DE, _printDecFracBuffer
0B02BF CD 26 03 0B 0162*  	CALL u24_to_ascii
0B02C3             0163*  ; replace leading zeroes with spaces
0B02C3 21 DF 02 0B 0164*      LD	 HL, _printDecFracBuffer
0B02C7 06 07       0165*      ld   B, 7 ; if HL was 0, we want to keep the final zero
0B02C9             0166*  @loop:
0B02C9 7E          0167*      LD	 A, (HL)
0B02CA FE 30       0168*      CP	 '0'
0B02CC C2 D6 02 0B 0169*      JP	 NZ, @done
0B02D0 3E 20       0170*      LD   A, ' '
0B02D2 77          0171*      LD	 (HL), A
0B02D3 23          0172*      INC	 HL
0B02D4 10 F3       0173*      DJNZ @loop
0B02D6             0174*  @done:
0B02D6 CD 67 02 0B 0175*  	CALL printString
0B02DA             0176*  ; restore all the things
0B02DA E1          0177*      pop hl
0B02DB D1          0178*      pop de
0B02DC C1          0179*      pop bc
0B02DD F1          0180*      pop af
0B02DE             0181*  ; END MY CODE
0B02DE C9          0182*  	RET
0B02DF 00 00 00 00 0183*  _printDecFracBuffer: blkb 11,0 ; 11 bytes full of zeroes
       00 00 00 00 
       00 00 00    
0B02EA             0184*  
0B02EA             0185*  
0B02EA             0186*  ; Prints the right justified decimal value in HL without leading zeroes
0B02EA             0187*  ; HL : Value to print
0B02EA             0188*  ; preserves all registers and flags
0B02EA             0189*  printDec:
0B02EA             0190*  ; BEGIN MY CODE
0B02EA             0191*  ; back up all the things
0B02EA F5          0192*      push af
0B02EB C5          0193*      push bc
0B02EC D5          0194*      push de
0B02ED E5          0195*      push hl
0B02EE             0196*  ; END MY CODE
0B02EE 11 16 03 0B 0197*  	LD	 DE, _printDecBuffer
0B02F2 CD 26 03 0B 0198*  	CALL u24_to_ascii
0B02F6             0199*  ; BEGIN MY CODE
0B02F6             0200*  ; replace leading zeroes with spaces
0B02F6 21 16 03 0B 0201*      LD	 HL, _printDecBuffer
0B02FA 06 07       0202*      ld   B, 7 ; if HL was 0, we want to keep the final zero
0B02FC             0203*  @loop:
0B02FC 7E          0204*      LD	 A, (HL)
0B02FD FE 30       0205*      CP	 '0'
0B02FF C2 0D 03 0B 0206*      JP	 NZ, @done
0B0303 3E 20       0207*      LD   A, ' '
0B0305 77          0208*      LD	 (HL), A
0B0306 23          0209*      INC	 HL
0B0307 CD DD 08 0B 0210*      CALL vdu_cursor_forward
0B030B 10 EF       0211*      DJNZ @loop
0B030D             0212*  @done:
0B030D             0213*  ; END MY CODE
0B030D             0214*  	; LD	 HL, _printDecBuffer
0B030D CD 67 02 0B 0215*  	CALL printString
0B0311             0216*  ; BEGIN MY CODE
0B0311             0217*  ; restore all the things
0B0311 E1          0218*      pop hl
0B0312 D1          0219*      pop de
0B0313 C1          0220*      pop bc
0B0314 F1          0221*      pop af
0B0315             0222*  ; END MY CODE
0B0315 C9          0223*  	RET
0B0316 00 00 00 00 0224*  _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0B0326             0225*  
0B0326             0226*  ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
0B0326             0227*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
0B0326             0228*  ; so it will allways be 8 characters length
0B0326             0229*  ; HL : Value to convert to string
0B0326             0230*  ; DE : pointer to buffer, at least 8 byte + 0
0B0326             0231*  u24_to_ascii:
0B0326 01 80 69 67 0232*  	LD	 BC,-10000000
0B032A CD 5D 03 0B 0233*  	CALL @one_digit
0B032E 01 C0 BD F0 0234*  	LD	 BC,-1000000
0B0332 CD 5D 03 0B 0235*  	CALL @one_digit
0B0336 01 60 79 FE 0236*  	LD	 BC,-100000
0B033A CD 5D 03 0B 0237*  	CALL @one_digit
0B033E 01 F0 D8 FF 0238*  	LD   BC,-10000
0B0342 CD 5D 03 0B 0239*  	CALL @one_digit
0B0346 01 18 FC FF 0240*  	LD   BC,-1000
0B034A CD 5D 03 0B 0241*  	CALL @one_digit
0B034E 01 9C FF FF 0242*  	LD   BC,-100
0B0352 CD 5D 03 0B 0243*  	CALL @one_digit
0B0356 0E F6       0244*  	LD   C,-10
0B0358 CD 5D 03 0B 0245*  	CALL @one_digit
0B035C 48          0246*  	LD   C,B
0B035D             0247*  @one_digit:
0B035D 3E 2F       0248*  	LD   A,'0'-1
0B035F             0249*  @divide_me:
0B035F 3C          0250*  	INC  A
0B0360 09          0251*  	ADD  HL,BC
0B0361 38 FC       0252*  	JR   C,@divide_me
0B0363 ED 42       0253*  	SBC  HL,BC
0B0365 12          0254*  	LD   (DE),A
0B0366 13          0255*  	INC  DE
0B0367 C9          0256*  	RET
0B0368             0257*  
0B0368             0258*  print_u24:
0B0368 11 16 03 0B 0259*      ld de,_printDecBuffer
0B036C CD 26 03 0B 0260*      call u24_to_ascii
0B0370 21 16 03 0B 0261*      ld hl,_printDecBuffer
0B0374 CD 67 02 0B 0262*      call printString
0B0378 C9          0263*      ret
0B0379             0264*  
0B0379             0265*  ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
0B0379             0266*  ; HL : Value to convert to string (integer part in H, fractional part in L)
0B0379             0267*  ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
0B0379             0268*  u168_to_ascii:
0B0379             0269*  ; add a leading space to make room for sign flag if needed
0B0379 3E 20       0270*      ld a,' '
0B037B 12          0271*      ld (de),a
0B037C 13          0272*      inc de
0B037D             0273*  ; Convert integer part
0B037D E5          0274*      push hl               ; Save HL (we’ll need the fractional part later)
0B037E CD 6F 0E 0B 0275*      call shift_hlu_r1b    ; Shift to get integer portion in HL
0B0382 01 F0 D8 FF 0276*      ld   bc, -10000
0B0386 CD A9 03 0B 0277*      call @one_int
0B038A 01 18 FC FF 0278*      ld   bc, -1000
0B038E CD A9 03 0B 0279*      call @one_int
0B0392 01 9C FF FF 0280*      ld   bc, -100
0B0396 CD A9 03 0B 0281*      call @one_int
0B039A 0E F6       0282*      ld   c, -10
0B039C CD A9 03 0B 0283*      call @one_int
0B03A0 48          0284*      ld   c, b
0B03A1 CD A9 03 0B 0285*      call @one_int
0B03A5 C3 B4 03 0B 0286*      jp   @frac            ; Jump to fractional part conversion
0B03A9             0287*  @one_int:
0B03A9 3E 2F       0288*      ld   a, '0' - 1       ; Start ASCII character at '0'
0B03AB             0289*  @divide_me:
0B03AB 3C          0290*      inc  a
0B03AC 09          0291*      add  hl, bc           ; Accumulate until overflow
0B03AD 38 FC       0292*      jr   c, @divide_me
0B03AF ED 42       0293*      sbc  hl, bc           ; Remove excess after overflow
0B03B1 12          0294*      ld   (de), a          ; Store ASCII digit
0B03B2 13          0295*      inc  de
0B03B3 C9          0296*      ret
0B03B4             0297*  ; Convert fractional part
0B03B4             0298*  @frac:
0B03B4 3E 2E       0299*      ld   a, '.'           ; Decimal point
0B03B6 12          0300*      ld   (de), a
0B03B7 13          0301*      inc  de
0B03B8 E1          0302*      pop  hl               ; Restore HL with original fraction
0B03B9 06 03       0303*      ld   b, 3             ; Loop counter for 3 fractional digits
0B03BB             0304*  @frac_loop:
0B03BB 26 0A       0305*      ld   h, 10            ; Load multiplier for fractional part
0B03BD ED 6C       0306*      mlt  hl               ; Multiply by 10, result in HL (H holds the integer part)
0B03BF 3E 30       0307*      ld   a, '0'
0B03C1 84          0308*      add  a, h             ; Convert integer part to ASCII
0B03C2 12          0309*      ld   (de), a
0B03C3 13          0310*      inc  de
0B03C4 10 F5       0311*      djnz @frac_loop       ; Repeat for each fractional digit
0B03C6             0312*  ; Add null terminator
0B03C6 AF          0313*      xor  a                ; Null terminator
0B03C7 12          0314*      ld   (de), a
0B03C8 C9          0315*      ret
0B03C9             0316*  
0B03C9             0317*  print_u168:
0B03C9 11 16 03 0B 0318*      ld de,_printDecBuffer
0B03CD CD 79 03 0B 0319*      call u168_to_ascii
0B03D1 21 16 03 0B 0320*      ld hl,_printDecBuffer
0B03D5 CD 67 02 0B 0321*      call printString
0B03D9 C9          0322*      ret
0B03DA             0323*  
0B03DA             0324*  ; signed version of u168_to_ascii
0B03DA             0325*  s168_to_ascii:
0B03DA D5          0326*      push de ; save starting address of buffer
0B03DB CD B6 18 0B 0327*      call abs_hlu
0B03DF F5          0328*      push af ; save sign flag
0B03E0 CD 79 03 0B 0329*      call u168_to_ascii
0B03E4 F1          0330*      pop af ; restore sign flag
0B03E5 D1          0331*      pop de ; restore starting address of buffer
0B03E6 F0          0332*      ret p ; hlu was positive so nothing to do
0B03E7 3E 2D       0333*      ld a,'-'
0B03E9 12          0334*      ld (de),a
0B03EA C9          0335*      ret
0B03EB             0336*  
0B03EB             0337*  print_s168:
0B03EB 11 16 03 0B 0338*      ld de,_printDecBuffer
0B03EF CD DA 03 0B 0339*      call s168_to_ascii
0B03F3 21 16 03 0B 0340*      ld hl,_printDecBuffer
0B03F7 CD 67 02 0B 0341*      call printString
0B03FB C9          0342*      ret
0B03FC             0343*  
0B03FC             0344*  ; #### new functions added by Brandon R. Gates ####
0B03FC             0345*  
0B03FC             0346*  ; print the binary representation of the 8-bit value in a
0B03FC             0347*  ; destroys a, hl, bc
0B03FC             0348*  printBin8:
0B03FC 06 08       0349*      ld b,8      ; loop counter for 8 bits
0B03FE 21 19 04 0B 0350*      ld hl,@cmd  ; set hl to the low byte of the output string
0B0402             0351*                  ; (which will be the high bit of the value in a)
0B0402             0352*  @loop:
0B0402 07          0353*      rlca ; put the next highest bit into carry
0B0403 38 04       0354*      jr c,@one
0B0405 36 30       0355*      ld (hl),'0'
0B0407 18 02       0356*      jr @next_bit
0B0409             0357*  @one:
0B0409 36 31       0358*      ld (hl),'1'
0B040B             0359*  @next_bit:
0B040B 23          0360*      inc hl
0B040C 10 F4       0361*      djnz @loop
0B040E             0362*  ; print it
0B040E 21 19 04 0B 0363*  	ld hl,@cmd
0B0412 01 08 00 00 0364*  	ld bc,@end-@cmd
0B0416 5B DF       0365*  	rst.lil $18
0B0418 C9          0366*  	ret
0B0419             0367*  @cmd: ds 8 ; eight bytes for eight bits
0B0421             0368*  @end:
0B0421             0369*  
0B0421             0370*  ; print the binary representation of the 8-bit value in a
0B0421             0371*  ; in reverse order (lsb first)
0B0421             0372*  ; destroys a, hl, bc
0B0421             0373*  printBin8Rev:
0B0421 06 08       0374*      ld b,8      ; loop counter for 8 bits
0B0423 21 3E 04 0B 0375*      ld hl,@cmd  ; set hl to the low byte of the output string
0B0427             0376*                  ; (which will be the high bit of the value in a)
0B0427             0377*  @loop:
0B0427 0F          0378*      rrca ; put the next lowest bit into carry
0B0428 38 04       0379*      jr c,@one
0B042A 36 30       0380*      ld (hl),'0'
0B042C 18 02       0381*      jr @next_bit
0B042E             0382*  @one:
0B042E 36 31       0383*      ld (hl),'1'
0B0430             0384*  @next_bit:
0B0430 23          0385*      inc hl
0B0431 10 F4       0386*      djnz @loop
0B0433             0387*  ; print it
0B0433 21 3E 04 0B 0388*  	ld hl,@cmd
0B0437 01 08 00 00 0389*  	ld bc,@end-@cmd
0B043B 5B DF       0390*  	rst.lil $18
0B043D C9          0391*  	ret
0B043E             0392*  @cmd: ds 8 ; eight bytes for eight bits
0B0446             0393*  @end:
0B0446             0394*  
0B0446             0395*  ; print registers to screen in hexidecimal format
0B0446             0396*  ; inputs: none
0B0446             0397*  ; outputs: values of every register printed to screen
0B0446             0398*  ;    values of each register in global scratch memory
0B0446             0399*  ; destroys: nothing
0B0446             0400*  stepRegistersHex:
0B0446             0401*  ; store everything in scratch
0B0446 22 33 06 0B 0402*      ld (uhl),hl
0B044A ED 43 36 06 0403*      ld (ubc),bc
       0B          
0B044F ED 53 39 06 0404*      ld (ude),de
       0B          
0B0454 DD 22 3C 06 0405*      ld (uix),ix
       0B          
0B0459 FD 22 3F 06 0406*      ld (uiy),iy
       0B          
0B045E F5          0407*      push af ; fml
0B045F E1          0408*      pop hl  ; thanks, zilog
0B0460 22 30 06 0B 0409*      ld (uaf),hl
0B0464 F5          0410*      push af ; dammit
0B0465             0411*  
0B0465             0412*  ; home the cursor
0B0465 CD BC 08 0B 0413*      call vdu_home_cursor
0B0469             0414*  
0B0469             0415*  ; print each register
0B0469 21 B6 05 0B 0416*      ld hl,str_afu
0B046D CD 67 02 0B 0417*      call printString
0B0471 2A 30 06 0B 0418*      ld hl,(uaf)
0B0475 CD 87 02 0B 0419*      call printHex24
0B0479 CD 7C 02 0B 0420*      call printNewLine
0B047D             0421*  
0B047D 21 BB 05 0B 0422*      ld hl,str_hlu
0B0481 CD 67 02 0B 0423*      call printString
0B0485 2A 33 06 0B 0424*      ld hl,(uhl)
0B0489 CD 87 02 0B 0425*      call printHex24
0B048D CD 7C 02 0B 0426*      call printNewLine
0B0491             0427*  
0B0491 21 C0 05 0B 0428*      ld hl,str_bcu
0B0495 CD 67 02 0B 0429*      call printString
0B0499 2A 36 06 0B 0430*      ld hl,(ubc)
0B049D CD 87 02 0B 0431*      call printHex24
0B04A1 CD 7C 02 0B 0432*      call printNewLine
0B04A5             0433*  
0B04A5 21 C5 05 0B 0434*      ld hl,str_deu
0B04A9 CD 67 02 0B 0435*      call printString
0B04AD 2A 39 06 0B 0436*      ld hl,(ude)
0B04B1 CD 87 02 0B 0437*      call printHex24
0B04B5 CD 7C 02 0B 0438*      call printNewLine
0B04B9             0439*  
0B04B9 21 CA 05 0B 0440*      ld hl,str_ixu
0B04BD CD 67 02 0B 0441*      call printString
0B04C1 2A 3C 06 0B 0442*      ld hl,(uix)
0B04C5 CD 87 02 0B 0443*      call printHex24
0B04C9 CD 7C 02 0B 0444*      call printNewLine
0B04CD             0445*  
0B04CD 21 CF 05 0B 0446*      ld hl,str_iyu
0B04D1 CD 67 02 0B 0447*      call printString
0B04D5 2A 3F 06 0B 0448*      ld hl,(uiy)
0B04D9 CD 87 02 0B 0449*      call printHex24
0B04DD CD 7C 02 0B 0450*      call printNewLine
0B04E1             0451*  
0B04E1             0452*      ; call vsync
0B04E1             0453*  
0B04E1 CD 7C 02 0B 0454*      call printNewLine
0B04E5             0455*  
0B04E5             0456*  ; check for right shift key and quit if pressed
0B04E5             0457*  	MOSCALL mos_getkbmap
0B04E5 3E 1E       0001*M 			LD	A, function
0B04E7 5B CF       0002*M 			RST.L	08h
0B04E9             0458*  @stayhere:
0B04E9             0459*  ; 7 RightShift
0B04E9 DD CB 00 76 0460*      bit 6,(ix+0)
0B04ED 20 02       0461*      jr nz,@RightShift
0B04EF 18 F8       0462*      jr @stayhere
0B04F1             0463*  @RightShift:
0B04F1 DD CB 0E 86 0464*      res 0,(ix+14) ; debounce the key (hopefully)
0B04F5 3E 80       0465*      ld a,%10000000
0B04F7 CD 9C 08 0B 0466*      call multiPurposeDelay
0B04FB             0467*  
0B04FB             0468*  ; restore everything
0B04FB 2A 33 06 0B 0469*      ld hl, (uhl)
0B04FF ED 4B 36 06 0470*      ld bc, (ubc)
       0B          
0B0504 ED 5B 39 06 0471*      ld de, (ude)
       0B          
0B0509 DD 2A 3C 06 0472*      ld ix, (uix)
       0B          
0B050E FD 2A 3F 06 0473*      ld iy, (uiy)
       0B          
0B0513 F1          0474*      pop af
0B0514             0475*  ; all done
0B0514 C9          0476*      ret
0B0515             0477*  
0B0515             0478*  ; print registers to screen in hexidecimal format
0B0515             0479*  ; inputs: none
0B0515             0480*  ; outputs: values of every register printed to screen
0B0515             0481*  ;    values of each register in global scratch memory
0B0515             0482*  ; destroys: nothing
0B0515             0483*  dumpRegistersHex:
0B0515             0484*  ; store everything in scratch
0B0515 22 33 06 0B 0485*      ld (uhl),hl
0B0519 ED 43 36 06 0486*      ld (ubc),bc
       0B          
0B051E ED 53 39 06 0487*      ld (ude),de
       0B          
0B0523 DD 22 3C 06 0488*      ld (uix),ix
       0B          
0B0528 FD 22 3F 06 0489*      ld (uiy),iy
       0B          
0B052D F5          0490*      push af ; fml
0B052E E1          0491*      pop hl  ; thanks, zilog
0B052F 22 30 06 0B 0492*      ld (uaf),hl
0B0533 F5          0493*      push af ; dammit
0B0534             0494*  
0B0534             0495*  ; home the cursor
0B0534             0496*      ; call vdu_home_cursor
0B0534             0497*      ; call printNewLine
0B0534             0498*  
0B0534             0499*  ; print each register
0B0534 21 B6 05 0B 0500*      ld hl,str_afu
0B0538 CD 67 02 0B 0501*      call printString
0B053C 2A 30 06 0B 0502*      ld hl,(uaf)
0B0540 CD 87 02 0B 0503*      call printHex24
0B0544             0504*      ; call printNewLine
0B0544             0505*  
0B0544 21 BB 05 0B 0506*      ld hl,str_hlu
0B0548 CD 67 02 0B 0507*      call printString
0B054C 2A 33 06 0B 0508*      ld hl,(uhl)
0B0550 CD 87 02 0B 0509*      call printHex24
0B0554             0510*      ; call printNewLine
0B0554             0511*  
0B0554 21 C0 05 0B 0512*      ld hl,str_bcu
0B0558 CD 67 02 0B 0513*      call printString
0B055C 2A 36 06 0B 0514*      ld hl,(ubc)
0B0560 CD 87 02 0B 0515*      call printHex24
0B0564             0516*      ; call printNewLine
0B0564             0517*  
0B0564 21 C5 05 0B 0518*      ld hl,str_deu
0B0568 CD 67 02 0B 0519*      call printString
0B056C 2A 39 06 0B 0520*      ld hl,(ude)
0B0570 CD 87 02 0B 0521*      call printHex24
0B0574             0522*      ; call printNewLine
0B0574             0523*  
0B0574 21 CA 05 0B 0524*      ld hl,str_ixu
0B0578 CD 67 02 0B 0525*      call printString
0B057C 2A 3C 06 0B 0526*      ld hl,(uix)
0B0580 CD 87 02 0B 0527*      call printHex24
0B0584             0528*      ; call printNewLine
0B0584             0529*  
0B0584 21 CF 05 0B 0530*      ld hl,str_iyu
0B0588 CD 67 02 0B 0531*      call printString
0B058C 2A 3F 06 0B 0532*      ld hl,(uiy)
0B0590 CD 87 02 0B 0533*      call printHex24
0B0594             0534*      ; call printNewLine
0B0594             0535*  
0B0594 CD 51 09 0B 0536*      call vdu_vblank
0B0598             0537*  
0B0598 CD 7C 02 0B 0538*      call printNewLine
0B059C             0539*  ; restore everything
0B059C 2A 33 06 0B 0540*      ld hl, (uhl)
0B05A0 ED 4B 36 06 0541*      ld bc, (ubc)
       0B          
0B05A5 ED 5B 39 06 0542*      ld de, (ude)
       0B          
0B05AA DD 2A 3C 06 0543*      ld ix, (uix)
       0B          
0B05AF FD 2A 3F 06 0544*      ld iy, (uiy)
       0B          
0B05B4 F1          0545*      pop af
0B05B5             0546*  ; all done
0B05B5 C9          0547*      ret
0B05B6             0548*  
0B05B6 20 61 66 3D 0549*  str_afu: db " af=",0
       00          
0B05BB 20 68 6C 3D 0550*  str_hlu: db " hl=",0
       00          
0B05C0 20 62 63 3D 0551*  str_bcu: db " bc=",0
       00          
0B05C5 20 64 65 3D 0552*  str_deu: db " de=",0
       00          
0B05CA 20 69 78 3D 0553*  str_ixu: db " ix=",0
       00          
0B05CF 20 69 79 3D 0554*  str_iyu: db " iy=",0
       00          
0B05D4             0555*  
0B05D4             0556*  ; print udeuhl to screen in hexidecimal format
0B05D4             0557*  ; inputs: none
0B05D4             0558*  ; outputs: concatenated hexidecimal udeuhl
0B05D4             0559*  ; destroys: nothing
0B05D4             0560*  dumpUDEUHLHex:
0B05D4             0561*  ; store everything in scratch
0B05D4 22 33 06 0B 0562*      ld (uhl),hl
0B05D8 ED 43 36 06 0563*      ld (ubc),bc
       0B          
0B05DD ED 53 39 06 0564*      ld (ude),de
       0B          
0B05E2 DD 22 3C 06 0565*      ld (uix),ix
       0B          
0B05E7 FD 22 3F 06 0566*      ld (uiy),iy
       0B          
0B05EC F5          0567*      push af
0B05ED             0568*  
0B05ED             0569*  ; print each register
0B05ED             0570*  
0B05ED 21 27 06 0B 0571*      ld hl,str_udeuhl
0B05F1 CD 67 02 0B 0572*      call printString
0B05F5 2A 39 06 0B 0573*      ld hl,(ude)
0B05F9 CD 87 02 0B 0574*      call printHex24
0B05FD 3E 2E       0575*  	ld a,'.'	; print a dot to separate the values
0B05FF 5B D7       0576*  	rst.lil 10h
0B0601 2A 33 06 0B 0577*      ld hl,(uhl)
0B0605 CD 87 02 0B 0578*      call printHex24
0B0609 CD 7C 02 0B 0579*      call printNewLine
0B060D             0580*  
0B060D             0581*  ; restore everything
0B060D 2A 33 06 0B 0582*      ld hl, (uhl)
0B0611 ED 4B 36 06 0583*      ld bc, (ubc)
       0B          
0B0616 ED 5B 39 06 0584*      ld de, (ude)
       0B          
0B061B DD 2A 3C 06 0585*      ld ix, (uix)
       0B          
0B0620 FD 2A 3F 06 0586*      ld iy, (uiy)
       0B          
0B0625 F1          0587*      pop af
0B0626             0588*  ; all done
0B0626 C9          0589*      ret
0B0627             0590*  
0B0627 75 64 65 2E 0591*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
0B0630             0592*  
0B0630             0593*  ; global scratch memory for registers
0B0630 00 00 00    0594*  uaf: dl 0
0B0633 00 00 00    0595*  uhl: dl 0
0B0636 00 00 00    0596*  ubc: dl 0
0B0639 00 00 00    0597*  ude: dl 0
0B063C 00 00 00    0598*  uix: dl 0
0B063F 00 00 00    0599*  uiy: dl 0
0B0642 00 00 00    0600*  usp: dl 0
0B0645 00 00 00    0601*  upc: dl 0
0B0648             0602*  
0B0648             0603*  ; inputs: whatever is in the flags register
0B0648             0604*  ; outputs: binary representation of flags
0B0648             0605*  ;          with a header so we know which is what
0B0648             0606*  ; destroys: nothing
0B0648             0607*  ; preserves: everything
0B0648             0608*  dumpFlags:
0B0648             0609*  ; first we curse zilog for not giving direct access to flags
0B0648 F5          0610*      push af ; this is so we can send it back unharmed
0B0649 F5          0611*      push af ; this is so we can pop it to hl
0B064A             0612*  ; store everything in scratch
0B064A 22 33 06 0B 0613*      ld (uhl),hl
0B064E ED 43 36 06 0614*      ld (ubc),bc
       0B          
0B0653 ED 53 39 06 0615*      ld (ude),de
       0B          
0B0658 DD 22 3C 06 0616*      ld (uix),ix
       0B          
0B065D FD 22 3F 06 0617*      ld (uiy),iy
       0B          
0B0662             0618*  ; next we print the header
0B0662 21 8E 06 0B 0619*      ld hl,@header
0B0666 CD 67 02 0B 0620*      call printString
0B066A E1          0621*      pop hl ; flags are now in l
0B066B 7D          0622*      ld a,l ; flags are now in a
0B066C CD FC 03 0B 0623*      call printBin8
0B0670 CD 7C 02 0B 0624*  	call printNewLine
0B0674             0625*  ; restore everything
0B0674 2A 33 06 0B 0626*      ld hl, (uhl)
0B0678 ED 4B 36 06 0627*      ld bc, (ubc)
       0B          
0B067D ED 5B 39 06 0628*      ld de, (ude)
       0B          
0B0682 DD 2A 3C 06 0629*      ld ix, (uix)
       0B          
0B0687 FD 2A 3F 06 0630*      ld iy, (uiy)
       0B          
0B068C F1          0631*      pop af ; send her home the way she came
0B068D C9          0632*      ret
0B068E             0633*  ; Bit 7 (S): Sign flag
0B068E             0634*  ; Bit 6 (Z): Zero flag
0B068E             0635*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0B068E             0636*  ; Bit 4 (H): Half Carry flag
0B068E             0637*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0B068E             0638*  ; Bit 2 (PV): Parity/Overflow flag
0B068E             0639*  ; Bit 1 (N): Subtract flag
0B068E             0640*  ; Bit 0 (C): Carry flag
0B068E 53 5A 78 48 0641*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0B0699             0642*  
0B0699             0643*  ; set all the bits in the flag register
0B0699             0644*  ; more of an academic exercise than anything useful
0B0699             0645*  ; inputs; none
0B0699             0646*  ; outputs; a=0,f=255
0B0699             0647*  ; destroys: flags, hl
0B0699             0648*  ; preserves: a, because why not
0B0699             0649*  setAllFlags:
0B0699 21 FF 00 00 0650*      ld hl,255
0B069D 67          0651*      ld h,a ; four cycles to preserve a is cheap
0B069E E5          0652*      push hl
0B069F F1          0653*      pop af
0B06A0 C9          0654*      ret
0B06A1             0655*  
0B06A1             0656*  ; reset all the bits in the flag register
0B06A1             0657*  ; unlike its inverse counterpart, this may actually be useful
0B06A1             0658*  ; inputs; none
0B06A1             0659*  ; outputs; a=0,f=0
0B06A1             0660*  ; destroys: flags, hl
0B06A1             0661*  ; preserves: a, because why not
0B06A1             0662*  resetAllFlags:
0B06A1 21 00 00 00 0663*      ld hl,0
0B06A5 67          0664*      ld h,a ; four cycles to preserve a is cheap
0B06A6 E5          0665*      push hl
0B06A7 F1          0666*      pop af
0B06A8 C9          0667*      ret
0B06A9             0668*  
0B06A9             0669*  ; wait until user presses a key
0B06A9             0670*  ; inputs: none
0B06A9             0671*  ; outputs: none
0B06A9             0672*  ; destroys: af,ix
0B06A9             0673*  waitKeypress:
0B06A9             0674*      MOSCALL mos_sysvars
0B06A9 3E 08       0001*M 			LD	A, function
0B06AB 5B CF       0002*M 			RST.L	08h
0B06AD AF          0675*      xor a ; zero out any prior keypresses
0B06AE DD 77 05    0676*      ld (ix+sysvar_keyascii),a
0B06B1             0677*  @loop:
0B06B1 DD 7E 05    0678*      ld a,(ix+sysvar_keyascii)
0B06B4 A7          0679*      and a
0B06B5 C0          0680*      ret nz
0B06B6 18 F9       0681*      jr @loop
0B06B8             0682*  
0B06B8             0683*  
0B06B8             0684*  ; print bytes from an address to the screen in hexidecimal format
0B06B8             0685*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0B06B8             0686*  ; outputs: values of each byte printed to screen separated by spaces
0B06B8             0687*  ; destroys: nothing
0B06B8             0688*  dumpMemoryHex:
0B06B8             0689*  ; save registers to the stack
0B06B8 C5          0690*      push bc
0B06B9 E5          0691*      push hl
0B06BA F5          0692*      push af
0B06BB             0693*  
0B06BB             0694*  ; print the address and separator
0B06BB CD 87 02 0B 0695*      call printHex24
0B06BF 3E 3A       0696*      ld a,':'
0B06C1 5B D7       0697*      rst.lil 10h
0B06C3 3E 20       0698*      ld a,' '
0B06C5 5B D7       0699*      rst.lil 10h
0B06C7             0700*  
0B06C7             0701*  ; set b to be our loop counter
0B06C7 F1          0702*      pop af
0B06C8 47          0703*      ld b,a
0B06C9 E1          0704*      pop hl
0B06CA E5          0705*      push hl
0B06CB F5          0706*      push af
0B06CC             0707*  @loop:
0B06CC             0708*  ; print the byte
0B06CC 7E          0709*      ld a,(hl)
0B06CD CD 99 02 0B 0710*      call printHex8
0B06D1             0711*  ; print a space
0B06D1 3E 20       0712*      ld a,' '
0B06D3 5B D7       0713*      rst.lil 10h
0B06D5 23          0714*      inc hl
0B06D6 10 F4       0715*      djnz @loop
0B06D8             0716*      ; call printNewLine
0B06D8             0717*  
0B06D8             0718*  ; restore everything
0B06D8 F1          0719*      pop af
0B06D9 E1          0720*      pop hl
0B06DA C1          0721*      pop bc
0B06DB             0722*  
0B06DB             0723*  ; all done
0B06DB C9          0724*      ret
0B06DC             0725*  
0B06DC             0726*  
0B06DC             0727*  ; print bytes from an address to the screen in binary format
0B06DC             0728*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0B06DC             0729*  ; outputs: values of each byte printed to screen separated by spaces
0B06DC             0730*  ; destroys: nothing
0B06DC             0731*  dumpMemoryBin:
0B06DC             0732*  ; save all registers to the stack
0B06DC F5          0733*      push af
0B06DD C5          0734*      push bc
0B06DE D5          0735*      push de
0B06DF E5          0736*      push hl
0B06E0 DD E5       0737*      push ix
0B06E2 FD E5       0738*      push iy
0B06E4             0739*  
0B06E4             0740*  ; set b to be our loop counter
0B06E4 47          0741*      ld b,a
0B06E5             0742*  @loop:
0B06E5             0743*  ; print the byte
0B06E5 7E          0744*      ld a,(hl)
0B06E6 E5          0745*      push hl
0B06E7 C5          0746*      push bc
0B06E8 CD FC 03 0B 0747*      call printBin8
0B06EC C1          0748*      pop bc
0B06ED             0749*  ; print a space
0B06ED 3E 20       0750*      ld a,' '
0B06EF 5B D7       0751*      rst.lil 10h
0B06F1 E1          0752*      pop hl
0B06F2 23          0753*      inc hl
0B06F3 10 F0       0754*      djnz @loop
0B06F5 CD 7C 02 0B 0755*      call printNewLine
0B06F9             0756*  
0B06F9             0757*  ; restore everything
0B06F9 FD E1       0758*      pop iy
0B06FB DD E1       0759*      pop ix
0B06FD E1          0760*      pop hl
0B06FE D1          0761*      pop de
0B06FF C1          0762*      pop bc
0B0700 F1          0763*      pop af
0B0701             0764*  ; all done
0B0701 C9          0765*      ret
0B0702             0766*  
0B0702             0767*  ; print bytes from an address to the screen in binary format
0B0702             0768*  ; with the bits of each byte in reverse order (lsb first)
0B0702             0769*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0B0702             0770*  ; outputs: values of each byte printed to screen separated by spaces
0B0702             0771*  ; destroys: nothing
0B0702             0772*  dumpMemoryBinRev:
0B0702             0773*  ; save all registers to the stack
0B0702 F5          0774*      push af
0B0703 C5          0775*      push bc
0B0704 D5          0776*      push de
0B0705 E5          0777*      push hl
0B0706 DD E5       0778*      push ix
0B0708 FD E5       0779*      push iy
0B070A             0780*  
0B070A             0781*  ; set b to be our loop counter
0B070A 47          0782*      ld b,a
0B070B             0783*  @loop:
0B070B             0784*  ; print the byte
0B070B 7E          0785*      ld a,(hl)
0B070C E5          0786*      push hl
0B070D C5          0787*      push bc
0B070E CD 21 04 0B 0788*      call printBin8Rev
0B0712 C1          0789*      pop bc
0B0713             0790*  ; print a space
0B0713 3E 20       0791*      ld a,' '
0B0715 5B D7       0792*      rst.lil 10h
0B0717 E1          0793*      pop hl
0B0718 23          0794*      inc hl
0B0719 10 F0       0795*      djnz @loop
0B071B CD 7C 02 0B 0796*      call printNewLine
0B071F             0797*  
0B071F             0798*  ; restore everything
0B071F FD E1       0799*      pop iy
0B0721 DD E1       0800*      pop ix
0B0723 E1          0801*      pop hl
0B0724 D1          0802*      pop de
0B0725 C1          0803*      pop bc
0B0726 F1          0804*      pop af
0B0727             0805*  ; all done
0B0727 C9          0806*      ret
0B0728             0020       include "files.inc"
0B0728             0001*  ; load to onboard 8k sram
0B0728             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
0B0728             0021       include "timer.inc"
0B0728             0001*  ; Table 32. Timer Control Registers
0B0728             0002*  ; this constant is the base address of the timer control registers
0B0728             0003*  ; each timer takes three bytes:
0B0728             0004*  ;   0: control register
0B0728             0005*  ;   1: low byte of timer reset value
0B0728             0006*  ;   2: high byte of timer reset value
0B0728             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0B0728             0008*  ; which correctly force the high and upper bytes of the address bus to zero
0B0728             0009*  TMR_CTL:     equ 80h
0B0728             0010*  
0B0728             0011*  ; Timer Control Register Bit Definitions
0B0728             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0B0728             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
0B0728             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0B0728             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
0B0728             0016*                              ; the TMRx_CTL register is read.
0B0728             0017*  
0B0728             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0B0728             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0B0728             0020*  
0B0728             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0B0728             0022*                              ;  0,and counting stops when the end-of-count value is reached.
0B0728             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0B0728             0024*                              ; written to the counter when the end-of-count value is reached.
0B0728             0025*  
0B0728             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0B0728             0027*  CLK_DIV_256:  equ %00001100 ;
0B0728             0028*  CLK_DIV_64:   equ %00001000 ;
0B0728             0029*  CLK_DIV_16:   equ %00000100 ;
0B0728             0030*  CLK_DIV_4:    equ %00000000 ;
0B0728             0031*  
0B0728             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0B0728             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0B0728             0034*                              ; When a 1 is written to this bit,the values in the reload registers
0B0728             0035*                              ;  are loaded into the downcounter when the timer restarts. The
0B0728             0036*                              ; programmer must ensure that this bit is set to 1 each time
0B0728             0037*                              ; SINGLE-PASS mode is used.
0B0728             0038*  
0B0728             0039*  ; disable/enable the programmable reload timer
0B0728             0040*  PRT_EN_0:     equ %00000000 ;
0B0728             0041*  PRT_EN_1:     equ %00000001 ;
0B0728             0042*  
0B0728             0043*  ; Table 37. Timer Input Source Select Register
0B0728             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
0B0728             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0B0728             0046*  ;   00: System clock / CLK_DIV
0B0728             0047*  ;   01: RTC / CLK_DIV
0B0728             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
0B0728             0049*  ;   10: GPIO port B pin 1.
0B0728             0050*  ;   11: GPIO port B pin 1.
0B0728             0051*  TMR_ISS:   equ 92h ; register address
0B0728             0052*  
0B0728             0053*  ; Table 51. Real-Time Clock Control Register
0B0728             0054*  RTC_CTRL: equ EDh ; register address
0B0728             0055*  
0B0728             0056*  ; alarm interrupt disable/enable
0B0728             0057*  RTC_ALARM_0:    equ %00000000
0B0728             0058*  RTC_ALARM_1:    equ %10000000
0B0728             0059*  
0B0728             0060*  ; interrupt on alarm disable/enable
0B0728             0061*  RTC_INT_ENT_0:  equ %00000000
0B0728             0062*  RTC_INT_ENT_1:  equ %01000000
0B0728             0063*  
0B0728             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0B0728             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0B0728             0066*  
0B0728             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0B0728             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
0B0728             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0B0728             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
0B0728             0071*  
0B0728             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0B0728             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0B0728             0074*  
0B0728             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0B0728             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0B0728             0077*  
0B0728             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0B0728             0079*                                  ; RTC counter is enabled.
0B0728             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0B0728             0081*                                  ; RTC counter is disabled.
0B0728             0082*  
0B0728             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0B0728             0084*  
0B0728             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0B0728             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0B0728 00 00 00    0087*  prt_reload: dl 0x000000
0B072B             0088*  
0B072B             0089*  ; ; returns: a = 0 if running on hardware,1 if running on emulator
0B072B             0090*  ; ;          de = number PRT interrupts during test interval
0B072B             0091*  ; prt_calibrate:
0B072B             0092*  ;     call vdu_vblank
0B072B             0093*  ; ; set a MOS timer
0B072B             0094*  ;     ld hl,120*1 ; 1 second
0B072B             0095*  ;     ld iy,tmr_test
0B072B             0096*  ;     call tmr_set
0B072B             0097*  ; ; set a PRT timer
0B072B             0098*  ;     ; ld hl,prt_reload_hardware
0B072B             0099*  ;     ; ld hl,prt_reload_emulator
0B072B             0100*  ;     ld hl,prt_reload_emulator + prt_reload_hardware / 2
0B072B             0101*  ;     ld (prt_reload),hl
0B072B             0102*  ;     call prt_set
0B072B             0103*  ; @loop:
0B072B             0104*  ; ; check time remaining on MOS timer
0B072B             0105*  ;     call tmr_get
0B072B             0106*  ;     jp z,@done ; time expired,so quit
0B072B             0107*  ;     jp m,@done ; time past expiration (negative),so quit
0B072B             0108*  ;     jr @loop
0B072B             0109*  ; @done:
0B072B             0110*  ;     ld de,(prt_irq_counter)
0B072B             0111*  ;     ld bc,prt_reload_hardware ; default value for running on hardware
0B072B             0112*  ;     ld (prt_reload),bc
0B072B             0113*  ;     ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
0B072B             0114*  ;     xor a ; clear carry,zero is default value for running on hardware
0B072B             0115*  ;     ld (is_emulator),a
0B072B             0116*  ;     sbc hl,de
0B072B             0117*  ;     ld hl,on_hardware ; default message for running on hardware
0B072B             0118*  ;     jp z,prt_calibrate ; zero result is indeterminate so we try again
0B072B             0119*  ;     ret m ; negative result means we're on hardware
0B072B             0120*  ;     inc a ; we're on emulator
0B072B             0121*  ;     ld (is_emulator),a
0B072B             0122*  ;     ld bc,prt_reload_emulator
0B072B             0123*  ;     ld (prt_reload),bc
0B072B             0124*  ;     ld hl,on_emulator
0B072B             0125*  ;     ret
0B072B             0126*  
0B072B             0127*  ; calibrating_timer: defb "Calibrating timer\r\n",0
0B072B             0128*  
0B072B             0129*  ; set PRT timer
0B072B             0130*  prt_set:
0B072B 21 00 00 00 0131*      ld hl,0
0B072F 22 79 07 0B 0132*      ld (prt_irq_counter),hl
0B0733 2A 28 07 0B 0133*      ld hl,(prt_reload)
0B0737 ED 29 84    0134*      out0 ($84),l
0B073A ED 21 85    0135*  	out0 ($85),h
0B073D             0136*  ; disable timer
0B073D 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0B073F ED 39 83    0138*  	out0 ($83),a
0B0742             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0B0742 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0B0744 ED 39 83    0141*  	out0 ($83),a
0B0747 C9          0142*      ret
0B0748             0143*  
0B0748             0144*  ; ===============================================
0B0748             0145*  ; PRT Timer Interrupt Handling
0B0748             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0B0748             0147*  ; -----------------------------------------------
0B0748             0148*  prt_irq_init:
0B0748             0149*      ; set up interrupt vector table 2
0B0748 21 00 00 00 0150*  	ld hl,0
0B074C 3A 0C 01 00 0151*  	ld a,($10c)
0B0750 6F          0152*  	ld l,a
0B0751 3A 0D 01 00 0153*  	ld a,($10d)
0B0755 67          0154*  	ld h,a
0B0756             0155*  
0B0756             0156*  	; skip over CALL ($c3)
0B0756 23          0157*  	inc hl
0B0757             0158*  	; load address of jump into vector table 2 (in ram)
0B0757 ED 27       0159*  	ld hl,(hl)
0B0759             0160*  
0B0759             0161*  	; write CALL prt_irq_handler to vector table 2
0B0759 3E C3       0162*  	ld a,$c3
0B075B 77          0163*  	ld (hl),a
0B075C 23          0164*  	inc hl
0B075D 11 64 07 0B 0165*  	ld de,prt_irq_handler
0B0761 ED 1F       0166*  	ld (hl),de
0B0763             0167*  
0B0763 C9          0168*      ret
0B0764             0169*  
0B0764             0170*  prt_irq_handler:
0B0764 F3          0171*  	di
0B0765 F5          0172*  	push af
0B0766 E5          0173*      push hl
0B0767 ED 38 83    0174*  	in0 a,($83)
0B076A 2A 79 07 0B 0175*  	ld hl,(prt_irq_counter)
0B076E 23          0176*  	inc hl
0B076F 22 79 07 0B 0177*  	ld (prt_irq_counter),hl
0B0773 E1          0178*      pop hl
0B0774 F1          0179*  	pop af
0B0775 FB          0180*  	ei
0B0776 5B ED 4D    0181*  	reti.l
0B0779             0182*  
0B0779             0183*  prt_irq_counter:
0B0779 00 00 00    0184*  	.dl 0
0B077C             0185*  prt_irq_counter_saved:
0B077C 00 00 00    0186*      .dl 0
0B077F             0187*  
0B077F             0188*  prt_loop_reset:
0B077F E5          0189*      push hl
0B0780 21 00 00 00 0190*  	ld hl,0
0B0784 22 79 07 0B 0191*  	ld (prt_irq_counter),hl
0B0788 22 EA 07 0B 0192*      ld (prt_loop_counter),hl
0B078C 22 ED 07 0B 0193*      ld (prt_loops),hl
0B0790 CD 2B 07 0B 0194*      call prt_set
0B0794 E1          0195*      pop hl
0B0795 C9          0196*      ret
0B0796             0197*  
0B0796             0198*  prt_loop_start:
0B0796 E5          0199*      push hl
0B0797 21 00 00 00 0200*  	ld hl,0
0B079B 22 79 07 0B 0201*  	ld (prt_irq_counter),hl
0B079F E1          0202*      pop hl
0B07A0 C9          0203*      ret
0B07A1             0204*  
0B07A1             0205*  prt_loop_stop:
0B07A1 E5          0206*      push hl
0B07A2 D5          0207*      push de
0B07A3 2A 79 07 0B 0208*      ld hl,(prt_irq_counter)
0B07A7 ED 5B EA 07 0209*      ld de,(prt_loop_counter)
       0B          
0B07AC 19          0210*      add hl,de
0B07AD 22 EA 07 0B 0211*      ld (prt_loop_counter),hl
0B07B1 21 00 00 00 0212*      ld hl,0
0B07B5 22 79 07 0B 0213*      ld (prt_irq_counter),hl
0B07B9 2A ED 07 0B 0214*      ld hl,(prt_loops)
0B07BD 23          0215*      inc hl
0B07BE 22 ED 07 0B 0216*      ld (prt_loops),hl
0B07C2 D1          0217*      pop de
0B07C3 E1          0218*      pop hl
0B07C4 C9          0219*      ret
0B07C5             0220*  
0B07C5             0221*  ; inputs: bc = y,x text coordinates to print
0B07C5             0222*  prt_loop_print:
0B07C5 F5          0223*      push af
0B07C6 E5          0224*      push hl
0B07C7 C5          0225*      push bc
0B07C8 D5          0226*      push de
0B07C9 DD E5       0227*      push ix
0B07CB FD E5       0228*      push iy
0B07CD CD E2 08 0B 0229*      call vdu_move_cursor
0B07D1             0230*  
0B07D1 2A EA 07 0B 0231*      ld hl,(prt_loop_counter)
0B07D5 CD EA 02 0B 0232*      call printDec
0B07D9             0233*  
0B07D9 2A ED 07 0B 0234*      ld hl,(prt_loops)
0B07DD CD EA 02 0B 0235*      call printDec
0B07E1             0236*  
0B07E1 FD E1       0237*      pop iy
0B07E3 DD E1       0238*      pop ix
0B07E5 D1          0239*      pop de
0B07E6 C1          0240*      pop bc
0B07E7 E1          0241*      pop hl
0B07E8 F1          0242*      pop af
0B07E9 C9          0243*      ret
0B07EA             0244*  
0B07EA             0245*  prt_loop_counter:
0B07EA 00 00 00    0246*      .dl 0
0B07ED             0247*  prt_loops:
0B07ED 00 00 00    0248*      .dl 0
0B07F0             0249*  
0B07F0             0250*  ; ===============================================
0B07F0             0251*  ; Timer functions
0B07F0             0252*  ; -----------------------------------------------
0B07F0             0253*  ; set a countdown timer
0B07F0             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B07F0             0255*  ; returns: hl = current time
0B07F0             0256*  tmr_set:
0B07F0 FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
0B07F3             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
0B07F3 3E 08       0001*M 			LD	A, function
0B07F5 5B CF       0002*M 			RST.L	08h
0B07F7 DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
0B07FA FD 2F 00    0260*      ld (iy+0),hl            ; set start time
0B07FD C9          0261*      ret
0B07FE             0262*  
0B07FE             0263*  ; gets time remaining on a countdown timer
0B07FE             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B07FE             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0B07FE             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
0B07FE             0267*  tmr_get:
0B07FE             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
0B07FE 3E 08       0001*M 			LD	A, function
0B0800 5B CF       0002*M 			RST.L	08h
0B0802 DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
0B0805 FD 27 00    0270*      ld hl,(iy+0)            ; get start time
0B0808 AF          0271*      xor a                   ; clear carry
0B0809 ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0B080B FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
0B080E AF          0274*      xor a                   ; clear carry
0B080F ED 5A       0275*      adc hl,de               ; hl = time remaining
0B0811             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0B0811 C9          0277*      ret
0B0812             0278*  
0B0812 00 00 00    0279*  timestamp_now: dl 0
0B0815 00 00 00    0280*  timestamp_old: dl 0
0B0818 00 00 00    0281*  timestamp_chg: dl 0
0B081B             0282*  
0B081B             0283*  ; update the global timestamp from the system clock
0B081B             0284*  ; inputs: none
0B081B             0285*  ; returns: hl = time elapsed in 1/120ths of a second
0B081B             0286*  ;          de = current time
0B081B             0287*  ;          ix = pointer to syvars table
0B081B             0288*  ; destroys: af,hl,de,ix
0B081B             0289*  timestamp_tick:
0B081B ED 5B 12 08 0290*      ld de,(timestamp_now)   ; get previous time
       0B          
0B0820 ED 53 15 08 0291*      ld (timestamp_old),de   ; save previous time
       0B          
0B0825             0292*      MOSCALL mos_sysvars     ; ix points to syvars table
0B0825 3E 08       0001*M 			LD	A, function
0B0827 5B CF       0002*M 			RST.L	08h
0B0829 DD 27 00    0293*      ld hl,(ix+sysvar_time)  ; get current time
0B082C 22 12 08 0B 0294*      ld (timestamp_now),hl   ; save current time
0B0830 AF          0295*      xor a                   ; clear carry
0B0831 ED 52       0296*      sbc hl,de               ; hl = time elapsed
0B0833 22 18 08 0B 0297*      ld (timestamp_chg),hl   ; save elapsed time
0B0837 C9          0298*      ret
0B0838             0299*  
0B0838             0300*  ; set a countdown timer
0B0838             0301*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B0838             0302*  ; requires: timestamp_tick to be called at least once before this function
0B0838             0303*  ; returns: hl = current time
0B0838             0304*  ; destroys: hl
0B0838             0305*  timestamp_tmr_set:
0B0838 FD 2F 03    0306*      ld (iy+3),hl            ; set time remaining
0B083B 2A 12 08 0B 0307*      ld hl,(timestamp_now)   ; get current timestamp
0B083F FD 2F 00    0308*      ld (iy+0),hl            ; set start time
0B0842 C9          0309*      ret
0B0843             0310*  
0B0843             0311*  ; gets time remaining on a countdown timer following the global timestamp
0B0843             0312*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B0843             0313*  ; requires: timestamp_tick to be called at least once before this function
0B0843             0314*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0B0843             0315*  ;          sign flags: pos = time not expired,zero or neg = time expired
0B0843             0316*  ; destroys: af,hl,de
0B0843             0317*  timestamp_tmr_get:
0B0843 ED 5B 12 08 0318*      ld de,(timestamp_now)   ; get current timestamp
       0B          
0B0848 FD 27 00    0319*      ld hl,(iy+0)            ; get start time
0B084B AF          0320*      xor a                   ; clear carry
0B084C ED 52       0321*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0B084E FD 17 03    0322*      ld de,(iy+3)            ; get timer set value
0B0851 AF          0323*      xor a                   ; clear carry
0B0852 ED 5A       0324*      adc hl,de               ; hl = time remaining
0B0854             0325*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0B0854 C9          0326*      ret
0B0855             0327*  
0B0855             0328*  ; main loop timer functions
0B0855             0329*  tmr_main_loop: ds 6 ; buffer to hold main loop timer
0B085B             0330*  
0B085B             0331*  ; set a countdown timer for the main loop using the timestamp timer
0B085B             0332*  ; inputs: hl = time to set in 1/120ths of a second
0B085B             0333*  ; returns: hl = current time
0B085B             0334*  ; destroys: af,hl,de,ix,iy
0B085B             0335*  tmr_main_loop_set:
0B085B FD 21 55 08 0336*      ld iy,tmr_main_loop
       0B          
0B0860 FD 2F 03    0337*      ld (iy+3),hl ; set time remaining
0B0863 CD 1B 08 0B 0338*      call timestamp_tick
0B0867 2A 12 08 0B 0339*      ld hl,(timestamp_now)   ; get current timestamp
0B086B FD 2F 00    0340*      ld (iy+0),hl ; set start time
0B086E C9          0341*      ret
0B086F             0342*  
0B086F             0343*  ; gets time remaining on the main loop countdown timer following the global timestamp
0B086F             0344*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0B086F             0345*  ;          sign flags: pos = time not expired,zero or neg = time expired
0B086F             0346*  ; destroys: af,hl,de,ix,iy
0B086F             0347*  tmr_main_loop_get:
0B086F CD 1B 08 0B 0348*      call timestamp_tick
0B0873 FD 21 55 08 0349*      ld iy,tmr_main_loop
       0B          
0B0878 CD 43 08 0B 0350*      call timestamp_tmr_get
0B087C C9          0351*      ret
0B087D             0352*  
0B087D             0353*  ; set a stopwatch
0B087D             0354*  ; returns: hl = start time
0B087D             0355*  ; destroys: hl,ix
0B087D             0356*  stopwatch_set:
0B087D             0357*      MOSCALL mos_sysvars     ; ix points to syvars table
0B087D 3E 08       0001*M 			LD	A, function
0B087F 5B CF       0002*M 			RST.L	08h
0B0881 DD 27 00    0358*      ld hl,(ix+sysvar_time)  ; get current time
0B0884 22 99 08 0B 0359*      ld (stopwatch_started),hl            ; set start time
0B0888 C9          0360*      ret
0B0889             0361*  
0B0889             0362*  ; gets time elapsed on a stopwatch
0B0889             0363*  ; returns: hl = time elapsed in 1/120ths of a second
0B0889             0364*  ; destroys: af,hl,de,ix
0B0889             0365*  stopwatch_get:
0B0889             0366*      MOSCALL mos_sysvars     ; ix points to syvars table
0B0889 3E 08       0001*M 			LD	A, function
0B088B 5B CF       0002*M 			RST.L	08h
0B088D DD 27 00    0367*      ld hl,(ix+sysvar_time)  ; get current time
0B0890 ED 5B 99 08 0368*      ld de,(stopwatch_started)            ; get start time
       0B          
0B0895 AF          0369*      xor a                   ; clear carry
0B0896 ED 52       0370*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
0B0898 C9          0371*      ret
0B0899             0372*  
0B0899             0373*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
0B089C             0374*  
0B089C             0375*  ; ------------------
0B089C             0376*  ; delay routine
0B089C             0377*  ; Author: Richard Turrnidge
0B089C             0378*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
0B089C             0379*  ; routine waits a fixed time,then returns
0B089C             0380*  ; arrive with A =  the delay byte. One bit to be set only.
0B089C             0381*  ; eg. ld A,00000100b
0B089C             0382*  
0B089C             0383*  multiPurposeDelay:
0B089C F5          0384*      push af
0B089D C5          0385*      push bc
0B089E DD E5       0386*      push ix
0B08A0 47          0387*      ld b,a
0B08A1 3E 08       0388*      ld a,$08
0B08A3 5B CF       0389*      RST.LIL	08h                 ; get IX pointer to sysvars
0B08A5             0390*  
0B08A5             0391*  waitLoop:
0B08A5             0392*  
0B08A5 DD 7E 00    0393*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
0B08A8             0394*  
0B08A8             0395*                                  ;   we check if bit set is same as last time we checked.
0B08A8             0396*                                  ;   bit 0 - don't use
0B08A8             0397*                                  ;   bit 1 - changes 64 times per second
0B08A8             0398*                                  ;   bit 2 - changes 32 times per second
0B08A8             0399*                                  ;   bit 3 - changes 16 times per second
0B08A8             0400*  
0B08A8             0401*                                  ;   bit 4 - changes 8 times per second
0B08A8             0402*                                  ;   bit 5 - changes 4 times per second
0B08A8             0403*                                  ;   bit 6 - changes 2 times per second
0B08A8             0404*                                  ;   bit 7 - changes 1 times per second
0B08A8 A0          0405*      and b
0B08A9 4F          0406*      ld c,a
0B08AA 3A BB 08 0B 0407*      ld a,(oldTimeStamp)
0B08AE B9          0408*      cp c                        ; is A same as last value?
0B08AF 28 F4       0409*      jr z,waitLoop              ; loop here if it is
0B08B1 79          0410*      ld a,c
0B08B2 32 BB 08 0B 0411*      ld (oldTimeStamp),a        ; set new value
0B08B6             0412*  
0B08B6 DD E1       0413*      pop ix
0B08B8 C1          0414*      pop bc
0B08B9 F1          0415*      pop af
0B08BA C9          0416*      ret
0B08BB             0417*  
0B08BB 00          0418*  oldTimeStamp:   .db 00h
0B08BC             0022       include "vdu.inc"
0B08BC             0001*  
0B08BC             0002*  ; VDU 30: Home cursor
0B08BC             0003*  vdu_home_cursor:
0B08BC 3E 1E       0004*      ld a,30
0B08BE 5B D7       0005*  	rst.lil $10
0B08C0 C9          0006*  	ret
0B08C1             0007*  
0B08C1             0008*  cursor_on:
0B08C1 21 CC 08 0B 0009*  	ld hl,@cmd
0B08C5 01 03 00 00 0010*  	ld bc,@end-@cmd
0B08C9 5B DF       0011*  	rst.lil $18
0B08CB C9          0012*  	ret
0B08CC             0013*  @cmd:
0B08CC 17 01 01    0014*  	db 23,1,1
0B08CF             0015*  @end:
0B08CF             0016*  
0B08CF             0017*  cursor_off:
0B08CF 21 DA 08 0B 0018*  	ld hl,@cmd
0B08D3 01 03 00 00 0019*  	ld bc,@end-@cmd
0B08D7 5B DF       0020*  	rst.lil $18
0B08D9 C9          0021*  	ret
0B08DA             0022*  @cmd:
0B08DA 17 01 00    0023*  	db 23,1,0
0B08DD             0024*  @end:
0B08DD             0025*  
0B08DD             0026*  ; VDU 9: Move cursor forward one character
0B08DD             0027*  vdu_cursor_forward:
0B08DD 3E 09       0028*      ld a,9
0B08DF 5B D7       0029*  	rst.lil $10
0B08E1 C9          0030*  	ret
0B08E2             0031*  
0B08E2             0032*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
0B08E2             0033*  ; inputs: c=x, b=y 8-bit unsigned integers
0B08E2             0034*  vdu_move_cursor:
0B08E2 ED 43 F3 08 0035*      ld (@x0),bc
       0B          
0B08E7 21 F2 08 0B 0036*  	ld hl,@cmd
0B08EB 01 03 00 00 0037*  	ld bc,@end-@cmd
0B08EF 5B DF       0038*  	rst.lil $18
0B08F1 C9          0039*  	ret
0B08F2 1F          0040*  @cmd: 	db 31
0B08F3 00          0041*  @x0:	db 0
0B08F4 00          0042*  @y0: 	db 0
0B08F5 00          0043*  @end: 	db 0 ; padding
0B08F6             0044*  
0B08F6             0045*  ; VDU 12: Clear text area (CLS)
0B08F6             0046*  vdu_cls:
0B08F6 3E 0C       0047*      ld a,12
0B08F8 5B D7       0048*  	rst.lil $10
0B08FA C9          0049*  	ret
0B08FB             0050*  
0B08FB             0051*  vdu_flip:
0B08FB 21 06 09 0B 0052*  	ld hl,@cmd
0B08FF 01 03 00 00 0053*  	ld bc,@end-@cmd
0B0903 5B DF       0054*  	rst.lil $18
0B0905 C9          0055*  	ret
0B0906 17 00 C3    0056*  @cmd: db 23,0,0xC3
0B0909             0057*  @end:
0B0909             0058*  
0B0909             0059*  ; VDU 16: Clear graphics area (CLG)
0B0909             0060*  vdu_clg:
0B0909 3E 10       0061*      ld a,16
0B090B 5B D7       0062*  	rst.lil $10
0B090D C9          0063*  	ret
0B090E             0064*  
0B090E             0065*  ; COLOUR MODES
0B090E             0066*  ; Mode	Effect
0B090E             0067*  ; 0	Set on-screen pixel to target colour value
0B090E             0068*  ; 1	OR value with the on-screen pixel
0B090E             0069*  ; 2	AND value with the on-screen pixel
0B090E             0070*  ; 3	XOR value with the on-screen pixel
0B090E             0071*  ; 4	Invert the on-screen pixel
0B090E             0072*  ; 5	No operation
0B090E             0073*  ; 6	AND the inverse of the specified colour with the on-screen pixel
0B090E             0074*  ; 7	OR the inverse of the specified colour with the on-screen pixel
0B090E             0075*  
0B090E             0076*  ; VDU 17, colour: Define text colour (COLOUR)
0B090E             0077*  vdu_colour_text:
0B090E 32 1E 09 0B 0078*  	ld (@arg),a
0B0912 21 1D 09 0B 0079*  	ld hl,@cmd
0B0916 01 02 00 00 0080*  	ld bc,@end-@cmd
0B091A 5B DF       0081*  	rst.lil $18
0B091C C9          0082*  	ret
0B091D 11          0083*  @cmd: db 17
0B091E 00          0084*  @arg: db 0
0B091F             0085*  @end:
0B091F             0086*  
0B091F             0087*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
0B091F             0088*  ; inputs: a=mode, c=colour (add 128 to set background colour)
0B091F             0089*  vdu_gcol:
0B091F 32 34 09 0B 0090*  	ld (@mode),a
0B0923 79          0091*      ld a,c
0B0924 32 35 09 0B 0092*      ld (@col),a
0B0928 21 33 09 0B 0093*  	ld hl,@cmd
0B092C 01 03 00 00 0094*  	ld bc,@end-@cmd
0B0930 5B DF       0095*  	rst.lil $18
0B0932 C9          0096*  	ret
0B0933 12          0097*  @cmd:  db 18
0B0934 00          0098*  @mode: db 0
0B0935 00          0099*  @col:  db 0
0B0936             0100*  @end:
0B0936             0101*  
0B0936             0102*  
0B0936             0103*  ; VDU 28, left, bottom, right, top: Set text viewport **
0B0936             0104*  ; MIND THE LITTLE-ENDIANESS
0B0936             0105*  ; inputs: c=left,b=bottom,e=right,d=top
0B0936             0106*  ; outputs; nothing
0B0936             0107*  ; destroys: a might make it out alive
0B0936             0108*  vdu_set_txt_viewport:
0B0936 ED 43 4C 09 0109*      ld (@lb),bc
       0B          
0B093B ED 53 4E 09 0110*  	ld (@rt),de
       0B          
0B0940 21 4B 09 0B 0111*  	ld hl,@cmd
0B0944 01 05 00 00 0112*  	ld bc,@end-@cmd
0B0948 5B DF       0113*  	rst.lil $18
0B094A C9          0114*  	ret
0B094B 1C          0115*  @cmd:   db 28 ; set text viewport command
0B094C 00 00       0116*  @lb: 	dw 0x0000 ; set by bc
0B094E 00 00       0117*  @rt: 	dw 0x0000 ; set by de
0B0950 00          0118*  @end:   db 0x00	  ; padding
0B0951             0119*  
0B0951             0120*  ; Wait for VBLANK interrupt
0B0951             0121*  vdu_vblank:
0B0951 DD E5       0122*      PUSH 	IX
0B0953             0123*  	MOSCALL	mos_sysvars
0B0953 3E 08       0001*M 			LD	A, function
0B0955 5B CF       0002*M 			RST.L	08h
0B0957 DD 7E 00    0124*  	LD	A, (IX + sysvar_time + 0)
0B095A             0125*  @wait:
0B095A DD BE 00    0126*      CP 	A, (IX + sysvar_time + 0)
0B095D 28 FB       0127*      JR	Z, @wait
0B095F DD E1       0128*      POP	IX
0B0961 C9          0129*      RET
0B0962             0130*  
0B0962             0131*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
0B0962             0132*  ; NOTE: the order of the y-coordinate parameters are inverted
0B0962             0133*  ; 	because we have turned off logical screen scaling
0B0962             0134*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
0B0962             0135*  ; outputs; nothing
0B0962             0136*  ; destroys: a might make it out alive
0B0962             0137*  vdu_set_gfx_viewport:
0B0962 ED 43 82 09 0138*      ld (@x0),bc
       0B          
0B0967 FD 22 84 09 0139*      ld (@y1),iy
       0B          
0B096C DD 22 86 09 0140*  	ld (@x1),ix
       0B          
0B0971 ED 53 88 09 0141*  	ld (@y0),de
       0B          
0B0976 21 81 09 0B 0142*  	ld hl,@cmd
0B097A 01 09 00 00 0143*  	ld bc,@end-@cmd
0B097E 5B DF       0144*  	rst.lil $18
0B0980 C9          0145*  	ret
0B0981 18          0146*  @cmd:   db 24 ; set graphics viewport command
0B0982 00 00       0147*  @x0: 	dw 0x0000 ; set by bc
0B0984 00 00       0148*  @y1: 	dw 0x0000 ; set by iy
0B0986 00 00       0149*  @x1: 	dw 0x0000 ; set by ix
0B0988 00 00       0150*  @y0: 	dw 0x0000 ; set by de
0B098A 00          0151*  @end:   db 0x00	  ; padding
0B098B             0152*  
0B098B             0153*  ; SCREEN MODES
0B098B             0154*  ; ===============================
0B098B             0155*  ; Mode  Horz  Vert  Cols  Refresh
0B098B             0156*  ; ---   ----  ----  ----  -------
0B098B             0157*  ; 11    320   240   2     60hz
0B098B             0158*  ; 139   320   240   2     60hz
0B098B             0159*  ; 23    512   384   2     60hz
0B098B             0160*  ; 151   512   384   2     60hz
0B098B             0161*  ; 6     640   240   2     60hz
0B098B             0162*  ; 134   640   240   2     60hz
0B098B             0163*  ; 2     640   480   2     60hz
0B098B             0164*  ; 130   640   480   2     60hz
0B098B             0165*  ; 17    800   600   2     60hz
0B098B             0166*  ; 145   800   600   2     60hz
0B098B             0167*  ; 18    1024  768   2     60hz
0B098B             0168*  ; 146   1024  768   2     60hz
0B098B             0169*  ; ---   ----  ----  ----  -------
0B098B             0170*  ; 10    320   240   4     60hz
0B098B             0171*  ; 138   320   240   4     60hz
0B098B             0172*  ; 22    512   384   4     60hz
0B098B             0173*  ; 150   512   384   4     60hz
0B098B             0174*  ; 5     640   240   4     60hz
0B098B             0175*  ; 133   640   240   4     60hz
0B098B             0176*  ; 1     640   480   4     60hz
0B098B             0177*  ; 129   640   480   4     60hz
0B098B             0178*  ; 16    800   600   4     60hz
0B098B             0179*  ; 19    1024  768   4     60hz
0B098B             0180*  ; ---   ----  ----  ----  -------
0B098B             0181*  ; 9     320   240   16    60hz
0B098B             0182*  ; 137   320   240   16    60hz
0B098B             0183*  ; 21    512   384   16    60hz
0B098B             0184*  ; 149   512   384   16    60hz
0B098B             0185*  ; 4     640   240   16    60hz
0B098B             0186*  ; 132   640   240   16    60hz
0B098B             0187*  ; 0     640   480   16    60hz
0B098B             0188*  ; 7     n/a   n/a   16    60hz
0B098B             0189*  ; ---   ----  ----  ----  -------
0B098B             0190*  ; 8     320   240   64    60hz
0B098B             0191*  ; 136   320   240   64    60hz
0B098B             0192*  ; 20    512   384   64    60hz
0B098B             0193*  ; 3     640   240   64    60hz
0B098B             0194*  ; ---   ----  ----  ----  -------
0B098B             0195*  vdu_set_screen_mode:
0B098B 32 9B 09 0B 0196*  	ld (@arg),a
0B098F 21 9A 09 0B 0197*  	ld hl,@cmd
0B0993 01 02 00 00 0198*  	ld bc,@end-@cmd
0B0997 5B DF       0199*  	rst.lil $18
0B0999 C9          0200*  	ret
0B099A 16          0201*  @cmd: db 22 ; set screen mode
0B099B 00          0202*  @arg: db 0  ; screen mode parameter
0B099C             0203*  @end:
0B099C             0204*  
0B099C             0205*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
0B099C             0206*  ; inputs: a is scaling mode, 1=on, 0=off
0B099C             0207*  ; note: default setting on boot is scaling ON
0B099C             0208*  vdu_set_scaling:
0B099C 32 AE 09 0B 0209*  	ld (@arg),a
0B09A0 21 AB 09 0B 0210*  	ld hl,@cmd
0B09A4 01 04 00 00 0211*  	ld bc,@end-@cmd
0B09A8 5B DF       0212*  	rst.lil $18
0B09AA C9          0213*  	ret
0B09AB 17 00 C0    0214*  @cmd: db 23,0,0xC0
0B09AE 00          0215*  @arg: db 0  ; scaling on/off
0B09AF             0216*  @end:
0B09AF             0217*  
0B09AF             0218*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
0B09AF             0219*  ; inputs: hl=bufferId
0B09AF             0220*  vdu_buff_select:
0B09AF 22 C1 09 0B 0221*  	ld (@bufferId),hl
0B09B3 21 BE 09 0B 0222*  	ld hl,@cmd
0B09B7 01 05 00 00 0223*  	ld bc,@end-@cmd
0B09BB 5B DF       0224*  	rst.lil $18
0B09BD C9          0225*  	ret
0B09BE 17 1B 20    0226*  @cmd: db 23,27,0x20
0B09C1 00 00       0227*  @bufferId: dw 0x0000
0B09C3 00          0228*  @end: db 0x00 ; padding
0B09C4             0229*  
0B09C4             0230*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
0B09C4             0231*  ; inputs: a=format; bc=width; de=height
0B09C4             0232*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
0B09C4             0233*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
0B09C4             0234*  ; 0 	RGBA8888 (4-bytes per pixel)
0B09C4             0235*  ; 1 	RGBA2222 (1-bytes per pixel)
0B09C4             0236*  ; 2 	Mono/Mask (1-bit per pixel)
0B09C4             0237*  ; 3 	Reserved for internal use by VDP (“native” format)
0B09C4             0238*  vdu_bmp_create:
0B09C4 ED 43 E0 09 0239*      ld (@width),bc
       0B          
0B09C9 ED 53 E2 09 0240*      ld (@height),de
       0B          
0B09CE 32 E4 09 0B 0241*      ld (@fmt),a
0B09D2 21 DD 09 0B 0242*  	ld hl,@cmd
0B09D6 01 08 00 00 0243*  	ld bc,@end-@cmd
0B09DA 5B DF       0244*  	rst.lil $18
0B09DC C9          0245*  	ret
0B09DD 17 1B 21    0246*  @cmd:       db 23,27,0x21
0B09E0 00 00       0247*  @width:     dw 0x0000
0B09E2 00 00       0248*  @height:    dw 0x0000
0B09E4 00          0249*  @fmt:       db 0x00
0B09E5             0250*  @end:
0B09E5             0251*  
0B09E5             0252*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0B09E5             0253*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0B09E5             0254*  vdu_load_img_rgba2_to_8:
0B09E5             0255*  ; backup the target buffer id and image dimensions
0B09E5 E5          0256*      push hl
0B09E6 D5          0257*      push de
0B09E7 C5          0258*      push bc
0B09E8             0259*  ; load the rgba2 image to working buffer 65534
0B09E8 21 FE FF 00 0260*      ld hl,65534 ; temporary working buffer id
0B09EC CD EF 0A 0B 0261*  	call vdu_load_buffer_from_file
0B09F0             0262*  ; restore the image dimensions and target buffer id
0B09F0 C1          0263*      pop bc
0B09F1 D1          0264*      pop de
0B09F2 E1          0265*      pop hl
0B09F3             0266*  ; fall through to vdu_rgba2_to_8
0B09F3             0267*  
0B09F3             0268*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
0B09F3             0269*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
0B09F3             0270*  ; the "expand bitmap" command is:
0B09F3             0271*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0B09F3             0272*  ; and then to reverse the byte order to fix endian-ness:
0B09F3             0273*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0B09F3             0274*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0B09F3             0275*  ; VDU 23,27,&20,targetBufferID%;
0B09F3             0276*  ; VDU 23,27,&21,width%;height%;0
0B09F3             0277*  ; -------------------------------------------------------------------
0B09F3             0278*  ; inputs: bc,de image width,height ; hl = targetBufferId
0B09F3             0279*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
0B09F3             0280*  vdu_rgba2_to_8:
0B09F3             0281*  ; load the image dimensions and buffer id parameters
0B09F3 ED 43 4F 0A 0282*      ld (@width),bc
       0B          
0B09F8 ED 53 51 0A 0283*      ld (@height),de
       0B          
0B09FD 22 34 0A 0B 0284*      ld (@bufferId0),hl
0B0A01 22 41 0A 0B 0285*      ld (@bufferId2),hl
0B0A05 22 4A 0A 0B 0286*      ld (@bufferId1),hl
0B0A09             0287*  ; clean up bytes that got stomped on by the ID loads
0B0A09 3E 48       0288*      ld a,0x48
0B0A0B 32 36 0A 0B 0289*      ld (@bufferId0+2),a
0B0A0F 3E 17       0290*      ld a,23
0B0A11 32 4C 0A 0B 0291*      ld (@bufferId1+2),a
0B0A15 3E 18       0292*      ld a,24
0B0A17 32 43 0A 0B 0293*      ld (@bufferId2+2),a
0B0A1B AF          0294*      xor a
0B0A1C 32 53 0A 0B 0295*      ld (@height+2),a
0B0A20             0296*  ; send the vdu command strings
0B0A20 21 2B 0A 0B 0297*      ld hl,@beg
0B0A24 01 29 00 00 0298*      ld bc,@end-@beg
0B0A28 5B DF       0299*      rst.lil $18
0B0A2A C9          0300*      ret
0B0A2B             0301*  @beg:
0B0A2B             0302*  ; Command 14: Consolidate blocks in a buffer
0B0A2B             0303*  ; VDU 23, 0, &A0, bufferId; 14
0B0A2B 17 00 A0    0304*      db 23,0,0xA0
0B0A2E FE FF       0305*      dw 65534 ; workingBufferId
0B0A30 0E          0306*      db 14 ; consolidate blocks
0B0A31             0307*  ; the "expand bitmap" command is:
0B0A31             0308*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0B0A31 17 00 A0    0309*      db 23,0,0xA0
0B0A34 00 00       0310*  @bufferId0: dw 0x0000 ; targetBufferId
0B0A36 48          0311*      db 0x48 ; given as decimal command 72 in the docs
0B0A37 02          0312*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
0B0A38 FE FF       0313*      dw 65534 ; sourceBufferId
0B0A3A 00 7F BF FF 0314*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
0B0A3E             0315*  ; reverse the byte order to fix endian-ness:
0B0A3E             0316*  ; Command 24: Reverse the order of data of blocks within a buffer
0B0A3E             0317*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
0B0A3E             0318*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0B0A3E 17 00 A0    0319*      db 23,0,0xA0
0B0A41 00 00       0320*  @bufferId2:    dw 0x0000 ; targetBufferId
0B0A43 18          0321*      db 24 ; reverse byte order
0B0A44 04          0322*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
0B0A45 04 00       0323*      dw 4 ; size (4 bytes)
0B0A47             0324*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0B0A47             0325*  ; VDU 23,27,&20,targetBufferID%;
0B0A47 17 1B 20    0326*      db 23,27,0x20 ; select bitmap
0B0A4A 00 00       0327*  @bufferId1: dw 0x0000 ; targetBufferId
0B0A4C             0328*  ; VDU 23,27,&21,width%;height%;0
0B0A4C 17 1B 21    0329*      db 23,27,0x21 ; create bitmap from buffer
0B0A4F 00 00       0330*  @width: dw 0x0000
0B0A51 00 00       0331*  @height: dw 0x0000
0B0A53 00          0332*      db 0x00 ; rgba8888 format
0B0A54             0333*  @end:
0B0A54             0334*  
0B0A54             0335*  ; scratch variables
0B0A54 00 00 00    0336*  bufferId0: dl 0x000000
0B0A57 00 00 00    0337*  bufferId1: dl 0x000000
0B0A5A             0338*  
0B0A5A             0339*  ; load a vdu buffer from local memory
0B0A5A             0340*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0B0A5A             0341*  vdu_load_buffer:
0B0A5A ED 43 83 0A 0342*      ld (@length),bc
       0B          
0B0A5F D5          0343*      push de ; save data pointer
0B0A60             0344*  ; send the vdu command string
0B0A60 7D          0345*      ld a,l
0B0A61 32 80 0A 0B 0346*      ld (@bufferId),a
0B0A65 7C          0347*      ld a,h
0B0A66 32 81 0A 0B 0348*      ld (@bufferId+1),a
0B0A6A 21 7D 0A 0B 0349*      ld hl,@cmd
0B0A6E 01 08 00 00 0350*      ld bc,@end-@cmd
0B0A72 5B DF       0351*      rst.lil $18
0B0A74             0352*  ; send the buffer data
0B0A74 E1          0353*      pop hl ; pointer to data
0B0A75 ED 4B 83 0A 0354*      ld bc,(@length)
       0B          
0B0A7A 5B DF       0355*      rst.lil $18 ; send it
0B0A7C C9          0356*      ret
0B0A7D             0357*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0B0A7D 17 00 A0    0358*  @cmd:       db 23,0,0xA0
0B0A80 00 00       0359*  @bufferId:	dw 0x0000
0B0A82 00          0360*  		    db 0 ; load buffer
0B0A83 00 00       0361*  @length:	dw 0x0000
0B0A85 00          0362*  @end: db 0 ; padding
0B0A86             0363*  
0B0A86             0364*  ; clear a buffer
0B0A86             0365*  ; inputs: hl = bufferId
0B0A86             0366*  vdu_clear_buffer:
0B0A86 7D          0367*      ld a,l
0B0A87 32 9E 0A 0B 0368*      ld (@bufferId),a
0B0A8B 7C          0369*      ld a,h
0B0A8C 32 9F 0A 0B 0370*      ld (@bufferId+1),a
0B0A90 21 9B 0A 0B 0371*      ld hl,@cmd
0B0A94 01 06 00 00 0372*      ld bc,@end-@cmd
0B0A98 5B DF       0373*      rst.lil $18
0B0A9A C9          0374*      ret
0B0A9B 17 00 A0    0375*  @cmd:       db 23,0,0xA0
0B0A9E 00 00       0376*  @bufferId:	dw 0x0000
0B0AA0 02          0377*  		    db 2 ; clear buffer
0B0AA1             0378*  @end:
0B0AA1             0379*  
0B0AA1             0380*  vdu_clear_all_buffers:
0B0AA1             0381*  ; clear all buffers
0B0AA1 21 AC 0A 0B 0382*      ld hl,@beg
0B0AA5 01 06 00 00 0383*      ld bc,@end-@beg
0B0AA9 5B DF       0384*      rst.lil $18
0B0AAB C9          0385*      ret
0B0AAC 17 00 A0    0386*  @beg: db 23,0,$A0
0B0AAF FF FF       0387*        dw -1 ; clear all buffers
0B0AB1 02          0388*        db 2  ; command 2: clear a buffer
0B0AB2             0389*  @end:
0B0AB2             0390*  
0B0AB2             0391*  ; Command 14: Consolidate blocks in a buffer
0B0AB2             0392*  vdu_consolidate_buffer:
0B0AB2             0393*  ; set parameters for vdu call
0B0AB2 7D          0394*      ld a,l
0B0AB3 32 CA 0A 0B 0395*      ld (@bufferId),a
0B0AB7 7C          0396*      ld a,h
0B0AB8 32 CB 0A 0B 0397*      ld (@bufferId+1),a
0B0ABC 21 C7 0A 0B 0398*      ld hl,@beg
0B0AC0 01 06 00 00 0399*      ld bc,@end-@beg
0B0AC4 5B DF       0400*      rst.lil $18
0B0AC6 C9          0401*      ret
0B0AC7             0402*  ; VDU 23, 0, &A0, bufferId; 14
0B0AC7 17 00 A0    0403*  @beg: db 23,0,0xA0
0B0ACA 00 00       0404*  @bufferId: dw 0x0000
0B0ACC 0E          0405*             db 14
0B0ACD             0406*  @end:
0B0ACD             0407*  
0B0ACD             0408*  ; load an image file to a buffer and make it a bitmap
0B0ACD             0409*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
0B0ACD             0410*  vdu_load_img:
0B0ACD             0411*  ; back up image type and dimension parameters
0B0ACD 22 54 0A 0B 0412*      ld (bufferId0),hl
0B0AD1 F5          0413*      push af
0B0AD2 C5          0414*  	push bc
0B0AD3 D5          0415*  	push de
0B0AD4             0416*  ; load the image
0B0AD4 CD EF 0A 0B 0417*  	call vdu_load_buffer_from_file
0B0AD8             0418*  ; now make it a bitmap
0B0AD8 2A 54 0A 0B 0419*      ld hl,(bufferId0)
0B0ADC CD B2 0A 0B 0420*      call vdu_consolidate_buffer
0B0AE0 2A 54 0A 0B 0421*      ld hl,(bufferId0)
0B0AE4 CD AF 09 0B 0422*      call vdu_buff_select
0B0AE8 D1          0423*  	pop de ; image height
0B0AE9 C1          0424*  	pop bc ; image width
0B0AEA F1          0425*  	pop af ; image type
0B0AEB C3 C4 09 0B 0426*  	jp vdu_bmp_create ; will return to caller from there
0B0AEF             0427*  
0B0AEF             0428*  ; inputs: hl = bufferId; iy = pointer to filename
0B0AEF             0429*  vdu_load_buffer_from_file:
0B0AEF 22 54 0A 0B 0430*      ld (bufferId0),hl
0B0AF3             0431*  
0B0AF3             0432*  ; clear target buffer
0B0AF3 CD 86 0A 0B 0433*      call vdu_clear_buffer
0B0AF7             0434*  
0B0AF7             0435*  ; open the file in read mode
0B0AF7             0436*  ; Open a file
0B0AF7             0437*  ; HLU: Filename
0B0AF7             0438*  ;   C: Mode
0B0AF7             0439*  ; Returns:
0B0AF7             0440*  ;   A: Filehandle, or 0 if couldn't open
0B0AF7 FD E5       0441*  	push iy ; pointer to filename
0B0AF9 E1          0442*  	pop hl
0B0AFA 0E 01       0443*  	ld c,fa_read
0B0AFC             0444*      MOSCALL mos_fopen
0B0AFC 3E 0A       0001*M 			LD	A, function
0B0AFE 5B CF       0002*M 			RST.L	08h
0B0B00 32 3B 0B 0B 0445*      ld (@filehandle),a
0B0B04             0446*  
0B0B04             0447*  @read_file:
0B0B04             0448*  ; Read a block of data from a file
0B0B04             0449*  ;   C: Filehandle
0B0B04             0450*  ; HLU: Pointer to where to write the data to
0B0B04             0451*  ; DEU: Number of bytes to read
0B0B04             0452*  ; Returns:
0B0B04             0453*  ; DEU: Number of bytes read
0B0B04 3A 3B 0B 0B 0454*      ld a,(@filehandle)
0B0B08 4F          0455*      ld c,a
0B0B09 21 00 E0 B7 0456*      ld hl,filedata
0B0B0D 11 00 20 00 0457*      ld de,8192 ; max we can read into onboard sram at one time
0B0B11             0458*      MOSCALL mos_fread
0B0B11 3E 1A       0001*M 			LD	A, function
0B0B13 5B CF       0002*M 			RST.L	08h
0B0B15             0459*  
0B0B15             0460*  ; ; DEBUG: print chunk size
0B0B15             0461*  ;     push de
0B0B15             0462*  ;     pop hl
0B0B15             0463*  ;     call printDec
0B0B15             0464*  ;     call printNewLine
0B0B15             0465*  
0B0B15             0466*  ; test de for zero bytes read
0B0B15 21 00 00 00 0467*      ld hl,0
0B0B19 AF          0468*      xor a ; clear carry
0B0B1A ED 52       0469*      sbc hl,de
0B0B1C CA 32 0B 0B 0470*      jp z,@close_file
0B0B20             0471*  
0B0B20             0472*  ; load a vdu buffer from local memory
0B0B20             0473*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0B0B20 2A 54 0A 0B 0474*      ld hl,(bufferId0)
0B0B24 D5          0475*      push de ; chunksize
0B0B25 C1          0476*      pop bc
0B0B26 11 00 E0 B7 0477*      ld de,filedata
0B0B2A CD 5A 0A 0B 0478*      call vdu_load_buffer
0B0B2E             0479*  
0B0B2E             0480*  ; ; print progress breadcrumbs
0B0B2E             0481*  ;     ld a,'.'
0B0B2E             0482*  ;     rst.lil 10h
0B0B2E             0483*  
0B0B2E             0484*  ; read the next block
0B0B2E C3 04 0B 0B 0485*      jp @read_file
0B0B32             0486*  
0B0B32             0487*  ; close the file
0B0B32             0488*  @close_file:
0B0B32 3A 3B 0B 0B 0489*      ld a,(@filehandle)
0B0B36             0490*      MOSCALL mos_fclose
0B0B36 3E 0B       0001*M 			LD	A, function
0B0B38 5B CF       0002*M 			RST.L	08h
0B0B3A C9          0491*      ret ; vdu_load_buffer_from_file
0B0B3B             0492*  
0B0B3B 00          0493*  @filehandle: db 0 ; file handle
0B0B3C 00 00 00    0494*  @fil: dl 0 ; pointer to FIL struct
0B0B3F             0495*  
0B0B3F 00 00 00    0496*  @chunkpointer: dl 0 ; pointer to current chunk
0B0B42             0497*  
0B0B42             0498*  ; File information structure (FILINFO)
0B0B42             0499*  @filinfo:
0B0B42 00 00 00 00 0500*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
0B0B46 00 00       0501*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
0B0B48 00 00       0502*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
0B0B4A 00          0503*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
0B0B4B 00 00 00 00 0504*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
0B0B58 00 00 00 00 0505*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0B0C58             0023       ; include "vdu_fonts.inc"
0B0C58             0024       include "vdu_plot.inc"
0B0C58             0001*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0B0C58             0002*  ; PLOT code 	(Decimal) 	Effect
0B0C58             0003*  ; &00-&07 	0-7 	Solid line, includes both ends
0B0C58             0004*  plot_sl_both: equ 0x00
0B0C58             0005*  
0B0C58             0006*  ; &08-&0F 	8-15 	Solid line, final point omitted
0B0C58             0007*  plot_sl_first: equ 0x08
0B0C58             0008*  
0B0C58             0009*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
0B0C58             0010*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
0B0C58             0011*  
0B0C58             0012*  ; &20-&27 	32-39 	Solid line, first point omitted
0B0C58             0013*  plot_sl_last: equ 0x20
0B0C58             0014*  
0B0C58             0015*  ; &28-&2F 	40-47 	Solid line, both points omitted
0B0C58             0016*  plot_sl_none: equ 0x28
0B0C58             0017*  
0B0C58             0018*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
0B0C58             0019*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
0B0C58             0020*  
0B0C58             0021*  ; &40-&47 	64-71 	Point plot
0B0C58             0022*  plot_pt: equ 0x40
0B0C58             0023*  
0B0C58             0024*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
0B0C58             0025*  plot_lf_lr_non_bg: equ 0x48
0B0C58             0026*  
0B0C58             0027*  ; &50-&57 	80-87 	Triangle fill
0B0C58             0028*  plot_tf: equ 0x50
0B0C58             0029*  
0B0C58             0030*  ; &58-&5F 	88-95 	Line fill right to background §§
0B0C58             0031*  plot_lf_r_bg: equ 0x58
0B0C58             0032*  
0B0C58             0033*  ; &60-&67 	96-103 	Rectangle fill
0B0C58             0034*  plot_rf: equ 0x60
0B0C58             0035*  
0B0C58             0036*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
0B0C58             0037*  plot_lf_lr_fg: equ 0x60
0B0C58             0038*  
0B0C58             0039*  ; &70-&77 	112-119 	Parallelogram fill
0B0C58             0040*  plot_pf: equ 0x70
0B0C58             0041*  
0B0C58             0042*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
0B0C58             0043*  plot_lf_r_non_fg: equ 0x78
0B0C58             0044*  
0B0C58             0045*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
0B0C58             0046*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
0B0C58             0047*  
0B0C58             0048*  ; &90-&97 	144-151 	Circle outline
0B0C58             0049*  plot_co: equ 0x90
0B0C58             0050*  
0B0C58             0051*  ; &98-&9F 	152-159 	Circle fill
0B0C58             0052*  plot_cf: equ 0x98
0B0C58             0053*  
0B0C58             0054*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
0B0C58             0055*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
0B0C58             0056*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
0B0C58             0057*  
0B0C58             0058*  ; &B8-&BF 	184-191 	Rectangle copy/move
0B0C58             0059*  plot_rcm: equ 0xB8
0B0C58             0060*  
0B0C58             0061*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
0B0C58             0062*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
0B0C58             0063*  ; &D0-&D7 	208-215 	Not defined
0B0C58             0064*  ; &D8-&DF 	216-223 	Not defined
0B0C58             0065*  ; &E0-&E7 	224-231 	Not defined
0B0C58             0066*  
0B0C58             0067*  ; &E8-&EF 	232-239 	Bitmap plot §
0B0C58             0068*  plot_bmp: equ 0xE8
0B0C58             0069*  
0B0C58             0070*  ; &F0-&F7 	240-247 	Not defined
0B0C58             0071*  ; &F8-&FF 	248-255 	Not defined
0B0C58             0072*  
0B0C58             0073*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
0B0C58             0074*  ; Agon Console8 VDP 2.2.0
0B0C58             0075*  
0B0C58             0076*  ; Within each group of eight plot codes, the effects are as follows:
0B0C58             0077*  ; Plot code 	Effect
0B0C58             0078*  ; 0 	Move relative
0B0C58             0079*  mv_rel: equ 0
0B0C58             0080*  
0B0C58             0081*  ; 1 	Plot relative in current foreground colour
0B0C58             0082*  dr_rel_fg: equ 1
0B0C58             0083*  
0B0C58             0084*  ; 2 	Not supported (Plot relative in logical inverse colour)
0B0C58             0085*  ; 3 	Plot relative in current background colour
0B0C58             0086*  dr_rel_bg: equ 3
0B0C58             0087*  
0B0C58             0088*  ; 4 	Move absolute
0B0C58             0089*  mv_abs: equ 4
0B0C58             0090*  
0B0C58             0091*  ; 5 	Plot absolute in current foreground colour
0B0C58             0092*  dr_abs_fg: equ 5
0B0C58             0093*  
0B0C58             0094*  ; 6 	Not supported (Plot absolute in logical inverse colour)
0B0C58             0095*  ; 7 	Plot absolute in current background colour
0B0C58             0096*  dr_abs_bg: equ 7
0B0C58             0097*  
0B0C58             0098*  ; Codes 0-3 use the position data provided as part of the command
0B0C58             0099*  ; as a relative position, adding the position given to the current
0B0C58             0100*  ; graphical cursor position. Codes 4-7 use the position data provided
0B0C58             0101*  ; as part of the command as an absolute position, setting the current
0B0C58             0102*  ; graphical cursor position to the position given.
0B0C58             0103*  
0B0C58             0104*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
0B0C58             0105*  ; current pixel colour. These operations cannot currently be supported
0B0C58             0106*  ; by the graphics system the Agon VDP uses, so these codes are not
0B0C58             0107*  ; supported. Support for these codes may be added in a future version
0B0C58             0108*  ; of the VDP firmware.
0B0C58             0109*  
0B0C58             0110*  ; 16 colour palette constants
0B0C58             0111*  c_black: equ 0
0B0C58             0112*  c_red_dk: equ 1
0B0C58             0113*  c_green_dk: equ 2
0B0C58             0114*  c_yellow_dk: equ 3
0B0C58             0115*  c_blue_dk: equ 4
0B0C58             0116*  c_magenta_dk: equ 5
0B0C58             0117*  c_cyan_dk: equ 6
0B0C58             0118*  c_grey: equ 7
0B0C58             0119*  c_grey_dk: equ 8
0B0C58             0120*  c_red: equ 9
0B0C58             0121*  c_green: equ 10
0B0C58             0122*  c_yellow: equ 11
0B0C58             0123*  c_blue: equ 12
0B0C58             0124*  c_magenta: equ 13
0B0C58             0125*  c_cyan: equ 14
0B0C58             0126*  c_white: equ 15
0B0C58             0127*  
0B0C58             0128*  ; VDU 25, mode, x; y;: PLOT command
0B0C58             0129*  ; inputs: a=mode, bc=x0, de=y0
0B0C58             0130*  vdu_plot:
0B0C58 32 72 0C 0B 0131*      ld (@mode),a
0B0C5C ED 43 73 0C 0132*      ld (@x0),bc
       0B          
0B0C61 ED 53 75 0C 0133*      ld (@y0),de
       0B          
0B0C66 21 71 0C 0B 0134*  	ld hl,@cmd
0B0C6A 01 06 00 00 0135*  	ld bc,@end-@cmd
0B0C6E 5B DF       0136*  	rst.lil $18
0B0C70 C9          0137*  	ret
0B0C71 19          0138*  @cmd:   db 25
0B0C72 00          0139*  @mode:  db 0
0B0C73 00 00       0140*  @x0: 	dw 0
0B0C75 00 00       0141*  @y0: 	dw 0
0B0C77 00          0142*  @end:   db 0 ; extra byte to soak up deu
0B0C78             0143*  
0B0C78             0144*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0B0C78             0145*  ; &E8-&EF 	232-239 	Bitmap plot §
0B0C78             0146*  ; VDU 25, mode, x; y;: PLOT command
0B0C78             0147*  ; inputs: bc=x0, de=y0
0B0C78             0148*  ; prerequisites: vdu_buff_select
0B0C78             0149*  vdu_plot_bmp:
0B0C78 ED 43 8F 0C 0150*      ld (@x0),bc
       0B          
0B0C7D ED 53 91 0C 0151*      ld (@y0),de
       0B          
0B0C82 21 8D 0C 0B 0152*  	ld hl,@cmd
0B0C86 01 06 00 00 0153*  	ld bc,@end-@cmd
0B0C8A 5B DF       0154*  	rst.lil $18
0B0C8C C9          0155*  	ret
0B0C8D 19          0156*  @cmd:   db 25
0B0C8E ED          0157*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0B0C8F 00 00       0158*  @x0: 	dw 0x0000
0B0C91 00 00       0159*  @y0: 	dw 0x0000
0B0C93 00          0160*  @end:   db 0x00 ; padding
0B0C94             0161*  
0B0C94             0162*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0B0C94             0163*  ; &E8-&EF 	232-239 	Bitmap plot §
0B0C94             0164*  ; VDU 25, mode, x; y;: PLOT command
0B0C94             0165*  ; inputs: bc=x0, de=y0
0B0C94             0166*  ; USING 16.8 FIXED POINT COORDINATES
0B0C94             0167*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
0B0C94             0168*  ;   the fractional portiion of the inputs are truncated
0B0C94             0169*  ;   leaving only the 16-bit integer portion
0B0C94             0170*  ; prerequisites: vdu_buff_select
0B0C94             0171*  vdu_plot_bmp168:
0B0C94             0172*  ; populate in the reverse of normal to keep the
0B0C94             0173*  ; inputs from stomping on each other
0B0C94 ED 53 B2 0C 0174*      ld (@y0-1),de
       0B          
0B0C99 ED 43 B0 0C 0175*      ld (@x0-1),bc
       0B          
0B0C9E 3E ED       0176*      ld a,plot_bmp+dr_abs_fg ; 0xED
0B0CA0 32 B0 0C 0B 0177*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
0B0CA4 21 AF 0C 0B 0178*  	ld hl,@cmd
0B0CA8 01 06 00 00 0179*  	ld bc,@end-@cmd
0B0CAC 5B DF       0180*  	rst.lil $18
0B0CAE C9          0181*  	ret
0B0CAF 19          0182*  @cmd:   db 25
0B0CB0 ED          0183*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0B0CB1 00 00       0184*  @x0: 	dw 0x0000
0B0CB3 00 00       0185*  @y0: 	dw 0x0000
0B0CB5             0186*  @end:  ; no padding required b/c we shifted de right
0B0CB5             0187*  
0B0CB5             0188*  ; draw a filled rectangle
0B0CB5             0189*  vdu_plot_rf:
0B0CB5 ED 43 DC 0C 0190*      ld (@x0),bc
       0B          
0B0CBA ED 53 DE 0C 0191*      ld (@y0),de
       0B          
0B0CBF DD 22 E2 0C 0192*      ld (@x1),ix
       0B          
0B0CC4 FD 22 E4 0C 0193*      ld (@y1),iy
       0B          
0B0CC9 3E 19       0194*      ld a,25 ; we have to reload the 2nd plot command
0B0CCB 32 E0 0C 0B 0195*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0B0CCF 21 DA 0C 0B 0196*  	ld hl,@cmd0
0B0CD3 01 0C 00 00 0197*  	ld bc,@end-@cmd0
0B0CD7 5B DF       0198*  	rst.lil $18
0B0CD9 C9          0199*      ret
0B0CDA 19          0200*  @cmd0:  db 25 ; plot
0B0CDB 04          0201*  @arg0:  db plot_sl_both+mv_abs
0B0CDC 00 00       0202*  @x0:    dw 0x0000
0B0CDE 00 00       0203*  @y0:    dw 0x0000
0B0CE0 19          0204*  @cmd1:  db 25 ; plot
0B0CE1 65          0205*  @arg1:  db plot_rf+dr_abs_fg
0B0CE2 00 00       0206*  @x1:    dw 0x0000
0B0CE4 00 00       0207*  @y1:    dw 0x0000
0B0CE6 00          0208*  @end:   db 0x00 ; padding
0B0CE7             0209*  
0B0CE7             0210*  ; draw a filled circle
0B0CE7             0211*  vdu_plot_cf:
0B0CE7 ED 43 0E 0D 0212*      ld (@x0),bc
       0B          
0B0CEC ED 53 10 0D 0213*      ld (@y0),de
       0B          
0B0CF1 DD 22 14 0D 0214*      ld (@x1),ix
       0B          
0B0CF6 FD 22 16 0D 0215*      ld (@y1),iy
       0B          
0B0CFB 3E 19       0216*      ld a,25 ; we have to reload the 2nd plot command
0B0CFD 32 12 0D 0B 0217*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0B0D01 21 0C 0D 0B 0218*  	ld hl,@cmd0
0B0D05 01 0C 00 00 0219*  	ld bc,@end-@cmd0
0B0D09 5B DF       0220*  	rst.lil $18
0B0D0B C9          0221*      ret
0B0D0C 19          0222*  @cmd0:  db 25 ; plot
0B0D0D 04          0223*  @arg0:  db plot_sl_both+mv_abs
0B0D0E 00 00       0224*  @x0:    dw 0x0000
0B0D10 00 00       0225*  @y0:    dw 0x0000
0B0D12 19          0226*  @cmd1:  db 25 ; plot
0B0D13 9D          0227*  @arg1:  db plot_cf+dr_abs_fg
0B0D14 00 00       0228*  @x1:    dw 0x0000
0B0D16 00 00       0229*  @y1:    dw 0x0000
0B0D18 00          0230*  @end:   db 0x00 ; padding
0B0D19             0231*  
0B0D19             0232*  ; VDU 25, mode, x; y;: PLOT command
0B0D19             0233*  ; inputs: a=mode, ix=x0, iy=y0
0B0D19             0234*  plot:
0B0D19 32 33 0D 0B 0235*      ld (@mode),a
0B0D1D DD 22 34 0D 0236*      ld (@x0),ix
       0B          
0B0D22 FD 22 36 0D 0237*      ld (@y0),iy
       0B          
0B0D27 21 32 0D 0B 0238*  	ld hl,@cmd
0B0D2B 01 06 00 00 0239*  	ld bc,@end-@cmd
0B0D2F 5B DF       0240*  	rst.lil $18
0B0D31 C9          0241*  	ret
0B0D32 19          0242*  @cmd:   db 25
0B0D33 00          0243*  @mode:  db 0
0B0D34 00 00       0244*  @x0: 	dw 0
0B0D36 00 00       0245*  @y0: 	dw 0
0B0D38 00          0246*  @end:   db 0 ; padding
0B0D39             0247*  
0B0D39             0248*  ; VDU 5: Write text at graphics cursor
0B0D39             0249*  ; inputs: hl = pointer to text, ix=x0, iy=y0
0B0D39             0250*  ; prerequisites: gcol foreground set, VDU 5 set
0B0D39             0251*  plot_text:
0B0D39 E5          0252*      push hl ; save text pointer
0B0D3A             0253*  ; move graphics cursor to x0, y0
0B0D3A 3E 44       0254*      ld a,plot_pt+mv_abs
0B0D3C CD 19 0D 0B 0255*      call plot
0B0D40             0256*  ; write text
0B0D40 E1          0257*      pop hl ; restore text pointer
0B0D41 CD 67 02 0B 0258*      call printString
0B0D45 C9          0259*      ret
0B0D46             0025   
0B0D46             0026   ; SHAWN'S INCLUDES
0B0D46             0027   	INCLUDE	"strings24.asm"
0B0D46             0001*  ;------------------------------------------------------------------------
0B0D46             0002*  ;  strings24.asm
0B0D46             0003*  ;
0B0D46             0004*  ; 24-bit native ez80 strings routines for numerical processing
0B0D46             0005*  ;  Copyright (c) Shawn Sijnstra 2024
0B0D46             0006*  ;  MIT license
0B0D46             0007*  ;------------------------------------------------------------------------
0B0D46             0008*  
0B0D46             0009*  ;Print signed value in HLU in decimal with leading 0s removed
0B0D46             0010*  ; and postpended with a minus sign if was negative
0B0D46             0011*  ; Uses HLU, DEU, BCU
0B0D46             0012*  print_HLU_s24:
0B0D46 CD B6 18 0B 0013*  	call abs_hlu
0B0D4A F5          0014*  	push af ; save the sign and zero flags
0B0D4B CD 56 0D 0B 0015*  	call print_HLU_u24
0B0D4F F1          0016*  	pop af
0B0D50 F0          0017*  	ret p ; HLU was positive so nothig more to do
0B0D51 3E 2D       0018*  	ld a,'-'
0B0D53 5B D7       0019*  	rst.lil 10h
0B0D55 C9          0020*  	ret
0B0D56             0021*  
0B0D56             0022*  ;------------------------------------------------------------------------
0B0D56             0023*  ;Full print and buffer routine so you can adjust behaviour
0B0D56             0024*  ; Double-Dabble AKA shift-and-add-3 algorithm
0B0D56             0025*  ; breakdown at https://en.wikipedia.org/wiki/Double_dabble
0B0D56             0026*  ;Print value in HLU in decimal with leading 0s removed
0B0D56             0027*  ; Uses HLU, DEU, BCU
0B0D56             0028*  ;------------------------------------------------------------------------
0B0D56             0029*  
0B0D56             0030*  print_HLU_u24:
0B0D56 22 33 0E 0B 0031*  	ld	(hex_temp),hl
0B0D5A 06 08       0032*  	ld	b,8	;8 digits max here with 24 bit unsigned
0B0D5C 11 36 0E 0B 0033*  	ld	de,outbuf
0B0D60 D5          0034*  	push	de
0B0D61 21 07 00 00 0035*  	ld	hl,7
0B0D65 19          0036*  	add	hl,de
0B0D66 E5          0037*  	push	hl
0B0D67 D1          0038*  	pop	de	;copy HLU to DEU
0B0D68 AF          0039*  	xor	a
0B0D69             0040*  _pde_u_zerobuf:
0B0D69 77          0041*  	ld	(hl),a	;zero out the output
0B0D6A 2B          0042*  	dec	hl
0B0D6B 10 FC       0043*  	djnz	_pde_u_zerobuf
0B0D6D             0044*  
0B0D6D 0E 18       0045*  	ld c,3 * 8	;4 * 8	; number of loops through NUM_SRC_BYTES * 8
0B0D6F             0046*  _bcd_Convert:
0B0D6F             0047*  
0B0D6F 21 33 0E 0B 0048*  	ld hl,hex_temp
0B0D73             0049*  ;
0B0D73 CB 26       0050*  	sla (hl)
0B0D75 23          0051*  	inc hl
0B0D76 CB 16       0052*  	rl (hl)
0B0D78 23          0053*  	inc hl
0B0D79 CB 16       0054*  	rl (hl)		;24 bits rolled right
0B0D7B             0055*  
0B0D7B             0056*  
0B0D7B 06 08       0057*          ld	b,8	;8 digits max for 24 bit decimal output
0B0D7D D5          0058*  	push	de
0B0D7E E1          0059*  	pop	hl
0B0D7F             0060*  
0B0D7F             0061*  _bcd_Add3:
0B0D7F 7E          0062*  	ld	a,(hl)
0B0D80 8F          0063*  	adc	a
0B0D81 27          0064*          daa		;this is add 3 after shifting left; i.e. add 6.
0B0D82 FE 10       0065*  	cp	10h	;did we roll over nibble?
0B0D84 3F          0066*  	ccf
0B0D85 CB A7       0067*  	res	4,a
0B0D87             0068*  
0B0D87 77          0069*          ld (hl),a
0B0D88 2B          0070*  	dec	hl
0B0D89 10 F4       0071*          djnz	_bcd_Add3	;loop for decimal digits
0B0D8B 0D          0072*          dec c
0B0D8C 20 E1       0073*          jr nz, _bcd_Convert	;loop around
0B0D8E             0074*  
0B0D8E             0075*  
0B0D8E E1          0076*  	pop	hl
0B0D8F E5          0077*  	push	hl
0B0D90 06 07       0078*          ld	b,8-1		;one less than total in case output is '0'
0B0D92             0079*  _pde_u_make_ascii:
0B0D92 7E          0080*  	ld	a,(hl)
0B0D93 B7          0081*  	or	a
0B0D94 20 05       0082*  	jr	nz,_pde_u_make_ascii2
0B0D96 36 20       0083*  	ld	(hl),' '
0B0D98 23          0084*  	inc	hl
0B0D99 10 F7       0085*  	djnz	_pde_u_make_ascii
0B0D9B             0086*  _pde_u_make_ascii2:
0B0D9B 04          0087*  	inc	b
0B0D9C             0088*  _pde_u_make_ascii3:
0B0D9C 7E          0089*  	ld	a,(hl)
0B0D9D F6 30       0090*  	or	30h
0B0D9F 77          0091*  	ld	(hl),a
0B0DA0 23          0092*  	inc	hl
0B0DA1 10 F9       0093*  	djnz	_pde_u_make_ascii3
0B0DA3             0094*  
0B0DA3 E1          0095*  	pop	hl
0B0DA4 06 08       0096*  	ld	b,8
0B0DA6             0097*  _pde_u_final_out:
0B0DA6 7E          0098*  	ld	a,(hl)
0B0DA7 23          0099*  	inc	hl
0B0DA8 FE 20       0100*  	cp	' '
0B0DAA 28 02       0101*  	jr	z,_pde_u_final_out_strip
0B0DAC 5B D7       0102*  	rst.lil	10h
0B0DAE             0103*  _pde_u_final_out_strip:
0B0DAE 10 F6       0104*  	djnz	_pde_u_final_out
0B0DB0 C9          0105*  	ret
0B0DB1             0106*  
0B0DB1             0107*  ;------------------------------------------------------------------------
0B0DB1             0108*  ; is_digit
0B0DB1             0109*  ; C flag set if A is a digit
0B0DB1             0110*  ; preserves all registers
0B0DB1             0111*  ;------------------------------------------------------------------------
0B0DB1             0112*  is_digit:
0B0DB1 FE 30       0113*  	cp	'0'
0B0DB3 3F          0114*  	ccf
0B0DB4 D0          0115*  	ret	nc	;less that '0'
0B0DB5 FE 3A       0116*  	cp	'9' + 1
0B0DB7 C9          0117*  	ret
0B0DB8             0118*  
0B0DB8             0119*  
0B0DB8             0120*  ;------------------------------------------------------------------------
0B0DB8             0121*  ; char2hex
0B0DB8             0122*  ; Input: ASCII nibble in A
0B0DB8             0123*  ; Returns: if valid nibble value in A; else 0FFh in A
0B0DB8             0124*  ;------------------------------------------------------------------------
0B0DB8             0125*  char2hex:
0B0DB8 FE 30       0126*  	CP	'0'
0B0DBA 38 1D       0127*  	JR	C, char_not_hex
0B0DBC FE 3A       0128*  	CP	'9' + 1
0B0DBE 30 03       0129*  	JR	NC, char_not_09
0B0DC0 D6 30       0130*  	sub	'0'
0B0DC2 C9          0131*  	ret
0B0DC3             0132*  
0B0DC3             0133*  char_not_09:
0B0DC3             0134*  	; char is not 0 to 9. Try upper case
0B0DC3 FE 41       0135*  	CP	'A'
0B0DC5 38 12       0136*  	JR	C, char_not_hex
0B0DC7 FE 47       0137*  	CP	'F' + 1
0B0DC9 30 03       0138*  	JR	NC, char_not_AF
0B0DCB D6 37       0139*  	sub	'A'-10
0B0DCD C9          0140*  	ret
0B0DCE             0141*  
0B0DCE             0142*  char_not_AF:
0B0DCE             0143*  	; char is not upper case A-F. Try lower
0B0DCE FE 61       0144*  	CP	'a'
0B0DD0 38 07       0145*  	JR	C, char_not_hex
0B0DD2 FE 67       0146*  	CP	'f' + 1
0B0DD4 30 03       0147*  	JR	NC, char_not_hex
0B0DD6 D6 57       0148*  	sub	'a' - 10
0B0DD8 C9          0149*  	RET
0B0DD9             0150*  
0B0DD9             0151*  char_not_hex:
0B0DD9 3E FF       0152*   	ld	a,0FFh	;return -1 for not a valid hex digit
0B0DDB C9          0153*  	RET
0B0DDC             0154*  
0B0DDC             0155*  ;------------------------------------------------------------------------
0B0DDC             0156*  ;  newline
0B0DDC             0157*  ;  Output CR+LF; all registers preserved
0B0DDC             0158*  ;------------------------------------------------------------------------
0B0DDC             0159*  newline:
0B0DDC F5          0160*         push   AF
0B0DDD 3E 0D       0161*         LD     A, 13
0B0DDF 5B D7       0162*         RST.LIL    10h
0B0DE1 3E 0A       0163*         LD     A, 10
0B0DE3 5B D7       0164*         RST.LIL    10h
0B0DE5 F1          0165*         POP    AF
0B0DE6 C9          0166*         RET
0B0DE7             0167*  
0B0DE7             0168*  ;------------------------------------------------------------------------
0B0DE7             0169*  ;  put_nibble
0B0DE7             0170*  ;  Output a single hex nibble in A
0B0DE7             0171*  ;  All registers preserved
0B0DE7             0172*  ;------------------------------------------------------------------------
0B0DE7             0173*  put_nibble:
0B0DE7 F5          0174*  	push   AF
0B0DE8 C6 90       0175*  	add    a,090h ;Neat trick to convert hex nibble in A to ASCII
0B0DEA 27          0176*  	daa
0B0DEB CE 40       0177*  	adc    a,040h
0B0DED 27          0178*  	daa
0B0DEE 5B D7       0179*  	RST.LIL    10h	;output character in A
0B0DF0 F1          0180*  	pop    AF
0B0DF1 C9          0181*  	ret
0B0DF2             0182*  
0B0DF2             0183*  ;------------------------------------------------------------------------
0B0DF2             0184*  ;  print_A
0B0DF2             0185*  ;  Output the 8-bit hex number A
0B0DF2             0186*  ;  All registers preserved
0B0DF2             0187*  ;------------------------------------------------------------------------
0B0DF2             0188*  print_A:
0B0DF2 F5          0189*  	push 	AF
0B0DF3 F5          0190*  	push 	AF	;save for second nibble
0B0DF4 0F          0191*  	rrca
0B0DF5 0F          0192*  	rrca
0B0DF6 0F          0193*  	rrca
0B0DF7 0F          0194*  	rrca
0B0DF8 E6 0F       0195*  	and	0Fh	;first nibble
0B0DFA CD E7 0D 0B 0196*  	call	put_nibble
0B0DFE F1          0197*  	pop 	AF
0B0DFF E6 0F       0198*  	and	0Fh	;second nibble
0B0E01 CD E7 0D 0B 0199*  	call	put_nibble
0B0E05 F1          0200*  	pop 	AF
0B0E06 C9          0201*  	ret
0B0E07             0202*  
0B0E07             0203*  ;------------------------------------------------------------------------
0B0E07             0204*  ;  print_HLU_hex
0B0E07             0205*  ;  Output the 24-bit hex number HLU; other registers preserved
0B0E07             0206*  ;------------------------------------------------------------------------
0B0E07             0207*  print_HLU_hex:
0B0E07 F5          0208*         push   AF
0B0E08 22 33 0E 0B 0209*         ld     (hex_temp),hl
0B0E0C 3A 35 0E 0B 0210*         ld     a,(hex_temp+2)
0B0E10 CD F2 0D 0B 0211*         call   print_A
0B0E14 3A 34 0E 0B 0212*         ld     a,(hex_temp+1)
0B0E18 CD F2 0D 0B 0213*         call   print_A
0B0E1C 3A 33 0E 0B 0214*         ld     a,(hex_temp)
0B0E20 CD F2 0D 0B 0215*         call   print_A
0B0E24 F1          0216*         POP    AF
0B0E25 C9          0217*         RET
0B0E26             0218*  
0B0E26             0219*  ;------------------------------------------------------------------------
0B0E26             0220*  ;  puts
0B0E26             0221*  ;  Output a zero-terminated string whose address is in HL; all
0B0E26             0222*  ;  registers preserved.
0B0E26             0223*  ;------------------------------------------------------------------------
0B0E26             0224*  puts:
0B0E26 F5          0225*         push   AF
0B0E27 C5          0226*         push   BC
0B0E28 01 00 00 00 0227*         ld     BC, 0                ; Set to 0, so length ignored...
0B0E2C 3E 00       0228*         ld     A, 0                 ; Use character in A as delimiter
0B0E2E 5B DF       0229*         RST.LIL    18h                  ; This calls a RST in the eZ80 address space
0B0E30 C1          0230*         pop    BC
0B0E31 F1          0231*         pop    AF
0B0E32 C9          0232*         ret
0B0E33             0233*  
0B0E33             0234*  ;------------------------------------------------------------------------
0B0E33             0235*  ; Data area
0B0E33             0236*  ; Storage for 24 bit conversion
0B0E33             0237*  ;------------------------------------------------------------------------
0B0E33             0238*  hex_temp:
0B0E33 00 00 00    0239*         dw24     0      ;3 bytes for HL used for both hex and decimal temp
0B0E36             0240*  
0B0E36             0241*  outbuf:
0B0E36 31 36 37 37 0242*  	db	"16777215 "	;largest number with an extra space
       37 32 31 35 
       20          
0B0E3F             0028   	INCLUDE	"arith24.asm"
0B0E3F             0001*  
0B0E3F             0002*  arith24uaf: ds 6
0B0E45             0003*  arith24uhl: ds 6
0B0E4B             0004*  arith24ubc: ds 6
0B0E51             0005*  arith24ude: ds 6
0B0E57             0006*  arith24uix: ds 6
0B0E5D             0007*  arith24uiy: ds 6
0B0E63             0008*  arith24usp: ds 6
0B0E69             0009*  arith24upc: ds 6
0B0E6F             0010*  
0B0E6F             0011*  ; hlu 1 byte right shift
0B0E6F             0012*  ; returns: hlu / 256, fractional portion in a
0B0E6F             0013*  ; destroys: af
0B0E6F             0014*  shift_hlu_r1b:
0B0E6F AF          0015*  	xor a
0B0E70 32 81 0E 0B 0016*  	ld (@buffer+3),a
0B0E74 7D          0017*  	ld a,l ; save the fractional portion
0B0E75 22 7E 0E 0B 0018*  	ld (@buffer),hl
0B0E79 2A 7F 0E 0B 0019*  	ld hl,(@buffer+1)
0B0E7D C9          0020*  	ret
0B0E7E             0021*  @buffer: ds 4
0B0E82             0022*  
0B0E82             0023*  ;------------------------------------------------------------------------
0B0E82             0024*  ;  arith24.asm
0B0E82             0025*  ;  24-bit ez80 arithmetic routines
0B0E82             0026*  ;  Copyright (c) Shawn Sijnstra 2024
0B0E82             0027*  ;  MIT license
0B0E82             0028*  ;
0B0E82             0029*  ;  This library was created as a tool to help make ez80
0B0E82             0030*  ;  24-bit native assembly routines for simple mathematical problems
0B0E82             0031*  ;  more widely available.
0B0E82             0032*  ;
0B0E82             0033*  ;------------------------------------------------------------------------
0B0E82             0034*  
0B0E82             0035*  ;------------------------------------------------------------------------
0B0E82             0036*  ; umul24:	HL = HL*DE (unsigned)
0B0E82             0037*  ; Preserves AF, BC, DE
0B0E82             0038*  ; Uses a fast multiply routine.
0B0E82             0039*  ;------------------------------------------------------------------------
0B0E82             0040*  umul24:
0B0E82 D5          0041*  	push	DE
0B0E83 C5          0042*  	push	BC
0B0E84 F5          0043*  	push	AF
0B0E85 E5          0044*  	push	HL
0B0E86 C1          0045*  	pop		BC
0B0E87 3E 18       0046*      ld	 	a, 24 ; No. of bits to process
0B0E89 21 00 00 00 0047*      ld	 	hl, 0 ; Result
0B0E8D             0048*  umul24_lp:
0B0E8D 29          0049*  	add	hl,hl
0B0E8E EB          0050*  	ex	de,hl
0B0E8F 29          0051*  	add	hl,hl
0B0E90 EB          0052*  	ex	de,hl
0B0E91 30 01       0053*  	jr	nc,umul24_nc
0B0E93 09          0054*  	add	hl,bc
0B0E94             0055*  umul24_nc:
0B0E94 3D          0056*  	dec	a
0B0E95 20 F6       0057*  	jr	nz,umul24_lp
0B0E97 F1          0058*  	pop	af
0B0E98 C1          0059*  	pop	bc
0B0E99 D1          0060*  	pop	de
0B0E9A C9          0061*  	ret
0B0E9B             0062*  
0B0E9B             0063*  
0B0E9B             0064*  ;------------------------------------------------------------------------
0B0E9B             0065*  ; udiv24
0B0E9B             0066*  ; Unsigned 24-bit division
0B0E9B             0067*  ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
0B0E9B             0068*  ;
0B0E9B             0069*  ; Uses AF BC DE HL
0B0E9B             0070*  ; Uses Restoring Division algorithm
0B0E9B             0071*  ;------------------------------------------------------------------------
0B0E9B             0072*  
0B0E9B             0073*  udiv24:
0B0E9B E5          0074*  	push	hl
0B0E9C C1          0075*  	pop		bc	;move dividend to BCU
0B0E9D 21 00 00 00 0076*  	ld		hl,0	;result
0B0EA1 A7          0077*  	and		a
0B0EA2 ED 52       0078*  	sbc		hl,de	;test for div by 0
0B0EA4 C8          0079*  	ret		z		;it's zero, carry flag is clear
0B0EA5 19          0080*  	add		hl,de	;HL is 0 again
0B0EA6 3E 18       0081*  	ld		a,24	;number of loops through.
0B0EA8             0082*  udiv1:
0B0EA8 C5          0083*  	push	bc	;complicated way of doing this because of lack of access to top bits
0B0EA9 E3          0084*  	ex		(sp),hl
0B0EAA 37          0085*  	scf
0B0EAB ED 6A       0086*  	adc	hl,hl
0B0EAD E3          0087*  	ex	(sp),hl
0B0EAE C1          0088*  	pop	bc		;we now have bc = (bc * 2) + 1
0B0EAF             0089*  
0B0EAF ED 6A       0090*  	adc	hl,hl
0B0EB1 A7          0091*  	and	a		;is this the bug
0B0EB2 ED 52       0092*  	sbc	hl,de
0B0EB4 30 02       0093*  	jr	nc,udiv2
0B0EB6 19          0094*  	add	hl,de
0B0EB7             0095*  ;	dec	c
0B0EB7 0B          0096*  	dec	bc
0B0EB8             0097*  udiv2:
0B0EB8 3D          0098*  	dec	a
0B0EB9 20 ED       0099*  	jr	nz,udiv1
0B0EBB 37          0100*  	scf		;flag used for div0 error
0B0EBC C5          0101*  	push	bc
0B0EBD D1          0102*  	pop		de	;remainder
0B0EBE C9          0103*  	ret
0B0EBF             0104*  
0B0EBF             0105*  
0B0EBF             0106*  
0B0EBF             0107*  ;------------------------------------------------------------------------
0B0EBF             0108*  ; neg24
0B0EBF             0109*  ; Returns: HLU = 0-HLU
0B0EBF             0110*  ; preserves all other registers
0B0EBF             0111*  ;------------------------------------------------------------------------
0B0EBF             0112*  neg24:
0B0EBF D5          0113*  	push	de
0B0EC0 EB          0114*  	ex		de,hl
0B0EC1 21 00 00 00 0115*  	ld		hl,0
0B0EC5 B7          0116*  	or		a
0B0EC6 ED 52       0117*  	sbc		hl,de
0B0EC8 D1          0118*  	pop		de
0B0EC9 C9          0119*  	ret
0B0ECA             0120*  
0B0ECA             0121*  ;------------------------------------------------------------------------
0B0ECA             0122*  ; or_hlu_deu: 24 bit bitwise OR
0B0ECA             0123*  ; Returns: hlu = hlu OR deu
0B0ECA             0124*  ; preserves all other registers
0B0ECA             0125*  ;------------------------------------------------------------------------
0B0ECA             0126*  or_hlu_deu:
0B0ECA 22 55 0F 0B 0127*  	ld	(bitbuf1),hl
0B0ECE ED 53 58 0F 0128*  	ld	(bitbuf2),de
       0B          
0B0ED3 D5          0129*  	push	de	;preserve DEU
0B0ED4 C5          0130*  	push	bc	;preserve BCU
0B0ED5 06 03       0131*  	ld		b,3
0B0ED7 21 55 0F 0B 0132*  	ld	hl,bitbuf1
0B0EDB 11 55 0F 0B 0133*  	ld	de,bitbuf1
0B0EDF             0134*  orloop_24:
0B0EDF 1A          0135*  	ld	a,(de)
0B0EE0 B6          0136*  	or	(hl)
0B0EE1 12          0137*  	ld	(de),a
0B0EE2 13          0138*  	inc	de
0B0EE3 23          0139*  	inc	hl
0B0EE4 10 F9       0140*  	djnz	orloop_24
0B0EE6 2A 58 0F 0B 0141*  	ld	hl,(bitbuf2)
0B0EEA C1          0142*  	pop		bc	;restore BC
0B0EEB D1          0143*  	pop		de	;restore DE
0B0EEC             0144*  
0B0EEC             0145*  ;------------------------------------------------------------------------
0B0EEC             0146*  ; and_hlu_deu: 24 bit bitwise AND
0B0EEC             0147*  ; Returns: hlu = hlu AND deu
0B0EEC             0148*  ; preserves all other registers
0B0EEC             0149*  ;------------------------------------------------------------------------
0B0EEC             0150*  and_hlu_deu:
0B0EEC 22 55 0F 0B 0151*  	ld	(bitbuf1),hl
0B0EF0 ED 53 58 0F 0152*  	ld	(bitbuf2),de
       0B          
0B0EF5 D5          0153*  	push	de	;preserve DEU
0B0EF6 C5          0154*  	push	bc	;preserve BCU
0B0EF7 06 03       0155*  	ld		b,3
0B0EF9 21 55 0F 0B 0156*  	ld	hl,bitbuf1
0B0EFD 11 55 0F 0B 0157*  	ld	de,bitbuf1
0B0F01             0158*  andloop_24:
0B0F01 1A          0159*  	ld	a,(de)
0B0F02 A6          0160*  	and	(hl)
0B0F03 12          0161*  	ld	(de),a
0B0F04 13          0162*  	inc	de
0B0F05 23          0163*  	inc	hl
0B0F06 10 F9       0164*  	djnz	andloop_24
0B0F08 2A 58 0F 0B 0165*  	ld	hl,(bitbuf2)
0B0F0C C1          0166*  	pop		bc	;restore BC
0B0F0D D1          0167*  	pop		de	;restore DE
0B0F0E             0168*  
0B0F0E             0169*  ;------------------------------------------------------------------------
0B0F0E             0170*  ; xor_hlu_deu: 24 bit bitwise XOR
0B0F0E             0171*  ; Returns: hlu = hlu XOR deu
0B0F0E             0172*  ; preserves all other registers
0B0F0E             0173*  ;------------------------------------------------------------------------
0B0F0E             0174*  xor_hlu_deu:
0B0F0E 22 55 0F 0B 0175*  	ld	(bitbuf1),hl
0B0F12 ED 53 58 0F 0176*  	ld	(bitbuf2),de
       0B          
0B0F17 D5          0177*  	push	de	;preserve DEU
0B0F18 C5          0178*  	push	bc	;preserve BCU
0B0F19 06 03       0179*  	ld		b,3
0B0F1B 21 55 0F 0B 0180*  	ld	hl,bitbuf1
0B0F1F 11 55 0F 0B 0181*  	ld	de,bitbuf1
0B0F23             0182*  xorloop_24:
0B0F23 1A          0183*  	ld	a,(de)
0B0F24 AE          0184*  	xor	(hl)
0B0F25 12          0185*  	ld	(de),a
0B0F26 13          0186*  	inc	de
0B0F27 23          0187*  	inc	hl
0B0F28 10 F9       0188*  	djnz	xorloop_24
0B0F2A 2A 58 0F 0B 0189*  	ld	hl,(bitbuf2)
0B0F2E C1          0190*  	pop		bc	;restore BC
0B0F2F D1          0191*  	pop		de	;restore DE
0B0F30             0192*  
0B0F30             0193*  ;------------------------------------------------------------------------
0B0F30             0194*  ; shl_hlu: 24 bit shift left hlu by deu positions
0B0F30             0195*  ; Returns: hlu = hlu << deu
0B0F30             0196*  ;		   de = 0
0B0F30             0197*  ; NOTE: only considers deu up to 16 bits.
0B0F30             0198*  ; preserves all other registers
0B0F30             0199*  ;------------------------------------------------------------------------
0B0F30             0200*  shl_hlu:
0B0F30 7A          0201*  	ld		a,d		;up to 16 bit.
0B0F31 B3          0202*  	or		e
0B0F32 C8          0203*  	ret		z		;we're done
0B0F33 29          0204*  	add		hl,hl	;shift HLU left
0B0F34 1B          0205*  	dec		de
0B0F35 18 F9       0206*  	jr		shl_hlu
0B0F37             0207*  
0B0F37             0208*  ;------------------------------------------------------------------------
0B0F37             0209*  ; shr_hlu: 24 bit shift right hlu by deu positions
0B0F37             0210*  ; Returns: hlu = hlu >> deu
0B0F37             0211*  ;		   de = 0
0B0F37             0212*  ; NOTE: only considers deu up to 16 bits.
0B0F37             0213*  ; preserves all other registers
0B0F37             0214*  ;------------------------------------------------------------------------
0B0F37             0215*  shr_hlu:
0B0F37 22 55 0F 0B 0216*  	ld		(bitbuf1),hl
0B0F3B 21 57 0F 0B 0217*  	ld		hl,bitbuf1+2
0B0F3F             0218*  shr_loop:
0B0F3F 7A          0219*  	ld		a,d		;up to 16 bit.
0B0F40 B3          0220*  	or		e
0B0F41 28 0D       0221*  	jr		z,shr_done		;we're done
0B0F43             0222*  ;carry is clear from or instruction
0B0F43 CB 1E       0223*  	rr		(hl)
0B0F45 2B          0224*  	dec		hl
0B0F46 CB 1E       0225*  	rr		(hl)
0B0F48 2B          0226*  	dec		hl
0B0F49 CB 1E       0227*  	rr		(hl)
0B0F4B 23          0228*  	inc		hl
0B0F4C 23          0229*  	inc		hl
0B0F4D 1B          0230*  	dec		de
0B0F4E 18 EF       0231*  	jr		shr_loop
0B0F50             0232*  shr_done:
0B0F50 2A 55 0F 0B 0233*  	ld		hl,(bitbuf1)	;collect result
0B0F54 C9          0234*  	ret
0B0F55             0235*  
0B0F55             0236*  ;------------------------------------------------------------------------
0B0F55             0237*  ; Scratch area for calculations
0B0F55             0238*  ;------------------------------------------------------------------------
0B0F55 00 00 00    0239*  bitbuf1:	dw24	0	;bit manipulation buffer 1
0B0F58 00 00 00    0240*  bitbuf2:	dw24	0	;bit manipulation buffer 2
0B0F5B             0241*  
0B0F5B             0242*  ; ========== FROM maths24.inc ==========
0B0F5B             0243*  
0B0F5B             0244*  ; http://www.z80.info/pseudo-random.txt
0B0F5B             0245*  rand_8:
0B0F5B C5          0246*      push bc
0B0F5C 3A 6F 0F 0B 0247*      ld a,(r_seed)
0B0F60 4F          0248*      ld c,a
0B0F61             0249*  
0B0F61 0F          0250*      rrca ; multiply by 32
0B0F62 0F          0251*      rrca
0B0F63 0F          0252*      rrca
0B0F64 EE 1F       0253*      xor 0x1f
0B0F66             0254*  
0B0F66 81          0255*      add a,c
0B0F67 DE FF       0256*      sbc a,255 ; carry
0B0F69             0257*  
0B0F69 32 6F 0F 0B 0258*      ld (r_seed),a
0B0F6D C1          0259*      pop bc
0B0F6E C9          0260*      ret
0B0F6F 50          0261*  r_seed: defb $50
0B0F70             0262*  
0B0F70             0263*  ; tests the sign of 24-bit register hlu
0B0F70             0264*  ; returns: a in [-1,0,1]
0B0F70             0265*  ;   sign and zero flags as expected
0B0F70             0266*  ;   hl is untouched
0B0F70             0267*  ; GPT-4 wrote most of this. the or l was inspired. it did bit 7,a instead of h
0B0F70             0268*  ; and it left the zero flag set after ld a,1,which i fixed by anding it
0B0F70             0269*  get_sign_hlu:
0B0F70             0270*      ; Load the upper byte of HLU into A
0B0F70 E5          0271*      push hl
0B0F71 DD 21 00 00 0272*      ld ix,0
       00          
0B0F76 DD 39       0273*      add ix,sp
0B0F78 DD 7E 02    0274*      ld a,(ix+2)
0B0F7B E1          0275*      pop hl
0B0F7C             0276*  
0B0F7C B5          0277*      or l                ; OR with the low byte to check if HL is zero
0B0F7D C8          0278*      ret z               ; Return if HL is zero
0B0F7E             0279*  
0B0F7E 3E FF       0280*      ld a,-1             ; Send A back as -1 if the sign flag is set
0B0F80 CB 7C       0281*      bit 7,h            ; Test the sign bit (7th bit) of the high byte
0B0F82 C0          0282*      ret nz              ; If set,HL is negative,return with the sign flag set
0B0F83             0283*  
0B0F83 3E 01       0284*      ld a,1             ; Otherwise,HL is positive
0B0F85 A7          0285*      and a               ; Reset the zero flag
0B0F86 C9          0286*      ret                 ; Return with A set to 1
0B0F87             0287*  
0B0F87             0288*  ; convert unsigned angles from a 360 to 255 degree circle
0B0F87             0289*  ; inputs: uh.l is the angle360 in 16.8 fixed format
0B0F87             0290*  ; outputs: uh.l is the angle255 in 16.8 fixed format
0B0F87             0291*  ; destroys: TODO
0B0F87             0292*  ; note: even though the inputs and outputs are 16.8 fixed format
0B0F87             0293*  ;       precision is effectively limited to 8.8 fixed format
0B0F87             0294*  deg_360_to_255:
0B0F87             0295*  ; clear scratch buffer
0B0F87 11 00 00 00 0296*  	ld de,0
0B0F8B ED 53 B7 0F 0297*  	ld (@scratch),de
       0B          
0B0F90             0298*  ; divide uh.l by 360
0B0F90 11 68 01 00 0299*  	ld de,360
0B0F94             0300*  ; get integer portion
0B0F94 CD 9B 0E 0B 0301*  	call udiv24 ; DEU AND BCU = HLU / DEU, remainder in HLU
0B0F98 ED 53 BE 0F 0302*  	ld (@output+1),de ; shift result up one byte
       0B          
0B0F9D             0303*  ; get fractional portion
0B0F9D 22 B8 0F 0B 0304*  	ld (@scratch+1),hl ; shift remainder up one byte
0B0FA1 2A B7 0F 0B 0305*  	ld hl,(@scratch)
0B0FA5 11 68 01 00 0306*  	ld de,360
0B0FA9 CD 9B 0E 0B 0307*  	call udiv24 ; DEU AND BCU = HLU / DEU, remainder in HLU
0B0FAD 7B          0308*  	ld a,e ; lowest byte is all we need
0B0FAE 32 BD 0F 0B 0309*  	ld (@output),a
0B0FB2             0310*  ; we want the low 3 bytes for 16.8 output
0B0FB2 2A BD 0F 0B 0311*  	ld hl,(@output)
0B0FB6 C9          0312*  	ret
0B0FB7             0313*  @scratch: ds 6 ; scratch buffer for shifting bytes
0B0FBD             0314*  @output: ds 6 ; scratch buffer to accumulate output
0B0FC3             0315*  
0B0FC3             0316*  ; 16.8 fixed inputs / outputs
0B0FC3             0317*  ; takes: uh.l as angle in degrees 256
0B0FC3             0318*  ;        ud.e as radius
0B0FC3             0319*  ; returns ub.c as dx, ud.e as dy
0B0FC3             0320*  ;        displacements from origin (0,0)
0B0FC3             0321*  ; destroys: everything except indexes
0B0FC3             0322*  polar_to_cartesian:
0B0FC3             0323*  ; back up input parameters
0B0FC3 22 45 0E 0B 0324*      ld (arith24uhl), hl
0B0FC7 ED 53 51 0E 0325*      ld (arith24ude), de
       0B          
0B0FCC             0326*  ; compute dx = sin(uh.l) * ud.e
0B0FCC CD FB 0F 0B 0327*      call sin168
0B0FD0 E5          0328*      push hl
0B0FD1 C1          0329*      pop bc          ; ub.c = sin(uh.l)
0B0FD2 ED 5B 51 0E 0330*  	ld de, (arith24ude)   ; get radius back
       0B          
0B0FD7 CD 54 19 0B 0331*  	call smul168    ; uh.l = ub.c * ud.e = dx
0B0FDB E5          0332*      push hl         ; store dx for output
0B0FDC             0333*  ; compute dy = -cos(uh.l) * ud.e
0B0FDC 2A 45 0E 0B 0334*      ld hl, (arith24uhl)
0B0FE0 CD F6 0F 0B 0335*      call cos168
0B0FE4 CD C6 18 0B 0336*  	call neg_hlu    ; invert dy for screen coords convention
0B0FE8 E5          0337*      push hl
0B0FE9 C1          0338*      pop bc          ; ub.c = -cos(uh.l)
0B0FEA ED 5B 51 0E 0339*      ld de, (arith24ude)   ; get radius back
       0B          
0B0FEF CD 54 19 0B 0340*      call smul168    ; uh.l = ub.c * ud.e = dy
0B0FF3 EB          0341*      ex de, hl       ; de = dy for output
0B0FF4 C1          0342*      pop bc          ; bc = dx for output
0B0FF5             0343*  ; and out
0B0FF5 C9          0344*      ret
0B0FF6             0345*  
0B0FF6             0346*  ; fixed 16.8 routine
0B0FF6             0347*  ; cos(uh.l) --> uh.l
0B0FF6             0348*  ; destroys: de
0B0FF6             0349*  cos168:
0B0FF6             0350*  ; for cos we simply increment the angle by 90 degrees
0B0FF6             0351*  ; or 0x004000 in 16.8 degrees256
0B0FF6             0352*  ; which makes it a sin problem
0B0FF6 11 00 40 00 0353*      ld de,0x004000
0B0FFA 19          0354*      add hl,de ; modulo 256 happens below
0B0FFB             0355*  ; fall through to sin168
0B0FFB             0356*  ; ---------------------
0B0FFB             0357*  ; fixed 16.8 routine
0B0FFB             0358*  ; sin(uh.l) --> uh.l
0B0FFB             0359*  ; destroys: de
0B0FFB             0360*  sin168:
0B0FFB             0361*  ; h contains the integer portion of our angle
0B0FFB             0362*  ; we multiply it by three to get our lookup table index
0B0FFB 2E 03       0363*      ld l,3
0B0FFD ED 6C       0364*      mlt hl ; gosh that is handy
0B0FFF 11 00 00 00 0365*      ld de,0 ; clear deu
0B1003 54          0366*      ld d,h ; copy hl to de
0B1004 5D          0367*      ld e,l ; de contains our index
0B1005 21 0C 12 0B 0368*      ld hl,sin_lut_168 ; grab the lut address
0B1009 19          0369*      add hl,de ; bump hl by the index
0B100A ED 27       0370*      ld hl,(hl) ; don't try this on a z80!
0B100C C9          0371*      ret ; and out
0B100D             0372*  
0B100D             0373*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
0B100D             0374*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
0B100D             0375*  ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
0B100D             0376*  ;         also populates scratch locations dx168 and dy168
0B100D             0377*  ; destroys: a,hl,bc,de
0B100D             0378*  dxy168:
0B100D             0379*  ; compute dx = x1-x0
0B100D AF          0380*      xor a ; clear carry
0B100E DD E5       0381*      push ix ; move ix to hl via the stack
0B1010 E1          0382*      pop hl ; hl = x1
0B1011 ED 42       0383*      sbc hl,bc ; hl = dx
0B1013 22 68 10 0B 0384*      ld (dx168),hl ; dx to scratch
0B1017             0385*  ; compute dy = y1-y0
0B1017 AF          0386*      xor a ; clear carry
0B1018 FD E5       0387*      push iy ; move iy to hl via the stack
0B101A E1          0388*      pop hl ; hl = y1
0B101B ED 52       0389*      sbc hl,de ; hl = dy
0B101D 22 6E 10 0B 0390*      ld (dy168),hl ; dy to scratch
0B1021             0391*  ; populate output registers and return
0B1021 EB          0392*      ex de,hl        ; ud.e = dy
0B1022 ED 4B 68 10 0393*      ld bc,(dx168)   ; ub.c = dx
       0B          
0B1027 C9          0394*      ret
0B1028             0395*  
0B1028             0396*  ; compute the euclidian distance between two cartesian coordinates
0B1028             0397*  ; using the formula d = sqrt(dx^2+dy^2
0B1028             0398*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
0B1028             0399*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
0B1028             0400*  ; output; uh.l is the 16.8 fixed format distance
0B1028             0401*  ;       dx168/y are the 16.8 fixed format dx and dy
0B1028             0402*  ; destroys: a,hl,bc,de
0B1028             0403*  distance168:
0B1028             0404*  ; compute dx = x1-x0
0B1028 AF          0405*      xor a ; clear carry
0B1029 DD E5       0406*      push ix ; move ix to hl via the stack
0B102B E1          0407*      pop hl ; hl = x1
0B102C ED 42       0408*      sbc hl,bc ; hl = dx
0B102E 22 68 10 0B 0409*      ld (dx168),hl ; dx to scratch
0B1032             0410*  ; ; test dx for overflow
0B1032             0411*  ; 	ld de,0x007F00 ; max positive 16.8 value we can square without overflow
0B1032             0412*  ; 	ex de,hl
0B1032             0413*  ; 	sbc hl,de ; test for overflow
0B1032             0414*  ; 	push af ; carry indicates overflow
0B1032             0415*  ; compute dy = y1-y0
0B1032 AF          0416*      xor a ; clear carry
0B1033 FD E5       0417*      push iy ; move iy to hl via the stack
0B1035 E1          0418*      pop hl ; hl = y1
0B1036 ED 52       0419*      sbc hl,de ; hl = dy
0B1038 22 6E 10 0B 0420*      ld (dy168),hl ; dy to scratch
0B103C             0421*  ; ; test dy for overflow
0B103C             0422*  ; 	ld de,0x007F00 ; max positive 16.8 value we can square without overflow
0B103C             0423*  ; 	ex de,hl
0B103C             0424*  ; 	sbc hl,de ; test for overflow
0B103C             0425*  ; 	push af ; carry indicates overflow
0B103C             0426*  ; compute dy^2
0B103C 2A 6E 10 0B 0427*  	ld hl,(dy168)
0B1040 CD B6 18 0B 0428*      call abs_hlu  ; make dy positive so we can use unsigned multiply
0B1044             0429*      ; call hlu_div2 ; divide hlu by 2 to give us some headroom
0B1044 E5          0430*      push hl ; load hl/2 to bc via the stack
0B1045 C1          0431*      pop bc ; bc = dy/2
0B1046 EB          0432*      ex de,hl ; de = dy/2
0B1047 CD 38 19 0B 0433*      call umul168 ; uh.l = dy^2/2
0B104B E5          0434*      push hl ; dy^2/2 to the stack
0B104C             0435*  ; compute dx^2
0B104C 2A 68 10 0B 0436*      ld hl,(dx168) ; get back dx
0B1050 CD B6 18 0B 0437*      call abs_hlu  ; make dx positive so we can use unsigned multiply
0B1054             0438*      ; call hlu_div2 ; divide hlu by 2 to give us some headroom
0B1054 E5          0439*      push hl ; load hl/2 to bc via the stack
0B1055 C1          0440*      pop bc ; bc = dx/2
0B1056 EB          0441*      ex de,hl ; de = dx/2
0B1057 CD 38 19 0B 0442*      call umul168 ; uh.l = dx^2/2
0B105B             0443*  ; commpute dy^2+dx^2
0B105B D1          0444*      pop de ; get back dx^2/2
0B105C 19          0445*      add hl,de ; hl = dx^2/2+dy^2/2
0B105D             0446*  ; compute sqrt(dx^2/2+dy^2/2)
0B105D CD 21 11 0B 0447*      call sqrt168 ; uh.l = distance/2
0B1061             0448*      ; add hl,hl ; hl = distance
0B1061             0449*  ; ; check for overflow
0B1061             0450*  ; 	pop af ; get back the overflow flags
0B1061             0451*  ; 	sbc a,a ; will be -1 if overflow, 0 if not
0B1061             0452*  ; 	ld b,a ; save the overflow flag
0B1061             0453*  ; 	pop af ; get back the overflow flags
0B1061             0454*  ; 	sbc a,a ; will be -1 if overflow, 0 if not
0B1061             0455*  ; 	add a,b ; if a != 0 then we had overflow
0B1061             0456*  ;     ret z ; no overflow we're done
0B1061             0457*  ; @overflow:
0B1061             0458*  ; 	ld hl,0x7FFFFF ; max positive 16.8 fixed value indicates overflow
0B1061 C9          0459*  	ret
0B1062             0460*  @scratch: ds 6
0B1068             0461*  dx168: ds 6
0B106E             0462*  dy168: ds 6
0B1074             0463*  
0B1074             0464*  ; atan2(ub.c,ud.e) --> uh.l
0B1074             0465*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0B1074             0466*  ;   whether inputs are integers or fractional doesn't matter
0B1074             0467*  ;   so long as the sign bit of the upper byte is correct
0B1074             0468*  ; output: uh.l is the 16.8 fixed angle in degrees 256
0B1074             0469*  ; angles are COMPASS HEADINGS based on
0B1074             0470*  ; screen coordinate conventions,where the y axis is flipped
0B1074             0471*  ; #E0 315      0       45 #20
0B1074             0472*  ;        -x,-y | +x,-y
0B1074             0473*  ; #C0 270------+------ 90 #40
0B1074             0474*  ;        -x,+y | +x,+y
0B1074             0475*  ; #A0 225   180 #80   135 #60
0B1074             0476*  atan2_168game:
0B1074             0477*  ; get signs and make everything positive
0B1074             0478*  ; get abs(x) and store its original sign
0B1074 C5          0479*      push bc
0B1075 E1          0480*      pop hl
0B1076 CD B6 18 0B 0481*      call abs_hlu ; if x was negative this also sets the sign flag
0B107A E5          0482*      push hl ; store abs(x)
0B107B C1          0483*      pop bc ; bc = abs(x)
0B107C F5          0484*      push af ; store sign of x
0B107D             0485*  ; get abs(y) and store its original sign
0B107D EB          0486*      ex de,hl ; hl = y
0B107E CD B6 18 0B 0487*      call abs_hlu ; if y was negative this also sets the sign flag
0B1082 EB          0488*      ex de,hl ; de = abs(y)
0B1083 F5          0489*      push af ; store sign of y
0B1084             0490*  ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
0B1084             0491*  ; this ensures that our lookup value is between 0 and 1 inclusive
0B1084 AF          0492*      xor a ; clear the carry flag
0B1085 D5          0493*      push de
0B1086 E1          0494*      pop hl
0B1087 ED 42       0495*      sbc hl,bc
0B1089 F5          0496*      push af ; save sign of de - bc
0B108A F2 93 10 0B 0497*      jp p,@1 ; bc <= de, so we skip ahead
0B108E             0498*  ; otherwise we swap bc and de
0B108E C5          0499*      push bc
0B108F E1          0500*      pop hl
0B1090 EB          0501*      ex de,hl
0B1091 E5          0502*      push hl
0B1092 C1          0503*      pop bc
0B1093             0504*  @1:
0B1093             0505*  ; now we're ready to snag our preliminary result
0B1093 CD 01 11 0B 0506*      call atan_168game ; uh.l comes back with prelim result
0B1097             0507*  ; now we adjust uh.l based on sign of de - bc
0B1097 F1          0508*      pop af
0B1098 F2 A4 10 0B 0509*      jp p,@2 ; bc <= de,so we skip ahead
0B109C EB          0510*      ex de,hl
0B109D 21 00 40 00 0511*      ld hl,0x004000 ; 90 degrees
0B10A1 AF          0512*      xor a ; clear the carry flag
0B10A2 ED 52       0513*      sbc hl,de ; subtract result from 90 degrees
0B10A4             0514*      ; ld de,0 ; prep to clear hlu
0B10A4             0515*      ; ld d,h
0B10A4             0516*      ; ld e,l
0B10A4             0517*      ; ex de,hl ; now we have 0 <= uh.l < 256 in 16.8 fixed format
0B10A4             0518*      ; fall through
0B10A4             0519*  @2:
0B10A4             0520*  ; now the fun part of adjusting the result
0B10A4             0521*  ; based on which quadrant (x,y) is in
0B10A4             0522*  ; #E0 315      0       45 #20
0B10A4             0523*  ;        -x,-y | +x,-y
0B10A4             0524*  ; #C0 270------+------ 90 #40
0B10A4             0525*  ;        -x,+y | +x,+y
0B10A4             0526*  ; #A0 225   180 #80   135 #60
0B10A4 F1          0527*      pop af ; sign of y
0B10A5 CA E2 10 0B 0528*      jp z,@y_zero
0B10A9 F2 C2 10 0B 0529*      jp p,@y_pos
0B10AD             0530*  ; y neg,check x
0B10AD F1          0531*      pop af ; sign of x
0B10AE CA BC 10 0B 0532*      jp z,@y_neg_x_zero
0B10B2 F2 C1 10 0B 0533*      jp p,@y_neg_x_pos
0B10B6             0534*  ; y neg,x neg
0B10B6             0535*  ; angle is 270-360
0B10B6             0536*  ; negating the intermediate does the trick
0B10B6 CD C6 18 0B 0537*      call neg_hlu
0B10BA 18 31       0538*      jr @zero_hlu
0B10BC             0539*  
0B10BC             0540*  @y_neg_x_zero:
0B10BC             0541*  ; y neg,x zero
0B10BC             0542*  ; angle is 0
0B10BC 21 00 00 00 0543*      ld hl,0
0B10C0 C9          0544*      ret
0B10C1             0545*  @y_neg_x_pos:
0B10C1             0546*  ; y neg,x pos
0B10C1             0547*  ; angle is 0 to 90
0B10C1             0548*  ; so we're good
0B10C1 C9          0549*      ret
0B10C2             0550*  
0B10C2             0551*  @y_pos:
0B10C2 F1          0552*      pop af ; sign of x
0B10C3 CA D2 10 0B 0553*      jp z,@y_pos_x_zero
0B10C7 F2 D7 10 0B 0554*      jp p,@y_pos_x_pos
0B10CB             0555*  ; y pos,x neg
0B10CB             0556*  ; angle is 180-270
0B10CB             0557*  ; so we add 180 to intermediate
0B10CB 11 00 80 00 0558*      ld de,0x008000
0B10CF 19          0559*      add hl,de
0B10D0 18 1B       0560*      jr @zero_hlu
0B10D2             0561*  @y_pos_x_zero:
0B10D2             0562*  ; y pos,x zero
0B10D2             0563*  ; angle is 180
0B10D2 21 00 80 00 0564*      ld hl,0x008000
0B10D6 C9          0565*      ret
0B10D7             0566*  @y_pos_x_pos:
0B10D7             0567*  ; y pos,x pos
0B10D7             0568*  ; angle is 90-180
0B10D7             0569*  ; neg the intermediate and add 180 degrees
0B10D7 CD C6 18 0B 0570*      call neg_hlu
0B10DB 11 00 80 00 0571*      ld de,0x008000
0B10DF 19          0572*      add hl,de
0B10E0 18 0B       0573*      jr @zero_hlu
0B10E2             0574*  
0B10E2             0575*  @y_zero:
0B10E2 F1          0576*      pop af ; sign of x
0B10E3 FA E8 10 0B 0577*      jp m,@y_zero_x_neg
0B10E7             0578*  ; y zero,x pos
0B10E7             0579*  ; angle is 90,nothing to do
0B10E7 C9          0580*      ret
0B10E8             0581*  @y_zero_x_neg:
0B10E8             0582*  ; y zero ,x neg
0B10E8             0583*  ; angle is 270
0B10E8 21 00 C0 00 0584*      ld hl,0x00C000
0B10EC C9          0585*      ret
0B10ED             0586*  @zero_hlu:
0B10ED AF          0587*      xor a
0B10EE 22 FB 10 0B 0588*      ld (@scratch),hl
0B10F2 32 FD 10 0B 0589*      ld (@scratch+2),a
0B10F6 2A FB 10 0B 0590*      ld hl,(@scratch)
0B10FA C9          0591*      ret
0B10FB             0592*  @scratch: ds 6
0B1101             0593*  
0B1101             0594*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0B1101             0595*  ; output: uh.l is the 16.8 fixed format angle
0B1101             0596*  ; destroys: a,hl,bc,de
0B1101             0597*  ; the following note was written by github copilot:
0B1101             0598*  ; note: this routine is a bit of a hack
0B1101             0599*  ;      but it works
0B1101             0600*  ;      and it's fast
0B1101             0601*  ;      and it's small
0B1101             0602*  ;      and it's accurate
0B1101             0603*  ;      and it's easy to understand
0B1101             0604*  ;      and it's easy to modify
0B1101             0605*  ;      and it's easy to use
0B1101             0606*  ;      and it's easy to remember
0B1101             0607*  ;      and it's easy to love
0B1101             0608*  ;      and it's easy to hate
0B1101             0609*  ;      and it's easy to ignore
0B1101             0610*  ;      and it's easy to forget
0B1101             0611*  ;      and it's easy to remember
0B1101             0612*  ;      and it's easy to forget
0B1101             0613*  ;      and it's easy to remember
0B1101             0614*  ;      (ok the bot is stuck in a loop)
0B1101             0615*  ; REAL NOTE: only works for angles from 0 to 45 degrees
0B1101             0616*  ;   use atan2_168 (which calls this proc) to handle the full 360 degrees
0B1101             0617*  atan_168game:
0B1101             0618*  ; because we use compass headings instead of geometric angles
0B1101             0619*  ; we compute dx/dy which is 1/tan(theta) in the maths world
0B1101             0620*  ; we can do faster unsigned division here because we know dx and dy are positive
0B1101 CD 4D 18 0B 0621*  	call udiv168 ; uh.l = dx/dy
0B1105             0622*  ; ; TODO: IMPLEMENT THIS, RIGHT NOW IS IS BUGGED
0B1105             0623*  ; ; test uh.l for 0
0B1105             0624*  ;     add hl,de
0B1105             0625*  ;     or a
0B1105             0626*  ;     sbc hl,de
0B1105             0627*  ;     jr z,@is_zero
0B1105             0628*  ; ; test uh.l for 1
0B1105             0629*  ;     xor a ; clear carry
0B1105             0630*  ;     ex de,hl
0B1105             0631*  ;     ld hl,0x000100 ; 1 in 16.8 fixed format
0B1105             0632*  ;     sbc hl,de
0B1105             0633*  ;     jr z,@is_45
0B1105             0634*  ; ; END TODO
0B1105             0635*  
0B1105             0636*  ; no special cases so we move on
0B1105             0637*  ; l contains the fractional portion of tan(uh.l)
0B1105             0638*  ; we multiply it by three to get our lookup table index
0B1105 26 03       0639*      ld h,3
0B1107 ED 6C       0640*      mlt hl ; gosh that is handy
0B1109 11 00 00 00 0641*      ld de,0 ; clear deu
0B110D 54          0642*      ld d,h ; copy hl to de
0B110E 5D          0643*      ld e,l ; de contains our index
0B110F 21 0C 15 0B 0644*      ld hl,atan_lut_168 ; grab the lut address
0B1113 19          0645*      add hl,de ; bump hl by the index
0B1114 ED 27       0646*      ld hl,(hl) ; don't try this on a z80!
0B1116 C9          0647*      ret ; and out
0B1117             0648*  @is_45:
0B1117 21 00 20 00 0649*      ld hl,0x002000 ; 45 degrees decimal
0B111B C9          0650*      ret
0B111C             0651*  ; for the case tan(0)
0B111C             0652*  @is_zero:
0B111C 21 00 00 00 0653*      ld hl,0x000000
0B1120 C9          0654*      ret
0B1121             0655*  
0B1121             0656*  ; Expects  ADL mode
0B1121             0657*  ; Inputs:  UH.L
0B1121             0658*  ; Outputs: UH.L is the 16.8 square root
0B1121             0659*  ;          UD.E is the difference inputHL-DE^2
0B1121             0660*  ;          c flag reset
0B1121             0661*  sqrt168:
0B1121 CD 2B 11 0B 0662*      call sqrt24
0B1125 EB          0663*      ex de,hl
0B1126 29          0664*      add hl,hl
0B1127 29          0665*      add hl,hl
0B1128 29          0666*      add hl,hl
0B1129 29          0667*      add hl,hl
0B112A C9          0668*      ret
0B112B             0669*  
0B112B             0670*  ; Expects  ADL mode
0B112B             0671*  ; Inputs:  HL
0B112B             0672*  ; Outputs: DE is the integer square root
0B112B             0673*  ;          HL is the difference inputHL-DE^2
0B112B             0674*  ;          c flag reset
0B112B             0675*  sqrt24:
0B112B AF          0676*      xor a
0B112C 45          0677*      ld b,l
0B112D C5          0678*      push bc
0B112E 47          0679*      ld b,a
0B112F 57          0680*      ld d,a
0B1130 4F          0681*      ld c,a
0B1131 6F          0682*      ld l,a
0B1132 5F          0683*      ld e,a
0B1133             0684*  
0B1133             0685*      ;Iteration 1
0B1133 29          0686*      add hl,hl
0B1134 CB 11       0687*      rl c
0B1136 29          0688*      add hl,hl
0B1137 CB 11       0689*      rl c
0B1139 91          0690*      sub c
0B113A 30 04       0691*      jr nc,$+6
0B113C 1C          0692*      inc e
0B113D 1C          0693*      inc e
0B113E 2F          0694*      cpl
0B113F 4F          0695*      ld c,a
0B1140             0696*  
0B1140             0697*      ;Iteration 2
0B1140 29          0698*      add hl,hl
0B1141 CB 11       0699*      rl c
0B1143 29          0700*      add hl,hl
0B1144 CB 11       0701*      rl c
0B1146 CB 13       0702*      rl e
0B1148 7B          0703*      ld a,e
0B1149 91          0704*      sub c
0B114A 30 04       0705*      jr nc,$+6
0B114C 1C          0706*      inc e
0B114D 1C          0707*      inc e
0B114E 2F          0708*      cpl
0B114F 4F          0709*      ld c,a
0B1150             0710*  
0B1150             0711*      ;Iteration 3
0B1150 29          0712*      add hl,hl
0B1151 CB 11       0713*      rl c
0B1153 29          0714*      add hl,hl
0B1154 CB 11       0715*      rl c
0B1156 CB 13       0716*      rl e
0B1158 7B          0717*      ld a,e
0B1159 91          0718*      sub c
0B115A 30 04       0719*      jr nc,$+6
0B115C 1C          0720*      inc e
0B115D 1C          0721*      inc e
0B115E 2F          0722*      cpl
0B115F 4F          0723*      ld c,a
0B1160             0724*  
0B1160             0725*      ;Iteration 4
0B1160 29          0726*      add hl,hl
0B1161 CB 11       0727*      rl c
0B1163 29          0728*      add hl,hl
0B1164 CB 11       0729*      rl c
0B1166 CB 13       0730*      rl e
0B1168 7B          0731*      ld a,e
0B1169 91          0732*      sub c
0B116A 30 04       0733*      jr nc,$+6
0B116C 1C          0734*      inc e
0B116D 1C          0735*      inc e
0B116E 2F          0736*      cpl
0B116F 4F          0737*      ld c,a
0B1170             0738*  
0B1170             0739*      ;Iteration 5
0B1170 29          0740*      add hl,hl
0B1171 CB 11       0741*      rl c
0B1173 29          0742*      add hl,hl
0B1174 CB 11       0743*      rl c
0B1176 CB 13       0744*      rl e
0B1178 7B          0745*      ld a,e
0B1179 91          0746*      sub c
0B117A 30 04       0747*      jr nc,$+6
0B117C 1C          0748*      inc e
0B117D 1C          0749*      inc e
0B117E 2F          0750*      cpl
0B117F 4F          0751*      ld c,a
0B1180             0752*  
0B1180             0753*      ;Iteration 6
0B1180 29          0754*      add hl,hl
0B1181 CB 11       0755*      rl c
0B1183 29          0756*      add hl,hl
0B1184 CB 11       0757*      rl c
0B1186 CB 13       0758*      rl e
0B1188 7B          0759*      ld a,e
0B1189 91          0760*      sub c
0B118A 30 04       0761*      jr nc,$+6
0B118C 1C          0762*      inc e
0B118D 1C          0763*      inc e
0B118E 2F          0764*      cpl
0B118F 4F          0765*      ld c,a
0B1190             0766*  
0B1190             0767*      ;Iteration 7
0B1190 29          0768*      add hl,hl
0B1191 CB 11       0769*      rl c
0B1193 29          0770*      add hl,hl
0B1194 CB 11       0771*      rl c
0B1196 CB 10       0772*      rl b
0B1198 EB          0773*      ex de,hl
0B1199 29          0774*      add hl,hl
0B119A E5          0775*      push hl
0B119B ED 42       0776*      sbc hl,bc
0B119D 30 06       0777*      jr nc,$+8
0B119F 7C          0778*      ld a,h
0B11A0 2F          0779*      cpl
0B11A1 47          0780*      ld b,a
0B11A2 7D          0781*      ld a,l
0B11A3 2F          0782*      cpl
0B11A4 4F          0783*      ld c,a
0B11A5 E1          0784*      pop hl
0B11A6 30 02       0785*      jr nc,$+4
0B11A8 23          0786*      inc hl
0B11A9 23          0787*      inc hl
0B11AA EB          0788*      ex de,hl
0B11AB             0789*  
0B11AB             0790*      ;Iteration 8
0B11AB 29          0791*      add hl,hl
0B11AC 69          0792*      ld l,c
0B11AD 60          0793*      ld h,b
0B11AE ED 6A       0794*      adc hl,hl
0B11B0 ED 6A       0795*      adc hl,hl
0B11B2 EB          0796*      ex de,hl
0B11B3 29          0797*      add hl,hl
0B11B4 ED 52       0798*      sbc hl,de
0B11B6 19          0799*      add hl,de
0B11B7 EB          0800*      ex de,hl
0B11B8 30 04       0801*      jr nc,$+6
0B11BA ED 52       0802*      sbc hl,de
0B11BC 13          0803*      inc de
0B11BD 13          0804*      inc de
0B11BE             0805*  
0B11BE             0806*      ;Iteration 9
0B11BE F1          0807*      pop af
0B11BF 17          0808*      rla
0B11C0 ED 6A       0809*      adc hl,hl
0B11C2 17          0810*      rla
0B11C3 ED 6A       0811*      adc hl,hl
0B11C5 EB          0812*      ex de,hl
0B11C6 29          0813*      add hl,hl
0B11C7 ED 52       0814*      sbc hl,de
0B11C9 19          0815*      add hl,de
0B11CA EB          0816*      ex de,hl
0B11CB 30 04       0817*      jr nc,$+6
0B11CD ED 52       0818*      sbc hl,de
0B11CF 13          0819*      inc de
0B11D0 13          0820*      inc de
0B11D1             0821*  
0B11D1             0822*      ;Iteration 10
0B11D1 17          0823*      rla
0B11D2 ED 6A       0824*      adc hl,hl
0B11D4 17          0825*      rla
0B11D5 ED 6A       0826*      adc hl,hl
0B11D7 EB          0827*      ex de,hl
0B11D8 29          0828*      add hl,hl
0B11D9 ED 52       0829*      sbc hl,de
0B11DB 19          0830*      add hl,de
0B11DC EB          0831*      ex de,hl
0B11DD 30 04       0832*      jr nc,$+6
0B11DF ED 52       0833*      sbc hl,de
0B11E1 13          0834*      inc de
0B11E2 13          0835*      inc de
0B11E3             0836*  
0B11E3             0837*      ;Iteration 11
0B11E3 17          0838*      rla
0B11E4 ED 6A       0839*      adc hl,hl
0B11E6 17          0840*      rla
0B11E7 ED 6A       0841*      adc hl,hl
0B11E9 EB          0842*      ex de,hl
0B11EA 29          0843*      add hl,hl
0B11EB ED 52       0844*      sbc hl,de
0B11ED 19          0845*      add hl,de
0B11EE EB          0846*      ex de,hl
0B11EF 30 04       0847*      jr nc,$+6
0B11F1 ED 52       0848*      sbc hl,de
0B11F3 13          0849*      inc de
0B11F4 13          0850*      inc de
0B11F5             0851*  
0B11F5             0852*      ;Iteration 11
0B11F5 17          0853*      rla
0B11F6 ED 6A       0854*      adc hl,hl
0B11F8 17          0855*      rla
0B11F9 ED 6A       0856*      adc hl,hl
0B11FB EB          0857*      ex de,hl
0B11FC 29          0858*      add hl,hl
0B11FD ED 52       0859*      sbc hl,de
0B11FF 19          0860*      add hl,de
0B1200 EB          0861*      ex de,hl
0B1201 30 04       0862*      jr nc,$+6
0B1203 ED 52       0863*      sbc hl,de
0B1205 13          0864*      inc de
0B1206 13          0865*      inc de
0B1207             0866*  
0B1207 CB 1A       0867*      rr d
0B1209 CB 1B       0868*      rr e
0B120B C9          0869*      ret
0B120C             0870*  
0B120C             0871*  sin_lut_168:
0B120C 00 00 00    0872*  	dl 0x000000 ; 0.000 00, 0.000
0B120F 06 00 00    0873*  	dl 0x000006 ; 1.406 01, 0.025
0B1212 0C 00 00    0874*  	dl 0x00000C ; 2.813 02, 0.049
0B1215 12 00 00    0875*  	dl 0x000012 ; 4.219 03, 0.074
0B1218 19 00 00    0876*  	dl 0x000019 ; 5.625 04, 0.098
0B121B 1F 00 00    0877*  	dl 0x00001F ; 7.031 05, 0.122
0B121E 25 00 00    0878*  	dl 0x000025 ; 8.438 06, 0.147
0B1221 2B 00 00    0879*  	dl 0x00002B ; 9.844 07, 0.171
0B1224 31 00 00    0880*  	dl 0x000031 ; 11.250 08, 0.195
0B1227 38 00 00    0881*  	dl 0x000038 ; 12.656 09, 0.219
0B122A 3E 00 00    0882*  	dl 0x00003E ; 14.063 0A, 0.243
0B122D 44 00 00    0883*  	dl 0x000044 ; 15.469 0B, 0.267
0B1230 4A 00 00    0884*  	dl 0x00004A ; 16.875 0C, 0.290
0B1233 50 00 00    0885*  	dl 0x000050 ; 18.281 0D, 0.314
0B1236 56 00 00    0886*  	dl 0x000056 ; 19.688 0E, 0.337
0B1239 5C 00 00    0887*  	dl 0x00005C ; 21.094 0F, 0.360
0B123C 61 00 00    0888*  	dl 0x000061 ; 22.500 10, 0.383
0B123F 67 00 00    0889*  	dl 0x000067 ; 23.906 11, 0.405
0B1242 6D 00 00    0890*  	dl 0x00006D ; 25.313 12, 0.428
0B1245 73 00 00    0891*  	dl 0x000073 ; 26.719 13, 0.450
0B1248 78 00 00    0892*  	dl 0x000078 ; 28.125 14, 0.471
0B124B 7E 00 00    0893*  	dl 0x00007E ; 29.531 15, 0.493
0B124E 83 00 00    0894*  	dl 0x000083 ; 30.938 16, 0.514
0B1251 88 00 00    0895*  	dl 0x000088 ; 32.344 17, 0.535
0B1254 8E 00 00    0896*  	dl 0x00008E ; 33.750 18, 0.556
0B1257 93 00 00    0897*  	dl 0x000093 ; 35.156 19, 0.576
0B125A 98 00 00    0898*  	dl 0x000098 ; 36.563 1A, 0.596
0B125D 9D 00 00    0899*  	dl 0x00009D ; 37.969 1B, 0.615
0B1260 A2 00 00    0900*  	dl 0x0000A2 ; 39.375 1C, 0.634
0B1263 A7 00 00    0901*  	dl 0x0000A7 ; 40.781 1D, 0.653
0B1266 AB 00 00    0902*  	dl 0x0000AB ; 42.188 1E, 0.672
0B1269 B0 00 00    0903*  	dl 0x0000B0 ; 43.594 1F, 0.690
0B126C B5 00 00    0904*  	dl 0x0000B5 ; 45.000 20, 0.707
0B126F B9 00 00    0905*  	dl 0x0000B9 ; 46.406 21, 0.724
0B1272 BD 00 00    0906*  	dl 0x0000BD ; 47.813 22, 0.741
0B1275 C1 00 00    0907*  	dl 0x0000C1 ; 49.219 23, 0.757
0B1278 C5 00 00    0908*  	dl 0x0000C5 ; 50.625 24, 0.773
0B127B C9 00 00    0909*  	dl 0x0000C9 ; 52.031 25, 0.788
0B127E CD 00 00    0910*  	dl 0x0000CD ; 53.438 26, 0.803
0B1281 D1 00 00    0911*  	dl 0x0000D1 ; 54.844 27, 0.818
0B1284 D4 00 00    0912*  	dl 0x0000D4 ; 56.250 28, 0.831
0B1287 D8 00 00    0913*  	dl 0x0000D8 ; 57.656 29, 0.845
0B128A DB 00 00    0914*  	dl 0x0000DB ; 59.063 2A, 0.858
0B128D DE 00 00    0915*  	dl 0x0000DE ; 60.469 2B, 0.870
0B1290 E1 00 00    0916*  	dl 0x0000E1 ; 61.875 2C, 0.882
0B1293 E4 00 00    0917*  	dl 0x0000E4 ; 63.281 2D, 0.893
0B1296 E7 00 00    0918*  	dl 0x0000E7 ; 64.688 2E, 0.904
0B1299 EA 00 00    0919*  	dl 0x0000EA ; 66.094 2F, 0.914
0B129C EC 00 00    0920*  	dl 0x0000EC ; 67.500 30, 0.924
0B129F EE 00 00    0921*  	dl 0x0000EE ; 68.906 31, 0.933
0B12A2 F1 00 00    0922*  	dl 0x0000F1 ; 70.313 32, 0.942
0B12A5 F3 00 00    0923*  	dl 0x0000F3 ; 71.719 33, 0.950
0B12A8 F4 00 00    0924*  	dl 0x0000F4 ; 73.125 34, 0.957
0B12AB F6 00 00    0925*  	dl 0x0000F6 ; 74.531 35, 0.964
0B12AE F8 00 00    0926*  	dl 0x0000F8 ; 75.938 36, 0.970
0B12B1 F9 00 00    0927*  	dl 0x0000F9 ; 77.344 37, 0.976
0B12B4 FB 00 00    0928*  	dl 0x0000FB ; 78.750 38, 0.981
0B12B7 FC 00 00    0929*  	dl 0x0000FC ; 80.156 39, 0.985
0B12BA FD 00 00    0930*  	dl 0x0000FD ; 81.563 3A, 0.989
0B12BD FE 00 00    0931*  	dl 0x0000FE ; 82.969 3B, 0.992
0B12C0 FE 00 00    0932*  	dl 0x0000FE ; 84.375 3C, 0.995
0B12C3 FF 00 00    0933*  	dl 0x0000FF ; 85.781 3D, 0.997
0B12C6 FF 00 00    0934*  	dl 0x0000FF ; 87.188 3E, 0.999
0B12C9 FF 00 00    0935*  	dl 0x0000FF ; 88.594 3F, 1.000
0B12CC 00 01 00    0936*  	dl 0x000100 ; 90.000 40, 1.000
0B12CF FF 00 00    0937*  	dl 0x0000FF ; 91.406 41, 1.000
0B12D2 FF 00 00    0938*  	dl 0x0000FF ; 92.813 42, 0.999
0B12D5 FF 00 00    0939*  	dl 0x0000FF ; 94.219 43, 0.997
0B12D8 FE 00 00    0940*  	dl 0x0000FE ; 95.625 44, 0.995
0B12DB FE 00 00    0941*  	dl 0x0000FE ; 97.031 45, 0.992
0B12DE FD 00 00    0942*  	dl 0x0000FD ; 98.438 46, 0.989
0B12E1 FC 00 00    0943*  	dl 0x0000FC ; 99.844 47, 0.985
0B12E4 FB 00 00    0944*  	dl 0x0000FB ; 101.250 48, 0.981
0B12E7 F9 00 00    0945*  	dl 0x0000F9 ; 102.656 49, 0.976
0B12EA F8 00 00    0946*  	dl 0x0000F8 ; 104.063 4A, 0.970
0B12ED F6 00 00    0947*  	dl 0x0000F6 ; 105.469 4B, 0.964
0B12F0 F4 00 00    0948*  	dl 0x0000F4 ; 106.875 4C, 0.957
0B12F3 F3 00 00    0949*  	dl 0x0000F3 ; 108.281 4D, 0.950
0B12F6 F1 00 00    0950*  	dl 0x0000F1 ; 109.688 4E, 0.942
0B12F9 EE 00 00    0951*  	dl 0x0000EE ; 111.094 4F, 0.933
0B12FC EC 00 00    0952*  	dl 0x0000EC ; 112.500 50, 0.924
0B12FF EA 00 00    0953*  	dl 0x0000EA ; 113.906 51, 0.914
0B1302 E7 00 00    0954*  	dl 0x0000E7 ; 115.313 52, 0.904
0B1305 E4 00 00    0955*  	dl 0x0000E4 ; 116.719 53, 0.893
0B1308 E1 00 00    0956*  	dl 0x0000E1 ; 118.125 54, 0.882
0B130B DE 00 00    0957*  	dl 0x0000DE ; 119.531 55, 0.870
0B130E DB 00 00    0958*  	dl 0x0000DB ; 120.938 56, 0.858
0B1311 D8 00 00    0959*  	dl 0x0000D8 ; 122.344 57, 0.845
0B1314 D4 00 00    0960*  	dl 0x0000D4 ; 123.750 58, 0.831
0B1317 D1 00 00    0961*  	dl 0x0000D1 ; 125.156 59, 0.818
0B131A CD 00 00    0962*  	dl 0x0000CD ; 126.563 5A, 0.803
0B131D C9 00 00    0963*  	dl 0x0000C9 ; 127.969 5B, 0.788
0B1320 C5 00 00    0964*  	dl 0x0000C5 ; 129.375 5C, 0.773
0B1323 C1 00 00    0965*  	dl 0x0000C1 ; 130.781 5D, 0.757
0B1326 BD 00 00    0966*  	dl 0x0000BD ; 132.188 5E, 0.741
0B1329 B9 00 00    0967*  	dl 0x0000B9 ; 133.594 5F, 0.724
0B132C B5 00 00    0968*  	dl 0x0000B5 ; 135.000 60, 0.707
0B132F B0 00 00    0969*  	dl 0x0000B0 ; 136.406 61, 0.690
0B1332 AB 00 00    0970*  	dl 0x0000AB ; 137.813 62, 0.672
0B1335 A7 00 00    0971*  	dl 0x0000A7 ; 139.219 63, 0.653
0B1338 A2 00 00    0972*  	dl 0x0000A2 ; 140.625 64, 0.634
0B133B 9D 00 00    0973*  	dl 0x00009D ; 142.031 65, 0.615
0B133E 98 00 00    0974*  	dl 0x000098 ; 143.438 66, 0.596
0B1341 93 00 00    0975*  	dl 0x000093 ; 144.844 67, 0.576
0B1344 8E 00 00    0976*  	dl 0x00008E ; 146.250 68, 0.556
0B1347 88 00 00    0977*  	dl 0x000088 ; 147.656 69, 0.535
0B134A 83 00 00    0978*  	dl 0x000083 ; 149.063 6A, 0.514
0B134D 7E 00 00    0979*  	dl 0x00007E ; 150.469 6B, 0.493
0B1350 78 00 00    0980*  	dl 0x000078 ; 151.875 6C, 0.471
0B1353 73 00 00    0981*  	dl 0x000073 ; 153.281 6D, 0.450
0B1356 6D 00 00    0982*  	dl 0x00006D ; 154.688 6E, 0.428
0B1359 67 00 00    0983*  	dl 0x000067 ; 156.094 6F, 0.405
0B135C 61 00 00    0984*  	dl 0x000061 ; 157.500 70, 0.383
0B135F 5C 00 00    0985*  	dl 0x00005C ; 158.906 71, 0.360
0B1362 56 00 00    0986*  	dl 0x000056 ; 160.313 72, 0.337
0B1365 50 00 00    0987*  	dl 0x000050 ; 161.719 73, 0.314
0B1368 4A 00 00    0988*  	dl 0x00004A ; 163.125 74, 0.290
0B136B 44 00 00    0989*  	dl 0x000044 ; 164.531 75, 0.267
0B136E 3E 00 00    0990*  	dl 0x00003E ; 165.938 76, 0.243
0B1371 38 00 00    0991*  	dl 0x000038 ; 167.344 77, 0.219
0B1374 31 00 00    0992*  	dl 0x000031 ; 168.750 78, 0.195
0B1377 2B 00 00    0993*  	dl 0x00002B ; 170.156 79, 0.171
0B137A 25 00 00    0994*  	dl 0x000025 ; 171.563 7A, 0.147
0B137D 1F 00 00    0995*  	dl 0x00001F ; 172.969 7B, 0.122
0B1380 19 00 00    0996*  	dl 0x000019 ; 174.375 7C, 0.098
0B1383 12 00 00    0997*  	dl 0x000012 ; 175.781 7D, 0.074
0B1386 0C 00 00    0998*  	dl 0x00000C ; 177.188 7E, 0.049
0B1389 06 00 00    0999*  	dl 0x000006 ; 178.594 7F, 0.025
0B138C 00 00 00    1000*  	dl 0x000000 ; 180.000 80, 0.000
0B138F FA FF FF    1001*  	dl 0xFFFFFA ; 181.406 81, -0.025
0B1392 F4 FF FF    1002*  	dl 0xFFFFF4 ; 182.813 82, -0.049
0B1395 EE FF FF    1003*  	dl 0xFFFFEE ; 184.219 83, -0.074
0B1398 E7 FF FF    1004*  	dl 0xFFFFE7 ; 185.625 84, -0.098
0B139B E1 FF FF    1005*  	dl 0xFFFFE1 ; 187.031 85, -0.122
0B139E DB FF FF    1006*  	dl 0xFFFFDB ; 188.438 86, -0.147
0B13A1 D5 FF FF    1007*  	dl 0xFFFFD5 ; 189.844 87, -0.171
0B13A4 CF FF FF    1008*  	dl 0xFFFFCF ; 191.250 88, -0.195
0B13A7 C8 FF FF    1009*  	dl 0xFFFFC8 ; 192.656 89, -0.219
0B13AA C2 FF FF    1010*  	dl 0xFFFFC2 ; 194.063 8A, -0.243
0B13AD BC FF FF    1011*  	dl 0xFFFFBC ; 195.469 8B, -0.267
0B13B0 B6 FF FF    1012*  	dl 0xFFFFB6 ; 196.875 8C, -0.290
0B13B3 B0 FF FF    1013*  	dl 0xFFFFB0 ; 198.281 8D, -0.314
0B13B6 AA FF FF    1014*  	dl 0xFFFFAA ; 199.688 8E, -0.337
0B13B9 A4 FF FF    1015*  	dl 0xFFFFA4 ; 201.094 8F, -0.360
0B13BC 9F FF FF    1016*  	dl 0xFFFF9F ; 202.500 90, -0.383
0B13BF 99 FF FF    1017*  	dl 0xFFFF99 ; 203.906 91, -0.405
0B13C2 93 FF FF    1018*  	dl 0xFFFF93 ; 205.313 92, -0.428
0B13C5 8D FF FF    1019*  	dl 0xFFFF8D ; 206.719 93, -0.450
0B13C8 88 FF FF    1020*  	dl 0xFFFF88 ; 208.125 94, -0.471
0B13CB 82 FF FF    1021*  	dl 0xFFFF82 ; 209.531 95, -0.493
0B13CE 7D FF FF    1022*  	dl 0xFFFF7D ; 210.938 96, -0.514
0B13D1 78 FF FF    1023*  	dl 0xFFFF78 ; 212.344 97, -0.535
0B13D4 72 FF FF    1024*  	dl 0xFFFF72 ; 213.750 98, -0.556
0B13D7 6D FF FF    1025*  	dl 0xFFFF6D ; 215.156 99, -0.576
0B13DA 68 FF FF    1026*  	dl 0xFFFF68 ; 216.563 9A, -0.596
0B13DD 63 FF FF    1027*  	dl 0xFFFF63 ; 217.969 9B, -0.615
0B13E0 5E FF FF    1028*  	dl 0xFFFF5E ; 219.375 9C, -0.634
0B13E3 59 FF FF    1029*  	dl 0xFFFF59 ; 220.781 9D, -0.653
0B13E6 55 FF FF    1030*  	dl 0xFFFF55 ; 222.188 9E, -0.672
0B13E9 50 FF FF    1031*  	dl 0xFFFF50 ; 223.594 9F, -0.690
0B13EC 4B FF FF    1032*  	dl 0xFFFF4B ; 225.000 A0, -0.707
0B13EF 47 FF FF    1033*  	dl 0xFFFF47 ; 226.406 A1, -0.724
0B13F2 43 FF FF    1034*  	dl 0xFFFF43 ; 227.813 A2, -0.741
0B13F5 3F FF FF    1035*  	dl 0xFFFF3F ; 229.219 A3, -0.757
0B13F8 3B FF FF    1036*  	dl 0xFFFF3B ; 230.625 A4, -0.773
0B13FB 37 FF FF    1037*  	dl 0xFFFF37 ; 232.031 A5, -0.788
0B13FE 33 FF FF    1038*  	dl 0xFFFF33 ; 233.438 A6, -0.803
0B1401 2F FF FF    1039*  	dl 0xFFFF2F ; 234.844 A7, -0.818
0B1404 2C FF FF    1040*  	dl 0xFFFF2C ; 236.250 A8, -0.831
0B1407 28 FF FF    1041*  	dl 0xFFFF28 ; 237.656 A9, -0.845
0B140A 25 FF FF    1042*  	dl 0xFFFF25 ; 239.063 AA, -0.858
0B140D 22 FF FF    1043*  	dl 0xFFFF22 ; 240.469 AB, -0.870
0B1410 1F FF FF    1044*  	dl 0xFFFF1F ; 241.875 AC, -0.882
0B1413 1C FF FF    1045*  	dl 0xFFFF1C ; 243.281 AD, -0.893
0B1416 19 FF FF    1046*  	dl 0xFFFF19 ; 244.688 AE, -0.904
0B1419 16 FF FF    1047*  	dl 0xFFFF16 ; 246.094 AF, -0.914
0B141C 14 FF FF    1048*  	dl 0xFFFF14 ; 247.500 B0, -0.924
0B141F 12 FF FF    1049*  	dl 0xFFFF12 ; 248.906 B1, -0.933
0B1422 0F FF FF    1050*  	dl 0xFFFF0F ; 250.313 B2, -0.942
0B1425 0D FF FF    1051*  	dl 0xFFFF0D ; 251.719 B3, -0.950
0B1428 0C FF FF    1052*  	dl 0xFFFF0C ; 253.125 B4, -0.957
0B142B 0A FF FF    1053*  	dl 0xFFFF0A ; 254.531 B5, -0.964
0B142E 08 FF FF    1054*  	dl 0xFFFF08 ; 255.938 B6, -0.970
0B1431 07 FF FF    1055*  	dl 0xFFFF07 ; 257.344 B7, -0.976
0B1434 05 FF FF    1056*  	dl 0xFFFF05 ; 258.750 B8, -0.981
0B1437 04 FF FF    1057*  	dl 0xFFFF04 ; 260.156 B9, -0.985
0B143A 03 FF FF    1058*  	dl 0xFFFF03 ; 261.563 BA, -0.989
0B143D 02 FF FF    1059*  	dl 0xFFFF02 ; 262.969 BB, -0.992
0B1440 02 FF FF    1060*  	dl 0xFFFF02 ; 264.375 BC, -0.995
0B1443 01 FF FF    1061*  	dl 0xFFFF01 ; 265.781 BD, -0.997
0B1446 01 FF FF    1062*  	dl 0xFFFF01 ; 267.188 BE, -0.999
0B1449 01 FF FF    1063*  	dl 0xFFFF01 ; 268.594 BF, -1.000
0B144C 00 FF FF    1064*  	dl 0xFFFF00 ; 270.000 C0, -1.000
0B144F 01 FF FF    1065*  	dl 0xFFFF01 ; 271.406 C1, -1.000
0B1452 01 FF FF    1066*  	dl 0xFFFF01 ; 272.813 C2, -0.999
0B1455 01 FF FF    1067*  	dl 0xFFFF01 ; 274.219 C3, -0.997
0B1458 02 FF FF    1068*  	dl 0xFFFF02 ; 275.625 C4, -0.995
0B145B 02 FF FF    1069*  	dl 0xFFFF02 ; 277.031 C5, -0.992
0B145E 03 FF FF    1070*  	dl 0xFFFF03 ; 278.438 C6, -0.989
0B1461 04 FF FF    1071*  	dl 0xFFFF04 ; 279.844 C7, -0.985
0B1464 05 FF FF    1072*  	dl 0xFFFF05 ; 281.250 C8, -0.981
0B1467 07 FF FF    1073*  	dl 0xFFFF07 ; 282.656 C9, -0.976
0B146A 08 FF FF    1074*  	dl 0xFFFF08 ; 284.063 CA, -0.970
0B146D 0A FF FF    1075*  	dl 0xFFFF0A ; 285.469 CB, -0.964
0B1470 0C FF FF    1076*  	dl 0xFFFF0C ; 286.875 CC, -0.957
0B1473 0D FF FF    1077*  	dl 0xFFFF0D ; 288.281 CD, -0.950
0B1476 0F FF FF    1078*  	dl 0xFFFF0F ; 289.688 CE, -0.942
0B1479 12 FF FF    1079*  	dl 0xFFFF12 ; 291.094 CF, -0.933
0B147C 14 FF FF    1080*  	dl 0xFFFF14 ; 292.500 D0, -0.924
0B147F 16 FF FF    1081*  	dl 0xFFFF16 ; 293.906 D1, -0.914
0B1482 19 FF FF    1082*  	dl 0xFFFF19 ; 295.313 D2, -0.904
0B1485 1C FF FF    1083*  	dl 0xFFFF1C ; 296.719 D3, -0.893
0B1488 1F FF FF    1084*  	dl 0xFFFF1F ; 298.125 D4, -0.882
0B148B 22 FF FF    1085*  	dl 0xFFFF22 ; 299.531 D5, -0.870
0B148E 25 FF FF    1086*  	dl 0xFFFF25 ; 300.938 D6, -0.858
0B1491 28 FF FF    1087*  	dl 0xFFFF28 ; 302.344 D7, -0.845
0B1494 2C FF FF    1088*  	dl 0xFFFF2C ; 303.750 D8, -0.831
0B1497 2F FF FF    1089*  	dl 0xFFFF2F ; 305.156 D9, -0.818
0B149A 33 FF FF    1090*  	dl 0xFFFF33 ; 306.563 DA, -0.803
0B149D 37 FF FF    1091*  	dl 0xFFFF37 ; 307.969 DB, -0.788
0B14A0 3B FF FF    1092*  	dl 0xFFFF3B ; 309.375 DC, -0.773
0B14A3 3F FF FF    1093*  	dl 0xFFFF3F ; 310.781 DD, -0.757
0B14A6 43 FF FF    1094*  	dl 0xFFFF43 ; 312.188 DE, -0.741
0B14A9 47 FF FF    1095*  	dl 0xFFFF47 ; 313.594 DF, -0.724
0B14AC 4B FF FF    1096*  	dl 0xFFFF4B ; 315.000 E0, -0.707
0B14AF 50 FF FF    1097*  	dl 0xFFFF50 ; 316.406 E1, -0.690
0B14B2 55 FF FF    1098*  	dl 0xFFFF55 ; 317.813 E2, -0.672
0B14B5 59 FF FF    1099*  	dl 0xFFFF59 ; 319.219 E3, -0.653
0B14B8 5E FF FF    1100*  	dl 0xFFFF5E ; 320.625 E4, -0.634
0B14BB 63 FF FF    1101*  	dl 0xFFFF63 ; 322.031 E5, -0.615
0B14BE 68 FF FF    1102*  	dl 0xFFFF68 ; 323.438 E6, -0.596
0B14C1 6D FF FF    1103*  	dl 0xFFFF6D ; 324.844 E7, -0.576
0B14C4 72 FF FF    1104*  	dl 0xFFFF72 ; 326.250 E8, -0.556
0B14C7 78 FF FF    1105*  	dl 0xFFFF78 ; 327.656 E9, -0.535
0B14CA 7D FF FF    1106*  	dl 0xFFFF7D ; 329.063 EA, -0.514
0B14CD 82 FF FF    1107*  	dl 0xFFFF82 ; 330.469 EB, -0.493
0B14D0 88 FF FF    1108*  	dl 0xFFFF88 ; 331.875 EC, -0.471
0B14D3 8D FF FF    1109*  	dl 0xFFFF8D ; 333.281 ED, -0.450
0B14D6 93 FF FF    1110*  	dl 0xFFFF93 ; 334.688 EE, -0.428
0B14D9 99 FF FF    1111*  	dl 0xFFFF99 ; 336.094 EF, -0.405
0B14DC 9F FF FF    1112*  	dl 0xFFFF9F ; 337.500 F0, -0.383
0B14DF A4 FF FF    1113*  	dl 0xFFFFA4 ; 338.906 F1, -0.360
0B14E2 AA FF FF    1114*  	dl 0xFFFFAA ; 340.313 F2, -0.337
0B14E5 B0 FF FF    1115*  	dl 0xFFFFB0 ; 341.719 F3, -0.314
0B14E8 B6 FF FF    1116*  	dl 0xFFFFB6 ; 343.125 F4, -0.290
0B14EB BC FF FF    1117*  	dl 0xFFFFBC ; 344.531 F5, -0.267
0B14EE C2 FF FF    1118*  	dl 0xFFFFC2 ; 345.938 F6, -0.243
0B14F1 C8 FF FF    1119*  	dl 0xFFFFC8 ; 347.344 F7, -0.219
0B14F4 CF FF FF    1120*  	dl 0xFFFFCF ; 348.750 F8, -0.195
0B14F7 D5 FF FF    1121*  	dl 0xFFFFD5 ; 350.156 F9, -0.171
0B14FA DB FF FF    1122*  	dl 0xFFFFDB ; 351.563 FA, -0.147
0B14FD E1 FF FF    1123*  	dl 0xFFFFE1 ; 352.969 FB, -0.122
0B1500 E7 FF FF    1124*  	dl 0xFFFFE7 ; 354.375 FC, -0.098
0B1503 EE FF FF    1125*  	dl 0xFFFFEE ; 355.781 FD, -0.074
0B1506 F4 FF FF    1126*  	dl 0xFFFFF4 ; 357.188 FE, -0.049
0B1509 FA FF FF    1127*  	dl 0xFFFFFA ; 358.594 FF, -0.025
0B150C             1128*  
0B150C             1129*  atan_lut_168:
0B150C 00 00 00    1130*  	dl 0x000000 ; 000000, 0.000
0B150F 28 00 00    1131*  	dl 0x000028 ; 000001, 0.224
0B1512 51 00 00    1132*  	dl 0x000051 ; 000002, 0.448
0B1515 7A 00 00    1133*  	dl 0x00007A ; 000003, 0.671
0B1518 A2 00 00    1134*  	dl 0x0000A2 ; 000004, 0.895
0B151B CB 00 00    1135*  	dl 0x0000CB ; 000005, 1.119
0B151E F4 00 00    1136*  	dl 0x0000F4 ; 000006, 1.343
0B1521 1D 01 00    1137*  	dl 0x00011D ; 000007, 1.566
0B1524 45 01 00    1138*  	dl 0x000145 ; 000008, 1.790
0B1527 6E 01 00    1139*  	dl 0x00016E ; 000009, 2.013
0B152A 97 01 00    1140*  	dl 0x000197 ; 00000A, 2.237
0B152D BF 01 00    1141*  	dl 0x0001BF ; 00000B, 2.460
0B1530 E8 01 00    1142*  	dl 0x0001E8 ; 00000C, 2.684
0B1533 11 02 00    1143*  	dl 0x000211 ; 00000D, 2.907
0B1536 39 02 00    1144*  	dl 0x000239 ; 00000E, 3.130
0B1539 62 02 00    1145*  	dl 0x000262 ; 00000F, 3.353
0B153C 8B 02 00    1146*  	dl 0x00028B ; 000010, 3.576
0B153F B3 02 00    1147*  	dl 0x0002B3 ; 000011, 3.799
0B1542 DC 02 00    1148*  	dl 0x0002DC ; 000012, 4.022
0B1545 04 03 00    1149*  	dl 0x000304 ; 000013, 4.245
0B1548 2D 03 00    1150*  	dl 0x00032D ; 000014, 4.467
0B154B 55 03 00    1151*  	dl 0x000355 ; 000015, 4.690
0B154E 7E 03 00    1152*  	dl 0x00037E ; 000016, 4.912
0B1551 A6 03 00    1153*  	dl 0x0003A6 ; 000017, 5.134
0B1554 CE 03 00    1154*  	dl 0x0003CE ; 000018, 5.356
0B1557 F7 03 00    1155*  	dl 0x0003F7 ; 000019, 5.578
0B155A 1F 04 00    1156*  	dl 0x00041F ; 00001A, 5.799
0B155D 48 04 00    1157*  	dl 0x000448 ; 00001B, 6.021
0B1560 70 04 00    1158*  	dl 0x000470 ; 00001C, 6.242
0B1563 98 04 00    1159*  	dl 0x000498 ; 00001D, 6.463
0B1566 C0 04 00    1160*  	dl 0x0004C0 ; 00001E, 6.684
0B1569 E8 04 00    1161*  	dl 0x0004E8 ; 00001F, 6.905
0B156C 11 05 00    1162*  	dl 0x000511 ; 000020, 7.125
0B156F 39 05 00    1163*  	dl 0x000539 ; 000021, 7.345
0B1572 61 05 00    1164*  	dl 0x000561 ; 000022, 7.565
0B1575 89 05 00    1165*  	dl 0x000589 ; 000023, 7.785
0B1578 B1 05 00    1166*  	dl 0x0005B1 ; 000024, 8.005
0B157B D9 05 00    1167*  	dl 0x0005D9 ; 000025, 8.224
0B157E 01 06 00    1168*  	dl 0x000601 ; 000026, 8.443
0B1581 28 06 00    1169*  	dl 0x000628 ; 000027, 8.662
0B1584 50 06 00    1170*  	dl 0x000650 ; 000028, 8.881
0B1587 78 06 00    1171*  	dl 0x000678 ; 000029, 9.099
0B158A A0 06 00    1172*  	dl 0x0006A0 ; 00002A, 9.317
0B158D C7 06 00    1173*  	dl 0x0006C7 ; 00002B, 9.535
0B1590 EF 06 00    1174*  	dl 0x0006EF ; 00002C, 9.752
0B1593 16 07 00    1175*  	dl 0x000716 ; 00002D, 9.970
0B1596 3E 07 00    1176*  	dl 0x00073E ; 00002E, 10.187
0B1599 65 07 00    1177*  	dl 0x000765 ; 00002F, 10.403
0B159C 8D 07 00    1178*  	dl 0x00078D ; 000030, 10.620
0B159F B4 07 00    1179*  	dl 0x0007B4 ; 000031, 10.836
0B15A2 DB 07 00    1180*  	dl 0x0007DB ; 000032, 11.051
0B15A5 03 08 00    1181*  	dl 0x000803 ; 000033, 11.267
0B15A8 2A 08 00    1182*  	dl 0x00082A ; 000034, 11.482
0B15AB 51 08 00    1183*  	dl 0x000851 ; 000035, 11.697
0B15AE 78 08 00    1184*  	dl 0x000878 ; 000036, 11.911
0B15B1 9F 08 00    1185*  	dl 0x00089F ; 000037, 12.125
0B15B4 C6 08 00    1186*  	dl 0x0008C6 ; 000038, 12.339
0B15B7 ED 08 00    1187*  	dl 0x0008ED ; 000039, 12.553
0B15BA 13 09 00    1188*  	dl 0x000913 ; 00003A, 12.766
0B15BD 3A 09 00    1189*  	dl 0x00093A ; 00003B, 12.978
0B15C0 61 09 00    1190*  	dl 0x000961 ; 00003C, 13.191
0B15C3 87 09 00    1191*  	dl 0x000987 ; 00003D, 13.403
0B15C6 AE 09 00    1192*  	dl 0x0009AE ; 00003E, 13.614
0B15C9 D4 09 00    1193*  	dl 0x0009D4 ; 00003F, 13.825
0B15CC FB 09 00    1194*  	dl 0x0009FB ; 000040, 14.036
0B15CF 21 0A 00    1195*  	dl 0x000A21 ; 000041, 14.247
0B15D2 47 0A 00    1196*  	dl 0x000A47 ; 000042, 14.457
0B15D5 6D 0A 00    1197*  	dl 0x000A6D ; 000043, 14.666
0B15D8 94 0A 00    1198*  	dl 0x000A94 ; 000044, 14.876
0B15DB BA 0A 00    1199*  	dl 0x000ABA ; 000045, 15.085
0B15DE E0 0A 00    1200*  	dl 0x000AE0 ; 000046, 15.293
0B15E1 05 0B 00    1201*  	dl 0x000B05 ; 000047, 15.501
0B15E4 2B 0B 00    1202*  	dl 0x000B2B ; 000048, 15.709
0B15E7 51 0B 00    1203*  	dl 0x000B51 ; 000049, 15.916
0B15EA 77 0B 00    1204*  	dl 0x000B77 ; 00004A, 16.123
0B15ED 9C 0B 00    1205*  	dl 0x000B9C ; 00004B, 16.329
0B15F0 C2 0B 00    1206*  	dl 0x000BC2 ; 00004C, 16.535
0B15F3 E7 0B 00    1207*  	dl 0x000BE7 ; 00004D, 16.740
0B15F6 0C 0C 00    1208*  	dl 0x000C0C ; 00004E, 16.945
0B15F9 32 0C 00    1209*  	dl 0x000C32 ; 00004F, 17.150
0B15FC 57 0C 00    1210*  	dl 0x000C57 ; 000050, 17.354
0B15FF 7C 0C 00    1211*  	dl 0x000C7C ; 000051, 17.558
0B1602 A1 0C 00    1212*  	dl 0x000CA1 ; 000052, 17.761
0B1605 C6 0C 00    1213*  	dl 0x000CC6 ; 000053, 17.964
0B1608 EB 0C 00    1214*  	dl 0x000CEB ; 000054, 18.166
0B160B 0F 0D 00    1215*  	dl 0x000D0F ; 000055, 18.368
0B160E 34 0D 00    1216*  	dl 0x000D34 ; 000056, 18.569
0B1611 58 0D 00    1217*  	dl 0x000D58 ; 000057, 18.770
0B1614 7D 0D 00    1218*  	dl 0x000D7D ; 000058, 18.970
0B1617 A1 0D 00    1219*  	dl 0x000DA1 ; 000059, 19.170
0B161A C6 0D 00    1220*  	dl 0x000DC6 ; 00005A, 19.370
0B161D EA 0D 00    1221*  	dl 0x000DEA ; 00005B, 19.569
0B1620 0E 0E 00    1222*  	dl 0x000E0E ; 00005C, 19.767
0B1623 32 0E 00    1223*  	dl 0x000E32 ; 00005D, 19.965
0B1626 56 0E 00    1224*  	dl 0x000E56 ; 00005E, 20.163
0B1629 7A 0E 00    1225*  	dl 0x000E7A ; 00005F, 20.360
0B162C 9E 0E 00    1226*  	dl 0x000E9E ; 000060, 20.556
0B162F C1 0E 00    1227*  	dl 0x000EC1 ; 000061, 20.752
0B1632 E5 0E 00    1228*  	dl 0x000EE5 ; 000062, 20.947
0B1635 08 0F 00    1229*  	dl 0x000F08 ; 000063, 21.142
0B1638 2C 0F 00    1230*  	dl 0x000F2C ; 000064, 21.337
0B163B 4F 0F 00    1231*  	dl 0x000F4F ; 000065, 21.531
0B163E 72 0F 00    1232*  	dl 0x000F72 ; 000066, 21.724
0B1641 95 0F 00    1233*  	dl 0x000F95 ; 000067, 21.917
0B1644 B8 0F 00    1234*  	dl 0x000FB8 ; 000068, 22.109
0B1647 DB 0F 00    1235*  	dl 0x000FDB ; 000069, 22.301
0B164A FE 0F 00    1236*  	dl 0x000FFE ; 00006A, 22.493
0B164D 21 10 00    1237*  	dl 0x001021 ; 00006B, 22.683
0B1650 44 10 00    1238*  	dl 0x001044 ; 00006C, 22.874
0B1653 66 10 00    1239*  	dl 0x001066 ; 00006D, 23.063
0B1656 89 10 00    1240*  	dl 0x001089 ; 00006E, 23.253
0B1659 AB 10 00    1241*  	dl 0x0010AB ; 00006F, 23.441
0B165C CD 10 00    1242*  	dl 0x0010CD ; 000070, 23.629
0B165F EF 10 00    1243*  	dl 0x0010EF ; 000071, 23.817
0B1662 11 11 00    1244*  	dl 0x001111 ; 000072, 24.004
0B1665 33 11 00    1245*  	dl 0x001133 ; 000073, 24.191
0B1668 55 11 00    1246*  	dl 0x001155 ; 000074, 24.376
0B166B 77 11 00    1247*  	dl 0x001177 ; 000075, 24.562
0B166E 99 11 00    1248*  	dl 0x001199 ; 000076, 24.747
0B1671 BA 11 00    1249*  	dl 0x0011BA ; 000077, 24.931
0B1674 DC 11 00    1250*  	dl 0x0011DC ; 000078, 25.115
0B1677 FD 11 00    1251*  	dl 0x0011FD ; 000079, 25.298
0B167A 1E 12 00    1252*  	dl 0x00121E ; 00007A, 25.481
0B167D 3F 12 00    1253*  	dl 0x00123F ; 00007B, 25.663
0B1680 60 12 00    1254*  	dl 0x001260 ; 00007C, 25.844
0B1683 81 12 00    1255*  	dl 0x001281 ; 00007D, 26.025
0B1686 A2 12 00    1256*  	dl 0x0012A2 ; 00007E, 26.206
0B1689 C3 12 00    1257*  	dl 0x0012C3 ; 00007F, 26.386
0B168C E4 12 00    1258*  	dl 0x0012E4 ; 000080, 26.565
0B168F 04 13 00    1259*  	dl 0x001304 ; 000081, 26.744
0B1692 25 13 00    1260*  	dl 0x001325 ; 000082, 26.922
0B1695 45 13 00    1261*  	dl 0x001345 ; 000083, 27.100
0B1698 65 13 00    1262*  	dl 0x001365 ; 000084, 27.277
0B169B 85 13 00    1263*  	dl 0x001385 ; 000085, 27.453
0B169E A5 13 00    1264*  	dl 0x0013A5 ; 000086, 27.629
0B16A1 C5 13 00    1265*  	dl 0x0013C5 ; 000087, 27.805
0B16A4 E5 13 00    1266*  	dl 0x0013E5 ; 000088, 27.979
0B16A7 05 14 00    1267*  	dl 0x001405 ; 000089, 28.154
0B16AA 24 14 00    1268*  	dl 0x001424 ; 00008A, 28.327
0B16AD 44 14 00    1269*  	dl 0x001444 ; 00008B, 28.501
0B16B0 63 14 00    1270*  	dl 0x001463 ; 00008C, 28.673
0B16B3 83 14 00    1271*  	dl 0x001483 ; 00008D, 28.845
0B16B6 A2 14 00    1272*  	dl 0x0014A2 ; 00008E, 29.017
0B16B9 C1 14 00    1273*  	dl 0x0014C1 ; 00008F, 29.187
0B16BC E0 14 00    1274*  	dl 0x0014E0 ; 000090, 29.358
0B16BF FF 14 00    1275*  	dl 0x0014FF ; 000091, 29.527
0B16C2 1E 15 00    1276*  	dl 0x00151E ; 000092, 29.697
0B16C5 3C 15 00    1277*  	dl 0x00153C ; 000093, 29.865
0B16C8 5B 15 00    1278*  	dl 0x00155B ; 000094, 30.033
0B16CB 79 15 00    1279*  	dl 0x001579 ; 000095, 30.201
0B16CE 98 15 00    1280*  	dl 0x001598 ; 000096, 30.368
0B16D1 B6 15 00    1281*  	dl 0x0015B6 ; 000097, 30.534
0B16D4 D4 15 00    1282*  	dl 0x0015D4 ; 000098, 30.700
0B16D7 F2 15 00    1283*  	dl 0x0015F2 ; 000099, 30.865
0B16DA 10 16 00    1284*  	dl 0x001610 ; 00009A, 31.030
0B16DD 2E 16 00    1285*  	dl 0x00162E ; 00009B, 31.194
0B16E0 4C 16 00    1286*  	dl 0x00164C ; 00009C, 31.357
0B16E3 6A 16 00    1287*  	dl 0x00166A ; 00009D, 31.520
0B16E6 87 16 00    1288*  	dl 0x001687 ; 00009E, 31.682
0B16E9 A5 16 00    1289*  	dl 0x0016A5 ; 00009F, 31.844
0B16EC C2 16 00    1290*  	dl 0x0016C2 ; 0000A0, 32.005
0B16EF DF 16 00    1291*  	dl 0x0016DF ; 0000A1, 32.166
0B16F2 FC 16 00    1292*  	dl 0x0016FC ; 0000A2, 32.326
0B16F5 19 17 00    1293*  	dl 0x001719 ; 0000A3, 32.486
0B16F8 36 17 00    1294*  	dl 0x001736 ; 0000A4, 32.645
0B16FB 53 17 00    1295*  	dl 0x001753 ; 0000A5, 32.803
0B16FE 70 17 00    1296*  	dl 0x001770 ; 0000A6, 32.961
0B1701 8C 17 00    1297*  	dl 0x00178C ; 0000A7, 33.118
0B1704 A9 17 00    1298*  	dl 0x0017A9 ; 0000A8, 33.275
0B1707 C5 17 00    1299*  	dl 0x0017C5 ; 0000A9, 33.431
0B170A E2 17 00    1300*  	dl 0x0017E2 ; 0000AA, 33.587
0B170D FE 17 00    1301*  	dl 0x0017FE ; 0000AB, 33.742
0B1710 1A 18 00    1302*  	dl 0x00181A ; 0000AC, 33.896
0B1713 36 18 00    1303*  	dl 0x001836 ; 0000AD, 34.050
0B1716 52 18 00    1304*  	dl 0x001852 ; 0000AE, 34.203
0B1719 6E 18 00    1305*  	dl 0x00186E ; 0000AF, 34.356
0B171C 8A 18 00    1306*  	dl 0x00188A ; 0000B0, 34.509
0B171F A5 18 00    1307*  	dl 0x0018A5 ; 0000B1, 34.660
0B1722 C1 18 00    1308*  	dl 0x0018C1 ; 0000B2, 34.811
0B1725 DC 18 00    1309*  	dl 0x0018DC ; 0000B3, 34.962
0B1728 F7 18 00    1310*  	dl 0x0018F7 ; 0000B4, 35.112
0B172B 13 19 00    1311*  	dl 0x001913 ; 0000B5, 35.262
0B172E 2E 19 00    1312*  	dl 0x00192E ; 0000B6, 35.410
0B1731 49 19 00    1313*  	dl 0x001949 ; 0000B7, 35.559
0B1734 64 19 00    1314*  	dl 0x001964 ; 0000B8, 35.707
0B1737 7F 19 00    1315*  	dl 0x00197F ; 0000B9, 35.854
0B173A 99 19 00    1316*  	dl 0x001999 ; 0000BA, 36.001
0B173D B4 19 00    1317*  	dl 0x0019B4 ; 0000BB, 36.147
0B1740 CE 19 00    1318*  	dl 0x0019CE ; 0000BC, 36.293
0B1743 E9 19 00    1319*  	dl 0x0019E9 ; 0000BD, 36.438
0B1746 03 1A 00    1320*  	dl 0x001A03 ; 0000BE, 36.582
0B1749 1D 1A 00    1321*  	dl 0x001A1D ; 0000BF, 36.726
0B174C 37 1A 00    1322*  	dl 0x001A37 ; 0000C0, 36.870
0B174F 51 1A 00    1323*  	dl 0x001A51 ; 0000C1, 37.013
0B1752 6B 1A 00    1324*  	dl 0x001A6B ; 0000C2, 37.155
0B1755 85 1A 00    1325*  	dl 0x001A85 ; 0000C3, 37.297
0B1758 9F 1A 00    1326*  	dl 0x001A9F ; 0000C4, 37.439
0B175B B9 1A 00    1327*  	dl 0x001AB9 ; 0000C5, 37.579
0B175E D2 1A 00    1328*  	dl 0x001AD2 ; 0000C6, 37.720
0B1761 EC 1A 00    1329*  	dl 0x001AEC ; 0000C7, 37.859
0B1764 05 1B 00    1330*  	dl 0x001B05 ; 0000C8, 37.999
0B1767 1E 1B 00    1331*  	dl 0x001B1E ; 0000C9, 38.137
0B176A 37 1B 00    1332*  	dl 0x001B37 ; 0000CA, 38.276
0B176D 50 1B 00    1333*  	dl 0x001B50 ; 0000CB, 38.413
0B1770 69 1B 00    1334*  	dl 0x001B69 ; 0000CC, 38.550
0B1773 82 1B 00    1335*  	dl 0x001B82 ; 0000CD, 38.687
0B1776 9B 1B 00    1336*  	dl 0x001B9B ; 0000CE, 38.823
0B1779 B4 1B 00    1337*  	dl 0x001BB4 ; 0000CF, 38.959
0B177C CC 1B 00    1338*  	dl 0x001BCC ; 0000D0, 39.094
0B177F E5 1B 00    1339*  	dl 0x001BE5 ; 0000D1, 39.228
0B1782 FD 1B 00    1340*  	dl 0x001BFD ; 0000D2, 39.362
0B1785 16 1C 00    1341*  	dl 0x001C16 ; 0000D3, 39.496
0B1788 2E 1C 00    1342*  	dl 0x001C2E ; 0000D4, 39.629
0B178B 46 1C 00    1343*  	dl 0x001C46 ; 0000D5, 39.762
0B178E 5E 1C 00    1344*  	dl 0x001C5E ; 0000D6, 39.894
0B1791 76 1C 00    1345*  	dl 0x001C76 ; 0000D7, 40.025
0B1794 8E 1C 00    1346*  	dl 0x001C8E ; 0000D8, 40.156
0B1797 A5 1C 00    1347*  	dl 0x001CA5 ; 0000D9, 40.286
0B179A BD 1C 00    1348*  	dl 0x001CBD ; 0000DA, 40.416
0B179D D5 1C 00    1349*  	dl 0x001CD5 ; 0000DB, 40.546
0B17A0 EC 1C 00    1350*  	dl 0x001CEC ; 0000DC, 40.675
0B17A3 04 1D 00    1351*  	dl 0x001D04 ; 0000DD, 40.803
0B17A6 1B 1D 00    1352*  	dl 0x001D1B ; 0000DE, 40.931
0B17A9 32 1D 00    1353*  	dl 0x001D32 ; 0000DF, 41.059
0B17AC 49 1D 00    1354*  	dl 0x001D49 ; 0000E0, 41.186
0B17AF 60 1D 00    1355*  	dl 0x001D60 ; 0000E1, 41.312
0B17B2 77 1D 00    1356*  	dl 0x001D77 ; 0000E2, 41.438
0B17B5 8E 1D 00    1357*  	dl 0x001D8E ; 0000E3, 41.564
0B17B8 A5 1D 00    1358*  	dl 0x001DA5 ; 0000E4, 41.689
0B17BB BB 1D 00    1359*  	dl 0x001DBB ; 0000E5, 41.814
0B17BE D2 1D 00    1360*  	dl 0x001DD2 ; 0000E6, 41.938
0B17C1 E9 1D 00    1361*  	dl 0x001DE9 ; 0000E7, 42.061
0B17C4 FF 1D 00    1362*  	dl 0x001DFF ; 0000E8, 42.184
0B17C7 15 1E 00    1363*  	dl 0x001E15 ; 0000E9, 42.307
0B17CA 2C 1E 00    1364*  	dl 0x001E2C ; 0000EA, 42.429
0B17CD 42 1E 00    1365*  	dl 0x001E42 ; 0000EB, 42.551
0B17D0 58 1E 00    1366*  	dl 0x001E58 ; 0000EC, 42.672
0B17D3 6E 1E 00    1367*  	dl 0x001E6E ; 0000ED, 42.793
0B17D6 84 1E 00    1368*  	dl 0x001E84 ; 0000EE, 42.913
0B17D9 99 1E 00    1369*  	dl 0x001E99 ; 0000EF, 43.033
0B17DC AF 1E 00    1370*  	dl 0x001EAF ; 0000F0, 43.152
0B17DF C5 1E 00    1371*  	dl 0x001EC5 ; 0000F1, 43.271
0B17E2 DA 1E 00    1372*  	dl 0x001EDA ; 0000F2, 43.390
0B17E5 F0 1E 00    1373*  	dl 0x001EF0 ; 0000F3, 43.508
0B17E8 05 1F 00    1374*  	dl 0x001F05 ; 0000F4, 43.625
0B17EB 1B 1F 00    1375*  	dl 0x001F1B ; 0000F5, 43.742
0B17EE 30 1F 00    1376*  	dl 0x001F30 ; 0000F6, 43.859
0B17F1 45 1F 00    1377*  	dl 0x001F45 ; 0000F7, 43.975
0B17F4 5A 1F 00    1378*  	dl 0x001F5A ; 0000F8, 44.091
0B17F7 6F 1F 00    1379*  	dl 0x001F6F ; 0000F9, 44.206
0B17FA 84 1F 00    1380*  	dl 0x001F84 ; 0000FA, 44.321
0B17FD 99 1F 00    1381*  	dl 0x001F99 ; 0000FB, 44.435
0B1800 AD 1F 00    1382*  	dl 0x001FAD ; 0000FC, 44.549
0B1803 C2 1F 00    1383*  	dl 0x001FC2 ; 0000FD, 44.662
0B1806 D7 1F 00    1384*  	dl 0x001FD7 ; 0000FE, 44.775
0B1809 EB 1F 00    1385*  	dl 0x001FEB ; 0000FF, 44.888
0B180C 00 20 00    1386*  	dl 0x002000 ; 000100, 45.000 only needed for interpolation
0B180F             1387*  
0B180F             1388*  
0B180F             1389*  	; ======= div_168_signed.inc stuff =======
0B180F             1390*  
0B180F             1391*  	; 24-bit integer and 16.8 fixed point division routines
0B180F             1392*  ; by Brandon R. Gates (BeeGee747)
0B180F             1393*  ; have undergone cursory testing and seem to be generating
0B180F             1394*  ; correct results (assuming no overflows) but seem very inefficient,
0B180F             1395*  ; so they have been published for review and improvement
0B180F             1396*  ; see: https://discord.com/channels/1158535358624039014/1158536711148675072/1212136741608099910
0B180F             1397*  ;
0B180F             1398*  ; ---------------------------------------------------------
0B180F             1399*  ; BEGIN DIVISION ROUTINES
0B180F             1400*  ; ---------------------------------------------------------
0B180F             1401*  ;
0B180F             1402*  ; perform signed division of 16.8 fixed place values
0B180F             1403*  ; with an signed 16.8 fixed place result
0B180F             1404*  ; inputs: ub.c is dividend,ud.e is divisor
0B180F             1405*  ; outputs: uh.l is quotient
0B180F             1406*  ; destroys: a,bc
0B180F             1407*  ; note: uses carry flag to test for sign of operands and result
0B180F             1408*  ;       which can be confusing and should perhaps be changed
0B180F             1409*  ; note2: helper functions abs_hlu and neg_hlu have been modified
0B180F             1410*  ;       to return accurate flags according to the origional signs
0B180F             1411*  ;       (or zero) of this function's inputs
0B180F             1412*  sdiv168:
0B180F             1413*  ; make everything positive and save signs
0B180F C5          1414*      push bc         ; get bc to hl
0B1810 E1          1415*      pop hl          ; for the next call
0B1811 CD B6 18 0B 1416*      call abs_hlu    ; sets sign flag if hlu was negative, zero if zero
0B1815 CA 48 18 0B 1417*      jp z,@is_zero   ; if bc is zero, answer is zero and we're done
0B1819 F5          1418*      push af         ; save sign of bc
0B181A E5          1419*      push hl         ; now put abs(hl)
0B181B C1          1420*      pop bc          ; back into bc = abs(bc)
0B181C EB          1421*      ex de,hl        ; now we do de same way
0B181D CD B6 18 0B 1422*      call abs_hlu
0B1821 CA 4A 18 0B 1423*      jp z,@div_by_zero  ; if de was zero, answer is undefined and we're done
0B1825 EB          1424*      ex de,hl        ; hl back to de = abs(de)
0B1826             1425*  ; determine sign of result
0B1826 F2 31 18 0B 1426*      jp p,@de_pos    ; sign positive,de is positive
0B182A F1          1427*      pop af          ; get back sign of bc
0B182B FA 3A 18 0B 1428*      jp m,@result_pos  ; bc and de negative, result is positive
0B182F 18 05       1429*      jr @result_neg
0B1831             1430*  @de_pos:
0B1831 F1          1431*      pop af          ; get back sign of bc
0B1832 F2 3A 18 0B 1432*      jp p,@result_pos   ; bc and de are both positive so result is positive
0B1836             1433*                      ; fall through to result_neg
0B1836             1434*  @result_neg:
0B1836 AF          1435*      xor a           ; zero a and clear carry
0B1837 3D          1436*      dec a           ; set sign flag to negative
0B1838 18 02       1437*      jr @do_div
0B183A             1438*  @result_pos:
0B183A AF          1439*      xor a           ; zero a and clear carry
0B183B 3C          1440*      inc a           ; set sign flag to negative
0B183C             1441*                      ; fall through to do_div
0B183C             1442*  @do_div:
0B183C F5          1443*      push af         ; save sign of result
0B183D CD 4D 18 0B 1444*      call udiv168
0B1841 F1          1445*      pop af          ; get back sign of result
0B1842 F0          1446*      ret p           ; result is positive so nothing to do
0B1843 CD C6 18 0B 1447*      call neg_hlu    ; result is negative so negate it
0B1847 C9          1448*      ret
0B1848             1449*  @is_zero:           ; result is zero
0B1848 AF          1450*      xor a           ; sets zero flag, which we want,
0B1849             1451*                      ; sets pv flag which we might not (zero is parity even)
0B1849             1452*                      ; resets all others which is okay
0B1849 C9          1453*      ret
0B184A             1454*  @div_by_zero:       ; result is undefined, which isn't defined in binary
0B184A             1455*                      ; so we'll just return zero until i can think of something better
0B184A F1          1456*      pop af          ; dummy pop
0B184B AF          1457*      xor a           ; sets zero flag, which is ok,
0B184C             1458*                      ; sets pv flag which could be interpreted as overflow, which is good
0B184C             1459*                      ; resets all others which is okay
0B184C C9          1460*      ret
0B184D             1461*  
0B184D             1462*  ; ; perform unsigned division of 16.8 fixed place values
0B184D             1463*  ; ; with an unsigned 16.8 fixed place result
0B184D             1464*  ; ; inputs: ub.c is dividend,ud.e is divisor
0B184D             1465*  ; ; outputs: uh.l is quotient
0B184D             1466*  ; ; destroys: a,bc
0B184D             1467*  ; udiv168:
0B184D             1468*  ; ; get the 16-bit integer part of the quotient
0B184D             1469*  ;     ; call div_24
0B184D             1470*  ;     call udiv24
0B184D             1471*  ;     ; call dumpRegistersHex
0B184D             1472*  ; ; load quotient to upper three bytes of output
0B184D             1473*  ;     ld (div168_out+1),bc
0B184D             1474*  ; ; TODO: THIS MAY BE BUGGED
0B184D             1475*  ; ; check remainder for zero, and if it is
0B184D             1476*  ; ; we can skip calculating the fractional part
0B184D             1477*  ;     add hl,de
0B184D             1478*  ;     or a
0B184D             1479*  ;     sbc hl,de
0B184D             1480*  ;     jr nz,@div256
0B184D             1481*  ;     xor a
0B184D             1482*  ;     jr @write_frac
0B184D             1483*  ; ; END TODO
0B184D             1484*  ; @div256:
0B184D             1485*  ; ; divide divisor by 256
0B184D             1486*  ;     push hl ; save remainder
0B184D             1487*  ; ; TODO: it feels like this could be more efficient
0B184D             1488*  ;     ld (arith24ude),de
0B184D             1489*  ;     ld a,d
0B184D             1490*  ;     ld (arith24ude),a
0B184D             1491*  ;     ld a,(ude+2)
0B184D             1492*  ;     ld (ude+1),a
0B184D             1493*  ;     xor a
0B184D             1494*  ;     ld (ude+2),a
0B184D             1495*  ;     ld hl,(arith24ude) ; (just for now, we want it in de eventually)
0B184D             1496*  ; ; TODO: THIS MAY BE BUGGED
0B184D             1497*  ; ; now we check the shifted divisor for zero, and if it is
0B184D             1498*  ; ; we again set the fractional part to zero
0B184D             1499*  ;     add hl,de
0B184D             1500*  ;     or a
0B184D             1501*  ;     sbc hl,de
0B184D             1502*  ;     ex de,hl ; now de is where it's supposed to be
0B184D             1503*  ;     pop hl ; get remainder back
0B184D             1504*  ; ; TODO: THIS MAY BE BUGGED
0B184D             1505*  ;     jr nz,@div_frac
0B184D             1506*  ;     xor a
0B184D             1507*  ;     jr @write_frac
0B184D             1508*  ; ; END TODO
0B184D             1509*  ; ; now divide the remainder by the shifted divisor
0B184D             1510*  ; @div_frac:
0B184D             1511*  ;     push hl ; my kingdom for ld bc,hl
0B184D             1512*  ;     pop bc  ; or even ex bc,hl
0B184D             1513*  ;     ; call div_24
0B184D             1514*  ;     call udiv24
0B184D             1515*  ; ; load low byte of quotient to low byte of output
0B184D             1516*  ;     ld a,c
0B184D             1517*  ; @write_frac:
0B184D             1518*  ;     ld (div168_out),a
0B184D             1519*  ; ; load hl with return value
0B184D             1520*  ;     ld hl,(div168_out)
0B184D             1521*  ; ; load a with any overflow
0B184D             1522*  ;     ld a,(div168_out+3)
0B184D             1523*  ;     ret ; uh.l is the 16.8 result
0B184D             1524*  ; div168_out: ds 4 ; the extra byte is for overflow
0B184D             1525*  
0B184D             1526*  ; perform unsigned division of fixed place values
0B184D             1527*  ; with an unsigned 16.8 fixed place result
0B184D             1528*  ; inputs: b.c is 8.8 dividend, ud.e is 16.8 divisor
0B184D             1529*  ; outputs: uh.l is the 16.8 quotient ub.c is the 16.8 remainder
0B184D             1530*  ; destroys: a,bc
0B184D             1531*  udiv168:
0B184D             1532*  ; shift dividend left 8 bits
0B184D ED 43 4C 0E 1533*      ld (arith24ubc+1),bc
       0B          
0B1852 AF          1534*      xor a
0B1853 32 4B 0E 0B 1535*      ld (arith24ubc),a
0B1857 ED 4B 4B 0E 1536*      ld bc,(arith24ubc)
       0B          
0B185C CD 9B 0E 0B 1537*      call udiv24
0B1860             1538*  ; flip-flop outptuts to satisfy downstream consumers
0B1860             1539*  ; TODO: this is a hack and should be fixed
0B1860             1540*  ; (so says copilot ... but it's not wrong)
0B1860 E5          1541*      push hl
0B1861 C5          1542*      push bc
0B1862 E1          1543*      pop hl
0B1863 C1          1544*      pop bc
0B1864 C9          1545*      ret
0B1865             1546*  
0B1865             1547*  ; this is an adaptation of Div16 extended to 24 bits
0B1865             1548*  ; from https://map.grauw.nl/articles/mult_div_shifts.php
0B1865             1549*  ; it works by shifting each byte of the dividend left into carry 8 times
0B1865             1550*  ; and adding the dividend into hl if the carry is set
0B1865             1551*  ; thus hl accumulates a remainder depending on the result of each iteration
0B1865             1552*  ; ---------------------------------------------------------
0B1865             1553*  ; Divide 24-bit unsigned values
0B1865             1554*  ;   with 24-bit unsigned result
0B1865             1555*  ;   and 24-bit remainder
0B1865             1556*  ; In: Divide ubc by ude
0B1865             1557*  ; Out: ubc = result, uhl = remainder
0B1865             1558*  ; Destroys: a,hl,bc
0B1865             1559*  div_24:
0B1865 21 00 00 00 1560*      ld hl,0     ; Clear accumulator for remainder
0B1869             1561*  ; put dividend in scratch so we can get at all its bytes
0B1869 ED 43 4B 0E 1562*      ld (arith24ubc),bc ; scratch ubc also accumulates the quotient
       0B          
0B186E 3A 4D 0E 0B 1563*      ld a,(arith24ubc+2); grab the upper byte of the dividend
0B1872 06 08       1564*      ld b,8      ; loop counter for 8 bits in a byte
0B1874             1565*  @loop0:
0B1874 17          1566*      rla         ; shift the next bit of dividend into the carry flag
0B1875 ED 6A       1567*      adc hl,hl   ; shift the remainder left one bit and add carry if any
0B1877 ED 52       1568*      sbc hl,de   ; subtract divisor from remainder
0B1879 30 01       1569*      jr nc,@noadd0   ; if no carry,remainder is <= divisor
0B187B             1570*                  ; meaning remainder is divisible by divisor
0B187B 19          1571*      add hl,de   ; otherwise add divisor back to remainder
0B187C             1572*                  ; reversing the previous subtraction
0B187C             1573*  @noadd0:
0B187C 10 F6       1574*      djnz @loop0 ; repeat for all 8 bits
0B187E 17          1575*      rla         ; now we shift a left one more time
0B187F 2F          1576*      cpl         ; then flip its bits for some reason
0B1880 32 4D 0E 0B 1577*      ld (arith24ubc+2),a; magically this is the upper byte of the quotient
0B1884 3A 4C 0E 0B 1578*      ld a,(arith24ubc+1); now we pick up the middle byte of the dividend
0B1888 06 08       1579*      ld b,8      ; set up the next loop and do it all again ...
0B188A             1580*  @loop1:
0B188A 17          1581*      rla
0B188B ED 6A       1582*      adc hl,hl
0B188D ED 52       1583*      sbc hl,de
0B188F 30 01       1584*      jr nc,@noadd1
0B1891 19          1585*      add hl,de
0B1892             1586*  @noadd1:
0B1892 10 F6       1587*      djnz @loop1
0B1894 17          1588*      rla
0B1895 2F          1589*      cpl
0B1896 32 4C 0E 0B 1590*      ld (arith24ubc+1),a ; writing the middle byte of quotient
0B189A 3A 4B 0E 0B 1591*      ld a,(arith24ubc)
0B189E 06 08       1592*      ld b,8
0B18A0             1593*  @loop2:          ; compute low byte of quotient
0B18A0 17          1594*      rla
0B18A1 ED 6A       1595*      adc hl,hl
0B18A3 ED 52       1596*      sbc hl,de
0B18A5 30 01       1597*      jr nc,@noadd2
0B18A7 19          1598*      add hl,de
0B18A8             1599*  @noadd2:
0B18A8 10 F6       1600*      djnz @loop2
0B18AA 17          1601*      rla
0B18AB 2F          1602*      cpl
0B18AC 32 4B 0E 0B 1603*      ld (arith24ubc),a  ; ... write low byte of quotient
0B18B0 ED 4B 4B 0E 1604*      ld bc,(arith24ubc) ; load quotient into bc for return
       0B          
0B18B5 C9          1605*      ret         ; hl already contains remainder so we're done
0B18B6             1606*  
0B18B6             1607*  ; ---------------------------------------------------------
0B18B6             1608*  ; BEGIN HELPER ROUTINES
0B18B6             1609*  ; ---------------------------------------------------------
0B18B6             1610*  ;
0B18B6             1611*  ; absolute value of hlu
0B18B6             1612*  ; returns: abs(hlu), flags set according to the incoming sign of hlu:
0B18B6             1613*  ;         s1,z0,pv0,n1,c0 if hlu was negative
0B18B6             1614*  ;         s0,z1,pv0,n1,c0 if hlu was zero
0B18B6             1615*  ;         s0,z0,pv0,n1,c0 if hlu was positive
0B18B6             1616*  ; destroys: a
0B18B6             1617*  abs_hlu:
0B18B6 19          1618*      add hl,de
0B18B7 B7          1619*      or a
0B18B8 ED 52       1620*      sbc hl,de
0B18BA FA BF 18 0B 1621*      jp m,@is_neg
0B18BE C9          1622*      ret         ; hlu is positive or zero so we're done
0B18BF             1623*  @is_neg:
0B18BF F5          1624*      push af     ; otherwise, save current flags for return
0B18C0 CD C6 18 0B 1625*      call neg_hlu ; negate hlu
0B18C4 F1          1626*      pop af      ; get back flags
0B18C5 C9          1627*      ret
0B18C6             1628*  
0B18C6             1629*  ; flip the sign of hlu
0B18C6             1630*  ; inputs: hlu
0B18C6             1631*  ; returns: 0-hlu, flags set appropriately for the result:
0B18C6             1632*  ;         s1,z0,pv0,n1,c1 if result is negative
0B18C6             1633*  ;         s0,z1,pv0,n1,c0 if result is zero
0B18C6             1634*  ;         s0,z0,pv0,n1,c1 if result is positive
0B18C6             1635*  ; destroys a
0B18C6             1636*  neg_hlu:
0B18C6 D5          1637*      push de     ; save de
0B18C7 EB          1638*      ex de,hl    ; put hl into de
0B18C8 21 00 00 00 1639*      ld hl,0     ; clear hl
0B18CC AF          1640*      xor a       ; clear carry
0B18CD ED 52       1641*      sbc hl,de   ; 0-hlu = -hlu
0B18CF D1          1642*      pop de      ; get de back
0B18D0 C9          1643*      ret         ; easy peasy
0B18D1             1644*  
0B18D1             1645*  ;------------------------------------------------------------------------
0B18D1             1646*  ; divide hlu by 2, inspired by above
0B18D1             1647*  ;------------------------------------------------------------------------
0B18D1             1648*  hlu_div2:
0B18D1 22 55 0F 0B 1649*  	ld		(bitbuf1),hl
0B18D5 21 57 0F 0B 1650*  	ld		hl,bitbuf1+2
0B18D9 CB 1E       1651*  	rr		(hl)
0B18DB 2B          1652*  	dec		hl
0B18DC CB 1E       1653*  	rr		(hl)
0B18DE 2B          1654*  	dec		hl
0B18DF CB 1E       1655*  	rr		(hl)
0B18E1 23          1656*  	inc		hl
0B18E2 23          1657*  	inc		hl
0B18E3 2A 55 0F 0B 1658*      ld hl,(bitbuf1)
0B18E7 C9          1659*      ret
0B18E8             1660*  
0B18E8             1661*  ; this is my little hack to divide by 16
0B18E8             1662*  hlu_div16:
0B18E8 AF          1663*      xor a
0B18E9 29          1664*      add hl,hl
0B18EA 17          1665*      rla
0B18EB 29          1666*      add hl,hl
0B18EC 17          1667*      rla
0B18ED 29          1668*      add hl,hl
0B18EE 17          1669*      rla
0B18EF 29          1670*      add hl,hl
0B18F0 17          1671*      rla
0B18F1 22 FE 18 0B 1672*      ld (@scratch),hl
0B18F5 32 01 19 0B 1673*      ld (@scratch+3),a
0B18F9 2A FF 18 0B 1674*      ld hl,(@scratch+1)
0B18FD C9          1675*      ret
0B18FE             1676*  @scratch: ds 4
0B1902             1677*  
0B1902             1678*  ; -----------------------------------------------------------------------
0B1902             1679*  ; EEMES TUTORIALS
0B1902             1680*  ; -----------------------------------------------------------------------
0B1902             1681*  ; https://tutorials.eeems.ca/Z80ASM/part4.htm
0B1902             1682*  ; DEHL=BC*DE
0B1902             1683*  Mul16:
0B1902 21 00 00 00 1684*      ld hl,0
0B1906 3E 10       1685*      ld a,16
0B1908             1686*  Mul16Loop:
0B1908 29          1687*      add hl,hl
0B1909 CB 13       1688*      rl e
0B190B CB 12       1689*      rl d
0B190D D2 17 19 0B 1690*      jp nc,NoMul16
0B1911 09          1691*      add hl,bc
0B1912 D2 17 19 0B 1692*      jp nc,NoMul16
0B1916 13          1693*      inc de
0B1917             1694*  NoMul16:
0B1917 3D          1695*      dec a
0B1918 C2 08 19 0B 1696*      jp nz,Mul16Loop
0B191C C9          1697*      ret
0B191D             1698*  
0B191D             1699*  ; DEUHLU=BCU*DEU
0B191D             1700*  umul2448:
0B191D 21 00 00 00 1701*      ld hl,0
0B1921 3E 18       1702*      ld a,24
0B1923             1703*  umul2448Loop:
0B1923 29          1704*      add hl,hl
0B1924 EB          1705*      ex de,hl
0B1925 ED 6A       1706*      adc hl,hl
0B1927 EB          1707*      ex de,hl
0B1928 D2 32 19 0B 1708*      jp nc,Noumul2448
0B192C 09          1709*      add hl,bc
0B192D D2 32 19 0B 1710*      jp nc,Noumul2448
0B1931 13          1711*      inc de
0B1932             1712*  Noumul2448:
0B1932 3D          1713*      dec a
0B1933 C2 23 19 0B 1714*      jp nz,umul2448Loop
0B1937 C9          1715*      ret
0B1938             1716*  
0B1938             1717*  ; UH.L=UB.C*UD.E
0B1938             1718*  umul168:
0B1938 CD 1D 19 0B 1719*      call umul2448
0B193C             1720*  ; UDEU.HL is the 32.16 fixed result
0B193C             1721*  ; we want UH.L to be the 16.8 fixed result
0B193C             1722*  ; so we divide by 256 by shiftng down a byte
0B193C             1723*  ; easiest way is to write deu and hlu to scratch
0B193C ED 53 51 19 1724*      ld (umul168out+3),de
       0B          
0B1941 22 4E 19 0B 1725*      ld (umul168out),hl
0B1945             1726*  ; then load hlu from scratch shfited forward a byte
0B1945 2A 4F 19 0B 1727*      ld hl,(umul168out+1)
0B1949 3A 53 19 0B 1728*      ld a,(umul168out+5) ; send a back with any overflow
0B194D C9          1729*      ret
0B194E             1730*  umul168out: ds 6
0B1954             1731*  
0B1954             1732*  ; perform signed multiplication of 16.8 fixed place values
0B1954             1733*  ; with an signed 16.8 fixed place result
0B1954             1734*  ; inputs: ub.c and ud.e are the operands
0B1954             1735*  ; outputs: uh.l is the product
0B1954             1736*  ; destroys: a,bc
0B1954             1737*  ; TODO: make flags appropriate to the sign of the result
0B1954             1738*  smul168:
0B1954             1739*  ; make everything positive and save signs
0B1954 C5          1740*      push bc         ; get bc to hl
0B1955 E1          1741*      pop hl          ; for the next call
0B1956 CD B6 18 0B 1742*      call abs_hlu    ; sets sign flag if ubc was negative, zero if zero
0B195A             1743*  
0B195A             1744*      ; call dumpFlags ; passes
0B195A             1745*  
0B195A CA 8D 19 0B 1746*      jp z,@is_zero   ; if bc is zero, answer is zero and we're done
0B195E F5          1747*      push af         ; save sign of bc
0B195F E5          1748*      push hl         ; now put abs(hl)
0B1960 C1          1749*      pop bc          ; back into bc = abs(bc)
0B1961 EB          1750*      ex de,hl        ; now we do de same way
0B1962 CD B6 18 0B 1751*      call abs_hlu    ; sets sign flag if ude was negative, zero if zero
0B1966             1752*  
0B1966             1753*      ; call dumpFlags ; passes
0B1966             1754*  
0B1966 CA 8D 19 0B 1755*      jp z,@is_zero  ; if de was zero, answer is zero and we're done
0B196A EB          1756*      ex de,hl        ; hl back to de = abs(de)
0B196B             1757*  ; determine sign of result
0B196B F2 76 19 0B 1758*      jp p,@de_pos    ; sign positive,de is positive
0B196F             1759*  
0B196F             1760*      ; call dumpFlags ; correctly doesnt make it here
0B196F             1761*  
0B196F F1          1762*      pop af          ; get back sign of bc
0B1970             1763*  
0B1970             1764*      ; call dumpFlags ; correctly doesn't make it here
0B1970             1765*  
0B1970 FA 7F 19 0B 1766*      jp m,@result_pos  ; bc and de negative, result is positive
0B1974             1767*  
0B1974             1768*      ; call dumpFlags  ; corectly doesn't make it here
0B1974             1769*  
0B1974 18 05       1770*      jr @result_neg
0B1976             1771*  @de_pos:
0B1976 F1          1772*      pop af          ; get back sign of bc
0B1977             1773*  
0B1977             1774*      ; call dumpFlags  ; passes
0B1977             1775*  
0B1977 F2 7F 19 0B 1776*      jp p,@result_pos   ; bc and de are both positive so result is positive
0B197B             1777*  
0B197B             1778*      ; call dumpFlags ; correctly makes it here
0B197B             1779*  
0B197B             1780*                      ; fall through to result_neg
0B197B             1781*  @result_neg:
0B197B AF          1782*      xor a           ; zero a and clear carry
0B197C 3D          1783*      dec a           ; set sign flag to negative
0B197D             1784*  
0B197D             1785*      ; call dumpFlags ; passes
0B197D             1786*  
0B197D 18 02       1787*      jr @do_mul
0B197F             1788*  @result_pos:
0B197F AF          1789*      xor a           ; zero a and clear carry
0B1980 3C          1790*      inc a           ; set sign flag to positive
0B1981             1791*                      ; fall through to do_mul
0B1981             1792*  
0B1981             1793*      ; call dumpFlags ; correctly doesn't make it here
0B1981             1794*  
0B1981             1795*  @do_mul:
0B1981 F5          1796*      push af         ; save sign of result
0B1982 CD 38 19 0B 1797*      call umul168
0B1986 F1          1798*      pop af          ; get back sign of result
0B1987             1799*  
0B1987             1800*      ; call dumpFlags ; passes
0B1987             1801*  
0B1987 F0          1802*      ret p           ; result is positive so nothing to do
0B1988             1803*  
0B1988             1804*      ; call dumpRegistersHex ; passes
0B1988             1805*  
0B1988 CD C6 18 0B 1806*      call neg_hlu    ; result is negative so negate it
0B198C             1807*  
0B198C             1808*      ; call dumpRegistersHex ; passes
0B198C C9          1809*      ret
0B198D             1810*  @is_zero:           ; result is zero
0B198D AF          1811*      xor a           ; sets zero flag, which we want,
0B198E             1812*                      ; sets pv flag which we might not (zero is parity even)
0B198E             1813*                      ; resets all others which is okay
0B198E C9          1814*      ret
0B198F             0029   
0B198F             0030   ; APPLICATION INCLUDES
0B198F 55 73 61 67 0031   str_usage: ASCIZ "Usage: scratch <args>\r\n"
       65 3A 20 73 
       63 72 61 74 
       63 68 20 3C 
       61 72 67 73 
       3E 0D 0A 00 
0B19A7 45 72 72 6F 0032   str_error: ASCIZ "Error!\r\n"
       72 21 0D 0A 
       00          
0B19B0 53 75 63 63 0033   str_success: ASCIZ "Success!\r\n"
       65 73 73 21 
       0D 0A 00    
0B19BB             0034   
0B19BB             0035   ; This is a scratch moslet for testing new features
0B19BB             0036   ; Parameters:
0B19BB             0037   ;
0B19BB             0038   
0B19BB             0039   ; ========= BOILERPLATE MAIN LOOP =========
0B19BB             0040   ; The main routine
0B19BB             0041   ; IXU: argv - pointer to array of parameters
0B19BB             0042   ;   C: argc - number of parameters
0B19BB             0043   ; Returns:
0B19BB             0044   ;  HL: Error code, or 0 if OK
0B19BB             0045   
0B19BB             0046   min_args: equ 2
0B19BB             0047   
0B19BB             0048   _main:
0B19BB 79          0049       ld a,c              ; how many arguments?
0B19BC FE 02       0050       cp min_args         ; not enough?
0B19BE 30 1A       0051       jr nc,main          ; if enough, go to main loop
0B19C0 21 8F 19 0B 0052       ld hl,str_usage     ; if not enough, print usage
0B19C4 CD 67 02 0B 0053       call printString
0B19C8             0054                           ; fall through to _main_end_error
0B19C8             0055   
0B19C8             0056   _main_end_error:
0B19C8 21 A7 19 0B 0057       ld hl,str_error     ; print error message
0B19CC CD 67 02 0B 0058       call printString
0B19D0 21 13 00 00 0059       ld hl,19            ; return error code 19
0B19D4 C9          0060       ret
0B19D5             0061   
0B19D5             0062   _main_end_ok:
0B19D5             0063       ; ld hl,str_success   ; print success message
0B19D5             0064       ; call printString
0B19D5 21 00 00 00 0065       ld hl,0             ; return 0 for success
0B19D9 C9          0066       ret
0B19DA             0067   
0B19DA             0068   ; ========= BEGIN CUSTOM MAIN LOOP =========
0B19DA             0069   main:
0B19DA 0D          0070       dec c               ; decrement the argument count to skip the program name
0B19DB             0071   
0B19DB             0072   test_udiv24:
0B19DB             0073   ; get dividend
0B19DB CD 61 1A 0B 0074       call get_arg_s24
0B19DF D5          0075       push de
0B19E0             0076   ; get divisor
0B19E0 CD 61 1A 0B 0077       call get_arg_s24
0B19E4 E1          0078       pop hl ; dividend (was de)
0B19E5 CD 15 05 0B 0079       call dumpRegistersHex
0B19E9             0080   ; do the division
0B19E9 CD 9B 0E 0B 0081       call udiv24 ; ude = uhl / ude rem uhl
0B19ED CD 15 05 0B 0082       call dumpRegistersHex
0B19F1 CD 68 03 0B 0083       call print_u24
0B19F5 CD 7C 02 0B 0084       call printNewLine
0B19F9 C3 D5 19 0B 0085       jp _main_end_ok
0B19FD             0086   
0B19FD             0087   test_div_24:
0B19FD             0088   ; get dividend
0B19FD CD 61 1A 0B 0089       call get_arg_s24
0B1A01 D5          0090       push de
0B1A02             0091   ; get divisor
0B1A02 CD 61 1A 0B 0092       call get_arg_s24
0B1A06 C1          0093       pop bc ; dividend to bc (was de)
0B1A07 CD 15 05 0B 0094       call dumpRegistersHex
0B1A0B             0095   ; do the division
0B1A0B CD 65 18 0B 0096       call div_24 ; uh.l = ub.c / ud.e
0B1A0F CD 15 05 0B 0097       call dumpRegistersHex
0B1A13 CD 68 03 0B 0098       call print_u24
0B1A17 CD 7C 02 0B 0099       call printNewLine
0B1A1B C3 D5 19 0B 0100       jp _main_end_ok
0B1A1F             0101   
0B1A1F             0102   ; inputs: b.c is 8.8 dividend, ud.e is 16.8 divisor
0B1A1F             0103   ; outputs: uh.l is the 16.8 quotient ub.c is the 16.8 remainder
0B1A1F             0104   ; destroys: a,bc
0B1A1F             0105   test_sdiv168:
0B1A1F             0106   ; get dividend
0B1A1F CD 56 1A 0B 0107       call get_arg_s168
0B1A23 D5          0108       push de
0B1A24             0109   ; get divisor
0B1A24 CD 56 1A 0B 0110       call get_arg_s168
0B1A28 C1          0111       pop bc ; dividend to bc (was de)
0B1A29             0112   ; do the division
0B1A29 CD 0F 18 0B 0113       call sdiv168 ; uh.l = ub.c / ud.e
0B1A2D CD 15 05 0B 0114       call dumpRegistersHex
0B1A31 CD EB 03 0B 0115       call print_s168
0B1A35 CD 7C 02 0B 0116       call printNewLine
0B1A39 C3 D5 19 0B 0117       jp _main_end_ok
0B1A3D             0118   
0B1A3D             0119   test_deg_360_to_255:
0B1A3D CD 56 1A 0B 0120       call get_arg_s168 ; argument value to de
0B1A41 EB          0121       ex de,hl             ; argument to hl for function call
0B1A42 CD 87 0F 0B 0122       call deg_360_to_255
0B1A46 CD 15 05 0B 0123       call dumpRegistersHex
0B1A4A CD EB 03 0B 0124       call print_s168
0B1A4E CD 7C 02 0B 0125       call printNewLine
0B1A52 C3 D5 19 0B 0126       jp _main_end_ok
0B1A56             0127   
0B1A56             0128   ; ========== HELPER FUNCTIONS ==========
0B1A56             0129   get_arg_s168:
0B1A56 ED 32 03    0130       lea ix,ix+3 ; point to the next argument
0B1A59 DD 27 00    0131       ld hl,(ix)  ; get the argument string
0B1A5C CD 98 01 0B 0132       call asc_to_s168 ; convert the string to a number
0B1A60 C9          0133       ret ; return with the value in DE
0B1A61             0134   
0B1A61             0135   get_arg_s24:
0B1A61 ED 32 03    0136       lea ix,ix+3 ; point to the next argument
0B1A64 DD 27 00    0137       ld hl,(ix)  ; get the argument string
0B1A67 CD 45 01 0B 0138       call asc_to_s24 ; convert the string to a number
0B1A6B C9          0139       ret ; return with the value in DE
0B1A6C             0140   
0B1A6C             0141   get_plot_coords:
0B1A6C             0142   ; get the move coordinates
0B1A6C ED 32 03    0143       lea ix,ix+3 ; pointer to next argument address
0B1A6F DD 27 00    0144       ld hl,(ix)  ; pointer to the x coordinate string
0B1A72 CD 98 01 0B 0145       call asc_to_s168 ; de = x coordinate
0B1A76 D5          0146       push de
0B1A77 C1          0147       pop bc ; bc = x coordinate
0B1A78 ED 32 03    0148       lea ix,ix+3 ; pointer to next argument address
0B1A7B DD 27 00    0149       ld hl,(ix)  ; pointer to the y coordinate string
0B1A7E CD 98 01 0B 0150       call asc_to_s168 ; de = y coordinate
0B1A82 C9          0151       ret
0B1A83             0152   
0B1A83             0153   ; match the next argument after ix to the dispatch table at iy
0B1A83             0154   ;   - arguments and dispatch entries are zero-terminated, case-sensitive strings
0B1A83             0155   ;   - final entry of dispatch table must be a 3-byte zero or bad things will happen
0B1A83             0156   ; returns: NO MATCH: iy=dispatch list terminator a=1 and zero flag reset
0B1A83             0157   ;          ON MATCH: iy=dispatch address, a=0 and zero flag se
0B1A83             0158   ; destroys: a, hl, de, ix, iy, flags
0B1A83             0159   match_next:
0B1A83 ED 32 03    0160       lea ix,ix+3         ; point to the next argument
0B1A86             0161   @loop:
0B1A86 FD 27 00    0162       ld hl,(iy)          ; pointer argument dispatch record
0B1A89             0163       signHL              ; check for list terminator
0B1A89 19          0001M          add hl,de
0B1A8A B7          0002M          or a
0B1A8B ED 52       0003M          sbc hl,de
0B1A8D CA A5 1A 0B 0164       jp z,@no_match      ; if a=0, return error
0B1A91 23          0165       inc hl              ; skip over jp instruction
0B1A92 23          0166       inc hl
0B1A93 DD 17 00    0167       ld de,(ix)          ; pointer to the argument string
0B1A96 CD AB 1A 0B 0168       call str_equal      ; compare the argument to the dispatch table entry
0B1A9A CA A7 1A 0B 0169       jp z,@match         ; if equal, return success
0B1A9E ED 33 03    0170       lea iy,iy+3         ; if not equal, bump iy to next dispatch table entry
0B1AA1 C3 86 1A 0B 0171       jp @loop            ; and loop
0B1AA5             0172   @no_match:
0B1AA5 3C          0173       inc a               ; no match so return a=1 and zero flag reset
0B1AA6 C9          0174       ret
0B1AA7             0175   @match:
0B1AA7 FD 37 00    0176       ld iy,(iy)          ; get the function pointer
0B1AAA C9          0177       ret                 ; return a=0 and zero flag set
0B1AAB             0178   
0B1AAB             0179   ; compare two zero-terminated strings for equality, case-sensitive
0B1AAB             0180   ; hl: pointer to first string, de: pointer to second string
0B1AAB             0181   ; returns: z if equal, nz if not equal
0B1AAB             0182   ; destroys: a, hl, de
0B1AAB             0183   str_equal:
0B1AAB 1A          0184       ld a,(de)           ; get the first character
0B1AAC BE          0185       cp (hl)             ; compare to the second character
0B1AAD C0          0186       ret nz              ; if not equal, return
0B1AAE B7          0187       or a
0B1AAF C8          0188       ret z               ; if equal and zero, return
0B1AB0 23          0189       inc hl              ; next character
0B1AB1 13          0190       inc de
0B1AB2 C3 AB 1A 0B 0191       jp str_equal        ; loop until end of string
0B1AB6             0192   
0B1AB6             0193   ; print the parameter string pointed to by ix
0B1AB6             0194   ; destroys: a, hl
0B1AB6             0195   print_param:
0B1AB6 DD 27 00    0196       ld hl,(ix)          ; get the parameter pointer
0B1AB9 CD 67 02 0B 0197       call printString    ; print the parameter string
0B1ABD 3E 20       0198       ld a,' '            ; print a space separator
0B1ABF 5B D7       0199       rst.lil $10
0B1AC1 C9          0200       ret
0B1AC2             0201   
0B1AC2             0202   ; print the parameters
0B1AC2             0203   ; inputs: b = number of parameters, ix = pointer to the parameters
0B1AC2             0204   ; destroys: a, hl, bc
0B1AC2             0205   print_params:
0B1AC2 41          0206       ld b,c              ; loop counter = number of parameters
0B1AC3 DD E5       0207       push ix             ; save the pointer to the parameters
0B1AC5             0208   @loop:
0B1AC5 C5          0209       push bc             ; save the loop counter
0B1AC6 CD B6 1A 0B 0210       call print_param    ; print the parameter
0B1ACA ED 32 03    0211       lea ix,ix+3         ; next parameter pointer
0B1ACD C1          0212       pop bc              ; get back the loop counter
0B1ACE 10 F5       0213       djnz @loop          ; loop until done
0B1AD0 DD E1       0214       pop ix              ; restore the pointer to the parameters
0B1AD2 C9          0215       ret
0B1AD3             0216   
0B1AD3             0217   debug_print:
0B1AD3 CD 7C 02 0B 0218       call printNewLine   ; DEBUG
0B1AD7 CD 48 06 0B 0219       call dumpFlags      ; DEBUG
0B1ADB CD B6 1A 0B 0220       call print_param    ; DEBUG
0B1ADF CD 7C 02 0B 0221       call printNewLine   ; DEBUG
0B1AE3 CD 7C 02 0B 0222       call printNewLine   ; DEBUG
0B1AE7 C9          0223       ret
