PC     Output      Line
040000             0001   ;
040000             0002   ; Title:	test
040000             0003   ; Author:	Brandon Gates
040000             0004   ; Created:	29/10/2024
040000             0005   
040000             0006       ASSUME	ADL = 1
040000             0007       INCLUDE "../moslets/mos_api.inc"
040000             0001*  ;
040000             0002*  ; Title:	AGON MOS - API for user projects
040000             0003*  ; Author:	Dean Belfield
040000             0004*  ; Created:	03/08/2022
040000             0005*  ; Last Updated:	11/11/2023
040000             0006*  ;
040000             0007*  ; Modinfo:
040000             0008*  ; 05/08/2022:	Added mos_feof
040000             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040000             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040000             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040000             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040000             0013*  ; 13/10/2022:	Added mos_oscli
040000             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040000             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040000             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040000             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040000             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040000             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040000             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040000             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040000             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040000             0023*  ; 19/05/2023:	Added sysvar_scrMode
040000             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040000             0025*  ; 03/08/2023:	Added mos_setkbvector
040000             0026*  ; 10/08/2023:	Added mos_getkbmap
040000             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040000             0028*  ; 09/04/2024:   Adapter to ez80asm
040000             0029*  ; VDP control (VDU 23, 0, n)
040000             0030*  ;
040000             0031*  vdp_gp:			EQU 	80h
040000             0032*  vdp_keycode:		EQU 	81h
040000             0033*  vdp_cursor:		EQU	82h
040000             0034*  vdp_scrchar:		EQU	83h
040000             0035*  vdp_scrpixel:		EQU	84h
040000             0036*  vdp_audio:		EQU	85h
040000             0037*  vdp_mode:		EQU	86h
040000             0038*  vdp_rtc:		EQU	87h
040000             0039*  vdp_keystate:		EQU	88h
040000             0040*  vdp_logicalcoords:	EQU	C0h
040000             0041*  vdp_terminalmode:	EQU	FFh
040000             0042*  
040000             0043*  ; MOS high level functions
040000             0044*  ;
040000             0045*  mos_getkey:		EQU	00h
040000             0046*  mos_load:		EQU	01h
040000             0047*  mos_save:		EQU	02h
040000             0048*  mos_cd:			EQU	03h
040000             0049*  mos_dir:		EQU	04h
040000             0050*  mos_del:		EQU	05h
040000             0051*  mos_ren:		EQU	06h
040000             0052*  mos_mkdir:		EQU	07h
040000             0053*  mos_sysvars:		EQU	08h
040000             0054*  mos_editline:		EQU	09h
040000             0055*  mos_fopen:		EQU	0Ah
040000             0056*  mos_fclose:		EQU	0Bh
040000             0057*  mos_fgetc:		EQU	0Ch
040000             0058*  mos_fputc:		EQU	0Dh
040000             0059*  mos_feof:		EQU	0Eh
040000             0060*  mos_getError:		EQU	0Fh
040000             0061*  mos_oscli:		EQU	10h
040000             0062*  mos_copy:		EQU	11h
040000             0063*  mos_getrtc:		EQU	12h
040000             0064*  mos_setrtc:		EQU	13h
040000             0065*  mos_setintvector:	EQU	14h
040000             0066*  mos_uopen:		EQU	15h
040000             0067*  mos_uclose:		EQU	16h
040000             0068*  mos_ugetc:		EQU	17h
040000             0069*  mos_uputc:		EQU 	18h
040000             0070*  mos_getfil:		EQU	19h
040000             0071*  mos_fread:		EQU	1Ah
040000             0072*  mos_fwrite:		EQU	1Bh
040000             0073*  mos_flseek:		EQU	1Ch
040000             0074*  mos_setkbvector:	EQU	1Dh
040000             0075*  mos_getkbmap:		EQU	1Eh
040000             0076*  mos_i2c_open:		EQU	1Fh
040000             0077*  mos_i2c_close:		EQU	20h
040000             0078*  mos_i2c_write:		EQU	21h
040000             0079*  mos_i2c_read:		EQU	22h
040000             0080*  
040000             0081*  
040000             0082*  ; FatFS file access functions
040000             0083*  ;
040000             0084*  ffs_fopen:		EQU	80h
040000             0085*  ffs_fclose:		EQU	81h
040000             0086*  ffs_fread:		EQU	82h
040000             0087*  ffs_fwrite:		EQU	83h
040000             0088*  ffs_flseek:		EQU	84h
040000             0089*  ffs_ftruncate:		EQU	85h
040000             0090*  ffs_fsync:		EQU	86h
040000             0091*  ffs_fforward:		EQU	87h
040000             0092*  ffs_fexpand:		EQU	88h
040000             0093*  ffs_fgets:		EQU	89h
040000             0094*  ffs_fputc:		EQU	8Ah
040000             0095*  ffs_fputs:		EQU	8Bh
040000             0096*  ffs_fprintf:		EQU	8Ch
040000             0097*  ffs_ftell:		EQU	8Dh
040000             0098*  ffs_feof:		EQU	8Eh
040000             0099*  ffs_fsize:		EQU	8Fh
040000             0100*  ffs_ferror:		EQU	90h
040000             0101*  
040000             0102*  ; FatFS directory access functions
040000             0103*  ;
040000             0104*  ffs_dopen:		EQU	91h
040000             0105*  ffs_dclose:		EQU	92h
040000             0106*  ffs_dread:		EQU	93h
040000             0107*  ffs_dfindfirst:		EQU	94h
040000             0108*  ffs_dfindnext:		EQU	95h
040000             0109*  
040000             0110*  ; FatFS file and directory management functions
040000             0111*  ;
040000             0112*  ffs_stat:		EQU	96h
040000             0113*  ffs_unlink:		EQU	97h
040000             0114*  ffs_rename:		EQU	98h
040000             0115*  ffs_chmod:		EQU	99h
040000             0116*  ffs_utime:		EQU	9Ah
040000             0117*  ffs_mkdir:		EQU	9Bh
040000             0118*  ffs_chdir:		EQU	9Ch
040000             0119*  ffs_chdrive:		EQU	9Dh
040000             0120*  ffs_getcwd:		EQU	9Eh
040000             0121*  
040000             0122*  ; FatFS volume management and system configuration functions
040000             0123*  ;
040000             0124*  ffs_mount:		EQU	9Fh
040000             0125*  ffs_mkfs:		EQU	A0h
040000             0126*  ffs_fdisk:		EQU	A1h
040000             0127*  ffs_getfree:		EQU	A2h
040000             0128*  ffs_getlabel:		EQU	A3h
040000             0129*  ffs_setlabel:		EQU	A4h
040000             0130*  ffs_setcp:		EQU	A5h
040000             0131*  
040000             0132*  ; File access modes
040000             0133*  ;
040000             0134*  fa_read:		EQU	01h
040000             0135*  fa_write:		EQU	02h
040000             0136*  fa_open_existing:	EQU	00h
040000             0137*  fa_create_new:		EQU	04h
040000             0138*  fa_create_always:	EQU	08h
040000             0139*  fa_open_always:		EQU	10h
040000             0140*  fa_open_append:		EQU	30h
040000             0141*  
040000             0142*  ; System variable indexes for api_sysvars
040000             0143*  ; Index into _sysvars in globals.asm
040000             0144*  ;
040000             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040000             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040000             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040000             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040000             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040000             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040000             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040000             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040000             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040000             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040000             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040000             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040000             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040000             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040000             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040000             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040000             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040000             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040000             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040000             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040000             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040000             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040000             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040000             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040000             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040000             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040000             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040000             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040000             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040000             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040000             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040000             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040000             0177*  
040000             0178*  ; Flags for the VPD protocol
040000             0179*  ;
040000             0180*  vdp_pflag_cursor:	EQU	00000001b
040000             0181*  vdp_pflag_scrchar:	EQU	00000010b
040000             0182*  vdp_pflag_point:	EQU	00000100b
040000             0183*  vdp_pflag_audio:	EQU	00001000b
040000             0184*  vdp_pflag_mode:		EQU	00010000b
040000             0185*  vdp_pflag_rtc:		EQU	00100000b
040000             0186*  vdp_pflag_mouse:	EQU	01000000b
040000             0187*  ; vdp_pflag_buffered:	EQU	10000000b
040000             0188*  
040000             0189*  ;
040000             0190*  ; FatFS structures
040000             0191*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040000             0192*  ;
040000             0193*  ; Object ID and allocation information (FFOBJID)
040000             0194*  ;
040000             0195*  ;FFOBJID	.STRUCT
040000             0196*  ;	fs:		DS	3	; Pointer to the hosting volume of this object
040000             0197*  ;	id:		DS	2	; Hosting volume mount ID
040000             0198*  ;	attr:		DS	1	; Object attribute;
040000             0199*  ;	stat:		DS	1	; Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040000             0200*  ;	sclust:		DS	4	; Object data start cluster (0:no cluster or root directory)
040000             0201*  ;	objsize:	DS	4	; Object size (valid when sclust != 0)
040000             0202*  ;FFOBJID_SIZE .ENDSTRUCT FFOBJID
040000             0203*  ;
040000             0204*  ; File object structure (FIL)
040000             0205*  ;
040000             0206*  ;FIL .STRUCT
040000             0207*  ;	obj:		.TAG	FFOBJID	; Object identifier
040000             0208*  ;	flag:		DS	1	; File status flags
040000             0209*  ;	err:		DS	1	; Abort flag (error code)
040000             0210*  ;	fptr:		DS	4	; File read/write pointer (Zeroed on file open)
040000             0211*  ;	clust:		DS	4	; Current cluster of fpter (invalid when fptr is 0)
040000             0212*  ;	sect:		DS	4	; Sector number appearing in buf[] (0:invalid)
040000             0213*  ;	dir_sect:	DS	4	; Sector number containing the directory entry
040000             0214*  ;	dir_ptr:	DS	3	; Pointer to the directory entry in the win[]
040000             0215*  ;FIL_SIZE .ENDSTRUCT FIL
040000             0216*  ;
040000             0217*  ; Directory object structure (DIR)
040000             0218*  ;
040000             0219*  ;DIR .STRUCT
040000             0220*  ;	obj:		.TAG	FFOBJID	; Object identifier;
040000             0221*  ;	dptr:		DS	4	; Current read/write offset
040000             0222*  ;	clust:		DS	4	; Current cluster
040000             0223*  ;	sect:		DS	4	; Current sector (0:Read operation has terminated)
040000             0224*  ;	dir:		DS	3	; Pointer to the directory item in the win[]
040000             0225*  ;	fn:		DS	12	; SFN (in/out) {body[8],ext[3],status[1]}
040000             0226*  ;	blk_ofs:	DS	4	; Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040000             0227*  ;DIR_SIZE .ENDSTRUCT DIR
040000             0228*  ;
040000             0229*  ; File information structure (FILINFO)
040000             0230*  ;
040000             0231*  ;FILINFO .STRUCT
040000             0232*  ;	fsize:		DS 	4	; File size
040000             0233*  ;	fdate:		DS	2	; Modified date;
040000             0234*  ;	ftime:		DS	2	; Modified time
040000             0235*  ;	fattrib:	DS	1	; File attribute
040000             0236*  ;	altname:	DS	13	; Alternative file name
040000             0237*  ;	fname:		DS	256	; Primary file name
040000             0238*  ;FILINFO_SIZE .ENDSTRUCT FILINFO
040000             0239*  
040000             0240*  ;
040000             0241*  ; Macro for calling the API
040000             0242*  ; Parameters:
040000             0243*  ; - function: One of the function numbers listed above
040000             0244*  ;
040000             0245*  			MACRO	MOSCALL function
040000             0246*  			LD	A, function
040000             0247*  			RST.L	08h
040000             0248*  			ENDMACRO
040000             0008       ORG 0x0B0000 ; Is a moslet
0B0000             0009   
0B0000             0010       MACRO PROGNAME
0B0000             0011       ASCIZ "scratch.bin"
0B0000             0012       ENDMACRO
0B0000             0013   
0B0000             0014   ; STANDARD MOSLET INCLUDES
0B0000             0015       include "init.inc"
0B0000             0001*  ;
0B0000             0002*  ; Title:	Copy - Initialisation Code
0B0000             0003*  ; Author:	Dean Belfield, Lennart Benschop
0B0000             0004*  ; Created:	06/11/2022
0B0000             0005*  ; Last Updated:	26/12/2022
0B0000             0006*  ;
0B0000             0007*  ; Modinfo:
0B0000             0008*  ; 17/12/2022:	Added parameter processing
0B0000             0009*  ; 26/12/2022:   Adapted to Copy program, use LEA instead of 3x INC IX, Save/restore MB
0B0000             0010*  ; Changed:      08/04/2924 adapt to ez80asm
0B0000             0011*  
0B0000             0012*  
0B0000             0013*  argv_ptrs_max:		EQU	16			; Maximum number of arguments allowed in argv
0B0000             0014*  
0B0000             0015*  ;
0B0000             0016*  ; Start in ADL mode
0B0000             0017*  ;
0B0000 C3 45 00 0B 0018*  			JP	_start			; Jump to start
0B0004             0019*  ;
0B0004             0020*  ; The header stuff is from byte 64 onwards
0B0004             0021*  ;
0B0004             0022*  
0B0004             0023*  _exec_name:
0B0004             0024*  			PROGNAME			; The executable name, only used in argv
0B0004 73 63 72 61 0001*M     ASCIZ "scratch.bin"
       74 63 68 2E 
       62 69 6E 00 
0B0010             0025*  
0B0010 FF FF FF FF 0026*  			ALIGN	64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
0B0040             0027*  
0B0040 4D 4F 53    0028*  			DB	"MOS"			; Flag for MOS - to confirm this is a valid MOS command
0B0043 00          0029*  			DB	00h			; MOS header version 0
0B0044 01          0030*  			DB	01h			; Flag for run mode (0: Z80, 1: ADL)
0B0045             0031*  ;
0B0045             0032*  ; And the code follows on immediately after the header
0B0045             0033*  ;
0B0045 F5          0034*  _start:			PUSH	AF			; Preserve the registers
0B0046 C5          0035*  			PUSH	BC
0B0047 D5          0036*  			PUSH	DE
0B0048 DD E5       0037*  			PUSH	IX
0B004A FD E5       0038*  			PUSH	IY
0B004C ED 6E       0039*  			LD	A, MB			; Save MB
0B004E F5          0040*  			PUSH 	AF
0B004F AF          0041*  			XOR 	A
0B0050 ED 6D       0042*  			LD 	MB, A                   ; Clear to zero so MOS API calls know how to use 24-bit addresses.
0B0052             0043*  
0B0052 DD 21 B9 00 0044*  			LD	IX, argv_ptrs		; The argv array pointer address
       0B          
0B0057 DD E5       0045*  			PUSH	IX
0B0059 CD 70 00 0B 0046*  			CALL	_parse_params		; Parse the parameters
0B005D DD E1       0047*  			POP	IX			; IX: argv
0B005F 06 00       0048*  			LD	B, 0			;  C: argc
0B0061 CD 34 0E 0B 0049*  			CALL	_main			; Start user code
0B0065             0050*  
0B0065 F1          0051*  			POP 	AF
0B0066 ED 6D       0052*  			LD	MB, A
0B0068 FD E1       0053*  			POP	IY			; Restore registers
0B006A DD E1       0054*  			POP	IX
0B006C D1          0055*  			POP	DE
0B006D C1          0056*  			POP	BC
0B006E F1          0057*  			POP	AF
0B006F C9          0058*  			RET
0B0070             0059*  
0B0070             0060*  ; Parse the parameter string into a C array
0B0070             0061*  ; Parameters
0B0070             0062*  ; - HL: Address of parameter string
0B0070             0063*  ; - IX: Address for array pointer storage
0B0070             0064*  ; Returns:
0B0070             0065*  ; -  C: Number of parameters parsed
0B0070             0066*  ;
0B0070 01 04 00 0B 0067*  _parse_params:		LD	BC, _exec_name
0B0074 DD 0F 00    0068*  			LD	(IX+0), BC		; ARGV[0] = the executable name
0B0077 ED 32 03    0069*  			LEA     IX, IX+3
0B007A CD B2 00 0B 0070*  			CALL	_skip_spaces		; Skip HL past any leading spaces
0B007E             0071*  ;
0B007E 01 01 00 00 0072*  			LD	BC, 1			; C: ARGC = 1 - also clears out top 16 bits of BCU
0B0082 06 0F       0073*  			LD	B, argv_ptrs_max - 1	; B: Maximum number of argv_ptrs
0B0084             0074*  ;
0B0084             0075*  _parse_params_1:
0B0084 C5          0076*  			PUSH	BC			; Stack ARGC
0B0085 E5          0077*  			PUSH	HL			; Stack start address of token
0B0086 CD A3 00 0B 0078*  			CALL	_get_token		; Get the next token
0B008A 79          0079*  			LD	A, C			; A: Length of the token in characters
0B008B D1          0080*  			POP	DE			; Start address of token (was in HL)
0B008C C1          0081*  			POP	BC			; ARGC
0B008D B7          0082*  			OR	A			; Check for A=0 (no token found) OR at end of string
0B008E C8          0083*  			RET	Z
0B008F             0084*  ;
0B008F DD 1F 00    0085*  			LD	(IX+0), DE		; Store the pointer to the token
0B0092 E5          0086*  			PUSH	HL			; DE=HL
0B0093 D1          0087*  			POP	DE
0B0094 CD B2 00 0B 0088*  			CALL	_skip_spaces		; And skip HL past any spaces onto the next character
0B0098 AF          0089*  			XOR	A
0B0099 12          0090*  			LD	(DE), A			; Zero-terminate the token
0B009A ED 32 03    0091*  			LEA  	IX, IX+3			; Advance to next pointer position
0B009D 0C          0092*  			INC	C			; Increment ARGC
0B009E 79          0093*  			LD	A, C			; Check for C >= A
0B009F B8          0094*  			CP	B
0B00A0 38 E2       0095*  			JR	C, _parse_params_1	; And loop
0B00A2 C9          0096*  			RET
0B00A3             0097*  
0B00A3             0098*  ; Get the next token
0B00A3             0099*  ; Parameters:
0B00A3             0100*  ; - HL: Address of parameter string
0B00A3             0101*  ; Returns:
0B00A3             0102*  ; - HL: Address of first character after token
0B00A3             0103*  ; -  C: Length of token (in characters)
0B00A3             0104*  ;
0B00A3 0E 00       0105*  _get_token:		LD	C, 0			; Initialise length
0B00A5 7E          0106*  @@:			LD	A, (HL)			; Get the character from the parameter string
0B00A6 B7          0107*  			OR	A			; Exit if 0 (end of parameter string in MOS)
0B00A7 C8          0108*  			RET 	Z
0B00A8 FE 0D       0109*  			CP	13			; Exit if CR (end of parameter string in BBC BASIC)
0B00AA C8          0110*  			RET	Z
0B00AB FE 20       0111*  			CP	' '			; Exit if space (end of token)
0B00AD C8          0112*  			RET	Z
0B00AE 23          0113*  			INC	HL			; Advance to next character
0B00AF 0C          0114*  			INC 	C			; Increment length
0B00B0 18 F3       0115*  			JR	@B
0B00B2             0116*  
0B00B2             0117*  ; Skip spaces in the parameter string
0B00B2             0118*  ; Parameters:
0B00B2             0119*  ; - HL: Address of parameter string
0B00B2             0120*  ; Returns:
0B00B2             0121*  ; - HL: Address of next none-space character
0B00B2             0122*  ;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
0B00B2             0123*  ;
0B00B2 7E          0124*  _skip_spaces:		LD	A, (HL)			; Get the character from the parameter string
0B00B3 FE 20       0125*  			CP	' '			; Exit if not space
0B00B5 C0          0126*  			RET	NZ
0B00B6 23          0127*  			INC	HL			; Advance to next character
0B00B7 18 F9       0128*  			JR	_skip_spaces		; Increment length
0B00B9             0129*  
0B00B9             0130*  ; Storage for the argv array pointers
0B00B9             0131*  ;
0B00B9 00 00 00 00 0132*  argv_ptrs:		BLKP	argv_ptrs_max, 0
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0B00E9             0016       include "parse.inc"
0B00E9             0001*  ;
0B00E9             0002*  ; Title:	Number Parsing Functions
0B00E9             0003*  ; Author:	Dean Belfield
0B00E9             0004*  ; Created:	15/11/2022
0B00E9             0005*  ; Last Updated:	15/11/2022
0B00E9             0006*  ; Last Updated: 29/12/2022 Lennart Benchop adapt for 24-bit mode.
0B00E9             0007*  ; Modinfo:
0B00E9             0008*  ; 2024/04/08    Adapt for ez80asm
0B00E9             0009*  
0B00E9             0010*  ; Read a number and convert to binary
0B00E9             0011*  ; If prefixed with &, will read as hex, otherwise decimal
0B00E9             0012*  ;   Inputs: HL: Pointer in string buffer
0B00E9             0013*  ;  Outputs: HL: Updated text pointer
0B00E9             0014*  ;           DE: Value
0B00E9             0015*  ;            A: Terminator (spaces skipped)
0B00E9             0016*  ;            F: Carry set if valid number, otherwise reset
0B00E9             0017*  ; Destroys: A,D,E,H,L,F
0B00E9             0018*  ;
0B00E9 11 00 00 00 0019*  ASC_TO_NUMBER:		LD		DE, 0			; Initialise DE
0B00ED CD B2 00 0B 0020*  			CALL		_skip_spaces		; Skip whitespace
0B00F1 7E          0021*  			LD		A, (HL)			; Read first character
0B00F2 B7          0022*  			OR		A			; Check for end of string
0B00F3 C8          0023*  			RET		Z			; Return with no carry if not
0B00F4 C5          0024*  			PUSH		BC			; Preserve BC
0B00F5 FE 26       0025*  			CP		'&'			; Is it prefixed with '&' (HEX number)?
0B00F7 20 23       0026*  			JR		NZ, ASC_TO_NUMBER3	; Jump to decimal parser if not
0B00F9 23          0027*  			INC		HL			; Otherwise fall through to ASC_TO_HEX
0B00FA             0028*  ;
0B00FA 7E          0029*  ASC_TO_NUMBER1:		LD		A, (HL)			; Fetch the character
0B00FB CD 3D 01 0B 0030*  			CALL   	 	UPPRC			; Convert to uppercase
0B00FF D6 30       0031*  			SUB		'0'			; Normalise to 0
0B0101 38 37       0032*  			JR 		C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0B0103 FE 0A       0033*  			CP 		10			; Check if >= 10
0B0105 38 06       0034*  			JR 		C, ASC_TO_NUMBER2	; No, so skip next bit
0B0107 D6 07       0035*  			SUB 		7			; Adjust ASCII A-F to nibble
0B0109 FE 10       0036*  			CP 		16			; Check for > F
0B010B 30 2D       0037*  			JR 		NC, ASC_TO_NUMBER4	; Return if out of range
0B010D             0038*  ;
0B010D E5          0039*  ASC_TO_NUMBER2:		PUSH		HL			; Stack HL
0B010E D5          0040*  			PUSH		DE			; LD HL, DE
0B010F E1          0041*  			POP		HL
0B0110 29          0042*  			ADD		HL, HL
0B0111 29          0043*  			ADD		HL, HL
0B0112 29          0044*  			ADD		HL, HL
0B0113 29          0045*  			ADD		HL, HL
0B0114 E5          0046*  			PUSH		HL			; LD DE, HL
0B0115 D1          0047*  			POP		DE
0B0116 E1          0048*  			POP		HL			; Restore HL
0B0117 B3          0049*  			OR      	E			; OR the new digit in to the least significant nibble
0B0118 5F          0050*  			LD      	E, A
0B0119             0051*  ;
0B0119 23          0052*  			INC		HL			; Onto the next character
0B011A 18 DE       0053*  			JR      	ASC_TO_NUMBER1		; And loop
0B011C             0054*  ;
0B011C 7E          0055*  ASC_TO_NUMBER3:		LD		A, (HL)
0B011D D6 30       0056*  			SUB		'0'			; Normalise to 0
0B011F 38 19       0057*  			JR		C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0B0121 FE 0A       0058*  			CP		10			; Check if >= 10
0B0123 30 15       0059*  			JR		NC, ASC_TO_NUMBER4	; Return if >= 10
0B0125             0060*  ;
0B0125 E5          0061*  			PUSH		HL			; Stack HL
0B0126 D5          0062*  			PUSH		DE			; LD HL, DE
0B0127 E1          0063*  			POP		HL
0B0128 E5          0064*  			PUSH		HL			; LD BC, HL
0B0129 C1          0065*  			POP		BC
0B012A 29          0066*  			ADD		HL, HL 			; x 2
0B012B 29          0067*  			ADD		HL, HL 			; x 4
0B012C 09          0068*  			ADD		HL, BC 			; x 5
0B012D 29          0069*  			ADD		HL, HL 			; x 10
0B012E 01 00 00 00 0070*  			LD		BC, 0
0B0132 4F          0071*  			LD 		C, A			; LD BCU, A
0B0133 09          0072*  			ADD		HL, BC			; Add BCU to HL
0B0134 E5          0073*  			PUSH		HL			; LD DE, HL
0B0135 D1          0074*  			POP		DE
0B0136 E1          0075*  			POP		HL			; Restore HL
0B0137             0076*  ;
0B0137 23          0077*  			INC		HL
0B0138 18 E2       0078*  			JR		ASC_TO_NUMBER3
0B013A C1          0079*  ASC_TO_NUMBER4:		POP		BC
0B013B 37          0080*  			SCF					; We have a valid number so set carry
0B013C C9          0081*  			RET
0B013D             0082*  
0B013D             0083*  
0B013D             0084*  ; Convert a character to upper case
0B013D             0085*  ;  A: Character to convert
0B013D             0086*  ;
0B013D E6 7F       0087*  UPPRC:  		AND     	7FH
0B013F FE 60       0088*  			CP      	'`'
0B0141 D8          0089*  			RET     	C
0B0142 E6 5F       0090*  			AND     	5FH			; Convert to upper case
0B0144 C9          0091*  			RET
0B0145             0092*  
0B0145             0093*  
0B0145             0094*  ;------------------------------------------------------------------------
0B0145             0095*  ; Read a number and convert to binary (decimal only)
0B0145             0096*  ; Inputs: hl: Pointer in string buffer
0B0145             0097*  ; Outputs: hl: Updated text pointer
0B0145             0098*  ;         de: Value
0B0145             0099*  ;         a: Terminator (spaces skipped)
0B0145             0100*  ;         f: Carry set if valid number, otherwise reset
0B0145             0101*  ; Destroys: a, d, e, h, l, f
0B0145             0102*  ;------------------------------------------------------------------------
0B0145             0103*  signed_asc_to_int:
0B0145 3E 01       0104*      ld a,1 ; set sign flag
0B0147 32 97 01 0B 0105*      ld (@sign),a ; store sign flag
0B014B             0106*  
0B014B 11 00 00 00 0107*      ld de, 0 ; initialise de
0B014F CD B2 00 0B 0108*      call _skip_spaces ; skip whitespace
0B0153             0109*  
0B0153 7E          0110*      ld a, (hl) ; read first character
0B0154 B7          0111*      or a ; check for end of string
0B0155 C8          0112*      ret z ; return with no carry if not
0B0156             0113*  
0B0156 C5          0114*      push bc ; preserve bc
0B0157             0115*  
0B0157 FE 2D       0116*      cp '-' ; check for negative number
0B0159 C2 63 01 0B 0117*      jp nz,@loop ; number is positive, nothing more to do
0B015D AF          0118*      xor a ; sign flag to zero
0B015E 32 97 01 0B 0119*      ld (@sign),a ; store sign flag
0B0162 23          0120*      inc hl ; skip '-'
0B0163             0121*  
0B0163             0122*  @loop:
0B0163 7E          0123*      ld a, (hl)
0B0164 D6 30       0124*      sub '0' ; normalise to 0
0B0166 38 19       0125*      jr c, @integer_end ; return if < ascii '0'
0B0168 FE 0A       0126*      cp 10 ; check if >= 10
0B016A 30 15       0127*      jr nc, @integer_end ; return if >= 10
0B016C E5          0128*      push hl ; stack hl
0B016D D5          0129*      push de ; ld hl, de
0B016E E1          0130*      pop hl
0B016F E5          0131*      push hl ; ld bc, hl
0B0170 C1          0132*      pop bc
0B0171 29          0133*      add hl, hl ; x 2
0B0172 29          0134*      add hl, hl ; x 4
0B0173 09          0135*      add hl, bc ; x 5
0B0174 29          0136*      add hl, hl ; x 10
0B0175 01 00 00 00 0137*      ld bc, 0
0B0179 4F          0138*      ld c, a ; ld bcu, a
0B017A 09          0139*      add hl, bc ; add bcu to hl
0B017B E5          0140*      push hl ; ld de, hl
0B017C D1          0141*      pop de
0B017D E1          0142*      pop hl ; restore hl
0B017E 23          0143*      inc hl
0B017F 18 E2       0144*      jr @loop
0B0181             0145*  
0B0181             0146*  @integer_end:
0B0181 C1          0147*      pop bc ; send bc back how she came in
0B0182 3A 97 01 0B 0148*      ld a, (@sign) ; get sign flag
0B0186 3D          0149*      dec a ; check if negative
0B0187 F2 95 01 0B 0150*      jp p,@pos ; positive number
0B018B             0151*  
0B018B             0152*  ; Negate de
0B018B E5          0153*      push hl ; save text pointer
0B018C 21 00 00 00 0154*      ld hl, 0
0B0190 AF          0155*      xor a ; clear carry
0B0191 ED 52       0156*      sbc hl, de ; subtract DE from HL
0B0193 EB          0157*      ex de, hl ; DE = 0-HL
0B0194 E1          0158*      pop hl ; restore text pointer
0B0195             0159*  
0B0195             0160*  @pos:
0B0195 37          0161*      scf ; we have a valid number so set carry
0B0196 C9          0162*      ret
0B0197             0163*  
0B0197 00          0164*  @sign: db 0 ; sign flag buffer
0B0198             0165*  
0B0198             0166*  
0B0198             0167*  ;------------------------------------------------------------------------
0B0198             0168*  ; Read a number and convert to binary (decimal only)
0B0198             0169*  ; Inputs: hl: Pointer in string buffer
0B0198             0170*  ; Outputs: hl: Updated text pointer
0B0198             0171*  ;         de: Value
0B0198             0172*  ;         a: Terminator (spaces skipped)
0B0198             0173*  ;         f: Carry set if valid number, otherwise reset
0B0198             0174*  ; Destroys: a, d, e, h, l, f
0B0198             0175*  ;------------------------------------------------------------------------
0B0198             0176*  signed_asc_to_168:
0B0198 3E 01       0177*      ld a,1 ; set sign flag
0B019A 32 31 02 0B 0178*      ld (@sign),a ; store sign flag
0B019E             0179*  
0B019E 11 00 00 00 0180*      ld de, 0 ; initialise de
0B01A2 ED 53 2D 02 0181*      ld (@result), de ; clear result buffer
       0B          
0B01A7 CD B2 00 0B 0182*      call _skip_spaces ; skip whitespace
0B01AB             0183*  
0B01AB 7E          0184*      ld a, (hl) ; read first character
0B01AC B7          0185*      or a ; check for end of string
0B01AD C8          0186*      ret z ; return with no carry if not
0B01AE             0187*  
0B01AE C5          0188*      push bc ; preserve bc
0B01AF             0189*  
0B01AF FE 2D       0190*      cp '-' ; check for negative number
0B01B1 C2 BB 01 0B 0191*      jp nz,@loop ; number is positive, nothing more to do
0B01B5 AF          0192*      xor a ; sign flag to zero
0B01B6 32 31 02 0B 0193*      ld (@sign),a ; store sign flag
0B01BA 23          0194*      inc hl ; skip '-'
0B01BB             0195*  
0B01BB             0196*  @loop:
0B01BB 7E          0197*      ld a, (hl)
0B01BC             0198*  
0B01BC             0199*  ; chcek for decimal point
0B01BC FE 2E       0200*      cp '.' ; check for decimal point
0B01BE CA FF 01 0B 0201*      jp z,@fractional_start ; jump to fractional part
0B01C2             0202*  
0B01C2             0203*  ; process integer part
0B01C2 D6 30       0204*      sub '0' ; normalise to 0
0B01C4 38 19       0205*      jr c, @integer_end ; return if < ascii '0'
0B01C6 FE 0A       0206*      cp 10 ; check if >= 10
0B01C8 30 15       0207*      jr nc, @integer_end ; return if >= 10
0B01CA E5          0208*      push hl ; stack hl
0B01CB D5          0209*      push de ; ld hl, de
0B01CC E1          0210*      pop hl
0B01CD E5          0211*      push hl ; ld bc, hl
0B01CE C1          0212*      pop bc
0B01CF 29          0213*      add hl, hl ; x 2
0B01D0 29          0214*      add hl, hl ; x 4
0B01D1 09          0215*      add hl, bc ; x 5
0B01D2 29          0216*      add hl, hl ; x 10
0B01D3 01 00 00 00 0217*      ld bc, 0
0B01D7 4F          0218*      ld c, a ; ld bcu, a
0B01D8 09          0219*      add hl, bc ; add bcu to hl
0B01D9 E5          0220*      push hl ; ld de, hl
0B01DA D1          0221*      pop de
0B01DB E1          0222*      pop hl ; restore hl
0B01DC 23          0223*      inc hl
0B01DD 18 DC       0224*      jr @loop
0B01DF             0225*  
0B01DF             0226*  @integer_end:
0B01DF ED 53 2E 02 0227*      ld (@result+1), de      ; Store integer part in result buffer (shifted up one byte)
       0B          
0B01E4             0228*  
0B01E4             0229*  @end:
0B01E4 C1          0230*      pop bc ; send bc back how she came in
0B01E5 ED 5B 2D 02 0231*      ld de,(@result) ; will contain shifted integer part combined with any fractional value
       0B          
0B01EA 3A 31 02 0B 0232*      ld a, (@sign) ; get sign flag
0B01EE 3D          0233*      dec a ; check if negative
0B01EF F2 FD 01 0B 0234*      jp p,@pos ; positive number
0B01F3             0235*  
0B01F3             0236*  ; Negate de
0B01F3 E5          0237*      push hl ; save text pointer
0B01F4 21 00 00 00 0238*      ld hl, 0
0B01F8 AF          0239*      xor a ; clear carry
0B01F9 ED 52       0240*      sbc hl, de ; subtract DE from HL
0B01FB EB          0241*      ex de, hl ; DE = 0-HL
0B01FC E1          0242*      pop hl ; restore text pointer
0B01FD             0243*  
0B01FD             0244*  @pos:
0B01FD 37          0245*      scf ; we have a valid number so set carry
0B01FE C9          0246*      ret
0B01FF             0247*  
0B01FF             0248*  @fractional_start:
0B01FF ED 53 2E 02 0249*      ld (@result+1), de      ; Store integer part in result buffer (shifted up one byte)
       0B          
0B0204 06 03       0250*      ld b, 3                 ; Set loop counter to 3 for three fractional digits
0B0206 DD 21 32 02 0251*      ld ix, powers_of_10     ; Point IX to lookup table for powers of 10
       0B          
0B020B 23          0252*      inc hl                 ; Skip decimal point
0B020C             0253*  
0B020C             0254*  @fractional_loop:
0B020C 7E          0255*      ld a, (hl)              ; Load next character
0B020D D6 30       0256*      sub '0'                 ; Normalize ASCII to decimal
0B020F 38 13       0257*      jr c, @end_fraction     ; Exit if < '0'
0B0211 FE 0A       0258*      cp 10
0B0213 30 0F       0259*      jr nc, @end_fraction    ; Exit if >= 10
0B0215             0260*  
0B0215             0261*      ; Load current digit into D for multiplication
0B0215 57          0262*      ld d, a                 ; Set D to current digit
0B0216             0263*  
0B0216             0264*      ; Load current power of 10 into E using IX as the pointer
0B0216 DD 5E 00    0265*      ld e, (ix)              ; Load current power of 10 (scaled by 256) into E
0B0219 ED 5C       0266*      mlt de                  ; Multiply DE by the current power of 10 in E
0B021B             0267*  
0B021B             0268*      ; Add scaled digit to fractional accumulator in E
0B021B 7B          0269*      ld a, e                 ; Move E to A
0B021C 81          0270*      add a, c                ; Add scaled digit
0B021D 5F          0271*      ld e, a                 ; Update E with the result
0B021E             0272*  
0B021E             0273*      ; Advance to next power of 10 in lookup table
0B021E ED 32 01    0274*      lea ix, ix+1            ; Move IX to the next table entry
0B0221             0275*  
0B0221             0276*      ; Move to the next character in the string
0B0221 23          0277*      inc hl
0B0222 10 E8       0278*      djnz @fractional_loop   ; Decrement B and loop if more digits remain
0B0224             0279*  
0B0224             0280*  @end_fraction:
0B0224 7B          0281*      ld a,e ; Load fractional part into A
0B0225 32 2D 02 0B 0282*      ld (@result),a ; Store fractional part in result buffer
0B0229 C3 E4 01 0B 0283*      jp @end ; do the final sign check and set flags for return
0B022D             0284*  
0B022D             0285*  @result: ds 4 ; 32-bit result buffer so we can shift the integer part up one byte
0B0231 00          0286*  @sign: db 0 ; sign flag buffer
0B0232             0287*  
0B0232             0288*  powers_of_10:
0B0232 19          0289*      db 25  ; 1/10 * 256 (rounded)
0B0233 03          0290*      db 3   ; 1/100 * 256 (rounded)
0B0234 01          0291*      db 1   ; 1/1000 * 256 (rounded)
0B0235             0017   
0B0235             0018   ; API INCLUDES
0B0235             0019       include "../moslets/functions.inc"
0B0235             0001*      MACRO printChar char
0B0235             0002*          LD A, char
0B0235             0003*          RST.LIL 10h
0B0235             0004*      ENDMACRO
0B0235             0005*  
0B0235             0006*  ; test the sign of HL
0B0235             0007*  ; inputs: HL obviously
0B0235             0008*  ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
0B0235             0009*  ; destroys: flags
0B0235             0010*      MACRO signHL
0B0235             0011*          add hl,de
0B0235             0012*          or a
0B0235             0013*          sbc hl,de
0B0235             0014*      ENDMACRO
0B0235             0015*  
0B0235             0016*  ; Simulated call to subroutine at HL
0B0235             0017*  ; inputs: HL pointing to the subroutine address plus whatever the called function expects
0B0235             0018*  ; outputs: whatever the subroutine does, including HL and BC
0B0235             0019*  ; destroys: only what the subroutine does, but always BC
0B0235             0020*      MACRO callHL
0B0235             0021*          ld bc,$+7     ; Address of first instruction after the jump
0B0235             0022*          push bc       ; which constitutes the return address
0B0235             0023*          jp   (hl)     ; Jump to the address in HL
0B0235             0024*      ENDMACRO
0B0235             0025*  
0B0235             0026*  ; Simulated call to subroutine at IX
0B0235             0027*  ; inputs: IX pointing to the subroutine address plus whatever the called function expects
0B0235             0028*  ; outputs: whatever the subroutine does, including IX and BC
0B0235             0029*  ; destroys: only what the subroutine does, but always BC
0B0235             0030*      MACRO callIX
0B0235             0031*          ld bc,$+7     ; Address of first instruction after the jump
0B0235             0032*          push bc       ; which constitutes the return address
0B0235             0033*          jp   (ix)     ; Jump to the address in IX
0B0235             0034*      ENDMACRO
0B0235             0035*  
0B0235             0036*  ; Simulated call to soubroutinte at IY
0B0235             0037*  ; inputs: IY pointing to the subroutine address plus whatever the called function expects
0B0235             0038*  ; outputs: whatever the subroutine does, including IY and BC
0B0235             0039*  ; destroys: only what the subroutine does, but always BC
0B0235             0040*      MACRO callIY
0B0235             0041*          ld bc,$+7     ; Address of first instruction after the jump
0B0235             0042*          push bc       ; which constitutes the return address
0B0235             0043*          jp   (iy)     ; Jump to the address in IY
0B0235             0044*      ENDMACRO
0B0235             0045*  
0B0235             0046*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
0B0235             0047*  ; Print a zero-terminated string
0B0235             0048*  ; HL: Pointer to string
0B0235             0049*  printString:
0B0235 C5          0050*  	PUSH	BC
0B0236 01 00 00 00 0051*  	LD		BC,0
0B023A 3E 00       0052*  	LD 	 	A,0
0B023C 5B DF       0053*  	RST.LIL 18h
0B023E C1          0054*  	POP		BC
0B023F C9          0055*  	RET
0B0240             0056*  ; print a VDU sequence
0B0240             0057*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
0B0240             0058*  sendVDUsequence:
0B0240 C5          0059*  	PUSH	BC
0B0241 01 00 00 00 0060*  	LD		BC, 0
0B0245 4E          0061*  	LD		C, (HL)
0B0246 5B DF       0062*  	RST.LIL	18h
0B0248 C1          0063*  	POP		BC
0B0249 C9          0064*  	RET
0B024A             0065*  ; Print Newline sequence to VDP
0B024A             0066*  printNewLine:
0B024A F5          0067*      push af ; for some reason rst.lil 10h sets carry flag
0B024B 3E 0D       0068*  	LD	A, '\r'
0B024D 5B D7       0069*  	RST.LIL 10h
0B024F 3E 0A       0070*  	LD	A, '\n'
0B0251 5B D7       0071*  	RST.LIL 10h
0B0253 F1          0072*      pop af
0B0254 C9          0073*  	RET
0B0255             0074*  ; Print a 24-bit HEX number
0B0255             0075*  ; HLU: Number to print
0B0255             0076*  printHex24:
0B0255 E5          0077*  	PUSH	HL
0B0256 21 02 00 00 0078*  	LD		HL, 2
0B025A 39          0079*  	ADD		HL, SP
0B025B 7E          0080*  	LD		A, (HL)
0B025C E1          0081*  	POP		HL
0B025D CD 67 02 0B 0082*  	CALL	printHex8
0B0261             0083*  ; Print a 16-bit HEX number
0B0261             0084*  ; HL: Number to print
0B0261             0085*  printHex16:
0B0261 7C          0086*  	LD		A,H
0B0262 CD 67 02 0B 0087*  	CALL	printHex8
0B0266 7D          0088*  	LD		A,L
0B0267             0089*  ; Print an 8-bit HEX number
0B0267             0090*  ; A: Number to print
0B0267             0091*  printHex8:
0B0267 4F          0092*  	LD		C,A
0B0268 1F          0093*  	RRA
0B0269 1F          0094*  	RRA
0B026A 1F          0095*  	RRA
0B026B 1F          0096*  	RRA
0B026C CD 71 02 0B 0097*  	CALL	@F
0B0270 79          0098*  	LD		A,C
0B0271             0099*  @@:
0B0271 E6 0F       0100*  	AND		0Fh
0B0273 C6 90       0101*  	ADD		A,90h
0B0275 27          0102*  	DAA
0B0276 CE 40       0103*  	ADC		A,40h
0B0278 27          0104*  	DAA
0B0279 5B D7       0105*  	RST.LIL	10h
0B027B C9          0106*  	RET
0B027C             0107*  
0B027C             0108*  ; Print a 0x HEX prefix
0B027C             0109*  DisplayHexPrefix:
0B027C 3E 30       0110*  	LD	A, '0'
0B027E 5B D7       0111*  	RST.LIL 10h
0B0280 3E 78       0112*  	LD	A, 'x'
0B0282 5B D7       0113*  	RST.LIL 10h
0B0284 C9          0114*  	RET
0B0285             0115*  
0B0285             0116*      MACRO printDecBC
0B0285             0117*          push hl
0B0285             0118*          push bc
0B0285             0119*          pop hl
0B0285             0120*          call printDec
0B0285             0121*          pop hl
0B0285             0122*      ENDMACRO
0B0285             0123*  
0B0285             0124*      MACRO printDecDE
0B0285             0125*          push hl
0B0285             0126*          push de
0B0285             0127*          pop hl
0B0285             0128*          call printDec
0B0285             0129*          pop hl
0B0285             0130*      ENDMACRO
0B0285             0131*  
0B0285             0132*      MACRO printDecHL
0B0285             0133*          call printDec
0B0285             0134*      ENDMACRO
0B0285             0135*  
0B0285             0136*      MACRO printDecIX
0B0285             0137*          push hl
0B0285             0138*          push ix
0B0285             0139*          pop hl
0B0285             0140*          call printDec
0B0285             0141*          pop hl
0B0285             0142*      ENDMACRO
0B0285             0143*  
0B0285             0144*      MACRO printDecIY
0B0285             0145*          push hl
0B0285             0146*          push iy
0B0285             0147*          pop hl
0B0285             0148*          call printDec
0B0285             0149*          pop hl
0B0285             0150*      ENDMACRO
0B0285             0151*  
0B0285             0152*  ; Prints the right justified decimal value in HL without leading zeroes
0B0285             0153*  ; HL : Value to print
0B0285             0154*  ; preserves all registers and flags
0B0285             0155*  printDec:
0B0285             0156*  ; BEGIN MY CODE
0B0285             0157*  ; back up all the things
0B0285 F5          0158*      push af
0B0286 C5          0159*      push bc
0B0287 D5          0160*      push de
0B0288 E5          0161*      push hl
0B0289             0162*  ; END MY CODE
0B0289 11 B1 02 0B 0163*  	LD	 DE, _printDecBuffer
0B028D CD BA 02 0B 0164*  	CALL Num2String
0B0291             0165*  ; BEGIN MY CODE
0B0291             0166*  ; replace leading zeroes with spaces
0B0291 21 B1 02 0B 0167*      LD	 HL, _printDecBuffer
0B0295 06 07       0168*      ld   B, 7 ; if HL was 0, we want to keep the final zero
0B0297             0169*  @loop:
0B0297 7E          0170*      LD	 A, (HL)
0B0298 FE 30       0171*      CP	 '0'
0B029A C2 A8 02 0B 0172*      JP	 NZ, @done
0B029E 3E 20       0173*      LD   A, ' '
0B02A0 77          0174*      LD	 (HL), A
0B02A1 23          0175*      INC	 HL
0B02A2 CD DD 07 0B 0176*      CALL vdu_cursor_forward
0B02A6 10 EF       0177*      DJNZ @loop
0B02A8             0178*  @done:
0B02A8             0179*  ; END MY CODE
0B02A8             0180*  	; LD	 HL, _printDecBuffer
0B02A8 CD 35 02 0B 0181*  	CALL printString
0B02AC             0182*  ; BEGIN MY CODE
0B02AC             0183*  ; restore all the things
0B02AC E1          0184*      pop hl
0B02AD D1          0185*      pop de
0B02AE C1          0186*      pop bc
0B02AF F1          0187*      pop af
0B02B0             0188*  ; END MY CODE
0B02B0 C9          0189*  	RET
0B02B1 00 00 00 00 0190*  _printDecBuffer: blkb 9,0 ; nine bytes full of zeroes
       00 00 00 00 
       00          
0B02BA             0191*  
0B02BA             0192*  ; This routine converts the value from HL into it's ASCII representation,
0B02BA             0193*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
0B02BA             0194*  ; so it will allways be 8 characters length
0B02BA             0195*  ; HL : Value to convert to string
0B02BA             0196*  ; DE : pointer to buffer, at least 8 byte + 0
0B02BA             0197*  Num2String:
0B02BA 01 80 69 67 0198*  	LD	 BC,-10000000
0B02BE CD F1 02 0B 0199*  	CALL OneDigit
0B02C2 01 C0 BD F0 0200*  	LD	 BC,-1000000
0B02C6 CD F1 02 0B 0201*  	CALL OneDigit
0B02CA 01 60 79 FE 0202*  	LD	 BC,-100000
0B02CE CD F1 02 0B 0203*  	CALL OneDigit
0B02D2 01 F0 D8 FF 0204*  	LD   BC,-10000
0B02D6 CD F1 02 0B 0205*  	CALL OneDigit
0B02DA 01 18 FC FF 0206*  	LD   BC,-1000
0B02DE CD F1 02 0B 0207*  	CALL OneDigit
0B02E2 01 9C FF FF 0208*  	LD   BC,-100
0B02E6 CD F1 02 0B 0209*  	CALL OneDigit
0B02EA 0E F6       0210*  	LD   C,-10
0B02EC CD F1 02 0B 0211*  	CALL OneDigit
0B02F0 48          0212*  	LD   C,B
0B02F1             0213*  OneDigit:
0B02F1 3E 2F       0214*  	LD   A,'0'-1
0B02F3             0215*  DivideMe:
0B02F3 3C          0216*  	INC  A
0B02F4 09          0217*  	ADD  HL,BC
0B02F5 38 FC       0218*  	JR   C,DivideMe
0B02F7 ED 42       0219*  	SBC  HL,BC
0B02F9 12          0220*  	LD   (DE),A
0B02FA 13          0221*  	INC  DE
0B02FB C9          0222*  	RET
0B02FC             0223*  
0B02FC             0224*  
0B02FC             0225*  ; #### new functions added by Brandon R. Gates ####
0B02FC             0226*  
0B02FC             0227*  ; print the binary representation of the 8-bit value in a
0B02FC             0228*  ; destroys a, hl, bc
0B02FC             0229*  printBin8:
0B02FC 06 08       0230*      ld b,8      ; loop counter for 8 bits
0B02FE 21 19 03 0B 0231*      ld hl,@cmd  ; set hl to the low byte of the output string
0B0302             0232*                  ; (which will be the high bit of the value in a)
0B0302             0233*  @loop:
0B0302 07          0234*      rlca ; put the next highest bit into carry
0B0303 38 04       0235*      jr c,@one
0B0305 36 30       0236*      ld (hl),'0'
0B0307 18 02       0237*      jr @next_bit
0B0309             0238*  @one:
0B0309 36 31       0239*      ld (hl),'1'
0B030B             0240*  @next_bit:
0B030B 23          0241*      inc hl
0B030C 10 F4       0242*      djnz @loop
0B030E             0243*  ; print it
0B030E 21 19 03 0B 0244*  	ld hl,@cmd
0B0312 01 08 00 00 0245*  	ld bc,@end-@cmd
0B0316 5B DF       0246*  	rst.lil $18
0B0318 C9          0247*  	ret
0B0319             0248*  @cmd: ds 8 ; eight bytes for eight bits
0B0321             0249*  @end:
0B0321             0250*  
0B0321             0251*  ; print the binary representation of the 8-bit value in a
0B0321             0252*  ; in reverse order (lsb first)
0B0321             0253*  ; destroys a, hl, bc
0B0321             0254*  printBin8Rev:
0B0321 06 08       0255*      ld b,8      ; loop counter for 8 bits
0B0323 21 3E 03 0B 0256*      ld hl,@cmd  ; set hl to the low byte of the output string
0B0327             0257*                  ; (which will be the high bit of the value in a)
0B0327             0258*  @loop:
0B0327 0F          0259*      rrca ; put the next lowest bit into carry
0B0328 38 04       0260*      jr c,@one
0B032A 36 30       0261*      ld (hl),'0'
0B032C 18 02       0262*      jr @next_bit
0B032E             0263*  @one:
0B032E 36 31       0264*      ld (hl),'1'
0B0330             0265*  @next_bit:
0B0330 23          0266*      inc hl
0B0331 10 F4       0267*      djnz @loop
0B0333             0268*  ; print it
0B0333 21 3E 03 0B 0269*  	ld hl,@cmd
0B0337 01 08 00 00 0270*  	ld bc,@end-@cmd
0B033B 5B DF       0271*  	rst.lil $18
0B033D C9          0272*  	ret
0B033E             0273*  @cmd: ds 8 ; eight bytes for eight bits
0B0346             0274*  @end:
0B0346             0275*  
0B0346             0276*  ; print registers to screen in hexidecimal format
0B0346             0277*  ; inputs: none
0B0346             0278*  ; outputs: values of every register printed to screen
0B0346             0279*  ;    values of each register in global scratch memory
0B0346             0280*  ; destroys: nothing
0B0346             0281*  stepRegistersHex:
0B0346             0282*  ; store everything in scratch
0B0346 22 33 05 0B 0283*      ld (uhl),hl
0B034A ED 43 36 05 0284*      ld (ubc),bc
       0B          
0B034F ED 53 39 05 0285*      ld (ude),de
       0B          
0B0354 DD 22 3C 05 0286*      ld (uix),ix
       0B          
0B0359 FD 22 3F 05 0287*      ld (uiy),iy
       0B          
0B035E F5          0288*      push af ; fml
0B035F E1          0289*      pop hl  ; thanks, zilog
0B0360 22 30 05 0B 0290*      ld (uaf),hl
0B0364 F5          0291*      push af ; dammit
0B0365             0292*  
0B0365             0293*  ; home the cursor
0B0365 CD BC 07 0B 0294*      call vdu_home_cursor
0B0369             0295*  
0B0369             0296*  ; print each register
0B0369 21 B6 04 0B 0297*      ld hl,str_afu
0B036D CD 35 02 0B 0298*      call printString
0B0371 2A 30 05 0B 0299*      ld hl,(uaf)
0B0375 CD 55 02 0B 0300*      call printHex24
0B0379 CD 4A 02 0B 0301*      call printNewLine
0B037D             0302*  
0B037D 21 BB 04 0B 0303*      ld hl,str_hlu
0B0381 CD 35 02 0B 0304*      call printString
0B0385 2A 33 05 0B 0305*      ld hl,(uhl)
0B0389 CD 55 02 0B 0306*      call printHex24
0B038D CD 4A 02 0B 0307*      call printNewLine
0B0391             0308*  
0B0391 21 C0 04 0B 0309*      ld hl,str_bcu
0B0395 CD 35 02 0B 0310*      call printString
0B0399 2A 36 05 0B 0311*      ld hl,(ubc)
0B039D CD 55 02 0B 0312*      call printHex24
0B03A1 CD 4A 02 0B 0313*      call printNewLine
0B03A5             0314*  
0B03A5 21 C5 04 0B 0315*      ld hl,str_deu
0B03A9 CD 35 02 0B 0316*      call printString
0B03AD 2A 39 05 0B 0317*      ld hl,(ude)
0B03B1 CD 55 02 0B 0318*      call printHex24
0B03B5 CD 4A 02 0B 0319*      call printNewLine
0B03B9             0320*  
0B03B9 21 CA 04 0B 0321*      ld hl,str_ixu
0B03BD CD 35 02 0B 0322*      call printString
0B03C1 2A 3C 05 0B 0323*      ld hl,(uix)
0B03C5 CD 55 02 0B 0324*      call printHex24
0B03C9 CD 4A 02 0B 0325*      call printNewLine
0B03CD             0326*  
0B03CD 21 CF 04 0B 0327*      ld hl,str_iyu
0B03D1 CD 35 02 0B 0328*      call printString
0B03D5 2A 3F 05 0B 0329*      ld hl,(uiy)
0B03D9 CD 55 02 0B 0330*      call printHex24
0B03DD CD 4A 02 0B 0331*      call printNewLine
0B03E1             0332*  
0B03E1             0333*      ; call vsync
0B03E1             0334*  
0B03E1 CD 4A 02 0B 0335*      call printNewLine
0B03E5             0336*  
0B03E5             0337*  ; check for right shift key and quit if pressed
0B03E5             0338*  	MOSCALL mos_getkbmap
0B03E5 3E 1E       0001*M 			LD	A, function
0B03E7 5B CF       0002*M 			RST.L	08h
0B03E9             0339*  @stayhere:
0B03E9             0340*  ; 7 RightShift
0B03E9 DD CB 00 76 0341*      bit 6,(ix+0)
0B03ED 20 02       0342*      jr nz,@RightShift
0B03EF 18 F8       0343*      jr @stayhere
0B03F1             0344*  @RightShift:
0B03F1 DD CB 0E 86 0345*      res 0,(ix+14) ; debounce the key (hopefully)
0B03F5 3E 80       0346*      ld a,%10000000
0B03F7 CD 9C 07 0B 0347*      call multiPurposeDelay
0B03FB             0348*  
0B03FB             0349*  ; restore everything
0B03FB 2A 33 05 0B 0350*      ld hl, (uhl)
0B03FF ED 4B 36 05 0351*      ld bc, (ubc)
       0B          
0B0404 ED 5B 39 05 0352*      ld de, (ude)
       0B          
0B0409 DD 2A 3C 05 0353*      ld ix, (uix)
       0B          
0B040E FD 2A 3F 05 0354*      ld iy, (uiy)
       0B          
0B0413 F1          0355*      pop af
0B0414             0356*  ; all done
0B0414 C9          0357*      ret
0B0415             0358*  
0B0415             0359*  ; print registers to screen in hexidecimal format
0B0415             0360*  ; inputs: none
0B0415             0361*  ; outputs: values of every register printed to screen
0B0415             0362*  ;    values of each register in global scratch memory
0B0415             0363*  ; destroys: nothing
0B0415             0364*  dumpRegistersHex:
0B0415             0365*  ; store everything in scratch
0B0415 22 33 05 0B 0366*      ld (uhl),hl
0B0419 ED 43 36 05 0367*      ld (ubc),bc
       0B          
0B041E ED 53 39 05 0368*      ld (ude),de
       0B          
0B0423 DD 22 3C 05 0369*      ld (uix),ix
       0B          
0B0428 FD 22 3F 05 0370*      ld (uiy),iy
       0B          
0B042D F5          0371*      push af ; fml
0B042E E1          0372*      pop hl  ; thanks, zilog
0B042F 22 30 05 0B 0373*      ld (uaf),hl
0B0433 F5          0374*      push af ; dammit
0B0434             0375*  
0B0434             0376*  ; home the cursor
0B0434             0377*      ; call vdu_home_cursor
0B0434             0378*      ; call printNewLine
0B0434             0379*  
0B0434             0380*  ; print each register
0B0434 21 B6 04 0B 0381*      ld hl,str_afu
0B0438 CD 35 02 0B 0382*      call printString
0B043C 2A 30 05 0B 0383*      ld hl,(uaf)
0B0440 CD 55 02 0B 0384*      call printHex24
0B0444             0385*      ; call printNewLine
0B0444             0386*  
0B0444 21 BB 04 0B 0387*      ld hl,str_hlu
0B0448 CD 35 02 0B 0388*      call printString
0B044C 2A 33 05 0B 0389*      ld hl,(uhl)
0B0450 CD 55 02 0B 0390*      call printHex24
0B0454             0391*      ; call printNewLine
0B0454             0392*  
0B0454 21 C0 04 0B 0393*      ld hl,str_bcu
0B0458 CD 35 02 0B 0394*      call printString
0B045C 2A 36 05 0B 0395*      ld hl,(ubc)
0B0460 CD 55 02 0B 0396*      call printHex24
0B0464             0397*      ; call printNewLine
0B0464             0398*  
0B0464 21 C5 04 0B 0399*      ld hl,str_deu
0B0468 CD 35 02 0B 0400*      call printString
0B046C 2A 39 05 0B 0401*      ld hl,(ude)
0B0470 CD 55 02 0B 0402*      call printHex24
0B0474             0403*      ; call printNewLine
0B0474             0404*  
0B0474 21 CA 04 0B 0405*      ld hl,str_ixu
0B0478 CD 35 02 0B 0406*      call printString
0B047C 2A 3C 05 0B 0407*      ld hl,(uix)
0B0480 CD 55 02 0B 0408*      call printHex24
0B0484             0409*      ; call printNewLine
0B0484             0410*  
0B0484 21 CF 04 0B 0411*      ld hl,str_iyu
0B0488 CD 35 02 0B 0412*      call printString
0B048C 2A 3F 05 0B 0413*      ld hl,(uiy)
0B0490 CD 55 02 0B 0414*      call printHex24
0B0494             0415*      ; call printNewLine
0B0494             0416*  
0B0494 CD 51 08 0B 0417*      call vdu_vblank
0B0498             0418*  
0B0498 CD 4A 02 0B 0419*      call printNewLine
0B049C             0420*  ; restore everything
0B049C 2A 33 05 0B 0421*      ld hl, (uhl)
0B04A0 ED 4B 36 05 0422*      ld bc, (ubc)
       0B          
0B04A5 ED 5B 39 05 0423*      ld de, (ude)
       0B          
0B04AA DD 2A 3C 05 0424*      ld ix, (uix)
       0B          
0B04AF FD 2A 3F 05 0425*      ld iy, (uiy)
       0B          
0B04B4 F1          0426*      pop af
0B04B5             0427*  ; all done
0B04B5 C9          0428*      ret
0B04B6             0429*  
0B04B6 20 61 66 3D 0430*  str_afu: db " af=",0
       00          
0B04BB 20 68 6C 3D 0431*  str_hlu: db " hl=",0
       00          
0B04C0 20 62 63 3D 0432*  str_bcu: db " bc=",0
       00          
0B04C5 20 64 65 3D 0433*  str_deu: db " de=",0
       00          
0B04CA 20 69 78 3D 0434*  str_ixu: db " ix=",0
       00          
0B04CF 20 69 79 3D 0435*  str_iyu: db " iy=",0
       00          
0B04D4             0436*  
0B04D4             0437*  ; print udeuhl to screen in hexidecimal format
0B04D4             0438*  ; inputs: none
0B04D4             0439*  ; outputs: concatenated hexidecimal udeuhl
0B04D4             0440*  ; destroys: nothing
0B04D4             0441*  dumpUDEUHLHex:
0B04D4             0442*  ; store everything in scratch
0B04D4 22 33 05 0B 0443*      ld (uhl),hl
0B04D8 ED 43 36 05 0444*      ld (ubc),bc
       0B          
0B04DD ED 53 39 05 0445*      ld (ude),de
       0B          
0B04E2 DD 22 3C 05 0446*      ld (uix),ix
       0B          
0B04E7 FD 22 3F 05 0447*      ld (uiy),iy
       0B          
0B04EC F5          0448*      push af
0B04ED             0449*  
0B04ED             0450*  ; print each register
0B04ED             0451*  
0B04ED 21 27 05 0B 0452*      ld hl,str_udeuhl
0B04F1 CD 35 02 0B 0453*      call printString
0B04F5 2A 39 05 0B 0454*      ld hl,(ude)
0B04F9 CD 55 02 0B 0455*      call printHex24
0B04FD 3E 2E       0456*  	ld a,'.'	; print a dot to separate the values
0B04FF 5B D7       0457*  	rst.lil 10h
0B0501 2A 33 05 0B 0458*      ld hl,(uhl)
0B0505 CD 55 02 0B 0459*      call printHex24
0B0509 CD 4A 02 0B 0460*      call printNewLine
0B050D             0461*  
0B050D             0462*  ; restore everything
0B050D 2A 33 05 0B 0463*      ld hl, (uhl)
0B0511 ED 4B 36 05 0464*      ld bc, (ubc)
       0B          
0B0516 ED 5B 39 05 0465*      ld de, (ude)
       0B          
0B051B DD 2A 3C 05 0466*      ld ix, (uix)
       0B          
0B0520 FD 2A 3F 05 0467*      ld iy, (uiy)
       0B          
0B0525 F1          0468*      pop af
0B0526             0469*  ; all done
0B0526 C9          0470*      ret
0B0527             0471*  
0B0527 75 64 65 2E 0472*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
0B0530             0473*  
0B0530             0474*  ; global scratch memory for registers
0B0530 00 00 00    0475*  uaf: dl 0
0B0533 00 00 00    0476*  uhl: dl 0
0B0536 00 00 00    0477*  ubc: dl 0
0B0539 00 00 00    0478*  ude: dl 0
0B053C 00 00 00    0479*  uix: dl 0
0B053F 00 00 00    0480*  uiy: dl 0
0B0542 00 00 00    0481*  usp: dl 0
0B0545 00 00 00    0482*  upc: dl 0
0B0548             0483*  
0B0548             0484*  ; inputs: whatever is in the flags register
0B0548             0485*  ; outputs: binary representation of flags
0B0548             0486*  ;          with a header so we know which is what
0B0548             0487*  ; destroys: nothing
0B0548             0488*  ; preserves: everything
0B0548             0489*  dumpFlags:
0B0548             0490*  ; first we curse zilog for not giving direct access to flags
0B0548 F5          0491*      push af ; this is so we can send it back unharmed
0B0549 F5          0492*      push af ; this is so we can pop it to hl
0B054A             0493*  ; store everything in scratch
0B054A 22 33 05 0B 0494*      ld (uhl),hl
0B054E ED 43 36 05 0495*      ld (ubc),bc
       0B          
0B0553 ED 53 39 05 0496*      ld (ude),de
       0B          
0B0558 DD 22 3C 05 0497*      ld (uix),ix
       0B          
0B055D FD 22 3F 05 0498*      ld (uiy),iy
       0B          
0B0562             0499*  ; next we print the header
0B0562 21 8E 05 0B 0500*      ld hl,@header
0B0566 CD 35 02 0B 0501*      call printString
0B056A E1          0502*      pop hl ; flags are now in l
0B056B 7D          0503*      ld a,l ; flags are now in a
0B056C CD FC 02 0B 0504*      call printBin8
0B0570 CD 4A 02 0B 0505*  	call printNewLine
0B0574             0506*  ; restore everything
0B0574 2A 33 05 0B 0507*      ld hl, (uhl)
0B0578 ED 4B 36 05 0508*      ld bc, (ubc)
       0B          
0B057D ED 5B 39 05 0509*      ld de, (ude)
       0B          
0B0582 DD 2A 3C 05 0510*      ld ix, (uix)
       0B          
0B0587 FD 2A 3F 05 0511*      ld iy, (uiy)
       0B          
0B058C F1          0512*      pop af ; send her home the way she came
0B058D C9          0513*      ret
0B058E             0514*  ; Bit 7 (S): Sign flag
0B058E             0515*  ; Bit 6 (Z): Zero flag
0B058E             0516*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0B058E             0517*  ; Bit 4 (H): Half Carry flag
0B058E             0518*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0B058E             0519*  ; Bit 2 (PV): Parity/Overflow flag
0B058E             0520*  ; Bit 1 (N): Subtract flag
0B058E             0521*  ; Bit 0 (C): Carry flag
0B058E 53 5A 78 48 0522*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0B0599             0523*  
0B0599             0524*  ; set all the bits in the flag register
0B0599             0525*  ; more of an academic exercise than anything useful
0B0599             0526*  ; inputs; none
0B0599             0527*  ; outputs; a=0,f=255
0B0599             0528*  ; destroys: flags, hl
0B0599             0529*  ; preserves: a, because why not
0B0599             0530*  setAllFlags:
0B0599 21 FF 00 00 0531*      ld hl,255
0B059D 67          0532*      ld h,a ; four cycles to preserve a is cheap
0B059E E5          0533*      push hl
0B059F F1          0534*      pop af
0B05A0 C9          0535*      ret
0B05A1             0536*  
0B05A1             0537*  ; reset all the bits in the flag register
0B05A1             0538*  ; unlike its inverse counterpart, this may actually be useful
0B05A1             0539*  ; inputs; none
0B05A1             0540*  ; outputs; a=0,f=0
0B05A1             0541*  ; destroys: flags, hl
0B05A1             0542*  ; preserves: a, because why not
0B05A1             0543*  resetAllFlags:
0B05A1 21 00 00 00 0544*      ld hl,0
0B05A5 67          0545*      ld h,a ; four cycles to preserve a is cheap
0B05A6 E5          0546*      push hl
0B05A7 F1          0547*      pop af
0B05A8 C9          0548*      ret
0B05A9             0549*  
0B05A9             0550*  ; wait until user presses a key
0B05A9             0551*  ; inputs: none
0B05A9             0552*  ; outputs: none
0B05A9             0553*  ; destroys: af,ix
0B05A9             0554*  waitKeypress:
0B05A9             0555*      MOSCALL mos_sysvars
0B05A9 3E 08       0001*M 			LD	A, function
0B05AB 5B CF       0002*M 			RST.L	08h
0B05AD AF          0556*      xor a ; zero out any prior keypresses
0B05AE DD 77 05    0557*      ld (ix+sysvar_keyascii),a
0B05B1             0558*  @loop:
0B05B1 DD 7E 05    0559*      ld a,(ix+sysvar_keyascii)
0B05B4 A7          0560*      and a
0B05B5 C0          0561*      ret nz
0B05B6 18 F9       0562*      jr @loop
0B05B8             0563*  
0B05B8             0564*  
0B05B8             0565*  ; print bytes from an address to the screen in hexidecimal format
0B05B8             0566*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0B05B8             0567*  ; outputs: values of each byte printed to screen separated by spaces
0B05B8             0568*  ; destroys: nothing
0B05B8             0569*  dumpMemoryHex:
0B05B8             0570*  ; save registers to the stack
0B05B8 C5          0571*      push bc
0B05B9 E5          0572*      push hl
0B05BA F5          0573*      push af
0B05BB             0574*  
0B05BB             0575*  ; print the address and separator
0B05BB CD 55 02 0B 0576*      call printHex24
0B05BF 3E 3A       0577*      ld a,':'
0B05C1 5B D7       0578*      rst.lil 10h
0B05C3 3E 20       0579*      ld a,' '
0B05C5 5B D7       0580*      rst.lil 10h
0B05C7             0581*  
0B05C7             0582*  ; set b to be our loop counter
0B05C7 F1          0583*      pop af
0B05C8 47          0584*      ld b,a
0B05C9 E1          0585*      pop hl
0B05CA E5          0586*      push hl
0B05CB F5          0587*      push af
0B05CC             0588*  @loop:
0B05CC             0589*  ; print the byte
0B05CC 7E          0590*      ld a,(hl)
0B05CD CD 67 02 0B 0591*      call printHex8
0B05D1             0592*  ; print a space
0B05D1 3E 20       0593*      ld a,' '
0B05D3 5B D7       0594*      rst.lil 10h
0B05D5 23          0595*      inc hl
0B05D6 10 F4       0596*      djnz @loop
0B05D8             0597*      ; call printNewLine
0B05D8             0598*  
0B05D8             0599*  ; restore everything
0B05D8 F1          0600*      pop af
0B05D9 E1          0601*      pop hl
0B05DA C1          0602*      pop bc
0B05DB             0603*  
0B05DB             0604*  ; all done
0B05DB C9          0605*      ret
0B05DC             0606*  
0B05DC             0607*  
0B05DC             0608*  ; print bytes from an address to the screen in binary format
0B05DC             0609*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0B05DC             0610*  ; outputs: values of each byte printed to screen separated by spaces
0B05DC             0611*  ; destroys: nothing
0B05DC             0612*  dumpMemoryBin:
0B05DC             0613*  ; save all registers to the stack
0B05DC F5          0614*      push af
0B05DD C5          0615*      push bc
0B05DE D5          0616*      push de
0B05DF E5          0617*      push hl
0B05E0 DD E5       0618*      push ix
0B05E2 FD E5       0619*      push iy
0B05E4             0620*  
0B05E4             0621*  ; set b to be our loop counter
0B05E4 47          0622*      ld b,a
0B05E5             0623*  @loop:
0B05E5             0624*  ; print the byte
0B05E5 7E          0625*      ld a,(hl)
0B05E6 E5          0626*      push hl
0B05E7 C5          0627*      push bc
0B05E8 CD FC 02 0B 0628*      call printBin8
0B05EC C1          0629*      pop bc
0B05ED             0630*  ; print a space
0B05ED 3E 20       0631*      ld a,' '
0B05EF 5B D7       0632*      rst.lil 10h
0B05F1 E1          0633*      pop hl
0B05F2 23          0634*      inc hl
0B05F3 10 F0       0635*      djnz @loop
0B05F5 CD 4A 02 0B 0636*      call printNewLine
0B05F9             0637*  
0B05F9             0638*  ; restore everything
0B05F9 FD E1       0639*      pop iy
0B05FB DD E1       0640*      pop ix
0B05FD E1          0641*      pop hl
0B05FE D1          0642*      pop de
0B05FF C1          0643*      pop bc
0B0600 F1          0644*      pop af
0B0601             0645*  ; all done
0B0601 C9          0646*      ret
0B0602             0647*  
0B0602             0648*  ; print bytes from an address to the screen in binary format
0B0602             0649*  ; with the bits of each byte in reverse order (lsb first)
0B0602             0650*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0B0602             0651*  ; outputs: values of each byte printed to screen separated by spaces
0B0602             0652*  ; destroys: nothing
0B0602             0653*  dumpMemoryBinRev:
0B0602             0654*  ; save all registers to the stack
0B0602 F5          0655*      push af
0B0603 C5          0656*      push bc
0B0604 D5          0657*      push de
0B0605 E5          0658*      push hl
0B0606 DD E5       0659*      push ix
0B0608 FD E5       0660*      push iy
0B060A             0661*  
0B060A             0662*  ; set b to be our loop counter
0B060A 47          0663*      ld b,a
0B060B             0664*  @loop:
0B060B             0665*  ; print the byte
0B060B 7E          0666*      ld a,(hl)
0B060C E5          0667*      push hl
0B060D C5          0668*      push bc
0B060E CD 21 03 0B 0669*      call printBin8Rev
0B0612 C1          0670*      pop bc
0B0613             0671*  ; print a space
0B0613 3E 20       0672*      ld a,' '
0B0615 5B D7       0673*      rst.lil 10h
0B0617 E1          0674*      pop hl
0B0618 23          0675*      inc hl
0B0619 10 F0       0676*      djnz @loop
0B061B CD 4A 02 0B 0677*      call printNewLine
0B061F             0678*  
0B061F             0679*  ; restore everything
0B061F FD E1       0680*      pop iy
0B0621 DD E1       0681*      pop ix
0B0623 E1          0682*      pop hl
0B0624 D1          0683*      pop de
0B0625 C1          0684*      pop bc
0B0626 F1          0685*      pop af
0B0627             0686*  ; all done
0B0627 C9          0687*      ret
0B0628             0020       include "../moslets/files.inc"
0B0628             0001*  ; load to onboard 8k sram
0B0628             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
0B0628             0021       include "../moslets/timer.inc"
0B0628             0001*  ; Table 32. Timer Control Registers
0B0628             0002*  ; this constant is the base address of the timer control registers
0B0628             0003*  ; each timer takes three bytes:
0B0628             0004*  ;   0: control register
0B0628             0005*  ;   1: low byte of timer reset value
0B0628             0006*  ;   2: high byte of timer reset value
0B0628             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0B0628             0008*  ; which correctly force the high and upper bytes of the address bus to zero
0B0628             0009*  TMR_CTL:     equ 80h
0B0628             0010*  
0B0628             0011*  ; Timer Control Register Bit Definitions
0B0628             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0B0628             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
0B0628             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0B0628             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
0B0628             0016*                              ; the TMRx_CTL register is read.
0B0628             0017*  
0B0628             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0B0628             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0B0628             0020*  
0B0628             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0B0628             0022*                              ;  0,and counting stops when the end-of-count value is reached.
0B0628             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0B0628             0024*                              ; written to the counter when the end-of-count value is reached.
0B0628             0025*  
0B0628             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0B0628             0027*  CLK_DIV_256:  equ %00001100 ;
0B0628             0028*  CLK_DIV_64:   equ %00001000 ;
0B0628             0029*  CLK_DIV_16:   equ %00000100 ;
0B0628             0030*  CLK_DIV_4:    equ %00000000 ;
0B0628             0031*  
0B0628             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0B0628             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0B0628             0034*                              ; When a 1 is written to this bit,the values in the reload registers
0B0628             0035*                              ;  are loaded into the downcounter when the timer restarts. The
0B0628             0036*                              ; programmer must ensure that this bit is set to 1 each time
0B0628             0037*                              ; SINGLE-PASS mode is used.
0B0628             0038*  
0B0628             0039*  ; disable/enable the programmable reload timer
0B0628             0040*  PRT_EN_0:     equ %00000000 ;
0B0628             0041*  PRT_EN_1:     equ %00000001 ;
0B0628             0042*  
0B0628             0043*  ; Table 37. Timer Input Source Select Register
0B0628             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
0B0628             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0B0628             0046*  ;   00: System clock / CLK_DIV
0B0628             0047*  ;   01: RTC / CLK_DIV
0B0628             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
0B0628             0049*  ;   10: GPIO port B pin 1.
0B0628             0050*  ;   11: GPIO port B pin 1.
0B0628             0051*  TMR_ISS:   equ 92h ; register address
0B0628             0052*  
0B0628             0053*  ; Table 51. Real-Time Clock Control Register
0B0628             0054*  RTC_CTRL: equ EDh ; register address
0B0628             0055*  
0B0628             0056*  ; alarm interrupt disable/enable
0B0628             0057*  RTC_ALARM_0:    equ %00000000
0B0628             0058*  RTC_ALARM_1:    equ %10000000
0B0628             0059*  
0B0628             0060*  ; interrupt on alarm disable/enable
0B0628             0061*  RTC_INT_ENT_0:  equ %00000000
0B0628             0062*  RTC_INT_ENT_1:  equ %01000000
0B0628             0063*  
0B0628             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0B0628             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0B0628             0066*  
0B0628             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0B0628             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
0B0628             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0B0628             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
0B0628             0071*  
0B0628             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0B0628             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0B0628             0074*  
0B0628             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0B0628             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0B0628             0077*  
0B0628             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0B0628             0079*                                  ; RTC counter is enabled.
0B0628             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0B0628             0081*                                  ; RTC counter is disabled.
0B0628             0082*  
0B0628             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0B0628             0084*  
0B0628             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0B0628             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0B0628 00 00 00    0087*  prt_reload: dl 0x000000
0B062B             0088*  
0B062B             0089*  ; ; returns: a = 0 if running on hardware,1 if running on emulator
0B062B             0090*  ; ;          de = number PRT interrupts during test interval
0B062B             0091*  ; prt_calibrate:
0B062B             0092*  ;     call vdu_vblank
0B062B             0093*  ; ; set a MOS timer
0B062B             0094*  ;     ld hl,120*1 ; 1 second
0B062B             0095*  ;     ld iy,tmr_test
0B062B             0096*  ;     call tmr_set
0B062B             0097*  ; ; set a PRT timer
0B062B             0098*  ;     ; ld hl,prt_reload_hardware
0B062B             0099*  ;     ; ld hl,prt_reload_emulator
0B062B             0100*  ;     ld hl,prt_reload_emulator + prt_reload_hardware / 2
0B062B             0101*  ;     ld (prt_reload),hl
0B062B             0102*  ;     call prt_set
0B062B             0103*  ; @loop:
0B062B             0104*  ; ; check time remaining on MOS timer
0B062B             0105*  ;     call tmr_get
0B062B             0106*  ;     jp z,@done ; time expired,so quit
0B062B             0107*  ;     jp m,@done ; time past expiration (negative),so quit
0B062B             0108*  ;     jr @loop
0B062B             0109*  ; @done:
0B062B             0110*  ;     ld de,(prt_irq_counter)
0B062B             0111*  ;     ld bc,prt_reload_hardware ; default value for running on hardware
0B062B             0112*  ;     ld (prt_reload),bc
0B062B             0113*  ;     ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
0B062B             0114*  ;     xor a ; clear carry,zero is default value for running on hardware
0B062B             0115*  ;     ld (is_emulator),a
0B062B             0116*  ;     sbc hl,de
0B062B             0117*  ;     ld hl,on_hardware ; default message for running on hardware
0B062B             0118*  ;     jp z,prt_calibrate ; zero result is indeterminate so we try again
0B062B             0119*  ;     ret m ; negative result means we're on hardware
0B062B             0120*  ;     inc a ; we're on emulator
0B062B             0121*  ;     ld (is_emulator),a
0B062B             0122*  ;     ld bc,prt_reload_emulator
0B062B             0123*  ;     ld (prt_reload),bc
0B062B             0124*  ;     ld hl,on_emulator
0B062B             0125*  ;     ret
0B062B             0126*  
0B062B             0127*  ; calibrating_timer: defb "Calibrating timer\r\n",0
0B062B             0128*  
0B062B             0129*  ; set PRT timer
0B062B             0130*  prt_set:
0B062B 21 00 00 00 0131*      ld hl,0
0B062F 22 79 06 0B 0132*      ld (prt_irq_counter),hl
0B0633 2A 28 06 0B 0133*      ld hl,(prt_reload)
0B0637 ED 29 84    0134*      out0 ($84),l
0B063A ED 21 85    0135*  	out0 ($85),h
0B063D             0136*  ; disable timer
0B063D 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0B063F ED 39 83    0138*  	out0 ($83),a
0B0642             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0B0642 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0B0644 ED 39 83    0141*  	out0 ($83),a
0B0647 C9          0142*      ret
0B0648             0143*  
0B0648             0144*  ; ===============================================
0B0648             0145*  ; PRT Timer Interrupt Handling
0B0648             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0B0648             0147*  ; -----------------------------------------------
0B0648             0148*  prt_irq_init:
0B0648             0149*      ; set up interrupt vector table 2
0B0648 21 00 00 00 0150*  	ld hl,0
0B064C 3A 0C 01 00 0151*  	ld a,($10c)
0B0650 6F          0152*  	ld l,a
0B0651 3A 0D 01 00 0153*  	ld a,($10d)
0B0655 67          0154*  	ld h,a
0B0656             0155*  
0B0656             0156*  	; skip over CALL ($c3)
0B0656 23          0157*  	inc hl
0B0657             0158*  	; load address of jump into vector table 2 (in ram)
0B0657 ED 27       0159*  	ld hl,(hl)
0B0659             0160*  
0B0659             0161*  	; write CALL prt_irq_handler to vector table 2
0B0659 3E C3       0162*  	ld a,$c3
0B065B 77          0163*  	ld (hl),a
0B065C 23          0164*  	inc hl
0B065D 11 64 06 0B 0165*  	ld de,prt_irq_handler
0B0661 ED 1F       0166*  	ld (hl),de
0B0663             0167*  
0B0663 C9          0168*      ret
0B0664             0169*  
0B0664             0170*  prt_irq_handler:
0B0664 F3          0171*  	di
0B0665 F5          0172*  	push af
0B0666 E5          0173*      push hl
0B0667 ED 38 83    0174*  	in0 a,($83)
0B066A 2A 79 06 0B 0175*  	ld hl,(prt_irq_counter)
0B066E 23          0176*  	inc hl
0B066F 22 79 06 0B 0177*  	ld (prt_irq_counter),hl
0B0673 E1          0178*      pop hl
0B0674 F1          0179*  	pop af
0B0675 FB          0180*  	ei
0B0676 5B ED 4D    0181*  	reti.l
0B0679             0182*  
0B0679             0183*  prt_irq_counter:
0B0679 00 00 00    0184*  	.dl 0
0B067C             0185*  prt_irq_counter_saved:
0B067C 00 00 00    0186*      .dl 0
0B067F             0187*  
0B067F             0188*  prt_loop_reset:
0B067F E5          0189*      push hl
0B0680 21 00 00 00 0190*  	ld hl,0
0B0684 22 79 06 0B 0191*  	ld (prt_irq_counter),hl
0B0688 22 EA 06 0B 0192*      ld (prt_loop_counter),hl
0B068C 22 ED 06 0B 0193*      ld (prt_loops),hl
0B0690 CD 2B 06 0B 0194*      call prt_set
0B0694 E1          0195*      pop hl
0B0695 C9          0196*      ret
0B0696             0197*  
0B0696             0198*  prt_loop_start:
0B0696 E5          0199*      push hl
0B0697 21 00 00 00 0200*  	ld hl,0
0B069B 22 79 06 0B 0201*  	ld (prt_irq_counter),hl
0B069F E1          0202*      pop hl
0B06A0 C9          0203*      ret
0B06A1             0204*  
0B06A1             0205*  prt_loop_stop:
0B06A1 E5          0206*      push hl
0B06A2 D5          0207*      push de
0B06A3 2A 79 06 0B 0208*      ld hl,(prt_irq_counter)
0B06A7 ED 5B EA 06 0209*      ld de,(prt_loop_counter)
       0B          
0B06AC 19          0210*      add hl,de
0B06AD 22 EA 06 0B 0211*      ld (prt_loop_counter),hl
0B06B1 21 00 00 00 0212*      ld hl,0
0B06B5 22 79 06 0B 0213*      ld (prt_irq_counter),hl
0B06B9 2A ED 06 0B 0214*      ld hl,(prt_loops)
0B06BD 23          0215*      inc hl
0B06BE 22 ED 06 0B 0216*      ld (prt_loops),hl
0B06C2 D1          0217*      pop de
0B06C3 E1          0218*      pop hl
0B06C4 C9          0219*      ret
0B06C5             0220*  
0B06C5             0221*  ; inputs: bc = y,x text coordinates to print
0B06C5             0222*  prt_loop_print:
0B06C5 F5          0223*      push af
0B06C6 E5          0224*      push hl
0B06C7 C5          0225*      push bc
0B06C8 D5          0226*      push de
0B06C9 DD E5       0227*      push ix
0B06CB FD E5       0228*      push iy
0B06CD CD E2 07 0B 0229*      call vdu_move_cursor
0B06D1             0230*  
0B06D1 2A EA 06 0B 0231*      ld hl,(prt_loop_counter)
0B06D5 CD 85 02 0B 0232*      call printDec
0B06D9             0233*  
0B06D9 2A ED 06 0B 0234*      ld hl,(prt_loops)
0B06DD CD 85 02 0B 0235*      call printDec
0B06E1             0236*  
0B06E1 FD E1       0237*      pop iy
0B06E3 DD E1       0238*      pop ix
0B06E5 D1          0239*      pop de
0B06E6 C1          0240*      pop bc
0B06E7 E1          0241*      pop hl
0B06E8 F1          0242*      pop af
0B06E9 C9          0243*      ret
0B06EA             0244*  
0B06EA             0245*  prt_loop_counter:
0B06EA 00 00 00    0246*      .dl 0
0B06ED             0247*  prt_loops:
0B06ED 00 00 00    0248*      .dl 0
0B06F0             0249*  
0B06F0             0250*  ; ===============================================
0B06F0             0251*  ; Timer functions
0B06F0             0252*  ; -----------------------------------------------
0B06F0             0253*  ; set a countdown timer
0B06F0             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B06F0             0255*  ; returns: hl = current time
0B06F0             0256*  tmr_set:
0B06F0 FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
0B06F3             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
0B06F3 3E 08       0001*M 			LD	A, function
0B06F5 5B CF       0002*M 			RST.L	08h
0B06F7 DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
0B06FA FD 2F 00    0260*      ld (iy+0),hl            ; set start time
0B06FD C9          0261*      ret
0B06FE             0262*  
0B06FE             0263*  ; gets time remaining on a countdown timer
0B06FE             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B06FE             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0B06FE             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
0B06FE             0267*  tmr_get:
0B06FE             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
0B06FE 3E 08       0001*M 			LD	A, function
0B0700 5B CF       0002*M 			RST.L	08h
0B0702 DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
0B0705 FD 27 00    0270*      ld hl,(iy+0)            ; get start time
0B0708 AF          0271*      xor a                   ; clear carry
0B0709 ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0B070B FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
0B070E AF          0274*      xor a                   ; clear carry
0B070F ED 5A       0275*      adc hl,de               ; hl = time remaining
0B0711             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0B0711 C9          0277*      ret
0B0712             0278*  
0B0712 00 00 00    0279*  timestamp_now: dl 0
0B0715 00 00 00    0280*  timestamp_old: dl 0
0B0718 00 00 00    0281*  timestamp_chg: dl 0
0B071B             0282*  
0B071B             0283*  ; update the global timestamp from the system clock
0B071B             0284*  ; inputs: none
0B071B             0285*  ; returns: hl = time elapsed in 1/120ths of a second
0B071B             0286*  ;          de = current time
0B071B             0287*  ;          ix = pointer to syvars table
0B071B             0288*  ; destroys: af,hl,de,ix
0B071B             0289*  timestamp_tick:
0B071B ED 5B 12 07 0290*      ld de,(timestamp_now)   ; get previous time
       0B          
0B0720 ED 53 15 07 0291*      ld (timestamp_old),de   ; save previous time
       0B          
0B0725             0292*      MOSCALL mos_sysvars     ; ix points to syvars table
0B0725 3E 08       0001*M 			LD	A, function
0B0727 5B CF       0002*M 			RST.L	08h
0B0729 DD 27 00    0293*      ld hl,(ix+sysvar_time)  ; get current time
0B072C 22 12 07 0B 0294*      ld (timestamp_now),hl   ; save current time
0B0730 AF          0295*      xor a                   ; clear carry
0B0731 ED 52       0296*      sbc hl,de               ; hl = time elapsed
0B0733 22 18 07 0B 0297*      ld (timestamp_chg),hl   ; save elapsed time
0B0737 C9          0298*      ret
0B0738             0299*  
0B0738             0300*  ; set a countdown timer
0B0738             0301*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B0738             0302*  ; requires: timestamp_tick to be called at least once before this function
0B0738             0303*  ; returns: hl = current time
0B0738             0304*  ; destroys: hl
0B0738             0305*  timestamp_tmr_set:
0B0738 FD 2F 03    0306*      ld (iy+3),hl            ; set time remaining
0B073B 2A 12 07 0B 0307*      ld hl,(timestamp_now)   ; get current timestamp
0B073F FD 2F 00    0308*      ld (iy+0),hl            ; set start time
0B0742 C9          0309*      ret
0B0743             0310*  
0B0743             0311*  ; gets time remaining on a countdown timer following the global timestamp
0B0743             0312*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B0743             0313*  ; requires: timestamp_tick to be called at least once before this function
0B0743             0314*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0B0743             0315*  ;          sign flags: pos = time not expired,zero or neg = time expired
0B0743             0316*  ; destroys: af,hl,de
0B0743             0317*  timestamp_tmr_get:
0B0743 ED 5B 12 07 0318*      ld de,(timestamp_now)   ; get current timestamp
       0B          
0B0748 FD 27 00    0319*      ld hl,(iy+0)            ; get start time
0B074B AF          0320*      xor a                   ; clear carry
0B074C ED 52       0321*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0B074E FD 17 03    0322*      ld de,(iy+3)            ; get timer set value
0B0751 AF          0323*      xor a                   ; clear carry
0B0752 ED 5A       0324*      adc hl,de               ; hl = time remaining
0B0754             0325*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0B0754 C9          0326*      ret
0B0755             0327*  
0B0755             0328*  ; main loop timer functions
0B0755             0329*  tmr_main_loop: ds 6 ; buffer to hold main loop timer
0B075B             0330*  
0B075B             0331*  ; set a countdown timer for the main loop using the timestamp timer
0B075B             0332*  ; inputs: hl = time to set in 1/120ths of a second
0B075B             0333*  ; returns: hl = current time
0B075B             0334*  ; destroys: af,hl,de,ix,iy
0B075B             0335*  tmr_main_loop_set:
0B075B FD 21 55 07 0336*      ld iy,tmr_main_loop
       0B          
0B0760 FD 2F 03    0337*      ld (iy+3),hl ; set time remaining
0B0763 CD 1B 07 0B 0338*      call timestamp_tick
0B0767 2A 12 07 0B 0339*      ld hl,(timestamp_now)   ; get current timestamp
0B076B FD 2F 00    0340*      ld (iy+0),hl ; set start time
0B076E C9          0341*      ret
0B076F             0342*  
0B076F             0343*  ; gets time remaining on the main loop countdown timer following the global timestamp
0B076F             0344*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0B076F             0345*  ;          sign flags: pos = time not expired,zero or neg = time expired
0B076F             0346*  ; destroys: af,hl,de,ix,iy
0B076F             0347*  tmr_main_loop_get:
0B076F CD 1B 07 0B 0348*      call timestamp_tick
0B0773 FD 21 55 07 0349*      ld iy,tmr_main_loop
       0B          
0B0778 CD 43 07 0B 0350*      call timestamp_tmr_get
0B077C C9          0351*      ret
0B077D             0352*  
0B077D             0353*  ; set a stopwatch
0B077D             0354*  ; returns: hl = start time
0B077D             0355*  ; destroys: hl,ix
0B077D             0356*  stopwatch_set:
0B077D             0357*      MOSCALL mos_sysvars     ; ix points to syvars table
0B077D 3E 08       0001*M 			LD	A, function
0B077F 5B CF       0002*M 			RST.L	08h
0B0781 DD 27 00    0358*      ld hl,(ix+sysvar_time)  ; get current time
0B0784 22 99 07 0B 0359*      ld (stopwatch_started),hl            ; set start time
0B0788 C9          0360*      ret
0B0789             0361*  
0B0789             0362*  ; gets time elapsed on a stopwatch
0B0789             0363*  ; returns: hl = time elapsed in 1/120ths of a second
0B0789             0364*  ; destroys: af,hl,de,ix
0B0789             0365*  stopwatch_get:
0B0789             0366*      MOSCALL mos_sysvars     ; ix points to syvars table
0B0789 3E 08       0001*M 			LD	A, function
0B078B 5B CF       0002*M 			RST.L	08h
0B078D DD 27 00    0367*      ld hl,(ix+sysvar_time)  ; get current time
0B0790 ED 5B 99 07 0368*      ld de,(stopwatch_started)            ; get start time
       0B          
0B0795 AF          0369*      xor a                   ; clear carry
0B0796 ED 52       0370*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
0B0798 C9          0371*      ret
0B0799             0372*  
0B0799             0373*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
0B079C             0374*  
0B079C             0375*  ; ------------------
0B079C             0376*  ; delay routine
0B079C             0377*  ; Author: Richard Turrnidge
0B079C             0378*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
0B079C             0379*  ; routine waits a fixed time,then returns
0B079C             0380*  ; arrive with A =  the delay byte. One bit to be set only.
0B079C             0381*  ; eg. ld A,00000100b
0B079C             0382*  
0B079C             0383*  multiPurposeDelay:
0B079C F5          0384*      push af
0B079D C5          0385*      push bc
0B079E DD E5       0386*      push ix
0B07A0 47          0387*      ld b,a
0B07A1 3E 08       0388*      ld a,$08
0B07A3 5B CF       0389*      RST.LIL	08h                 ; get IX pointer to sysvars
0B07A5             0390*  
0B07A5             0391*  waitLoop:
0B07A5             0392*  
0B07A5 DD 7E 00    0393*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
0B07A8             0394*  
0B07A8             0395*                                  ;   we check if bit set is same as last time we checked.
0B07A8             0396*                                  ;   bit 0 - don't use
0B07A8             0397*                                  ;   bit 1 - changes 64 times per second
0B07A8             0398*                                  ;   bit 2 - changes 32 times per second
0B07A8             0399*                                  ;   bit 3 - changes 16 times per second
0B07A8             0400*  
0B07A8             0401*                                  ;   bit 4 - changes 8 times per second
0B07A8             0402*                                  ;   bit 5 - changes 4 times per second
0B07A8             0403*                                  ;   bit 6 - changes 2 times per second
0B07A8             0404*                                  ;   bit 7 - changes 1 times per second
0B07A8 A0          0405*      and b
0B07A9 4F          0406*      ld c,a
0B07AA 3A BB 07 0B 0407*      ld a,(oldTimeStamp)
0B07AE B9          0408*      cp c                        ; is A same as last value?
0B07AF 28 F4       0409*      jr z,waitLoop              ; loop here if it is
0B07B1 79          0410*      ld a,c
0B07B2 32 BB 07 0B 0411*      ld (oldTimeStamp),a        ; set new value
0B07B6             0412*  
0B07B6 DD E1       0413*      pop ix
0B07B8 C1          0414*      pop bc
0B07B9 F1          0415*      pop af
0B07BA C9          0416*      ret
0B07BB             0417*  
0B07BB 00          0418*  oldTimeStamp:   .db 00h
0B07BC             0022       include "../moslets/vdu.inc"
0B07BC             0001*  
0B07BC             0002*  ; VDU 30: Home cursor
0B07BC             0003*  vdu_home_cursor:
0B07BC 3E 1E       0004*      ld a,30
0B07BE 5B D7       0005*  	rst.lil $10
0B07C0 C9          0006*  	ret
0B07C1             0007*  
0B07C1             0008*  cursor_on:
0B07C1 21 CC 07 0B 0009*  	ld hl,@cmd
0B07C5 01 03 00 00 0010*  	ld bc,@end-@cmd
0B07C9 5B DF       0011*  	rst.lil $18
0B07CB C9          0012*  	ret
0B07CC             0013*  @cmd:
0B07CC 17 01 01    0014*  	db 23,1,1
0B07CF             0015*  @end:
0B07CF             0016*  
0B07CF             0017*  cursor_off:
0B07CF 21 DA 07 0B 0018*  	ld hl,@cmd
0B07D3 01 03 00 00 0019*  	ld bc,@end-@cmd
0B07D7 5B DF       0020*  	rst.lil $18
0B07D9 C9          0021*  	ret
0B07DA             0022*  @cmd:
0B07DA 17 01 00    0023*  	db 23,1,0
0B07DD             0024*  @end:
0B07DD             0025*  
0B07DD             0026*  ; VDU 9: Move cursor forward one character
0B07DD             0027*  vdu_cursor_forward:
0B07DD 3E 09       0028*      ld a,9
0B07DF 5B D7       0029*  	rst.lil $10
0B07E1 C9          0030*  	ret
0B07E2             0031*  
0B07E2             0032*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
0B07E2             0033*  ; inputs: c=x, b=y 8-bit unsigned integers
0B07E2             0034*  vdu_move_cursor:
0B07E2 ED 43 F3 07 0035*      ld (@x0),bc
       0B          
0B07E7 21 F2 07 0B 0036*  	ld hl,@cmd
0B07EB 01 03 00 00 0037*  	ld bc,@end-@cmd
0B07EF 5B DF       0038*  	rst.lil $18
0B07F1 C9          0039*  	ret
0B07F2 1F          0040*  @cmd: 	db 31
0B07F3 00          0041*  @x0:	db 0
0B07F4 00          0042*  @y0: 	db 0
0B07F5 00          0043*  @end: 	db 0 ; padding
0B07F6             0044*  
0B07F6             0045*  ; VDU 12: Clear text area (CLS)
0B07F6             0046*  vdu_cls:
0B07F6 3E 0C       0047*      ld a,12
0B07F8 5B D7       0048*  	rst.lil $10
0B07FA C9          0049*  	ret
0B07FB             0050*  
0B07FB             0051*  vdu_flip:
0B07FB 21 06 08 0B 0052*  	ld hl,@cmd
0B07FF 01 03 00 00 0053*  	ld bc,@end-@cmd
0B0803 5B DF       0054*  	rst.lil $18
0B0805 C9          0055*  	ret
0B0806 17 00 C3    0056*  @cmd: db 23,0,0xC3
0B0809             0057*  @end:
0B0809             0058*  
0B0809             0059*  ; VDU 16: Clear graphics area (CLG)
0B0809             0060*  vdu_clg:
0B0809 3E 10       0061*      ld a,16
0B080B 5B D7       0062*  	rst.lil $10
0B080D C9          0063*  	ret
0B080E             0064*  
0B080E             0065*  ; COLOUR MODES
0B080E             0066*  ; Mode	Effect
0B080E             0067*  ; 0	Set on-screen pixel to target colour value
0B080E             0068*  ; 1	OR value with the on-screen pixel
0B080E             0069*  ; 2	AND value with the on-screen pixel
0B080E             0070*  ; 3	XOR value with the on-screen pixel
0B080E             0071*  ; 4	Invert the on-screen pixel
0B080E             0072*  ; 5	No operation
0B080E             0073*  ; 6	AND the inverse of the specified colour with the on-screen pixel
0B080E             0074*  ; 7	OR the inverse of the specified colour with the on-screen pixel
0B080E             0075*  
0B080E             0076*  ; VDU 17, colour: Define text colour (COLOUR)
0B080E             0077*  vdu_colour_text:
0B080E 32 1E 08 0B 0078*  	ld (@arg),a
0B0812 21 1D 08 0B 0079*  	ld hl,@cmd
0B0816 01 02 00 00 0080*  	ld bc,@end-@cmd
0B081A 5B DF       0081*  	rst.lil $18
0B081C C9          0082*  	ret
0B081D 11          0083*  @cmd: db 17
0B081E 00          0084*  @arg: db 0
0B081F             0085*  @end:
0B081F             0086*  
0B081F             0087*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
0B081F             0088*  ; inputs: a=mode, c=colour (add 128 to set background colour)
0B081F             0089*  vdu_gcol:
0B081F 32 34 08 0B 0090*  	ld (@mode),a
0B0823 79          0091*      ld a,c
0B0824 32 35 08 0B 0092*      ld (@col),a
0B0828 21 33 08 0B 0093*  	ld hl,@cmd
0B082C 01 03 00 00 0094*  	ld bc,@end-@cmd
0B0830 5B DF       0095*  	rst.lil $18
0B0832 C9          0096*  	ret
0B0833 12          0097*  @cmd:  db 18
0B0834 00          0098*  @mode: db 0
0B0835 00          0099*  @col:  db 0
0B0836             0100*  @end:
0B0836             0101*  
0B0836             0102*  
0B0836             0103*  ; VDU 28, left, bottom, right, top: Set text viewport **
0B0836             0104*  ; MIND THE LITTLE-ENDIANESS
0B0836             0105*  ; inputs: c=left,b=bottom,e=right,d=top
0B0836             0106*  ; outputs; nothing
0B0836             0107*  ; destroys: a might make it out alive
0B0836             0108*  vdu_set_txt_viewport:
0B0836 ED 43 4C 08 0109*      ld (@lb),bc
       0B          
0B083B ED 53 4E 08 0110*  	ld (@rt),de
       0B          
0B0840 21 4B 08 0B 0111*  	ld hl,@cmd
0B0844 01 05 00 00 0112*  	ld bc,@end-@cmd
0B0848 5B DF       0113*  	rst.lil $18
0B084A C9          0114*  	ret
0B084B 1C          0115*  @cmd:   db 28 ; set text viewport command
0B084C 00 00       0116*  @lb: 	dw 0x0000 ; set by bc
0B084E 00 00       0117*  @rt: 	dw 0x0000 ; set by de
0B0850 00          0118*  @end:   db 0x00	  ; padding
0B0851             0119*  
0B0851             0120*  ; Wait for VBLANK interrupt
0B0851             0121*  vdu_vblank:
0B0851 DD E5       0122*      PUSH 	IX
0B0853             0123*  	MOSCALL	mos_sysvars
0B0853 3E 08       0001*M 			LD	A, function
0B0855 5B CF       0002*M 			RST.L	08h
0B0857 DD 7E 00    0124*  	LD	A, (IX + sysvar_time + 0)
0B085A             0125*  @wait:
0B085A DD BE 00    0126*      CP 	A, (IX + sysvar_time + 0)
0B085D 28 FB       0127*      JR	Z, @wait
0B085F DD E1       0128*      POP	IX
0B0861 C9          0129*      RET
0B0862             0130*  
0B0862             0131*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
0B0862             0132*  ; NOTE: the order of the y-coordinate parameters are inverted
0B0862             0133*  ; 	because we have turned off logical screen scaling
0B0862             0134*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
0B0862             0135*  ; outputs; nothing
0B0862             0136*  ; destroys: a might make it out alive
0B0862             0137*  vdu_set_gfx_viewport:
0B0862 ED 43 82 08 0138*      ld (@x0),bc
       0B          
0B0867 FD 22 84 08 0139*      ld (@y1),iy
       0B          
0B086C DD 22 86 08 0140*  	ld (@x1),ix
       0B          
0B0871 ED 53 88 08 0141*  	ld (@y0),de
       0B          
0B0876 21 81 08 0B 0142*  	ld hl,@cmd
0B087A 01 09 00 00 0143*  	ld bc,@end-@cmd
0B087E 5B DF       0144*  	rst.lil $18
0B0880 C9          0145*  	ret
0B0881 18          0146*  @cmd:   db 24 ; set graphics viewport command
0B0882 00 00       0147*  @x0: 	dw 0x0000 ; set by bc
0B0884 00 00       0148*  @y1: 	dw 0x0000 ; set by iy
0B0886 00 00       0149*  @x1: 	dw 0x0000 ; set by ix
0B0888 00 00       0150*  @y0: 	dw 0x0000 ; set by de
0B088A 00          0151*  @end:   db 0x00	  ; padding
0B088B             0152*  
0B088B             0153*  ; SCREEN MODES
0B088B             0154*  ; ===============================
0B088B             0155*  ; Mode  Horz  Vert  Cols  Refresh
0B088B             0156*  ; ---   ----  ----  ----  -------
0B088B             0157*  ; 11    320   240   2     60hz
0B088B             0158*  ; 139   320   240   2     60hz
0B088B             0159*  ; 23    512   384   2     60hz
0B088B             0160*  ; 151   512   384   2     60hz
0B088B             0161*  ; 6     640   240   2     60hz
0B088B             0162*  ; 134   640   240   2     60hz
0B088B             0163*  ; 2     640   480   2     60hz
0B088B             0164*  ; 130   640   480   2     60hz
0B088B             0165*  ; 17    800   600   2     60hz
0B088B             0166*  ; 145   800   600   2     60hz
0B088B             0167*  ; 18    1024  768   2     60hz
0B088B             0168*  ; 146   1024  768   2     60hz
0B088B             0169*  ; ---   ----  ----  ----  -------
0B088B             0170*  ; 10    320   240   4     60hz
0B088B             0171*  ; 138   320   240   4     60hz
0B088B             0172*  ; 22    512   384   4     60hz
0B088B             0173*  ; 150   512   384   4     60hz
0B088B             0174*  ; 5     640   240   4     60hz
0B088B             0175*  ; 133   640   240   4     60hz
0B088B             0176*  ; 1     640   480   4     60hz
0B088B             0177*  ; 129   640   480   4     60hz
0B088B             0178*  ; 16    800   600   4     60hz
0B088B             0179*  ; 19    1024  768   4     60hz
0B088B             0180*  ; ---   ----  ----  ----  -------
0B088B             0181*  ; 9     320   240   16    60hz
0B088B             0182*  ; 137   320   240   16    60hz
0B088B             0183*  ; 21    512   384   16    60hz
0B088B             0184*  ; 149   512   384   16    60hz
0B088B             0185*  ; 4     640   240   16    60hz
0B088B             0186*  ; 132   640   240   16    60hz
0B088B             0187*  ; 0     640   480   16    60hz
0B088B             0188*  ; 7     n/a   n/a   16    60hz
0B088B             0189*  ; ---   ----  ----  ----  -------
0B088B             0190*  ; 8     320   240   64    60hz
0B088B             0191*  ; 136   320   240   64    60hz
0B088B             0192*  ; 20    512   384   64    60hz
0B088B             0193*  ; 3     640   240   64    60hz
0B088B             0194*  ; ---   ----  ----  ----  -------
0B088B             0195*  vdu_set_screen_mode:
0B088B 32 9B 08 0B 0196*  	ld (@arg),a
0B088F 21 9A 08 0B 0197*  	ld hl,@cmd
0B0893 01 02 00 00 0198*  	ld bc,@end-@cmd
0B0897 5B DF       0199*  	rst.lil $18
0B0899 C9          0200*  	ret
0B089A 16          0201*  @cmd: db 22 ; set screen mode
0B089B 00          0202*  @arg: db 0  ; screen mode parameter
0B089C             0203*  @end:
0B089C             0204*  
0B089C             0205*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
0B089C             0206*  ; inputs: a is scaling mode, 1=on, 0=off
0B089C             0207*  ; note: default setting on boot is scaling ON
0B089C             0208*  vdu_set_scaling:
0B089C 32 AE 08 0B 0209*  	ld (@arg),a
0B08A0 21 AB 08 0B 0210*  	ld hl,@cmd
0B08A4 01 04 00 00 0211*  	ld bc,@end-@cmd
0B08A8 5B DF       0212*  	rst.lil $18
0B08AA C9          0213*  	ret
0B08AB 17 00 C0    0214*  @cmd: db 23,0,0xC0
0B08AE 00          0215*  @arg: db 0  ; scaling on/off
0B08AF             0216*  @end:
0B08AF             0217*  
0B08AF             0218*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
0B08AF             0219*  ; inputs: hl=bufferId
0B08AF             0220*  vdu_buff_select:
0B08AF 22 C1 08 0B 0221*  	ld (@bufferId),hl
0B08B3 21 BE 08 0B 0222*  	ld hl,@cmd
0B08B7 01 05 00 00 0223*  	ld bc,@end-@cmd
0B08BB 5B DF       0224*  	rst.lil $18
0B08BD C9          0225*  	ret
0B08BE 17 1B 20    0226*  @cmd: db 23,27,0x20
0B08C1 00 00       0227*  @bufferId: dw 0x0000
0B08C3 00          0228*  @end: db 0x00 ; padding
0B08C4             0229*  
0B08C4             0230*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
0B08C4             0231*  ; inputs: a=format; bc=width; de=height
0B08C4             0232*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
0B08C4             0233*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
0B08C4             0234*  ; 0 	RGBA8888 (4-bytes per pixel)
0B08C4             0235*  ; 1 	RGBA2222 (1-bytes per pixel)
0B08C4             0236*  ; 2 	Mono/Mask (1-bit per pixel)
0B08C4             0237*  ; 3 	Reserved for internal use by VDP (“native” format)
0B08C4             0238*  vdu_bmp_create:
0B08C4 ED 43 E0 08 0239*      ld (@width),bc
       0B          
0B08C9 ED 53 E2 08 0240*      ld (@height),de
       0B          
0B08CE 32 E4 08 0B 0241*      ld (@fmt),a
0B08D2 21 DD 08 0B 0242*  	ld hl,@cmd
0B08D6 01 08 00 00 0243*  	ld bc,@end-@cmd
0B08DA 5B DF       0244*  	rst.lil $18
0B08DC C9          0245*  	ret
0B08DD 17 1B 21    0246*  @cmd:       db 23,27,0x21
0B08E0 00 00       0247*  @width:     dw 0x0000
0B08E2 00 00       0248*  @height:    dw 0x0000
0B08E4 00          0249*  @fmt:       db 0x00
0B08E5             0250*  @end:
0B08E5             0251*  
0B08E5             0252*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0B08E5             0253*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0B08E5             0254*  vdu_load_img_rgba2_to_8:
0B08E5             0255*  ; backup the target buffer id and image dimensions
0B08E5 E5          0256*      push hl
0B08E6 D5          0257*      push de
0B08E7 C5          0258*      push bc
0B08E8             0259*  ; load the rgba2 image to working buffer 65534
0B08E8 21 FE FF 00 0260*      ld hl,65534 ; temporary working buffer id
0B08EC CD EF 09 0B 0261*  	call vdu_load_buffer_from_file
0B08F0             0262*  ; restore the image dimensions and target buffer id
0B08F0 C1          0263*      pop bc
0B08F1 D1          0264*      pop de
0B08F2 E1          0265*      pop hl
0B08F3             0266*  ; fall through to vdu_rgba2_to_8
0B08F3             0267*  
0B08F3             0268*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
0B08F3             0269*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
0B08F3             0270*  ; the "expand bitmap" command is:
0B08F3             0271*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0B08F3             0272*  ; and then to reverse the byte order to fix endian-ness:
0B08F3             0273*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0B08F3             0274*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0B08F3             0275*  ; VDU 23,27,&20,targetBufferID%;
0B08F3             0276*  ; VDU 23,27,&21,width%;height%;0
0B08F3             0277*  ; -------------------------------------------------------------------
0B08F3             0278*  ; inputs: bc,de image width,height ; hl = targetBufferId
0B08F3             0279*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
0B08F3             0280*  vdu_rgba2_to_8:
0B08F3             0281*  ; load the image dimensions and buffer id parameters
0B08F3 ED 43 4F 09 0282*      ld (@width),bc
       0B          
0B08F8 ED 53 51 09 0283*      ld (@height),de
       0B          
0B08FD 22 34 09 0B 0284*      ld (@bufferId0),hl
0B0901 22 41 09 0B 0285*      ld (@bufferId2),hl
0B0905 22 4A 09 0B 0286*      ld (@bufferId1),hl
0B0909             0287*  ; clean up bytes that got stomped on by the ID loads
0B0909 3E 48       0288*      ld a,0x48
0B090B 32 36 09 0B 0289*      ld (@bufferId0+2),a
0B090F 3E 17       0290*      ld a,23
0B0911 32 4C 09 0B 0291*      ld (@bufferId1+2),a
0B0915 3E 18       0292*      ld a,24
0B0917 32 43 09 0B 0293*      ld (@bufferId2+2),a
0B091B AF          0294*      xor a
0B091C 32 53 09 0B 0295*      ld (@height+2),a
0B0920             0296*  ; send the vdu command strings
0B0920 21 2B 09 0B 0297*      ld hl,@beg
0B0924 01 29 00 00 0298*      ld bc,@end-@beg
0B0928 5B DF       0299*      rst.lil $18
0B092A C9          0300*      ret
0B092B             0301*  @beg:
0B092B             0302*  ; Command 14: Consolidate blocks in a buffer
0B092B             0303*  ; VDU 23, 0, &A0, bufferId; 14
0B092B 17 00 A0    0304*      db 23,0,0xA0
0B092E FE FF       0305*      dw 65534 ; workingBufferId
0B0930 0E          0306*      db 14 ; consolidate blocks
0B0931             0307*  ; the "expand bitmap" command is:
0B0931             0308*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0B0931 17 00 A0    0309*      db 23,0,0xA0
0B0934 00 00       0310*  @bufferId0: dw 0x0000 ; targetBufferId
0B0936 48          0311*      db 0x48 ; given as decimal command 72 in the docs
0B0937 02          0312*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
0B0938 FE FF       0313*      dw 65534 ; sourceBufferId
0B093A 00 7F BF FF 0314*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
0B093E             0315*  ; reverse the byte order to fix endian-ness:
0B093E             0316*  ; Command 24: Reverse the order of data of blocks within a buffer
0B093E             0317*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
0B093E             0318*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0B093E 17 00 A0    0319*      db 23,0,0xA0
0B0941 00 00       0320*  @bufferId2:    dw 0x0000 ; targetBufferId
0B0943 18          0321*      db 24 ; reverse byte order
0B0944 04          0322*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
0B0945 04 00       0323*      dw 4 ; size (4 bytes)
0B0947             0324*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0B0947             0325*  ; VDU 23,27,&20,targetBufferID%;
0B0947 17 1B 20    0326*      db 23,27,0x20 ; select bitmap
0B094A 00 00       0327*  @bufferId1: dw 0x0000 ; targetBufferId
0B094C             0328*  ; VDU 23,27,&21,width%;height%;0
0B094C 17 1B 21    0329*      db 23,27,0x21 ; create bitmap from buffer
0B094F 00 00       0330*  @width: dw 0x0000
0B0951 00 00       0331*  @height: dw 0x0000
0B0953 00          0332*      db 0x00 ; rgba8888 format
0B0954             0333*  @end:
0B0954             0334*  
0B0954             0335*  ; scratch variables
0B0954 00 00 00    0336*  bufferId0: dl 0x000000
0B0957 00 00 00    0337*  bufferId1: dl 0x000000
0B095A             0338*  
0B095A             0339*  ; load a vdu buffer from local memory
0B095A             0340*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0B095A             0341*  vdu_load_buffer:
0B095A ED 43 83 09 0342*      ld (@length),bc
       0B          
0B095F D5          0343*      push de ; save data pointer
0B0960             0344*  ; send the vdu command string
0B0960 7D          0345*      ld a,l
0B0961 32 80 09 0B 0346*      ld (@bufferId),a
0B0965 7C          0347*      ld a,h
0B0966 32 81 09 0B 0348*      ld (@bufferId+1),a
0B096A 21 7D 09 0B 0349*      ld hl,@cmd
0B096E 01 08 00 00 0350*      ld bc,@end-@cmd
0B0972 5B DF       0351*      rst.lil $18
0B0974             0352*  ; send the buffer data
0B0974 E1          0353*      pop hl ; pointer to data
0B0975 ED 4B 83 09 0354*      ld bc,(@length)
       0B          
0B097A 5B DF       0355*      rst.lil $18 ; send it
0B097C C9          0356*      ret
0B097D             0357*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0B097D 17 00 A0    0358*  @cmd:       db 23,0,0xA0
0B0980 00 00       0359*  @bufferId:	dw 0x0000
0B0982 00          0360*  		    db 0 ; load buffer
0B0983 00 00       0361*  @length:	dw 0x0000
0B0985 00          0362*  @end: db 0 ; padding
0B0986             0363*  
0B0986             0364*  ; clear a buffer
0B0986             0365*  ; inputs: hl = bufferId
0B0986             0366*  vdu_clear_buffer:
0B0986 7D          0367*      ld a,l
0B0987 32 9E 09 0B 0368*      ld (@bufferId),a
0B098B 7C          0369*      ld a,h
0B098C 32 9F 09 0B 0370*      ld (@bufferId+1),a
0B0990 21 9B 09 0B 0371*      ld hl,@cmd
0B0994 01 06 00 00 0372*      ld bc,@end-@cmd
0B0998 5B DF       0373*      rst.lil $18
0B099A C9          0374*      ret
0B099B 17 00 A0    0375*  @cmd:       db 23,0,0xA0
0B099E 00 00       0376*  @bufferId:	dw 0x0000
0B09A0 02          0377*  		    db 2 ; clear buffer
0B09A1             0378*  @end:
0B09A1             0379*  
0B09A1             0380*  vdu_clear_all_buffers:
0B09A1             0381*  ; clear all buffers
0B09A1 21 AC 09 0B 0382*      ld hl,@beg
0B09A5 01 06 00 00 0383*      ld bc,@end-@beg
0B09A9 5B DF       0384*      rst.lil $18
0B09AB C9          0385*      ret
0B09AC 17 00 A0    0386*  @beg: db 23,0,$A0
0B09AF FF FF       0387*        dw -1 ; clear all buffers
0B09B1 02          0388*        db 2  ; command 2: clear a buffer
0B09B2             0389*  @end:
0B09B2             0390*  
0B09B2             0391*  ; Command 14: Consolidate blocks in a buffer
0B09B2             0392*  vdu_consolidate_buffer:
0B09B2             0393*  ; set parameters for vdu call
0B09B2 7D          0394*      ld a,l
0B09B3 32 CA 09 0B 0395*      ld (@bufferId),a
0B09B7 7C          0396*      ld a,h
0B09B8 32 CB 09 0B 0397*      ld (@bufferId+1),a
0B09BC 21 C7 09 0B 0398*      ld hl,@beg
0B09C0 01 06 00 00 0399*      ld bc,@end-@beg
0B09C4 5B DF       0400*      rst.lil $18
0B09C6 C9          0401*      ret
0B09C7             0402*  ; VDU 23, 0, &A0, bufferId; 14
0B09C7 17 00 A0    0403*  @beg: db 23,0,0xA0
0B09CA 00 00       0404*  @bufferId: dw 0x0000
0B09CC 0E          0405*             db 14
0B09CD             0406*  @end:
0B09CD             0407*  
0B09CD             0408*  ; load an image file to a buffer and make it a bitmap
0B09CD             0409*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
0B09CD             0410*  vdu_load_img:
0B09CD             0411*  ; back up image type and dimension parameters
0B09CD 22 54 09 0B 0412*      ld (bufferId0),hl
0B09D1 F5          0413*      push af
0B09D2 C5          0414*  	push bc
0B09D3 D5          0415*  	push de
0B09D4             0416*  ; load the image
0B09D4 CD EF 09 0B 0417*  	call vdu_load_buffer_from_file
0B09D8             0418*  ; now make it a bitmap
0B09D8 2A 54 09 0B 0419*      ld hl,(bufferId0)
0B09DC CD B2 09 0B 0420*      call vdu_consolidate_buffer
0B09E0 2A 54 09 0B 0421*      ld hl,(bufferId0)
0B09E4 CD AF 08 0B 0422*      call vdu_buff_select
0B09E8 D1          0423*  	pop de ; image height
0B09E9 C1          0424*  	pop bc ; image width
0B09EA F1          0425*  	pop af ; image type
0B09EB C3 C4 08 0B 0426*  	jp vdu_bmp_create ; will return to caller from there
0B09EF             0427*  
0B09EF             0428*  ; inputs: hl = bufferId; iy = pointer to filename
0B09EF             0429*  vdu_load_buffer_from_file:
0B09EF 22 54 09 0B 0430*      ld (bufferId0),hl
0B09F3             0431*  
0B09F3             0432*  ; clear target buffer
0B09F3 CD 86 09 0B 0433*      call vdu_clear_buffer
0B09F7             0434*  
0B09F7             0435*  ; open the file in read mode
0B09F7             0436*  ; Open a file
0B09F7             0437*  ; HLU: Filename
0B09F7             0438*  ;   C: Mode
0B09F7             0439*  ; Returns:
0B09F7             0440*  ;   A: Filehandle, or 0 if couldn't open
0B09F7 FD E5       0441*  	push iy ; pointer to filename
0B09F9 E1          0442*  	pop hl
0B09FA 0E 01       0443*  	ld c,fa_read
0B09FC             0444*      MOSCALL mos_fopen
0B09FC 3E 0A       0001*M 			LD	A, function
0B09FE 5B CF       0002*M 			RST.L	08h
0B0A00 32 3B 0A 0B 0445*      ld (@filehandle),a
0B0A04             0446*  
0B0A04             0447*  @read_file:
0B0A04             0448*  ; Read a block of data from a file
0B0A04             0449*  ;   C: Filehandle
0B0A04             0450*  ; HLU: Pointer to where to write the data to
0B0A04             0451*  ; DEU: Number of bytes to read
0B0A04             0452*  ; Returns:
0B0A04             0453*  ; DEU: Number of bytes read
0B0A04 3A 3B 0A 0B 0454*      ld a,(@filehandle)
0B0A08 4F          0455*      ld c,a
0B0A09 21 00 E0 B7 0456*      ld hl,filedata
0B0A0D 11 00 20 00 0457*      ld de,8192 ; max we can read into onboard sram at one time
0B0A11             0458*      MOSCALL mos_fread
0B0A11 3E 1A       0001*M 			LD	A, function
0B0A13 5B CF       0002*M 			RST.L	08h
0B0A15             0459*  
0B0A15             0460*  ; ; DEBUG: print chunk size
0B0A15             0461*  ;     push de
0B0A15             0462*  ;     pop hl
0B0A15             0463*  ;     call printDec
0B0A15             0464*  ;     call printNewLine
0B0A15             0465*  
0B0A15             0466*  ; test de for zero bytes read
0B0A15 21 00 00 00 0467*      ld hl,0
0B0A19 AF          0468*      xor a ; clear carry
0B0A1A ED 52       0469*      sbc hl,de
0B0A1C CA 32 0A 0B 0470*      jp z,@close_file
0B0A20             0471*  
0B0A20             0472*  ; load a vdu buffer from local memory
0B0A20             0473*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0B0A20 2A 54 09 0B 0474*      ld hl,(bufferId0)
0B0A24 D5          0475*      push de ; chunksize
0B0A25 C1          0476*      pop bc
0B0A26 11 00 E0 B7 0477*      ld de,filedata
0B0A2A CD 5A 09 0B 0478*      call vdu_load_buffer
0B0A2E             0479*  
0B0A2E             0480*  ; ; print progress breadcrumbs
0B0A2E             0481*  ;     ld a,'.'
0B0A2E             0482*  ;     rst.lil 10h
0B0A2E             0483*  
0B0A2E             0484*  ; read the next block
0B0A2E C3 04 0A 0B 0485*      jp @read_file
0B0A32             0486*  
0B0A32             0487*  ; close the file
0B0A32             0488*  @close_file:
0B0A32 3A 3B 0A 0B 0489*      ld a,(@filehandle)
0B0A36             0490*      MOSCALL mos_fclose
0B0A36 3E 0B       0001*M 			LD	A, function
0B0A38 5B CF       0002*M 			RST.L	08h
0B0A3A C9          0491*      ret ; vdu_load_buffer_from_file
0B0A3B             0492*  
0B0A3B 00          0493*  @filehandle: db 0 ; file handle
0B0A3C 00 00 00    0494*  @fil: dl 0 ; pointer to FIL struct
0B0A3F             0495*  
0B0A3F 00 00 00    0496*  @chunkpointer: dl 0 ; pointer to current chunk
0B0A42             0497*  
0B0A42             0498*  ; File information structure (FILINFO)
0B0A42             0499*  @filinfo:
0B0A42 00 00 00 00 0500*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
0B0A46 00 00       0501*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
0B0A48 00 00       0502*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
0B0A4A 00          0503*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
0B0A4B 00 00 00 00 0504*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
0B0A58 00 00 00 00 0505*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0B0B58             0023       ; include "../moslets/vdu_fonts.inc"
0B0B58             0024       include "../moslets/vdu_plot.inc"
0B0B58             0001*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0B0B58             0002*  ; PLOT code 	(Decimal) 	Effect
0B0B58             0003*  ; &00-&07 	0-7 	Solid line, includes both ends
0B0B58             0004*  plot_sl_both: equ 0x00
0B0B58             0005*  
0B0B58             0006*  ; &08-&0F 	8-15 	Solid line, final point omitted
0B0B58             0007*  plot_sl_first: equ 0x08
0B0B58             0008*  
0B0B58             0009*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
0B0B58             0010*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
0B0B58             0011*  
0B0B58             0012*  ; &20-&27 	32-39 	Solid line, first point omitted
0B0B58             0013*  plot_sl_last: equ 0x20
0B0B58             0014*  
0B0B58             0015*  ; &28-&2F 	40-47 	Solid line, both points omitted
0B0B58             0016*  plot_sl_none: equ 0x28
0B0B58             0017*  
0B0B58             0018*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
0B0B58             0019*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
0B0B58             0020*  
0B0B58             0021*  ; &40-&47 	64-71 	Point plot
0B0B58             0022*  plot_pt: equ 0x40
0B0B58             0023*  
0B0B58             0024*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
0B0B58             0025*  plot_lf_lr_non_bg: equ 0x48
0B0B58             0026*  
0B0B58             0027*  ; &50-&57 	80-87 	Triangle fill
0B0B58             0028*  plot_tf: equ 0x50
0B0B58             0029*  
0B0B58             0030*  ; &58-&5F 	88-95 	Line fill right to background §§
0B0B58             0031*  plot_lf_r_bg: equ 0x58
0B0B58             0032*  
0B0B58             0033*  ; &60-&67 	96-103 	Rectangle fill
0B0B58             0034*  plot_rf: equ 0x60
0B0B58             0035*  
0B0B58             0036*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
0B0B58             0037*  plot_lf_lr_fg: equ 0x60
0B0B58             0038*  
0B0B58             0039*  ; &70-&77 	112-119 	Parallelogram fill
0B0B58             0040*  plot_pf: equ 0x70
0B0B58             0041*  
0B0B58             0042*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
0B0B58             0043*  plot_lf_r_non_fg: equ 0x78
0B0B58             0044*  
0B0B58             0045*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
0B0B58             0046*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
0B0B58             0047*  
0B0B58             0048*  ; &90-&97 	144-151 	Circle outline
0B0B58             0049*  plot_co: equ 0x90
0B0B58             0050*  
0B0B58             0051*  ; &98-&9F 	152-159 	Circle fill
0B0B58             0052*  plot_cf: equ 0x98
0B0B58             0053*  
0B0B58             0054*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
0B0B58             0055*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
0B0B58             0056*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
0B0B58             0057*  
0B0B58             0058*  ; &B8-&BF 	184-191 	Rectangle copy/move
0B0B58             0059*  plot_rcm: equ 0xB8
0B0B58             0060*  
0B0B58             0061*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
0B0B58             0062*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
0B0B58             0063*  ; &D0-&D7 	208-215 	Not defined
0B0B58             0064*  ; &D8-&DF 	216-223 	Not defined
0B0B58             0065*  ; &E0-&E7 	224-231 	Not defined
0B0B58             0066*  
0B0B58             0067*  ; &E8-&EF 	232-239 	Bitmap plot §
0B0B58             0068*  plot_bmp: equ 0xE8
0B0B58             0069*  
0B0B58             0070*  ; &F0-&F7 	240-247 	Not defined
0B0B58             0071*  ; &F8-&FF 	248-255 	Not defined
0B0B58             0072*  
0B0B58             0073*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
0B0B58             0074*  ; Agon Console8 VDP 2.2.0
0B0B58             0075*  
0B0B58             0076*  ; Within each group of eight plot codes, the effects are as follows:
0B0B58             0077*  ; Plot code 	Effect
0B0B58             0078*  ; 0 	Move relative
0B0B58             0079*  mv_rel: equ 0
0B0B58             0080*  
0B0B58             0081*  ; 1 	Plot relative in current foreground colour
0B0B58             0082*  dr_rel_fg: equ 1
0B0B58             0083*  
0B0B58             0084*  ; 2 	Not supported (Plot relative in logical inverse colour)
0B0B58             0085*  ; 3 	Plot relative in current background colour
0B0B58             0086*  dr_rel_bg: equ 3
0B0B58             0087*  
0B0B58             0088*  ; 4 	Move absolute
0B0B58             0089*  mv_abs: equ 4
0B0B58             0090*  
0B0B58             0091*  ; 5 	Plot absolute in current foreground colour
0B0B58             0092*  dr_abs_fg: equ 5
0B0B58             0093*  
0B0B58             0094*  ; 6 	Not supported (Plot absolute in logical inverse colour)
0B0B58             0095*  ; 7 	Plot absolute in current background colour
0B0B58             0096*  dr_abs_bg: equ 7
0B0B58             0097*  
0B0B58             0098*  ; Codes 0-3 use the position data provided as part of the command
0B0B58             0099*  ; as a relative position, adding the position given to the current
0B0B58             0100*  ; graphical cursor position. Codes 4-7 use the position data provided
0B0B58             0101*  ; as part of the command as an absolute position, setting the current
0B0B58             0102*  ; graphical cursor position to the position given.
0B0B58             0103*  
0B0B58             0104*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
0B0B58             0105*  ; current pixel colour. These operations cannot currently be supported
0B0B58             0106*  ; by the graphics system the Agon VDP uses, so these codes are not
0B0B58             0107*  ; supported. Support for these codes may be added in a future version
0B0B58             0108*  ; of the VDP firmware.
0B0B58             0109*  
0B0B58             0110*  ; 16 colour palette constants
0B0B58             0111*  c_black: equ 0
0B0B58             0112*  c_red_dk: equ 1
0B0B58             0113*  c_green_dk: equ 2
0B0B58             0114*  c_yellow_dk: equ 3
0B0B58             0115*  c_blue_dk: equ 4
0B0B58             0116*  c_magenta_dk: equ 5
0B0B58             0117*  c_cyan_dk: equ 6
0B0B58             0118*  c_grey: equ 7
0B0B58             0119*  c_grey_dk: equ 8
0B0B58             0120*  c_red: equ 9
0B0B58             0121*  c_green: equ 10
0B0B58             0122*  c_yellow: equ 11
0B0B58             0123*  c_blue: equ 12
0B0B58             0124*  c_magenta: equ 13
0B0B58             0125*  c_cyan: equ 14
0B0B58             0126*  c_white: equ 15
0B0B58             0127*  
0B0B58             0128*  ; VDU 25, mode, x; y;: PLOT command
0B0B58             0129*  ; inputs: a=mode, bc=x0, de=y0
0B0B58             0130*  vdu_plot:
0B0B58 32 72 0B 0B 0131*      ld (@mode),a
0B0B5C ED 43 73 0B 0132*      ld (@x0),bc
       0B          
0B0B61 ED 53 75 0B 0133*      ld (@y0),de
       0B          
0B0B66 21 71 0B 0B 0134*  	ld hl,@cmd
0B0B6A 01 06 00 00 0135*  	ld bc,@end-@cmd
0B0B6E 5B DF       0136*  	rst.lil $18
0B0B70 C9          0137*  	ret
0B0B71 19          0138*  @cmd:   db 25
0B0B72 00          0139*  @mode:  db 0
0B0B73 00 00       0140*  @x0: 	dw 0
0B0B75 00 00       0141*  @y0: 	dw 0
0B0B77 00          0142*  @end:   db 0 ; extra byte to soak up deu
0B0B78             0143*  
0B0B78             0144*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0B0B78             0145*  ; &E8-&EF 	232-239 	Bitmap plot §
0B0B78             0146*  ; VDU 25, mode, x; y;: PLOT command
0B0B78             0147*  ; inputs: bc=x0, de=y0
0B0B78             0148*  ; prerequisites: vdu_buff_select
0B0B78             0149*  vdu_plot_bmp:
0B0B78 ED 43 8F 0B 0150*      ld (@x0),bc
       0B          
0B0B7D ED 53 91 0B 0151*      ld (@y0),de
       0B          
0B0B82 21 8D 0B 0B 0152*  	ld hl,@cmd
0B0B86 01 06 00 00 0153*  	ld bc,@end-@cmd
0B0B8A 5B DF       0154*  	rst.lil $18
0B0B8C C9          0155*  	ret
0B0B8D 19          0156*  @cmd:   db 25
0B0B8E ED          0157*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0B0B8F 00 00       0158*  @x0: 	dw 0x0000
0B0B91 00 00       0159*  @y0: 	dw 0x0000
0B0B93 00          0160*  @end:   db 0x00 ; padding
0B0B94             0161*  
0B0B94             0162*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0B0B94             0163*  ; &E8-&EF 	232-239 	Bitmap plot §
0B0B94             0164*  ; VDU 25, mode, x; y;: PLOT command
0B0B94             0165*  ; inputs: bc=x0, de=y0
0B0B94             0166*  ; USING 16.8 FIXED POINT COORDINATES
0B0B94             0167*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
0B0B94             0168*  ;   the fractional portiion of the inputs are truncated
0B0B94             0169*  ;   leaving only the 16-bit integer portion
0B0B94             0170*  ; prerequisites: vdu_buff_select
0B0B94             0171*  vdu_plot_bmp168:
0B0B94             0172*  ; populate in the reverse of normal to keep the
0B0B94             0173*  ; inputs from stomping on each other
0B0B94 ED 53 B2 0B 0174*      ld (@y0-1),de
       0B          
0B0B99 ED 43 B0 0B 0175*      ld (@x0-1),bc
       0B          
0B0B9E 3E ED       0176*      ld a,plot_bmp+dr_abs_fg ; 0xED
0B0BA0 32 B0 0B 0B 0177*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
0B0BA4 21 AF 0B 0B 0178*  	ld hl,@cmd
0B0BA8 01 06 00 00 0179*  	ld bc,@end-@cmd
0B0BAC 5B DF       0180*  	rst.lil $18
0B0BAE C9          0181*  	ret
0B0BAF 19          0182*  @cmd:   db 25
0B0BB0 ED          0183*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0B0BB1 00 00       0184*  @x0: 	dw 0x0000
0B0BB3 00 00       0185*  @y0: 	dw 0x0000
0B0BB5             0186*  @end:  ; no padding required b/c we shifted de right
0B0BB5             0187*  
0B0BB5             0188*  ; draw a filled rectangle
0B0BB5             0189*  vdu_plot_rf:
0B0BB5 ED 43 DC 0B 0190*      ld (@x0),bc
       0B          
0B0BBA ED 53 DE 0B 0191*      ld (@y0),de
       0B          
0B0BBF DD 22 E2 0B 0192*      ld (@x1),ix
       0B          
0B0BC4 FD 22 E4 0B 0193*      ld (@y1),iy
       0B          
0B0BC9 3E 19       0194*      ld a,25 ; we have to reload the 2nd plot command
0B0BCB 32 E0 0B 0B 0195*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0B0BCF 21 DA 0B 0B 0196*  	ld hl,@cmd0
0B0BD3 01 0C 00 00 0197*  	ld bc,@end-@cmd0
0B0BD7 5B DF       0198*  	rst.lil $18
0B0BD9 C9          0199*      ret
0B0BDA 19          0200*  @cmd0:  db 25 ; plot
0B0BDB 04          0201*  @arg0:  db plot_sl_both+mv_abs
0B0BDC 00 00       0202*  @x0:    dw 0x0000
0B0BDE 00 00       0203*  @y0:    dw 0x0000
0B0BE0 19          0204*  @cmd1:  db 25 ; plot
0B0BE1 65          0205*  @arg1:  db plot_rf+dr_abs_fg
0B0BE2 00 00       0206*  @x1:    dw 0x0000
0B0BE4 00 00       0207*  @y1:    dw 0x0000
0B0BE6 00          0208*  @end:   db 0x00 ; padding
0B0BE7             0209*  
0B0BE7             0210*  ; draw a filled circle
0B0BE7             0211*  vdu_plot_cf:
0B0BE7 ED 43 0E 0C 0212*      ld (@x0),bc
       0B          
0B0BEC ED 53 10 0C 0213*      ld (@y0),de
       0B          
0B0BF1 DD 22 14 0C 0214*      ld (@x1),ix
       0B          
0B0BF6 FD 22 16 0C 0215*      ld (@y1),iy
       0B          
0B0BFB 3E 19       0216*      ld a,25 ; we have to reload the 2nd plot command
0B0BFD 32 12 0C 0B 0217*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0B0C01 21 0C 0C 0B 0218*  	ld hl,@cmd0
0B0C05 01 0C 00 00 0219*  	ld bc,@end-@cmd0
0B0C09 5B DF       0220*  	rst.lil $18
0B0C0B C9          0221*      ret
0B0C0C 19          0222*  @cmd0:  db 25 ; plot
0B0C0D 04          0223*  @arg0:  db plot_sl_both+mv_abs
0B0C0E 00 00       0224*  @x0:    dw 0x0000
0B0C10 00 00       0225*  @y0:    dw 0x0000
0B0C12 19          0226*  @cmd1:  db 25 ; plot
0B0C13 9D          0227*  @arg1:  db plot_cf+dr_abs_fg
0B0C14 00 00       0228*  @x1:    dw 0x0000
0B0C16 00 00       0229*  @y1:    dw 0x0000
0B0C18 00          0230*  @end:   db 0x00 ; padding
0B0C19             0231*  
0B0C19             0232*  ; VDU 25, mode, x; y;: PLOT command
0B0C19             0233*  ; inputs: a=mode, ix=x0, iy=y0
0B0C19             0234*  plot:
0B0C19 32 33 0C 0B 0235*      ld (@mode),a
0B0C1D DD 22 34 0C 0236*      ld (@x0),ix
       0B          
0B0C22 FD 22 36 0C 0237*      ld (@y0),iy
       0B          
0B0C27 21 32 0C 0B 0238*  	ld hl,@cmd
0B0C2B 01 06 00 00 0239*  	ld bc,@end-@cmd
0B0C2F 5B DF       0240*  	rst.lil $18
0B0C31 C9          0241*  	ret
0B0C32 19          0242*  @cmd:   db 25
0B0C33 00          0243*  @mode:  db 0
0B0C34 00 00       0244*  @x0: 	dw 0
0B0C36 00 00       0245*  @y0: 	dw 0
0B0C38 00          0246*  @end:   db 0 ; padding
0B0C39             0247*  
0B0C39             0248*  ; VDU 5: Write text at graphics cursor
0B0C39             0249*  ; inputs: hl = pointer to text, ix=x0, iy=y0
0B0C39             0250*  ; prerequisites: gcol foreground set, VDU 5 set
0B0C39             0251*  plot_text:
0B0C39 E5          0252*      push hl ; save text pointer
0B0C3A             0253*  ; move graphics cursor to x0, y0
0B0C3A 3E 44       0254*      ld a,plot_pt+mv_abs
0B0C3C CD 19 0C 0B 0255*      call plot
0B0C40             0256*  ; write text
0B0C40 E1          0257*      pop hl ; restore text pointer
0B0C41 CD 35 02 0B 0258*      call printString
0B0C45 C9          0259*      ret
0B0C46             0025   
0B0C46             0026   ; SHAWN'S INCLUDES
0B0C46             0027   	INCLUDE	"strings24.asm"
0B0C46             0001*  ;------------------------------------------------------------------------
0B0C46             0002*  ;  strings24.asm
0B0C46             0003*  ;
0B0C46             0004*  ; 24-bit native ez80 strings routines for numerical processing
0B0C46             0005*  ;  Copyright (c) Shawn Sijnstra 2024
0B0C46             0006*  ;  MIT license
0B0C46             0007*  ;------------------------------------------------------------------------
0B0C46             0008*  
0B0C46             0009*  ;------------------------------------------------------------------------
0B0C46             0010*  ;Full print and buffer routine so you can adjust behaviour
0B0C46             0011*  ; Double-Dabble AKA shift-and-add-3 algorithm
0B0C46             0012*  ; breakdown at https://en.wikipedia.org/wiki/Double_dabble
0B0C46             0013*  ;Print value in HLU in decimal with leading 0s removed
0B0C46             0014*  ; Uses HLU, DEU, BCU
0B0C46             0015*  ;------------------------------------------------------------------------
0B0C46             0016*  
0B0C46             0017*  print_HLU_u24:
0B0C46 22 23 0D 0B 0018*  	ld	(hex_temp),hl
0B0C4A 06 08       0019*  	ld	b,8	;8 digits max here with 24 bit unsigned
0B0C4C 11 26 0D 0B 0020*  	ld	de,outbuf
0B0C50 D5          0021*  	push	de
0B0C51 21 07 00 00 0022*  	ld	hl,7
0B0C55 19          0023*  	add	hl,de
0B0C56 E5          0024*  	push	hl
0B0C57 D1          0025*  	pop	de	;copy HLU to DEU
0B0C58 AF          0026*  	xor	a
0B0C59             0027*  _pde_u_zerobuf:
0B0C59 77          0028*  	ld	(hl),a	;zero out the output
0B0C5A 2B          0029*  	dec	hl
0B0C5B 10 FC       0030*  	djnz	_pde_u_zerobuf
0B0C5D             0031*  
0B0C5D 0E 18       0032*  	ld c,3 * 8	;4 * 8	; number of loops through NUM_SRC_BYTES * 8
0B0C5F             0033*  _bcd_Convert:
0B0C5F             0034*  
0B0C5F 21 23 0D 0B 0035*  	ld hl,hex_temp
0B0C63             0036*  ;
0B0C63 CB 26       0037*  	sla (hl)
0B0C65 23          0038*  	inc hl
0B0C66 CB 16       0039*  	rl (hl)
0B0C68 23          0040*  	inc hl
0B0C69 CB 16       0041*  	rl (hl)		;24 bits rolled right
0B0C6B             0042*  
0B0C6B             0043*  
0B0C6B 06 08       0044*          ld	b,8	;8 digits max for 24 bit decimal output
0B0C6D D5          0045*  	push	de
0B0C6E E1          0046*  	pop	hl
0B0C6F             0047*  
0B0C6F             0048*  _bcd_Add3:
0B0C6F 7E          0049*  	ld	a,(hl)
0B0C70 8F          0050*  	adc	a
0B0C71 27          0051*          daa		;this is add 3 after shifting left; i.e. add 6.
0B0C72 FE 10       0052*  	cp	10h	;did we roll over nibble?
0B0C74 3F          0053*  	ccf
0B0C75 CB A7       0054*  	res	4,a
0B0C77             0055*  
0B0C77 77          0056*          ld (hl),a
0B0C78 2B          0057*  	dec	hl
0B0C79 10 F4       0058*          djnz	_bcd_Add3	;loop for decimal digits
0B0C7B 0D          0059*          dec c
0B0C7C 20 E1       0060*          jr nz, _bcd_Convert	;loop around
0B0C7E             0061*  
0B0C7E             0062*  
0B0C7E E1          0063*  	pop	hl
0B0C7F E5          0064*  	push	hl
0B0C80 06 07       0065*          ld	b,8-1		;one less than total in case output is '0'
0B0C82             0066*  _pde_u_make_ascii:
0B0C82 7E          0067*  	ld	a,(hl)
0B0C83 B7          0068*  	or	a
0B0C84 20 05       0069*  	jr	nz,_pde_u_make_ascii2
0B0C86 36 20       0070*  	ld	(hl),' '
0B0C88 23          0071*  	inc	hl
0B0C89 10 F7       0072*  	djnz	_pde_u_make_ascii
0B0C8B             0073*  _pde_u_make_ascii2:
0B0C8B 04          0074*  	inc	b
0B0C8C             0075*  _pde_u_make_ascii3:
0B0C8C 7E          0076*  	ld	a,(hl)
0B0C8D F6 30       0077*  	or	30h
0B0C8F 77          0078*  	ld	(hl),a
0B0C90 23          0079*  	inc	hl
0B0C91 10 F9       0080*  	djnz	_pde_u_make_ascii3
0B0C93             0081*  
0B0C93 E1          0082*  	pop	hl
0B0C94 06 08       0083*  	ld	b,8
0B0C96             0084*  _pde_u_final_out:
0B0C96 7E          0085*  	ld	a,(hl)
0B0C97 23          0086*  	inc	hl
0B0C98 FE 20       0087*  	cp	' '
0B0C9A 28 02       0088*  	jr	z,_pde_u_final_out_strip
0B0C9C 5B D7       0089*  	rst.lil	10h
0B0C9E             0090*  _pde_u_final_out_strip:
0B0C9E 10 F6       0091*  	djnz	_pde_u_final_out
0B0CA0 C9          0092*  	ret
0B0CA1             0093*  
0B0CA1             0094*  ;------------------------------------------------------------------------
0B0CA1             0095*  ; is_digit
0B0CA1             0096*  ; C flag set if A is a digit
0B0CA1             0097*  ; preserves all registers
0B0CA1             0098*  ;------------------------------------------------------------------------
0B0CA1             0099*  is_digit:
0B0CA1 FE 30       0100*  	cp	'0'
0B0CA3 3F          0101*  	ccf
0B0CA4 D0          0102*  	ret	nc	;less that '0'
0B0CA5 FE 3A       0103*  	cp	'9' + 1
0B0CA7 C9          0104*  	ret
0B0CA8             0105*  
0B0CA8             0106*  
0B0CA8             0107*  ;------------------------------------------------------------------------
0B0CA8             0108*  ; char2hex
0B0CA8             0109*  ; Input: ASCII nibble in A
0B0CA8             0110*  ; Returns: if valid nibble value in A; else 0FFh in A
0B0CA8             0111*  ;------------------------------------------------------------------------
0B0CA8             0112*  char2hex:
0B0CA8 FE 30       0113*  	CP	'0'
0B0CAA 38 1D       0114*  	JR	C, char_not_hex
0B0CAC FE 3A       0115*  	CP	'9' + 1
0B0CAE 30 03       0116*  	JR	NC, char_not_09
0B0CB0 D6 30       0117*  	sub	'0'
0B0CB2 C9          0118*  	ret
0B0CB3             0119*  
0B0CB3             0120*  char_not_09:
0B0CB3             0121*  	; char is not 0 to 9. Try upper case
0B0CB3 FE 41       0122*  	CP	'A'
0B0CB5 38 12       0123*  	JR	C, char_not_hex
0B0CB7 FE 47       0124*  	CP	'F' + 1
0B0CB9 30 03       0125*  	JR	NC, char_not_AF
0B0CBB D6 37       0126*  	sub	'A'-10
0B0CBD C9          0127*  	ret
0B0CBE             0128*  
0B0CBE             0129*  char_not_AF:
0B0CBE             0130*  	; char is not upper case A-F. Try lower
0B0CBE FE 61       0131*  	CP	'a'
0B0CC0 38 07       0132*  	JR	C, char_not_hex
0B0CC2 FE 67       0133*  	CP	'f' + 1
0B0CC4 30 03       0134*  	JR	NC, char_not_hex
0B0CC6 D6 57       0135*  	sub	'a' - 10
0B0CC8 C9          0136*  	RET
0B0CC9             0137*  
0B0CC9             0138*  char_not_hex:
0B0CC9 3E FF       0139*   	ld	a,0FFh	;return -1 for not a valid hex digit
0B0CCB C9          0140*  	RET
0B0CCC             0141*  
0B0CCC             0142*  ;------------------------------------------------------------------------
0B0CCC             0143*  ;  newline
0B0CCC             0144*  ;  Output CR+LF; all registers preserved
0B0CCC             0145*  ;------------------------------------------------------------------------
0B0CCC             0146*  newline:
0B0CCC F5          0147*         push   AF
0B0CCD 3E 0D       0148*         LD     A, 13
0B0CCF 5B D7       0149*         RST.LIL    10h
0B0CD1 3E 0A       0150*         LD     A, 10
0B0CD3 5B D7       0151*         RST.LIL    10h
0B0CD5 F1          0152*         POP    AF
0B0CD6 C9          0153*         RET
0B0CD7             0154*  
0B0CD7             0155*  ;------------------------------------------------------------------------
0B0CD7             0156*  ;  put_nibble
0B0CD7             0157*  ;  Output a single hex nibble in A
0B0CD7             0158*  ;  All registers preserved
0B0CD7             0159*  ;------------------------------------------------------------------------
0B0CD7             0160*  put_nibble:
0B0CD7 F5          0161*  	push   AF
0B0CD8 C6 90       0162*  	add    a,090h ;Neat trick to convert hex nibble in A to ASCII
0B0CDA 27          0163*  	daa
0B0CDB CE 40       0164*  	adc    a,040h
0B0CDD 27          0165*  	daa
0B0CDE 5B D7       0166*  	RST.LIL    10h	;output character in A
0B0CE0 F1          0167*  	pop    AF
0B0CE1 C9          0168*  	ret
0B0CE2             0169*  
0B0CE2             0170*  ;------------------------------------------------------------------------
0B0CE2             0171*  ;  print_A
0B0CE2             0172*  ;  Output the 8-bit hex number A
0B0CE2             0173*  ;  All registers preserved
0B0CE2             0174*  ;------------------------------------------------------------------------
0B0CE2             0175*  print_A:
0B0CE2 F5          0176*  	push 	AF
0B0CE3 F5          0177*  	push 	AF	;save for second nibble
0B0CE4 0F          0178*  	rrca
0B0CE5 0F          0179*  	rrca
0B0CE6 0F          0180*  	rrca
0B0CE7 0F          0181*  	rrca
0B0CE8 E6 0F       0182*  	and	0Fh	;first nibble
0B0CEA CD D7 0C 0B 0183*  	call	put_nibble
0B0CEE F1          0184*  	pop 	AF
0B0CEF E6 0F       0185*  	and	0Fh	;second nibble
0B0CF1 CD D7 0C 0B 0186*  	call	put_nibble
0B0CF5 F1          0187*  	pop 	AF
0B0CF6 C9          0188*  	ret
0B0CF7             0189*  
0B0CF7             0190*  ;------------------------------------------------------------------------
0B0CF7             0191*  ;  print_HLU_hex
0B0CF7             0192*  ;  Output the 24-bit hex number HLU; other registers preserved
0B0CF7             0193*  ;------------------------------------------------------------------------
0B0CF7             0194*  print_HLU_hex:
0B0CF7 F5          0195*         push   AF
0B0CF8 22 23 0D 0B 0196*         ld     (hex_temp),hl
0B0CFC 3A 25 0D 0B 0197*         ld     a,(hex_temp+2)
0B0D00 CD E2 0C 0B 0198*         call   print_A
0B0D04 3A 24 0D 0B 0199*         ld     a,(hex_temp+1)
0B0D08 CD E2 0C 0B 0200*         call   print_A
0B0D0C 3A 23 0D 0B 0201*         ld     a,(hex_temp)
0B0D10 CD E2 0C 0B 0202*         call   print_A
0B0D14 F1          0203*         POP    AF
0B0D15 C9          0204*         RET
0B0D16             0205*  
0B0D16             0206*  ;------------------------------------------------------------------------
0B0D16             0207*  ;  puts
0B0D16             0208*  ;  Output a zero-terminated string whose address is in HL; all
0B0D16             0209*  ;  registers preserved.
0B0D16             0210*  ;------------------------------------------------------------------------
0B0D16             0211*  puts:
0B0D16 F5          0212*         push   AF
0B0D17 C5          0213*         push   BC
0B0D18 01 00 00 00 0214*         ld     BC, 0                ; Set to 0, so length ignored...
0B0D1C 3E 00       0215*         ld     A, 0                 ; Use character in A as delimiter
0B0D1E 5B DF       0216*         RST.LIL    18h                  ; This calls a RST in the eZ80 address space
0B0D20 C1          0217*         pop    BC
0B0D21 F1          0218*         pop    AF
0B0D22 C9          0219*         ret
0B0D23             0220*  
0B0D23             0221*  ;------------------------------------------------------------------------
0B0D23             0222*  ; Data area
0B0D23             0223*  ; Storage for 24 bit conversion
0B0D23             0224*  ;------------------------------------------------------------------------
0B0D23             0225*  hex_temp:
0B0D23 00 00 00    0226*         dw24     0      ;3 bytes for HL used for both hex and decimal temp
0B0D26             0227*  
0B0D26             0228*  outbuf:
0B0D26 31 36 37 37 0229*  	db	"16777215 "	;largest number with an extra space
       37 32 31 35 
       20          
0B0D2F             0028   	INCLUDE	"arith24.asm"
0B0D2F             0001*  ;------------------------------------------------------------------------
0B0D2F             0002*  ;  arith24.asm
0B0D2F             0003*  ;  24-bit ez80 arithmetic routines
0B0D2F             0004*  ;  Copyright (c) Shawn Sijnstra 2024
0B0D2F             0005*  ;  MIT license
0B0D2F             0006*  ;
0B0D2F             0007*  ;  This library was created as a tool to help make ez80
0B0D2F             0008*  ;  24-bit native assembly routines for simple mathematical problems
0B0D2F             0009*  ;  more widely available.
0B0D2F             0010*  ;
0B0D2F             0011*  ;------------------------------------------------------------------------
0B0D2F             0012*  
0B0D2F             0013*  ;------------------------------------------------------------------------
0B0D2F             0014*  ; umul24:	HL = HL*DE (unsigned)
0B0D2F             0015*  ; Preserves AF, BC, DE
0B0D2F             0016*  ; Uses a fast multiply routine.
0B0D2F             0017*  ;------------------------------------------------------------------------
0B0D2F             0018*  umul24:
0B0D2F D5          0019*  	push	DE
0B0D30 C5          0020*  	push	BC
0B0D31 F5          0021*  	push	AF
0B0D32 E5          0022*  	push	HL
0B0D33 C1          0023*  	pop		BC
0B0D34 3E 18       0024*      ld	 	a, 24 ; No. of bits to process
0B0D36 21 00 00 00 0025*      ld	 	hl, 0 ; Result
0B0D3A             0026*  umul24_lp:
0B0D3A 29          0027*  	add	hl,hl
0B0D3B EB          0028*  	ex	de,hl
0B0D3C 29          0029*  	add	hl,hl
0B0D3D EB          0030*  	ex	de,hl
0B0D3E 30 01       0031*  	jr	nc,umul24_nc
0B0D40 09          0032*  	add	hl,bc
0B0D41             0033*  umul24_nc:
0B0D41 3D          0034*  	dec	a
0B0D42 20 F6       0035*  	jr	nz,umul24_lp
0B0D44 F1          0036*  	pop	af
0B0D45 C1          0037*  	pop	bc
0B0D46 D1          0038*  	pop	de
0B0D47 C9          0039*  	ret
0B0D48             0040*  
0B0D48             0041*  
0B0D48             0042*  ;------------------------------------------------------------------------
0B0D48             0043*  ; udiv24
0B0D48             0044*  ; Unsigned 24-bit division
0B0D48             0045*  ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
0B0D48             0046*  ;
0B0D48             0047*  ; Uses AF BC DE HL
0B0D48             0048*  ; Uses Restoring Division algorithm
0B0D48             0049*  ;------------------------------------------------------------------------
0B0D48             0050*  
0B0D48             0051*  udiv24:
0B0D48 E5          0052*  	push	hl
0B0D49 C1          0053*  	pop		bc	;move dividend to BCU
0B0D4A 21 00 00 00 0054*  	ld		hl,0	;result
0B0D4E A7          0055*  	and		a
0B0D4F ED 52       0056*  	sbc		hl,de	;test for div by 0
0B0D51 C8          0057*  	ret		z		;it's zero, carry flag is clear
0B0D52 19          0058*  	add		hl,de	;HL is 0 again
0B0D53 3E 18       0059*  	ld		a,24	;number of loops through.
0B0D55             0060*  udiv1:
0B0D55 C5          0061*  	push	bc	;complicated way of doing this because of lack of access to top bits
0B0D56 E3          0062*  	ex		(sp),hl
0B0D57 37          0063*  	scf
0B0D58 ED 6A       0064*  	adc	hl,hl
0B0D5A E3          0065*  	ex	(sp),hl
0B0D5B C1          0066*  	pop	bc		;we now have bc = (bc * 2) + 1
0B0D5C             0067*  
0B0D5C ED 6A       0068*  	adc	hl,hl
0B0D5E A7          0069*  	and	a		;is this the bug
0B0D5F ED 52       0070*  	sbc	hl,de
0B0D61 30 02       0071*  	jr	nc,udiv2
0B0D63 19          0072*  	add	hl,de
0B0D64             0073*  ;	dec	c
0B0D64 0B          0074*  	dec	bc
0B0D65             0075*  udiv2:
0B0D65 3D          0076*  	dec	a
0B0D66 20 ED       0077*  	jr	nz,udiv1
0B0D68 37          0078*  	scf		;flag used for div0 error
0B0D69 C5          0079*  	push	bc
0B0D6A D1          0080*  	pop		de	;remainder
0B0D6B C9          0081*  	ret
0B0D6C             0082*  
0B0D6C             0083*  
0B0D6C             0084*  
0B0D6C             0085*  ;------------------------------------------------------------------------
0B0D6C             0086*  ; neg24
0B0D6C             0087*  ; Returns: HLU = 0-HLU
0B0D6C             0088*  ; preserves all other registers
0B0D6C             0089*  ;------------------------------------------------------------------------
0B0D6C             0090*  neg24:
0B0D6C D5          0091*  	push	de
0B0D6D EB          0092*  	ex		de,hl
0B0D6E 21 00 00 00 0093*  	ld		hl,0
0B0D72 B7          0094*  	or		a
0B0D73 ED 52       0095*  	sbc		hl,de
0B0D75 D1          0096*  	pop		de
0B0D76 C9          0097*  	ret
0B0D77             0098*  
0B0D77             0099*  ;------------------------------------------------------------------------
0B0D77             0100*  ; or_hlu_deu: 24 bit bitwise OR
0B0D77             0101*  ; Returns: hlu = hlu OR deu
0B0D77             0102*  ; preserves all other registers
0B0D77             0103*  ;------------------------------------------------------------------------
0B0D77             0104*  or_hlu_deu:
0B0D77 22 02 0E 0B 0105*  	ld	(bitbuf1),hl
0B0D7B ED 53 05 0E 0106*  	ld	(bitbuf2),de
       0B          
0B0D80 D5          0107*  	push	de	;preserve DEU
0B0D81 C5          0108*  	push	bc	;preserve BCU
0B0D82 06 03       0109*  	ld		b,3
0B0D84 21 02 0E 0B 0110*  	ld	hl,bitbuf1
0B0D88 11 02 0E 0B 0111*  	ld	de,bitbuf1
0B0D8C             0112*  orloop_24:
0B0D8C 1A          0113*  	ld	a,(de)
0B0D8D B6          0114*  	or	(hl)
0B0D8E 12          0115*  	ld	(de),a
0B0D8F 13          0116*  	inc	de
0B0D90 23          0117*  	inc	hl
0B0D91 10 F9       0118*  	djnz	orloop_24
0B0D93 2A 05 0E 0B 0119*  	ld	hl,(bitbuf2)
0B0D97 C1          0120*  	pop		bc	;restore BC
0B0D98 D1          0121*  	pop		de	;restore DE
0B0D99             0122*  
0B0D99             0123*  ;------------------------------------------------------------------------
0B0D99             0124*  ; and_hlu_deu: 24 bit bitwise AND
0B0D99             0125*  ; Returns: hlu = hlu AND deu
0B0D99             0126*  ; preserves all other registers
0B0D99             0127*  ;------------------------------------------------------------------------
0B0D99             0128*  and_hlu_deu:
0B0D99 22 02 0E 0B 0129*  	ld	(bitbuf1),hl
0B0D9D ED 53 05 0E 0130*  	ld	(bitbuf2),de
       0B          
0B0DA2 D5          0131*  	push	de	;preserve DEU
0B0DA3 C5          0132*  	push	bc	;preserve BCU
0B0DA4 06 03       0133*  	ld		b,3
0B0DA6 21 02 0E 0B 0134*  	ld	hl,bitbuf1
0B0DAA 11 02 0E 0B 0135*  	ld	de,bitbuf1
0B0DAE             0136*  andloop_24:
0B0DAE 1A          0137*  	ld	a,(de)
0B0DAF A6          0138*  	and	(hl)
0B0DB0 12          0139*  	ld	(de),a
0B0DB1 13          0140*  	inc	de
0B0DB2 23          0141*  	inc	hl
0B0DB3 10 F9       0142*  	djnz	andloop_24
0B0DB5 2A 05 0E 0B 0143*  	ld	hl,(bitbuf2)
0B0DB9 C1          0144*  	pop		bc	;restore BC
0B0DBA D1          0145*  	pop		de	;restore DE
0B0DBB             0146*  
0B0DBB             0147*  ;------------------------------------------------------------------------
0B0DBB             0148*  ; xor_hlu_deu: 24 bit bitwise XOR
0B0DBB             0149*  ; Returns: hlu = hlu XOR deu
0B0DBB             0150*  ; preserves all other registers
0B0DBB             0151*  ;------------------------------------------------------------------------
0B0DBB             0152*  xor_hlu_deu:
0B0DBB 22 02 0E 0B 0153*  	ld	(bitbuf1),hl
0B0DBF ED 53 05 0E 0154*  	ld	(bitbuf2),de
       0B          
0B0DC4 D5          0155*  	push	de	;preserve DEU
0B0DC5 C5          0156*  	push	bc	;preserve BCU
0B0DC6 06 03       0157*  	ld		b,3
0B0DC8 21 02 0E 0B 0158*  	ld	hl,bitbuf1
0B0DCC 11 02 0E 0B 0159*  	ld	de,bitbuf1
0B0DD0             0160*  xorloop_24:
0B0DD0 1A          0161*  	ld	a,(de)
0B0DD1 AE          0162*  	xor	(hl)
0B0DD2 12          0163*  	ld	(de),a
0B0DD3 13          0164*  	inc	de
0B0DD4 23          0165*  	inc	hl
0B0DD5 10 F9       0166*  	djnz	xorloop_24
0B0DD7 2A 05 0E 0B 0167*  	ld	hl,(bitbuf2)
0B0DDB C1          0168*  	pop		bc	;restore BC
0B0DDC D1          0169*  	pop		de	;restore DE
0B0DDD             0170*  
0B0DDD             0171*  ;------------------------------------------------------------------------
0B0DDD             0172*  ; shl_hlu: 24 bit shift left hlu by deu positions
0B0DDD             0173*  ; Returns: hlu = hlu << deu
0B0DDD             0174*  ;		   de = 0
0B0DDD             0175*  ; NOTE: only considers deu up to 16 bits.
0B0DDD             0176*  ; preserves all other registers
0B0DDD             0177*  ;------------------------------------------------------------------------
0B0DDD             0178*  shl_hlu:
0B0DDD 7A          0179*  	ld		a,d		;up to 16 bit.
0B0DDE B3          0180*  	or		e
0B0DDF C8          0181*  	ret		z		;we're done
0B0DE0 29          0182*  	add		hl,hl	;shift HLU left
0B0DE1 1B          0183*  	dec		de
0B0DE2 18 F9       0184*  	jr		shl_hlu
0B0DE4             0185*  
0B0DE4             0186*  ;------------------------------------------------------------------------
0B0DE4             0187*  ; shr_hlu: 24 bit shift right hlu by deu positions
0B0DE4             0188*  ; Returns: hlu = hlu >> deu
0B0DE4             0189*  ;		   de = 0
0B0DE4             0190*  ; NOTE: only considers deu up to 16 bits.
0B0DE4             0191*  ; preserves all other registers
0B0DE4             0192*  ;------------------------------------------------------------------------
0B0DE4             0193*  shr_hlu:
0B0DE4 22 02 0E 0B 0194*  	ld		(bitbuf1),hl
0B0DE8 21 04 0E 0B 0195*  	ld		hl,bitbuf1+2
0B0DEC             0196*  shr_loop:
0B0DEC 7A          0197*  	ld		a,d		;up to 16 bit.
0B0DED B3          0198*  	or		e
0B0DEE 28 0D       0199*  	jr		z,shr_done		;we're done
0B0DF0             0200*  ;carry is clear from or instruction
0B0DF0 CB 1E       0201*  	rr		(hl)
0B0DF2 2B          0202*  	dec		hl
0B0DF3 CB 1E       0203*  	rr		(hl)
0B0DF5 2B          0204*  	dec		hl
0B0DF6 CB 1E       0205*  	rr		(hl)
0B0DF8 23          0206*  	inc		hl
0B0DF9 23          0207*  	inc		hl
0B0DFA 1B          0208*  	dec		de
0B0DFB 18 EF       0209*  	jr		shr_loop
0B0DFD             0210*  shr_done:
0B0DFD 2A 02 0E 0B 0211*  	ld		hl,(bitbuf1)	;collect result
0B0E01 C9          0212*  	ret
0B0E02             0213*  
0B0E02             0214*  ;------------------------------------------------------------------------
0B0E02             0215*  ; Scratch area for calculations
0B0E02             0216*  ;------------------------------------------------------------------------
0B0E02 00 00 00    0217*  bitbuf1:	dw24	0	;bit manipulation buffer 1
0B0E05 00 00 00    0218*  bitbuf2:	dw24	0	;bit manipulation buffer 2
0B0E08             0029   
0B0E08             0030   ; APPLICATION INCLUDES
0B0E08 55 73 61 67 0031   str_usage: ASCIZ "Usage: scratch <args>\r\n"
       65 3A 20 73 
       63 72 61 74 
       63 68 20 3C 
       61 72 67 73 
       3E 0D 0A 00 
0B0E20 45 72 72 6F 0032   str_error: ASCIZ "Error!\r\n"
       72 21 0D 0A 
       00          
0B0E29 53 75 63 63 0033   str_success: ASCIZ "Success!\r\n"
       65 73 73 21 
       0D 0A 00    
0B0E34             0034   
0B0E34             0035   ; This is a scratch moslet for testing new features
0B0E34             0036   ; Parameters:
0B0E34             0037   ;
0B0E34             0038   
0B0E34             0039   ; ========= BOILERPLATE MAIN LOOP =========
0B0E34             0040   ; The main routine
0B0E34             0041   ; IXU: argv - pointer to array of parameters
0B0E34             0042   ;   C: argc - number of parameters
0B0E34             0043   ; Returns:
0B0E34             0044   ;  HL: Error code, or 0 if OK
0B0E34             0045   
0B0E34             0046   min_args: equ 2
0B0E34             0047   
0B0E34             0048   _main:
0B0E34 79          0049       ld a,c              ; how many arguments?
0B0E35 FE 02       0050       cp min_args         ; not enough?
0B0E37 30 22       0051       jr nc,main          ; if enough, go to main loop
0B0E39 21 08 0E 0B 0052       ld hl,str_usage     ; if not enough, print usage
0B0E3D CD 35 02 0B 0053       call printString
0B0E41             0054                           ; fall through to _main_end_error
0B0E41             0055   
0B0E41             0056   _main_end_error:
0B0E41 21 20 0E 0B 0057       ld hl,str_error     ; print error message
0B0E45 CD 35 02 0B 0058       call printString
0B0E49 21 13 00 00 0059       ld hl,19            ; return error code 19
0B0E4D C9          0060       ret
0B0E4E             0061   
0B0E4E             0062   _main_end_ok:
0B0E4E 21 29 0E 0B 0063       ld hl,str_success   ; print success message
0B0E52 CD 35 02 0B 0064       call printString
0B0E56 21 00 00 00 0065       ld hl,0             ; return 0 for success
0B0E5A C9          0066       ret
0B0E5B             0067   
0B0E5B             0068   ; ========= BEGIN CUSTOM MAIN LOOP =========
0B0E5B             0069   main:
0B0E5B 0D          0070       dec c               ; decrement the argument count to skip the program name
0B0E5C             0071   
0B0E5C             0072   ; assume the first argument is numeric
0B0E5C CD 71 0E 0B 0073       call get_numeric_arg ; de contains the numeric value of the first argument
0B0E60 EB          0074       ex de,hl            ; move result in de to hl
0B0E61 CD 15 04 0B 0075       call dumpRegistersHex ; print the registers
0B0E65 CD 85 02 0B 0076       call printDec       ; print the number
0B0E69 CD 4A 02 0B 0077       call printNewLine   ; print a newline
0B0E6D C3 4E 0E 0B 0078       jp _main_end_ok
0B0E71             0079   
0B0E71             0080   
0B0E71             0081   ; ========== HELPER FUNCTIONS ==========
0B0E71             0082   get_numeric_arg:
0B0E71 ED 32 03    0083       lea ix,ix+3 ; point to the next argument
0B0E74 DD 27 00    0084       ld hl,(ix)  ; get the argument string
0B0E77 CD 98 01 0B 0085       call signed_asc_to_168 ; convert the string to a number
0B0E7B C9          0086       ret ; return with the value in DE
0B0E7C             0087   
0B0E7C             0088   get_plot_coords:
0B0E7C             0089   ; get the move coordinates
0B0E7C ED 32 03    0090       lea ix,ix+3 ; pointer to next argument address
0B0E7F DD 27 00    0091       ld hl,(ix)  ; pointer to the x coordinate string
0B0E82 CD 98 01 0B 0092       call signed_asc_to_168 ; de = x coordinate
0B0E86 D5          0093       push de
0B0E87 C1          0094       pop bc ; bc = x coordinate
0B0E88 ED 32 03    0095       lea ix,ix+3 ; pointer to next argument address
0B0E8B DD 27 00    0096       ld hl,(ix)  ; pointer to the y coordinate string
0B0E8E CD 98 01 0B 0097       call signed_asc_to_168 ; de = y coordinate
0B0E92 C9          0098       ret
0B0E93             0099   
0B0E93             0100   ; match the next argument after ix to the dispatch table at iy
0B0E93             0101   ;   - arguments and dispatch entries are zero-terminated, case-sensitive strings
0B0E93             0102   ;   - final entry of dispatch table must be a 3-byte zero or bad things will happen
0B0E93             0103   ; returns: NO MATCH: iy=dispatch list terminator a=1 and zero flag reset
0B0E93             0104   ;          ON MATCH: iy=dispatch address, a=0 and zero flag se
0B0E93             0105   ; destroys: a, hl, de, ix, iy, flags
0B0E93             0106   match_next:
0B0E93 ED 32 03    0107       lea ix,ix+3         ; point to the next argument
0B0E96             0108   @loop:
0B0E96 FD 27 00    0109       ld hl,(iy)          ; pointer argument dispatch record
0B0E99             0110       signHL              ; check for list terminator
0B0E99 19          0001M          add hl,de
0B0E9A B7          0002M          or a
0B0E9B ED 52       0003M          sbc hl,de
0B0E9D CA B5 0E 0B 0111       jp z,@no_match      ; if a=0, return error
0B0EA1 23          0112       inc hl              ; skip over jp instruction
0B0EA2 23          0113       inc hl
0B0EA3 DD 17 00    0114       ld de,(ix)          ; pointer to the argument string
0B0EA6 CD BB 0E 0B 0115       call str_equal      ; compare the argument to the dispatch table entry
0B0EAA CA B7 0E 0B 0116       jp z,@match         ; if equal, return success
0B0EAE ED 33 03    0117       lea iy,iy+3         ; if not equal, bump iy to next dispatch table entry
0B0EB1 C3 96 0E 0B 0118       jp @loop            ; and loop
0B0EB5             0119   @no_match:
0B0EB5 3C          0120       inc a               ; no match so return a=1 and zero flag reset
0B0EB6 C9          0121       ret
0B0EB7             0122   @match:
0B0EB7 FD 37 00    0123       ld iy,(iy)          ; get the function pointer
0B0EBA C9          0124       ret                 ; return a=0 and zero flag set
0B0EBB             0125   
0B0EBB             0126   ; compare two zero-terminated strings for equality, case-sensitive
0B0EBB             0127   ; hl: pointer to first string, de: pointer to second string
0B0EBB             0128   ; returns: z if equal, nz if not equal
0B0EBB             0129   ; destroys: a, hl, de
0B0EBB             0130   str_equal:
0B0EBB 1A          0131       ld a,(de)           ; get the first character
0B0EBC BE          0132       cp (hl)             ; compare to the second character
0B0EBD C0          0133       ret nz              ; if not equal, return
0B0EBE B7          0134       or a
0B0EBF C8          0135       ret z               ; if equal and zero, return
0B0EC0 23          0136       inc hl              ; next character
0B0EC1 13          0137       inc de
0B0EC2 C3 BB 0E 0B 0138       jp str_equal        ; loop until end of string
0B0EC6             0139   
0B0EC6             0140   ; print the parameter string pointed to by ix
0B0EC6             0141   ; destroys: a, hl
0B0EC6             0142   print_param:
0B0EC6 DD 27 00    0143       ld hl,(ix)          ; get the parameter pointer
0B0EC9 CD 35 02 0B 0144       call printString    ; print the parameter string
0B0ECD 3E 20       0145       ld a,' '            ; print a space separator
0B0ECF 5B D7       0146       rst.lil $10
0B0ED1 C9          0147       ret
0B0ED2             0148   
0B0ED2             0149   ; print the parameters
0B0ED2             0150   ; inputs: b = number of parameters, ix = pointer to the parameters
0B0ED2             0151   ; destroys: a, hl, bc
0B0ED2             0152   print_params:
0B0ED2 41          0153       ld b,c              ; loop counter = number of parameters
0B0ED3 DD E5       0154       push ix             ; save the pointer to the parameters
0B0ED5             0155   @loop:
0B0ED5 C5          0156       push bc             ; save the loop counter
0B0ED6 CD C6 0E 0B 0157       call print_param    ; print the parameter
0B0EDA ED 32 03    0158       lea ix,ix+3         ; next parameter pointer
0B0EDD C1          0159       pop bc              ; get back the loop counter
0B0EDE 10 F5       0160       djnz @loop          ; loop until done
0B0EE0 DD E1       0161       pop ix              ; restore the pointer to the parameters
0B0EE2 C9          0162       ret
0B0EE3             0163   
0B0EE3             0164   debug_print:
0B0EE3 CD 4A 02 0B 0165       call printNewLine   ; DEBUG
0B0EE7 CD 48 05 0B 0166       call dumpFlags      ; DEBUG
0B0EEB CD C6 0E 0B 0167       call print_param    ; DEBUG
0B0EEF CD 4A 02 0B 0168       call printNewLine   ; DEBUG
0B0EF3 CD 4A 02 0B 0169       call printNewLine   ; DEBUG
0B0EF7 C9          0170       ret
