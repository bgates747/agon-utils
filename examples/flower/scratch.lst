PC     Output      Line
040000             0001   ;
040000             0002   ; Title:	test
040000             0003   ; Author:	Brandon Gates
040000             0004   ; Created:	29/10/2024
040000             0005   
040000             0006       ASSUME	ADL = 1
040000             0007       INCLUDE "mos_api.inc"
040000             0001*  ;
040000             0002*  ; Title:	AGON MOS - API for user projects
040000             0003*  ; Author:	Dean Belfield
040000             0004*  ; Created:	03/08/2022
040000             0005*  ; Last Updated:	11/11/2023
040000             0006*  ;
040000             0007*  ; Modinfo:
040000             0008*  ; 05/08/2022:	Added mos_feof
040000             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040000             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040000             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040000             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040000             0013*  ; 13/10/2022:	Added mos_oscli
040000             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040000             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040000             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040000             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040000             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040000             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040000             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040000             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040000             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040000             0023*  ; 19/05/2023:	Added sysvar_scrMode
040000             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040000             0025*  ; 03/08/2023:	Added mos_setkbvector
040000             0026*  ; 10/08/2023:	Added mos_getkbmap
040000             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040000             0028*  ; 09/04/2024:   Adapter to ez80asm
040000             0029*  ; VDP control (VDU 23, 0, n)
040000             0030*  ;
040000             0031*  vdp_gp:			EQU 	80h
040000             0032*  vdp_keycode:		EQU 	81h
040000             0033*  vdp_cursor:		EQU	82h
040000             0034*  vdp_scrchar:		EQU	83h
040000             0035*  vdp_scrpixel:		EQU	84h
040000             0036*  vdp_audio:		EQU	85h
040000             0037*  vdp_mode:		EQU	86h
040000             0038*  vdp_rtc:		EQU	87h
040000             0039*  vdp_keystate:		EQU	88h
040000             0040*  vdp_logicalcoords:	EQU	C0h
040000             0041*  vdp_terminalmode:	EQU	FFh
040000             0042*  
040000             0043*  ; MOS high level functions
040000             0044*  ;
040000             0045*  mos_getkey:		EQU	00h
040000             0046*  mos_load:		EQU	01h
040000             0047*  mos_save:		EQU	02h
040000             0048*  mos_cd:			EQU	03h
040000             0049*  mos_dir:		EQU	04h
040000             0050*  mos_del:		EQU	05h
040000             0051*  mos_ren:		EQU	06h
040000             0052*  mos_mkdir:		EQU	07h
040000             0053*  mos_sysvars:		EQU	08h
040000             0054*  mos_editline:		EQU	09h
040000             0055*  mos_fopen:		EQU	0Ah
040000             0056*  mos_fclose:		EQU	0Bh
040000             0057*  mos_fgetc:		EQU	0Ch
040000             0058*  mos_fputc:		EQU	0Dh
040000             0059*  mos_feof:		EQU	0Eh
040000             0060*  mos_getError:		EQU	0Fh
040000             0061*  mos_oscli:		EQU	10h
040000             0062*  mos_copy:		EQU	11h
040000             0063*  mos_getrtc:		EQU	12h
040000             0064*  mos_setrtc:		EQU	13h
040000             0065*  mos_setintvector:	EQU	14h
040000             0066*  mos_uopen:		EQU	15h
040000             0067*  mos_uclose:		EQU	16h
040000             0068*  mos_ugetc:		EQU	17h
040000             0069*  mos_uputc:		EQU 	18h
040000             0070*  mos_getfil:		EQU	19h
040000             0071*  mos_fread:		EQU	1Ah
040000             0072*  mos_fwrite:		EQU	1Bh
040000             0073*  mos_flseek:		EQU	1Ch
040000             0074*  mos_setkbvector:	EQU	1Dh
040000             0075*  mos_getkbmap:		EQU	1Eh
040000             0076*  mos_i2c_open:		EQU	1Fh
040000             0077*  mos_i2c_close:		EQU	20h
040000             0078*  mos_i2c_write:		EQU	21h
040000             0079*  mos_i2c_read:		EQU	22h
040000             0080*  
040000             0081*  
040000             0082*  ; FatFS file access functions
040000             0083*  ;
040000             0084*  ffs_fopen:		EQU	80h
040000             0085*  ffs_fclose:		EQU	81h
040000             0086*  ffs_fread:		EQU	82h
040000             0087*  ffs_fwrite:		EQU	83h
040000             0088*  ffs_flseek:		EQU	84h
040000             0089*  ffs_ftruncate:		EQU	85h
040000             0090*  ffs_fsync:		EQU	86h
040000             0091*  ffs_fforward:		EQU	87h
040000             0092*  ffs_fexpand:		EQU	88h
040000             0093*  ffs_fgets:		EQU	89h
040000             0094*  ffs_fputc:		EQU	8Ah
040000             0095*  ffs_fputs:		EQU	8Bh
040000             0096*  ffs_fprintf:		EQU	8Ch
040000             0097*  ffs_ftell:		EQU	8Dh
040000             0098*  ffs_feof:		EQU	8Eh
040000             0099*  ffs_fsize:		EQU	8Fh
040000             0100*  ffs_ferror:		EQU	90h
040000             0101*  
040000             0102*  ; FatFS directory access functions
040000             0103*  ;
040000             0104*  ffs_dopen:		EQU	91h
040000             0105*  ffs_dclose:		EQU	92h
040000             0106*  ffs_dread:		EQU	93h
040000             0107*  ffs_dfindfirst:		EQU	94h
040000             0108*  ffs_dfindnext:		EQU	95h
040000             0109*  
040000             0110*  ; FatFS file and directory management functions
040000             0111*  ;
040000             0112*  ffs_stat:		EQU	96h
040000             0113*  ffs_unlink:		EQU	97h
040000             0114*  ffs_rename:		EQU	98h
040000             0115*  ffs_chmod:		EQU	99h
040000             0116*  ffs_utime:		EQU	9Ah
040000             0117*  ffs_mkdir:		EQU	9Bh
040000             0118*  ffs_chdir:		EQU	9Ch
040000             0119*  ffs_chdrive:		EQU	9Dh
040000             0120*  ffs_getcwd:		EQU	9Eh
040000             0121*  
040000             0122*  ; FatFS volume management and system configuration functions
040000             0123*  ;
040000             0124*  ffs_mount:		EQU	9Fh
040000             0125*  ffs_mkfs:		EQU	A0h
040000             0126*  ffs_fdisk:		EQU	A1h
040000             0127*  ffs_getfree:		EQU	A2h
040000             0128*  ffs_getlabel:		EQU	A3h
040000             0129*  ffs_setlabel:		EQU	A4h
040000             0130*  ffs_setcp:		EQU	A5h
040000             0131*  
040000             0132*  ; File access modes
040000             0133*  ;
040000             0134*  fa_read:		EQU	01h
040000             0135*  fa_write:		EQU	02h
040000             0136*  fa_open_existing:	EQU	00h
040000             0137*  fa_create_new:		EQU	04h
040000             0138*  fa_create_always:	EQU	08h
040000             0139*  fa_open_always:		EQU	10h
040000             0140*  fa_open_append:		EQU	30h
040000             0141*  
040000             0142*  ; System variable indexes for api_sysvars
040000             0143*  ; Index into _sysvars in globals.asm
040000             0144*  ;
040000             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040000             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040000             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040000             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040000             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040000             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040000             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040000             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040000             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040000             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040000             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040000             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040000             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040000             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040000             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040000             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040000             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040000             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040000             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040000             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040000             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040000             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040000             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040000             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040000             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040000             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040000             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040000             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040000             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040000             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040000             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040000             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040000             0177*  
040000             0178*  ; Flags for the VPD protocol
040000             0179*  ;
040000             0180*  vdp_pflag_cursor:	EQU	00000001b
040000             0181*  vdp_pflag_scrchar:	EQU	00000010b
040000             0182*  vdp_pflag_point:	EQU	00000100b
040000             0183*  vdp_pflag_audio:	EQU	00001000b
040000             0184*  vdp_pflag_mode:		EQU	00010000b
040000             0185*  vdp_pflag_rtc:		EQU	00100000b
040000             0186*  vdp_pflag_mouse:	EQU	01000000b
040000             0187*  ; vdp_pflag_buffered:	EQU	10000000b
040000             0188*  
040000             0189*  ;
040000             0190*  ; FatFS structures
040000             0191*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040000             0192*  ;
040000             0193*  ; Object ID and allocation information (FFOBJID)
040000             0194*  ;
040000             0195*  ;FFOBJID	.STRUCT
040000             0196*  ;	fs:		DS	3	; Pointer to the hosting volume of this object
040000             0197*  ;	id:		DS	2	; Hosting volume mount ID
040000             0198*  ;	attr:		DS	1	; Object attribute;
040000             0199*  ;	stat:		DS	1	; Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040000             0200*  ;	sclust:		DS	4	; Object data start cluster (0:no cluster or root directory)
040000             0201*  ;	objsize:	DS	4	; Object size (valid when sclust != 0)
040000             0202*  ;FFOBJID_SIZE .ENDSTRUCT FFOBJID
040000             0203*  ;
040000             0204*  ; File object structure (FIL)
040000             0205*  ;
040000             0206*  ;FIL .STRUCT
040000             0207*  ;	obj:		.TAG	FFOBJID	; Object identifier
040000             0208*  ;	flag:		DS	1	; File status flags
040000             0209*  ;	err:		DS	1	; Abort flag (error code)
040000             0210*  ;	fptr:		DS	4	; File read/write pointer (Zeroed on file open)
040000             0211*  ;	clust:		DS	4	; Current cluster of fpter (invalid when fptr is 0)
040000             0212*  ;	sect:		DS	4	; Sector number appearing in buf[] (0:invalid)
040000             0213*  ;	dir_sect:	DS	4	; Sector number containing the directory entry
040000             0214*  ;	dir_ptr:	DS	3	; Pointer to the directory entry in the win[]
040000             0215*  ;FIL_SIZE .ENDSTRUCT FIL
040000             0216*  ;
040000             0217*  ; Directory object structure (DIR)
040000             0218*  ;
040000             0219*  ;DIR .STRUCT
040000             0220*  ;	obj:		.TAG	FFOBJID	; Object identifier;
040000             0221*  ;	dptr:		DS	4	; Current read/write offset
040000             0222*  ;	clust:		DS	4	; Current cluster
040000             0223*  ;	sect:		DS	4	; Current sector (0:Read operation has terminated)
040000             0224*  ;	dir:		DS	3	; Pointer to the directory item in the win[]
040000             0225*  ;	fn:		DS	12	; SFN (in/out) {body[8],ext[3],status[1]}
040000             0226*  ;	blk_ofs:	DS	4	; Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040000             0227*  ;DIR_SIZE .ENDSTRUCT DIR
040000             0228*  ;
040000             0229*  ; File information structure (FILINFO)
040000             0230*  ;
040000             0231*  ;FILINFO .STRUCT
040000             0232*  ;	fsize:		DS 	4	; File size
040000             0233*  ;	fdate:		DS	2	; Modified date;
040000             0234*  ;	ftime:		DS	2	; Modified time
040000             0235*  ;	fattrib:	DS	1	; File attribute
040000             0236*  ;	altname:	DS	13	; Alternative file name
040000             0237*  ;	fname:		DS	256	; Primary file name
040000             0238*  ;FILINFO_SIZE .ENDSTRUCT FILINFO
040000             0239*  
040000             0240*  ;
040000             0241*  ; Macro for calling the API
040000             0242*  ; Parameters:
040000             0243*  ; - function: One of the function numbers listed above
040000             0244*  ;
040000             0245*  			MACRO	MOSCALL function
040000             0246*  			LD	A, function
040000             0247*  			RST.L	08h
040000             0248*  			ENDMACRO
040000             0008       ORG 0x0B0000 ; Is a moslet
0B0000             0009   
0B0000             0010       MACRO PROGNAME
0B0000             0011       ASCIZ "scratch.bin"
0B0000             0012       ENDMACRO
0B0000             0013   
0B0000             0014   ; STANDARD MOSLET INCLUDES
0B0000             0015       include "init.inc"
0B0000             0001*  ;
0B0000             0002*  ; Title:	Copy - Initialisation Code
0B0000             0003*  ; Author:	Dean Belfield, Lennart Benschop
0B0000             0004*  ; Created:	06/11/2022
0B0000             0005*  ; Last Updated:	26/12/2022
0B0000             0006*  ;
0B0000             0007*  ; Modinfo:
0B0000             0008*  ; 17/12/2022:	Added parameter processing
0B0000             0009*  ; 26/12/2022:   Adapted to Copy program, use LEA instead of 3x INC IX, Save/restore MB
0B0000             0010*  ; Changed:      08/04/2924 adapt to ez80asm
0B0000             0011*  
0B0000             0012*  
0B0000             0013*  argv_ptrs_max:		EQU	16			; Maximum number of arguments allowed in argv
0B0000             0014*  
0B0000             0015*  ;
0B0000             0016*  ; Start in ADL mode
0B0000             0017*  ;
0B0000 C3 45 00 0B 0018*  			JP	_start			; Jump to start
0B0004             0019*  ;
0B0004             0020*  ; The header stuff is from byte 64 onwards
0B0004             0021*  ;
0B0004             0022*  
0B0004             0023*  _exec_name:
0B0004             0024*  			PROGNAME			; The executable name, only used in argv
0B0004 73 63 72 61 0001*M     ASCIZ "scratch.bin"
       74 63 68 2E 
       62 69 6E 00 
0B0010             0025*  
0B0010 FF FF FF FF 0026*  			ALIGN	64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
0B0040             0027*  
0B0040 4D 4F 53    0028*  			DB	"MOS"			; Flag for MOS - to confirm this is a valid MOS command
0B0043 00          0029*  			DB	00h			; MOS header version 0
0B0044 01          0030*  			DB	01h			; Flag for run mode (0: Z80, 1: ADL)
0B0045             0031*  ;
0B0045             0032*  ; And the code follows on immediately after the header
0B0045             0033*  ;
0B0045 F5          0034*  _start:			PUSH	AF			; Preserve the registers
0B0046 C5          0035*  			PUSH	BC
0B0047 D5          0036*  			PUSH	DE
0B0048 DD E5       0037*  			PUSH	IX
0B004A FD E5       0038*  			PUSH	IY
0B004C ED 6E       0039*  			LD	A, MB			; Save MB
0B004E F5          0040*  			PUSH 	AF
0B004F AF          0041*  			XOR 	A
0B0050 ED 6D       0042*  			LD 	MB, A                   ; Clear to zero so MOS API calls know how to use 24-bit addresses.
0B0052             0043*  
0B0052 DD 21 B9 00 0044*  			LD	IX, argv_ptrs		; The argv array pointer address
       0B          
0B0057 DD E5       0045*  			PUSH	IX
0B0059 CD 70 00 0B 0046*  			CALL	_parse_params		; Parse the parameters
0B005D DD E1       0047*  			POP	IX			; IX: argv
0B005F 06 00       0048*  			LD	B, 0			;  C: argc
0B0061 CD EC 19 0B 0049*  			CALL	_main			; Start user code
0B0065             0050*  
0B0065 F1          0051*  			POP 	AF
0B0066 ED 6D       0052*  			LD	MB, A
0B0068 FD E1       0053*  			POP	IY			; Restore registers
0B006A DD E1       0054*  			POP	IX
0B006C D1          0055*  			POP	DE
0B006D C1          0056*  			POP	BC
0B006E F1          0057*  			POP	AF
0B006F C9          0058*  			RET
0B0070             0059*  
0B0070             0060*  ; Parse the parameter string into a C array
0B0070             0061*  ; Parameters
0B0070             0062*  ; - HL: Address of parameter string
0B0070             0063*  ; - IX: Address for array pointer storage
0B0070             0064*  ; Returns:
0B0070             0065*  ; -  C: Number of parameters parsed
0B0070             0066*  ;
0B0070 01 04 00 0B 0067*  _parse_params:		LD	BC, _exec_name
0B0074 DD 0F 00    0068*  			LD	(IX+0), BC		; ARGV[0] = the executable name
0B0077 ED 32 03    0069*  			LEA     IX, IX+3
0B007A CD B2 00 0B 0070*  			CALL	_skip_spaces		; Skip HL past any leading spaces
0B007E             0071*  ;
0B007E 01 01 00 00 0072*  			LD	BC, 1			; C: ARGC = 1 - also clears out top 16 bits of BCU
0B0082 06 0F       0073*  			LD	B, argv_ptrs_max - 1	; B: Maximum number of argv_ptrs
0B0084             0074*  ;
0B0084             0075*  _parse_params_1:
0B0084 C5          0076*  			PUSH	BC			; Stack ARGC
0B0085 E5          0077*  			PUSH	HL			; Stack start address of token
0B0086 CD A3 00 0B 0078*  			CALL	_get_token		; Get the next token
0B008A 79          0079*  			LD	A, C			; A: Length of the token in characters
0B008B D1          0080*  			POP	DE			; Start address of token (was in HL)
0B008C C1          0081*  			POP	BC			; ARGC
0B008D B7          0082*  			OR	A			; Check for A=0 (no token found) OR at end of string
0B008E C8          0083*  			RET	Z
0B008F             0084*  ;
0B008F DD 1F 00    0085*  			LD	(IX+0), DE		; Store the pointer to the token
0B0092 E5          0086*  			PUSH	HL			; DE=HL
0B0093 D1          0087*  			POP	DE
0B0094 CD B2 00 0B 0088*  			CALL	_skip_spaces		; And skip HL past any spaces onto the next character
0B0098 AF          0089*  			XOR	A
0B0099 12          0090*  			LD	(DE), A			; Zero-terminate the token
0B009A ED 32 03    0091*  			LEA  	IX, IX+3			; Advance to next pointer position
0B009D 0C          0092*  			INC	C			; Increment ARGC
0B009E 79          0093*  			LD	A, C			; Check for C >= A
0B009F B8          0094*  			CP	B
0B00A0 38 E2       0095*  			JR	C, _parse_params_1	; And loop
0B00A2 C9          0096*  			RET
0B00A3             0097*  
0B00A3             0098*  ; Get the next token
0B00A3             0099*  ; Parameters:
0B00A3             0100*  ; - HL: Address of parameter string
0B00A3             0101*  ; Returns:
0B00A3             0102*  ; - HL: Address of first character after token
0B00A3             0103*  ; -  C: Length of token (in characters)
0B00A3             0104*  ;
0B00A3 0E 00       0105*  _get_token:		LD	C, 0			; Initialise length
0B00A5 7E          0106*  @@:			LD	A, (HL)			; Get the character from the parameter string
0B00A6 B7          0107*  			OR	A			; Exit if 0 (end of parameter string in MOS)
0B00A7 C8          0108*  			RET 	Z
0B00A8 FE 0D       0109*  			CP	13			; Exit if CR (end of parameter string in BBC BASIC)
0B00AA C8          0110*  			RET	Z
0B00AB FE 20       0111*  			CP	' '			; Exit if space (end of token)
0B00AD C8          0112*  			RET	Z
0B00AE 23          0113*  			INC	HL			; Advance to next character
0B00AF 0C          0114*  			INC 	C			; Increment length
0B00B0 18 F3       0115*  			JR	@B
0B00B2             0116*  
0B00B2             0117*  ; Skip spaces in the parameter string
0B00B2             0118*  ; Parameters:
0B00B2             0119*  ; - HL: Address of parameter string
0B00B2             0120*  ; Returns:
0B00B2             0121*  ; - HL: Address of next none-space character
0B00B2             0122*  ;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
0B00B2             0123*  ;
0B00B2 7E          0124*  _skip_spaces:		LD	A, (HL)			; Get the character from the parameter string
0B00B3 FE 20       0125*  			CP	' '			; Exit if not space
0B00B5 C0          0126*  			RET	NZ
0B00B6 23          0127*  			INC	HL			; Advance to next character
0B00B7 18 F9       0128*  			JR	_skip_spaces		; Increment length
0B00B9             0129*  
0B00B9             0130*  ; Storage for the argv array pointers
0B00B9             0131*  ;
0B00B9 00 00 00 00 0132*  argv_ptrs:		BLKP	argv_ptrs_max, 0
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0B00E9             0016       include "parse.inc"
0B00E9             0001*  ;
0B00E9             0002*  ; Title:	Number Parsing Functions
0B00E9             0003*  ; Author:	Dean Belfield
0B00E9             0004*  ; Created:	15/11/2022
0B00E9             0005*  ; Last Updated:	15/11/2022
0B00E9             0006*  ; Last Updated: 29/12/2022 Lennart Benchop adapt for 24-bit mode.
0B00E9             0007*  ; Modinfo:
0B00E9             0008*  ; 2024/04/08    Adapt for ez80asm
0B00E9             0009*  
0B00E9             0010*  ; Read a number and convert to binary
0B00E9             0011*  ; If prefixed with &, will read as hex, otherwise decimal
0B00E9             0012*  ;   Inputs: HL: Pointer in string buffer
0B00E9             0013*  ;  Outputs: HL: Updated text pointer
0B00E9             0014*  ;           DE: Value
0B00E9             0015*  ;            A: Terminator (spaces skipped)
0B00E9             0016*  ;            F: Carry set if valid number, otherwise reset
0B00E9             0017*  ; Destroys: A,D,E,H,L,F
0B00E9             0018*  ;
0B00E9 11 00 00 00 0019*  ASC_TO_NUMBER:		LD		DE, 0			; Initialise DE
0B00ED CD B2 00 0B 0020*  			CALL		_skip_spaces		; Skip whitespace
0B00F1 7E          0021*  			LD		A, (HL)			; Read first character
0B00F2 B7          0022*  			OR		A			; Check for end of string
0B00F3 C8          0023*  			RET		Z			; Return with no carry if not
0B00F4 C5          0024*  			PUSH		BC			; Preserve BC
0B00F5 FE 26       0025*  			CP		'&'			; Is it prefixed with '&' (HEX number)?
0B00F7 20 23       0026*  			JR		NZ, ASC_TO_NUMBER3	; Jump to decimal parser if not
0B00F9 23          0027*  			INC		HL			; Otherwise fall through to ASC_TO_HEX
0B00FA             0028*  ;
0B00FA 7E          0029*  ASC_TO_NUMBER1:		LD		A, (HL)			; Fetch the character
0B00FB CD 3D 01 0B 0030*  			CALL   	 	UPPRC			; Convert to uppercase
0B00FF D6 30       0031*  			SUB		'0'			; Normalise to 0
0B0101 38 37       0032*  			JR 		C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0B0103 FE 0A       0033*  			CP 		10			; Check if >= 10
0B0105 38 06       0034*  			JR 		C, ASC_TO_NUMBER2	; No, so skip next bit
0B0107 D6 07       0035*  			SUB 		7			; Adjust ASCII A-F to nibble
0B0109 FE 10       0036*  			CP 		16			; Check for > F
0B010B 30 2D       0037*  			JR 		NC, ASC_TO_NUMBER4	; Return if out of range
0B010D             0038*  ;
0B010D E5          0039*  ASC_TO_NUMBER2:		PUSH		HL			; Stack HL
0B010E D5          0040*  			PUSH		DE			; LD HL, DE
0B010F E1          0041*  			POP		HL
0B0110 29          0042*  			ADD		HL, HL
0B0111 29          0043*  			ADD		HL, HL
0B0112 29          0044*  			ADD		HL, HL
0B0113 29          0045*  			ADD		HL, HL
0B0114 E5          0046*  			PUSH		HL			; LD DE, HL
0B0115 D1          0047*  			POP		DE
0B0116 E1          0048*  			POP		HL			; Restore HL
0B0117 B3          0049*  			OR      	E			; OR the new digit in to the least significant nibble
0B0118 5F          0050*  			LD      	E, A
0B0119             0051*  ;
0B0119 23          0052*  			INC		HL			; Onto the next character
0B011A 18 DE       0053*  			JR      	ASC_TO_NUMBER1		; And loop
0B011C             0054*  ;
0B011C 7E          0055*  ASC_TO_NUMBER3:		LD		A, (HL)
0B011D D6 30       0056*  			SUB		'0'			; Normalise to 0
0B011F 38 19       0057*  			JR		C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0B0121 FE 0A       0058*  			CP		10			; Check if >= 10
0B0123 30 15       0059*  			JR		NC, ASC_TO_NUMBER4	; Return if >= 10
0B0125             0060*  ;
0B0125 E5          0061*  			PUSH		HL			; Stack HL
0B0126 D5          0062*  			PUSH		DE			; LD HL, DE
0B0127 E1          0063*  			POP		HL
0B0128 E5          0064*  			PUSH		HL			; LD BC, HL
0B0129 C1          0065*  			POP		BC
0B012A 29          0066*  			ADD		HL, HL 			; x 2
0B012B 29          0067*  			ADD		HL, HL 			; x 4
0B012C 09          0068*  			ADD		HL, BC 			; x 5
0B012D 29          0069*  			ADD		HL, HL 			; x 10
0B012E 01 00 00 00 0070*  			LD		BC, 0
0B0132 4F          0071*  			LD 		C, A			; LD BCU, A
0B0133 09          0072*  			ADD		HL, BC			; Add BCU to HL
0B0134 E5          0073*  			PUSH		HL			; LD DE, HL
0B0135 D1          0074*  			POP		DE
0B0136 E1          0075*  			POP		HL			; Restore HL
0B0137             0076*  ;
0B0137 23          0077*  			INC		HL
0B0138 18 E2       0078*  			JR		ASC_TO_NUMBER3
0B013A C1          0079*  ASC_TO_NUMBER4:		POP		BC
0B013B 37          0080*  			SCF					; We have a valid number so set carry
0B013C C9          0081*  			RET
0B013D             0082*  
0B013D             0083*  
0B013D             0084*  ; Convert a character to upper case
0B013D             0085*  ;  A: Character to convert
0B013D             0086*  ;
0B013D E6 7F       0087*  UPPRC:  		AND     	7FH
0B013F FE 60       0088*  			CP      	'`'
0B0141 D8          0089*  			RET     	C
0B0142 E6 5F       0090*  			AND     	5FH			; Convert to upper case
0B0144 C9          0091*  			RET
0B0145             0092*  
0B0145             0093*  
0B0145             0094*  ;------------------------------------------------------------------------
0B0145             0095*  ; Read a number and convert to binary (decimal only)
0B0145             0096*  ; Inputs: hl: Pointer in string buffer
0B0145             0097*  ; Outputs: hl: Updated text pointer
0B0145             0098*  ;         de: Value
0B0145             0099*  ;         a: Terminator (spaces skipped)
0B0145             0100*  ;         f: Carry set if valid number, otherwise reset
0B0145             0101*  ; Destroys: a, d, e, h, l, f
0B0145             0102*  ;------------------------------------------------------------------------
0B0145             0103*  asc_to_s24:
0B0145 3E 01       0104*      ld a,1 ; set sign flag
0B0147 32 97 01 0B 0105*      ld (@sign),a ; store sign flag
0B014B             0106*  
0B014B 11 00 00 00 0107*      ld de, 0 ; initialise de
0B014F CD B2 00 0B 0108*      call _skip_spaces ; skip whitespace
0B0153             0109*  
0B0153 7E          0110*      ld a, (hl) ; read first character
0B0154 B7          0111*      or a ; check for end of string
0B0155 C8          0112*      ret z ; return with no carry if not
0B0156             0113*  
0B0156 C5          0114*      push bc ; preserve bc
0B0157             0115*  
0B0157 FE 2D       0116*      cp '-' ; check for negative number
0B0159 C2 63 01 0B 0117*      jp nz,@loop ; number is positive, nothing more to do
0B015D AF          0118*      xor a ; sign flag to zero
0B015E 32 97 01 0B 0119*      ld (@sign),a ; store sign flag
0B0162 23          0120*      inc hl ; skip '-'
0B0163             0121*  
0B0163             0122*  @loop:
0B0163 7E          0123*      ld a, (hl)
0B0164 D6 30       0124*      sub '0' ; normalise to 0
0B0166 38 19       0125*      jr c, @integer_end ; return if < ascii '0'
0B0168 FE 0A       0126*      cp 10 ; check if >= 10
0B016A 30 15       0127*      jr nc, @integer_end ; return if >= 10
0B016C E5          0128*      push hl ; stack hl
0B016D D5          0129*      push de ; ld hl, de
0B016E E1          0130*      pop hl
0B016F E5          0131*      push hl ; ld bc, hl
0B0170 C1          0132*      pop bc
0B0171 29          0133*      add hl, hl ; x 2
0B0172 29          0134*      add hl, hl ; x 4
0B0173 09          0135*      add hl, bc ; x 5
0B0174 29          0136*      add hl, hl ; x 10
0B0175 01 00 00 00 0137*      ld bc, 0
0B0179 4F          0138*      ld c, a ; ld bcu, a
0B017A 09          0139*      add hl, bc ; add bcu to hl
0B017B E5          0140*      push hl ; ld de, hl
0B017C D1          0141*      pop de
0B017D E1          0142*      pop hl ; restore hl
0B017E 23          0143*      inc hl
0B017F 18 E2       0144*      jr @loop
0B0181             0145*  
0B0181             0146*  @integer_end:
0B0181 C1          0147*      pop bc ; send bc back how she came in
0B0182 3A 97 01 0B 0148*      ld a, (@sign) ; get sign flag
0B0186 3D          0149*      dec a ; check if negative
0B0187 F2 95 01 0B 0150*      jp p,@pos ; positive number
0B018B             0151*  
0B018B             0152*  ; Negate de
0B018B E5          0153*      push hl ; save text pointer
0B018C 21 00 00 00 0154*      ld hl, 0
0B0190 AF          0155*      xor a ; clear carry
0B0191 ED 52       0156*      sbc hl, de ; subtract DE from HL
0B0193 EB          0157*      ex de, hl ; DE = 0-HL
0B0194 E1          0158*      pop hl ; restore text pointer
0B0195             0159*  
0B0195             0160*  @pos:
0B0195 37          0161*      scf ; we have a valid number so set carry
0B0196 C9          0162*      ret
0B0197             0163*  
0B0197 00          0164*  @sign: db 0 ; sign flag buffer
0B0198             0165*  
0B0198             0166*  
0B0198             0167*  ;------------------------------------------------------------------------
0B0198             0168*  ; Read a number and convert to binary (decimal only)
0B0198             0169*  ; Inputs: hl: Pointer in string buffer
0B0198             0170*  ; Outputs: hl: Updated text pointer
0B0198             0171*  ;         de: Value
0B0198             0172*  ;         a: Terminator (spaces skipped)
0B0198             0173*  ;         f: Carry set if valid number, otherwise reset
0B0198             0174*  ; Destroys: a, d, e, h, l, f
0B0198             0175*  ;------------------------------------------------------------------------
0B0198             0176*  asc_to_s168:
0B0198 3E 01       0177*      ld a,1 ; set sign flag
0B019A 32 57 02 0B 0178*      ld (@sign),a ; store sign flag
0B019E             0179*  
0B019E 11 00 00 00 0180*      ld de, 0 ; initialise de
0B01A2 ED 53 4F 02 0181*      ld (@result), de ; clear low bytes of result buffer
       0B          
0B01A7 ED 53 53 02 0182*      ld (@scratch), de ; clear low bytes of scratch buffer
       0B          
0B01AC             0183*  
0B01AC             0184*      ; call _skip_spaces ; skip whitespace
0B01AC             0185*  
0B01AC 7E          0186*      ld a, (hl) ; read first character
0B01AD B7          0187*      or a ; check for end of string
0B01AE C8          0188*      ret z ; return with no carry if not
0B01AF             0189*  
0B01AF C5          0190*      push bc ; preserve bc
0B01B0             0191*  
0B01B0 FE 2D       0192*      cp '-' ; check for negative number
0B01B2 C2 BC 01 0B 0193*      jp nz,@loop ; number is positive, nothing more to do
0B01B6 AF          0194*      xor a ; sign flag to zero
0B01B7 32 57 02 0B 0195*      ld (@sign),a ; store sign flag
0B01BB 23          0196*      inc hl ; skip '-'
0B01BC             0197*  
0B01BC             0198*  @loop:
0B01BC 7E          0199*      ld a, (hl)
0B01BD             0200*  
0B01BD             0201*  ; chcek for decimal point
0B01BD FE 2E       0202*      cp '.' ; check for decimal point
0B01BF CA 00 02 0B 0203*      jp z,@fractional_start ; jump to fractional part
0B01C3             0204*  
0B01C3             0205*  ; process integer part
0B01C3 D6 30       0206*      sub '0' ; normalise to 0
0B01C5 38 19       0207*      jr c, @integer_end ; return if < ascii '0'
0B01C7 FE 0A       0208*      cp 10 ; check if >= 10
0B01C9 30 15       0209*      jr nc, @integer_end ; return if >= 10
0B01CB E5          0210*      push hl ; stack hl
0B01CC D5          0211*      push de ; ld hl, de
0B01CD E1          0212*      pop hl
0B01CE E5          0213*      push hl ; ld bc, hl
0B01CF C1          0214*      pop bc
0B01D0 29          0215*      add hl, hl ; x 2
0B01D1 29          0216*      add hl, hl ; x 4
0B01D2 09          0217*      add hl, bc ; x 5
0B01D3 29          0218*      add hl, hl ; x 10
0B01D4 01 00 00 00 0219*      ld bc, 0
0B01D8 4F          0220*      ld c, a ; ld bcu, a
0B01D9 09          0221*      add hl, bc ; add bcu to hl
0B01DA E5          0222*      push hl ; ld de, hl
0B01DB D1          0223*      pop de
0B01DC E1          0224*      pop hl ; restore hl
0B01DD 23          0225*      inc hl
0B01DE 18 DC       0226*      jr @loop
0B01E0             0227*  
0B01E0             0228*  @integer_end:
0B01E0 ED 53 50 02 0229*      ld (@result+1), de      ; Store integer part in result buffer (shifted up one byte)
       0B          
0B01E5             0230*  
0B01E5             0231*  @end:
0B01E5 C1          0232*      pop bc ; send bc back how she came in
0B01E6 ED 5B 4F 02 0233*      ld de,(@result) ; will contain shifted integer part combined with any fractional value
       0B          
0B01EB 3A 57 02 0B 0234*      ld a, (@sign) ; get sign flag
0B01EF 3D          0235*      dec a ; check if negative
0B01F0 F2 FE 01 0B 0236*      jp p,@pos ; positive number
0B01F4             0237*  
0B01F4             0238*  ; Negate de
0B01F4 E5          0239*      push hl ; save text pointer
0B01F5 21 00 00 00 0240*      ld hl, 0
0B01F9 AF          0241*      xor a ; clear carry
0B01FA ED 52       0242*      sbc hl, de ; subtract DE from HL
0B01FC EB          0243*      ex de, hl ; DE = 0-HL
0B01FD E1          0244*      pop hl ; restore text pointer
0B01FE             0245*  
0B01FE             0246*  @pos:
0B01FE 37          0247*      scf ; we have a valid number so set carry
0B01FF C9          0248*      ret
0B0200             0249*  
0B0200             0250*  @fractional_start:
0B0200 DD E5       0251*      push ix                    ; preserve ix
0B0202 ED 53 50 02 0252*      ld (@result+1), de         ; Store integer part in result buffer (shifted up one byte)
       0B          
0B0207 06 03       0253*      ld b, 3                    ; Set loop counter to 3 for up to three fractional digits
0B0209 11 00 00 00 0254*      ld de, 0                   ; Initialize DE as the fractional accumulator
0B020D DD 21 58 02 0255*      ld ix, powers_of_10        ; Point IX to the lookup table for the scaling factor based on digits
       0B          
0B0212 23          0256*      inc hl                     ; Skip decimal point
0B0213             0257*  
0B0213             0258*  @fractional_loop:
0B0213 7E          0259*      ld a, (hl)                 ; Load next character
0B0214 D6 30       0260*      sub '0'                    ; Normalize ASCII to decimal
0B0216 38 1C       0261*      jr c, @end_fraction        ; Exit if < '0'
0B0218 FE 0A       0262*      cp 10
0B021A 30 18       0263*      jr nc, @end_fraction       ; Exit if >= 10
0B021C             0264*  
0B021C             0265*      ; Multiply the current fractional accumulator by 10
0B021C E5          0266*      push hl                    ; Save char pointer
0B021D F5          0267*      push af                    ; Save the digit
0B021E EB          0268*      ex de, hl
0B021F E5          0269*      push hl
0B0220 29          0270*      add hl,hl ; * 2
0B0221 29          0271*      add hl,hl ; * 4
0B0222 D1          0272*      pop de
0B0223 19          0273*      add hl,de ; * 5
0B0224 29          0274*      add hl,hl ; * 10
0B0225 11 00 00 00 0275*      ld de, 0                   ; Clear DEU
0B0229 F1          0276*      pop af                     ; Restore the current digit
0B022A 5F          0277*      ld e, a                    ; Load the digit into E
0B022B 19          0278*      add hl, de                 ; Add the digit to the accumulator
0B022C EB          0279*      ex de, hl                  ; Result back to DE
0B022D ED 32 03    0280*      lea ix,ix+3                ; Advance IX to the next scaling factor
0B0230 E1          0281*      pop hl                     ; Restore char pointer
0B0231 23          0282*      inc hl                     ; Move to the next character
0B0232 10 DF       0283*      djnz @fractional_loop      ; Loop if more digits to process
0B0234             0284*  
0B0234             0285*  @end_fraction:
0B0234             0286*  ; Final scaling based on number of fractional digits processed
0B0234 ED 53 54 02 0287*      ld (@scratch+1), de          ; Shift fractional part up a byte
       0B          
0B0239 2A 53 02 0B 0288*      ld hl,(@scratch)             ; Load the shifted fractional part into HL
0B023D             0289*  
0B023D DD 17 00    0290*      ld de, (ix)                ; Load final scaling factor from IX based on digit count
0B0240 CD F8 08 0B 0291*      call udiv24                ; Perform 24-bit division to scale down
0B0244 7B          0292*      ld a, e                    ; Load the low byte (8-bit fractional part) into A
0B0245 32 4F 02 0B 0293*      ld (@result), a            ; Store fractional part in result buffer
0B0249 DD E1       0294*      pop ix                     ; Restore ix
0B024B C3 E5 01 0B 0295*      jp @end                    ; Final sign check and flag setup
0B024F             0296*  
0B024F             0297*  @result: ds 4                  ; 32-bit result buffer to shift integer part up one byte
0B0253             0298*  @scratch: ds 4                 ; 32-bit scratch buffer for intermediate calculations
0B0257 00          0299*  @sign: db 0                    ; Sign flag buffer
0B0258             0300*  
0B0258             0301*  powers_of_10:
0B0258 01 00 00    0302*      dl 1                       ; 10^0
0B025B 0A 00 00    0303*      dl 10                      ; 10^1
0B025E 64 00 00    0304*      dl 100                     ; 10^2
0B0261 E8 03 00    0305*      dl 1000                    ; 10^3
0B0264 10 27 00    0306*      dl 10000                   ; 10^4
0B0267             0017   
0B0267             0018   ; API INCLUDES
0B0267             0019       include "functions.inc"
0B0267             0001*      MACRO printChar char
0B0267             0002*          LD A, char
0B0267             0003*          RST.LIL 10h
0B0267             0004*      ENDMACRO
0B0267             0005*  
0B0267             0006*  ; test the sign of HL
0B0267             0007*  ; inputs: HL obviously
0B0267             0008*  ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
0B0267             0009*  ; destroys: flags
0B0267             0010*      MACRO sign_hlu
0B0267             0011*          add hl,de
0B0267             0012*          or a
0B0267             0013*          sbc hl,de
0B0267             0014*      ENDMACRO
0B0267             0015*  
0B0267             0016*  ; Simulated call to subroutine at HL
0B0267             0017*  ; inputs: HL pointing to the subroutine address plus whatever the called function expects
0B0267             0018*  ; outputs: whatever the subroutine does, including HL and BC
0B0267             0019*  ; destroys: only what the subroutine does, but always BC
0B0267             0020*      MACRO callHL
0B0267             0021*          ld bc,$+7     ; Address of first instruction after the jump
0B0267             0022*          push bc       ; which constitutes the return address
0B0267             0023*          jp   (hl)     ; Jump to the address in HL
0B0267             0024*      ENDMACRO
0B0267             0025*  
0B0267             0026*  ; Simulated call to subroutine at IX
0B0267             0027*  ; inputs: IX pointing to the subroutine address plus whatever the called function expects
0B0267             0028*  ; outputs: whatever the subroutine does, including IX and BC
0B0267             0029*  ; destroys: only what the subroutine does, but always BC
0B0267             0030*      MACRO callIX
0B0267             0031*          ld bc,$+7     ; Address of first instruction after the jump
0B0267             0032*          push bc       ; which constitutes the return address
0B0267             0033*          jp   (ix)     ; Jump to the address in IX
0B0267             0034*      ENDMACRO
0B0267             0035*  
0B0267             0036*  ; Simulated call to soubroutinte at IY
0B0267             0037*  ; inputs: IY pointing to the subroutine address plus whatever the called function expects
0B0267             0038*  ; outputs: whatever the subroutine does, including IY and BC
0B0267             0039*  ; destroys: only what the subroutine does, but always BC
0B0267             0040*      MACRO callIY
0B0267             0041*          ld bc,$+7     ; Address of first instruction after the jump
0B0267             0042*          push bc       ; which constitutes the return address
0B0267             0043*          jp   (iy)     ; Jump to the address in IY
0B0267             0044*      ENDMACRO
0B0267             0045*  
0B0267             0046*  ; put the value in HLU into the accumulator
0B0267             0047*  ; destroys: af
0B0267             0048*      MACRO HLU_TO_A
0B0267             0049*          push hl ; 4 cycles
0B0267             0050*          inc sp ; 1 cycle
0B0267             0051*          pop af  ; 4 cycles
0B0267             0052*          dec sp ; 1 cycle
0B0267             0053*                 ; 10 cycles total
0B0267             0054*      ENDMACRO
0B0267             0055*  
0B0267             0056*  A_TO_HLU:
0B0267             0057*      ; call is 7 cycles
0B0267 22 74 02 0B 0058*      ld (@scratch),hl ; 7 cycles
0B026B 32 76 02 0B 0059*      ld (@scratch+2),a ; 5 cycles
0B026F 2A 74 02 0B 0060*      ld hl,(@scratch) ; 7 cycles
0B0273 C9          0061*      ret ; 6 cycles
0B0274             0062*          ; 25 cycles total
0B0274 00 00 00    0063*  @scratch: dl 0
0B0277             0064*  
0B0277             0065*      MACRO A_TO_HLU
0B0277             0066*          push.s af
0B0277             0067*          inc sp
0B0277             0068*          push.s hl
0B0277             0069*          pop hl
0B0277             0070*          inc sp
0B0277             0071*          inc sp
0B0277             0072*      ENDMACRO
0B0277             0073*  
0B0277             0074*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
0B0277             0075*  ; Print a zero-terminated string
0B0277             0076*  ; HL: Pointer to string
0B0277             0077*  printString:
0B0277 C5          0078*  	PUSH	BC
0B0278 01 00 00 00 0079*  	LD		BC,0
0B027C 3E 00       0080*  	LD 	 	A,0
0B027E 5B DF       0081*  	RST.LIL 18h
0B0280 C1          0082*  	POP		BC
0B0281 C9          0083*  	RET
0B0282             0084*  ; print a VDU sequence
0B0282             0085*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
0B0282             0086*  sendVDUsequence:
0B0282 C5          0087*  	PUSH	BC
0B0283 01 00 00 00 0088*  	LD		BC, 0
0B0287 4E          0089*  	LD		C, (HL)
0B0288 5B DF       0090*  	RST.LIL	18h
0B028A C1          0091*  	POP		BC
0B028B C9          0092*  	RET
0B028C             0093*  ; Print Newline sequence to VDP
0B028C             0094*  printNewLine:
0B028C F5          0095*      push af ; for some reason rst.lil 10h sets carry flag
0B028D 3E 0D       0096*  	LD	A, '\r'
0B028F 5B D7       0097*  	RST.LIL 10h
0B0291 3E 0A       0098*  	LD	A, '\n'
0B0293 5B D7       0099*  	RST.LIL 10h
0B0295 F1          0100*      pop af
0B0296 C9          0101*  	RET
0B0297             0102*  
0B0297             0103*  ; Print a 24-bit HEX number
0B0297             0104*  ; HLU: Number to print
0B0297             0105*  printHex24:
0B0297             0106*  	; PUSH	HL      ; 4 cycles
0B0297             0107*  	; LD		HL, 2   ; 4 cycles
0B0297             0108*  	; ADD		HL, SP  ; 1 cycle
0B0297             0109*  	; LD		A, (HL) ; 2 cycles
0B0297             0110*  	; POP		HL      ; 4 cycles
0B0297             0111*      ;                 ; 15 cycles total
0B0297 E5          0112*      push hl ; 4 cycles
0B0298 33          0113*      inc sp ; 1 cycle
0B0299 F1          0114*      pop af  ; 4 cycles
0B029A 3B          0115*      dec sp ; 1 cycle
0B029B             0116*              ; 10 cycles total
0B029B CD A5 02 0B 0117*  	CALL	printHex8
0B029F             0118*  ; Print a 16-bit HEX number
0B029F             0119*  ; HL: Number to print
0B029F             0120*  printHex16:
0B029F 7C          0121*  	LD		A,H
0B02A0 CD A5 02 0B 0122*  	CALL	printHex8
0B02A4 7D          0123*  	LD		A,L
0B02A5             0124*  ; Print an 8-bit HEX number
0B02A5             0125*  ; A: Number to print
0B02A5             0126*  printHex8:
0B02A5 4F          0127*  	LD		C,A
0B02A6 1F          0128*  	RRA
0B02A7 1F          0129*  	RRA
0B02A8 1F          0130*  	RRA
0B02A9 1F          0131*  	RRA
0B02AA CD AF 02 0B 0132*  	CALL	@F
0B02AE 79          0133*  	LD		A,C
0B02AF             0134*  @@:
0B02AF E6 0F       0135*  	AND		0Fh
0B02B1 C6 90       0136*  	ADD		A,90h
0B02B3 27          0137*  	DAA
0B02B4 CE 40       0138*  	ADC		A,40h
0B02B6 27          0139*  	DAA
0B02B7 5B D7       0140*  	RST.LIL	10h
0B02B9 C9          0141*  	RET
0B02BA             0142*  
0B02BA             0143*  printHexA:
0B02BA F5          0144*      push af
0B02BB C5          0145*      push bc
0B02BC CD A5 02 0B 0146*      call printHex8
0B02C0 3E 20       0147*      ld a,' '
0B02C2 5B D7       0148*      rst.lil 10h
0B02C4 C1          0149*      pop bc
0B02C5 F1          0150*      pop af
0B02C6 C9          0151*      ret
0B02C7             0152*  
0B02C7             0153*  printHexHL:
0B02C7 F5          0154*      push af
0B02C8 C5          0155*      push bc
0B02C9 CD 9F 02 0B 0156*      call printHex16
0B02CD 3E 20       0157*      ld a,' '
0B02CF 5B D7       0158*      rst.lil 10h
0B02D1 C1          0159*      pop bc
0B02D2 F1          0160*      pop af
0B02D3 C9          0161*      ret
0B02D4             0162*  
0B02D4             0163*  printHexUHL:
0B02D4 F5          0164*      push af
0B02D5 C5          0165*      push bc
0B02D6 CD 97 02 0B 0166*      call printHex24
0B02DA 3E 20       0167*      ld a,' '
0B02DC 5B D7       0168*      rst.lil 10h
0B02DE C1          0169*      pop bc
0B02DF F1          0170*      pop af
0B02E0 C9          0171*      ret
0B02E1             0172*  
0B02E1             0173*  printHexAUHL:
0B02E1 F5          0174*      push af
0B02E2 C5          0175*      push bc
0B02E3 CD A5 02 0B 0176*      call printHex8
0B02E7 3E 2E       0177*      ld a,'.'
0B02E9 5B D7       0178*      rst.lil 10h
0B02EB CD 97 02 0B 0179*      call printHex24
0B02EF 3E 20       0180*      ld a,' '
0B02F1 5B D7       0181*      rst.lil 10h
0B02F3 C1          0182*      pop bc
0B02F4 F1          0183*      pop af
0B02F5 C9          0184*      ret
0B02F6             0185*  
0B02F6             0186*  printHexABHL:
0B02F6             0187*  ; preserve registers
0B02F6 C5          0188*      push bc ; b will be ok c will not
0B02F7 F5          0189*      push af ; will get totally destroyed
0B02F8             0190*  ; print a
0B02F8 CD A5 02 0B 0191*      call printHex8
0B02FC             0192*  ; print b
0B02FC 78          0193*      ld a,b
0B02FD CD A5 02 0B 0194*      call printHex8
0B0301             0195*  ; print hl
0B0301 CD 9F 02 0B 0196*      call printHex16
0B0305             0197*  ; restore registers
0B0305 F1          0198*      pop af
0B0306 C1          0199*      pop bc
0B0307 C9          0200*      ret
0B0308             0201*  
0B0308             0202*  printHexBHL:
0B0308             0203*  ; preserve registers
0B0308 C5          0204*      push bc ; b will be ok c will not
0B0309 F5          0205*      push af ; will get totally destroyed
0B030A             0206*  ; print b
0B030A 78          0207*      ld a,b
0B030B CD A5 02 0B 0208*      call printHex8
0B030F             0209*  ; print hl
0B030F CD 9F 02 0B 0210*      call printHex16
0B0313             0211*  ; restore registers
0B0313 F1          0212*      pop af
0B0314 C1          0213*      pop bc
0B0315 C9          0214*      ret
0B0316             0215*  
0B0316             0216*  printHexCDE:
0B0316             0217*  ; preserve registers
0B0316 C5          0218*      push bc ; b will be ok c will not
0B0317 F5          0219*      push af ; will get totally destroyed
0B0318             0220*  ; print c
0B0318 79          0221*      ld a,c
0B0319 CD A5 02 0B 0222*      call printHex8
0B031D             0223*  ; print de
0B031D EB          0224*      ex de,hl
0B031E CD 9F 02 0B 0225*      call printHex16
0B0322 EB          0226*      ex de,hl
0B0323             0227*  ; restore registers
0B0323 F1          0228*      pop af
0B0324 C1          0229*      pop bc
0B0325 C9          0230*      ret
0B0326             0231*  
0B0326             0232*  ; Print a 0x HEX prefix
0B0326             0233*  DisplayHexPrefix:
0B0326 3E 30       0234*  	LD	A, '0'
0B0328 5B D7       0235*  	RST.LIL 10h
0B032A 3E 78       0236*  	LD	A, 'x'
0B032C 5B D7       0237*  	RST.LIL 10h
0B032E C9          0238*  	RET
0B032F             0239*  
0B032F             0240*      MACRO printDecBC
0B032F             0241*          push hl
0B032F             0242*          push bc
0B032F             0243*          pop hl
0B032F             0244*          call printDec
0B032F             0245*          pop hl
0B032F             0246*      ENDMACRO
0B032F             0247*  
0B032F             0248*      MACRO printDecDE
0B032F             0249*          push hl
0B032F             0250*          push de
0B032F             0251*          pop hl
0B032F             0252*          call printDec
0B032F             0253*          pop hl
0B032F             0254*      ENDMACRO
0B032F             0255*  
0B032F             0256*      MACRO printDecHL
0B032F             0257*          call printDec
0B032F             0258*      ENDMACRO
0B032F             0259*  
0B032F             0260*      MACRO printDecIX
0B032F             0261*          push hl
0B032F             0262*          push ix
0B032F             0263*          pop hl
0B032F             0264*          call printDec
0B032F             0265*          pop hl
0B032F             0266*      ENDMACRO
0B032F             0267*  
0B032F             0268*      MACRO printDecIY
0B032F             0269*          push hl
0B032F             0270*          push iy
0B032F             0271*          pop hl
0B032F             0272*          call printDec
0B032F             0273*          pop hl
0B032F             0274*      ENDMACRO
0B032F             0275*  
0B032F             0276*  
0B032F             0277*  ; Prints the right justified decimal value in HL without leading zeroes
0B032F             0278*  ; HL : Value to print
0B032F             0279*  ; preserves all registers and flags
0B032F             0280*  printDec:
0B032F             0281*  ; BEGIN MY CODE
0B032F             0282*  ; back up all the things
0B032F F5          0283*      push af
0B0330 C5          0284*      push bc
0B0331 D5          0285*      push de
0B0332 E5          0286*      push hl
0B0333             0287*  ; END MY CODE
0B0333 11 5B 03 0B 0288*  	LD	 DE, _printDecBuffer
0B0337 CD 6B 03 0B 0289*  	CALL u24_to_ascii
0B033B             0290*  ; BEGIN MY CODE
0B033B             0291*  ; replace leading zeroes with spaces
0B033B 21 5B 03 0B 0292*      LD	 HL, _printDecBuffer
0B033F 06 07       0293*      ld   B, 7 ; if HL was 0, we want to keep the final zero
0B0341             0294*  @loop:
0B0341 7E          0295*      LD	 A, (HL)
0B0342 FE 30       0296*      CP	 '0'
0B0344 C2 52 03 0B 0297*      JP	 NZ, @done
0B0348 3E 20       0298*      LD   A, ' '
0B034A 77          0299*      LD	 (HL), A
0B034B 23          0300*      INC	 HL
0B034C CD 5E 14 0B 0301*      CALL vdu_cursor_forward
0B0350 10 EF       0302*      DJNZ @loop
0B0352             0303*  @done:
0B0352             0304*  ; END MY CODE
0B0352             0305*  	; LD	 HL, _printDecBuffer
0B0352 CD 77 02 0B 0306*  	CALL printString
0B0356             0307*  ; BEGIN MY CODE
0B0356             0308*  ; restore all the things
0B0356 E1          0309*      pop hl
0B0357 D1          0310*      pop de
0B0358 C1          0311*      pop bc
0B0359 F1          0312*      pop af
0B035A             0313*  ; END MY CODE
0B035A C9          0314*  	RET
0B035B 00 00 00 00 0315*  _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0B036B             0316*  
0B036B             0317*  ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
0B036B             0318*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
0B036B             0319*  ; so it will allways be 8 characters length
0B036B             0320*  ; HL : Value to convert to string
0B036B             0321*  ; DE : pointer to buffer, at least 8 byte + 0
0B036B             0322*  u24_to_ascii:
0B036B 01 80 69 67 0323*  	LD	 BC,-10000000
0B036F CD A2 03 0B 0324*  	CALL @one_digit
0B0373 01 C0 BD F0 0325*  	LD	 BC,-1000000
0B0377 CD A2 03 0B 0326*  	CALL @one_digit
0B037B 01 60 79 FE 0327*  	LD	 BC,-100000
0B037F CD A2 03 0B 0328*  	CALL @one_digit
0B0383 01 F0 D8 FF 0329*  	LD   BC,-10000
0B0387 CD A2 03 0B 0330*  	CALL @one_digit
0B038B 01 18 FC FF 0331*  	LD   BC,-1000
0B038F CD A2 03 0B 0332*  	CALL @one_digit
0B0393 01 9C FF FF 0333*  	LD   BC,-100
0B0397 CD A2 03 0B 0334*  	CALL @one_digit
0B039B 0E F6       0335*  	LD   C,-10
0B039D CD A2 03 0B 0336*  	CALL @one_digit
0B03A1 48          0337*  	LD   C,B
0B03A2             0338*  @one_digit:
0B03A2 3E 2F       0339*  	LD   A,'0'-1
0B03A4             0340*  @divide_me:
0B03A4 3C          0341*  	INC  A
0B03A5 09          0342*  	ADD  HL,BC
0B03A6 38 FC       0343*  	JR   C,@divide_me
0B03A8 ED 42       0344*  	SBC  HL,BC
0B03AA 12          0345*  	LD   (DE),A
0B03AB 13          0346*  	INC  DE
0B03AC C9          0347*  	RET
0B03AD             0348*  
0B03AD             0349*  print_u24:
0B03AD 11 5B 03 0B 0350*      ld de,_printDecBuffer
0B03B1 CD 6B 03 0B 0351*      call u24_to_ascii
0B03B5 21 5B 03 0B 0352*      ld hl,_printDecBuffer
0B03B9 CD 77 02 0B 0353*      call printString
0B03BD C9          0354*      ret
0B03BE             0355*  
0B03BE             0356*  ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
0B03BE             0357*  ; HL : Value to convert to string (integer part in H, fractional part in L)
0B03BE             0358*  ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
0B03BE             0359*  u168_to_ascii:
0B03BE             0360*  ; add a leading space to make room for sign flag if needed
0B03BE 3E 20       0361*      ld a,' '
0B03C0 12          0362*      ld (de),a
0B03C1 13          0363*      inc de
0B03C2             0364*  ; Convert integer part
0B03C2 E5          0365*      push hl               ; Save HL (we’ll need the fractional part later)
0B03C3 CD 0E 0A 0B 0366*      call shift_hlu_r1b    ; Shift to get integer portion in HL
0B03C7 01 F0 D8 FF 0367*      ld   bc, -10000
0B03CB CD EE 03 0B 0368*      call @one_int
0B03CF 01 18 FC FF 0369*      ld   bc, -1000
0B03D3 CD EE 03 0B 0370*      call @one_int
0B03D7 01 9C FF FF 0371*      ld   bc, -100
0B03DB CD EE 03 0B 0372*      call @one_int
0B03DF 0E F6       0373*      ld   c, -10
0B03E1 CD EE 03 0B 0374*      call @one_int
0B03E5 48          0375*      ld   c, b
0B03E6 CD EE 03 0B 0376*      call @one_int
0B03EA C3 F9 03 0B 0377*      jp   @frac            ; Jump to fractional part conversion
0B03EE             0378*  @one_int:
0B03EE 3E 2F       0379*      ld   a, '0' - 1       ; Start ASCII character at '0'
0B03F0             0380*  @divide_me:
0B03F0 3C          0381*      inc  a
0B03F1 09          0382*      add  hl, bc           ; Accumulate until overflow
0B03F2 38 FC       0383*      jr   c, @divide_me
0B03F4 ED 42       0384*      sbc  hl, bc           ; Remove excess after overflow
0B03F6 12          0385*      ld   (de), a          ; Store ASCII digit
0B03F7 13          0386*      inc  de
0B03F8 C9          0387*      ret
0B03F9             0388*  ; Convert fractional part
0B03F9             0389*  @frac:
0B03F9 3E 2E       0390*      ld   a, '.'           ; Decimal point
0B03FB 12          0391*      ld   (de), a
0B03FC 13          0392*      inc  de
0B03FD E1          0393*      pop  hl               ; Restore HL with original fraction
0B03FE 06 03       0394*      ld   b, 3             ; Loop counter for 3 fractional digits
0B0400             0395*  @frac_loop:
0B0400 26 0A       0396*      ld   h, 10            ; Load multiplier for fractional part
0B0402 ED 6C       0397*      mlt  hl               ; Multiply by 10, result in HL (H holds the integer part)
0B0404 3E 30       0398*      ld   a, '0'
0B0406 84          0399*      add  a, h             ; Convert integer part to ASCII
0B0407 12          0400*      ld   (de), a
0B0408 13          0401*      inc  de
0B0409 10 F5       0402*      djnz @frac_loop       ; Repeat for each fractional digit
0B040B             0403*  ; Add null terminator
0B040B AF          0404*      xor  a                ; Null terminator
0B040C 12          0405*      ld   (de), a
0B040D C9          0406*      ret
0B040E             0407*  
0B040E             0408*  print_u168:
0B040E 11 5B 03 0B 0409*      ld de,_printDecBuffer
0B0412 CD BE 03 0B 0410*      call u168_to_ascii
0B0416 21 5B 03 0B 0411*      ld hl,_printDecBuffer
0B041A CD 77 02 0B 0412*      call printString
0B041E C9          0413*      ret
0B041F             0414*  
0B041F             0415*  ; signed version of u168_to_ascii
0B041F             0416*  s168_to_ascii:
0B041F D5          0417*      push de ; save starting address of buffer
0B0420 CD 6D 07 0B 0418*      call abs_hlu
0B0424 F5          0419*      push af ; save sign flag
0B0425 CD BE 03 0B 0420*      call u168_to_ascii
0B0429 F1          0421*      pop af ; restore sign flag
0B042A D1          0422*      pop de ; restore starting address of buffer
0B042B F0          0423*      ret p ; hlu was positive so nothing to do
0B042C 3E 2D       0424*      ld a,'-'
0B042E 12          0425*      ld (de),a
0B042F C9          0426*      ret
0B0430             0427*  
0B0430             0428*  print_s168:
0B0430 11 5B 03 0B 0429*      ld de,_printDecBuffer
0B0434 CD 1F 04 0B 0430*      call s168_to_ascii
0B0438 21 5B 03 0B 0431*      ld hl,_printDecBuffer
0B043C CD 77 02 0B 0432*      call printString
0B0440 C9          0433*      ret
0B0441             0434*  
0B0441             0435*  ; #### new functions added by Brandon R. Gates ####
0B0441             0436*  
0B0441             0437*  ; print the binary representation of the 8-bit value in a
0B0441             0438*  ; destroys a, hl, bc
0B0441             0439*  printBin8:
0B0441 06 08       0440*      ld b,8      ; loop counter for 8 bits
0B0443 21 5E 04 0B 0441*      ld hl,@cmd  ; set hl to the low byte of the output string
0B0447             0442*                  ; (which will be the high bit of the value in a)
0B0447             0443*  @loop:
0B0447 07          0444*      rlca ; put the next highest bit into carry
0B0448 38 04       0445*      jr c,@one
0B044A 36 30       0446*      ld (hl),'0'
0B044C 18 02       0447*      jr @next_bit
0B044E             0448*  @one:
0B044E 36 31       0449*      ld (hl),'1'
0B0450             0450*  @next_bit:
0B0450 23          0451*      inc hl
0B0451 10 F4       0452*      djnz @loop
0B0453             0453*  ; print it
0B0453 21 5E 04 0B 0454*  	ld hl,@cmd
0B0457 01 08 00 00 0455*  	ld bc,@end-@cmd
0B045B 5B DF       0456*  	rst.lil $18
0B045D C9          0457*  	ret
0B045E             0458*  @cmd: ds 8 ; eight bytes for eight bits
0B0466             0459*  @end:
0B0466             0460*  
0B0466             0461*  ; print the binary representation of the 8-bit value in a
0B0466             0462*  ; in reverse order (lsb first)
0B0466             0463*  ; destroys a, hl, bc
0B0466             0464*  printBin8Rev:
0B0466 06 08       0465*      ld b,8      ; loop counter for 8 bits
0B0468 21 83 04 0B 0466*      ld hl,@cmd  ; set hl to the low byte of the output string
0B046C             0467*                  ; (which will be the high bit of the value in a)
0B046C             0468*  @loop:
0B046C 0F          0469*      rrca ; put the next lowest bit into carry
0B046D 38 04       0470*      jr c,@one
0B046F 36 30       0471*      ld (hl),'0'
0B0471 18 02       0472*      jr @next_bit
0B0473             0473*  @one:
0B0473 36 31       0474*      ld (hl),'1'
0B0475             0475*  @next_bit:
0B0475 23          0476*      inc hl
0B0476 10 F4       0477*      djnz @loop
0B0478             0478*  ; print it
0B0478 21 83 04 0B 0479*  	ld hl,@cmd
0B047C 01 08 00 00 0480*  	ld bc,@end-@cmd
0B0480 5B DF       0481*  	rst.lil $18
0B0482 C9          0482*  	ret
0B0483             0483*  @cmd: ds 8 ; eight bytes for eight bits
0B048B             0484*  @end:
0B048B             0485*  
0B048B             0486*  ; print registers to screen in hexidecimal format
0B048B             0487*  ; inputs: none
0B048B             0488*  ; outputs: values of every register printed to screen
0B048B             0489*  ;    values of each register in global scratch memory
0B048B             0490*  ; destroys: nothing
0B048B             0491*  stepRegistersHex:
0B048B             0492*  ; store everything in scratch
0B048B 22 78 06 0B 0493*      ld (uhl),hl
0B048F ED 43 7B 06 0494*      ld (ubc),bc
       0B          
0B0494 ED 53 7E 06 0495*      ld (ude),de
       0B          
0B0499 DD 22 81 06 0496*      ld (uix),ix
       0B          
0B049E FD 22 84 06 0497*      ld (uiy),iy
       0B          
0B04A3 F5          0498*      push af ; fml
0B04A4 E1          0499*      pop hl  ; thanks, zilog
0B04A5 22 75 06 0B 0500*      ld (uaf),hl
0B04A9 F5          0501*      push af ; dammit
0B04AA             0502*  
0B04AA             0503*  ; home the cursor
0B04AA CD 3D 14 0B 0504*      call vdu_home_cursor
0B04AE             0505*  
0B04AE             0506*  ; print each register
0B04AE 21 FB 05 0B 0507*      ld hl,str_afu
0B04B2 CD 77 02 0B 0508*      call printString
0B04B6 2A 75 06 0B 0509*      ld hl,(uaf)
0B04BA CD 97 02 0B 0510*      call printHex24
0B04BE CD 8C 02 0B 0511*      call printNewLine
0B04C2             0512*  
0B04C2 21 00 06 0B 0513*      ld hl,str_hlu
0B04C6 CD 77 02 0B 0514*      call printString
0B04CA 2A 78 06 0B 0515*      ld hl,(uhl)
0B04CE CD 97 02 0B 0516*      call printHex24
0B04D2 CD 8C 02 0B 0517*      call printNewLine
0B04D6             0518*  
0B04D6 21 05 06 0B 0519*      ld hl,str_bcu
0B04DA CD 77 02 0B 0520*      call printString
0B04DE 2A 7B 06 0B 0521*      ld hl,(ubc)
0B04E2 CD 97 02 0B 0522*      call printHex24
0B04E6 CD 8C 02 0B 0523*      call printNewLine
0B04EA             0524*  
0B04EA 21 0A 06 0B 0525*      ld hl,str_deu
0B04EE CD 77 02 0B 0526*      call printString
0B04F2 2A 7E 06 0B 0527*      ld hl,(ude)
0B04F6 CD 97 02 0B 0528*      call printHex24
0B04FA CD 8C 02 0B 0529*      call printNewLine
0B04FE             0530*  
0B04FE 21 0F 06 0B 0531*      ld hl,str_ixu
0B0502 CD 77 02 0B 0532*      call printString
0B0506 2A 81 06 0B 0533*      ld hl,(uix)
0B050A CD 97 02 0B 0534*      call printHex24
0B050E CD 8C 02 0B 0535*      call printNewLine
0B0512             0536*  
0B0512 21 14 06 0B 0537*      ld hl,str_iyu
0B0516 CD 77 02 0B 0538*      call printString
0B051A 2A 84 06 0B 0539*      ld hl,(uiy)
0B051E CD 97 02 0B 0540*      call printHex24
0B0522 CD 8C 02 0B 0541*      call printNewLine
0B0526             0542*  
0B0526             0543*      ; call vsync
0B0526             0544*  
0B0526 CD 8C 02 0B 0545*      call printNewLine
0B052A             0546*  
0B052A             0547*  ; check for right shift key and quit if pressed
0B052A             0548*  	MOSCALL mos_getkbmap
0B052A 3E 1E       0001*M 			LD	A, function
0B052C 5B CF       0002*M 			RST.L	08h
0B052E             0549*  @stayhere:
0B052E             0550*  ; 7 RightShift
0B052E DD CB 00 76 0551*      bit 6,(ix+0)
0B0532 20 02       0552*      jr nz,@RightShift
0B0534 18 F8       0553*      jr @stayhere
0B0536             0554*  @RightShift:
0B0536 DD CB 0E 86 0555*      res 0,(ix+14) ; debounce the key (hopefully)
0B053A 3E 80       0556*      ld a,%10000000
0B053C CD 1D 14 0B 0557*      call multiPurposeDelay
0B0540             0558*  
0B0540             0559*  ; restore everything
0B0540 2A 78 06 0B 0560*      ld hl, (uhl)
0B0544 ED 4B 7B 06 0561*      ld bc, (ubc)
       0B          
0B0549 ED 5B 7E 06 0562*      ld de, (ude)
       0B          
0B054E DD 2A 81 06 0563*      ld ix, (uix)
       0B          
0B0553 FD 2A 84 06 0564*      ld iy, (uiy)
       0B          
0B0558 F1          0565*      pop af
0B0559             0566*  ; all done
0B0559 C9          0567*      ret
0B055A             0568*  
0B055A             0569*  ; print registers to screen in hexidecimal format
0B055A             0570*  ; inputs: none
0B055A             0571*  ; outputs: values of every register printed to screen
0B055A             0572*  ;    values of each register in global scratch memory
0B055A             0573*  ; destroys: nothing
0B055A             0574*  dumpRegistersHex:
0B055A             0575*  ; store everything in scratch
0B055A 22 78 06 0B 0576*      ld (uhl),hl
0B055E ED 43 7B 06 0577*      ld (ubc),bc
       0B          
0B0563 ED 53 7E 06 0578*      ld (ude),de
       0B          
0B0568 DD 22 81 06 0579*      ld (uix),ix
       0B          
0B056D FD 22 84 06 0580*      ld (uiy),iy
       0B          
0B0572 F5          0581*      push af ; fml
0B0573 E1          0582*      pop hl  ; thanks, zilog
0B0574 22 75 06 0B 0583*      ld (uaf),hl
0B0578 F5          0584*      push af ; dammit
0B0579             0585*  
0B0579             0586*  ; home the cursor
0B0579             0587*      ; call vdu_home_cursor
0B0579             0588*      ; call printNewLine
0B0579             0589*  
0B0579             0590*  ; print each register
0B0579 21 FB 05 0B 0591*      ld hl,str_afu
0B057D CD 77 02 0B 0592*      call printString
0B0581 2A 75 06 0B 0593*      ld hl,(uaf)
0B0585 CD 97 02 0B 0594*      call printHex24
0B0589             0595*      ; call printNewLine
0B0589             0596*  
0B0589 21 00 06 0B 0597*      ld hl,str_hlu
0B058D CD 77 02 0B 0598*      call printString
0B0591 2A 78 06 0B 0599*      ld hl,(uhl)
0B0595 CD 97 02 0B 0600*      call printHex24
0B0599             0601*      ; call printNewLine
0B0599             0602*  
0B0599 21 05 06 0B 0603*      ld hl,str_bcu
0B059D CD 77 02 0B 0604*      call printString
0B05A1 2A 7B 06 0B 0605*      ld hl,(ubc)
0B05A5 CD 97 02 0B 0606*      call printHex24
0B05A9             0607*      ; call printNewLine
0B05A9             0608*  
0B05A9 21 0A 06 0B 0609*      ld hl,str_deu
0B05AD CD 77 02 0B 0610*      call printString
0B05B1 2A 7E 06 0B 0611*      ld hl,(ude)
0B05B5 CD 97 02 0B 0612*      call printHex24
0B05B9             0613*      ; call printNewLine
0B05B9             0614*  
0B05B9 21 0F 06 0B 0615*      ld hl,str_ixu
0B05BD CD 77 02 0B 0616*      call printString
0B05C1 2A 81 06 0B 0617*      ld hl,(uix)
0B05C5 CD 97 02 0B 0618*      call printHex24
0B05C9             0619*      ; call printNewLine
0B05C9             0620*  
0B05C9 21 14 06 0B 0621*      ld hl,str_iyu
0B05CD CD 77 02 0B 0622*      call printString
0B05D1 2A 84 06 0B 0623*      ld hl,(uiy)
0B05D5 CD 97 02 0B 0624*      call printHex24
0B05D9             0625*      ; call printNewLine
0B05D9             0626*  
0B05D9 CD D2 14 0B 0627*      call vdu_vblank
0B05DD             0628*  
0B05DD CD 8C 02 0B 0629*      call printNewLine
0B05E1             0630*  ; restore everything
0B05E1 2A 78 06 0B 0631*      ld hl, (uhl)
0B05E5 ED 4B 7B 06 0632*      ld bc, (ubc)
       0B          
0B05EA ED 5B 7E 06 0633*      ld de, (ude)
       0B          
0B05EF DD 2A 81 06 0634*      ld ix, (uix)
       0B          
0B05F4 FD 2A 84 06 0635*      ld iy, (uiy)
       0B          
0B05F9 F1          0636*      pop af
0B05FA             0637*  ; all done
0B05FA C9          0638*      ret
0B05FB             0639*  
0B05FB 20 61 66 3D 0640*  str_afu: db " af=",0
       00          
0B0600 20 68 6C 3D 0641*  str_hlu: db " hl=",0
       00          
0B0605 20 62 63 3D 0642*  str_bcu: db " bc=",0
       00          
0B060A 20 64 65 3D 0643*  str_deu: db " de=",0
       00          
0B060F 20 69 78 3D 0644*  str_ixu: db " ix=",0
       00          
0B0614 20 69 79 3D 0645*  str_iyu: db " iy=",0
       00          
0B0619             0646*  
0B0619             0647*  ; print udeuhl to screen in hexidecimal format
0B0619             0648*  ; inputs: none
0B0619             0649*  ; outputs: concatenated hexidecimal udeuhl
0B0619             0650*  ; destroys: nothing
0B0619             0651*  dumpUDEUHLHex:
0B0619             0652*  ; store everything in scratch
0B0619 22 78 06 0B 0653*      ld (uhl),hl
0B061D ED 43 7B 06 0654*      ld (ubc),bc
       0B          
0B0622 ED 53 7E 06 0655*      ld (ude),de
       0B          
0B0627 DD 22 81 06 0656*      ld (uix),ix
       0B          
0B062C FD 22 84 06 0657*      ld (uiy),iy
       0B          
0B0631 F5          0658*      push af
0B0632             0659*  
0B0632             0660*  ; print each register
0B0632             0661*  
0B0632 21 6C 06 0B 0662*      ld hl,str_udeuhl
0B0636 CD 77 02 0B 0663*      call printString
0B063A 2A 7E 06 0B 0664*      ld hl,(ude)
0B063E CD 97 02 0B 0665*      call printHex24
0B0642 3E 2E       0666*  	ld a,'.'	; print a dot to separate the values
0B0644 5B D7       0667*  	rst.lil 10h
0B0646 2A 78 06 0B 0668*      ld hl,(uhl)
0B064A CD 97 02 0B 0669*      call printHex24
0B064E CD 8C 02 0B 0670*      call printNewLine
0B0652             0671*  
0B0652             0672*  ; restore everything
0B0652 2A 78 06 0B 0673*      ld hl, (uhl)
0B0656 ED 4B 7B 06 0674*      ld bc, (ubc)
       0B          
0B065B ED 5B 7E 06 0675*      ld de, (ude)
       0B          
0B0660 DD 2A 81 06 0676*      ld ix, (uix)
       0B          
0B0665 FD 2A 84 06 0677*      ld iy, (uiy)
       0B          
0B066A F1          0678*      pop af
0B066B             0679*  ; all done
0B066B C9          0680*      ret
0B066C             0681*  
0B066C 75 64 65 2E 0682*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
0B0675             0683*  
0B0675             0684*  ; global scratch memory for registers
0B0675 00 00 00    0685*  uaf: dl 0
0B0678 00 00 00    0686*  uhl: dl 0
0B067B 00 00 00    0687*  ubc: dl 0
0B067E 00 00 00    0688*  ude: dl 0
0B0681 00 00 00    0689*  uix: dl 0
0B0684 00 00 00    0690*  uiy: dl 0
0B0687 00 00 00    0691*  usp: dl 0
0B068A 00 00 00    0692*  upc: dl 0
0B068D             0693*  
0B068D             0694*  ; inputs: whatever is in the flags register
0B068D             0695*  ; outputs: binary representation of flags
0B068D             0696*  ;          with a header so we know which is what
0B068D             0697*  ; destroys: nothing
0B068D             0698*  ; preserves: everything
0B068D             0699*  dumpFlags:
0B068D             0700*  ; first we curse zilog for not giving direct access to flags
0B068D F5          0701*      push af ; this is so we can send it back unharmed
0B068E F5          0702*      push af ; this is so we can pop it to hl
0B068F             0703*  ; store everything in scratch
0B068F 22 78 06 0B 0704*      ld (uhl),hl
0B0693 ED 43 7B 06 0705*      ld (ubc),bc
       0B          
0B0698 ED 53 7E 06 0706*      ld (ude),de
       0B          
0B069D DD 22 81 06 0707*      ld (uix),ix
       0B          
0B06A2 FD 22 84 06 0708*      ld (uiy),iy
       0B          
0B06A7             0709*  ; next we print the header
0B06A7 21 D3 06 0B 0710*      ld hl,@header
0B06AB CD 77 02 0B 0711*      call printString
0B06AF E1          0712*      pop hl ; flags are now in l
0B06B0 7D          0713*      ld a,l ; flags are now in a
0B06B1 CD 41 04 0B 0714*      call printBin8
0B06B5 CD 8C 02 0B 0715*  	call printNewLine
0B06B9             0716*  ; restore everything
0B06B9 2A 78 06 0B 0717*      ld hl, (uhl)
0B06BD ED 4B 7B 06 0718*      ld bc, (ubc)
       0B          
0B06C2 ED 5B 7E 06 0719*      ld de, (ude)
       0B          
0B06C7 DD 2A 81 06 0720*      ld ix, (uix)
       0B          
0B06CC FD 2A 84 06 0721*      ld iy, (uiy)
       0B          
0B06D1 F1          0722*      pop af ; send her home the way she came
0B06D2 C9          0723*      ret
0B06D3             0724*  ; Bit 7 (S): Sign flag
0B06D3             0725*  ; Bit 6 (Z): Zero flag
0B06D3             0726*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0B06D3             0727*  ; Bit 4 (H): Half Carry flag
0B06D3             0728*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0B06D3             0729*  ; Bit 2 (PV): Parity/Overflow flag
0B06D3             0730*  ; Bit 1 (N): Subtract flag
0B06D3             0731*  ; Bit 0 (C): Carry flag
0B06D3 53 5A 78 48 0732*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0B06DE             0733*  
0B06DE             0734*  ; set all the bits in the flag register
0B06DE             0735*  ; more of an academic exercise than anything useful
0B06DE             0736*  ; inputs; none
0B06DE             0737*  ; outputs; a=0,f=255
0B06DE             0738*  ; destroys: flags, hl
0B06DE             0739*  ; preserves: a, because why not
0B06DE             0740*  setAllFlags:
0B06DE 21 FF 00 00 0741*      ld hl,255
0B06E2 67          0742*      ld h,a ; four cycles to preserve a is cheap
0B06E3 E5          0743*      push hl
0B06E4 F1          0744*      pop af
0B06E5 C9          0745*      ret
0B06E6             0746*  
0B06E6             0747*  ; reset all the bits in the flag register
0B06E6             0748*  ; unlike its inverse counterpart, this may actually be useful
0B06E6             0749*  ; inputs; none
0B06E6             0750*  ; outputs; a=0,f=0
0B06E6             0751*  ; destroys: flags, hl
0B06E6             0752*  ; preserves: a, because why not
0B06E6             0753*  resetAllFlags:
0B06E6 21 00 00 00 0754*      ld hl,0
0B06EA 67          0755*      ld h,a ; four cycles to preserve a is cheap
0B06EB E5          0756*      push hl
0B06EC F1          0757*      pop af
0B06ED C9          0758*      ret
0B06EE             0759*  
0B06EE             0760*  ; wait until user presses a key
0B06EE             0761*  ; inputs: none
0B06EE             0762*  ; outputs: none
0B06EE             0763*  ; destroys: af,ix
0B06EE             0764*  waitKeypress:
0B06EE             0765*      MOSCALL mos_sysvars
0B06EE 3E 08       0001*M 			LD	A, function
0B06F0 5B CF       0002*M 			RST.L	08h
0B06F2 AF          0766*      xor a ; zero out any prior keypresses
0B06F3 DD 77 05    0767*      ld (ix+sysvar_keyascii),a
0B06F6             0768*  @loop:
0B06F6 DD 7E 05    0769*      ld a,(ix+sysvar_keyascii)
0B06F9 A7          0770*      and a
0B06FA C0          0771*      ret nz
0B06FB 18 F9       0772*      jr @loop
0B06FD             0773*  
0B06FD             0774*  
0B06FD             0775*  ; print bytes from an address to the screen in hexidecimal format
0B06FD             0776*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0B06FD             0777*  ; outputs: values of each byte printed to screen separated by spaces
0B06FD             0778*  ; destroys: nothing
0B06FD             0779*  dumpMemoryHex:
0B06FD             0780*  ; save registers to the stack
0B06FD C5          0781*      push bc
0B06FE E5          0782*      push hl
0B06FF F5          0783*      push af
0B0700             0784*  
0B0700             0785*  ; print the address and separator
0B0700 CD 97 02 0B 0786*      call printHex24
0B0704 3E 3A       0787*      ld a,':'
0B0706 5B D7       0788*      rst.lil 10h
0B0708 3E 20       0789*      ld a,' '
0B070A 5B D7       0790*      rst.lil 10h
0B070C             0791*  
0B070C             0792*  ; set b to be our loop counter
0B070C F1          0793*      pop af
0B070D 47          0794*      ld b,a
0B070E E1          0795*      pop hl
0B070F E5          0796*      push hl
0B0710 F5          0797*      push af
0B0711             0798*  @loop:
0B0711             0799*  ; print the byte
0B0711 7E          0800*      ld a,(hl)
0B0712 CD A5 02 0B 0801*      call printHex8
0B0716             0802*  ; print a space
0B0716 3E 20       0803*      ld a,' '
0B0718 5B D7       0804*      rst.lil 10h
0B071A 23          0805*      inc hl
0B071B 10 F4       0806*      djnz @loop
0B071D             0807*      ; call printNewLine
0B071D             0808*  
0B071D             0809*  ; restore everything
0B071D F1          0810*      pop af
0B071E E1          0811*      pop hl
0B071F C1          0812*      pop bc
0B0720             0813*  
0B0720             0814*  ; all done
0B0720 C9          0815*      ret
0B0721             0816*  
0B0721             0817*  
0B0721             0818*  ; print bytes from an address to the screen in binary format
0B0721             0819*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0B0721             0820*  ; outputs: values of each byte printed to screen separated by spaces
0B0721             0821*  ; destroys: nothing
0B0721             0822*  dumpMemoryBin:
0B0721             0823*  ; save all registers to the stack
0B0721 F5          0824*      push af
0B0722 C5          0825*      push bc
0B0723 D5          0826*      push de
0B0724 E5          0827*      push hl
0B0725 DD E5       0828*      push ix
0B0727 FD E5       0829*      push iy
0B0729             0830*  
0B0729             0831*  ; set b to be our loop counter
0B0729 47          0832*      ld b,a
0B072A             0833*  @loop:
0B072A             0834*  ; print the byte
0B072A 7E          0835*      ld a,(hl)
0B072B E5          0836*      push hl
0B072C C5          0837*      push bc
0B072D CD 41 04 0B 0838*      call printBin8
0B0731 C1          0839*      pop bc
0B0732             0840*  ; print a space
0B0732 3E 20       0841*      ld a,' '
0B0734 5B D7       0842*      rst.lil 10h
0B0736 E1          0843*      pop hl
0B0737 23          0844*      inc hl
0B0738 10 F0       0845*      djnz @loop
0B073A CD 8C 02 0B 0846*      call printNewLine
0B073E             0847*  
0B073E             0848*  ; restore everything
0B073E FD E1       0849*      pop iy
0B0740 DD E1       0850*      pop ix
0B0742 E1          0851*      pop hl
0B0743 D1          0852*      pop de
0B0744 C1          0853*      pop bc
0B0745 F1          0854*      pop af
0B0746             0855*  ; all done
0B0746 C9          0856*      ret
0B0747             0857*  
0B0747             0858*  ; print bytes from an address to the screen in binary format
0B0747             0859*  ; with the bits of each byte in reverse order (lsb first)
0B0747             0860*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0B0747             0861*  ; outputs: values of each byte printed to screen separated by spaces
0B0747             0862*  ; destroys: nothing
0B0747             0863*  dumpMemoryBinRev:
0B0747             0864*  ; save all registers to the stack
0B0747 F5          0865*      push af
0B0748 C5          0866*      push bc
0B0749 D5          0867*      push de
0B074A E5          0868*      push hl
0B074B DD E5       0869*      push ix
0B074D FD E5       0870*      push iy
0B074F             0871*  
0B074F             0872*  ; set b to be our loop counter
0B074F 47          0873*      ld b,a
0B0750             0874*  @loop:
0B0750             0875*  ; print the byte
0B0750 7E          0876*      ld a,(hl)
0B0751 E5          0877*      push hl
0B0752 C5          0878*      push bc
0B0753 CD 66 04 0B 0879*      call printBin8Rev
0B0757 C1          0880*      pop bc
0B0758             0881*  ; print a space
0B0758 3E 20       0882*      ld a,' '
0B075A 5B D7       0883*      rst.lil 10h
0B075C E1          0884*      pop hl
0B075D 23          0885*      inc hl
0B075E 10 F0       0886*      djnz @loop
0B0760 CD 8C 02 0B 0887*      call printNewLine
0B0764             0888*  
0B0764             0889*  ; restore everything
0B0764 FD E1       0890*      pop iy
0B0766 DD E1       0891*      pop ix
0B0768 E1          0892*      pop hl
0B0769 D1          0893*      pop de
0B076A C1          0894*      pop bc
0B076B F1          0895*      pop af
0B076C             0896*  ; all done
0B076C C9          0897*      ret
0B076D             0020       include "maths.inc"
0B076D             0001*  ; absolute value of hlu
0B076D             0002*  ; returns: abs(hlu), flags set according to the incoming sign of hlu:
0B076D             0003*  ;         s1,z0,pv0,n1,c0 if hlu was negative
0B076D             0004*  ;         s0,z1,pv0,n1,c0 if hlu was zero
0B076D             0005*  ;         s0,z0,pv0,n1,c0 if hlu was positive
0B076D             0006*  ; destroys: a
0B076D             0007*  abs_hlu:
0B076D 19          0008*      add hl,de
0B076E B7          0009*      or a
0B076F ED 52       0010*      sbc hl,de
0B0771 FA 76 07 0B 0011*      jp m,@is_neg
0B0775 C9          0012*      ret         ; hlu is positive or zero so we're done
0B0776             0013*  @is_neg:
0B0776 F5          0014*      push af     ; otherwise, save current flags for return
0B0777 CD 7D 07 0B 0015*      call neg_hlu ; negate hlu
0B077B F1          0016*      pop af      ; get back flags
0B077C C9          0017*      ret
0B077D             0018*  
0B077D             0019*  ; flip the sign of hlu
0B077D             0020*  ; inputs: hlu
0B077D             0021*  ; returns: 0-hlu, flags set appropriately for the result:
0B077D             0022*  ;         s1,z0,pv0,n1,c1 if result is negative
0B077D             0023*  ;         s0,z1,pv0,n1,c0 if result is zero
0B077D             0024*  ;         s0,z0,pv0,n1,c1 if result is positive
0B077D             0025*  ; destroys a
0B077D             0026*  neg_hlu:
0B077D D5          0027*      push de     ; save de
0B077E EB          0028*      ex de,hl    ; put hl into de
0B077F 21 00 00 00 0029*      ld hl,0     ; clear hl
0B0783 AF          0030*      xor a       ; clear carry
0B0784 ED 52       0031*      sbc hl,de   ; 0-hlu = -hlu
0B0786 D1          0032*      pop de      ; get de back
0B0787 C9          0033*      ret         ; easy peasy
0B0788             0034*  
0B0788             0035*  ;------------------------------------------------------------------------
0B0788             0036*  ; divide hlu by 2, inspired by above
0B0788             0037*  ;------------------------------------------------------------------------
0B0788             0038*  hlu_div2:
0B0788 22 08 0A 0B 0039*  	ld		(bitbuf1),hl
0B078C 21 0A 0A 0B 0040*  	ld		hl,bitbuf1+2
0B0790 CB 1E       0041*  	rr		(hl)
0B0792 2B          0042*  	dec		hl
0B0793 CB 1E       0043*  	rr		(hl)
0B0795 2B          0044*  	dec		hl
0B0796 CB 1E       0045*  	rr		(hl)
0B0798 23          0046*  	inc		hl
0B0799 23          0047*  	inc		hl
0B079A 2A 08 0A 0B 0048*      ld hl,(bitbuf1)
0B079E C9          0049*      ret
0B079F             0050*  
0B079F             0051*  ; this is my little hack to divide by 16
0B079F             0052*  hlu_div16:
0B079F AF          0053*      xor a
0B07A0 29          0054*      add hl,hl
0B07A1 17          0055*      rla
0B07A2 29          0056*      add hl,hl
0B07A3 17          0057*      rla
0B07A4 29          0058*      add hl,hl
0B07A5 17          0059*      rla
0B07A6 29          0060*      add hl,hl
0B07A7 17          0061*      rla
0B07A8 22 B5 07 0B 0062*      ld (@scratch),hl
0B07AC 32 B8 07 0B 0063*      ld (@scratch+3),a
0B07B0 2A B6 07 0B 0064*      ld hl,(@scratch+1)
0B07B4 C9          0065*      ret
0B07B5             0066*  @scratch: ds 4
0B07B9             0067*  
0B07B9             0068*  
0B07B9 00 00 00 00 0069*  add_bcd_arg1: db #00,#00,#00,#00
0B07BD 00 00 00 00 0070*  add_bcd_arg2: db #00,#00,#00,#00
0B07C1             0071*  
0B07C1             0072*  ; set bcd values in a scratch memory address from registers bcde
0B07C1             0073*  ; input: hl; scratch address,bcde; 8-place bcd number
0B07C1             0074*  ; destroys ; hl
0B07C1             0075*  set_bcd:
0B07C1 73          0076*      ld (hl),e
0B07C2 23          0077*      inc hl
0B07C3 72          0078*      ld (hl),d
0B07C4 23          0079*      inc hl
0B07C5 71          0080*      ld (hl),c
0B07C6 23          0081*      inc hl
0B07C7 70          0082*      ld (hl),b
0B07C8 C9          0083*      ret
0B07C9             0084*  
0B07C9             0085*  ; load bcd values from a scratch memory address to bcde
0B07C9             0086*  ; input: hl; scratch address
0B07C9             0087*  ; output: bcde; 8-place bcd number
0B07C9             0088*  ; destroys: hl
0B07C9             0089*  get_bcd:
0B07C9 5E          0090*      ld e,(hl)
0B07CA 23          0091*      inc hl
0B07CB 56          0092*      ld d,(hl)
0B07CC 23          0093*      inc hl
0B07CD 4E          0094*      ld c,(hl)
0B07CE 23          0095*      inc hl
0B07CF 46          0096*      ld b,(hl)
0B07D0 C9          0097*      ret
0B07D1             0098*  
0B07D1             0099*  ; BCD addition
0B07D1             0100*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0B07D1             0101*  ;       a is the number of bytes holding each number (number of places/2)
0B07D1             0102*  ; outputs: (hl) + (de) --> (hl)
0B07D1             0103*  ; destroys: a,b,de,hl
0B07D1             0104*  add_bcd:
0B07D1 47          0105*      ld b,a ; loop counter
0B07D2 AF          0106*      xor a ; reset a, clear carry flag
0B07D3             0107*  adcec:
0B07D3 1A          0108*      ld a,(de) ; addend to acc
0B07D4 8E          0109*      adc a,(hl) ; add (hl) to acc
0B07D5 27          0110*      daa ; adjust result to bcd
0B07D6 77          0111*      ld (hl),a ; store result
0B07D7 23          0112*      inc hl ; advance memory pointers
0B07D8 13          0113*      inc de
0B07D9 10 F8       0114*      djnz adcec ; loop until b == 0
0B07DB C9          0115*      ret
0B07DC             0116*  
0B07DC             0117*  ; BCD subtraction
0B07DC             0118*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0B07DC             0119*  ;       a is the number of bytes holding each number (number of places/2)
0B07DC             0120*  ; outputs: (hl) - (de) --> (hl)
0B07DC             0121*  ; destroys: a,b,de,hl
0B07DC             0122*  sub_bcd:
0B07DC 47          0123*      ld b,a ; loop counter
0B07DD AF          0124*      xor a ; reset a,clear carry flag
0B07DE             0125*  subdec:
0B07DE 1A          0126*      ld a,(de) ; subtrahend to acc
0B07DF 9E          0127*      sbc a,(hl) ; subtract (hl) from acc
0B07E0 27          0128*      daa ; adjust result to bcd
0B07E1 77          0129*      ld (hl),a ; store result
0B07E2 23          0130*      inc hl ; advance memory pointers
0B07E3 13          0131*      inc de
0B07E4 10 F8       0132*      djnz subdec ; loop until b == 0
0B07E6 C9          0133*      ret
0B07E7             0134*  
0B07E7             0135*  ; http://www.z80.info/pseudo-random.txt
0B07E7             0136*  rand_8:
0B07E7 C5          0137*      push bc
0B07E8 3A FB 07 0B 0138*      ld a,(r_seed)
0B07EC 4F          0139*      ld c,a
0B07ED             0140*  
0B07ED 0F          0141*      rrca ; multiply by 32
0B07EE 0F          0142*      rrca
0B07EF 0F          0143*      rrca
0B07F0 EE 1F       0144*      xor 0x1f
0B07F2             0145*  
0B07F2 81          0146*      add a,c
0B07F3 DE FF       0147*      sbc a,255 ; carry
0B07F5             0148*  
0B07F5 32 FB 07 0B 0149*      ld (r_seed),a
0B07F9 C1          0150*      pop bc
0B07FA C9          0151*      ret
0B07FB 50          0152*  r_seed: defb $50
0B07FC             0153*  
0B07FC             0154*  
0B07FC             0021   	INCLUDE	"arith24.inc"
0B07FC             0001*  arith24uaf: ds 6
0B0802             0002*  arith24uhl: ds 6
0B0808             0003*  arith24ubc: ds 6
0B080E             0004*  arith24ude: ds 6
0B0814             0005*  arith24uix: ds 6
0B081A             0006*  arith24uiy: ds 6
0B0820             0007*  arith24usp: ds 6
0B0826             0008*  arith24upc: ds 6
0B082C             0009*  
0B082C             0010*  ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
0B082C             0011*  ; uses EZ80 MLT instruction for speed
0B082C             0012*  ; operation: UHL * A --> AUHL
0B082C             0013*  ; destroys: AF, HL
0B082C             0014*  umul24x8:
0B082C D5          0015*  	push de ; preserve de
0B082D             0016*  ; low byte
0B082D 5D          0017*  	ld e,l
0B082E 57          0018*  	ld d,a
0B082F ED 5C       0019*  	mlt de
0B0831 6B          0020*  	ld l,e ; product low byte
0B0832 08          0021*  	ex af,af' ; save multiplier
0B0833 7A          0022*  	ld a,d ; carry
0B0834 08          0023*  	ex af,af' ; save carry, restore multiplier
0B0835             0024*  ; high byte
0B0835 5C          0025*  	ld e,h
0B0836 57          0026*  	ld d,a
0B0837 ED 5C       0027*  	mlt de
0B0839 08          0028*  	ex af,af' ; save multiplier, restore carry
0B083A 83          0029*  	add a,e ; add carry
0B083B 67          0030*  	ld h,a ; product middle byte
0B083C 7A          0031*  	ld a,d ; carry
0B083D 08          0032*  	ex af,af' ; save carry, restore multiplier
0B083E             0033*  ; upper byte
0B083E E5          0034*  	push hl
0B083F 33          0035*  	inc sp
0B0840 D1          0036*  	pop de ; d = hlu
0B0841 3B          0037*  	dec sp
0B0842 5F          0038*  	ld e,a
0B0843 ED 5C       0039*  	mlt de
0B0845 08          0040*  	ex af,af' ; restore carry
0B0846 8B          0041*  	adc a,e ; add carry
0B0847 22 58 08 0B 0042*      ld (@scratch),hl ; 7 cycles
0B084B 32 5A 08 0B 0043*      ld (@scratch+2),a ; 5 cycles
0B084F 2A 58 08 0B 0044*      ld hl,(@scratch) ; 7 cycles
0B0853             0045*  ; highest byte
0B0853 3E 00       0046*  	ld a,0 ; preserve carry flag
0B0855 8A          0047*  	adc a,d ; product highest byte
0B0856 D1          0048*  	pop de ; restore de
0B0857 C9          0049*  	ret
0B0858             0050*  @scratch: ds 3
0B085B             0051*  
0B085B             0052*  ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
0B085B             0053*  ; operation: UHL * UDE --> umul24x24out
0B085B             0054*  umul24x24:
0B085B FD 21 B3 08 0055*  	ld iy,umul24x24out ; point to output buffer
       0B          
0B0860 C5          0056*  	push bc
0B0861 01 00 00 00 0057*  	ld bc,0
0B0865 FD 0F 00    0058*  	ld (iy),bc
0B0868 FD 0F 03    0059*  	ld (iy+3),bc
0B086B C1          0060*  	pop bc
0B086C             0061*  
0B086C             0062*  ; STEP 1: UHL * E
0B086C 7B          0063*  	ld a,e
0B086D E5          0064*  	push hl
0B086E CD 2C 08 0B 0065*  	call umul24x8
0B0872 FD 2F 00    0066*  	ld (iy+0),hl
0B0875 FD 77 03    0067*  	ld (iy+3),a
0B0878             0068*  
0B0878             0069*  ; STEP 2: UHL * D
0B0878 E1          0070*  	pop hl
0B0879 E5          0071*  	push hl
0B087A 7A          0072*  	ld a,d
0B087B CD 2C 08 0B 0073*  	call umul24x8
0B087F CD 8C 08 0B 0074*  	call @accumulate
0B0883             0075*  
0B0883             0076*  ; STEP 3: UHL * DEU
0B0883 E1          0077*  	pop hl
0B0884 D5          0078*  	push de
0B0885 33          0079*  	inc sp
0B0886 F1          0080*  	pop af
0B0887 3B          0081*  	dec sp
0B0888 CD 2C 08 0B 0082*  	call umul24x8
0B088C             0083*  
0B088C             0084*  @accumulate:
0B088C FD 23       0085*  	inc iy
0B088E             0086*  ; highest byte of product to carry
0B088E FD 77 03    0087*  	ld (iy+3),a
0B0891             0088*  ; low byte of product
0B0891 7D          0089*  	ld a,l
0B0892 FD 86 00    0090*  	add a,(iy+0)
0B0895 FD 77 00    0091*  	ld (iy+0),a
0B0898             0092*  ; high byte of product
0B0898 7C          0093*  	ld a,h
0B0899 FD 8E 01    0094*  	adc a,(iy+1)
0B089C FD 77 01    0095*  	ld (iy+1),a
0B089F             0096*  ; uppper byte of product
0B089F E5          0097*  	push hl
0B08A0 33          0098*  	inc sp
0B08A1 E1          0099*  	pop hl
0B08A2 3B          0100*  	dec sp
0B08A3 7C          0101*  	ld a,h
0B08A4 FD 8E 02    0102*  	adc a,(iy+2)
0B08A7 FD 77 02    0103*  	ld (iy+2),a
0B08AA             0104*  ; carry
0B08AA 3E 00       0105*  	ld a,0 ; preserve flags
0B08AC FD 8E 03    0106*  	adc a,(iy+3)
0B08AF FD 77 03    0107*  	ld (iy+3),a
0B08B2 C9          0108*  	ret
0B08B3             0109*  umul24x24out: ds 6 ; output buffer
0B08B9             0110*  
0B08B9             0111*  ; umul168:	UH.L = UH.L*UD.E (unsigned)
0B08B9             0112*  umul168:
0B08B9 CD 5B 08 0B 0113*  	call umul24x24
0B08BD FD 27 FF    0114*  	ld hl,(iy-1)
0B08C0 C9          0115*  	ret
0B08C1             0116*  
0B08C1             0117*  ; smul168:	UH.L = UH.L*UD.E (signed)
0B08C1             0118*  smul168:
0B08C1             0119*  ; make everything positive and store sign flags
0B08C1 CD 6D 07 0B 0120*  	call abs_hlu
0B08C5 F5          0121*  	push af
0B08C6 EB          0122*  	ex de,hl
0B08C7 CD 6D 07 0B 0123*  	call abs_hlu
0B08CB EB          0124*  	ex de,hl
0B08CC F5          0125*  	push af
0B08CD             0126*  ; do the multiplication
0B08CD CD B9 08 0B 0127*  	call umul168
0B08D1             0128*  ; adjust sign of result
0B08D1 F1          0129*  	pop af
0B08D2 FA D8 08 0B 0130*  	jp m,@de_neg
0B08D6 F1          0131*  	pop af
0B08D7 F0          0132*  	ret p ; both positive, nothing to do
0B08D8             0133*  @de_neg:
0B08D8 F1          0134*  	pop af
0B08D9 F8          0135*  	ret m ; both negative, nothing to do
0B08DA CD 7D 07 0B 0136*  	call neg_hlu ; result is negative
0B08DE C9          0137*  	ret
0B08DF             0138*  
0B08DF             0139*  ;------------------------------------------------------------------------
0B08DF             0140*  ;  arith24.inc
0B08DF             0141*  ;  24-bit ez80 arithmetic routines
0B08DF             0142*  ;  Copyright (c) Shawn Sijnstra 2024
0B08DF             0143*  ;  MIT license
0B08DF             0144*  ;
0B08DF             0145*  ;  This library was created as a tool to help make ez80
0B08DF             0146*  ;  24-bit native assembly routines for simple mathematical problems
0B08DF             0147*  ;  more widely available.
0B08DF             0148*  ;
0B08DF             0149*  ;------------------------------------------------------------------------
0B08DF             0150*  
0B08DF             0151*  ;------------------------------------------------------------------------
0B08DF             0152*  ; umul24:	HL = HL*DE (unsigned)
0B08DF             0153*  ; Preserves AF, BC, DE
0B08DF             0154*  ; Uses a fast multiply routine.
0B08DF             0155*  ;------------------------------------------------------------------------
0B08DF             0156*  umul24:
0B08DF D5          0157*  	push	DE
0B08E0 C5          0158*  	push	BC
0B08E1 F5          0159*  	push	AF
0B08E2 E5          0160*  	push	HL
0B08E3 C1          0161*  	pop		BC
0B08E4 3E 18       0162*      ld	 	a, 24 ; No. of bits to process
0B08E6 21 00 00 00 0163*      ld	 	hl, 0 ; Result
0B08EA             0164*  umul24_lp:
0B08EA 29          0165*  	add	hl,hl
0B08EB EB          0166*  	ex	de,hl
0B08EC 29          0167*  	add	hl,hl
0B08ED EB          0168*  	ex	de,hl
0B08EE 30 01       0169*  	jr	nc,umul24_nc
0B08F0 09          0170*  	add	hl,bc
0B08F1             0171*  umul24_nc:
0B08F1 3D          0172*  	dec	a
0B08F2 20 F6       0173*  	jr	nz,umul24_lp
0B08F4 F1          0174*  	pop	af
0B08F5 C1          0175*  	pop	bc
0B08F6 D1          0176*  	pop	de
0B08F7 C9          0177*  	ret
0B08F8             0178*  
0B08F8             0179*  ;------------------------------------------------------------------------
0B08F8             0180*  ; udiv24
0B08F8             0181*  ; Unsigned 24-bit division
0B08F8             0182*  ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
0B08F8             0183*  ;
0B08F8             0184*  ; Uses AF BC DE HL
0B08F8             0185*  ; Uses Restoring Division algorithm
0B08F8             0186*  ;------------------------------------------------------------------------
0B08F8             0187*  
0B08F8             0188*  udiv24:
0B08F8 E5          0189*  	push	hl
0B08F9 C1          0190*  	pop		bc	;move dividend to BCU
0B08FA 21 00 00 00 0191*  	ld		hl,0	;result
0B08FE A7          0192*  	and		a
0B08FF ED 52       0193*  	sbc		hl,de	;test for div by 0
0B0901 C8          0194*  	ret		z		;it's zero, carry flag is clear
0B0902 19          0195*  	add		hl,de	;HL is 0 again
0B0903 3E 18       0196*  	ld		a,24	;number of loops through.
0B0905             0197*  udiv1:
0B0905 C5          0198*  	push	bc	;complicated way of doing this because of lack of access to top bits
0B0906 E3          0199*  	ex		(sp),hl
0B0907 37          0200*  	scf
0B0908 ED 6A       0201*  	adc	hl,hl
0B090A E3          0202*  	ex	(sp),hl
0B090B C1          0203*  	pop	bc		;we now have bc = (bc * 2) + 1
0B090C             0204*  
0B090C ED 6A       0205*  	adc	hl,hl
0B090E A7          0206*  	and	a		;is this the bug
0B090F ED 52       0207*  	sbc	hl,de
0B0911 30 02       0208*  	jr	nc,udiv2
0B0913 19          0209*  	add	hl,de
0B0914             0210*  ;	dec	c
0B0914 0B          0211*  	dec	bc
0B0915             0212*  udiv2:
0B0915 3D          0213*  	dec	a
0B0916 20 ED       0214*  	jr	nz,udiv1
0B0918 37          0215*  	scf		;flag used for div0 error
0B0919 C5          0216*  	push	bc
0B091A D1          0217*  	pop		de	;remainder
0B091B C9          0218*  	ret
0B091C             0219*  
0B091C             0220*  ; perform unsigned division of fixed place values
0B091C             0221*  ; with an unsigned 16.8 fixed place result
0B091C             0222*  ; inputs: b.c is 8.8 dividend, ud.e is 16.8 divisor
0B091C             0223*  ; outputs: uh.l is the 16.8 quotient ub.c is the 16.8 remainder
0B091C             0224*  ; destroys: a,bc
0B091C             0225*  udiv168:
0B091C             0226*  ; shift dividend left 8 bits
0B091C ED 43 09 08 0227*      ld (arith24ubc+1),bc
       0B          
0B0921 AF          0228*      xor a
0B0922 32 08 08 0B 0229*      ld (arith24ubc),a
0B0926 ED 4B 08 08 0230*      ld bc,(arith24ubc)
       0B          
0B092B CD F8 08 0B 0231*      call udiv24
0B092F             0232*  ; flip-flop outptuts to satisfy downstream consumers
0B092F             0233*  ; TODO: this is a hack and should be fixed
0B092F             0234*  ; (so says copilot ... but it's not wrong)
0B092F E5          0235*      push hl
0B0930 C5          0236*      push bc
0B0931 E1          0237*      pop hl
0B0932 C1          0238*      pop bc
0B0933 C9          0239*      ret
0B0934             0240*  
0B0934             0241*  ; perform signed division of 16.8 fixed place values
0B0934             0242*  ; with an signed 16.8 fixed place result
0B0934             0243*  ; inputs: ub.c is dividend,ud.e is divisor
0B0934             0244*  ; outputs: uh.l is quotient
0B0934             0245*  ; destroys: a,bc
0B0934             0246*  ; note: uses carry flag to test for sign of operands and result
0B0934             0247*  ;       which can be confusing and should perhaps be changed
0B0934             0248*  ; note2: helper functions abs_hlu and neg_hlu have been modified
0B0934             0249*  ;       to return accurate flags according to the origional signs
0B0934             0250*  ;       (or zero) of this function's inputs
0B0934             0251*  sdiv168:
0B0934             0252*  ; make everything positive and save signs
0B0934 C5          0253*      push bc         ; get bc to hl
0B0935 E1          0254*      pop hl          ; for the next call
0B0936 CD 6D 07 0B 0255*      call abs_hlu    ; sets sign flag if hlu was negative, zero if zero
0B093A CA 6D 09 0B 0256*      jp z,@is_zero   ; if bc is zero, answer is zero and we're done
0B093E F5          0257*      push af         ; save sign of bc
0B093F E5          0258*      push hl         ; now put abs(hl)
0B0940 C1          0259*      pop bc          ; back into bc = abs(bc)
0B0941 EB          0260*      ex de,hl        ; now we do de same way
0B0942 CD 6D 07 0B 0261*      call abs_hlu
0B0946 CA 6F 09 0B 0262*      jp z,@div_by_zero  ; if de was zero, answer is undefined and we're done
0B094A EB          0263*      ex de,hl        ; hl back to de = abs(de)
0B094B             0264*  ; determine sign of result
0B094B F2 56 09 0B 0265*      jp p,@de_pos    ; sign positive,de is positive
0B094F F1          0266*      pop af          ; get back sign of bc
0B0950 FA 5F 09 0B 0267*      jp m,@result_pos  ; bc and de negative, result is positive
0B0954 18 05       0268*      jr @result_neg
0B0956             0269*  @de_pos:
0B0956 F1          0270*      pop af          ; get back sign of bc
0B0957 F2 5F 09 0B 0271*      jp p,@result_pos   ; bc and de are both positive so result is positive
0B095B             0272*                      ; fall through to result_neg
0B095B             0273*  @result_neg:
0B095B AF          0274*      xor a           ; zero a and clear carry
0B095C 3D          0275*      dec a           ; set sign flag to negative
0B095D 18 02       0276*      jr @do_div
0B095F             0277*  @result_pos:
0B095F AF          0278*      xor a           ; zero a and clear carry
0B0960 3C          0279*      inc a           ; set sign flag to negative
0B0961             0280*                      ; fall through to do_div
0B0961             0281*  @do_div:
0B0961 F5          0282*      push af         ; save sign of result
0B0962 CD 1C 09 0B 0283*      call udiv168
0B0966 F1          0284*      pop af          ; get back sign of result
0B0967 F0          0285*      ret p           ; result is positive so nothing to do
0B0968 CD 7D 07 0B 0286*      call neg_hlu    ; result is negative so negate it
0B096C C9          0287*      ret
0B096D             0288*  @is_zero:           ; result is zero
0B096D AF          0289*      xor a           ; sets zero flag, which we want,
0B096E             0290*                      ; sets pv flag which we might not (zero is parity even)
0B096E             0291*                      ; resets all others which is okay
0B096E C9          0292*      ret
0B096F             0293*  @div_by_zero:       ; result is undefined, which isn't defined in binary
0B096F             0294*                      ; so we'll just return zero until i can think of something better
0B096F F1          0295*      pop af          ; dummy pop
0B0970 AF          0296*      xor a           ; sets zero flag, which is ok,
0B0971             0297*                      ; sets pv flag which could be interpreted as overflow, which is good
0B0971             0298*                      ; resets all others which is okay
0B0971 C9          0299*      ret
0B0972             0300*  
0B0972             0301*  ;------------------------------------------------------------------------
0B0972             0302*  ; neg24
0B0972             0303*  ; Returns: HLU = 0-HLU
0B0972             0304*  ; preserves all other registers
0B0972             0305*  ;------------------------------------------------------------------------
0B0972             0306*  neg24:
0B0972 D5          0307*  	push	de
0B0973 EB          0308*  	ex		de,hl
0B0974 21 00 00 00 0309*  	ld		hl,0
0B0978 B7          0310*  	or		a
0B0979 ED 52       0311*  	sbc		hl,de
0B097B D1          0312*  	pop		de
0B097C C9          0313*  	ret
0B097D             0314*  
0B097D             0315*  ;------------------------------------------------------------------------
0B097D             0316*  ; or_hlu_deu: 24 bit bitwise OR
0B097D             0317*  ; Returns: hlu = hlu OR deu
0B097D             0318*  ; preserves all other registers
0B097D             0319*  ;------------------------------------------------------------------------
0B097D             0320*  or_hlu_deu:
0B097D 22 08 0A 0B 0321*  	ld	(bitbuf1),hl
0B0981 ED 53 0B 0A 0322*  	ld	(bitbuf2),de
       0B          
0B0986 D5          0323*  	push	de	;preserve DEU
0B0987 C5          0324*  	push	bc	;preserve BCU
0B0988 06 03       0325*  	ld		b,3
0B098A 21 08 0A 0B 0326*  	ld	hl,bitbuf1
0B098E 11 08 0A 0B 0327*  	ld	de,bitbuf1
0B0992             0328*  orloop_24:
0B0992 1A          0329*  	ld	a,(de)
0B0993 B6          0330*  	or	(hl)
0B0994 12          0331*  	ld	(de),a
0B0995 13          0332*  	inc	de
0B0996 23          0333*  	inc	hl
0B0997 10 F9       0334*  	djnz	orloop_24
0B0999 2A 0B 0A 0B 0335*  	ld	hl,(bitbuf2)
0B099D C1          0336*  	pop		bc	;restore BC
0B099E D1          0337*  	pop		de	;restore DE
0B099F             0338*  
0B099F             0339*  ;------------------------------------------------------------------------
0B099F             0340*  ; and_hlu_deu: 24 bit bitwise AND
0B099F             0341*  ; Returns: hlu = hlu AND deu
0B099F             0342*  ; preserves all other registers
0B099F             0343*  ;------------------------------------------------------------------------
0B099F             0344*  and_hlu_deu:
0B099F 22 08 0A 0B 0345*  	ld	(bitbuf1),hl
0B09A3 ED 53 0B 0A 0346*  	ld	(bitbuf2),de
       0B          
0B09A8 D5          0347*  	push	de	;preserve DEU
0B09A9 C5          0348*  	push	bc	;preserve BCU
0B09AA 06 03       0349*  	ld		b,3
0B09AC 21 08 0A 0B 0350*  	ld	hl,bitbuf1
0B09B0 11 08 0A 0B 0351*  	ld	de,bitbuf1
0B09B4             0352*  andloop_24:
0B09B4 1A          0353*  	ld	a,(de)
0B09B5 A6          0354*  	and	(hl)
0B09B6 12          0355*  	ld	(de),a
0B09B7 13          0356*  	inc	de
0B09B8 23          0357*  	inc	hl
0B09B9 10 F9       0358*  	djnz	andloop_24
0B09BB 2A 0B 0A 0B 0359*  	ld	hl,(bitbuf2)
0B09BF C1          0360*  	pop		bc	;restore BC
0B09C0 D1          0361*  	pop		de	;restore DE
0B09C1             0362*  
0B09C1             0363*  ;------------------------------------------------------------------------
0B09C1             0364*  ; xor_hlu_deu: 24 bit bitwise XOR
0B09C1             0365*  ; Returns: hlu = hlu XOR deu
0B09C1             0366*  ; preserves all other registers
0B09C1             0367*  ;------------------------------------------------------------------------
0B09C1             0368*  xor_hlu_deu:
0B09C1 22 08 0A 0B 0369*  	ld	(bitbuf1),hl
0B09C5 ED 53 0B 0A 0370*  	ld	(bitbuf2),de
       0B          
0B09CA D5          0371*  	push	de	;preserve DEU
0B09CB C5          0372*  	push	bc	;preserve BCU
0B09CC 06 03       0373*  	ld		b,3
0B09CE 21 08 0A 0B 0374*  	ld	hl,bitbuf1
0B09D2 11 08 0A 0B 0375*  	ld	de,bitbuf1
0B09D6             0376*  xorloop_24:
0B09D6 1A          0377*  	ld	a,(de)
0B09D7 AE          0378*  	xor	(hl)
0B09D8 12          0379*  	ld	(de),a
0B09D9 13          0380*  	inc	de
0B09DA 23          0381*  	inc	hl
0B09DB 10 F9       0382*  	djnz	xorloop_24
0B09DD 2A 0B 0A 0B 0383*  	ld	hl,(bitbuf2)
0B09E1 C1          0384*  	pop		bc	;restore BC
0B09E2 D1          0385*  	pop		de	;restore DE
0B09E3             0386*  
0B09E3             0387*  ;------------------------------------------------------------------------
0B09E3             0388*  ; shl_hlu: 24 bit shift left hlu by deu positions
0B09E3             0389*  ; Returns: hlu = hlu << deu
0B09E3             0390*  ;		   de = 0
0B09E3             0391*  ; NOTE: only considers deu up to 16 bits.
0B09E3             0392*  ; preserves all other registers
0B09E3             0393*  ;------------------------------------------------------------------------
0B09E3             0394*  shl_hlu:
0B09E3 7A          0395*  	ld		a,d		;up to 16 bit.
0B09E4 B3          0396*  	or		e
0B09E5 C8          0397*  	ret		z		;we're done
0B09E6 29          0398*  	add		hl,hl	;shift HLU left
0B09E7 1B          0399*  	dec		de
0B09E8 18 F9       0400*  	jr		shl_hlu
0B09EA             0401*  
0B09EA             0402*  ;------------------------------------------------------------------------
0B09EA             0403*  ; shr_hlu: 24 bit shift right hlu by deu positions
0B09EA             0404*  ; Returns: hlu = hlu >> deu
0B09EA             0405*  ;		   de = 0
0B09EA             0406*  ; NOTE: only considers deu up to 16 bits.
0B09EA             0407*  ; preserves all other registers
0B09EA             0408*  ;------------------------------------------------------------------------
0B09EA             0409*  shr_hlu:
0B09EA 22 08 0A 0B 0410*  	ld		(bitbuf1),hl
0B09EE 21 0A 0A 0B 0411*  	ld		hl,bitbuf1+2
0B09F2             0412*  shr_loop:
0B09F2 7A          0413*  	ld		a,d		;up to 16 bit.
0B09F3 B3          0414*  	or		e
0B09F4 28 0D       0415*  	jr		z,shr_done		;we're done
0B09F6             0416*  ;carry is clear from or instruction
0B09F6 CB 1E       0417*  	rr		(hl)
0B09F8 2B          0418*  	dec		hl
0B09F9 CB 1E       0419*  	rr		(hl)
0B09FB 2B          0420*  	dec		hl
0B09FC CB 1E       0421*  	rr		(hl)
0B09FE 23          0422*  	inc		hl
0B09FF 23          0423*  	inc		hl
0B0A00 1B          0424*  	dec		de
0B0A01 18 EF       0425*  	jr		shr_loop
0B0A03             0426*  shr_done:
0B0A03 2A 08 0A 0B 0427*  	ld		hl,(bitbuf1)	;collect result
0B0A07 C9          0428*  	ret
0B0A08             0429*  
0B0A08             0430*  ;------------------------------------------------------------------------
0B0A08             0431*  ; Scratch area for calculations
0B0A08             0432*  ;------------------------------------------------------------------------
0B0A08 00 00 00    0433*  bitbuf1:	dw24	0	;bit manipulation buffer 1
0B0A0B 00 00 00    0434*  bitbuf2:	dw24	0	;bit manipulation buffer 2
0B0A0E             0435*  
0B0A0E             0436*  ; ========== FROM maths24.inc ==========
0B0A0E             0437*  
0B0A0E             0438*  ; hlu 1 byte right shift
0B0A0E             0439*  ; returns: hlu / 256, fractional portion in a
0B0A0E             0440*  ; destroys: af
0B0A0E             0441*  shift_hlu_r1b:
0B0A0E AF          0442*  	xor a
0B0A0F 32 20 0A 0B 0443*  	ld (@buffer+3),a
0B0A13 7D          0444*  	ld a,l ; save the fractional portion
0B0A14 22 1D 0A 0B 0445*  	ld (@buffer),hl
0B0A18 2A 1E 0A 0B 0446*  	ld hl,(@buffer+1)
0B0A1C C9          0447*  	ret
0B0A1D             0448*  @buffer: ds 4
0B0A21             0449*  
0B0A21             0450*  ; Expects  ADL mode
0B0A21             0451*  ; Inputs:  UH.L
0B0A21             0452*  ; Outputs: UH.L is the 16.8 square root
0B0A21             0453*  ;          UD.E is the difference inputHL-DE^2
0B0A21             0454*  ;          c flag reset
0B0A21             0455*  sqrt168:
0B0A21 CD 2B 0A 0B 0456*      call sqrt24
0B0A25 EB          0457*      ex de,hl
0B0A26 29          0458*      add hl,hl
0B0A27 29          0459*      add hl,hl
0B0A28 29          0460*      add hl,hl
0B0A29 29          0461*      add hl,hl
0B0A2A C9          0462*      ret
0B0A2B             0463*  
0B0A2B             0464*  ; Expects  ADL mode
0B0A2B             0465*  ; Inputs:  HL
0B0A2B             0466*  ; Outputs: DE is the integer square root
0B0A2B             0467*  ;          HL is the difference inputHL-DE^2
0B0A2B             0468*  ;          c flag reset
0B0A2B             0469*  sqrt24:
0B0A2B AF          0470*      xor a
0B0A2C 45          0471*      ld b,l
0B0A2D C5          0472*      push bc
0B0A2E 47          0473*      ld b,a
0B0A2F 57          0474*      ld d,a
0B0A30 4F          0475*      ld c,a
0B0A31 6F          0476*      ld l,a
0B0A32 5F          0477*      ld e,a
0B0A33             0478*  
0B0A33             0479*      ;Iteration 1
0B0A33 29          0480*      add hl,hl
0B0A34 CB 11       0481*      rl c
0B0A36 29          0482*      add hl,hl
0B0A37 CB 11       0483*      rl c
0B0A39 91          0484*      sub c
0B0A3A 30 04       0485*      jr nc,$+6
0B0A3C 1C          0486*      inc e
0B0A3D 1C          0487*      inc e
0B0A3E 2F          0488*      cpl
0B0A3F 4F          0489*      ld c,a
0B0A40             0490*  
0B0A40             0491*      ;Iteration 2
0B0A40 29          0492*      add hl,hl
0B0A41 CB 11       0493*      rl c
0B0A43 29          0494*      add hl,hl
0B0A44 CB 11       0495*      rl c
0B0A46 CB 13       0496*      rl e
0B0A48 7B          0497*      ld a,e
0B0A49 91          0498*      sub c
0B0A4A 30 04       0499*      jr nc,$+6
0B0A4C 1C          0500*      inc e
0B0A4D 1C          0501*      inc e
0B0A4E 2F          0502*      cpl
0B0A4F 4F          0503*      ld c,a
0B0A50             0504*  
0B0A50             0505*      ;Iteration 3
0B0A50 29          0506*      add hl,hl
0B0A51 CB 11       0507*      rl c
0B0A53 29          0508*      add hl,hl
0B0A54 CB 11       0509*      rl c
0B0A56 CB 13       0510*      rl e
0B0A58 7B          0511*      ld a,e
0B0A59 91          0512*      sub c
0B0A5A 30 04       0513*      jr nc,$+6
0B0A5C 1C          0514*      inc e
0B0A5D 1C          0515*      inc e
0B0A5E 2F          0516*      cpl
0B0A5F 4F          0517*      ld c,a
0B0A60             0518*  
0B0A60             0519*      ;Iteration 4
0B0A60 29          0520*      add hl,hl
0B0A61 CB 11       0521*      rl c
0B0A63 29          0522*      add hl,hl
0B0A64 CB 11       0523*      rl c
0B0A66 CB 13       0524*      rl e
0B0A68 7B          0525*      ld a,e
0B0A69 91          0526*      sub c
0B0A6A 30 04       0527*      jr nc,$+6
0B0A6C 1C          0528*      inc e
0B0A6D 1C          0529*      inc e
0B0A6E 2F          0530*      cpl
0B0A6F 4F          0531*      ld c,a
0B0A70             0532*  
0B0A70             0533*      ;Iteration 5
0B0A70 29          0534*      add hl,hl
0B0A71 CB 11       0535*      rl c
0B0A73 29          0536*      add hl,hl
0B0A74 CB 11       0537*      rl c
0B0A76 CB 13       0538*      rl e
0B0A78 7B          0539*      ld a,e
0B0A79 91          0540*      sub c
0B0A7A 30 04       0541*      jr nc,$+6
0B0A7C 1C          0542*      inc e
0B0A7D 1C          0543*      inc e
0B0A7E 2F          0544*      cpl
0B0A7F 4F          0545*      ld c,a
0B0A80             0546*  
0B0A80             0547*      ;Iteration 6
0B0A80 29          0548*      add hl,hl
0B0A81 CB 11       0549*      rl c
0B0A83 29          0550*      add hl,hl
0B0A84 CB 11       0551*      rl c
0B0A86 CB 13       0552*      rl e
0B0A88 7B          0553*      ld a,e
0B0A89 91          0554*      sub c
0B0A8A 30 04       0555*      jr nc,$+6
0B0A8C 1C          0556*      inc e
0B0A8D 1C          0557*      inc e
0B0A8E 2F          0558*      cpl
0B0A8F 4F          0559*      ld c,a
0B0A90             0560*  
0B0A90             0561*      ;Iteration 7
0B0A90 29          0562*      add hl,hl
0B0A91 CB 11       0563*      rl c
0B0A93 29          0564*      add hl,hl
0B0A94 CB 11       0565*      rl c
0B0A96 CB 10       0566*      rl b
0B0A98 EB          0567*      ex de,hl
0B0A99 29          0568*      add hl,hl
0B0A9A E5          0569*      push hl
0B0A9B ED 42       0570*      sbc hl,bc
0B0A9D 30 06       0571*      jr nc,$+8
0B0A9F 7C          0572*      ld a,h
0B0AA0 2F          0573*      cpl
0B0AA1 47          0574*      ld b,a
0B0AA2 7D          0575*      ld a,l
0B0AA3 2F          0576*      cpl
0B0AA4 4F          0577*      ld c,a
0B0AA5 E1          0578*      pop hl
0B0AA6 30 02       0579*      jr nc,$+4
0B0AA8 23          0580*      inc hl
0B0AA9 23          0581*      inc hl
0B0AAA EB          0582*      ex de,hl
0B0AAB             0583*  
0B0AAB             0584*      ;Iteration 8
0B0AAB 29          0585*      add hl,hl
0B0AAC 69          0586*      ld l,c
0B0AAD 60          0587*      ld h,b
0B0AAE ED 6A       0588*      adc hl,hl
0B0AB0 ED 6A       0589*      adc hl,hl
0B0AB2 EB          0590*      ex de,hl
0B0AB3 29          0591*      add hl,hl
0B0AB4 ED 52       0592*      sbc hl,de
0B0AB6 19          0593*      add hl,de
0B0AB7 EB          0594*      ex de,hl
0B0AB8 30 04       0595*      jr nc,$+6
0B0ABA ED 52       0596*      sbc hl,de
0B0ABC 13          0597*      inc de
0B0ABD 13          0598*      inc de
0B0ABE             0599*  
0B0ABE             0600*      ;Iteration 9
0B0ABE F1          0601*      pop af
0B0ABF 17          0602*      rla
0B0AC0 ED 6A       0603*      adc hl,hl
0B0AC2 17          0604*      rla
0B0AC3 ED 6A       0605*      adc hl,hl
0B0AC5 EB          0606*      ex de,hl
0B0AC6 29          0607*      add hl,hl
0B0AC7 ED 52       0608*      sbc hl,de
0B0AC9 19          0609*      add hl,de
0B0ACA EB          0610*      ex de,hl
0B0ACB 30 04       0611*      jr nc,$+6
0B0ACD ED 52       0612*      sbc hl,de
0B0ACF 13          0613*      inc de
0B0AD0 13          0614*      inc de
0B0AD1             0615*  
0B0AD1             0616*      ;Iteration 10
0B0AD1 17          0617*      rla
0B0AD2 ED 6A       0618*      adc hl,hl
0B0AD4 17          0619*      rla
0B0AD5 ED 6A       0620*      adc hl,hl
0B0AD7 EB          0621*      ex de,hl
0B0AD8 29          0622*      add hl,hl
0B0AD9 ED 52       0623*      sbc hl,de
0B0ADB 19          0624*      add hl,de
0B0ADC EB          0625*      ex de,hl
0B0ADD 30 04       0626*      jr nc,$+6
0B0ADF ED 52       0627*      sbc hl,de
0B0AE1 13          0628*      inc de
0B0AE2 13          0629*      inc de
0B0AE3             0630*  
0B0AE3             0631*      ;Iteration 11
0B0AE3 17          0632*      rla
0B0AE4 ED 6A       0633*      adc hl,hl
0B0AE6 17          0634*      rla
0B0AE7 ED 6A       0635*      adc hl,hl
0B0AE9 EB          0636*      ex de,hl
0B0AEA 29          0637*      add hl,hl
0B0AEB ED 52       0638*      sbc hl,de
0B0AED 19          0639*      add hl,de
0B0AEE EB          0640*      ex de,hl
0B0AEF 30 04       0641*      jr nc,$+6
0B0AF1 ED 52       0642*      sbc hl,de
0B0AF3 13          0643*      inc de
0B0AF4 13          0644*      inc de
0B0AF5             0645*  
0B0AF5             0646*      ;Iteration 11
0B0AF5 17          0647*      rla
0B0AF6 ED 6A       0648*      adc hl,hl
0B0AF8 17          0649*      rla
0B0AF9 ED 6A       0650*      adc hl,hl
0B0AFB EB          0651*      ex de,hl
0B0AFC 29          0652*      add hl,hl
0B0AFD ED 52       0653*      sbc hl,de
0B0AFF 19          0654*      add hl,de
0B0B00 EB          0655*      ex de,hl
0B0B01 30 04       0656*      jr nc,$+6
0B0B03 ED 52       0657*      sbc hl,de
0B0B05 13          0658*      inc de
0B0B06 13          0659*      inc de
0B0B07             0660*  
0B0B07 CB 1A       0661*      rr d
0B0B09 CB 1B       0662*      rr e
0B0B0B C9          0663*      ret
0B0B0C             0022       include "trig24.inc"
0B0B0C             0001*  
0B0B0C             0002*  ; convert unsigned angles from a 360 to 255 degree circle
0B0B0C             0003*  ; inputs: uh.l is the angle360 in 16.8 fixed format
0B0B0C             0004*  ; outputs: uh.l is the angle255 in 16.8 fixed format
0B0B0C             0005*  ; destroys: TODO
0B0B0C             0006*  ; note: even though the inputs and outputs are 16.8 fixed format
0B0B0C             0007*  ;       precision is effectively limited to 8.8 fixed format
0B0B0C             0008*  deg_360_to_255:
0B0B0C             0009*  ; clear scratch buffer
0B0B0C 11 00 00 00 0010*  	ld de,0
0B0B10 ED 53 3C 0B 0011*  	ld (@scratch),de
       0B          
0B0B15             0012*  ; divide uh.l by 360
0B0B15 11 68 01 00 0013*  	ld de,360
0B0B19             0014*  ; get integer portion
0B0B19 CD F8 08 0B 0015*  	call udiv24 ; DEU AND BCU = HLU / DEU, remainder in HLU
0B0B1D ED 53 43 0B 0016*  	ld (@output+1),de ; shift result up one byte
       0B          
0B0B22             0017*  ; get fractional portion
0B0B22 22 3D 0B 0B 0018*  	ld (@scratch+1),hl ; shift remainder up one byte
0B0B26 2A 3C 0B 0B 0019*  	ld hl,(@scratch)
0B0B2A 11 68 01 00 0020*  	ld de,360
0B0B2E CD F8 08 0B 0021*  	call udiv24 ; DEU AND BCU = HLU / DEU, remainder in HLU
0B0B32 7B          0022*  	ld a,e ; lowest byte is all we need
0B0B33 32 42 0B 0B 0023*  	ld (@output),a
0B0B37             0024*  ; we want the low 3 bytes for 16.8 output
0B0B37 2A 42 0B 0B 0025*  	ld hl,(@output)
0B0B3B C9          0026*  	ret
0B0B3C             0027*  @scratch: ds 6 ; scratch buffer for shifting bytes
0B0B42             0028*  @output: ds 6 ; scratch buffer to accumulate output
0B0B48             0029*  
0B0B48             0030*  ; 16.8 fixed inputs / outputs
0B0B48             0031*  ; takes: uh.l as angle in degrees 256
0B0B48             0032*  ;        ud.e as radius
0B0B48             0033*  ; returns ub.c as dx, ud.e as dy
0B0B48             0034*  ;        displacements from origin (0,0)
0B0B48             0035*  ; destroys: everything except indexes
0B0B48             0036*  polar_to_cartesian:
0B0B48             0037*  ; back up input parameters
0B0B48 22 02 08 0B 0038*      ld (arith24uhl), hl
0B0B4C ED 53 0E 08 0039*      ld (arith24ude), de
       0B          
0B0B51             0040*  ; compute dx = sin(uh.l) * ud.e
0B0B51 CD 80 0B 0B 0041*      call sin168
0B0B55 E5          0042*      push hl
0B0B56 C1          0043*      pop bc          ; ub.c = sin(uh.l)
0B0B57 ED 5B 0E 08 0044*  	ld de, (arith24ude)   ; get radius back
       0B          
0B0B5C CD C1 08 0B 0045*  	call smul168    ; uh.l = ub.c * ud.e = dx
0B0B60 E5          0046*      push hl         ; store dx for output
0B0B61             0047*  ; compute dy = -cos(uh.l) * ud.e
0B0B61 2A 02 08 0B 0048*      ld hl, (arith24uhl)
0B0B65 CD 7B 0B 0B 0049*      call cos168
0B0B69 CD 7D 07 0B 0050*  	call neg_hlu    ; invert dy for screen coords convention
0B0B6D E5          0051*      push hl
0B0B6E C1          0052*      pop bc          ; ub.c = -cos(uh.l)
0B0B6F ED 5B 0E 08 0053*      ld de, (arith24ude)   ; get radius back
       0B          
0B0B74 CD C1 08 0B 0054*      call smul168    ; uh.l = ub.c * ud.e = dy
0B0B78 EB          0055*      ex de, hl       ; de = dy for output
0B0B79 C1          0056*      pop bc          ; bc = dx for output
0B0B7A             0057*  ; and out
0B0B7A C9          0058*      ret
0B0B7B             0059*  
0B0B7B             0060*  ; fixed 16.8 routine
0B0B7B             0061*  ; cos(uh.l) --> uh.l
0B0B7B             0062*  ; destroys: de
0B0B7B             0063*  cos168:
0B0B7B             0064*  ; for cos we simply increment the angle by 90 degrees
0B0B7B             0065*  ; or 0x004000 in 16.8 degrees256
0B0B7B             0066*  ; which makes it a sin problem
0B0B7B 11 00 40 00 0067*      ld de,0x004000
0B0B7F 19          0068*      add hl,de ; modulo 256 happens below
0B0B80             0069*  ; fall through to sin168
0B0B80             0070*  ; ---------------------
0B0B80             0071*  ; fixed 16.8 routine
0B0B80             0072*  ; sin(uh.l) --> uh.l
0B0B80             0073*  ; destroys: de
0B0B80             0074*  sin168:
0B0B80             0075*  ; h contains the integer portion of our angle
0B0B80             0076*  ; we multiply it by three to get our lookup table index
0B0B80 2E 03       0077*      ld l,3
0B0B82 ED 6C       0078*      mlt hl ; gosh that is handy
0B0B84 11 00 00 00 0079*      ld de,0 ; clear deu
0B0B88 54          0080*      ld d,h ; copy hl to de
0B0B89 5D          0081*      ld e,l ; de contains our index
0B0B8A 21 A6 0C 0B 0082*      ld hl,sin_lut_168 ; grab the lut address
0B0B8E 19          0083*      add hl,de ; bump hl by the index
0B0B8F ED 27       0084*      ld hl,(hl) ; don't try this on a z80!
0B0B91 C9          0085*      ret ; and out
0B0B92             0086*  
0B0B92             0087*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
0B0B92             0088*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
0B0B92             0089*  ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
0B0B92             0090*  ;         also populates scratch locations dx168 and dy168
0B0B92             0091*  ; destroys: a,hl,bc,de
0B0B92             0092*  dxy168:
0B0B92             0093*  ; compute dx = x1-x0
0B0B92 AF          0094*      xor a ; clear carry
0B0B93 DD E5       0095*      push ix ; move ix to hl via the stack
0B0B95 E1          0096*      pop hl ; hl = x1
0B0B96 ED 42       0097*      sbc hl,bc ; hl = dx
0B0B98 22 ED 0B 0B 0098*      ld (dx168),hl ; dx to scratch
0B0B9C             0099*  ; compute dy = y1-y0
0B0B9C AF          0100*      xor a ; clear carry
0B0B9D FD E5       0101*      push iy ; move iy to hl via the stack
0B0B9F E1          0102*      pop hl ; hl = y1
0B0BA0 ED 52       0103*      sbc hl,de ; hl = dy
0B0BA2 22 F3 0B 0B 0104*      ld (dy168),hl ; dy to scratch
0B0BA6             0105*  ; populate output registers and return
0B0BA6 EB          0106*      ex de,hl        ; ud.e = dy
0B0BA7 ED 4B ED 0B 0107*      ld bc,(dx168)   ; ub.c = dx
       0B          
0B0BAC C9          0108*      ret
0B0BAD             0109*  
0B0BAD             0110*  ; compute the euclidian distance between two cartesian coordinates
0B0BAD             0111*  ; using the formula d = sqrt(dx^2+dy^2
0B0BAD             0112*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
0B0BAD             0113*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
0B0BAD             0114*  ; output; uh.l is the 16.8 fixed format distance
0B0BAD             0115*  ;       dx168/y are the 16.8 fixed format dx and dy
0B0BAD             0116*  ; destroys: a,hl,bc,de
0B0BAD             0117*  distance168:
0B0BAD             0118*  ; compute dx = x1-x0
0B0BAD AF          0119*      xor a ; clear carry
0B0BAE DD E5       0120*      push ix ; move ix to hl via the stack
0B0BB0 E1          0121*      pop hl ; hl = x1
0B0BB1 ED 42       0122*      sbc hl,bc ; hl = dx
0B0BB3 22 ED 0B 0B 0123*      ld (dx168),hl ; dx to scratch
0B0BB7             0124*  ; ; test dx for overflow
0B0BB7             0125*  ; 	ld de,0x007F00 ; max positive 16.8 value we can square without overflow
0B0BB7             0126*  ; 	ex de,hl
0B0BB7             0127*  ; 	sbc hl,de ; test for overflow
0B0BB7             0128*  ; 	push af ; carry indicates overflow
0B0BB7             0129*  ; compute dy = y1-y0
0B0BB7 AF          0130*      xor a ; clear carry
0B0BB8 FD E5       0131*      push iy ; move iy to hl via the stack
0B0BBA E1          0132*      pop hl ; hl = y1
0B0BBB ED 52       0133*      sbc hl,de ; hl = dy
0B0BBD 22 F3 0B 0B 0134*      ld (dy168),hl ; dy to scratch
0B0BC1             0135*  ; ; test dy for overflow
0B0BC1             0136*  ; 	ld de,0x007F00 ; max positive 16.8 value we can square without overflow
0B0BC1             0137*  ; 	ex de,hl
0B0BC1             0138*  ; 	sbc hl,de ; test for overflow
0B0BC1             0139*  ; 	push af ; carry indicates overflow
0B0BC1             0140*  ; compute dy^2
0B0BC1 2A F3 0B 0B 0141*  	ld hl,(dy168)
0B0BC5 CD 6D 07 0B 0142*      call abs_hlu  ; make dy positive so we can use unsigned multiply
0B0BC9             0143*      ; call hlu_div2 ; divide hlu by 2 to give us some headroom
0B0BC9 E5          0144*      push hl ; load hl/2 to bc via the stack
0B0BCA C1          0145*      pop bc ; bc = dy/2
0B0BCB EB          0146*      ex de,hl ; de = dy/2
0B0BCC CD B9 08 0B 0147*      call umul168 ; uh.l = dy^2/2
0B0BD0 E5          0148*      push hl ; dy^2/2 to the stack
0B0BD1             0149*  ; compute dx^2
0B0BD1 2A ED 0B 0B 0150*      ld hl,(dx168) ; get back dx
0B0BD5 CD 6D 07 0B 0151*      call abs_hlu  ; make dx positive so we can use unsigned multiply
0B0BD9             0152*      ; call hlu_div2 ; divide hlu by 2 to give us some headroom
0B0BD9 E5          0153*      push hl ; load hl/2 to bc via the stack
0B0BDA C1          0154*      pop bc ; bc = dx/2
0B0BDB EB          0155*      ex de,hl ; de = dx/2
0B0BDC CD B9 08 0B 0156*      call umul168 ; uh.l = dx^2/2
0B0BE0             0157*  ; commpute dy^2+dx^2
0B0BE0 D1          0158*      pop de ; get back dx^2/2
0B0BE1 19          0159*      add hl,de ; hl = dx^2/2+dy^2/2
0B0BE2             0160*  ; compute sqrt(dx^2/2+dy^2/2)
0B0BE2 CD 21 0A 0B 0161*      call sqrt168 ; uh.l = distance/2
0B0BE6             0162*      ; add hl,hl ; hl = distance
0B0BE6             0163*  ; ; check for overflow
0B0BE6             0164*  ; 	pop af ; get back the overflow flags
0B0BE6             0165*  ; 	sbc a,a ; will be -1 if overflow, 0 if not
0B0BE6             0166*  ; 	ld b,a ; save the overflow flag
0B0BE6             0167*  ; 	pop af ; get back the overflow flags
0B0BE6             0168*  ; 	sbc a,a ; will be -1 if overflow, 0 if not
0B0BE6             0169*  ; 	add a,b ; if a != 0 then we had overflow
0B0BE6             0170*  ;     ret z ; no overflow we're done
0B0BE6             0171*  ; @overflow:
0B0BE6             0172*  ; 	ld hl,0x7FFFFF ; max positive 16.8 fixed value indicates overflow
0B0BE6 C9          0173*  	ret
0B0BE7             0174*  @scratch: ds 6
0B0BED             0175*  dx168: ds 6
0B0BF3             0176*  dy168: ds 6
0B0BF9             0177*  
0B0BF9             0178*  ; atan2(ub.c,ud.e) --> uh.l
0B0BF9             0179*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0B0BF9             0180*  ;   whether inputs are integers or fractional doesn't matter
0B0BF9             0181*  ;   so long as the sign bit of the upper byte is correct
0B0BF9             0182*  ; output: uh.l is the 16.8 fixed angle in degrees 256
0B0BF9             0183*  ; angles are COMPASS HEADINGS based on
0B0BF9             0184*  ; screen coordinate conventions,where the y axis is flipped
0B0BF9             0185*  ; #E0 315      0       45 #20
0B0BF9             0186*  ;        -x,-y | +x,-y
0B0BF9             0187*  ; #C0 270------+------ 90 #40
0B0BF9             0188*  ;        -x,+y | +x,+y
0B0BF9             0189*  ; #A0 225   180 #80   135 #60
0B0BF9             0190*  atan2_168game:
0B0BF9             0191*  ; get signs and make everything positive
0B0BF9             0192*  ; get abs(x) and store its original sign
0B0BF9 C5          0193*      push bc
0B0BFA E1          0194*      pop hl
0B0BFB CD 6D 07 0B 0195*      call abs_hlu ; if x was negative this also sets the sign flag
0B0BFF E5          0196*      push hl ; store abs(x)
0B0C00 C1          0197*      pop bc ; bc = abs(x)
0B0C01 F5          0198*      push af ; store sign of x
0B0C02             0199*  ; get abs(y) and store its original sign
0B0C02 EB          0200*      ex de,hl ; hl = y
0B0C03 CD 6D 07 0B 0201*      call abs_hlu ; if y was negative this also sets the sign flag
0B0C07 EB          0202*      ex de,hl ; de = abs(y)
0B0C08 F5          0203*      push af ; store sign of y
0B0C09             0204*  ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
0B0C09             0205*  ; this ensures that our lookup value is between 0 and 1 inclusive
0B0C09 AF          0206*      xor a ; clear the carry flag
0B0C0A D5          0207*      push de
0B0C0B E1          0208*      pop hl
0B0C0C ED 42       0209*      sbc hl,bc
0B0C0E F5          0210*      push af ; save sign of de - bc
0B0C0F F2 18 0C 0B 0211*      jp p,@1 ; bc <= de, so we skip ahead
0B0C13             0212*  ; otherwise we swap bc and de
0B0C13 C5          0213*      push bc
0B0C14 E1          0214*      pop hl
0B0C15 EB          0215*      ex de,hl
0B0C16 E5          0216*      push hl
0B0C17 C1          0217*      pop bc
0B0C18             0218*  @1:
0B0C18             0219*  ; now we're ready to snag our preliminary result
0B0C18 CD 86 0C 0B 0220*      call atan_168game ; uh.l comes back with prelim result
0B0C1C             0221*  ; now we adjust uh.l based on sign of de - bc
0B0C1C F1          0222*      pop af
0B0C1D F2 29 0C 0B 0223*      jp p,@2 ; bc <= de,so we skip ahead
0B0C21 EB          0224*      ex de,hl
0B0C22 21 00 40 00 0225*      ld hl,0x004000 ; 90 degrees
0B0C26 AF          0226*      xor a ; clear the carry flag
0B0C27 ED 52       0227*      sbc hl,de ; subtract result from 90 degrees
0B0C29             0228*      ; ld de,0 ; prep to clear hlu
0B0C29             0229*      ; ld d,h
0B0C29             0230*      ; ld e,l
0B0C29             0231*      ; ex de,hl ; now we have 0 <= uh.l < 256 in 16.8 fixed format
0B0C29             0232*      ; fall through
0B0C29             0233*  @2:
0B0C29             0234*  ; now the fun part of adjusting the result
0B0C29             0235*  ; based on which quadrant (x,y) is in
0B0C29             0236*  ; #E0 315      0       45 #20
0B0C29             0237*  ;        -x,-y | +x,-y
0B0C29             0238*  ; #C0 270------+------ 90 #40
0B0C29             0239*  ;        -x,+y | +x,+y
0B0C29             0240*  ; #A0 225   180 #80   135 #60
0B0C29 F1          0241*      pop af ; sign of y
0B0C2A CA 67 0C 0B 0242*      jp z,@y_zero
0B0C2E F2 47 0C 0B 0243*      jp p,@y_pos
0B0C32             0244*  ; y neg,check x
0B0C32 F1          0245*      pop af ; sign of x
0B0C33 CA 41 0C 0B 0246*      jp z,@y_neg_x_zero
0B0C37 F2 46 0C 0B 0247*      jp p,@y_neg_x_pos
0B0C3B             0248*  ; y neg,x neg
0B0C3B             0249*  ; angle is 270-360
0B0C3B             0250*  ; negating the intermediate does the trick
0B0C3B CD 7D 07 0B 0251*      call neg_hlu
0B0C3F 18 31       0252*      jr @zero_hlu
0B0C41             0253*  
0B0C41             0254*  @y_neg_x_zero:
0B0C41             0255*  ; y neg,x zero
0B0C41             0256*  ; angle is 0
0B0C41 21 00 00 00 0257*      ld hl,0
0B0C45 C9          0258*      ret
0B0C46             0259*  @y_neg_x_pos:
0B0C46             0260*  ; y neg,x pos
0B0C46             0261*  ; angle is 0 to 90
0B0C46             0262*  ; so we're good
0B0C46 C9          0263*      ret
0B0C47             0264*  
0B0C47             0265*  @y_pos:
0B0C47 F1          0266*      pop af ; sign of x
0B0C48 CA 57 0C 0B 0267*      jp z,@y_pos_x_zero
0B0C4C F2 5C 0C 0B 0268*      jp p,@y_pos_x_pos
0B0C50             0269*  ; y pos,x neg
0B0C50             0270*  ; angle is 180-270
0B0C50             0271*  ; so we add 180 to intermediate
0B0C50 11 00 80 00 0272*      ld de,0x008000
0B0C54 19          0273*      add hl,de
0B0C55 18 1B       0274*      jr @zero_hlu
0B0C57             0275*  @y_pos_x_zero:
0B0C57             0276*  ; y pos,x zero
0B0C57             0277*  ; angle is 180
0B0C57 21 00 80 00 0278*      ld hl,0x008000
0B0C5B C9          0279*      ret
0B0C5C             0280*  @y_pos_x_pos:
0B0C5C             0281*  ; y pos,x pos
0B0C5C             0282*  ; angle is 90-180
0B0C5C             0283*  ; neg the intermediate and add 180 degrees
0B0C5C CD 7D 07 0B 0284*      call neg_hlu
0B0C60 11 00 80 00 0285*      ld de,0x008000
0B0C64 19          0286*      add hl,de
0B0C65 18 0B       0287*      jr @zero_hlu
0B0C67             0288*  
0B0C67             0289*  @y_zero:
0B0C67 F1          0290*      pop af ; sign of x
0B0C68 FA 6D 0C 0B 0291*      jp m,@y_zero_x_neg
0B0C6C             0292*  ; y zero,x pos
0B0C6C             0293*  ; angle is 90,nothing to do
0B0C6C C9          0294*      ret
0B0C6D             0295*  @y_zero_x_neg:
0B0C6D             0296*  ; y zero ,x neg
0B0C6D             0297*  ; angle is 270
0B0C6D 21 00 C0 00 0298*      ld hl,0x00C000
0B0C71 C9          0299*      ret
0B0C72             0300*  @zero_hlu:
0B0C72 AF          0301*      xor a
0B0C73 22 80 0C 0B 0302*      ld (@scratch),hl
0B0C77 32 82 0C 0B 0303*      ld (@scratch+2),a
0B0C7B 2A 80 0C 0B 0304*      ld hl,(@scratch)
0B0C7F C9          0305*      ret
0B0C80             0306*  @scratch: ds 6
0B0C86             0307*  
0B0C86             0308*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0B0C86             0309*  ; output: uh.l is the 16.8 fixed format angle
0B0C86             0310*  ; destroys: a,hl,bc,de
0B0C86             0311*  ; the following note was written by github copilot:
0B0C86             0312*  ; note: this routine is a bit of a hack
0B0C86             0313*  ;      but it works
0B0C86             0314*  ;      and it's fast
0B0C86             0315*  ;      and it's small
0B0C86             0316*  ;      and it's accurate
0B0C86             0317*  ;      and it's easy to understand
0B0C86             0318*  ;      and it's easy to modify
0B0C86             0319*  ;      and it's easy to use
0B0C86             0320*  ;      and it's easy to remember
0B0C86             0321*  ;      and it's easy to love
0B0C86             0322*  ;      and it's easy to hate
0B0C86             0323*  ;      and it's easy to ignore
0B0C86             0324*  ;      and it's easy to forget
0B0C86             0325*  ;      and it's easy to remember
0B0C86             0326*  ;      and it's easy to forget
0B0C86             0327*  ;      and it's easy to remember
0B0C86             0328*  ;      (ok the bot is stuck in a loop)
0B0C86             0329*  ; REAL NOTE: only works for angles from 0 to 45 degrees
0B0C86             0330*  ;   use atan2_168 (which calls this proc) to handle the full 360 degrees
0B0C86             0331*  atan_168game:
0B0C86             0332*  ; because we use compass headings instead of geometric angles
0B0C86             0333*  ; we compute dx/dy which is 1/tan(theta) in the maths world
0B0C86             0334*  ; we can do faster unsigned division here because we know dx and dy are positive
0B0C86 CD 1C 09 0B 0335*  	call udiv168 ; uh.l = dx/dy
0B0C8A             0336*  ; ; TODO: IMPLEMENT THIS, RIGHT NOW IS IS BUGGED
0B0C8A             0337*  ; ; test uh.l for 0
0B0C8A             0338*  ;     add hl,de
0B0C8A             0339*  ;     or a
0B0C8A             0340*  ;     sbc hl,de
0B0C8A             0341*  ;     jr z,@is_zero
0B0C8A             0342*  ; ; test uh.l for 1
0B0C8A             0343*  ;     xor a ; clear carry
0B0C8A             0344*  ;     ex de,hl
0B0C8A             0345*  ;     ld hl,0x000100 ; 1 in 16.8 fixed format
0B0C8A             0346*  ;     sbc hl,de
0B0C8A             0347*  ;     jr z,@is_45
0B0C8A             0348*  ; ; END TODO
0B0C8A             0349*  
0B0C8A             0350*  ; no special cases so we move on
0B0C8A             0351*  ; l contains the fractional portion of tan(uh.l)
0B0C8A             0352*  ; we multiply it by three to get our lookup table index
0B0C8A 26 03       0353*      ld h,3
0B0C8C ED 6C       0354*      mlt hl ; gosh that is handy
0B0C8E 11 00 00 00 0355*      ld de,0 ; clear deu
0B0C92 54          0356*      ld d,h ; copy hl to de
0B0C93 5D          0357*      ld e,l ; de contains our index
0B0C94 21 A6 0F 0B 0358*      ld hl,atan_lut_168 ; grab the lut address
0B0C98 19          0359*      add hl,de ; bump hl by the index
0B0C99 ED 27       0360*      ld hl,(hl) ; don't try this on a z80!
0B0C9B C9          0361*      ret ; and out
0B0C9C             0362*  @is_45:
0B0C9C 21 00 20 00 0363*      ld hl,0x002000 ; 45 degrees decimal
0B0CA0 C9          0364*      ret
0B0CA1             0365*  ; for the case tan(0)
0B0CA1             0366*  @is_zero:
0B0CA1 21 00 00 00 0367*      ld hl,0x000000
0B0CA5 C9          0368*      ret
0B0CA6             0369*  
0B0CA6             0370*  
0B0CA6             0371*  sin_lut_168:
0B0CA6 00 00 00    0372*  	dl 0x000000 ; 0.000 00, 0.000
0B0CA9 06 00 00    0373*  	dl 0x000006 ; 1.406 01, 0.025
0B0CAC 0C 00 00    0374*  	dl 0x00000C ; 2.813 02, 0.049
0B0CAF 12 00 00    0375*  	dl 0x000012 ; 4.219 03, 0.074
0B0CB2 19 00 00    0376*  	dl 0x000019 ; 5.625 04, 0.098
0B0CB5 1F 00 00    0377*  	dl 0x00001F ; 7.031 05, 0.122
0B0CB8 25 00 00    0378*  	dl 0x000025 ; 8.438 06, 0.147
0B0CBB 2B 00 00    0379*  	dl 0x00002B ; 9.844 07, 0.171
0B0CBE 31 00 00    0380*  	dl 0x000031 ; 11.250 08, 0.195
0B0CC1 38 00 00    0381*  	dl 0x000038 ; 12.656 09, 0.219
0B0CC4 3E 00 00    0382*  	dl 0x00003E ; 14.063 0A, 0.243
0B0CC7 44 00 00    0383*  	dl 0x000044 ; 15.469 0B, 0.267
0B0CCA 4A 00 00    0384*  	dl 0x00004A ; 16.875 0C, 0.290
0B0CCD 50 00 00    0385*  	dl 0x000050 ; 18.281 0D, 0.314
0B0CD0 56 00 00    0386*  	dl 0x000056 ; 19.688 0E, 0.337
0B0CD3 5C 00 00    0387*  	dl 0x00005C ; 21.094 0F, 0.360
0B0CD6 61 00 00    0388*  	dl 0x000061 ; 22.500 10, 0.383
0B0CD9 67 00 00    0389*  	dl 0x000067 ; 23.906 11, 0.405
0B0CDC 6D 00 00    0390*  	dl 0x00006D ; 25.313 12, 0.428
0B0CDF 73 00 00    0391*  	dl 0x000073 ; 26.719 13, 0.450
0B0CE2 78 00 00    0392*  	dl 0x000078 ; 28.125 14, 0.471
0B0CE5 7E 00 00    0393*  	dl 0x00007E ; 29.531 15, 0.493
0B0CE8 83 00 00    0394*  	dl 0x000083 ; 30.938 16, 0.514
0B0CEB 88 00 00    0395*  	dl 0x000088 ; 32.344 17, 0.535
0B0CEE 8E 00 00    0396*  	dl 0x00008E ; 33.750 18, 0.556
0B0CF1 93 00 00    0397*  	dl 0x000093 ; 35.156 19, 0.576
0B0CF4 98 00 00    0398*  	dl 0x000098 ; 36.563 1A, 0.596
0B0CF7 9D 00 00    0399*  	dl 0x00009D ; 37.969 1B, 0.615
0B0CFA A2 00 00    0400*  	dl 0x0000A2 ; 39.375 1C, 0.634
0B0CFD A7 00 00    0401*  	dl 0x0000A7 ; 40.781 1D, 0.653
0B0D00 AB 00 00    0402*  	dl 0x0000AB ; 42.188 1E, 0.672
0B0D03 B0 00 00    0403*  	dl 0x0000B0 ; 43.594 1F, 0.690
0B0D06 B5 00 00    0404*  	dl 0x0000B5 ; 45.000 20, 0.707
0B0D09 B9 00 00    0405*  	dl 0x0000B9 ; 46.406 21, 0.724
0B0D0C BD 00 00    0406*  	dl 0x0000BD ; 47.813 22, 0.741
0B0D0F C1 00 00    0407*  	dl 0x0000C1 ; 49.219 23, 0.757
0B0D12 C5 00 00    0408*  	dl 0x0000C5 ; 50.625 24, 0.773
0B0D15 C9 00 00    0409*  	dl 0x0000C9 ; 52.031 25, 0.788
0B0D18 CD 00 00    0410*  	dl 0x0000CD ; 53.438 26, 0.803
0B0D1B D1 00 00    0411*  	dl 0x0000D1 ; 54.844 27, 0.818
0B0D1E D4 00 00    0412*  	dl 0x0000D4 ; 56.250 28, 0.831
0B0D21 D8 00 00    0413*  	dl 0x0000D8 ; 57.656 29, 0.845
0B0D24 DB 00 00    0414*  	dl 0x0000DB ; 59.063 2A, 0.858
0B0D27 DE 00 00    0415*  	dl 0x0000DE ; 60.469 2B, 0.870
0B0D2A E1 00 00    0416*  	dl 0x0000E1 ; 61.875 2C, 0.882
0B0D2D E4 00 00    0417*  	dl 0x0000E4 ; 63.281 2D, 0.893
0B0D30 E7 00 00    0418*  	dl 0x0000E7 ; 64.688 2E, 0.904
0B0D33 EA 00 00    0419*  	dl 0x0000EA ; 66.094 2F, 0.914
0B0D36 EC 00 00    0420*  	dl 0x0000EC ; 67.500 30, 0.924
0B0D39 EE 00 00    0421*  	dl 0x0000EE ; 68.906 31, 0.933
0B0D3C F1 00 00    0422*  	dl 0x0000F1 ; 70.313 32, 0.942
0B0D3F F3 00 00    0423*  	dl 0x0000F3 ; 71.719 33, 0.950
0B0D42 F4 00 00    0424*  	dl 0x0000F4 ; 73.125 34, 0.957
0B0D45 F6 00 00    0425*  	dl 0x0000F6 ; 74.531 35, 0.964
0B0D48 F8 00 00    0426*  	dl 0x0000F8 ; 75.938 36, 0.970
0B0D4B F9 00 00    0427*  	dl 0x0000F9 ; 77.344 37, 0.976
0B0D4E FB 00 00    0428*  	dl 0x0000FB ; 78.750 38, 0.981
0B0D51 FC 00 00    0429*  	dl 0x0000FC ; 80.156 39, 0.985
0B0D54 FD 00 00    0430*  	dl 0x0000FD ; 81.563 3A, 0.989
0B0D57 FE 00 00    0431*  	dl 0x0000FE ; 82.969 3B, 0.992
0B0D5A FE 00 00    0432*  	dl 0x0000FE ; 84.375 3C, 0.995
0B0D5D FF 00 00    0433*  	dl 0x0000FF ; 85.781 3D, 0.997
0B0D60 FF 00 00    0434*  	dl 0x0000FF ; 87.188 3E, 0.999
0B0D63 FF 00 00    0435*  	dl 0x0000FF ; 88.594 3F, 1.000
0B0D66 00 01 00    0436*  	dl 0x000100 ; 90.000 40, 1.000
0B0D69 FF 00 00    0437*  	dl 0x0000FF ; 91.406 41, 1.000
0B0D6C FF 00 00    0438*  	dl 0x0000FF ; 92.813 42, 0.999
0B0D6F FF 00 00    0439*  	dl 0x0000FF ; 94.219 43, 0.997
0B0D72 FE 00 00    0440*  	dl 0x0000FE ; 95.625 44, 0.995
0B0D75 FE 00 00    0441*  	dl 0x0000FE ; 97.031 45, 0.992
0B0D78 FD 00 00    0442*  	dl 0x0000FD ; 98.438 46, 0.989
0B0D7B FC 00 00    0443*  	dl 0x0000FC ; 99.844 47, 0.985
0B0D7E FB 00 00    0444*  	dl 0x0000FB ; 101.250 48, 0.981
0B0D81 F9 00 00    0445*  	dl 0x0000F9 ; 102.656 49, 0.976
0B0D84 F8 00 00    0446*  	dl 0x0000F8 ; 104.063 4A, 0.970
0B0D87 F6 00 00    0447*  	dl 0x0000F6 ; 105.469 4B, 0.964
0B0D8A F4 00 00    0448*  	dl 0x0000F4 ; 106.875 4C, 0.957
0B0D8D F3 00 00    0449*  	dl 0x0000F3 ; 108.281 4D, 0.950
0B0D90 F1 00 00    0450*  	dl 0x0000F1 ; 109.688 4E, 0.942
0B0D93 EE 00 00    0451*  	dl 0x0000EE ; 111.094 4F, 0.933
0B0D96 EC 00 00    0452*  	dl 0x0000EC ; 112.500 50, 0.924
0B0D99 EA 00 00    0453*  	dl 0x0000EA ; 113.906 51, 0.914
0B0D9C E7 00 00    0454*  	dl 0x0000E7 ; 115.313 52, 0.904
0B0D9F E4 00 00    0455*  	dl 0x0000E4 ; 116.719 53, 0.893
0B0DA2 E1 00 00    0456*  	dl 0x0000E1 ; 118.125 54, 0.882
0B0DA5 DE 00 00    0457*  	dl 0x0000DE ; 119.531 55, 0.870
0B0DA8 DB 00 00    0458*  	dl 0x0000DB ; 120.938 56, 0.858
0B0DAB D8 00 00    0459*  	dl 0x0000D8 ; 122.344 57, 0.845
0B0DAE D4 00 00    0460*  	dl 0x0000D4 ; 123.750 58, 0.831
0B0DB1 D1 00 00    0461*  	dl 0x0000D1 ; 125.156 59, 0.818
0B0DB4 CD 00 00    0462*  	dl 0x0000CD ; 126.563 5A, 0.803
0B0DB7 C9 00 00    0463*  	dl 0x0000C9 ; 127.969 5B, 0.788
0B0DBA C5 00 00    0464*  	dl 0x0000C5 ; 129.375 5C, 0.773
0B0DBD C1 00 00    0465*  	dl 0x0000C1 ; 130.781 5D, 0.757
0B0DC0 BD 00 00    0466*  	dl 0x0000BD ; 132.188 5E, 0.741
0B0DC3 B9 00 00    0467*  	dl 0x0000B9 ; 133.594 5F, 0.724
0B0DC6 B5 00 00    0468*  	dl 0x0000B5 ; 135.000 60, 0.707
0B0DC9 B0 00 00    0469*  	dl 0x0000B0 ; 136.406 61, 0.690
0B0DCC AB 00 00    0470*  	dl 0x0000AB ; 137.813 62, 0.672
0B0DCF A7 00 00    0471*  	dl 0x0000A7 ; 139.219 63, 0.653
0B0DD2 A2 00 00    0472*  	dl 0x0000A2 ; 140.625 64, 0.634
0B0DD5 9D 00 00    0473*  	dl 0x00009D ; 142.031 65, 0.615
0B0DD8 98 00 00    0474*  	dl 0x000098 ; 143.438 66, 0.596
0B0DDB 93 00 00    0475*  	dl 0x000093 ; 144.844 67, 0.576
0B0DDE 8E 00 00    0476*  	dl 0x00008E ; 146.250 68, 0.556
0B0DE1 88 00 00    0477*  	dl 0x000088 ; 147.656 69, 0.535
0B0DE4 83 00 00    0478*  	dl 0x000083 ; 149.063 6A, 0.514
0B0DE7 7E 00 00    0479*  	dl 0x00007E ; 150.469 6B, 0.493
0B0DEA 78 00 00    0480*  	dl 0x000078 ; 151.875 6C, 0.471
0B0DED 73 00 00    0481*  	dl 0x000073 ; 153.281 6D, 0.450
0B0DF0 6D 00 00    0482*  	dl 0x00006D ; 154.688 6E, 0.428
0B0DF3 67 00 00    0483*  	dl 0x000067 ; 156.094 6F, 0.405
0B0DF6 61 00 00    0484*  	dl 0x000061 ; 157.500 70, 0.383
0B0DF9 5C 00 00    0485*  	dl 0x00005C ; 158.906 71, 0.360
0B0DFC 56 00 00    0486*  	dl 0x000056 ; 160.313 72, 0.337
0B0DFF 50 00 00    0487*  	dl 0x000050 ; 161.719 73, 0.314
0B0E02 4A 00 00    0488*  	dl 0x00004A ; 163.125 74, 0.290
0B0E05 44 00 00    0489*  	dl 0x000044 ; 164.531 75, 0.267
0B0E08 3E 00 00    0490*  	dl 0x00003E ; 165.938 76, 0.243
0B0E0B 38 00 00    0491*  	dl 0x000038 ; 167.344 77, 0.219
0B0E0E 31 00 00    0492*  	dl 0x000031 ; 168.750 78, 0.195
0B0E11 2B 00 00    0493*  	dl 0x00002B ; 170.156 79, 0.171
0B0E14 25 00 00    0494*  	dl 0x000025 ; 171.563 7A, 0.147
0B0E17 1F 00 00    0495*  	dl 0x00001F ; 172.969 7B, 0.122
0B0E1A 19 00 00    0496*  	dl 0x000019 ; 174.375 7C, 0.098
0B0E1D 12 00 00    0497*  	dl 0x000012 ; 175.781 7D, 0.074
0B0E20 0C 00 00    0498*  	dl 0x00000C ; 177.188 7E, 0.049
0B0E23 06 00 00    0499*  	dl 0x000006 ; 178.594 7F, 0.025
0B0E26 00 00 00    0500*  	dl 0x000000 ; 180.000 80, 0.000
0B0E29 FA FF FF    0501*  	dl 0xFFFFFA ; 181.406 81, -0.025
0B0E2C F4 FF FF    0502*  	dl 0xFFFFF4 ; 182.813 82, -0.049
0B0E2F EE FF FF    0503*  	dl 0xFFFFEE ; 184.219 83, -0.074
0B0E32 E7 FF FF    0504*  	dl 0xFFFFE7 ; 185.625 84, -0.098
0B0E35 E1 FF FF    0505*  	dl 0xFFFFE1 ; 187.031 85, -0.122
0B0E38 DB FF FF    0506*  	dl 0xFFFFDB ; 188.438 86, -0.147
0B0E3B D5 FF FF    0507*  	dl 0xFFFFD5 ; 189.844 87, -0.171
0B0E3E CF FF FF    0508*  	dl 0xFFFFCF ; 191.250 88, -0.195
0B0E41 C8 FF FF    0509*  	dl 0xFFFFC8 ; 192.656 89, -0.219
0B0E44 C2 FF FF    0510*  	dl 0xFFFFC2 ; 194.063 8A, -0.243
0B0E47 BC FF FF    0511*  	dl 0xFFFFBC ; 195.469 8B, -0.267
0B0E4A B6 FF FF    0512*  	dl 0xFFFFB6 ; 196.875 8C, -0.290
0B0E4D B0 FF FF    0513*  	dl 0xFFFFB0 ; 198.281 8D, -0.314
0B0E50 AA FF FF    0514*  	dl 0xFFFFAA ; 199.688 8E, -0.337
0B0E53 A4 FF FF    0515*  	dl 0xFFFFA4 ; 201.094 8F, -0.360
0B0E56 9F FF FF    0516*  	dl 0xFFFF9F ; 202.500 90, -0.383
0B0E59 99 FF FF    0517*  	dl 0xFFFF99 ; 203.906 91, -0.405
0B0E5C 93 FF FF    0518*  	dl 0xFFFF93 ; 205.313 92, -0.428
0B0E5F 8D FF FF    0519*  	dl 0xFFFF8D ; 206.719 93, -0.450
0B0E62 88 FF FF    0520*  	dl 0xFFFF88 ; 208.125 94, -0.471
0B0E65 82 FF FF    0521*  	dl 0xFFFF82 ; 209.531 95, -0.493
0B0E68 7D FF FF    0522*  	dl 0xFFFF7D ; 210.938 96, -0.514
0B0E6B 78 FF FF    0523*  	dl 0xFFFF78 ; 212.344 97, -0.535
0B0E6E 72 FF FF    0524*  	dl 0xFFFF72 ; 213.750 98, -0.556
0B0E71 6D FF FF    0525*  	dl 0xFFFF6D ; 215.156 99, -0.576
0B0E74 68 FF FF    0526*  	dl 0xFFFF68 ; 216.563 9A, -0.596
0B0E77 63 FF FF    0527*  	dl 0xFFFF63 ; 217.969 9B, -0.615
0B0E7A 5E FF FF    0528*  	dl 0xFFFF5E ; 219.375 9C, -0.634
0B0E7D 59 FF FF    0529*  	dl 0xFFFF59 ; 220.781 9D, -0.653
0B0E80 55 FF FF    0530*  	dl 0xFFFF55 ; 222.188 9E, -0.672
0B0E83 50 FF FF    0531*  	dl 0xFFFF50 ; 223.594 9F, -0.690
0B0E86 4B FF FF    0532*  	dl 0xFFFF4B ; 225.000 A0, -0.707
0B0E89 47 FF FF    0533*  	dl 0xFFFF47 ; 226.406 A1, -0.724
0B0E8C 43 FF FF    0534*  	dl 0xFFFF43 ; 227.813 A2, -0.741
0B0E8F 3F FF FF    0535*  	dl 0xFFFF3F ; 229.219 A3, -0.757
0B0E92 3B FF FF    0536*  	dl 0xFFFF3B ; 230.625 A4, -0.773
0B0E95 37 FF FF    0537*  	dl 0xFFFF37 ; 232.031 A5, -0.788
0B0E98 33 FF FF    0538*  	dl 0xFFFF33 ; 233.438 A6, -0.803
0B0E9B 2F FF FF    0539*  	dl 0xFFFF2F ; 234.844 A7, -0.818
0B0E9E 2C FF FF    0540*  	dl 0xFFFF2C ; 236.250 A8, -0.831
0B0EA1 28 FF FF    0541*  	dl 0xFFFF28 ; 237.656 A9, -0.845
0B0EA4 25 FF FF    0542*  	dl 0xFFFF25 ; 239.063 AA, -0.858
0B0EA7 22 FF FF    0543*  	dl 0xFFFF22 ; 240.469 AB, -0.870
0B0EAA 1F FF FF    0544*  	dl 0xFFFF1F ; 241.875 AC, -0.882
0B0EAD 1C FF FF    0545*  	dl 0xFFFF1C ; 243.281 AD, -0.893
0B0EB0 19 FF FF    0546*  	dl 0xFFFF19 ; 244.688 AE, -0.904
0B0EB3 16 FF FF    0547*  	dl 0xFFFF16 ; 246.094 AF, -0.914
0B0EB6 14 FF FF    0548*  	dl 0xFFFF14 ; 247.500 B0, -0.924
0B0EB9 12 FF FF    0549*  	dl 0xFFFF12 ; 248.906 B1, -0.933
0B0EBC 0F FF FF    0550*  	dl 0xFFFF0F ; 250.313 B2, -0.942
0B0EBF 0D FF FF    0551*  	dl 0xFFFF0D ; 251.719 B3, -0.950
0B0EC2 0C FF FF    0552*  	dl 0xFFFF0C ; 253.125 B4, -0.957
0B0EC5 0A FF FF    0553*  	dl 0xFFFF0A ; 254.531 B5, -0.964
0B0EC8 08 FF FF    0554*  	dl 0xFFFF08 ; 255.938 B6, -0.970
0B0ECB 07 FF FF    0555*  	dl 0xFFFF07 ; 257.344 B7, -0.976
0B0ECE 05 FF FF    0556*  	dl 0xFFFF05 ; 258.750 B8, -0.981
0B0ED1 04 FF FF    0557*  	dl 0xFFFF04 ; 260.156 B9, -0.985
0B0ED4 03 FF FF    0558*  	dl 0xFFFF03 ; 261.563 BA, -0.989
0B0ED7 02 FF FF    0559*  	dl 0xFFFF02 ; 262.969 BB, -0.992
0B0EDA 02 FF FF    0560*  	dl 0xFFFF02 ; 264.375 BC, -0.995
0B0EDD 01 FF FF    0561*  	dl 0xFFFF01 ; 265.781 BD, -0.997
0B0EE0 01 FF FF    0562*  	dl 0xFFFF01 ; 267.188 BE, -0.999
0B0EE3 01 FF FF    0563*  	dl 0xFFFF01 ; 268.594 BF, -1.000
0B0EE6 00 FF FF    0564*  	dl 0xFFFF00 ; 270.000 C0, -1.000
0B0EE9 01 FF FF    0565*  	dl 0xFFFF01 ; 271.406 C1, -1.000
0B0EEC 01 FF FF    0566*  	dl 0xFFFF01 ; 272.813 C2, -0.999
0B0EEF 01 FF FF    0567*  	dl 0xFFFF01 ; 274.219 C3, -0.997
0B0EF2 02 FF FF    0568*  	dl 0xFFFF02 ; 275.625 C4, -0.995
0B0EF5 02 FF FF    0569*  	dl 0xFFFF02 ; 277.031 C5, -0.992
0B0EF8 03 FF FF    0570*  	dl 0xFFFF03 ; 278.438 C6, -0.989
0B0EFB 04 FF FF    0571*  	dl 0xFFFF04 ; 279.844 C7, -0.985
0B0EFE 05 FF FF    0572*  	dl 0xFFFF05 ; 281.250 C8, -0.981
0B0F01 07 FF FF    0573*  	dl 0xFFFF07 ; 282.656 C9, -0.976
0B0F04 08 FF FF    0574*  	dl 0xFFFF08 ; 284.063 CA, -0.970
0B0F07 0A FF FF    0575*  	dl 0xFFFF0A ; 285.469 CB, -0.964
0B0F0A 0C FF FF    0576*  	dl 0xFFFF0C ; 286.875 CC, -0.957
0B0F0D 0D FF FF    0577*  	dl 0xFFFF0D ; 288.281 CD, -0.950
0B0F10 0F FF FF    0578*  	dl 0xFFFF0F ; 289.688 CE, -0.942
0B0F13 12 FF FF    0579*  	dl 0xFFFF12 ; 291.094 CF, -0.933
0B0F16 14 FF FF    0580*  	dl 0xFFFF14 ; 292.500 D0, -0.924
0B0F19 16 FF FF    0581*  	dl 0xFFFF16 ; 293.906 D1, -0.914
0B0F1C 19 FF FF    0582*  	dl 0xFFFF19 ; 295.313 D2, -0.904
0B0F1F 1C FF FF    0583*  	dl 0xFFFF1C ; 296.719 D3, -0.893
0B0F22 1F FF FF    0584*  	dl 0xFFFF1F ; 298.125 D4, -0.882
0B0F25 22 FF FF    0585*  	dl 0xFFFF22 ; 299.531 D5, -0.870
0B0F28 25 FF FF    0586*  	dl 0xFFFF25 ; 300.938 D6, -0.858
0B0F2B 28 FF FF    0587*  	dl 0xFFFF28 ; 302.344 D7, -0.845
0B0F2E 2C FF FF    0588*  	dl 0xFFFF2C ; 303.750 D8, -0.831
0B0F31 2F FF FF    0589*  	dl 0xFFFF2F ; 305.156 D9, -0.818
0B0F34 33 FF FF    0590*  	dl 0xFFFF33 ; 306.563 DA, -0.803
0B0F37 37 FF FF    0591*  	dl 0xFFFF37 ; 307.969 DB, -0.788
0B0F3A 3B FF FF    0592*  	dl 0xFFFF3B ; 309.375 DC, -0.773
0B0F3D 3F FF FF    0593*  	dl 0xFFFF3F ; 310.781 DD, -0.757
0B0F40 43 FF FF    0594*  	dl 0xFFFF43 ; 312.188 DE, -0.741
0B0F43 47 FF FF    0595*  	dl 0xFFFF47 ; 313.594 DF, -0.724
0B0F46 4B FF FF    0596*  	dl 0xFFFF4B ; 315.000 E0, -0.707
0B0F49 50 FF FF    0597*  	dl 0xFFFF50 ; 316.406 E1, -0.690
0B0F4C 55 FF FF    0598*  	dl 0xFFFF55 ; 317.813 E2, -0.672
0B0F4F 59 FF FF    0599*  	dl 0xFFFF59 ; 319.219 E3, -0.653
0B0F52 5E FF FF    0600*  	dl 0xFFFF5E ; 320.625 E4, -0.634
0B0F55 63 FF FF    0601*  	dl 0xFFFF63 ; 322.031 E5, -0.615
0B0F58 68 FF FF    0602*  	dl 0xFFFF68 ; 323.438 E6, -0.596
0B0F5B 6D FF FF    0603*  	dl 0xFFFF6D ; 324.844 E7, -0.576
0B0F5E 72 FF FF    0604*  	dl 0xFFFF72 ; 326.250 E8, -0.556
0B0F61 78 FF FF    0605*  	dl 0xFFFF78 ; 327.656 E9, -0.535
0B0F64 7D FF FF    0606*  	dl 0xFFFF7D ; 329.063 EA, -0.514
0B0F67 82 FF FF    0607*  	dl 0xFFFF82 ; 330.469 EB, -0.493
0B0F6A 88 FF FF    0608*  	dl 0xFFFF88 ; 331.875 EC, -0.471
0B0F6D 8D FF FF    0609*  	dl 0xFFFF8D ; 333.281 ED, -0.450
0B0F70 93 FF FF    0610*  	dl 0xFFFF93 ; 334.688 EE, -0.428
0B0F73 99 FF FF    0611*  	dl 0xFFFF99 ; 336.094 EF, -0.405
0B0F76 9F FF FF    0612*  	dl 0xFFFF9F ; 337.500 F0, -0.383
0B0F79 A4 FF FF    0613*  	dl 0xFFFFA4 ; 338.906 F1, -0.360
0B0F7C AA FF FF    0614*  	dl 0xFFFFAA ; 340.313 F2, -0.337
0B0F7F B0 FF FF    0615*  	dl 0xFFFFB0 ; 341.719 F3, -0.314
0B0F82 B6 FF FF    0616*  	dl 0xFFFFB6 ; 343.125 F4, -0.290
0B0F85 BC FF FF    0617*  	dl 0xFFFFBC ; 344.531 F5, -0.267
0B0F88 C2 FF FF    0618*  	dl 0xFFFFC2 ; 345.938 F6, -0.243
0B0F8B C8 FF FF    0619*  	dl 0xFFFFC8 ; 347.344 F7, -0.219
0B0F8E CF FF FF    0620*  	dl 0xFFFFCF ; 348.750 F8, -0.195
0B0F91 D5 FF FF    0621*  	dl 0xFFFFD5 ; 350.156 F9, -0.171
0B0F94 DB FF FF    0622*  	dl 0xFFFFDB ; 351.563 FA, -0.147
0B0F97 E1 FF FF    0623*  	dl 0xFFFFE1 ; 352.969 FB, -0.122
0B0F9A E7 FF FF    0624*  	dl 0xFFFFE7 ; 354.375 FC, -0.098
0B0F9D EE FF FF    0625*  	dl 0xFFFFEE ; 355.781 FD, -0.074
0B0FA0 F4 FF FF    0626*  	dl 0xFFFFF4 ; 357.188 FE, -0.049
0B0FA3 FA FF FF    0627*  	dl 0xFFFFFA ; 358.594 FF, -0.025
0B0FA6             0628*  
0B0FA6             0629*  atan_lut_168:
0B0FA6 00 00 00    0630*  	dl 0x000000 ; 000000, 0.000
0B0FA9 28 00 00    0631*  	dl 0x000028 ; 000001, 0.224
0B0FAC 51 00 00    0632*  	dl 0x000051 ; 000002, 0.448
0B0FAF 7A 00 00    0633*  	dl 0x00007A ; 000003, 0.671
0B0FB2 A2 00 00    0634*  	dl 0x0000A2 ; 000004, 0.895
0B0FB5 CB 00 00    0635*  	dl 0x0000CB ; 000005, 1.119
0B0FB8 F4 00 00    0636*  	dl 0x0000F4 ; 000006, 1.343
0B0FBB 1D 01 00    0637*  	dl 0x00011D ; 000007, 1.566
0B0FBE 45 01 00    0638*  	dl 0x000145 ; 000008, 1.790
0B0FC1 6E 01 00    0639*  	dl 0x00016E ; 000009, 2.013
0B0FC4 97 01 00    0640*  	dl 0x000197 ; 00000A, 2.237
0B0FC7 BF 01 00    0641*  	dl 0x0001BF ; 00000B, 2.460
0B0FCA E8 01 00    0642*  	dl 0x0001E8 ; 00000C, 2.684
0B0FCD 11 02 00    0643*  	dl 0x000211 ; 00000D, 2.907
0B0FD0 39 02 00    0644*  	dl 0x000239 ; 00000E, 3.130
0B0FD3 62 02 00    0645*  	dl 0x000262 ; 00000F, 3.353
0B0FD6 8B 02 00    0646*  	dl 0x00028B ; 000010, 3.576
0B0FD9 B3 02 00    0647*  	dl 0x0002B3 ; 000011, 3.799
0B0FDC DC 02 00    0648*  	dl 0x0002DC ; 000012, 4.022
0B0FDF 04 03 00    0649*  	dl 0x000304 ; 000013, 4.245
0B0FE2 2D 03 00    0650*  	dl 0x00032D ; 000014, 4.467
0B0FE5 55 03 00    0651*  	dl 0x000355 ; 000015, 4.690
0B0FE8 7E 03 00    0652*  	dl 0x00037E ; 000016, 4.912
0B0FEB A6 03 00    0653*  	dl 0x0003A6 ; 000017, 5.134
0B0FEE CE 03 00    0654*  	dl 0x0003CE ; 000018, 5.356
0B0FF1 F7 03 00    0655*  	dl 0x0003F7 ; 000019, 5.578
0B0FF4 1F 04 00    0656*  	dl 0x00041F ; 00001A, 5.799
0B0FF7 48 04 00    0657*  	dl 0x000448 ; 00001B, 6.021
0B0FFA 70 04 00    0658*  	dl 0x000470 ; 00001C, 6.242
0B0FFD 98 04 00    0659*  	dl 0x000498 ; 00001D, 6.463
0B1000 C0 04 00    0660*  	dl 0x0004C0 ; 00001E, 6.684
0B1003 E8 04 00    0661*  	dl 0x0004E8 ; 00001F, 6.905
0B1006 11 05 00    0662*  	dl 0x000511 ; 000020, 7.125
0B1009 39 05 00    0663*  	dl 0x000539 ; 000021, 7.345
0B100C 61 05 00    0664*  	dl 0x000561 ; 000022, 7.565
0B100F 89 05 00    0665*  	dl 0x000589 ; 000023, 7.785
0B1012 B1 05 00    0666*  	dl 0x0005B1 ; 000024, 8.005
0B1015 D9 05 00    0667*  	dl 0x0005D9 ; 000025, 8.224
0B1018 01 06 00    0668*  	dl 0x000601 ; 000026, 8.443
0B101B 28 06 00    0669*  	dl 0x000628 ; 000027, 8.662
0B101E 50 06 00    0670*  	dl 0x000650 ; 000028, 8.881
0B1021 78 06 00    0671*  	dl 0x000678 ; 000029, 9.099
0B1024 A0 06 00    0672*  	dl 0x0006A0 ; 00002A, 9.317
0B1027 C7 06 00    0673*  	dl 0x0006C7 ; 00002B, 9.535
0B102A EF 06 00    0674*  	dl 0x0006EF ; 00002C, 9.752
0B102D 16 07 00    0675*  	dl 0x000716 ; 00002D, 9.970
0B1030 3E 07 00    0676*  	dl 0x00073E ; 00002E, 10.187
0B1033 65 07 00    0677*  	dl 0x000765 ; 00002F, 10.403
0B1036 8D 07 00    0678*  	dl 0x00078D ; 000030, 10.620
0B1039 B4 07 00    0679*  	dl 0x0007B4 ; 000031, 10.836
0B103C DB 07 00    0680*  	dl 0x0007DB ; 000032, 11.051
0B103F 03 08 00    0681*  	dl 0x000803 ; 000033, 11.267
0B1042 2A 08 00    0682*  	dl 0x00082A ; 000034, 11.482
0B1045 51 08 00    0683*  	dl 0x000851 ; 000035, 11.697
0B1048 78 08 00    0684*  	dl 0x000878 ; 000036, 11.911
0B104B 9F 08 00    0685*  	dl 0x00089F ; 000037, 12.125
0B104E C6 08 00    0686*  	dl 0x0008C6 ; 000038, 12.339
0B1051 ED 08 00    0687*  	dl 0x0008ED ; 000039, 12.553
0B1054 13 09 00    0688*  	dl 0x000913 ; 00003A, 12.766
0B1057 3A 09 00    0689*  	dl 0x00093A ; 00003B, 12.978
0B105A 61 09 00    0690*  	dl 0x000961 ; 00003C, 13.191
0B105D 87 09 00    0691*  	dl 0x000987 ; 00003D, 13.403
0B1060 AE 09 00    0692*  	dl 0x0009AE ; 00003E, 13.614
0B1063 D4 09 00    0693*  	dl 0x0009D4 ; 00003F, 13.825
0B1066 FB 09 00    0694*  	dl 0x0009FB ; 000040, 14.036
0B1069 21 0A 00    0695*  	dl 0x000A21 ; 000041, 14.247
0B106C 47 0A 00    0696*  	dl 0x000A47 ; 000042, 14.457
0B106F 6D 0A 00    0697*  	dl 0x000A6D ; 000043, 14.666
0B1072 94 0A 00    0698*  	dl 0x000A94 ; 000044, 14.876
0B1075 BA 0A 00    0699*  	dl 0x000ABA ; 000045, 15.085
0B1078 E0 0A 00    0700*  	dl 0x000AE0 ; 000046, 15.293
0B107B 05 0B 00    0701*  	dl 0x000B05 ; 000047, 15.501
0B107E 2B 0B 00    0702*  	dl 0x000B2B ; 000048, 15.709
0B1081 51 0B 00    0703*  	dl 0x000B51 ; 000049, 15.916
0B1084 77 0B 00    0704*  	dl 0x000B77 ; 00004A, 16.123
0B1087 9C 0B 00    0705*  	dl 0x000B9C ; 00004B, 16.329
0B108A C2 0B 00    0706*  	dl 0x000BC2 ; 00004C, 16.535
0B108D E7 0B 00    0707*  	dl 0x000BE7 ; 00004D, 16.740
0B1090 0C 0C 00    0708*  	dl 0x000C0C ; 00004E, 16.945
0B1093 32 0C 00    0709*  	dl 0x000C32 ; 00004F, 17.150
0B1096 57 0C 00    0710*  	dl 0x000C57 ; 000050, 17.354
0B1099 7C 0C 00    0711*  	dl 0x000C7C ; 000051, 17.558
0B109C A1 0C 00    0712*  	dl 0x000CA1 ; 000052, 17.761
0B109F C6 0C 00    0713*  	dl 0x000CC6 ; 000053, 17.964
0B10A2 EB 0C 00    0714*  	dl 0x000CEB ; 000054, 18.166
0B10A5 0F 0D 00    0715*  	dl 0x000D0F ; 000055, 18.368
0B10A8 34 0D 00    0716*  	dl 0x000D34 ; 000056, 18.569
0B10AB 58 0D 00    0717*  	dl 0x000D58 ; 000057, 18.770
0B10AE 7D 0D 00    0718*  	dl 0x000D7D ; 000058, 18.970
0B10B1 A1 0D 00    0719*  	dl 0x000DA1 ; 000059, 19.170
0B10B4 C6 0D 00    0720*  	dl 0x000DC6 ; 00005A, 19.370
0B10B7 EA 0D 00    0721*  	dl 0x000DEA ; 00005B, 19.569
0B10BA 0E 0E 00    0722*  	dl 0x000E0E ; 00005C, 19.767
0B10BD 32 0E 00    0723*  	dl 0x000E32 ; 00005D, 19.965
0B10C0 56 0E 00    0724*  	dl 0x000E56 ; 00005E, 20.163
0B10C3 7A 0E 00    0725*  	dl 0x000E7A ; 00005F, 20.360
0B10C6 9E 0E 00    0726*  	dl 0x000E9E ; 000060, 20.556
0B10C9 C1 0E 00    0727*  	dl 0x000EC1 ; 000061, 20.752
0B10CC E5 0E 00    0728*  	dl 0x000EE5 ; 000062, 20.947
0B10CF 08 0F 00    0729*  	dl 0x000F08 ; 000063, 21.142
0B10D2 2C 0F 00    0730*  	dl 0x000F2C ; 000064, 21.337
0B10D5 4F 0F 00    0731*  	dl 0x000F4F ; 000065, 21.531
0B10D8 72 0F 00    0732*  	dl 0x000F72 ; 000066, 21.724
0B10DB 95 0F 00    0733*  	dl 0x000F95 ; 000067, 21.917
0B10DE B8 0F 00    0734*  	dl 0x000FB8 ; 000068, 22.109
0B10E1 DB 0F 00    0735*  	dl 0x000FDB ; 000069, 22.301
0B10E4 FE 0F 00    0736*  	dl 0x000FFE ; 00006A, 22.493
0B10E7 21 10 00    0737*  	dl 0x001021 ; 00006B, 22.683
0B10EA 44 10 00    0738*  	dl 0x001044 ; 00006C, 22.874
0B10ED 66 10 00    0739*  	dl 0x001066 ; 00006D, 23.063
0B10F0 89 10 00    0740*  	dl 0x001089 ; 00006E, 23.253
0B10F3 AB 10 00    0741*  	dl 0x0010AB ; 00006F, 23.441
0B10F6 CD 10 00    0742*  	dl 0x0010CD ; 000070, 23.629
0B10F9 EF 10 00    0743*  	dl 0x0010EF ; 000071, 23.817
0B10FC 11 11 00    0744*  	dl 0x001111 ; 000072, 24.004
0B10FF 33 11 00    0745*  	dl 0x001133 ; 000073, 24.191
0B1102 55 11 00    0746*  	dl 0x001155 ; 000074, 24.376
0B1105 77 11 00    0747*  	dl 0x001177 ; 000075, 24.562
0B1108 99 11 00    0748*  	dl 0x001199 ; 000076, 24.747
0B110B BA 11 00    0749*  	dl 0x0011BA ; 000077, 24.931
0B110E DC 11 00    0750*  	dl 0x0011DC ; 000078, 25.115
0B1111 FD 11 00    0751*  	dl 0x0011FD ; 000079, 25.298
0B1114 1E 12 00    0752*  	dl 0x00121E ; 00007A, 25.481
0B1117 3F 12 00    0753*  	dl 0x00123F ; 00007B, 25.663
0B111A 60 12 00    0754*  	dl 0x001260 ; 00007C, 25.844
0B111D 81 12 00    0755*  	dl 0x001281 ; 00007D, 26.025
0B1120 A2 12 00    0756*  	dl 0x0012A2 ; 00007E, 26.206
0B1123 C3 12 00    0757*  	dl 0x0012C3 ; 00007F, 26.386
0B1126 E4 12 00    0758*  	dl 0x0012E4 ; 000080, 26.565
0B1129 04 13 00    0759*  	dl 0x001304 ; 000081, 26.744
0B112C 25 13 00    0760*  	dl 0x001325 ; 000082, 26.922
0B112F 45 13 00    0761*  	dl 0x001345 ; 000083, 27.100
0B1132 65 13 00    0762*  	dl 0x001365 ; 000084, 27.277
0B1135 85 13 00    0763*  	dl 0x001385 ; 000085, 27.453
0B1138 A5 13 00    0764*  	dl 0x0013A5 ; 000086, 27.629
0B113B C5 13 00    0765*  	dl 0x0013C5 ; 000087, 27.805
0B113E E5 13 00    0766*  	dl 0x0013E5 ; 000088, 27.979
0B1141 05 14 00    0767*  	dl 0x001405 ; 000089, 28.154
0B1144 24 14 00    0768*  	dl 0x001424 ; 00008A, 28.327
0B1147 44 14 00    0769*  	dl 0x001444 ; 00008B, 28.501
0B114A 63 14 00    0770*  	dl 0x001463 ; 00008C, 28.673
0B114D 83 14 00    0771*  	dl 0x001483 ; 00008D, 28.845
0B1150 A2 14 00    0772*  	dl 0x0014A2 ; 00008E, 29.017
0B1153 C1 14 00    0773*  	dl 0x0014C1 ; 00008F, 29.187
0B1156 E0 14 00    0774*  	dl 0x0014E0 ; 000090, 29.358
0B1159 FF 14 00    0775*  	dl 0x0014FF ; 000091, 29.527
0B115C 1E 15 00    0776*  	dl 0x00151E ; 000092, 29.697
0B115F 3C 15 00    0777*  	dl 0x00153C ; 000093, 29.865
0B1162 5B 15 00    0778*  	dl 0x00155B ; 000094, 30.033
0B1165 79 15 00    0779*  	dl 0x001579 ; 000095, 30.201
0B1168 98 15 00    0780*  	dl 0x001598 ; 000096, 30.368
0B116B B6 15 00    0781*  	dl 0x0015B6 ; 000097, 30.534
0B116E D4 15 00    0782*  	dl 0x0015D4 ; 000098, 30.700
0B1171 F2 15 00    0783*  	dl 0x0015F2 ; 000099, 30.865
0B1174 10 16 00    0784*  	dl 0x001610 ; 00009A, 31.030
0B1177 2E 16 00    0785*  	dl 0x00162E ; 00009B, 31.194
0B117A 4C 16 00    0786*  	dl 0x00164C ; 00009C, 31.357
0B117D 6A 16 00    0787*  	dl 0x00166A ; 00009D, 31.520
0B1180 87 16 00    0788*  	dl 0x001687 ; 00009E, 31.682
0B1183 A5 16 00    0789*  	dl 0x0016A5 ; 00009F, 31.844
0B1186 C2 16 00    0790*  	dl 0x0016C2 ; 0000A0, 32.005
0B1189 DF 16 00    0791*  	dl 0x0016DF ; 0000A1, 32.166
0B118C FC 16 00    0792*  	dl 0x0016FC ; 0000A2, 32.326
0B118F 19 17 00    0793*  	dl 0x001719 ; 0000A3, 32.486
0B1192 36 17 00    0794*  	dl 0x001736 ; 0000A4, 32.645
0B1195 53 17 00    0795*  	dl 0x001753 ; 0000A5, 32.803
0B1198 70 17 00    0796*  	dl 0x001770 ; 0000A6, 32.961
0B119B 8C 17 00    0797*  	dl 0x00178C ; 0000A7, 33.118
0B119E A9 17 00    0798*  	dl 0x0017A9 ; 0000A8, 33.275
0B11A1 C5 17 00    0799*  	dl 0x0017C5 ; 0000A9, 33.431
0B11A4 E2 17 00    0800*  	dl 0x0017E2 ; 0000AA, 33.587
0B11A7 FE 17 00    0801*  	dl 0x0017FE ; 0000AB, 33.742
0B11AA 1A 18 00    0802*  	dl 0x00181A ; 0000AC, 33.896
0B11AD 36 18 00    0803*  	dl 0x001836 ; 0000AD, 34.050
0B11B0 52 18 00    0804*  	dl 0x001852 ; 0000AE, 34.203
0B11B3 6E 18 00    0805*  	dl 0x00186E ; 0000AF, 34.356
0B11B6 8A 18 00    0806*  	dl 0x00188A ; 0000B0, 34.509
0B11B9 A5 18 00    0807*  	dl 0x0018A5 ; 0000B1, 34.660
0B11BC C1 18 00    0808*  	dl 0x0018C1 ; 0000B2, 34.811
0B11BF DC 18 00    0809*  	dl 0x0018DC ; 0000B3, 34.962
0B11C2 F7 18 00    0810*  	dl 0x0018F7 ; 0000B4, 35.112
0B11C5 13 19 00    0811*  	dl 0x001913 ; 0000B5, 35.262
0B11C8 2E 19 00    0812*  	dl 0x00192E ; 0000B6, 35.410
0B11CB 49 19 00    0813*  	dl 0x001949 ; 0000B7, 35.559
0B11CE 64 19 00    0814*  	dl 0x001964 ; 0000B8, 35.707
0B11D1 7F 19 00    0815*  	dl 0x00197F ; 0000B9, 35.854
0B11D4 99 19 00    0816*  	dl 0x001999 ; 0000BA, 36.001
0B11D7 B4 19 00    0817*  	dl 0x0019B4 ; 0000BB, 36.147
0B11DA CE 19 00    0818*  	dl 0x0019CE ; 0000BC, 36.293
0B11DD E9 19 00    0819*  	dl 0x0019E9 ; 0000BD, 36.438
0B11E0 03 1A 00    0820*  	dl 0x001A03 ; 0000BE, 36.582
0B11E3 1D 1A 00    0821*  	dl 0x001A1D ; 0000BF, 36.726
0B11E6 37 1A 00    0822*  	dl 0x001A37 ; 0000C0, 36.870
0B11E9 51 1A 00    0823*  	dl 0x001A51 ; 0000C1, 37.013
0B11EC 6B 1A 00    0824*  	dl 0x001A6B ; 0000C2, 37.155
0B11EF 85 1A 00    0825*  	dl 0x001A85 ; 0000C3, 37.297
0B11F2 9F 1A 00    0826*  	dl 0x001A9F ; 0000C4, 37.439
0B11F5 B9 1A 00    0827*  	dl 0x001AB9 ; 0000C5, 37.579
0B11F8 D2 1A 00    0828*  	dl 0x001AD2 ; 0000C6, 37.720
0B11FB EC 1A 00    0829*  	dl 0x001AEC ; 0000C7, 37.859
0B11FE 05 1B 00    0830*  	dl 0x001B05 ; 0000C8, 37.999
0B1201 1E 1B 00    0831*  	dl 0x001B1E ; 0000C9, 38.137
0B1204 37 1B 00    0832*  	dl 0x001B37 ; 0000CA, 38.276
0B1207 50 1B 00    0833*  	dl 0x001B50 ; 0000CB, 38.413
0B120A 69 1B 00    0834*  	dl 0x001B69 ; 0000CC, 38.550
0B120D 82 1B 00    0835*  	dl 0x001B82 ; 0000CD, 38.687
0B1210 9B 1B 00    0836*  	dl 0x001B9B ; 0000CE, 38.823
0B1213 B4 1B 00    0837*  	dl 0x001BB4 ; 0000CF, 38.959
0B1216 CC 1B 00    0838*  	dl 0x001BCC ; 0000D0, 39.094
0B1219 E5 1B 00    0839*  	dl 0x001BE5 ; 0000D1, 39.228
0B121C FD 1B 00    0840*  	dl 0x001BFD ; 0000D2, 39.362
0B121F 16 1C 00    0841*  	dl 0x001C16 ; 0000D3, 39.496
0B1222 2E 1C 00    0842*  	dl 0x001C2E ; 0000D4, 39.629
0B1225 46 1C 00    0843*  	dl 0x001C46 ; 0000D5, 39.762
0B1228 5E 1C 00    0844*  	dl 0x001C5E ; 0000D6, 39.894
0B122B 76 1C 00    0845*  	dl 0x001C76 ; 0000D7, 40.025
0B122E 8E 1C 00    0846*  	dl 0x001C8E ; 0000D8, 40.156
0B1231 A5 1C 00    0847*  	dl 0x001CA5 ; 0000D9, 40.286
0B1234 BD 1C 00    0848*  	dl 0x001CBD ; 0000DA, 40.416
0B1237 D5 1C 00    0849*  	dl 0x001CD5 ; 0000DB, 40.546
0B123A EC 1C 00    0850*  	dl 0x001CEC ; 0000DC, 40.675
0B123D 04 1D 00    0851*  	dl 0x001D04 ; 0000DD, 40.803
0B1240 1B 1D 00    0852*  	dl 0x001D1B ; 0000DE, 40.931
0B1243 32 1D 00    0853*  	dl 0x001D32 ; 0000DF, 41.059
0B1246 49 1D 00    0854*  	dl 0x001D49 ; 0000E0, 41.186
0B1249 60 1D 00    0855*  	dl 0x001D60 ; 0000E1, 41.312
0B124C 77 1D 00    0856*  	dl 0x001D77 ; 0000E2, 41.438
0B124F 8E 1D 00    0857*  	dl 0x001D8E ; 0000E3, 41.564
0B1252 A5 1D 00    0858*  	dl 0x001DA5 ; 0000E4, 41.689
0B1255 BB 1D 00    0859*  	dl 0x001DBB ; 0000E5, 41.814
0B1258 D2 1D 00    0860*  	dl 0x001DD2 ; 0000E6, 41.938
0B125B E9 1D 00    0861*  	dl 0x001DE9 ; 0000E7, 42.061
0B125E FF 1D 00    0862*  	dl 0x001DFF ; 0000E8, 42.184
0B1261 15 1E 00    0863*  	dl 0x001E15 ; 0000E9, 42.307
0B1264 2C 1E 00    0864*  	dl 0x001E2C ; 0000EA, 42.429
0B1267 42 1E 00    0865*  	dl 0x001E42 ; 0000EB, 42.551
0B126A 58 1E 00    0866*  	dl 0x001E58 ; 0000EC, 42.672
0B126D 6E 1E 00    0867*  	dl 0x001E6E ; 0000ED, 42.793
0B1270 84 1E 00    0868*  	dl 0x001E84 ; 0000EE, 42.913
0B1273 99 1E 00    0869*  	dl 0x001E99 ; 0000EF, 43.033
0B1276 AF 1E 00    0870*  	dl 0x001EAF ; 0000F0, 43.152
0B1279 C5 1E 00    0871*  	dl 0x001EC5 ; 0000F1, 43.271
0B127C DA 1E 00    0872*  	dl 0x001EDA ; 0000F2, 43.390
0B127F F0 1E 00    0873*  	dl 0x001EF0 ; 0000F3, 43.508
0B1282 05 1F 00    0874*  	dl 0x001F05 ; 0000F4, 43.625
0B1285 1B 1F 00    0875*  	dl 0x001F1B ; 0000F5, 43.742
0B1288 30 1F 00    0876*  	dl 0x001F30 ; 0000F6, 43.859
0B128B 45 1F 00    0877*  	dl 0x001F45 ; 0000F7, 43.975
0B128E 5A 1F 00    0878*  	dl 0x001F5A ; 0000F8, 44.091
0B1291 6F 1F 00    0879*  	dl 0x001F6F ; 0000F9, 44.206
0B1294 84 1F 00    0880*  	dl 0x001F84 ; 0000FA, 44.321
0B1297 99 1F 00    0881*  	dl 0x001F99 ; 0000FB, 44.435
0B129A AD 1F 00    0882*  	dl 0x001FAD ; 0000FC, 44.549
0B129D C2 1F 00    0883*  	dl 0x001FC2 ; 0000FD, 44.662
0B12A0 D7 1F 00    0884*  	dl 0x001FD7 ; 0000FE, 44.775
0B12A3 EB 1F 00    0885*  	dl 0x001FEB ; 0000FF, 44.888
0B12A6 00 20 00    0886*  	dl 0x002000 ; 000100, 45.000 only needed for interpolation
0B12A9             0023       include "files.inc"
0B12A9             0001*  ; load to onboard 8k sram
0B12A9             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
0B12A9             0024       include "timer.inc"
0B12A9             0001*  ; Table 32. Timer Control Registers
0B12A9             0002*  ; this constant is the base address of the timer control registers
0B12A9             0003*  ; each timer takes three bytes:
0B12A9             0004*  ;   0: control register
0B12A9             0005*  ;   1: low byte of timer reset value
0B12A9             0006*  ;   2: high byte of timer reset value
0B12A9             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0B12A9             0008*  ; which correctly force the high and upper bytes of the address bus to zero
0B12A9             0009*  TMR_CTL:     equ 80h
0B12A9             0010*  
0B12A9             0011*  ; Timer Control Register Bit Definitions
0B12A9             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0B12A9             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
0B12A9             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0B12A9             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
0B12A9             0016*                              ; the TMRx_CTL register is read.
0B12A9             0017*  
0B12A9             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0B12A9             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0B12A9             0020*  
0B12A9             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0B12A9             0022*                              ;  0,and counting stops when the end-of-count value is reached.
0B12A9             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0B12A9             0024*                              ; written to the counter when the end-of-count value is reached.
0B12A9             0025*  
0B12A9             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0B12A9             0027*  CLK_DIV_256:  equ %00001100 ;
0B12A9             0028*  CLK_DIV_64:   equ %00001000 ;
0B12A9             0029*  CLK_DIV_16:   equ %00000100 ;
0B12A9             0030*  CLK_DIV_4:    equ %00000000 ;
0B12A9             0031*  
0B12A9             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0B12A9             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0B12A9             0034*                              ; When a 1 is written to this bit,the values in the reload registers
0B12A9             0035*                              ;  are loaded into the downcounter when the timer restarts. The
0B12A9             0036*                              ; programmer must ensure that this bit is set to 1 each time
0B12A9             0037*                              ; SINGLE-PASS mode is used.
0B12A9             0038*  
0B12A9             0039*  ; disable/enable the programmable reload timer
0B12A9             0040*  PRT_EN_0:     equ %00000000 ;
0B12A9             0041*  PRT_EN_1:     equ %00000001 ;
0B12A9             0042*  
0B12A9             0043*  ; Table 37. Timer Input Source Select Register
0B12A9             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
0B12A9             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0B12A9             0046*  ;   00: System clock / CLK_DIV
0B12A9             0047*  ;   01: RTC / CLK_DIV
0B12A9             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
0B12A9             0049*  ;   10: GPIO port B pin 1.
0B12A9             0050*  ;   11: GPIO port B pin 1.
0B12A9             0051*  TMR_ISS:   equ 92h ; register address
0B12A9             0052*  
0B12A9             0053*  ; Table 51. Real-Time Clock Control Register
0B12A9             0054*  RTC_CTRL: equ EDh ; register address
0B12A9             0055*  
0B12A9             0056*  ; alarm interrupt disable/enable
0B12A9             0057*  RTC_ALARM_0:    equ %00000000
0B12A9             0058*  RTC_ALARM_1:    equ %10000000
0B12A9             0059*  
0B12A9             0060*  ; interrupt on alarm disable/enable
0B12A9             0061*  RTC_INT_ENT_0:  equ %00000000
0B12A9             0062*  RTC_INT_ENT_1:  equ %01000000
0B12A9             0063*  
0B12A9             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0B12A9             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0B12A9             0066*  
0B12A9             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0B12A9             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
0B12A9             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0B12A9             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
0B12A9             0071*  
0B12A9             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0B12A9             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0B12A9             0074*  
0B12A9             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0B12A9             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0B12A9             0077*  
0B12A9             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0B12A9             0079*                                  ; RTC counter is enabled.
0B12A9             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0B12A9             0081*                                  ; RTC counter is disabled.
0B12A9             0082*  
0B12A9             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0B12A9             0084*  
0B12A9             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0B12A9             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0B12A9 00 00 00    0087*  prt_reload: dl 0x000000
0B12AC             0088*  
0B12AC             0089*  ; ; returns: a = 0 if running on hardware,1 if running on emulator
0B12AC             0090*  ; ;          de = number PRT interrupts during test interval
0B12AC             0091*  ; prt_calibrate:
0B12AC             0092*  ;     call vdu_vblank
0B12AC             0093*  ; ; set a MOS timer
0B12AC             0094*  ;     ld hl,120*1 ; 1 second
0B12AC             0095*  ;     ld iy,tmr_test
0B12AC             0096*  ;     call tmr_set
0B12AC             0097*  ; ; set a PRT timer
0B12AC             0098*  ;     ; ld hl,prt_reload_hardware
0B12AC             0099*  ;     ; ld hl,prt_reload_emulator
0B12AC             0100*  ;     ld hl,prt_reload_emulator + prt_reload_hardware / 2
0B12AC             0101*  ;     ld (prt_reload),hl
0B12AC             0102*  ;     call prt_set
0B12AC             0103*  ; @loop:
0B12AC             0104*  ; ; check time remaining on MOS timer
0B12AC             0105*  ;     call tmr_get
0B12AC             0106*  ;     jp z,@done ; time expired,so quit
0B12AC             0107*  ;     jp m,@done ; time past expiration (negative),so quit
0B12AC             0108*  ;     jr @loop
0B12AC             0109*  ; @done:
0B12AC             0110*  ;     ld de,(prt_irq_counter)
0B12AC             0111*  ;     ld bc,prt_reload_hardware ; default value for running on hardware
0B12AC             0112*  ;     ld (prt_reload),bc
0B12AC             0113*  ;     ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
0B12AC             0114*  ;     xor a ; clear carry,zero is default value for running on hardware
0B12AC             0115*  ;     ld (is_emulator),a
0B12AC             0116*  ;     sbc hl,de
0B12AC             0117*  ;     ld hl,on_hardware ; default message for running on hardware
0B12AC             0118*  ;     jp z,prt_calibrate ; zero result is indeterminate so we try again
0B12AC             0119*  ;     ret m ; negative result means we're on hardware
0B12AC             0120*  ;     inc a ; we're on emulator
0B12AC             0121*  ;     ld (is_emulator),a
0B12AC             0122*  ;     ld bc,prt_reload_emulator
0B12AC             0123*  ;     ld (prt_reload),bc
0B12AC             0124*  ;     ld hl,on_emulator
0B12AC             0125*  ;     ret
0B12AC             0126*  
0B12AC             0127*  ; calibrating_timer: defb "Calibrating timer\r\n",0
0B12AC             0128*  
0B12AC             0129*  ; set PRT timer
0B12AC             0130*  prt_set:
0B12AC 21 00 00 00 0131*      ld hl,0
0B12B0 22 FA 12 0B 0132*      ld (prt_irq_counter),hl
0B12B4 2A A9 12 0B 0133*      ld hl,(prt_reload)
0B12B8 ED 29 84    0134*      out0 ($84),l
0B12BB ED 21 85    0135*  	out0 ($85),h
0B12BE             0136*  ; disable timer
0B12BE 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0B12C0 ED 39 83    0138*  	out0 ($83),a
0B12C3             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0B12C3 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0B12C5 ED 39 83    0141*  	out0 ($83),a
0B12C8 C9          0142*      ret
0B12C9             0143*  
0B12C9             0144*  ; ===============================================
0B12C9             0145*  ; PRT Timer Interrupt Handling
0B12C9             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0B12C9             0147*  ; -----------------------------------------------
0B12C9             0148*  prt_irq_init:
0B12C9             0149*      ; set up interrupt vector table 2
0B12C9 21 00 00 00 0150*  	ld hl,0
0B12CD 3A 0C 01 00 0151*  	ld a,($10c)
0B12D1 6F          0152*  	ld l,a
0B12D2 3A 0D 01 00 0153*  	ld a,($10d)
0B12D6 67          0154*  	ld h,a
0B12D7             0155*  
0B12D7             0156*  	; skip over CALL ($c3)
0B12D7 23          0157*  	inc hl
0B12D8             0158*  	; load address of jump into vector table 2 (in ram)
0B12D8 ED 27       0159*  	ld hl,(hl)
0B12DA             0160*  
0B12DA             0161*  	; write CALL prt_irq_handler to vector table 2
0B12DA 3E C3       0162*  	ld a,$c3
0B12DC 77          0163*  	ld (hl),a
0B12DD 23          0164*  	inc hl
0B12DE 11 E5 12 0B 0165*  	ld de,prt_irq_handler
0B12E2 ED 1F       0166*  	ld (hl),de
0B12E4             0167*  
0B12E4 C9          0168*      ret
0B12E5             0169*  
0B12E5             0170*  prt_irq_handler:
0B12E5 F3          0171*  	di
0B12E6 F5          0172*  	push af
0B12E7 E5          0173*      push hl
0B12E8 ED 38 83    0174*  	in0 a,($83)
0B12EB 2A FA 12 0B 0175*  	ld hl,(prt_irq_counter)
0B12EF 23          0176*  	inc hl
0B12F0 22 FA 12 0B 0177*  	ld (prt_irq_counter),hl
0B12F4 E1          0178*      pop hl
0B12F5 F1          0179*  	pop af
0B12F6 FB          0180*  	ei
0B12F7 5B ED 4D    0181*  	reti.l
0B12FA             0182*  
0B12FA             0183*  prt_irq_counter:
0B12FA 00 00 00    0184*  	.dl 0
0B12FD             0185*  prt_irq_counter_saved:
0B12FD 00 00 00    0186*      .dl 0
0B1300             0187*  
0B1300             0188*  prt_loop_reset:
0B1300 E5          0189*      push hl
0B1301 21 00 00 00 0190*  	ld hl,0
0B1305 22 FA 12 0B 0191*  	ld (prt_irq_counter),hl
0B1309 22 6B 13 0B 0192*      ld (prt_loop_counter),hl
0B130D 22 6E 13 0B 0193*      ld (prt_loops),hl
0B1311 CD AC 12 0B 0194*      call prt_set
0B1315 E1          0195*      pop hl
0B1316 C9          0196*      ret
0B1317             0197*  
0B1317             0198*  prt_loop_start:
0B1317 E5          0199*      push hl
0B1318 21 00 00 00 0200*  	ld hl,0
0B131C 22 FA 12 0B 0201*  	ld (prt_irq_counter),hl
0B1320 E1          0202*      pop hl
0B1321 C9          0203*      ret
0B1322             0204*  
0B1322             0205*  prt_loop_stop:
0B1322 E5          0206*      push hl
0B1323 D5          0207*      push de
0B1324 2A FA 12 0B 0208*      ld hl,(prt_irq_counter)
0B1328 ED 5B 6B 13 0209*      ld de,(prt_loop_counter)
       0B          
0B132D 19          0210*      add hl,de
0B132E 22 6B 13 0B 0211*      ld (prt_loop_counter),hl
0B1332 21 00 00 00 0212*      ld hl,0
0B1336 22 FA 12 0B 0213*      ld (prt_irq_counter),hl
0B133A 2A 6E 13 0B 0214*      ld hl,(prt_loops)
0B133E 23          0215*      inc hl
0B133F 22 6E 13 0B 0216*      ld (prt_loops),hl
0B1343 D1          0217*      pop de
0B1344 E1          0218*      pop hl
0B1345 C9          0219*      ret
0B1346             0220*  
0B1346             0221*  ; inputs: bc = y,x text coordinates to print
0B1346             0222*  prt_loop_print:
0B1346 F5          0223*      push af
0B1347 E5          0224*      push hl
0B1348 C5          0225*      push bc
0B1349 D5          0226*      push de
0B134A DD E5       0227*      push ix
0B134C FD E5       0228*      push iy
0B134E CD 63 14 0B 0229*      call vdu_move_cursor
0B1352             0230*  
0B1352 2A 6B 13 0B 0231*      ld hl,(prt_loop_counter)
0B1356 CD 2F 03 0B 0232*      call printDec
0B135A             0233*  
0B135A 2A 6E 13 0B 0234*      ld hl,(prt_loops)
0B135E CD 2F 03 0B 0235*      call printDec
0B1362             0236*  
0B1362 FD E1       0237*      pop iy
0B1364 DD E1       0238*      pop ix
0B1366 D1          0239*      pop de
0B1367 C1          0240*      pop bc
0B1368 E1          0241*      pop hl
0B1369 F1          0242*      pop af
0B136A C9          0243*      ret
0B136B             0244*  
0B136B             0245*  prt_loop_counter:
0B136B 00 00 00    0246*      .dl 0
0B136E             0247*  prt_loops:
0B136E 00 00 00    0248*      .dl 0
0B1371             0249*  
0B1371             0250*  ; ===============================================
0B1371             0251*  ; Timer functions
0B1371             0252*  ; -----------------------------------------------
0B1371             0253*  ; set a countdown timer
0B1371             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B1371             0255*  ; returns: hl = current time
0B1371             0256*  tmr_set:
0B1371 FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
0B1374             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
0B1374 3E 08       0001*M 			LD	A, function
0B1376 5B CF       0002*M 			RST.L	08h
0B1378 DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
0B137B FD 2F 00    0260*      ld (iy+0),hl            ; set start time
0B137E C9          0261*      ret
0B137F             0262*  
0B137F             0263*  ; gets time remaining on a countdown timer
0B137F             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B137F             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0B137F             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
0B137F             0267*  tmr_get:
0B137F             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
0B137F 3E 08       0001*M 			LD	A, function
0B1381 5B CF       0002*M 			RST.L	08h
0B1383 DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
0B1386 FD 27 00    0270*      ld hl,(iy+0)            ; get start time
0B1389 AF          0271*      xor a                   ; clear carry
0B138A ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0B138C FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
0B138F AF          0274*      xor a                   ; clear carry
0B1390 ED 5A       0275*      adc hl,de               ; hl = time remaining
0B1392             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0B1392 C9          0277*      ret
0B1393             0278*  
0B1393 00 00 00    0279*  timestamp_now: dl 0
0B1396 00 00 00    0280*  timestamp_old: dl 0
0B1399 00 00 00    0281*  timestamp_chg: dl 0
0B139C             0282*  
0B139C             0283*  ; update the global timestamp from the system clock
0B139C             0284*  ; inputs: none
0B139C             0285*  ; returns: hl = time elapsed in 1/120ths of a second
0B139C             0286*  ;          de = current time
0B139C             0287*  ;          ix = pointer to syvars table
0B139C             0288*  ; destroys: af,hl,de,ix
0B139C             0289*  timestamp_tick:
0B139C ED 5B 93 13 0290*      ld de,(timestamp_now)   ; get previous time
       0B          
0B13A1 ED 53 96 13 0291*      ld (timestamp_old),de   ; save previous time
       0B          
0B13A6             0292*      MOSCALL mos_sysvars     ; ix points to syvars table
0B13A6 3E 08       0001*M 			LD	A, function
0B13A8 5B CF       0002*M 			RST.L	08h
0B13AA DD 27 00    0293*      ld hl,(ix+sysvar_time)  ; get current time
0B13AD 22 93 13 0B 0294*      ld (timestamp_now),hl   ; save current time
0B13B1 AF          0295*      xor a                   ; clear carry
0B13B2 ED 52       0296*      sbc hl,de               ; hl = time elapsed
0B13B4 22 99 13 0B 0297*      ld (timestamp_chg),hl   ; save elapsed time
0B13B8 C9          0298*      ret
0B13B9             0299*  
0B13B9             0300*  ; set a countdown timer
0B13B9             0301*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B13B9             0302*  ; requires: timestamp_tick to be called at least once before this function
0B13B9             0303*  ; returns: hl = current time
0B13B9             0304*  ; destroys: hl
0B13B9             0305*  timestamp_tmr_set:
0B13B9 FD 2F 03    0306*      ld (iy+3),hl            ; set time remaining
0B13BC 2A 93 13 0B 0307*      ld hl,(timestamp_now)   ; get current timestamp
0B13C0 FD 2F 00    0308*      ld (iy+0),hl            ; set start time
0B13C3 C9          0309*      ret
0B13C4             0310*  
0B13C4             0311*  ; gets time remaining on a countdown timer following the global timestamp
0B13C4             0312*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B13C4             0313*  ; requires: timestamp_tick to be called at least once before this function
0B13C4             0314*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0B13C4             0315*  ;          sign flags: pos = time not expired,zero or neg = time expired
0B13C4             0316*  ; destroys: af,hl,de
0B13C4             0317*  timestamp_tmr_get:
0B13C4 ED 5B 93 13 0318*      ld de,(timestamp_now)   ; get current timestamp
       0B          
0B13C9 FD 27 00    0319*      ld hl,(iy+0)            ; get start time
0B13CC AF          0320*      xor a                   ; clear carry
0B13CD ED 52       0321*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0B13CF FD 17 03    0322*      ld de,(iy+3)            ; get timer set value
0B13D2 AF          0323*      xor a                   ; clear carry
0B13D3 ED 5A       0324*      adc hl,de               ; hl = time remaining
0B13D5             0325*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0B13D5 C9          0326*      ret
0B13D6             0327*  
0B13D6             0328*  ; main loop timer functions
0B13D6             0329*  tmr_main_loop: ds 6 ; buffer to hold main loop timer
0B13DC             0330*  
0B13DC             0331*  ; set a countdown timer for the main loop using the timestamp timer
0B13DC             0332*  ; inputs: hl = time to set in 1/120ths of a second
0B13DC             0333*  ; returns: hl = current time
0B13DC             0334*  ; destroys: af,hl,de,ix,iy
0B13DC             0335*  tmr_main_loop_set:
0B13DC FD 21 D6 13 0336*      ld iy,tmr_main_loop
       0B          
0B13E1 FD 2F 03    0337*      ld (iy+3),hl ; set time remaining
0B13E4 CD 9C 13 0B 0338*      call timestamp_tick
0B13E8 2A 93 13 0B 0339*      ld hl,(timestamp_now)   ; get current timestamp
0B13EC FD 2F 00    0340*      ld (iy+0),hl ; set start time
0B13EF C9          0341*      ret
0B13F0             0342*  
0B13F0             0343*  ; gets time remaining on the main loop countdown timer following the global timestamp
0B13F0             0344*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0B13F0             0345*  ;          sign flags: pos = time not expired,zero or neg = time expired
0B13F0             0346*  ; destroys: af,hl,de,ix,iy
0B13F0             0347*  tmr_main_loop_get:
0B13F0 CD 9C 13 0B 0348*      call timestamp_tick
0B13F4 FD 21 D6 13 0349*      ld iy,tmr_main_loop
       0B          
0B13F9 CD C4 13 0B 0350*      call timestamp_tmr_get
0B13FD C9          0351*      ret
0B13FE             0352*  
0B13FE             0353*  ; set a stopwatch
0B13FE             0354*  ; returns: hl = start time
0B13FE             0355*  ; destroys: hl,ix
0B13FE             0356*  stopwatch_set:
0B13FE             0357*      MOSCALL mos_sysvars     ; ix points to syvars table
0B13FE 3E 08       0001*M 			LD	A, function
0B1400 5B CF       0002*M 			RST.L	08h
0B1402 DD 27 00    0358*      ld hl,(ix+sysvar_time)  ; get current time
0B1405 22 1A 14 0B 0359*      ld (stopwatch_started),hl            ; set start time
0B1409 C9          0360*      ret
0B140A             0361*  
0B140A             0362*  ; gets time elapsed on a stopwatch
0B140A             0363*  ; returns: hl = time elapsed in 1/120ths of a second
0B140A             0364*  ; destroys: af,hl,de,ix
0B140A             0365*  stopwatch_get:
0B140A             0366*      MOSCALL mos_sysvars     ; ix points to syvars table
0B140A 3E 08       0001*M 			LD	A, function
0B140C 5B CF       0002*M 			RST.L	08h
0B140E DD 27 00    0367*      ld hl,(ix+sysvar_time)  ; get current time
0B1411 ED 5B 1A 14 0368*      ld de,(stopwatch_started)            ; get start time
       0B          
0B1416 AF          0369*      xor a                   ; clear carry
0B1417 ED 52       0370*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
0B1419 C9          0371*      ret
0B141A             0372*  
0B141A             0373*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
0B141D             0374*  
0B141D             0375*  ; ------------------
0B141D             0376*  ; delay routine
0B141D             0377*  ; Author: Richard Turrnidge
0B141D             0378*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
0B141D             0379*  ; routine waits a fixed time,then returns
0B141D             0380*  ; arrive with A =  the delay byte. One bit to be set only.
0B141D             0381*  ; eg. ld A,00000100b
0B141D             0382*  
0B141D             0383*  multiPurposeDelay:
0B141D F5          0384*      push af
0B141E C5          0385*      push bc
0B141F DD E5       0386*      push ix
0B1421 47          0387*      ld b,a
0B1422 3E 08       0388*      ld a,$08
0B1424 5B CF       0389*      RST.LIL	08h                 ; get IX pointer to sysvars
0B1426             0390*  
0B1426             0391*  waitLoop:
0B1426             0392*  
0B1426 DD 7E 00    0393*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
0B1429             0394*  
0B1429             0395*                                  ;   we check if bit set is same as last time we checked.
0B1429             0396*                                  ;   bit 0 - don't use
0B1429             0397*                                  ;   bit 1 - changes 64 times per second
0B1429             0398*                                  ;   bit 2 - changes 32 times per second
0B1429             0399*                                  ;   bit 3 - changes 16 times per second
0B1429             0400*  
0B1429             0401*                                  ;   bit 4 - changes 8 times per second
0B1429             0402*                                  ;   bit 5 - changes 4 times per second
0B1429             0403*                                  ;   bit 6 - changes 2 times per second
0B1429             0404*                                  ;   bit 7 - changes 1 times per second
0B1429 A0          0405*      and b
0B142A 4F          0406*      ld c,a
0B142B 3A 3C 14 0B 0407*      ld a,(oldTimeStamp)
0B142F B9          0408*      cp c                        ; is A same as last value?
0B1430 28 F4       0409*      jr z,waitLoop              ; loop here if it is
0B1432 79          0410*      ld a,c
0B1433 32 3C 14 0B 0411*      ld (oldTimeStamp),a        ; set new value
0B1437             0412*  
0B1437 DD E1       0413*      pop ix
0B1439 C1          0414*      pop bc
0B143A F1          0415*      pop af
0B143B C9          0416*      ret
0B143C             0417*  
0B143C 00          0418*  oldTimeStamp:   .db 00h
0B143D             0025       include "vdu.inc"
0B143D             0001*  
0B143D             0002*  ; VDU 30: Home cursor
0B143D             0003*  vdu_home_cursor:
0B143D 3E 1E       0004*      ld a,30
0B143F 5B D7       0005*  	rst.lil $10
0B1441 C9          0006*  	ret
0B1442             0007*  
0B1442             0008*  cursor_on:
0B1442 21 4D 14 0B 0009*  	ld hl,@cmd
0B1446 01 03 00 00 0010*  	ld bc,@end-@cmd
0B144A 5B DF       0011*  	rst.lil $18
0B144C C9          0012*  	ret
0B144D             0013*  @cmd:
0B144D 17 01 01    0014*  	db 23,1,1
0B1450             0015*  @end:
0B1450             0016*  
0B1450             0017*  cursor_off:
0B1450 21 5B 14 0B 0018*  	ld hl,@cmd
0B1454 01 03 00 00 0019*  	ld bc,@end-@cmd
0B1458 5B DF       0020*  	rst.lil $18
0B145A C9          0021*  	ret
0B145B             0022*  @cmd:
0B145B 17 01 00    0023*  	db 23,1,0
0B145E             0024*  @end:
0B145E             0025*  
0B145E             0026*  ; VDU 9: Move cursor forward one character
0B145E             0027*  vdu_cursor_forward:
0B145E 3E 09       0028*      ld a,9
0B1460 5B D7       0029*  	rst.lil $10
0B1462 C9          0030*  	ret
0B1463             0031*  
0B1463             0032*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
0B1463             0033*  ; inputs: c=x, b=y 8-bit unsigned integers
0B1463             0034*  vdu_move_cursor:
0B1463 ED 43 74 14 0035*      ld (@x0),bc
       0B          
0B1468 21 73 14 0B 0036*  	ld hl,@cmd
0B146C 01 03 00 00 0037*  	ld bc,@end-@cmd
0B1470 5B DF       0038*  	rst.lil $18
0B1472 C9          0039*  	ret
0B1473 1F          0040*  @cmd: 	db 31
0B1474 00          0041*  @x0:	db 0
0B1475 00          0042*  @y0: 	db 0
0B1476 00          0043*  @end: 	db 0 ; padding
0B1477             0044*  
0B1477             0045*  ; VDU 12: Clear text area (CLS)
0B1477             0046*  vdu_cls:
0B1477 3E 0C       0047*      ld a,12
0B1479 5B D7       0048*  	rst.lil $10
0B147B C9          0049*  	ret
0B147C             0050*  
0B147C             0051*  vdu_flip:
0B147C 21 87 14 0B 0052*  	ld hl,@cmd
0B1480 01 03 00 00 0053*  	ld bc,@end-@cmd
0B1484 5B DF       0054*  	rst.lil $18
0B1486 C9          0055*  	ret
0B1487 17 00 C3    0056*  @cmd: db 23,0,0xC3
0B148A             0057*  @end:
0B148A             0058*  
0B148A             0059*  ; VDU 16: Clear graphics area (CLG)
0B148A             0060*  vdu_clg:
0B148A 3E 10       0061*      ld a,16
0B148C 5B D7       0062*  	rst.lil $10
0B148E C9          0063*  	ret
0B148F             0064*  
0B148F             0065*  ; COLOUR MODES
0B148F             0066*  ; Mode	Effect
0B148F             0067*  ; 0	Set on-screen pixel to target colour value
0B148F             0068*  ; 1	OR value with the on-screen pixel
0B148F             0069*  ; 2	AND value with the on-screen pixel
0B148F             0070*  ; 3	XOR value with the on-screen pixel
0B148F             0071*  ; 4	Invert the on-screen pixel
0B148F             0072*  ; 5	No operation
0B148F             0073*  ; 6	AND the inverse of the specified colour with the on-screen pixel
0B148F             0074*  ; 7	OR the inverse of the specified colour with the on-screen pixel
0B148F             0075*  
0B148F             0076*  ; VDU 17, colour: Define text colour (COLOUR)
0B148F             0077*  vdu_colour_text:
0B148F 32 9F 14 0B 0078*  	ld (@arg),a
0B1493 21 9E 14 0B 0079*  	ld hl,@cmd
0B1497 01 02 00 00 0080*  	ld bc,@end-@cmd
0B149B 5B DF       0081*  	rst.lil $18
0B149D C9          0082*  	ret
0B149E 11          0083*  @cmd: db 17
0B149F 00          0084*  @arg: db 0
0B14A0             0085*  @end:
0B14A0             0086*  
0B14A0             0087*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
0B14A0             0088*  ; inputs: a=mode, c=colour (add 128 to set background colour)
0B14A0             0089*  vdu_gcol:
0B14A0 32 B5 14 0B 0090*  	ld (@mode),a
0B14A4 79          0091*      ld a,c
0B14A5 32 B6 14 0B 0092*      ld (@col),a
0B14A9 21 B4 14 0B 0093*  	ld hl,@cmd
0B14AD 01 03 00 00 0094*  	ld bc,@end-@cmd
0B14B1 5B DF       0095*  	rst.lil $18
0B14B3 C9          0096*  	ret
0B14B4 12          0097*  @cmd:  db 18
0B14B5 00          0098*  @mode: db 0
0B14B6 00          0099*  @col:  db 0
0B14B7             0100*  @end:
0B14B7             0101*  
0B14B7             0102*  
0B14B7             0103*  ; VDU 28, left, bottom, right, top: Set text viewport **
0B14B7             0104*  ; MIND THE LITTLE-ENDIANESS
0B14B7             0105*  ; inputs: c=left,b=bottom,e=right,d=top
0B14B7             0106*  ; outputs; nothing
0B14B7             0107*  ; destroys: a might make it out alive
0B14B7             0108*  vdu_set_txt_viewport:
0B14B7 ED 43 CD 14 0109*      ld (@lb),bc
       0B          
0B14BC ED 53 CF 14 0110*  	ld (@rt),de
       0B          
0B14C1 21 CC 14 0B 0111*  	ld hl,@cmd
0B14C5 01 05 00 00 0112*  	ld bc,@end-@cmd
0B14C9 5B DF       0113*  	rst.lil $18
0B14CB C9          0114*  	ret
0B14CC 1C          0115*  @cmd:   db 28 ; set text viewport command
0B14CD 00 00       0116*  @lb: 	dw 0x0000 ; set by bc
0B14CF 00 00       0117*  @rt: 	dw 0x0000 ; set by de
0B14D1 00          0118*  @end:   db 0x00	  ; padding
0B14D2             0119*  
0B14D2             0120*  ; Wait for VBLANK interrupt
0B14D2             0121*  vdu_vblank:
0B14D2 DD E5       0122*      PUSH 	IX
0B14D4             0123*  	MOSCALL	mos_sysvars
0B14D4 3E 08       0001*M 			LD	A, function
0B14D6 5B CF       0002*M 			RST.L	08h
0B14D8 DD 7E 00    0124*  	LD	A, (IX + sysvar_time + 0)
0B14DB             0125*  @wait:
0B14DB DD BE 00    0126*      CP 	A, (IX + sysvar_time + 0)
0B14DE 28 FB       0127*      JR	Z, @wait
0B14E0 DD E1       0128*      POP	IX
0B14E2 C9          0129*      RET
0B14E3             0130*  
0B14E3             0131*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
0B14E3             0132*  ; NOTE: the order of the y-coordinate parameters are inverted
0B14E3             0133*  ; 	because we have turned off logical screen scaling
0B14E3             0134*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
0B14E3             0135*  ; outputs; nothing
0B14E3             0136*  ; destroys: a might make it out alive
0B14E3             0137*  vdu_set_gfx_viewport:
0B14E3 ED 43 03 15 0138*      ld (@x0),bc
       0B          
0B14E8 FD 22 05 15 0139*      ld (@y1),iy
       0B          
0B14ED DD 22 07 15 0140*  	ld (@x1),ix
       0B          
0B14F2 ED 53 09 15 0141*  	ld (@y0),de
       0B          
0B14F7 21 02 15 0B 0142*  	ld hl,@cmd
0B14FB 01 09 00 00 0143*  	ld bc,@end-@cmd
0B14FF 5B DF       0144*  	rst.lil $18
0B1501 C9          0145*  	ret
0B1502 18          0146*  @cmd:   db 24 ; set graphics viewport command
0B1503 00 00       0147*  @x0: 	dw 0x0000 ; set by bc
0B1505 00 00       0148*  @y1: 	dw 0x0000 ; set by iy
0B1507 00 00       0149*  @x1: 	dw 0x0000 ; set by ix
0B1509 00 00       0150*  @y0: 	dw 0x0000 ; set by de
0B150B 00          0151*  @end:   db 0x00	  ; padding
0B150C             0152*  
0B150C             0153*  ; SCREEN MODES
0B150C             0154*  ; ===============================
0B150C             0155*  ; Mode  Horz  Vert  Cols  Refresh
0B150C             0156*  ; ---   ----  ----  ----  -------
0B150C             0157*  ; 11    320   240   2     60hz
0B150C             0158*  ; 139   320   240   2     60hz
0B150C             0159*  ; 23    512   384   2     60hz
0B150C             0160*  ; 151   512   384   2     60hz
0B150C             0161*  ; 6     640   240   2     60hz
0B150C             0162*  ; 134   640   240   2     60hz
0B150C             0163*  ; 2     640   480   2     60hz
0B150C             0164*  ; 130   640   480   2     60hz
0B150C             0165*  ; 17    800   600   2     60hz
0B150C             0166*  ; 145   800   600   2     60hz
0B150C             0167*  ; 18    1024  768   2     60hz
0B150C             0168*  ; 146   1024  768   2     60hz
0B150C             0169*  ; ---   ----  ----  ----  -------
0B150C             0170*  ; 10    320   240   4     60hz
0B150C             0171*  ; 138   320   240   4     60hz
0B150C             0172*  ; 22    512   384   4     60hz
0B150C             0173*  ; 150   512   384   4     60hz
0B150C             0174*  ; 5     640   240   4     60hz
0B150C             0175*  ; 133   640   240   4     60hz
0B150C             0176*  ; 1     640   480   4     60hz
0B150C             0177*  ; 129   640   480   4     60hz
0B150C             0178*  ; 16    800   600   4     60hz
0B150C             0179*  ; 19    1024  768   4     60hz
0B150C             0180*  ; ---   ----  ----  ----  -------
0B150C             0181*  ; 9     320   240   16    60hz
0B150C             0182*  ; 137   320   240   16    60hz
0B150C             0183*  ; 21    512   384   16    60hz
0B150C             0184*  ; 149   512   384   16    60hz
0B150C             0185*  ; 4     640   240   16    60hz
0B150C             0186*  ; 132   640   240   16    60hz
0B150C             0187*  ; 0     640   480   16    60hz
0B150C             0188*  ; 7     n/a   n/a   16    60hz
0B150C             0189*  ; ---   ----  ----  ----  -------
0B150C             0190*  ; 8     320   240   64    60hz
0B150C             0191*  ; 136   320   240   64    60hz
0B150C             0192*  ; 20    512   384   64    60hz
0B150C             0193*  ; 3     640   240   64    60hz
0B150C             0194*  ; ---   ----  ----  ----  -------
0B150C             0195*  vdu_set_screen_mode:
0B150C 32 1C 15 0B 0196*  	ld (@arg),a
0B1510 21 1B 15 0B 0197*  	ld hl,@cmd
0B1514 01 02 00 00 0198*  	ld bc,@end-@cmd
0B1518 5B DF       0199*  	rst.lil $18
0B151A C9          0200*  	ret
0B151B 16          0201*  @cmd: db 22 ; set screen mode
0B151C 00          0202*  @arg: db 0  ; screen mode parameter
0B151D             0203*  @end:
0B151D             0204*  
0B151D             0205*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
0B151D             0206*  ; inputs: a is scaling mode, 1=on, 0=off
0B151D             0207*  ; note: default setting on boot is scaling ON
0B151D             0208*  vdu_set_scaling:
0B151D 32 2F 15 0B 0209*  	ld (@arg),a
0B1521 21 2C 15 0B 0210*  	ld hl,@cmd
0B1525 01 04 00 00 0211*  	ld bc,@end-@cmd
0B1529 5B DF       0212*  	rst.lil $18
0B152B C9          0213*  	ret
0B152C 17 00 C0    0214*  @cmd: db 23,0,0xC0
0B152F 00          0215*  @arg: db 0  ; scaling on/off
0B1530             0216*  @end:
0B1530             0217*  
0B1530             0218*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
0B1530             0219*  ; inputs: hl=bufferId
0B1530             0220*  vdu_buff_select:
0B1530 22 42 15 0B 0221*  	ld (@bufferId),hl
0B1534 21 3F 15 0B 0222*  	ld hl,@cmd
0B1538 01 05 00 00 0223*  	ld bc,@end-@cmd
0B153C 5B DF       0224*  	rst.lil $18
0B153E C9          0225*  	ret
0B153F 17 1B 20    0226*  @cmd: db 23,27,0x20
0B1542 00 00       0227*  @bufferId: dw 0x0000
0B1544 00          0228*  @end: db 0x00 ; padding
0B1545             0229*  
0B1545             0230*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
0B1545             0231*  ; inputs: a=format; bc=width; de=height
0B1545             0232*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
0B1545             0233*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
0B1545             0234*  ; 0 	RGBA8888 (4-bytes per pixel)
0B1545             0235*  ; 1 	RGBA2222 (1-bytes per pixel)
0B1545             0236*  ; 2 	Mono/Mask (1-bit per pixel)
0B1545             0237*  ; 3 	Reserved for internal use by VDP (“native” format)
0B1545             0238*  vdu_bmp_create:
0B1545 ED 43 61 15 0239*      ld (@width),bc
       0B          
0B154A ED 53 63 15 0240*      ld (@height),de
       0B          
0B154F 32 65 15 0B 0241*      ld (@fmt),a
0B1553 21 5E 15 0B 0242*  	ld hl,@cmd
0B1557 01 08 00 00 0243*  	ld bc,@end-@cmd
0B155B 5B DF       0244*  	rst.lil $18
0B155D C9          0245*  	ret
0B155E 17 1B 21    0246*  @cmd:       db 23,27,0x21
0B1561 00 00       0247*  @width:     dw 0x0000
0B1563 00 00       0248*  @height:    dw 0x0000
0B1565 00          0249*  @fmt:       db 0x00
0B1566             0250*  @end:
0B1566             0251*  
0B1566             0252*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0B1566             0253*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0B1566             0254*  vdu_load_img_rgba2_to_8:
0B1566             0255*  ; backup the target buffer id and image dimensions
0B1566 E5          0256*      push hl
0B1567 D5          0257*      push de
0B1568 C5          0258*      push bc
0B1569             0259*  ; load the rgba2 image to working buffer 65534
0B1569 21 FE FF 00 0260*      ld hl,65534 ; temporary working buffer id
0B156D CD 70 16 0B 0261*  	call vdu_load_buffer_from_file
0B1571             0262*  ; restore the image dimensions and target buffer id
0B1571 C1          0263*      pop bc
0B1572 D1          0264*      pop de
0B1573 E1          0265*      pop hl
0B1574             0266*  ; fall through to vdu_rgba2_to_8
0B1574             0267*  
0B1574             0268*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
0B1574             0269*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
0B1574             0270*  ; the "expand bitmap" command is:
0B1574             0271*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0B1574             0272*  ; and then to reverse the byte order to fix endian-ness:
0B1574             0273*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0B1574             0274*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0B1574             0275*  ; VDU 23,27,&20,targetBufferID%;
0B1574             0276*  ; VDU 23,27,&21,width%;height%;0
0B1574             0277*  ; -------------------------------------------------------------------
0B1574             0278*  ; inputs: bc,de image width,height ; hl = targetBufferId
0B1574             0279*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
0B1574             0280*  vdu_rgba2_to_8:
0B1574             0281*  ; load the image dimensions and buffer id parameters
0B1574 ED 43 D0 15 0282*      ld (@width),bc
       0B          
0B1579 ED 53 D2 15 0283*      ld (@height),de
       0B          
0B157E 22 B5 15 0B 0284*      ld (@bufferId0),hl
0B1582 22 C2 15 0B 0285*      ld (@bufferId2),hl
0B1586 22 CB 15 0B 0286*      ld (@bufferId1),hl
0B158A             0287*  ; clean up bytes that got stomped on by the ID loads
0B158A 3E 48       0288*      ld a,0x48
0B158C 32 B7 15 0B 0289*      ld (@bufferId0+2),a
0B1590 3E 17       0290*      ld a,23
0B1592 32 CD 15 0B 0291*      ld (@bufferId1+2),a
0B1596 3E 18       0292*      ld a,24
0B1598 32 C4 15 0B 0293*      ld (@bufferId2+2),a
0B159C AF          0294*      xor a
0B159D 32 D4 15 0B 0295*      ld (@height+2),a
0B15A1             0296*  ; send the vdu command strings
0B15A1 21 AC 15 0B 0297*      ld hl,@beg
0B15A5 01 29 00 00 0298*      ld bc,@end-@beg
0B15A9 5B DF       0299*      rst.lil $18
0B15AB C9          0300*      ret
0B15AC             0301*  @beg:
0B15AC             0302*  ; Command 14: Consolidate blocks in a buffer
0B15AC             0303*  ; VDU 23, 0, &A0, bufferId; 14
0B15AC 17 00 A0    0304*      db 23,0,0xA0
0B15AF FE FF       0305*      dw 65534 ; workingBufferId
0B15B1 0E          0306*      db 14 ; consolidate blocks
0B15B2             0307*  ; the "expand bitmap" command is:
0B15B2             0308*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0B15B2 17 00 A0    0309*      db 23,0,0xA0
0B15B5 00 00       0310*  @bufferId0: dw 0x0000 ; targetBufferId
0B15B7 48          0311*      db 0x48 ; given as decimal command 72 in the docs
0B15B8 02          0312*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
0B15B9 FE FF       0313*      dw 65534 ; sourceBufferId
0B15BB 00 7F BF FF 0314*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
0B15BF             0315*  ; reverse the byte order to fix endian-ness:
0B15BF             0316*  ; Command 24: Reverse the order of data of blocks within a buffer
0B15BF             0317*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
0B15BF             0318*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0B15BF 17 00 A0    0319*      db 23,0,0xA0
0B15C2 00 00       0320*  @bufferId2:    dw 0x0000 ; targetBufferId
0B15C4 18          0321*      db 24 ; reverse byte order
0B15C5 04          0322*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
0B15C6 04 00       0323*      dw 4 ; size (4 bytes)
0B15C8             0324*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0B15C8             0325*  ; VDU 23,27,&20,targetBufferID%;
0B15C8 17 1B 20    0326*      db 23,27,0x20 ; select bitmap
0B15CB 00 00       0327*  @bufferId1: dw 0x0000 ; targetBufferId
0B15CD             0328*  ; VDU 23,27,&21,width%;height%;0
0B15CD 17 1B 21    0329*      db 23,27,0x21 ; create bitmap from buffer
0B15D0 00 00       0330*  @width: dw 0x0000
0B15D2 00 00       0331*  @height: dw 0x0000
0B15D4 00          0332*      db 0x00 ; rgba8888 format
0B15D5             0333*  @end:
0B15D5             0334*  
0B15D5             0335*  ; scratch variables
0B15D5 00 00 00    0336*  bufferId0: dl 0x000000
0B15D8 00 00 00    0337*  bufferId1: dl 0x000000
0B15DB             0338*  
0B15DB             0339*  ; load a vdu buffer from local memory
0B15DB             0340*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0B15DB             0341*  vdu_load_buffer:
0B15DB ED 43 04 16 0342*      ld (@length),bc
       0B          
0B15E0 D5          0343*      push de ; save data pointer
0B15E1             0344*  ; send the vdu command string
0B15E1 7D          0345*      ld a,l
0B15E2 32 01 16 0B 0346*      ld (@bufferId),a
0B15E6 7C          0347*      ld a,h
0B15E7 32 02 16 0B 0348*      ld (@bufferId+1),a
0B15EB 21 FE 15 0B 0349*      ld hl,@cmd
0B15EF 01 08 00 00 0350*      ld bc,@end-@cmd
0B15F3 5B DF       0351*      rst.lil $18
0B15F5             0352*  ; send the buffer data
0B15F5 E1          0353*      pop hl ; pointer to data
0B15F6 ED 4B 04 16 0354*      ld bc,(@length)
       0B          
0B15FB 5B DF       0355*      rst.lil $18 ; send it
0B15FD C9          0356*      ret
0B15FE             0357*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0B15FE 17 00 A0    0358*  @cmd:       db 23,0,0xA0
0B1601 00 00       0359*  @bufferId:	dw 0x0000
0B1603 00          0360*  		    db 0 ; load buffer
0B1604 00 00       0361*  @length:	dw 0x0000
0B1606 00          0362*  @end: db 0 ; padding
0B1607             0363*  
0B1607             0364*  ; clear a buffer
0B1607             0365*  ; inputs: hl = bufferId
0B1607             0366*  vdu_clear_buffer:
0B1607 7D          0367*      ld a,l
0B1608 32 1F 16 0B 0368*      ld (@bufferId),a
0B160C 7C          0369*      ld a,h
0B160D 32 20 16 0B 0370*      ld (@bufferId+1),a
0B1611 21 1C 16 0B 0371*      ld hl,@cmd
0B1615 01 06 00 00 0372*      ld bc,@end-@cmd
0B1619 5B DF       0373*      rst.lil $18
0B161B C9          0374*      ret
0B161C 17 00 A0    0375*  @cmd:       db 23,0,0xA0
0B161F 00 00       0376*  @bufferId:	dw 0x0000
0B1621 02          0377*  		    db 2 ; clear buffer
0B1622             0378*  @end:
0B1622             0379*  
0B1622             0380*  vdu_clear_all_buffers:
0B1622             0381*  ; clear all buffers
0B1622 21 2D 16 0B 0382*      ld hl,@beg
0B1626 01 06 00 00 0383*      ld bc,@end-@beg
0B162A 5B DF       0384*      rst.lil $18
0B162C C9          0385*      ret
0B162D 17 00 A0    0386*  @beg: db 23,0,$A0
0B1630 FF FF       0387*        dw -1 ; clear all buffers
0B1632 02          0388*        db 2  ; command 2: clear a buffer
0B1633             0389*  @end:
0B1633             0390*  
0B1633             0391*  ; Command 14: Consolidate blocks in a buffer
0B1633             0392*  vdu_consolidate_buffer:
0B1633             0393*  ; set parameters for vdu call
0B1633 7D          0394*      ld a,l
0B1634 32 4B 16 0B 0395*      ld (@bufferId),a
0B1638 7C          0396*      ld a,h
0B1639 32 4C 16 0B 0397*      ld (@bufferId+1),a
0B163D 21 48 16 0B 0398*      ld hl,@beg
0B1641 01 06 00 00 0399*      ld bc,@end-@beg
0B1645 5B DF       0400*      rst.lil $18
0B1647 C9          0401*      ret
0B1648             0402*  ; VDU 23, 0, &A0, bufferId; 14
0B1648 17 00 A0    0403*  @beg: db 23,0,0xA0
0B164B 00 00       0404*  @bufferId: dw 0x0000
0B164D 0E          0405*             db 14
0B164E             0406*  @end:
0B164E             0407*  
0B164E             0408*  ; load an image file to a buffer and make it a bitmap
0B164E             0409*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
0B164E             0410*  vdu_load_img:
0B164E             0411*  ; back up image type and dimension parameters
0B164E 22 D5 15 0B 0412*      ld (bufferId0),hl
0B1652 F5          0413*      push af
0B1653 C5          0414*  	push bc
0B1654 D5          0415*  	push de
0B1655             0416*  ; load the image
0B1655 CD 70 16 0B 0417*  	call vdu_load_buffer_from_file
0B1659             0418*  ; now make it a bitmap
0B1659 2A D5 15 0B 0419*      ld hl,(bufferId0)
0B165D CD 33 16 0B 0420*      call vdu_consolidate_buffer
0B1661 2A D5 15 0B 0421*      ld hl,(bufferId0)
0B1665 CD 30 15 0B 0422*      call vdu_buff_select
0B1669 D1          0423*  	pop de ; image height
0B166A C1          0424*  	pop bc ; image width
0B166B F1          0425*  	pop af ; image type
0B166C C3 45 15 0B 0426*  	jp vdu_bmp_create ; will return to caller from there
0B1670             0427*  
0B1670             0428*  ; inputs: hl = bufferId; iy = pointer to filename
0B1670             0429*  vdu_load_buffer_from_file:
0B1670 22 D5 15 0B 0430*      ld (bufferId0),hl
0B1674             0431*  
0B1674             0432*  ; clear target buffer
0B1674 CD 07 16 0B 0433*      call vdu_clear_buffer
0B1678             0434*  
0B1678             0435*  ; open the file in read mode
0B1678             0436*  ; Open a file
0B1678             0437*  ; HLU: Filename
0B1678             0438*  ;   C: Mode
0B1678             0439*  ; Returns:
0B1678             0440*  ;   A: Filehandle, or 0 if couldn't open
0B1678 FD E5       0441*  	push iy ; pointer to filename
0B167A E1          0442*  	pop hl
0B167B 0E 01       0443*  	ld c,fa_read
0B167D             0444*      MOSCALL mos_fopen
0B167D 3E 0A       0001*M 			LD	A, function
0B167F 5B CF       0002*M 			RST.L	08h
0B1681 32 BC 16 0B 0445*      ld (@filehandle),a
0B1685             0446*  
0B1685             0447*  @read_file:
0B1685             0448*  ; Read a block of data from a file
0B1685             0449*  ;   C: Filehandle
0B1685             0450*  ; HLU: Pointer to where to write the data to
0B1685             0451*  ; DEU: Number of bytes to read
0B1685             0452*  ; Returns:
0B1685             0453*  ; DEU: Number of bytes read
0B1685 3A BC 16 0B 0454*      ld a,(@filehandle)
0B1689 4F          0455*      ld c,a
0B168A 21 00 E0 B7 0456*      ld hl,filedata
0B168E 11 00 20 00 0457*      ld de,8192 ; max we can read into onboard sram at one time
0B1692             0458*      MOSCALL mos_fread
0B1692 3E 1A       0001*M 			LD	A, function
0B1694 5B CF       0002*M 			RST.L	08h
0B1696             0459*  
0B1696             0460*  ; ; DEBUG: print chunk size
0B1696             0461*  ;     push de
0B1696             0462*  ;     pop hl
0B1696             0463*  ;     call printDec
0B1696             0464*  ;     call printNewLine
0B1696             0465*  
0B1696             0466*  ; test de for zero bytes read
0B1696 21 00 00 00 0467*      ld hl,0
0B169A AF          0468*      xor a ; clear carry
0B169B ED 52       0469*      sbc hl,de
0B169D CA B3 16 0B 0470*      jp z,@close_file
0B16A1             0471*  
0B16A1             0472*  ; load a vdu buffer from local memory
0B16A1             0473*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0B16A1 2A D5 15 0B 0474*      ld hl,(bufferId0)
0B16A5 D5          0475*      push de ; chunksize
0B16A6 C1          0476*      pop bc
0B16A7 11 00 E0 B7 0477*      ld de,filedata
0B16AB CD DB 15 0B 0478*      call vdu_load_buffer
0B16AF             0479*  
0B16AF             0480*  ; ; print progress breadcrumbs
0B16AF             0481*  ;     ld a,'.'
0B16AF             0482*  ;     rst.lil 10h
0B16AF             0483*  
0B16AF             0484*  ; read the next block
0B16AF C3 85 16 0B 0485*      jp @read_file
0B16B3             0486*  
0B16B3             0487*  ; close the file
0B16B3             0488*  @close_file:
0B16B3 3A BC 16 0B 0489*      ld a,(@filehandle)
0B16B7             0490*      MOSCALL mos_fclose
0B16B7 3E 0B       0001*M 			LD	A, function
0B16B9 5B CF       0002*M 			RST.L	08h
0B16BB C9          0491*      ret ; vdu_load_buffer_from_file
0B16BC             0492*  
0B16BC 00          0493*  @filehandle: db 0 ; file handle
0B16BD 00 00 00    0494*  @fil: dl 0 ; pointer to FIL struct
0B16C0             0495*  
0B16C0 00 00 00    0496*  @chunkpointer: dl 0 ; pointer to current chunk
0B16C3             0497*  
0B16C3             0498*  ; File information structure (FILINFO)
0B16C3             0499*  @filinfo:
0B16C3 00 00 00 00 0500*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
0B16C7 00 00       0501*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
0B16C9 00 00       0502*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
0B16CB 00          0503*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
0B16CC 00 00 00 00 0504*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
0B16D9 00 00 00 00 0505*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0B17D9             0026       ; include "vdu_fonts.inc"
0B17D9             0027       include "vdu_plot.inc"
0B17D9             0001*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0B17D9             0002*  ; PLOT code 	(Decimal) 	Effect
0B17D9             0003*  ; &00-&07 	0-7 	Solid line, includes both ends
0B17D9             0004*  plot_sl_both: equ 0x00
0B17D9             0005*  
0B17D9             0006*  ; &08-&0F 	8-15 	Solid line, final point omitted
0B17D9             0007*  plot_sl_first: equ 0x08
0B17D9             0008*  
0B17D9             0009*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
0B17D9             0010*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
0B17D9             0011*  
0B17D9             0012*  ; &20-&27 	32-39 	Solid line, first point omitted
0B17D9             0013*  plot_sl_last: equ 0x20
0B17D9             0014*  
0B17D9             0015*  ; &28-&2F 	40-47 	Solid line, both points omitted
0B17D9             0016*  plot_sl_none: equ 0x28
0B17D9             0017*  
0B17D9             0018*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
0B17D9             0019*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
0B17D9             0020*  
0B17D9             0021*  ; &40-&47 	64-71 	Point plot
0B17D9             0022*  plot_pt: equ 0x40
0B17D9             0023*  
0B17D9             0024*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
0B17D9             0025*  plot_lf_lr_non_bg: equ 0x48
0B17D9             0026*  
0B17D9             0027*  ; &50-&57 	80-87 	Triangle fill
0B17D9             0028*  plot_tf: equ 0x50
0B17D9             0029*  
0B17D9             0030*  ; &58-&5F 	88-95 	Line fill right to background §§
0B17D9             0031*  plot_lf_r_bg: equ 0x58
0B17D9             0032*  
0B17D9             0033*  ; &60-&67 	96-103 	Rectangle fill
0B17D9             0034*  plot_rf: equ 0x60
0B17D9             0035*  
0B17D9             0036*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
0B17D9             0037*  plot_lf_lr_fg: equ 0x60
0B17D9             0038*  
0B17D9             0039*  ; &70-&77 	112-119 	Parallelogram fill
0B17D9             0040*  plot_pf: equ 0x70
0B17D9             0041*  
0B17D9             0042*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
0B17D9             0043*  plot_lf_r_non_fg: equ 0x78
0B17D9             0044*  
0B17D9             0045*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
0B17D9             0046*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
0B17D9             0047*  
0B17D9             0048*  ; &90-&97 	144-151 	Circle outline
0B17D9             0049*  plot_co: equ 0x90
0B17D9             0050*  
0B17D9             0051*  ; &98-&9F 	152-159 	Circle fill
0B17D9             0052*  plot_cf: equ 0x98
0B17D9             0053*  
0B17D9             0054*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
0B17D9             0055*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
0B17D9             0056*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
0B17D9             0057*  
0B17D9             0058*  ; &B8-&BF 	184-191 	Rectangle copy/move
0B17D9             0059*  plot_rcm: equ 0xB8
0B17D9             0060*  
0B17D9             0061*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
0B17D9             0062*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
0B17D9             0063*  ; &D0-&D7 	208-215 	Not defined
0B17D9             0064*  ; &D8-&DF 	216-223 	Not defined
0B17D9             0065*  ; &E0-&E7 	224-231 	Not defined
0B17D9             0066*  
0B17D9             0067*  ; &E8-&EF 	232-239 	Bitmap plot §
0B17D9             0068*  plot_bmp: equ 0xE8
0B17D9             0069*  
0B17D9             0070*  ; &F0-&F7 	240-247 	Not defined
0B17D9             0071*  ; &F8-&FF 	248-255 	Not defined
0B17D9             0072*  
0B17D9             0073*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
0B17D9             0074*  ; Agon Console8 VDP 2.2.0
0B17D9             0075*  
0B17D9             0076*  ; Within each group of eight plot codes, the effects are as follows:
0B17D9             0077*  ; Plot code 	Effect
0B17D9             0078*  ; 0 	Move relative
0B17D9             0079*  mv_rel: equ 0
0B17D9             0080*  
0B17D9             0081*  ; 1 	Plot relative in current foreground colour
0B17D9             0082*  dr_rel_fg: equ 1
0B17D9             0083*  
0B17D9             0084*  ; 2 	Not supported (Plot relative in logical inverse colour)
0B17D9             0085*  ; 3 	Plot relative in current background colour
0B17D9             0086*  dr_rel_bg: equ 3
0B17D9             0087*  
0B17D9             0088*  ; 4 	Move absolute
0B17D9             0089*  mv_abs: equ 4
0B17D9             0090*  
0B17D9             0091*  ; 5 	Plot absolute in current foreground colour
0B17D9             0092*  dr_abs_fg: equ 5
0B17D9             0093*  
0B17D9             0094*  ; 6 	Not supported (Plot absolute in logical inverse colour)
0B17D9             0095*  ; 7 	Plot absolute in current background colour
0B17D9             0096*  dr_abs_bg: equ 7
0B17D9             0097*  
0B17D9             0098*  ; Codes 0-3 use the position data provided as part of the command
0B17D9             0099*  ; as a relative position, adding the position given to the current
0B17D9             0100*  ; graphical cursor position. Codes 4-7 use the position data provided
0B17D9             0101*  ; as part of the command as an absolute position, setting the current
0B17D9             0102*  ; graphical cursor position to the position given.
0B17D9             0103*  
0B17D9             0104*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
0B17D9             0105*  ; current pixel colour. These operations cannot currently be supported
0B17D9             0106*  ; by the graphics system the Agon VDP uses, so these codes are not
0B17D9             0107*  ; supported. Support for these codes may be added in a future version
0B17D9             0108*  ; of the VDP firmware.
0B17D9             0109*  
0B17D9             0110*  ; 16 colour palette constants
0B17D9             0111*  c_black: equ 0
0B17D9             0112*  c_red_dk: equ 1
0B17D9             0113*  c_green_dk: equ 2
0B17D9             0114*  c_yellow_dk: equ 3
0B17D9             0115*  c_blue_dk: equ 4
0B17D9             0116*  c_magenta_dk: equ 5
0B17D9             0117*  c_cyan_dk: equ 6
0B17D9             0118*  c_grey: equ 7
0B17D9             0119*  c_grey_dk: equ 8
0B17D9             0120*  c_red: equ 9
0B17D9             0121*  c_green: equ 10
0B17D9             0122*  c_yellow: equ 11
0B17D9             0123*  c_blue: equ 12
0B17D9             0124*  c_magenta: equ 13
0B17D9             0125*  c_cyan: equ 14
0B17D9             0126*  c_white: equ 15
0B17D9             0127*  
0B17D9             0128*  ; VDU 25, mode, x; y;: PLOT command
0B17D9             0129*  ; inputs: a=mode, bc=x0, de=y0
0B17D9             0130*  vdu_plot:
0B17D9 32 F3 17 0B 0131*      ld (@mode),a
0B17DD ED 43 F4 17 0132*      ld (@x0),bc
       0B          
0B17E2 ED 53 F6 17 0133*      ld (@y0),de
       0B          
0B17E7 21 F2 17 0B 0134*  	ld hl,@cmd
0B17EB 01 06 00 00 0135*  	ld bc,@end-@cmd
0B17EF 5B DF       0136*  	rst.lil $18
0B17F1 C9          0137*  	ret
0B17F2 19          0138*  @cmd:   db 25
0B17F3 00          0139*  @mode:  db 0
0B17F4 00 00       0140*  @x0: 	dw 0
0B17F6 00 00       0141*  @y0: 	dw 0
0B17F8 00          0142*  @end:   db 0 ; extra byte to soak up deu
0B17F9             0143*  
0B17F9             0144*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0B17F9             0145*  ; &E8-&EF 	232-239 	Bitmap plot §
0B17F9             0146*  ; VDU 25, mode, x; y;: PLOT command
0B17F9             0147*  ; inputs: bc=x0, de=y0
0B17F9             0148*  ; prerequisites: vdu_buff_select
0B17F9             0149*  vdu_plot_bmp:
0B17F9 ED 43 10 18 0150*      ld (@x0),bc
       0B          
0B17FE ED 53 12 18 0151*      ld (@y0),de
       0B          
0B1803 21 0E 18 0B 0152*  	ld hl,@cmd
0B1807 01 06 00 00 0153*  	ld bc,@end-@cmd
0B180B 5B DF       0154*  	rst.lil $18
0B180D C9          0155*  	ret
0B180E 19          0156*  @cmd:   db 25
0B180F ED          0157*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0B1810 00 00       0158*  @x0: 	dw 0x0000
0B1812 00 00       0159*  @y0: 	dw 0x0000
0B1814 00          0160*  @end:   db 0x00 ; padding
0B1815             0161*  
0B1815             0162*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0B1815             0163*  ; &E8-&EF 	232-239 	Bitmap plot §
0B1815             0164*  ; VDU 25, mode, x; y;: PLOT command
0B1815             0165*  ; inputs: bc=x0, de=y0
0B1815             0166*  ; USING 16.8 FIXED POINT COORDINATES
0B1815             0167*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
0B1815             0168*  ;   the fractional portiion of the inputs are truncated
0B1815             0169*  ;   leaving only the 16-bit integer portion
0B1815             0170*  ; prerequisites: vdu_buff_select
0B1815             0171*  vdu_plot_bmp168:
0B1815             0172*  ; populate in the reverse of normal to keep the
0B1815             0173*  ; inputs from stomping on each other
0B1815 ED 53 33 18 0174*      ld (@y0-1),de
       0B          
0B181A ED 43 31 18 0175*      ld (@x0-1),bc
       0B          
0B181F 3E ED       0176*      ld a,plot_bmp+dr_abs_fg ; 0xED
0B1821 32 31 18 0B 0177*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
0B1825 21 30 18 0B 0178*  	ld hl,@cmd
0B1829 01 06 00 00 0179*  	ld bc,@end-@cmd
0B182D 5B DF       0180*  	rst.lil $18
0B182F C9          0181*  	ret
0B1830 19          0182*  @cmd:   db 25
0B1831 ED          0183*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0B1832 00 00       0184*  @x0: 	dw 0x0000
0B1834 00 00       0185*  @y0: 	dw 0x0000
0B1836             0186*  @end:  ; no padding required b/c we shifted de right
0B1836             0187*  
0B1836             0188*  ; draw a filled rectangle
0B1836             0189*  vdu_plot_rf:
0B1836 ED 43 5D 18 0190*      ld (@x0),bc
       0B          
0B183B ED 53 5F 18 0191*      ld (@y0),de
       0B          
0B1840 DD 22 63 18 0192*      ld (@x1),ix
       0B          
0B1845 FD 22 65 18 0193*      ld (@y1),iy
       0B          
0B184A 3E 19       0194*      ld a,25 ; we have to reload the 2nd plot command
0B184C 32 61 18 0B 0195*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0B1850 21 5B 18 0B 0196*  	ld hl,@cmd0
0B1854 01 0C 00 00 0197*  	ld bc,@end-@cmd0
0B1858 5B DF       0198*  	rst.lil $18
0B185A C9          0199*      ret
0B185B 19          0200*  @cmd0:  db 25 ; plot
0B185C 04          0201*  @arg0:  db plot_sl_both+mv_abs
0B185D 00 00       0202*  @x0:    dw 0x0000
0B185F 00 00       0203*  @y0:    dw 0x0000
0B1861 19          0204*  @cmd1:  db 25 ; plot
0B1862 65          0205*  @arg1:  db plot_rf+dr_abs_fg
0B1863 00 00       0206*  @x1:    dw 0x0000
0B1865 00 00       0207*  @y1:    dw 0x0000
0B1867 00          0208*  @end:   db 0x00 ; padding
0B1868             0209*  
0B1868             0210*  ; draw a filled circle
0B1868             0211*  vdu_plot_cf:
0B1868 ED 43 8F 18 0212*      ld (@x0),bc
       0B          
0B186D ED 53 91 18 0213*      ld (@y0),de
       0B          
0B1872 DD 22 95 18 0214*      ld (@x1),ix
       0B          
0B1877 FD 22 97 18 0215*      ld (@y1),iy
       0B          
0B187C 3E 19       0216*      ld a,25 ; we have to reload the 2nd plot command
0B187E 32 93 18 0B 0217*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0B1882 21 8D 18 0B 0218*  	ld hl,@cmd0
0B1886 01 0C 00 00 0219*  	ld bc,@end-@cmd0
0B188A 5B DF       0220*  	rst.lil $18
0B188C C9          0221*      ret
0B188D 19          0222*  @cmd0:  db 25 ; plot
0B188E 04          0223*  @arg0:  db plot_sl_both+mv_abs
0B188F 00 00       0224*  @x0:    dw 0x0000
0B1891 00 00       0225*  @y0:    dw 0x0000
0B1893 19          0226*  @cmd1:  db 25 ; plot
0B1894 9D          0227*  @arg1:  db plot_cf+dr_abs_fg
0B1895 00 00       0228*  @x1:    dw 0x0000
0B1897 00 00       0229*  @y1:    dw 0x0000
0B1899 00          0230*  @end:   db 0x00 ; padding
0B189A             0231*  
0B189A             0232*  ; VDU 25, mode, x; y;: PLOT command
0B189A             0233*  ; inputs: a=mode, ix=x0, iy=y0
0B189A             0234*  plot:
0B189A 32 B4 18 0B 0235*      ld (@mode),a
0B189E DD 22 B5 18 0236*      ld (@x0),ix
       0B          
0B18A3 FD 22 B7 18 0237*      ld (@y0),iy
       0B          
0B18A8 21 B3 18 0B 0238*  	ld hl,@cmd
0B18AC 01 06 00 00 0239*  	ld bc,@end-@cmd
0B18B0 5B DF       0240*  	rst.lil $18
0B18B2 C9          0241*  	ret
0B18B3 19          0242*  @cmd:   db 25
0B18B4 00          0243*  @mode:  db 0
0B18B5 00 00       0244*  @x0: 	dw 0
0B18B7 00 00       0245*  @y0: 	dw 0
0B18B9 00          0246*  @end:   db 0 ; padding
0B18BA             0247*  
0B18BA             0248*  ; VDU 5: Write text at graphics cursor
0B18BA             0249*  ; inputs: hl = pointer to text, ix=x0, iy=y0
0B18BA             0250*  ; prerequisites: gcol foreground set, VDU 5 set
0B18BA             0251*  plot_text:
0B18BA E5          0252*      push hl ; save text pointer
0B18BB             0253*  ; move graphics cursor to x0, y0
0B18BB 3E 44       0254*      ld a,plot_pt+mv_abs
0B18BD CD 9A 18 0B 0255*      call plot
0B18C1             0256*  ; write text
0B18C1 E1          0257*      pop hl ; restore text pointer
0B18C2 CD 77 02 0B 0258*      call printString
0B18C6 C9          0259*      ret
0B18C7             0028   
0B18C7             0029   ; SHAWN'S INCLUDES
0B18C7             0030   	INCLUDE	"strings24.asm"
0B18C7             0001*  ;------------------------------------------------------------------------
0B18C7             0002*  ;  strings24.asm
0B18C7             0003*  ;
0B18C7             0004*  ; 24-bit native ez80 strings routines for numerical processing
0B18C7             0005*  ;  Copyright (c) Shawn Sijnstra 2024
0B18C7             0006*  ;  MIT license
0B18C7             0007*  ;------------------------------------------------------------------------
0B18C7             0008*  
0B18C7             0009*  ;Print signed value in HLU in decimal with leading 0s removed
0B18C7             0010*  ; and postpended with a minus sign if was negative
0B18C7             0011*  ; Uses HLU, DEU, BCU
0B18C7             0012*  print_HLU_s24:
0B18C7 CD 6D 07 0B 0013*  	call abs_hlu
0B18CB F5          0014*  	push af ; save the sign and zero flags
0B18CC CD D7 18 0B 0015*  	call print_HLU_u24
0B18D0 F1          0016*  	pop af
0B18D1 F0          0017*  	ret p ; HLU was positive so nothig more to do
0B18D2 3E 2D       0018*  	ld a,'-'
0B18D4 5B D7       0019*  	rst.lil 10h
0B18D6 C9          0020*  	ret
0B18D7             0021*  
0B18D7             0022*  ;------------------------------------------------------------------------
0B18D7             0023*  ;Full print and buffer routine so you can adjust behaviour
0B18D7             0024*  ; Double-Dabble AKA shift-and-add-3 algorithm
0B18D7             0025*  ; breakdown at https://en.wikipedia.org/wiki/Double_dabble
0B18D7             0026*  ;Print value in HLU in decimal with leading 0s removed
0B18D7             0027*  ; Uses HLU, DEU, BCU
0B18D7             0028*  ;------------------------------------------------------------------------
0B18D7             0029*  
0B18D7             0030*  print_HLU_u24:
0B18D7 22 B4 19 0B 0031*  	ld	(hex_temp),hl
0B18DB 06 08       0032*  	ld	b,8	;8 digits max here with 24 bit unsigned
0B18DD 11 B7 19 0B 0033*  	ld	de,outbuf
0B18E1 D5          0034*  	push	de
0B18E2 21 07 00 00 0035*  	ld	hl,7
0B18E6 19          0036*  	add	hl,de
0B18E7 E5          0037*  	push	hl
0B18E8 D1          0038*  	pop	de	;copy HLU to DEU
0B18E9 AF          0039*  	xor	a
0B18EA             0040*  _pde_u_zerobuf:
0B18EA 77          0041*  	ld	(hl),a	;zero out the output
0B18EB 2B          0042*  	dec	hl
0B18EC 10 FC       0043*  	djnz	_pde_u_zerobuf
0B18EE             0044*  
0B18EE 0E 18       0045*  	ld c,3 * 8	;4 * 8	; number of loops through NUM_SRC_BYTES * 8
0B18F0             0046*  _bcd_Convert:
0B18F0             0047*  
0B18F0 21 B4 19 0B 0048*  	ld hl,hex_temp
0B18F4             0049*  ;
0B18F4 CB 26       0050*  	sla (hl)
0B18F6 23          0051*  	inc hl
0B18F7 CB 16       0052*  	rl (hl)
0B18F9 23          0053*  	inc hl
0B18FA CB 16       0054*  	rl (hl)		;24 bits rolled right
0B18FC             0055*  
0B18FC             0056*  
0B18FC 06 08       0057*          ld	b,8	;8 digits max for 24 bit decimal output
0B18FE D5          0058*  	push	de
0B18FF E1          0059*  	pop	hl
0B1900             0060*  
0B1900             0061*  _bcd_Add3:
0B1900 7E          0062*  	ld	a,(hl)
0B1901 8F          0063*  	adc	a
0B1902 27          0064*          daa		;this is add 3 after shifting left; i.e. add 6.
0B1903 FE 10       0065*  	cp	10h	;did we roll over nibble?
0B1905 3F          0066*  	ccf
0B1906 CB A7       0067*  	res	4,a
0B1908             0068*  
0B1908 77          0069*          ld (hl),a
0B1909 2B          0070*  	dec	hl
0B190A 10 F4       0071*          djnz	_bcd_Add3	;loop for decimal digits
0B190C 0D          0072*          dec c
0B190D 20 E1       0073*          jr nz, _bcd_Convert	;loop around
0B190F             0074*  
0B190F             0075*  
0B190F E1          0076*  	pop	hl
0B1910 E5          0077*  	push	hl
0B1911 06 07       0078*          ld	b,8-1		;one less than total in case output is '0'
0B1913             0079*  _pde_u_make_ascii:
0B1913 7E          0080*  	ld	a,(hl)
0B1914 B7          0081*  	or	a
0B1915 20 05       0082*  	jr	nz,_pde_u_make_ascii2
0B1917 36 20       0083*  	ld	(hl),' '
0B1919 23          0084*  	inc	hl
0B191A 10 F7       0085*  	djnz	_pde_u_make_ascii
0B191C             0086*  _pde_u_make_ascii2:
0B191C 04          0087*  	inc	b
0B191D             0088*  _pde_u_make_ascii3:
0B191D 7E          0089*  	ld	a,(hl)
0B191E F6 30       0090*  	or	30h
0B1920 77          0091*  	ld	(hl),a
0B1921 23          0092*  	inc	hl
0B1922 10 F9       0093*  	djnz	_pde_u_make_ascii3
0B1924             0094*  
0B1924 E1          0095*  	pop	hl
0B1925 06 08       0096*  	ld	b,8
0B1927             0097*  _pde_u_final_out:
0B1927 7E          0098*  	ld	a,(hl)
0B1928 23          0099*  	inc	hl
0B1929 FE 20       0100*  	cp	' '
0B192B 28 02       0101*  	jr	z,_pde_u_final_out_strip
0B192D 5B D7       0102*  	rst.lil	10h
0B192F             0103*  _pde_u_final_out_strip:
0B192F 10 F6       0104*  	djnz	_pde_u_final_out
0B1931 C9          0105*  	ret
0B1932             0106*  
0B1932             0107*  ;------------------------------------------------------------------------
0B1932             0108*  ; is_digit
0B1932             0109*  ; C flag set if A is a digit
0B1932             0110*  ; preserves all registers
0B1932             0111*  ;------------------------------------------------------------------------
0B1932             0112*  is_digit:
0B1932 FE 30       0113*  	cp	'0'
0B1934 3F          0114*  	ccf
0B1935 D0          0115*  	ret	nc	;less that '0'
0B1936 FE 3A       0116*  	cp	'9' + 1
0B1938 C9          0117*  	ret
0B1939             0118*  
0B1939             0119*  
0B1939             0120*  ;------------------------------------------------------------------------
0B1939             0121*  ; char2hex
0B1939             0122*  ; Input: ASCII nibble in A
0B1939             0123*  ; Returns: if valid nibble value in A; else 0FFh in A
0B1939             0124*  ;------------------------------------------------------------------------
0B1939             0125*  char2hex:
0B1939 FE 30       0126*  	CP	'0'
0B193B 38 1D       0127*  	JR	C, char_not_hex
0B193D FE 3A       0128*  	CP	'9' + 1
0B193F 30 03       0129*  	JR	NC, char_not_09
0B1941 D6 30       0130*  	sub	'0'
0B1943 C9          0131*  	ret
0B1944             0132*  
0B1944             0133*  char_not_09:
0B1944             0134*  	; char is not 0 to 9. Try upper case
0B1944 FE 41       0135*  	CP	'A'
0B1946 38 12       0136*  	JR	C, char_not_hex
0B1948 FE 47       0137*  	CP	'F' + 1
0B194A 30 03       0138*  	JR	NC, char_not_AF
0B194C D6 37       0139*  	sub	'A'-10
0B194E C9          0140*  	ret
0B194F             0141*  
0B194F             0142*  char_not_AF:
0B194F             0143*  	; char is not upper case A-F. Try lower
0B194F FE 61       0144*  	CP	'a'
0B1951 38 07       0145*  	JR	C, char_not_hex
0B1953 FE 67       0146*  	CP	'f' + 1
0B1955 30 03       0147*  	JR	NC, char_not_hex
0B1957 D6 57       0148*  	sub	'a' - 10
0B1959 C9          0149*  	RET
0B195A             0150*  
0B195A             0151*  char_not_hex:
0B195A 3E FF       0152*   	ld	a,0FFh	;return -1 for not a valid hex digit
0B195C C9          0153*  	RET
0B195D             0154*  
0B195D             0155*  ;------------------------------------------------------------------------
0B195D             0156*  ;  newline
0B195D             0157*  ;  Output CR+LF; all registers preserved
0B195D             0158*  ;------------------------------------------------------------------------
0B195D             0159*  newline:
0B195D F5          0160*         push   AF
0B195E 3E 0D       0161*         LD     A, 13
0B1960 5B D7       0162*         RST.LIL    10h
0B1962 3E 0A       0163*         LD     A, 10
0B1964 5B D7       0164*         RST.LIL    10h
0B1966 F1          0165*         POP    AF
0B1967 C9          0166*         RET
0B1968             0167*  
0B1968             0168*  ;------------------------------------------------------------------------
0B1968             0169*  ;  put_nibble
0B1968             0170*  ;  Output a single hex nibble in A
0B1968             0171*  ;  All registers preserved
0B1968             0172*  ;------------------------------------------------------------------------
0B1968             0173*  put_nibble:
0B1968 F5          0174*  	push   AF
0B1969 C6 90       0175*  	add    a,090h ;Neat trick to convert hex nibble in A to ASCII
0B196B 27          0176*  	daa
0B196C CE 40       0177*  	adc    a,040h
0B196E 27          0178*  	daa
0B196F 5B D7       0179*  	RST.LIL    10h	;output character in A
0B1971 F1          0180*  	pop    AF
0B1972 C9          0181*  	ret
0B1973             0182*  
0B1973             0183*  ;------------------------------------------------------------------------
0B1973             0184*  ;  print_A
0B1973             0185*  ;  Output the 8-bit hex number A
0B1973             0186*  ;  All registers preserved
0B1973             0187*  ;------------------------------------------------------------------------
0B1973             0188*  print_A:
0B1973 F5          0189*  	push 	AF
0B1974 F5          0190*  	push 	AF	;save for second nibble
0B1975 0F          0191*  	rrca
0B1976 0F          0192*  	rrca
0B1977 0F          0193*  	rrca
0B1978 0F          0194*  	rrca
0B1979 E6 0F       0195*  	and	0Fh	;first nibble
0B197B CD 68 19 0B 0196*  	call	put_nibble
0B197F F1          0197*  	pop 	AF
0B1980 E6 0F       0198*  	and	0Fh	;second nibble
0B1982 CD 68 19 0B 0199*  	call	put_nibble
0B1986 F1          0200*  	pop 	AF
0B1987 C9          0201*  	ret
0B1988             0202*  
0B1988             0203*  ;------------------------------------------------------------------------
0B1988             0204*  ;  print_HLU_hex
0B1988             0205*  ;  Output the 24-bit hex number HLU; other registers preserved
0B1988             0206*  ;------------------------------------------------------------------------
0B1988             0207*  print_HLU_hex:
0B1988 F5          0208*         push   AF
0B1989 22 B4 19 0B 0209*         ld     (hex_temp),hl
0B198D 3A B6 19 0B 0210*         ld     a,(hex_temp+2)
0B1991 CD 73 19 0B 0211*         call   print_A
0B1995 3A B5 19 0B 0212*         ld     a,(hex_temp+1)
0B1999 CD 73 19 0B 0213*         call   print_A
0B199D 3A B4 19 0B 0214*         ld     a,(hex_temp)
0B19A1 CD 73 19 0B 0215*         call   print_A
0B19A5 F1          0216*         POP    AF
0B19A6 C9          0217*         RET
0B19A7             0218*  
0B19A7             0219*  ;------------------------------------------------------------------------
0B19A7             0220*  ;  puts
0B19A7             0221*  ;  Output a zero-terminated string whose address is in HL; all
0B19A7             0222*  ;  registers preserved.
0B19A7             0223*  ;------------------------------------------------------------------------
0B19A7             0224*  puts:
0B19A7 F5          0225*         push   AF
0B19A8 C5          0226*         push   BC
0B19A9 01 00 00 00 0227*         ld     BC, 0                ; Set to 0, so length ignored...
0B19AD 3E 00       0228*         ld     A, 0                 ; Use character in A as delimiter
0B19AF 5B DF       0229*         RST.LIL    18h                  ; This calls a RST in the eZ80 address space
0B19B1 C1          0230*         pop    BC
0B19B2 F1          0231*         pop    AF
0B19B3 C9          0232*         ret
0B19B4             0233*  
0B19B4             0234*  ;------------------------------------------------------------------------
0B19B4             0235*  ; Data area
0B19B4             0236*  ; Storage for 24 bit conversion
0B19B4             0237*  ;------------------------------------------------------------------------
0B19B4             0238*  hex_temp:
0B19B4 00 00 00    0239*         dw24     0      ;3 bytes for HL used for both hex and decimal temp
0B19B7             0240*  
0B19B7             0241*  outbuf:
0B19B7 31 36 37 37 0242*  	db	"16777215 "	;largest number with an extra space
       37 32 31 35 
       20          
0B19C0             0031   
0B19C0             0032   ; APPLICATION INCLUDES
0B19C0 55 73 61 67 0033   str_usage: ASCIZ "Usage: scratch <args>\r\n"
       65 3A 20 73 
       63 72 61 74 
       63 68 20 3C 
       61 72 67 73 
       3E 0D 0A 00 
0B19D8 45 72 72 6F 0034   str_error: ASCIZ "Error!\r\n"
       72 21 0D 0A 
       00          
0B19E1 53 75 63 63 0035   str_success: ASCIZ "Success!\r\n"
       65 73 73 21 
       0D 0A 00    
0B19EC             0036   
0B19EC             0037   ; This is a scratch moslet for testing new features
0B19EC             0038   ; Parameters:
0B19EC             0039   ;
0B19EC             0040   
0B19EC             0041   ; ========= BOILERPLATE MAIN LOOP =========
0B19EC             0042   ; The main routine
0B19EC             0043   ; IXU: argv - pointer to array of parameters
0B19EC             0044   ;   C: argc - number of parameters
0B19EC             0045   ; Returns:
0B19EC             0046   ;  HL: Error code, or 0 if OK
0B19EC             0047   
0B19EC             0048   min_args: equ 2
0B19EC             0049   
0B19EC             0050   _main:
0B19EC 79          0051       ld a,c              ; how many arguments?
0B19ED FE 02       0052       cp min_args         ; not enough?
0B19EF 30 1A       0053       jr nc,main          ; if enough, go to main loop
0B19F1 21 C0 19 0B 0054       ld hl,str_usage     ; if not enough, print usage
0B19F5 CD 77 02 0B 0055       call printString
0B19F9             0056                           ; fall through to _main_end_error
0B19F9             0057   
0B19F9             0058   _main_end_error:
0B19F9 21 D8 19 0B 0059       ld hl,str_error     ; print error message
0B19FD CD 77 02 0B 0060       call printString
0B1A01 21 13 00 00 0061       ld hl,19            ; return error code 19
0B1A05 C9          0062       ret
0B1A06             0063   
0B1A06             0064   _main_end_ok:
0B1A06             0065       ; ld hl,str_success   ; print success message
0B1A06             0066       ; call printString
0B1A06 21 00 00 00 0067       ld hl,0             ; return 0 for success
0B1A0A C9          0068       ret
0B1A0B             0069   
0B1A0B             0070   ; ========= BEGIN CUSTOM MAIN LOOP =========
0B1A0B             0071   main:
0B1A0B 0D          0072       dec c               ; decrement the argument count to skip the program name
0B1A0C             0073   
0B1A0C             0074       ; call get_arg_s168
0B1A0C             0075       ; ex de,hl
0B1A0C             0076       ; call print_s168
0B1A0C             0077       ; call printNewLine
0B1A0C             0078       ; jp _main_end_ok
0B1A0C             0079   
0B1A0C             0080   test_umul168:
0B1A0C CD EC 1A 0B 0081       call get_arg_s168
0B1A10 D5          0082       push de
0B1A11 EB          0083       ex de,hl
0B1A12 CD 30 04 0B 0084       call print_s168
0B1A16             0085   
0B1A16 CD EC 1A 0B 0086       call get_arg_s168
0B1A1A D5          0087       push de
0B1A1B EB          0088       ex de,hl
0B1A1C CD 30 04 0B 0089       call print_s168
0B1A20             0090   
0B1A20 E1          0091       pop hl
0B1A21 D1          0092       pop de
0B1A22 CD B9 08 0B 0093       call umul168
0B1A26 CD 30 04 0B 0094       call print_s168
0B1A2A CD 8C 02 0B 0095       call printNewLine
0B1A2E             0096   
0B1A2E C3 06 1A 0B 0097       jp _main_end_ok
0B1A32             0098   
0B1A32             0099   test_umul24x24:
0B1A32 CD F7 1A 0B 0100       call get_arg_s24
0B1A36 D5          0101       push de
0B1A37 CD F7 1A 0B 0102       call get_arg_s24
0B1A3B E1          0103       pop hl
0B1A3C             0104   
0B1A3C CD 5A 05 0B 0105       call dumpRegistersHex
0B1A40 CD 5B 08 0B 0106       call umul24x24
0B1A44             0107   
0B1A44 2A B6 08 0B 0108       ld hl,(umul24x24out+3)
0B1A48 CD D4 02 0B 0109       call printHexUHL
0B1A4C             0110   
0B1A4C 2A B3 08 0B 0111       ld hl,(umul24x24out+0)
0B1A50 CD D4 02 0B 0112       call printHexUHL
0B1A54 CD 8C 02 0B 0113       call printNewLine
0B1A58             0114   
0B1A58 C3 06 1A 0B 0115       jp _main_end_ok
0B1A5C             0116   
0B1A5C             0117   test_umul24x8:
0B1A5C             0118   ; 24-bit argument to BHL
0B1A5C CD F7 1A 0B 0119       call get_arg_s24
0B1A60 EB          0120       ex de,hl
0B1A61             0121       HLU_TO_A
0B1A61 E5          0001M          push hl ; 4 cycles
0B1A62 33          0002M          inc sp ; 1 cycle
0B1A63 F1          0003M          pop af  ; 4 cycles
0B1A64 3B          0004M          dec sp ; 1 cycle
0B1A65             0005M                 ; 10 cycles total
0B1A65 47          0122       ld b,a ; b = high 8-bits
0B1A66 E5          0123       push hl ; store low 16-bits, b will be fine
0B1A67             0124   
0B1A67             0125   ; 8-bit argument to A TODO: write an 8-bit argument parser for performance
0B1A67 CD F7 1A 0B 0126       call get_arg_s24
0B1A6B 7B          0127       ld a,e ; 8-bit argument
0B1A6C E1          0128       pop hl ; bhl is the 24-bit argument
0B1A6D             0129   
0B1A6D             0130   ; do the multiplication
0B1A6D CD 2C 08 0B 0131       call umul24x8
0B1A71 CD F6 02 0B 0132       call printHexABHL
0B1A75 CD 8C 02 0B 0133       call printNewLine
0B1A79 C3 06 1A 0B 0134       jp _main_end_ok
0B1A7D             0135   
0B1A7D             0136   test_scratch:
0B1A7D CD F7 1A 0B 0137       call get_arg_s24
0B1A81 EB          0138       ex de,hl
0B1A82             0139       HLU_TO_A
0B1A82 E5          0001M          push hl ; 4 cycles
0B1A83 33          0002M          inc sp ; 1 cycle
0B1A84 F1          0003M          pop af  ; 4 cycles
0B1A85 3B          0004M          dec sp ; 1 cycle
0B1A86             0005M                 ; 10 cycles total
0B1A86 CD 5A 05 0B 0140       call dumpRegistersHex
0B1A8A CD 8C 02 0B 0141       call printNewLine
0B1A8E C3 06 1A 0B 0142       jp _main_end_ok
0B1A92             0143   
0B1A92             0144   test_udiv24:
0B1A92             0145   ; get dividend
0B1A92 CD F7 1A 0B 0146       call get_arg_s24
0B1A96 D5          0147       push de
0B1A97             0148   ; get divisor
0B1A97 CD F7 1A 0B 0149       call get_arg_s24
0B1A9B E1          0150       pop hl ; dividend (was de)
0B1A9C CD 5A 05 0B 0151       call dumpRegistersHex
0B1AA0             0152   ; do the division
0B1AA0 CD F8 08 0B 0153       call udiv24 ; ude = uhl / ude rem uhl
0B1AA4 EB          0154       ex de,hl    ; uhl = uhl / ude rem de
0B1AA5 CD 5A 05 0B 0155       call dumpRegistersHex
0B1AA9 CD AD 03 0B 0156       call print_u24
0B1AAD CD 8C 02 0B 0157       call printNewLine
0B1AB1 C3 06 1A 0B 0158       jp _main_end_ok
0B1AB5             0159   
0B1AB5             0160   ; inputs: b.c is 8.8 dividend, ud.e is 16.8 divisor
0B1AB5             0161   ; outputs: uh.l is the 16.8 quotient ub.c is the 16.8 remainder
0B1AB5             0162   ; destroys: a,bc
0B1AB5             0163   test_sdiv168:
0B1AB5             0164   ; get dividend
0B1AB5 CD EC 1A 0B 0165       call get_arg_s168
0B1AB9 D5          0166       push de
0B1ABA             0167   ; get divisor
0B1ABA CD EC 1A 0B 0168       call get_arg_s168
0B1ABE C1          0169       pop bc ; dividend to bc (was de)
0B1ABF             0170   ; do the division
0B1ABF CD 34 09 0B 0171       call sdiv168 ; uh.l = ub.c / ud.e
0B1AC3 CD 5A 05 0B 0172       call dumpRegistersHex
0B1AC7 CD 30 04 0B 0173       call print_s168
0B1ACB CD 8C 02 0B 0174       call printNewLine
0B1ACF C3 06 1A 0B 0175       jp _main_end_ok
0B1AD3             0176   
0B1AD3             0177   test_deg_360_to_255:
0B1AD3 CD EC 1A 0B 0178       call get_arg_s168 ; argument value to de
0B1AD7 EB          0179       ex de,hl             ; argument to hl for function call
0B1AD8 CD 0C 0B 0B 0180       call deg_360_to_255
0B1ADC CD 5A 05 0B 0181       call dumpRegistersHex
0B1AE0 CD 30 04 0B 0182       call print_s168
0B1AE4 CD 8C 02 0B 0183       call printNewLine
0B1AE8 C3 06 1A 0B 0184       jp _main_end_ok
0B1AEC             0185   
0B1AEC             0186   ; ========== HELPER FUNCTIONS ==========
0B1AEC             0187   ; get the next argument after ix as a signed 16.8 fixed point number
0B1AEC             0188   ; inputs: ix = pointer to the argument string
0B1AEC             0189   ; outputs: ude = signed 16.8 fixed point number
0B1AEC             0190   ; destroys: a, d, e, h, l, f
0B1AEC             0191   get_arg_s168:
0B1AEC ED 32 03    0192       lea ix,ix+3 ; point to the next argument
0B1AEF DD 27 00    0193       ld hl,(ix)  ; get the argument string
0B1AF2 CD 98 01 0B 0194       call asc_to_s168 ; convert the string to a number
0B1AF6 C9          0195       ret ; return with the value in DE
0B1AF7             0196   
0B1AF7             0197   ; Inputs: ix = pointer to the argument string
0B1AF7             0198   ; Outputs: ude = signed 24-bit integer
0B1AF7             0199   ; Destroys: a, d, e, h, l, f
0B1AF7             0200   get_arg_s24:
0B1AF7 ED 32 03    0201       lea ix,ix+3 ; point to the next argument
0B1AFA DD 27 00    0202       ld hl,(ix)  ; get the argument string
0B1AFD CD 45 01 0B 0203       call asc_to_s24 ; convert the string to a number
0B1B01 C9          0204       ret ; return with the value in DE
0B1B02             0205   
0B1B02             0206   get_plot_coords:
0B1B02             0207   ; get the move coordinates
0B1B02 ED 32 03    0208       lea ix,ix+3 ; pointer to next argument address
0B1B05 DD 27 00    0209       ld hl,(ix)  ; pointer to the x coordinate string
0B1B08 CD 98 01 0B 0210       call asc_to_s168 ; de = x coordinate
0B1B0C D5          0211       push de
0B1B0D C1          0212       pop bc ; bc = x coordinate
0B1B0E ED 32 03    0213       lea ix,ix+3 ; pointer to next argument address
0B1B11 DD 27 00    0214       ld hl,(ix)  ; pointer to the y coordinate string
0B1B14 CD 98 01 0B 0215       call asc_to_s168 ; de = y coordinate
0B1B18 C9          0216       ret
0B1B19             0217   
0B1B19             0218   ; match the next argument after ix to the dispatch table at iy
0B1B19             0219   ;   - arguments and dispatch entries are zero-terminated, case-sensitive strings
0B1B19             0220   ;   - final entry of dispatch table must be a 3-byte zero or bad things will happen
0B1B19             0221   ; returns: NO MATCH: iy=dispatch list terminator a=1 and zero flag reset
0B1B19             0222   ;          ON MATCH: iy=dispatch address, a=0 and zero flag se
0B1B19             0223   ; destroys: a, hl, de, ix, iy, flags
0B1B19             0224   match_next:
0B1B19 ED 32 03    0225       lea ix,ix+3         ; point to the next argument
0B1B1C             0226   @loop:
0B1B1C FD 27 00    0227       ld hl,(iy)          ; pointer argument dispatch record
0B1B1F             0228       sign_hlu            ; check for list terminator
0B1B1F 19          0001M          add hl,de
0B1B20 B7          0002M          or a
0B1B21 ED 52       0003M          sbc hl,de
0B1B23 CA 3B 1B 0B 0229       jp z,@no_match      ; if a=0, return error
0B1B27 23          0230       inc hl              ; skip over jp instruction
0B1B28 23          0231       inc hl
0B1B29 DD 17 00    0232       ld de,(ix)          ; pointer to the argument string
0B1B2C CD 41 1B 0B 0233       call str_equal      ; compare the argument to the dispatch table entry
0B1B30 CA 3D 1B 0B 0234       jp z,@match         ; if equal, return success
0B1B34 ED 33 03    0235       lea iy,iy+3         ; if not equal, bump iy to next dispatch table entry
0B1B37 C3 1C 1B 0B 0236       jp @loop            ; and loop
0B1B3B             0237   @no_match:
0B1B3B 3C          0238       inc a               ; no match so return a=1 and zero flag reset
0B1B3C C9          0239       ret
0B1B3D             0240   @match:
0B1B3D FD 37 00    0241       ld iy,(iy)          ; get the function pointer
0B1B40 C9          0242       ret                 ; return a=0 and zero flag set
0B1B41             0243   
0B1B41             0244   ; compare two zero-terminated strings for equality, case-sensitive
0B1B41             0245   ; hl: pointer to first string, de: pointer to second string
0B1B41             0246   ; returns: z if equal, nz if not equal
0B1B41             0247   ; destroys: a, hl, de
0B1B41             0248   str_equal:
0B1B41 1A          0249       ld a,(de)           ; get the first character
0B1B42 BE          0250       cp (hl)             ; compare to the second character
0B1B43 C0          0251       ret nz              ; if not equal, return
0B1B44 B7          0252       or a
0B1B45 C8          0253       ret z               ; if equal and zero, return
0B1B46 23          0254       inc hl              ; next character
0B1B47 13          0255       inc de
0B1B48 C3 41 1B 0B 0256       jp str_equal        ; loop until end of string
0B1B4C             0257   
0B1B4C             0258   ; print the parameter string pointed to by ix
0B1B4C             0259   ; destroys: a, hl
0B1B4C             0260   print_param:
0B1B4C DD 27 00    0261       ld hl,(ix)          ; get the parameter pointer
0B1B4F CD 77 02 0B 0262       call printString    ; print the parameter string
0B1B53 3E 20       0263       ld a,' '            ; print a space separator
0B1B55 5B D7       0264       rst.lil $10
0B1B57 C9          0265       ret
0B1B58             0266   
0B1B58             0267   ; print the parameters
0B1B58             0268   ; inputs: b = number of parameters, ix = pointer to the parameters
0B1B58             0269   ; destroys: a, hl, bc
0B1B58             0270   print_params:
0B1B58 41          0271       ld b,c              ; loop counter = number of parameters
0B1B59 DD E5       0272       push ix             ; save the pointer to the parameters
0B1B5B             0273   @loop:
0B1B5B C5          0274       push bc             ; save the loop counter
0B1B5C CD 4C 1B 0B 0275       call print_param    ; print the parameter
0B1B60 ED 32 03    0276       lea ix,ix+3         ; next parameter pointer
0B1B63 C1          0277       pop bc              ; get back the loop counter
0B1B64 10 F5       0278       djnz @loop          ; loop until done
0B1B66 DD E1       0279       pop ix              ; restore the pointer to the parameters
0B1B68 C9          0280       ret
0B1B69             0281   
0B1B69             0282   debug_print:
0B1B69 CD 8C 02 0B 0283       call printNewLine   ; DEBUG
0B1B6D CD 8D 06 0B 0284       call dumpFlags      ; DEBUG
0B1B71 CD 4C 1B 0B 0285       call print_param    ; DEBUG
0B1B75 CD 8C 02 0B 0286       call printNewLine   ; DEBUG
0B1B79 CD 8C 02 0B 0287       call printNewLine   ; DEBUG
0B1B7D C9          0288       ret
