PC     Output      Line
040000             0001    ;
040000             0002    ; Title:	calcbas
040000             0003    ; Author:	Brandon R. Gates
040000             0004    ; Created:	29/10/2024
040000             0005    
040000             0006    ; ========================================
040000             0007    ; MODIFIED MOSLET INITIALIZATION CODE
040000             0008    ; ========================================
040000             0009    ;
040000             0010    ; Title:	Copy - Initialisation Code
040000             0011    ; Author:	Dean Belfield, Lennart Benschop
040000             0012    ; Created:	06/11/2022
040000             0013    ; Last Updated:	26/12/2022
040000             0014    ;
040000             0015    ; Modinfo:
040000             0016    ; 17/12/2022:	Added parameter processing
040000             0017    ; 26/12/2022:   Adapted to Copy program, use LEA instead of 3x INC IX, Save/restore MB
040000             0018    ; Changed:      08/04/2924 adapt to ez80asm
040000             0019    ;
040000             0020        ASSUME	ADL = 1
040000             0021        INCLUDE "mos_api.inc"
040000             0001*   ;
040000             0002*   ; Title:	AGON MOS - API for user projects
040000             0003*   ; Author:	Dean Belfield
040000             0004*   ; Created:	03/08/2022
040000             0005*   ; Last Updated:	11/11/2023
040000             0006*   ;
040000             0007*   ; Modified: 11/14/2024 by Brandon R. Gates for ez80asm compatibility
040000             0008*   ;
040000             0009*   ; Modinfo:
040000             0010*   ; 05/08/2022:	Added mos_feof
040000             0011*   ; 09/08/2022:	Added system variables: cursorX, cursorY
040000             0012*   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040000             0013*   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040000             0014*   ; 24/09/2022:	Added mos_getError, mos_mkdir
040000             0015*   ; 13/10/2022:	Added mos_oscli
040000             0016*   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040000             0017*   ; 04/03/2023:	Added sysvar_scrpixelIndex
040000             0018*   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040000             0019*   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040000             0020*   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040000             0021*   ; 22/03/2023:	The VDP commands are now indexed from 0x80
040000             0022*   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040000             0023*   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040000             0024*   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040000             0025*   ; 19/05/2023:	Added sysvar_scrMode
040000             0026*   ; 05/06/2023:	Added sysvar_rtcEnable
040000             0027*   ; 03/08/2023:	Added mos_setkbvector
040000             0028*   ; 10/08/2023:	Added mos_getkbmap
040000             0029*   ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040000             0030*   ; 11/14/2024:   FatFS structs modified for ez80asm compatibility
040000             0031*   ;
040000             0032*   ; VDP control (VDU 23, 0, n)
040000             0033*   ;
040000             0034*   vdp_gp:			EQU 	80h
040000             0035*   vdp_keycode:		EQU 	81h
040000             0036*   vdp_cursor:		EQU	82h
040000             0037*   vdp_scrchar:		EQU	83h
040000             0038*   vdp_scrpixel:		EQU	84h
040000             0039*   vdp_audio:		EQU	85h
040000             0040*   vdp_mode:		EQU	86h
040000             0041*   vdp_rtc:		EQU	87h
040000             0042*   vdp_keystate:		EQU	88h
040000             0043*   vdp_logicalcoords:	EQU	C0h
040000             0044*   vdp_terminalmode:	EQU	FFh
040000             0045*   
040000             0046*   ; MOS high level functions
040000             0047*   ;
040000             0048*   mos_getkey:		EQU	00h
040000             0049*   mos_load:		EQU	01h
040000             0050*   mos_save:		EQU	02h
040000             0051*   mos_cd:			EQU	03h
040000             0052*   mos_dir:		EQU	04h
040000             0053*   mos_del:		EQU	05h
040000             0054*   mos_ren:		EQU	06h
040000             0055*   mos_mkdir:		EQU	07h
040000             0056*   mos_sysvars:		EQU	08h
040000             0057*   mos_editline:		EQU	09h
040000             0058*   mos_fopen:		EQU	0Ah
040000             0059*   mos_fclose:		EQU	0Bh
040000             0060*   mos_fgetc:		EQU	0Ch
040000             0061*   mos_fputc:		EQU	0Dh
040000             0062*   mos_feof:		EQU	0Eh
040000             0063*   mos_getError:		EQU	0Fh
040000             0064*   mos_oscli:		EQU	10h
040000             0065*   mos_copy:		EQU	11h
040000             0066*   mos_getrtc:		EQU	12h
040000             0067*   mos_setrtc:		EQU	13h
040000             0068*   mos_setintvector:	EQU	14h
040000             0069*   mos_uopen:		EQU	15h
040000             0070*   mos_uclose:		EQU	16h
040000             0071*   mos_ugetc:		EQU	17h
040000             0072*   mos_uputc:		EQU 	18h
040000             0073*   mos_getfil:		EQU	19h
040000             0074*   mos_fread:		EQU	1Ah
040000             0075*   mos_fwrite:		EQU	1Bh
040000             0076*   mos_flseek:		EQU	1Ch
040000             0077*   mos_setkbvector:	EQU	1Dh
040000             0078*   mos_getkbmap:		EQU	1Eh
040000             0079*   mos_i2c_open:		EQU	1Fh
040000             0080*   mos_i2c_close:		EQU	20h
040000             0081*   mos_i2c_write:		EQU	21h
040000             0082*   mos_i2c_read:		EQU	22h
040000             0083*   
040000             0084*   
040000             0085*   ; FatFS file access functions
040000             0086*   ;
040000             0087*   ffs_fopen:		EQU	80h
040000             0088*   ffs_fclose:		EQU	81h
040000             0089*   ffs_fread:		EQU	82h
040000             0090*   ffs_fwrite:		EQU	83h
040000             0091*   ffs_flseek:		EQU	84h
040000             0092*   ffs_ftruncate:		EQU	85h
040000             0093*   ffs_fsync:		EQU	86h
040000             0094*   ffs_fforward:		EQU	87h
040000             0095*   ffs_fexpand:		EQU	88h
040000             0096*   ffs_fgets:		EQU	89h
040000             0097*   ffs_fputc:		EQU	8Ah
040000             0098*   ffs_fputs:		EQU	8Bh
040000             0099*   ffs_fprintf:		EQU	8Ch
040000             0100*   ffs_ftell:		EQU	8Dh
040000             0101*   ffs_feof:		EQU	8Eh
040000             0102*   ffs_fsize:		EQU	8Fh
040000             0103*   ffs_ferror:		EQU	90h
040000             0104*   
040000             0105*   ; FatFS directory access functions
040000             0106*   ;
040000             0107*   ffs_dopen:		EQU	91h
040000             0108*   ffs_dclose:		EQU	92h
040000             0109*   ffs_dread:		EQU	93h
040000             0110*   ffs_dfindfirst:		EQU	94h
040000             0111*   ffs_dfindnext:		EQU	95h
040000             0112*   
040000             0113*   ; FatFS file and directory management functions
040000             0114*   ;
040000             0115*   ffs_stat:		EQU	96h
040000             0116*   ffs_unlink:		EQU	97h
040000             0117*   ffs_rename:		EQU	98h
040000             0118*   ffs_chmod:		EQU	99h
040000             0119*   ffs_utime:		EQU	9Ah
040000             0120*   ffs_mkdir:		EQU	9Bh
040000             0121*   ffs_chdir:		EQU	9Ch
040000             0122*   ffs_chdrive:		EQU	9Dh
040000             0123*   ffs_getcwd:		EQU	9Eh
040000             0124*   
040000             0125*   ; FatFS volume management and system configuration functions
040000             0126*   ;
040000             0127*   ffs_mount:		EQU	9Fh
040000             0128*   ffs_mkfs:		EQU	A0h
040000             0129*   ffs_fdisk:		EQU	A1h
040000             0130*   ffs_getfree:		EQU	A2h
040000             0131*   ffs_getlabel:		EQU	A3h
040000             0132*   ffs_setlabel:		EQU	A4h
040000             0133*   ffs_setcp:		EQU	A5h
040000             0134*   
040000             0135*   ; File access modes
040000             0136*   ;
040000             0137*   fa_read:		EQU	01h
040000             0138*   fa_write:		EQU	02h
040000             0139*   fa_open_existing:	EQU	00h
040000             0140*   fa_create_new:		EQU	04h
040000             0141*   fa_create_always:	EQU	08h
040000             0142*   fa_open_always:		EQU	10h
040000             0143*   fa_open_append:		EQU	30h
040000             0144*   
040000             0145*   ; System variable indexes for api_sysvars
040000             0146*   ; Index into _sysvars in globals.asm
040000             0147*   ;
040000             0148*   sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040000             0149*   sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040000             0150*   sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040000             0151*   sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040000             0152*   sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040000             0153*   sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040000             0154*   sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040000             0155*   sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040000             0156*   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040000             0157*   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040000             0158*   sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040000             0159*   sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040000             0160*   sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040000             0161*   sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040000             0162*   sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040000             0163*   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040000             0164*   sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040000             0165*   sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040000             0166*   sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040000             0167*   sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040000             0168*   sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040000             0169*   sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040000             0170*   sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040000             0171*   sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040000             0172*   sysvar_scrMode:		EQU	27h	; 1: Screen mode
040000             0173*   sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040000             0174*   sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040000             0175*   sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040000             0176*   sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040000             0177*   sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040000             0178*   sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040000             0179*   sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040000             0180*   ;
040000             0181*   ; Flags for the VPD protocol
040000             0182*   ;
040000             0183*   vdp_pflag_cursor:	EQU	00000001b
040000             0184*   vdp_pflag_scrchar:	EQU	00000010b
040000             0185*   vdp_pflag_point:	EQU	00000100b
040000             0186*   vdp_pflag_audio:	EQU	00001000b
040000             0187*   vdp_pflag_mode:		EQU	00010000b
040000             0188*   vdp_pflag_rtc:		EQU	00100000b
040000             0189*   vdp_pflag_mouse:	EQU	01000000b
040000             0190*   ; vdp_pflag_buffered:	EQU	10000000b
040000             0191*   
040000             0192*   
040000             0193*   ; FatFS structures
040000             0194*   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040000             0195*   ;
040000             0196*   ; Object ID and allocation information (FFOBJID)
040000             0197*   FFOBJID.fs:       EQU 0    ; Pointer to the hosting volume of this object
040000             0198*   FFOBJID.id:       EQU 3    ; Hosting volume mount ID
040000             0199*   FFOBJID.attr:     EQU 5    ; Object attribute
040000             0200*   FFOBJID.stat:     EQU 6    ; Object chain status
040000             0201*   FFOBJID.sclust:   EQU 7    ; Object data start cluster
040000             0202*   FFOBJID.objsize:  EQU 11   ; Object size
040000             0203*   FFOBJID_SIZE:     EQU 15   ; Total size of FFOBJID structure
040000             0204*   ;
040000             0205*   ; File object structure (FIL)
040000             0206*   ;
040000             0207*   FIL.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040000             0208*   FIL.flag:         EQU FFOBJID_SIZE       ; File status flags
040000             0209*   FIL.err:          EQU FFOBJID_SIZE + 1   ; Abort flag (error code)
040000             0210*   FIL.fptr:         EQU FFOBJID_SIZE + 2   ; File read/write pointer
040000             0211*   FIL.clust:        EQU FFOBJID_SIZE + 6   ; Current cluster of fptr
040000             0212*   FIL.sect:         EQU FFOBJID_SIZE + 10  ; Sector number appearing in buf[]
040000             0213*   FIL.dir_sect:     EQU FFOBJID_SIZE + 14  ; Sector number containing the directory entry
040000             0214*   FIL.dir_ptr:      EQU FFOBJID_SIZE + 18  ; Pointer to the directory entry in the win[]
040000             0215*   FIL_SIZE:         EQU FFOBJID_SIZE + 21  ; Total size of FIL structure
040000             0216*   ;
040000             0217*   ; Directory object structure (DIR)
040000             0218*   ;
040000             0219*   DIR.obj:          EQU 0                  ; Object identifier (FFOBJID fields start here)
040000             0220*   DIR.dptr:         EQU FFOBJID_SIZE       ; Current read/write offset
040000             0221*   DIR.clust:        EQU FFOBJID_SIZE + 4   ; Current cluster
040000             0222*   DIR.sect:         EQU FFOBJID_SIZE + 8   ; Current sector
040000             0223*   DIR.dir:          EQU FFOBJID_SIZE + 12  ; Pointer to the directory item in the win[]
040000             0224*   DIR.fn:           EQU FFOBJID_SIZE + 15  ; SFN (in/out) {body[8],ext[3],status[1]}
040000             0225*   DIR.blk_ofs:      EQU FFOBJID_SIZE + 27  ; Offset of current entry block being processed
040000             0226*   DIR_SIZE:         EQU FFOBJID_SIZE + 31  ; Total size of DIR structure
040000             0227*   ;
040000             0228*   ; File information structure (FILINFO)
040000             0229*   ;
040000             0230*   FILINFO.fsize:    EQU 0    ; File size
040000             0231*   FILINFO.fdate:    EQU 4    ; Modified date
040000             0232*   FILINFO.ftime:    EQU 6    ; Modified time
040000             0233*   FILINFO.fattrib:  EQU 8    ; File attribute
040000             0234*   FILINFO.altname:  EQU 9    ; Alternative file name
040000             0235*   FILINFO.fname:    EQU 22   ; Primary file name
040000             0236*   FILINFO_SIZE:     EQU 278  ; Total size of FILINFO structure
040000             0237*   ;
040000             0238*   ; Macro for calling the API
040000             0239*   ; Parameters:
040000             0240*   ; - function: One of the function numbers listed above
040000             0241*   ;
040000             0242*   			MACRO MOSCALL	function
040000             0243*   			LD	A, function
040000             0244*   			RST.LIS	08h
040000             0245*   			ENDMACRO
040000             0022        ORG 0x0B0000 ; Is a moslet
0B0000             0023    
0B0000             0024        MACRO PROGNAME
0B0000             0025        ASCIZ "calcbas"
0B0000             0026        ENDMACRO
0B0000             0027    ;
0B0000             0028    ; Start in ADL mode
0B0000             0029    ;
0B0000 C3 45 00 0B 0030    			JP	_start
0B0004             0031    ;
0B0004             0032    ; The header stuff is from byte 64 onwards
0B0004             0033    ;
0B0004             0034    _exec_name:
0B0004             0035    			PROGNAME			; The executable name, only used in argv
0B0004 63 61 6C 63 0001M       ASCIZ "calcbas"
       62 61 73 00 
0B000C             0036    
0B000C FF FF FF FF 0037    			ALIGN	64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
0B0040             0038    
0B0040 4D 4F 53    0039    			DB	"MOS"			; Flag for MOS - to confirm this is a valid MOS command
0B0043 00          0040    			DB	00h			; MOS header version 0
0B0044 01          0041    			DB	01h			; Flag for run mode (0: Z80, 1: ADL)
0B0045             0042    ;
0B0045             0043    ; And the code follows on immediately after the header
0B0045             0044    ;
0B0045             0045    _start:
0B0045 F5          0046                PUSH	AF			; Preserve the registers
0B0046 C5          0047    			PUSH	BC
0B0047 D5          0048    			PUSH	DE
0B0048 DD E5       0049    			PUSH	IX
0B004A FD E5       0050    			PUSH	IY
0B004C ED 6E       0051    			LD	A, MB			; Save MB
0B004E F5          0052    			PUSH 	AF
0B004F AF          0053    			XOR 	A
0B0050 ED 6D       0054    			LD 	MB, A                   ; Clear to zero so MOS API calls know how to use 24-bit addresses.
0B0052             0055    
0B0052             0056    ; ; intialize BASIC-specific stuff
0B0052             0057    ; 			LD		(_sps), SP 		; Preserve the 24-bit stack pointer (SPS)
0B0052             0058    ; 			CALL		_clear_ram
0B0052             0059    ; ; end of BASIC-specific initialization
0B0052             0060    
0B0052 DD 21 00 16 0061    			LD	IX, argv_ptrs		; The argv array pointer address
       0B          
0B0057 DD E5       0062    			PUSH	IX
0B0059 CD 70 00 0B 0063    			CALL	_parse_params		; Parse the parameters
0B005D DD E1       0064    			POP	IX			; IX: argv
0B005F 06 00       0065    			LD	B, 0			;  C: argc
0B0061 CD 5F 16 0B 0066    			CALL	_main			; Start user code
0B0065             0067    
0B0065 F1          0068    			POP 	AF
0B0066 ED 6D       0069    			LD	MB, A
0B0068 FD E1       0070    			POP	IY			; Restore registers
0B006A DD E1       0071    			POP	IX
0B006C D1          0072    			POP	DE
0B006D C1          0073    			POP	BC
0B006E F1          0074    			POP	AF
0B006F C9          0075    			RET
0B0070             0076    
0B0070             0077    ; Parse the parameter string into a C array
0B0070             0078    ; Parameters
0B0070             0079    ; - HL: Address of parameter string
0B0070             0080    ; - IX: Address for array pointer storage
0B0070             0081    ; Returns:
0B0070             0082    ; -  C: Number of parameters parsed
0B0070             0083    ;
0B0070 01 04 00 0B 0084    _parse_params:		LD	BC, _exec_name
0B0074 DD 0F 00    0085    			LD	(IX+0), BC		; ARGV[0] = the executable name
0B0077 ED 32 03    0086    			LEA     IX, IX+3
0B007A CD B2 00 0B 0087    			CALL	_skip_spaces		; Skip HL past any leading spaces
0B007E             0088    ;
0B007E 01 01 00 00 0089    			LD	BC, 1			; C: ARGC = 1 - also clears out top 16 bits of BCU
0B0082 06 0F       0090    			LD	B, argv_ptrs_max - 1	; B: Maximum number of argv_ptrs
0B0084             0091    ;
0B0084             0092    _parse_params_1:
0B0084 C5          0093    			PUSH	BC			; Stack ARGC
0B0085 E5          0094    			PUSH	HL			; Stack start address of token
0B0086 CD A3 00 0B 0095    			CALL	_get_token		; Get the next token
0B008A 79          0096    			LD	A, C			; A: Length of the token in characters
0B008B D1          0097    			POP	DE			; Start address of token (was in HL)
0B008C C1          0098    			POP	BC			; ARGC
0B008D B7          0099    			OR	A			; Check for A=0 (no token found) OR at end of string
0B008E C8          0100    			RET	Z
0B008F             0101    ;
0B008F DD 1F 00    0102    			LD	(IX+0), DE		; Store the pointer to the token
0B0092 E5          0103    			PUSH	HL			; DE=HL
0B0093 D1          0104    			POP	DE
0B0094 CD B2 00 0B 0105    			CALL	_skip_spaces		; And skip HL past any spaces onto the next character
0B0098 AF          0106    			XOR	A
0B0099 12          0107    			LD	(DE), A			; Zero-terminate the token
0B009A ED 32 03    0108    			LEA  	IX, IX+3			; Advance to next pointer position
0B009D 0C          0109    			INC	C			; Increment ARGC
0B009E 79          0110    			LD	A, C			; Check for C >= A
0B009F B8          0111    			CP	B
0B00A0 38 E2       0112    			JR	C, _parse_params_1	; And loop
0B00A2 C9          0113    			RET
0B00A3             0114    
0B00A3             0115    ; Get the next token
0B00A3             0116    ; Parameters:
0B00A3             0117    ; - HL: Address of parameter string
0B00A3             0118    ; Returns:
0B00A3             0119    ; - HL: Address of first character after token
0B00A3             0120    ; -  C: Length of token (in characters)
0B00A3             0121    ;
0B00A3 0E 00       0122    _get_token:		LD	C, 0			; Initialise length
0B00A5 7E          0123    @@:			LD	A, (HL)			; Get the character from the parameter string
0B00A6 B7          0124    			OR	A			; Exit if 0 (end of parameter string in MOS)
0B00A7 C8          0125    			RET 	Z
0B00A8 FE 0D       0126    			CP	13			; Exit if CR (end of parameter string in BBC BASIC)
0B00AA C8          0127    			RET	Z
0B00AB FE 20       0128    			CP	' '			; Exit if space (end of token)
0B00AD C8          0129    			RET	Z
0B00AE 23          0130    			INC	HL			; Advance to next character
0B00AF 0C          0131    			INC 	C			; Increment length
0B00B0 18 F3       0132    			JR	@B
0B00B2             0133    
0B00B2             0134    ; Skip spaces in the parameter string
0B00B2             0135    ; Parameters:
0B00B2             0136    ; - HL: Address of parameter string
0B00B2             0137    ; Returns:
0B00B2             0138    ; - HL: Address of next none-space character
0B00B2             0139    ;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
0B00B2             0140    ;
0B00B2 7E          0141    _skip_spaces:		LD	A, (HL)			; Get the character from the parameter string
0B00B3 FE 20       0142    			CP	' '			; Exit if not space
0B00B5 C0          0143    			RET	NZ
0B00B6 23          0144    			INC	HL			; Advance to next character
0B00B7 18 F9       0145    			JR	_skip_spaces		; Increment length
0B00B9             0146    
0B00B9             0147    ; ========================================
0B00B9             0148    ; BASIC INITIALIZATION CODE FROM basic/init.asm
0B00B9             0149    ; ========================================
0B00B9             0150    ;
0B00B9             0151    ; ;Clear the application memory
0B00B9             0152    ; ;
0B00B9             0153    ; _clear_ram:
0B00B9             0154    ;             push hl
0B00B9             0155    ;             PUSH		BC
0B00B9             0156    ; 			LD		HL, RAM_START
0B00B9             0157    ; 			LD		DE, RAM_START + 1
0B00B9             0158    ; 			LD		BC, RAM_END - RAM_START - 1
0B00B9             0159    ; 			XOR		A
0B00B9             0160    ; 			LD		(HL), A
0B00B9             0161    ; 			LDIR
0B00B9             0162    ; 			POP		BC
0B00B9             0163    ;             pop hl
0B00B9             0164    ; 			RET
0B00B9             0165    
0B00B9             0166    ; ========================================
0B00B9             0167    ; BEGIN APPLICATION CODE
0B00B9             0168    ; ========================================
0B00B9             0169    
0B00B9             0170    ; API INCLUDES
0B00B9             0171    
0B00B9             0172    ; APPLICATION INCLUDES
0B00B9             0173        include "temp.inc"
0B00B9             0001*   
0B00B9             0002*   ; global scratch memory for registers
0B00B9 00 00 00    0003*   uaf: dl 0
0B00BC 00 00 00    0004*   uhl: dl 0
0B00BF 00 00 00    0005*   ubc: dl 0
0B00C2 00 00 00    0006*   ude: dl 0
0B00C5 00 00 00    0007*   uix: dl 0
0B00C8 00 00 00    0008*   uiy: dl 0
0B00CB 00 00 00    0009*   usp: dl 0
0B00CE 00 00 00    0010*   upc: dl 0
0B00D1             0011*   
0B00D1 20 61 66 3D 0012*   str_afu: db " af=",0
       00          
0B00D6 20 68 6C 3D 0013*   str_hlu: db " hl=",0
       00          
0B00DB 20 62 63 3D 0014*   str_bcu: db " bc=",0
       00          
0B00E0 20 64 65 3D 0015*   str_deu: db " de=",0
       00          
0B00E5 20 69 78 3D 0016*   str_ixu: db " ix=",0
       00          
0B00EA 20 69 79 3D 0017*   str_iyu: db " iy=",0
       00          
0B00EF             0018*   
0B00EF             0019*   ; test the sign of HL
0B00EF             0020*   ; inputs: HL obviously
0B00EF             0021*   ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
0B00EF             0022*   ; destroys: flags
0B00EF             0023*       MACRO sign_hlu
0B00EF             0024*           add hl,de
0B00EF             0025*           or a
0B00EF             0026*           sbc hl,de
0B00EF             0027*       ENDMACRO
0B00EF             0028*   
0B00EF             0029*       MACRO PUSH_ALL
0B00EF             0030*           ex af,af'
0B00EF             0031*           exx
0B00EF             0032*           push af
0B00EF             0033*           push hl
0B00EF             0034*           push bc
0B00EF             0035*           push de
0B00EF             0036*   
0B00EF             0037*           ex af,af'
0B00EF             0038*           exx
0B00EF             0039*           push af
0B00EF             0040*           push hl
0B00EF             0041*           push bc
0B00EF             0042*           push de
0B00EF             0043*           push ix
0B00EF             0044*           push iy
0B00EF             0045*       ENDMACRO
0B00EF             0046*   
0B00EF             0047*       MACRO POP_ALL
0B00EF             0048*           pop iy
0B00EF             0049*           pop ix
0B00EF             0050*           pop de
0B00EF             0051*           pop bc
0B00EF             0052*           pop hl
0B00EF             0053*           pop af
0B00EF             0054*           ex af,af'
0B00EF             0055*           exx
0B00EF             0056*   
0B00EF             0057*           pop de
0B00EF             0058*           pop bc
0B00EF             0059*           pop hl
0B00EF             0060*           pop af
0B00EF             0061*           ex af,af'
0B00EF             0062*           exx
0B00EF             0063*       ENDMACRO
0B00EF             0064*   
0B00EF             0065*   ; Print a 24-bit HEX number
0B00EF             0066*   ; HLU: Number to print
0B00EF             0067*   printHex24:
0B00EF             0068*   	; PUSH	HL      ; 4 cycles
0B00EF             0069*   	; LD		HL, 2   ; 4 cycles
0B00EF             0070*   	; ADD		HL, SP  ; 1 cycle
0B00EF             0071*   	; LD		A, (HL) ; 2 cycles
0B00EF             0072*   	; POP		HL      ; 4 cycles
0B00EF             0073*       ;                 ; 15 cycles total
0B00EF E5          0074*       push hl ; 4 cycles
0B00F0 33          0075*       inc sp ; 1 cycle
0B00F1 F1          0076*       pop af  ; 4 cycles
0B00F2 3B          0077*       dec sp ; 1 cycle
0B00F3             0078*               ; 10 cycles total
0B00F3 CD FD 00 0B 0079*   	CALL	printHex8
0B00F7             0080*   ; Print a 16-bit HEX number
0B00F7             0081*   ; HL: Number to print
0B00F7             0082*   printHex16:
0B00F7 7C          0083*   	LD		A,H
0B00F8 CD FD 00 0B 0084*   	CALL	printHex8
0B00FC 7D          0085*   	LD		A,L
0B00FD             0086*   ; Print an 8-bit HEX number
0B00FD             0087*   ; A: Number to print
0B00FD             0088*   printHex8:
0B00FD 4F          0089*   	LD		C,A
0B00FE 1F          0090*   	RRA
0B00FF 1F          0091*   	RRA
0B0100 1F          0092*   	RRA
0B0101 1F          0093*   	RRA
0B0102 CD 07 01 0B 0094*   	CALL	@F
0B0106 79          0095*   	LD		A,C
0B0107             0096*   @@:
0B0107 E6 0F       0097*   	AND		0Fh
0B0109 C6 90       0098*   	ADD		A,90h
0B010B 27          0099*   	DAA
0B010C CE 40       0100*   	ADC		A,40h
0B010E 27          0101*   	DAA
0B010F 5B D7       0102*   	RST.LIL	10h
0B0111 C9          0103*   	RET
0B0112             0104*   
0B0112             0105*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
0B0112             0106*   ; Print a zero-terminated string
0B0112             0107*   ; HL: Pointer to string
0B0112             0108*   printString:
0B0112 C5          0109*   	PUSH	BC
0B0113 01 00 00 00 0110*   	LD		BC,0
0B0117 3E 00       0111*   	LD 	 	A,0
0B0119 5B DF       0112*   	RST.LIL 18h
0B011B C1          0113*   	POP		BC
0B011C C9          0114*   	RET
0B011D             0115*   ; print a VDU sequence
0B011D             0116*   ; HL: Pointer to VDU sequence - <1 byte length> <data>
0B011D             0117*   sendVDUsequence:
0B011D C5          0118*   	PUSH	BC
0B011E 01 00 00 00 0119*   	LD		BC, 0
0B0122 4E          0120*   	LD		C, (HL)
0B0123 5B DF       0121*   	RST.LIL	18h
0B0125 C1          0122*   	POP		BC
0B0126 C9          0123*   	RET
0B0127             0124*   ; Print Newline sequence to VDP
0B0127             0125*   printNewLine:
0B0127 F5          0126*       push af ; for some reason rst.lil 10h sets carry flag
0B0128 3E 0D       0127*   	LD	A, '\r'
0B012A 5B D7       0128*   	RST.LIL 10h
0B012C 3E 0A       0129*   	LD	A, '\n'
0B012E 5B D7       0130*   	RST.LIL 10h
0B0130 F1          0131*       pop af
0B0131 C9          0132*   	RET
0B0132             0133*   
0B0132             0134*   ; print registers to screen in hexidecimal format
0B0132             0135*   ; inputs: none
0B0132             0136*   ; outputs: values of every register printed to screen
0B0132             0137*   ;    values of each register in global scratch memory
0B0132             0138*   ; destroys: nothing
0B0132             0139*   dumpRegistersHex:
0B0132             0140*   ; store everything in scratch
0B0132 22 BC 00 0B 0141*       ld (uhl),hl
0B0136 ED 43 BF 00 0142*       ld (ubc),bc
       0B          
0B013B ED 53 C2 00 0143*       ld (ude),de
       0B          
0B0140 DD 22 C5 00 0144*       ld (uix),ix
       0B          
0B0145 FD 22 C8 00 0145*       ld (uiy),iy
       0B          
0B014A F5          0146*       push af ; fml
0B014B E1          0147*       pop hl  ; thanks, zilog
0B014C 22 B9 00 0B 0148*       ld (uaf),hl
0B0150 F5          0149*       push af ; dammit
0B0151             0150*   
0B0151             0151*   ; home the cursor
0B0151             0152*       ; call vdu_home_cursor
0B0151             0153*       ; call printNewLine
0B0151             0154*   
0B0151             0155*   ; print each register
0B0151 21 D1 00 0B 0156*       ld hl,str_afu
0B0155 CD 12 01 0B 0157*       call printString
0B0159 2A B9 00 0B 0158*       ld hl,(uaf)
0B015D CD EF 00 0B 0159*       call printHex24
0B0161             0160*       ; call printNewLine
0B0161             0161*   
0B0161 21 D6 00 0B 0162*       ld hl,str_hlu
0B0165 CD 12 01 0B 0163*       call printString
0B0169 2A BC 00 0B 0164*       ld hl,(uhl)
0B016D CD EF 00 0B 0165*       call printHex24
0B0171             0166*       ; call printNewLine
0B0171             0167*   
0B0171 21 DB 00 0B 0168*       ld hl,str_bcu
0B0175 CD 12 01 0B 0169*       call printString
0B0179 2A BF 00 0B 0170*       ld hl,(ubc)
0B017D CD EF 00 0B 0171*       call printHex24
0B0181             0172*       ; call printNewLine
0B0181             0173*   
0B0181 21 E0 00 0B 0174*       ld hl,str_deu
0B0185 CD 12 01 0B 0175*       call printString
0B0189 2A C2 00 0B 0176*       ld hl,(ude)
0B018D CD EF 00 0B 0177*       call printHex24
0B0191             0178*       ; call printNewLine
0B0191             0179*   
0B0191 21 E5 00 0B 0180*       ld hl,str_ixu
0B0195 CD 12 01 0B 0181*       call printString
0B0199 2A C5 00 0B 0182*       ld hl,(uix)
0B019D CD EF 00 0B 0183*       call printHex24
0B01A1             0184*       ; call printNewLine
0B01A1             0185*   
0B01A1 21 EA 00 0B 0186*       ld hl,str_iyu
0B01A5 CD 12 01 0B 0187*       call printString
0B01A9 2A C8 00 0B 0188*       ld hl,(uiy)
0B01AD CD EF 00 0B 0189*       call printHex24
0B01B1             0190*       ; call printNewLine
0B01B1             0191*   
0B01B1             0192*       ; call vdu_vblank
0B01B1             0193*   
0B01B1 CD 27 01 0B 0194*       call printNewLine
0B01B5             0195*   ; restore everything
0B01B5 2A BC 00 0B 0196*       ld hl, (uhl)
0B01B9 ED 4B BF 00 0197*       ld bc, (ubc)
       0B          
0B01BE ED 5B C2 00 0198*       ld de, (ude)
       0B          
0B01C3 DD 2A C5 00 0199*       ld ix, (uix)
       0B          
0B01C8 FD 2A C8 00 0200*       ld iy, (uiy)
       0B          
0B01CD F1          0201*       pop af
0B01CE             0202*   ; all done
0B01CE C9          0203*       ret
0B01CF             0204*   
0B01CF             0205*   dumpRegistersHexPrime:
0B01CF D9          0206*       exx
0B01D0 08          0207*       ex af,af'
0B01D1 CD 32 01 0B 0208*       call dumpRegistersHex
0B01D5 08          0209*       ex af,af'
0B01D6 D9          0210*       exx
0B01D7 C9          0211*       ret
0B01D8             0212*   
0B01D8             0213*   ; additionally dump prime registers
0B01D8             0214*   ; inputs: none
0B01D8             0215*   ; outputs: values of every register printed to screen
0B01D8             0216*   ; destroys: nothing
0B01D8             0217*   dumpRegistersHexAll:
0B01D8 CD 32 01 0B 0218*       call dumpRegistersHex
0B01DC 08          0219*       ex af,af'
0B01DD D9          0220*       exx
0B01DE CD 32 01 0B 0221*       call dumpRegistersHex
0B01E2 08          0222*       ex af,af'
0B01E3 D9          0223*       exx
0B01E4 C9          0224*       ret
0B01E5             0225*   
0B01E5             0226*   ; print bytes from an address to the screen in hexidecimal format
0B01E5             0227*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0B01E5             0228*   ; outputs: values of each byte printed to screen separated by spaces
0B01E5             0229*   ; destroys: nothing
0B01E5             0230*   dumpMemoryHex:
0B01E5             0231*   ; save registers to the stack
0B01E5 C5          0232*       push bc
0B01E6 E5          0233*       push hl
0B01E7 F5          0234*       push af
0B01E8             0235*   
0B01E8             0236*   ; print the address and separator
0B01E8 CD EF 00 0B 0237*       call printHex24
0B01EC 3E 3A       0238*       ld a,':'
0B01EE 5B D7       0239*       rst.lil 10h
0B01F0 3E 20       0240*       ld a,' '
0B01F2 5B D7       0241*       rst.lil 10h
0B01F4             0242*   
0B01F4             0243*   ; set b to be our loop counter
0B01F4 F1          0244*       pop af
0B01F5 47          0245*       ld b,a
0B01F6 E1          0246*       pop hl
0B01F7 E5          0247*       push hl
0B01F8 F5          0248*       push af
0B01F9             0249*   @loop:
0B01F9             0250*   ; print the byte
0B01F9 7E          0251*       ld a,(hl)
0B01FA CD FD 00 0B 0252*       call printHex8
0B01FE             0253*   ; print a space
0B01FE 3E 20       0254*       ld a,' '
0B0200 5B D7       0255*       rst.lil 10h
0B0202 23          0256*       inc hl
0B0203 10 F4       0257*       djnz @loop
0B0205 CD 27 01 0B 0258*       call printNewLine
0B0209             0259*   
0B0209             0260*   ; restore everything
0B0209 F1          0261*       pop af
0B020A E1          0262*       pop hl
0B020B C1          0263*       pop bc
0B020C             0264*   
0B020C             0265*   ; all done
0B020C C9          0266*       ret
0B020D             0174        include "fpp.inc"
0B020D             0001*   	include "basic/fpp.asm"
0B020D             0001**  ;
0B020D             0002**  ; Title:	BBC Basic Interpreter - Z80 version
0B020D             0003**  ;		Z80 Floating Point Package
0B020D             0004**  ; Author:	(C) Copyright  R.T.Russell  1986
0B020D             0005**  ; Modified By:	Dean Belfield
0B020D             0006**  ; Created:	03/05/2022
0B020D             0007**  ; Last Updated:	07/06/2023
0B020D             0008**  ;
0B020D             0009**  ; Modinfo:
0B020D             0010**  ; 26/10/1986:	Version 0.0
0B020D             0011**  ; 14/12/1988:	Vesion 0.1 (Bug Fix)
0B020D             0012**  ; 12/05/2023:	Modified by Dean Belfield
0B020D             0013**  ; 07/06/2023:	Modified to run in ADL mode
0B020D             0014**  
0B020D             0015**  			; .ASSUME	ADL = 1
0B020D             0016**  
0B020D             0017**  			; SEGMENT CODE
0B020D             0018**  
0B020D             0019**  			; XDEF	FPP
0B020D             0020**  			; XDEF	DLOAD5
0B020D             0021**  			; XDEF	DLOAD5_SPL
0B020D             0022**  ;
0B020D             0023**  ;BINARY FLOATING POINT REPRESENTATION:
0B020D             0024**  ;   32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
0B020D             0025**  ;    8 BIT EXCESS-128 SIGNED EXPONENT
0B020D             0026**  ;   SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
0B020D             0027**  ;   MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
0B020D             0028**  ;
0B020D             0029**  ;BINARY INTEGER REPRESENTATION:
0B020D             0030**  ;   32 BIT 2'S-COMPLEMENT SIGNED INTEGER
0B020D             0031**  ;    "EXPONENT" BYTE = 0 (WHEN PRESENT)
0B020D             0032**  ;
0B020D             0033**  ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
0B020D             0034**  ;                            EXPONENT - C
0B020D             0035**  ;ALTERNATE REGISTER ALLOCATION: MANTISSA - DED'E'
0B020D             0036**  ;                               EXPONENT - B
0B020D             0037**  
0B020D             0038**  ;
0B020D             0039**  ;Error codes:
0B020D             0040**  ;
0B020D             0041**  
0B020D             0042**  BADOP:			EQU     1               ;Bad operation code
0B020D             0043**  DIVBY0:			EQU     18              ;Division by zero
0B020D             0044**  TOOBIG_FP:			EQU     20              ;Too big
0B020D             0045**  NGROOT:			EQU     21              ;Negative root
0B020D             0046**  LOGRNG:			EQU     22              ;Log range
0B020D             0047**  ACLOST:			EQU     23              ;Accuracy lost
0B020D             0048**  EXPRNG:			EQU     24              ;Exp range
0B020D             0049**  ;
0B020D             0050**  ;Call entry and despatch code:
0B020D             0051**  ;
0B020D FD E5       0052**  FPP:			PUSH    IY              ;Save IY
0B020F FD 21 00 00 0053**          		LD      IY,0
       00          
0B0214 FD 39       0054**          		ADD     IY,SP           ;Save SP in IY
0B0216 CD 26 02 0B 0055**          		CALL    OP              ;Perform operation
0B021A BF          0056**          		CP      A               ;Good return (Z, NC)
0B021B FD E1       0057**  EXIT_FP_:			POP     IY              ;Restore IY
0B021D C9          0058**          		RET                     ;Return to caller
0B021E             0059**  ;
0B021E             0060**  ;Error exit:
0B021E             0061**  ;
0B021E 3E 01       0062**  BAD_FP:			LD      A,BADOP         ;"Bad operation code"
0B0220 FD F9       0063**  ERROR_FP_:			LD      SP,IY           ;Restore SP from IY
0B0222 B7          0064**          		OR      A               ;Set NZ
0B0223 37          0065**          		SCF                     ;Set C
0B0224 18 F5       0066**          		JR      EXIT_FP_
0B0226             0067**  ;
0B0226             0068**  ;Perform operation or function:
0B0226             0069**  ;
0B0226             0070**  ; OP:			CP      (RTABLE-DTABLE)/3
0B0226 FE 2A       0071**  OP:				CP      RTABLE-DTABLE/3 ; ez80asm doesn't do nested expressions
0B0228             0072**  
0B0228 30 F4       0073**          		JR      NC,BAD_FP
0B022A             0074**          		; CP      (FTABLE-DTABLE)/3
0B022A FE 10       0075**  				CP      FTABLE-DTABLE/3 ; ditto
0B022C 30 08       0076**          		JR      NC,DISPAT_FP
0B022E 08          0077**          		EX      AF,AF'
0B022F 78          0078**          		LD      A,B
0B0230 B1          0079**          		OR      C               ;Both integer?
0B0231 C4 39 0D 0B 0080**          		CALL    NZ,FLOATA       ;No, so float both
0B0235 08          0081**          		EX      AF,AF'
0B0236 E5          0082**  DISPAT_FP:			PUSH    HL
0B0237 21 49 02 0B 0083**          		LD      HL,DTABLE
0B023B C5          0084**          		PUSH    BC
0B023C 01 03 00 00 0085**  			LD	BC, 3		; C = 3
0B0240 47          0086**  			LD	B, A 		; B = op-code
0B0241 ED 4C       0087**  			MLT 	BC 		;BC = op-code * 3
0B0243 09          0088**  			ADD	HL, BC 		;Add to table base
0B0244 ED 27       0089**  			LD	HL, (HL)	;Get the routine address (24-bit)
0B0246             0090**  
0B0246             0091**  ;        		ADD     A, A            ;A = op-code * 2
0B0246             0092**  ;        		LD      C,A
0B0246             0093**  ;        		LD      B,0             ;BC = op-code * 2
0B0246             0094**  ;        		ADD     HL,BC
0B0246             0095**  ;        		LD      A,(HL)          ;Get low byte
0B0246             0096**  ;        		INC     HL
0B0246             0097**  ;        		LD      H,(HL)          ;Get high byte
0B0246             0098**  ;        		LD      L,A
0B0246             0099**  
0B0246 C1          0100**          		POP     BC
0B0247 E3          0101**          		EX      (SP),HL
0B0248 C9          0102**          		RET                     ;Off to routine
0B0249             0103**  ;
0B0249             0104**  ;Despatch table:
0B0249             0105**  ;
0B0249 FB 02 0B    0106**  DTABLE:			DW24  IAND            ;AND (INTEGER)
0B024C 69 03 0B    0107**          		DW24  IBDIV           ;DIV
0B024F 0E 03 0B    0108**          		DW24  IEOR            ;EOR
0B0252 34 03 0B    0109**          		DW24  IMOD            ;MOD
0B0255 21 03 0B    0110**          		DW24  IOR             ;OR
0B0258 EF 05 0B    0111**          		DW24  ILE             ;<=
0B025B FE 05 0B    0112**          		DW24  INE             ;<>
0B025E E2 05 0B    0113**          		DW24  IGE             ;>=
0B0261 C7 05 0B    0114**          		DW24  ILT             ;<
0B0264 0B 06 0B    0115**          		DW24  IEQ             ;=
0B0267 57 04 0B    0116**          		DW24  IMUL            ;*
0B026A 92 03 0B    0117**          		DW24  IADD            ;+
0B026D D4 05 0B    0118**          		DW24  IGT             ;>
0B0270 79 03 0B    0119**          		DW24  ISUB            ;-
0B0273 0E 05 0B    0120**          		DW24  IPOW            ;^
0B0276 04 04 0B    0121**          		DW24  IDIV            ;/
0B0279             0122**  ;
0B0279             0123**  FTABLE:
0B0279 1D 06 0B    0124**  				DW24  ABSV_FP            ;ABS
0B027C 03 0A 0B    0125**          		DW24  ACS_FP             ;ACS
0B027F 41 09 0B    0126**          		DW24  ASN_FP             ;ASN
0B0282 71 09 0B    0127**          		DW24  ATN_FP             ;ATN
0B0285 3C 07 0B    0128**          		DW24  COS_FP             ;COS
0B0288 4B 06 0B    0129**          		DW24  DEG_FP             ;DEG
0B028B F8 07 0B    0130**          		DW24  EXP_FP             ;EXP
0B028E 9F 06 0B    0131**          		DW24  INT_FP_            ;INT
0B0291 96 08 0B    0132**          		DW24  LN_FP              ;LN
0B0294 2B 09 0B    0133**          		DW24  LOG_FP             ;LOG
0B0297 29 06 0B    0134**          		DW24  NOTK_FP            ;NOT
0B029A 55 06 0B    0135**          		DW24  RAD_FP             ;RAD
0B029D 70 06 0B    0136**          		DW24  SGN_FP             ;SGN
0B02A0 49 07 0B    0137**          		DW24  SIN_FP             ;SIN
0B02A3 B8 06 0B    0138**          		DW24  SQR_FP             ;SQR
0B02A6 16 07 0B    0139**          		DW24  TAN_FP             ;TAN
0B02A9             0140**  ;
0B02A9 C6 0D 0B    0141**  		        DW24  ZERO_FP            ;ZERO
0B02AC D1 07 0B    0142**          		DW24  FONE_FP            ;FONE
0B02AF 10 06 0B    0143**          		DW24  TRUE_FP            ;TRUE
0B02B2 3D 06 0B    0144**          		DW24  PI_FP              ;PI
0B02B5             0145**  ;
0B02B5 84 06 0B    0146**  		        DW24  VAL_FP             ;VAL
0B02B8 0C 0A 0B    0147**          		DW24  STR_FP             ;STR$
0B02BB             0148**  ;
0B02BB 6D 0C 0B    0149**          		DW24  SFIX_FP            ;FIX
0B02BE 49 0D 0B    0150**          		DW24  SFLOAT_FP          ;FLOAT
0B02C1             0151**  ;
0B02C1 97 0D 0B    0152**  		        DW24  FTEST_FP           ;TEST
0B02C4 A9 0D 0B    0153**          		DW24  FCOMP_FP           ;COMPARE
0B02C7             0154**  ;
0B02C7 F7 02 0B    0155**  RTABLE:			DW24  FAND            ;AND (FLOATING-POINT)
0B02CA 65 03 0B    0156**          		DW24  FBDIV           ;DIV
0B02CD 0A 03 0B    0157**          		DW24  FEOR            ;EOR
0B02D0 30 03 0B    0158**          		DW24  FMOD            ;MOD
0B02D3 1D 03 0B    0159**          		DW24  FFOR             ;OR
0B02D6 E9 05 0B    0160**          		DW24  FLE             ;<=
0B02D9 F8 05 0B    0161**          		DW24  FNE             ;<>
0B02DC DC 05 0B    0162**          		DW24  FGE             ;>=
0B02DF C1 05 0B    0163**          		DW24  FLT             ;<
0B02E2 05 06 0B    0164**          		DW24  FEQ             ;=
0B02E5 B1 04 0B    0165**          		DW24  FMUL            ;*
0B02E8 9F 03 0B    0166**          		DW24  FADD            ;+
0B02EB CE 05 0B    0167**          		DW24  FGT             ;>
0B02EE 86 03 0B    0168**          		DW24  FSUB            ;-
0B02F1 8E 05 0B    0169**          		DW24  FPOW            ;^
0B02F4 08 04 0B    0170**          		DW24  FDIV            ;/
0B02F7             0171**  ;
0B02F7             0172**  ;       PAGE
0B02F7             0173**  ;
0B02F7             0174**  ;ARITHMETIC AND LOGICAL OPERATORS:
0B02F7             0175**  ;All take two arguments, in HLH'L'C & DED'E'B.
0B02F7             0176**  ;Output in HLH'L'C
0B02F7             0177**  ;All registers except IX, IY destroyed.
0B02F7             0178**  ; (N.B. FPOW destroys IX).
0B02F7             0179**  ;
0B02F7             0180**  ;FAND - Floating-point AND.
0B02F7             0181**  ;IAND - Integer AND.
0B02F7             0182**  ;
0B02F7 CD 61 0C 0B 0183**  FAND:			CALL    FIX2
0B02FB 7C          0184**  IAND:			LD      A,H
0B02FC A2          0185**          		AND     D
0B02FD 67          0186**          		LD      H,A
0B02FE 7D          0187**          		LD      A,L
0B02FF A3          0188**          		AND     E
0B0300 6F          0189**          		LD      L,A
0B0301 D9          0190**          		EXX
0B0302 7C          0191**          		LD      A,H
0B0303 A2          0192**          		AND     D
0B0304 67          0193**          		LD      H,A
0B0305 7D          0194**          		LD      A,L
0B0306 A3          0195**          		AND     E
0B0307 6F          0196**          		LD      L,A
0B0308 D9          0197**          		EXX
0B0309 C9          0198**          		RET
0B030A             0199**  ;
0B030A             0200**  ;FEOR - Floating-point exclusive-OR.
0B030A             0201**  ;IEOR - Integer exclusive-OR.
0B030A             0202**  ;
0B030A CD 61 0C 0B 0203**  FEOR:			CALL    FIX2
0B030E 7C          0204**  IEOR:			LD      A,H
0B030F AA          0205**          		XOR     D
0B0310 67          0206**          		LD      H,A
0B0311 7D          0207**          		LD      A,L
0B0312 AB          0208**          		XOR     E
0B0313 6F          0209**          		LD      L,A
0B0314 D9          0210**          		EXX
0B0315 7C          0211**          		LD      A,H
0B0316 AA          0212**          		XOR     D
0B0317 67          0213**          		LD      H,A
0B0318 7D          0214**          		LD      A,L
0B0319 AB          0215**          		XOR     E
0B031A 6F          0216**          		LD      L,A
0B031B D9          0217**          		EXX
0B031C C9          0218**          		RET
0B031D             0219**  ;
0B031D             0220**  ;FOR - Floating-point OR.
0B031D             0221**  ;IOR - Integer OR.
0B031D             0222**  ;
0B031D CD 61 0C 0B 0223**  FFOR:			CALL    FIX2
0B0321 7C          0224**  IOR:			LD      A,H
0B0322 B2          0225**          		OR      D
0B0323 67          0226**          		LD      H,A
0B0324 7D          0227**          		LD      A,L
0B0325 B3          0228**          		OR      E
0B0326 6F          0229**          		LD      L,A
0B0327 D9          0230**          		EXX
0B0328 7C          0231**          		LD      A,H
0B0329 B2          0232**          		OR      D
0B032A 67          0233**          		LD      H,A
0B032B 7D          0234**          		LD      A,L
0B032C B3          0235**          		OR      E
0B032D 6F          0236**          		LD      L,A
0B032E D9          0237**          		EXX
0B032F C9          0238**          		RET
0B0330             0239**  ;
0B0330             0240**  ;FMOD - Floating-point remainder.
0B0330             0241**  ;IMOD - Integer remainder.
0B0330             0242**  ;
0B0330 CD 61 0C 0B 0243**  FMOD:			CALL    FIX2
0B0334 7C          0244**  IMOD:			LD      A,H
0B0335 AA          0245**          		XOR     D               ;DIV RESULT SIGN
0B0336 CB 7C       0246**          		BIT     7,H
0B0338 08          0247**          		EX      AF,AF'
0B0339 CB 7C       0248**          		BIT     7,H
0B033B C4 7D 0C 0B 0249**          		CALL    NZ,NEGATE       ;MAKE ARGUMENTS +VE
0B033F CD 7A 0D 0B 0250**          		CALL    SWAP_FP
0B0343 CB 7C       0251**          		BIT     7,H
0B0345 C4 7D 0C 0B 0252**          		CALL    NZ,NEGATE
0B0349 44          0253**          		LD      B,H
0B034A 4D          0254**          		LD      C,L
0B034B 21 00 00 00 0255**          		LD      HL,0
0B034F D9          0256**          		EXX
0B0350 44          0257**          		LD      B,H
0B0351 4D          0258**          		LD      C,L
0B0352 21 00 00 00 0259**          		LD      HL,0
0B0356 3E DF       0260**          		LD      A,-33
0B0358 CD 07 0F 0B 0261**          		CALL    DIVA            ;DIVIDE
0B035C D9          0262**          		EXX
0B035D 0E 00       0263**          		LD      C,0             ;INTEGER MARKER
0B035F 08          0264**          		EX      AF,AF'
0B0360 C8          0265**          		RET     Z
0B0361 C3 7D 0C 0B 0266**          		JP      NEGATE
0B0365             0267**  ;
0B0365             0268**  ;BDIV - Integer division.
0B0365             0269**  ;
0B0365 CD 61 0C 0B 0270**  FBDIV:			CALL    FIX2
0B0369 CD 34 03 0B 0271**  IBDIV:			CALL    IMOD
0B036D B7          0272**          		OR      A
0B036E CD 7A 0D 0B 0273**          		CALL    SWAP_FP
0B0372 0E 00       0274**          		LD      C,0
0B0374 F0          0275**          		RET     P
0B0375 C3 7D 0C 0B 0276**          		JP      NEGATE
0B0379             0277**  ;
0B0379             0278**  ;ISUB - Integer subtraction.
0B0379             0279**  ;FSUB - Floating point subtraction with rounding.
0B0379             0280**  ;
0B0379 CD 15 0E 0B 0281**  ISUB:			CALL    SUB_
0B037D E0          0282**          		RET     PO
0B037E CD 0D 0E 0B 0283**          		CALL    ADD_
0B0382 CD 3D 0D 0B 0284**          		CALL    FLOAT2
0B0386 7A          0285**  FSUB:			LD      A,D
0B0387 EE 80       0286**          		XOR     80H             ;CHANGE SIGN THEN ADD
0B0389 57          0287**          		LD      D,A
0B038A 18 13       0288**          		JR      FADD
0B038C             0289**  ;
0B038C             0290**  ;Reverse subtract.
0B038C             0291**  ;
0B038C 7C          0292**  RSUB:			LD      A,H
0B038D EE 80       0293**          		XOR     80H
0B038F 67          0294**          		LD      H,A
0B0390 18 0D       0295**          		JR      FADD
0B0392             0296**  ;
0B0392             0297**  ;IADD - Integer addition.
0B0392             0298**  ;FADD - Floating point addition with rounding.
0B0392             0299**  ;
0B0392 CD 0D 0E 0B 0300**  IADD:			CALL    ADD_
0B0396 E0          0301**          		RET     PO
0B0397 CD 15 0E 0B 0302**          		CALL    SUB_
0B039B CD 3D 0D 0B 0303**          		CALL    FLOAT2
0B039F 05          0304**  FADD:			DEC     B
0B03A0 04          0305**          		INC     B
0B03A1 C8          0306**          		RET     Z               ;ARG 2 ZERO
0B03A2 0D          0307**          		DEC     C
0B03A3 0C          0308**          		INC     C
0B03A4 CA 7A 0D 0B 0309**          		JP      Z,SWAP_FP          ;ARG 1 ZERO
0B03A8 D9          0310**          		EXX
0B03A9 01 00 00 00 0311**          		LD      BC,0            ;INITIALISE
0B03AD D9          0312**          		EXX
0B03AE 7C          0313**          		LD      A,H
0B03AF AA          0314**          		XOR     D               ;XOR SIGNS
0B03B0 F5          0315**          		PUSH    AF
0B03B1 78          0316**          		LD      A,B
0B03B2 B9          0317**          		CP      C               ;COMPARE EXPONENTS
0B03B3 DC 7A 0D 0B 0318**          		CALL    C,SWAP_FP          ;MAKE DED'E'B LARGEST
0B03B7 78          0319**          		LD      A,B
0B03B8 CB FC       0320**          		SET     7,H             ;IMPLIED 1
0B03BA C4 4E 0C 0B 0321**          		CALL    NZ,FIX          ;ALIGN
0B03BE F1          0322**          		POP     AF
0B03BF 7A          0323**          		LD      A,D             ;SIGN OF LARGER
0B03C0 CB FA       0324**          		SET     7,D             ;IMPLIED 1
0B03C2 FA D2 03 0B 0325**          		JP      M,FADD3         ;SIGNS DIFFERENT
0B03C6 CD 0D 0E 0B 0326**          		CALL    ADD_             ;HLH'L'=HLH'L'+DED'E'
0B03CA DC 82 0D 0B 0327**          		CALL    C,DIV2          ;NORMALISE
0B03CE CB FC       0328**          		SET     7,H
0B03D0 18 0D       0329**          		JR      FADD4
0B03D2             0330**  ;
0B03D2 CD 15 0E 0B 0331**  FADD3:			CALL    SUB_             ;HLH'L'=HLH'L'-DED'E'
0B03D6 DC 95 0C 0B 0332**          		CALL    C,NEG_           ;NEGATE HLH'L'B'C'
0B03DA CD 14 0D 0B 0333**          		CALL    FLO48
0B03DE 2F          0334**          		CPL                     ;CHANGE RESULT SIGN
0B03DF D9          0335**  FADD4:			EXX
0B03E0 EB          0336**          		EX      DE,HL
0B03E1 21 00 80 00 0337**          		LD      HL,8000H
0B03E5 B7          0338**          		OR      A               ;CLEAR CARRY
0B03E6 52 ED 42    0339**          		SBC.S   HL,BC
0B03E9 EB          0340**          		EX      DE,HL
0B03EA D9          0341**          		EXX
0B03EB CC 74 0D 0B 0342**          		CALL    Z,ODD           ;ROUND UNBIASSED
0B03EF DC 62 0D 0B 0343**          		CALL    C,ADD1_FP          ;ROUND UP
0B03F3 DC 8F 0D 0B 0344**          		CALL    C,INCC
0B03F7 CB BC       0345**          		RES     7,H
0B03F9 0D          0346**          		DEC     C
0B03FA 0C          0347**          		INC     C
0B03FB CA C6 0D 0B 0348**          		JP      Z,ZERO_FP
0B03FF B7          0349**          		OR      A               ;RESULT SIGNQ
0B0400 F0          0350**          		RET     P               ;POSITIVE
0B0401 CB FC       0351**          		SET     7,H             ;NEGATIVE
0B0403 C9          0352**          		RET
0B0404             0353**  ;
0B0404             0354**  ;IDIV - Integer division.
0B0404             0355**  ;FDIV - Floating point division with rounding.
0B0404             0356**  ;
0B0404 CD 3D 0D 0B 0357**  IDIV:			CALL    FLOAT2
0B0408 05          0358**  FDIV:			DEC     B               ;TEST FOR ZERO
0B0409 04          0359**          		INC     B
0B040A 3E 12       0360**          		LD      A,DIVBY0
0B040C CA 20 02 0B 0361**          		JP      Z,ERROR_FP_         ;"Division by zero"
0B0410 0D          0362**          		DEC     C               ;TEST FOR ZERO
0B0411 0C          0363**          		INC     C
0B0412 C8          0364**          		RET     Z
0B0413 7C          0365**          		LD      A,H
0B0414 AA          0366**          		XOR     D               ;CALC. RESULT SIGN
0B0415 08          0367**          		EX      AF,AF'          ;SAVE SIGN
0B0416 CB FA       0368**          		SET     7,D             ;REPLACE IMPLIED 1's
0B0418 CB FC       0369**          		SET     7,H
0B041A C5          0370**          		PUSH    BC              ;SAVE EXPONENTS
0B041B 42          0371**          		LD      B,D             ;LOAD REGISTERS
0B041C 4B          0372**          		LD      C,E
0B041D 11 00 00 00 0373**          		LD      DE,0
0B0421 D9          0374**          		EXX
0B0422 42          0375**          		LD      B,D
0B0423 4B          0376**          		LD      C,E
0B0424 11 00 00 00 0377**          		LD      DE,0
0B0428 3E E0       0378**          		LD      A,-32           ;LOOP COUNTER
0B042A CD 07 0F 0B 0379**          		CALL    DIVA            ;DIVIDE
0B042E D9          0380**          		EXX
0B042F CB 7A       0381**          		BIT     7,D
0B0431 D9          0382**          		EXX
0B0432 CC 26 0F 0B 0383**          		CALL    Z,DIVB          ;NORMALISE & INC A
0B0436 EB          0384**          		EX      DE,HL
0B0437 D9          0385**          		EXX
0B0438 CB 38       0386**          		SRL     B               ;DIVISOR/2
0B043A CB 19       0387**          		RR      C
0B043C B7          0388**          		OR      A               ;CLEAR CARRY
0B043D 52 ED 42    0389**          		SBC.S   HL,BC           ;REMAINDER-DIVISOR/2
0B0440 3F          0390**          		CCF
0B0441 EB          0391**          		EX      DE,HL           ;RESULT IN HLH'L'
0B0442 CC 74 0D 0B 0392**          		CALL    Z,ODD           ;ROUND UNBIASSED
0B0446 DC 62 0D 0B 0393**          		CALL    C,ADD1_FP          ;ROUND UP
0B044A C1          0394**          		POP     BC              ;RESTORE EXPONENTS
0B044B DC 8F 0D 0B 0395**          		CALL    C,INCC
0B044F 1F          0396**          		RRA                     ;LSB OF A TO CARRY
0B0450 79          0397**          		LD      A,C             ;COMPUTE NEW EXPONENT
0B0451 98          0398**          		SBC     A,B
0B0452 3F          0399**          		CCF
0B0453 C3 F4 04 0B 0400**          		JP      CHKOVF
0B0457             0401**  ;
0B0457             0402**  ;IMUL - Integer multiplication.
0B0457             0403**  ;
0B0457 7C          0404**  IMUL:			LD      A,H
0B0458 AA          0405**          		XOR     D
0B0459 08          0406**          		EX      AF,AF'          ;SAVE RESULT SIGN
0B045A CB 7C       0407**          		BIT     7,H
0B045C C4 7D 0C 0B 0408**          		CALL    NZ,NEGATE
0B0460 CD 7A 0D 0B 0409**          		CALL    SWAP_FP
0B0464 CB 7C       0410**          		BIT     7,H
0B0466 C4 7D 0C 0B 0411**          		CALL    NZ,NEGATE
0B046A 44          0412**          		LD      B,H
0B046B 4D          0413**          		LD      C,L
0B046C 21 00 00 00 0414**          		LD      HL,0
0B0470 D9          0415**          		EXX
0B0471 44          0416**          		LD      B,H
0B0472 4D          0417**          		LD      C,L
0B0473 21 00 00 00 0418**          		LD      HL,0
0B0477 3E DF       0419**          		LD      A,-33
0B0479 CD 3E 0F 0B 0420**          		CALL    MULA            ;MULTIPLY
0B047D D9          0421**          		EXX
0B047E 0E BF       0422**          		LD      C,191           ;PRESET EXPONENT
0B0480 CD A2 0D 0B 0423**          		CALL    TEST_FP            ;TEST RANGE
0B0484 20 0F       0424**          		JR      NZ,IMUL1        ;TOO BIG
0B0486 CB 7A       0425**          		BIT     7,D
0B0488 20 0B       0426**          		JR      NZ,IMUL1
0B048A CD 7A 0D 0B 0427**          		CALL    SWAP_FP
0B048E 4A          0428**          		LD      C,D             ;INTEGER MARKER
0B048F 08          0429**          		EX      AF,AF'
0B0490 F0          0430**          		RET     P
0B0491 C3 7D 0C 0B 0431**          		JP      NEGATE
0B0495             0432**  ;
0B0495 0D          0433**  IMUL1:			DEC     C
0B0496 D9          0434**          		EXX
0B0497 CB 23       0435**          		SLA     E
0B0499 CB 12       0436**          		RL      D
0B049B D9          0437**          		EXX
0B049C CB 13       0438**          		RL      E
0B049E CB 12       0439**          		RL      D
0B04A0 D9          0440**          		EXX
0B04A1 52 ED 6A    0441**          		ADC.S   HL,HL
0B04A4 D9          0442**          		EXX
0B04A5 52 ED 6A    0443**          		ADC.S   HL,HL
0B04A8 F2 95 04 0B 0444**          		JP      P,IMUL1         ;NORMALISE
0B04AC 08          0445**          		EX      AF,AF'
0B04AD F8          0446**          		RET     M
0B04AE CB BC       0447**          		RES     7,H             ;POSITIVE
0B04B0 C9          0448**          		RET
0B04B1             0449**  ;
0B04B1             0450**  ;FMUL - Floating point multiplication with rounding.
0B04B1             0451**  ;
0B04B1 05          0452**  FMUL:			DEC     B               ;TEST FOR ZERO
0B04B2 04          0453**          		INC     B
0B04B3 CA C6 0D 0B 0454**          		JP      Z,ZERO_FP
0B04B7 0D          0455**          		DEC     C               ;TEST FOR ZERO
0B04B8 0C          0456**          		INC     C
0B04B9 C8          0457**          		RET     Z
0B04BA 7C          0458**          		LD      A,H
0B04BB AA          0459**          		XOR     D               ;CALC. RESULT SIGN
0B04BC 08          0460**          		EX      AF,AF'
0B04BD CB FA       0461**          		SET     7,D             ;REPLACE IMPLIED 1's
0B04BF CB FC       0462**          		SET     7,H
0B04C1 C5          0463**          		PUSH    BC              ;SAVE EXPONENTS
0B04C2 44          0464**          		LD      B,H             ;LOAD REGISTERS
0B04C3 4D          0465**          		LD      C,L
0B04C4 21 00 00 00 0466**          		LD      HL,0
0B04C8 D9          0467**          		EXX
0B04C9 44          0468**          		LD      B,H
0B04CA 4D          0469**          		LD      C,L
0B04CB 21 00 00 00 0470**          		LD      HL,0
0B04CF 3E E0       0471**          		LD      A,-32           ;LOOP COUNTER
0B04D1 CD 3E 0F 0B 0472**          		CALL    MULA            ;MULTIPLY
0B04D5 DC 54 0F 0B 0473**          		CALL    C,MULB          ;NORMALISE & INC A
0B04D9 D9          0474**          		EXX
0B04DA E5          0475**          		PUSH    HL
0B04DB 21 00 80 00 0476**          		LD      HL,8000H
0B04DF B7          0477**          		OR      A               ;CLEAR CARRY
0B04E0 52 ED 52    0478**          		SBC.S   HL,DE
0B04E3 E1          0479**          		POP     HL
0B04E4 CC 74 0D 0B 0480**          		CALL    Z,ODD           ;ROUND UNBIASSED
0B04E8 DC 62 0D 0B 0481**          		CALL    C,ADD1_FP          ;ROUND UP
0B04EC C1          0482**          		POP     BC              ;RESTORE EXPONENTS
0B04ED DC 8F 0D 0B 0483**          		CALL    C,INCC
0B04F1 1F          0484**          		RRA                     ;LSB OF A TO CARRY
0B04F2 79          0485**          		LD      A,C             ;COMPUTE NEW EXPONENT
0B04F3 88          0486**          		ADC     A,B
0B04F4 38 06       0487**  CHKOVF:			JR      C,CHKO1
0B04F6 F2 C6 0D 0B 0488**          		JP      P,ZERO_FP          ;UNDERFLOW
0B04FA 18 04       0489**          		JR      CHKO2
0B04FC FA 91 0D 0B 0490**  CHKO1:			JP      M,OFLOW         ;OVERFLOW
0B0500 C6 80       0491**  CHKO2:			ADD     A,80H
0B0502 4F          0492**          		LD      C,A
0B0503 CA C6 0D 0B 0493**          		JP      Z,ZERO_FP
0B0507 08          0494**          		EX      AF,AF'          ;RESTORE SIGN BIT
0B0508 CB BC       0495**          		RES     7,H
0B050A F0          0496**          		RET     P
0B050B CB FC       0497**          		SET     7,H
0B050D C9          0498**          		RET
0B050E             0499**  ;
0B050E             0500**  ;IPOW - Integer involution.
0B050E             0501**  ;
0B050E CD 7A 0D 0B 0502**  IPOW:			CALL    SWAP_FP
0B0512 CB 7C       0503**          		BIT     7,H
0B0514 F5          0504**          		PUSH    AF              ;SAVE SIGN
0B0515 C4 7D 0C 0B 0505**          		CALL    NZ,NEGATE
0B0519 48          0506**  IPOW0:			LD      C,B
0B051A 06 20       0507**          		LD      B,32            ;LOOP COUNTER
0B051C CD 32 0E 0B 0508**  IPOW1:			CALL    X2
0B0520 38 08       0509**          		JR      C,IPOW2
0B0522 10 F8       0510**          		DJNZ    IPOW1
0B0524 F1          0511**          		POP     AF
0B0525 D9          0512**          		EXX
0B0526 2C          0513**          		INC     L               ;RESULT=1
0B0527 D9          0514**          		EXX
0B0528 4C          0515**          		LD      C,H
0B0529 C9          0516**          		RET
0B052A             0517**  ;
0B052A F1          0518**  IPOW2:			POP     AF
0B052B C5          0519**          		PUSH    BC
0B052C EB          0520**          		EX      DE,HL
0B052D E5          0521**          		PUSH    HL
0B052E D9          0522**          		EXX
0B052F EB          0523**          		EX      DE,HL
0B0530 E5          0524**          		PUSH    HL
0B0531 D9          0525**          		EXX
0B0532 DD 21 00 00 0526**          		LD      IX,0
       00          
0B0537 DD 39       0527**          		ADD     IX,SP
0B0539 28 48       0528**          		JR      Z,IPOW4
0B053B C5          0529**          		PUSH    BC
0B053C D9          0530**          		EXX
0B053D D5          0531**          		PUSH    DE
0B053E D9          0532**          		EXX
0B053F D5          0533**          		PUSH    DE
0B0540 CD 49 0D 0B 0534**          		CALL    SFLOAT_FP
0B0544 CD 7D 08 0B 0535**          		CALL    RECIP
0B0548 DD 71 04    0536**          		LD      (IX+4),C
0B054B D9          0537**          		EXX
0B054C DD 75 00    0538**          		LD      (IX+0),L
0B054F DD 74 01    0539**          		LD      (IX+1),H
0B0552 D9          0540**          		EXX
0B0553 DD 75 02    0541**          		LD      (IX+2),L
0B0556 DD 74 03    0542**          		LD      (IX+3),H
0B0559 18 21       0543**          		JR      IPOW5
0B055B             0544**  ;
0B055B C5          0545**  IPOW3:			PUSH    BC
0B055C D9          0546**          		EXX
0B055D CB 23       0547**          		SLA     E
0B055F CB 12       0548**          		RL      D
0B0561 D5          0549**          		PUSH    DE
0B0562 D9          0550**          		EXX
0B0563 CB 13       0551**          		RL      E
0B0565 CB 12       0552**          		RL      D
0B0567 D5          0553**          		PUSH    DE
0B0568 3E 0A       0554**          		LD      A,'*' & 0FH
0B056A F5          0555**          		PUSH    AF
0B056B CD 46 0E 0B 0556**          		CALL    COPY_
0B056F CD 26 02 0B 0557**          		CALL    OP              ;SQUARE
0B0573 F1          0558**          		POP     AF
0B0574 CD 72 0B 0B 0559**          		CALL    DLOAD5
0B0578 DC 26 02 0B 0560**          		CALL    C,OP            ;MULTIPLY BY X
0B057C D1          0561**  IPOW5:			POP     DE
0B057D D9          0562**          		EXX
0B057E D1          0563**          		POP     DE
0B057F D9          0564**          		EXX
0B0580 79          0565**          		LD      A,C
0B0581 C1          0566**          		POP     BC
0B0582 4F          0567**          		LD      C,A
0B0583 10 D6       0568**  IPOW4:			DJNZ    IPOW3
0B0585 F1          0569**          		POP     AF
0B0586 F1          0570**          		POP     AF
0B0587 F1          0571**          		POP     AF
0B0588 C9          0572**          		RET
0B0589             0573**  ;
0B0589 F1          0574**  FPOW0:			POP     AF
0B058A F1          0575**          		POP     AF
0B058B F1          0576**          		POP     AF
0B058C 18 8B       0577**          		JR      IPOW0
0B058E             0578**  ;
0B058E             0579**  ;FPOW - Floating-point involution.
0B058E             0580**  ;
0B058E CB 7A       0581**  FPOW:			BIT     7,D
0B0590 F5          0582**          		PUSH    AF
0B0591 CD 7A 0D 0B 0583**          		CALL    SWAP_FP
0B0595 CD 56 0E 0B 0584**          		CALL    PUSH5
0B0599 0D          0585**          		DEC     C
0B059A 0C          0586**          		INC     C
0B059B 28 EC       0587**          		JR      Z,FPOW0
0B059D 3E 9E       0588**          		LD      A,158
0B059F B9          0589**          		CP      C
0B05A0 38 0A       0590**          		JR      C,FPOW1
0B05A2 3C          0591**          		INC     A
0B05A3 CD 4E 0C 0B 0592**          		CALL    FIX
0B05A7 08          0593**          		EX      AF,AF'
0B05A8 F2 89 05 0B 0594**          		JP      P,FPOW0
0B05AC CD 7A 0D 0B 0595**  FPOW1:			CALL    SWAP_FP
0B05B0 CD 9A 08 0B 0596**          		CALL    LN0
0B05B4 CD 5F 0E 0B 0597**          		CALL    POP5
0B05B8 F1          0598**          		POP     AF
0B05B9 CD B1 04 0B 0599**          		CALL    FMUL
0B05BD C3 FC 07 0B 0600**          		JP      EXP0
0B05C1             0601**  ;
0B05C1             0602**  ;Integer and floating-point compare.
0B05C1             0603**  ;Result is TRUE (-1) or FALSE (0).
0B05C1             0604**  ;
0B05C1 CD D0 0D 0B 0605**  FLT:			CALL    FCP
0B05C5 18 04       0606**          		JR      ILT1
0B05C7 CD C2 0D 0B 0607**  ILT:			CALL    ICP
0B05CB D0          0608**  ILT1:			RET     NC
0B05CC 18 42       0609**          		JR      TRUE_FP
0B05CE             0610**  ;
0B05CE CD D0 0D 0B 0611**  FGT:			CALL    FCP
0B05D2 18 04       0612**          		JR      IGT1
0B05D4 CD C2 0D 0B 0613**  IGT:			CALL    ICP
0B05D8 C8          0614**  IGT1:			RET     Z
0B05D9 D8          0615**          		RET     C
0B05DA 18 34       0616**          		JR      TRUE_FP
0B05DC             0617**  ;
0B05DC CD D0 0D 0B 0618**  FGE:			CALL    FCP
0B05E0 18 04       0619**          		JR      IGE1
0B05E2 CD C2 0D 0B 0620**  IGE:			CALL    ICP
0B05E6 D8          0621**  IGE1:			RET     C
0B05E7 18 27       0622**          		JR      TRUE_FP
0B05E9             0623**  ;
0B05E9 CD D0 0D 0B 0624**  FLE:			CALL    FCP
0B05ED 18 04       0625**          		JR      ILE1
0B05EF CD C2 0D 0B 0626**  ILE:			CALL    ICP
0B05F3 28 1B       0627**  ILE1:			JR      Z,TRUE_FP
0B05F5 D0          0628**          		RET     NC
0B05F6 18 18       0629**          		JR      TRUE_FP
0B05F8             0630**  ;
0B05F8 CD D0 0D 0B 0631**  FNE:			CALL    FCP
0B05FC 18 04       0632**          		JR      INE1
0B05FE CD C2 0D 0B 0633**  INE:			CALL    ICP
0B0602 C8          0634**  INE1:			RET     Z
0B0603 18 0B       0635**          		JR      TRUE_FP
0B0605             0636**  ;
0B0605 CD D0 0D 0B 0637**  FEQ:			CALL    FCP
0B0609 18 04       0638**          		JR      IEQ1
0B060B CD C2 0D 0B 0639**  IEQ:			CALL    ICP
0B060F C0          0640**  IEQ1:			RET     NZ
0B0610 21 FF FF FF 0641**  TRUE_FP:			LD      HL,-1
0B0614 D9          0642**          		EXX
0B0615 21 FF FF FF 0643**          		LD      HL,-1
0B0619 D9          0644**          		EXX
0B061A AF          0645**          		XOR     A
0B061B 4F          0646**          		LD      C,A
0B061C C9          0647**          		RET
0B061D             0648**  ;
0B061D             0649**  ;FUNCTIONS:
0B061D             0650**  ;
0B061D             0651**  ;Result returned in HLH'L'C (floating point)
0B061D             0652**  ;Result returned in HLH'L' (C=0) (integer)
0B061D             0653**  ;All registers except IY destroyed.
0B061D             0654**  ;
0B061D             0655**  ;ABS - Absolute value
0B061D             0656**  ;Result is numeric, variable type.
0B061D             0657**  ;
0B061D CB 7C       0658**  ABSV_FP:			BIT     7,H
0B061F C8          0659**          		RET     Z               ;POSITIVE/ZERO
0B0620 0D          0660**          		DEC     C
0B0621 0C          0661**          		INC     C
0B0622 CA 7D 0C 0B 0662**          		JP      Z,NEGATE        ;INTEGER
0B0626 CB BC       0663**          		RES     7,H
0B0628 C9          0664**          		RET
0B0629             0665**  ;
0B0629             0666**  ;NOT - Complement integer.
0B0629             0667**  ;Result is integer numeric.
0B0629             0668**  ;
0B0629 CD 6D 0C 0B 0669**  NOTK_FP:			CALL    SFIX_FP
0B062D 7C          0670**          		LD      A,H
0B062E 2F          0671**          		CPL
0B062F 67          0672**          		LD      H,A
0B0630 7D          0673**          		LD      A,L
0B0631 2F          0674**          		CPL
0B0632 6F          0675**          		LD      L,A
0B0633 D9          0676**          		EXX
0B0634 7C          0677**          		LD      A,H
0B0635 2F          0678**          		CPL
0B0636 67          0679**          		LD      H,A
0B0637 7D          0680**          		LD      A,L
0B0638 2F          0681**          		CPL
0B0639 6F          0682**          		LD      L,A
0B063A D9          0683**          		EXX
0B063B AF          0684**          		XOR     A               ;NUMERIC MARKER
0B063C C9          0685**          		RET
0B063D             0686**  ;
0B063D             0687**  ;PI - Return PI (3.141592654)
0B063D             0688**  ;Result is floating-point numeric.
0B063D             0689**  ;
0B063D 21 0F 49 00 0690**  PI_FP:			LD      HL,490FH
0B0641 D9          0691**          		EXX
0B0642 21 A2 DA 00 0692**          		LD      HL,0DAA2H
0B0646 D9          0693**          		EXX
0B0647 0E 81       0694**          		LD      C,81H
0B0649 AF          0695**          		XOR     A               ;NUMERIC MARKER
0B064A C9          0696**          		RET
0B064B             0697**  ;
0B064B             0698**  ;DEG - Convert radians to degrees
0B064B             0699**  ;Result is floating-point numeric.
0B064B             0700**  ;
0B064B CD 5F 06 0B 0701**  DEG_FP:			CALL    FPI180
0B064F CD B1 04 0B 0702**          		CALL    FMUL
0B0653 AF          0703**          		XOR     A
0B0654 C9          0704**          		RET
0B0655             0705**  ;
0B0655             0706**  ;RAD - Convert degrees to radians
0B0655             0707**  ;Result is floating-point numeric.
0B0655             0708**  ;
0B0655 CD 5F 06 0B 0709**  RAD_FP:			CALL    FPI180
0B0659 CD 08 04 0B 0710**          		CALL    FDIV
0B065D AF          0711**          		XOR     A
0B065E C9          0712**          		RET
0B065F             0713**  ;
0B065F             0714**  ;180/PI
0B065F             0715**  ;
0B065F CD 49 0D 0B 0716**  FPI180:			CALL    SFLOAT_FP
0B0663 11 2E 65 00 0717**          		LD      DE,652EH
0B0667 D9          0718**          		EXX
0B0668 11 D3 E0 00 0719**          		LD      DE,0E0D3H
0B066C D9          0720**          		EXX
0B066D 06 85       0721**          		LD      B,85H
0B066F C9          0722**          		RET
0B0670             0723**  ;
0B0670             0724**  ;SGN - Return -1, 0 or +1
0B0670             0725**  ;Result is integer numeric.
0B0670             0726**  ;
0B0670 CD A2 0D 0B 0727**  SGN_FP:			CALL    TEST_FP
0B0674 B1          0728**          		OR      C
0B0675 C8          0729**          		RET     Z               ;ZERO
0B0676 CB 7C       0730**          		BIT     7,H
0B0678 C2 10 06 0B 0731**          		JP      NZ,TRUE_FP         ;-1
0B067C CD C6 0D 0B 0732**          		CALL    ZERO_FP
0B0680 C3 62 0D 0B 0733**          		JP      ADD1_FP            ;1
0B0684             0734**  ;
0B0684             0735**  ;VAL - Return numeric value of string.
0B0684             0736**  ;Input: ASCII string at IX
0B0684             0737**  ;Result is variable type numeric.
0B0684             0738**  ;
0B0684 CD E0 0F 0B 0739**  VAL_FP:			CALL    SIGNQ
0B0688 F5          0740**          		PUSH    AF
0B0689 CD 90 0B 0B 0741**          		CALL    CON_FP
0B068D F1          0742**          		POP     AF
0B068E FE 2D       0743**          		CP      '-'
0B0690 3E 00       0744**          		LD      A,0             ;NUMERIC MARKER
0B0692 C0          0745**          		RET     NZ
0B0693 0D          0746**          		DEC     C
0B0694 0C          0747**          		INC     C
0B0695 CA 7D 0C 0B 0748**          		JP      Z,NEGATE        ;ZERO/INTEGER
0B0699 7C          0749**          		LD      A,H
0B069A EE 80       0750**          		XOR     80H             ;CHANGE SIGN (FP)
0B069C 67          0751**          		LD      H,A
0B069D AF          0752**          		XOR     A
0B069E C9          0753**          		RET
0B069F             0754**  ;
0B069F             0755**  ;INT - Floor function
0B069F             0756**  ;Result is integer numeric.
0B069F             0757**  ;
0B069F 0D          0758**  INT_FP_:			DEC     C
0B06A0 0C          0759**          		INC     C
0B06A1 C8          0760**          		RET     Z               ;ZERO/INTEGER
0B06A2 3E 9F       0761**          		LD      A,159
0B06A4 44          0762**          		LD      B,H             ;B7=SIGN BIT
0B06A5 CD 4E 0C 0B 0763**          		CALL    FIX
0B06A9 08          0764**          		EX      AF,AF'
0B06AA A0          0765**          		AND     B
0B06AB FC 62 0D 0B 0766**          		CALL    M,ADD1_FP          ;NEGATIVE NON-INTEGER
0B06AF 78          0767**          		LD      A,B
0B06B0 B7          0768**          		OR      A
0B06B1 FC 7D 0C 0B 0769**          		CALL    M,NEGATE
0B06B5 AF          0770**          		XOR     A
0B06B6 4F          0771**          		LD      C,A
0B06B7 C9          0772**          		RET
0B06B8             0773**  ;
0B06B8             0774**  ;SQR - square root
0B06B8             0775**  ;Result is floating-point numeric.
0B06B8             0776**  ;
0B06B8 CD 49 0D 0B 0777**  SQR_FP:			CALL    SFLOAT_FP
0B06BC CB 7C       0778**  SQR0:			BIT     7,H
0B06BE 3E 15       0779**          		LD      A,NGROOT
0B06C0 C2 20 02 0B 0780**          		JP      NZ,ERROR_FP_        ;"-ve root"
0B06C4 0D          0781**          		DEC     C
0B06C5 0C          0782**          		INC     C
0B06C6 C8          0783**          		RET     Z               ;ZERO
0B06C7 CB FC       0784**          		SET     7,H             ;IMPLIED 1
0B06C9 CB 41       0785**          		BIT     0,C
0B06CB CC 82 0D 0B 0786**          		CALL    Z,DIV2          ;MAKE EXPONENT ODD
0B06CF 79          0787**          		LD      A,C
0B06D0 D6 80       0788**          		SUB     80H
0B06D2 CB 2F       0789**          		SRA     A               ;HALVE EXPONENT
0B06D4 C6 80       0790**          		ADD     A,80H
0B06D6 4F          0791**          		LD      C,A
0B06D7 C5          0792**          		PUSH    BC              ;SAVE EXPONENT
0B06D8 EB          0793**          		EX      DE,HL
0B06D9 21 00 00 00 0794**          		LD      HL,0
0B06DD 44          0795**          		LD      B,H
0B06DE 4D          0796**          		LD      C,L
0B06DF D9          0797**          		EXX
0B06E0 EB          0798**          		EX      DE,HL
0B06E1 21 00 00 00 0799**          		LD      HL,0
0B06E5 44          0800**          		LD      B,H
0B06E6 4D          0801**          		LD      C,L
0B06E7 3E E1       0802**          		LD      A,-31
0B06E9 CD 78 0F 0B 0803**          		CALL    SQRA            ;ROOT
0B06ED D9          0804**          		EXX
0B06EE CB 78       0805**          		BIT     7,B
0B06F0 D9          0806**          		EXX
0B06F1 CC 78 0F 0B 0807**          		CALL    Z,SQRA          ;NORMALISE & INC A
0B06F5 CD B9 0F 0B 0808**          		CALL    SQRB
0B06F9 B7          0809**          		OR      A               ;CLEAR CARRY
0B06FA CD 26 0F 0B 0810**          		CALL    DIVB
0B06FE CB 1B       0811**          		RR      E               ;LSB TO CARRY
0B0700 60          0812**          		LD      H,B
0B0701 69          0813**          		LD      L,C
0B0702 D9          0814**          		EXX
0B0703 60          0815**          		LD      H,B
0B0704 69          0816**          		LD      L,C
0B0705 DC 62 0D 0B 0817**          		CALL    C,ADD1_FP          ;ROUND UP
0B0709 C1          0818**          		POP     BC              ;RESTORE EXPONENT
0B070A DC 8F 0D 0B 0819**          		CALL    C,INCC
0B070E 1F          0820**          		RRA
0B070F 9F          0821**          		SBC     A,A
0B0710 81          0822**          		ADD     A,C
0B0711 4F          0823**          		LD      C,A
0B0712 CB BC       0824**          		RES     7,H             ;POSITIVE
0B0714 AF          0825**          		XOR     A
0B0715 C9          0826**          		RET
0B0716             0827**  ;
0B0716             0828**  ;TAN - Tangent function
0B0716             0829**  ;Result is floating-point numeric.
0B0716             0830**  ;
0B0716 CD 49 0D 0B 0831**  TAN_FP:			CALL    SFLOAT_FP
0B071A CD 56 0E 0B 0832**          		CALL    PUSH5
0B071E CD 40 07 0B 0833**          		CALL    COS0
0B0722 CD 5F 0E 0B 0834**          		CALL    POP5
0B0726 CD 56 0E 0B 0835**          		CALL    PUSH5
0B072A CD 7A 0D 0B 0836**          		CALL    SWAP_FP
0B072E CD 4D 07 0B 0837**          		CALL    SIN0
0B0732 CD 5F 0E 0B 0838**          		CALL    POP5
0B0736 CD 08 04 0B 0839**          		CALL    FDIV
0B073A AF          0840**          		XOR     A               ;NUMERIC MARKER
0B073B C9          0841**          		RET
0B073C             0842**  ;
0B073C             0843**  ;COS - Cosine function
0B073C             0844**  ;Result is floating-point numeric.
0B073C             0845**  ;
0B073C CD 49 0D 0B 0846**  COS_FP:			CALL    SFLOAT_FP
0B0740 CD A5 0C 0B 0847**  COS0:			CALL    SCALE
0B0744 1C          0848**          		INC     E
0B0745 1C          0849**          		INC     E
0B0746 7B          0850**          		LD      A,E
0B0747 18 10       0851**          		JR      SIN1
0B0749             0852**  ;
0B0749             0853**  ;SIN - Sine function
0B0749             0854**  ;Result is floating-point numeric.
0B0749             0855**  ;
0B0749 CD 49 0D 0B 0856**  SIN_FP:			CALL    SFLOAT_FP
0B074D E5          0857**  SIN0:			PUSH    HL              ;H7=SIGN
0B074E CD A5 0C 0B 0858**          		CALL    SCALE
0B0752 F1          0859**          		POP     AF
0B0753 07          0860**          		RLCA
0B0754 07          0861**          		RLCA
0B0755 07          0862**          		RLCA
0B0756 E6 04       0863**          		AND     4
0B0758 AB          0864**          		XOR     E
0B0759 F5          0865**  SIN1:			PUSH    AF              ;OCTANT
0B075A CB BC       0866**          		RES     7,H
0B075C 1F          0867**          		RRA
0B075D CD EB 07 0B 0868**          		CALL    PIBY4
0B0761 DC 8C 03 0B 0869**          		CALL    C,RSUB          ;X=(PI/4)-X
0B0765 F1          0870**          		POP     AF
0B0766 F5          0871**          		PUSH    AF
0B0767 E6 03       0872**          		AND     3
0B0769 E2 A2 07 0B 0873**          		JP      PO,SIN2         ;USE COSINE APPROX.
0B076D CD 56 0E 0B 0874**          		CALL    PUSH5           ;SAVE X
0B0771 CD 4E 0E 0B 0875**          		CALL    SQUARE          ;PUSH X*X
0B0775 CD 93 0E 0B 0876**          		CALL    POLY
0B0779 B7 A8       0877**          		DW	0A8B7H          ;a(8)
0B077B 11 36       0878**          		DW	3611H
0B077D 6D          0879**          		DB	6DH
0B077E 26 DE       0880**          		DW	0DE26H          ;a(6)
0B0780 05 D0       0881**          		DW	0D005H
0B0782 73          0882**          		DB	73H
0B0783 C0 80       0883**          		DW	80C0H           ;a(4)
0B0785 88 08       0884**          		DW	888H
0B0787 79          0885**          		DB	79H
0B0788 9D AA       0886**          		DW	0AA9DH          ;a(2)
0B078A AA AA       0887**          		DW	0AAAAH
0B078C 7D          0888**          		DB	7DH
0B078D 00 00       0889**          		DW	0               ;a(0)
0B078F 00 00       0890**          		DW	0
0B0791 80          0891**          		DB	80H
0B0792 CD 5F 0E 0B 0892**          		CALL    POP5
0B0796 CD 5F 0E 0B 0893**          		CALL    POP5
0B079A CD B1 04 0B 0894**          		CALL    FMUL
0B079E C3 C7 07 0B 0895**          		JP      SIN3
0B07A2             0896**  ;
0B07A2 CD 4E 0E 0B 0897**  SIN2:			CALL    SQUARE          ;PUSH X*X
0B07A6 CD 93 0E 0B 0898**          		CALL    POLY
0B07AA 71 D5       0899**          		DW	0D571H          ;b(8)
0B07AC 78 4C       0900**          		DW	4C78H
0B07AE 70          0901**          		DB	70H
0B07AF AF 94       0902**          		DW	94AFH           ;b(6)
0B07B1 03 B6       0903**          		DW	0B603H
0B07B3 76          0904**          		DB	76H
0B07B4 C8 9C       0905**          		DW	9CC8H           ;b(4)
0B07B6 AA 2A       0906**          		DW	2AAAH
0B07B8 7B          0907**          		DB	7BH
0B07B9 DD FF       0908**          		DW	0FFDDH          ;b(2)
0B07BB FF FF       0909**          		DW	0FFFFH
0B07BD 7E          0910**          		DB	7EH
0B07BE 00 00       0911**          		DW	0               ;b(0)
0B07C0 00 00       0912**          		DW	0
0B07C2 80          0913**          		DB	80H
0B07C3 CD 5F 0E 0B 0914**          		CALL    POP5
0B07C7 F1          0915**  SIN3:			POP     AF
0B07C8 E6 04       0916**          		AND     4
0B07CA C8          0917**          		RET     Z
0B07CB 0D          0918**          		DEC     C
0B07CC 0C          0919**          		INC     C
0B07CD C8          0920**          		RET     Z               ;ZERO
0B07CE CB FC       0921**          		SET     7,H             ;MAKE NEGATIVE
0B07D0 C9          0922**          		RET
0B07D1             0923**  ;
0B07D1             0924**  ;Floating-point one:
0B07D1             0925**  ;
0B07D1 21 00 00 00 0926**  FONE_FP:			LD      HL,0
0B07D5 D9          0927**          		EXX
0B07D6 21 00 00 00 0928**          		LD      HL,0
0B07DA D9          0929**          		EXX
0B07DB 0E 80       0930**          		LD      C,80H
0B07DD C9          0931**          		RET
0B07DE             0932**  ;
0B07DE 11 00 00 00 0933**  DONE:			LD      DE,0
0B07E2 D9          0934**          		EXX
0B07E3 11 00 00 00 0935**          		LD      DE,0
0B07E7 D9          0936**          		EXX
0B07E8 06 80       0937**          		LD      B,80H
0B07EA C9          0938**          		RET
0B07EB             0939**  ;
0B07EB 11 0F 49 00 0940**  PIBY4:			LD      DE,490FH
0B07EF D9          0941**          		EXX
0B07F0 11 A2 DA 00 0942**          		LD      DE,0DAA2H
0B07F4 D9          0943**          		EXX
0B07F5 06 7F       0944**          		LD      B,7FH
0B07F7 C9          0945**          		RET
0B07F8             0946**  ;
0B07F8             0947**  ;EXP - Exponential function
0B07F8             0948**  ;Result is floating-point numeric.
0B07F8             0949**  ;
0B07F8 CD 49 0D 0B 0950**  EXP_FP:			CALL    SFLOAT_FP
0B07FC CD 89 08 0B 0951**  EXP0:			CALL    LN2             ;LN(2)
0B0800 D9          0952**          		EXX
0B0801 1D          0953**  	        	DEC     E
0B0802 01 CF D1 00 0954**  		        LD      BC,0D1CFH       ;0.6931471805599453
0B0806 D9          0955**          		EXX
0B0807 E5          0956**          		PUSH    HL              ;H7=SIGN
0B0808 CD B8 0C 0B 0957**          		CALL    MOD48           ;"MODULUS"
0B080C F1          0958**          		POP     AF
0B080D CB 7B       0959**          		BIT     7,E
0B080F 28 0B       0960**          		JR      Z,EXP1
0B0811 17          0961**          		RLA
0B0812 DA C6 0D 0B 0962**          		JP      C,ZERO_FP
0B0816 3E 18       0963**          		LD      A,EXPRNG
0B0818 C3 20 02 0B 0964**          		JP      ERROR_FP_           ;"Exp range"
0B081C             0965**  ;
0B081C E6 80       0966**  EXP1:			AND     80H
0B081E B3          0967**          		OR      E
0B081F F5          0968**          		PUSH    AF              ;INTEGER PART
0B0820 CB BC       0969**          		RES     7,H
0B0822 CD 56 0E 0B 0970**          		CALL    PUSH5           ;PUSH X*LN(2)
0B0826 CD 93 0E 0B 0971**          		CALL    POLY
0B082A 72 40       0972**          		DW	4072H           ;a(7)
0B082C 2E 94       0973**          		DW	942EH
0B082E 73          0974**          		DB	73H
0B082F 65 6F       0975**          		DW	6F65H           ;a(6)
0B0831 4F 2E       0976**          		DW	2E4FH
0B0833 76          0977**          		DB	76H
0B0834 37 6D       0978**          		DW	6D37H           ;a(5)
0B0836 02 88       0979**          		DW	8802H
0B0838 79          0980**          		DB	79H
0B0839 12 E5       0981**          		DW	0E512H          ;a(4)
0B083B A0 2A       0982**          		DW	2AA0H
0B083D 7B          0983**          		DB	7BH
0B083E 14 4F       0984**          		DW	4F14H           ;a(3)
0B0840 AA AA       0985**          		DW	0AAAAH
0B0842 7D          0986**          		DB	7DH
0B0843 56 FD       0987**          		DW	0FD56H          ;a(2)
0B0845 FF 7F       0988**          		DW	7FFFH
0B0847 7E          0989**          		DB	7EH
0B0848 FE FF       0990**          		DW	0FFFEH          ;a(1)
0B084A FF FF       0991**          		DW	0FFFFH
0B084C 7F          0992**          		DB	7FH
0B084D 00 00       0993**          		DW	0               ;a(0)
0B084F 00 00       0994**          		DW	0
0B0851 80          0995**          		DB	80H
0B0852 CD 5F 0E 0B 0996**          		CALL    POP5
0B0856 F1          0997**          		POP     AF
0B0857 F5          0998**          		PUSH    AF
0B0858 F4 7D 08 0B 0999**          		CALL    P,RECIP         ;X=1/X
0B085C F1          1000**          		POP     AF
0B085D F2 65 08 0B 1001**          		JP      P,EXP4
0B0861 E6 7F       1002**          		AND     7FH
0B0863 ED 44       1003**          		NEG
0B0865 C6 80       1004**  EXP4:			ADD     A,80H
0B0867 81          1005**          		ADD     A,C
0B0868 38 06       1006**          		JR      C,EXP2
0B086A F2 C6 0D 0B 1007**          		JP      P,ZERO_FP          ;UNDERFLOW
0B086E 18 04       1008**          		JR      EXP3
0B0870 FA 91 0D 0B 1009**  EXP2:			JP      M,OFLOW         ;OVERFLOW
0B0874 C6 80       1010**  EXP3:			ADD     A,80H
0B0876 CA C6 0D 0B 1011**          		JP      Z,ZERO_FP
0B087A 4F          1012**          		LD      C,A
0B087B AF          1013**          		XOR     A               ;NUMERIC MARKER
0B087C C9          1014**          		RET
0B087D             1015**  ;
0B087D CD DE 07 0B 1016**  RECIP:			CALL    DONE
0B0881 CD 7A 0D 0B 1017**  RDIV:			CALL    SWAP_FP
0B0885 C3 08 04 0B 1018**          		JP      FDIV            ;RECIPROCAL
0B0889             1019**  ;
0B0889 11 72 31 00 1020**  LN2:			LD      DE,3172H        ;LN(2)
0B088D D9          1021**          		EXX
0B088E 11 F8 17 00 1022**          		LD      DE,17F8H
0B0892 D9          1023**          		EXX
0B0893 06 7F       1024**          		LD      B,7FH
0B0895 C9          1025**          		RET
0B0896             1026**  ;
0B0896             1027**  ;LN - Natural log.
0B0896             1028**  ;Result is floating-point numeric.
0B0896             1029**  ;
0B0896 CD 49 0D 0B 1030**  LN_FP:			CALL    SFLOAT_FP
0B089A 3E 16       1031**  LN0:			LD      A,LOGRNG
0B089C CB 7C       1032**          		BIT     7,H
0B089E C2 20 02 0B 1033**          		JP      NZ,ERROR_FP_        ;"Log range"
0B08A2 0C          1034**          		INC     C
0B08A3 0D          1035**          		DEC     C
0B08A4 CA 20 02 0B 1036**          		JP      Z,ERROR_FP_
0B08A8 11 04 35 00 1037**          		LD      DE,3504H        ;SQR(2)
0B08AC D9          1038**          		EXX
0B08AD 11 33 F3 00 1039**          		LD      DE,0F333H       ;1.41421356237
0B08B1 D9          1040**          		EXX
0B08B2 CD D9 0D 0B 1041**          		CALL    ICP0            ;MANTISSA>SQR(2)?
0B08B6 79          1042**          		LD      A,C             ;EXPONENT
0B08B7 0E 80       1043**          		LD      C,80H           ;1 <= X < 2
0B08B9 38 02       1044**          		JR      C,LN4
0B08BB 0D          1045**          		DEC     C
0B08BC 3C          1046**          		INC     A
0B08BD F5          1047**  LN4:			PUSH    AF              ;SAVE EXPONENT
0B08BE CD 6B 0E 0B 1048**          		CALL    RATIO           ;X=(X-1)/(X+1)
0B08C2 CD 56 0E 0B 1049**          		CALL    PUSH5
0B08C6 CD 4E 0E 0B 1050**  		        CALL    SQUARE          ;PUSH X*X
0B08CA CD 93 0E 0B 1051**          		CALL    POLY
0B08CE 48 CC       1052**          		DW	0CC48H          ;a(9)
0B08D0 FB 74       1053**          		DW	74FBH
0B08D2 7D          1054**          		DB	7DH
0B08D3 AF AE       1055**          		DW	0AEAFH          ;a(7)
0B08D5 FF 11       1056**          		DW	11FFH
0B08D7 7E          1057**          		DB	7EH
0B08D8 8C D9       1058**          		DW	0D98CH          ;a(5)
0B08DA CD 4C       1059**          		DW	4CCDH
0B08DC 7E          1060**          		DB	7EH
0B08DD E3 A9       1061**          		DW	0A9E3H          ;a(3)
0B08DF AA 2A       1062**          		DW	2AAAH
0B08E1 7F          1063**          		DB	7FH
0B08E2 00 00       1064**          		DW	0               ;a(1)
0B08E4 00 00       1065**          		DW	0
0B08E6 81          1066**          		DB	81H
0B08E7 CD 5F 0E 0B 1067**          		CALL    POP5
0B08EB CD 5F 0E 0B 1068**          		CALL    POP5
0B08EF CD B1 04 0B 1069**          		CALL    FMUL
0B08F3 F1          1070**          		POP     AF              ;EXPONENT
0B08F4 CD 56 0E 0B 1071**          		CALL    PUSH5
0B08F8 08          1072**          		EX      AF,AF'
0B08F9 CD C6 0D 0B 1073**          		CALL    ZERO_FP
0B08FD 08          1074**          		EX      AF,AF'
0B08FE D6 80       1075**          		SUB     80H
0B0900 28 1F       1076**          		JR      Z,LN3
0B0902 30 02       1077**          		JR      NC,LN1
0B0904 2F          1078**          		CPL
0B0905 3C          1079**          		INC     A
0B0906 67          1080**  LN1:			LD      H,A
0B0907 0E 87       1081**          		LD      C,87H
0B0909 F5          1082**          		PUSH    AF
0B090A CD 29 0D 0B 1083**          		CALL    FLOAT_
0B090E CB BC       1084**          		RES     7,H
0B0910 CD 89 08 0B 1085**          		CALL    LN2
0B0914 CD B1 04 0B 1086**          		CALL    FMUL
0B0918 F1          1087**          		POP     AF
0B0919 30 06       1088**          		JR      NC,LN3
0B091B FA 21 09 0B 1089**          		JP      M,LN3
0B091F CB FC       1090**          		SET     7,H
0B0921 CD 5F 0E 0B 1091**  LN3:			CALL    POP5
0B0925 CD 9F 03 0B 1092**          		CALL    FADD
0B0929 AF          1093**          		XOR     A
0B092A C9          1094**          		RET
0B092B             1095**  ;
0B092B             1096**  ;LOG - base-10 logarithm.
0B092B             1097**  ;Result is floating-point numeric.
0B092B             1098**  ;
0B092B CD 96 08 0B 1099**  LOG_FP:			CALL    LN_FP
0B092F 11 5B 5E 00 1100**          		LD      DE,5E5BH        ;LOG(e)
0B0933 D9          1101**          		EXX
0B0934 11 A9 D8 00 1102**          		LD      DE,0D8A9H
0B0938 D9          1103**          		EXX
0B0939 06 7E       1104**          		LD      B,7EH
0B093B CD B1 04 0B 1105**          		CALL    FMUL
0B093F AF          1106**          		XOR     A
0B0940 C9          1107**          		RET
0B0941             1108**  ;
0B0941             1109**  ;ASN - Arc-sine
0B0941             1110**  ;Result is floating-point numeric.
0B0941             1111**  ;
0B0941 CD 49 0D 0B 1112**  ASN_FP:			CALL    SFLOAT_FP
0B0945 CD 56 0E 0B 1113**          		CALL    PUSH5
0B0949 CD 46 0E 0B 1114**          		CALL    COPY_
0B094D CD B1 04 0B 1115**          		CALL    FMUL
0B0951 CD DE 07 0B 1116**          		CALL    DONE
0B0955 CD 8C 03 0B 1117**          		CALL    RSUB
0B0959 CD BC 06 0B 1118**          		CALL    SQR0
0B095D CD 5F 0E 0B 1119**          		CALL    POP5
0B0961 0C          1120**          		INC     C
0B0962 0D          1121**          		DEC     C
0B0963 3E 02       1122**          		LD      A,2
0B0965 D5          1123**          		PUSH    DE
0B0966 CA EB 09 0B 1124**          		JP      Z,ACS1
0B096A D1          1125**          		POP     DE
0B096B CD 81 08 0B 1126**          		CALL    RDIV
0B096F 18 04       1127**          		JR      ATN0
0B0971             1128**  ;
0B0971             1129**  ;ATN - arc-tangent
0B0971             1130**  ;Result is floating-point numeric.
0B0971             1131**  ;
0B0971 CD 49 0D 0B 1132**  ATN_FP:			CALL    SFLOAT_FP
0B0975 E5          1133**  ATN0:			PUSH    HL              ;SAVE SIGN
0B0976 CB BC       1134**          		RES     7,H
0B0978 11 13 54 00 1135**          		LD      DE,5413H        ;TAN(PI/8)=SQR(2)-1
0B097C D9          1136**          		EXX
0B097D 11 D0 CC 00 1137**          		LD      DE,0CCD0H
0B0981 D9          1138**          		EXX
0B0982 06 7E       1139**          		LD      B,7EH
0B0984 CD D6 0D 0B 1140**          		CALL    FCP0            ;COMPARE
0B0988 06 00       1141**          		LD      B,0
0B098A 38 22       1142**          		JR      C,ATN2
0B098C 11 82 1A 00 1143**          		LD      DE,1A82H        ;TAN(3*PI/8)=SQR(2)+1
0B0990 D9          1144**          		EXX
0B0991 11 9A 79 00 1145**          		LD      DE,799AH
0B0995 D9          1146**          		EXX
0B0996 06 81       1147**          		LD      B,81H
0B0998 CD D6 0D 0B 1148**          		CALL    FCP0            ;COMPARE
0B099C 38 0A       1149**          		JR      C,ATN1
0B099E CD 7D 08 0B 1150**          		CALL    RECIP           ;X=1/X
0B09A2 06 02       1151**          		LD      B,2
0B09A4 C3 AE 09 0B 1152**          		JP      ATN2
0B09A8 CD 6B 0E 0B 1153**  ATN1:			CALL    RATIO           ;X=(X-1)/(X+1)
0B09AC 06 01       1154**          		LD      B,1
0B09AE C5          1155**  ATN2:			PUSH    BC              ;SAVE FLAG
0B09AF CD 56 0E 0B 1156**          		CALL    PUSH5
0B09B3 CD 4E 0E 0B 1157**          		CALL    SQUARE          ;PUSH X*X
0B09B7 CD 93 0E 0B 1158**          		CALL    POLY
0B09BB 35 F3       1159**          		DW	0F335H          ;a(13)
0B09BD D8 37       1160**          		DW	37D8H
0B09BF 7B          1161**          		DB	7BH
0B09C0 91 6B       1162**          		DW	6B91H           ;a(11)
0B09C2 B9 AA       1163**          		DW	0AAB9H
0B09C4 7C          1164**          		DB	7CH
0B09C5 DE 41       1165**          		DW	41DEH           ;a(9)
0B09C7 97 61       1166**          		DW	6197H
0B09C9 7C          1167**          		DB	7CH
0B09CA 7B 9D       1168**          		DW	9D7BH           ;a(7)
0B09CC 37 92       1169**          		DW	9237H
0B09CE 7D          1170**          		DB	7DH
0B09CF 5A 2A       1171**          		DW	2A5AH           ;a(5)
0B09D1 CC 4C       1172**          		DW	4CCCH
0B09D3 7D          1173**          		DB	7DH
0B09D4 5C A9       1174**          		DW	0A95CH          ;a(3)
0B09D6 AA AA       1175**          		DW	0AAAAH
0B09D8 7E          1176**          		DB	7EH
0B09D9 00 00       1177**          		DW	0               ;a(1)
0B09DB 00 00       1178**          		DW	0
0B09DD 80          1179**          		DB	80H
0B09DE CD 5F 0E 0B 1180**          		CALL    POP5
0B09E2 CD 5F 0E 0B 1181**          		CALL    POP5
0B09E6 CD B1 04 0B 1182**          		CALL    FMUL
0B09EA F1          1183**          		POP     AF
0B09EB CD EB 07 0B 1184**  ACS1:			CALL    PIBY4           ;PI/4
0B09EF 1F          1185**          		RRA
0B09F0 F5          1186**          		PUSH    AF
0B09F1 DC 9F 03 0B 1187**          		CALL    C,FADD
0B09F5 F1          1188**          		POP     AF
0B09F6 04          1189**          		INC     B
0B09F7 1F          1190**          		RRA
0B09F8 DC 8C 03 0B 1191**          		CALL    C,RSUB
0B09FC F1          1192**          		POP     AF
0B09FD B7          1193**          		OR      A
0B09FE F0          1194**          		RET     P
0B09FF CB FC       1195**          		SET     7,H             ;MAKE NEGATIVE
0B0A01 AF          1196**          		XOR     A
0B0A02 C9          1197**          		RET
0B0A03             1198**  ;
0B0A03             1199**  ;ACS - Arc cosine=PI/2-ASN.
0B0A03             1200**  ;Result is floating point numeric.
0B0A03             1201**  ;
0B0A03 CD 41 09 0B 1202**  ACS_FP:			CALL    ASN_FP
0B0A07 3E 02       1203**          		LD      A,2
0B0A09 F5          1204**          		PUSH    AF
0B0A0A 18 DF       1205**          		JR      ACS1
0B0A0C             1206**  ;
0B0A0C             1207**  ;Function STR - convert numeric value to ASCII string.
0B0A0C             1208**  ;   Inputs: HLH'L'C = integer or floating-point number
0B0A0C             1209**  ;           DE = address at which to store string
0B0A0C             1210**  ;           IX = address of @% format control
0B0A0C             1211**  ;  Outputs: String stored, with NUL terminator
0B0A0C             1212**  ;
0B0A0C             1213**  ;First normalise for decimal output:
0B0A0C             1214**  ;
0B0A0C CD 49 0D 0B 1215**  STR_FP:			CALL    SFLOAT_FP
0B0A10 06 00       1216**          		LD      B,0             ;DEFAULT PT. POSITION
0B0A12 CB 7C       1217**          		BIT     7,H             ;NEGATIVE?
0B0A14 28 06       1218**          		JR      Z,STR10
0B0A16 CB BC       1219**          		RES     7,H
0B0A18 3E 2D       1220**          		LD      A,'-'
0B0A1A 12          1221**          		LD      (DE),A          ;STORE SIGN
0B0A1B 13          1222**          		INC     DE
0B0A1C AF          1223**  STR10:			XOR     A               ;CLEAR A
0B0A1D B9          1224**          		CP      C
0B0A1E 28 4E       1225**          		JR      Z,STR02          ;ZERO
0B0A20 D5          1226**          		PUSH    DE              ;SAVE TEXT POINTER
0B0A21 78          1227**          		LD      A,B
0B0A22 F5          1228**  STR11:			PUSH    AF              ;SAVE DECIMAL COUNTER
0B0A23 79          1229**          		LD      A,C             ;BINARY EXPONENT
0B0A24 FE A1       1230**          		CP      161
0B0A26 30 1C       1231**          		JR      NC,STR14
0B0A28 FE 9B       1232**          		CP      155
0B0A2A 30 29       1233**          		JR      NC,STR15
0B0A2C 2F          1234**          		CPL
0B0A2D FE E1       1235**          		CP      225
0B0A2F 38 02       1236**          		JR      C,STR13
0B0A31 3E F8       1237**          		LD      A,-8
0B0A33 C6 1C       1238**  STR13:			ADD     A,28
0B0A35 CD C2 0E 0B 1239**          		CALL    POWR10
0B0A39 F5          1240**          		PUSH    AF
0B0A3A CD B1 04 0B 1241**          		CALL    FMUL
0B0A3E F1          1242**          		POP     AF
0B0A3F 47          1243**          		LD      B,A
0B0A40 F1          1244**          		POP     AF
0B0A41 90          1245**          		SUB     B
0B0A42 18 DE       1246**          		JR      STR11
0B0A44 D6 20       1247**  STR14:			SUB     32
0B0A46 CD C2 0E 0B 1248**          		CALL    POWR10
0B0A4A F5          1249**          		PUSH    AF
0B0A4B CD 08 04 0B 1250**          		CALL    FDIV
0B0A4F F1          1251**          		POP     AF
0B0A50 47          1252**          		LD      B,A
0B0A51 F1          1253**          		POP     AF
0B0A52 80          1254**          		ADD     A,B
0B0A53 18 CD       1255**          		JR      STR11
0B0A55 3E 09       1256**  STR15:			LD      A,9
0B0A57 CD C2 0E 0B 1257**          		CALL    POWR10          ;10^9
0B0A5B CD D6 0D 0B 1258**          		CALL    FCP0
0B0A5F 79          1259**          		LD      A,C
0B0A60 C1          1260**          		POP     BC
0B0A61 4F          1261**          		LD      C,A
0B0A62 CB FC       1262**          		SET     7,H             ;IMPLIED 1
0B0A64 DC FE 0D 0B 1263**          		CALL    C,X10B          ;X10, DEC B
0B0A68 D1          1264**          		POP     DE              ;RESTORE TEXT POINTER
0B0A69 CB B9       1265**          		RES     7,C
0B0A6B 3E 00       1266**          		LD      A,0
0B0A6D 17          1267**          		RLA                     ;PUT CARRY IN LSB
0B0A6E             1268**  ;
0B0A6E             1269**  ;At this point decimal normalisation has been done,
0B0A6E             1270**  ;now convert to decimal digits:
0B0A6E             1271**  ;      AHLH'L' = number in normalised integer form
0B0A6E             1272**  ;            B = decimal place adjustment
0B0A6E             1273**  ;            C = binary place adjustment (29-33)
0B0A6E             1274**  ;
0B0A6E 0C          1275**  STR02:			INC     C
0B0A6F 08          1276**          		EX      AF,AF'          ;SAVE A
0B0A70 78          1277**          		LD      A,B
0B0A71 DD CB 02 4E 1278**          		BIT     1,(IX+2)
0B0A75 20 08       1279**          		JR      NZ,STR20
0B0A77 AF          1280**          		XOR     A
0B0A78 DD BE 01    1281**          		CP      (IX+1)
0B0A7B 28 0B       1282**          		JR      Z,STR21
0B0A7D 3E F6       1283**          		LD      A,-10
0B0A7F DD 86 01    1284**  STR20:			ADD     A,(IX+1)        ;SIG. FIG. COUNT
0B0A82 B7          1285**          		OR      A               ;CLEAR CARRY
0B0A83 FA 88 0A 0B 1286**          		JP      M,STR21
0B0A87 AF          1287**          		XOR     A
0B0A88 F5          1288**  STR21:			PUSH    AF
0B0A89 08          1289**          		EX      AF,AF'          ;RESTORE A
0B0A8A CD 32 0E 0B 1290**  STR22:			CALL    X2              ;RL AHLH'L'
0B0A8E 8F          1291**          		ADC     A,A
0B0A8F FE 0A       1292**          		CP      10
0B0A91 38 05       1293**          		JR      C,STR23
0B0A93 D6 0A       1294**          		SUB     10
0B0A95 D9          1295**          		EXX
0B0A96 2C          1296**          		INC     L               ;SET RESULT BIT
0B0A97 D9          1297**          		EXX
0B0A98 0D          1298**  STR23:			DEC     C
0B0A99 20 EF       1299**          		JR      NZ,STR22        ;32 TIMES
0B0A9B 4F          1300**          		LD      C,A             ;REMAINDER
0B0A9C 7C          1301**          		LD      A,H
0B0A9D E6 3F       1302**          		AND     3FH             ;CLEAR OUT JUNK
0B0A9F 67          1303**          		LD      H,A
0B0AA0 F1          1304**          		POP     AF
0B0AA1 F2 AF 0A 0B 1305**          		JP      P,STR24
0B0AA5 3C          1306**          		INC     A
0B0AA6 20 1C       1307**          		JR      NZ,STR26
0B0AA8 3E 04       1308**          		LD      A,4
0B0AAA B9          1309**          		CP      C               ;ROUND UP?
0B0AAB 3E 00       1310**          		LD      A,0
0B0AAD 18 15       1311**          		JR      STR26
0B0AAF F5          1312**  STR24:			PUSH    AF
0B0AB0 79          1313**          		LD      A,C
0B0AB1 CE 30       1314**          		ADC     A,'0'           ;ADD CARRY
0B0AB3 FE 30       1315**          		CP      '0'
0B0AB5 28 05       1316**          		JR      Z,STR25         ;SUPPRESS ZERO
0B0AB7 FE 3A       1317**          		CP      '9'+1
0B0AB9 3F          1318**          		CCF
0B0ABA 30 08       1319**          		JR      NC,STR26
0B0ABC E3          1320**  STR25:			EX      (SP),HL
0B0ABD CB 75       1321**          		BIT     6,L             ;ZERO FLAG
0B0ABF E3          1322**  		        EX      (SP),HL
0B0AC0 20 05       1323**          		JR      NZ,STR27
0B0AC2 3E 30       1324**          		LD      A,'0'
0B0AC4 3C          1325**  STR26:			INC     A               ;SET +VE
0B0AC5 3D          1326**          		DEC     A
0B0AC6 F5          1327**          		PUSH    AF              ;PUT ON STACK + CARRY
0B0AC7 04          1328**  STR27:			INC     B
0B0AC8 CD A2 0D 0B 1329**          		CALL    TEST_FP            ;IS HLH'L' ZERO?
0B0ACC 0E 20       1330**          		LD      C,32
0B0ACE 3E 00       1331**          		LD      A,0
0B0AD0 20 B8       1332**          		JR      NZ,STR22
0B0AD2 F1          1333**          		POP     AF
0B0AD3 F5          1334**          		PUSH    AF
0B0AD4 3E 00       1335**          		LD      A,0
0B0AD6 38 B2       1336**          		JR      C,STR22
0B0AD8             1337**  ;
0B0AD8             1338**  ;At this point, the decimal character string is stored
0B0AD8             1339**  ; on the stack. Trailing zeroes are suppressed and may
0B0AD8             1340**  ; need to be replaced.
0B0AD8             1341**  ;B register holds decimal point position.
0B0AD8             1342**  ;Now format number and store as ASCII string:
0B0AD8             1343**  ;
0B0AD8 EB          1344**  STR3:			EX      DE,HL           ;STRING POINTER
0B0AD9 0E FF       1345**          		LD      C,-1            ;FLAG "E"
0B0ADB 16 01       1346**          		LD      D,1
0B0ADD DD 5E 01    1347**          		LD      E,(IX+1)        ;f2
0B0AE0 DD CB 02 46 1348**          		BIT     0,(IX+2)
0B0AE4 20 35       1349**          		JR      NZ,STR34        ;E MODE
0B0AE6 DD CB 02 4E 1350**          		BIT     1,(IX+2)
0B0AEA 28 12       1351**          		JR      Z,STR31
0B0AEC 78          1352**          		LD      A,B             ;F MODE
0B0AED B7          1353**          		OR      A
0B0AEE 28 05       1354**          		JR      Z,STR30
0B0AF0 FA F5 0A 0B 1355**          		JP      M,STR30
0B0AF4 50          1356**          		LD      D,B
0B0AF5 7A          1357**  STR30:			LD      A,D
0B0AF6 DD 86 01    1358**          		ADD     A,(IX+1)
0B0AF9 5F          1359**          		LD      E,A
0B0AFA FE 0B       1360**          		CP      11
0B0AFC 38 19       1361**          		JR      C,STR32
0B0AFE 78          1362**  STR31:			LD      A,B             ;G MODE
0B0AFF 11 01 01 00 1363**          		LD      DE,101H
0B0B03 B7          1364**          		OR      A
0B0B04 FA 1B 0B 0B 1365**          		JP      M,STR34
0B0B08 28 0D       1366**          		JR      Z,STR32
0B0B0A DD 7E 01    1367**          		LD      A,(IX+1)
0B0B0D B7          1368**          		OR      A
0B0B0E 20 02       1369**          		JR      NZ,STR3A
0B0B10 3E 0A       1370**          		LD      A,10
0B0B12 B8          1371**  STR3A:			CP      B
0B0B13 38 06       1372**          		JR      C,STR34
0B0B15 50          1373**          		LD      D,B
0B0B16 58          1374**          		LD      E,B
0B0B17 78          1375**  STR32:			LD      A,B
0B0B18 C6 81       1376**          		ADD     A,129
0B0B1A 4F          1377**          		LD      C,A
0B0B1B CB FA       1378**  STR34:			SET     7,D
0B0B1D 1D          1379**          		DEC     E
0B0B1E 7A          1380**  STR35:			LD      A,D
0B0B1F B9          1381**          		CP      C
0B0B20 30 0E       1382**          		JR      NC,STR33
0B0B22 F1          1383**  STR36:			POP     AF
0B0B23 28 04       1384**          		JR      Z,STR37
0B0B25 F2 32 0B 0B 1385**          		JP      P,STR38
0B0B29 F5          1386**  STR37:			PUSH    AF
0B0B2A 1C          1387**          		INC     E
0B0B2B 1D          1388**          		DEC     E
0B0B2C FA 43 0B 0B 1389**          		JP      M,STR4
0B0B30 3E 30       1390**  STR33:			LD      A,'0'
0B0B32 15          1391**  STR38:			DEC     D
0B0B33 E2 3A 0B 0B 1392**          		JP      PO,STR39
0B0B37 36 2E       1393**          		LD      (HL),'.'
0B0B39 23          1394**          		INC     HL
0B0B3A 77          1395**  STR39:			LD      (HL),A
0B0B3B 23          1396**          		INC     HL
0B0B3C 1D          1397**          		DEC     E
0B0B3D F2 1E 0B 0B 1398**          		JP      P,STR35
0B0B41 18 DF       1399**          		JR      STR36
0B0B43             1400**  ;
0B0B43 F1          1401**  STR4:			POP     AF
0B0B44 0C          1402**  STR40:			INC     C
0B0B45 4D          1403**          		LD      C,L
0B0B46 20 28       1404**          		JR      NZ,STR44
0B0B48 36 45       1405**          		LD      (HL),'E'        ;EXPONENT
0B0B4A 23          1406**          		INC     HL
0B0B4B 78          1407**          		LD      A,B
0B0B4C 3D          1408**          		DEC     A
0B0B4D F2 56 0B 0B 1409**          		JP      P,STR41
0B0B51 36 2D       1410**          		LD      (HL),'-'
0B0B53 23          1411**          		INC     HL
0B0B54 ED 44       1412**          		NEG
0B0B56 36 30       1413**  STR41:			LD      (HL),'0'
0B0B58 28 15       1414**          		JR      Z,STR47
0B0B5A FE 0A       1415**          		CP      10
0B0B5C 47          1416**          		LD      B,A
0B0B5D 3E 3A       1417**          		LD      A,':'
0B0B5F 38 03       1418**          		JR      C,STR42
0B0B61 23          1419**          		INC     HL
0B0B62 36 30       1420**          		LD      (HL),'0'
0B0B64 34          1421**  STR42:			INC     (HL)
0B0B65 BE          1422**          		CP      (HL)
0B0B66 20 05       1423**          		JR      NZ,STR43
0B0B68 36 30       1424**          		LD      (HL),'0'
0B0B6A 2B          1425**          		DEC     HL
0B0B6B 34          1426**          		INC     (HL)
0B0B6C 23          1427**          		INC     HL
0B0B6D 10 F5       1428**  STR43:			DJNZ    STR42
0B0B6F 23          1429**  STR47:			INC     HL
0B0B70 EB          1430**  STR44:			EX      DE,HL
0B0B71 C9          1431**        			RET
0B0B72             1432**  ;
0B0B72             1433**  ;Support subroutines:
0B0B72             1434**  ;
0B0B72 DD 46 04    1435**  DLOAD5:			LD      B,(IX+4)
0B0B75 D9          1436**          		EXX
0B0B76 DD 5E 00    1437**          		LD      E,(IX+0)
0B0B79 DD 56 01    1438**          		LD      D,(IX+1)
0B0B7C D9          1439**          		EXX
0B0B7D DD 5E 02    1440**          		LD      E,(IX+2)
0B0B80 DD 56 03    1441**          		LD      D,(IX+3)
0B0B83 C9          1442**          		RET
0B0B84             1443**  ;
0B0B84 DD 46 06    1444**  DLOAD5_SPL:		LD      B,(IX+6)
0B0B87 D9          1445**  			EXX
0B0B88 DD 17 00    1446**  			LD	DE, (IX+0)
0B0B8B D9          1447**  			EXX
0B0B8C DD 17 03    1448**  			LD	DE, (IX+3)
0B0B8F C9          1449**  			RET
0B0B90             1450**  ;
0B0B90             1451**  ;CON_FP - Get unsigned numeric constant from ASCII string.
0B0B90             1452**  ;   Inputs: ASCII string at (IX).
0B0B90             1453**  ;  Outputs: Variable-type result in HLH'L'C
0B0B90             1454**  ;           IX updated (points to delimiter)
0B0B90             1455**  ;           A7 = 0 (numeric marker)
0B0B90             1456**  ;
0B0B90 CD C6 0D 0B 1457**  CON_FP:			CALL    ZERO_FP            ;INITIALISE TO ZERO
0B0B94 0E 00       1458**          		LD      C,0             ;TRUNCATION COUNTER
0B0B96 CD 24 0C 0B 1459**          		CALL    UINT          ;GET INTEGER PART
0B0B9A FE 2E       1460**          		CP      '.'
0B0B9C 06 00       1461**          		LD      B,0             ;DECL. PLACE COUNTER
0B0B9E CC 22 0C 0B 1462**          		CALL    Z,NUMBIX        ;GET FRACTION PART
0B0BA2 FE 45       1463**          		CP      'E'
0B0BA4 3E 00       1464**          		LD      A,0             ;INITIALISE EXPONENT
0B0BA6 CC F0 0B 0B 1465**          		CALL    Z,GETEXP        ;GET EXPONENT
0B0BAA CB 7C       1466**          		BIT     7,H
0B0BAC 20 08       1467**          		JR      NZ,CON0         ;INTEGER OVERFLOW
0B0BAE B7          1468**          		OR      A
0B0BAF 20 05       1469**          		JR      NZ,CON0         ;EXPONENT NON-ZERO
0B0BB1 B8          1470**          		CP      B
0B0BB2 20 02       1471**          		JR      NZ,CON0         ;DECIMAL POINT
0B0BB4 B9          1472**          		CP      C
0B0BB5 C8          1473**          		RET     Z               ;INTEGER
0B0BB6 90          1474**  CON0:			SUB     B
0B0BB7 81          1475**          		ADD     A,C
0B0BB8 0E 9F       1476**          		LD      C,159
0B0BBA CD 29 0D 0B 1477**          		CALL    FLOAT_
0B0BBE CB BC       1478**          		RES     7,H             ;DITCH IMPLIED 1
0B0BC0 B7          1479**          		OR      A
0B0BC1 C8          1480**          		RET     Z               ;DONE
0B0BC2 FA D0 0B 0B 1481**          		JP      M,CON2          ;NEGATIVE EXPONENT
0B0BC6 CD C2 0E 0B 1482**          		CALL    POWR10
0B0BCA CD B1 04 0B 1483**          		CALL    FMUL            ;SCALE
0B0BCE AF          1484**          		XOR     A
0B0BCF C9          1485**          		RET
0B0BD0 FE DA       1486**  CON2:			CP      -38
0B0BD2 38 0C       1487**          		JR      C,CON3          ;CAN'T SCALE IN ONE GO
0B0BD4 ED 44       1488**          		NEG
0B0BD6 CD C2 0E 0B 1489**          		CALL    POWR10
0B0BDA CD 08 04 0B 1490**          		CALL    FDIV            ;SCALE
0B0BDE AF          1491**          		XOR     A
0B0BDF C9          1492**          		RET
0B0BE0 F5          1493**  CON3:			PUSH    AF
0B0BE1 3E 26       1494**          		LD      A,38
0B0BE3 CD C2 0E 0B 1495**          		CALL    POWR10
0B0BE7 CD 08 04 0B 1496**          		CALL    FDIV
0B0BEB F1          1497**          		POP     AF
0B0BEC C6 26       1498**          		ADD     A,38
0B0BEE 18 E0       1499**          		JR      CON2
0B0BF0             1500**  ;
0B0BF0             1501**  ;GETEXP - Get decimal exponent from string
0B0BF0             1502**  ;     Inputs: ASCII string at (IX)
0B0BF0             1503**  ;             (IX points at 'E')
0B0BF0             1504**  ;             A = initial value
0B0BF0             1505**  ;    Outputs: A = new exponent
0B0BF0             1506**  ;             IX updated.
0B0BF0             1507**  ;   Destroys: A,A',IX,F,F'
0B0BF0             1508**  ;
0B0BF0 C5          1509**  GETEXP:			PUSH    BC              ;SAVE REGISTERS
0B0BF1 47          1510**          		LD      B,A             ;INITIAL VALUE
0B0BF2 0E 02       1511**          		LD      C,2             ;2 DIGITS MAX
0B0BF4 DD 23       1512**          		INC     IX              ;BUMP PAST 'E'
0B0BF6 CD E0 0F 0B 1513**          		CALL    SIGNQ
0B0BFA 08          1514**          		EX      AF,AF'          ;SAVE EXPONENT SIGN
0B0BFB CD D6 0F 0B 1515**  GETEX1:			CALL    DIGITQ
0B0BFF 38 18       1516**          		JR      C,GETEX2
0B0C01 78          1517**          		LD      A,B             ;B=B*10
0B0C02 87          1518**          		ADD     A,A
0B0C03 87          1519**          		ADD     A,A
0B0C04 80          1520**          		ADD     A,B
0B0C05 87          1521**          		ADD     A,A
0B0C06 47          1522**          		LD      B,A
0B0C07 DD 7E 00    1523**          		LD      A,(IX)          ;GET BACK DIGIT
0B0C0A DD 23       1524**          		INC     IX
0B0C0C E6 0F       1525**          		AND     0FH             ;MASK UNWANTED BITS
0B0C0E 80          1526**          		ADD     A,B             ;ADD IN DIGIT
0B0C0F 47          1527**          		LD      B,A
0B0C10 0D          1528**          		DEC     C
0B0C11 F2 FB 0B 0B 1529**          		JP      P,GETEX1
0B0C15 06 64       1530**          		LD      B,100           ;FORCE OVERFLOW
0B0C17 18 E2       1531**          		JR      GETEX1
0B0C19 08          1532**  GETEX2:			EX      AF,AF'          ;RESTORE SIGN
0B0C1A FE 2D       1533**          		CP      '-'
0B0C1C 78          1534**          		LD      A,B
0B0C1D C1          1535**          		POP     BC              ;RESTORE
0B0C1E C0          1536**          		RET     NZ
0B0C1F ED 44       1537**          		NEG                     ;NEGATE EXPONENT
0B0C21 C9          1538**          		RET
0B0C22             1539**  ;
0B0C22             1540**  ;UINT: Get unsigned integer from string.
0B0C22             1541**  ;    Inputs: string at (IX)
0B0C22             1542**  ;            C = truncated digit count
0B0C22             1543**  ;                (initially zero)
0B0C22             1544**  ;            B = total digit count
0B0C22             1545**  ;            HLH'L' = initial value
0B0C22             1546**  ;   Outputs: HLH'L' = number (binary integer)
0B0C22             1547**  ;            A = delimiter.
0B0C22             1548**  ;            B, C & IX updated
0B0C22             1549**  ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
0B0C22             1550**  ;
0B0C22 DD 23       1551**  NUMBIX:			INC     IX
0B0C24 CD D6 0F 0B 1552**  UINT:			CALL    DIGITQ
0B0C28 D8          1553**          		RET     C
0B0C29 04          1554**          		INC     B               ;INCREMENT DIGIT COUNT
0B0C2A DD 23       1555**          		INC     IX
0B0C2C CD 1F 0E 0B 1556**          		CALL    X10             ;*10 & COPY OLD VALUE
0B0C30 38 15       1557**          		JR      C,NUMB1         ;OVERFLOW
0B0C32 0D          1558**          		DEC     C               ;SEE IF TRUNCATED
0B0C33 0C          1559**          		INC     C
0B0C34 20 11       1560**          		JR      NZ,NUMB1        ;IMPORTANT!
0B0C36 E6 0F       1561**          		AND     0FH
0B0C38 D9          1562**          		EXX
0B0C39 06 00       1563**          		LD      B,0
0B0C3B 4F          1564**          		LD      C,A
0B0C3C 52 09       1565**          		ADD.S   HL,BC           ;ADD IN DIGIT
0B0C3E D9          1566**          		EXX
0B0C3F 30 E3       1567**          		JR      NC,UINT
0B0C41 52 23       1568**          		INC.S   HL              ;CARRY
0B0C43 7C          1569**          		LD      A,H
0B0C44 B5          1570**          		OR      L
0B0C45 20 DD       1571**          		JR      NZ,UINT
0B0C47 0C          1572**  NUMB1:			INC     C               ;TRUNCATION COUNTER
0B0C48 CD 7D 0D 0B 1573**          		CALL    SWAP1           ;RESTORE PREVIOUS VALUE
0B0C4C 18 D6       1574**          		JR      UINT
0B0C4E             1575**  ;
0B0C4E             1576**  ;FIX - Fix number to specified exponent value.
0B0C4E             1577**  ;    Inputs: HLH'L'C = +ve non-zero number (floated)
0B0C4E             1578**  ;            A = desired exponent (A>C)
0B0C4E             1579**  ;   Outputs: HLH'L'C = fixed number (unsigned)
0B0C4E             1580**  ;            fraction shifted into B'C'
0B0C4E             1581**  ;            A'F' positive if integer input
0B0C4E             1582**  ;  Destroys: C,H,L,A',B',C',H',L',F,F'
0B0C4E             1583**  ;
0B0C4E 08          1584**  FIX:			EX      AF,AF'
0B0C4F AF          1585**          		XOR     A
0B0C50 08          1586**          		EX      AF,AF'
0B0C51 CB FC       1587**          		SET     7,H             ;IMPLIED 1
0B0C53 CD 82 0D 0B 1588**  FIX1:			CALL    DIV2
0B0C57 B9          1589**          		CP      C
0B0C58 C8          1590**          		RET     Z
0B0C59 D2 53 0C 0B 1591**          		JP      NC,FIX1
0B0C5D C3 91 0D 0B 1592**          		JP      OFLOW
0B0C61             1593**  ;
0B0C61             1594**  ;SFIX - Convert to integer if necessary.
0B0C61             1595**  ;    Input: Variable-type number in HLH'L'C
0B0C61             1596**  ;   Output: Integer in HLH'L', C=0
0B0C61             1597**  ; Destroys: A,C,H,L,A',B',C',H',L',F,F'
0B0C61             1598**  ;
0B0C61             1599**  ;NEGATE - Negate HLH'L'
0B0C61             1600**  ;    Destroys: H,L,H',L',F
0B0C61             1601**  ;
0B0C61 CD 7A 0D 0B 1602**  FIX2:			CALL    SWAP_FP
0B0C65 CD 6D 0C 0B 1603**          		CALL    SFIX_FP
0B0C69 CD 7A 0D 0B 1604**          		CALL    SWAP_FP
0B0C6D 0D          1605**  SFIX_FP:			DEC     C
0B0C6E 0C          1606**          		INC     C
0B0C6F C8          1607**          		RET     Z               ;INTEGER/ZERO
0B0C70 CB 7C       1608**          		BIT     7,H             ;SIGN
0B0C72 F5          1609**          		PUSH    AF
0B0C73 3E 9F       1610**          		LD      A,159
0B0C75 CD 4E 0C 0B 1611**          		CALL    FIX
0B0C79 F1          1612**          		POP     AF
0B0C7A 0E 00       1613**          		LD      C,0
0B0C7C C8          1614**          		RET     Z
0B0C7D B7          1615**  NEGATE:			OR      A               ;CLEAR CARRY
0B0C7E D9          1616**          		EXX
0B0C7F D5          1617**  NEG0:			PUSH    DE
0B0C80 EB          1618**          		EX      DE,HL
0B0C81 21 00 00 00 1619**          		LD      HL,0
0B0C85 52 ED 52    1620**          		SBC.S   HL,DE
0B0C88 D1          1621**          		POP     DE
0B0C89 D9          1622**          		EXX
0B0C8A D5          1623**          		PUSH    DE
0B0C8B EB          1624**          		EX      DE,HL
0B0C8C 21 00 00 00 1625**          		LD      HL,0
0B0C90 52 ED 52    1626**          		SBC.S   HL,DE
0B0C93 D1          1627**          		POP     DE
0B0C94 C9          1628**          		RET
0B0C95             1629**  ;
0B0C95             1630**  ;NEG - Negate HLH'L'B'C'
0B0C95             1631**  ;    Also complements A (used in FADD)
0B0C95             1632**  ;    Destroys: A,H,L,B',C',H',L',F
0B0C95             1633**  ;
0B0C95 D9          1634**  NEG_:			EXX
0B0C96 2F          1635**          		CPL
0B0C97 E5          1636**          		PUSH    HL
0B0C98 B7          1637**          		OR      A               ;CLEAR CARRY
0B0C99 21 00 00 00 1638**          		LD      HL,0
0B0C9D 52 ED 42    1639**          		SBC.S   HL,BC
0B0CA0 44          1640**          		LD      B,H
0B0CA1 4D          1641**          		LD      C,L
0B0CA2 E1          1642**          		POP     HL
0B0CA3 18 DA       1643**          		JR      NEG0
0B0CA5             1644**  ;
0B0CA5             1645**  ;SCALE - Trig scaling.
0B0CA5             1646**  ;MOD48 - 48-bit floating-point "modulus" (remainder).
0B0CA5             1647**  ;   Inputs: HLH'L'C unsigned floating-point dividend
0B0CA5             1648**  ;           DED'E'B'C'B unsigned 48-bit FP divisor
0B0CA5             1649**  ;  Outputs: HLH'L'C floating point remainder (H7=1)
0B0CA5             1650**  ;           E = quotient (bit 7 is sticky)
0B0CA5             1651**  ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
0B0CA5             1652**  ;FLO48 - Float unsigned number (48 bits)
0B0CA5             1653**  ;    Input/output in HLH'L'B'C'C
0B0CA5             1654**  ;   Destroys: C,H,L,B',C',H',L',F
0B0CA5             1655**  ;
0B0CA5 3E 96       1656**  SCALE:			LD      A,150
0B0CA7 B9          1657**          		CP      C
0B0CA8 3E 17       1658**          		LD      A,ACLOST
0B0CAA DA 20 02 0B 1659**          		JP      C,ERROR_FP_         ;"Accuracy lost"
0B0CAE CD EB 07 0B 1660**          		CALL    PIBY4
0B0CB2 D9          1661**          		EXX
0B0CB3 01 69 21 00 1662**          		LD      BC,2169H        ;3.141592653589793238
0B0CB7 D9          1663**          		EXX
0B0CB8 CB FA       1664**  MOD48:			SET     7,D             ;IMPLIED 1
0B0CBA CB FC       1665**          		SET     7,H
0B0CBC 79          1666**          		LD      A,C
0B0CBD 0E 00       1667**          		LD      C,0             ;INIT QUOTIENT
0B0CBF DD 21 00 00 1668**          		LD      IX,0
       00          
0B0CC4 DD E5       1669**          		PUSH    IX              ;PUT ZERO ON STACK
0B0CC6 B8          1670**          		CP      B
0B0CC7 38 46       1671**          		JR      C,MOD485        ;DIVIDEND<DIVISOR
0B0CC9 D9          1672**  MOD481:			EXX                     ;CARRY=0 HERE
0B0CCA E3          1673**          		EX      (SP),HL
0B0CCB 52 ED 42    1674**          		SBC.S   HL,BC
0B0CCE E3          1675**          		EX      (SP),HL
0B0CCF 52 ED 52    1676**          		SBC.S   HL,DE
0B0CD2 D9          1677**          		EXX
0B0CD3 52 ED 52    1678**          		SBC.S   HL,DE
0B0CD6 30 0C       1679**          		JR      NC,MOD482       ;DIVIDEND>=DIVISOR
0B0CD8 D9          1680**          		EXX
0B0CD9 E3          1681**          		EX      (SP),HL
0B0CDA 52 09       1682**          		ADD.S   HL,BC
0B0CDC E3          1683**          		EX      (SP),HL
0B0CDD 52 ED 5A    1684**          		ADC.S   HL,DE
0B0CE0 D9          1685**          		EXX
0B0CE1 52 ED 5A    1686**          		ADC.S   HL,DE
0B0CE4 3F          1687**  MOD482:			CCF
0B0CE5 CB 11       1688**          		RL      C               ;QUOTIENT
0B0CE7 30 02       1689**          		JR      NC,MOD483
0B0CE9 CB F9       1690**          		SET     7,C             ;STICKY BIT
0B0CEB 3D          1691**  MOD483:			DEC     A
0B0CEC B8          1692**          		CP      B
0B0CED 38 1F       1693**          		JR      C,MOD484        ;DIVIDEND<DIVISOR
0B0CEF E3          1694**          		EX      (SP),HL
0B0CF0 52 29       1695**          		ADD.S   HL,HL           ;DIVIDEND * 2
0B0CF2 E3          1696**          		EX      (SP),HL
0B0CF3 D9          1697**          		EXX
0B0CF4 52 ED 6A    1698**          		ADC.S   HL,HL
0B0CF7 D9          1699**          		EXX
0B0CF8 52 ED 6A    1700**          		ADC.S   HL,HL
0B0CFB 30 CC       1701**          		JR      NC,MOD481       ;AGAIN
0B0CFD B7          1702**          		OR      A
0B0CFE D9          1703**          		EXX
0B0CFF E3          1704**          		EX      (SP),HL
0B0D00 52 ED 42    1705**          		SBC.S   HL,BC           ;OVERFLOW, SO SUBTRACT
0B0D03 E3          1706**          		EX      (SP),HL
0B0D04 52 ED 52    1707**          		SBC.S   HL,DE
0B0D07 D9          1708**          		EXX
0B0D08 52 ED 52    1709**          		SBC.S   HL,DE
0B0D0B B7          1710**          		OR      A
0B0D0C 18 D6       1711**          		JR      MOD482
0B0D0E             1712**  ;
0B0D0E 3C          1713**  MOD484:			INC     A
0B0D0F 59          1714**  MOD485:			LD      E,C             ;QUOTIENT
0B0D10 4F          1715**          		LD      C,A             ;REMAINDER EXPONENT
0B0D11 D9          1716**          		EXX
0B0D12 C1          1717**          		POP     BC
0B0D13 D9          1718**          		EXX
0B0D14 CB 7C       1719**  FLO48:			BIT     7,H
0B0D16 C0          1720**          		RET     NZ
0B0D17 D9          1721**          		EXX
0B0D18 CB 21       1722**          		SLA     C
0B0D1A CB 10       1723**          		RL      B
0B0D1C 52 ED 6A    1724**          		ADC.S   HL,HL
0B0D1F D9          1725**          		EXX
0B0D20 52 ED 6A    1726**          		ADC.S   HL,HL
0B0D23 0D          1727**          		DEC     C
0B0D24 C2 14 0D 0B 1728**          		JP      NZ,FLO48
0B0D28 C9          1729**          		RET
0B0D29             1730**  ;
0B0D29             1731**  ;Float unsigned number
0B0D29             1732**  ;    Input/output in HLH'L'C
0B0D29             1733**  ;   Destroys: C,H,L,H',L',F
0B0D29             1734**  ;
0B0D29 CB 7C       1735**  FLOAT_:			BIT     7,H
0B0D2B C0          1736**          		RET     NZ
0B0D2C D9          1737**          		EXX                     ;SAME AS "X2"
0B0D2D 52 29       1738**          		ADD.S   HL,HL           ;TIME-CRITICAL
0B0D2F D9          1739**          		EXX                     ;REGION
0B0D30 52 ED 6A    1740**          		ADC.S   HL,HL           ;(BENCHMARKS)
0B0D33 0D          1741**          		DEC     C
0B0D34 C2 29 0D 0B 1742**          		JP      NZ,FLOAT_
0B0D38 C9          1743**          		RET
0B0D39             1744**  ;
0B0D39             1745**  ;SFLOAT - Convert to floating-point if necessary.
0B0D39             1746**  ;    Input: Variable-type number in HLH'L'C
0B0D39             1747**  ;    Output: Floating-point in HLH'L'C
0B0D39             1748**  ;    Destroys: A,C,H,L,H',L',F
0B0D39             1749**  ;
0B0D39 08          1750**  FLOATA:			EX      AF,AF'
0B0D3A             1751**          		; ADD     A,(RTABLE-DTABLE)/3
0B0D3A C6 2A       1752**          		ADD     A,RTABLE-DTABLE/3 ; ez80asm doesn't do nested expressions
0B0D3C 08          1753**          		EX      AF,AF'
0B0D3D CD 7A 0D 0B 1754**  FLOAT2:			CALL    SWAP_FP
0B0D41 CD 49 0D 0B 1755**          		CALL    SFLOAT_FP
0B0D45 CD 7A 0D 0B 1756**          		CALL    SWAP_FP
0B0D49 0D          1757**  SFLOAT_FP:			DEC     C
0B0D4A 0C          1758**          		INC     C
0B0D4B C0          1759**          		RET     NZ              ;ALREADY FLOATING-POINT
0B0D4C CD A2 0D 0B 1760**          		CALL    TEST_FP
0B0D50 C8          1761**          		RET     Z               ;ZERO
0B0D51 7C          1762**          		LD      A,H
0B0D52 B7          1763**          		OR      A
0B0D53 FC 7D 0C 0B 1764**          		CALL    M,NEGATE
0B0D57 0E 9F       1765**          		LD      C,159
0B0D59 CD 29 0D 0B 1766**          		CALL    FLOAT_
0B0D5D B7          1767**          		OR      A
0B0D5E F8          1768**          		RET     M               ;NEGATIVE
0B0D5F CB BC       1769**          		RES     7,H
0B0D61 C9          1770**          		RET
0B0D62             1771**  ;
0B0D62             1772**  ;ROUND UP
0B0D62             1773**  ;Return with carry set if 32-bit overflow
0B0D62             1774**  ;   Destroys: H,L,B',C',H',L',F
0B0D62             1775**  ;
0B0D62 D9          1776**  ADD1_FP:			EXX
0B0D63 01 01 00 00 1777**          		LD      BC,1
0B0D67 52 09       1778**          		ADD.S   HL,BC
0B0D69 D9          1779**          		EXX
0B0D6A D0          1780**          		RET     NC
0B0D6B C5          1781**          		PUSH    BC
0B0D6C 01 01 00 00 1782**          		LD      BC,1
0B0D70 52 09       1783**          		ADD.S   HL,BC
0B0D72 C1          1784**          		POP     BC
0B0D73 C9          1785**          		RET
0B0D74             1786**  ;
0B0D74             1787**  ;ODD - Add one if even, leave alone if odd.
0B0D74             1788**  ; (Used to perform unbiassed rounding, i.e.
0B0D74             1789**  ;  number is rounded up half the time)
0B0D74             1790**  ;    Destroys: L',F (carry cleared)
0B0D74             1791**  ;
0B0D74 B7          1792**  ODD:			OR      A               ;CLEAR CARRY
0B0D75 D9          1793**          		EXX
0B0D76 CB C5       1794**          		SET     0,L             ;MAKE ODD
0B0D78 D9          1795**          		EXX
0B0D79 C9          1796**          		RET
0B0D7A             1797**  ;
0B0D7A             1798**  ;SWAP_FP - Swap arguments.
0B0D7A             1799**  ;    Exchanges DE,HL D'E',H'L' and B,C
0B0D7A             1800**  ;    Destroys: A,B,C,D,E,H,L,D',E',H',L'
0B0D7A             1801**  ;SWAP1 - Swap DEHL with D'E'H'L'
0B0D7A             1802**  ;    Destroys: D,E,H,L,D',E',H',L'
0B0D7A             1803**  ;
0B0D7A 79          1804**  SWAP_FP:			LD      A,C
0B0D7B 48          1805**          		LD      C,B
0B0D7C 47          1806**          		LD      B,A
0B0D7D EB          1807**  SWAP1:			EX      DE,HL
0B0D7E D9          1808**          		EXX
0B0D7F EB          1809**          		EX      DE,HL
0B0D80 D9          1810**          		EXX
0B0D81 C9          1811**          		RET
0B0D82             1812**  ;
0B0D82             1813**  ; DIV2 - destroys C,H,L,A',B',C',H',L',F,F'
0B0D82             1814**  ; INCC - destroys C,F
0B0D82             1815**  ; OFLOW
0B0D82             1816**  ;
0B0D82 CD 3B 0E 0B 1817**  DIV2:			CALL    D2
0B0D86 D9          1818**          		EXX
0B0D87 CB 18       1819**          		RR      B
0B0D89 CB 19       1820**          		RR      C
0B0D8B 08          1821**          		EX      AF,AF'
0B0D8C B0          1822**          		OR      B
0B0D8D 08          1823**          		EX      AF,AF'
0B0D8E D9          1824**          		EXX
0B0D8F 0C          1825**  INCC:			INC     C
0B0D90 C0          1826**          		RET     NZ
0B0D91 3E 14       1827**  OFLOW:			LD      A,TOOBIG_FP
0B0D93 C3 20 02 0B 1828**          		JP      ERROR_FP_           ;"Too big"
0B0D97             1829**  ;
0B0D97             1830**  ; FTEST - Test for zero & sign
0B0D97             1831**  ;     Output: A=0 if zero, A=&40 if +ve, A=&C0 if -ve
0B0D97             1832**  ;
0B0D97 CD A2 0D 0B 1833**  FTEST_FP:			CALL    TEST_FP
0B0D9B C8          1834**          		RET     Z
0B0D9C 7C          1835**          		LD      A,H
0B0D9D E6 80       1836**          		AND     10000000B
0B0D9F F6 40       1837**          		OR      01000000B
0B0DA1 C9          1838**          		RET
0B0DA2             1839**  ;
0B0DA2             1840**  ; TEST_FP - Test HLH'L' for zero.
0B0DA2             1841**  ;     Output: Z-flag set & A=0 if HLH'L'=0
0B0DA2             1842**  ;     Destroys: A,F
0B0DA2             1843**  ;
0B0DA2 7C          1844**  TEST_FP:			LD      A,H
0B0DA3 B5          1845**          		OR      L
0B0DA4 D9          1846**          		EXX
0B0DA5 B4          1847**          		OR      H
0B0DA6 B5          1848**          		OR      L
0B0DA7 D9          1849**          		EXX
0B0DA8 C9          1850**          		RET
0B0DA9             1851**  ;
0B0DA9             1852**  ; FCOMP - Compare two numbers
0B0DA9             1853**  ;     Output: A=0 if equal, A=&40 if L>R, A=&C0 if L<R
0B0DA9             1854**  ;
0B0DA9 78          1855**  FCOMP_FP:			LD      A,B
0B0DAA B1          1856**          		OR      C               ;Both integer?
0B0DAB 20 0B       1857**          		JR      NZ,FCOMP1
0B0DAD CD C2 0D 0B 1858**          		CALL    ICP
0B0DB1 3E 00       1859**  FCOMP0:			LD      A,0
0B0DB3 C8          1860**          		RET     Z               ;Equal
0B0DB4 3E 80       1861**          		LD      A,80H
0B0DB6 1F          1862**          		RRA
0B0DB7 C9          1863**          		RET
0B0DB8             1864**  ;
0B0DB8 CD 3D 0D 0B 1865**  FCOMP1:			CALL    FLOAT2          ;Float both
0B0DBC CD D0 0D 0B 1866**          		CALL    FCP
0B0DC0 18 EF       1867**          		JR      FCOMP0
0B0DC2             1868**  ;
0B0DC2             1869**  ; Integer and floating point compare.
0B0DC2             1870**  ; Sets carry & zero flags according to HLH'L'C-DED'E'B
0B0DC2             1871**  ; Result pre-set to FALSE
0B0DC2             1872**  ; ICP1, FCP1 destroy A,F
0B0DC2             1873**  ;
0B0DC2             1874**  ; ZERO - Return zero.
0B0DC2             1875**  ;  Destroys: A,C,H,L,H',L'
0B0DC2             1876**  ;
0B0DC2 CD F5 0D 0B 1877**  ICP:			CALL    ICP1
0B0DC6 3E 00       1878**  ZERO_FP:			LD      A,0
0B0DC8 D9          1879**          		EXX
0B0DC9 67          1880**          		LD      H,A
0B0DCA 6F          1881**  	       		LD      L,A
0B0DCB D9          1882**          		EXX
0B0DCC 67          1883**        			LD      H,A
0B0DCD 6F          1884**       			LD      L,A
0B0DCE 4F          1885**  	    		LD      C,A
0B0DCF C9          1886**          		RET
0B0DD0             1887**  ;
0B0DD0 CD E7 0D 0B 1888**  FCP:			CALL    FCP1
0B0DD4 18 F0       1889**          		JR      ZERO_FP            ;PRESET FALSE
0B0DD6             1890**  ;
0B0DD6 79          1891**  FCP0:			LD      A,C
0B0DD7 B8          1892**          		CP      B               ;COMPARE EXPONENTS
0B0DD8 C0          1893**          		RET     NZ
0B0DD9             1894**  ICP0:
0B0DD9 52 ED 52    1895**  			SBC.S   HL,DE           ;COMP MANTISSA MSB
0B0DDC 52 19       1896**          		ADD.S   HL,DE
0B0DDE C0          1897**          		RET     NZ
0B0DDF D9          1898**          		EXX
0B0DE0 52 ED 52    1899**          		SBC.S   HL,DE           ;COMP MANTISSA LSB
0B0DE3 52 19       1900**          		ADD.S   HL,DE
0B0DE5 D9          1901**          		EXX
0B0DE6 C9          1902**          		RET
0B0DE7             1903**  ;
0B0DE7 7C          1904**  FCP1:			LD      A,H
0B0DE8 AA          1905**          		XOR     D
0B0DE9 7C          1906**          		LD      A,H
0B0DEA 17          1907**          		RLA
0B0DEB F8          1908**          		RET     M
0B0DEC 30 E8       1909**          		JR      NC,FCP0
0B0DEE CD D6 0D 0B 1910**          		CALL    FCP0
0B0DF2 C8          1911**          		RET     Z               ;** V0.1 BUG FIX
0B0DF3 3F          1912**          		CCF
0B0DF4 C9          1913**          		RET
0B0DF5             1914**  ;
0B0DF5 7C          1915**  ICP1:			LD      A,H
0B0DF6 AA          1916**          		XOR     D
0B0DF7 F2 D9 0D 0B 1917**          		JP      P,ICP0
0B0DFB 7C          1918**          		LD      A,H
0B0DFC 17          1919**          		RLA
0B0DFD C9          1920**          		RET
0B0DFE             1921**  ;
0B0DFE             1922**  ; ADD - Integer add.
0B0DFE             1923**  ; Carry, sign & zero flags valid on exit
0B0DFE             1924**  ;     Destroys: H,L,H',L',F
0B0DFE             1925**  ;
0B0DFE 05          1926**  X10B:			DEC     B
0B0DFF 0C          1927**          		INC     C
0B0E00 CD 47 0E 0B 1928**  X5:			CALL    COPY0
0B0E04 CD 3A 0E 0B 1929**          		CALL    D2C
0B0E08 CD 3A 0E 0B 1930**          		CALL    D2C
0B0E0C 08          1931**          		EX      AF,AF'          ;SAVE CARRY
0B0E0D D9          1932**  ADD_:			EXX
0B0E0E 52 19       1933**          		ADD.S   HL,DE
0B0E10 D9          1934**          		EXX
0B0E11 52 ED 5A    1935**          		ADC.S   HL,DE
0B0E14 C9          1936**          		RET
0B0E15             1937**  ;
0B0E15             1938**  ; SUB - Integer subtract.
0B0E15             1939**  ; Carry, sign & zero flags valid on exit
0B0E15             1940**  ;     Destroys: H,L,H',L',F
0B0E15             1941**  ;
0B0E15 D9          1942**  SUB_:			EXX
0B0E16 B7          1943**          		OR      A
0B0E17 52 ED 52    1944**          		SBC.S   HL,DE
0B0E1A D9          1945**          		EXX
0B0E1B 52 ED 52    1946**          		SBC.S   HL,DE
0B0E1E C9          1947**          		RET
0B0E1F             1948**  ;
0B0E1F             1949**  ; X10 - unsigned integer * 10
0B0E1F             1950**  ;    Inputs: HLH'L' initial value
0B0E1F             1951**  ;   Outputs: DED'E' = initial HLH'L'
0B0E1F             1952**  ;            Carry bit set if overflow
0B0E1F             1953**  ;            If carry not set HLH'L'=result
0B0E1F             1954**  ;  Destroys: D,E,H,L,D',E',H',L',F
0B0E1F             1955**  ; X2 - Multiply HLH'L' by 2 as 32-bit integer.
0B0E1F             1956**  ;     Carry set if MSB=1 before shift.
0B0E1F             1957**  ;     Sign set if MSB=1 after shift.
0B0E1F             1958**  ;     Destroys: H,L,H',L',F
0B0E1F             1959**  ;
0B0E1F CD 47 0E 0B 1960**  X10:			CALL    COPY0           ;DED'E'=HLH'L'
0B0E23 CD 32 0E 0B 1961**          		CALL    X2
0B0E27 D8          1962**          		RET     C               ;TOO BIG
0B0E28 CD 32 0E 0B 1963**          		CALL    X2
0B0E2C D8          1964**          		RET     C
0B0E2D CD 0D 0E 0B 1965**          		CALL    ADD_
0B0E31 D8          1966**          		RET     C
0B0E32 D9          1967**  X2:			EXX
0B0E33 52 29       1968**          		ADD.S   HL,HL
0B0E35 D9          1969**          		EXX
0B0E36 52 ED 6A    1970**          		ADC.S   HL,HL
0B0E39 C9          1971**          		RET
0B0E3A             1972**  ;
0B0E3A             1973**  ; D2 - Divide HLH'L' by 2 as 32-bit integer.
0B0E3A             1974**  ;     Carry set if LSB=1 before shift.
0B0E3A             1975**  ;     Destroys: H,L,H',L',F
0B0E3A             1976**  ;
0B0E3A 0C          1977**  D2C:			INC     C
0B0E3B CB 3C       1978**  D2:			SRL     H
0B0E3D CB 1D       1979**          		RR      L
0B0E3F D9          1980**          		EXX
0B0E40 CB 1C       1981**          		RR      H
0B0E42 CB 1D       1982**          		RR      L
0B0E44 D9          1983**          		EXX
0B0E45 C9          1984**          		RET
0B0E46             1985**  ;
0B0E46             1986**  ; COPY - COPY HLH'L'C INTO DED'E'B
0B0E46             1987**  ;   Destroys: B,C,D,E,H,L,D',E',H',L'
0B0E46             1988**  ;
0B0E46 41          1989**  COPY_:			LD      B,C
0B0E47 54          1990**  COPY0:			LD      D,H
0B0E48 5D          1991**          		LD      E,L
0B0E49 D9          1992**          		EXX
0B0E4A 54          1993**          		LD      D,H
0B0E4B 5D          1994**          		LD      E,L
0B0E4C D9          1995**          		EXX
0B0E4D C9          1996**          		RET
0B0E4E             1997**  ;
0B0E4E             1998**  ; SQUARE - PUSH X*X
0B0E4E             1999**  ; PUSH5 - PUSH HLH'L'C ONTO STACK.
0B0E4E             2000**  ;   Destroys: SP,IX
0B0E4E             2001**  ;
0B0E4E CD 46 0E 0B 2002**  SQUARE:			CALL    COPY_
0B0E52 CD B1 04 0B 2003**          		CALL    FMUL
0B0E56 DD E1       2004**  PUSH5:			POP     IX              ;RETURN ADDRESS
0B0E58 C5          2005**          		PUSH    BC
0B0E59 E5          2006**          		PUSH    HL
0B0E5A D9          2007**          		EXX
0B0E5B E5          2008**          		PUSH    HL
0B0E5C D9          2009**          		EXX
0B0E5D DD E9       2010**          		JP      (IX)            ;"RETURN"
0B0E5F             2011**  ;
0B0E5F             2012**  ; POP5 - POP DED'E'B OFF STACK.
0B0E5F             2013**  ;   Destroys: A,B,D,E,D',E',SP,IX
0B0E5F             2014**  ;
0B0E5F DD E1       2015**  POP5:			POP     IX              ;RETURN ADDRESS
0B0E61 D9          2016**          		EXX
0B0E62 D1          2017**          		POP     DE
0B0E63 D9          2018**          		EXX
0B0E64 D1          2019**          		POP     DE
0B0E65 79          2020**          		LD      A,C
0B0E66 C1          2021**          		POP     BC
0B0E67 41          2022**          		LD      B,C
0B0E68 4F          2023**          		LD      C,A
0B0E69 DD E9       2024**          		JP      (IX)            ;"RETURN"
0B0E6B             2025**  ;
0B0E6B             2026**  ; RATIO - Calculate (X-1)/(X+1)
0B0E6B             2027**  ;     Inputs: X in HLH'L'C
0B0E6B             2028**  ;    Outputs: (X-1)/(X+1) in HLH'L'C
0B0E6B             2029**  ;   Destroys: Everything except IY,SP,I
0B0E6B             2030**  ;
0B0E6B CD 56 0E 0B 2031**  RATIO:			CALL    PUSH5           ;SAVE X
0B0E6F CD DE 07 0B 2032**          		CALL    DONE
0B0E73 CD 9F 03 0B 2033**          		CALL    FADD
0B0E77 CD 5F 0E 0B 2034**          		CALL    POP5            ;RESTORE X
0B0E7B CD 56 0E 0B 2035**          		CALL    PUSH5           ;SAVE X+1
0B0E7F CD 7A 0D 0B 2036**          		CALL    SWAP_FP
0B0E83 CD DE 07 0B 2037**          		CALL    DONE
0B0E87 CD 86 03 0B 2038**          		CALL    FSUB
0B0E8B CD 5F 0E 0B 2039**          		CALL    POP5            ;RESTORE X+1
0B0E8F C3 08 04 0B 2040**          		JP      FDIV
0B0E93             2041**  ;
0B0E93             2042**  ; POLY - Evaluate a polynomial.
0B0E93             2043**  ;     Inputs: X in HLH'L'C and also stored at (SP+2)
0B0E93             2044**  ;             Polynomial coefficients follow call.
0B0E93             2045**  ;    Outputs: Result in HLH'L'C
0B0E93             2046**  ;   Destroys: Everything except IY,SP,I
0B0E93             2047**  ; Routine terminates on finding a coefficient >=1.
0B0E93             2048**  ; Note: The last coefficient is EXECUTED on return
0B0E93             2049**  ;       so must contain only innocuous bytes!
0B0E93             2050**  ;
0B0E93 DD 21 03 00 2051**  POLY:			LD      IX, 3				; Advance the SP to the return address
       00          
0B0E98 DD 39       2052**          		ADD     IX, SP
0B0E9A DD E3       2053**          		EX      (SP), IX			; IX: Points to the inline list of coefficients
0B0E9C             2054**  ;
0B0E9C CD 72 0B 0B 2055**          		CALL    DLOAD5          		; Load the first coefficient from (IX)
0B0EA0 CD B1 04 0B 2056**  POLY1:			CALL    FMUL
0B0EA4 11 05 00 00 2057**          		LD      DE, 5				; Skip to the next coefficient
0B0EA8 DD 19       2058**          		ADD     IX, DE
0B0EAA CD 72 0B 0B 2059**          		CALL    DLOAD5          		; Load the second coefficient from (IX)
0B0EAE DD E3       2060**          		EX      (SP), IX			; Restore the SP just in case we need to return
0B0EB0 04          2061**          		INC     B
0B0EB1 05          2062**          		DEC     B               		; Test B for end byte (80h)
0B0EB2 FA 9F 03 0B 2063**          		JP      M,FADD				; Yes, so add and return
0B0EB6 CD 9F 03 0B 2064**          		CALL    FADD				; No, so add
0B0EBA CD 84 0B 0B 2065**          		CALL    DLOAD5_SPL			; Load X from SP
0B0EBE DD E3       2066**          		EX      (SP), IX			; IX: Points to the inline list of coefficients
0B0EC0 18 DE       2067**          		JR      POLY1				; And loop
0B0EC2             2068**  ;
0B0EC2             2069**  ; POWR10 - Calculate power of ten.
0B0EC2             2070**  ;     Inputs: A=power of 10 required (A<128)
0B0EC2             2071**  ;             A=binary exponent to be exceeded (A>=128)
0B0EC2             2072**  ;    Outputs: DED'E'B = result
0B0EC2             2073**  ;             A = actual power of ten returned
0B0EC2             2074**  ;   Destroys: A,B,D,E,A',D',E',F,F'
0B0EC2             2075**  ;
0B0EC2 3C          2076**  POWR10:			INC     A
0B0EC3 08          2077**          		EX      AF,AF'
0B0EC4 E5          2078**          		PUSH    HL
0B0EC5 D9          2079**          		EXX
0B0EC6 E5          2080**          		PUSH    HL
0B0EC7 D9          2081**          		EXX
0B0EC8 CD DE 07 0B 2082**          		CALL    DONE
0B0ECC CD 7A 0D 0B 2083**          		CALL    SWAP_FP
0B0ED0 AF          2084**          		XOR     A
0B0ED1 08          2085**  POWR11:			EX      AF,AF'
0B0ED2 3D          2086**          		DEC     A
0B0ED3 28 26       2087**          		JR      Z,POWR14        ;EXIT TYPE 1
0B0ED5 F2 DD 0E 0B 2088**          		JP      P,POWR13
0B0ED9 B9          2089**          		CP      C
0B0EDA 38 1F       2090**          		JR      C,POWR14        ;EXIT TYPE 2
0B0EDC 3C          2091**          		INC     A
0B0EDD 08          2092**  POWR13:			EX      AF,AF'
0B0EDE 3C          2093**          		INC     A
0B0EDF CB FC       2094**          		SET     7,H
0B0EE1 CD 00 0E 0B 2095**          		CALL    X5
0B0EE5 30 06       2096**          		JR      NC,POWR12
0B0EE7 08          2097**          		EX      AF,AF'
0B0EE8 CD 3A 0E 0B 2098**          		CALL    D2C
0B0EEC 08          2099**          		EX      AF,AF'
0B0EED 08          2100**  POWR12:			EX      AF,AF'
0B0EEE DC 62 0D 0B 2101**          		CALL    C,ADD1_FP          ;ROUND UP
0B0EF2 0C          2102**          		INC     C
0B0EF3 FA D1 0E 0B 2103**          		JP      M,POWR11
0B0EF7 C3 91 0D 0B 2104**          		JP      OFLOW
0B0EFB CD 7A 0D 0B 2105**  POWR14:			CALL    SWAP_FP
0B0EFF CB BA       2106**          		RES     7,D
0B0F01 D9          2107**          		EXX
0B0F02 E1          2108**          		POP     HL
0B0F03 D9          2109**          		EXX
0B0F04 E1          2110**          		POP     HL
0B0F05 08          2111**          		EX      AF,AF'
0B0F06 C9          2112**          		RET
0B0F07             2113**  ;
0B0F07             2114**  ; DIVA, DIVB - DIVISION PRIMITIVE.
0B0F07             2115**  ;     Function: D'E'DE = H'L'HLD'E'DE / B'C'BC
0B0F07             2116**  ;               Remainder in H'L'HL
0B0F07             2117**  ;     Inputs: A = loop counter (normally -32)
0B0F07             2118**  ;     Destroys: A,D,E,H,L,D',E',H',L',F
0B0F07             2119**  ;
0B0F07 B7          2120**  DIVA:			OR      A               ;CLEAR CARRY
0B0F08             2121**  DIV0:
0B0F08 52 ED 42    2122**  			SBC.S   HL,BC           ;DIVIDEND-DIVISOR
0B0F0B D9          2123**          		EXX
0B0F0C 52 ED 42    2124**          		SBC.S   HL,BC
0B0F0F D9          2125**          		EXX
0B0F10 30 07       2126**          		JR      NC,DIV1
0B0F12 52 09       2127**          		ADD.S   HL,BC           ;DIVIDEND+DIVISOR
0B0F14 D9          2128**          		EXX
0B0F15 52 ED 4A    2129**          		ADC.S   HL,BC
0B0F18 D9          2130**          		EXX
0B0F19 3F          2131**  DIV1:			CCF
0B0F1A CB 13       2132**  DIVC:			RL      E               ;SHIFT RESULT INTO DE
0B0F1C CB 12       2133**          		RL      D
0B0F1E D9          2134**          		EXX
0B0F1F CB 13       2135**          		RL      E
0B0F21 CB 12       2136**          		RL      D
0B0F23 D9          2137**          		EXX
0B0F24 3C          2138**          		INC     A
0B0F25 F0          2139**          		RET     P
0B0F26             2140**  DIVB:
0B0F26 52 ED 6A    2141**  			ADC.S   HL,HL           ;DIVIDEND*2
0B0F29 D9          2142**          		EXX
0B0F2A 52 ED 6A    2143**          		ADC.S   HL,HL
0B0F2D D9          2144**          		EXX
0B0F2E 30 D8       2145**          		JR      NC,DIV0
0B0F30 B7          2146**          		OR      A
0B0F31 52 ED 42    2147**          		SBC.S   HL,BC           ;DIVIDEND-DIVISOR
0B0F34 D9          2148**          		EXX
0B0F35 52 ED 42    2149**          		SBC.S   HL,BC
0B0F38 D9          2150**          		EXX
0B0F39 37          2151**          		SCF
0B0F3A C3 1A 0F 0B 2152**          		JP      DIVC
0B0F3E             2153**  ;
0B0F3E             2154**  ;MULA, MULB - MULTIPLICATION PRIMITIVE.
0B0F3E             2155**  ;    Function: H'L'HLD'E'DE = B'C'BC * D'E'DE
0B0F3E             2156**  ;    Inputs: A = loop counter (usually -32)
0B0F3E             2157**  ;            H'L'HL = 0
0B0F3E             2158**  ;    Destroys: D,E,H,L,D',E',H',L',A,F
0B0F3E             2159**  ;
0B0F3E B7          2160**  MULA:			OR      A               ;CLEAR CARRY
0B0F3F D9          2161**  MUL0:			EXX
0B0F40 CB 1A       2162**          		RR      D               ;MULTIPLIER/2
0B0F42 CB 1B       2163**          		RR      E
0B0F44 D9          2164**          		EXX
0B0F45 CB 1A       2165**          		RR      D
0B0F47 CB 1B       2166**          		RR      E
0B0F49 30 07       2167**          		JR      NC,MUL1
0B0F4B 52 09       2168**          		ADD.S   HL,BC           ;ADD IN MULTIPLICAND
0B0F4D D9          2169**          		EXX
0B0F4E 52 ED 4A    2170**          		ADC.S   HL,BC
0B0F51 D9          2171**          		EXX
0B0F52 3C          2172**  MUL1:			INC     A
0B0F53 F0          2173**          		RET     P
0B0F54 D9          2174**  MULB:			EXX
0B0F55 CB 1C       2175**          		RR      H               ;PRODUCT/2
0B0F57 CB 1D       2176**          		RR      L
0B0F59 D9          2177**          		EXX
0B0F5A CB 1C       2178**          		RR      H
0B0F5C CB 1D       2179**          		RR      L
0B0F5E C3 3F 0F 0B 2180**          		JP      MUL0
0B0F62             2181**  ;
0B0F62             2182**  ; SQRA, SQRB - SQUARE ROOT PRIMITIVES
0B0F62             2183**  ;     Function: B'C'BC = SQR (D'E'DE)
0B0F62             2184**  ;     Inputs: A = loop counter (normally -31)
0B0F62             2185**  ;             B'C'BCH'L'HL initialised to 0
0B0F62             2186**  ;   Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',F
0B0F62             2187**  ;
0B0F62             2188**  SQR1:
0B0F62 52 ED 42    2189**  			SBC.S   HL,BC
0B0F65 D9          2190**          		EXX
0B0F66 52 ED 42    2191**          		SBC.S   HL,BC
0B0F69 D9          2192**          		EXX
0B0F6A 0C          2193**          		INC     C
0B0F6B 30 09       2194**          		JR      NC,SQR2
0B0F6D 0D          2195**          		DEC     C
0B0F6E 52 09       2196**          		ADD.S   HL,BC
0B0F70 D9          2197**          		EXX
0B0F71 52 ED 4A    2198**          		ADC.S   HL,BC
0B0F74 D9          2199**          		EXX
0B0F75 0D          2200**          		DEC     C
0B0F76 3C          2201**  SQR2:			INC     A
0B0F77 F0          2202**          		RET     P
0B0F78 CB 21       2203**  SQRA:			SLA     C
0B0F7A CB 10       2204**          		RL      B
0B0F7C D9          2205**          		EXX
0B0F7D CB 11       2206**          		RL      C
0B0F7F CB 10       2207**          		RL      B
0B0F81 D9          2208**          		EXX
0B0F82 0C          2209**          		INC     C
0B0F83 CB 23       2210**          		SLA     E
0B0F85 CB 12       2211**          		RL      D
0B0F87 D9          2212**          		EXX
0B0F88 CB 13       2213**          		RL      E
0B0F8A CB 12       2214**          		RL      D
0B0F8C D9          2215**          		EXX
0B0F8D 52 ED 6A    2216**          		ADC.S   HL,HL
0B0F90 D9          2217**          		EXX
0B0F91 52 ED 6A    2218**          		ADC.S   HL,HL
0B0F94 D9          2219**          		EXX
0B0F95 CB 23       2220**          		SLA     E
0B0F97 CB 12       2221**          		RL      D
0B0F99 D9          2222**          		EXX
0B0F9A CB 13       2223**          		RL      E
0B0F9C CB 12       2224**          		RL      D
0B0F9E D9          2225**          		EXX
0B0F9F 52 ED 6A    2226**          		ADC.S   HL,HL
0B0FA2 D9          2227**          		EXX
0B0FA3 52 ED 6A    2228**          		ADC.S   HL,HL
0B0FA6 D9          2229**          		EXX
0B0FA7 D2 62 0F 0B 2230**          		JP      NC,SQR1
0B0FAB B7          2231**  SQR3:			OR      A
0B0FAC 52 ED 42    2232**          		SBC.S   HL,BC
0B0FAF D9          2233**          		EXX
0B0FB0 52 ED 42    2234**          		SBC.S   HL,BC
0B0FB3 D9          2235**          		EXX
0B0FB4 0C          2236**          		INC     C
0B0FB5 C3 76 0F 0B 2237**          		JP      SQR2
0B0FB9             2238**  ;
0B0FB9             2239**  SQRB:
0B0FB9 52 29       2240**  			ADD.S   HL,HL
0B0FBB D9          2241**          		EXX
0B0FBC 52 ED 6A    2242**          		ADC.S   HL,HL
0B0FBF D9          2243**          		EXX
0B0FC0 38 E9       2244**          		JR      C,SQR3
0B0FC2 3C          2245**          		INC     A
0B0FC3 0C          2246**          		INC     C
0B0FC4 52 ED 42    2247**          		SBC.S   HL,BC
0B0FC7 D9          2248**          		EXX
0B0FC8 52 ED 42    2249**          		SBC.S   HL,BC
0B0FCB D9          2250**          		EXX
0B0FCC D0          2251**          		RET     NC
0B0FCD 52 09       2252**          		ADD.S   HL,BC
0B0FCF D9          2253**          		EXX
0B0FD0 52 ED 4A    2254**          		ADC.S   HL,BC
0B0FD3 D9          2255**          		EXX
0B0FD4 0D          2256**          		DEC     C
0B0FD5 C9          2257**          		RET
0B0FD6             2258**  ;
0B0FD6 DD 7E 00    2259**  DIGITQ:			LD      A,(IX)
0B0FD9 FE 3A       2260**          		CP      '9'+1
0B0FDB 3F          2261**          		CCF
0B0FDC D8          2262**          		RET     C
0B0FDD FE 30       2263**          		CP      '0'
0B0FDF C9          2264**          		RET
0B0FE0             2265**  ;
0B0FE0 DD 7E 00    2266**  SIGNQ:			LD      A,(IX)
0B0FE3 DD 23       2267**          		INC     IX
0B0FE5 FE 20       2268**          		CP      ' '
0B0FE7 28 F7       2269**          		JR      Z,SIGNQ
0B0FE9 FE 2B       2270**          		CP      '+'
0B0FEB C8          2271**          		RET     Z
0B0FEC FE 2D       2272**          		CP      '-'
0B0FEE C8          2273**          		RET     Z
0B0FEF DD 2B       2274**          		DEC     IX
0B0FF1 C9          2275**          		RET
0B0FF2             0002*   
0B0FF2             0003*   ; =================================================================================================
0B0FF2             0004*   ; FROM eval.asm
0B0FF2             0005*   ; -------------------------------------------------------------------------------------------------
0B0FF2             0006*   ;
0B0FF2             0007*   ;VAL - Return numeric value of string.
0B0FF2             0008*   ;Result is variable type numeric.
0B0FF2             0009*   ;
0B0FF2 CD 01 10 0B 0010*   VAL:			CALL    ITEMS
0B0FF6 AF          0011*   VAL0:			XOR     A
0B0FF7 12          0012*   			LD      (DE),A
0B0FF8 DD 21 00 12 0013*   			LD      IX,ACCS
       0B          
0B0FFD 3E 24       0014*   			LD      A,36
0B0FFF 18 0C       0015*   			JR      FPP1
0B1001             0016*   
0B1001             0017*   ; Get a string variable
0B1001             0018*   ;
0B1001 CD 17 10 0B 0019*   ITEMS:			CALL    ITEM			; Get the variable
0B1005 B7          0020*   			OR      A			; Test the type
0B1006 F8          0021*   			RET     M			; If it is a string, then return
0B1007             0022*   ;							; Otherwise
0B1007 3E 06       0023*   TYPE_EV_:			LD      A,6			; Error: "Type mismatch"
0B1009 C3 6C 16 0B 0024*   			JP      ERROR_
0B100D             0025*   
0B100D CD 0D 02 0B 0026*   FPP1:			CALL    FPP
0B1011 DA 6C 16 0B 0027*   			JP      C,ERROR_
0B1015 AF          0028*   			XOR     A
0B1016 C9          0029*   			RET
0B1017             0030*   
0B1017             0031*   ;
0B1017             0032*   ; ITEM - VARIABLE TYPE NUMERIC OR STRING ITEM.
0B1017             0033*   ; Item type is returned in A:  Bit 7=0 numeric.
0B1017             0034*   ;                              Bit 7=1 string.
0B1017             0035*   ; Numeric item returned in HLH'L'C.
0B1017             0036*   ; String item returned in string accumulator,
0B1017             0037*   ;   DE addresses byte after last (E=length).
0B1017             0038*   ;
0B1017 CD 13 11 0B 0039*   ITEM:			CALL    CHECK			; Check there's at least a page of free memory left and Error: "No room" if not
0B101B CD B9 10 0B 0040*   			CALL    NXT			; Skip spaces
0B101F FD 23       0041*   			INC     IY			; Move to the prefix character
0B1021 FE 26       0042*   			CP      '&'			; If `&`
0B1023 CA C5 10 0B 0043*   			JP      Z,HEX           	; Then get a HEX constant
0B1027 FE 25       0044*   			CP	'%'			; If '%'
0B1029 28 C5       0045*   			JR	Z,BIN			; Then get a BINARY constant
