PC     Output      Line
040000             0001   ;
040000             0002   ; Title:	test
040000             0003   ; Author:	Brandon Gates
040000             0004   ; Created:	29/10/2024
040000             0005   
040000             0006       ASSUME	ADL = 1
040000             0007       INCLUDE "mos_api.inc"
040000             0001*  ;
040000             0002*  ; Title:	AGON MOS - API for user projects
040000             0003*  ; Author:	Dean Belfield
040000             0004*  ; Created:	03/08/2022
040000             0005*  ; Last Updated:	11/11/2023
040000             0006*  ;
040000             0007*  ; Modinfo:
040000             0008*  ; 05/08/2022:	Added mos_feof
040000             0009*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040000             0010*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040000             0011*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040000             0012*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040000             0013*  ; 13/10/2022:	Added mos_oscli
040000             0014*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040000             0015*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040000             0016*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040000             0017*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040000             0018*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040000             0019*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040000             0020*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040000             0021*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040000             0022*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040000             0023*  ; 19/05/2023:	Added sysvar_scrMode
040000             0024*  ; 05/06/2023:	Added sysvar_rtcEnable
040000             0025*  ; 03/08/2023:	Added mos_setkbvector
040000             0026*  ; 10/08/2023:	Added mos_getkbmap
040000             0027*  ; 11/11/2023:	Added mos_i2c_open, mos_i2c_close, mos_i2c_write and mos_i2c_read
040000             0028*  ; 09/04/2024:   Adapter to ez80asm
040000             0029*  ; VDP control (VDU 23, 0, n)
040000             0030*  ;
040000             0031*  vdp_gp:			EQU 	80h
040000             0032*  vdp_keycode:		EQU 	81h
040000             0033*  vdp_cursor:		EQU	82h
040000             0034*  vdp_scrchar:		EQU	83h
040000             0035*  vdp_scrpixel:		EQU	84h
040000             0036*  vdp_audio:		EQU	85h
040000             0037*  vdp_mode:		EQU	86h
040000             0038*  vdp_rtc:		EQU	87h
040000             0039*  vdp_keystate:		EQU	88h
040000             0040*  vdp_logicalcoords:	EQU	C0h
040000             0041*  vdp_terminalmode:	EQU	FFh
040000             0042*  
040000             0043*  ; MOS high level functions
040000             0044*  ;
040000             0045*  mos_getkey:		EQU	00h
040000             0046*  mos_load:		EQU	01h
040000             0047*  mos_save:		EQU	02h
040000             0048*  mos_cd:			EQU	03h
040000             0049*  mos_dir:		EQU	04h
040000             0050*  mos_del:		EQU	05h
040000             0051*  mos_ren:		EQU	06h
040000             0052*  mos_mkdir:		EQU	07h
040000             0053*  mos_sysvars:		EQU	08h
040000             0054*  mos_editline:		EQU	09h
040000             0055*  mos_fopen:		EQU	0Ah
040000             0056*  mos_fclose:		EQU	0Bh
040000             0057*  mos_fgetc:		EQU	0Ch
040000             0058*  mos_fputc:		EQU	0Dh
040000             0059*  mos_feof:		EQU	0Eh
040000             0060*  mos_getError:		EQU	0Fh
040000             0061*  mos_oscli:		EQU	10h
040000             0062*  mos_copy:		EQU	11h
040000             0063*  mos_getrtc:		EQU	12h
040000             0064*  mos_setrtc:		EQU	13h
040000             0065*  mos_setintvector:	EQU	14h
040000             0066*  mos_uopen:		EQU	15h
040000             0067*  mos_uclose:		EQU	16h
040000             0068*  mos_ugetc:		EQU	17h
040000             0069*  mos_uputc:		EQU 	18h
040000             0070*  mos_getfil:		EQU	19h
040000             0071*  mos_fread:		EQU	1Ah
040000             0072*  mos_fwrite:		EQU	1Bh
040000             0073*  mos_flseek:		EQU	1Ch
040000             0074*  mos_setkbvector:	EQU	1Dh
040000             0075*  mos_getkbmap:		EQU	1Eh
040000             0076*  mos_i2c_open:		EQU	1Fh
040000             0077*  mos_i2c_close:		EQU	20h
040000             0078*  mos_i2c_write:		EQU	21h
040000             0079*  mos_i2c_read:		EQU	22h
040000             0080*  
040000             0081*  
040000             0082*  ; FatFS file access functions
040000             0083*  ;
040000             0084*  ffs_fopen:		EQU	80h
040000             0085*  ffs_fclose:		EQU	81h
040000             0086*  ffs_fread:		EQU	82h
040000             0087*  ffs_fwrite:		EQU	83h
040000             0088*  ffs_flseek:		EQU	84h
040000             0089*  ffs_ftruncate:		EQU	85h
040000             0090*  ffs_fsync:		EQU	86h
040000             0091*  ffs_fforward:		EQU	87h
040000             0092*  ffs_fexpand:		EQU	88h
040000             0093*  ffs_fgets:		EQU	89h
040000             0094*  ffs_fputc:		EQU	8Ah
040000             0095*  ffs_fputs:		EQU	8Bh
040000             0096*  ffs_fprintf:		EQU	8Ch
040000             0097*  ffs_ftell:		EQU	8Dh
040000             0098*  ffs_feof:		EQU	8Eh
040000             0099*  ffs_fsize:		EQU	8Fh
040000             0100*  ffs_ferror:		EQU	90h
040000             0101*  
040000             0102*  ; FatFS directory access functions
040000             0103*  ;
040000             0104*  ffs_dopen:		EQU	91h
040000             0105*  ffs_dclose:		EQU	92h
040000             0106*  ffs_dread:		EQU	93h
040000             0107*  ffs_dfindfirst:		EQU	94h
040000             0108*  ffs_dfindnext:		EQU	95h
040000             0109*  
040000             0110*  ; FatFS file and directory management functions
040000             0111*  ;
040000             0112*  ffs_stat:		EQU	96h
040000             0113*  ffs_unlink:		EQU	97h
040000             0114*  ffs_rename:		EQU	98h
040000             0115*  ffs_chmod:		EQU	99h
040000             0116*  ffs_utime:		EQU	9Ah
040000             0117*  ffs_mkdir:		EQU	9Bh
040000             0118*  ffs_chdir:		EQU	9Ch
040000             0119*  ffs_chdrive:		EQU	9Dh
040000             0120*  ffs_getcwd:		EQU	9Eh
040000             0121*  
040000             0122*  ; FatFS volume management and system configuration functions
040000             0123*  ;
040000             0124*  ffs_mount:		EQU	9Fh
040000             0125*  ffs_mkfs:		EQU	A0h
040000             0126*  ffs_fdisk:		EQU	A1h
040000             0127*  ffs_getfree:		EQU	A2h
040000             0128*  ffs_getlabel:		EQU	A3h
040000             0129*  ffs_setlabel:		EQU	A4h
040000             0130*  ffs_setcp:		EQU	A5h
040000             0131*  
040000             0132*  ; File access modes
040000             0133*  ;
040000             0134*  fa_read:		EQU	01h
040000             0135*  fa_write:		EQU	02h
040000             0136*  fa_open_existing:	EQU	00h
040000             0137*  fa_create_new:		EQU	04h
040000             0138*  fa_create_always:	EQU	08h
040000             0139*  fa_open_always:		EQU	10h
040000             0140*  fa_open_append:		EQU	30h
040000             0141*  
040000             0142*  ; System variable indexes for api_sysvars
040000             0143*  ; Index into _sysvars in globals.asm
040000             0144*  ;
040000             0145*  sysvar_time:		EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040000             0146*  sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indicate completion of VDP commands
040000             0147*  sysvar_keyascii:	EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040000             0148*  sysvar_keymods:		EQU	06h	; 1: Keycode modifiers
040000             0149*  sysvar_cursorX:		EQU	07h	; 1: Cursor X position
040000             0150*  sysvar_cursorY:		EQU	08h	; 1: Cursor Y position
040000             0151*  sysvar_scrchar:		EQU	09h	; 1: Character read from screen
040000             0152*  sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040000             0153*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040000             0154*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040000             0155*  sysvar_scrWidth:	EQU	0Fh	; 2: Screen width in pixels
040000             0156*  sysvar_scrHeight:	EQU	11h	; 2: Screen height in pixels
040000             0157*  sysvar_scrCols:		EQU	13h	; 1: Screen columns in characters
040000             0158*  sysvar_scrRows:		EQU	14h	; 1: Screen rows in characters
040000             0159*  sysvar_scrColours:	EQU	15h	; 1: Number of colours displayed
040000             0160*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040000             0161*  sysvar_vkeycode:	EQU	17h	; 1: Virtual key code from FabGL
040000             0162*  sysvar_vkeydown:	EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040000             0163*  sysvar_vkeycount:	EQU	19h	; 1: Incremented every time a key packet is received
040000             0164*  sysvar_rtc:		EQU	1Ah	; 6: Real time clock data
040000             0165*  sysvar_spare:		EQU	20h	; 2: Spare, previously used by rtc
040000             0166*  sysvar_keydelay:	EQU	22h	; 2: Keyboard repeat delay
040000             0167*  sysvar_keyrate:		EQU	24h	; 2: Keyboard repeat reat
040000             0168*  sysvar_keyled:		EQU	26h	; 1: Keyboard LED status
040000             0169*  sysvar_scrMode:		EQU	27h	; 1: Screen mode
040000             0170*  sysvar_rtcEnable:	EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040000             0171*  sysvar_mouseX:		EQU	29h	; 2: Mouse X position
040000             0172*  sysvar_mouseY:		EQU	2Bh	; 2: Mouse Y position
040000             0173*  sysvar_mouseButtons:	EQU	2Dh	; 1: Mouse button state
040000             0174*  sysvar_mouseWheel:	EQU	2Eh	; 1: Mouse wheel delta
040000             0175*  sysvar_mouseXDelta:	EQU	2Fh	; 2: Mouse X delta
040000             0176*  sysvar_mouseYDelta:	EQU	31h	; 2: Mouse Y delta
040000             0177*  
040000             0178*  ; Flags for the VPD protocol
040000             0179*  ;
040000             0180*  vdp_pflag_cursor:	EQU	00000001b
040000             0181*  vdp_pflag_scrchar:	EQU	00000010b
040000             0182*  vdp_pflag_point:	EQU	00000100b
040000             0183*  vdp_pflag_audio:	EQU	00001000b
040000             0184*  vdp_pflag_mode:		EQU	00010000b
040000             0185*  vdp_pflag_rtc:		EQU	00100000b
040000             0186*  vdp_pflag_mouse:	EQU	01000000b
040000             0187*  ; vdp_pflag_buffered:	EQU	10000000b
040000             0188*  
040000             0189*  ;
040000             0190*  ; FatFS structures
040000             0191*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040000             0192*  ;
040000             0193*  ; Object ID and allocation information (FFOBJID)
040000             0194*  ;
040000             0195*  ;FFOBJID	.STRUCT
040000             0196*  ;	fs:		DS	3	; Pointer to the hosting volume of this object
040000             0197*  ;	id:		DS	2	; Hosting volume mount ID
040000             0198*  ;	attr:		DS	1	; Object attribute;
040000             0199*  ;	stat:		DS	1	; Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040000             0200*  ;	sclust:		DS	4	; Object data start cluster (0:no cluster or root directory)
040000             0201*  ;	objsize:	DS	4	; Object size (valid when sclust != 0)
040000             0202*  ;FFOBJID_SIZE .ENDSTRUCT FFOBJID
040000             0203*  ;
040000             0204*  ; File object structure (FIL)
040000             0205*  ;
040000             0206*  ;FIL .STRUCT
040000             0207*  ;	obj:		.TAG	FFOBJID	; Object identifier
040000             0208*  ;	flag:		DS	1	; File status flags
040000             0209*  ;	err:		DS	1	; Abort flag (error code)
040000             0210*  ;	fptr:		DS	4	; File read/write pointer (Zeroed on file open)
040000             0211*  ;	clust:		DS	4	; Current cluster of fpter (invalid when fptr is 0)
040000             0212*  ;	sect:		DS	4	; Sector number appearing in buf[] (0:invalid)
040000             0213*  ;	dir_sect:	DS	4	; Sector number containing the directory entry
040000             0214*  ;	dir_ptr:	DS	3	; Pointer to the directory entry in the win[]
040000             0215*  ;FIL_SIZE .ENDSTRUCT FIL
040000             0216*  ;
040000             0217*  ; Directory object structure (DIR)
040000             0218*  ;
040000             0219*  ;DIR .STRUCT
040000             0220*  ;	obj:		.TAG	FFOBJID	; Object identifier;
040000             0221*  ;	dptr:		DS	4	; Current read/write offset
040000             0222*  ;	clust:		DS	4	; Current cluster
040000             0223*  ;	sect:		DS	4	; Current sector (0:Read operation has terminated)
040000             0224*  ;	dir:		DS	3	; Pointer to the directory item in the win[]
040000             0225*  ;	fn:		DS	12	; SFN (in/out) {body[8],ext[3],status[1]}
040000             0226*  ;	blk_ofs:	DS	4	; Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040000             0227*  ;DIR_SIZE .ENDSTRUCT DIR
040000             0228*  ;
040000             0229*  ; File information structure (FILINFO)
040000             0230*  ;
040000             0231*  ;FILINFO .STRUCT
040000             0232*  ;	fsize:		DS 	4	; File size
040000             0233*  ;	fdate:		DS	2	; Modified date;
040000             0234*  ;	ftime:		DS	2	; Modified time
040000             0235*  ;	fattrib:	DS	1	; File attribute
040000             0236*  ;	altname:	DS	13	; Alternative file name
040000             0237*  ;	fname:		DS	256	; Primary file name
040000             0238*  ;FILINFO_SIZE .ENDSTRUCT FILINFO
040000             0239*  
040000             0240*  ;
040000             0241*  ; Macro for calling the API
040000             0242*  ; Parameters:
040000             0243*  ; - function: One of the function numbers listed above
040000             0244*  ;
040000             0245*  			MACRO	MOSCALL function
040000             0246*  			LD	A, function
040000             0247*  			RST.L	08h
040000             0248*  			ENDMACRO
040000             0008       ORG 0x0B0000 ; Is a moslet
0B0000             0009   
0B0000             0010       MACRO PROGNAME
0B0000             0011       ASCIZ "flower.bin"
0B0000             0012       ENDMACRO
0B0000             0013   
0B0000             0014   ; STANDARD MOSLET INCLUDES
0B0000             0015       include "init.inc"
0B0000             0001*  ;
0B0000             0002*  ; Title:	Copy - Initialisation Code
0B0000             0003*  ; Author:	Dean Belfield, Lennart Benschop
0B0000             0004*  ; Created:	06/11/2022
0B0000             0005*  ; Last Updated:	26/12/2022
0B0000             0006*  ;
0B0000             0007*  ; Modinfo:
0B0000             0008*  ; 17/12/2022:	Added parameter processing
0B0000             0009*  ; 26/12/2022:   Adapted to Copy program, use LEA instead of 3x INC IX, Save/restore MB
0B0000             0010*  ; Changed:      08/04/2924 adapt to ez80asm
0B0000             0011*  
0B0000             0012*  
0B0000             0013*  argv_ptrs_max:		EQU	16			; Maximum number of arguments allowed in argv
0B0000             0014*  
0B0000             0015*  ;
0B0000             0016*  ; Start in ADL mode
0B0000             0017*  ;
0B0000 C3 45 00 0B 0018*  			JP	_start			; Jump to start
0B0004             0019*  ;
0B0004             0020*  ; The header stuff is from byte 64 onwards
0B0004             0021*  ;
0B0004             0022*  
0B0004             0023*  _exec_name:
0B0004             0024*  			PROGNAME			; The executable name, only used in argv
0B0004 66 6C 6F 77 0001*M     ASCIZ "flower.bin"
       65 72 2E 62 
       69 6E 00    
0B000F             0025*  
0B000F FF FF FF FF 0026*  			ALIGN	64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF          
0B0040             0027*  
0B0040 4D 4F 53    0028*  			DB	"MOS"			; Flag for MOS - to confirm this is a valid MOS command
0B0043 00          0029*  			DB	00h			; MOS header version 0
0B0044 01          0030*  			DB	01h			; Flag for run mode (0: Z80, 1: ADL)
0B0045             0031*  ;
0B0045             0032*  ; And the code follows on immediately after the header
0B0045             0033*  ;
0B0045 F5          0034*  _start:			PUSH	AF			; Preserve the registers
0B0046 C5          0035*  			PUSH	BC
0B0047 D5          0036*  			PUSH	DE
0B0048 DD E5       0037*  			PUSH	IX
0B004A FD E5       0038*  			PUSH	IY
0B004C ED 6E       0039*  			LD	A, MB			; Save MB
0B004E F5          0040*  			PUSH 	AF
0B004F AF          0041*  			XOR 	A
0B0050 ED 6D       0042*  			LD 	MB, A                   ; Clear to zero so MOS API calls know how to use 24-bit addresses.
0B0052             0043*  
0B0052 DD 21 B9 00 0044*  			LD	IX, argv_ptrs		; The argv array pointer address
       0B          
0B0057 DD E5       0045*  			PUSH	IX
0B0059 CD 70 00 0B 0046*  			CALL	_parse_params		; Parse the parameters
0B005D DD E1       0047*  			POP	IX			; IX: argv
0B005F 06 00       0048*  			LD	B, 0			;  C: argc
0B0061 CD 58 1A 0B 0049*  			CALL	_main			; Start user code
0B0065             0050*  
0B0065 F1          0051*  			POP 	AF
0B0066 ED 6D       0052*  			LD	MB, A
0B0068 FD E1       0053*  			POP	IY			; Restore registers
0B006A DD E1       0054*  			POP	IX
0B006C D1          0055*  			POP	DE
0B006D C1          0056*  			POP	BC
0B006E F1          0057*  			POP	AF
0B006F C9          0058*  			RET
0B0070             0059*  
0B0070             0060*  ; Parse the parameter string into a C array
0B0070             0061*  ; Parameters
0B0070             0062*  ; - HL: Address of parameter string
0B0070             0063*  ; - IX: Address for array pointer storage
0B0070             0064*  ; Returns:
0B0070             0065*  ; -  C: Number of parameters parsed
0B0070             0066*  ;
0B0070 01 04 00 0B 0067*  _parse_params:		LD	BC, _exec_name
0B0074 DD 0F 00    0068*  			LD	(IX+0), BC		; ARGV[0] = the executable name
0B0077 ED 32 03    0069*  			LEA     IX, IX+3
0B007A CD B2 00 0B 0070*  			CALL	_skip_spaces		; Skip HL past any leading spaces
0B007E             0071*  ;
0B007E 01 01 00 00 0072*  			LD	BC, 1			; C: ARGC = 1 - also clears out top 16 bits of BCU
0B0082 06 0F       0073*  			LD	B, argv_ptrs_max - 1	; B: Maximum number of argv_ptrs
0B0084             0074*  ;
0B0084             0075*  _parse_params_1:
0B0084 C5          0076*  			PUSH	BC			; Stack ARGC
0B0085 E5          0077*  			PUSH	HL			; Stack start address of token
0B0086 CD A3 00 0B 0078*  			CALL	_get_token		; Get the next token
0B008A 79          0079*  			LD	A, C			; A: Length of the token in characters
0B008B D1          0080*  			POP	DE			; Start address of token (was in HL)
0B008C C1          0081*  			POP	BC			; ARGC
0B008D B7          0082*  			OR	A			; Check for A=0 (no token found) OR at end of string
0B008E C8          0083*  			RET	Z
0B008F             0084*  ;
0B008F DD 1F 00    0085*  			LD	(IX+0), DE		; Store the pointer to the token
0B0092 E5          0086*  			PUSH	HL			; DE=HL
0B0093 D1          0087*  			POP	DE
0B0094 CD B2 00 0B 0088*  			CALL	_skip_spaces		; And skip HL past any spaces onto the next character
0B0098 AF          0089*  			XOR	A
0B0099 12          0090*  			LD	(DE), A			; Zero-terminate the token
0B009A ED 32 03    0091*  			LEA  	IX, IX+3			; Advance to next pointer position
0B009D 0C          0092*  			INC	C			; Increment ARGC
0B009E 79          0093*  			LD	A, C			; Check for C >= A
0B009F B8          0094*  			CP	B
0B00A0 38 E2       0095*  			JR	C, _parse_params_1	; And loop
0B00A2 C9          0096*  			RET
0B00A3             0097*  
0B00A3             0098*  ; Get the next token
0B00A3             0099*  ; Parameters:
0B00A3             0100*  ; - HL: Address of parameter string
0B00A3             0101*  ; Returns:
0B00A3             0102*  ; - HL: Address of first character after token
0B00A3             0103*  ; -  C: Length of token (in characters)
0B00A3             0104*  ;
0B00A3 0E 00       0105*  _get_token:		LD	C, 0			; Initialise length
0B00A5 7E          0106*  @@:			LD	A, (HL)			; Get the character from the parameter string
0B00A6 B7          0107*  			OR	A			; Exit if 0 (end of parameter string in MOS)
0B00A7 C8          0108*  			RET 	Z
0B00A8 FE 0D       0109*  			CP	13			; Exit if CR (end of parameter string in BBC BASIC)
0B00AA C8          0110*  			RET	Z
0B00AB FE 20       0111*  			CP	' '			; Exit if space (end of token)
0B00AD C8          0112*  			RET	Z
0B00AE 23          0113*  			INC	HL			; Advance to next character
0B00AF 0C          0114*  			INC 	C			; Increment length
0B00B0 18 F3       0115*  			JR	@B
0B00B2             0116*  
0B00B2             0117*  ; Skip spaces in the parameter string
0B00B2             0118*  ; Parameters:
0B00B2             0119*  ; - HL: Address of parameter string
0B00B2             0120*  ; Returns:
0B00B2             0121*  ; - HL: Address of next none-space character
0B00B2             0122*  ;    F: Z if at end of string, otherwise NZ if there are more tokens to be parsed
0B00B2             0123*  ;
0B00B2 7E          0124*  _skip_spaces:		LD	A, (HL)			; Get the character from the parameter string
0B00B3 FE 20       0125*  			CP	' '			; Exit if not space
0B00B5 C0          0126*  			RET	NZ
0B00B6 23          0127*  			INC	HL			; Advance to next character
0B00B7 18 F9       0128*  			JR	_skip_spaces		; Increment length
0B00B9             0129*  
0B00B9             0130*  ; Storage for the argv array pointers
0B00B9             0131*  ;
0B00B9 00 00 00 00 0132*  argv_ptrs:		BLKP	argv_ptrs_max, 0
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0B00E9             0016       include "parse.inc"
0B00E9             0001*  ;
0B00E9             0002*  ; Title:	Number Parsing Functions
0B00E9             0003*  ; Author:	Dean Belfield
0B00E9             0004*  ; Created:	15/11/2022
0B00E9             0005*  ; Last Updated:	15/11/2022
0B00E9             0006*  ; Last Updated: 29/12/2022 Lennart Benchop adapt for 24-bit mode.
0B00E9             0007*  ; Modinfo:
0B00E9             0008*  ; 2024/04/08    Adapt for ez80asm
0B00E9             0009*  
0B00E9             0010*  ; Read a number and convert to binary
0B00E9             0011*  ; If prefixed with &, will read as hex, otherwise decimal
0B00E9             0012*  ;   Inputs: HL: Pointer in string buffer
0B00E9             0013*  ;  Outputs: HL: Updated text pointer
0B00E9             0014*  ;           DE: Value
0B00E9             0015*  ;            A: Terminator (spaces skipped)
0B00E9             0016*  ;            F: Carry set if valid number, otherwise reset
0B00E9             0017*  ; Destroys: A,D,E,H,L,F
0B00E9             0018*  ;
0B00E9 11 00 00 00 0019*  ASC_TO_NUMBER:		LD		DE, 0			; Initialise DE
0B00ED CD B2 00 0B 0020*  			CALL		_skip_spaces		; Skip whitespace
0B00F1 7E          0021*  			LD		A, (HL)			; Read first character
0B00F2 B7          0022*  			OR		A			; Check for end of string
0B00F3 C8          0023*  			RET		Z			; Return with no carry if not
0B00F4 C5          0024*  			PUSH		BC			; Preserve BC
0B00F5 FE 26       0025*  			CP		'&'			; Is it prefixed with '&' (HEX number)?
0B00F7 20 23       0026*  			JR		NZ, ASC_TO_NUMBER3	; Jump to decimal parser if not
0B00F9 23          0027*  			INC		HL			; Otherwise fall through to ASC_TO_HEX
0B00FA             0028*  ;
0B00FA 7E          0029*  ASC_TO_NUMBER1:		LD		A, (HL)			; Fetch the character
0B00FB CD 3D 01 0B 0030*  			CALL   	 	UPPRC			; Convert to uppercase
0B00FF D6 30       0031*  			SUB		'0'			; Normalise to 0
0B0101 38 37       0032*  			JR 		C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0B0103 FE 0A       0033*  			CP 		10			; Check if >= 10
0B0105 38 06       0034*  			JR 		C, ASC_TO_NUMBER2	; No, so skip next bit
0B0107 D6 07       0035*  			SUB 		7			; Adjust ASCII A-F to nibble
0B0109 FE 10       0036*  			CP 		16			; Check for > F
0B010B 30 2D       0037*  			JR 		NC, ASC_TO_NUMBER4	; Return if out of range
0B010D             0038*  ;
0B010D E5          0039*  ASC_TO_NUMBER2:		PUSH		HL			; Stack HL
0B010E D5          0040*  			PUSH		DE			; LD HL, DE
0B010F E1          0041*  			POP		HL
0B0110 29          0042*  			ADD		HL, HL
0B0111 29          0043*  			ADD		HL, HL
0B0112 29          0044*  			ADD		HL, HL
0B0113 29          0045*  			ADD		HL, HL
0B0114 E5          0046*  			PUSH		HL			; LD DE, HL
0B0115 D1          0047*  			POP		DE
0B0116 E1          0048*  			POP		HL			; Restore HL
0B0117 B3          0049*  			OR      	E			; OR the new digit in to the least significant nibble
0B0118 5F          0050*  			LD      	E, A
0B0119             0051*  ;
0B0119 23          0052*  			INC		HL			; Onto the next character
0B011A 18 DE       0053*  			JR      	ASC_TO_NUMBER1		; And loop
0B011C             0054*  ;
0B011C 7E          0055*  ASC_TO_NUMBER3:		LD		A, (HL)
0B011D D6 30       0056*  			SUB		'0'			; Normalise to 0
0B011F 38 19       0057*  			JR		C, ASC_TO_NUMBER4	; Return if < ASCII '0'
0B0121 FE 0A       0058*  			CP		10			; Check if >= 10
0B0123 30 15       0059*  			JR		NC, ASC_TO_NUMBER4	; Return if >= 10
0B0125             0060*  ;
0B0125 E5          0061*  			PUSH		HL			; Stack HL
0B0126 D5          0062*  			PUSH		DE			; LD HL, DE
0B0127 E1          0063*  			POP		HL
0B0128 E5          0064*  			PUSH		HL			; LD BC, HL
0B0129 C1          0065*  			POP		BC
0B012A 29          0066*  			ADD		HL, HL 			; x 2
0B012B 29          0067*  			ADD		HL, HL 			; x 4
0B012C 09          0068*  			ADD		HL, BC 			; x 5
0B012D 29          0069*  			ADD		HL, HL 			; x 10
0B012E 01 00 00 00 0070*  			LD		BC, 0
0B0132 4F          0071*  			LD 		C, A			; LD BCU, A
0B0133 09          0072*  			ADD		HL, BC			; Add BCU to HL
0B0134 E5          0073*  			PUSH		HL			; LD DE, HL
0B0135 D1          0074*  			POP		DE
0B0136 E1          0075*  			POP		HL			; Restore HL
0B0137             0076*  ;
0B0137 23          0077*  			INC		HL
0B0138 18 E2       0078*  			JR		ASC_TO_NUMBER3
0B013A C1          0079*  ASC_TO_NUMBER4:		POP		BC
0B013B 37          0080*  			SCF					; We have a valid number so set carry
0B013C C9          0081*  			RET
0B013D             0082*  
0B013D             0083*  
0B013D             0084*  ; Convert a character to upper case
0B013D             0085*  ;  A: Character to convert
0B013D             0086*  ;
0B013D E6 7F       0087*  UPPRC:  		AND     	7FH
0B013F FE 60       0088*  			CP      	'`'
0B0141 D8          0089*  			RET     	C
0B0142 E6 5F       0090*  			AND     	5FH			; Convert to upper case
0B0144 C9          0091*  			RET
0B0145             0092*  
0B0145             0093*  
0B0145             0094*  ;------------------------------------------------------------------------
0B0145             0095*  ; Read a number and convert to binary (decimal only)
0B0145             0096*  ; Inputs: hl: Pointer in string buffer
0B0145             0097*  ; Outputs: hl: Updated text pointer
0B0145             0098*  ;         de: Value
0B0145             0099*  ;         a: Terminator (spaces skipped)
0B0145             0100*  ;         f: Carry set if valid number, otherwise reset
0B0145             0101*  ; Destroys: a, d, e, h, l, f
0B0145             0102*  ;------------------------------------------------------------------------
0B0145             0103*  asc_to_s24:
0B0145 3E 01       0104*      ld a,1 ; set sign flag
0B0147 32 93 01 0B 0105*      ld (@sign),a ; store sign flag
0B014B             0106*  
0B014B 11 00 00 00 0107*      ld de, 0 ; initialise de
0B014F             0108*      ; call _skip_spaces ; skip whitespace
0B014F             0109*  
0B014F 7E          0110*      ld a, (hl) ; read first character
0B0150 B7          0111*      or a ; check for end of string
0B0151 C8          0112*      ret z ; return with no carry if not
0B0152             0113*  
0B0152 C5          0114*      push bc ; preserve bc
0B0153             0115*  
0B0153 FE 2D       0116*      cp '-' ; check for negative number
0B0155 C2 5F 01 0B 0117*      jp nz,@loop ; number is positive, nothing more to do
0B0159 AF          0118*      xor a ; sign flag to zero
0B015A 32 93 01 0B 0119*      ld (@sign),a ; store sign flag
0B015E 23          0120*      inc hl ; skip '-'
0B015F             0121*  
0B015F             0122*  @loop:
0B015F 7E          0123*      ld a, (hl)
0B0160 D6 30       0124*      sub '0' ; normalise to 0
0B0162 38 19       0125*      jr c, @integer_end ; return if < ascii '0'
0B0164 FE 0A       0126*      cp 10 ; check if >= 10
0B0166 30 15       0127*      jr nc, @integer_end ; return if >= 10
0B0168 E5          0128*      push hl ; stack hl
0B0169 D5          0129*      push de ; ld hl, de
0B016A E1          0130*      pop hl
0B016B E5          0131*      push hl ; ld bc, hl
0B016C C1          0132*      pop bc
0B016D 29          0133*      add hl, hl ; x 2
0B016E 29          0134*      add hl, hl ; x 4
0B016F 09          0135*      add hl, bc ; x 5
0B0170 29          0136*      add hl, hl ; x 10
0B0171 01 00 00 00 0137*      ld bc, 0
0B0175 4F          0138*      ld c, a ; ld bcu, a
0B0176 09          0139*      add hl, bc ; add bcu to hl
0B0177 E5          0140*      push hl ; ld de, hl
0B0178 D1          0141*      pop de
0B0179 E1          0142*      pop hl ; restore hl
0B017A 23          0143*      inc hl
0B017B 18 E2       0144*      jr @loop
0B017D             0145*  
0B017D             0146*  @integer_end:
0B017D C1          0147*      pop bc ; send bc back how she came in
0B017E 3A 93 01 0B 0148*      ld a, (@sign) ; get sign flag
0B0182 3D          0149*      dec a ; check if negative
0B0183 F2 91 01 0B 0150*      jp p,@pos ; positive number
0B0187             0151*  
0B0187             0152*  ; Negate de
0B0187 E5          0153*      push hl ; save text pointer
0B0188 21 00 00 00 0154*      ld hl, 0
0B018C AF          0155*      xor a ; clear carry
0B018D ED 52       0156*      sbc hl, de ; subtract DE from HL
0B018F EB          0157*      ex de, hl ; DE = 0-HL
0B0190 E1          0158*      pop hl ; restore text pointer
0B0191             0159*  
0B0191             0160*  @pos:
0B0191 37          0161*      scf ; we have a valid number so set carry
0B0192 C9          0162*      ret
0B0193             0163*  
0B0193 00          0164*  @sign: db 0 ; sign flag buffer
0B0194             0165*  
0B0194             0166*  
0B0194             0167*  ;------------------------------------------------------------------------
0B0194             0168*  ; Read a number and convert to binary (decimal only)
0B0194             0169*  ; Inputs: hl: Pointer in string buffer
0B0194             0170*  ; Outputs: hl: Updated text pointer
0B0194             0171*  ;         de: Value
0B0194             0172*  ;         a: Terminator (spaces skipped)
0B0194             0173*  ;         f: Carry set if valid number, otherwise reset
0B0194             0174*  ; Destroys: a, d, e, h, l, f
0B0194             0175*  ;------------------------------------------------------------------------
0B0194             0176*  asc_to_s168:
0B0194 3E 01       0177*      ld a,1 ; set sign flag
0B0196 32 53 02 0B 0178*      ld (@sign),a ; store sign flag
0B019A             0179*  
0B019A 11 00 00 00 0180*      ld de, 0 ; initialise de
0B019E ED 53 4B 02 0181*      ld (@result), de ; clear low bytes of result buffer
       0B          
0B01A3 ED 53 4F 02 0182*      ld (@scratch), de ; clear low bytes of scratch buffer
       0B          
0B01A8             0183*  
0B01A8             0184*      ; call _skip_spaces ; skip whitespace
0B01A8             0185*  
0B01A8 7E          0186*      ld a, (hl) ; read first character
0B01A9 B7          0187*      or a ; check for end of string
0B01AA C8          0188*      ret z ; return with no carry if not
0B01AB             0189*  
0B01AB C5          0190*      push bc ; preserve bc
0B01AC             0191*  
0B01AC FE 2D       0192*      cp '-' ; check for negative number
0B01AE C2 B8 01 0B 0193*      jp nz,@loop ; number is positive, nothing more to do
0B01B2 AF          0194*      xor a ; sign flag to zero
0B01B3 32 53 02 0B 0195*      ld (@sign),a ; store sign flag
0B01B7 23          0196*      inc hl ; skip '-'
0B01B8             0197*  
0B01B8             0198*  @loop:
0B01B8 7E          0199*      ld a, (hl)
0B01B9             0200*  
0B01B9             0201*  ; chcek for decimal point
0B01B9 FE 2E       0202*      cp '.' ; check for decimal point
0B01BB CA FC 01 0B 0203*      jp z,@fractional_start ; jump to fractional part
0B01BF             0204*  
0B01BF             0205*  ; process integer part
0B01BF D6 30       0206*      sub '0' ; normalise to 0
0B01C1 38 19       0207*      jr c, @integer_end ; return if < ascii '0'
0B01C3 FE 0A       0208*      cp 10 ; check if >= 10
0B01C5 30 15       0209*      jr nc, @integer_end ; return if >= 10
0B01C7 E5          0210*      push hl ; stack hl
0B01C8 D5          0211*      push de ; ld hl, de
0B01C9 E1          0212*      pop hl
0B01CA E5          0213*      push hl ; ld bc, hl
0B01CB C1          0214*      pop bc
0B01CC 29          0215*      add hl, hl ; x 2
0B01CD 29          0216*      add hl, hl ; x 4
0B01CE 09          0217*      add hl, bc ; x 5
0B01CF 29          0218*      add hl, hl ; x 10
0B01D0 01 00 00 00 0219*      ld bc, 0
0B01D4 4F          0220*      ld c, a ; ld bcu, a
0B01D5 09          0221*      add hl, bc ; add bcu to hl
0B01D6 E5          0222*      push hl ; ld de, hl
0B01D7 D1          0223*      pop de
0B01D8 E1          0224*      pop hl ; restore hl
0B01D9 23          0225*      inc hl
0B01DA 18 DC       0226*      jr @loop
0B01DC             0227*  
0B01DC             0228*  @integer_end:
0B01DC ED 53 4C 02 0229*      ld (@result+1), de      ; Store integer part in result buffer (shifted up one byte)
       0B          
0B01E1             0230*  
0B01E1             0231*  @end:
0B01E1 C1          0232*      pop bc ; send bc back how she came in
0B01E2 ED 5B 4B 02 0233*      ld de,(@result) ; will contain shifted integer part combined with any fractional value
       0B          
0B01E7 3A 53 02 0B 0234*      ld a, (@sign) ; get sign flag
0B01EB 3D          0235*      dec a ; check if negative
0B01EC F2 FA 01 0B 0236*      jp p,@pos ; positive number
0B01F0             0237*  
0B01F0             0238*  ; Negate de
0B01F0 E5          0239*      push hl ; save text pointer
0B01F1 21 00 00 00 0240*      ld hl, 0
0B01F5 AF          0241*      xor a ; clear carry
0B01F6 ED 52       0242*      sbc hl, de ; subtract DE from HL
0B01F8 EB          0243*      ex de, hl ; DE = 0-HL
0B01F9 E1          0244*      pop hl ; restore text pointer
0B01FA             0245*  
0B01FA             0246*  @pos:
0B01FA 37          0247*      scf ; we have a valid number so set carry
0B01FB C9          0248*      ret
0B01FC             0249*  
0B01FC             0250*  @fractional_start:
0B01FC DD E5       0251*      push ix                    ; preserve ix
0B01FE ED 53 4C 02 0252*      ld (@result+1), de         ; Store integer part in result buffer (shifted up one byte)
       0B          
0B0203 06 03       0253*      ld b, 3                    ; Set loop counter to 3 for up to three fractional digits
0B0205 11 00 00 00 0254*      ld de, 0                   ; Initialize DE as the fractional accumulator
0B0209 DD 21 54 02 0255*      ld ix, powers_of_10        ; Point IX to the lookup table for the scaling factor based on digits
       0B          
0B020E 23          0256*      inc hl                     ; Skip decimal point
0B020F             0257*  
0B020F             0258*  @fractional_loop:
0B020F 7E          0259*      ld a, (hl)                 ; Load next character
0B0210 D6 30       0260*      sub '0'                    ; Normalize ASCII to decimal
0B0212 38 1C       0261*      jr c, @end_fraction        ; Exit if < '0'
0B0214 FE 0A       0262*      cp 10
0B0216 30 18       0263*      jr nc, @end_fraction       ; Exit if >= 10
0B0218             0264*  
0B0218             0265*      ; Multiply the current fractional accumulator by 10
0B0218 E5          0266*      push hl                    ; Save char pointer
0B0219 F5          0267*      push af                    ; Save the digit
0B021A EB          0268*      ex de, hl
0B021B E5          0269*      push hl
0B021C 29          0270*      add hl,hl ; * 2
0B021D 29          0271*      add hl,hl ; * 4
0B021E D1          0272*      pop de
0B021F 19          0273*      add hl,de ; * 5
0B0220 29          0274*      add hl,hl ; * 10
0B0221 11 00 00 00 0275*      ld de, 0                   ; Clear DEU
0B0225 F1          0276*      pop af                     ; Restore the current digit
0B0226 5F          0277*      ld e, a                    ; Load the digit into E
0B0227 19          0278*      add hl, de                 ; Add the digit to the accumulator
0B0228 EB          0279*      ex de, hl                  ; Result back to DE
0B0229 ED 32 03    0280*      lea ix,ix+3                ; Advance IX to the next scaling factor
0B022C E1          0281*      pop hl                     ; Restore char pointer
0B022D 23          0282*      inc hl                     ; Move to the next character
0B022E 10 DF       0283*      djnz @fractional_loop      ; Loop if more digits to process
0B0230             0284*  
0B0230             0285*  @end_fraction:
0B0230             0286*  ; Final scaling based on number of fractional digits processed
0B0230 ED 53 50 02 0287*      ld (@scratch+1), de          ; Shift fractional part up a byte
       0B          
0B0235 2A 4F 02 0B 0288*      ld hl,(@scratch)             ; Load the shifted fractional part into HL
0B0239             0289*  
0B0239 DD 17 00    0290*      ld de, (ix)                ; Load final scaling factor from IX based on digit count
0B023C CD 47 09 0B 0291*      call udiv24                ; Perform 24-bit division to scale down
0B0240 7B          0292*      ld a, e                    ; Load the low byte (8-bit fractional part) into A
0B0241 32 4B 02 0B 0293*      ld (@result), a            ; Store fractional part in result buffer
0B0245 DD E1       0294*      pop ix                     ; Restore ix
0B0247 C3 E1 01 0B 0295*      jp @end                    ; Final sign check and flag setup
0B024B             0296*  
0B024B             0297*  @result: ds 4                  ; 32-bit result buffer to shift integer part up one byte
0B024F             0298*  @scratch: ds 4                 ; 32-bit scratch buffer for intermediate calculations
0B0253 00          0299*  @sign: db 0                    ; Sign flag buffer
0B0254             0300*  
0B0254             0301*  powers_of_10:
0B0254 01 00 00    0302*      dl 1                       ; 10^0
0B0257 0A 00 00    0303*      dl 10                      ; 10^1
0B025A 64 00 00    0304*      dl 100                     ; 10^2
0B025D E8 03 00    0305*      dl 1000                    ; 10^3
0B0260 10 27 00    0306*      dl 10000                   ; 10^4
0B0263             0017   
0B0263             0018   ; API INCLUDES
0B0263             0019       include "functions.inc"
0B0263             0001*      MACRO printChar char
0B0263             0002*          LD A, char
0B0263             0003*          RST.LIL 10h
0B0263             0004*      ENDMACRO
0B0263             0005*  
0B0263             0006*  ; test the sign of HL
0B0263             0007*  ; inputs: HL obviously
0B0263             0008*  ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
0B0263             0009*  ; destroys: flags
0B0263             0010*      MACRO sign_hlu
0B0263             0011*          add hl,de
0B0263             0012*          or a
0B0263             0013*          sbc hl,de
0B0263             0014*      ENDMACRO
0B0263             0015*  
0B0263             0016*  ; Simulated call to subroutine at HL
0B0263             0017*  ; inputs: HL pointing to the subroutine address plus whatever the called function expects
0B0263             0018*  ; outputs: whatever the subroutine does, including HL and BC
0B0263             0019*  ; destroys: only what the subroutine does, but always BC
0B0263             0020*      MACRO callHL
0B0263             0021*          ld bc,$+7     ; Address of first instruction after the jump
0B0263             0022*          push bc       ; which constitutes the return address
0B0263             0023*          jp   (hl)     ; Jump to the address in HL
0B0263             0024*      ENDMACRO
0B0263             0025*  
0B0263             0026*  ; Simulated call to subroutine at IX
0B0263             0027*  ; inputs: IX pointing to the subroutine address plus whatever the called function expects
0B0263             0028*  ; outputs: whatever the subroutine does, including IX and BC
0B0263             0029*  ; destroys: only what the subroutine does, but always BC
0B0263             0030*      MACRO callIX
0B0263             0031*          ld bc,$+7     ; Address of first instruction after the jump
0B0263             0032*          push bc       ; which constitutes the return address
0B0263             0033*          jp   (ix)     ; Jump to the address in IX
0B0263             0034*      ENDMACRO
0B0263             0035*  
0B0263             0036*  ; Simulated call to soubroutinte at IY
0B0263             0037*  ; inputs: IY pointing to the subroutine address plus whatever the called function expects
0B0263             0038*  ; outputs: whatever the subroutine does, including IY and BC
0B0263             0039*  ; destroys: only what the subroutine does, but always BC
0B0263             0040*      MACRO callIY
0B0263             0041*          ld bc,$+7     ; Address of first instruction after the jump
0B0263             0042*          push bc       ; which constitutes the return address
0B0263             0043*          jp   (iy)     ; Jump to the address in IY
0B0263             0044*      ENDMACRO
0B0263             0045*  
0B0263             0046*  ; put the value in HLU into the accumulator
0B0263             0047*  ; destroys: af
0B0263             0048*      MACRO HLU_TO_A
0B0263             0049*          push hl ; 4 cycles
0B0263             0050*          inc sp ; 1 cycle
0B0263             0051*          pop af  ; 4 cycles
0B0263             0052*          dec sp ; 1 cycle
0B0263             0053*                 ; 10 cycles total
0B0263             0054*      ENDMACRO
0B0263             0055*  
0B0263             0056*  A_TO_HLU:
0B0263             0057*      ; call is 7 cycles
0B0263 22 70 02 0B 0058*      ld (@scratch),hl ; 7 cycles
0B0267 32 72 02 0B 0059*      ld (@scratch+2),a ; 5 cycles
0B026B 2A 70 02 0B 0060*      ld hl,(@scratch) ; 7 cycles
0B026F C9          0061*      ret ; 6 cycles
0B0270             0062*          ; 25 cycles total
0B0270 00 00 00    0063*  @scratch: dl 0
0B0273             0064*  
0B0273             0065*      ; TODO: implement this
0B0273             0066*      ; MACRO A_TO_HLU
0B0273             0067*      ;     push.s af
0B0273             0068*      ;     inc sp
0B0273             0069*      ;     push.s hl
0B0273             0070*      ;     pop hl
0B0273             0071*      ;     inc sp
0B0273             0072*      ;     inc sp
0B0273             0073*      ; ENDMACRO
0B0273             0074*  
0B0273             0075*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
0B0273             0076*  ; Print a zero-terminated string
0B0273             0077*  ; HL: Pointer to string
0B0273             0078*  printString:
0B0273 C5          0079*  	PUSH	BC
0B0274 01 00 00 00 0080*  	LD		BC,0
0B0278 3E 00       0081*  	LD 	 	A,0
0B027A 5B DF       0082*  	RST.LIL 18h
0B027C C1          0083*  	POP		BC
0B027D C9          0084*  	RET
0B027E             0085*  ; print a VDU sequence
0B027E             0086*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
0B027E             0087*  sendVDUsequence:
0B027E C5          0088*  	PUSH	BC
0B027F 01 00 00 00 0089*  	LD		BC, 0
0B0283 4E          0090*  	LD		C, (HL)
0B0284 5B DF       0091*  	RST.LIL	18h
0B0286 C1          0092*  	POP		BC
0B0287 C9          0093*  	RET
0B0288             0094*  ; Print Newline sequence to VDP
0B0288             0095*  printNewLine:
0B0288 F5          0096*      push af ; for some reason rst.lil 10h sets carry flag
0B0289 3E 0D       0097*  	LD	A, '\r'
0B028B 5B D7       0098*  	RST.LIL 10h
0B028D 3E 0A       0099*  	LD	A, '\n'
0B028F 5B D7       0100*  	RST.LIL 10h
0B0291 F1          0101*      pop af
0B0292 C9          0102*  	RET
0B0293             0103*  
0B0293             0104*  ; Print a 24-bit HEX number
0B0293             0105*  ; HLU: Number to print
0B0293             0106*  printHex24:
0B0293             0107*  	; PUSH	HL      ; 4 cycles
0B0293             0108*  	; LD		HL, 2   ; 4 cycles
0B0293             0109*  	; ADD		HL, SP  ; 1 cycle
0B0293             0110*  	; LD		A, (HL) ; 2 cycles
0B0293             0111*  	; POP		HL      ; 4 cycles
0B0293             0112*      ;                 ; 15 cycles total
0B0293 E5          0113*      push hl ; 4 cycles
0B0294 33          0114*      inc sp ; 1 cycle
0B0295 F1          0115*      pop af  ; 4 cycles
0B0296 3B          0116*      dec sp ; 1 cycle
0B0297             0117*              ; 10 cycles total
0B0297 CD A1 02 0B 0118*  	CALL	printHex8
0B029B             0119*  ; Print a 16-bit HEX number
0B029B             0120*  ; HL: Number to print
0B029B             0121*  printHex16:
0B029B 7C          0122*  	LD		A,H
0B029C CD A1 02 0B 0123*  	CALL	printHex8
0B02A0 7D          0124*  	LD		A,L
0B02A1             0125*  ; Print an 8-bit HEX number
0B02A1             0126*  ; A: Number to print
0B02A1             0127*  printHex8:
0B02A1 4F          0128*  	LD		C,A
0B02A2 1F          0129*  	RRA
0B02A3 1F          0130*  	RRA
0B02A4 1F          0131*  	RRA
0B02A5 1F          0132*  	RRA
0B02A6 CD AB 02 0B 0133*  	CALL	@F
0B02AA 79          0134*  	LD		A,C
0B02AB             0135*  @@:
0B02AB E6 0F       0136*  	AND		0Fh
0B02AD C6 90       0137*  	ADD		A,90h
0B02AF 27          0138*  	DAA
0B02B0 CE 40       0139*  	ADC		A,40h
0B02B2 27          0140*  	DAA
0B02B3 5B D7       0141*  	RST.LIL	10h
0B02B5 C9          0142*  	RET
0B02B6             0143*  
0B02B6             0144*  printHexA:
0B02B6 F5          0145*      push af
0B02B7 C5          0146*      push bc
0B02B8 CD A1 02 0B 0147*      call printHex8
0B02BC 3E 20       0148*      ld a,' '
0B02BE 5B D7       0149*      rst.lil 10h
0B02C0 C1          0150*      pop bc
0B02C1 F1          0151*      pop af
0B02C2 C9          0152*      ret
0B02C3             0153*  
0B02C3             0154*  printHexHL:
0B02C3 F5          0155*      push af
0B02C4 C5          0156*      push bc
0B02C5 CD 9B 02 0B 0157*      call printHex16
0B02C9 3E 20       0158*      ld a,' '
0B02CB 5B D7       0159*      rst.lil 10h
0B02CD C1          0160*      pop bc
0B02CE F1          0161*      pop af
0B02CF C9          0162*      ret
0B02D0             0163*  
0B02D0             0164*  printHexUHL:
0B02D0 F5          0165*      push af
0B02D1 C5          0166*      push bc
0B02D2 CD 93 02 0B 0167*      call printHex24
0B02D6 3E 20       0168*      ld a,' '
0B02D8 5B D7       0169*      rst.lil 10h
0B02DA C1          0170*      pop bc
0B02DB F1          0171*      pop af
0B02DC C9          0172*      ret
0B02DD             0173*  
0B02DD             0174*  printHexAUHL:
0B02DD F5          0175*      push af
0B02DE C5          0176*      push bc
0B02DF CD A1 02 0B 0177*      call printHex8
0B02E3 3E 2E       0178*      ld a,'.'
0B02E5 5B D7       0179*      rst.lil 10h
0B02E7 CD 93 02 0B 0180*      call printHex24
0B02EB 3E 20       0181*      ld a,' '
0B02ED 5B D7       0182*      rst.lil 10h
0B02EF C1          0183*      pop bc
0B02F0 F1          0184*      pop af
0B02F1 C9          0185*      ret
0B02F2             0186*  
0B02F2             0187*  printHexABHL:
0B02F2             0188*  ; preserve registers
0B02F2 C5          0189*      push bc ; b will be ok c will not
0B02F3 F5          0190*      push af ; will get totally destroyed
0B02F4             0191*  ; print a
0B02F4 CD A1 02 0B 0192*      call printHex8
0B02F8             0193*  ; print b
0B02F8 78          0194*      ld a,b
0B02F9 CD A1 02 0B 0195*      call printHex8
0B02FD             0196*  ; print hl
0B02FD CD 9B 02 0B 0197*      call printHex16
0B0301             0198*  ; restore registers
0B0301 F1          0199*      pop af
0B0302 C1          0200*      pop bc
0B0303 C9          0201*      ret
0B0304             0202*  
0B0304             0203*  printHexBHL:
0B0304             0204*  ; preserve registers
0B0304 C5          0205*      push bc ; b will be ok c will not
0B0305 F5          0206*      push af ; will get totally destroyed
0B0306             0207*  ; print b
0B0306 78          0208*      ld a,b
0B0307 CD A1 02 0B 0209*      call printHex8
0B030B             0210*  ; print hl
0B030B CD 9B 02 0B 0211*      call printHex16
0B030F             0212*  ; restore registers
0B030F F1          0213*      pop af
0B0310 C1          0214*      pop bc
0B0311 C9          0215*      ret
0B0312             0216*  
0B0312             0217*  printHexCDE:
0B0312             0218*  ; preserve registers
0B0312 C5          0219*      push bc ; b will be ok c will not
0B0313 F5          0220*      push af ; will get totally destroyed
0B0314             0221*  ; print c
0B0314 79          0222*      ld a,c
0B0315 CD A1 02 0B 0223*      call printHex8
0B0319             0224*  ; print de
0B0319 EB          0225*      ex de,hl
0B031A CD 9B 02 0B 0226*      call printHex16
0B031E EB          0227*      ex de,hl
0B031F             0228*  ; restore registers
0B031F F1          0229*      pop af
0B0320 C1          0230*      pop bc
0B0321 C9          0231*      ret
0B0322             0232*  
0B0322             0233*  ; Print a 0x HEX prefix
0B0322             0234*  DisplayHexPrefix:
0B0322 3E 30       0235*  	LD	A, '0'
0B0324 5B D7       0236*  	RST.LIL 10h
0B0326 3E 78       0237*  	LD	A, 'x'
0B0328 5B D7       0238*  	RST.LIL 10h
0B032A C9          0239*  	RET
0B032B             0240*  
0B032B             0241*      MACRO printDecBC
0B032B             0242*          push hl
0B032B             0243*          push bc
0B032B             0244*          pop hl
0B032B             0245*          call printDec
0B032B             0246*          pop hl
0B032B             0247*      ENDMACRO
0B032B             0248*  
0B032B             0249*      MACRO printDecDE
0B032B             0250*          push hl
0B032B             0251*          push de
0B032B             0252*          pop hl
0B032B             0253*          call printDec
0B032B             0254*          pop hl
0B032B             0255*      ENDMACRO
0B032B             0256*  
0B032B             0257*      MACRO printDecHL
0B032B             0258*          call printDec
0B032B             0259*      ENDMACRO
0B032B             0260*  
0B032B             0261*      MACRO printDecIX
0B032B             0262*          push hl
0B032B             0263*          push ix
0B032B             0264*          pop hl
0B032B             0265*          call printDec
0B032B             0266*          pop hl
0B032B             0267*      ENDMACRO
0B032B             0268*  
0B032B             0269*      MACRO printDecIY
0B032B             0270*          push hl
0B032B             0271*          push iy
0B032B             0272*          pop hl
0B032B             0273*          call printDec
0B032B             0274*          pop hl
0B032B             0275*      ENDMACRO
0B032B             0276*  
0B032B             0277*  
0B032B             0278*  ; Prints the right justified decimal value in HL without leading zeroes
0B032B             0279*  ; HL : Value to print
0B032B             0280*  ; preserves all registers and flags
0B032B             0281*  printDec:
0B032B             0282*  ; BEGIN MY CODE
0B032B             0283*  ; back up all the things
0B032B F5          0284*      push af
0B032C C5          0285*      push bc
0B032D D5          0286*      push de
0B032E E5          0287*      push hl
0B032F             0288*  ; END MY CODE
0B032F 11 53 03 0B 0289*  	LD	 DE, _printDecBuffer
0B0333 CD 63 03 0B 0290*  	CALL u24_to_ascii
0B0337             0291*  ; BEGIN MY CODE
0B0337             0292*  ; replace leading zeroes with spaces
0B0337 21 53 03 0B 0293*      LD	 HL, _printDecBuffer
0B033B 06 07       0294*      ld   B, 7 ; if HL was 0, we want to keep the final zero
0B033D             0295*  @loop:
0B033D 7E          0296*      LD	 A, (HL)
0B033E FE 30       0297*      CP	 '0'
0B0340 C2 4A 03 0B 0298*      JP	 NZ, @done
0B0344 3E 20       0299*      LD   A, ' '
0B0346 77          0300*      LD	 (HL), A
0B0347 23          0301*      INC	 HL
0B0348             0302*      ; CALL vdu_cursor_forward
0B0348 10 F3       0303*      DJNZ @loop
0B034A             0304*  @done:
0B034A             0305*  ; END MY CODE
0B034A             0306*  	; LD	 HL, _printDecBuffer
0B034A CD 73 02 0B 0307*  	CALL printString
0B034E             0308*  ; BEGIN MY CODE
0B034E             0309*  ; restore all the things
0B034E E1          0310*      pop hl
0B034F D1          0311*      pop de
0B0350 C1          0312*      pop bc
0B0351 F1          0313*      pop af
0B0352             0314*  ; END MY CODE
0B0352 C9          0315*  	RET
0B0353 00 00 00 00 0316*  _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0B0363             0317*  
0B0363             0318*  ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
0B0363             0319*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
0B0363             0320*  ; so it will allways be 8 characters length
0B0363             0321*  ; HL : Value to convert to string
0B0363             0322*  ; DE : pointer to buffer, at least 8 byte + 0
0B0363             0323*  u24_to_ascii:
0B0363 01 80 69 67 0324*  	LD	 BC,-10000000
0B0367 CD 9A 03 0B 0325*  	CALL @one_digit
0B036B 01 C0 BD F0 0326*  	LD	 BC,-1000000
0B036F CD 9A 03 0B 0327*  	CALL @one_digit
0B0373 01 60 79 FE 0328*  	LD	 BC,-100000
0B0377 CD 9A 03 0B 0329*  	CALL @one_digit
0B037B 01 F0 D8 FF 0330*  	LD   BC,-10000
0B037F CD 9A 03 0B 0331*  	CALL @one_digit
0B0383 01 18 FC FF 0332*  	LD   BC,-1000
0B0387 CD 9A 03 0B 0333*  	CALL @one_digit
0B038B 01 9C FF FF 0334*  	LD   BC,-100
0B038F CD 9A 03 0B 0335*  	CALL @one_digit
0B0393 0E F6       0336*  	LD   C,-10
0B0395 CD 9A 03 0B 0337*  	CALL @one_digit
0B0399 48          0338*  	LD   C,B
0B039A             0339*  @one_digit:
0B039A 3E 2F       0340*  	LD   A,'0'-1
0B039C             0341*  @divide_me:
0B039C 3C          0342*  	INC  A
0B039D 09          0343*  	ADD  HL,BC
0B039E 38 FC       0344*  	JR   C,@divide_me
0B03A0 ED 42       0345*  	SBC  HL,BC
0B03A2 12          0346*  	LD   (DE),A
0B03A3 13          0347*  	INC  DE
0B03A4 C9          0348*  	RET
0B03A5             0349*  
0B03A5             0350*  print_u24:
0B03A5 D5          0351*      push de
0B03A6 E5          0352*      push hl
0B03A7 11 53 03 0B 0353*      ld de,_printDecBuffer
0B03AB CD 63 03 0B 0354*      call u24_to_ascii
0B03AF 21 53 03 0B 0355*      ld hl,_printDecBuffer
0B03B3 CD 73 02 0B 0356*      call printString
0B03B7 3E 20       0357*      ld a,' '
0B03B9 5B D7       0358*      rst.lil 10h
0B03BB E1          0359*      pop hl
0B03BC D1          0360*      pop de
0B03BD C9          0361*      ret
0B03BE             0362*  
0B03BE             0363*  ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
0B03BE             0364*  ; HL : Value to convert to string (integer part in H, fractional part in L)
0B03BE             0365*  ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
0B03BE             0366*  u168_to_ascii:
0B03BE             0367*  ; add a leading space to make room for sign flag if needed
0B03BE 3E 20       0368*      ld a,' '
0B03C0 12          0369*      ld (de),a
0B03C1 13          0370*      inc de
0B03C2             0371*  ; Convert integer part
0B03C2 E5          0372*      push hl               ; Save HL (we’ll need the fractional part later)
0B03C3 CD D4 07 0B 0373*      call hlu_udiv256    ; Shift to get integer portion in HL
0B03C7 01 F0 D8 FF 0374*      ld   bc, -10000
0B03CB CD EE 03 0B 0375*      call @one_int
0B03CF 01 18 FC FF 0376*      ld   bc, -1000
0B03D3 CD EE 03 0B 0377*      call @one_int
0B03D7 01 9C FF FF 0378*      ld   bc, -100
0B03DB CD EE 03 0B 0379*      call @one_int
0B03DF 0E F6       0380*      ld   c, -10
0B03E1 CD EE 03 0B 0381*      call @one_int
0B03E5 48          0382*      ld   c, b
0B03E6 CD EE 03 0B 0383*      call @one_int
0B03EA C3 F9 03 0B 0384*      jp   @frac            ; Jump to fractional part conversion
0B03EE             0385*  @one_int:
0B03EE 3E 2F       0386*      ld   a, '0' - 1       ; Start ASCII character at '0'
0B03F0             0387*  @divide_me:
0B03F0 3C          0388*      inc  a
0B03F1 09          0389*      add  hl, bc           ; Accumulate until overflow
0B03F2 38 FC       0390*      jr   c, @divide_me
0B03F4 ED 42       0391*      sbc  hl, bc           ; Remove excess after overflow
0B03F6 12          0392*      ld   (de), a          ; Store ASCII digit
0B03F7 13          0393*      inc  de
0B03F8 C9          0394*      ret
0B03F9             0395*  ; Convert fractional part
0B03F9             0396*  @frac:
0B03F9 3E 2E       0397*      ld   a, '.'           ; Decimal point
0B03FB 12          0398*      ld   (de), a
0B03FC 13          0399*      inc  de
0B03FD E1          0400*      pop  hl               ; Restore HL with original fraction
0B03FE 06 03       0401*      ld   b, 3             ; Loop counter for 3 fractional digits
0B0400             0402*  @frac_loop:
0B0400 26 0A       0403*      ld   h, 10            ; Load multiplier for fractional part
0B0402 ED 6C       0404*      mlt  hl               ; Multiply by 10, result in HL (H holds the integer part)
0B0404 3E 30       0405*      ld   a, '0'
0B0406 84          0406*      add  a, h             ; Convert integer part to ASCII
0B0407 12          0407*      ld   (de), a
0B0408 13          0408*      inc  de
0B0409 10 F5       0409*      djnz @frac_loop       ; Repeat for each fractional digit
0B040B             0410*  ; Add null terminator
0B040B AF          0411*      xor  a                ; Null terminator
0B040C 12          0412*      ld   (de), a
0B040D C9          0413*      ret
0B040E             0414*  
0B040E             0415*  print_u168:
0B040E D5          0416*      push de
0B040F E5          0417*      push hl
0B0410 11 53 03 0B 0418*      ld de,_printDecBuffer
0B0414 CD BE 03 0B 0419*      call u168_to_ascii
0B0418 21 53 03 0B 0420*      ld hl,_printDecBuffer
0B041C CD 73 02 0B 0421*      call printString
0B0420 E1          0422*      pop hl
0B0421 D1          0423*      pop de
0B0422 C9          0424*      ret
0B0423             0425*  
0B0423             0426*  ; signed version of u168_to_ascii
0B0423             0427*  s168_to_ascii:
0B0423 D5          0428*      push de ; save starting address of buffer
0B0424 CD 6D 07 0B 0429*      call abs_hlu
0B0428 F5          0430*      push af ; save sign flag
0B0429 CD BE 03 0B 0431*      call u168_to_ascii
0B042D F1          0432*      pop af ; restore sign flag
0B042E D1          0433*      pop de ; restore starting address of buffer
0B042F F0          0434*      ret p ; hlu was positive so nothing to do
0B0430 3E 2D       0435*      ld a,'-'
0B0432 12          0436*      ld (de),a
0B0433 C9          0437*      ret
0B0434             0438*  
0B0434             0439*  print_s168:
0B0434 D5          0440*      push de
0B0435 E5          0441*      push hl
0B0436 11 53 03 0B 0442*      ld de,_printDecBuffer
0B043A CD 23 04 0B 0443*      call s168_to_ascii
0B043E 21 53 03 0B 0444*      ld hl,_printDecBuffer
0B0442 CD 73 02 0B 0445*      call printString
0B0446 E1          0446*      pop hl
0B0447 D1          0447*      pop de
0B0448 C9          0448*      ret
0B0449             0449*  
0B0449             0450*  ; #### new functions added by Brandon R. Gates ####
0B0449             0451*  
0B0449             0452*  ; print the binary representation of the 8-bit value in a
0B0449             0453*  ; destroys a, hl, bc
0B0449             0454*  printBin8:
0B0449 06 08       0455*      ld b,8      ; loop counter for 8 bits
0B044B 21 66 04 0B 0456*      ld hl,@cmd  ; set hl to the low byte of the output string
0B044F             0457*                  ; (which will be the high bit of the value in a)
0B044F             0458*  @loop:
0B044F 07          0459*      rlca ; put the next highest bit into carry
0B0450 38 04       0460*      jr c,@one
0B0452 36 30       0461*      ld (hl),'0'
0B0454 18 02       0462*      jr @next_bit
0B0456             0463*  @one:
0B0456 36 31       0464*      ld (hl),'1'
0B0458             0465*  @next_bit:
0B0458 23          0466*      inc hl
0B0459 10 F4       0467*      djnz @loop
0B045B             0468*  ; print it
0B045B 21 66 04 0B 0469*  	ld hl,@cmd
0B045F 01 08 00 00 0470*  	ld bc,@end-@cmd
0B0463 5B DF       0471*  	rst.lil $18
0B0465 C9          0472*  	ret
0B0466             0473*  @cmd: ds 8 ; eight bytes for eight bits
0B046E             0474*  @end:
0B046E             0475*  
0B046E             0476*  ; print the binary representation of the 8-bit value in a
0B046E             0477*  ; in reverse order (lsb first)
0B046E             0478*  ; destroys a, hl, bc
0B046E             0479*  printBin8Rev:
0B046E 06 08       0480*      ld b,8      ; loop counter for 8 bits
0B0470 21 8B 04 0B 0481*      ld hl,@cmd  ; set hl to the low byte of the output string
0B0474             0482*                  ; (which will be the high bit of the value in a)
0B0474             0483*  @loop:
0B0474 0F          0484*      rrca ; put the next lowest bit into carry
0B0475 38 04       0485*      jr c,@one
0B0477 36 30       0486*      ld (hl),'0'
0B0479 18 02       0487*      jr @next_bit
0B047B             0488*  @one:
0B047B 36 31       0489*      ld (hl),'1'
0B047D             0490*  @next_bit:
0B047D 23          0491*      inc hl
0B047E 10 F4       0492*      djnz @loop
0B0480             0493*  ; print it
0B0480 21 8B 04 0B 0494*  	ld hl,@cmd
0B0484 01 08 00 00 0495*  	ld bc,@end-@cmd
0B0488 5B DF       0496*  	rst.lil $18
0B048A C9          0497*  	ret
0B048B             0498*  @cmd: ds 8 ; eight bytes for eight bits
0B0493             0499*  @end:
0B0493             0500*  
0B0493             0501*  ; print registers to screen in hexidecimal format
0B0493             0502*  ; inputs: none
0B0493             0503*  ; outputs: values of every register printed to screen
0B0493             0504*  ;    values of each register in global scratch memory
0B0493             0505*  ; destroys: nothing
0B0493             0506*  stepRegistersHex:
0B0493             0507*  ; store everything in scratch
0B0493 22 78 06 0B 0508*      ld (uhl),hl
0B0497 ED 43 7B 06 0509*      ld (ubc),bc
       0B          
0B049C ED 53 7E 06 0510*      ld (ude),de
       0B          
0B04A1 DD 22 81 06 0511*      ld (uix),ix
       0B          
0B04A6 FD 22 84 06 0512*      ld (uiy),iy
       0B          
0B04AB F5          0513*      push af ; fml
0B04AC E1          0514*      pop hl  ; thanks, zilog
0B04AD 22 75 06 0B 0515*      ld (uaf),hl
0B04B1 F5          0516*      push af ; dammit
0B04B2             0517*  
0B04B2             0518*  ; home the cursor
0B04B2             0519*      ; call vdu_home_cursor
0B04B2             0520*  
0B04B2             0521*  ; print each register
0B04B2 21 FB 05 0B 0522*      ld hl,str_afu
0B04B6 CD 73 02 0B 0523*      call printString
0B04BA 2A 75 06 0B 0524*      ld hl,(uaf)
0B04BE CD 93 02 0B 0525*      call printHex24
0B04C2 CD 88 02 0B 0526*      call printNewLine
0B04C6             0527*  
0B04C6 21 00 06 0B 0528*      ld hl,str_hlu
0B04CA CD 73 02 0B 0529*      call printString
0B04CE 2A 78 06 0B 0530*      ld hl,(uhl)
0B04D2 CD 93 02 0B 0531*      call printHex24
0B04D6 CD 88 02 0B 0532*      call printNewLine
0B04DA             0533*  
0B04DA 21 05 06 0B 0534*      ld hl,str_bcu
0B04DE CD 73 02 0B 0535*      call printString
0B04E2 2A 7B 06 0B 0536*      ld hl,(ubc)
0B04E6 CD 93 02 0B 0537*      call printHex24
0B04EA CD 88 02 0B 0538*      call printNewLine
0B04EE             0539*  
0B04EE 21 0A 06 0B 0540*      ld hl,str_deu
0B04F2 CD 73 02 0B 0541*      call printString
0B04F6 2A 7E 06 0B 0542*      ld hl,(ude)
0B04FA CD 93 02 0B 0543*      call printHex24
0B04FE CD 88 02 0B 0544*      call printNewLine
0B0502             0545*  
0B0502 21 0F 06 0B 0546*      ld hl,str_ixu
0B0506 CD 73 02 0B 0547*      call printString
0B050A 2A 81 06 0B 0548*      ld hl,(uix)
0B050E CD 93 02 0B 0549*      call printHex24
0B0512 CD 88 02 0B 0550*      call printNewLine
0B0516             0551*  
0B0516 21 14 06 0B 0552*      ld hl,str_iyu
0B051A CD 73 02 0B 0553*      call printString
0B051E 2A 84 06 0B 0554*      ld hl,(uiy)
0B0522 CD 93 02 0B 0555*      call printHex24
0B0526 CD 88 02 0B 0556*      call printNewLine
0B052A             0557*  
0B052A             0558*      ; call vsync
0B052A             0559*  
0B052A CD 88 02 0B 0560*      call printNewLine
0B052E             0561*  
0B052E             0562*  ; check for right shift key and quit if pressed
0B052E             0563*  	MOSCALL mos_getkbmap
0B052E 3E 1E       0001*M 			LD	A, function
0B0530 5B CF       0002*M 			RST.L	08h
0B0532             0564*  @stayhere:
0B0532             0565*  ; 7 RightShift
0B0532 DD CB 00 76 0566*      bit 6,(ix+0)
0B0536 20 02       0567*      jr nz,@RightShift
0B0538 18 F8       0568*      jr @stayhere
0B053A             0569*  @RightShift:
0B053A DD CB 0E 86 0570*      res 0,(ix+14) ; debounce the key (hopefully)
0B053E 3E 80       0571*      ld a,%10000000
0B0540 CD 8A 14 0B 0572*      call multiPurposeDelay
0B0544             0573*  
0B0544             0574*  ; restore everything
0B0544 2A 78 06 0B 0575*      ld hl, (uhl)
0B0548 ED 4B 7B 06 0576*      ld bc, (ubc)
       0B          
0B054D ED 5B 7E 06 0577*      ld de, (ude)
       0B          
0B0552 DD 2A 81 06 0578*      ld ix, (uix)
       0B          
0B0557 FD 2A 84 06 0579*      ld iy, (uiy)
       0B          
0B055C F1          0580*      pop af
0B055D             0581*  ; all done
0B055D C9          0582*      ret
0B055E             0583*  
0B055E             0584*  ; print registers to screen in hexidecimal format
0B055E             0585*  ; inputs: none
0B055E             0586*  ; outputs: values of every register printed to screen
0B055E             0587*  ;    values of each register in global scratch memory
0B055E             0588*  ; destroys: nothing
0B055E             0589*  dumpRegistersHex:
0B055E             0590*  ; store everything in scratch
0B055E 22 78 06 0B 0591*      ld (uhl),hl
0B0562 ED 43 7B 06 0592*      ld (ubc),bc
       0B          
0B0567 ED 53 7E 06 0593*      ld (ude),de
       0B          
0B056C DD 22 81 06 0594*      ld (uix),ix
       0B          
0B0571 FD 22 84 06 0595*      ld (uiy),iy
       0B          
0B0576 F5          0596*      push af ; fml
0B0577 E1          0597*      pop hl  ; thanks, zilog
0B0578 22 75 06 0B 0598*      ld (uaf),hl
0B057C F5          0599*      push af ; dammit
0B057D             0600*  
0B057D             0601*  ; home the cursor
0B057D             0602*      ; call vdu_home_cursor
0B057D             0603*      ; call printNewLine
0B057D             0604*  
0B057D             0605*  ; print each register
0B057D 21 FB 05 0B 0606*      ld hl,str_afu
0B0581 CD 73 02 0B 0607*      call printString
0B0585 2A 75 06 0B 0608*      ld hl,(uaf)
0B0589 CD 93 02 0B 0609*      call printHex24
0B058D             0610*      ; call printNewLine
0B058D             0611*  
0B058D 21 00 06 0B 0612*      ld hl,str_hlu
0B0591 CD 73 02 0B 0613*      call printString
0B0595 2A 78 06 0B 0614*      ld hl,(uhl)
0B0599 CD 93 02 0B 0615*      call printHex24
0B059D             0616*      ; call printNewLine
0B059D             0617*  
0B059D 21 05 06 0B 0618*      ld hl,str_bcu
0B05A1 CD 73 02 0B 0619*      call printString
0B05A5 2A 7B 06 0B 0620*      ld hl,(ubc)
0B05A9 CD 93 02 0B 0621*      call printHex24
0B05AD             0622*      ; call printNewLine
0B05AD             0623*  
0B05AD 21 0A 06 0B 0624*      ld hl,str_deu
0B05B1 CD 73 02 0B 0625*      call printString
0B05B5 2A 7E 06 0B 0626*      ld hl,(ude)
0B05B9 CD 93 02 0B 0627*      call printHex24
0B05BD             0628*      ; call printNewLine
0B05BD             0629*  
0B05BD 21 0F 06 0B 0630*      ld hl,str_ixu
0B05C1 CD 73 02 0B 0631*      call printString
0B05C5 2A 81 06 0B 0632*      ld hl,(uix)
0B05C9 CD 93 02 0B 0633*      call printHex24
0B05CD             0634*      ; call printNewLine
0B05CD             0635*  
0B05CD 21 14 06 0B 0636*      ld hl,str_iyu
0B05D1 CD 73 02 0B 0637*      call printString
0B05D5 2A 84 06 0B 0638*      ld hl,(uiy)
0B05D9 CD 93 02 0B 0639*      call printHex24
0B05DD             0640*      ; call printNewLine
0B05DD             0641*  
0B05DD             0642*      ; call vdu_vblank
0B05DD             0643*  
0B05DD CD 88 02 0B 0644*      call printNewLine
0B05E1             0645*  ; restore everything
0B05E1 2A 78 06 0B 0646*      ld hl, (uhl)
0B05E5 ED 4B 7B 06 0647*      ld bc, (ubc)
       0B          
0B05EA ED 5B 7E 06 0648*      ld de, (ude)
       0B          
0B05EF DD 2A 81 06 0649*      ld ix, (uix)
       0B          
0B05F4 FD 2A 84 06 0650*      ld iy, (uiy)
       0B          
0B05F9 F1          0651*      pop af
0B05FA             0652*  ; all done
0B05FA C9          0653*      ret
0B05FB             0654*  
0B05FB 20 61 66 3D 0655*  str_afu: db " af=",0
       00          
0B0600 20 68 6C 3D 0656*  str_hlu: db " hl=",0
       00          
0B0605 20 62 63 3D 0657*  str_bcu: db " bc=",0
       00          
0B060A 20 64 65 3D 0658*  str_deu: db " de=",0
       00          
0B060F 20 69 78 3D 0659*  str_ixu: db " ix=",0
       00          
0B0614 20 69 79 3D 0660*  str_iyu: db " iy=",0
       00          
0B0619             0661*  
0B0619             0662*  ; print udeuhl to screen in hexidecimal format
0B0619             0663*  ; inputs: none
0B0619             0664*  ; outputs: concatenated hexidecimal udeuhl
0B0619             0665*  ; destroys: nothing
0B0619             0666*  dumpUDEUHLHex:
0B0619             0667*  ; store everything in scratch
0B0619 22 78 06 0B 0668*      ld (uhl),hl
0B061D ED 43 7B 06 0669*      ld (ubc),bc
       0B          
0B0622 ED 53 7E 06 0670*      ld (ude),de
       0B          
0B0627 DD 22 81 06 0671*      ld (uix),ix
       0B          
0B062C FD 22 84 06 0672*      ld (uiy),iy
       0B          
0B0631 F5          0673*      push af
0B0632             0674*  
0B0632             0675*  ; print each register
0B0632             0676*  
0B0632 21 6C 06 0B 0677*      ld hl,str_udeuhl
0B0636 CD 73 02 0B 0678*      call printString
0B063A 2A 7E 06 0B 0679*      ld hl,(ude)
0B063E CD 93 02 0B 0680*      call printHex24
0B0642 3E 2E       0681*  	ld a,'.'	; print a dot to separate the values
0B0644 5B D7       0682*  	rst.lil 10h
0B0646 2A 78 06 0B 0683*      ld hl,(uhl)
0B064A CD 93 02 0B 0684*      call printHex24
0B064E CD 88 02 0B 0685*      call printNewLine
0B0652             0686*  
0B0652             0687*  ; restore everything
0B0652 2A 78 06 0B 0688*      ld hl, (uhl)
0B0656 ED 4B 7B 06 0689*      ld bc, (ubc)
       0B          
0B065B ED 5B 7E 06 0690*      ld de, (ude)
       0B          
0B0660 DD 2A 81 06 0691*      ld ix, (uix)
       0B          
0B0665 FD 2A 84 06 0692*      ld iy, (uiy)
       0B          
0B066A F1          0693*      pop af
0B066B             0694*  ; all done
0B066B C9          0695*      ret
0B066C             0696*  
0B066C 75 64 65 2E 0697*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
0B0675             0698*  
0B0675             0699*  ; global scratch memory for registers
0B0675 00 00 00    0700*  uaf: dl 0
0B0678 00 00 00    0701*  uhl: dl 0
0B067B 00 00 00    0702*  ubc: dl 0
0B067E 00 00 00    0703*  ude: dl 0
0B0681 00 00 00    0704*  uix: dl 0
0B0684 00 00 00    0705*  uiy: dl 0
0B0687 00 00 00    0706*  usp: dl 0
0B068A 00 00 00    0707*  upc: dl 0
0B068D             0708*  
0B068D             0709*  ; inputs: whatever is in the flags register
0B068D             0710*  ; outputs: binary representation of flags
0B068D             0711*  ;          with a header so we know which is what
0B068D             0712*  ; destroys: nothing
0B068D             0713*  ; preserves: everything
0B068D             0714*  dumpFlags:
0B068D             0715*  ; first we curse zilog for not giving direct access to flags
0B068D F5          0716*      push af ; this is so we can send it back unharmed
0B068E F5          0717*      push af ; this is so we can pop it to hl
0B068F             0718*  ; store everything in scratch
0B068F 22 78 06 0B 0719*      ld (uhl),hl
0B0693 ED 43 7B 06 0720*      ld (ubc),bc
       0B          
0B0698 ED 53 7E 06 0721*      ld (ude),de
       0B          
0B069D DD 22 81 06 0722*      ld (uix),ix
       0B          
0B06A2 FD 22 84 06 0723*      ld (uiy),iy
       0B          
0B06A7             0724*  ; next we print the header
0B06A7 21 D3 06 0B 0725*      ld hl,@header
0B06AB CD 73 02 0B 0726*      call printString
0B06AF E1          0727*      pop hl ; flags are now in l
0B06B0 7D          0728*      ld a,l ; flags are now in a
0B06B1 CD 49 04 0B 0729*      call printBin8
0B06B5 CD 88 02 0B 0730*  	call printNewLine
0B06B9             0731*  ; restore everything
0B06B9 2A 78 06 0B 0732*      ld hl, (uhl)
0B06BD ED 4B 7B 06 0733*      ld bc, (ubc)
       0B          
0B06C2 ED 5B 7E 06 0734*      ld de, (ude)
       0B          
0B06C7 DD 2A 81 06 0735*      ld ix, (uix)
       0B          
0B06CC FD 2A 84 06 0736*      ld iy, (uiy)
       0B          
0B06D1 F1          0737*      pop af ; send her home the way she came
0B06D2 C9          0738*      ret
0B06D3             0739*  ; Bit 7 (S): Sign flag
0B06D3             0740*  ; Bit 6 (Z): Zero flag
0B06D3             0741*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0B06D3             0742*  ; Bit 4 (H): Half Carry flag
0B06D3             0743*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0B06D3             0744*  ; Bit 2 (PV): Parity/Overflow flag
0B06D3             0745*  ; Bit 1 (N): Subtract flag
0B06D3             0746*  ; Bit 0 (C): Carry flag
0B06D3 53 5A 78 48 0747*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0B06DE             0748*  
0B06DE             0749*  ; set all the bits in the flag register
0B06DE             0750*  ; more of an academic exercise than anything useful
0B06DE             0751*  ; inputs; none
0B06DE             0752*  ; outputs; a=0,f=255
0B06DE             0753*  ; destroys: flags, hl
0B06DE             0754*  ; preserves: a, because why not
0B06DE             0755*  setAllFlags:
0B06DE 21 FF 00 00 0756*      ld hl,255
0B06E2 67          0757*      ld h,a ; four cycles to preserve a is cheap
0B06E3 E5          0758*      push hl
0B06E4 F1          0759*      pop af
0B06E5 C9          0760*      ret
0B06E6             0761*  
0B06E6             0762*  ; reset all the bits in the flag register
0B06E6             0763*  ; unlike its inverse counterpart, this may actually be useful
0B06E6             0764*  ; inputs; none
0B06E6             0765*  ; outputs; a=0,f=0
0B06E6             0766*  ; destroys: flags, hl
0B06E6             0767*  ; preserves: a, because why not
0B06E6             0768*  resetAllFlags:
0B06E6 21 00 00 00 0769*      ld hl,0
0B06EA 67          0770*      ld h,a ; four cycles to preserve a is cheap
0B06EB E5          0771*      push hl
0B06EC F1          0772*      pop af
0B06ED C9          0773*      ret
0B06EE             0774*  
0B06EE             0775*  ; wait until user presses a key
0B06EE             0776*  ; inputs: none
0B06EE             0777*  ; outputs: none
0B06EE             0778*  ; destroys: af,ix
0B06EE             0779*  waitKeypress:
0B06EE             0780*      MOSCALL mos_sysvars
0B06EE 3E 08       0001*M 			LD	A, function
0B06F0 5B CF       0002*M 			RST.L	08h
0B06F2 AF          0781*      xor a ; zero out any prior keypresses
0B06F3 DD 77 05    0782*      ld (ix+sysvar_keyascii),a
0B06F6             0783*  @loop:
0B06F6 DD 7E 05    0784*      ld a,(ix+sysvar_keyascii)
0B06F9 A7          0785*      and a
0B06FA C0          0786*      ret nz
0B06FB 18 F9       0787*      jr @loop
0B06FD             0788*  
0B06FD             0789*  
0B06FD             0790*  ; print bytes from an address to the screen in hexidecimal format
0B06FD             0791*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0B06FD             0792*  ; outputs: values of each byte printed to screen separated by spaces
0B06FD             0793*  ; destroys: nothing
0B06FD             0794*  dumpMemoryHex:
0B06FD             0795*  ; save registers to the stack
0B06FD C5          0796*      push bc
0B06FE E5          0797*      push hl
0B06FF F5          0798*      push af
0B0700             0799*  
0B0700             0800*  ; print the address and separator
0B0700 CD 93 02 0B 0801*      call printHex24
0B0704 3E 3A       0802*      ld a,':'
0B0706 5B D7       0803*      rst.lil 10h
0B0708 3E 20       0804*      ld a,' '
0B070A 5B D7       0805*      rst.lil 10h
0B070C             0806*  
0B070C             0807*  ; set b to be our loop counter
0B070C F1          0808*      pop af
0B070D 47          0809*      ld b,a
0B070E E1          0810*      pop hl
0B070F E5          0811*      push hl
0B0710 F5          0812*      push af
0B0711             0813*  @loop:
0B0711             0814*  ; print the byte
0B0711 7E          0815*      ld a,(hl)
0B0712 CD A1 02 0B 0816*      call printHex8
0B0716             0817*  ; print a space
0B0716 3E 20       0818*      ld a,' '
0B0718 5B D7       0819*      rst.lil 10h
0B071A 23          0820*      inc hl
0B071B 10 F4       0821*      djnz @loop
0B071D             0822*      ; call printNewLine
0B071D             0823*  
0B071D             0824*  ; restore everything
0B071D F1          0825*      pop af
0B071E E1          0826*      pop hl
0B071F C1          0827*      pop bc
0B0720             0828*  
0B0720             0829*  ; all done
0B0720 C9          0830*      ret
0B0721             0831*  
0B0721             0832*  
0B0721             0833*  ; print bytes from an address to the screen in binary format
0B0721             0834*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0B0721             0835*  ; outputs: values of each byte printed to screen separated by spaces
0B0721             0836*  ; destroys: nothing
0B0721             0837*  dumpMemoryBin:
0B0721             0838*  ; save all registers to the stack
0B0721 F5          0839*      push af
0B0722 C5          0840*      push bc
0B0723 D5          0841*      push de
0B0724 E5          0842*      push hl
0B0725 DD E5       0843*      push ix
0B0727 FD E5       0844*      push iy
0B0729             0845*  
0B0729             0846*  ; set b to be our loop counter
0B0729 47          0847*      ld b,a
0B072A             0848*  @loop:
0B072A             0849*  ; print the byte
0B072A 7E          0850*      ld a,(hl)
0B072B E5          0851*      push hl
0B072C C5          0852*      push bc
0B072D CD 49 04 0B 0853*      call printBin8
0B0731 C1          0854*      pop bc
0B0732             0855*  ; print a space
0B0732 3E 20       0856*      ld a,' '
0B0734 5B D7       0857*      rst.lil 10h
0B0736 E1          0858*      pop hl
0B0737 23          0859*      inc hl
0B0738 10 F0       0860*      djnz @loop
0B073A CD 88 02 0B 0861*      call printNewLine
0B073E             0862*  
0B073E             0863*  ; restore everything
0B073E FD E1       0864*      pop iy
0B0740 DD E1       0865*      pop ix
0B0742 E1          0866*      pop hl
0B0743 D1          0867*      pop de
0B0744 C1          0868*      pop bc
0B0745 F1          0869*      pop af
0B0746             0870*  ; all done
0B0746 C9          0871*      ret
0B0747             0872*  
0B0747             0873*  ; print bytes from an address to the screen in binary format
0B0747             0874*  ; with the bits of each byte in reverse order (lsb first)
0B0747             0875*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0B0747             0876*  ; outputs: values of each byte printed to screen separated by spaces
0B0747             0877*  ; destroys: nothing
0B0747             0878*  dumpMemoryBinRev:
0B0747             0879*  ; save all registers to the stack
0B0747 F5          0880*      push af
0B0748 C5          0881*      push bc
0B0749 D5          0882*      push de
0B074A E5          0883*      push hl
0B074B DD E5       0884*      push ix
0B074D FD E5       0885*      push iy
0B074F             0886*  
0B074F             0887*  ; set b to be our loop counter
0B074F 47          0888*      ld b,a
0B0750             0889*  @loop:
0B0750             0890*  ; print the byte
0B0750 7E          0891*      ld a,(hl)
0B0751 E5          0892*      push hl
0B0752 C5          0893*      push bc
0B0753 CD 6E 04 0B 0894*      call printBin8Rev
0B0757 C1          0895*      pop bc
0B0758             0896*  ; print a space
0B0758 3E 20       0897*      ld a,' '
0B075A 5B D7       0898*      rst.lil 10h
0B075C E1          0899*      pop hl
0B075D 23          0900*      inc hl
0B075E 10 F0       0901*      djnz @loop
0B0760 CD 88 02 0B 0902*      call printNewLine
0B0764             0903*  
0B0764             0904*  ; restore everything
0B0764 FD E1       0905*      pop iy
0B0766 DD E1       0906*      pop ix
0B0768 E1          0907*      pop hl
0B0769 D1          0908*      pop de
0B076A C1          0909*      pop bc
0B076B F1          0910*      pop af
0B076C             0911*  ; all done
0B076C C9          0912*      ret
0B076D             0020       include "maths.inc"
0B076D             0001*  ; absolute value of hlu
0B076D             0002*  ; returns: abs(hlu), flags set according to the incoming sign of hlu:
0B076D             0003*  ;         s1,z0,pv0,n1,c0 if hlu was negative
0B076D             0004*  ;         s0,z1,pv0,n1,c0 if hlu was zero
0B076D             0005*  ;         s0,z0,pv0,n1,c0 if hlu was positive
0B076D             0006*  ; destroys: a
0B076D             0007*  abs_hlu:
0B076D 19          0008*      add hl,de
0B076E B7          0009*      or a
0B076F ED 52       0010*      sbc hl,de
0B0771 FA 76 07 0B 0011*      jp m,@is_neg
0B0775 C9          0012*      ret         ; hlu is positive or zero so we're done
0B0776             0013*  @is_neg:
0B0776 F5          0014*      push af     ; otherwise, save current flags for return
0B0777 CD 7D 07 0B 0015*      call neg_hlu ; negate hlu
0B077B F1          0016*      pop af      ; get back flags
0B077C C9          0017*      ret
0B077D             0018*  
0B077D             0019*  ; flip the sign of hlu
0B077D             0020*  ; inputs: hlu
0B077D             0021*  ; returns: 0-hlu, flags set appropriately for the result:
0B077D             0022*  ;         s1,z0,pv0,n1,c1 if result is negative
0B077D             0023*  ;         s0,z1,pv0,n1,c0 if result is zero
0B077D             0024*  ;         s0,z0,pv0,n1,c1 if result is positive
0B077D             0025*  ; destroys a
0B077D             0026*  neg_hlu:
0B077D D5          0027*      push de     ; save de
0B077E EB          0028*      ex de,hl    ; put hl into de
0B077F 21 00 00 00 0029*      ld hl,0     ; clear hl
0B0783 AF          0030*      xor a       ; clear carry
0B0784 ED 52       0031*      sbc hl,de   ; 0-hlu = -hlu
0B0786 D1          0032*      pop de      ; get de back
0B0787 C9          0033*      ret         ; easy peasy
0B0788             0034*  
0B0788             0035*  ;------------------------------------------------------------------------
0B0788             0036*  ; divide hlu by 2, inspired by above
0B0788             0037*  ;------------------------------------------------------------------------
0B0788             0038*  hlu_div2:
0B0788 22 61 0A 0B 0039*  	ld		(bitbuf1),hl
0B078C 21 63 0A 0B 0040*  	ld		hl,bitbuf1+2
0B0790 CB 1E       0041*  	rr		(hl)
0B0792 2B          0042*  	dec		hl
0B0793 CB 1E       0043*  	rr		(hl)
0B0795 2B          0044*  	dec		hl
0B0796 CB 1E       0045*  	rr		(hl)
0B0798 23          0046*  	inc		hl
0B0799 23          0047*  	inc		hl
0B079A 2A 61 0A 0B 0048*      ld hl,(bitbuf1)
0B079E C9          0049*      ret
0B079F             0050*  
0B079F             0051*  ; this is my little hack to divide by 16
0B079F             0052*  hlu_div16:
0B079F AF          0053*      xor a
0B07A0 29          0054*      add hl,hl
0B07A1 17          0055*      rla
0B07A2 29          0056*      add hl,hl
0B07A3 17          0057*      rla
0B07A4 29          0058*      add hl,hl
0B07A5 17          0059*      rla
0B07A6 29          0060*      add hl,hl
0B07A7 17          0061*      rla
0B07A8 22 B5 07 0B 0062*      ld (@scratch),hl
0B07AC 32 B8 07 0B 0063*      ld (@scratch+3),a
0B07B0 2A B6 07 0B 0064*      ld hl,(@scratch+1)
0B07B4 C9          0065*      ret
0B07B5             0066*  @scratch: ds 4
0B07B9             0067*  
0B07B9             0068*  ; hlu signed division by 256
0B07B9             0069*  ; returns: hlu / 256
0B07B9             0070*  ; destroys: af
0B07B9             0071*  hlu_sdiv256:
0B07B9 AF          0072*      xor a ; assume hl is positive
0B07BA 22 D0 07 0B 0073*      ld (@buffer),hl
0B07BE             0074*      sign_hlu
0B07BE 19          0001*M         add hl,de
0B07BF B7          0002*M         or a
0B07C0 ED 52       0003*M         sbc hl,de
0B07C2 F2 C7 07 0B 0075*      jp p,@hl_pos
0B07C6 3D          0076*      dec a
0B07C7             0077*  @hl_pos:
0B07C7 32 D3 07 0B 0078*      ld (@buffer+3),a
0B07CB 2A D1 07 0B 0079*      ld hl,(@buffer+1)
0B07CF C9          0080*      ret
0B07D0             0081*  @buffer: ds 4
0B07D4             0082*  
0B07D4             0083*  ; hlu 1 byte right shift, unsigned
0B07D4             0084*  ; returns: hlu / 256, fractional portion in a
0B07D4             0085*  ; destroys: af
0B07D4             0086*  hlu_udiv256:
0B07D4 AF          0087*  	xor a
0B07D5 32 E6 07 0B 0088*  	ld (@buffer+3),a
0B07D9 7D          0089*  	ld a,l ; save the fractional portion
0B07DA 22 E3 07 0B 0090*  	ld (@buffer),hl
0B07DE 2A E4 07 0B 0091*  	ld hl,(@buffer+1)
0B07E2 C9          0092*  	ret
0B07E3             0093*  @buffer: ds 4
0B07E7             0094*  
0B07E7             0095*      MACRO hlu_mul256
0B07E7             0096*          add hl,hl ; * 2
0B07E7             0097*          add hl,hl ; * 4
0B07E7             0098*          add hl,hl ; * 8
0B07E7             0099*          add hl,hl ; * 16
0B07E7             0100*          add hl,hl ; * 32
0B07E7             0101*          add hl,hl ; * 64
0B07E7             0102*          add hl,hl ; * 128
0B07E7             0103*          add hl,hl ; * 256
0B07E7             0104*      ENDMACRO
0B07E7             0105*  
0B07E7 00 00 00 00 0106*  add_bcd_arg1: db #00,#00,#00,#00
0B07EB 00 00 00 00 0107*  add_bcd_arg2: db #00,#00,#00,#00
0B07EF             0108*  
0B07EF             0109*  ; set bcd values in a scratch memory address from registers bcde
0B07EF             0110*  ; input: hl; scratch address,bcde; 8-place bcd number
0B07EF             0111*  ; destroys ; hl
0B07EF             0112*  set_bcd:
0B07EF 73          0113*      ld (hl),e
0B07F0 23          0114*      inc hl
0B07F1 72          0115*      ld (hl),d
0B07F2 23          0116*      inc hl
0B07F3 71          0117*      ld (hl),c
0B07F4 23          0118*      inc hl
0B07F5 70          0119*      ld (hl),b
0B07F6 C9          0120*      ret
0B07F7             0121*  
0B07F7             0122*  ; load bcd values from a scratch memory address to bcde
0B07F7             0123*  ; input: hl; scratch address
0B07F7             0124*  ; output: bcde; 8-place bcd number
0B07F7             0125*  ; destroys: hl
0B07F7             0126*  get_bcd:
0B07F7 5E          0127*      ld e,(hl)
0B07F8 23          0128*      inc hl
0B07F9 56          0129*      ld d,(hl)
0B07FA 23          0130*      inc hl
0B07FB 4E          0131*      ld c,(hl)
0B07FC 23          0132*      inc hl
0B07FD 46          0133*      ld b,(hl)
0B07FE C9          0134*      ret
0B07FF             0135*  
0B07FF             0136*  ; BCD addition
0B07FF             0137*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0B07FF             0138*  ;       a is the number of bytes holding each number (number of places/2)
0B07FF             0139*  ; outputs: (hl) + (de) --> (hl)
0B07FF             0140*  ; destroys: a,b,de,hl
0B07FF             0141*  add_bcd:
0B07FF 47          0142*      ld b,a ; loop counter
0B0800 AF          0143*      xor a ; reset a, clear carry flag
0B0801             0144*  adcec:
0B0801 1A          0145*      ld a,(de) ; addend to acc
0B0802 8E          0146*      adc a,(hl) ; add (hl) to acc
0B0803 27          0147*      daa ; adjust result to bcd
0B0804 77          0148*      ld (hl),a ; store result
0B0805 23          0149*      inc hl ; advance memory pointers
0B0806 13          0150*      inc de
0B0807 10 F8       0151*      djnz adcec ; loop until b == 0
0B0809 C9          0152*      ret
0B080A             0153*  
0B080A             0154*  ; BCD subtraction
0B080A             0155*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0B080A             0156*  ;       a is the number of bytes holding each number (number of places/2)
0B080A             0157*  ; outputs: (hl) - (de) --> (hl)
0B080A             0158*  ; destroys: a,b,de,hl
0B080A             0159*  sub_bcd:
0B080A 47          0160*      ld b,a ; loop counter
0B080B AF          0161*      xor a ; reset a,clear carry flag
0B080C             0162*  subdec:
0B080C 1A          0163*      ld a,(de) ; subtrahend to acc
0B080D 9E          0164*      sbc a,(hl) ; subtract (hl) from acc
0B080E 27          0165*      daa ; adjust result to bcd
0B080F 77          0166*      ld (hl),a ; store result
0B0810 23          0167*      inc hl ; advance memory pointers
0B0811 13          0168*      inc de
0B0812 10 F8       0169*      djnz subdec ; loop until b == 0
0B0814 C9          0170*      ret
0B0815             0171*  
0B0815             0172*  ; http://www.z80.info/pseudo-random.txt
0B0815             0173*  rand_8:
0B0815 C5          0174*      push bc
0B0816 3A 29 08 0B 0175*      ld a,(r_seed)
0B081A 4F          0176*      ld c,a
0B081B             0177*  
0B081B 0F          0178*      rrca ; multiply by 32
0B081C 0F          0179*      rrca
0B081D 0F          0180*      rrca
0B081E EE 1F       0181*      xor 0x1f
0B0820             0182*  
0B0820 81          0183*      add a,c
0B0821 DE FF       0184*      sbc a,255 ; carry
0B0823             0185*  
0B0823 32 29 08 0B 0186*      ld (r_seed),a
0B0827 C1          0187*      pop bc
0B0828 C9          0188*      ret
0B0829 50          0189*  r_seed: defb $50
0B082A             0190*  
0B082A             0191*  ; linear interpolation between two 24-bit numbers
0B082A             0192*  ; may be signed or unsigned, and treated as integers or fractional
0B082A             0193*  ; inputs: bc = start value, de = end value, a = interpolation factor
0B082A             0194*  ; outputs: hl = interpolated value, a = multiply overflow to 32 bits (0 if no overflow)
0B082A             0195*  ; destroys: af, hl, de
0B082A             0196*  interpolate24:
0B082A C5          0197*      push bc ; save start value
0B082B EB          0198*      ex de,hl ; end value to hl
0B082C B7          0199*      or a ; clear carry
0B082D ED 42       0200*      sbc hl,bc ; hl = end - start
0B082F CD 76 08 0B 0201*      call umul24x8 ; hl = (end - start) * interpolation factor
0B0833 C1          0202*      pop bc ; get back start value (was hl)
0B0834 09          0203*      add hl,bc ; hl = start + (end - start) * interpolation factor
0B0835 C9          0204*      ret
0B0836             0021   	INCLUDE	"arith24.inc"
0B0836             0001*  arith24uaf: ds 6
0B083C             0002*  arith24uhl: ds 6
0B0842             0003*  arith24ubc: ds 6
0B0848             0004*  arith24ude: ds 6
0B084E             0005*  arith24uix: ds 6
0B0854             0006*  arith24uiy: ds 6
0B085A             0007*  arith24usp: ds 6
0B0860             0008*  arith24upc: ds 6
0B0866             0009*  
0B0866             0010*  ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
0B0866             0011*  ; uses EZ80 MLT instruction for speed
0B0866             0012*  ; operation: UHL * A --> UHL
0B0866             0013*  ; destroys: AF, HL
0B0866             0014*  smul24x8:
0B0866             0015*  ; make hl positive and store sign flag
0B0866 CD 6D 07 0B 0016*  	call abs_hlu
0B086A F5          0017*  	push af
0B086B             0018*  ; do the division
0B086B CD 76 08 0B 0019*      call umul24x8 ; hl = product
0B086F             0020*  ; adjust sign of result
0B086F F1          0021*  	pop af ; sign de
0B0870 F0          0022*  	ret p ; hl was positive, nothing to do
0B0871 CD 7D 07 0B 0023*  	call neg_hlu ; result is negative
0B0875 C9          0024*  	ret
0B0876             0025*  
0B0876             0026*  ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
0B0876             0027*  ; uses EZ80 MLT instruction for speed
0B0876             0028*  ; operation: UHL * A --> AUHL
0B0876             0029*  ; destroys: AF, HL
0B0876             0030*  umul24x8:
0B0876 D5          0031*  	push de ; preserve de
0B0877             0032*  ; low byte
0B0877 5D          0033*  	ld e,l
0B0878 57          0034*  	ld d,a
0B0879 ED 5C       0035*  	mlt de
0B087B 6B          0036*  	ld l,e ; product low byte
0B087C 08          0037*  	ex af,af' ; save multiplier
0B087D 7A          0038*  	ld a,d ; carry
0B087E 08          0039*  	ex af,af' ; save carry, restore multiplier
0B087F             0040*  ; high byte
0B087F 5C          0041*  	ld e,h
0B0880 57          0042*  	ld d,a
0B0881 ED 5C       0043*  	mlt de
0B0883 08          0044*  	ex af,af' ; save multiplier, restore carry
0B0884 83          0045*  	add a,e ; add carry
0B0885 67          0046*  	ld h,a ; product middle byte
0B0886 7A          0047*  	ld a,d ; carry
0B0887 08          0048*  	ex af,af' ; save carry, restore multiplier
0B0888             0049*  ; upper byte
0B0888 E5          0050*  	push hl
0B0889 33          0051*  	inc sp
0B088A D1          0052*  	pop de ; d = hlu
0B088B 3B          0053*  	dec sp
0B088C 5F          0054*  	ld e,a
0B088D ED 5C       0055*  	mlt de
0B088F 08          0056*  	ex af,af' ; restore carry
0B0890 8B          0057*  	adc a,e ; add carry
0B0891 22 A2 08 0B 0058*      ld (@scratch),hl ; 7 cycles
0B0895 32 A4 08 0B 0059*      ld (@scratch+2),a ; 5 cycles
0B0899 2A A2 08 0B 0060*      ld hl,(@scratch) ; 7 cycles
0B089D             0061*  ; highest byte
0B089D 3E 00       0062*  	ld a,0 ; preserve carry flag
0B089F 8A          0063*  	adc a,d ; product highest byte
0B08A0 D1          0064*  	pop de ; restore de
0B08A1 C9          0065*  	ret
0B08A2             0066*  @scratch: ds 3
0B08A5             0067*  
0B08A5             0068*  ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
0B08A5             0069*  ; operation: UHL * UDE --> umul24x24out
0B08A5             0070*  umul24x24:
0B08A5 FD 21 FD 08 0071*  	ld iy,umul24x24out ; point to output buffer
       0B          
0B08AA C5          0072*  	push bc
0B08AB 01 00 00 00 0073*  	ld bc,0
0B08AF FD 0F 00    0074*  	ld (iy),bc
0B08B2 FD 0F 03    0075*  	ld (iy+3),bc
0B08B5 C1          0076*  	pop bc
0B08B6             0077*  
0B08B6             0078*  ; STEP 1: UHL * E
0B08B6 7B          0079*  	ld a,e
0B08B7 E5          0080*  	push hl
0B08B8 CD 76 08 0B 0081*  	call umul24x8
0B08BC FD 2F 00    0082*  	ld (iy+0),hl
0B08BF FD 77 03    0083*  	ld (iy+3),a
0B08C2             0084*  
0B08C2             0085*  ; STEP 2: UHL * D
0B08C2 E1          0086*  	pop hl
0B08C3 E5          0087*  	push hl
0B08C4 7A          0088*  	ld a,d
0B08C5 CD 76 08 0B 0089*  	call umul24x8
0B08C9 CD D6 08 0B 0090*  	call @accumulate
0B08CD             0091*  
0B08CD             0092*  ; STEP 3: UHL * DEU
0B08CD E1          0093*  	pop hl
0B08CE D5          0094*  	push de
0B08CF 33          0095*  	inc sp
0B08D0 F1          0096*  	pop af
0B08D1 3B          0097*  	dec sp
0B08D2 CD 76 08 0B 0098*  	call umul24x8
0B08D6             0099*  
0B08D6             0100*  @accumulate:
0B08D6 FD 23       0101*  	inc iy
0B08D8             0102*  ; highest byte of product to carry
0B08D8 FD 77 03    0103*  	ld (iy+3),a
0B08DB             0104*  ; low byte of product
0B08DB 7D          0105*  	ld a,l
0B08DC FD 86 00    0106*  	add a,(iy+0)
0B08DF FD 77 00    0107*  	ld (iy+0),a
0B08E2             0108*  ; high byte of product
0B08E2 7C          0109*  	ld a,h
0B08E3 FD 8E 01    0110*  	adc a,(iy+1)
0B08E6 FD 77 01    0111*  	ld (iy+1),a
0B08E9             0112*  ; uppper byte of product
0B08E9 E5          0113*  	push hl
0B08EA 33          0114*  	inc sp
0B08EB E1          0115*  	pop hl
0B08EC 3B          0116*  	dec sp
0B08ED 7C          0117*  	ld a,h
0B08EE FD 8E 02    0118*  	adc a,(iy+2)
0B08F1 FD 77 02    0119*  	ld (iy+2),a
0B08F4             0120*  ; carry
0B08F4 3E 00       0121*  	ld a,0 ; preserve flags
0B08F6 FD 8E 03    0122*  	adc a,(iy+3)
0B08F9 FD 77 03    0123*  	ld (iy+3),a
0B08FC C9          0124*  	ret
0B08FD             0125*  umul24x24out: ds 6 ; output buffer
0B0903             0126*  
0B0903             0127*  ; umul168:	UH.L = UH.L*UD.E (unsigned)
0B0903             0128*  umul168:
0B0903 CD A5 08 0B 0129*  	call umul24x24
0B0907 FD 27 FF    0130*  	ld hl,(iy-1)
0B090A C9          0131*  	ret
0B090B             0132*  
0B090B             0133*  ; smul168:	UH.L * UD.E --> UH.L (signed)
0B090B             0134*  smul168:
0B090B             0135*  ; make everything positive and store sign flags
0B090B CD 6D 07 0B 0136*  	call abs_hlu
0B090F F5          0137*  	push af
0B0910 EB          0138*  	ex de,hl
0B0911 CD 6D 07 0B 0139*  	call abs_hlu
0B0915 EB          0140*  	ex de,hl
0B0916 F5          0141*  	push af
0B0917             0142*  ; do the division
0B0917 CD 03 09 0B 0143*      call umul168 ; hl = product
0B091B             0144*  ; adjust sign of result
0B091B F1          0145*  	pop af ; sign de
0B091C FA 27 09 0B 0146*  	jp m,@de_neg
0B0920 F1          0147*  	pop af ; sign hl
0B0921 F0          0148*  	ret p ; both positive, nothing to do
0B0922             0149*  @hl_neg:
0B0922 CD 7D 07 0B 0150*      call neg_hlu ; de pos, hl neg, result is negative
0B0926 C9          0151*      ret
0B0927             0152*  @de_neg:
0B0927 F1          0153*  	pop af
0B0928 F8          0154*  	ret m ; both negative, nothing to do
0B0929 CD 7D 07 0B 0155*  	call neg_hlu ; result is negative
0B092D C9          0156*  	ret
0B092E             0157*  
0B092E             0158*  ;------------------------------------------------------------------------
0B092E             0159*  ;  arith24.inc
0B092E             0160*  ;  24-bit ez80 arithmetic routines
0B092E             0161*  ;  Copyright (c) Shawn Sijnstra 2024
0B092E             0162*  ;  MIT license
0B092E             0163*  ;
0B092E             0164*  ;  This library was created as a tool to help make ez80
0B092E             0165*  ;  24-bit native assembly routines for simple mathematical problems
0B092E             0166*  ;  more widely available.
0B092E             0167*  ;
0B092E             0168*  ;------------------------------------------------------------------------
0B092E             0169*  
0B092E             0170*  ;------------------------------------------------------------------------
0B092E             0171*  ; umul24:	HL = HL*DE (unsigned)
0B092E             0172*  ; Preserves AF, BC, DE
0B092E             0173*  ; Uses a fast multiply routine.
0B092E             0174*  ;------------------------------------------------------------------------
0B092E             0175*  umul24:
0B092E D5          0176*  	push	DE
0B092F C5          0177*  	push	BC
0B0930 F5          0178*  	push	AF
0B0931 E5          0179*  	push	HL
0B0932 C1          0180*  	pop		BC
0B0933 3E 18       0181*      ld	 	a, 24 ; No. of bits to process
0B0935 21 00 00 00 0182*      ld	 	hl, 0 ; Result
0B0939             0183*  umul24_lp:
0B0939 29          0184*  	add	hl,hl
0B093A EB          0185*  	ex	de,hl
0B093B 29          0186*  	add	hl,hl
0B093C EB          0187*  	ex	de,hl
0B093D 30 01       0188*  	jr	nc,umul24_nc
0B093F 09          0189*  	add	hl,bc
0B0940             0190*  umul24_nc:
0B0940 3D          0191*  	dec	a
0B0941 20 F6       0192*  	jr	nz,umul24_lp
0B0943 F1          0193*  	pop	af
0B0944 C1          0194*  	pop	bc
0B0945 D1          0195*  	pop	de
0B0946 C9          0196*  	ret
0B0947             0197*  
0B0947             0198*  ;------------------------------------------------------------------------
0B0947             0199*  ; udiv24
0B0947             0200*  ; Unsigned 24-bit division
0B0947             0201*  ; HLU / DEU --> DEU rem HLU
0B0947             0202*  ; Uses AF BC DE HL
0B0947             0203*  ; Uses Restoring Division algorithm
0B0947             0204*  ;------------------------------------------------------------------------
0B0947             0205*  
0B0947             0206*  udiv24:
0B0947 E5          0207*  	push	hl
0B0948 C1          0208*  	pop		bc	;move dividend to BCU
0B0949 21 00 00 00 0209*  	ld		hl,0	;result
0B094D A7          0210*  	and		a
0B094E ED 52       0211*  	sbc		hl,de	;test for div by 0
0B0950 C8          0212*  	ret		z		;it's zero, carry flag is clear
0B0951 19          0213*  	add		hl,de	;HL is 0 again
0B0952 3E 18       0214*  	ld		a,24	;number of loops through.
0B0954             0215*  udiv1:
0B0954 C5          0216*  	push	bc	;complicated way of doing this because of lack of access to top bits
0B0955 E3          0217*  	ex		(sp),hl
0B0956 37          0218*  	scf
0B0957 ED 6A       0219*  	adc	hl,hl
0B0959 E3          0220*  	ex	(sp),hl
0B095A C1          0221*  	pop	bc		;we now have bc = (bc * 2) + 1
0B095B             0222*  
0B095B ED 6A       0223*  	adc	hl,hl
0B095D A7          0224*  	and	a		;is this the bug
0B095E ED 52       0225*  	sbc	hl,de
0B0960 30 02       0226*  	jr	nc,udiv2
0B0962 19          0227*  	add	hl,de
0B0963             0228*  ;	dec	c
0B0963 0B          0229*  	dec	bc
0B0964             0230*  udiv2:
0B0964 3D          0231*  	dec	a
0B0965 20 ED       0232*  	jr	nz,udiv1
0B0967 37          0233*  	scf		;flag used for div0 error
0B0968 C5          0234*  	push	bc
0B0969 D1          0235*  	pop		de	;remainder
0B096A C9          0236*  	ret
0B096B             0237*  
0B096B             0238*  
0B096B             0239*  ; UH.L / UD.E --> UD.E rem UHL (unsigned)
0B096B             0240*  ; perform unsigned division of 16.8 fixed place values
0B096B             0241*  ; with an unsigned 16.8 fixed place result and 24-bit remainder
0B096B             0242*  udiv168:
0B096B             0243*  ; back up divisor
0B096B D5          0244*      push de
0B096C             0245*  ; get the 16-bit integer part of the quotient
0B096C CD 47 09 0B 0246*      call udiv24 ; de = quotient, hl = remainder
0B0970             0247*  ; load quotient to upper three bytes of output
0B0970 ED 53 A1 09 0248*      ld (div168_out+1),de
       0B          
0B0975             0249*  @div256:
0B0975             0250*  ; multiply remainder by 256
0B0975             0251*  	hlu_mul256
0B0975 29          0001*M         add hl,hl ; * 2
0B0976 29          0002*M         add hl,hl ; * 4
0B0977 29          0003*M         add hl,hl ; * 8
0B0978 29          0004*M         add hl,hl ; * 16
0B0979 29          0005*M         add hl,hl ; * 32
0B097A 29          0006*M         add hl,hl ; * 64
0B097B 29          0007*M         add hl,hl ; * 128
0B097C 29          0008*M         add hl,hl ; * 256
0B097D             0252*  ; skip fractional computation if remainder is zero
0B097D             0253*      sign_hlu
0B097D 19          0001*M         add hl,de
0B097E B7          0002*M         or a
0B097F ED 52       0003*M         sbc hl,de
0B0981 20 03       0254*      jr nz,@div_frac
0B0983 AF          0255*      xor a
0B0984 18 06       0256*      jr @write_frac
0B0986             0257*  ; now divide the shifted remainder by the divisor
0B0986             0258*  @div_frac:
0B0986 D1          0259*  	pop de ; get back divisor
0B0987 CD 47 09 0B 0260*      call udiv24 ; de = quotient, hl = remainder
0B098B             0261*  ; load low byte of quotient to low byte of output
0B098B 7B          0262*      ld a,e
0B098C             0263*  @write_frac:
0B098C 32 A0 09 0B 0264*      ld (div168_out),a
0B0990             0265*  ; load de with return value
0B0990 ED 5B A0 09 0266*      ld de,(div168_out)
       0B          
0B0995             0267*  ; load a with any overflow
0B0995 3A A3 09 0B 0268*      ld a,(div168_out+3)
0B0999 C9          0269*      ret ; ud.e is the 16.8 result
0B099A             0270*  @ude: ds 6
0B09A0             0271*  div168_out: ds 4 ; the extra byte is for overflow
0B09A4             0272*  
0B09A4             0273*  ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
0B09A4             0274*  ; perform signed division of 16.8 fixed place values
0B09A4             0275*  ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
0B09A4             0276*  sdiv168:
0B09A4             0277*  ; make everything positive and store sign flags
0B09A4 CD 6D 07 0B 0278*  	call abs_hlu
0B09A8 F5          0279*  	push af
0B09A9 EB          0280*  	ex de,hl
0B09AA CD 6D 07 0B 0281*  	call abs_hlu
0B09AE EB          0282*  	ex de,hl
0B09AF F5          0283*  	push af
0B09B0             0284*  ; do the division
0B09B0 CD 6B 09 0B 0285*      call udiv168 ; de = quotient, hl = remainder
0B09B4             0286*  ; adjust sign of result
0B09B4 F1          0287*  	pop af ; sign de
0B09B5 FA C2 09 0B 0288*  	jp m,@de_neg
0B09B9 F1          0289*  	pop af ; sign hl
0B09BA F0          0290*  	ret p ; both positive, nothing to do
0B09BB             0291*  @hl_neg:
0B09BB EB          0292*      ex de,hl ; hl = quotient, de = remainder
0B09BC CD 7D 07 0B 0293*      call neg_hlu ; de pos, hl neg, result is negative
0B09C0 EB          0294*      ex de,hl ; de = negated quotient, hl = remainder
0B09C1 C9          0295*      ret
0B09C2             0296*  @de_neg:
0B09C2 F1          0297*  	pop af
0B09C3 F8          0298*  	ret m ; both negative, nothing to do
0B09C4 EB          0299*      ex de,hl ; hl = quotient, de = remainder
0B09C5 CD 7D 07 0B 0300*  	call neg_hlu ; result is negative
0B09C9 EB          0301*      ex de,hl ; de = negated quotient, hl = remainder
0B09CA C9          0302*  	ret
0B09CB             0303*  
0B09CB             0304*  ;------------------------------------------------------------------------
0B09CB             0305*  ; neg24
0B09CB             0306*  ; Returns: HLU = 0-HLU
0B09CB             0307*  ; preserves all other registers
0B09CB             0308*  ;------------------------------------------------------------------------
0B09CB             0309*  neg24:
0B09CB D5          0310*  	push	de
0B09CC EB          0311*  	ex		de,hl
0B09CD 21 00 00 00 0312*  	ld		hl,0
0B09D1 B7          0313*  	or		a
0B09D2 ED 52       0314*  	sbc		hl,de
0B09D4 D1          0315*  	pop		de
0B09D5 C9          0316*  	ret
0B09D6             0317*  
0B09D6             0318*  ;------------------------------------------------------------------------
0B09D6             0319*  ; or_hlu_deu: 24 bit bitwise OR
0B09D6             0320*  ; Returns: hlu = hlu OR deu
0B09D6             0321*  ; preserves all other registers
0B09D6             0322*  ;------------------------------------------------------------------------
0B09D6             0323*  or_hlu_deu:
0B09D6 22 61 0A 0B 0324*  	ld	(bitbuf1),hl
0B09DA ED 53 64 0A 0325*  	ld	(bitbuf2),de
       0B          
0B09DF D5          0326*  	push	de	;preserve DEU
0B09E0 C5          0327*  	push	bc	;preserve BCU
0B09E1 06 03       0328*  	ld		b,3
0B09E3 21 61 0A 0B 0329*  	ld	hl,bitbuf1
0B09E7 11 61 0A 0B 0330*  	ld	de,bitbuf1
0B09EB             0331*  orloop_24:
0B09EB 1A          0332*  	ld	a,(de)
0B09EC B6          0333*  	or	(hl)
0B09ED 12          0334*  	ld	(de),a
0B09EE 13          0335*  	inc	de
0B09EF 23          0336*  	inc	hl
0B09F0 10 F9       0337*  	djnz	orloop_24
0B09F2 2A 64 0A 0B 0338*  	ld	hl,(bitbuf2)
0B09F6 C1          0339*  	pop		bc	;restore BC
0B09F7 D1          0340*  	pop		de	;restore DE
0B09F8             0341*  
0B09F8             0342*  ;------------------------------------------------------------------------
0B09F8             0343*  ; and_hlu_deu: 24 bit bitwise AND
0B09F8             0344*  ; Returns: hlu = hlu AND deu
0B09F8             0345*  ; preserves all other registers
0B09F8             0346*  ;------------------------------------------------------------------------
0B09F8             0347*  and_hlu_deu:
0B09F8 22 61 0A 0B 0348*  	ld	(bitbuf1),hl
0B09FC ED 53 64 0A 0349*  	ld	(bitbuf2),de
       0B          
0B0A01 D5          0350*  	push	de	;preserve DEU
0B0A02 C5          0351*  	push	bc	;preserve BCU
0B0A03 06 03       0352*  	ld		b,3
0B0A05 21 61 0A 0B 0353*  	ld	hl,bitbuf1
0B0A09 11 61 0A 0B 0354*  	ld	de,bitbuf1
0B0A0D             0355*  andloop_24:
0B0A0D 1A          0356*  	ld	a,(de)
0B0A0E A6          0357*  	and	(hl)
0B0A0F 12          0358*  	ld	(de),a
0B0A10 13          0359*  	inc	de
0B0A11 23          0360*  	inc	hl
0B0A12 10 F9       0361*  	djnz	andloop_24
0B0A14 2A 64 0A 0B 0362*  	ld	hl,(bitbuf2)
0B0A18 C1          0363*  	pop		bc	;restore BC
0B0A19 D1          0364*  	pop		de	;restore DE
0B0A1A             0365*  
0B0A1A             0366*  ;------------------------------------------------------------------------
0B0A1A             0367*  ; xor_hlu_deu: 24 bit bitwise XOR
0B0A1A             0368*  ; Returns: hlu = hlu XOR deu
0B0A1A             0369*  ; preserves all other registers
0B0A1A             0370*  ;------------------------------------------------------------------------
0B0A1A             0371*  xor_hlu_deu:
0B0A1A 22 61 0A 0B 0372*  	ld	(bitbuf1),hl
0B0A1E ED 53 64 0A 0373*  	ld	(bitbuf2),de
       0B          
0B0A23 D5          0374*  	push	de	;preserve DEU
0B0A24 C5          0375*  	push	bc	;preserve BCU
0B0A25 06 03       0376*  	ld		b,3
0B0A27 21 61 0A 0B 0377*  	ld	hl,bitbuf1
0B0A2B 11 61 0A 0B 0378*  	ld	de,bitbuf1
0B0A2F             0379*  xorloop_24:
0B0A2F 1A          0380*  	ld	a,(de)
0B0A30 AE          0381*  	xor	(hl)
0B0A31 12          0382*  	ld	(de),a
0B0A32 13          0383*  	inc	de
0B0A33 23          0384*  	inc	hl
0B0A34 10 F9       0385*  	djnz	xorloop_24
0B0A36 2A 64 0A 0B 0386*  	ld	hl,(bitbuf2)
0B0A3A C1          0387*  	pop		bc	;restore BC
0B0A3B D1          0388*  	pop		de	;restore DE
0B0A3C             0389*  
0B0A3C             0390*  ;------------------------------------------------------------------------
0B0A3C             0391*  ; shl_hlu: 24 bit shift left hlu by deu positions
0B0A3C             0392*  ; Returns: hlu = hlu << deu
0B0A3C             0393*  ;		   de = 0
0B0A3C             0394*  ; NOTE: only considers deu up to 16 bits.
0B0A3C             0395*  ; preserves all other registers
0B0A3C             0396*  ;------------------------------------------------------------------------
0B0A3C             0397*  shl_hlu:
0B0A3C 7A          0398*  	ld		a,d		;up to 16 bit.
0B0A3D B3          0399*  	or		e
0B0A3E C8          0400*  	ret		z		;we're done
0B0A3F 29          0401*  	add		hl,hl	;shift HLU left
0B0A40 1B          0402*  	dec		de
0B0A41 18 F9       0403*  	jr		shl_hlu
0B0A43             0404*  
0B0A43             0405*  ;------------------------------------------------------------------------
0B0A43             0406*  ; shr_hlu: 24 bit shift right hlu by deu positions
0B0A43             0407*  ; Returns: hlu = hlu >> deu
0B0A43             0408*  ;		   de = 0
0B0A43             0409*  ; NOTE: only considers deu up to 16 bits.
0B0A43             0410*  ; preserves all other registers
0B0A43             0411*  ;------------------------------------------------------------------------
0B0A43             0412*  shr_hlu:
0B0A43 22 61 0A 0B 0413*  	ld		(bitbuf1),hl
0B0A47 21 63 0A 0B 0414*  	ld		hl,bitbuf1+2
0B0A4B             0415*  shr_loop:
0B0A4B 7A          0416*  	ld		a,d		;up to 16 bit.
0B0A4C B3          0417*  	or		e
0B0A4D 28 0D       0418*  	jr		z,shr_done		;we're done
0B0A4F             0419*  ;carry is clear from or instruction
0B0A4F CB 1E       0420*  	rr		(hl)
0B0A51 2B          0421*  	dec		hl
0B0A52 CB 1E       0422*  	rr		(hl)
0B0A54 2B          0423*  	dec		hl
0B0A55 CB 1E       0424*  	rr		(hl)
0B0A57 23          0425*  	inc		hl
0B0A58 23          0426*  	inc		hl
0B0A59 1B          0427*  	dec		de
0B0A5A 18 EF       0428*  	jr		shr_loop
0B0A5C             0429*  shr_done:
0B0A5C 2A 61 0A 0B 0430*  	ld		hl,(bitbuf1)	;collect result
0B0A60 C9          0431*  	ret
0B0A61             0432*  
0B0A61             0433*  ;------------------------------------------------------------------------
0B0A61             0434*  ; Scratch area for calculations
0B0A61             0435*  ;------------------------------------------------------------------------
0B0A61 00 00 00    0436*  bitbuf1:	dw24	0	;bit manipulation buffer 1
0B0A64 00 00 00    0437*  bitbuf2:	dw24	0	;bit manipulation buffer 2
0B0A67             0438*  
0B0A67             0439*  ; ========== FROM maths24.inc ==========
0B0A67             0440*  
0B0A67             0441*  ; Expects  ADL mode
0B0A67             0442*  ; Inputs:  UH.L
0B0A67             0443*  ; Outputs: UH.L is the 16.8 square root
0B0A67             0444*  ;          UD.E is the difference inputHL-DE^2
0B0A67             0445*  ;          c flag reset
0B0A67             0446*  sqrt168:
0B0A67 CD 71 0A 0B 0447*      call sqrt24
0B0A6B EB          0448*      ex de,hl
0B0A6C 29          0449*      add hl,hl
0B0A6D 29          0450*      add hl,hl
0B0A6E 29          0451*      add hl,hl
0B0A6F 29          0452*      add hl,hl
0B0A70 C9          0453*      ret
0B0A71             0454*  
0B0A71             0455*  ; Expects  ADL mode
0B0A71             0456*  ; Inputs:  HL
0B0A71             0457*  ; Outputs: DE is the integer square root
0B0A71             0458*  ;          HL is the difference inputHL-DE^2
0B0A71             0459*  ;          c flag reset
0B0A71             0460*  sqrt24:
0B0A71 AF          0461*      xor a
0B0A72 45          0462*      ld b,l
0B0A73 C5          0463*      push bc
0B0A74 47          0464*      ld b,a
0B0A75 57          0465*      ld d,a
0B0A76 4F          0466*      ld c,a
0B0A77 6F          0467*      ld l,a
0B0A78 5F          0468*      ld e,a
0B0A79             0469*  
0B0A79             0470*      ;Iteration 1
0B0A79 29          0471*      add hl,hl
0B0A7A CB 11       0472*      rl c
0B0A7C 29          0473*      add hl,hl
0B0A7D CB 11       0474*      rl c
0B0A7F 91          0475*      sub c
0B0A80 30 04       0476*      jr nc,$+6
0B0A82 1C          0477*      inc e
0B0A83 1C          0478*      inc e
0B0A84 2F          0479*      cpl
0B0A85 4F          0480*      ld c,a
0B0A86             0481*  
0B0A86             0482*      ;Iteration 2
0B0A86 29          0483*      add hl,hl
0B0A87 CB 11       0484*      rl c
0B0A89 29          0485*      add hl,hl
0B0A8A CB 11       0486*      rl c
0B0A8C CB 13       0487*      rl e
0B0A8E 7B          0488*      ld a,e
0B0A8F 91          0489*      sub c
0B0A90 30 04       0490*      jr nc,$+6
0B0A92 1C          0491*      inc e
0B0A93 1C          0492*      inc e
0B0A94 2F          0493*      cpl
0B0A95 4F          0494*      ld c,a
0B0A96             0495*  
0B0A96             0496*      ;Iteration 3
0B0A96 29          0497*      add hl,hl
0B0A97 CB 11       0498*      rl c
0B0A99 29          0499*      add hl,hl
0B0A9A CB 11       0500*      rl c
0B0A9C CB 13       0501*      rl e
0B0A9E 7B          0502*      ld a,e
0B0A9F 91          0503*      sub c
0B0AA0 30 04       0504*      jr nc,$+6
0B0AA2 1C          0505*      inc e
0B0AA3 1C          0506*      inc e
0B0AA4 2F          0507*      cpl
0B0AA5 4F          0508*      ld c,a
0B0AA6             0509*  
0B0AA6             0510*      ;Iteration 4
0B0AA6 29          0511*      add hl,hl
0B0AA7 CB 11       0512*      rl c
0B0AA9 29          0513*      add hl,hl
0B0AAA CB 11       0514*      rl c
0B0AAC CB 13       0515*      rl e
0B0AAE 7B          0516*      ld a,e
0B0AAF 91          0517*      sub c
0B0AB0 30 04       0518*      jr nc,$+6
0B0AB2 1C          0519*      inc e
0B0AB3 1C          0520*      inc e
0B0AB4 2F          0521*      cpl
0B0AB5 4F          0522*      ld c,a
0B0AB6             0523*  
0B0AB6             0524*      ;Iteration 5
0B0AB6 29          0525*      add hl,hl
0B0AB7 CB 11       0526*      rl c
0B0AB9 29          0527*      add hl,hl
0B0ABA CB 11       0528*      rl c
0B0ABC CB 13       0529*      rl e
0B0ABE 7B          0530*      ld a,e
0B0ABF 91          0531*      sub c
0B0AC0 30 04       0532*      jr nc,$+6
0B0AC2 1C          0533*      inc e
0B0AC3 1C          0534*      inc e
0B0AC4 2F          0535*      cpl
0B0AC5 4F          0536*      ld c,a
0B0AC6             0537*  
0B0AC6             0538*      ;Iteration 6
0B0AC6 29          0539*      add hl,hl
0B0AC7 CB 11       0540*      rl c
0B0AC9 29          0541*      add hl,hl
0B0ACA CB 11       0542*      rl c
0B0ACC CB 13       0543*      rl e
0B0ACE 7B          0544*      ld a,e
0B0ACF 91          0545*      sub c
0B0AD0 30 04       0546*      jr nc,$+6
0B0AD2 1C          0547*      inc e
0B0AD3 1C          0548*      inc e
0B0AD4 2F          0549*      cpl
0B0AD5 4F          0550*      ld c,a
0B0AD6             0551*  
0B0AD6             0552*      ;Iteration 7
0B0AD6 29          0553*      add hl,hl
0B0AD7 CB 11       0554*      rl c
0B0AD9 29          0555*      add hl,hl
0B0ADA CB 11       0556*      rl c
0B0ADC CB 10       0557*      rl b
0B0ADE EB          0558*      ex de,hl
0B0ADF 29          0559*      add hl,hl
0B0AE0 E5          0560*      push hl
0B0AE1 ED 42       0561*      sbc hl,bc
0B0AE3 30 06       0562*      jr nc,$+8
0B0AE5 7C          0563*      ld a,h
0B0AE6 2F          0564*      cpl
0B0AE7 47          0565*      ld b,a
0B0AE8 7D          0566*      ld a,l
0B0AE9 2F          0567*      cpl
0B0AEA 4F          0568*      ld c,a
0B0AEB E1          0569*      pop hl
0B0AEC 30 02       0570*      jr nc,$+4
0B0AEE 23          0571*      inc hl
0B0AEF 23          0572*      inc hl
0B0AF0 EB          0573*      ex de,hl
0B0AF1             0574*  
0B0AF1             0575*      ;Iteration 8
0B0AF1 29          0576*      add hl,hl
0B0AF2 69          0577*      ld l,c
0B0AF3 60          0578*      ld h,b
0B0AF4 ED 6A       0579*      adc hl,hl
0B0AF6 ED 6A       0580*      adc hl,hl
0B0AF8 EB          0581*      ex de,hl
0B0AF9 29          0582*      add hl,hl
0B0AFA ED 52       0583*      sbc hl,de
0B0AFC 19          0584*      add hl,de
0B0AFD EB          0585*      ex de,hl
0B0AFE 30 04       0586*      jr nc,$+6
0B0B00 ED 52       0587*      sbc hl,de
0B0B02 13          0588*      inc de
0B0B03 13          0589*      inc de
0B0B04             0590*  
0B0B04             0591*      ;Iteration 9
0B0B04 F1          0592*      pop af
0B0B05 17          0593*      rla
0B0B06 ED 6A       0594*      adc hl,hl
0B0B08 17          0595*      rla
0B0B09 ED 6A       0596*      adc hl,hl
0B0B0B EB          0597*      ex de,hl
0B0B0C 29          0598*      add hl,hl
0B0B0D ED 52       0599*      sbc hl,de
0B0B0F 19          0600*      add hl,de
0B0B10 EB          0601*      ex de,hl
0B0B11 30 04       0602*      jr nc,$+6
0B0B13 ED 52       0603*      sbc hl,de
0B0B15 13          0604*      inc de
0B0B16 13          0605*      inc de
0B0B17             0606*  
0B0B17             0607*      ;Iteration 10
0B0B17 17          0608*      rla
0B0B18 ED 6A       0609*      adc hl,hl
0B0B1A 17          0610*      rla
0B0B1B ED 6A       0611*      adc hl,hl
0B0B1D EB          0612*      ex de,hl
0B0B1E 29          0613*      add hl,hl
0B0B1F ED 52       0614*      sbc hl,de
0B0B21 19          0615*      add hl,de
0B0B22 EB          0616*      ex de,hl
0B0B23 30 04       0617*      jr nc,$+6
0B0B25 ED 52       0618*      sbc hl,de
0B0B27 13          0619*      inc de
0B0B28 13          0620*      inc de
0B0B29             0621*  
0B0B29             0622*      ;Iteration 11
0B0B29 17          0623*      rla
0B0B2A ED 6A       0624*      adc hl,hl
0B0B2C 17          0625*      rla
0B0B2D ED 6A       0626*      adc hl,hl
0B0B2F EB          0627*      ex de,hl
0B0B30 29          0628*      add hl,hl
0B0B31 ED 52       0629*      sbc hl,de
0B0B33 19          0630*      add hl,de
0B0B34 EB          0631*      ex de,hl
0B0B35 30 04       0632*      jr nc,$+6
0B0B37 ED 52       0633*      sbc hl,de
0B0B39 13          0634*      inc de
0B0B3A 13          0635*      inc de
0B0B3B             0636*  
0B0B3B             0637*      ;Iteration 11
0B0B3B 17          0638*      rla
0B0B3C ED 6A       0639*      adc hl,hl
0B0B3E 17          0640*      rla
0B0B3F ED 6A       0641*      adc hl,hl
0B0B41 EB          0642*      ex de,hl
0B0B42 29          0643*      add hl,hl
0B0B43 ED 52       0644*      sbc hl,de
0B0B45 19          0645*      add hl,de
0B0B46 EB          0646*      ex de,hl
0B0B47 30 04       0647*      jr nc,$+6
0B0B49 ED 52       0648*      sbc hl,de
0B0B4B 13          0649*      inc de
0B0B4C 13          0650*      inc de
0B0B4D             0651*  
0B0B4D CB 1A       0652*      rr d
0B0B4F CB 1B       0653*      rr e
0B0B51 C9          0654*      ret
0B0B52             0022       include "trig24.inc"
0B0B52             0001*  
0B0B52             0002*  ; convert unsigned angles from a 360 to 255 degree circle
0B0B52             0003*  ; inputs: uh.l is the angle360 in 16.8 fixed format
0B0B52             0004*  ; outputs: uh.l is the angle255 in 16.8 fixed format
0B0B52             0005*  ; destroys: TODO
0B0B52             0006*  ; note: even though the inputs and outputs are 16.8 fixed format
0B0B52             0007*  ;       precision is effectively limited to 8.8 fixed format
0B0B52             0008*  deg_360_to_255:
0B0B52             0009*  	; call printNewLine
0B0B52             0010*  	; call dumpRegistersHex
0B0B52             0011*  ; clear scratch buffer
0B0B52 11 00 00 00 0012*  	ld de,0
0B0B56 ED 53 82 0B 0013*  	ld (@scratch),de
       0B          
0B0B5B             0014*  ; divide uh.l by 360
0B0B5B 11 68 01 00 0015*  	ld de,360
0B0B5F             0016*  ; get integer portion
0B0B5F CD 47 09 0B 0017*  	call udiv24 ; DEU AND BCU = HLU / DEU, remainder in HLU
0B0B63 ED 53 89 0B 0018*  	ld (@output+1),de ; shift result up one byte
       0B          
0B0B68             0019*  ; get fractional portion
0B0B68 22 83 0B 0B 0020*  	ld (@scratch+1),hl ; shift remainder up one byte
0B0B6C 2A 82 0B 0B 0021*  	ld hl,(@scratch)
0B0B70 11 68 01 00 0022*  	ld de,360
0B0B74 CD 47 09 0B 0023*  	call udiv24 ; DEU AND BCU = HLU / DEU, remainder in HLU
0B0B78 7B          0024*  	ld a,e ; lowest byte is all we need
0B0B79 32 88 0B 0B 0025*  	ld (@output),a
0B0B7D             0026*  ; we want the low 3 bytes for 16.8 output
0B0B7D 2A 88 0B 0B 0027*  	ld hl,(@output)
0B0B81             0028*  	; call dumpRegistersHex
0B0B81 C9          0029*  	ret
0B0B82             0030*  @scratch: ds 6 ; scratch buffer for shifting bytes
0B0B88             0031*  @output: ds 6 ; scratch buffer to accumulate output
0B0B8E             0032*  
0B0B8E             0033*  ; fixed 16.8 routine
0B0B8E             0034*  ; cos(uh.l) --> uh.l
0B0B8E             0035*  ; destroys: de
0B0B8E             0036*  cos168:
0B0B8E             0037*  ; for cos we simply increment the angle by 90 degrees
0B0B8E             0038*  ; or 0x004000 in 16.8 degrees256
0B0B8E             0039*  ; which makes it a sin problem
0B0B8E 11 00 40 00 0040*      ld de,0x004000
0B0B92 19          0041*      add hl,de ; modulo 256 happens below
0B0B93             0042*  ; fall through to sin168
0B0B93             0043*  
0B0B93             0044*  ; ---------------------
0B0B93             0045*  ; fixed 16.8 routine
0B0B93             0046*  ; sin(uh.l) --> uh.l
0B0B93             0047*  ; destroys: de
0B0B93             0048*  sin168:
0B0B93 CD 88 02 0B 0049*  	call printNewLine
0B0B97             0050*  	; call dumpRegistersHex
0B0B97             0051*  ; get the lookup value for the integer portion of the angle
0B0B97 7D          0052*  	ld a,l ; save fractional part of the angle
0B0B98 2E 03       0053*  	ld l,3 ; multiply by 3 to get our lookup index
0B0B9A ED 6C       0054*  	mlt hl ; gosh that is handy
0B0B9C 11 10 0D 0B 0055*      ld de,sin_lut_168 ; grab the lut address
0B0BA0 19          0056*      add hl,de ; bump hl by the index
0B0BA1 E5          0057*  	push hl
0B0BA2 D1          0058*  	pop de ; de also has the lut address
0B0BA3 ED 27       0059*      ld hl,(hl) ; hl = sin(int(angle))
0B0BA5             0060*  
0B0BA5             0061*  ; interpolate the fractional part of the angle
0B0BA5 B7          0062*  	or a  ; check for zero and clear carry
0B0BA6 C8          0063*  	ret z ; return if no fractional part
0B0BA7 EB          0064*  	ex de,hl ; hl = lut address, de = sin(int(angle))
0B0BA8 23          0065*  	inc hl
0B0BA9 23          0066*  	inc hl
0B0BAA 23          0067*  	inc hl ; hl = lut address of next value in table
0B0BAB             0068*  	; call dumpRegistersHex
0B0BAB ED 27       0069*  	ld hl,(hl) ; hl = sin(int(angle+1))
0B0BAD CD 5E 05 0B 0070*  	call dumpRegistersHex
0B0BB1 ED 52       0071*  	sbc hl,de ; hl = sin(int(angle+1)0 - sin(int(angle)), de = sin(int(angle))
0B0BB3 CD 5E 05 0B 0072*  	call dumpRegistersHex
0B0BB7 CD 66 08 0B 0073*  	call smul24x8 ; hl = interpolation factor * (sin(int(angle+1)) - sin(int(angle))) * 256
0B0BBB CD B9 07 0B 0074*  	call hlu_sdiv256 ; hl = interpolation factor * (sin(int(angle+1)) - sin(int(angle)))
0B0BBF CD 5E 05 0B 0075*  	call dumpRegistersHex
0B0BC3 19          0076*  	add hl,de ; hl = sin(int(angle)) + interpolation factor * (sin(int(angle+1)) - sin(int(angle)))
0B0BC4 CD 5E 05 0B 0077*  	call dumpRegistersHex
0B0BC8 C9          0078*      ret ; and out
0B0BC9             0079*  
0B0BC9             0080*  ; 16.8 fixed inputs / outputs
0B0BC9             0081*  ; takes: uh.l as angle in degrees 256
0B0BC9             0082*  ;        ud.e as radius
0B0BC9             0083*  ; returns ub.c as dx, ud.e as dy
0B0BC9             0084*  ;        displacements from origin (0,0)
0B0BC9             0085*  ; destroys: everything except indexes
0B0BC9             0086*  polar_to_cartesian:
0B0BC9             0087*  ; back up input parameters
0B0BC9 22 3C 08 0B 0088*      ld (arith24uhl), hl
0B0BCD ED 53 48 08 0089*      ld (arith24ude), de
       0B          
0B0BD2             0090*  ; compute dx = sin(uh.l) * ud.e
0B0BD2 CD 93 0B 0B 0091*      call sin168
0B0BD6 E5          0092*      push hl
0B0BD7 C1          0093*      pop bc          ; ub.c = sin(uh.l)
0B0BD8 ED 5B 48 08 0094*  	ld de, (arith24ude)   ; get radius back
       0B          
0B0BDD CD 0B 09 0B 0095*  	call smul168    ; uh.l = ub.c * ud.e = dx
0B0BE1 E5          0096*      push hl         ; store dx for output
0B0BE2             0097*  ; compute dy = -cos(uh.l) * ud.e
0B0BE2 2A 3C 08 0B 0098*      ld hl, (arith24uhl)
0B0BE6 CD 8E 0B 0B 0099*      call cos168
0B0BEA CD 7D 07 0B 0100*  	call neg_hlu    ; invert dy for screen coords convention
0B0BEE E5          0101*      push hl
0B0BEF C1          0102*      pop bc          ; ub.c = -cos(uh.l)
0B0BF0 ED 5B 48 08 0103*      ld de, (arith24ude)   ; get radius back
       0B          
0B0BF5 CD 0B 09 0B 0104*      call smul168    ; uh.l = ub.c * ud.e = dy
0B0BF9 EB          0105*      ex de, hl       ; de = dy for output
0B0BFA C1          0106*      pop bc          ; bc = dx for output
0B0BFB             0107*  ; and out
0B0BFB C9          0108*      ret
0B0BFC             0109*  
0B0BFC             0110*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
0B0BFC             0111*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
0B0BFC             0112*  ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
0B0BFC             0113*  ;         also populates scratch locations dx168 and dy168
0B0BFC             0114*  ; destroys: a,hl,bc,de
0B0BFC             0115*  dxy168:
0B0BFC             0116*  ; compute dx = x1-x0
0B0BFC AF          0117*      xor a ; clear carry
0B0BFD DD E5       0118*      push ix ; move ix to hl via the stack
0B0BFF E1          0119*      pop hl ; hl = x1
0B0C00 ED 42       0120*      sbc hl,bc ; hl = dx
0B0C02 22 57 0C 0B 0121*      ld (dx168),hl ; dx to scratch
0B0C06             0122*  ; compute dy = y1-y0
0B0C06 AF          0123*      xor a ; clear carry
0B0C07 FD E5       0124*      push iy ; move iy to hl via the stack
0B0C09 E1          0125*      pop hl ; hl = y1
0B0C0A ED 52       0126*      sbc hl,de ; hl = dy
0B0C0C 22 5D 0C 0B 0127*      ld (dy168),hl ; dy to scratch
0B0C10             0128*  ; populate output registers and return
0B0C10 EB          0129*      ex de,hl        ; ud.e = dy
0B0C11 ED 4B 57 0C 0130*      ld bc,(dx168)   ; ub.c = dx
       0B          
0B0C16 C9          0131*      ret
0B0C17             0132*  
0B0C17             0133*  ; compute the euclidian distance between two cartesian coordinates
0B0C17             0134*  ; using the formula d = sqrt(dx^2+dy^2
0B0C17             0135*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
0B0C17             0136*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
0B0C17             0137*  ; output; uh.l is the 16.8 fixed format distance
0B0C17             0138*  ;       dx168/y are the 16.8 fixed format dx and dy
0B0C17             0139*  ; destroys: a,hl,bc,de
0B0C17             0140*  distance168:
0B0C17             0141*  ; compute dx = x1-x0
0B0C17 AF          0142*      xor a ; clear carry
0B0C18 DD E5       0143*      push ix ; move ix to hl via the stack
0B0C1A E1          0144*      pop hl ; hl = x1
0B0C1B ED 42       0145*      sbc hl,bc ; hl = dx
0B0C1D 22 57 0C 0B 0146*      ld (dx168),hl ; dx to scratch
0B0C21             0147*  ; ; test dx for overflow
0B0C21             0148*  ; 	ld de,0x007F00 ; max positive 16.8 value we can square without overflow
0B0C21             0149*  ; 	ex de,hl
0B0C21             0150*  ; 	sbc hl,de ; test for overflow
0B0C21             0151*  ; 	push af ; carry indicates overflow
0B0C21             0152*  ; compute dy = y1-y0
0B0C21 AF          0153*      xor a ; clear carry
0B0C22 FD E5       0154*      push iy ; move iy to hl via the stack
0B0C24 E1          0155*      pop hl ; hl = y1
0B0C25 ED 52       0156*      sbc hl,de ; hl = dy
0B0C27 22 5D 0C 0B 0157*      ld (dy168),hl ; dy to scratch
0B0C2B             0158*  ; ; test dy for overflow
0B0C2B             0159*  ; 	ld de,0x007F00 ; max positive 16.8 value we can square without overflow
0B0C2B             0160*  ; 	ex de,hl
0B0C2B             0161*  ; 	sbc hl,de ; test for overflow
0B0C2B             0162*  ; 	push af ; carry indicates overflow
0B0C2B             0163*  ; compute dy^2
0B0C2B 2A 5D 0C 0B 0164*  	ld hl,(dy168)
0B0C2F CD 6D 07 0B 0165*      call abs_hlu  ; make dy positive so we can use unsigned multiply
0B0C33             0166*      ; call hlu_div2 ; divide hlu by 2 to give us some headroom
0B0C33 E5          0167*      push hl ; load hl/2 to bc via the stack
0B0C34 C1          0168*      pop bc ; bc = dy/2
0B0C35 EB          0169*      ex de,hl ; de = dy/2
0B0C36 CD 03 09 0B 0170*      call umul168 ; uh.l = dy^2/2
0B0C3A E5          0171*      push hl ; dy^2/2 to the stack
0B0C3B             0172*  ; compute dx^2
0B0C3B 2A 57 0C 0B 0173*      ld hl,(dx168) ; get back dx
0B0C3F CD 6D 07 0B 0174*      call abs_hlu  ; make dx positive so we can use unsigned multiply
0B0C43             0175*      ; call hlu_div2 ; divide hlu by 2 to give us some headroom
0B0C43 E5          0176*      push hl ; load hl/2 to bc via the stack
0B0C44 C1          0177*      pop bc ; bc = dx/2
0B0C45 EB          0178*      ex de,hl ; de = dx/2
0B0C46 CD 03 09 0B 0179*      call umul168 ; uh.l = dx^2/2
0B0C4A             0180*  ; commpute dy^2+dx^2
0B0C4A D1          0181*      pop de ; get back dx^2/2
0B0C4B 19          0182*      add hl,de ; hl = dx^2/2+dy^2/2
0B0C4C             0183*  ; compute sqrt(dx^2/2+dy^2/2)
0B0C4C CD 67 0A 0B 0184*      call sqrt168 ; uh.l = distance/2
0B0C50             0185*      ; add hl,hl ; hl = distance
0B0C50             0186*  ; ; check for overflow
0B0C50             0187*  ; 	pop af ; get back the overflow flags
0B0C50             0188*  ; 	sbc a,a ; will be -1 if overflow, 0 if not
0B0C50             0189*  ; 	ld b,a ; save the overflow flag
0B0C50             0190*  ; 	pop af ; get back the overflow flags
0B0C50             0191*  ; 	sbc a,a ; will be -1 if overflow, 0 if not
0B0C50             0192*  ; 	add a,b ; if a != 0 then we had overflow
0B0C50             0193*  ;     ret z ; no overflow we're done
0B0C50             0194*  ; @overflow:
0B0C50             0195*  ; 	ld hl,0x7FFFFF ; max positive 16.8 fixed value indicates overflow
0B0C50 C9          0196*  	ret
0B0C51             0197*  @scratch: ds 6
0B0C57             0198*  dx168: ds 6
0B0C5D             0199*  dy168: ds 6
0B0C63             0200*  
0B0C63             0201*  ; atan2(ub.c,ud.e) --> uh.l
0B0C63             0202*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0B0C63             0203*  ;   whether inputs are integers or fractional doesn't matter
0B0C63             0204*  ;   so long as the sign bit of the upper byte is correct
0B0C63             0205*  ; output: uh.l is the 16.8 fixed angle in degrees 256
0B0C63             0206*  ; angles are COMPASS HEADINGS based on
0B0C63             0207*  ; screen coordinate conventions,where the y axis is flipped
0B0C63             0208*  ; #E0 315      0       45 #20
0B0C63             0209*  ;        -x,-y | +x,-y
0B0C63             0210*  ; #C0 270------+------ 90 #40
0B0C63             0211*  ;        -x,+y | +x,+y
0B0C63             0212*  ; #A0 225   180 #80   135 #60
0B0C63             0213*  atan2_168game:
0B0C63             0214*  ; get signs and make everything positive
0B0C63             0215*  ; get abs(x) and store its original sign
0B0C63 C5          0216*      push bc
0B0C64 E1          0217*      pop hl
0B0C65 CD 6D 07 0B 0218*      call abs_hlu ; if x was negative this also sets the sign flag
0B0C69 E5          0219*      push hl ; store abs(x)
0B0C6A C1          0220*      pop bc ; bc = abs(x)
0B0C6B F5          0221*      push af ; store sign of x
0B0C6C             0222*  ; get abs(y) and store its original sign
0B0C6C EB          0223*      ex de,hl ; hl = y
0B0C6D CD 6D 07 0B 0224*      call abs_hlu ; if y was negative this also sets the sign flag
0B0C71 EB          0225*      ex de,hl ; de = abs(y)
0B0C72 F5          0226*      push af ; store sign of y
0B0C73             0227*  ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
0B0C73             0228*  ; this ensures that our lookup value is between 0 and 1 inclusive
0B0C73 AF          0229*      xor a ; clear the carry flag
0B0C74 D5          0230*      push de
0B0C75 E1          0231*      pop hl
0B0C76 ED 42       0232*      sbc hl,bc
0B0C78 F5          0233*      push af ; save sign of de - bc
0B0C79 F2 82 0C 0B 0234*      jp p,@1 ; bc <= de, so we skip ahead
0B0C7D             0235*  ; otherwise we swap bc and de
0B0C7D C5          0236*      push bc
0B0C7E E1          0237*      pop hl
0B0C7F EB          0238*      ex de,hl
0B0C80 E5          0239*      push hl
0B0C81 C1          0240*      pop bc
0B0C82             0241*  @1:
0B0C82             0242*  ; now we're ready to snag our preliminary result
0B0C82 CD F0 0C 0B 0243*      call atan_168game ; uh.l comes back with prelim result
0B0C86             0244*  ; now we adjust uh.l based on sign of de - bc
0B0C86 F1          0245*      pop af
0B0C87 F2 93 0C 0B 0246*      jp p,@2 ; bc <= de,so we skip ahead
0B0C8B EB          0247*      ex de,hl
0B0C8C 21 00 40 00 0248*      ld hl,0x004000 ; 90 degrees
0B0C90 AF          0249*      xor a ; clear the carry flag
0B0C91 ED 52       0250*      sbc hl,de ; subtract result from 90 degrees
0B0C93             0251*      ; ld de,0 ; prep to clear hlu
0B0C93             0252*      ; ld d,h
0B0C93             0253*      ; ld e,l
0B0C93             0254*      ; ex de,hl ; now we have 0 <= uh.l < 256 in 16.8 fixed format
0B0C93             0255*      ; fall through
0B0C93             0256*  @2:
0B0C93             0257*  ; now the fun part of adjusting the result
0B0C93             0258*  ; based on which quadrant (x,y) is in
0B0C93             0259*  ; #E0 315      0       45 #20
0B0C93             0260*  ;        -x,-y | +x,-y
0B0C93             0261*  ; #C0 270------+------ 90 #40
0B0C93             0262*  ;        -x,+y | +x,+y
0B0C93             0263*  ; #A0 225   180 #80   135 #60
0B0C93 F1          0264*      pop af ; sign of y
0B0C94 CA D1 0C 0B 0265*      jp z,@y_zero
0B0C98 F2 B1 0C 0B 0266*      jp p,@y_pos
0B0C9C             0267*  ; y neg,check x
0B0C9C F1          0268*      pop af ; sign of x
0B0C9D CA AB 0C 0B 0269*      jp z,@y_neg_x_zero
0B0CA1 F2 B0 0C 0B 0270*      jp p,@y_neg_x_pos
0B0CA5             0271*  ; y neg,x neg
0B0CA5             0272*  ; angle is 270-360
0B0CA5             0273*  ; negating the intermediate does the trick
0B0CA5 CD 7D 07 0B 0274*      call neg_hlu
0B0CA9 18 31       0275*      jr @zero_hlu
0B0CAB             0276*  
0B0CAB             0277*  @y_neg_x_zero:
0B0CAB             0278*  ; y neg,x zero
0B0CAB             0279*  ; angle is 0
0B0CAB 21 00 00 00 0280*      ld hl,0
0B0CAF C9          0281*      ret
0B0CB0             0282*  @y_neg_x_pos:
0B0CB0             0283*  ; y neg,x pos
0B0CB0             0284*  ; angle is 0 to 90
0B0CB0             0285*  ; so we're good
0B0CB0 C9          0286*      ret
0B0CB1             0287*  
0B0CB1             0288*  @y_pos:
0B0CB1 F1          0289*      pop af ; sign of x
0B0CB2 CA C1 0C 0B 0290*      jp z,@y_pos_x_zero
0B0CB6 F2 C6 0C 0B 0291*      jp p,@y_pos_x_pos
0B0CBA             0292*  ; y pos,x neg
0B0CBA             0293*  ; angle is 180-270
0B0CBA             0294*  ; so we add 180 to intermediate
0B0CBA 11 00 80 00 0295*      ld de,0x008000
0B0CBE 19          0296*      add hl,de
0B0CBF 18 1B       0297*      jr @zero_hlu
0B0CC1             0298*  @y_pos_x_zero:
0B0CC1             0299*  ; y pos,x zero
0B0CC1             0300*  ; angle is 180
0B0CC1 21 00 80 00 0301*      ld hl,0x008000
0B0CC5 C9          0302*      ret
0B0CC6             0303*  @y_pos_x_pos:
0B0CC6             0304*  ; y pos,x pos
0B0CC6             0305*  ; angle is 90-180
0B0CC6             0306*  ; neg the intermediate and add 180 degrees
0B0CC6 CD 7D 07 0B 0307*      call neg_hlu
0B0CCA 11 00 80 00 0308*      ld de,0x008000
0B0CCE 19          0309*      add hl,de
0B0CCF 18 0B       0310*      jr @zero_hlu
0B0CD1             0311*  
0B0CD1             0312*  @y_zero:
0B0CD1 F1          0313*      pop af ; sign of x
0B0CD2 FA D7 0C 0B 0314*      jp m,@y_zero_x_neg
0B0CD6             0315*  ; y zero,x pos
0B0CD6             0316*  ; angle is 90,nothing to do
0B0CD6 C9          0317*      ret
0B0CD7             0318*  @y_zero_x_neg:
0B0CD7             0319*  ; y zero ,x neg
0B0CD7             0320*  ; angle is 270
0B0CD7 21 00 C0 00 0321*      ld hl,0x00C000
0B0CDB C9          0322*      ret
0B0CDC             0323*  @zero_hlu:
0B0CDC AF          0324*      xor a
0B0CDD 22 EA 0C 0B 0325*      ld (@scratch),hl
0B0CE1 32 EC 0C 0B 0326*      ld (@scratch+2),a
0B0CE5 2A EA 0C 0B 0327*      ld hl,(@scratch)
0B0CE9 C9          0328*      ret
0B0CEA             0329*  @scratch: ds 6
0B0CF0             0330*  
0B0CF0             0331*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0B0CF0             0332*  ; output: uh.l is the 16.8 fixed format angle
0B0CF0             0333*  ; destroys: a,hl,bc,de
0B0CF0             0334*  ; the following note was written by github copilot:
0B0CF0             0335*  ; note: this routine is a bit of a hack
0B0CF0             0336*  ;      but it works
0B0CF0             0337*  ;      and it's fast
0B0CF0             0338*  ;      and it's small
0B0CF0             0339*  ;      and it's accurate
0B0CF0             0340*  ;      and it's easy to understand
0B0CF0             0341*  ;      and it's easy to modify
0B0CF0             0342*  ;      and it's easy to use
0B0CF0             0343*  ;      and it's easy to remember
0B0CF0             0344*  ;      and it's easy to love
0B0CF0             0345*  ;      and it's easy to hate
0B0CF0             0346*  ;      and it's easy to ignore
0B0CF0             0347*  ;      and it's easy to forget
0B0CF0             0348*  ;      and it's easy to remember
0B0CF0             0349*  ;      and it's easy to forget
0B0CF0             0350*  ;      and it's easy to remember
0B0CF0             0351*  ;      (ok the bot is stuck in a loop)
0B0CF0             0352*  ; REAL NOTE: only works for angles from 0 to 45 degrees
0B0CF0             0353*  ;   use atan2_168 (which calls this proc) to handle the full 360 degrees
0B0CF0             0354*  atan_168game:
0B0CF0             0355*  ; because we use compass headings instead of geometric angles
0B0CF0             0356*  ; we compute dx/dy which is 1/tan(theta) in the maths world
0B0CF0             0357*  ; we can do faster unsigned division here because we know dx and dy are positive
0B0CF0 CD 6B 09 0B 0358*  	call udiv168 ; uh.l = dx/dy
0B0CF4             0359*  ; ; TODO: IMPLEMENT THIS, RIGHT NOW IS IS BUGGED
0B0CF4             0360*  ; ; test uh.l for 0
0B0CF4             0361*  ;     add hl,de
0B0CF4             0362*  ;     or a
0B0CF4             0363*  ;     sbc hl,de
0B0CF4             0364*  ;     jr z,@is_zero
0B0CF4             0365*  ; ; test uh.l for 1
0B0CF4             0366*  ;     xor a ; clear carry
0B0CF4             0367*  ;     ex de,hl
0B0CF4             0368*  ;     ld hl,0x000100 ; 1 in 16.8 fixed format
0B0CF4             0369*  ;     sbc hl,de
0B0CF4             0370*  ;     jr z,@is_45
0B0CF4             0371*  ; ; END TODO
0B0CF4             0372*  
0B0CF4             0373*  ; no special cases so we move on
0B0CF4             0374*  ; l contains the fractional portion of tan(uh.l)
0B0CF4             0375*  ; we multiply it by three to get our lookup table index
0B0CF4 26 03       0376*      ld h,3
0B0CF6 ED 6C       0377*      mlt hl ; gosh that is handy
0B0CF8 11 00 00 00 0378*      ld de,0 ; clear deu
0B0CFC 54          0379*      ld d,h ; copy hl to de
0B0CFD 5D          0380*      ld e,l ; de contains our index
0B0CFE 21 13 10 0B 0381*      ld hl,atan_lut_168 ; grab the lut address
0B0D02 19          0382*      add hl,de ; bump hl by the index
0B0D03 ED 27       0383*      ld hl,(hl) ; don't try this on a z80!
0B0D05 C9          0384*      ret ; and out
0B0D06             0385*  @is_45:
0B0D06 21 00 20 00 0386*      ld hl,0x002000 ; 45 degrees decimal
0B0D0A C9          0387*      ret
0B0D0B             0388*  ; for the case tan(0)
0B0D0B             0389*  @is_zero:
0B0D0B 21 00 00 00 0390*      ld hl,0x000000
0B0D0F C9          0391*      ret
0B0D10             0392*  
0B0D10             0393*  
0B0D10             0394*  sin_lut_168:
0B0D10 00 00 00    0395*  	dl 0x000000 ; 0.000 00, 0.000
0B0D13 06 00 00    0396*  	dl 0x000006 ; 1.406 01, 0.025
0B0D16 0C 00 00    0397*  	dl 0x00000C ; 2.813 02, 0.049
0B0D19 12 00 00    0398*  	dl 0x000012 ; 4.219 03, 0.074
0B0D1C 19 00 00    0399*  	dl 0x000019 ; 5.625 04, 0.098
0B0D1F 1F 00 00    0400*  	dl 0x00001F ; 7.031 05, 0.122
0B0D22 25 00 00    0401*  	dl 0x000025 ; 8.438 06, 0.147
0B0D25 2B 00 00    0402*  	dl 0x00002B ; 9.844 07, 0.171
0B0D28 31 00 00    0403*  	dl 0x000031 ; 11.250 08, 0.195
0B0D2B 38 00 00    0404*  	dl 0x000038 ; 12.656 09, 0.219
0B0D2E 3E 00 00    0405*  	dl 0x00003E ; 14.063 0A, 0.243
0B0D31 44 00 00    0406*  	dl 0x000044 ; 15.469 0B, 0.267
0B0D34 4A 00 00    0407*  	dl 0x00004A ; 16.875 0C, 0.290
0B0D37 50 00 00    0408*  	dl 0x000050 ; 18.281 0D, 0.314
0B0D3A 56 00 00    0409*  	dl 0x000056 ; 19.688 0E, 0.337
0B0D3D 5C 00 00    0410*  	dl 0x00005C ; 21.094 0F, 0.360
0B0D40 61 00 00    0411*  	dl 0x000061 ; 22.500 10, 0.383
0B0D43 67 00 00    0412*  	dl 0x000067 ; 23.906 11, 0.405
0B0D46 6D 00 00    0413*  	dl 0x00006D ; 25.313 12, 0.428
0B0D49 73 00 00    0414*  	dl 0x000073 ; 26.719 13, 0.450
0B0D4C 78 00 00    0415*  	dl 0x000078 ; 28.125 14, 0.471
0B0D4F 7E 00 00    0416*  	dl 0x00007E ; 29.531 15, 0.493
0B0D52 83 00 00    0417*  	dl 0x000083 ; 30.938 16, 0.514
0B0D55 88 00 00    0418*  	dl 0x000088 ; 32.344 17, 0.535
0B0D58 8E 00 00    0419*  	dl 0x00008E ; 33.750 18, 0.556
0B0D5B 93 00 00    0420*  	dl 0x000093 ; 35.156 19, 0.576
0B0D5E 98 00 00    0421*  	dl 0x000098 ; 36.563 1A, 0.596
0B0D61 9D 00 00    0422*  	dl 0x00009D ; 37.969 1B, 0.615
0B0D64 A2 00 00    0423*  	dl 0x0000A2 ; 39.375 1C, 0.634
0B0D67 A7 00 00    0424*  	dl 0x0000A7 ; 40.781 1D, 0.653
0B0D6A AB 00 00    0425*  	dl 0x0000AB ; 42.188 1E, 0.672
0B0D6D B0 00 00    0426*  	dl 0x0000B0 ; 43.594 1F, 0.690
0B0D70 B5 00 00    0427*  	dl 0x0000B5 ; 45.000 20, 0.707
0B0D73 B9 00 00    0428*  	dl 0x0000B9 ; 46.406 21, 0.724
0B0D76 BD 00 00    0429*  	dl 0x0000BD ; 47.813 22, 0.741
0B0D79 C1 00 00    0430*  	dl 0x0000C1 ; 49.219 23, 0.757
0B0D7C C5 00 00    0431*  	dl 0x0000C5 ; 50.625 24, 0.773
0B0D7F C9 00 00    0432*  	dl 0x0000C9 ; 52.031 25, 0.788
0B0D82 CD 00 00    0433*  	dl 0x0000CD ; 53.438 26, 0.803
0B0D85 D1 00 00    0434*  	dl 0x0000D1 ; 54.844 27, 0.818
0B0D88 D4 00 00    0435*  	dl 0x0000D4 ; 56.250 28, 0.831
0B0D8B D8 00 00    0436*  	dl 0x0000D8 ; 57.656 29, 0.845
0B0D8E DB 00 00    0437*  	dl 0x0000DB ; 59.063 2A, 0.858
0B0D91 DE 00 00    0438*  	dl 0x0000DE ; 60.469 2B, 0.870
0B0D94 E1 00 00    0439*  	dl 0x0000E1 ; 61.875 2C, 0.882
0B0D97 E4 00 00    0440*  	dl 0x0000E4 ; 63.281 2D, 0.893
0B0D9A E7 00 00    0441*  	dl 0x0000E7 ; 64.688 2E, 0.904
0B0D9D EA 00 00    0442*  	dl 0x0000EA ; 66.094 2F, 0.914
0B0DA0 EC 00 00    0443*  	dl 0x0000EC ; 67.500 30, 0.924
0B0DA3 EE 00 00    0444*  	dl 0x0000EE ; 68.906 31, 0.933
0B0DA6 F1 00 00    0445*  	dl 0x0000F1 ; 70.313 32, 0.942
0B0DA9 F3 00 00    0446*  	dl 0x0000F3 ; 71.719 33, 0.950
0B0DAC F4 00 00    0447*  	dl 0x0000F4 ; 73.125 34, 0.957
0B0DAF F6 00 00    0448*  	dl 0x0000F6 ; 74.531 35, 0.964
0B0DB2 F8 00 00    0449*  	dl 0x0000F8 ; 75.938 36, 0.970
0B0DB5 F9 00 00    0450*  	dl 0x0000F9 ; 77.344 37, 0.976
0B0DB8 FB 00 00    0451*  	dl 0x0000FB ; 78.750 38, 0.981
0B0DBB FC 00 00    0452*  	dl 0x0000FC ; 80.156 39, 0.985
0B0DBE FD 00 00    0453*  	dl 0x0000FD ; 81.563 3A, 0.989
0B0DC1 FE 00 00    0454*  	dl 0x0000FE ; 82.969 3B, 0.992
0B0DC4 FE 00 00    0455*  	dl 0x0000FE ; 84.375 3C, 0.995
0B0DC7 FF 00 00    0456*  	dl 0x0000FF ; 85.781 3D, 0.997
0B0DCA FF 00 00    0457*  	dl 0x0000FF ; 87.188 3E, 0.999
0B0DCD FF 00 00    0458*  	dl 0x0000FF ; 88.594 3F, 1.000
0B0DD0 00 01 00    0459*  	dl 0x000100 ; 90.000 40, 1.000
0B0DD3 FF 00 00    0460*  	dl 0x0000FF ; 91.406 41, 1.000
0B0DD6 FF 00 00    0461*  	dl 0x0000FF ; 92.813 42, 0.999
0B0DD9 FF 00 00    0462*  	dl 0x0000FF ; 94.219 43, 0.997
0B0DDC FE 00 00    0463*  	dl 0x0000FE ; 95.625 44, 0.995
0B0DDF FE 00 00    0464*  	dl 0x0000FE ; 97.031 45, 0.992
0B0DE2 FD 00 00    0465*  	dl 0x0000FD ; 98.438 46, 0.989
0B0DE5 FC 00 00    0466*  	dl 0x0000FC ; 99.844 47, 0.985
0B0DE8 FB 00 00    0467*  	dl 0x0000FB ; 101.250 48, 0.981
0B0DEB F9 00 00    0468*  	dl 0x0000F9 ; 102.656 49, 0.976
0B0DEE F8 00 00    0469*  	dl 0x0000F8 ; 104.063 4A, 0.970
0B0DF1 F6 00 00    0470*  	dl 0x0000F6 ; 105.469 4B, 0.964
0B0DF4 F4 00 00    0471*  	dl 0x0000F4 ; 106.875 4C, 0.957
0B0DF7 F3 00 00    0472*  	dl 0x0000F3 ; 108.281 4D, 0.950
0B0DFA F1 00 00    0473*  	dl 0x0000F1 ; 109.688 4E, 0.942
0B0DFD EE 00 00    0474*  	dl 0x0000EE ; 111.094 4F, 0.933
0B0E00 EC 00 00    0475*  	dl 0x0000EC ; 112.500 50, 0.924
0B0E03 EA 00 00    0476*  	dl 0x0000EA ; 113.906 51, 0.914
0B0E06 E7 00 00    0477*  	dl 0x0000E7 ; 115.313 52, 0.904
0B0E09 E4 00 00    0478*  	dl 0x0000E4 ; 116.719 53, 0.893
0B0E0C E1 00 00    0479*  	dl 0x0000E1 ; 118.125 54, 0.882
0B0E0F DE 00 00    0480*  	dl 0x0000DE ; 119.531 55, 0.870
0B0E12 DB 00 00    0481*  	dl 0x0000DB ; 120.938 56, 0.858
0B0E15 D8 00 00    0482*  	dl 0x0000D8 ; 122.344 57, 0.845
0B0E18 D4 00 00    0483*  	dl 0x0000D4 ; 123.750 58, 0.831
0B0E1B D1 00 00    0484*  	dl 0x0000D1 ; 125.156 59, 0.818
0B0E1E CD 00 00    0485*  	dl 0x0000CD ; 126.563 5A, 0.803
0B0E21 C9 00 00    0486*  	dl 0x0000C9 ; 127.969 5B, 0.788
0B0E24 C5 00 00    0487*  	dl 0x0000C5 ; 129.375 5C, 0.773
0B0E27 C1 00 00    0488*  	dl 0x0000C1 ; 130.781 5D, 0.757
0B0E2A BD 00 00    0489*  	dl 0x0000BD ; 132.188 5E, 0.741
0B0E2D B9 00 00    0490*  	dl 0x0000B9 ; 133.594 5F, 0.724
0B0E30 B5 00 00    0491*  	dl 0x0000B5 ; 135.000 60, 0.707
0B0E33 B0 00 00    0492*  	dl 0x0000B0 ; 136.406 61, 0.690
0B0E36 AB 00 00    0493*  	dl 0x0000AB ; 137.813 62, 0.672
0B0E39 A7 00 00    0494*  	dl 0x0000A7 ; 139.219 63, 0.653
0B0E3C A2 00 00    0495*  	dl 0x0000A2 ; 140.625 64, 0.634
0B0E3F 9D 00 00    0496*  	dl 0x00009D ; 142.031 65, 0.615
0B0E42 98 00 00    0497*  	dl 0x000098 ; 143.438 66, 0.596
0B0E45 93 00 00    0498*  	dl 0x000093 ; 144.844 67, 0.576
0B0E48 8E 00 00    0499*  	dl 0x00008E ; 146.250 68, 0.556
0B0E4B 88 00 00    0500*  	dl 0x000088 ; 147.656 69, 0.535
0B0E4E 83 00 00    0501*  	dl 0x000083 ; 149.063 6A, 0.514
0B0E51 7E 00 00    0502*  	dl 0x00007E ; 150.469 6B, 0.493
0B0E54 78 00 00    0503*  	dl 0x000078 ; 151.875 6C, 0.471
0B0E57 73 00 00    0504*  	dl 0x000073 ; 153.281 6D, 0.450
0B0E5A 6D 00 00    0505*  	dl 0x00006D ; 154.688 6E, 0.428
0B0E5D 67 00 00    0506*  	dl 0x000067 ; 156.094 6F, 0.405
0B0E60 61 00 00    0507*  	dl 0x000061 ; 157.500 70, 0.383
0B0E63 5C 00 00    0508*  	dl 0x00005C ; 158.906 71, 0.360
0B0E66 56 00 00    0509*  	dl 0x000056 ; 160.313 72, 0.337
0B0E69 50 00 00    0510*  	dl 0x000050 ; 161.719 73, 0.314
0B0E6C 4A 00 00    0511*  	dl 0x00004A ; 163.125 74, 0.290
0B0E6F 44 00 00    0512*  	dl 0x000044 ; 164.531 75, 0.267
0B0E72 3E 00 00    0513*  	dl 0x00003E ; 165.938 76, 0.243
0B0E75 38 00 00    0514*  	dl 0x000038 ; 167.344 77, 0.219
0B0E78 31 00 00    0515*  	dl 0x000031 ; 168.750 78, 0.195
0B0E7B 2B 00 00    0516*  	dl 0x00002B ; 170.156 79, 0.171
0B0E7E 25 00 00    0517*  	dl 0x000025 ; 171.563 7A, 0.147
0B0E81 1F 00 00    0518*  	dl 0x00001F ; 172.969 7B, 0.122
0B0E84 19 00 00    0519*  	dl 0x000019 ; 174.375 7C, 0.098
0B0E87 12 00 00    0520*  	dl 0x000012 ; 175.781 7D, 0.074
0B0E8A 0C 00 00    0521*  	dl 0x00000C ; 177.188 7E, 0.049
0B0E8D 06 00 00    0522*  	dl 0x000006 ; 178.594 7F, 0.025
0B0E90 00 00 00    0523*  	dl 0x000000 ; 180.000 80, 0.000
0B0E93 FA FF FF    0524*  	dl 0xFFFFFA ; 181.406 81, -0.025
0B0E96 F4 FF FF    0525*  	dl 0xFFFFF4 ; 182.813 82, -0.049
0B0E99 EE FF FF    0526*  	dl 0xFFFFEE ; 184.219 83, -0.074
0B0E9C E7 FF FF    0527*  	dl 0xFFFFE7 ; 185.625 84, -0.098
0B0E9F E1 FF FF    0528*  	dl 0xFFFFE1 ; 187.031 85, -0.122
0B0EA2 DB FF FF    0529*  	dl 0xFFFFDB ; 188.438 86, -0.147
0B0EA5 D5 FF FF    0530*  	dl 0xFFFFD5 ; 189.844 87, -0.171
0B0EA8 CF FF FF    0531*  	dl 0xFFFFCF ; 191.250 88, -0.195
0B0EAB C8 FF FF    0532*  	dl 0xFFFFC8 ; 192.656 89, -0.219
0B0EAE C2 FF FF    0533*  	dl 0xFFFFC2 ; 194.063 8A, -0.243
0B0EB1 BC FF FF    0534*  	dl 0xFFFFBC ; 195.469 8B, -0.267
0B0EB4 B6 FF FF    0535*  	dl 0xFFFFB6 ; 196.875 8C, -0.290
0B0EB7 B0 FF FF    0536*  	dl 0xFFFFB0 ; 198.281 8D, -0.314
0B0EBA AA FF FF    0537*  	dl 0xFFFFAA ; 199.688 8E, -0.337
0B0EBD A4 FF FF    0538*  	dl 0xFFFFA4 ; 201.094 8F, -0.360
0B0EC0 9F FF FF    0539*  	dl 0xFFFF9F ; 202.500 90, -0.383
0B0EC3 99 FF FF    0540*  	dl 0xFFFF99 ; 203.906 91, -0.405
0B0EC6 93 FF FF    0541*  	dl 0xFFFF93 ; 205.313 92, -0.428
0B0EC9 8D FF FF    0542*  	dl 0xFFFF8D ; 206.719 93, -0.450
0B0ECC 88 FF FF    0543*  	dl 0xFFFF88 ; 208.125 94, -0.471
0B0ECF 82 FF FF    0544*  	dl 0xFFFF82 ; 209.531 95, -0.493
0B0ED2 7D FF FF    0545*  	dl 0xFFFF7D ; 210.938 96, -0.514
0B0ED5 78 FF FF    0546*  	dl 0xFFFF78 ; 212.344 97, -0.535
0B0ED8 72 FF FF    0547*  	dl 0xFFFF72 ; 213.750 98, -0.556
0B0EDB 6D FF FF    0548*  	dl 0xFFFF6D ; 215.156 99, -0.576
0B0EDE 68 FF FF    0549*  	dl 0xFFFF68 ; 216.563 9A, -0.596
0B0EE1 63 FF FF    0550*  	dl 0xFFFF63 ; 217.969 9B, -0.615
0B0EE4 5E FF FF    0551*  	dl 0xFFFF5E ; 219.375 9C, -0.634
0B0EE7 59 FF FF    0552*  	dl 0xFFFF59 ; 220.781 9D, -0.653
0B0EEA 55 FF FF    0553*  	dl 0xFFFF55 ; 222.188 9E, -0.672
0B0EED 50 FF FF    0554*  	dl 0xFFFF50 ; 223.594 9F, -0.690
0B0EF0 4B FF FF    0555*  	dl 0xFFFF4B ; 225.000 A0, -0.707
0B0EF3 47 FF FF    0556*  	dl 0xFFFF47 ; 226.406 A1, -0.724
0B0EF6 43 FF FF    0557*  	dl 0xFFFF43 ; 227.813 A2, -0.741
0B0EF9 3F FF FF    0558*  	dl 0xFFFF3F ; 229.219 A3, -0.757
0B0EFC 3B FF FF    0559*  	dl 0xFFFF3B ; 230.625 A4, -0.773
0B0EFF 37 FF FF    0560*  	dl 0xFFFF37 ; 232.031 A5, -0.788
0B0F02 33 FF FF    0561*  	dl 0xFFFF33 ; 233.438 A6, -0.803
0B0F05 2F FF FF    0562*  	dl 0xFFFF2F ; 234.844 A7, -0.818
0B0F08 2C FF FF    0563*  	dl 0xFFFF2C ; 236.250 A8, -0.831
0B0F0B 28 FF FF    0564*  	dl 0xFFFF28 ; 237.656 A9, -0.845
0B0F0E 25 FF FF    0565*  	dl 0xFFFF25 ; 239.063 AA, -0.858
0B0F11 22 FF FF    0566*  	dl 0xFFFF22 ; 240.469 AB, -0.870
0B0F14 1F FF FF    0567*  	dl 0xFFFF1F ; 241.875 AC, -0.882
0B0F17 1C FF FF    0568*  	dl 0xFFFF1C ; 243.281 AD, -0.893
0B0F1A 19 FF FF    0569*  	dl 0xFFFF19 ; 244.688 AE, -0.904
0B0F1D 16 FF FF    0570*  	dl 0xFFFF16 ; 246.094 AF, -0.914
0B0F20 14 FF FF    0571*  	dl 0xFFFF14 ; 247.500 B0, -0.924
0B0F23 12 FF FF    0572*  	dl 0xFFFF12 ; 248.906 B1, -0.933
0B0F26 0F FF FF    0573*  	dl 0xFFFF0F ; 250.313 B2, -0.942
0B0F29 0D FF FF    0574*  	dl 0xFFFF0D ; 251.719 B3, -0.950
0B0F2C 0C FF FF    0575*  	dl 0xFFFF0C ; 253.125 B4, -0.957
0B0F2F 0A FF FF    0576*  	dl 0xFFFF0A ; 254.531 B5, -0.964
0B0F32 08 FF FF    0577*  	dl 0xFFFF08 ; 255.938 B6, -0.970
0B0F35 07 FF FF    0578*  	dl 0xFFFF07 ; 257.344 B7, -0.976
0B0F38 05 FF FF    0579*  	dl 0xFFFF05 ; 258.750 B8, -0.981
0B0F3B 04 FF FF    0580*  	dl 0xFFFF04 ; 260.156 B9, -0.985
0B0F3E 03 FF FF    0581*  	dl 0xFFFF03 ; 261.563 BA, -0.989
0B0F41 02 FF FF    0582*  	dl 0xFFFF02 ; 262.969 BB, -0.992
0B0F44 02 FF FF    0583*  	dl 0xFFFF02 ; 264.375 BC, -0.995
0B0F47 01 FF FF    0584*  	dl 0xFFFF01 ; 265.781 BD, -0.997
0B0F4A 01 FF FF    0585*  	dl 0xFFFF01 ; 267.188 BE, -0.999
0B0F4D 01 FF FF    0586*  	dl 0xFFFF01 ; 268.594 BF, -1.000
0B0F50 00 FF FF    0587*  	dl 0xFFFF00 ; 270.000 C0, -1.000
0B0F53 01 FF FF    0588*  	dl 0xFFFF01 ; 271.406 C1, -1.000
0B0F56 01 FF FF    0589*  	dl 0xFFFF01 ; 272.813 C2, -0.999
0B0F59 01 FF FF    0590*  	dl 0xFFFF01 ; 274.219 C3, -0.997
0B0F5C 02 FF FF    0591*  	dl 0xFFFF02 ; 275.625 C4, -0.995
0B0F5F 02 FF FF    0592*  	dl 0xFFFF02 ; 277.031 C5, -0.992
0B0F62 03 FF FF    0593*  	dl 0xFFFF03 ; 278.438 C6, -0.989
0B0F65 04 FF FF    0594*  	dl 0xFFFF04 ; 279.844 C7, -0.985
0B0F68 05 FF FF    0595*  	dl 0xFFFF05 ; 281.250 C8, -0.981
0B0F6B 07 FF FF    0596*  	dl 0xFFFF07 ; 282.656 C9, -0.976
0B0F6E 08 FF FF    0597*  	dl 0xFFFF08 ; 284.063 CA, -0.970
0B0F71 0A FF FF    0598*  	dl 0xFFFF0A ; 285.469 CB, -0.964
0B0F74 0C FF FF    0599*  	dl 0xFFFF0C ; 286.875 CC, -0.957
0B0F77 0D FF FF    0600*  	dl 0xFFFF0D ; 288.281 CD, -0.950
0B0F7A 0F FF FF    0601*  	dl 0xFFFF0F ; 289.688 CE, -0.942
0B0F7D 12 FF FF    0602*  	dl 0xFFFF12 ; 291.094 CF, -0.933
0B0F80 14 FF FF    0603*  	dl 0xFFFF14 ; 292.500 D0, -0.924
0B0F83 16 FF FF    0604*  	dl 0xFFFF16 ; 293.906 D1, -0.914
0B0F86 19 FF FF    0605*  	dl 0xFFFF19 ; 295.313 D2, -0.904
0B0F89 1C FF FF    0606*  	dl 0xFFFF1C ; 296.719 D3, -0.893
0B0F8C 1F FF FF    0607*  	dl 0xFFFF1F ; 298.125 D4, -0.882
0B0F8F 22 FF FF    0608*  	dl 0xFFFF22 ; 299.531 D5, -0.870
0B0F92 25 FF FF    0609*  	dl 0xFFFF25 ; 300.938 D6, -0.858
0B0F95 28 FF FF    0610*  	dl 0xFFFF28 ; 302.344 D7, -0.845
0B0F98 2C FF FF    0611*  	dl 0xFFFF2C ; 303.750 D8, -0.831
0B0F9B 2F FF FF    0612*  	dl 0xFFFF2F ; 305.156 D9, -0.818
0B0F9E 33 FF FF    0613*  	dl 0xFFFF33 ; 306.563 DA, -0.803
0B0FA1 37 FF FF    0614*  	dl 0xFFFF37 ; 307.969 DB, -0.788
0B0FA4 3B FF FF    0615*  	dl 0xFFFF3B ; 309.375 DC, -0.773
0B0FA7 3F FF FF    0616*  	dl 0xFFFF3F ; 310.781 DD, -0.757
0B0FAA 43 FF FF    0617*  	dl 0xFFFF43 ; 312.188 DE, -0.741
0B0FAD 47 FF FF    0618*  	dl 0xFFFF47 ; 313.594 DF, -0.724
0B0FB0 4B FF FF    0619*  	dl 0xFFFF4B ; 315.000 E0, -0.707
0B0FB3 50 FF FF    0620*  	dl 0xFFFF50 ; 316.406 E1, -0.690
0B0FB6 55 FF FF    0621*  	dl 0xFFFF55 ; 317.813 E2, -0.672
0B0FB9 59 FF FF    0622*  	dl 0xFFFF59 ; 319.219 E3, -0.653
0B0FBC 5E FF FF    0623*  	dl 0xFFFF5E ; 320.625 E4, -0.634
0B0FBF 63 FF FF    0624*  	dl 0xFFFF63 ; 322.031 E5, -0.615
0B0FC2 68 FF FF    0625*  	dl 0xFFFF68 ; 323.438 E6, -0.596
0B0FC5 6D FF FF    0626*  	dl 0xFFFF6D ; 324.844 E7, -0.576
0B0FC8 72 FF FF    0627*  	dl 0xFFFF72 ; 326.250 E8, -0.556
0B0FCB 78 FF FF    0628*  	dl 0xFFFF78 ; 327.656 E9, -0.535
0B0FCE 7D FF FF    0629*  	dl 0xFFFF7D ; 329.063 EA, -0.514
0B0FD1 82 FF FF    0630*  	dl 0xFFFF82 ; 330.469 EB, -0.493
0B0FD4 88 FF FF    0631*  	dl 0xFFFF88 ; 331.875 EC, -0.471
0B0FD7 8D FF FF    0632*  	dl 0xFFFF8D ; 333.281 ED, -0.450
0B0FDA 93 FF FF    0633*  	dl 0xFFFF93 ; 334.688 EE, -0.428
0B0FDD 99 FF FF    0634*  	dl 0xFFFF99 ; 336.094 EF, -0.405
0B0FE0 9F FF FF    0635*  	dl 0xFFFF9F ; 337.500 F0, -0.383
0B0FE3 A4 FF FF    0636*  	dl 0xFFFFA4 ; 338.906 F1, -0.360
0B0FE6 AA FF FF    0637*  	dl 0xFFFFAA ; 340.313 F2, -0.337
0B0FE9 B0 FF FF    0638*  	dl 0xFFFFB0 ; 341.719 F3, -0.314
0B0FEC B6 FF FF    0639*  	dl 0xFFFFB6 ; 343.125 F4, -0.290
0B0FEF BC FF FF    0640*  	dl 0xFFFFBC ; 344.531 F5, -0.267
0B0FF2 C2 FF FF    0641*  	dl 0xFFFFC2 ; 345.938 F6, -0.243
0B0FF5 C8 FF FF    0642*  	dl 0xFFFFC8 ; 347.344 F7, -0.219
0B0FF8 CF FF FF    0643*  	dl 0xFFFFCF ; 348.750 F8, -0.195
0B0FFB D5 FF FF    0644*  	dl 0xFFFFD5 ; 350.156 F9, -0.171
0B0FFE DB FF FF    0645*  	dl 0xFFFFDB ; 351.563 FA, -0.147
0B1001 E1 FF FF    0646*  	dl 0xFFFFE1 ; 352.969 FB, -0.122
0B1004 E7 FF FF    0647*  	dl 0xFFFFE7 ; 354.375 FC, -0.098
0B1007 EE FF FF    0648*  	dl 0xFFFFEE ; 355.781 FD, -0.074
0B100A F4 FF FF    0649*  	dl 0xFFFFF4 ; 357.188 FE, -0.049
0B100D FA FF FF    0650*  	dl 0xFFFFFA ; 358.594 FF, -0.025
0B1010 00 00 00    0651*  	dl 0x000000 ; 0.000 00, 0.000 for interpolation
0B1013             0652*  
0B1013             0653*  atan_lut_168:
0B1013 00 00 00    0654*  	dl 0x000000 ; 000000, 0.000
0B1016 28 00 00    0655*  	dl 0x000028 ; 000001, 0.224
0B1019 51 00 00    0656*  	dl 0x000051 ; 000002, 0.448
0B101C 7A 00 00    0657*  	dl 0x00007A ; 000003, 0.671
0B101F A2 00 00    0658*  	dl 0x0000A2 ; 000004, 0.895
0B1022 CB 00 00    0659*  	dl 0x0000CB ; 000005, 1.119
0B1025 F4 00 00    0660*  	dl 0x0000F4 ; 000006, 1.343
0B1028 1D 01 00    0661*  	dl 0x00011D ; 000007, 1.566
0B102B 45 01 00    0662*  	dl 0x000145 ; 000008, 1.790
0B102E 6E 01 00    0663*  	dl 0x00016E ; 000009, 2.013
0B1031 97 01 00    0664*  	dl 0x000197 ; 00000A, 2.237
0B1034 BF 01 00    0665*  	dl 0x0001BF ; 00000B, 2.460
0B1037 E8 01 00    0666*  	dl 0x0001E8 ; 00000C, 2.684
0B103A 11 02 00    0667*  	dl 0x000211 ; 00000D, 2.907
0B103D 39 02 00    0668*  	dl 0x000239 ; 00000E, 3.130
0B1040 62 02 00    0669*  	dl 0x000262 ; 00000F, 3.353
0B1043 8B 02 00    0670*  	dl 0x00028B ; 000010, 3.576
0B1046 B3 02 00    0671*  	dl 0x0002B3 ; 000011, 3.799
0B1049 DC 02 00    0672*  	dl 0x0002DC ; 000012, 4.022
0B104C 04 03 00    0673*  	dl 0x000304 ; 000013, 4.245
0B104F 2D 03 00    0674*  	dl 0x00032D ; 000014, 4.467
0B1052 55 03 00    0675*  	dl 0x000355 ; 000015, 4.690
0B1055 7E 03 00    0676*  	dl 0x00037E ; 000016, 4.912
0B1058 A6 03 00    0677*  	dl 0x0003A6 ; 000017, 5.134
0B105B CE 03 00    0678*  	dl 0x0003CE ; 000018, 5.356
0B105E F7 03 00    0679*  	dl 0x0003F7 ; 000019, 5.578
0B1061 1F 04 00    0680*  	dl 0x00041F ; 00001A, 5.799
0B1064 48 04 00    0681*  	dl 0x000448 ; 00001B, 6.021
0B1067 70 04 00    0682*  	dl 0x000470 ; 00001C, 6.242
0B106A 98 04 00    0683*  	dl 0x000498 ; 00001D, 6.463
0B106D C0 04 00    0684*  	dl 0x0004C0 ; 00001E, 6.684
0B1070 E8 04 00    0685*  	dl 0x0004E8 ; 00001F, 6.905
0B1073 11 05 00    0686*  	dl 0x000511 ; 000020, 7.125
0B1076 39 05 00    0687*  	dl 0x000539 ; 000021, 7.345
0B1079 61 05 00    0688*  	dl 0x000561 ; 000022, 7.565
0B107C 89 05 00    0689*  	dl 0x000589 ; 000023, 7.785
0B107F B1 05 00    0690*  	dl 0x0005B1 ; 000024, 8.005
0B1082 D9 05 00    0691*  	dl 0x0005D9 ; 000025, 8.224
0B1085 01 06 00    0692*  	dl 0x000601 ; 000026, 8.443
0B1088 28 06 00    0693*  	dl 0x000628 ; 000027, 8.662
0B108B 50 06 00    0694*  	dl 0x000650 ; 000028, 8.881
0B108E 78 06 00    0695*  	dl 0x000678 ; 000029, 9.099
0B1091 A0 06 00    0696*  	dl 0x0006A0 ; 00002A, 9.317
0B1094 C7 06 00    0697*  	dl 0x0006C7 ; 00002B, 9.535
0B1097 EF 06 00    0698*  	dl 0x0006EF ; 00002C, 9.752
0B109A 16 07 00    0699*  	dl 0x000716 ; 00002D, 9.970
0B109D 3E 07 00    0700*  	dl 0x00073E ; 00002E, 10.187
0B10A0 65 07 00    0701*  	dl 0x000765 ; 00002F, 10.403
0B10A3 8D 07 00    0702*  	dl 0x00078D ; 000030, 10.620
0B10A6 B4 07 00    0703*  	dl 0x0007B4 ; 000031, 10.836
0B10A9 DB 07 00    0704*  	dl 0x0007DB ; 000032, 11.051
0B10AC 03 08 00    0705*  	dl 0x000803 ; 000033, 11.267
0B10AF 2A 08 00    0706*  	dl 0x00082A ; 000034, 11.482
0B10B2 51 08 00    0707*  	dl 0x000851 ; 000035, 11.697
0B10B5 78 08 00    0708*  	dl 0x000878 ; 000036, 11.911
0B10B8 9F 08 00    0709*  	dl 0x00089F ; 000037, 12.125
0B10BB C6 08 00    0710*  	dl 0x0008C6 ; 000038, 12.339
0B10BE ED 08 00    0711*  	dl 0x0008ED ; 000039, 12.553
0B10C1 13 09 00    0712*  	dl 0x000913 ; 00003A, 12.766
0B10C4 3A 09 00    0713*  	dl 0x00093A ; 00003B, 12.978
0B10C7 61 09 00    0714*  	dl 0x000961 ; 00003C, 13.191
0B10CA 87 09 00    0715*  	dl 0x000987 ; 00003D, 13.403
0B10CD AE 09 00    0716*  	dl 0x0009AE ; 00003E, 13.614
0B10D0 D4 09 00    0717*  	dl 0x0009D4 ; 00003F, 13.825
0B10D3 FB 09 00    0718*  	dl 0x0009FB ; 000040, 14.036
0B10D6 21 0A 00    0719*  	dl 0x000A21 ; 000041, 14.247
0B10D9 47 0A 00    0720*  	dl 0x000A47 ; 000042, 14.457
0B10DC 6D 0A 00    0721*  	dl 0x000A6D ; 000043, 14.666
0B10DF 94 0A 00    0722*  	dl 0x000A94 ; 000044, 14.876
0B10E2 BA 0A 00    0723*  	dl 0x000ABA ; 000045, 15.085
0B10E5 E0 0A 00    0724*  	dl 0x000AE0 ; 000046, 15.293
0B10E8 05 0B 00    0725*  	dl 0x000B05 ; 000047, 15.501
0B10EB 2B 0B 00    0726*  	dl 0x000B2B ; 000048, 15.709
0B10EE 51 0B 00    0727*  	dl 0x000B51 ; 000049, 15.916
0B10F1 77 0B 00    0728*  	dl 0x000B77 ; 00004A, 16.123
0B10F4 9C 0B 00    0729*  	dl 0x000B9C ; 00004B, 16.329
0B10F7 C2 0B 00    0730*  	dl 0x000BC2 ; 00004C, 16.535
0B10FA E7 0B 00    0731*  	dl 0x000BE7 ; 00004D, 16.740
0B10FD 0C 0C 00    0732*  	dl 0x000C0C ; 00004E, 16.945
0B1100 32 0C 00    0733*  	dl 0x000C32 ; 00004F, 17.150
0B1103 57 0C 00    0734*  	dl 0x000C57 ; 000050, 17.354
0B1106 7C 0C 00    0735*  	dl 0x000C7C ; 000051, 17.558
0B1109 A1 0C 00    0736*  	dl 0x000CA1 ; 000052, 17.761
0B110C C6 0C 00    0737*  	dl 0x000CC6 ; 000053, 17.964
0B110F EB 0C 00    0738*  	dl 0x000CEB ; 000054, 18.166
0B1112 0F 0D 00    0739*  	dl 0x000D0F ; 000055, 18.368
0B1115 34 0D 00    0740*  	dl 0x000D34 ; 000056, 18.569
0B1118 58 0D 00    0741*  	dl 0x000D58 ; 000057, 18.770
0B111B 7D 0D 00    0742*  	dl 0x000D7D ; 000058, 18.970
0B111E A1 0D 00    0743*  	dl 0x000DA1 ; 000059, 19.170
0B1121 C6 0D 00    0744*  	dl 0x000DC6 ; 00005A, 19.370
0B1124 EA 0D 00    0745*  	dl 0x000DEA ; 00005B, 19.569
0B1127 0E 0E 00    0746*  	dl 0x000E0E ; 00005C, 19.767
0B112A 32 0E 00    0747*  	dl 0x000E32 ; 00005D, 19.965
0B112D 56 0E 00    0748*  	dl 0x000E56 ; 00005E, 20.163
0B1130 7A 0E 00    0749*  	dl 0x000E7A ; 00005F, 20.360
0B1133 9E 0E 00    0750*  	dl 0x000E9E ; 000060, 20.556
0B1136 C1 0E 00    0751*  	dl 0x000EC1 ; 000061, 20.752
0B1139 E5 0E 00    0752*  	dl 0x000EE5 ; 000062, 20.947
0B113C 08 0F 00    0753*  	dl 0x000F08 ; 000063, 21.142
0B113F 2C 0F 00    0754*  	dl 0x000F2C ; 000064, 21.337
0B1142 4F 0F 00    0755*  	dl 0x000F4F ; 000065, 21.531
0B1145 72 0F 00    0756*  	dl 0x000F72 ; 000066, 21.724
0B1148 95 0F 00    0757*  	dl 0x000F95 ; 000067, 21.917
0B114B B8 0F 00    0758*  	dl 0x000FB8 ; 000068, 22.109
0B114E DB 0F 00    0759*  	dl 0x000FDB ; 000069, 22.301
0B1151 FE 0F 00    0760*  	dl 0x000FFE ; 00006A, 22.493
0B1154 21 10 00    0761*  	dl 0x001021 ; 00006B, 22.683
0B1157 44 10 00    0762*  	dl 0x001044 ; 00006C, 22.874
0B115A 66 10 00    0763*  	dl 0x001066 ; 00006D, 23.063
0B115D 89 10 00    0764*  	dl 0x001089 ; 00006E, 23.253
0B1160 AB 10 00    0765*  	dl 0x0010AB ; 00006F, 23.441
0B1163 CD 10 00    0766*  	dl 0x0010CD ; 000070, 23.629
0B1166 EF 10 00    0767*  	dl 0x0010EF ; 000071, 23.817
0B1169 11 11 00    0768*  	dl 0x001111 ; 000072, 24.004
0B116C 33 11 00    0769*  	dl 0x001133 ; 000073, 24.191
0B116F 55 11 00    0770*  	dl 0x001155 ; 000074, 24.376
0B1172 77 11 00    0771*  	dl 0x001177 ; 000075, 24.562
0B1175 99 11 00    0772*  	dl 0x001199 ; 000076, 24.747
0B1178 BA 11 00    0773*  	dl 0x0011BA ; 000077, 24.931
0B117B DC 11 00    0774*  	dl 0x0011DC ; 000078, 25.115
0B117E FD 11 00    0775*  	dl 0x0011FD ; 000079, 25.298
0B1181 1E 12 00    0776*  	dl 0x00121E ; 00007A, 25.481
0B1184 3F 12 00    0777*  	dl 0x00123F ; 00007B, 25.663
0B1187 60 12 00    0778*  	dl 0x001260 ; 00007C, 25.844
0B118A 81 12 00    0779*  	dl 0x001281 ; 00007D, 26.025
0B118D A2 12 00    0780*  	dl 0x0012A2 ; 00007E, 26.206
0B1190 C3 12 00    0781*  	dl 0x0012C3 ; 00007F, 26.386
0B1193 E4 12 00    0782*  	dl 0x0012E4 ; 000080, 26.565
0B1196 04 13 00    0783*  	dl 0x001304 ; 000081, 26.744
0B1199 25 13 00    0784*  	dl 0x001325 ; 000082, 26.922
0B119C 45 13 00    0785*  	dl 0x001345 ; 000083, 27.100
0B119F 65 13 00    0786*  	dl 0x001365 ; 000084, 27.277
0B11A2 85 13 00    0787*  	dl 0x001385 ; 000085, 27.453
0B11A5 A5 13 00    0788*  	dl 0x0013A5 ; 000086, 27.629
0B11A8 C5 13 00    0789*  	dl 0x0013C5 ; 000087, 27.805
0B11AB E5 13 00    0790*  	dl 0x0013E5 ; 000088, 27.979
0B11AE 05 14 00    0791*  	dl 0x001405 ; 000089, 28.154
0B11B1 24 14 00    0792*  	dl 0x001424 ; 00008A, 28.327
0B11B4 44 14 00    0793*  	dl 0x001444 ; 00008B, 28.501
0B11B7 63 14 00    0794*  	dl 0x001463 ; 00008C, 28.673
0B11BA 83 14 00    0795*  	dl 0x001483 ; 00008D, 28.845
0B11BD A2 14 00    0796*  	dl 0x0014A2 ; 00008E, 29.017
0B11C0 C1 14 00    0797*  	dl 0x0014C1 ; 00008F, 29.187
0B11C3 E0 14 00    0798*  	dl 0x0014E0 ; 000090, 29.358
0B11C6 FF 14 00    0799*  	dl 0x0014FF ; 000091, 29.527
0B11C9 1E 15 00    0800*  	dl 0x00151E ; 000092, 29.697
0B11CC 3C 15 00    0801*  	dl 0x00153C ; 000093, 29.865
0B11CF 5B 15 00    0802*  	dl 0x00155B ; 000094, 30.033
0B11D2 79 15 00    0803*  	dl 0x001579 ; 000095, 30.201
0B11D5 98 15 00    0804*  	dl 0x001598 ; 000096, 30.368
0B11D8 B6 15 00    0805*  	dl 0x0015B6 ; 000097, 30.534
0B11DB D4 15 00    0806*  	dl 0x0015D4 ; 000098, 30.700
0B11DE F2 15 00    0807*  	dl 0x0015F2 ; 000099, 30.865
0B11E1 10 16 00    0808*  	dl 0x001610 ; 00009A, 31.030
0B11E4 2E 16 00    0809*  	dl 0x00162E ; 00009B, 31.194
0B11E7 4C 16 00    0810*  	dl 0x00164C ; 00009C, 31.357
0B11EA 6A 16 00    0811*  	dl 0x00166A ; 00009D, 31.520
0B11ED 87 16 00    0812*  	dl 0x001687 ; 00009E, 31.682
0B11F0 A5 16 00    0813*  	dl 0x0016A5 ; 00009F, 31.844
0B11F3 C2 16 00    0814*  	dl 0x0016C2 ; 0000A0, 32.005
0B11F6 DF 16 00    0815*  	dl 0x0016DF ; 0000A1, 32.166
0B11F9 FC 16 00    0816*  	dl 0x0016FC ; 0000A2, 32.326
0B11FC 19 17 00    0817*  	dl 0x001719 ; 0000A3, 32.486
0B11FF 36 17 00    0818*  	dl 0x001736 ; 0000A4, 32.645
0B1202 53 17 00    0819*  	dl 0x001753 ; 0000A5, 32.803
0B1205 70 17 00    0820*  	dl 0x001770 ; 0000A6, 32.961
0B1208 8C 17 00    0821*  	dl 0x00178C ; 0000A7, 33.118
0B120B A9 17 00    0822*  	dl 0x0017A9 ; 0000A8, 33.275
0B120E C5 17 00    0823*  	dl 0x0017C5 ; 0000A9, 33.431
0B1211 E2 17 00    0824*  	dl 0x0017E2 ; 0000AA, 33.587
0B1214 FE 17 00    0825*  	dl 0x0017FE ; 0000AB, 33.742
0B1217 1A 18 00    0826*  	dl 0x00181A ; 0000AC, 33.896
0B121A 36 18 00    0827*  	dl 0x001836 ; 0000AD, 34.050
0B121D 52 18 00    0828*  	dl 0x001852 ; 0000AE, 34.203
0B1220 6E 18 00    0829*  	dl 0x00186E ; 0000AF, 34.356
0B1223 8A 18 00    0830*  	dl 0x00188A ; 0000B0, 34.509
0B1226 A5 18 00    0831*  	dl 0x0018A5 ; 0000B1, 34.660
0B1229 C1 18 00    0832*  	dl 0x0018C1 ; 0000B2, 34.811
0B122C DC 18 00    0833*  	dl 0x0018DC ; 0000B3, 34.962
0B122F F7 18 00    0834*  	dl 0x0018F7 ; 0000B4, 35.112
0B1232 13 19 00    0835*  	dl 0x001913 ; 0000B5, 35.262
0B1235 2E 19 00    0836*  	dl 0x00192E ; 0000B6, 35.410
0B1238 49 19 00    0837*  	dl 0x001949 ; 0000B7, 35.559
0B123B 64 19 00    0838*  	dl 0x001964 ; 0000B8, 35.707
0B123E 7F 19 00    0839*  	dl 0x00197F ; 0000B9, 35.854
0B1241 99 19 00    0840*  	dl 0x001999 ; 0000BA, 36.001
0B1244 B4 19 00    0841*  	dl 0x0019B4 ; 0000BB, 36.147
0B1247 CE 19 00    0842*  	dl 0x0019CE ; 0000BC, 36.293
0B124A E9 19 00    0843*  	dl 0x0019E9 ; 0000BD, 36.438
0B124D 03 1A 00    0844*  	dl 0x001A03 ; 0000BE, 36.582
0B1250 1D 1A 00    0845*  	dl 0x001A1D ; 0000BF, 36.726
0B1253 37 1A 00    0846*  	dl 0x001A37 ; 0000C0, 36.870
0B1256 51 1A 00    0847*  	dl 0x001A51 ; 0000C1, 37.013
0B1259 6B 1A 00    0848*  	dl 0x001A6B ; 0000C2, 37.155
0B125C 85 1A 00    0849*  	dl 0x001A85 ; 0000C3, 37.297
0B125F 9F 1A 00    0850*  	dl 0x001A9F ; 0000C4, 37.439
0B1262 B9 1A 00    0851*  	dl 0x001AB9 ; 0000C5, 37.579
0B1265 D2 1A 00    0852*  	dl 0x001AD2 ; 0000C6, 37.720
0B1268 EC 1A 00    0853*  	dl 0x001AEC ; 0000C7, 37.859
0B126B 05 1B 00    0854*  	dl 0x001B05 ; 0000C8, 37.999
0B126E 1E 1B 00    0855*  	dl 0x001B1E ; 0000C9, 38.137
0B1271 37 1B 00    0856*  	dl 0x001B37 ; 0000CA, 38.276
0B1274 50 1B 00    0857*  	dl 0x001B50 ; 0000CB, 38.413
0B1277 69 1B 00    0858*  	dl 0x001B69 ; 0000CC, 38.550
0B127A 82 1B 00    0859*  	dl 0x001B82 ; 0000CD, 38.687
0B127D 9B 1B 00    0860*  	dl 0x001B9B ; 0000CE, 38.823
0B1280 B4 1B 00    0861*  	dl 0x001BB4 ; 0000CF, 38.959
0B1283 CC 1B 00    0862*  	dl 0x001BCC ; 0000D0, 39.094
0B1286 E5 1B 00    0863*  	dl 0x001BE5 ; 0000D1, 39.228
0B1289 FD 1B 00    0864*  	dl 0x001BFD ; 0000D2, 39.362
0B128C 16 1C 00    0865*  	dl 0x001C16 ; 0000D3, 39.496
0B128F 2E 1C 00    0866*  	dl 0x001C2E ; 0000D4, 39.629
0B1292 46 1C 00    0867*  	dl 0x001C46 ; 0000D5, 39.762
0B1295 5E 1C 00    0868*  	dl 0x001C5E ; 0000D6, 39.894
0B1298 76 1C 00    0869*  	dl 0x001C76 ; 0000D7, 40.025
0B129B 8E 1C 00    0870*  	dl 0x001C8E ; 0000D8, 40.156
0B129E A5 1C 00    0871*  	dl 0x001CA5 ; 0000D9, 40.286
0B12A1 BD 1C 00    0872*  	dl 0x001CBD ; 0000DA, 40.416
0B12A4 D5 1C 00    0873*  	dl 0x001CD5 ; 0000DB, 40.546
0B12A7 EC 1C 00    0874*  	dl 0x001CEC ; 0000DC, 40.675
0B12AA 04 1D 00    0875*  	dl 0x001D04 ; 0000DD, 40.803
0B12AD 1B 1D 00    0876*  	dl 0x001D1B ; 0000DE, 40.931
0B12B0 32 1D 00    0877*  	dl 0x001D32 ; 0000DF, 41.059
0B12B3 49 1D 00    0878*  	dl 0x001D49 ; 0000E0, 41.186
0B12B6 60 1D 00    0879*  	dl 0x001D60 ; 0000E1, 41.312
0B12B9 77 1D 00    0880*  	dl 0x001D77 ; 0000E2, 41.438
0B12BC 8E 1D 00    0881*  	dl 0x001D8E ; 0000E3, 41.564
0B12BF A5 1D 00    0882*  	dl 0x001DA5 ; 0000E4, 41.689
0B12C2 BB 1D 00    0883*  	dl 0x001DBB ; 0000E5, 41.814
0B12C5 D2 1D 00    0884*  	dl 0x001DD2 ; 0000E6, 41.938
0B12C8 E9 1D 00    0885*  	dl 0x001DE9 ; 0000E7, 42.061
0B12CB FF 1D 00    0886*  	dl 0x001DFF ; 0000E8, 42.184
0B12CE 15 1E 00    0887*  	dl 0x001E15 ; 0000E9, 42.307
0B12D1 2C 1E 00    0888*  	dl 0x001E2C ; 0000EA, 42.429
0B12D4 42 1E 00    0889*  	dl 0x001E42 ; 0000EB, 42.551
0B12D7 58 1E 00    0890*  	dl 0x001E58 ; 0000EC, 42.672
0B12DA 6E 1E 00    0891*  	dl 0x001E6E ; 0000ED, 42.793
0B12DD 84 1E 00    0892*  	dl 0x001E84 ; 0000EE, 42.913
0B12E0 99 1E 00    0893*  	dl 0x001E99 ; 0000EF, 43.033
0B12E3 AF 1E 00    0894*  	dl 0x001EAF ; 0000F0, 43.152
0B12E6 C5 1E 00    0895*  	dl 0x001EC5 ; 0000F1, 43.271
0B12E9 DA 1E 00    0896*  	dl 0x001EDA ; 0000F2, 43.390
0B12EC F0 1E 00    0897*  	dl 0x001EF0 ; 0000F3, 43.508
0B12EF 05 1F 00    0898*  	dl 0x001F05 ; 0000F4, 43.625
0B12F2 1B 1F 00    0899*  	dl 0x001F1B ; 0000F5, 43.742
0B12F5 30 1F 00    0900*  	dl 0x001F30 ; 0000F6, 43.859
0B12F8 45 1F 00    0901*  	dl 0x001F45 ; 0000F7, 43.975
0B12FB 5A 1F 00    0902*  	dl 0x001F5A ; 0000F8, 44.091
0B12FE 6F 1F 00    0903*  	dl 0x001F6F ; 0000F9, 44.206
0B1301 84 1F 00    0904*  	dl 0x001F84 ; 0000FA, 44.321
0B1304 99 1F 00    0905*  	dl 0x001F99 ; 0000FB, 44.435
0B1307 AD 1F 00    0906*  	dl 0x001FAD ; 0000FC, 44.549
0B130A C2 1F 00    0907*  	dl 0x001FC2 ; 0000FD, 44.662
0B130D D7 1F 00    0908*  	dl 0x001FD7 ; 0000FE, 44.775
0B1310 EB 1F 00    0909*  	dl 0x001FEB ; 0000FF, 44.888
0B1313 00 20 00    0910*  	dl 0x002000 ; 000100, 45.000 only needed for interpolation
0B1316             0023       include "files.inc"
0B1316             0001*  ; load to onboard 8k sram
0B1316             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
0B1316             0024       include "timer.inc"
0B1316             0001*  ; Table 32. Timer Control Registers
0B1316             0002*  ; this constant is the base address of the timer control registers
0B1316             0003*  ; each timer takes three bytes:
0B1316             0004*  ;   0: control register
0B1316             0005*  ;   1: low byte of timer reset value
0B1316             0006*  ;   2: high byte of timer reset value
0B1316             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0B1316             0008*  ; which correctly force the high and upper bytes of the address bus to zero
0B1316             0009*  TMR_CTL:     equ 80h
0B1316             0010*  
0B1316             0011*  ; Timer Control Register Bit Definitions
0B1316             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0B1316             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
0B1316             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0B1316             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
0B1316             0016*                              ; the TMRx_CTL register is read.
0B1316             0017*  
0B1316             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0B1316             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0B1316             0020*  
0B1316             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0B1316             0022*                              ;  0,and counting stops when the end-of-count value is reached.
0B1316             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0B1316             0024*                              ; written to the counter when the end-of-count value is reached.
0B1316             0025*  
0B1316             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0B1316             0027*  CLK_DIV_256:  equ %00001100 ;
0B1316             0028*  CLK_DIV_64:   equ %00001000 ;
0B1316             0029*  CLK_DIV_16:   equ %00000100 ;
0B1316             0030*  CLK_DIV_4:    equ %00000000 ;
0B1316             0031*  
0B1316             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0B1316             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0B1316             0034*                              ; When a 1 is written to this bit,the values in the reload registers
0B1316             0035*                              ;  are loaded into the downcounter when the timer restarts. The
0B1316             0036*                              ; programmer must ensure that this bit is set to 1 each time
0B1316             0037*                              ; SINGLE-PASS mode is used.
0B1316             0038*  
0B1316             0039*  ; disable/enable the programmable reload timer
0B1316             0040*  PRT_EN_0:     equ %00000000 ;
0B1316             0041*  PRT_EN_1:     equ %00000001 ;
0B1316             0042*  
0B1316             0043*  ; Table 37. Timer Input Source Select Register
0B1316             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
0B1316             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0B1316             0046*  ;   00: System clock / CLK_DIV
0B1316             0047*  ;   01: RTC / CLK_DIV
0B1316             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
0B1316             0049*  ;   10: GPIO port B pin 1.
0B1316             0050*  ;   11: GPIO port B pin 1.
0B1316             0051*  TMR_ISS:   equ 92h ; register address
0B1316             0052*  
0B1316             0053*  ; Table 51. Real-Time Clock Control Register
0B1316             0054*  RTC_CTRL: equ EDh ; register address
0B1316             0055*  
0B1316             0056*  ; alarm interrupt disable/enable
0B1316             0057*  RTC_ALARM_0:    equ %00000000
0B1316             0058*  RTC_ALARM_1:    equ %10000000
0B1316             0059*  
0B1316             0060*  ; interrupt on alarm disable/enable
0B1316             0061*  RTC_INT_ENT_0:  equ %00000000
0B1316             0062*  RTC_INT_ENT_1:  equ %01000000
0B1316             0063*  
0B1316             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0B1316             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0B1316             0066*  
0B1316             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0B1316             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
0B1316             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0B1316             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
0B1316             0071*  
0B1316             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0B1316             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0B1316             0074*  
0B1316             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0B1316             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0B1316             0077*  
0B1316             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0B1316             0079*                                  ; RTC counter is enabled.
0B1316             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0B1316             0081*                                  ; RTC counter is disabled.
0B1316             0082*  
0B1316             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0B1316             0084*  
0B1316             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0B1316             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0B1316 00 00 00    0087*  prt_reload: dl 0x000000
0B1319             0088*  
0B1319             0089*  ; ; returns: a = 0 if running on hardware,1 if running on emulator
0B1319             0090*  ; ;          de = number PRT interrupts during test interval
0B1319             0091*  ; prt_calibrate:
0B1319             0092*  ;     call vdu_vblank
0B1319             0093*  ; ; set a MOS timer
0B1319             0094*  ;     ld hl,120*1 ; 1 second
0B1319             0095*  ;     ld iy,tmr_test
0B1319             0096*  ;     call tmr_set
0B1319             0097*  ; ; set a PRT timer
0B1319             0098*  ;     ; ld hl,prt_reload_hardware
0B1319             0099*  ;     ; ld hl,prt_reload_emulator
0B1319             0100*  ;     ld hl,prt_reload_emulator + prt_reload_hardware / 2
0B1319             0101*  ;     ld (prt_reload),hl
0B1319             0102*  ;     call prt_set
0B1319             0103*  ; @loop:
0B1319             0104*  ; ; check time remaining on MOS timer
0B1319             0105*  ;     call tmr_get
0B1319             0106*  ;     jp z,@done ; time expired,so quit
0B1319             0107*  ;     jp m,@done ; time past expiration (negative),so quit
0B1319             0108*  ;     jr @loop
0B1319             0109*  ; @done:
0B1319             0110*  ;     ld de,(prt_irq_counter)
0B1319             0111*  ;     ld bc,prt_reload_hardware ; default value for running on hardware
0B1319             0112*  ;     ld (prt_reload),bc
0B1319             0113*  ;     ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
0B1319             0114*  ;     xor a ; clear carry,zero is default value for running on hardware
0B1319             0115*  ;     ld (is_emulator),a
0B1319             0116*  ;     sbc hl,de
0B1319             0117*  ;     ld hl,on_hardware ; default message for running on hardware
0B1319             0118*  ;     jp z,prt_calibrate ; zero result is indeterminate so we try again
0B1319             0119*  ;     ret m ; negative result means we're on hardware
0B1319             0120*  ;     inc a ; we're on emulator
0B1319             0121*  ;     ld (is_emulator),a
0B1319             0122*  ;     ld bc,prt_reload_emulator
0B1319             0123*  ;     ld (prt_reload),bc
0B1319             0124*  ;     ld hl,on_emulator
0B1319             0125*  ;     ret
0B1319             0126*  
0B1319             0127*  ; calibrating_timer: defb "Calibrating timer\r\n",0
0B1319             0128*  
0B1319             0129*  ; set PRT timer
0B1319             0130*  prt_set:
0B1319 21 00 00 00 0131*      ld hl,0
0B131D 22 67 13 0B 0132*      ld (prt_irq_counter),hl
0B1321 2A 16 13 0B 0133*      ld hl,(prt_reload)
0B1325 ED 29 84    0134*      out0 ($84),l
0B1328 ED 21 85    0135*  	out0 ($85),h
0B132B             0136*  ; disable timer
0B132B 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0B132D ED 39 83    0138*  	out0 ($83),a
0B1330             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0B1330 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0B1332 ED 39 83    0141*  	out0 ($83),a
0B1335 C9          0142*      ret
0B1336             0143*  
0B1336             0144*  ; ===============================================
0B1336             0145*  ; PRT Timer Interrupt Handling
0B1336             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0B1336             0147*  ; -----------------------------------------------
0B1336             0148*  prt_irq_init:
0B1336             0149*      ; set up interrupt vector table 2
0B1336 21 00 00 00 0150*  	ld hl,0
0B133A 3A 0C 01 00 0151*  	ld a,($10c)
0B133E 6F          0152*  	ld l,a
0B133F 3A 0D 01 00 0153*  	ld a,($10d)
0B1343 67          0154*  	ld h,a
0B1344             0155*  
0B1344             0156*  	; skip over CALL ($c3)
0B1344 23          0157*  	inc hl
0B1345             0158*  	; load address of jump into vector table 2 (in ram)
0B1345 ED 27       0159*  	ld hl,(hl)
0B1347             0160*  
0B1347             0161*  	; write CALL prt_irq_handler to vector table 2
0B1347 3E C3       0162*  	ld a,$c3
0B1349 77          0163*  	ld (hl),a
0B134A 23          0164*  	inc hl
0B134B 11 52 13 0B 0165*  	ld de,prt_irq_handler
0B134F ED 1F       0166*  	ld (hl),de
0B1351             0167*  
0B1351 C9          0168*      ret
0B1352             0169*  
0B1352             0170*  prt_irq_handler:
0B1352 F3          0171*  	di
0B1353 F5          0172*  	push af
0B1354 E5          0173*      push hl
0B1355 ED 38 83    0174*  	in0 a,($83)
0B1358 2A 67 13 0B 0175*  	ld hl,(prt_irq_counter)
0B135C 23          0176*  	inc hl
0B135D 22 67 13 0B 0177*  	ld (prt_irq_counter),hl
0B1361 E1          0178*      pop hl
0B1362 F1          0179*  	pop af
0B1363 FB          0180*  	ei
0B1364 5B ED 4D    0181*  	reti.l
0B1367             0182*  
0B1367             0183*  prt_irq_counter:
0B1367 00 00 00    0184*  	.dl 0
0B136A             0185*  prt_irq_counter_saved:
0B136A 00 00 00    0186*      .dl 0
0B136D             0187*  
0B136D             0188*  prt_loop_reset:
0B136D E5          0189*      push hl
0B136E 21 00 00 00 0190*  	ld hl,0
0B1372 22 67 13 0B 0191*  	ld (prt_irq_counter),hl
0B1376 22 D8 13 0B 0192*      ld (prt_loop_counter),hl
0B137A 22 DB 13 0B 0193*      ld (prt_loops),hl
0B137E CD 19 13 0B 0194*      call prt_set
0B1382 E1          0195*      pop hl
0B1383 C9          0196*      ret
0B1384             0197*  
0B1384             0198*  prt_loop_start:
0B1384 E5          0199*      push hl
0B1385 21 00 00 00 0200*  	ld hl,0
0B1389 22 67 13 0B 0201*  	ld (prt_irq_counter),hl
0B138D E1          0202*      pop hl
0B138E C9          0203*      ret
0B138F             0204*  
0B138F             0205*  prt_loop_stop:
0B138F E5          0206*      push hl
0B1390 D5          0207*      push de
0B1391 2A 67 13 0B 0208*      ld hl,(prt_irq_counter)
0B1395 ED 5B D8 13 0209*      ld de,(prt_loop_counter)
       0B          
0B139A 19          0210*      add hl,de
0B139B 22 D8 13 0B 0211*      ld (prt_loop_counter),hl
0B139F 21 00 00 00 0212*      ld hl,0
0B13A3 22 67 13 0B 0213*      ld (prt_irq_counter),hl
0B13A7 2A DB 13 0B 0214*      ld hl,(prt_loops)
0B13AB 23          0215*      inc hl
0B13AC 22 DB 13 0B 0216*      ld (prt_loops),hl
0B13B0 D1          0217*      pop de
0B13B1 E1          0218*      pop hl
0B13B2 C9          0219*      ret
0B13B3             0220*  
0B13B3             0221*  ; inputs: bc = y,x text coordinates to print
0B13B3             0222*  prt_loop_print:
0B13B3 F5          0223*      push af
0B13B4 E5          0224*      push hl
0B13B5 C5          0225*      push bc
0B13B6 D5          0226*      push de
0B13B7 DD E5       0227*      push ix
0B13B9 FD E5       0228*      push iy
0B13BB CD D0 14 0B 0229*      call vdu_move_cursor
0B13BF             0230*  
0B13BF 2A D8 13 0B 0231*      ld hl,(prt_loop_counter)
0B13C3 CD 2B 03 0B 0232*      call printDec
0B13C7             0233*  
0B13C7 2A DB 13 0B 0234*      ld hl,(prt_loops)
0B13CB CD 2B 03 0B 0235*      call printDec
0B13CF             0236*  
0B13CF FD E1       0237*      pop iy
0B13D1 DD E1       0238*      pop ix
0B13D3 D1          0239*      pop de
0B13D4 C1          0240*      pop bc
0B13D5 E1          0241*      pop hl
0B13D6 F1          0242*      pop af
0B13D7 C9          0243*      ret
0B13D8             0244*  
0B13D8             0245*  prt_loop_counter:
0B13D8 00 00 00    0246*      .dl 0
0B13DB             0247*  prt_loops:
0B13DB 00 00 00    0248*      .dl 0
0B13DE             0249*  
0B13DE             0250*  ; ===============================================
0B13DE             0251*  ; Timer functions
0B13DE             0252*  ; -----------------------------------------------
0B13DE             0253*  ; set a countdown timer
0B13DE             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B13DE             0255*  ; returns: hl = current time
0B13DE             0256*  tmr_set:
0B13DE FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
0B13E1             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
0B13E1 3E 08       0001*M 			LD	A, function
0B13E3 5B CF       0002*M 			RST.L	08h
0B13E5 DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
0B13E8 FD 2F 00    0260*      ld (iy+0),hl            ; set start time
0B13EB C9          0261*      ret
0B13EC             0262*  
0B13EC             0263*  ; gets time remaining on a countdown timer
0B13EC             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B13EC             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0B13EC             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
0B13EC             0267*  tmr_get:
0B13EC             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
0B13EC 3E 08       0001*M 			LD	A, function
0B13EE 5B CF       0002*M 			RST.L	08h
0B13F0 DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
0B13F3 FD 27 00    0270*      ld hl,(iy+0)            ; get start time
0B13F6 AF          0271*      xor a                   ; clear carry
0B13F7 ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0B13F9 FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
0B13FC AF          0274*      xor a                   ; clear carry
0B13FD ED 5A       0275*      adc hl,de               ; hl = time remaining
0B13FF             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0B13FF C9          0277*      ret
0B1400             0278*  
0B1400 00 00 00    0279*  timestamp_now: dl 0
0B1403 00 00 00    0280*  timestamp_old: dl 0
0B1406 00 00 00    0281*  timestamp_chg: dl 0
0B1409             0282*  
0B1409             0283*  ; update the global timestamp from the system clock
0B1409             0284*  ; inputs: none
0B1409             0285*  ; returns: hl = time elapsed in 1/120ths of a second
0B1409             0286*  ;          de = current time
0B1409             0287*  ;          ix = pointer to syvars table
0B1409             0288*  ; destroys: af,hl,de,ix
0B1409             0289*  timestamp_tick:
0B1409 ED 5B 00 14 0290*      ld de,(timestamp_now)   ; get previous time
       0B          
0B140E ED 53 03 14 0291*      ld (timestamp_old),de   ; save previous time
       0B          
0B1413             0292*      MOSCALL mos_sysvars     ; ix points to syvars table
0B1413 3E 08       0001*M 			LD	A, function
0B1415 5B CF       0002*M 			RST.L	08h
0B1417 DD 27 00    0293*      ld hl,(ix+sysvar_time)  ; get current time
0B141A 22 00 14 0B 0294*      ld (timestamp_now),hl   ; save current time
0B141E AF          0295*      xor a                   ; clear carry
0B141F ED 52       0296*      sbc hl,de               ; hl = time elapsed
0B1421 22 06 14 0B 0297*      ld (timestamp_chg),hl   ; save elapsed time
0B1425 C9          0298*      ret
0B1426             0299*  
0B1426             0300*  ; set a countdown timer
0B1426             0301*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B1426             0302*  ; requires: timestamp_tick to be called at least once before this function
0B1426             0303*  ; returns: hl = current time
0B1426             0304*  ; destroys: hl
0B1426             0305*  timestamp_tmr_set:
0B1426 FD 2F 03    0306*      ld (iy+3),hl            ; set time remaining
0B1429 2A 00 14 0B 0307*      ld hl,(timestamp_now)   ; get current timestamp
0B142D FD 2F 00    0308*      ld (iy+0),hl            ; set start time
0B1430 C9          0309*      ret
0B1431             0310*  
0B1431             0311*  ; gets time remaining on a countdown timer following the global timestamp
0B1431             0312*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0B1431             0313*  ; requires: timestamp_tick to be called at least once before this function
0B1431             0314*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0B1431             0315*  ;          sign flags: pos = time not expired,zero or neg = time expired
0B1431             0316*  ; destroys: af,hl,de
0B1431             0317*  timestamp_tmr_get:
0B1431 ED 5B 00 14 0318*      ld de,(timestamp_now)   ; get current timestamp
       0B          
0B1436 FD 27 00    0319*      ld hl,(iy+0)            ; get start time
0B1439 AF          0320*      xor a                   ; clear carry
0B143A ED 52       0321*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0B143C FD 17 03    0322*      ld de,(iy+3)            ; get timer set value
0B143F AF          0323*      xor a                   ; clear carry
0B1440 ED 5A       0324*      adc hl,de               ; hl = time remaining
0B1442             0325*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0B1442 C9          0326*      ret
0B1443             0327*  
0B1443             0328*  ; main loop timer functions
0B1443             0329*  tmr_main_loop: ds 6 ; buffer to hold main loop timer
0B1449             0330*  
0B1449             0331*  ; set a countdown timer for the main loop using the timestamp timer
0B1449             0332*  ; inputs: hl = time to set in 1/120ths of a second
0B1449             0333*  ; returns: hl = current time
0B1449             0334*  ; destroys: af,hl,de,ix,iy
0B1449             0335*  tmr_main_loop_set:
0B1449 FD 21 43 14 0336*      ld iy,tmr_main_loop
       0B          
0B144E FD 2F 03    0337*      ld (iy+3),hl ; set time remaining
0B1451 CD 09 14 0B 0338*      call timestamp_tick
0B1455 2A 00 14 0B 0339*      ld hl,(timestamp_now)   ; get current timestamp
0B1459 FD 2F 00    0340*      ld (iy+0),hl ; set start time
0B145C C9          0341*      ret
0B145D             0342*  
0B145D             0343*  ; gets time remaining on the main loop countdown timer following the global timestamp
0B145D             0344*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0B145D             0345*  ;          sign flags: pos = time not expired,zero or neg = time expired
0B145D             0346*  ; destroys: af,hl,de,ix,iy
0B145D             0347*  tmr_main_loop_get:
0B145D CD 09 14 0B 0348*      call timestamp_tick
0B1461 FD 21 43 14 0349*      ld iy,tmr_main_loop
       0B          
0B1466 CD 31 14 0B 0350*      call timestamp_tmr_get
0B146A C9          0351*      ret
0B146B             0352*  
0B146B             0353*  ; set a stopwatch
0B146B             0354*  ; returns: hl = start time
0B146B             0355*  ; destroys: hl,ix
0B146B             0356*  stopwatch_set:
0B146B             0357*      MOSCALL mos_sysvars     ; ix points to syvars table
0B146B 3E 08       0001*M 			LD	A, function
0B146D 5B CF       0002*M 			RST.L	08h
0B146F DD 27 00    0358*      ld hl,(ix+sysvar_time)  ; get current time
0B1472 22 87 14 0B 0359*      ld (stopwatch_started),hl            ; set start time
0B1476 C9          0360*      ret
0B1477             0361*  
0B1477             0362*  ; gets time elapsed on a stopwatch
0B1477             0363*  ; returns: hl = time elapsed in 1/120ths of a second
0B1477             0364*  ; destroys: af,hl,de,ix
0B1477             0365*  stopwatch_get:
0B1477             0366*      MOSCALL mos_sysvars     ; ix points to syvars table
0B1477 3E 08       0001*M 			LD	A, function
0B1479 5B CF       0002*M 			RST.L	08h
0B147B DD 27 00    0367*      ld hl,(ix+sysvar_time)  ; get current time
0B147E ED 5B 87 14 0368*      ld de,(stopwatch_started)            ; get start time
       0B          
0B1483 AF          0369*      xor a                   ; clear carry
0B1484 ED 52       0370*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
0B1486 C9          0371*      ret
0B1487             0372*  
0B1487             0373*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
0B148A             0374*  
0B148A             0375*  ; ------------------
0B148A             0376*  ; delay routine
0B148A             0377*  ; Author: Richard Turrnidge
0B148A             0378*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
0B148A             0379*  ; routine waits a fixed time,then returns
0B148A             0380*  ; arrive with A =  the delay byte. One bit to be set only.
0B148A             0381*  ; eg. ld A,00000100b
0B148A             0382*  
0B148A             0383*  multiPurposeDelay:
0B148A F5          0384*      push af
0B148B C5          0385*      push bc
0B148C DD E5       0386*      push ix
0B148E 47          0387*      ld b,a
0B148F 3E 08       0388*      ld a,$08
0B1491 5B CF       0389*      RST.LIL	08h                 ; get IX pointer to sysvars
0B1493             0390*  
0B1493             0391*  waitLoop:
0B1493             0392*  
0B1493 DD 7E 00    0393*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
0B1496             0394*  
0B1496             0395*                                  ;   we check if bit set is same as last time we checked.
0B1496             0396*                                  ;   bit 0 - don't use
0B1496             0397*                                  ;   bit 1 - changes 64 times per second
0B1496             0398*                                  ;   bit 2 - changes 32 times per second
0B1496             0399*                                  ;   bit 3 - changes 16 times per second
0B1496             0400*  
0B1496             0401*                                  ;   bit 4 - changes 8 times per second
0B1496             0402*                                  ;   bit 5 - changes 4 times per second
0B1496             0403*                                  ;   bit 6 - changes 2 times per second
0B1496             0404*                                  ;   bit 7 - changes 1 times per second
0B1496 A0          0405*      and b
0B1497 4F          0406*      ld c,a
0B1498 3A A9 14 0B 0407*      ld a,(oldTimeStamp)
0B149C B9          0408*      cp c                        ; is A same as last value?
0B149D 28 F4       0409*      jr z,waitLoop              ; loop here if it is
0B149F 79          0410*      ld a,c
0B14A0 32 A9 14 0B 0411*      ld (oldTimeStamp),a        ; set new value
0B14A4             0412*  
0B14A4 DD E1       0413*      pop ix
0B14A6 C1          0414*      pop bc
0B14A7 F1          0415*      pop af
0B14A8 C9          0416*      ret
0B14A9             0417*  
0B14A9 00          0418*  oldTimeStamp:   .db 00h
0B14AA             0025       include "vdu.inc"
0B14AA             0001*  
0B14AA             0002*  ; VDU 30: Home cursor
0B14AA             0003*  vdu_home_cursor:
0B14AA 3E 1E       0004*      ld a,30
0B14AC 5B D7       0005*  	rst.lil $10
0B14AE C9          0006*  	ret
0B14AF             0007*  
0B14AF             0008*  cursor_on:
0B14AF 21 BA 14 0B 0009*  	ld hl,@cmd
0B14B3 01 03 00 00 0010*  	ld bc,@end-@cmd
0B14B7 5B DF       0011*  	rst.lil $18
0B14B9 C9          0012*  	ret
0B14BA             0013*  @cmd:
0B14BA 17 01 01    0014*  	db 23,1,1
0B14BD             0015*  @end:
0B14BD             0016*  
0B14BD             0017*  cursor_off:
0B14BD 21 C8 14 0B 0018*  	ld hl,@cmd
0B14C1 01 03 00 00 0019*  	ld bc,@end-@cmd
0B14C5 5B DF       0020*  	rst.lil $18
0B14C7 C9          0021*  	ret
0B14C8             0022*  @cmd:
0B14C8 17 01 00    0023*  	db 23,1,0
0B14CB             0024*  @end:
0B14CB             0025*  
0B14CB             0026*  ; VDU 9: Move cursor forward one character
0B14CB             0027*  vdu_cursor_forward:
0B14CB 3E 09       0028*      ld a,9
0B14CD 5B D7       0029*  	rst.lil $10
0B14CF C9          0030*  	ret
0B14D0             0031*  
0B14D0             0032*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
0B14D0             0033*  ; inputs: c=x, b=y 8-bit unsigned integers
0B14D0             0034*  vdu_move_cursor:
0B14D0 ED 43 E1 14 0035*      ld (@x0),bc
       0B          
0B14D5 21 E0 14 0B 0036*  	ld hl,@cmd
0B14D9 01 03 00 00 0037*  	ld bc,@end-@cmd
0B14DD 5B DF       0038*  	rst.lil $18
0B14DF C9          0039*  	ret
0B14E0 1F          0040*  @cmd: 	db 31
0B14E1 00          0041*  @x0:	db 0
0B14E2 00          0042*  @y0: 	db 0
0B14E3 00          0043*  @end: 	db 0 ; padding
0B14E4             0044*  
0B14E4             0045*  ; VDU 12: Clear text area (CLS)
0B14E4             0046*  vdu_cls:
0B14E4 3E 0C       0047*      ld a,12
0B14E6 5B D7       0048*  	rst.lil $10
0B14E8 C9          0049*  	ret
0B14E9             0050*  
0B14E9             0051*  vdu_flip:
0B14E9 21 F4 14 0B 0052*  	ld hl,@cmd
0B14ED 01 03 00 00 0053*  	ld bc,@end-@cmd
0B14F1 5B DF       0054*  	rst.lil $18
0B14F3 C9          0055*  	ret
0B14F4 17 00 C3    0056*  @cmd: db 23,0,0xC3
0B14F7             0057*  @end:
0B14F7             0058*  
0B14F7             0059*  ; VDU 16: Clear graphics area (CLG)
0B14F7             0060*  vdu_clg:
0B14F7 3E 10       0061*      ld a,16
0B14F9 5B D7       0062*  	rst.lil $10
0B14FB C9          0063*  	ret
0B14FC             0064*  
0B14FC             0065*  ; COLOUR MODES
0B14FC             0066*  ; Mode	Effect
0B14FC             0067*  ; 0	Set on-screen pixel to target colour value
0B14FC             0068*  ; 1	OR value with the on-screen pixel
0B14FC             0069*  ; 2	AND value with the on-screen pixel
0B14FC             0070*  ; 3	XOR value with the on-screen pixel
0B14FC             0071*  ; 4	Invert the on-screen pixel
0B14FC             0072*  ; 5	No operation
0B14FC             0073*  ; 6	AND the inverse of the specified colour with the on-screen pixel
0B14FC             0074*  ; 7	OR the inverse of the specified colour with the on-screen pixel
0B14FC             0075*  
0B14FC             0076*  ; VDU 17, colour: Define text colour (COLOUR)
0B14FC             0077*  vdu_colour_text:
0B14FC 32 0C 15 0B 0078*  	ld (@arg),a
0B1500 21 0B 15 0B 0079*  	ld hl,@cmd
0B1504 01 02 00 00 0080*  	ld bc,@end-@cmd
0B1508 5B DF       0081*  	rst.lil $18
0B150A C9          0082*  	ret
0B150B 11          0083*  @cmd: db 17
0B150C 00          0084*  @arg: db 0
0B150D             0085*  @end:
0B150D             0086*  
0B150D             0087*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
0B150D             0088*  ; inputs: a=mode, c=colour (add 128 to set background colour)
0B150D             0089*  vdu_gcol:
0B150D 32 22 15 0B 0090*  	ld (@mode),a
0B1511 79          0091*      ld a,c
0B1512 32 23 15 0B 0092*      ld (@col),a
0B1516 21 21 15 0B 0093*  	ld hl,@cmd
0B151A 01 03 00 00 0094*  	ld bc,@end-@cmd
0B151E 5B DF       0095*  	rst.lil $18
0B1520 C9          0096*  	ret
0B1521 12          0097*  @cmd:  db 18
0B1522 00          0098*  @mode: db 0
0B1523 00          0099*  @col:  db 0
0B1524             0100*  @end:
0B1524             0101*  
0B1524             0102*  
0B1524             0103*  ; VDU 28, left, bottom, right, top: Set text viewport **
0B1524             0104*  ; MIND THE LITTLE-ENDIANESS
0B1524             0105*  ; inputs: c=left,b=bottom,e=right,d=top
0B1524             0106*  ; outputs; nothing
0B1524             0107*  ; destroys: a might make it out alive
0B1524             0108*  vdu_set_txt_viewport:
0B1524 ED 43 3A 15 0109*      ld (@lb),bc
       0B          
0B1529 ED 53 3C 15 0110*  	ld (@rt),de
       0B          
0B152E 21 39 15 0B 0111*  	ld hl,@cmd
0B1532 01 05 00 00 0112*  	ld bc,@end-@cmd
0B1536 5B DF       0113*  	rst.lil $18
0B1538 C9          0114*  	ret
0B1539 1C          0115*  @cmd:   db 28 ; set text viewport command
0B153A 00 00       0116*  @lb: 	dw 0x0000 ; set by bc
0B153C 00 00       0117*  @rt: 	dw 0x0000 ; set by de
0B153E 00          0118*  @end:   db 0x00	  ; padding
0B153F             0119*  
0B153F             0120*  ; Wait for VBLANK interrupt
0B153F             0121*  vdu_vblank:
0B153F DD E5       0122*      PUSH 	IX
0B1541             0123*  	MOSCALL	mos_sysvars
0B1541 3E 08       0001*M 			LD	A, function
0B1543 5B CF       0002*M 			RST.L	08h
0B1545 DD 7E 00    0124*  	LD	A, (IX + sysvar_time + 0)
0B1548             0125*  @wait:
0B1548 DD BE 00    0126*      CP 	A, (IX + sysvar_time + 0)
0B154B 28 FB       0127*      JR	Z, @wait
0B154D DD E1       0128*      POP	IX
0B154F C9          0129*      RET
0B1550             0130*  
0B1550             0131*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
0B1550             0132*  ; NOTE: the order of the y-coordinate parameters are inverted
0B1550             0133*  ; 	because we have turned off logical screen scaling
0B1550             0134*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
0B1550             0135*  ; outputs; nothing
0B1550             0136*  ; destroys: a might make it out alive
0B1550             0137*  vdu_set_gfx_viewport:
0B1550 ED 43 70 15 0138*      ld (@x0),bc
       0B          
0B1555 FD 22 72 15 0139*      ld (@y1),iy
       0B          
0B155A DD 22 74 15 0140*  	ld (@x1),ix
       0B          
0B155F ED 53 76 15 0141*  	ld (@y0),de
       0B          
0B1564 21 6F 15 0B 0142*  	ld hl,@cmd
0B1568 01 09 00 00 0143*  	ld bc,@end-@cmd
0B156C 5B DF       0144*  	rst.lil $18
0B156E C9          0145*  	ret
0B156F 18          0146*  @cmd:   db 24 ; set graphics viewport command
0B1570 00 00       0147*  @x0: 	dw 0x0000 ; set by bc
0B1572 00 00       0148*  @y1: 	dw 0x0000 ; set by iy
0B1574 00 00       0149*  @x1: 	dw 0x0000 ; set by ix
0B1576 00 00       0150*  @y0: 	dw 0x0000 ; set by de
0B1578 00          0151*  @end:   db 0x00	  ; padding
0B1579             0152*  
0B1579             0153*  ; SCREEN MODES
0B1579             0154*  ; ===============================
0B1579             0155*  ; Mode  Horz  Vert  Cols  Refresh
0B1579             0156*  ; ---   ----  ----  ----  -------
0B1579             0157*  ; 11    320   240   2     60hz
0B1579             0158*  ; 139   320   240   2     60hz
0B1579             0159*  ; 23    512   384   2     60hz
0B1579             0160*  ; 151   512   384   2     60hz
0B1579             0161*  ; 6     640   240   2     60hz
0B1579             0162*  ; 134   640   240   2     60hz
0B1579             0163*  ; 2     640   480   2     60hz
0B1579             0164*  ; 130   640   480   2     60hz
0B1579             0165*  ; 17    800   600   2     60hz
0B1579             0166*  ; 145   800   600   2     60hz
0B1579             0167*  ; 18    1024  768   2     60hz
0B1579             0168*  ; 146   1024  768   2     60hz
0B1579             0169*  ; ---   ----  ----  ----  -------
0B1579             0170*  ; 10    320   240   4     60hz
0B1579             0171*  ; 138   320   240   4     60hz
0B1579             0172*  ; 22    512   384   4     60hz
0B1579             0173*  ; 150   512   384   4     60hz
0B1579             0174*  ; 5     640   240   4     60hz
0B1579             0175*  ; 133   640   240   4     60hz
0B1579             0176*  ; 1     640   480   4     60hz
0B1579             0177*  ; 129   640   480   4     60hz
0B1579             0178*  ; 16    800   600   4     60hz
0B1579             0179*  ; 19    1024  768   4     60hz
0B1579             0180*  ; ---   ----  ----  ----  -------
0B1579             0181*  ; 9     320   240   16    60hz
0B1579             0182*  ; 137   320   240   16    60hz
0B1579             0183*  ; 21    512   384   16    60hz
0B1579             0184*  ; 149   512   384   16    60hz
0B1579             0185*  ; 4     640   240   16    60hz
0B1579             0186*  ; 132   640   240   16    60hz
0B1579             0187*  ; 0     640   480   16    60hz
0B1579             0188*  ; 7     n/a   n/a   16    60hz
0B1579             0189*  ; ---   ----  ----  ----  -------
0B1579             0190*  ; 8     320   240   64    60hz
0B1579             0191*  ; 136   320   240   64    60hz
0B1579             0192*  ; 20    512   384   64    60hz
0B1579             0193*  ; 3     640   240   64    60hz
0B1579             0194*  ; ---   ----  ----  ----  -------
0B1579             0195*  vdu_set_screen_mode:
0B1579 32 89 15 0B 0196*  	ld (@arg),a
0B157D 21 88 15 0B 0197*  	ld hl,@cmd
0B1581 01 02 00 00 0198*  	ld bc,@end-@cmd
0B1585 5B DF       0199*  	rst.lil $18
0B1587 C9          0200*  	ret
0B1588 16          0201*  @cmd: db 22 ; set screen mode
0B1589 00          0202*  @arg: db 0  ; screen mode parameter
0B158A             0203*  @end:
0B158A             0204*  
0B158A             0205*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
0B158A             0206*  ; inputs: a is scaling mode, 1=on, 0=off
0B158A             0207*  ; note: default setting on boot is scaling ON
0B158A             0208*  vdu_set_scaling:
0B158A 32 9C 15 0B 0209*  	ld (@arg),a
0B158E 21 99 15 0B 0210*  	ld hl,@cmd
0B1592 01 04 00 00 0211*  	ld bc,@end-@cmd
0B1596 5B DF       0212*  	rst.lil $18
0B1598 C9          0213*  	ret
0B1599 17 00 C0    0214*  @cmd: db 23,0,0xC0
0B159C 00          0215*  @arg: db 0  ; scaling on/off
0B159D             0216*  @end:
0B159D             0217*  
0B159D             0218*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
0B159D             0219*  ; inputs: hl=bufferId
0B159D             0220*  vdu_buff_select:
0B159D 22 AF 15 0B 0221*  	ld (@bufferId),hl
0B15A1 21 AC 15 0B 0222*  	ld hl,@cmd
0B15A5 01 05 00 00 0223*  	ld bc,@end-@cmd
0B15A9 5B DF       0224*  	rst.lil $18
0B15AB C9          0225*  	ret
0B15AC 17 1B 20    0226*  @cmd: db 23,27,0x20
0B15AF 00 00       0227*  @bufferId: dw 0x0000
0B15B1 00          0228*  @end: db 0x00 ; padding
0B15B2             0229*  
0B15B2             0230*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
0B15B2             0231*  ; inputs: a=format; bc=width; de=height
0B15B2             0232*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
0B15B2             0233*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
0B15B2             0234*  ; 0 	RGBA8888 (4-bytes per pixel)
0B15B2             0235*  ; 1 	RGBA2222 (1-bytes per pixel)
0B15B2             0236*  ; 2 	Mono/Mask (1-bit per pixel)
0B15B2             0237*  ; 3 	Reserved for internal use by VDP (“native” format)
0B15B2             0238*  vdu_bmp_create:
0B15B2 ED 43 CE 15 0239*      ld (@width),bc
       0B          
0B15B7 ED 53 D0 15 0240*      ld (@height),de
       0B          
0B15BC 32 D2 15 0B 0241*      ld (@fmt),a
0B15C0 21 CB 15 0B 0242*  	ld hl,@cmd
0B15C4 01 08 00 00 0243*  	ld bc,@end-@cmd
0B15C8 5B DF       0244*  	rst.lil $18
0B15CA C9          0245*  	ret
0B15CB 17 1B 21    0246*  @cmd:       db 23,27,0x21
0B15CE 00 00       0247*  @width:     dw 0x0000
0B15D0 00 00       0248*  @height:    dw 0x0000
0B15D2 00          0249*  @fmt:       db 0x00
0B15D3             0250*  @end:
0B15D3             0251*  
0B15D3             0252*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0B15D3             0253*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0B15D3             0254*  vdu_load_img_rgba2_to_8:
0B15D3             0255*  ; backup the target buffer id and image dimensions
0B15D3 E5          0256*      push hl
0B15D4 D5          0257*      push de
0B15D5 C5          0258*      push bc
0B15D6             0259*  ; load the rgba2 image to working buffer 65534
0B15D6 21 FE FF 00 0260*      ld hl,65534 ; temporary working buffer id
0B15DA CD DD 16 0B 0261*  	call vdu_load_buffer_from_file
0B15DE             0262*  ; restore the image dimensions and target buffer id
0B15DE C1          0263*      pop bc
0B15DF D1          0264*      pop de
0B15E0 E1          0265*      pop hl
0B15E1             0266*  ; fall through to vdu_rgba2_to_8
0B15E1             0267*  
0B15E1             0268*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
0B15E1             0269*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
0B15E1             0270*  ; the "expand bitmap" command is:
0B15E1             0271*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0B15E1             0272*  ; and then to reverse the byte order to fix endian-ness:
0B15E1             0273*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0B15E1             0274*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0B15E1             0275*  ; VDU 23,27,&20,targetBufferID%;
0B15E1             0276*  ; VDU 23,27,&21,width%;height%;0
0B15E1             0277*  ; -------------------------------------------------------------------
0B15E1             0278*  ; inputs: bc,de image width,height ; hl = targetBufferId
0B15E1             0279*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
0B15E1             0280*  vdu_rgba2_to_8:
0B15E1             0281*  ; load the image dimensions and buffer id parameters
0B15E1 ED 43 3D 16 0282*      ld (@width),bc
       0B          
0B15E6 ED 53 3F 16 0283*      ld (@height),de
       0B          
0B15EB 22 22 16 0B 0284*      ld (@bufferId0),hl
0B15EF 22 2F 16 0B 0285*      ld (@bufferId2),hl
0B15F3 22 38 16 0B 0286*      ld (@bufferId1),hl
0B15F7             0287*  ; clean up bytes that got stomped on by the ID loads
0B15F7 3E 48       0288*      ld a,0x48
0B15F9 32 24 16 0B 0289*      ld (@bufferId0+2),a
0B15FD 3E 17       0290*      ld a,23
0B15FF 32 3A 16 0B 0291*      ld (@bufferId1+2),a
0B1603 3E 18       0292*      ld a,24
0B1605 32 31 16 0B 0293*      ld (@bufferId2+2),a
0B1609 AF          0294*      xor a
0B160A 32 41 16 0B 0295*      ld (@height+2),a
0B160E             0296*  ; send the vdu command strings
0B160E 21 19 16 0B 0297*      ld hl,@beg
0B1612 01 29 00 00 0298*      ld bc,@end-@beg
0B1616 5B DF       0299*      rst.lil $18
0B1618 C9          0300*      ret
0B1619             0301*  @beg:
0B1619             0302*  ; Command 14: Consolidate blocks in a buffer
0B1619             0303*  ; VDU 23, 0, &A0, bufferId; 14
0B1619 17 00 A0    0304*      db 23,0,0xA0
0B161C FE FF       0305*      dw 65534 ; workingBufferId
0B161E 0E          0306*      db 14 ; consolidate blocks
0B161F             0307*  ; the "expand bitmap" command is:
0B161F             0308*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0B161F 17 00 A0    0309*      db 23,0,0xA0
0B1622 00 00       0310*  @bufferId0: dw 0x0000 ; targetBufferId
0B1624 48          0311*      db 0x48 ; given as decimal command 72 in the docs
0B1625 02          0312*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
0B1626 FE FF       0313*      dw 65534 ; sourceBufferId
0B1628 00 7F BF FF 0314*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
0B162C             0315*  ; reverse the byte order to fix endian-ness:
0B162C             0316*  ; Command 24: Reverse the order of data of blocks within a buffer
0B162C             0317*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
0B162C             0318*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0B162C 17 00 A0    0319*      db 23,0,0xA0
0B162F 00 00       0320*  @bufferId2:    dw 0x0000 ; targetBufferId
0B1631 18          0321*      db 24 ; reverse byte order
0B1632 04          0322*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
0B1633 04 00       0323*      dw 4 ; size (4 bytes)
0B1635             0324*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0B1635             0325*  ; VDU 23,27,&20,targetBufferID%;
0B1635 17 1B 20    0326*      db 23,27,0x20 ; select bitmap
0B1638 00 00       0327*  @bufferId1: dw 0x0000 ; targetBufferId
0B163A             0328*  ; VDU 23,27,&21,width%;height%;0
0B163A 17 1B 21    0329*      db 23,27,0x21 ; create bitmap from buffer
0B163D 00 00       0330*  @width: dw 0x0000
0B163F 00 00       0331*  @height: dw 0x0000
0B1641 00          0332*      db 0x00 ; rgba8888 format
0B1642             0333*  @end:
0B1642             0334*  
0B1642             0335*  ; scratch variables
0B1642 00 00 00    0336*  bufferId0: dl 0x000000
0B1645 00 00 00    0337*  bufferId1: dl 0x000000
0B1648             0338*  
0B1648             0339*  ; load a vdu buffer from local memory
0B1648             0340*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0B1648             0341*  vdu_load_buffer:
0B1648 ED 43 71 16 0342*      ld (@length),bc
       0B          
0B164D D5          0343*      push de ; save data pointer
0B164E             0344*  ; send the vdu command string
0B164E 7D          0345*      ld a,l
0B164F 32 6E 16 0B 0346*      ld (@bufferId),a
0B1653 7C          0347*      ld a,h
0B1654 32 6F 16 0B 0348*      ld (@bufferId+1),a
0B1658 21 6B 16 0B 0349*      ld hl,@cmd
0B165C 01 08 00 00 0350*      ld bc,@end-@cmd
0B1660 5B DF       0351*      rst.lil $18
0B1662             0352*  ; send the buffer data
0B1662 E1          0353*      pop hl ; pointer to data
0B1663 ED 4B 71 16 0354*      ld bc,(@length)
       0B          
0B1668 5B DF       0355*      rst.lil $18 ; send it
0B166A C9          0356*      ret
0B166B             0357*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0B166B 17 00 A0    0358*  @cmd:       db 23,0,0xA0
0B166E 00 00       0359*  @bufferId:	dw 0x0000
0B1670 00          0360*  		    db 0 ; load buffer
0B1671 00 00       0361*  @length:	dw 0x0000
0B1673 00          0362*  @end: db 0 ; padding
0B1674             0363*  
0B1674             0364*  ; clear a buffer
0B1674             0365*  ; inputs: hl = bufferId
0B1674             0366*  vdu_clear_buffer:
0B1674 7D          0367*      ld a,l
0B1675 32 8C 16 0B 0368*      ld (@bufferId),a
0B1679 7C          0369*      ld a,h
0B167A 32 8D 16 0B 0370*      ld (@bufferId+1),a
0B167E 21 89 16 0B 0371*      ld hl,@cmd
0B1682 01 06 00 00 0372*      ld bc,@end-@cmd
0B1686 5B DF       0373*      rst.lil $18
0B1688 C9          0374*      ret
0B1689 17 00 A0    0375*  @cmd:       db 23,0,0xA0
0B168C 00 00       0376*  @bufferId:	dw 0x0000
0B168E 02          0377*  		    db 2 ; clear buffer
0B168F             0378*  @end:
0B168F             0379*  
0B168F             0380*  vdu_clear_all_buffers:
0B168F             0381*  ; clear all buffers
0B168F 21 9A 16 0B 0382*      ld hl,@beg
0B1693 01 06 00 00 0383*      ld bc,@end-@beg
0B1697 5B DF       0384*      rst.lil $18
0B1699 C9          0385*      ret
0B169A 17 00 A0    0386*  @beg: db 23,0,$A0
0B169D FF FF       0387*        dw -1 ; clear all buffers
0B169F 02          0388*        db 2  ; command 2: clear a buffer
0B16A0             0389*  @end:
0B16A0             0390*  
0B16A0             0391*  ; Command 14: Consolidate blocks in a buffer
0B16A0             0392*  vdu_consolidate_buffer:
0B16A0             0393*  ; set parameters for vdu call
0B16A0 7D          0394*      ld a,l
0B16A1 32 B8 16 0B 0395*      ld (@bufferId),a
0B16A5 7C          0396*      ld a,h
0B16A6 32 B9 16 0B 0397*      ld (@bufferId+1),a
0B16AA 21 B5 16 0B 0398*      ld hl,@beg
0B16AE 01 06 00 00 0399*      ld bc,@end-@beg
0B16B2 5B DF       0400*      rst.lil $18
0B16B4 C9          0401*      ret
0B16B5             0402*  ; VDU 23, 0, &A0, bufferId; 14
0B16B5 17 00 A0    0403*  @beg: db 23,0,0xA0
0B16B8 00 00       0404*  @bufferId: dw 0x0000
0B16BA 0E          0405*             db 14
0B16BB             0406*  @end:
0B16BB             0407*  
0B16BB             0408*  ; load an image file to a buffer and make it a bitmap
0B16BB             0409*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
0B16BB             0410*  vdu_load_img:
0B16BB             0411*  ; back up image type and dimension parameters
0B16BB 22 42 16 0B 0412*      ld (bufferId0),hl
0B16BF F5          0413*      push af
0B16C0 C5          0414*  	push bc
0B16C1 D5          0415*  	push de
0B16C2             0416*  ; load the image
0B16C2 CD DD 16 0B 0417*  	call vdu_load_buffer_from_file
0B16C6             0418*  ; now make it a bitmap
0B16C6 2A 42 16 0B 0419*      ld hl,(bufferId0)
0B16CA CD A0 16 0B 0420*      call vdu_consolidate_buffer
0B16CE 2A 42 16 0B 0421*      ld hl,(bufferId0)
0B16D2 CD 9D 15 0B 0422*      call vdu_buff_select
0B16D6 D1          0423*  	pop de ; image height
0B16D7 C1          0424*  	pop bc ; image width
0B16D8 F1          0425*  	pop af ; image type
0B16D9 C3 B2 15 0B 0426*  	jp vdu_bmp_create ; will return to caller from there
0B16DD             0427*  
0B16DD             0428*  ; inputs: hl = bufferId; iy = pointer to filename
0B16DD             0429*  vdu_load_buffer_from_file:
0B16DD 22 42 16 0B 0430*      ld (bufferId0),hl
0B16E1             0431*  
0B16E1             0432*  ; clear target buffer
0B16E1 CD 74 16 0B 0433*      call vdu_clear_buffer
0B16E5             0434*  
0B16E5             0435*  ; open the file in read mode
0B16E5             0436*  ; Open a file
0B16E5             0437*  ; HLU: Filename
0B16E5             0438*  ;   C: Mode
0B16E5             0439*  ; Returns:
0B16E5             0440*  ;   A: Filehandle, or 0 if couldn't open
0B16E5 FD E5       0441*  	push iy ; pointer to filename
0B16E7 E1          0442*  	pop hl
0B16E8 0E 01       0443*  	ld c,fa_read
0B16EA             0444*      MOSCALL mos_fopen
0B16EA 3E 0A       0001*M 			LD	A, function
0B16EC 5B CF       0002*M 			RST.L	08h
0B16EE 32 29 17 0B 0445*      ld (@filehandle),a
0B16F2             0446*  
0B16F2             0447*  @read_file:
0B16F2             0448*  ; Read a block of data from a file
0B16F2             0449*  ;   C: Filehandle
0B16F2             0450*  ; HLU: Pointer to where to write the data to
0B16F2             0451*  ; DEU: Number of bytes to read
0B16F2             0452*  ; Returns:
0B16F2             0453*  ; DEU: Number of bytes read
0B16F2 3A 29 17 0B 0454*      ld a,(@filehandle)
0B16F6 4F          0455*      ld c,a
0B16F7 21 00 E0 B7 0456*      ld hl,filedata
0B16FB 11 00 20 00 0457*      ld de,8192 ; max we can read into onboard sram at one time
0B16FF             0458*      MOSCALL mos_fread
0B16FF 3E 1A       0001*M 			LD	A, function
0B1701 5B CF       0002*M 			RST.L	08h
0B1703             0459*  
0B1703             0460*  ; ; DEBUG: print chunk size
0B1703             0461*  ;     push de
0B1703             0462*  ;     pop hl
0B1703             0463*  ;     call printDec
0B1703             0464*  ;     call printNewLine
0B1703             0465*  
0B1703             0466*  ; test de for zero bytes read
0B1703 21 00 00 00 0467*      ld hl,0
0B1707 AF          0468*      xor a ; clear carry
0B1708 ED 52       0469*      sbc hl,de
0B170A CA 20 17 0B 0470*      jp z,@close_file
0B170E             0471*  
0B170E             0472*  ; load a vdu buffer from local memory
0B170E             0473*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0B170E 2A 42 16 0B 0474*      ld hl,(bufferId0)
0B1712 D5          0475*      push de ; chunksize
0B1713 C1          0476*      pop bc
0B1714 11 00 E0 B7 0477*      ld de,filedata
0B1718 CD 48 16 0B 0478*      call vdu_load_buffer
0B171C             0479*  
0B171C             0480*  ; ; print progress breadcrumbs
0B171C             0481*  ;     ld a,'.'
0B171C             0482*  ;     rst.lil 10h
0B171C             0483*  
0B171C             0484*  ; read the next block
0B171C C3 F2 16 0B 0485*      jp @read_file
0B1720             0486*  
0B1720             0487*  ; close the file
0B1720             0488*  @close_file:
0B1720 3A 29 17 0B 0489*      ld a,(@filehandle)
0B1724             0490*      MOSCALL mos_fclose
0B1724 3E 0B       0001*M 			LD	A, function
0B1726 5B CF       0002*M 			RST.L	08h
0B1728 C9          0491*      ret ; vdu_load_buffer_from_file
0B1729             0492*  
0B1729 00          0493*  @filehandle: db 0 ; file handle
0B172A 00 00 00    0494*  @fil: dl 0 ; pointer to FIL struct
0B172D             0495*  
0B172D 00 00 00    0496*  @chunkpointer: dl 0 ; pointer to current chunk
0B1730             0497*  
0B1730             0498*  ; File information structure (FILINFO)
0B1730             0499*  @filinfo:
0B1730 00 00 00 00 0500*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
0B1734 00 00       0501*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
0B1736 00 00       0502*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
0B1738 00          0503*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
0B1739 00 00 00 00 0504*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
0B1746 00 00 00 00 0505*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0B1846             0026       ; include "vdu_fonts.inc"
0B1846             0027       include "vdu_plot.inc"
0B1846             0001*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0B1846             0002*  ; PLOT code 	(Decimal) 	Effect
0B1846             0003*  ; &00-&07 	0-7 	Solid line, includes both ends
0B1846             0004*  plot_sl_both: equ 0x00
0B1846             0005*  
0B1846             0006*  ; &08-&0F 	8-15 	Solid line, final point omitted
0B1846             0007*  plot_sl_first: equ 0x08
0B1846             0008*  
0B1846             0009*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
0B1846             0010*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
0B1846             0011*  
0B1846             0012*  ; &20-&27 	32-39 	Solid line, first point omitted
0B1846             0013*  plot_sl_last: equ 0x20
0B1846             0014*  
0B1846             0015*  ; &28-&2F 	40-47 	Solid line, both points omitted
0B1846             0016*  plot_sl_none: equ 0x28
0B1846             0017*  
0B1846             0018*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
0B1846             0019*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
0B1846             0020*  
0B1846             0021*  ; &40-&47 	64-71 	Point plot
0B1846             0022*  plot_pt: equ 0x40
0B1846             0023*  
0B1846             0024*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
0B1846             0025*  plot_lf_lr_non_bg: equ 0x48
0B1846             0026*  
0B1846             0027*  ; &50-&57 	80-87 	Triangle fill
0B1846             0028*  plot_tf: equ 0x50
0B1846             0029*  
0B1846             0030*  ; &58-&5F 	88-95 	Line fill right to background §§
0B1846             0031*  plot_lf_r_bg: equ 0x58
0B1846             0032*  
0B1846             0033*  ; &60-&67 	96-103 	Rectangle fill
0B1846             0034*  plot_rf: equ 0x60
0B1846             0035*  
0B1846             0036*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
0B1846             0037*  plot_lf_lr_fg: equ 0x60
0B1846             0038*  
0B1846             0039*  ; &70-&77 	112-119 	Parallelogram fill
0B1846             0040*  plot_pf: equ 0x70
0B1846             0041*  
0B1846             0042*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
0B1846             0043*  plot_lf_r_non_fg: equ 0x78
0B1846             0044*  
0B1846             0045*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
0B1846             0046*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
0B1846             0047*  
0B1846             0048*  ; &90-&97 	144-151 	Circle outline
0B1846             0049*  plot_co: equ 0x90
0B1846             0050*  
0B1846             0051*  ; &98-&9F 	152-159 	Circle fill
0B1846             0052*  plot_cf: equ 0x98
0B1846             0053*  
0B1846             0054*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
0B1846             0055*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
0B1846             0056*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
0B1846             0057*  
0B1846             0058*  ; &B8-&BF 	184-191 	Rectangle copy/move
0B1846             0059*  plot_rcm: equ 0xB8
0B1846             0060*  
0B1846             0061*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
0B1846             0062*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
0B1846             0063*  ; &D0-&D7 	208-215 	Not defined
0B1846             0064*  ; &D8-&DF 	216-223 	Not defined
0B1846             0065*  ; &E0-&E7 	224-231 	Not defined
0B1846             0066*  
0B1846             0067*  ; &E8-&EF 	232-239 	Bitmap plot §
0B1846             0068*  plot_bmp: equ 0xE8
0B1846             0069*  
0B1846             0070*  ; &F0-&F7 	240-247 	Not defined
0B1846             0071*  ; &F8-&FF 	248-255 	Not defined
0B1846             0072*  
0B1846             0073*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
0B1846             0074*  ; Agon Console8 VDP 2.2.0
0B1846             0075*  
0B1846             0076*  ; Within each group of eight plot codes, the effects are as follows:
0B1846             0077*  ; Plot code 	Effect
0B1846             0078*  ; 0 	Move relative
0B1846             0079*  mv_rel: equ 0
0B1846             0080*  
0B1846             0081*  ; 1 	Plot relative in current foreground colour
0B1846             0082*  dr_rel_fg: equ 1
0B1846             0083*  
0B1846             0084*  ; 2 	Not supported (Plot relative in logical inverse colour)
0B1846             0085*  ; 3 	Plot relative in current background colour
0B1846             0086*  dr_rel_bg: equ 3
0B1846             0087*  
0B1846             0088*  ; 4 	Move absolute
0B1846             0089*  mv_abs: equ 4
0B1846             0090*  
0B1846             0091*  ; 5 	Plot absolute in current foreground colour
0B1846             0092*  dr_abs_fg: equ 5
0B1846             0093*  
0B1846             0094*  ; 6 	Not supported (Plot absolute in logical inverse colour)
0B1846             0095*  ; 7 	Plot absolute in current background colour
0B1846             0096*  dr_abs_bg: equ 7
0B1846             0097*  
0B1846             0098*  ; Codes 0-3 use the position data provided as part of the command
0B1846             0099*  ; as a relative position, adding the position given to the current
0B1846             0100*  ; graphical cursor position. Codes 4-7 use the position data provided
0B1846             0101*  ; as part of the command as an absolute position, setting the current
0B1846             0102*  ; graphical cursor position to the position given.
0B1846             0103*  
0B1846             0104*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
0B1846             0105*  ; current pixel colour. These operations cannot currently be supported
0B1846             0106*  ; by the graphics system the Agon VDP uses, so these codes are not
0B1846             0107*  ; supported. Support for these codes may be added in a future version
0B1846             0108*  ; of the VDP firmware.
0B1846             0109*  
0B1846             0110*  ; 16 colour palette constants
0B1846             0111*  c_black: equ 0
0B1846             0112*  c_red_dk: equ 1
0B1846             0113*  c_green_dk: equ 2
0B1846             0114*  c_yellow_dk: equ 3
0B1846             0115*  c_blue_dk: equ 4
0B1846             0116*  c_magenta_dk: equ 5
0B1846             0117*  c_cyan_dk: equ 6
0B1846             0118*  c_grey: equ 7
0B1846             0119*  c_grey_dk: equ 8
0B1846             0120*  c_red: equ 9
0B1846             0121*  c_green: equ 10
0B1846             0122*  c_yellow: equ 11
0B1846             0123*  c_blue: equ 12
0B1846             0124*  c_magenta: equ 13
0B1846             0125*  c_cyan: equ 14
0B1846             0126*  c_white: equ 15
0B1846             0127*  
0B1846             0128*  ; VDU 25, mode, x; y;: PLOT command
0B1846             0129*  ; inputs: a=mode, bc=x0, de=y0
0B1846             0130*  vdu_plot:
0B1846 32 60 18 0B 0131*      ld (@mode),a
0B184A ED 43 61 18 0132*      ld (@x0),bc
       0B          
0B184F ED 53 63 18 0133*      ld (@y0),de
       0B          
0B1854 21 5F 18 0B 0134*  	ld hl,@cmd
0B1858 01 06 00 00 0135*  	ld bc,@end-@cmd
0B185C 5B DF       0136*  	rst.lil $18
0B185E C9          0137*  	ret
0B185F 19          0138*  @cmd:   db 25
0B1860 00          0139*  @mode:  db 0
0B1861 00 00       0140*  @x0: 	dw 0
0B1863 00 00       0141*  @y0: 	dw 0
0B1865 00          0142*  @end:   db 0 ; extra byte to soak up deu
0B1866             0143*  
0B1866             0144*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0B1866             0145*  ; &E8-&EF 	232-239 	Bitmap plot §
0B1866             0146*  ; VDU 25, mode, x; y;: PLOT command
0B1866             0147*  ; inputs: bc=x0, de=y0
0B1866             0148*  ; prerequisites: vdu_buff_select
0B1866             0149*  vdu_plot_bmp:
0B1866 ED 43 7D 18 0150*      ld (@x0),bc
       0B          
0B186B ED 53 7F 18 0151*      ld (@y0),de
       0B          
0B1870 21 7B 18 0B 0152*  	ld hl,@cmd
0B1874 01 06 00 00 0153*  	ld bc,@end-@cmd
0B1878 5B DF       0154*  	rst.lil $18
0B187A C9          0155*  	ret
0B187B 19          0156*  @cmd:   db 25
0B187C ED          0157*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0B187D 00 00       0158*  @x0: 	dw 0x0000
0B187F 00 00       0159*  @y0: 	dw 0x0000
0B1881 00          0160*  @end:   db 0x00 ; padding
0B1882             0161*  
0B1882             0162*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0B1882             0163*  ; &E8-&EF 	232-239 	Bitmap plot §
0B1882             0164*  ; VDU 25, mode, x; y;: PLOT command
0B1882             0165*  ; inputs: bc=x0, de=y0
0B1882             0166*  ; USING 16.8 FIXED POINT COORDINATES
0B1882             0167*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
0B1882             0168*  ;   the fractional portiion of the inputs are truncated
0B1882             0169*  ;   leaving only the 16-bit integer portion
0B1882             0170*  ; prerequisites: vdu_buff_select
0B1882             0171*  vdu_plot_bmp168:
0B1882             0172*  ; populate in the reverse of normal to keep the
0B1882             0173*  ; inputs from stomping on each other
0B1882 ED 53 A0 18 0174*      ld (@y0-1),de
       0B          
0B1887 ED 43 9E 18 0175*      ld (@x0-1),bc
       0B          
0B188C 3E ED       0176*      ld a,plot_bmp+dr_abs_fg ; 0xED
0B188E 32 9E 18 0B 0177*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
0B1892 21 9D 18 0B 0178*  	ld hl,@cmd
0B1896 01 06 00 00 0179*  	ld bc,@end-@cmd
0B189A 5B DF       0180*  	rst.lil $18
0B189C C9          0181*  	ret
0B189D 19          0182*  @cmd:   db 25
0B189E ED          0183*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0B189F 00 00       0184*  @x0: 	dw 0x0000
0B18A1 00 00       0185*  @y0: 	dw 0x0000
0B18A3             0186*  @end:  ; no padding required b/c we shifted de right
0B18A3             0187*  
0B18A3             0188*  ; draw a filled rectangle
0B18A3             0189*  vdu_plot_rf:
0B18A3 ED 43 CA 18 0190*      ld (@x0),bc
       0B          
0B18A8 ED 53 CC 18 0191*      ld (@y0),de
       0B          
0B18AD DD 22 D0 18 0192*      ld (@x1),ix
       0B          
0B18B2 FD 22 D2 18 0193*      ld (@y1),iy
       0B          
0B18B7 3E 19       0194*      ld a,25 ; we have to reload the 2nd plot command
0B18B9 32 CE 18 0B 0195*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0B18BD 21 C8 18 0B 0196*  	ld hl,@cmd0
0B18C1 01 0C 00 00 0197*  	ld bc,@end-@cmd0
0B18C5 5B DF       0198*  	rst.lil $18
0B18C7 C9          0199*      ret
0B18C8 19          0200*  @cmd0:  db 25 ; plot
0B18C9 04          0201*  @arg0:  db plot_sl_both+mv_abs
0B18CA 00 00       0202*  @x0:    dw 0x0000
0B18CC 00 00       0203*  @y0:    dw 0x0000
0B18CE 19          0204*  @cmd1:  db 25 ; plot
0B18CF 65          0205*  @arg1:  db plot_rf+dr_abs_fg
0B18D0 00 00       0206*  @x1:    dw 0x0000
0B18D2 00 00       0207*  @y1:    dw 0x0000
0B18D4 00          0208*  @end:   db 0x00 ; padding
0B18D5             0209*  
0B18D5             0210*  ; draw a filled circle
0B18D5             0211*  vdu_plot_cf:
0B18D5 ED 43 FC 18 0212*      ld (@x0),bc
       0B          
0B18DA ED 53 FE 18 0213*      ld (@y0),de
       0B          
0B18DF DD 22 02 19 0214*      ld (@x1),ix
       0B          
0B18E4 FD 22 04 19 0215*      ld (@y1),iy
       0B          
0B18E9 3E 19       0216*      ld a,25 ; we have to reload the 2nd plot command
0B18EB 32 00 19 0B 0217*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0B18EF 21 FA 18 0B 0218*  	ld hl,@cmd0
0B18F3 01 0C 00 00 0219*  	ld bc,@end-@cmd0
0B18F7 5B DF       0220*  	rst.lil $18
0B18F9 C9          0221*      ret
0B18FA 19          0222*  @cmd0:  db 25 ; plot
0B18FB 04          0223*  @arg0:  db plot_sl_both+mv_abs
0B18FC 00 00       0224*  @x0:    dw 0x0000
0B18FE 00 00       0225*  @y0:    dw 0x0000
0B1900 19          0226*  @cmd1:  db 25 ; plot
0B1901 9D          0227*  @arg1:  db plot_cf+dr_abs_fg
0B1902 00 00       0228*  @x1:    dw 0x0000
0B1904 00 00       0229*  @y1:    dw 0x0000
0B1906 00          0230*  @end:   db 0x00 ; padding
0B1907             0231*  
0B1907             0232*  ; VDU 25, mode, x; y;: PLOT command
0B1907             0233*  ; inputs: a=mode, ix=x0, iy=y0
0B1907             0234*  plot:
0B1907 32 21 19 0B 0235*      ld (@mode),a
0B190B DD 22 22 19 0236*      ld (@x0),ix
       0B          
0B1910 FD 22 24 19 0237*      ld (@y0),iy
       0B          
0B1915 21 20 19 0B 0238*  	ld hl,@cmd
0B1919 01 06 00 00 0239*  	ld bc,@end-@cmd
0B191D 5B DF       0240*  	rst.lil $18
0B191F C9          0241*  	ret
0B1920 19          0242*  @cmd:   db 25
0B1921 00          0243*  @mode:  db 0
0B1922 00 00       0244*  @x0: 	dw 0
0B1924 00 00       0245*  @y0: 	dw 0
0B1926 00          0246*  @end:   db 0 ; padding
0B1927             0247*  
0B1927             0248*  ; VDU 5: Write text at graphics cursor
0B1927             0249*  ; inputs: hl = pointer to text, ix=x0, iy=y0
0B1927             0250*  ; prerequisites: gcol foreground set, VDU 5 set
0B1927             0251*  plot_text:
0B1927 E5          0252*      push hl ; save text pointer
0B1928             0253*  ; move graphics cursor to x0, y0
0B1928 3E 44       0254*      ld a,plot_pt+mv_abs
0B192A CD 07 19 0B 0255*      call plot
0B192E             0256*  ; write text
0B192E E1          0257*      pop hl ; restore text pointer
0B192F CD 73 02 0B 0258*      call printString
0B1933 C9          0259*      ret
0B1934             0028   
0B1934             0029   ; SHAWN'S INCLUDES
0B1934             0030   	INCLUDE	"strings24.asm"
0B1934             0001*  ;------------------------------------------------------------------------
0B1934             0002*  ;  strings24.asm
0B1934             0003*  ;
0B1934             0004*  ; 24-bit native ez80 strings routines for numerical processing
0B1934             0005*  ;  Copyright (c) Shawn Sijnstra 2024
0B1934             0006*  ;  MIT license
0B1934             0007*  ;------------------------------------------------------------------------
0B1934             0008*  
0B1934             0009*  ;Print signed value in HLU in decimal with leading 0s removed
0B1934             0010*  ; and postpended with a minus sign if was negative
0B1934             0011*  ; Uses HLU, DEU, BCU
0B1934             0012*  print_HLU_s24:
0B1934 CD 6D 07 0B 0013*  	call abs_hlu
0B1938 F5          0014*  	push af ; save the sign and zero flags
0B1939 CD 44 19 0B 0015*  	call print_HLU_u24
0B193D F1          0016*  	pop af
0B193E F0          0017*  	ret p ; HLU was positive so nothig more to do
0B193F 3E 2D       0018*  	ld a,'-'
0B1941 5B D7       0019*  	rst.lil 10h
0B1943 C9          0020*  	ret
0B1944             0021*  
0B1944             0022*  ;------------------------------------------------------------------------
0B1944             0023*  ;Full print and buffer routine so you can adjust behaviour
0B1944             0024*  ; Double-Dabble AKA shift-and-add-3 algorithm
0B1944             0025*  ; breakdown at https://en.wikipedia.org/wiki/Double_dabble
0B1944             0026*  ;Print value in HLU in decimal with leading 0s removed
0B1944             0027*  ; Uses HLU, DEU, BCU
0B1944             0028*  ;------------------------------------------------------------------------
0B1944             0029*  
0B1944             0030*  print_HLU_u24:
0B1944 22 21 1A 0B 0031*  	ld	(hex_temp),hl
0B1948 06 08       0032*  	ld	b,8	;8 digits max here with 24 bit unsigned
0B194A 11 24 1A 0B 0033*  	ld	de,outbuf
0B194E D5          0034*  	push	de
0B194F 21 07 00 00 0035*  	ld	hl,7
0B1953 19          0036*  	add	hl,de
0B1954 E5          0037*  	push	hl
0B1955 D1          0038*  	pop	de	;copy HLU to DEU
0B1956 AF          0039*  	xor	a
0B1957             0040*  _pde_u_zerobuf:
0B1957 77          0041*  	ld	(hl),a	;zero out the output
0B1958 2B          0042*  	dec	hl
0B1959 10 FC       0043*  	djnz	_pde_u_zerobuf
0B195B             0044*  
0B195B 0E 18       0045*  	ld c,3 * 8	;4 * 8	; number of loops through NUM_SRC_BYTES * 8
0B195D             0046*  _bcd_Convert:
0B195D             0047*  
0B195D 21 21 1A 0B 0048*  	ld hl,hex_temp
0B1961             0049*  ;
0B1961 CB 26       0050*  	sla (hl)
0B1963 23          0051*  	inc hl
0B1964 CB 16       0052*  	rl (hl)
0B1966 23          0053*  	inc hl
0B1967 CB 16       0054*  	rl (hl)		;24 bits rolled right
0B1969             0055*  
0B1969             0056*  
0B1969 06 08       0057*          ld	b,8	;8 digits max for 24 bit decimal output
0B196B D5          0058*  	push	de
0B196C E1          0059*  	pop	hl
0B196D             0060*  
0B196D             0061*  _bcd_Add3:
0B196D 7E          0062*  	ld	a,(hl)
0B196E 8F          0063*  	adc	a
0B196F 27          0064*          daa		;this is add 3 after shifting left; i.e. add 6.
0B1970 FE 10       0065*  	cp	10h	;did we roll over nibble?
0B1972 3F          0066*  	ccf
0B1973 CB A7       0067*  	res	4,a
0B1975             0068*  
0B1975 77          0069*          ld (hl),a
0B1976 2B          0070*  	dec	hl
0B1977 10 F4       0071*          djnz	_bcd_Add3	;loop for decimal digits
0B1979 0D          0072*          dec c
0B197A 20 E1       0073*          jr nz, _bcd_Convert	;loop around
0B197C             0074*  
0B197C             0075*  
0B197C E1          0076*  	pop	hl
0B197D E5          0077*  	push	hl
0B197E 06 07       0078*          ld	b,8-1		;one less than total in case output is '0'
0B1980             0079*  _pde_u_make_ascii:
0B1980 7E          0080*  	ld	a,(hl)
0B1981 B7          0081*  	or	a
0B1982 20 05       0082*  	jr	nz,_pde_u_make_ascii2
0B1984 36 20       0083*  	ld	(hl),' '
0B1986 23          0084*  	inc	hl
0B1987 10 F7       0085*  	djnz	_pde_u_make_ascii
0B1989             0086*  _pde_u_make_ascii2:
0B1989 04          0087*  	inc	b
0B198A             0088*  _pde_u_make_ascii3:
0B198A 7E          0089*  	ld	a,(hl)
0B198B F6 30       0090*  	or	30h
0B198D 77          0091*  	ld	(hl),a
0B198E 23          0092*  	inc	hl
0B198F 10 F9       0093*  	djnz	_pde_u_make_ascii3
0B1991             0094*  
0B1991 E1          0095*  	pop	hl
0B1992 06 08       0096*  	ld	b,8
0B1994             0097*  _pde_u_final_out:
0B1994 7E          0098*  	ld	a,(hl)
0B1995 23          0099*  	inc	hl
0B1996 FE 20       0100*  	cp	' '
0B1998 28 02       0101*  	jr	z,_pde_u_final_out_strip
0B199A 5B D7       0102*  	rst.lil	10h
0B199C             0103*  _pde_u_final_out_strip:
0B199C 10 F6       0104*  	djnz	_pde_u_final_out
0B199E C9          0105*  	ret
0B199F             0106*  
0B199F             0107*  ;------------------------------------------------------------------------
0B199F             0108*  ; is_digit
0B199F             0109*  ; C flag set if A is a digit
0B199F             0110*  ; preserves all registers
0B199F             0111*  ;------------------------------------------------------------------------
0B199F             0112*  is_digit:
0B199F FE 30       0113*  	cp	'0'
0B19A1 3F          0114*  	ccf
0B19A2 D0          0115*  	ret	nc	;less that '0'
0B19A3 FE 3A       0116*  	cp	'9' + 1
0B19A5 C9          0117*  	ret
0B19A6             0118*  
0B19A6             0119*  
0B19A6             0120*  ;------------------------------------------------------------------------
0B19A6             0121*  ; char2hex
0B19A6             0122*  ; Input: ASCII nibble in A
0B19A6             0123*  ; Returns: if valid nibble value in A; else 0FFh in A
0B19A6             0124*  ;------------------------------------------------------------------------
0B19A6             0125*  char2hex:
0B19A6 FE 30       0126*  	CP	'0'
0B19A8 38 1D       0127*  	JR	C, char_not_hex
0B19AA FE 3A       0128*  	CP	'9' + 1
0B19AC 30 03       0129*  	JR	NC, char_not_09
0B19AE D6 30       0130*  	sub	'0'
0B19B0 C9          0131*  	ret
0B19B1             0132*  
0B19B1             0133*  char_not_09:
0B19B1             0134*  	; char is not 0 to 9. Try upper case
0B19B1 FE 41       0135*  	CP	'A'
0B19B3 38 12       0136*  	JR	C, char_not_hex
0B19B5 FE 47       0137*  	CP	'F' + 1
0B19B7 30 03       0138*  	JR	NC, char_not_AF
0B19B9 D6 37       0139*  	sub	'A'-10
0B19BB C9          0140*  	ret
0B19BC             0141*  
0B19BC             0142*  char_not_AF:
0B19BC             0143*  	; char is not upper case A-F. Try lower
0B19BC FE 61       0144*  	CP	'a'
0B19BE 38 07       0145*  	JR	C, char_not_hex
0B19C0 FE 67       0146*  	CP	'f' + 1
0B19C2 30 03       0147*  	JR	NC, char_not_hex
0B19C4 D6 57       0148*  	sub	'a' - 10
0B19C6 C9          0149*  	RET
0B19C7             0150*  
0B19C7             0151*  char_not_hex:
0B19C7 3E FF       0152*   	ld	a,0FFh	;return -1 for not a valid hex digit
0B19C9 C9          0153*  	RET
0B19CA             0154*  
0B19CA             0155*  ;------------------------------------------------------------------------
0B19CA             0156*  ;  newline
0B19CA             0157*  ;  Output CR+LF; all registers preserved
0B19CA             0158*  ;------------------------------------------------------------------------
0B19CA             0159*  newline:
0B19CA F5          0160*         push   AF
0B19CB 3E 0D       0161*         LD     A, 13
0B19CD 5B D7       0162*         RST.LIL    10h
0B19CF 3E 0A       0163*         LD     A, 10
0B19D1 5B D7       0164*         RST.LIL    10h
0B19D3 F1          0165*         POP    AF
0B19D4 C9          0166*         RET
0B19D5             0167*  
0B19D5             0168*  ;------------------------------------------------------------------------
0B19D5             0169*  ;  put_nibble
0B19D5             0170*  ;  Output a single hex nibble in A
0B19D5             0171*  ;  All registers preserved
0B19D5             0172*  ;------------------------------------------------------------------------
0B19D5             0173*  put_nibble:
0B19D5 F5          0174*  	push   AF
0B19D6 C6 90       0175*  	add    a,090h ;Neat trick to convert hex nibble in A to ASCII
0B19D8 27          0176*  	daa
0B19D9 CE 40       0177*  	adc    a,040h
0B19DB 27          0178*  	daa
0B19DC 5B D7       0179*  	RST.LIL    10h	;output character in A
0B19DE F1          0180*  	pop    AF
0B19DF C9          0181*  	ret
0B19E0             0182*  
0B19E0             0183*  ;------------------------------------------------------------------------
0B19E0             0184*  ;  print_A
0B19E0             0185*  ;  Output the 8-bit hex number A
0B19E0             0186*  ;  All registers preserved
0B19E0             0187*  ;------------------------------------------------------------------------
0B19E0             0188*  print_A:
0B19E0 F5          0189*  	push 	AF
0B19E1 F5          0190*  	push 	AF	;save for second nibble
0B19E2 0F          0191*  	rrca
0B19E3 0F          0192*  	rrca
0B19E4 0F          0193*  	rrca
0B19E5 0F          0194*  	rrca
0B19E6 E6 0F       0195*  	and	0Fh	;first nibble
0B19E8 CD D5 19 0B 0196*  	call	put_nibble
0B19EC F1          0197*  	pop 	AF
0B19ED E6 0F       0198*  	and	0Fh	;second nibble
0B19EF CD D5 19 0B 0199*  	call	put_nibble
0B19F3 F1          0200*  	pop 	AF
0B19F4 C9          0201*  	ret
0B19F5             0202*  
0B19F5             0203*  ;------------------------------------------------------------------------
0B19F5             0204*  ;  print_HLU_hex
0B19F5             0205*  ;  Output the 24-bit hex number HLU; other registers preserved
0B19F5             0206*  ;------------------------------------------------------------------------
0B19F5             0207*  print_HLU_hex:
0B19F5 F5          0208*         push   AF
0B19F6 22 21 1A 0B 0209*         ld     (hex_temp),hl
0B19FA 3A 23 1A 0B 0210*         ld     a,(hex_temp+2)
0B19FE CD E0 19 0B 0211*         call   print_A
0B1A02 3A 22 1A 0B 0212*         ld     a,(hex_temp+1)
0B1A06 CD E0 19 0B 0213*         call   print_A
0B1A0A 3A 21 1A 0B 0214*         ld     a,(hex_temp)
0B1A0E CD E0 19 0B 0215*         call   print_A
0B1A12 F1          0216*         POP    AF
0B1A13 C9          0217*         RET
0B1A14             0218*  
0B1A14             0219*  ;------------------------------------------------------------------------
0B1A14             0220*  ;  puts
0B1A14             0221*  ;  Output a zero-terminated string whose address is in HL; all
0B1A14             0222*  ;  registers preserved.
0B1A14             0223*  ;------------------------------------------------------------------------
0B1A14             0224*  puts:
0B1A14 F5          0225*         push   AF
0B1A15 C5          0226*         push   BC
0B1A16 01 00 00 00 0227*         ld     BC, 0                ; Set to 0, so length ignored...
0B1A1A 3E 00       0228*         ld     A, 0                 ; Use character in A as delimiter
0B1A1C 5B DF       0229*         RST.LIL    18h                  ; This calls a RST in the eZ80 address space
0B1A1E C1          0230*         pop    BC
0B1A1F F1          0231*         pop    AF
0B1A20 C9          0232*         ret
0B1A21             0233*  
0B1A21             0234*  ;------------------------------------------------------------------------
0B1A21             0235*  ; Data area
0B1A21             0236*  ; Storage for 24 bit conversion
0B1A21             0237*  ;------------------------------------------------------------------------
0B1A21             0238*  hex_temp:
0B1A21 00 00 00    0239*         dw24     0      ;3 bytes for HL used for both hex and decimal temp
0B1A24             0240*  
0B1A24             0241*  outbuf:
0B1A24 31 36 37 37 0242*  	db	"16777215 "	;largest number with an extra space
       37 32 31 35 
       20          
0B1A2D             0031   
0B1A2D             0032   ; APPLICATION INCLUDES
0B1A2D 55 73 61 67 0033   str_usage: ASCIZ "Usage: flower <args>\r\n"
       65 3A 20 66 
       6C 6F 77 65 
       72 20 3C 61 
       72 67 73 3E 
       0D 0A 00    
0B1A44 45 72 72 6F 0034   str_error: ASCIZ "Error!\r\n"
       72 21 0D 0A 
       00          
0B1A4D 53 75 63 63 0035   str_success: ASCIZ "Success!\r\n"
       65 73 73 21 
       0D 0A 00    
0B1A58             0036   
0B1A58             0037   ; This program draws 2D curves related to the hypotrochoid / epitrochoid family (i.e. Spirographs),
0B1A58             0038   ; more generally known as roulettes. While it is possible to construct curves fitting the precise
0B1A58             0039   ; definitions of such curves, the program is not limited to them as slipping of the outer circle
0B1A58             0040   ; is allowable. In addition, continually plotting the curve insribed by the outer circle is not required.
0B1A58             0041   ; This allows rotating polygonal shapes remniscent of string art, as well as daisy-like curves.
0B1A58             0042   ; Hence the name "flower" even though the program is not limited to such shapes.
0B1A58             0043   ; Another key difference is that cumulative shrinking can be applied to the radii of the rotating circles,
0B1A58             0044   ; thus allowing curves which form true spirals in contrast to the Spirograph toy, which does not.
0B1A58             0045   ;
0B1A58             0046   ; Parameters with example values:
0B1A58             0047   ; petals      = 3.03  :
0B1A58             0048   ; vectors     = 1.98  :
0B1A58             0049   ; depth       = 0.6   :
0B1A58             0050   ; periods     = 66    :
0B1A58             0051   ; shrink      = 0.8   :
0B1A58             0052   ; theta_prime = 0.0   :
0B1A58             0053   ; radius_scale= 480   :
0B1A58             0054   
0B1A58             0055   ; ========= BOILERPLATE MAIN LOOP =========
0B1A58             0056   ; The main routine
0B1A58             0057   ; IXU: argv - pointer to array of parameters
0B1A58             0058   ;   C: argc - number of parameters
0B1A58             0059   ; Returns:
0B1A58             0060   ;  HL: Error code, or 0 if OK
0B1A58             0061   
0B1A58             0062   min_args: equ 2
0B1A58             0063   
0B1A58             0064   _main:
0B1A58 79          0065       ld a,c              ; how many arguments?
0B1A59 FE 02       0066       cp min_args         ; not enough?
0B1A5B D2 F0 1A 0B 0067       jp nc,main          ; if enough, go to main loop
0B1A5F 21 2D 1A 0B 0068       ld hl,str_usage     ; if not enough, print usage
0B1A63 CD 73 02 0B 0069       call printString
0B1A67             0070                           ; fall through to _main_end_error
0B1A67             0071   
0B1A67             0072   _main_end_error:
0B1A67 21 44 1A 0B 0073       ld hl,str_error     ; print error message
0B1A6B CD 73 02 0B 0074       call printString
0B1A6F 21 13 00 00 0075       ld hl,19            ; return error code 19
0B1A73 C9          0076       ret
0B1A74             0077   
0B1A74             0078   _main_end_ok:
0B1A74             0079       ; ld hl,str_success   ; print success message
0B1A74             0080       ; call printString
0B1A74 21 00 00 00 0081       ld hl,0             ; return 0 for success
0B1A78 C9          0082       ret
0B1A79             0083   
0B1A79             0084   ; GLOBAL VARIABLES / DEFAULTS
0B1A79             0085   ; ---- input arguments (16.8 fixed) ----
0B1A79             0086   input_params_num: equ 5
0B1A79             0087   input_params:               ; label so we can traverse the table in loops
0B1A79 07 03 00    0088   petals: 	    dl 0x000307	; 3.03
0B1A7C FA 01 00    0089   vectors: 	    dl 0x0001FA	; 1.98
0B1A7F 99 00 00    0090   depth: 	        dl 0x000099	; 0.6
0B1A82 00 42 00    0091   periods: 	    dl 0x004200	; 66
0B1A85 CC 00 00    0092   shrink: 	    dl 0x0000CC	; 0.8
0B1A88 00 01 00    0093   clock_prime: 	dl 0x000100	; 1
0B1A8B 00 01 00    0094   clock_petal: 	dl 0x000100	; 1
0B1A8E 00 00 00    0095   theta_prime: 	dl 0x000000	; 0
0B1A91 00 00 00    0096   theta_petal: 	dl 0x000000	; 0
0B1A94 00 E0 01    0097   radius_scale: 	dl 0x01E000	; 480
0B1A97             0098   
0B1A97             0099   ; ---- main loop parameters (16.8 fixed) ----
0B1A97 00 00 00    0100   step_theta_prime:   dl 0x000000  ; Step increment for theta_prime in each loop iteration
0B1A9A 00 00 00    0101   step_theta_petal:   dl 0x000000  ; Step increment for theta_petal in each loop iteration
0B1A9D 00 00 00    0102   total_steps:        dl 0x000000  ; Total number of iterations based on periods and step_theta_prime
0B1AA0 00 00 00    0103   shrink_step:        dl 0x000000  ; Step decrement applied to radius in each iteration
0B1AA3             0104   
0B1AA3             0105   ; ---- main loop state variables (16.8 fixed) ----
0B1AA3 00 00 00    0106   prime_radius:       dl 0x000000  ; Initial radius before shrink factor is applied
0B1AA6             0107   
0B1AA6             0108   
0B1AA6             0109   main_loop:
0B1AA6             0110   ; --- convert input thetas to 16.8 fixed point degrees255
0B1AA6 2A 8E 1A 0B 0111       ld hl,(theta_prime) ; get the theta_prime value
0B1AAA CD 52 0B 0B 0112       call deg_360_to_255 ; convert to 16.8 fixed point
0B1AAE 22 8E 1A 0B 0113       ld (theta_prime),hl ; store the result
0B1AB2             0114   
0B1AB2 2A 91 1A 0B 0115       ld hl,(theta_petal) ; get the theta_petal value
0B1AB6 CD 52 0B 0B 0116       call deg_360_to_255 ; convert to 16.8 fixed point
0B1ABA 22 91 1A 0B 0117       ld (theta_petal),hl ; store the result
0B1ABE             0118   
0B1ABE             0119   ; --- compute the main loop parameters ---
0B1ABE             0120   ; step_theta_prime = 2 * math.pi / (petals * vectors)
0B1ABE 2A 79 1A 0B 0121       ld hl,(petals)
0B1AC2 ED 5B 7C 1A 0122       ld de,(vectors)
       0B          
0B1AC7 CD 03 09 0B 0123       call umul168 ; uh.l = petals * vectors
0B1ACB EB          0124       ex de,hl ; de = petals * vectors
0B1ACC 21 00 00 01 0125       ld hl,256*256 ; 360 degrees in 16.8 fixed point
0B1AD0 CD 6B 09 0B 0126       call udiv168 ; ud.e = 256 / (petals * vectors)
0B1AD4 ED 53 97 1A 0127       ld (step_theta_prime),de ; store the result
       0B          
0B1AD9             0128   
0B1AD9             0129   ; ; step_theta_petal = 2 * math.pi / vectors
0B1AD9 21 00 00 01 0130       ld hl,256*256 ; 360 degrees in 16.8 fixed point
0B1ADD ED 5B 7C 1A 0131       ld de,(vectors)
       0B          
0B1AE2 CD 6B 09 0B 0132       call udiv168 ; ud.e = 256 / vectors
0B1AE6 ED 53 9A 1A 0133       ld (step_theta_petal),de ; store the result
       0B          
0B1AEB             0134   
0B1AEB             0135   ; total_steps = int(2 * math.pi / step_theta_prime * periods)
0B1AEB             0136   
0B1AEB             0137   
0B1AEB             0138   ; step_theta_prime *= clock_prime
0B1AEB             0139   
0B1AEB             0140   
0B1AEB             0141   ; step_theta_petal *= clock_petal
0B1AEB             0142   
0B1AEB CD 5E 05 0B 0143       call dumpRegistersHex
0B1AEF             0144       ; call print_u168
0B1AEF             0145       ; ex de,hl
0B1AEF             0146       ; call print_u168
0B1AEF             0147       ; ex de,hl
0B1AEF             0148       ; call printNewLine
0B1AEF             0149   
0B1AEF             0150   @loop:
0B1AEF             0151   
0B1AEF             0152           ; jp @loop
0B1AEF C9          0153           ret
0B1AF0             0154   
0B1AF0             0155   
0B1AF0             0156   
0B1AF0             0157   ; ========= BEGIN CUSTOM MAIN LOOP =========
0B1AF0             0158   main:
0B1AF0 0D          0159       dec c               ; decrement the argument count to skip the program name
0B1AF1 CD FD 1A 0B 0160       call load_input     ; load the input arguments
0B1AF5 CD A6 1A 0B 0161       call main_loop      ; run the main loop
0B1AF9 C3 74 1A 0B 0162       jp _main_end_ok     ; exit with success
0B1AFD             0163   
0B1AFD             0164   ; --- Load arguments ---
0B1AFD             0165   ; --------------------------------
0B1AFD             0166   load_input:
0B1AFD 79          0167       ld a,c ; put the number of entered arguments in a
0B1AFE 06 05       0168       ld b,input_params_num ; loop counter = number of arguments
0B1B00 B8          0169       cp b ; compare the number of arguments to the number of arguments
0B1B01 C4 17 1B 0B 0170       call nz,args_count_off ; handle discrepancies
0B1B05             0171       ; TODO: we may want to branch here according to the result
0B1B05 FD 21 79 1A 0172       ld iy,input_params  ; point to the arguments table
       0B          
0B1B0A             0173   @loop:
0B1B0A CD 3C 1B 0B 0174           call get_arg_s168 ; get the next argument
0B1B0E FD 1F 00    0175           ld (iy),de ; store the argument in the table
0B1B11 ED 33 03    0176           lea iy,iy+3  ; point to the next parameter
0B1B14 10 F4       0177           djnz @loop ; loop until done
0B1B16 C9          0178           ret
0B1B17             0179   
0B1B17             0180   
0B1B17             0181   
0B1B17             0182   
0B1B17             0183   
0B1B17             0184   ; --- Specific parameter processing functions ---
0B1B17             0185   args_count_off:
0B1B17 21 20 1B 0B 0186       ld hl,@str_args_count_off
0B1B1B CD 73 02 0B 0187       call printString
0B1B1F C9          0188       ret ; TODO: implement this
0B1B20 41 72 67 75 0189   @str_args_count_off: db "Argument counts mismatch!\r\n",0
       6D 65 6E 74 
       20 63 6F 75 
       6E 74 73 20 
       6D 69 73 6D 
       61 74 63 68 
       21 0D 0A 00 
0B1B3C             0190   
0B1B3C             0191   
0B1B3C             0192   ; ========== HELPER FUNCTIONS ==========
0B1B3C             0193   ; get the next argument after ix as a signed 16.8 fixed point number
0B1B3C             0194   ; inputs: ix = pointer to the argument string
0B1B3C             0195   ; outputs: ude = signed 16.8 fixed point number
0B1B3C             0196   ; destroys: a, d, e, h, l, f
0B1B3C             0197   get_arg_s168:
0B1B3C ED 32 03    0198       lea ix,ix+3 ; point to the next argument
0B1B3F DD 27 00    0199       ld hl,(ix)  ; get the argument string
0B1B42 CD 94 01 0B 0200       call asc_to_s168 ; convert the string to a number
0B1B46 C9          0201       ret ; return with the value in DE
0B1B47             0202   
0B1B47             0203   ; Inputs: ix = pointer to the argument string
0B1B47             0204   ; Outputs: ude = signed 24-bit integer
0B1B47             0205   ; Destroys: a, d, e, h, l, f
0B1B47             0206   get_arg_s24:
0B1B47 ED 32 03    0207       lea ix,ix+3 ; point to the next argument
0B1B4A DD 27 00    0208       ld hl,(ix)  ; get the argument string
0B1B4D CD 45 01 0B 0209       call asc_to_s24 ; convert the string to a number
0B1B51 C9          0210       ret ; return with the value in DE
0B1B52             0211   
0B1B52             0212   get_plot_coords:
0B1B52             0213   ; get the move coordinates
0B1B52 ED 32 03    0214       lea ix,ix+3 ; pointer to next argument address
0B1B55 DD 27 00    0215       ld hl,(ix)  ; pointer to the x coordinate string
0B1B58 CD 94 01 0B 0216       call asc_to_s168 ; de = x coordinate
0B1B5C D5          0217       push de
0B1B5D C1          0218       pop bc ; bc = x coordinate
0B1B5E ED 32 03    0219       lea ix,ix+3 ; pointer to next argument address
0B1B61 DD 27 00    0220       ld hl,(ix)  ; pointer to the y coordinate string
0B1B64 CD 94 01 0B 0221       call asc_to_s168 ; de = y coordinate
0B1B68 C9          0222       ret
0B1B69             0223   
0B1B69             0224   get_arg_text:
0B1B69 ED 32 03    0225       lea ix,ix+3 ; point to the next argument
0B1B6C DD 27 00    0226       ld hl,(ix)  ; get the argument string
0B1B6F C9          0227       ret
0B1B70             0228   
0B1B70             0229   ; match the next argument after ix to the dispatch table at iy
0B1B70             0230   ;   - arguments and dispatch entries are zero-terminated, case-sensitive strings
0B1B70             0231   ;   - final entry of dispatch table must be a 3-byte zero or bad things will happen
0B1B70             0232   ; returns: NO MATCH: iy=dispatch list terminator a=1 and zero flag reset
0B1B70             0233   ;          ON MATCH: iy=dispatch address, a=0 and zero flag set
0B1B70             0234   ; destroys: a, hl, de, ix, iy, flags
0B1B70             0235   match_next:
0B1B70 ED 32 03    0236       lea ix,ix+3         ; point to the next argument
0B1B73             0237   @loop:
0B1B73 FD 27 00    0238       ld hl,(iy)          ; pointer argument dispatch record
0B1B76             0239       sign_hlu            ; check for list terminator
0B1B76 19          0001M          add hl,de
0B1B77 B7          0002M          or a
0B1B78 ED 52       0003M          sbc hl,de
0B1B7A CA 92 1B 0B 0240       jp z,@no_match      ; if a=0, return error
0B1B7E 23          0241       inc hl              ; skip over jp instruction
0B1B7F 23          0242       inc hl
0B1B80 DD 17 00    0243       ld de,(ix)          ; pointer to the argument string
0B1B83 CD A9 1B 0B 0244       call str_equal      ; compare the argument to the dispatch table entry
0B1B87 CA 94 1B 0B 0245       jp z,@match         ; if equal, return success
0B1B8B ED 33 03    0246       lea iy,iy+3         ; if not equal, bump iy to next dispatch table entry
0B1B8E C3 73 1B 0B 0247       jp @loop            ; and loop
0B1B92             0248   @no_match:
0B1B92 3C          0249       inc a               ; no match so return a=1 and zero flag reset
0B1B93 C9          0250       ret
0B1B94             0251   @match:
0B1B94 FD 37 00    0252       ld iy,(iy)          ; get the function pointer
0B1B97 C9          0253       ret                 ; return a=0 and zero flag set
0B1B98             0254   
0B1B98             0255   ; same as match_next, but prints the parameter if a match is found
0B1B98             0256   match_next_and_print:
0B1B98 CD 70 1B 0B 0257       call match_next
0B1B9C C0          0258       ret nz ; no match found
0B1B9D ED 32 FD    0259       lea ix,ix-3
0B1BA0 CD 69 1B 0B 0260       call get_arg_text ; hl points to the operator string
0B1BA4 CD B4 1B 0B 0261       call print_param
0B1BA8 C9          0262       ret
0B1BA9             0263   
0B1BA9             0264   ; compare two zero-terminated strings for equality, case-sensitive
0B1BA9             0265   ; hl: pointer to first string, de: pointer to second string
0B1BA9             0266   ; returns: z if equal, nz if not equal
0B1BA9             0267   ; destroys: a, hl, de
0B1BA9             0268   str_equal:
0B1BA9 1A          0269       ld a,(de)           ; get the first character
0B1BAA BE          0270       cp (hl)             ; compare to the second character
0B1BAB C0          0271       ret nz              ; if not equal, return
0B1BAC B7          0272       or a
0B1BAD C8          0273       ret z               ; if equal and zero, return
0B1BAE 23          0274       inc hl              ; next character
0B1BAF 13          0275       inc de
0B1BB0 C3 A9 1B 0B 0276       jp str_equal        ; loop until end of string
0B1BB4             0277   
0B1BB4             0278   ; print the parameter string pointed to by ix
0B1BB4             0279   ; destroys: a, hl
0B1BB4             0280   print_param:
0B1BB4 DD 27 00    0281       ld hl,(ix)          ; get the parameter pointer
0B1BB7 CD 73 02 0B 0282       call printString    ; print the parameter string
0B1BBB 3E 20       0283       ld a,' '            ; print a space separator
0B1BBD 5B D7       0284       rst.lil $10
0B1BBF C9          0285       ret
0B1BC0             0286   
0B1BC0             0287   ; print the parameters
0B1BC0             0288   ; inputs: b = number of parameters, ix = pointer to the parameters
0B1BC0             0289   ; destroys: a, hl, bc
0B1BC0             0290   print_params:
0B1BC0 41          0291       ld b,c              ; loop counter = number of parameters
0B1BC1 DD E5       0292       push ix             ; save the pointer to the parameters
0B1BC3             0293   @loop:
0B1BC3 C5          0294       push bc             ; save the loop counter
0B1BC4 CD B4 1B 0B 0295       call print_param    ; print the parameter
0B1BC8 ED 32 03    0296       lea ix,ix+3         ; next parameter pointer
0B1BCB C1          0297       pop bc              ; get back the loop counter
0B1BCC 10 F5       0298       djnz @loop          ; loop until done
0B1BCE DD E1       0299       pop ix              ; restore the pointer to the parameters
0B1BD0 C9          0300       ret
0B1BD1             0301   
0B1BD1             0302   debug_print:
0B1BD1 CD 88 02 0B 0303       call printNewLine   ; DEBUG
0B1BD5 CD 8D 06 0B 0304       call dumpFlags      ; DEBUG
0B1BD9 CD B4 1B 0B 0305       call print_param    ; DEBUG
0B1BDD CD 88 02 0B 0306       call printNewLine   ; DEBUG
0B1BE1 CD 88 02 0B 0307       call printNewLine   ; DEBUG
0B1BE5 C9          0308       ret
