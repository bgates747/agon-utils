PC     Output      Line
040000             0001   	.assume adl=1
040000             0002       .org 0x040000
040000             0003   
040000 C3 45 00 04 0004       jp start
040004             0005   
040004 FF FF FF FF 0006       .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0007       .db "MOS"
040043 00          0008       .db 00h
040044 01          0009       .db 01h
040045             0010   
040045             0011   start:
040045 F5          0012       push af
040046 C5          0013       push bc
040047 D5          0014       push de
040048 DD E5       0015       push ix
04004A FD E5       0016       push iy
04004C             0017   
04004C CD 6D 0C 04 0018   	call main
040050             0019   
040050             0020   exit:
040050 FD E1       0021       pop iy
040052 DD E1       0022       pop ix
040054 D1          0023       pop de
040055 C1          0024       pop bc
040056 F1          0025       pop af
040057 21 00 00 00 0026       ld hl,0
04005B C9          0027       ret
04005C             0028   
04005C             0029   ; API includes
04005C             0030       include "mos_api.inc"
04005C             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
04005C             0002*  ;
04005C             0003*  ; Title:	AGON MOS - API for user projects
04005C             0004*  ; Author:	Dean Belfield
04005C             0005*  ;			Adapted for agon-ez80asm by Jeroen Venema
04005C             0006*  ;			Added MOS error codes for return in HL
04005C             0007*  ; Created:	03/08/2022
04005C             0008*  ; Last Updated:	10/08/2023
04005C             0009*  ;
04005C             0010*  ; Modinfo:
04005C             0011*  ; 05/08/2022:	Added mos_feof
04005C             0012*  ; 09/08/2022:	Added system variables: cursorX, cursorY
04005C             0013*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
04005C             0014*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
04005C             0015*  ; 24/09/2022:	Added mos_getError, mos_mkdir
04005C             0016*  ; 13/10/2022:	Added mos_oscli
04005C             0017*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
04005C             0018*  ; 04/03/2023:	Added sysvar_scrpixelIndex
04005C             0019*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
04005C             0020*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
04005C             0021*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
04005C             0022*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
04005C             0023*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
04005C             0024*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
04005C             0025*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
04005C             0026*  ; 19/05/2023:	Added sysvar_scrMode
04005C             0027*  ; 05/06/2023:	Added sysvar_rtcEnable
04005C             0028*  ; 03/08/2023:	Added mos_setkbvector
04005C             0029*  ; 10/08/2023:	Added mos_getkbmap
04005C             0030*  
04005C             0031*  ; VDP control (VDU 23, 0, n)
04005C             0032*  ;
04005C             0033*  vdp_gp:				EQU 80h
04005C             0034*  vdp_keycode:		EQU 81h
04005C             0035*  vdp_cursor:			EQU	82h
04005C             0036*  vdp_scrchar:		EQU	83h
04005C             0037*  vdp_scrpixel:		EQU	84h
04005C             0038*  vdp_audio:			EQU	85h
04005C             0039*  vdp_mode:			EQU	86h
04005C             0040*  vdp_rtc:			EQU	87h
04005C             0041*  vdp_keystate:		EQU	88h
04005C             0042*  vdp_logicalcoords:	EQU	C0h
04005C             0043*  vdp_terminalmode:	EQU	FFh
04005C             0044*  
04005C             0045*  ;
04005C             0046*  ; Macro for calling the API
04005C             0047*  ; Parameters:
04005C             0048*  ; - function: One of the function numbers listed below
04005C             0049*  ;
04005C             0050*  	MACRO	MOSCALL	function
04005C             0051*  			LD	A, function
04005C             0052*  			RST.LIL	08h
04005C             0053*  	ENDMACRO
04005C             0054*  
04005C             0055*  ; MOS high level functions
04005C             0056*  ;
04005C             0057*  ; Get keycode
04005C             0058*  ; Returns:
04005C             0059*  ;  A: ASCII code of key pressed, or 0 if no key pressed
04005C             0060*  mos_getkey:			EQU	00h
04005C             0061*  
04005C             0062*  ; Load an area of memory from a file.
04005C             0063*  ; HLU: Address of filename (zero terminated)
04005C             0064*  ; DEU: Address at which to load
04005C             0065*  ; BCU: Maximum allowed size (bytes)
04005C             0066*  ; Returns:
04005C             0067*  ; - A: File error, or 0 if OK
04005C             0068*  ; - F: Carry reset indicates no room for file.
04005C             0069*  mos_load:			EQU	01h
04005C             0070*  
04005C             0071*  ; Save a file to the SD card from RAM
04005C             0072*  ; HLU: Address of filename (zero terminated)
04005C             0073*  ; DEU: Address to save from
04005C             0074*  ; BCU: Number of bytes to save
04005C             0075*  ; Returns:
04005C             0076*  ; - A: File error, or 0 if OK
04005C             0077*  ; - F: Carry reset indicates no room for file
04005C             0078*  mos_save:			EQU	02h
04005C             0079*  
04005C             0080*  ; Change directory
04005C             0081*  ; HLU: Address of path (zero terminated)
04005C             0082*  ; Returns:
04005C             0083*  ; - A: File error, or 0 if OK
04005C             0084*  mos_cd:				EQU	03h
04005C             0085*  
04005C             0086*  ; Directory listing
04005C             0087*  ; HLU: Address of path (zero terminated)
04005C             0088*  ; Returns:
04005C             0089*  ; - A: File error, or 0 if OK
04005C             0090*  mos_dir:			EQU	04h
04005C             0091*  
04005C             0092*  ; Delete a file from the SD card
04005C             0093*  ; HLU: Address of filename (zero terminated)
04005C             0094*  ; Returns:
04005C             0095*  ; - A: File error, or 0 if OK
04005C             0096*  mos_del:			EQU	05h
04005C             0097*  
04005C             0098*  ; Rename a file on the SD card
04005C             0099*  ; HLU: Address of filename1 (zero terminated)
04005C             0100*  ; DEU: Address of filename2 (zero terminated)
04005C             0101*  ; Returns:
04005C             0102*  ; - A: File error, or 0 if OK
04005C             0103*  mos_ren:			EQU	06h
04005C             0104*  
04005C             0105*  ; Make a folder on the SD card
04005C             0106*  ; HLU: Address of filename (zero terminated)
04005C             0107*  ; Returns:
04005C             0108*  ; - A: File error, or 0 if OK
04005C             0109*  mos_mkdir:			EQU	07h
04005C             0110*  
04005C             0111*  ; Get a pointer to a system variable
04005C             0112*  ; Returns:
04005C             0113*  ; IXU: Pointer to system variables (see mos_api.asm for more details)
04005C             0114*  mos_sysvars:		EQU	08h
04005C             0115*  
04005C             0116*  ; Invoke the line editor
04005C             0117*  ; HLU: Address of the buffer
04005C             0118*  ; BCU: Buffer length
04005C             0119*  ;   E: 0 to not clear buffer, 1 to clear
04005C             0120*  ; Returns:
04005C             0121*  ;   A: Key that was used to exit the input loop (CR=13, ESC=27)
04005C             0122*  mos_editline:		EQU	09h
04005C             0123*  
04005C             0124*  ; Open a file
04005C             0125*  ; HLU: Filename
04005C             0126*  ;   C: Mode
04005C             0127*  ; Returns:
04005C             0128*  ;   A: Filehandle, or 0 if couldn't open
04005C             0129*  mos_fopen:			EQU	0Ah
04005C             0130*  
04005C             0131*  ; Close a file
04005C             0132*  ;   C: Filehandle
04005C             0133*  ; Returns
04005C             0134*  ;   A: Number of files still open
04005C             0135*  mos_fclose:			EQU	0Bh
04005C             0136*  
04005C             0137*  ; Get a character from a file
04005C             0138*  ;   C: Filehandle
04005C             0139*  ; Returns:
04005C             0140*  ;   A: Character read
04005C             0141*  ;   F: C set if last character in file, otherwise NC
04005C             0142*  mos_fgetc:			EQU	0Ch
04005C             0143*  
04005C             0144*  ; Write a character to a file
04005C             0145*  ;   C: Filehandle
04005C             0146*  ;   B: Character to write
04005C             0147*  mos_fputc:			EQU	0Dh
04005C             0148*  
04005C             0149*  ; Check whether we're at the end of the file
04005C             0150*  ;   C: Filehandle
04005C             0151*  ; Returns:
04005C             0152*  ;   A: 1 if at end of file, otherwise 0
04005C             0153*  mos_feof:			EQU	0Eh
04005C             0154*  
04005C             0155*  ; Copy an error message
04005C             0156*  ;   E: The error code
04005C             0157*  ; HLU: Address of buffer to copy message into
04005C             0158*  ; BCU: Size of buffer
04005C             0159*  mos_getError:		EQU	0Fh
04005C             0160*  
04005C             0161*  ; Execute a MOS command
04005C             0162*  ; HLU: Pointer the the MOS command string
04005C             0163*  ; DEU: Pointer to additional command structure
04005C             0164*  ; BCU: Number of additional commands
04005C             0165*  ; Returns:
04005C             0166*  ;   A: MOS error code
04005C             0167*  mos_oscli:			EQU	10h
04005C             0168*  
04005C             0169*  ; Copy a file on the SD card
04005C             0170*  ; HLU: Address of filename1 (zero terminated)
04005C             0171*  ; DEU: Address of filename2 (zero terminated)
04005C             0172*  ; Returns:
04005C             0173*  ; - A: File error, or 0 if OK
04005C             0174*  mos_copy:			EQU	11h
04005C             0175*  
04005C             0176*  ; Fetch a RTC string
04005C             0177*  ; HLU: Pointer to a buffer to copy the string to
04005C             0178*  ; Returns:
04005C             0179*  ;   A: Length of time
04005C             0180*  mos_getrtc:			EQU	12h
04005C             0181*  
04005C             0182*  ; Set the RTC
04005C             0183*  ; HLU: Pointer to a buffer with the time data in
04005C             0184*  mos_setrtc:			EQU	13h
04005C             0185*  
04005C             0186*  ; Set an interrupt vector
04005C             0187*  ; HLU: Pointer to the interrupt vector (24-bit pointer)
04005C             0188*  ;   E: Vector # to set
04005C             0189*  ; Returns:
04005C             0190*  ; HLU: Pointer to the previous vector
04005C             0191*  mos_setintvector:	EQU	14h
04005C             0192*  
04005C             0193*  ; Open UART1
04005C             0194*  ; IXU: Pointer to UART struct
04005C             0195*  ;	+0: Baud rate (24-bit, little endian)
04005C             0196*  ;	+3: Data bits
04005C             0197*  ;	+4: Stop bits
04005C             0198*  ;	+5: Parity bits
04005C             0199*  ;	+6: Flow control (0: None, 1: Hardware)
04005C             0200*  ;	+7: Enabled interrupts
04005C             0201*  ; Returns:
04005C             0202*  ;   A: Error code (0 = no error)
04005C             0203*  mos_uopen:			EQU	15h
04005C             0204*  
04005C             0205*  ; Close UART1
04005C             0206*  mos_uclose:			EQU	16h
04005C             0207*  
04005C             0208*  ; Get a character from UART1
04005C             0209*  ; Returns:
04005C             0210*  ;   A: Character read
04005C             0211*  ;   F: C if successful
04005C             0212*  ;   F: NC if the UART is not open
04005C             0213*  mos_ugetc:			EQU	17h
04005C             0214*  
04005C             0215*  ; Write a character to UART1
04005C             0216*  ;   C: Character to write
04005C             0217*  ; Returns:
04005C             0218*  ;   F: C if successful
04005C             0219*  ;   F: NC if the UART is not open
04005C             0220*  mos_uputc:			EQU	18h
04005C             0221*  
04005C             0222*  ; Convert a file handle to a FIL structure pointer
04005C             0223*  ;   C: Filehandle
04005C             0224*  ; Returns:
04005C             0225*  ; HLU: Pointer to a FIL struct
04005C             0226*  mos_getfil:			EQU	19h
04005C             0227*  
04005C             0228*  ; Read a block of data from a file
04005C             0229*  ;   C: Filehandle
04005C             0230*  ; HLU: Pointer to where to write the data to
04005C             0231*  ; DEU: Number of bytes to read
04005C             0232*  ; Returns:
04005C             0233*  ; DEU: Number of bytes read
04005C             0234*  mos_fread:			EQU	1Ah
04005C             0235*  
04005C             0236*  ; Write a block of data to a file
04005C             0237*  ;  C: Filehandle
04005C             0238*  ; HLU: Pointer to where the data is
04005C             0239*  ; DEU: Number of bytes to write
04005C             0240*  ; Returns:
04005C             0241*  ; DEU: Number of bytes read
04005C             0242*  mos_fwrite:			EQU	1Bh
04005C             0243*  
04005C             0244*  ; Move the read/write pointer in a file
04005C             0245*  ;   C: Filehandle
04005C             0246*  ; HLU: Least significant 3 bytes of the offset from the start of the file (DWORD)
04005C             0247*  ;   E: Most significant byte of the offset
04005C             0248*  ; Returns:
04005C             0249*  ;   A: FRESULT
04005C             0250*  mos_flseek:			EQU	1Ch
04005C             0251*  
04005C             0252*  ; Move the read/write pointer in a file relative to the current position
04005C             0253*  ;   C: Filehandle
04005C             0254*  ; DEU: Signed 24-bit offset
04005C             0255*  ; Returns:
04005C             0256*  ;   A: FRESULT
04005C             0257*  mos_api_flseek_rel:
04005C C5          0258*  	push bc ; back up file handle in c
04005D D5          0259*  	push de ; save offset
04005E             0260*  	MOSCALL mos_getfil
04005E 3E 19       0001*M 			LD	A, function
040060 5B CF       0002*M 			RST.LIL	08h
040062 E5          0261*  	push hl
040063 FD E1       0262*  	pop iy ; iy points to FIL struct
040065 FD 27 11    0263*  	ld hl,(iy+fil_fptr) ; get lowest 3 bytes of current position
040068 AF          0264*  	xor a ; clear carry
040069 D1          0265*  	pop de ; restore offset
04006A ED 5A       0266*  	adc hl,de ; adc the offset because we need sign flag
04006C F2 74 00 04 0267*  	jp p,@not_neg
040070 21 00 00 00 0268*  	ld hl,0 ; seek to beginning of file
040074             0269*  @not_neg:
040074 C1          0270*  	pop bc ; restore file handle to c
040075 1E 00       0271*  	ld e,0 ; highest byte of offset
040077             0272*  	MOSCALL mos_flseek
040077 3E 1C       0001*M 			LD	A, function
040079 5B CF       0002*M 			RST.LIL	08h
04007B C9          0273*  	ret
04007C             0274*  
04007C             0275*  ; Set a VDP keyboard packet receiver callback
04007C             0276*  ;   C: If non-zero then set the top byte of HLU(callback address)  to MB (for ADL=0 callers)
04007C             0277*  ; HLU: Pointer to callback
04007C             0278*  mos_setkbvector:	EQU	1Dh
04007C             0279*  
04007C             0280*  ; Get the address of the keyboard map
04007C             0281*  ; Returns:
04007C             0282*  ; IXU: Base address of the keymap
04007C             0283*  mos_getkbmap:		EQU	1Eh
04007C             0284*  
04007C             0285*  ; MOS program exit codes
04007C             0286*  ;
04007C             0287*  EXIT_OK:				EQU  0;	"OK",
04007C             0288*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
04007C             0289*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
04007C             0290*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
04007C             0291*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
04007C             0292*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
04007C             0293*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
04007C             0294*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
04007C             0295*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
04007C             0296*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
04007C             0297*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
04007C             0298*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
04007C             0299*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
04007C             0300*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
04007C             0301*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
04007C             0302*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
04007C             0303*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
04007C             0304*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
04007C             0305*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
04007C             0306*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
04007C             0307*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
04007C             0308*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
04007C             0309*  
04007C             0310*  ; FatFS file access functions
04007C             0311*  ;
04007C             0312*  ; Open a file
04007C             0313*  ; HLU: Pointer to a blank FIL struct
04007C             0314*  ; DEU: Pointer to the filename (0 terminated)
04007C             0315*  ;   C: File mode
04007C             0316*  ; Returns:
04007C             0317*  ;   A: FRESULT
04007C             0318*  ffs_fopen:			EQU	80h
04007C             0319*  
04007C             0320*  ; Close a file
04007C             0321*  ; HLU: Pointer to a blank FIL struct
04007C             0322*  ; Returns:
04007C             0323*  ;   A: FRESULT
04007C             0324*  ffs_fclose:			EQU	81h
04007C             0325*  
04007C             0326*  ; Read data from a file
04007C             0327*  ; HLU: Pointer to a FIL struct
04007C             0328*  ; DEU: Pointer to where to write the file out
04007C             0329*  ; BCU: Number of bytes to read
04007C             0330*  ; Returns:
04007C             0331*  ;   A: FRESULT
04007C             0332*  ; BCU: Number of bytes read
04007C             0333*  ffs_fread:			EQU	82h
04007C             0334*  
04007C             0335*  ; Write data to a file
04007C             0336*  ; HLU: Pointer to a FIL struct
04007C             0337*  ; DEU: Pointer to the data to write out
04007C             0338*  ; BCU: Number of bytes to write
04007C             0339*  ; Returns:
04007C             0340*  ;   A: FRESULT
04007C             0341*  ; BCU: Number of bytes written
04007C             0342*  ffs_fwrite:			EQU	83h
04007C             0343*  
04007C             0344*  ; Move the read/write pointer in a file
04007C             0345*  ; HLU: Pointer to a FIL struct
04007C             0346*  ; DEU: Least significant 3 bytes of the offset from the start of the file (DWORD)
04007C             0347*  ;   C: Most significant byte of the offset
04007C             0348*  ; Returns:
04007C             0349*  ;   A: FRESULT
04007C             0350*  ffs_flseek:			EQU	84h
04007C             0351*  
04007C             0352*  ; not implemented
04007C             0353*  ffs_ftruncate:		EQU	85h
04007C             0354*  
04007C             0355*  ; not implemented
04007C             0356*  ffs_fsync:			EQU	86h
04007C             0357*  
04007C             0358*  ; not implemented
04007C             0359*  ffs_fforward:		EQU	87h
04007C             0360*  
04007C             0361*  ; not implemented
04007C             0362*  ffs_fexpand:		EQU	88h
04007C             0363*  
04007C             0364*  ; not implemented
04007C             0365*  ffs_fgets:			EQU	89h
04007C             0366*  
04007C             0367*  ; not implemented
04007C             0368*  ffs_fputc:			EQU	8Ah
04007C             0369*  
04007C             0370*  ; not implemented
04007C             0371*  ffs_fputs:			EQU	8Bh
04007C             0372*  
04007C             0373*  ; not implemented
04007C             0374*  ffs_fprintf:		EQU	8Ch
04007C             0375*  
04007C             0376*  ; not implemented
04007C             0377*  ffs_ftell:			EQU	8Dh
04007C             0378*  
04007C             0379*  ; Check for EOF
04007C             0380*  ; HLU: Pointer to a FILINFO struct
04007C             0381*  ; Returns:
04007C             0382*  ;   A: 1 if end of file, otherwise 0
04007C             0383*  ffs_feof:			EQU	8Eh
04007C             0384*  
04007C             0385*  ; not implemented
04007C             0386*  ffs_fsize:			EQU	8Fh
04007C             0387*  
04007C             0388*  ; not implemented
04007C             0389*  ffs_ferror:			EQU	90h
04007C             0390*  
04007C             0391*  ; FatFS directory access functions
04007C             0392*  ;
04007C             0393*  ; Open a directory
04007C             0394*  ; HLU: Pointer to a blank DIR struct
04007C             0395*  ; DEU: Pointer to the directory path
04007C             0396*  ; Returns:
04007C             0397*  ; A: FRESULT
04007C             0398*  ffs_dopen:			EQU	91h
04007C             0399*  
04007C             0400*  ; Close a directory
04007C             0401*  ; HLU: Pointer to an open DIR struct
04007C             0402*  ; Returns:
04007C             0403*  ; A: FRESULT
04007C             0404*  ffs_dclose:			EQU	92h
04007C             0405*  
04007C             0406*  ; Read the next FILINFO from an open DIR
04007C             0407*  ; HLU: Pointer to an open DIR struct
04007C             0408*  ; DEU: Pointer to an empty FILINFO struct
04007C             0409*  ; Returns:
04007C             0410*  ; A: FRESULT
04007C             0411*  ffs_dread:			EQU	93h
04007C             0412*  
04007C             0413*  ; not implemented
04007C             0414*  ffs_dfindfirst:		EQU	94h
04007C             0415*  
04007C             0416*  ; not implemented
04007C             0417*  ffs_dfindnext:		EQU	95h
04007C             0418*  
04007C             0419*  ; FatFS file and directory management functions
04007C             0420*  ;
04007C             0421*  ; Check file exists
04007C             0422*  ; HLU: Pointer to a FILINFO struct
04007C             0423*  ; DEU: Pointer to the filename (0 terminated)
04007C             0424*  ; Returns:
04007C             0425*  ;   A: FRESULT
04007C             0426*  ffs_stat:			EQU	96h
04007C             0427*  
04007C             0428*  ; not implemented
04007C             0429*  ffs_unlink:			EQU	97h
04007C             0430*  
04007C             0431*  ; not implemented
04007C             0432*  ffs_rename:			EQU	98h
04007C             0433*  
04007C             0434*  ; not implemented
04007C             0435*  ffs_chmod:			EQU	99h
04007C             0436*  
04007C             0437*  ; not implemented
04007C             0438*  ffs_utime:			EQU	9Ah
04007C             0439*  
04007C             0440*  ; not implemented
04007C             0441*  ffs_mkdir:			EQU	9Bh
04007C             0442*  
04007C             0443*  ; not implemented
04007C             0444*  ffs_chdir:			EQU	9Ch
04007C             0445*  
04007C             0446*  ; not implemented
04007C             0447*  ffs_chdrive:		EQU	9Dh
04007C             0448*  
04007C             0449*  ; Copy the current directory (string) into buffer (hl)
04007C             0450*  ; HLU: Pointer to a buffer
04007C             0451*  ; BCU: Maximum length of buffer
04007C             0452*  ; Returns:
04007C             0453*  ; A: FRESULT
04007C             0454*  ffs_getcwd:			EQU	9Eh
04007C             0455*  
04007C             0456*  ; FatFS volume management and system configuration functions
04007C             0457*  ;
04007C             0458*  ; not implemented
04007C             0459*  ffs_mount:			EQU	9Fh
04007C             0460*  
04007C             0461*  ; not implemented
04007C             0462*  ffs_mkfs:			EQU	A0h
04007C             0463*  
04007C             0464*  ; not implemented
04007C             0465*  ffs_fdisk:			EQU	A1h
04007C             0466*  
04007C             0467*  ; not implemented
04007C             0468*  ffs_getfree:		EQU	A2h
04007C             0469*  
04007C             0470*  ; not implemented
04007C             0471*  ffs_getlabel:		EQU	A3h
04007C             0472*  
04007C             0473*  ; not implemented
04007C             0474*  ffs_setlabel:		EQU	A4h
04007C             0475*  
04007C             0476*  ; not implemented
04007C             0477*  ffs_setcp:			EQU	A5h
04007C             0478*  
04007C             0479*  ; File access modes
04007C             0480*  ;
04007C             0481*  fa_read:			EQU	01h
04007C             0482*  fa_write:			EQU	02h
04007C             0483*  fa_open_existing:	EQU	00h
04007C             0484*  fa_create_new:		EQU	04h
04007C             0485*  fa_create_always:	EQU	08h
04007C             0486*  fa_open_always:		EQU	10h
04007C             0487*  fa_open_append:		EQU	30h
04007C             0488*  
04007C             0489*  ; System variable indexes for api_sysvars
04007C             0490*  ; Index into _sysvars in globals.asm
04007C             0491*  ;
04007C             0492*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
04007C             0493*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
04007C             0494*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
04007C             0495*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
04007C             0496*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
04007C             0497*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
04007C             0498*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
04007C             0499*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
04007C             0500*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
04007C             0501*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
04007C             0502*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
04007C             0503*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
04007C             0504*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
04007C             0505*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
04007C             0506*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
04007C             0507*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
04007C             0508*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
04007C             0509*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
04007C             0510*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
04007C             0511*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
04007C             0512*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
04007C             0513*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
04007C             0514*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
04007C             0515*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
04007C             0516*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
04007C             0517*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
04007C             0518*  
04007C             0519*  ; Flags for the VPD protocol
04007C             0520*  ;
04007C             0521*  vdp_pflag_cursor:		EQU	00000001b
04007C             0522*  vdp_pflag_scrchar:		EQU	00000010b
04007C             0523*  vdp_pflag_point:		EQU	00000100b
04007C             0524*  vdp_pflag_audio:		EQU	00001000b
04007C             0525*  vdp_pflag_mode:			EQU	00010000b
04007C             0526*  vdp_pflag_rtc:			EQU	00100000b
04007C             0527*  
04007C             0528*  ;
04007C             0529*  ; FatFS structures
04007C             0530*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
04007C             0531*  ;
04007C             0532*  ; Object ID and allocation information (FFOBJID)
04007C             0533*  ;
04007C             0534*  ; Indexes into FFOBJID structure
04007C             0535*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
04007C             0536*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
04007C             0537*  ffobjid_attr:		EQU	5	; 1: Object attribute
04007C             0538*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
04007C             0539*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
04007C             0540*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
04007C             0541*  ;
04007C             0542*  ; File object structure (FIL)
04007C             0543*  ;
04007C             0544*  ; Indexes into FIL structure
04007C             0545*  fil_obj:		EQU 0	; 15: Object identifier
04007C             0546*  fil_flag:		EQU	15 	;  1: File status flags
04007C             0547*  fil_err:		EQU	16	;  1: Abort flag (error code)
04007C             0548*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
04007C             0549*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
04007C             0550*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
04007C             0551*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
04007C             0552*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
04007C             0553*  ;
04007C             0554*  ; Directory object structure (DIR)
04007C             0555*  ; Indexes into DIR structure
04007C             0556*  dir_obj:		EQU  0	; 15: Object identifier
04007C             0557*  dir_dptr:		EQU	15	;  4: Current read/write offset
04007C             0558*  dir_clust:		EQU	19	;  4: Current cluster
04007C             0559*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
04007C             0560*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
04007C             0561*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
04007C             0562*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
04007C             0563*  ;
04007C             0564*  ; File information structure (FILINFO)
04007C             0565*  ;
04007C             0566*  ; Indexes into FILINFO structure
04007C             0567*  filinfo_fsize:		EQU 0	;   4: File size
04007C             0568*  filinfo_fdate:		EQU	4	;   2: Modified date
04007C             0569*  filinfo_ftime:		EQU	6	;   2: Modified time
04007C             0570*  filinfo_fattrib:	EQU	8	;   1: File attribute
04007C             0571*  filinfo_altname:	EQU	9	;  13: Alternative file name
04007C             0572*  filinfo_fname:		EQU	22	; 256: Primary file name
04007C             0031       include "functions.inc"
04007C             0001*      MACRO printChar char
04007C             0002*          LD A, char
04007C             0003*          RST.LIL 10h
04007C             0004*      ENDMACRO
04007C             0005*  
04007C             0006*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
04007C             0007*  ; Print a zero-terminated string
04007C             0008*  ; HL: Pointer to string
04007C             0009*  printString:
04007C C5          0010*  	PUSH	BC
04007D 01 00 00 00 0011*  	LD		BC,0
040081 3E 00       0012*  	LD 	 	A,0
040083 5B DF       0013*  	RST.LIL 18h
040085 C1          0014*  	POP		BC
040086 C9          0015*  	RET
040087             0016*  ; print a VDU sequence
040087             0017*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
040087             0018*  sendVDUsequence:
040087 C5          0019*  	PUSH	BC
040088 01 00 00 00 0020*  	LD		BC, 0
04008C 4E          0021*  	LD		C, (HL)
04008D 5B DF       0022*  	RST.LIL	18h
04008F C1          0023*  	POP		BC
040090 C9          0024*  	RET
040091             0025*  ; Print Newline sequence to VDP
040091             0026*  printNewLine:
040091 F5          0027*      push af ; for some reason rst.lil 10h sets carry flag
040092 3E 0D       0028*  	LD	A, '\r'
040094 5B D7       0029*  	RST.LIL 10h
040096 3E 0A       0030*  	LD	A, '\n'
040098 5B D7       0031*  	RST.LIL 10h
04009A F1          0032*      pop af
04009B C9          0033*  	RET
04009C             0034*  ; Print a 24-bit HEX number
04009C             0035*  ; HLU: Number to print
04009C             0036*  printHex24:
04009C E5          0037*  	PUSH	HL
04009D 21 02 00 00 0038*  	LD		HL, 2
0400A1 39          0039*  	ADD		HL, SP
0400A2 7E          0040*  	LD		A, (HL)
0400A3 E1          0041*  	POP		HL
0400A4 CD AE 00 04 0042*  	CALL	printHex8
0400A8             0043*  ; Print a 16-bit HEX number
0400A8             0044*  ; HL: Number to print
0400A8             0045*  printHex16:
0400A8 7C          0046*  	LD		A,H
0400A9 CD AE 00 04 0047*  	CALL	printHex8
0400AD 7D          0048*  	LD		A,L
0400AE             0049*  ; Print an 8-bit HEX number
0400AE             0050*  ; A: Number to print
0400AE             0051*  printHex8:
0400AE 4F          0052*  	LD		C,A
0400AF 1F          0053*  	RRA
0400B0 1F          0054*  	RRA
0400B1 1F          0055*  	RRA
0400B2 1F          0056*  	RRA
0400B3 CD B8 00 04 0057*  	CALL	@F
0400B7 79          0058*  	LD		A,C
0400B8             0059*  @@:
0400B8 E6 0F       0060*  	AND		0Fh
0400BA C6 90       0061*  	ADD		A,90h
0400BC 27          0062*  	DAA
0400BD CE 40       0063*  	ADC		A,40h
0400BF 27          0064*  	DAA
0400C0 5B D7       0065*  	RST.LIL	10h
0400C2 C9          0066*  	RET
0400C3             0067*  
0400C3             0068*  ; Print a 0x HEX prefix
0400C3             0069*  DisplayHexPrefix:
0400C3 3E 30       0070*  	LD	A, '0'
0400C5 5B D7       0071*  	RST.LIL 10h
0400C7 3E 78       0072*  	LD	A, 'x'
0400C9 5B D7       0073*  	RST.LIL 10h
0400CB C9          0074*  	RET
0400CC             0075*  
0400CC             0076*      MACRO printDecBC
0400CC             0077*          push hl
0400CC             0078*          push bc
0400CC             0079*          pop hl
0400CC             0080*          call printDec
0400CC             0081*          pop hl
0400CC             0082*      ENDMACRO
0400CC             0083*  
0400CC             0084*      MACRO printDecDE
0400CC             0085*          push hl
0400CC             0086*          push de
0400CC             0087*          pop hl
0400CC             0088*          call printDec
0400CC             0089*          pop hl
0400CC             0090*      ENDMACRO
0400CC             0091*  
0400CC             0092*      MACRO printDecHL
0400CC             0093*          call printDec
0400CC             0094*      ENDMACRO
0400CC             0095*  
0400CC             0096*      MACRO printDecIX
0400CC             0097*          push hl
0400CC             0098*          push ix
0400CC             0099*          pop hl
0400CC             0100*          call printDec
0400CC             0101*          pop hl
0400CC             0102*      ENDMACRO
0400CC             0103*  
0400CC             0104*      MACRO printDecIY
0400CC             0105*          push hl
0400CC             0106*          push iy
0400CC             0107*          pop hl
0400CC             0108*          call printDec
0400CC             0109*          pop hl
0400CC             0110*      ENDMACRO
0400CC             0111*  
0400CC             0112*  ; Prints the right justified decimal value in HL without leading zeroes
0400CC             0113*  ; HL : Value to print
0400CC             0114*  printDec:
0400CC             0115*  ; BEGIN MY CODE
0400CC             0116*  ; back up all the things
0400CC F5          0117*      push af
0400CD C5          0118*      push bc
0400CE D5          0119*      push de
0400CF E5          0120*      push hl
0400D0             0121*  ; END MY CODE
0400D0 11 F8 00 04 0122*  	LD	 DE, _printDecBuffer
0400D4 CD 01 01 04 0123*  	CALL Num2String
0400D8             0124*  ; BEGIN MY CODE
0400D8             0125*  ; replace leading zeroes with spaces
0400D8 21 F8 00 04 0126*      LD	 HL, _printDecBuffer
0400DC 06 07       0127*      ld   B, 7 ; if HL was 0, we want to keep the final zero
0400DE             0128*  @loop:
0400DE 7E          0129*      LD	 A, (HL)
0400DF FE 30       0130*      CP	 '0'
0400E1 C2 EF 00 04 0131*      JP	 NZ, @done
0400E5 3E 20       0132*      LD   A, ' '
0400E7 77          0133*      LD	 (HL), A
0400E8 23          0134*      INC	 HL
0400E9 CD 41 08 04 0135*      CALL vdu_cursor_forward
0400ED 10 EF       0136*      DJNZ @loop
0400EF             0137*  @done:
0400EF             0138*  ; END MY CODE
0400EF             0139*  	; LD	 HL, _printDecBuffer
0400EF CD 7C 00 04 0140*  	CALL printString
0400F3             0141*  ; BEGIN MY CODE
0400F3             0142*  ; restore all the things
0400F3 E1          0143*      pop hl
0400F4 D1          0144*      pop de
0400F5 C1          0145*      pop bc
0400F6 F1          0146*      pop af
0400F7             0147*  ; END MY CODE
0400F7 C9          0148*  	RET
0400F8 00 00 00 00 0149*  _printDecBuffer: blkb 9,0 ; nine bytes full of zeroes
       00 00 00 00 
       00          
040101             0150*  
040101             0151*  ; This routine converts the value from HL into it's ASCII representation,
040101             0152*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040101             0153*  ; so it will allways be 8 characters length
040101             0154*  ; HL : Value to convert to string
040101             0155*  ; DE : pointer to buffer, at least 8 byte + 0
040101             0156*  Num2String:
040101 01 80 69 67 0157*  	LD	 BC,-10000000
040105 CD 38 01 04 0158*  	CALL OneDigit
040109 01 C0 BD F0 0159*  	LD	 BC,-1000000
04010D CD 38 01 04 0160*  	CALL OneDigit
040111 01 60 79 FE 0161*  	LD	 BC,-100000
040115 CD 38 01 04 0162*  	CALL OneDigit
040119 01 F0 D8 FF 0163*  	LD   BC,-10000
04011D CD 38 01 04 0164*  	CALL OneDigit
040121 01 18 FC FF 0165*  	LD   BC,-1000
040125 CD 38 01 04 0166*  	CALL OneDigit
040129 01 9C FF FF 0167*  	LD   BC,-100
04012D CD 38 01 04 0168*  	CALL OneDigit
040131 0E F6       0169*  	LD   C,-10
040133 CD 38 01 04 0170*  	CALL OneDigit
040137 48          0171*  	LD   C,B
040138             0172*  OneDigit:
040138 3E 2F       0173*  	LD   A,'0'-1
04013A             0174*  DivideMe:
04013A 3C          0175*  	INC  A
04013B 09          0176*  	ADD  HL,BC
04013C 38 FC       0177*  	JR   C,DivideMe
04013E ED 42       0178*  	SBC  HL,BC
040140 12          0179*  	LD   (DE),A
040141 13          0180*  	INC  DE
040142 C9          0181*  	RET
040143             0182*  
040143             0183*  
040143             0184*  ; #### new functions added by Brandon R. Gates ####
040143             0185*  
040143             0186*  ; print the binary representation of the 8-bit value in a
040143             0187*  ; destroys a, hl, bc
040143             0188*  printBin8:
040143 06 08       0189*      ld b,8      ; loop counter for 8 bits
040145 21 60 01 04 0190*      ld hl,@cmd  ; set hl to the low byte of the output string
040149             0191*                  ; (which will be the high bit of the value in a)
040149             0192*  @loop:
040149 07          0193*      rlca ; put the next highest bit into carry
04014A 38 04       0194*      jr c,@one
04014C 36 30       0195*      ld (hl),'0'
04014E 18 02       0196*      jr @next_bit
040150             0197*  @one:
040150 36 31       0198*      ld (hl),'1'
040152             0199*  @next_bit:
040152 23          0200*      inc hl
040153 10 F4       0201*      djnz @loop
040155             0202*  ; print it
040155 21 60 01 04 0203*  	ld hl,@cmd
040159 01 08 00 00 0204*  	ld bc,@end-@cmd
04015D 5B DF       0205*  	rst.lil $18
04015F C9          0206*  	ret
040160             0207*  @cmd: ds 8 ; eight bytes for eight bits
040168             0208*  @end:
040168             0209*  
040168             0210*  ; print the binary representation of the 8-bit value in a
040168             0211*  ; in reverse order (lsb first)
040168             0212*  ; destroys a, hl, bc
040168             0213*  printBin8Rev:
040168 06 08       0214*      ld b,8      ; loop counter for 8 bits
04016A 21 85 01 04 0215*      ld hl,@cmd  ; set hl to the low byte of the output string
04016E             0216*                  ; (which will be the high bit of the value in a)
04016E             0217*  @loop:
04016E 0F          0218*      rrca ; put the next lowest bit into carry
04016F 38 04       0219*      jr c,@one
040171 36 30       0220*      ld (hl),'0'
040173 18 02       0221*      jr @next_bit
040175             0222*  @one:
040175 36 31       0223*      ld (hl),'1'
040177             0224*  @next_bit:
040177 23          0225*      inc hl
040178 10 F4       0226*      djnz @loop
04017A             0227*  ; print it
04017A 21 85 01 04 0228*  	ld hl,@cmd
04017E 01 08 00 00 0229*  	ld bc,@end-@cmd
040182 5B DF       0230*  	rst.lil $18
040184 C9          0231*  	ret
040185             0232*  @cmd: ds 8 ; eight bytes for eight bits
04018D             0233*  @end:
04018D             0234*  
04018D             0235*  ; print registers to screen in hexidecimal format
04018D             0236*  ; inputs: none
04018D             0237*  ; outputs: values of every register printed to screen
04018D             0238*  ;    values of each register in global scratch memory
04018D             0239*  ; destroys: nothing
04018D             0240*  stepRegistersHex:
04018D             0241*  ; store everything in scratch
04018D 22 90 03 04 0242*      ld (uhl),hl
040191 ED 43 93 03 0243*      ld (ubc),bc
       04          
040196 ED 53 96 03 0244*      ld (ude),de
       04          
04019B DD 22 99 03 0245*      ld (uix),ix
       04          
0401A0 FD 22 9C 03 0246*      ld (uiy),iy
       04          
0401A5 F5          0247*      push af ; fml
0401A6 E1          0248*      pop hl  ; thanks, zilog
0401A7 22 8D 03 04 0249*      ld (uaf),hl
0401AB F5          0250*      push af ; dammit
0401AC             0251*  
0401AC             0252*  ; home the cursor
0401AC CD 20 08 04 0253*      call vdu_home_cursor
0401B0             0254*  
0401B0             0255*  ; print each register
0401B0 21 19 03 04 0256*      ld hl,str_afu
0401B4 CD 7C 00 04 0257*      call printString
0401B8 2A 8D 03 04 0258*      ld hl,(uaf)
0401BC CD 9C 00 04 0259*      call printHex24
0401C0 CD 91 00 04 0260*      call printNewLine
0401C4             0261*  
0401C4 21 1D 03 04 0262*      ld hl,str_hlu
0401C8 CD 7C 00 04 0263*      call printString
0401CC 2A 90 03 04 0264*      ld hl,(uhl)
0401D0 CD 9C 00 04 0265*      call printHex24
0401D4 CD 91 00 04 0266*      call printNewLine
0401D8             0267*  
0401D8 21 21 03 04 0268*      ld hl,str_bcu
0401DC CD 7C 00 04 0269*      call printString
0401E0 2A 93 03 04 0270*      ld hl,(ubc)
0401E4 CD 9C 00 04 0271*      call printHex24
0401E8 CD 91 00 04 0272*      call printNewLine
0401EC             0273*  
0401EC 21 25 03 04 0274*      ld hl,str_deu
0401F0 CD 7C 00 04 0275*      call printString
0401F4 2A 96 03 04 0276*      ld hl,(ude)
0401F8 CD 9C 00 04 0277*      call printHex24
0401FC CD 91 00 04 0278*      call printNewLine
040200             0279*  
040200 21 29 03 04 0280*      ld hl,str_ixu
040204 CD 7C 00 04 0281*      call printString
040208 2A 99 03 04 0282*      ld hl,(uix)
04020C CD 9C 00 04 0283*      call printHex24
040210 CD 91 00 04 0284*      call printNewLine
040214             0285*  
040214 21 2D 03 04 0286*      ld hl,str_iyu
040218 CD 7C 00 04 0287*      call printString
04021C 2A 9C 03 04 0288*      ld hl,(uiy)
040220 CD 9C 00 04 0289*      call printHex24
040224 CD 91 00 04 0290*      call printNewLine
040228             0291*  
040228             0292*      ; call vsync
040228             0293*  
040228 CD 91 00 04 0294*      call printNewLine
04022C             0295*  
04022C             0296*  ; check for right shift key and quit if pressed
04022C             0297*  	MOSCALL mos_getkbmap
04022C 3E 1E       0001*M 			LD	A, function
04022E 5B CF       0002*M 			RST.LIL	08h
040230             0298*  @stayhere:
040230             0299*  ; 7 RightShift
040230 DD CB 00 76 0300*      bit 6,(ix+0)
040234 20 02       0301*      jr nz,@RightShift
040236 18 F8       0302*      jr @stayhere
040238             0303*  @RightShift:
040238 DD CB 0E 86 0304*      res 0,(ix+14) ; debounce the key (hopefully)
04023C 3E 80       0305*      ld a,%10000000
04023E CD 00 08 04 0306*      call multiPurposeDelay
040242             0307*  
040242             0308*  ; restore everything
040242 2A 90 03 04 0309*      ld hl, (uhl)
040246 ED 4B 93 03 0310*      ld bc, (ubc)
       04          
04024B ED 5B 96 03 0311*      ld de, (ude)
       04          
040250 DD 2A 99 03 0312*      ld ix, (uix)
       04          
040255 FD 2A 9C 03 0313*      ld iy, (uiy)
       04          
04025A F1          0314*      pop af
04025B             0315*  ; all done
04025B C9          0316*      ret
04025C             0317*  
04025C             0318*  ; print registers to screen in hexidecimal format
04025C             0319*  ; inputs: none
04025C             0320*  ; outputs: values of every register printed to screen
04025C             0321*  ;    values of each register in global scratch memory
04025C             0322*  ; destroys: nothing
04025C             0323*  dumpRegistersHex:
04025C             0324*  ; store everything in scratch
04025C 22 90 03 04 0325*      ld (uhl),hl
040260 ED 43 93 03 0326*      ld (ubc),bc
       04          
040265 ED 53 96 03 0327*      ld (ude),de
       04          
04026A DD 22 99 03 0328*      ld (uix),ix
       04          
04026F FD 22 9C 03 0329*      ld (uiy),iy
       04          
040274 F5          0330*      push af ; fml
040275 E1          0331*      pop hl  ; thanks, zilog
040276 22 8D 03 04 0332*      ld (uaf),hl
04027A F5          0333*      push af ; dammit
04027B             0334*  
04027B             0335*  ; home the cursor
04027B             0336*      ; call vdu_home_cursor
04027B CD 91 00 04 0337*      call printNewLine
04027F             0338*  
04027F             0339*  ; print each register
04027F 21 19 03 04 0340*      ld hl,str_afu
040283 CD 7C 00 04 0341*      call printString
040287 2A 8D 03 04 0342*      ld hl,(uaf)
04028B CD 9C 00 04 0343*      call printHex24
04028F CD 91 00 04 0344*      call printNewLine
040293             0345*  
040293 21 1D 03 04 0346*      ld hl,str_hlu
040297 CD 7C 00 04 0347*      call printString
04029B 2A 90 03 04 0348*      ld hl,(uhl)
04029F CD 9C 00 04 0349*      call printHex24
0402A3 CD 91 00 04 0350*      call printNewLine
0402A7             0351*  
0402A7 21 21 03 04 0352*      ld hl,str_bcu
0402AB CD 7C 00 04 0353*      call printString
0402AF 2A 93 03 04 0354*      ld hl,(ubc)
0402B3 CD 9C 00 04 0355*      call printHex24
0402B7 CD 91 00 04 0356*      call printNewLine
0402BB             0357*  
0402BB 21 25 03 04 0358*      ld hl,str_deu
0402BF CD 7C 00 04 0359*      call printString
0402C3 2A 96 03 04 0360*      ld hl,(ude)
0402C7 CD 9C 00 04 0361*      call printHex24
0402CB CD 91 00 04 0362*      call printNewLine
0402CF             0363*  
0402CF 21 29 03 04 0364*      ld hl,str_ixu
0402D3 CD 7C 00 04 0365*      call printString
0402D7 2A 99 03 04 0366*      ld hl,(uix)
0402DB CD 9C 00 04 0367*      call printHex24
0402DF CD 91 00 04 0368*      call printNewLine
0402E3             0369*  
0402E3 21 2D 03 04 0370*      ld hl,str_iyu
0402E7 CD 7C 00 04 0371*      call printString
0402EB 2A 9C 03 04 0372*      ld hl,(uiy)
0402EF CD 9C 00 04 0373*      call printHex24
0402F3 CD 91 00 04 0374*      call printNewLine
0402F7             0375*  
0402F7 CD B7 08 04 0376*      call vdu_vblank
0402FB             0377*  
0402FB CD 91 00 04 0378*      call printNewLine
0402FF             0379*  ; restore everything
0402FF 2A 90 03 04 0380*      ld hl, (uhl)
040303 ED 4B 93 03 0381*      ld bc, (ubc)
       04          
040308 ED 5B 96 03 0382*      ld de, (ude)
       04          
04030D DD 2A 99 03 0383*      ld ix, (uix)
       04          
040312 FD 2A 9C 03 0384*      ld iy, (uiy)
       04          
040317 F1          0385*      pop af
040318             0386*  ; all done
040318 C9          0387*      ret
040319             0388*  
040319 61 66 3D 00 0389*  str_afu: db "af=",0
04031D 68 6C 3D 00 0390*  str_hlu: db "hl=",0
040321 62 63 3D 00 0391*  str_bcu: db "bc=",0
040325 64 65 3D 00 0392*  str_deu: db "de=",0
040329 69 78 3D 00 0393*  str_ixu: db "ix=",0
04032D 69 79 3D 00 0394*  str_iyu: db "iy=",0
040331             0395*  
040331             0396*  ; print udeuhl to screen in hexidecimal format
040331             0397*  ; inputs: none
040331             0398*  ; outputs: concatenated hexidecimal udeuhl
040331             0399*  ; destroys: nothing
040331             0400*  dumpUDEUHLHex:
040331             0401*  ; store everything in scratch
040331 22 90 03 04 0402*      ld (uhl),hl
040335 ED 43 93 03 0403*      ld (ubc),bc
       04          
04033A ED 53 96 03 0404*      ld (ude),de
       04          
04033F DD 22 99 03 0405*      ld (uix),ix
       04          
040344 FD 22 9C 03 0406*      ld (uiy),iy
       04          
040349 F5          0407*      push af
04034A             0408*  
04034A             0409*  ; print each register
04034A             0410*  
04034A 21 84 03 04 0411*      ld hl,str_udeuhl
04034E CD 7C 00 04 0412*      call printString
040352 2A 96 03 04 0413*      ld hl,(ude)
040356 CD 9C 00 04 0414*      call printHex24
04035A 3E 2E       0415*  	ld a,'.'	; print a dot to separate the values
04035C 5B D7       0416*  	rst.lil 10h
04035E 2A 90 03 04 0417*      ld hl,(uhl)
040362 CD 9C 00 04 0418*      call printHex24
040366 CD 91 00 04 0419*      call printNewLine
04036A             0420*  
04036A             0421*  ; restore everything
04036A 2A 90 03 04 0422*      ld hl, (uhl)
04036E ED 4B 93 03 0423*      ld bc, (ubc)
       04          
040373 ED 5B 96 03 0424*      ld de, (ude)
       04          
040378 DD 2A 99 03 0425*      ld ix, (uix)
       04          
04037D FD 2A 9C 03 0426*      ld iy, (uiy)
       04          
040382 F1          0427*      pop af
040383             0428*  ; all done
040383 C9          0429*      ret
040384             0430*  
040384 75 64 65 2E 0431*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04038D             0432*  
04038D             0433*  ; global scratch memory for registers
04038D 00 00 00    0434*  uaf: dl 0
040390 00 00 00    0435*  uhl: dl 0
040393 00 00 00    0436*  ubc: dl 0
040396 00 00 00    0437*  ude: dl 0
040399 00 00 00    0438*  uix: dl 0
04039C 00 00 00    0439*  uiy: dl 0
04039F 00 00 00    0440*  usp: dl 0
0403A2 00 00 00    0441*  upc: dl 0
0403A5             0442*  
0403A5             0443*  ; inputs: whatever is in the flags register
0403A5             0444*  ; outputs: binary representation of flags
0403A5             0445*  ;          with a header so we know which is what
0403A5             0446*  ; destroys: nothing
0403A5             0447*  ; preserves: everything
0403A5             0448*  dumpFlags:
0403A5             0449*  ; first we curse zilog for not giving direct access to flags
0403A5 F5          0450*      push af ; this is so we can send it back unharmed
0403A6 F5          0451*      push af ; this is so we can pop it to hl
0403A7             0452*  ; store everything in scratch
0403A7 22 90 03 04 0453*      ld (uhl),hl
0403AB ED 43 93 03 0454*      ld (ubc),bc
       04          
0403B0 ED 53 96 03 0455*      ld (ude),de
       04          
0403B5 DD 22 99 03 0456*      ld (uix),ix
       04          
0403BA FD 22 9C 03 0457*      ld (uiy),iy
       04          
0403BF             0458*  ; next we print the header
0403BF 21 EB 03 04 0459*      ld hl,@header
0403C3 CD 7C 00 04 0460*      call printString
0403C7 E1          0461*      pop hl ; flags are now in l
0403C8 7D          0462*      ld a,l ; flags are now in a
0403C9 CD 43 01 04 0463*      call printBin8
0403CD CD 91 00 04 0464*  	call printNewLine
0403D1             0465*  ; restore everything
0403D1 2A 90 03 04 0466*      ld hl, (uhl)
0403D5 ED 4B 93 03 0467*      ld bc, (ubc)
       04          
0403DA ED 5B 96 03 0468*      ld de, (ude)
       04          
0403DF DD 2A 99 03 0469*      ld ix, (uix)
       04          
0403E4 FD 2A 9C 03 0470*      ld iy, (uiy)
       04          
0403E9 F1          0471*      pop af ; send her home the way she came
0403EA C9          0472*      ret
0403EB             0473*  ; Bit 7 (S): Sign flag
0403EB             0474*  ; Bit 6 (Z): Zero flag
0403EB             0475*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0403EB             0476*  ; Bit 4 (H): Half Carry flag
0403EB             0477*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0403EB             0478*  ; Bit 2 (PV): Parity/Overflow flag
0403EB             0479*  ; Bit 1 (N): Subtract flag
0403EB             0480*  ; Bit 0 (C): Carry flag
0403EB 53 5A 78 48 0481*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0403F6             0482*  
0403F6             0483*  ; set all the bits in the flag register
0403F6             0484*  ; more of an academic exercise than anything useful
0403F6             0485*  ; inputs; none
0403F6             0486*  ; outputs; a=0,f=255
0403F6             0487*  ; destroys: flags, hl
0403F6             0488*  ; preserves: a, because why not
0403F6             0489*  setAllFlags:
0403F6 21 FF 00 00 0490*      ld hl,255
0403FA 67          0491*      ld h,a ; four cycles to preserve a is cheap
0403FB E5          0492*      push hl
0403FC F1          0493*      pop af
0403FD C9          0494*      ret
0403FE             0495*  
0403FE             0496*  ; reset all the bits in the flag register
0403FE             0497*  ; unlike its inverse counterpart, this may actually be useful
0403FE             0498*  ; inputs; none
0403FE             0499*  ; outputs; a=0,f=0
0403FE             0500*  ; destroys: flags, hl
0403FE             0501*  ; preserves: a, because why not
0403FE             0502*  resetAllFlags:
0403FE 21 00 00 00 0503*      ld hl,0
040402 67          0504*      ld h,a ; four cycles to preserve a is cheap
040403 E5          0505*      push hl
040404 F1          0506*      pop af
040405 C9          0507*      ret
040406             0508*  
040406             0509*  ; wait until user presses a key
040406             0510*  ; inputs: none
040406             0511*  ; outputs: none
040406             0512*  ; destroys: af,ix
040406             0513*  waitKeypress:
040406             0514*      MOSCALL mos_sysvars
040406 3E 08       0001*M 			LD	A, function
040408 5B CF       0002*M 			RST.LIL	08h
04040A AF          0515*      xor a ; zero out any prior keypresses
04040B DD 77 05    0516*      ld (ix+sysvar_keyascii),a
04040E             0517*  @loop:
04040E DD 7E 05    0518*      ld a,(ix+sysvar_keyascii)
040411 A7          0519*      and a
040412 C0          0520*      ret nz
040413 18 F9       0521*      jr @loop
040415             0522*  
040415             0523*  
040415             0524*  ; print bytes from an address to the screen in hexidecimal format
040415             0525*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040415             0526*  ; outputs: values of each byte printed to screen separated by spaces
040415             0527*  ; destroys: nothing
040415             0528*  dumpMemoryHex:
040415             0529*  ; save registers to the stack
040415 C5          0530*      push bc
040416 E5          0531*      push hl
040417 F5          0532*      push af
040418             0533*  
040418             0534*  ; print the address and separator
040418 CD 9C 00 04 0535*      call printHex24
04041C 3E 3A       0536*      ld a,':'
04041E 5B D7       0537*      rst.lil 10h
040420 3E 20       0538*      ld a,' '
040422 5B D7       0539*      rst.lil 10h
040424             0540*  
040424             0541*  ; set b to be our loop counter
040424 F1          0542*      pop af
040425 47          0543*      ld b,a
040426 E1          0544*      pop hl
040427 E5          0545*      push hl
040428 F5          0546*      push af
040429             0547*  @loop:
040429             0548*  ; print the byte
040429 7E          0549*      ld a,(hl)
04042A CD AE 00 04 0550*      call printHex8
04042E             0551*  ; print a space
04042E 3E 20       0552*      ld a,' '
040430 5B D7       0553*      rst.lil 10h
040432 23          0554*      inc hl
040433 10 F4       0555*      djnz @loop
040435             0556*      ; call printNewLine
040435             0557*  
040435             0558*  ; restore everything
040435 F1          0559*      pop af
040436 E1          0560*      pop hl
040437 C1          0561*      pop bc
040438             0562*  
040438             0563*  ; all done
040438 C9          0564*      ret
040439             0565*  
040439             0566*  
040439             0567*  ; print bytes from an address to the screen in binary format
040439             0568*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040439             0569*  ; outputs: values of each byte printed to screen separated by spaces
040439             0570*  ; destroys: nothing
040439             0571*  dumpMemoryBin:
040439             0572*  ; save all registers to the stack
040439 F5          0573*      push af
04043A C5          0574*      push bc
04043B D5          0575*      push de
04043C E5          0576*      push hl
04043D DD E5       0577*      push ix
04043F FD E5       0578*      push iy
040441             0579*  
040441             0580*  ; set b to be our loop counter
040441 47          0581*      ld b,a
040442             0582*  @loop:
040442             0583*  ; print the byte
040442 7E          0584*      ld a,(hl)
040443 E5          0585*      push hl
040444 C5          0586*      push bc
040445 CD 43 01 04 0587*      call printBin8
040449 C1          0588*      pop bc
04044A             0589*  ; print a space
04044A 3E 20       0590*      ld a,' '
04044C 5B D7       0591*      rst.lil 10h
04044E E1          0592*      pop hl
04044F 23          0593*      inc hl
040450 10 F0       0594*      djnz @loop
040452 CD 91 00 04 0595*      call printNewLine
040456             0596*  
040456             0597*  ; restore everything
040456 FD E1       0598*      pop iy
040458 DD E1       0599*      pop ix
04045A E1          0600*      pop hl
04045B D1          0601*      pop de
04045C C1          0602*      pop bc
04045D F1          0603*      pop af
04045E             0604*  ; all done
04045E C9          0605*      ret
04045F             0606*  
04045F             0607*  ; print bytes from an address to the screen in binary format
04045F             0608*  ; with the bits of each byte in reverse order (lsb first)
04045F             0609*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04045F             0610*  ; outputs: values of each byte printed to screen separated by spaces
04045F             0611*  ; destroys: nothing
04045F             0612*  dumpMemoryBinRev:
04045F             0613*  ; save all registers to the stack
04045F F5          0614*      push af
040460 C5          0615*      push bc
040461 D5          0616*      push de
040462 E5          0617*      push hl
040463 DD E5       0618*      push ix
040465 FD E5       0619*      push iy
040467             0620*  
040467             0621*  ; set b to be our loop counter
040467 47          0622*      ld b,a
040468             0623*  @loop:
040468             0624*  ; print the byte
040468 7E          0625*      ld a,(hl)
040469 E5          0626*      push hl
04046A C5          0627*      push bc
04046B CD 68 01 04 0628*      call printBin8Rev
04046F C1          0629*      pop bc
040470             0630*  ; print a space
040470 3E 20       0631*      ld a,' '
040472 5B D7       0632*      rst.lil 10h
040474 E1          0633*      pop hl
040475 23          0634*      inc hl
040476 10 F0       0635*      djnz @loop
040478 CD 91 00 04 0636*      call printNewLine
04047C             0637*  
04047C             0638*  ; restore everything
04047C FD E1       0639*      pop iy
04047E DD E1       0640*      pop ix
040480 E1          0641*      pop hl
040481 D1          0642*      pop de
040482 C1          0643*      pop bc
040483 F1          0644*      pop af
040484             0645*  ; all done
040484 C9          0646*      ret
040485             0032       include "files.inc"
040485             0001*  ; load to onboard 8k sram
040485             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
040485             0033       include "fonts.inc"
040485             0001*  ; Generated by build_91b_asm_cfont.py
040485             0002*  
040485 FF FF FF    0003*  	 align 4
040488             0004*  
040488             0005*  num_fonts: equ 118
040488             0006*  
040488             0007*  ; Index list:
040488             0008*  8_bit_fortress_Regular_9x8: equ 0
040488             0009*  computerfont_Regular_18x25: equ 1
040488             0010*  computerfont_Regular_21x30: equ 2
040488             0011*  planetary_contact_Regular_8x11: equ 3
040488             0012*  computer_pixel_7_Regular_8x17: equ 4
040488             0013*  super_mario_bros_2_Regular_8x9: equ 5
040488             0014*  wendy_neue_Regular_6x8: equ 6
040488             0015*  wendy_neue_Regular_5x7: equ 7
040488             0016*  wendy_neue_Regular_6x7: equ 8
040488             0017*  neutrino_Regular_5x10: equ 9
040488             0018*  neutrino_Regular_5x5: equ 10
040488             0019*  
040488             0020*  font_list: ; width; height; filesize; filename;:
040488 06 00 00 08 0021*  	dl 6, 8, 0, fn_8_bit_fortress_Regular_9x8
       00 00 00 00 
       00 0C 05 04 
040494 12 00 00 19 0022*  	dl 18, 25, 0, fn_computerfont_Regular_18x25
       00 00 00 00 
       00 30 05 04 
0404A0 14 00 00 1C 0023*  	dl 20, 28, 0, fn_computerfont_Regular_21x30
       00 00 00 00 
       00 54 05 04 
0404AC 08 00 00 0B 0024*  	dl 8, 11, 0, fn_planetary_contact_Regular_8x11
       00 00 00 00 
       00 78 05 04 
0404B8 08 00 00 11 0025*  	dl 8, 17, 0, fn_computer_pixel_7_Regular_8x17
       00 00 00 00 
       00 A0 05 04 
0404C4 08 00 00 09 0026*  	dl 8, 9, 0, fn_super_mario_bros_2_Regular_8x9
       00 00 00 00 
       00 C7 05 04 
0404D0 06 00 00 08 0027*  	dl 6, 8, 0, fn_wendy_neue_Regular_6x8
       00 00 00 00 
       00 EF 05 04 
0404DC 05 00 00 07 0028*  	dl 5, 7, 0, fn_wendy_neue_Regular_5x7
       00 00 00 00 
       00 0F 06 04 
0404E8 06 00 00 07 0029*  	dl 6, 7, 0, fn_wendy_neue_Regular_6x7
       00 00 00 00 
       00 2F 06 04 
0404F4 05 00 00 0A 0030*  	dl 5, 10, 0, fn_neutrino_Regular_5x10
       00 00 00 00 
       00 4F 06 04 
040500 05 00 00 05 0031*  	dl 5, 5, 0, fn_neutrino_Regular_5x5
       00 00 00 00 
       00 6E 06 04 
04050C             0032*  
04050C             0033*  ; files_list: ; filename:
04050C 74 74 66 2F 0034*  fn_8_bit_fortress_Regular_9x8: db "ttf/8_bit_fortress_Regular_9x8.font",0
       38 5F 62 69 
       74 5F 66 6F 
       72 74 72 65 
       73 73 5F 52 
       65 67 75 6C 
       61 72 5F 39 
       78 38 2E 66 
       6F 6E 74 00 
040530 74 74 66 2F 0035*  fn_computerfont_Regular_18x25: db "ttf/computerfont_Regular_18x25.font",0
       63 6F 6D 70 
       75 74 65 72 
       66 6F 6E 74 
       5F 52 65 67 
       75 6C 61 72 
       5F 31 38 78 
       32 35 2E 66 
       6F 6E 74 00 
040554 74 74 66 2F 0036*  fn_computerfont_Regular_21x30: db "ttf/computerfont_Regular_21x30.font",0
       63 6F 6D 70 
       75 74 65 72 
       66 6F 6E 74 
       5F 52 65 67 
       75 6C 61 72 
       5F 32 31 78 
       33 30 2E 66 
       6F 6E 74 00 
040578 74 74 66 2F 0037*  fn_planetary_contact_Regular_8x11: db "ttf/planetary_contact_Regular_8x11.font",0
       70 6C 61 6E 
       65 74 61 72 
       79 5F 63 6F 
       6E 74 61 63 
       74 5F 52 65 
       67 75 6C 61 
       72 5F 38 78 
       31 31 2E 66 
       6F 6E 74 00 
0405A0 74 74 66 2F 0038*  fn_computer_pixel_7_Regular_8x17: db "ttf/computer_pixel_7_Regular_8x17.font",0
       63 6F 6D 70 
       75 74 65 72 
       5F 70 69 78 
       65 6C 5F 37 
       5F 52 65 67 
       75 6C 61 72 
       5F 38 78 31 
       37 2E 66 6F 
       6E 74 00    
0405C7 74 74 66 2F 0039*  fn_super_mario_bros_2_Regular_8x9: db "ttf/super_mario_bros_2_Regular_8x9.font",0
       73 75 70 65 
       72 5F 6D 61 
       72 69 6F 5F 
       62 72 6F 73 
       5F 32 5F 52 
       65 67 75 6C 
       61 72 5F 38 
       78 39 2E 66 
       6F 6E 74 00 
0405EF 74 74 66 2F 0040*  fn_wendy_neue_Regular_6x8: db "ttf/wendy_neue_Regular_6x8.font",0
       77 65 6E 64 
       79 5F 6E 65 
       75 65 5F 52 
       65 67 75 6C 
       61 72 5F 36 
       78 38 2E 66 
       6F 6E 74 00 
04060F 74 74 66 2F 0041*  fn_wendy_neue_Regular_5x7: db "ttf/wendy_neue_Regular_5x7.font",0
       77 65 6E 64 
       79 5F 6E 65 
       75 65 5F 52 
       65 67 75 6C 
       61 72 5F 35 
       78 37 2E 66 
       6F 6E 74 00 
04062F 74 74 66 2F 0042*  fn_wendy_neue_Regular_6x7: db "ttf/wendy_neue_Regular_6x7.font",0
       77 65 6E 64 
       79 5F 6E 65 
       75 65 5F 52 
       65 67 75 6C 
       61 72 5F 36 
       78 37 2E 66 
       6F 6E 74 00 
04064F 74 74 66 2F 0043*  fn_neutrino_Regular_5x10: db "ttf/neutrino_Regular_5x10.font",0
       6E 65 75 74 
       72 69 6E 6F 
       5F 52 65 67 
       75 6C 61 72 
       5F 35 78 31 
       30 2E 66 6F 
       6E 74 00    
04066E 74 74 66 2F 0044*  fn_neutrino_Regular_5x5: db "ttf/neutrino_Regular_5x5.font",0
       6E 65 75 74 
       72 69 6E 6F 
       5F 52 65 67 
       75 6C 61 72 
       5F 35 78 35 
       2E 66 6F 6E 
       74 00       
04068C             0034       include "timer.inc"
04068C             0001*  ; Table 32. Timer Control Registers
04068C             0002*  ; this constant is the base address of the timer control registers
04068C             0003*  ; each timer takes three bytes:
04068C             0004*  ;   0: control register
04068C             0005*  ;   1: low byte of timer reset value
04068C             0006*  ;   2: high byte of timer reset value
04068C             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
04068C             0008*  ; which correctly force the high and upper bytes of the address bus to zero
04068C             0009*  TMR_CTL:     equ 80h
04068C             0010*  
04068C             0011*  ; Timer Control Register Bit Definitions
04068C             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
04068C             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
04068C             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
04068C             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
04068C             0016*                              ; the TMRx_CTL register is read.
04068C             0017*  
04068C             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
04068C             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
04068C             0020*  
04068C             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
04068C             0022*                              ;  0,and counting stops when the end-of-count value is reached.
04068C             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
04068C             0024*                              ; written to the counter when the end-of-count value is reached.
04068C             0025*  
04068C             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
04068C             0027*  CLK_DIV_256:  equ %00001100 ;
04068C             0028*  CLK_DIV_64:   equ %00001000 ;
04068C             0029*  CLK_DIV_16:   equ %00000100 ;
04068C             0030*  CLK_DIV_4:    equ %00000000 ;
04068C             0031*  
04068C             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
04068C             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
04068C             0034*                              ; When a 1 is written to this bit,the values in the reload registers
04068C             0035*                              ;  are loaded into the downcounter when the timer restarts. The
04068C             0036*                              ; programmer must ensure that this bit is set to 1 each time
04068C             0037*                              ; SINGLE-PASS mode is used.
04068C             0038*  
04068C             0039*  ; disable/enable the programmable reload timer
04068C             0040*  PRT_EN_0:     equ %00000000 ;
04068C             0041*  PRT_EN_1:     equ %00000001 ;
04068C             0042*  
04068C             0043*  ; Table 37. Timer Input Source Select Register
04068C             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
04068C             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
04068C             0046*  ;   00: System clock / CLK_DIV
04068C             0047*  ;   01: RTC / CLK_DIV
04068C             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
04068C             0049*  ;   10: GPIO port B pin 1.
04068C             0050*  ;   11: GPIO port B pin 1.
04068C             0051*  TMR_ISS:   equ 92h ; register address
04068C             0052*  
04068C             0053*  ; Table 51. Real-Time Clock Control Register
04068C             0054*  RTC_CTRL: equ EDh ; register address
04068C             0055*  
04068C             0056*  ; alarm interrupt disable/enable
04068C             0057*  RTC_ALARM_0:    equ %00000000
04068C             0058*  RTC_ALARM_1:    equ %10000000
04068C             0059*  
04068C             0060*  ; interrupt on alarm disable/enable
04068C             0061*  RTC_INT_ENT_0:  equ %00000000
04068C             0062*  RTC_INT_ENT_1:  equ %01000000
04068C             0063*  
04068C             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
04068C             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
04068C             0066*  
04068C             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
04068C             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
04068C             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
04068C             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
04068C             0071*  
04068C             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
04068C             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
04068C             0074*  
04068C             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
04068C             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
04068C             0077*  
04068C             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
04068C             0079*                                  ; RTC counter is enabled.
04068C             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
04068C             0081*                                  ; RTC counter is disabled.
04068C             0082*  
04068C             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
04068C             0084*  
04068C             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
04068C             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
04068C 00 00 00    0087*  prt_reload: dl 0x000000
04068F             0088*  
04068F             0089*  ; ; returns: a = 0 if running on hardware,1 if running on emulator
04068F             0090*  ; ;          de = number PRT interrupts during test interval
04068F             0091*  ; prt_calibrate:
04068F             0092*  ;     call vdu_vblank
04068F             0093*  ; ; set a MOS timer
04068F             0094*  ;     ld hl,120*1 ; 1 second
04068F             0095*  ;     ld iy,tmr_test
04068F             0096*  ;     call tmr_set
04068F             0097*  ; ; set a PRT timer
04068F             0098*  ;     ; ld hl,prt_reload_hardware
04068F             0099*  ;     ; ld hl,prt_reload_emulator
04068F             0100*  ;     ld hl,prt_reload_emulator + prt_reload_hardware / 2
04068F             0101*  ;     ld (prt_reload),hl
04068F             0102*  ;     call prt_set
04068F             0103*  ; @loop:
04068F             0104*  ; ; check time remaining on MOS timer
04068F             0105*  ;     call tmr_get
04068F             0106*  ;     jp z,@done ; time expired,so quit
04068F             0107*  ;     jp m,@done ; time past expiration (negative),so quit
04068F             0108*  ;     jr @loop
04068F             0109*  ; @done:
04068F             0110*  ;     ld de,(prt_irq_counter)
04068F             0111*  ;     ld bc,prt_reload_hardware ; default value for running on hardware
04068F             0112*  ;     ld (prt_reload),bc
04068F             0113*  ;     ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
04068F             0114*  ;     xor a ; clear carry,zero is default value for running on hardware
04068F             0115*  ;     ld (is_emulator),a
04068F             0116*  ;     sbc hl,de
04068F             0117*  ;     ld hl,on_hardware ; default message for running on hardware
04068F             0118*  ;     jp z,prt_calibrate ; zero result is indeterminate so we try again
04068F             0119*  ;     ret m ; negative result means we're on hardware
04068F             0120*  ;     inc a ; we're on emulator
04068F             0121*  ;     ld (is_emulator),a
04068F             0122*  ;     ld bc,prt_reload_emulator
04068F             0123*  ;     ld (prt_reload),bc
04068F             0124*  ;     ld hl,on_emulator
04068F             0125*  ;     ret
04068F             0126*  
04068F             0127*  ; calibrating_timer: defb "Calibrating timer\r\n",0
04068F             0128*  
04068F             0129*  ; set PRT timer
04068F             0130*  prt_set:
04068F 21 00 00 00 0131*      ld hl,0
040693 22 DD 06 04 0132*      ld (prt_irq_counter),hl
040697 2A 8C 06 04 0133*      ld hl,(prt_reload)
04069B ED 29 84    0134*      out0 ($84),l
04069E ED 21 85    0135*  	out0 ($85),h
0406A1             0136*  ; disable timer
0406A1 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0406A3 ED 39 83    0138*  	out0 ($83),a
0406A6             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0406A6 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0406A8 ED 39 83    0141*  	out0 ($83),a
0406AB C9          0142*      ret
0406AC             0143*  
0406AC             0144*  ; ===============================================
0406AC             0145*  ; PRT Timer Interrupt Handling
0406AC             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0406AC             0147*  ; -----------------------------------------------
0406AC             0148*  prt_irq_init:
0406AC             0149*      ; set up interrupt vector table 2
0406AC 21 00 00 00 0150*  	ld hl,0
0406B0 3A 0C 01 00 0151*  	ld a,($10c)
0406B4 6F          0152*  	ld l,a
0406B5 3A 0D 01 00 0153*  	ld a,($10d)
0406B9 67          0154*  	ld h,a
0406BA             0155*  
0406BA             0156*  	; skip over CALL ($c3)
0406BA 23          0157*  	inc hl
0406BB             0158*  	; load address of jump into vector table 2 (in ram)
0406BB ED 27       0159*  	ld hl,(hl)
0406BD             0160*  
0406BD             0161*  	; write CALL prt_irq_handler to vector table 2
0406BD 3E C3       0162*  	ld a,$c3
0406BF 77          0163*  	ld (hl),a
0406C0 23          0164*  	inc hl
0406C1 11 C8 06 04 0165*  	ld de,prt_irq_handler
0406C5 ED 1F       0166*  	ld (hl),de
0406C7             0167*  
0406C7 C9          0168*      ret
0406C8             0169*  
0406C8             0170*  prt_irq_handler:
0406C8 F3          0171*  	di
0406C9 F5          0172*  	push af
0406CA E5          0173*      push hl
0406CB ED 38 83    0174*  	in0 a,($83)
0406CE 2A DD 06 04 0175*  	ld hl,(prt_irq_counter)
0406D2 23          0176*  	inc hl
0406D3 22 DD 06 04 0177*  	ld (prt_irq_counter),hl
0406D7 E1          0178*      pop hl
0406D8 F1          0179*  	pop af
0406D9 FB          0180*  	ei
0406DA 5B ED 4D    0181*  	reti.l
0406DD             0182*  
0406DD             0183*  prt_irq_counter:
0406DD 00 00 00    0184*  	.dl 0
0406E0             0185*  prt_irq_counter_saved:
0406E0 00 00 00    0186*      .dl 0
0406E3             0187*  
0406E3             0188*  prt_loop_reset:
0406E3 E5          0189*      push hl
0406E4 21 00 00 00 0190*  	ld hl,0
0406E8 22 DD 06 04 0191*  	ld (prt_irq_counter),hl
0406EC 22 4E 07 04 0192*      ld (prt_loop_counter),hl
0406F0 22 51 07 04 0193*      ld (prt_loops),hl
0406F4 CD 8F 06 04 0194*      call prt_set
0406F8 E1          0195*      pop hl
0406F9 C9          0196*      ret
0406FA             0197*  
0406FA             0198*  prt_loop_start:
0406FA E5          0199*      push hl
0406FB 21 00 00 00 0200*  	ld hl,0
0406FF 22 DD 06 04 0201*  	ld (prt_irq_counter),hl
040703 E1          0202*      pop hl
040704 C9          0203*      ret
040705             0204*  
040705             0205*  prt_loop_stop:
040705 E5          0206*      push hl
040706 D5          0207*      push de
040707 2A DD 06 04 0208*      ld hl,(prt_irq_counter)
04070B ED 5B 4E 07 0209*      ld de,(prt_loop_counter)
       04          
040710 19          0210*      add hl,de
040711 22 4E 07 04 0211*      ld (prt_loop_counter),hl
040715 21 00 00 00 0212*      ld hl,0
040719 22 DD 06 04 0213*      ld (prt_irq_counter),hl
04071D 2A 51 07 04 0214*      ld hl,(prt_loops)
040721 23          0215*      inc hl
040722 22 51 07 04 0216*      ld (prt_loops),hl
040726 D1          0217*      pop de
040727 E1          0218*      pop hl
040728 C9          0219*      ret
040729             0220*  
040729             0221*  ; inputs: bc = y,x text coordinates to print
040729             0222*  prt_loop_print:
040729 F5          0223*      push af
04072A E5          0224*      push hl
04072B C5          0225*      push bc
04072C D5          0226*      push de
04072D DD E5       0227*      push ix
04072F FD E5       0228*      push iy
040731 CD 46 08 04 0229*      call vdu_move_cursor
040735             0230*  
040735 2A 4E 07 04 0231*      ld hl,(prt_loop_counter)
040739 CD CC 00 04 0232*      call printDec
04073D             0233*  
04073D 2A 51 07 04 0234*      ld hl,(prt_loops)
040741 CD CC 00 04 0235*      call printDec
040745             0236*  
040745 FD E1       0237*      pop iy
040747 DD E1       0238*      pop ix
040749 D1          0239*      pop de
04074A C1          0240*      pop bc
04074B E1          0241*      pop hl
04074C F1          0242*      pop af
04074D C9          0243*      ret
04074E             0244*  
04074E             0245*  prt_loop_counter:
04074E 00 00 00    0246*      .dl 0
040751             0247*  prt_loops:
040751 00 00 00    0248*      .dl 0
040754             0249*  
040754             0250*  ; ===============================================
040754             0251*  ; Timer functions
040754             0252*  ; -----------------------------------------------
040754             0253*  ; set a countdown timer
040754             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
040754             0255*  ; returns: hl = current time
040754             0256*  tmr_set:
040754 FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
040757             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
040757 3E 08       0001*M 			LD	A, function
040759 5B CF       0002*M 			RST.LIL	08h
04075B DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
04075E FD 2F 00    0260*      ld (iy+0),hl            ; set start time
040761 C9          0261*      ret
040762             0262*  
040762             0263*  ; gets time remaining on a countdown timer
040762             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
040762             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
040762             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
040762             0267*  tmr_get:
040762             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
040762 3E 08       0001*M 			LD	A, function
040764 5B CF       0002*M 			RST.LIL	08h
040766 DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
040769 FD 27 00    0270*      ld hl,(iy+0)            ; get start time
04076C AF          0271*      xor a                   ; clear carry
04076D ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04076F FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
040772 AF          0274*      xor a                   ; clear carry
040773 ED 5A       0275*      adc hl,de               ; hl = time remaining
040775             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
040775 C9          0277*      ret
040776             0278*  
040776 00 00 00    0279*  timestamp_now: dl 0
040779 00 00 00    0280*  timestamp_old: dl 0
04077C 00 00 00    0281*  timestamp_chg: dl 0
04077F             0282*  
04077F             0283*  ; update the global timestamp from the system clock
04077F             0284*  ; inputs: none
04077F             0285*  ; returns: hl = time elapsed in 1/120ths of a second
04077F             0286*  ;          de = current time
04077F             0287*  ;          ix = pointer to syvars table
04077F             0288*  ; destroys: af,hl,de,ix
04077F             0289*  timestamp_tick:
04077F ED 5B 76 07 0290*      ld de,(timestamp_now)   ; get previous time
       04          
040784 ED 53 79 07 0291*      ld (timestamp_old),de   ; save previous time
       04          
040789             0292*      MOSCALL mos_sysvars     ; ix points to syvars table
040789 3E 08       0001*M 			LD	A, function
04078B 5B CF       0002*M 			RST.LIL	08h
04078D DD 27 00    0293*      ld hl,(ix+sysvar_time)  ; get current time
040790 22 76 07 04 0294*      ld (timestamp_now),hl   ; save current time
040794 AF          0295*      xor a                   ; clear carry
040795 ED 52       0296*      sbc hl,de               ; hl = time elapsed
040797 22 7C 07 04 0297*      ld (timestamp_chg),hl   ; save elapsed time
04079B C9          0298*      ret
04079C             0299*  
04079C             0300*  ; set a countdown timer
04079C             0301*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04079C             0302*  ; requires: timestamp_tick to be called at least once before this function
04079C             0303*  ; returns: hl = current time
04079C             0304*  ; destroys: hl
04079C             0305*  timestamp_tmr_set:
04079C FD 2F 03    0306*      ld (iy+3),hl            ; set time remaining
04079F 2A 76 07 04 0307*      ld hl,(timestamp_now)   ; get current timestamp
0407A3 FD 2F 00    0308*      ld (iy+0),hl            ; set start time
0407A6 C9          0309*      ret
0407A7             0310*  
0407A7             0311*  ; gets time remaining on a countdown timer following the global timestamp
0407A7             0312*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0407A7             0313*  ; requires: timestamp_tick to be called at least once before this function
0407A7             0314*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0407A7             0315*  ;          sign flags: pos = time not expired,zero or neg = time expired
0407A7             0316*  ; destroys: af,hl,de
0407A7             0317*  timestamp_tmr_get:
0407A7 ED 5B 76 07 0318*      ld de,(timestamp_now)   ; get current timestamp
       04          
0407AC FD 27 00    0319*      ld hl,(iy+0)            ; get start time
0407AF AF          0320*      xor a                   ; clear carry
0407B0 ED 52       0321*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0407B2 FD 17 03    0322*      ld de,(iy+3)            ; get timer set value
0407B5 AF          0323*      xor a                   ; clear carry
0407B6 ED 5A       0324*      adc hl,de               ; hl = time remaining
0407B8             0325*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0407B8 C9          0326*      ret
0407B9             0327*  
0407B9             0328*  ; main loop timer functions
0407B9             0329*  tmr_main_loop: ds 6 ; buffer to hold main loop timer
0407BF             0330*  
0407BF             0331*  ; set a countdown timer for the main loop using the timestamp timer
0407BF             0332*  ; inputs: hl = time to set in 1/120ths of a second
0407BF             0333*  ; returns: hl = current time
0407BF             0334*  ; destroys: af,hl,de,ix,iy
0407BF             0335*  tmr_main_loop_set:
0407BF FD 21 B9 07 0336*      ld iy,tmr_main_loop
       04          
0407C4 FD 2F 03    0337*      ld (iy+3),hl ; set time remaining
0407C7 CD 7F 07 04 0338*      call timestamp_tick
0407CB 2A 76 07 04 0339*      ld hl,(timestamp_now)   ; get current timestamp
0407CF FD 2F 00    0340*      ld (iy+0),hl ; set start time
0407D2 C9          0341*      ret
0407D3             0342*  
0407D3             0343*  ; gets time remaining on the main loop countdown timer following the global timestamp
0407D3             0344*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0407D3             0345*  ;          sign flags: pos = time not expired,zero or neg = time expired
0407D3             0346*  ; destroys: af,hl,de,ix,iy
0407D3             0347*  tmr_main_loop_get:
0407D3 CD 7F 07 04 0348*      call timestamp_tick
0407D7 FD 21 B9 07 0349*      ld iy,tmr_main_loop
       04          
0407DC CD A7 07 04 0350*      call timestamp_tmr_get
0407E0 C9          0351*      ret
0407E1             0352*  
0407E1             0353*  ; set a stopwatch
0407E1             0354*  ; returns: hl = start time
0407E1             0355*  ; destroys: hl,ix
0407E1             0356*  stopwatch_set:
0407E1             0357*      MOSCALL mos_sysvars     ; ix points to syvars table
0407E1 3E 08       0001*M 			LD	A, function
0407E3 5B CF       0002*M 			RST.LIL	08h
0407E5 DD 27 00    0358*      ld hl,(ix+sysvar_time)  ; get current time
0407E8 22 FD 07 04 0359*      ld (stopwatch_started),hl            ; set start time
0407EC C9          0360*      ret
0407ED             0361*  
0407ED             0362*  ; gets time elapsed on a stopwatch
0407ED             0363*  ; returns: hl = time elapsed in 1/120ths of a second
0407ED             0364*  ; destroys: af,hl,de,ix
0407ED             0365*  stopwatch_get:
0407ED             0366*      MOSCALL mos_sysvars     ; ix points to syvars table
0407ED 3E 08       0001*M 			LD	A, function
0407EF 5B CF       0002*M 			RST.LIL	08h
0407F1 DD 27 00    0367*      ld hl,(ix+sysvar_time)  ; get current time
0407F4 ED 5B FD 07 0368*      ld de,(stopwatch_started)            ; get start time
       04          
0407F9 AF          0369*      xor a                   ; clear carry
0407FA ED 52       0370*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
0407FC C9          0371*      ret
0407FD             0372*  
0407FD             0373*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
040800             0374*  
040800             0375*  ; ------------------
040800             0376*  ; delay routine
040800             0377*  ; Author: Richard Turrnidge
040800             0378*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
040800             0379*  ; routine waits a fixed time,then returns
040800             0380*  ; arrive with A =  the delay byte. One bit to be set only.
040800             0381*  ; eg. ld A,00000100b
040800             0382*  
040800             0383*  multiPurposeDelay:
040800 F5          0384*      push af
040801 C5          0385*      push bc
040802 DD E5       0386*      push ix
040804 47          0387*      ld b,a
040805 3E 08       0388*      ld a,$08
040807 5B CF       0389*      RST.LIL	08h                 ; get IX pointer to sysvars
040809             0390*  
040809             0391*  waitLoop:
040809             0392*  
040809 DD 7E 00    0393*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04080C             0394*  
04080C             0395*                                  ;   we check if bit set is same as last time we checked.
04080C             0396*                                  ;   bit 0 - don't use
04080C             0397*                                  ;   bit 1 - changes 64 times per second
04080C             0398*                                  ;   bit 2 - changes 32 times per second
04080C             0399*                                  ;   bit 3 - changes 16 times per second
04080C             0400*  
04080C             0401*                                  ;   bit 4 - changes 8 times per second
04080C             0402*                                  ;   bit 5 - changes 4 times per second
04080C             0403*                                  ;   bit 6 - changes 2 times per second
04080C             0404*                                  ;   bit 7 - changes 1 times per second
04080C A0          0405*      and b
04080D 4F          0406*      ld c,a
04080E 3A 1F 08 04 0407*      ld a,(oldTimeStamp)
040812 B9          0408*      cp c                        ; is A same as last value?
040813 28 F4       0409*      jr z,waitLoop              ; loop here if it is
040815 79          0410*      ld a,c
040816 32 1F 08 04 0411*      ld (oldTimeStamp),a        ; set new value
04081A             0412*  
04081A DD E1       0413*      pop ix
04081C C1          0414*      pop bc
04081D F1          0415*      pop af
04081E C9          0416*      ret
04081F             0417*  
04081F 00          0418*  oldTimeStamp:   .db 00h
040820             0035       include "vdu.inc"
040820             0001*  ; &E8-&EF 	232-239 	Bitmap plot §
040820             0002*  plot_bmp: equ 0xE8
040820             0003*  ; 5 	Plot absolute in current foreground colour
040820             0004*  dr_abs_fg: equ 5
040820             0005*  
040820             0006*  ; VDU 30: Home cursor
040820             0007*  vdu_home_cursor:
040820 3E 1E       0008*      ld a,30
040822 5B D7       0009*  	rst.lil $10
040824 C9          0010*  	ret
040825             0011*  
040825             0012*  cursor_on:
040825 21 30 08 04 0013*  	ld hl,@cmd
040829 01 03 00 00 0014*  	ld bc,@end-@cmd
04082D 5B DF       0015*  	rst.lil $18
04082F C9          0016*  	ret
040830             0017*  @cmd:
040830 17 01 01    0018*  	db 23,1,1
040833             0019*  @end:
040833             0020*  
040833             0021*  cursor_off:
040833 21 3E 08 04 0022*  	ld hl,@cmd
040837 01 03 00 00 0023*  	ld bc,@end-@cmd
04083B 5B DF       0024*  	rst.lil $18
04083D C9          0025*  	ret
04083E             0026*  @cmd:
04083E 17 01 00    0027*  	db 23,1,0
040841             0028*  @end:
040841             0029*  
040841             0030*  ; VDU 9: Move cursor forward one character
040841             0031*  vdu_cursor_forward:
040841 3E 09       0032*      ld a,9
040843 5B D7       0033*  	rst.lil $10
040845 C9          0034*  	ret
040846             0035*  
040846             0036*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
040846             0037*  ; inputs: c=x, b=y 8-bit unsigned integers
040846             0038*  vdu_move_cursor:
040846 ED 43 57 08 0039*      ld (@x0),bc
       04          
04084B 21 56 08 04 0040*  	ld hl,@cmd
04084F 01 03 00 00 0041*  	ld bc,@end-@cmd
040853 5B DF       0042*  	rst.lil $18
040855 C9          0043*  	ret
040856 1F          0044*  @cmd: 	db 31
040857 00          0045*  @x0:	db 0
040858 00          0046*  @y0: 	db 0
040859 00          0047*  @end: 	db 0 ; padding
04085A             0048*  
04085A             0049*  ; VDU 12: Clear text area (CLS)
04085A             0050*  vdu_cls:
04085A 3E 0C       0051*      ld a,12
04085C 5B D7       0052*  	rst.lil $10
04085E C9          0053*  	ret
04085F             0054*  
04085F             0055*  vdu_flip:
04085F 21 6A 08 04 0056*  	ld hl,@cmd
040863 01 03 00 00 0057*  	ld bc,@end-@cmd
040867 5B DF       0058*  	rst.lil $18
040869 C9          0059*  	ret
04086A 17 00 C3    0060*  @cmd: db 23,0,0xC3
04086D             0061*  @end:
04086D             0062*  
04086D             0063*  ; VDU 16: Clear graphics area (CLG)
04086D             0064*  vdu_clg:
04086D 3E 10       0065*      ld a,16
04086F 5B D7       0066*  	rst.lil $10
040871 C9          0067*  	ret
040872             0068*  
040872             0069*  ; VDU 17, colour: Define text colour (COLOUR)
040872             0070*  vdu_colour_text:
040872 32 82 08 04 0071*  	ld (@arg),a
040876 21 81 08 04 0072*  	ld hl,@cmd
04087A 01 02 00 00 0073*  	ld bc,@end-@cmd
04087E 5B DF       0074*  	rst.lil $18
040880 C9          0075*  	ret
040881 11          0076*  @cmd: db 17
040882 00          0077*  @arg: db 0
040883             0078*  @end:
040883             0079*  
040883             0080*  
040883             0081*  vdu_gcol_bg:
040883 32 9A 08 04 0082*  	ld (@mode),a
040887 79          0083*      ld a,c
040888 C6 80       0084*      add a,128
04088A 32 9B 08 04 0085*      ld (@col),a
04088E 21 99 08 04 0086*  	ld hl,@cmd
040892 01 03 00 00 0087*  	ld bc,@end-@cmd
040896 5B DF       0088*  	rst.lil $18
040898 C9          0089*  	ret
040899 12          0090*  @cmd:  db 18
04089A 00          0091*  @mode: db 0
04089B 00          0092*  @col:  db 0
04089C             0093*  @end:
04089C             0094*  
04089C             0095*  
04089C             0096*  ; VDU 28, left, bottom, right, top: Set text viewport **
04089C             0097*  ; MIND THE LITTLE-ENDIANESS
04089C             0098*  ; inputs: c=left,b=bottom,e=right,d=top
04089C             0099*  ; outputs; nothing
04089C             0100*  ; destroys: a might make it out alive
04089C             0101*  vdu_set_txt_viewport:
04089C ED 43 B2 08 0102*      ld (@lb),bc
       04          
0408A1 ED 53 B4 08 0103*  	ld (@rt),de
       04          
0408A6 21 B1 08 04 0104*  	ld hl,@cmd
0408AA 01 05 00 00 0105*  	ld bc,@end-@cmd
0408AE 5B DF       0106*  	rst.lil $18
0408B0 C9          0107*  	ret
0408B1 1C          0108*  @cmd:   db 28 ; set text viewport command
0408B2 00 00       0109*  @lb: 	dw 0x0000 ; set by bc
0408B4 00 00       0110*  @rt: 	dw 0x0000 ; set by de
0408B6 00          0111*  @end:   db 0x00	  ; padding
0408B7             0112*  
0408B7             0113*  ; Wait for VBLANK interrupt
0408B7             0114*  vdu_vblank:
0408B7 DD E5       0115*      PUSH 	IX
0408B9             0116*  	MOSCALL	mos_sysvars
0408B9 3E 08       0001*M 			LD	A, function
0408BB 5B CF       0002*M 			RST.LIL	08h
0408BD DD 7E 00    0117*  	LD	A, (IX + sysvar_time + 0)
0408C0             0118*  @wait:
0408C0 DD BE 00    0119*      CP 	A, (IX + sysvar_time + 0)
0408C3 28 FB       0120*      JR	Z, @wait
0408C5 DD E1       0121*      POP	IX
0408C7 C9          0122*      RET
0408C8             0123*  
0408C8             0124*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
0408C8             0125*  ; NOTE: the order of the y-coordinate parameters are inverted
0408C8             0126*  ; 	because we have turned off logical screen scaling
0408C8             0127*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
0408C8             0128*  ; outputs; nothing
0408C8             0129*  ; destroys: a might make it out alive
0408C8             0130*  vdu_set_gfx_viewport:
0408C8 ED 43 E8 08 0131*      ld (@x0),bc
       04          
0408CD FD 22 EA 08 0132*      ld (@y1),iy
       04          
0408D2 DD 22 EC 08 0133*  	ld (@x1),ix
       04          
0408D7 ED 53 EE 08 0134*  	ld (@y0),de
       04          
0408DC 21 E7 08 04 0135*  	ld hl,@cmd
0408E0 01 09 00 00 0136*  	ld bc,@end-@cmd
0408E4 5B DF       0137*  	rst.lil $18
0408E6 C9          0138*  	ret
0408E7 18          0139*  @cmd:   db 24 ; set graphics viewport command
0408E8 00 00       0140*  @x0: 	dw 0x0000 ; set by bc
0408EA 00 00       0141*  @y1: 	dw 0x0000 ; set by iy
0408EC 00 00       0142*  @x1: 	dw 0x0000 ; set by ix
0408EE 00 00       0143*  @y0: 	dw 0x0000 ; set by de
0408F0 00          0144*  @end:   db 0x00	  ; padding
0408F1             0145*  
0408F1             0146*  ; SCREEN MODES
0408F1             0147*  ; ===============================
0408F1             0148*  ; Mode  Horz  Vert  Cols  Refresh
0408F1             0149*  ; ---   ----  ----  ----  -------
0408F1             0150*  ; 11    320   240   2     60hz
0408F1             0151*  ; 139   320   240   2     60hz
0408F1             0152*  ; 23    512   384   2     60hz
0408F1             0153*  ; 151   512   384   2     60hz
0408F1             0154*  ; 6     640   240   2     60hz
0408F1             0155*  ; 134   640   240   2     60hz
0408F1             0156*  ; 2     640   480   2     60hz
0408F1             0157*  ; 130   640   480   2     60hz
0408F1             0158*  ; 17    800   600   2     60hz
0408F1             0159*  ; 145   800   600   2     60hz
0408F1             0160*  ; 18    1024  768   2     60hz
0408F1             0161*  ; 146   1024  768   2     60hz
0408F1             0162*  ; ---   ----  ----  ----  -------
0408F1             0163*  ; 10    320   240   4     60hz
0408F1             0164*  ; 138   320   240   4     60hz
0408F1             0165*  ; 22    512   384   4     60hz
0408F1             0166*  ; 150   512   384   4     60hz
0408F1             0167*  ; 5     640   240   4     60hz
0408F1             0168*  ; 133   640   240   4     60hz
0408F1             0169*  ; 1     640   480   4     60hz
0408F1             0170*  ; 129   640   480   4     60hz
0408F1             0171*  ; 16    800   600   4     60hz
0408F1             0172*  ; 19    1024  768   4     60hz
0408F1             0173*  ; ---   ----  ----  ----  -------
0408F1             0174*  ; 9     320   240   16    60hz
0408F1             0175*  ; 137   320   240   16    60hz
0408F1             0176*  ; 21    512   384   16    60hz
0408F1             0177*  ; 149   512   384   16    60hz
0408F1             0178*  ; 4     640   240   16    60hz
0408F1             0179*  ; 132   640   240   16    60hz
0408F1             0180*  ; 0     640   480   16    60hz
0408F1             0181*  ; 7     n/a   n/a   16    60hz
0408F1             0182*  ; ---   ----  ----  ----  -------
0408F1             0183*  ; 8     320   240   64    60hz
0408F1             0184*  ; 136   320   240   64    60hz
0408F1             0185*  ; 20    512   384   64    60hz
0408F1             0186*  ; 3     640   240   64    60hz
0408F1             0187*  ; ---   ----  ----  ----  -------
0408F1             0188*  vdu_set_screen_mode:
0408F1 32 01 09 04 0189*  	ld (@arg),a
0408F5 21 00 09 04 0190*  	ld hl,@cmd
0408F9 01 02 00 00 0191*  	ld bc,@end-@cmd
0408FD 5B DF       0192*  	rst.lil $18
0408FF C9          0193*  	ret
040900 16          0194*  @cmd: db 22 ; set screen mode
040901 00          0195*  @arg: db 0  ; screen mode parameter
040902             0196*  @end:
040902             0197*  
040902             0198*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
040902             0199*  ; inputs: a is scaling mode, 1=on, 0=off
040902             0200*  ; note: default setting on boot is scaling ON
040902             0201*  vdu_set_scaling:
040902 32 14 09 04 0202*  	ld (@arg),a
040906 21 11 09 04 0203*  	ld hl,@cmd
04090A 01 04 00 00 0204*  	ld bc,@end-@cmd
04090E 5B DF       0205*  	rst.lil $18
040910 C9          0206*  	ret
040911 17 00 C0    0207*  @cmd: db 23,0,0xC0
040914 00          0208*  @arg: db 0  ; scaling on/off
040915             0209*  @end:
040915             0210*  
040915             0211*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
040915             0212*  ; inputs: hl=bufferId
040915             0213*  vdu_buff_select:
040915 22 27 09 04 0214*  	ld (@bufferId),hl
040919 21 24 09 04 0215*  	ld hl,@cmd
04091D 01 05 00 00 0216*  	ld bc,@end-@cmd
040921 5B DF       0217*  	rst.lil $18
040923 C9          0218*  	ret
040924 17 1B 20    0219*  @cmd: db 23,27,0x20
040927 00 00       0220*  @bufferId: dw 0x0000
040929 00          0221*  @end: db 0x00 ; padding
04092A             0222*  
04092A             0223*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04092A             0224*  ; inputs: a=format; bc=width; de=height
04092A             0225*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04092A             0226*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04092A             0227*  ; 0 	RGBA8888 (4-bytes per pixel)
04092A             0228*  ; 1 	RGBA2222 (1-bytes per pixel)
04092A             0229*  ; 2 	Mono/Mask (1-bit per pixel)
04092A             0230*  ; 3 	Reserved for internal use by VDP (“native” format)
04092A             0231*  vdu_bmp_create:
04092A ED 43 46 09 0232*      ld (@width),bc
       04          
04092F ED 53 48 09 0233*      ld (@height),de
       04          
040934 32 4A 09 04 0234*      ld (@fmt),a
040938 21 43 09 04 0235*  	ld hl,@cmd
04093C 01 08 00 00 0236*  	ld bc,@end-@cmd
040940 5B DF       0237*  	rst.lil $18
040942 C9          0238*  	ret
040943 17 1B 21    0239*  @cmd:       db 23,27,0x21
040946 00 00       0240*  @width:     dw 0x0000
040948 00 00       0241*  @height:    dw 0x0000
04094A 00          0242*  @fmt:       db 0x00
04094B             0243*  @end:
04094B             0244*  
04094B             0245*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04094B             0246*  ; &E8-&EF 	232-239 	Bitmap plot §
04094B             0247*  ; VDU 25, mode, x; y;: PLOT command
04094B             0248*  ; inputs: bc=x0, de=y0
04094B             0249*  ; prerequisites: vdu_buff_select
04094B             0250*  vdu_plot_bmp:
04094B ED 43 62 09 0251*      ld (@x0),bc
       04          
040950 ED 53 64 09 0252*      ld (@y0),de
       04          
040955 21 60 09 04 0253*  	ld hl,@cmd
040959 01 06 00 00 0254*  	ld bc,@end-@cmd
04095D 5B DF       0255*  	rst.lil $18
04095F C9          0256*  	ret
040960 19          0257*  @cmd:   db 25
040961 ED          0258*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
040962 00 00       0259*  @x0: 	dw 0x0000
040964 00 00       0260*  @y0: 	dw 0x0000
040966 00          0261*  @end:   db 0x00 ; padding
040967             0262*  
040967             0263*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
040967             0264*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
040967             0265*  vdu_load_img_rgba2_to_8:
040967             0266*  ; backup the target buffer id and image dimensions
040967 E5          0267*      push hl
040968 D5          0268*      push de
040969 C5          0269*      push bc
04096A             0270*  ; load the rgba2 image to working buffer 65534
04096A 21 FE FF 00 0271*      ld hl,65534 ; temporary working buffer id
04096E CD 71 0A 04 0272*  	call vdu_load_buffer_from_file
040972             0273*  ; restore the image dimensions and target buffer id
040972 C1          0274*      pop bc
040973 D1          0275*      pop de
040974 E1          0276*      pop hl
040975             0277*  ; fall through to vdu_rgba2_to_8
040975             0278*  
040975             0279*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
040975             0280*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
040975             0281*  ; the "expand bitmap" command is:
040975             0282*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
040975             0283*  ; and then to reverse the byte order to fix endian-ness:
040975             0284*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
040975             0285*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
040975             0286*  ; VDU 23,27,&20,targetBufferID%;
040975             0287*  ; VDU 23,27,&21,width%;height%;0
040975             0288*  ; -------------------------------------------------------------------
040975             0289*  ; inputs: bc,de image width,height ; hl = targetBufferId
040975             0290*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
040975             0291*  vdu_rgba2_to_8:
040975             0292*  ; load the image dimensions and buffer id parameters
040975 ED 43 D1 09 0293*      ld (@width),bc
       04          
04097A ED 53 D3 09 0294*      ld (@height),de
       04          
04097F 22 B6 09 04 0295*      ld (@bufferId0),hl
040983 22 C3 09 04 0296*      ld (@bufferId2),hl
040987 22 CC 09 04 0297*      ld (@bufferId1),hl
04098B             0298*  ; clean up bytes that got stomped on by the ID loads
04098B 3E 48       0299*      ld a,0x48
04098D 32 B8 09 04 0300*      ld (@bufferId0+2),a
040991 3E 17       0301*      ld a,23
040993 32 CE 09 04 0302*      ld (@bufferId1+2),a
040997 3E 18       0303*      ld a,24
040999 32 C5 09 04 0304*      ld (@bufferId2+2),a
04099D AF          0305*      xor a
04099E 32 D5 09 04 0306*      ld (@height+2),a
0409A2             0307*  ; send the vdu command strings
0409A2 21 AD 09 04 0308*      ld hl,@beg
0409A6 01 29 00 00 0309*      ld bc,@end-@beg
0409AA 5B DF       0310*      rst.lil $18
0409AC C9          0311*      ret
0409AD             0312*  @beg:
0409AD             0313*  ; Command 14: Consolidate blocks in a buffer
0409AD             0314*  ; VDU 23, 0, &A0, bufferId; 14
0409AD 17 00 A0    0315*      db 23,0,0xA0
0409B0 FE FF       0316*      dw 65534 ; workingBufferId
0409B2 0E          0317*      db 14 ; consolidate blocks
0409B3             0318*  ; the "expand bitmap" command is:
0409B3             0319*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0409B3 17 00 A0    0320*      db 23,0,0xA0
0409B6 00 00       0321*  @bufferId0: dw 0x0000 ; targetBufferId
0409B8 48          0322*      db 0x48 ; given as decimal command 72 in the docs
0409B9 02          0323*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
0409BA FE FF       0324*      dw 65534 ; sourceBufferId
0409BC 00 7F BF FF 0325*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
0409C0             0326*  ; reverse the byte order to fix endian-ness:
0409C0             0327*  ; Command 24: Reverse the order of data of blocks within a buffer
0409C0             0328*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
0409C0             0329*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0409C0 17 00 A0    0330*      db 23,0,0xA0
0409C3 00 00       0331*  @bufferId2:    dw 0x0000 ; targetBufferId
0409C5 18          0332*      db 24 ; reverse byte order
0409C6 04          0333*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
0409C7 04 00       0334*      dw 4 ; size (4 bytes)
0409C9             0335*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0409C9             0336*  ; VDU 23,27,&20,targetBufferID%;
0409C9 17 1B 20    0337*      db 23,27,0x20 ; select bitmap
0409CC 00 00       0338*  @bufferId1: dw 0x0000 ; targetBufferId
0409CE             0339*  ; VDU 23,27,&21,width%;height%;0
0409CE 17 1B 21    0340*      db 23,27,0x21 ; create bitmap from buffer
0409D1 00 00       0341*  @width: dw 0x0000
0409D3 00 00       0342*  @height: dw 0x0000
0409D5 00          0343*      db 0x00 ; rgba8888 format
0409D6             0344*  @end:
0409D6             0345*  
0409D6             0346*  ; scratch variables
0409D6 00 00 00    0347*  bufferId0: dl 0x000000
0409D9 00 00 00    0348*  bufferId1: dl 0x000000
0409DC             0349*  
0409DC             0350*  ; load a vdu buffer from local memory
0409DC             0351*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0409DC             0352*  vdu_load_buffer:
0409DC ED 43 05 0A 0353*      ld (@length),bc
       04          
0409E1 D5          0354*      push de ; save data pointer
0409E2             0355*  ; send the vdu command string
0409E2 7D          0356*      ld a,l
0409E3 32 02 0A 04 0357*      ld (@bufferId),a
0409E7 7C          0358*      ld a,h
0409E8 32 03 0A 04 0359*      ld (@bufferId+1),a
0409EC 21 FF 09 04 0360*      ld hl,@cmd
0409F0 01 08 00 00 0361*      ld bc,@end-@cmd
0409F4 5B DF       0362*      rst.lil $18
0409F6             0363*  ; send the buffer data
0409F6 E1          0364*      pop hl ; pointer to data
0409F7 ED 4B 05 0A 0365*      ld bc,(@length)
       04          
0409FC 5B DF       0366*      rst.lil $18 ; send it
0409FE C9          0367*      ret
0409FF             0368*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0409FF 17 00 A0    0369*  @cmd:       db 23,0,0xA0
040A02 00 00       0370*  @bufferId:	dw 0x0000
040A04 00          0371*  		    db 0 ; load buffer
040A05 00 00       0372*  @length:	dw 0x0000
040A07 00          0373*  @end: db 0 ; padding
040A08             0374*  
040A08             0375*  ; clear a buffer
040A08             0376*  ; inputs: hl = bufferId
040A08             0377*  vdu_clear_buffer:
040A08 7D          0378*      ld a,l
040A09 32 20 0A 04 0379*      ld (@bufferId),a
040A0D 7C          0380*      ld a,h
040A0E 32 21 0A 04 0381*      ld (@bufferId+1),a
040A12 21 1D 0A 04 0382*      ld hl,@cmd
040A16 01 06 00 00 0383*      ld bc,@end-@cmd
040A1A 5B DF       0384*      rst.lil $18
040A1C C9          0385*      ret
040A1D 17 00 A0    0386*  @cmd:       db 23,0,0xA0
040A20 00 00       0387*  @bufferId:	dw 0x0000
040A22 02          0388*  		    db 2 ; clear buffer
040A23             0389*  @end:
040A23             0390*  
040A23             0391*  vdu_clear_all_buffers:
040A23             0392*  ; clear all buffers
040A23 21 2E 0A 04 0393*      ld hl,@beg
040A27 01 06 00 00 0394*      ld bc,@end-@beg
040A2B 5B DF       0395*      rst.lil $18
040A2D C9          0396*      ret
040A2E 17 00 A0    0397*  @beg: db 23,0,$A0
040A31 FF FF       0398*        dw -1 ; clear all buffers
040A33 02          0399*        db 2  ; command 2: clear a buffer
040A34             0400*  @end:
040A34             0401*  
040A34             0402*  ; Command 14: Consolidate blocks in a buffer
040A34             0403*  vdu_consolidate_buffer:
040A34             0404*  ; set parameters for vdu call
040A34 7D          0405*      ld a,l
040A35 32 4C 0A 04 0406*      ld (@bufferId),a
040A39 7C          0407*      ld a,h
040A3A 32 4D 0A 04 0408*      ld (@bufferId+1),a
040A3E 21 49 0A 04 0409*      ld hl,@beg
040A42 01 06 00 00 0410*      ld bc,@end-@beg
040A46 5B DF       0411*      rst.lil $18
040A48 C9          0412*      ret
040A49             0413*  ; VDU 23, 0, &A0, bufferId; 14
040A49 17 00 A0    0414*  @beg: db 23,0,0xA0
040A4C 00 00       0415*  @bufferId: dw 0x0000
040A4E 0E          0416*             db 14
040A4F             0417*  @end:
040A4F             0418*  
040A4F             0419*  ; load an image file to a buffer and make it a bitmap
040A4F             0420*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
040A4F             0421*  vdu_load_img:
040A4F             0422*  ; back up image type and dimension parameters
040A4F 22 D6 09 04 0423*      ld (bufferId0),hl
040A53 F5          0424*      push af
040A54 C5          0425*  	push bc
040A55 D5          0426*  	push de
040A56             0427*  ; load the image
040A56 CD 71 0A 04 0428*  	call vdu_load_buffer_from_file
040A5A             0429*  ; now make it a bitmap
040A5A 2A D6 09 04 0430*      ld hl,(bufferId0)
040A5E CD 34 0A 04 0431*      call vdu_consolidate_buffer
040A62 2A D6 09 04 0432*      ld hl,(bufferId0)
040A66 CD 15 09 04 0433*      call vdu_buff_select
040A6A D1          0434*  	pop de ; image height
040A6B C1          0435*  	pop bc ; image width
040A6C F1          0436*  	pop af ; image type
040A6D C3 2A 09 04 0437*  	jp vdu_bmp_create ; will return to caller from there
040A71             0438*  
040A71             0439*  ; inputs: hl = bufferId; iy = pointer to filename
040A71             0440*  vdu_load_buffer_from_file:
040A71 22 D6 09 04 0441*      ld (bufferId0),hl
040A75             0442*  
040A75             0443*  ; clear target buffer
040A75 CD 08 0A 04 0444*      call vdu_clear_buffer
040A79             0445*  
040A79             0446*  ; open the file in read mode
040A79             0447*  ; Open a file
040A79             0448*  ; HLU: Filename
040A79             0449*  ;   C: Mode
040A79             0450*  ; Returns:
040A79             0451*  ;   A: Filehandle, or 0 if couldn't open
040A79 FD E5       0452*  	push iy ; pointer to filename
040A7B E1          0453*  	pop hl
040A7C 0E 01       0454*  	ld c,fa_read
040A7E             0455*      MOSCALL mos_fopen
040A7E 3E 0A       0001*M 			LD	A, function
040A80 5B CF       0002*M 			RST.LIL	08h
040A82 32 BD 0A 04 0456*      ld (@filehandle),a
040A86             0457*  
040A86             0458*  @read_file:
040A86             0459*  ; Read a block of data from a file
040A86             0460*  ;   C: Filehandle
040A86             0461*  ; HLU: Pointer to where to write the data to
040A86             0462*  ; DEU: Number of bytes to read
040A86             0463*  ; Returns:
040A86             0464*  ; DEU: Number of bytes read
040A86 3A BD 0A 04 0465*      ld a,(@filehandle)
040A8A 4F          0466*      ld c,a
040A8B 21 00 E0 B7 0467*      ld hl,filedata
040A8F 11 00 20 00 0468*      ld de,8192 ; max we can read into onboard sram at one time
040A93             0469*      MOSCALL mos_fread
040A93 3E 1A       0001*M 			LD	A, function
040A95 5B CF       0002*M 			RST.LIL	08h
040A97             0470*  
040A97             0471*  ; ; DEBUG: print chunk size
040A97             0472*  ;     push de
040A97             0473*  ;     pop hl
040A97             0474*  ;     call printDec
040A97             0475*  ;     call printNewLine
040A97             0476*  
040A97             0477*  ; test de for zero bytes read
040A97 21 00 00 00 0478*      ld hl,0
040A9B AF          0479*      xor a ; clear carry
040A9C ED 52       0480*      sbc hl,de
040A9E CA B4 0A 04 0481*      jp z,@close_file
040AA2             0482*  
040AA2             0483*  ; load a vdu buffer from local memory
040AA2             0484*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
040AA2 2A D6 09 04 0485*      ld hl,(bufferId0)
040AA6 D5          0486*      push de ; chunksize
040AA7 C1          0487*      pop bc
040AA8 11 00 E0 B7 0488*      ld de,filedata
040AAC CD DC 09 04 0489*      call vdu_load_buffer
040AB0             0490*  
040AB0             0491*  ; ; print progress breadcrumbs
040AB0             0492*  ;     ld a,'.'
040AB0             0493*  ;     rst.lil 10h
040AB0             0494*  
040AB0             0495*  ; read the next block
040AB0 C3 86 0A 04 0496*      jp @read_file
040AB4             0497*  
040AB4             0498*  ; close the file
040AB4             0499*  @close_file:
040AB4 3A BD 0A 04 0500*      ld a,(@filehandle)
040AB8             0501*      MOSCALL mos_fclose
040AB8 3E 0B       0001*M 			LD	A, function
040ABA 5B CF       0002*M 			RST.LIL	08h
040ABC C9          0502*      ret ; vdu_load_buffer_from_file
040ABD             0503*  
040ABD 00          0504*  @filehandle: db 0 ; file handle
040ABE 00 00 00    0505*  @fil: dl 0 ; pointer to FIL struct
040AC1             0506*  
040AC1 00 00 00    0507*  @chunkpointer: dl 0 ; pointer to current chunk
040AC4             0508*  
040AC4             0509*  ; File information structure (FILINFO)
040AC4             0510*  @filinfo:
040AC4 00 00 00 00 0511*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
040AC8 00 00       0512*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
040ACA 00 00       0513*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
040ACC 00          0514*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
040ACD 00 00 00 00 0515*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
040ADA 00 00 00 00 0516*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040BDA             0036       include "vdu_fonts.inc"
040BDA             0001*  ; select font
040BDA             0002*  ; inputs: hl = bufferId, a = font flags
040BDA             0003*  ; Flags:
040BDA             0004*  ; Bit	Description
040BDA             0005*  ; 0	Adjust cursor position to ensure text baseline is aligned
040BDA             0006*  ;   0: Do not adjust cursor position (best for changing font on a new line)
040BDA             0007*  ;   1: Adjust cursor position (best for changing font in the middle of a line)
040BDA             0008*  ; 1-7	Reserved for future use
040BDA             0009*  ; VDU 23, 0, &95, 0, bufferId; flags: Select font
040BDA             0010*  vdu_font_select:
040BDA 22 F1 0B 04 0011*      ld (@bufferId),hl
040BDE 32 F3 0B 04 0012*      ld (@flags),a
040BE2 21 ED 0B 04 0013*      ld hl,@cmd
040BE6 01 07 00 00 0014*      ld bc,@end-@cmd
040BEA 5B DF       0015*      rst.lil $18
040BEC C9          0016*      ret
040BED 17 00 95 00 0017*  @cmd: db 23, 0, 0x95, 0
040BF1 00 00       0018*  @bufferId: dw 0x0000
040BF3 00          0019*  @flags: db 0x00
040BF4             0020*  @end:
040BF4             0021*  
040BF4             0022*  ; create font from buffer
040BF4             0023*  ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
040BF4             0024*  ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
040BF4             0025*  vdu_font_create:
040BF4 22 19 0C 04 0026*      ld (@bufferId),hl
040BF8 ED 53 1B 0C 0027*      ld (@width),de ; also loads height
       04          
040BFD 32 1E 0C 04 0028*      ld (@flags),a
040C01 7A          0029*      ld a,d ; height
040C02 32 1D 0C 04 0030*      ld (@ascent),a ; ascent = height
040C06             0031*  ; consolidate buffer
040C06 CD 34 0A 04 0032*      call vdu_consolidate_buffer
040C0A             0033*  ; create font
040C0A 21 15 0C 04 0034*      ld hl,@cmd
040C0E 01 0A 00 00 0035*      ld bc,@end-@cmd
040C12 5B DF       0036*      rst.lil $18
040C14 C9          0037*      ret
040C15 17 00 95 01 0038*  @cmd: db 23, 0, 0x95, 1
040C19 00 00       0039*  @bufferId: dw 0x0000
040C1B 00          0040*  @width: db 0x00
040C1C 00          0041*  @height: db 0x00
040C1D 00          0042*  @ascent: db 0x00
040C1E 00          0043*  @flags: db 0x00
040C1F             0044*  @end:
040C1F             0045*  
040C1F             0046*  ; set or adjust font property
040C1F             0047*  ; inputs: hl = bufferId, a = field, de = value
040C1F             0048*  ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
040C1F             0049*  vdu_font_property:
040C1F 22 3B 0C 04 0050*      ld (@bufferId),hl
040C23 32 3D 0C 04 0051*      ld (@field),a
040C27 ED 53 3E 0C 0052*      ld (@value),de
       04          
040C2C 21 37 0C 04 0053*      ld hl,@cmd
040C30 01 09 00 00 0054*      ld bc,@end-@cmd
040C34 5B DF       0055*      rst.lil $18
040C36 C9          0056*      ret
040C37 17 00 95 02 0057*  @cmd: db 23, 0, 0x95, 2
040C3B 00 00       0058*  @bufferId: dw 0x0000
040C3D 00          0059*  @field: db 0x00
040C3E 00 00       0060*  @value: dw 0x0000
040C40 00          0061*  @end: db 0x00 ; padding
040C41             0062*  
040C41             0063*  ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
040C41             0064*  
040C41             0065*  ; Clear/Delete font
040C41             0066*  ; inputs: hl = bufferId
040C41             0067*  ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
040C41             0068*  vdu_font_clear:
040C41 22 54 0C 04 0069*      ld (@bufferId),hl
040C45 21 50 0C 04 0070*      ld hl,@cmd
040C49 01 06 00 00 0071*      ld bc,@end-@cmd
040C4D 5B DF       0072*      rst.lil $18
040C4F C9          0073*      ret
040C50 17 00 95 04 0074*  @cmd: db 23, 0, 0x95, 4
040C54 00 00       0075*  @bufferId: dw 0x0000
040C56 00          0076*  @end: db 0x00 ; padding
040C57             0077*  
040C57             0078*  ; Copy system font to buffer
040C57             0079*  ; inputs: hl = bufferId
040C57             0080*  ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
040C57             0081*  vdu_font_copy_system:
040C57 22 6A 0C 04 0082*      ld (@bufferId),hl
040C5B 21 66 0C 04 0083*      ld hl,@cmd
040C5F 01 06 00 00 0084*      ld bc,@end-@cmd
040C63 5B DF       0085*      rst.lil $18
040C65 C9          0086*      ret
040C66 17 00 95 05 0087*  @cmd: db 23, 0, 0x95, 5
040C6A 00 00       0088*  @bufferId: dw 0x0000
040C6C 00          0089*  @end: db 0x00 ; padding
040C6D             0037   
040C6D             0038   ; Application includes
040C6D             0039   
040C6D             0040   main:
040C6D             0041   ; 19    1024  768   4     60hz
040C6D             0042       ; ld a,19
040C6D 3E 08       0043       ld a,8 ; 320x240x64 single-buffered
040C6F             0044       ; xor a ; 640x480x16 single-buffered
040C6F CD F1 08 04 0045       call vdu_set_screen_mode
040C73             0046   
040C73             0047   ; inputs: hl = bufferId; iy = pointer to filename
040C73 1E 0A       0048       ld e,neutrino_Regular_5x5
040C75 16 0C       0049       ld d,12 ; bytes per font list record
040C77 ED 5C       0050       mlt de
040C79 FD 21 88 04 0051       ld iy,font_list
       04          
040C7E FD 19       0052       add iy,de
040C80 FD E5       0053       push iy
040C82             0054   
040C82 FD 37 09    0055       ld iy,(iy+9)
040C85             0056   
040C85             0057   ; debug print filename at iy
040C85 CD 91 00 04 0058       call printNewLine
040C89 FD E5       0059       push iy
040C8B E1          0060       pop hl
040C8C CD 7C 00 04 0061       call printString
040C90 CD 91 00 04 0062       call printNewLine
040C94             0063   
040C94 21 00 40 00 0064       ld hl,0x4000
040C98 E5          0065       push hl
040C99 CD 71 0A 04 0066       call vdu_load_buffer_from_file
040C9D             0067   
040C9D             0068   ; create font from buffer
040C9D             0069   ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
040C9D             0070   ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
040C9D E1          0071       pop hl ; bufferId
040C9E FD E1       0072       pop iy ; pointer to font list record
040CA0 E5          0073       push hl
040CA1 FD 7E 00    0074       ld a,(iy+0)
040CA4 5F          0075       ld e,a  ; width
040CA5 FD 7E 03    0076       ld a,(iy+3)
040CA8 57          0077       ld d,a  ; height / ascent
040CA9 3E 00       0078       ld a,0 ; flags
040CAB CD F4 0B 04 0079       call vdu_font_create
040CAF             0080   
040CAF             0081   ; select font
040CAF             0082   ; inputs: hl = bufferId, a = font flags
040CAF             0083   ; Flags:
040CAF             0084   ; Bit	Description
040CAF             0085   ; 0	Adjust cursor position to ensure text baseline is aligned
040CAF             0086   ;   0: Do not adjust cursor position (best for changing font on a new line)
040CAF             0087   ;   1: Adjust cursor position (best for changing font in the middle of a line)
040CAF             0088   ; 1-7	Reserved for future use
040CAF             0089   ; VDU 23, 0, &95, 0, bufferId; flags: Select font
040CAF E1          0090       pop hl
040CB0 3E 00       0091       ld a,0
040CB2 CD DA 0B 04 0092       call vdu_font_select
040CB6             0093   
040CB6             0094   ; print test string
040CB6             0095       ; call printNewLine
040CB6 21 C3 0C 04 0096       ld hl,test_string
040CBA CD 7C 00 04 0097       call printString
040CBE CD 91 00 04 0098       call printNewLine
040CC2             0099   
040CC2             0100   ; all done
040CC2 C9          0101       ret
040CC3             0102   
040CC3             0103   
040CC3             0104   ; test_string: db "01234567890!@#$%^&*()\r\nabcdefghijklmnopqrstuvwxyz\r\nABCDEFGHIJKLMNOPQRSTUVWXYZ",0
040CC3             0105   test_string:
040CC3 20 21 22 23 0106       db 0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,13,10
       24 25 26 27 
       28 29 2A 2B 
       2C 2D 2E 2F 
       0D 0A       
040CD5 30 31 32 33 0107       db 0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,13,10
       34 35 36 37 
       38 39 3A 3B 
       3C 3D 3E 3F 
       0D 0A       
040CE7 40 41 42 43 0108       db 0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,13,10
       44 45 46 47 
       48 49 4A 4B 
       4C 4D 4E 4F 
       0D 0A       
040CF9 50 51 52 53 0109       db 0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,13,10
       54 55 56 57 
       58 59 5A 5B 
       5C 5D 5E 5F 
       0D 0A       
040D0B 60 61 62 63 0110       db 0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,13,10
       64 65 66 67 
       68 69 6A 6B 
       6C 6D 6E 6F 
       0D 0A       
040D1D 70 71 72 73 0111       db 0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F,13,10
       74 75 76 77 
       78 79 7A 7B 
       7C 7D 7E 7F 
       0D 0A       
040D2F             0112       ; db 0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,13,10
040D2F             0113       ; db 0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,13,10
040D2F             0114       ; db 0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,13,10
040D2F             0115       ; db 0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF,13,10
040D2F             0116       ; db 0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,13,10
040D2F             0117       ; db 0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF,13,10
040D2F             0118       ; db 0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,13,10
040D2F             0119       ; db 0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF,13,10
040D2F 00          0120       db 0x00
